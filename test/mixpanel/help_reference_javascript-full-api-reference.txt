Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					JavaScript Full API Reference
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								mixpanel.init
						Node:
						(type) c
						(layer)2
							Element:p
						Node:
						(type) c
						(layer)2
							Element:p
								This function initializes a new instance of the Mixpanel tracking object. All new instances are added to the main mixpanel object as sub properties (such as mixpanel.library_name) and also returned by this function. To define a second instance on the page, you would call:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								mixpanel.init('new token', { your: 'config' }, 'library_name');
						Node:
						(type) c
						(layer)2
							Element:p
								and use it like so:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								mixpanel.library_name.track(...);
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Arguments
											tokenString Your Mixpanel API token configObject A dictionary of config options to override.
									Node:
									(type) c
									(layer)3
										Element:a
											See a list of default config options
											. nameString The name for the new mixpanel instance that you want created
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								mixpanel.push
						Node:
						(type) c
						(layer)2
							Element:p
						Node:
						(type) c
						(layer)2
							Element:p
								push() keeps the standard async-array-push behavior around after the lib is loaded. This is only useful for external integrations that do not wish to rely on our convenience methods (created in the snippet).
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Usage:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											mixpanel.push(['register', { a: 'b' }]);
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Arguments
											itemArray A [function_name, args...] array to be executed
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								mixpanel.disable
						Node:
						(type) c
						(layer)2
							Element:p
						Node:
						(type) c
						(layer)2
							Element:p
								Disable events on the Mixpanel object. If passed no arguments, this function disables tracking of any event. If passed an array of event names, those events will be disabled, but other events will continue to be tracked.
						Node:
						(type) c
						(layer)2
							Element:p
								Note: this function does not stop other mixpanel functions from firing, such as register() or people.set().
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Arguments
											eventsArray An array of event names to disable
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								mixpanel.track
						Node:
						(type) c
						(layer)2
							Element:p
						Node:
						(type) c
						(layer)2
							Element:p
								Track an event. This is the most important and frequently used Mixpanel function.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Usage:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											// track an event named 'Registered' mixpanel.track('Registered', {'Gender': 'Male', 'Age': 21});
									Node:
									(type) c
									(layer)3
										Element:p
											To track link clicks or form submissions, see track_links() or track_forms().
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Arguments
											event_nameString The name of the event. This can be anything the user does - 'Button Click', 'Sign Up', 'Item Purchased', etc. propertiesObject A set of properties to include with the event you're sending. These describe the user who did the event or details about the event itself. callbackFunction If provided, the callback function will be called after tracking the event.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								mixpanel.track_links
						Node:
						(type) c
						(layer)2
							Element:p
						Node:
						(type) c
						(layer)2
							Element:p
								Track clicks on a set of document elements. Selector must be a valid query. Elements must exist on the page at the time track_links is called.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Usage:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											// track click for link id #nav mixpanel.track_links('#nav', 'Clicked Nav Link');
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Notes:
									Node:
									(type) c
									(layer)3
										Element:p
											This function will wait up to 300 ms for the Mixpanel servers to respond. If they have not responded by that time it will head to the link without ensuring that your event has been tracked. To configure this timeout please see the set_config() documentation below.
									Node:
									(type) c
									(layer)3
										Element:p
											If you pass a function in as the properties argument, the function will receive the DOMElement that triggered the event as an argument. You are expected to return an object from the function; any properties defined on this object will be sent to mixpanel as event properties.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Arguments
											queryObject or String A valid DOM query, element or jQuery-esque list event_nameString The name of the event to track propertiesObject or Function A properties object or function that returns a dictionary of properties when passed a DOMElement
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								mixpanel.track_forms
						Node:
						(type) c
						(layer)2
							Element:p
						Node:
						(type) c
						(layer)2
							Element:p
								Track form submissions. Selector must be a valid query.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Usage:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											// track submission for form id 'register' mixpanel.track_forms('#register', 'Created Account');
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Notes:
									Node:
									(type) c
									(layer)3
										Element:p
											This function will wait up to 300 ms for the mixpanel servers to respond, if they have not responded by that time it will head to the link without ensuring that your event has been tracked. To configure this timeout please see the set_config() documentation below.
									Node:
									(type) c
									(layer)3
										Element:p
											If you pass a function in as the properties argument, the function will receive the DOMElement that triggered the event as an argument. You are expected to return an object from the function; any properties defined on this object will be sent to mixpanel as event properties.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Arguments
											queryObject or String A valid DOM query, element or jQuery-esque list event_nameString The name of the event to track propertiesObject or Function This can be a set of properties, or a function that returns a set of properties after being passed a DOMElement
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								mixpanel.time_event
						Node:
						(type) c
						(layer)2
							Element:p
						Node:
						(type) c
						(layer)2
							Element:p
								Time an event by including the time between this call and a later 'track' call for the same event in the properties sent with the event.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Usage:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											// time an event named 'Registered' mixpanel.time_event('Registered'); mixpanel.track('Registered', {'Gender': 'Male', 'Age': 21});
									Node:
									(type) c
									(layer)3
										Element:p
											When called for a particular event name, the next track call for that event name will include the elapsed time between the 'time_event' and 'track' calls. This value is stored as seconds in the '$duration' property.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Arguments
											event_nameString The name of the event.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								mixpanel.register
						Node:
						(type) c
						(layer)2
							Element:p
						Node:
						(type) c
						(layer)2
							Element:p
								Register a set of super properties, which are included with all events. This will overwrite previous super property values.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Usage:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											// register 'Gender' as a super property mixpanel.register({'Gender': 'Female'}); // register several super properties when a user signs up mixpanel.register({ 'Email': '
										Element:a
											jdoe@example.com
											', 'Account Type': 'Free' });
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Arguments
											propertiesObject An associative array of properties to store about the user daysNumber How many days since the user's last visit to store the super properties
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								mixpanel.register_once
						Node:
						(type) c
						(layer)2
							Element:p
						Node:
						(type) c
						(layer)2
							Element:p
								Register a set of super properties only once. This will not overwrite previous super property values, unlike register().
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Usage:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											// register a super property for the first time only mixpanel.register_once({ 'First Login Date': new Date().toISOString() });
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Notes:
									Node:
									(type) c
									(layer)3
										Element:p
											If default_value is specified, current super properties with that value will be overwritten.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Arguments
											propertiesObject An associative array of properties to store about the user default_value* Value to override if already set in super properties (ex: 'False') Default: 'None' daysNumber How many days since the users last visit to store the super properties
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								mixpanel.unregister
						Node:
						(type) c
						(layer)2
							Element:p
						Node:
						(type) c
						(layer)2
							Element:p
								Delete a super property stored with the current user.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Arguments
											propertyString The name of the super property to remove
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								mixpanel.identify
						Node:
						(type) c
						(layer)2
							Element:p
						Node:
						(type) c
						(layer)2
							Element:p
								Identify a user with a unique ID instead of a Mixpanel randomly generated distinct_id. If the method is never called, then unique visitors will be identified by a UUID generated the first time they visit the site.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Notes:
									Node:
									(type) c
									(layer)3
										Element:p
											You can call this function to overwrite a previously set unique ID for the current user. Mixpanel cannot translate between IDs at this time, so when you change a user's ID they will appear to be a new user.
									Node:
									(type) c
									(layer)3
										Element:p
											When used alone, mixpanel.identify will change the user’s distinct_id to the unique ID provided. When used in tandem with mixpanel.alias, it will allow you to identify based on unique ID and map that back to the original, anonymous distinct_id given to the user upon her first arrival to your site (thus connecting anonymous pre-signup activity to post-signup activity). Though the two work together, do not call identify() at the same time as alias(). Calling the two at the same time can cause a race condition, so It is best practice to call identify on the original, anonymous ID right after you’ve aliased it.
										Element:a
											Learn more about how mixpanel.identify and mixpanel.alias can be used
											.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Arguments
											unique_idString A string that uniquely identifies a user. If not provided, the distinct_id currently in the persistent store (cookie or localStorage) will be used.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								mixpanel.reset
						Node:
						(type) c
						(layer)2
							Element:p
						Node:
						(type) c
						(layer)2
							Element:p
								Clears super properties and generates a new random distinct_id for this instance. Useful for clearing data when a user logs out.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								mixpanel.get_distinct_id
						Node:
						(type) c
						(layer)2
							Element:p
						Node:
						(type) c
						(layer)2
							Element:p
								Returns the current distinct id of the user. This is either the id automatically generated by the library or the id that has been passed by a call to identify().
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Notes:
									Node:
									(type) c
									(layer)3
										Element:p
											get_distinct_id() can only be called after the Mixpanel library has finished loading. init() has a loaded function available to handle this automatically. For example:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											// set distinct_id after the mixpanel library has loaded mixpanel.init('YOUR PROJECT TOKEN', { loaded: function(mixpanel) { distinct_id = mixpanel.get_distinct_id(); } });
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								mixpanel.alias
						Node:
						(type) c
						(layer)2
							Element:p
						Node:
						(type) c
						(layer)2
							Element:p
								Create an alias, which Mixpanel will use to link two distinct_ids going forward (not retroactively). Multiple aliases can map to the same original ID, but not vice-versa. Aliases can also be chained - the following is a valid scenario:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								mixpanel.alias('new_id', 'existing_id'); ... mixpanel.alias('newer_id', 'new_id');
						Node:
						(type) c
						(layer)2
							Element:p
								If the original ID is not passed in, we will use the current distinct_id - probably the auto-generated GUID.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Notes:
									Node:
									(type) c
									(layer)3
										Element:p
											The best practice is to call alias() when a unique ID is first created for a user (e.g., when a user first registers for an account and provides an email address). alias() should never be called more than once for a given user, except to chain a newer ID to a previously new ID, as described above.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Arguments
											aliasString A unique identifier that you want to use for this user in the future. originalString The current identifier being used for this user.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								mixpanel.set_config
						Node:
						(type) c
						(layer)2
							Element:p
						Node:
						(type) c
						(layer)2
							Element:p
								Update the configuration of a mixpanel library instance.
						Node:
						(type) c
						(layer)2
							Element:p
								The default config is:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								{ // super properties cookie expiration (in days) cookie_expiration: 365 // super properties span subdomains cross_subdomain_cookie: true // if this is true, the mixpanel cookie or localStorage entry // will be deleted, and no user persistence will take place disable_persistence: false // type of persistent store for super properties (cookie/ // localStorage) if set to 'localStorage', any existing // mixpanel cookie value with the same persistence_name // will be transferred to localStorage and deleted persistence: 'cookie' // name for super properties persistent store persistence_name: '' // names of properties/superproperties which should never // be sent with track() calls property_blacklist: [] // if this is true, mixpanel cookies will be marked as // secure, meaning they will only be transmitted over https secure_cookie: false // the amount of time track_links will // wait for Mixpanel's servers to respond track_links_timeout: 300 // if this is true, Mixpanel will automatically determine // City, Region and Country data using the IP address of //the client ip: true // should we track a page view on page load track_pageview: true // if you set upgrade to be true, the library will check for // a cookie from our old js library and import super // properties from it, then the old cookie is deleted // The upgrade config option only works in the initialization, // so make sure you set it when you create the library. upgrade: false }
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Arguments
											configObject A dictionary of new configuration values to update
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								mixpanel.get_config
						Node:
						(type) c
						(layer)2
							Element:p
						Node:
						(type) c
						(layer)2
							Element:p
								returns the current config object for the library.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								mixpanel.get_property
						Node:
						(type) c
						(layer)2
							Element:p
						Node:
						(type) c
						(layer)2
							Element:p
								Returns the value of the super property named property_name. If no such property is set, get_property() will return the undefined value.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Notes:
									Node:
									(type) c
									(layer)3
										Element:p
											get_property() can only be called after the Mixpanel library has finished loading. init() has a loaded function available to handle this automatically. For example:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											// grab value for 'user_id' after the mixpanel library has loaded mixpanel.init('YOUR PROJECT TOKEN', { loaded: function(mixpanel) { user_id = mixpanel.get_property('user_id'); } });
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Arguments
											property_nameString The name of the super property you want to retrieve
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								mixpanel.people.set
						Node:
						(type) c
						(layer)2
							Element:p
						Node:
						(type) c
						(layer)2
							Element:p
								Set properties on a user record.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Usage:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											mixpanel.people.set('gender', 'm'); // or set multiple properties at once mixpanel.people.set({ 'Company': 'Acme', 'Plan': 'Premium', 'Upgrade date': new Date() }); // properties can be strings, integers, dates, or lists
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Arguments
											propObject or String If a string, this is the name of the property. If an object, this is an associative array of names and values. to* A value to set on the given property name callbackFunction If provided, the callback will be called after the tracking event
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								mixpanel.people.set_once
						Node:
						(type) c
						(layer)2
							Element:p
						Node:
						(type) c
						(layer)2
							Element:p
								Set properties on a user record, only if they do not yet exist. This will not overwrite previous people property values, unlike people.set().
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Usage:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											mixpanel.people.set_once('First Login Date', new Date()); // or set multiple properties at once mixpanel.people.set_once({ 'First Login Date': new Date(), 'Starting Plan': 'Premium' }); // properties can be strings, integers or dates
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Arguments
											propObject or String If a string, this is the name of the property. If an object, this is an associative array of names and values. to* A value to set on the given property name callbackFunction If provided, the callback will be called after the tracking event
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								mixpanel.people.increment
						Node:
						(type) c
						(layer)2
							Element:p
						Node:
						(type) c
						(layer)2
							Element:p
								Increment/decrement numeric people analytics properties.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Usage:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											mixpanel.people.increment('page_views', 1); // or, for convenience, if you're just incrementing a counter by // 1, you can simply do mixpanel.people.increment('page_views'); // to decrement a counter, pass a negative number mixpanel.people.increment('credits_left', -1); // like mixpanel.people.set(), you can increment multiple // properties at once: mixpanel.people.increment({ counter1: 1, counter2: 6 });
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Arguments
											propObject or String If a string, this is the name of the property. If an object, this is an associative array of names and numeric values. byNumber An amount to increment the given property callbackFunction If provided, the callback will be called after the tracking event
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								mixpanel.people.append
						Node:
						(type) c
						(layer)2
							Element:p
						Node:
						(type) c
						(layer)2
							Element:p
								Append a value to a list-valued people analytics property.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Usage:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											// append a value to a list, creating it if needed mixpanel.people.append('pages_visited', 'homepage'); // like mixpanel.people.set(), you can append multiple // properties at once: mixpanel.people.append({ list1: 'bob', list2: 123 });
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Arguments
											propObject or String If a string, this is the name of the property. If an object, this is an associative array of names and values. value* An item to append to the list callbackFunction If provided, the callback will be called after the tracking event
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								mixpanel.people.union
						Node:
						(type) c
						(layer)2
							Element:p
						Node:
						(type) c
						(layer)2
							Element:p
								Merge a given list with a list-valued people analytics property, excluding duplicate values.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Usage:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											// merge a value to a list, creating it if needed mixpanel.people.union('pages_visited', 'homepage'); // like mixpanel.people.set(), you can append multiple // properties at once: mixpanel.people.union({ list1: 'bob', list2: 123 }); // like mixpanel.people.append(), you can append multiple // values to the same list: mixpanel.people.union({ list1: ['bob', 'billy'] });
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Arguments
											propObject or String If a string, this is the name of the property. If an object, this is an associative array of names and values. value* Value / values to merge with the given property callbackFunction If provided, the callback will be called after the tracking event
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								mixpanel.people.track_charge
						Node:
						(type) c
						(layer)2
							Element:p
						Node:
						(type) c
						(layer)2
							Element:p
								Record that you have charged the current user a certain amount of money. Charges recorded with track_charge() will appear in the Mixpanel revenue report.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Usage:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											// charge a user $50 mixpanel.people.track_charge(50); // charge a user $30.50 on the 2nd of january mixpanel.people.track_charge(30.50, { '$time': new Date('jan 1 2012') });
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Arguments
											amountNumber The amount of money charged to the current user propertiesObject An associative array of properties associated with the charge callbackFunction If provided, the callback will be called when the server responds
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								mixpanel.people.clear_charges
						Node:
						(type) c
						(layer)2
							Element:p
						Node:
						(type) c
						(layer)2
							Element:p
								Permanently clear all revenue report transactions from the current user's people analytics profile.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Usage:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											mixpanel.people.clear_charges();
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Arguments
											callbackFunction If provided, the callback will be called after the tracking event
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								mixpanel.people.delete_user
						Node:
						(type) c
						(layer)2
							Element:p
						Node:
						(type) c
						(layer)2
							Element:p
								Permanently deletes the current people analytics profile from Mixpanel (using the current distinct_id).
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Usage:
									Node:
									(type) c
									(layer)3
										Element:pre
											Document Sections
										Element:code
											// remove the all data you have stored about the current user mixpanel.people.delete_user();
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:a
											mixpanel.init
										Element:li
										Element:a
											mixpanel.push
										Element:li
										Element:a
											mixpanel.disable
										Element:li
										Element:a
											mixpanel.track
										Element:li
										Element:a
											mixpanel.track_links
										Element:li
										Element:a
											mixpanel.track_forms
										Element:li
										Element:a
											mixpanel.time_event
										Element:li
										Element:a
											mixpanel.register
										Element:li
										Element:a
											mixpanel.register_once
										Element:li
										Element:a
											mixpanel.unregister
										Element:li
										Element:a
											mixpanel.identify
										Element:li
										Element:a
											mixpanel.reset
										Element:li
										Element:a
											mixpanel.get_distinct_id
										Element:li
										Element:a
											mixpanel.alias
										Element:li
										Element:a
											mixpanel.set_config
										Element:li
										Element:a
											mixpanel.get_config
										Element:li
										Element:a
											mixpanel.get_property
										Element:li
										Element:a
											mixpanel.people.set
										Element:li
										Element:a
											mixpanel.people.set_once
										Element:li
										Element:a
											mixpanel.people.increment
										Element:li
										Element:a
											mixpanel.people.append
										Element:li
										Element:a
											mixpanel.people.union
										Element:li
										Element:a
											mixpanel.people.track_charge
										Element:li
										Element:a
											mixpanel.people.clear_charges
										Element:li
										Element:a
											mixpanel.people.delete_user
