Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					Walkthrough: writing a complex query
			Node:
			(type) c
			(layer)1
				Element:p
					In this section, we will work through a more complex query that uses many of the primitives provided by the API. By the end of this section, you should understand the different parts of a query and how they fit together, so you can get started writing your own.
			Node:
			(type) c
			(layer)1
				Element:p
					For our example query, we will find the 2 cities with the most users who are "highly active". In this example, we'll define a "highly active" user as someone who sent an event on at least three different days during the query interval.
			Node:
			(type) c
			(layer)1
				Element:p
					At a high level, this query will:
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:a
					Retrieve the events for the time range we care about
				Element:li
				Element:a
					Determine how many days each user was active
				Element:li
				Element:a
					Filter out users who were not active for at least 3 days
				Element:li
				Element:a
					Count the number of users in each city
				Element:li
				Element:a
					Finally, limit the results to the top 2 cities by count
			Node:
			(type) c
			(layer)1
				Element:p
					Here's the whole query. Next, we'll walk through each of the parts.
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
					function
				Element:span
					main
				Element:span
					()
				Element:span
					{
				Element:span
					// Get all events in the given date range
				Element:span
					return
				Element:span
					Events
				Element:span
					({
				Element:span
					from_date
				Element:span
					:
				Element:span
					params
				Element:span
					.
				Element:span
					from_date
				Element:span
					,
				Element:span
					to_date
				Element:span
					:
				Element:span
					params
				Element:span
					.
				Element:span
					to_date
				Element:span
					,
				Element:span
					})
				Element:span
					// Group them by user distinct_id, and call the provided function.
				Element:span
					.
				Element:span
					groupByUser
				Element:span
					(
				Element:span
					function
				Element:span
					(
				Element:span
					state
				Element:span
					,
				Element:span
					events
				Element:span
					)
				Element:span
					{
				Element:span
					// create a default user state if none exists
				Element:span
					state
				Element:span
					=
				Element:span
					state
				Element:span
					||
				Element:span
					{
				Element:span
					last_day_active
				Element:span
					:
				Element:span
					new
				Element:span
					Date
				Element:span
					(
				Element:span
					0
				Element:span
					),
				Element:span
					num_days_active
				Element:span
					:
				Element:span
					0
				Element:span
					,
				Element:span
					city
				Element:span
					:
				Element:span
					events
				Element:span
					[
				Element:span
					0
				Element:span
					].
				Element:span
					properties
				Element:span
					.
				Element:span
					$city
				Element:span
					,
				Element:span
					};
				Element:span
					// loop through the user's events, counting the distinct days seen
				Element:span
					_
				Element:span
					.
				Element:span
					each
				Element:span
					(
				Element:span
					events
				Element:span
					,
				Element:span
					function
				Element:span
					(
				Element:span
					event
				Element:span
					)
				Element:span
					{
				Element:span
					var
				Element:span
					time
				Element:span
					=
				Element:span
					new
				Element:span
					Date
				Element:span
					(
				Element:span
					event
				Element:span
					.
				Element:span
					time
				Element:span
					);
				Element:span
					// convert seconds to ms
				Element:span
					var
				Element:span
					day
				Element:span
					=
				Element:span
					new
				Element:span
					Date
				Element:span
					(
				Element:span
					time
				Element:span
					.
				Element:span
					getFullYear
				Element:span
					(),
				Element:span
					time
				Element:span
					.
				Element:span
					getMonth
				Element:span
					(),
				Element:span
					time
				Element:span
					.
				Element:span
					getDate
				Element:span
					());
				Element:span
					if
				Element:span
					(
				Element:span
					day
				Element:span
					>
				Element:span
					state
				Element:span
					.
				Element:span
					last_day_active
				Element:span
					)
				Element:span
					{
				Element:span
					state
				Element:span
					.
				Element:span
					last_day_active
				Element:span
					=
				Element:span
					day
				Element:span
					;
				Element:span
					state
				Element:span
					.
				Element:span
					num_days_active
				Element:span
					++
				Element:span
					;
				Element:span
					}
				Element:span
					});
				Element:span
					return
				Element:span
					state
				Element:span
					;
				Element:span
					})
				Element:span
					// Only keep entries where the num_days_active property is at least 3
				Element:span
					.
				Element:span
					filter
				Element:span
					(
				Element:span
					function
				Element:span
					(
				Element:span
					item
				Element:span
					)
				Element:span
					{
				Element:span
					return
				Element:span
					item
				Element:span
					.
				Element:span
					value
				Element:span
					.
				Element:span
					num_days_active
				Element:span
					>=
				Element:span
					3
				Element:span
					;
				Element:span
					})
				Element:span
					// Group entries by 'city' and count them up.
				Element:span
					.
				Element:span
					groupBy
				Element:span
					([
				Element:span
					"value.city"
				Element:span
					],
				Element:span
					mixpanel
				Element:span
					.
				Element:span
					reducer
				Element:span
					.
				Element:span
					count
				Element:span
					())
				Element:span
					// Limit the result set to the top 2 cities
				Element:span
					.
				Element:span
					reduce
				Element:span
					(
				Element:span
					mixpanel
				Element:span
					.
				Element:span
					reducer
				Element:span
					.
				Element:span
					top
				Element:span
					(
				Element:span
					2
				Element:span
					));
				Element:span
					}
			Node:
			(type) c
			(layer)1
				Element:p
					This example makes use of a number of important concepts that we will explain individually. As we work through the example, we will assume that we are running this query against a Mixpanel project where the following events have been tracked:
			Node:
			(type) c
			(layer)1
				Element:p
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
					[
				Element:span
					{
				Element:span
					distinct_id
				Element:span
					:
				Element:span
					'alice@example.com'
				Element:span
					,
				Element:span
					name
				Element:span
					:
				Element:span
					'signup'
				Element:span
					,
				Element:span
					time
				Element:span
					:
				Element:span
					'2015-10-01 12:00:00'
				Element:span
					,
				Element:span
					properties
				Element:span
					:
				Element:span
					{
				Element:span
					city
				Element:span
					:
				Element:span
					'San Francisco'
				Element:span
					}},
				Element:span
					{
				Element:span
					distinct_id
				Element:span
					:
				Element:span
					'alice@example.com'
				Element:span
					,
				Element:span
					name
				Element:span
					:
				Element:span
					'logout'
				Element:span
					,
				Element:span
					time
				Element:span
					:
				Element:span
					'2015-10-04 12:00:00'
				Element:span
					,
				Element:span
					properties
				Element:span
					:
				Element:span
					{
				Element:span
					city
				Element:span
					:
				Element:span
					'San Francisco'
				Element:span
					}},
				Element:span
					{
				Element:span
					distinct_id
				Element:span
					:
				Element:span
					'alice@example.com'
				Element:span
					,
				Element:span
					name
				Element:span
					:
				Element:span
					'invite'
				Element:span
					,
				Element:span
					time
				Element:span
					:
				Element:span
					'2015-10-04 16:00:00'
				Element:span
					,
				Element:span
					properties
				Element:span
					:
				Element:span
					{
				Element:span
					city
				Element:span
					:
				Element:span
					'San Francisco'
				Element:span
					}},
				Element:span
					{
				Element:span
					distinct_id
				Element:span
					:
				Element:span
					'alice@example.com'
				Element:span
					,
				Element:span
					name
				Element:span
					:
				Element:span
					'attack'
				Element:span
					,
				Element:span
					time
				Element:span
					:
				Element:span
					'2015-10-05 12:00:00'
				Element:span
					,
				Element:span
					properties
				Element:span
					:
				Element:span
					{
				Element:span
					city
				Element:span
					:
				Element:span
					'San Francisco'
				Element:span
					}},
				Element:span
					{
				Element:span
					distinct_id
				Element:span
					:
				Element:span
					'bob@example.com'
				Element:span
					,
				Element:span
					name
				Element:span
					:
				Element:span
					'logout'
				Element:span
					,
				Element:span
					time
				Element:span
					:
				Element:span
					'2015-10-10 12:00:00'
				Element:span
					,
				Element:span
					properties
				Element:span
					:
				Element:span
					{
				Element:span
					city
				Element:span
					:
				Element:span
					'Barcelona'
				Element:span
					}},
				Element:span
					{
				Element:span
					distinct_id
				Element:span
					:
				Element:span
					'carol@example.com'
				Element:span
					,
				Element:span
					name
				Element:span
					:
				Element:span
					'login'
				Element:span
					,
				Element:span
					time
				Element:span
					:
				Element:span
					'2015-10-14 12:00:00'
				Element:span
					,
				Element:span
					properties
				Element:span
					:
				Element:span
					{
				Element:span
					city
				Element:span
					:
				Element:span
					'Paris'
				Element:span
					}},
				Element:span
					{
				Element:span
					distinct_id
				Element:span
					:
				Element:span
					'carol@example.com'
				Element:span
					,
				Element:span
					name
				Element:span
					:
				Element:span
					'attack'
				Element:span
					,
				Element:span
					time
				Element:span
					:
				Element:span
					'2015-10-15 02:00:00'
				Element:span
					,
				Element:span
					properties
				Element:span
					:
				Element:span
					{
				Element:span
					city
				Element:span
					:
				Element:span
					'Paris'
				Element:span
					}},
				Element:span
					{
				Element:span
					distinct_id
				Element:span
					:
				Element:span
					'carol@example.com'
				Element:span
					,
				Element:span
					name
				Element:span
					:
				Element:span
					'purchase'
				Element:span
					,
				Element:span
					time
				Element:span
					:
				Element:span
					'2015-10-16 16:00:00'
				Element:span
					,
				Element:span
					properties
				Element:span
					:
				Element:span
					{
				Element:span
					city
				Element:span
					:
				Element:span
					'Paris'
				Element:span
					}},
				Element:span
					{
				Element:span
					distinct_id
				Element:span
					:
				Element:span
					'carol@example.com'
				Element:span
					,
				Element:span
					name
				Element:span
					:
				Element:span
					'logout'
				Element:span
					,
				Element:span
					time
				Element:span
					:
				Element:span
					'2015-10-17 23:59:00'
				Element:span
					,
				Element:span
					properties
				Element:span
					:
				Element:span
					{
				Element:span
					city
				Element:span
					:
				Element:span
					'Paris'
				Element:span
					}},
				Element:span
					{
				Element:span
					distinct_id
				Element:span
					:
				Element:span
					'daniel@example.com'
				Element:span
					,
				Element:span
					name
				Element:span
					:
				Element:span
					'logout'
				Element:span
					,
				Element:span
					time
				Element:span
					:
				Element:span
					'2015-10-18 12:00:00'
				Element:span
					,
				Element:span
					properties
				Element:span
					:
				Element:span
					{
				Element:span
					city
				Element:span
					:
				Element:span
					'San Francisco'
				Element:span
					}},
				Element:span
					{
				Element:span
					distinct_id
				Element:span
					:
				Element:span
					'daniel@example.com'
				Element:span
					,
				Element:span
					name
				Element:span
					:
				Element:span
					'login'
				Element:span
					,
				Element:span
					time
				Element:span
					:
				Element:span
					'2015-10-19 02:00:00'
				Element:span
					,
				Element:span
					properties
				Element:span
					:
				Element:span
					{
				Element:span
					city
				Element:span
					:
				Element:span
					'San Francisco'
				Element:span
					}},
				Element:span
					{
				Element:span
					distinct_id
				Element:span
					:
				Element:span
					'daniel@example.com'
				Element:span
					,
				Element:span
					name
				Element:span
					:
				Element:span
					'attack'
				Element:span
					,
				Element:span
					time
				Element:span
					:
				Element:span
					'2015-10-20 16:00:00'
				Element:span
					,
				Element:span
					properties
				Element:span
					:
				Element:span
					{
				Element:span
					city
				Element:span
					:
				Element:span
					'San Francisco'
				Element:span
					}},
				Element:span
					{
				Element:span
					distinct_id
				Element:span
					:
				Element:span
					'erin@example.com'
				Element:span
					,
				Element:span
					name
				Element:span
					:
				Element:span
					'logout'
				Element:span
					,
				Element:span
					time
				Element:span
					:
				Element:span
					'2015-10-21 12:00:00'
				Element:span
					,
				Element:span
					properties
				Element:span
					:
				Element:span
					{
				Element:span
					city
				Element:span
					:
				Element:span
					'Paris'
				Element:span
					}},
				Element:span
					{
				Element:span
					distinct_id
				Element:span
					:
				Element:span
					'erin@example.com'
				Element:span
					,
				Element:span
					name
				Element:span
					:
				Element:span
					'login'
				Element:span
					,
				Element:span
					time
				Element:span
					:
				Element:span
					'2015-10-22 02:00:00'
				Element:span
					,
				Element:span
					properties
				Element:span
					:
				Element:span
					{
				Element:span
					city
				Element:span
					:
				Element:span
					'Paris'
				Element:span
					}},
				Element:span
					{
				Element:span
					distinct_id
				Element:span
					:
				Element:span
					'erin@example.com'
				Element:span
					,
				Element:span
					name
				Element:span
					:
				Element:span
					'attack'
				Element:span
					,
				Element:span
					time
				Element:span
					:
				Element:span
					'2015-10-23 16:00:00'
				Element:span
					,
				Element:span
					properties
				Element:span
					:
				Element:span
					{
				Element:span
					city
				Element:span
					:
				Element:span
					'Paris'
				Element:span
					}},
				Element:span
					{
				Element:span
					distinct_id
				Element:span
					:
				Element:span
					'frank@example.com'
				Element:span
					,
				Element:span
					name
				Element:span
					:
				Element:span
					'login'
				Element:span
					,
				Element:span
					time
				Element:span
					:
				Element:span
					'2015-10-24 02:00:00'
				Element:span
					,
				Element:span
					properties
				Element:span
					:
				Element:span
					{
				Element:span
					city
				Element:span
					:
				Element:span
					'New York'
				Element:span
					}},
				Element:span
					{
				Element:span
					distinct_id
				Element:span
					:
				Element:span
					'frank@example.com'
				Element:span
					,
				Element:span
					name
				Element:span
					:
				Element:span
					'attack'
				Element:span
					,
				Element:span
					time
				Element:span
					:
				Element:span
					'2015-10-25 16:00:00'
				Element:span
					,
				Element:span
					properties
				Element:span
					:
				Element:span
					{
				Element:span
					city
				Element:span
					:
				Element:span
					'New York'
				Element:span
					}},
				Element:span
					{
				Element:span
					distinct_id
				Element:span
					:
				Element:span
					'frank@example.com'
				Element:span
					,
				Element:span
					name
				Element:span
					:
				Element:span
					'attack'
				Element:span
					,
				Element:span
					time
				Element:span
					:
				Element:span
					'2015-10-26 23:59:00'
				Element:span
					,
				Element:span
					properties
				Element:span
					:
				Element:span
					{
				Element:span
					city
				Element:span
					:
				Element:span
					'New York'
				Element:span
					}}
				Element:span
					]
			Node:
			(type) c
			(layer)1
				Element:p
					If you look closely at this data, you'll see that there are two users from San Francisco (Alice and Daniel), two from Paris (Carol and Erin) and one from New York (Frank), all of whom satisfy our "sent events on at least 3 different days" criteria. There is one user (Bob from Barcelona) who only sent one event, and thus does not qualify as an active user.
			Node:
			(type) c
			(layer)1
				Element:p
					So we expect our query to return the top two cities, San Francisco and Paris. Let's work through the query step by step to see how it works.
			Node:
			(type) c
			(layer)1
				Element:hr
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
											Defining your main() function
									Node:
									(type) c
									(layer)3
										Element:p
											Every JQL query must define a
										Element:code
											main()
											function. This function is executed by our query engine, and its return value is returned to you via HTTP.
									Node:
									(type) c
									(layer)3
										Element:p
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											function
										Element:span
											main
										Element:span
											()
										Element:span
											{
										Element:span
											// ...
										Element:span
											}
									Node:
									(type) c
									(layer)3
										Element:hr
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
											Selecting events for the time range we care about
									Node:
									(type) c
									(layer)3
										Element:p
											Every JQL query must return a call to the
										Element:code
											Events()
											function:
									Node:
									(type) c
									(layer)3
										Element:p
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											function
										Element:span
											main
										Element:span
											()
										Element:span
											{
										Element:span
											return
										Element:span
											Events
										Element:span
											({
										Element:span
											start_date
										Element:span
											:
										Element:span
											params
										Element:span
											.
										Element:span
											start_date
										Element:span
											,
										Element:span
											end_date
										Element:span
											:
										Element:span
											params
										Element:span
											.
										Element:span
											end_date
										Element:span
											,
										Element:span
											});
										Element:span
											}
									Node:
									(type) c
									(layer)3
										Element:p
											This function fetches all of the events that happened in the given date range. Here we are making the date range configurable by using
										Element:code
											params
											, which is a global variable containing the set of parameters passed to the JQL API endpoint.
										Element:code
											params
											makes it possible for you to reuse the same JavaScript query across different date ranges or parameterize it in other ways.
									Node:
									(type) c
									(layer)3
										Element:p
										Element:code
											Events()
											selects a set of events, but to do any useful analysis you must process those events. To do this, we use the concept of
										Element:b
											transformations
											. A transformation is applied to a dataset (such as a list of events), where it modifies the dataset in some way and returns the transformed data. Transformations can be chained, with each additional transformation acting on the output of the previous one.
									Node:
									(type) c
									(layer)3
										Element:p
											In this query, we use a number of different transformations:
										Element:code
											.groupByUser()
											,
										Element:code
											.filter()
											,
										Element:code
											.groupBy()
											, and
										Element:code
											.reduce()
											. Each of these transformations accepts one or more user-defined functions, which they use to modify the dataset.
									Node:
									(type) c
									(layer)3
										Element:hr
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
											Determine how many days each user was active
									Node:
									(type) c
									(layer)3
										Element:p
											To determine how many days each user was active, we will use the
										Element:code
											groupByUser()
											transformation. This will let us process all of the events for a user at once, which will make it much easier to figure out how many days they were active.
									Node:
									(type) c
									(layer)3
										Element:p
											This transformation instructs Mixpanel to group events together based on the
										Element:code
											distinct_id
											property of each event. Then, it calls the provided reduce function on the list of events for each user. The output of
										Element:code
											groupByUser()
											is a collection of key-value pairs, represented as
										Element:br
										Element:span
											{ key: [user distinct_id], value: return value of the reduce function }
											objects.
									Node:
									(type) c
									(layer)3
										Element:p
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											function
										Element:span
											main
										Element:span
											()
										Element:span
											{
										Element:span
											// Get all events in the given date range
										Element:span
											return
										Element:span
											Events
										Element:span
											({
										Element:span
											from_date
										Element:span
											:
										Element:span
											params
										Element:span
											.
										Element:span
											from_date
										Element:span
											,
										Element:span
											to_date
										Element:span
											:
										Element:span
											params
										Element:span
											.
										Element:span
											to_date
										Element:span
											,
										Element:span
											})
										Element:span
											// Group them by user distinct_id, and call the provided function.
										Element:span
											.
										Element:span
											groupByUser
										Element:span
											(
										Element:span
											function
										Element:span
											(
										Element:span
											state
										Element:span
											,
										Element:span
											events
										Element:span
											)
										Element:span
											{
										Element:span
											// create a default user state if none exists
										Element:span
											state
										Element:span
											=
										Element:span
											state
										Element:span
											||
										Element:span
											{
										Element:span
											last_day_active
										Element:span
											:
										Element:span
											new
										Element:span
											Date
										Element:span
											(
										Element:span
											0
										Element:span
											),
										Element:span
											num_days_active
										Element:span
											:
										Element:span
											0
										Element:span
											,
										Element:span
											city
										Element:span
											:
										Element:span
											events
										Element:span
											[
										Element:span
											0
										Element:span
											].
										Element:span
											properties
										Element:span
											.
										Element:span
											$city
										Element:span
											,
										Element:span
											};
										Element:span
											// loop through the user's events, counting the distinct days seen
										Element:span
											_
										Element:span
											.
										Element:span
											each
										Element:span
											(
										Element:span
											events
										Element:span
											,
										Element:span
											function
										Element:span
											(
										Element:span
											event
										Element:span
											)
										Element:span
											{
										Element:span
											var
										Element:span
											time
										Element:span
											=
										Element:span
											new
										Element:span
											Date
										Element:span
											(
										Element:span
											event
										Element:span
											.
										Element:span
											time
										Element:span
											);
										Element:span
											// convert seconds to ms
										Element:span
											var
										Element:span
											day
										Element:span
											=
										Element:span
											new
										Element:span
											Date
										Element:span
											(
										Element:span
											time
										Element:span
											.
										Element:span
											getFullYear
										Element:span
											(),
										Element:span
											time
										Element:span
											.
										Element:span
											getMonth
										Element:span
											(),
										Element:span
											time
										Element:span
											.
										Element:span
											getDate
										Element:span
											());
										Element:span
											if
										Element:span
											(
										Element:span
											day
										Element:span
											>
										Element:span
											state
										Element:span
											.
										Element:span
											last_day_active
										Element:span
											)
										Element:span
											{
										Element:span
											state
										Element:span
											.
										Element:span
											last_day_active
										Element:span
											=
										Element:span
											day
										Element:span
											;
										Element:span
											state
										Element:span
											.
										Element:span
											num_days_active
										Element:span
											++
										Element:span
											;
										Element:span
											}
										Element:span
											});
										Element:span
											return
										Element:span
											state
										Element:span
											;
										Element:span
											})
										Element:span
											}
									Node:
									(type) c
									(layer)3
										Element:p
											As we mentioned earlier, all transformations accept a
										Element:b
											function
											argument, which they use to modify the dataset they are applied to. For
										Element:code
											groupByUser()
											, the reduce function is typically used to aggregate some information about each user. In this example, we are using our reduce function to figure out what city a user is from and how many days they have been active.
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
											Writing a reduce function for groupByUser
									Node:
									(type) c
									(layer)3
										Element:p
											The list of events for a user is provided to the reduce function as its second argument. When this list is long, we may break up the list into smaller chunks and process it across multiple calls to the reduce function. When that happens, the
										Element:span
											state
											argument is used for sharing state across calls.
									Node:
									(type) c
									(layer)3
										Element:p
											Each time the reduce function is called, the return value of the previous call is provided as a
										Element:span
											state
											argument. Initially,
										Element:span
											state
											is
										Element:span
											Undefined
											. The return value of the last call becomes the result associated with the given user, so it is important to merge new results with old before returning from your function.
									Node:
									(type) c
									(layer)3
										Element:p
											In the example above, the first call to the reduce function initializes state to be an object with three fields: the last day user was active, total number of days the user was active, and the city the user is located in.
									Node:
									(type) c
									(layer)3
										Element:p
											Events for a given user can originate from multiple cities; in this example, we associate the city of the first event with the user, for simplicity. Two other fields -
										Element:span
											last_day_active
											and
										Element:span
											num_days_active
											- are updated as more events are processed by the reduce function.
									Node:
									(type) c
									(layer)3
										Element:p
											When we execute the query we have built up so far, we will see data for all 6 users:
									Node:
									(type) c
									(layer)3
										Element:p
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											[
										Element:span
											{
										Element:span
											"key"
										Element:span
											:
										Element:span
											[
										Element:span
											"alice@example.com"
										Element:span
											],
										Element:span
											"value"
										Element:span
											:
										Element:span
											{
										Element:span
											"city"
										Element:span
											:
										Element:span
											"San Francisco"
										Element:span
											,
										Element:span
											"num_days_active"
										Element:span
											:
										Element:span
											3
										Element:span
											,
										Element:span
											"last_day_active"
										Element:span
											:
										Element:span
											"2015-10-05"
										Element:span
											}
										Element:span
											},
										Element:span
											{
										Element:span
											"key"
										Element:span
											:
										Element:span
											[
										Element:span
											"bob@example.com"
										Element:span
											],
										Element:span
											"value"
										Element:span
											:
										Element:span
											{
										Element:span
											"city"
										Element:span
											:
										Element:span
											"Barcelona"
										Element:span
											,
										Element:span
											"num_days_active"
										Element:span
											:
										Element:span
											1
										Element:span
											,
										Element:span
											"last_day_active"
										Element:span
											:
										Element:span
											"2015-10-10"
										Element:span
											}
										Element:span
											},
										Element:span
											{
										Element:span
											"key"
										Element:span
											:
										Element:span
											[
										Element:span
											"carol@example.com"
										Element:span
											],
										Element:span
											"value"
										Element:span
											:
										Element:span
											{
										Element:span
											"city"
										Element:span
											:
										Element:span
											"Paris"
										Element:span
											,
										Element:span
											"num_days_active"
										Element:span
											:
										Element:span
											4
										Element:span
											,
										Element:span
											"last_day_active"
										Element:span
											:
										Element:span
											"2015-10-17"
										Element:span
											}
										Element:span
											},
										Element:span
											{
										Element:span
											"key"
										Element:span
											:
										Element:span
											[
										Element:span
											"daniel@example.com"
										Element:span
											],
										Element:span
											"value"
										Element:span
											:
										Element:span
											{
										Element:span
											"city"
										Element:span
											:
										Element:span
											"San Francisco"
										Element:span
											,
										Element:span
											"num_days_active"
										Element:span
											:
										Element:span
											3
										Element:span
											,
										Element:span
											"last_day_active"
										Element:span
											:
										Element:span
											"2015-10-20"
										Element:span
											}
										Element:span
											},
										Element:span
											{
										Element:span
											"key"
										Element:span
											:
										Element:span
											[
										Element:span
											"erin@example.com"
										Element:span
											],
										Element:span
											"value"
										Element:span
											:
										Element:span
											{
										Element:span
											"city"
										Element:span
											:
										Element:span
											"Paris"
										Element:span
											,
										Element:span
											"num_days_active"
										Element:span
											:
										Element:span
											3
										Element:span
											,
										Element:span
											"last_day_active"
										Element:span
											:
										Element:span
											"2015-10-23"
										Element:span
											}
										Element:span
											},
										Element:span
											{
										Element:span
											"key"
										Element:span
											:
										Element:span
											[
										Element:span
											"frank@example.com"
										Element:span
											],
										Element:span
											"value"
										Element:span
											:
										Element:span
											{
										Element:span
											"city"
										Element:span
											:
										Element:span
											"New York"
										Element:span
											,
										Element:span
											"num_days_active"
										Element:span
											:
										Element:span
											3
										Element:span
											,
										Element:span
											"last_day_active"
										Element:span
											:
										Element:span
											"2015-10-26"
										Element:span
											}
										Element:span
											}
										Element:span
											]
									Node:
									(type) c
									(layer)3
										Element:hr
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
											Filtering out users who were not active for at least 3 days
									Node:
									(type) c
									(layer)3
										Element:p
											If you recall, in this query we only care about active users (defined as users who sent events in at least 3 different days). To achieve this, we will use the
										Element:code
											filter()
											transformation to filter down the collection returned from
										Element:span
											groupByUser()
											.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											.
										Element:span
											filter
										Element:span
											(
										Element:span
											function
										Element:span
											(
										Element:span
											item
										Element:span
											)
										Element:span
											{
										Element:span
											return
										Element:span
											item
										Element:span
											.
										Element:span
											value
										Element:span
											.
										Element:span
											num_days_active
										Element:span
											>=
										Element:span
											3
										Element:span
											;
										Element:span
											})
									Node:
									(type) c
									(layer)3
										Element:p
											This
										Element:span
											filter()
											transformation instructs Mixpanel to only keep elements of the collection that make the filter function evaluate to
										Element:span
											true
											. The filter function is a JavaScript function that takes an element of a collection as an argument and returns a boolean.
									Node:
									(type) c
									(layer)3
										Element:p
											The previous transformation returned a collection of key-value pairs (shown above). Therefore, the filter function must deference value before reaching to the num_days_active property:
										Element:span
											value.num_days_active
											.
									Node:
									(type) c
									(layer)3
										Element:p
											When applied to the output shown above, this expression filters out the entry for bob@example.com, leaving us with 5 users: 2 from San Francisco, 2 from Paris, and 1 from New York:
									Node:
									(type) c
									(layer)3
										Element:p
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											[
										Element:span
											{
										Element:span
											"key"
										Element:span
											:
										Element:span
											[
										Element:span
											"alice@example.com"
										Element:span
											],
										Element:span
											"value"
										Element:span
											:
										Element:span
											{
										Element:span
											"city"
										Element:span
											:
										Element:span
											"San Francisco"
										Element:span
											,
										Element:span
											"num_days_active"
										Element:span
											:
										Element:span
											3
										Element:span
											,
										Element:span
											"last_day_active"
										Element:span
											:
										Element:span
											"2015-10-05"
										Element:span
											}
										Element:span
											},
										Element:span
											{
										Element:span
											"key"
										Element:span
											:
										Element:span
											[
										Element:span
											"carol@example.com"
										Element:span
											],
										Element:span
											"value"
										Element:span
											:
										Element:span
											{
										Element:span
											"city"
										Element:span
											:
										Element:span
											"Paris"
										Element:span
											,
										Element:span
											"num_days_active"
										Element:span
											:
										Element:span
											4
										Element:span
											,
										Element:span
											"last_day_active"
										Element:span
											:
										Element:span
											"2015-10-17"
										Element:span
											}
										Element:span
											},
										Element:span
											{
										Element:span
											"key"
										Element:span
											:
										Element:span
											[
										Element:span
											"daniel@example.com"
										Element:span
											],
										Element:span
											"value"
										Element:span
											:
										Element:span
											{
										Element:span
											"city"
										Element:span
											:
										Element:span
											"San Francisco"
										Element:span
											,
										Element:span
											"num_days_active"
										Element:span
											:
										Element:span
											3
										Element:span
											,
										Element:span
											"last_day_active"
										Element:span
											:
										Element:span
											"2015-10-20"
										Element:span
											}
										Element:span
											},
										Element:span
											{
										Element:span
											"key"
										Element:span
											:
										Element:span
											[
										Element:span
											"erin@example.com"
										Element:span
											],
										Element:span
											"value"
										Element:span
											:
										Element:span
											{
										Element:span
											"city"
										Element:span
											:
										Element:span
											"Paris"
										Element:span
											,
										Element:span
											"num_days_active"
										Element:span
											:
										Element:span
											3
										Element:span
											,
										Element:span
											"last_day_active"
										Element:span
											:
										Element:span
											"2015-10-23"
										Element:span
											}
										Element:span
											},
										Element:span
											{
										Element:span
											"key"
										Element:span
											:
										Element:span
											[
										Element:span
											"frank@example.com"
										Element:span
											],
										Element:span
											"value"
										Element:span
											:
										Element:span
											{
										Element:span
											"city"
										Element:span
											:
										Element:span
											"New York"
										Element:span
											,
										Element:span
											"num_days_active"
										Element:span
											:
										Element:span
											3
										Element:span
											,
										Element:span
											"last_day_active"
										Element:span
											:
										Element:span
											"2015-10-26"
										Element:span
											}
										Element:span
											}
										Element:span
											]
									Node:
									(type) c
									(layer)3
										Element:hr
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
											Count the number of users in each city
									Node:
									(type) c
									(layer)3
										Element:p
											Now that we've filtered our collection down to only active users, we need to figure out how many users are in each city. To do this, we will use the
										Element:code
											groupBy()
											transformation to group the collection by city and count the number of users in each group.
									Node:
									(type) c
									(layer)3
										Element:p
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											.
										Element:span
											groupBy
										Element:span
											([
										Element:span
											"value.city"
										Element:span
											],
										Element:span
											mixpanel
										Element:span
											.
										Element:span
											reducer
										Element:span
											.
										Element:span
											count
										Element:span
											());
									Node:
									(type) c
									(layer)3
										Element:p
										Element:code
											groupBy()
											accepts a list of group keys and a reducer function. Here we are only using one key: the
										Element:span
											city
											attribute we recorded for each user. This will split the collection into three groups: one for San Francisco, one for Paris, and one for New York.
									Node:
									(type) c
									(layer)3
										Element:p
											After grouping the collection, the reducer function is called for each group. To keep things simple, here we are using a built-in reducer,
										Element:span
											mixpanel.reducer.count
											, to count the number of records in each group. You could easily write your own reducer, as you will see in a moment.
									Node:
									(type) c
									(layer)3
										Element:p
											When we apply this transformation to the filtered collection, we output the following collection:
									Node:
									(type) c
									(layer)3
										Element:p
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											[
										Element:span
											{
										Element:span
											"key"
										Element:span
											:
										Element:span
											[
										Element:span
											"San Francisco"
										Element:span
											],
										Element:span
											"value"
										Element:span
											:
										Element:span
											2
										Element:span
											},
										Element:span
											{
										Element:span
											"key"
										Element:span
											:
										Element:span
											[
										Element:span
											"Paris"
										Element:span
											],
										Element:span
											"value"
										Element:span
											:
										Element:span
											2
										Element:span
											},
										Element:span
											{
										Element:span
											"key"
										Element:span
											:
										Element:span
											[
										Element:span
											"New York"
										Element:span
											],
										Element:span
											"value"
										Element:span
											:
										Element:span
											1
										Element:span
											}
										Element:span
											]
									Node:
									(type) c
									(layer)3
										Element:hr
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
											Limit the results to the top 2 cities
									Node:
									(type) c
									(layer)3
										Element:p
											In this simple example dataset, we only have three cities with active users - but if we were running this query against a real dataset, we might have thousands. So it's important that we have the ability to limit the response to the top cities, as they are most interesting to us.
									Node:
									(type) c
									(layer)3
										Element:p
											To find the top cities, we will use the
										Element:code
											reduce()
											transformation. We've already used this concept a couple of times in
										Element:code
											groupByUser()
											and
										Element:code
											groupBy()
											-- there, we were reducing a group at a time. Here we will run our reduce function against the entire collection, not just a subset of it.
									Node:
									(type) c
									(layer)3
										Element:p
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											.
										Element:span
											reduce
										Element:span
											(
										Element:span
											mixpanel
										Element:span
											.
										Element:span
											reducer
										Element:span
											.
										Element:span
											top
										Element:span
											(
										Element:span
											2
										Element:span
											));
									Node:
									(type) c
									(layer)3
										Element:p
											We're using one of the built-in reducers,
										Element:span
											mixpanel.reducer.top(N)
											, which operates on our collection to filter down to the N elements with the highest
										Element:span
											value
											attribute. When we run this function against the collection of cities and counts, we will get our final result for this query: the top 2 cities, San Francisco and Paris:
									Node:
									(type) c
									(layer)3
										Element:p
									Node:
									(type) c
									(layer)3
										Element:pre
											Document Sections
										Element:span
											[
										Element:span
											[
										Element:span
											{
										Element:span
											"key"
										Element:span
											:
										Element:span
											[
										Element:span
											"San Francisco"
										Element:span
											],
										Element:span
											"value"
										Element:span
											:
										Element:span
											2
										Element:span
											},
										Element:span
											{
										Element:span
											"key"
										Element:span
											:
										Element:span
											[
										Element:span
											"Paris"
										Element:span
											],
										Element:span
											"value"
										Element:span
											:
										Element:span
											2
										Element:span
											}
										Element:span
											]
										Element:span
											]
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:a
											Retrieve the events collection
										Element:li
										Element:a
											Count active days per user
										Element:li
										Element:a
											Filter out inactive users
										Element:li
										Element:a
											Count users per city
										Element:li
										Element:a
											Limit to top 2 cities
