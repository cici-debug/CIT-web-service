Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					Actionscript 3 API Integration
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Installing the library
						Node:
						(type) c
						(layer)2
							Element:p
								You can get the Mixpanel Actionscript 3 library by downloading the
							Element:a
								the latest mixpanel-as3-lib.swc archive from the mixpanel-a3 github
								.
						Node:
						(type) c
						(layer)2
							Element:p
								To add the mixpanel-as3-lib.swc to your Flexbuilder project, create a directory named
							Element:em
								libs
								in the root directory of your application project and copy the mixpanel-as3-lib.swc file into that directory.
						Node:
						(type) c
						(layer)2
							Element:p
								To use the Mixpanel Actionscript library from Flash, go to
						Node:
						(type) c
						(layer)2
							Element:p
							Element:strong
								File > Actionscript Settings... > Library Path
						Node:
						(type) c
						(layer)2
							Element:p
								click the "Browse to SWC" button, and select the mixpanel-as3-lib.swc file.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Initializing the library
						Node:
						(type) c
						(layer)2
							Element:p
								To use the Mixpanel library, construct an instance using of the
							Element:a
								Mixpanel
								class using your Mixpanel project token. You can find your token by clicking your name in the upper righthand corner of your Mixpanel project and selecting Settings from the dropdown.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								private
							Element:span
								var
							Element:span
								mixpanel
							Element:span
								:
							Element:span
								Mixpanel
							Element:span
								=
							Element:span
								new
							Element:span
								Mixpanel
							Element:span
								(
							Element:span
								"YOUR TOKEN"
							Element:span
								);
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Sending events
						Node:
						(type) c
						(layer)2
							Element:p
								Once you've constructed an instance, you can track an event by calling
							Element:a
								Mixpanel.track
								with the event name and properties.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								// Send a "Clicked Ad" event to Mixpanel
							Element:span
								// with a property "Banner Color"
							Element:span
								mixpanel
							Element:span
								.
							Element:span
								track
							Element:span
								(
							Element:span
								'Clicked Ad'
							Element:span
								,
							Element:span
								{
							Element:span
								'Banner Color'
							Element:span
								:
							Element:span
								'Blue'
							Element:span
								}
							Element:span
								);
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Super properties
						Node:
						(type) c
						(layer)2
							Element:p
								It's very common to have certain properties that you want to include with each event you send. Generally, these are things you know about the
							Element:strong
								user
								rather than about a specific event - for example, the user's age, gender, source, or initial referrer.
						Node:
						(type) c
						(layer)2
							Element:p
								To make things easier, you can register these properties as
							Element:strong
								super properties
								. If you tell us just once that these properties are important, we will automatically include them with all events sent. Super properties are stored either in browser cookies or Flash local storage, and will persist between visits and invocations of your app.
						Node:
						(type) c
						(layer)2
							Element:p
								To set super properties, call
							Element:a
								Mixpanel.register
								.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								mixpanel
							Element:span
								.
							Element:span
								register
							Element:span
								({
							Element:span
								'User Type'
							Element:span
								:
							Element:span
								'paid'
							Element:span
								,
							Element:span
								'source'
							Element:span
								:
							Element:span
								'facebook'
							Element:span
								});
						Node:
						(type) c
						(layer)2
							Element:p
								The next time you track an event, the super properties you just set will be included as properties. If you call
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								mixpanel
							Element:span
								.
							Element:span
								track
							Element:span
								(
							Element:span
								"signup"
							Element:span
								);
						Node:
						(type) c
						(layer)2
							Element:p
								after making the previous call to mixpanel.register, it is just like adding the properties directly:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								mixpanel
							Element:span
								.
							Element:span
								track
							Element:span
								(
							Element:span
								"signup"
							Element:span
								,
							Element:span
								{
							Element:span
								'User Type'
							Element:span
								:
							Element:span
								'paid'
							Element:span
								,
							Element:span
								'source'
							Element:span
								:
							Element:span
								'facebook'
							Element:span
								});
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Setting super properties once and only once
									Node:
									(type) c
									(layer)3
										Element:p
											If you want to store a super property only once (often for things like initial referrer, ad campaign, or source), you can use
										Element:a
											Mixpanel.register_once
											. This function behaves like
										Element:a
											Mixpanel.register
											and has the same interface, but it doesn't override super properties you've already saved.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											mixpanel
										Element:span
											.
										Element:span
											register_once
										Element:span
											({
										Element:span
											ad_campaign
										Element:span
											:
										Element:span
											'fb-01'
										Element:span
											});
									Node:
									(type) c
									(layer)3
										Element:p
											This means that it's safe to call
										Element:a
											Mixpanel.register_once
											with the same property on every page load, and it will only set it if the super property doesn't exist.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Managing user identity
						Node:
						(type) c
						(layer)2
							Element:p
								The Mixpanel library will assign a default unique identifier (we call it "distinct_id") to each unique user who comes to your website. This distinct_id is saved as a cookie so that it will persist across sessions.
						Node:
						(type) c
						(layer)2
							Element:p
								If you choose, you can assign your own user IDs. This is particularly userful if a user is using your app on multiple platforms (both web and mobile, for example). To assign your own distinct_ids, you can use
							Element:a
								Mixpanel.identify
								.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								// Associate all future events sent from
							Element:span
								// the library with the distinct_id 13793
							Element:span
								mixpanel
							Element:span
								.
							Element:span
								identify
							Element:span
								(
							Element:span
								'13793'
							Element:span
								);
						Node:
						(type) c
						(layer)2
							Element:p
								In general, if you use
							Element:a
								Mixpanel.identify
								, you should call it as soon as the user logs in to your application. This will track all of their actual application usage to the correct user ID.
						Node:
						(type) c
						(layer)2
							Element:p
								Calling
							Element:a
								Mixpanel.identify
								with a new ID will
							Element:strong
								change
								the ID being sent with future events. If you change the ID in the middle of a funnel, the funnel will break - we won't be able to associate the old ID with the new.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Storing user profiles
						Node:
						(type) c
						(layer)2
							Element:p
								In addition to events, you can store user profiles in Mixpanel's
							Element:a
								People Analytics
								product. Profiles are persistent sets of properties that describe a user - things like name, email address, and signup date. You can use profiles to explore and segment users by who they are, rather than what they did. You can also use profiles to send notifications, such as emails, SMS, or push notifications.
						Node:
						(type) c
						(layer)2
							Element:p
								Before you send profile updates, you
							Element:strong
								must
								call
							Element:a
								Mixpanel.identify
								. The Mixpanel library will not send updates with the automatically generated id, so you have to explicitly set your own. This ensures that you only have actual registered users saved in the system.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Setting profile properties
									Node:
									(type) c
									(layer)3
										Element:p
											You can set properties on a user profile with
										Element:a
											Mixpanel.people_set
											.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											// identify must be called before any
										Element:span
											// profile updates can be sent
										Element:span
											mixpanel
										Element:span
											.
										Element:span
											identify
										Element:span
											(
										Element:span
											'13793'
										Element:span
											);
										Element:span
											mixpanel
										Element:span
											.
										Element:span
											people_set
										Element:span
											({
										Element:span
											'Plan'
										Element:span
											:
										Element:span
											'Premium'
										Element:span
											});
									Node:
									(type) c
									(layer)3
										Element:p
											This will set a "Plan" property, with a value "Premium", on user 13793's profile. If there isn't a profile with distinct_id 13793 in Mixpanel already, a new profile will be created. If user 13793 already has a property named "Plan" in their profile, the old value will be overwritten with "Premium".
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Incrementing numeric properties
									Node:
									(type) c
									(layer)3
										Element:p
											You can use
										Element:a
											Mixpanel.people_increment
											to change the current value of numeric properties. This is useful when you want to keep a running tally of things, such as games played, messages sent, or points earned.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											// If no number is passed, the default is to increment by 1
										Element:span
											mixpanel
										Element:span
											.
										Element:span
											people_increment
										Element:span
											(
										Element:span
											"games played"
										Element:span
											);
										Element:span
											// You can also pass a number to increment
										Element:span
											// Here we increment the user's point count by 500.
										Element:span
											mixpanel
										Element:span
											.
										Element:span
											people_increment
										Element:span
											(
										Element:span
											"points earned"
										Element:span
											,
										Element:span
											500
										Element:span
											);
										Element:span
											// Pass an object to increment multiple properties
										Element:span
											mixpanel
										Element:span
											.
										Element:span
											people_increment
										Element:span
											({
										Element:span
											"dollars spent"
										Element:span
											:
										Element:span
											17
										Element:span
											,
										Element:span
											// Subtract by passing a negative value
										Element:span
											"credits remaining"
										Element:span
											:
										Element:span
											-
										Element:span
											34
										Element:span
											});
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Tracking revenue
						Node:
						(type) c
						(layer)2
							Element:p
								Mixpanel makes it easy to analyze the revenue you make from individual customers. By associating charges with user profiles, you can compare revenue across different customer segments and calculate things like lifetime value.
						Node:
						(type) c
						(layer)2
							Element:p
								You can track a single transaction with
							Element:a
								Mixpanel.people_track_charge
								. This call will add transactions to the individual user profile, which will also be reflected in the
							Element:a
								Mixpanel Revenue report
								.
						Node:
						(type) c
						(layer)2
							Element:pre
								Document Sections
							Element:span
								// Make sure identify has been called
							Element:span
								// before making revenue updates
							Element:span
								mixpanel
							Element:span
								.
							Element:span
								identify
							Element:span
								(
							Element:span
								'13793'
							Element:span
								);
							Element:span
								// Tracks $100 in revenue for user 13793
							Element:span
								mixpanel
							Element:span
								.
							Element:span
								people_track_charge
							Element:span
								(
							Element:span
								100
							Element:span
								);
							Element:span
								// Refund this user 50 dollars
							Element:span
								mixpanel
							Element:span
								.
							Element:span
								people_track_charge
							Element:span
								(-
							Element:span
								50
							Element:span
								);
							Element:span
								// Tracks $25 in revenue for user 13793
							Element:span
								// on the 2nd of january
							Element:span
								mixpanel
							Element:span
								.
							Element:span
								people_track_charge
							Element:span
								(
							Element:span
								25
							Element:span
								,
							Element:span
								{
							Element:span
								'$time'
							Element:span
								:
							Element:span
								'2012-01-02T00:00:00'
							Element:span
								}
							Element:span
								);
						Node:
						(type) c
						(layer)2
							Element:ul
								Learn more
							Element:li
							Element:a
								Installing the library
							Element:li
							Element:a
								Initializing the library
							Element:li
							Element:a
								Sending events
							Element:li
							Element:a
								Super properties
							Element:li
							Element:a
								Managing user identity
							Element:li
							Element:a
								Sending profile updates
							Element:li
							Element:a
								Tracking revenue
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:a
								Full API reference
							Element:li
							Element:a
								Library source code
