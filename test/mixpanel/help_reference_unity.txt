Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					Unity SDK - Quick Start Guide
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Installing the library
						Node:
						(type) c
						(layer)2
							Element:p
								You can get the library by downloading the latest
							Element:a
								MixpanelSDK.unitypackage
								file from GitHub.
						Node:
						(type) c
						(layer)2
							Element:p
								To import
							Element:a
								MixpanelSDK.unitypackage
								into Unity, select
							Element:i
								Assets > Custom Package...
								and import the
							Element:a
								MixpanelSDK.unitypackage
								file. Alternately, you can locate the
							Element:a
								MixpanelSDK.unitypackage
								file in your file system and double-click to launch.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Initializing the library
						Node:
						(type) c
						(layer)2
							Element:p
								To start tracking with the Mixpanel Unity library, you must first initialize it with your project token. You can find your token by clicking your name in the upper righthand corner of your Mixpanel project and selecting Settings from the dropdown.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Add Mixpanel Component
									Node:
									(type) c
									(layer)3
										Element:p
											To initialize the library, first add a new Mixpanel component to your Unity GameObject. Then, enter your project token into the Token and Debug Token input fields within the inspector.
									Node:
									(type) c
									(layer)3
										Element:p
										Element:img
									Node:
									(type) c
									(layer)3
										Element:p
											You have the option to provide different tokens for debug and production builds of your project. Keeping data sets separate is important to maintain the integrity of the metrics you’re tracking with Mixpanel. It’s very easy to prevent these data sets from commingling, but hard to disentangle, so taking time up front is well worth it. First, create two separate Mixpanel projects – a "Production" project and a "Debug" project (Mixpanel doesn’t limit the number of projects you can use). Then, you can enter your "Production" and "Debug" project tokens into the Token and Debug Token input fields respectively.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											C#
									Node:
									(type) c
									(layer)3
										Element:p
											Once you've initialized the library with your project token, you can import Mixpanel into your code using the mixpanel namespace.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											using
										Element:span
											mixpanel
										Element:span
											;
										Element:span
											// Then, you can track events with
										Element:span
											Mixpanel
										Element:span
											.
										Element:span
											Track
										Element:span
											(
										Element:span
											"Plan Selected"
										Element:span
											);
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Sending your first event
						Node:
						(type) c
						(layer)2
							Element:p
								Once you've initialized the library, you can track an event using
							Element:a
								Mixpanel.Track()
								with the event name and properties.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								var
							Element:span
								props
							Element:span
								=
							Element:span
								new
							Element:span
								Value
							Element:span
								();
							Element:span
								props
							Element:span
								[
							Element:span
								"Gender"
							Element:span
								]
							Element:span
								=
							Element:span
								"Female"
							Element:span
								;
							Element:span
								props
							Element:span
								[
							Element:span
								"Plan"
							Element:span
								]
							Element:span
								=
							Element:span
								"Premium"
							Element:span
								;
							Element:span
								Mixpanel
							Element:span
								.
							Element:span
								Track
							Element:span
								(
							Element:span
								"Plan Selected"
							Element:span
								,
							Element:span
								props
							Element:span
								);
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Timing events
						Node:
						(type) c
						(layer)2
							Element:p
								You can track the time it took for an action to occur, such as an image upload or a comment post, using
							Element:a
								Mixpanel.StartTimedEvent
								This will mark the "start" of your action, which you can then finish with a track call. The time duration is then recorded in the "Duration" property.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								Mixpanel
							Element:span
								.
							Element:span
								StartTimedEvent
							Element:span
								(
							Element:span
								"Image Upload"
							Element:span
								);
							Element:span
								Mixpanel
							Element:span
								.
							Element:span
								Track
							Element:span
								(
							Element:span
								"Image Upload"
							Element:span
								);
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Super properties
						Node:
						(type) c
						(layer)2
							Element:p
								It's very common to have certain properties that you want to include with each event you send. Generally, these are things you know about the
							Element:strong
								user
								rather than about a specific event—for example, the user's age, gender, or source.
						Node:
						(type) c
						(layer)2
							Element:p
								To make things easier, you can register these properties as
							Element:strong
								super properties
								. If you do, we will automatically include them with all tracked events. Super properties are saved to device storage, and will persist across invocations of your app.
						Node:
						(type) c
						(layer)2
							Element:p
								To set super properties, call
							Element:a
								Mixpanel.Register
								.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								// Send a "User Type: Paid" property will be sent
							Element:span
								// with all future track calls.
							Element:span
								Mixpanel
							Element:span
								.
							Element:span
								Register
							Element:span
								(
							Element:span
								"User Type"
							Element:span
								,
							Element:span
								"Paid"
							Element:span
								);
						Node:
						(type) c
						(layer)2
							Element:p
								Going forward, whenever you track an event, super properties will be included as properties. For instance, if you call
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								var
							Element:span
								props
							Element:span
								=
							Element:span
								new
							Element:span
								Value
							Element:span
								();
							Element:span
								props
							Element:span
								[
							Element:span
								"signup_button"
							Element:span
								]
							Element:span
								=
							Element:span
								"test12"
							Element:span
								;
							Element:span
								Mixpanel
							Element:span
								.
							Element:span
								Track
							Element:span
								(
							Element:span
								"signup"
							Element:span
								,
							Element:span
								props
							Element:span
								);
						Node:
						(type) c
						(layer)2
							Element:p
								after making the above call to Mixpanel.Register, it is just like adding the properties directly:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								var
							Element:span
								props
							Element:span
								=
							Element:span
								new
							Element:span
								Value
							Element:span
								();
							Element:span
								props
							Element:span
								[
							Element:span
								"signup_button"
							Element:span
								]
							Element:span
								=
							Element:span
								"test12"
							Element:span
								;
							Element:span
								props
							Element:span
								[
							Element:span
								"User Type"
							Element:span
								]
							Element:span
								=
							Element:span
								"Paid"
							Element:span
								;
							Element:span
								Mixpanel
							Element:span
								.
							Element:span
								Track
							Element:span
								(
							Element:span
								"signup"
							Element:span
								,
							Element:span
								props
							Element:span
								);
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Setting super properties once and only once
									Node:
									(type) c
									(layer)3
										Element:p
											If you want to store a super property only once (often for things like ad campaign or source), you can use
										Element:a
											Mixpanel.RegisterOnce
											. This function behaves like
										Element:a
											Mixpanel.Register
											and has the same interface, but it doesn't override super properties you've already saved.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											Mixpanel
										Element:span
											.
										Element:span
											RegisterOnce
										Element:span
											(
										Element:span
											"source"
										Element:span
											,
										Element:span
											"ad-01"
										Element:span
											);
									Node:
									(type) c
									(layer)3
										Element:p
											This means that it's safe to call
										Element:a
											Mixpanel.RegisterOnce
											with the same property on every app load, and it will only set it if the super property doesn't exist.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Managing user identity
						Node:
						(type) c
						(layer)2
							Element:p
								The Mixpanel library will assign a default unique identifier (we call it a "distinct ID") to each unique user who installs your application. This distinct ID is saved to device storage so that it will persist across sessions.
						Node:
						(type) c
						(layer)2
							Element:p
								If you choose, you can assign your own user IDs. This is particularly useful if a user is using your app on multiple platforms (both web and mobile, for example). To assign your own distinct_ids, you can use
							Element:a
								Mixpanel.Identify
								.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								// Ensure all future events sent from
							Element:span
								// the library will have the distinct_id 13793
							Element:span
								Mixpanel
							Element:span
								.
							Element:span
								Identify
							Element:span
								(
							Element:span
								"13793"
							Element:span
								);
						Node:
						(type) c
						(layer)2
							Element:p
								Calling
							Element:a
								Mixpanel.Identify
								with a new ID will
							Element:strong
								change
								the distinctID stored on the device. Updates to user profiles are queued on the device until identify is called.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Combining anonymous and identifiable user data
									Node:
									(type) c
									(layer)3
										Element:p
											It's important to send the same distinct_id with each event that an individual user triggers. Events recorded with different distinct_ids will be treated in Mixpanel as if they were performed by different users.
									Node:
									(type) c
									(layer)3
										Element:p
											There are times when it can be convenient to start referring to a user by a different identifier in your implementation. The most common case is after registration, when a user switches from being an anonymous user (with an anonymous distinct_id) to an authenticated user with an (authenticated id). In this case, you can create an
										Element:a
											Alias
											for the user to keep the distinct_id consistent. An alias is a string stored in a Mixpanel lookup table that is associated with an anonymous distinct_id. Once written, aliases are not editable. Any data sent to Mixpanel with an alias as the distinct_id will be remapped and written to disk using the alias's corresponding anonymous distinct_id. This allows you to start identifying a user by an authenticated id without changing the distinct_id that is ultimately written in Mixpanel.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											// This makes the current ID (by default an auto-generated GUID)
										Element:span
											// and '13793' interchangeable distinct ids.
										Element:span
											Mixpanel
										Element:span
											.
										Element:span
											Alias
										Element:span
											(
										Element:span
											"13793"
										Element:span
											);
									Node:
									(type) c
									(layer)3
										Element:p
											The recommended usage pattern is to call both
											If you use
										Element:a
											Mixpanel.Alias
											and
										Element:a
											Mixpanel.Identify
											(with the Mixpanel generated distinct ID, as shown in the example above) when the user signs up, and only
										Element:a
											Mixpanel.Identify
											(with the aliased user ID) on future log ins. This will keep your signup funnels working correctly.
									Node:
									(type) c
									(layer)3
										Element:a
											Mixpanel.Alias
											, we recommend only calling it once during the lifetime of the user.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Storing user profiles
						Node:
						(type) c
						(layer)2
							Element:p
								In addition to events, you can store user profiles in Mixpanel's
							Element:a
								People Analytics
								product. Profiles are persistent sets of properties that describe a user—things like name, email address, and signup date. You can use profiles to explore and segment users by who they are, rather than what they did. You can also use profiles to send notifications, such as emails, SMS, or push notifications.
						Node:
						(type) c
						(layer)2
							Element:p
								Before you send profile updates, you
							Element:strong
								must
								call
							Element:a
								Mixpanel.Identify
								. This ensures that you only have registered users saved in the system.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Setting profile properties
									Node:
									(type) c
									(layer)3
										Element:p
											You can set properties on a user profile with
										Element:a
											Mixpanel.people.Set
											.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											// mixpanel identify: must be called before
										Element:span
											// people properties can be set
										Element:span
											Mixpanel
										Element:span
											.
										Element:span
											Identify
										Element:span
											(
										Element:span
											"13793"
										Element:span
											);
										Element:span
											// Sets user 13793's "Plan" attribute to "Premium"
										Element:span
											Mixpanel
										Element:span
											.
										Element:span
											people
										Element:span
											.
										Element:span
											Set
										Element:span
											(
										Element:span
											"Plan"
										Element:span
											,
										Element:span
											"Premium"
										Element:span
											);
									Node:
									(type) c
									(layer)3
										Element:p
											This will set a "Plan" property, with a value "Premium," on user 13793's profile. If there isn't a profile with distinct_id 13793 in Mixpanel already, a new profile will be created. If user 13793 already has a property named "Plan" in their profile, the old value will be overwritten with "Premium."
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Incrementing numeric properties
									Node:
									(type) c
									(layer)3
										Element:p
											You can use
										Element:a
											Mixpanel.people.Increment
											to change the current value of numeric properties. This is useful when you want to keep a running tally of things, such as games played, messages sent, or points earned.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											// Here we increment the user's point count by 500.
										Element:span
											Mixpanel
										Element:span
											.
										Element:span
											people
										Element:span
											.
										Element:span
											Increment
										Element:span
											(
										Element:span
											"point count"
										Element:span
											,
										Element:span
											500
										Element:span
											);
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Other types of profile updates
									Node:
									(type) c
									(layer)3
										Element:p
											There are a few other types of profile updates. To learn more, please see the
										Element:a
											Full API reference
											.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Tracking revenue
						Node:
						(type) c
						(layer)2
							Element:p
								Mixpanel makes it easy to analyze the revenue you earn from individual customers. By associating charges with user profiles, you can compare revenue across different customer segments and calculate things like lifetime value.
						Node:
						(type) c
						(layer)2
							Element:p
								You can track a single transaction with
							Element:a
								Mixpanel.people.TrackCharge
								. This call will add transactions to the individual user profile, which will also be reflected in the
							Element:a
								Mixpanel Revenue report
								.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								// Make sure identify has been called before making revenue
							Element:span
								// updates
							Element:span
								Mixpanel
							Element:span
								.
							Element:span
								Identify
							Element:span
								(
							Element:span
								"13793"
							Element:span
								);
							Element:span
								// Tracks $100 in revenue for user 13793
							Element:span
								Mixpanel
							Element:span
								.
							Element:span
								people
							Element:span
								.
							Element:span
								TrackCharge
							Element:span
								(
							Element:span
								100
							Element:span
								);
							Element:span
								// Refund this user 50 dollars
							Element:span
								Mixpanel
							Element:span
								.
							Element:span
								people
							Element:span
								.
							Element:span
								TrackCharge
							Element:span
								(-
							Element:span
								50
							Element:span
								);
							Element:span
								// Tracks $25 in revenue for user 13793 on the 2nd of
							Element:span
								// January
							Element:span
								var
							Element:span
								props
							Element:span
								=
							Element:span
								new
							Element:span
								Value
							Element:span
								();
							Element:span
								props
							Element:span
								[
							Element:span
								"time"
							Element:span
								]
							Element:span
								=
							Element:span
								"2012-01-02T00:00:00"
							Element:span
								;
							Element:span
								Mixpanel
							Element:span
								.
							Element:span
								people
							Element:span
								.
							Element:span
								TrackCharge
							Element:span
								(
							Element:span
								25
							Element:span
								,
							Element:span
								props
							Element:span
								);
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Registering for push notifications
						Node:
						(type) c
						(layer)2
							Element:p
								The Mixpanel library includes support for sending iOS push notification device tokens to Mixpanel. Once you send a device token, you can use Mixpanel to send push notifications to your app.
						Node:
						(type) c
						(layer)2
							Element:p
								Android push notifications are not supported through this Mixpanel library or through the Unity
							Element:a
								Notification Services
								class.
						Node:
						(type) c
						(layer)2
							Element:p
								You can send a device token to Mixpanel from the Unity
							Element:a
								NotificationServices.RegisterForNotifications
								class, using
							Element:a
								Mixpanel.people.PushDeviceToken
						Node:
						(type) c
						(layer)2
							Element:pre
								Document Sections
							Element:span
								using
							Element:span
								UnityEngine
							Element:span
								;
							Element:span
								using
							Element:span
								System.Collections
							Element:span
								;
							Element:span
								using
							Element:span
								NotificationServices
							Element:span
								=
							Element:span
								UnityEngine
							Element:span
								.
							Element:span
								iOS
							Element:span
								.
							Element:span
								NotificationServices
							Element:span
								;
							Element:span
								using
							Element:span
								NotificationType
							Element:span
								=
							Element:span
								UnityEngine
							Element:span
								.
							Element:span
								iOS
							Element:span
								.
							Element:span
								NotificationType
							Element:span
								;
							Element:span
								using
							Element:span
								mixpanel
							Element:span
								;
							Element:span
								public
							Element:span
								class
							Element:span
								NotificationRegistrationExample
							Element:span
								:
							Element:span
								MonoBehaviour
							Element:span
								{
							Element:span
								bool
							Element:span
								tokenSent
							Element:span
								;
							Element:span
								void
							Element:span
								Start
							Element:span
								()
							Element:span
								{
							Element:span
								tokenSent
							Element:span
								=
							Element:span
								false
							Element:span
								;
							Element:span
								NotificationServices
							Element:span
								.
							Element:span
								RegisterForNotifications
							Element:span
								(
							Element:span
								NotificationType
							Element:span
								.
							Element:span
								Alert
							Element:span
								|
							Element:span
								NotificationType
							Element:span
								.
							Element:span
								Badge
							Element:span
								|
							Element:span
								NotificationType
							Element:span
								.
							Element:span
								Sound
							Element:span
								);
							Element:span
								}
							Element:span
								void
							Element:span
								Update
							Element:span
								()
							Element:span
								{
							Element:span
								if
							Element:span
								(!
							Element:span
								tokenSent
							Element:span
								)
							Element:span
								{
							Element:span
								byte
							Element:span
								[]
							Element:span
								token
							Element:span
								=
							Element:span
								NotificationServices
							Element:span
								.
							Element:span
								deviceToken
							Element:span
								;
							Element:span
								if
							Element:span
								(
							Element:span
								token
							Element:span
								!=
							Element:span
								null
							Element:span
								)
							Element:span
								{
							Element:span
								// Make sure identify has been called
							Element:span
								// before sending a device token.
							Element:span
								Mixpanel
							Element:span
								.
							Element:span
								Identify
							Element:span
								(
							Element:span
								"13793"
							Element:span
								);
							Element:span
								// This sends the deviceToken to Mixpanel
							Element:span
								#if UNITY_IOS
							Element:span
								Mixpanel
							Element:span
								.
							Element:span
								people
							Element:span
								.
							Element:span
								PushDeviceToken
							Element:span
								=
							Element:span
								token
							Element:span
								;
							Element:span
								#endif
							Element:span
								tokenSent
							Element:span
								=
							Element:span
								true
							Element:span
								;
							Element:span
								}
							Element:span
								}
							Element:span
								}
							Element:span
								}
						Node:
						(type) c
						(layer)2
							Element:ul
								Learn more
							Element:li
							Element:a
								Installing the library
							Element:li
							Element:a
								Initializing the library
							Element:li
							Element:a
								Sending events
							Element:li
							Element:a
								Event timing
							Element:li
							Element:a
								Super properties
							Element:li
							Element:a
								Managing user identity
							Element:li
							Element:a
								Storing user profiles
							Element:li
							Element:a
								Tracking revenue
							Element:li
							Element:a
								Push notifications
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:a
								Full API reference
							Element:li
							Element:a
								Example application
							Element:li
							Element:a
								Library source code
