Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					JavaScript API Integration
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Installing the library
						Node:
						(type) c
						(layer)2
							Element:p
								To start tracking with the Mixpanel JavaScript library, just paste the following code into the page you want to track inside the
							Element:code
								<head>
								and
							Element:code
								</head>
								tags. Make sure to change
							Element:strong
								'YOUR_TOKEN'
								to your project token. You can find your project token in the settings dialog in the Mixpanel web application.
						Node:
						(type) c
						(layer)2
							Element:p
								The snippet will load our library onto the page asynchronously to keep your website loading quickly even if placed in the
							Element:code
								<head>
								of the page.
						Node:
						(type) c
						(layer)2
							Element:p
								The snippet provides a global variable named
							Element:code
								mixpanel
								that you can use to send data to the Mixpanel API.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Sending events
						Node:
						(type) c
						(layer)2
							Element:p
								Once you have the snippet in your page, you can track an event by calling
							Element:a
								mixpanel.track
								with the event name and properties.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								// Send a "Played song" event to Mixpanel
							Element:span
								// with a property "genre"
							Element:span
								mixpanel
							Element:span
								.
							Element:span
								track
							Element:span
								(
							Element:span
								"Played song"
							Element:span
								,
							Element:span
								{
							Element:span
								"genre"
							Element:span
								:
							Element:span
								"hip-hop"
							Element:span
								}
							Element:span
								);
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Tracking website links
									Node:
									(type) c
									(layer)3
										Element:p
											When tracking link clicks with
										Element:a
											mixpanel.track
											the page can change before the event is successfully sent, leading to inaccurate results.
									Node:
									(type) c
									(layer)3
										Element:p
											To make this easier, we've built something called
										Element:a
											mixpanel.track_links
											. This function will allow you to bind an event to a link click with much greater accuracy.
									Node:
									(type) c
									(layer)3
										Element:p
											Here's how it works:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											<div
										Element:span
											id=
										Element:span
											"nav"
										Element:span
											>
										Element:span
											<a
										Element:span
											href=
										Element:span
											"/"
										Element:span
											>
											Home
										Element:span
											</a>
										Element:span
											<a
										Element:span
											href=
										Element:span
											"/about"
										Element:span
											>
											About
										Element:span
											</a>
										Element:span
											<a
										Element:span
											href=
										Element:span
											"/pricing"
										Element:span
											>
											Pricing
										Element:span
											</a>
										Element:span
											</div>
										Element:span
											<script
										Element:span
											type=
										Element:span
											"text/javascript"
										Element:span
											>
										Element:span
											mixpanel
										Element:span
											.
										Element:span
											track_links
										Element:span
											(
										Element:span
											"#nav a"
										Element:span
											,
										Element:span
											"click nav link"
										Element:span
											,
										Element:span
											{
										Element:span
											"referrer"
										Element:span
											:
										Element:span
											document
										Element:span
											.
										Element:span
											referrer
										Element:span
											});
										Element:span
											</script>
									Node:
									(type) c
									(layer)3
										Element:p
											This will send a "click nav link" event (with a 'referrer' property) each time a user clicks on a navigation link. It's important to note that the links matched by the CSS selector must exist on the page at the time the
										Element:a
											mixpanel.track_links
											call is made, or it will not bind correctly.
									Node:
									(type) c
									(layer)3
										Element:p
											One special note here is that nested CSS selectors will not work with the default Mixpanel methods
										Element:a
											mixpanel.track_links
											above and
										Element:a
											mixpanel.track_forms
											below. In order to utilize nested selectors or manually recreate the behavior of these methods, you should utilize code which sends an event to Mixpanel when a CSS element is interacted with which includes a callback.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											<script
										Element:span
											type=
										Element:span
											"text/javascript"
										Element:span
											>
										Element:span
											$
										Element:span
											(
										Element:span
											"#MyLink"
										Element:span
											).
										Element:span
											click
										Element:span
											(
										Element:span
											function
										Element:span
											(
										Element:span
											event
										Element:span
											)
										Element:span
											{
										Element:span
											var
										Element:span
											cb
										Element:span
											=
										Element:span
											generate_callback
										Element:span
											(
										Element:span
											$
										Element:span
											(
										Element:span
											this
										Element:span
											));
										Element:span
											event
										Element:span
											.
										Element:span
											preventDefault
										Element:span
											();
										Element:span
											mixpanel
										Element:span
											.
										Element:span
											track
										Element:span
											(
										Element:span
											"Clicked Link"
										Element:span
											,
										Element:span
											{
										Element:span
											"Domain"
										Element:span
											:
										Element:span
											"nytimes.com"
										Element:span
											},
										Element:span
											cb
										Element:span
											);
										Element:span
											setTimeout
										Element:span
											(
										Element:span
											cb
										Element:span
											,
										Element:span
											500
										Element:span
											);
										Element:span
											})
										Element:span
											function
										Element:span
											generate_callback
										Element:span
											(
										Element:span
											a
										Element:span
											)
										Element:span
											{
										Element:span
											return
										Element:span
											function
										Element:span
											()
										Element:span
											{
										Element:span
											window
										Element:span
											.
										Element:span
											location
										Element:span
											=
										Element:span
											a
										Element:span
											.
										Element:span
											attr
										Element:span
											(
										Element:span
											"href"
										Element:span
											);
										Element:span
											}
										Element:span
											}
										Element:span
											</script>
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Other tracking methods
									Node:
									(type) c
									(layer)3
										Element:p
											There are other less common ways to send data to Mixpanel. To learn more, please follow the links to the full API documentation.
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:a
											mixpanel.track_forms
											- similar to track_links, but tracks form submissions.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Super properties
						Node:
						(type) c
						(layer)2
							Element:p
								It's very common to have certain properties that you want to include with each event you send. Generally, these are things you know about the
							Element:strong
								user
								rather than about a specific event - for example, the user's age, gender, source, or initial referrer.
						Node:
						(type) c
						(layer)2
							Element:p
								To make things easier, you can register these properties as
							Element:strong
								super properties
								. If you tell us just once that these properties are important, we will automatically include them with all events sent. Super properties are stored in a browser cookie, and will persist between visits to your site.
						Node:
						(type) c
						(layer)2
							Element:p
								To set super properties, call
							Element:a
								mixpanel.register
								.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								<script
							Element:span
								type=
							Element:span
								"text/javascript"
							Element:span
								>
							Element:span
								mixpanel
							Element:span
								.
							Element:span
								register
							Element:span
								({
							Element:span
								"age"
							Element:span
								:
							Element:span
								28
							Element:span
								,
							Element:span
								"gender"
							Element:span
								:
							Element:span
								"male"
							Element:span
								,
							Element:span
								"source"
							Element:span
								:
							Element:span
								"facebook"
							Element:span
								});
							Element:span
								</script>
						Node:
						(type) c
						(layer)2
							Element:p
								The next time you track an event, the super properties you just set will be included as properties. If you call
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								mixpanel
							Element:span
								.
							Element:span
								track
							Element:span
								(
							Element:span
								"Signup"
							Element:span
								);
						Node:
						(type) c
						(layer)2
							Element:p
								after making the previous call to mixpanel.register, it is just like adding the properties directly:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								mixpanel
							Element:span
								.
							Element:span
								track
							Element:span
								(
							Element:span
								"Signup"
							Element:span
								,
							Element:span
								{
							Element:span
								"age"
							Element:span
								:
							Element:span
								28
							Element:span
								,
							Element:span
								"gender"
							Element:span
								:
							Element:span
								"male"
							Element:span
								,
							Element:span
								"source"
							Element:span
								:
							Element:span
								"facebook"
							Element:span
								});
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Setting super properties once and only once
									Node:
									(type) c
									(layer)3
										Element:p
											If you want to store a super property only once (often for things like initial referrer, ad campaign, or source), you can use
										Element:a
											mixpanel.register_once
											. This function behaves like
										Element:a
											mixpanel.register
											and has the same interface, but it doesn't override super properties you've already saved.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											<script
										Element:span
											type=
										Element:span
											"text/javascript"
										Element:span
											>
										Element:span
											mixpanel
										Element:span
											.
										Element:span
											register_once
										Element:span
											({
										Element:span
											"ad_campaign"
										Element:span
											:
										Element:span
											"fb-01"
										Element:span
											});
										Element:span
											</script>
									Node:
									(type) c
									(layer)3
										Element:p
											This means that it's safe to call
										Element:a
											mixpanel.register_once
											with the same property on every page load, and it will only set it if the super property doesn't exist.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Managing user identity
						Node:
						(type) c
						(layer)2
							Element:p
								The Mixpanel library will assign a default unique identifier (we call it "distinct_id") to each unique user who comes to your website. This distinct_id is saved as a cookie so that it will persist across sessions.
						Node:
						(type) c
						(layer)2
							Element:p
								If you choose, you can assign your own user IDs. This is particularly useful if a user is using your app on multiple platforms (both web and mobile, for example). To assign your own distinct_ids, you can use
							Element:a
								mixpanel.identify
								.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								// Associate all future events sent from
							Element:span
								// the library with the distinct_id 13793
							Element:span
								mixpanel
							Element:span
								.
							Element:span
								identify
							Element:span
								(
							Element:span
								'13793'
							Element:span
								);
						Node:
						(type) c
						(layer)2
							Element:p
								In general, if you use
							Element:a
								mixpanel.identify
								, you should call it as soon as the user logs in to your application. This will track all of their actual application usage to the correct user ID.
						Node:
						(type) c
						(layer)2
							Element:p
								Calling
							Element:a
								mixpanel.identify
								with a new ID will
							Element:strong
								change
								the ID being sent with future events. If you change the ID in the middle of a funnel, the funnel will break - we won't be able to associate the old ID with the new.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Combining anonymous user data with identifiable user data
									Node:
									(type) c
									(layer)3
										Element:p
											There are moments when you want to link two IDs together. For example, users of your application may engage with your product anonymously before signing up. In which case, it would be nice to combine their anonymous activity and their activity once they're a customer. To do this, you would create an alias from the new user id in your system to the old anonymous one. You should use
										Element:a
											mixpanel.alias
											in conjunction with
										Element:a
											mixpanel.identify
											. The
										Element:a
											mixpanel.alias
											method sends an update to our server linking the current ID with a new ID going forward (not retroactively).
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											// This links the known ID 13793 in your database table
										Element:span
											// to the anonymous auto-generated ID our library created.
										Element:span
											mixpanel
										Element:span
											.
										Element:span
											alias
										Element:span
											(
										Element:span
											'13793'
										Element:span
											);
									Node:
									(type) c
									(layer)3
										Element:p
											The recommended usage pattern is to call
											If you use
										Element:a
											mixpanel.alias
											when the user signs up, and
										Element:a
											mixpanel.identify
											when they log in. This will keep your signup funnels working correctly. For more information, please see
										Element:a
											Using alias and identify
											.
									Node:
									(type) c
									(layer)3
										Element:a
											mixpanel.alias
											, you should only call it once during the lifetime of the user. Calling it more than once per user can create duplicate people profiles.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Storing user profiles
						Node:
						(type) c
						(layer)2
							Element:p
								In addition to events, you can store user profiles in Mixpanel's
							Element:a
								People Analytics
								product. Profiles are persistent sets of properties that describe a user - things like name, email address, and signup date. You can use profiles to explore and segment users by who they are, rather than what they did. You can also use profiles to send notifications, such as emails, SMS, push, or in-app notifications.
						Node:
						(type) c
						(layer)2
							Element:p
								In order to send profile updates, you
							Element:strong
								must
								call
							Element:a
								mixpanel.identify
								. The Mixpanel library does not automatically create people profiles for any user that performs an event; you have to explicitaly call mixpanel.identify, which empowers you to only create profiles for registered users.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Setting profile properties
									Node:
									(type) c
									(layer)3
										Element:p
											You can set properties on a user profile with
										Element:a
											mixpanel.people.set
											.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											mixpanel
										Element:span
											.
										Element:span
											people
										Element:span
											.
										Element:span
											set
										Element:span
											({
										Element:span
											"Plan"
										Element:span
											:
										Element:span
											"Premium"
										Element:span
											});
										Element:span
											// identify must be called along with people.set
										Element:span
											mixpanel
										Element:span
											.
										Element:span
											identify
										Element:span
											(
										Element:span
											"13793"
										Element:span
											);
									Node:
									(type) c
									(layer)3
										Element:p
											This will set a "Plan" property, with a value "Premium", on user 13793's profile. If there isn't a profile with distinct_id 13793 in Mixpanel already, a new profile will be created. If user 13793 already has a property named "Plan" in their profile, the old value will be overwritten with "Premium".
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Incrementing numeric properties
									Node:
									(type) c
									(layer)3
										Element:p
											You can use
										Element:a
											mixpanel.people.increment
											to change the current value of numeric properties. This is useful when you want to keep a running tally of things, such as games played, messages sent, or points earned.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											// If no number is passed, the default is to increment by 1
										Element:span
											mixpanel
										Element:span
											.
										Element:span
											people
										Element:span
											.
										Element:span
											increment
										Element:span
											(
										Element:span
											"games played"
										Element:span
											);
										Element:span
											// You can also pass a number to increment
										Element:span
											// Here we add 500 the user's point count
										Element:span
											mixpanel
										Element:span
											.
										Element:span
											people
										Element:span
											.
										Element:span
											increment
										Element:span
											(
										Element:span
											"points earned"
										Element:span
											,
										Element:span
											500
										Element:span
											);
										Element:span
											// Pass an object to increment multiple properties
										Element:span
											mixpanel
										Element:span
											.
										Element:span
											people
										Element:span
											.
										Element:span
											increment
										Element:span
											({
										Element:span
											"dollars spent"
										Element:span
											:
										Element:span
											17
										Element:span
											,
										Element:span
											// Subtract by passing a negative value
										Element:span
											"credits remaining"
										Element:span
											:
										Element:span
											-
										Element:span
											34
										Element:span
											});
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Other types of profile updates
									Node:
									(type) c
									(layer)3
										Element:p
											There are a few other types of profile updates. To learn more, please follow the links to the full API documentation.
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:a
											mixpanel.people.set_once
											- set properties if they don't exist
										Element:li
										Element:a
											mixpanel.people.append
											- append to a list property
										Element:li
										Element:a
											mixpanel.people.union
											- append to a list property, excluding duplicates
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Tracking revenue
						Node:
						(type) c
						(layer)2
							Element:p
								Mixpanel makes it easy to analyze the revenue you make from individual customers. By associating charges with user profiles, you can compare revenue across different customer segments and calculate things like lifetime value.
						Node:
						(type) c
						(layer)2
							Element:p
								You can track a single transaction with
							Element:a
								mixpanel.people.track_charge
								. This call will add transactions to the individual user profile, which will also be reflected in the
							Element:a
								Mixpanel Revenue report
								.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								// Make sure identify has been called
							Element:span
								// before making revenue updates
							Element:span
								mixpanel
							Element:span
								.
							Element:span
								identify
							Element:span
								(
							Element:span
								"13793"
							Element:span
								);
							Element:span
								// Tracks $100 in revenue for user 13793
							Element:span
								mixpanel
							Element:span
								.
							Element:span
								people
							Element:span
								.
							Element:span
								track_charge
							Element:span
								(
							Element:span
								100
							Element:span
								);
							Element:span
								// Refund this user 50 dollars
							Element:span
								mixpanel
							Element:span
								.
							Element:span
								people
							Element:span
								.
							Element:span
								track_charge
							Element:span
								(
							Element:span
								-
							Element:span
								50
							Element:span
								);
							Element:span
								// Tracks $25 in revenue for user 13793
							Element:span
								// on the 2nd of January at 9:45pm
							Element:span
								mixpanel
							Element:span
								.
							Element:span
								people
							Element:span
								.
							Element:span
								track_charge
							Element:span
								(
							Element:span
								25
							Element:span
								,
							Element:span
								{
							Element:span
								'$time'
							Element:span
								:
							Element:span
								"2013-01-02T21:45:00"
							Element:span
								}
							Element:span
								);
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								In-app notifications
						Node:
						(type) c
						(layer)2
							Element:p
								Mixpanel provides a
							Element:a
								quick start guide
								for web in-app notifications to help you get integrated.
						Node:
						(type) c
						(layer)2
							Element:p
								Make sure that you have already:
						Node:
						(type) c
						(layer)2
							Element:ol
								INTEGRATION TUTORIALDocument Sections
							Element:li
								Included the latest version of the
							Element:a
								Mixpanel JavaScript library
								on your website.
							Element:li
								Made sure you are
							Element:a
								identifying your users
								in your website's JavaScript code.
							Element:li
								Created a web in-app notification on the Notifications tab of the Mixpanel website.
						Node:
						(type) c
						(layer)2
							Element:ul
								Learn more
							Element:li
							Element:a
								Installing the library
							Element:li
							Element:a
								Sending events
							Element:li
							Element:a
								Super properties
							Element:li
							Element:a
								Managing user identity
							Element:li
							Element:a
								Storing user profiles
							Element:li
							Element:a
								Tracking revenue
							Element:li
							Element:a
								In-app notifications
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:a
								Full API reference
