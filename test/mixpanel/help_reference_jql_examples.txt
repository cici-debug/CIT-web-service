Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					JQL: Examples
			Node:
			(type) c
			(layer)1
				Element:p
					Here are some example queries to help understand what you can get from JQL. We'll include sample output, but you should try running the queries yourself.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Segmentation query
						Node:
						(type) c
						(layer)2
							Element:p
								You may be familiar with Mixpanel's Segmentation report, which allows you to filter and segment your events based on their properties. This is useful for understanding how different user segments behave, and what trends look like over time.
						Node:
						(type) c
						(layer)2
							Element:p
								This is one of Mixpanel's core features, and its biggest selling point is its flexibility. We can reimplement most of the segmentation backend with only a few lines of code using JQL.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								function
							Element:span
								main
							Element:span
								()
							Element:span
								{
							Element:span
								// always segment by day
							Element:span
								var
							Element:span
								groupKeys
							Element:span
								=
							Element:span
								[
							Element:span
								function
							Element:span
								(
							Element:span
								event
							Element:span
								)
							Element:span
								{
							Element:span
								return
							Element:span
								(
							Element:span
								new
							Element:span
								Date
							Element:span
								(
							Element:span
								event
							Element:span
								.
							Element:span
								time
							Element:span
								)).
							Element:span
								toISOString
							Element:span
								().
							Element:span
								split
							Element:span
								(
							Element:span
								'T'
							Element:span
								)[
							Element:span
								0
							Element:span
								];
							Element:span
								}];
							Element:span
								if
							Element:span
								(
							Element:span
								params
							Element:span
								.
							Element:span
								segment_property
							Element:span
								)
							Element:span
								{
							Element:span
								groupKeys
							Element:span
								.
							Element:span
								push
							Element:span
								(
							Element:span
								params
							Element:span
								.
							Element:span
								segment_property
							Element:span
								);
							Element:span
								}
							Element:span
								// "total" segmentation is just a groupby
							Element:span
								if
							Element:span
								(
							Element:span
								params
							Element:span
								.
							Element:span
								type
							Element:span
								==
							Element:span
								"total"
							Element:span
								)
							Element:span
								{
							Element:span
								return
							Element:span
								Events
							Element:span
								({
							Element:span
								from_date
							Element:span
								:
							Element:span
								params
							Element:span
								.
							Element:span
								from_date
							Element:span
								,
							Element:span
								to_date
							Element:span
								:
							Element:span
								params
							Element:span
								.
							Element:span
								to_date
							Element:span
								})
							Element:span
								.
							Element:span
								filter
							Element:span
								(
							Element:span
								function
							Element:span
								(
							Element:span
								e
							Element:span
								)
							Element:span
								{
							Element:span
								return
							Element:span
								e
							Element:span
								.
							Element:span
								name
							Element:span
								==
							Element:span
								event_name
							Element:span
								});
							Element:span
								.
							Element:span
								groupBy
							Element:span
								(
							Element:span
								groupKeys
							Element:span
								,
							Element:span
								mixpanel
							Element:span
								.
							Element:span
								reducer
							Element:span
								.
							Element:span
								count
							Element:span
								());
							Element:span
								}
							Element:span
								// unique segmentation has to be deduped before
							Element:span
								// the groupby
							Element:span
								if
							Element:span
								(
							Element:span
								params
							Element:span
								.
							Element:span
								type
							Element:span
								==
							Element:span
								"unique"
							Element:span
								)
							Element:span
								{
							Element:span
								return
							Element:span
								Events
							Element:span
								({
							Element:span
								from_date
							Element:span
								:
							Element:span
								params
							Element:span
								.
							Element:span
								from_date
							Element:span
								,
							Element:span
								to_date
							Element:span
								:
							Element:span
								params
							Element:span
								.
							Element:span
								to_date
							Element:span
								})
							Element:span
								.
							Element:span
								filter
							Element:span
								(
							Element:span
								function
							Element:span
								(
							Element:span
								e
							Element:span
								)
							Element:span
								{
							Element:span
								return
							Element:span
								e
							Element:span
								.
							Element:span
								name
							Element:span
								==
							Element:span
								event_name
							Element:span
								});
							Element:span
								// use groupByUser to only count the user once
							Element:span
								// per segment
							Element:span
								.
							Element:span
								groupByUser
							Element:span
								(
							Element:span
								groupKeys
							Element:span
								,
							Element:span
								function
							Element:span
								()
							Element:span
								{
							Element:span
								return
							Element:span
								1
							Element:span
								;
							Element:span
								})
							Element:span
								.
							Element:span
								groupBy
							Element:span
								(
							Element:span
								// slice off the distinct_id part of the key and group again
							Element:span
								[
							Element:span
								function
							Element:span
								(
							Element:span
								row
							Element:span
								)
							Element:span
								{
							Element:span
								return
							Element:span
								row
							Element:span
								.
							Element:span
								key
							Element:span
								.
							Element:span
								slice
							Element:span
								(
							Element:span
								1
							Element:span
								)
							Element:span
								}],
							Element:span
								mixpanel
							Element:span
								.
							Element:span
								reducer
							Element:span
								.
							Element:span
								count
							Element:span
								()
							Element:span
								)
							Element:span
								}
							Element:span
								}
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Example output
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											// "homepage" segmented by day and "referrer"
										Element:span
											[
										Element:span
											{
										Element:span
											"key"
										Element:span
											:
										Element:span
											[
										Element:span
											"2015-10-01"
										Element:span
											,
										Element:span
											"google.com"
										Element:span
											],
										Element:span
											"value"
										Element:span
											:
										Element:span
											3487
										Element:span
											},
										Element:span
											{
										Element:span
											"key"
										Element:span
											:
										Element:span
											[
										Element:span
											"2015-10-01"
										Element:span
											,
										Element:span
											"$direct"
										Element:span
											],
										Element:span
											"value"
										Element:span
											:
										Element:span
											432
										Element:span
											},
										Element:span
											{
										Element:span
											"key"
										Element:span
											:
										Element:span
											[
										Element:span
											"2015-10-01"
										Element:span
											,
										Element:span
											"reddit.com"
										Element:span
											],
										Element:span
											"value"
										Element:span
											:
										Element:span
											876
										Element:span
											},
										Element:span
											{
										Element:span
											"key"
										Element:span
											:
										Element:span
											[
										Element:span
											"2015-10-02"
										Element:span
											,
										Element:span
											"google.com"
										Element:span
											],
										Element:span
											"value"
										Element:span
											:
										Element:span
											4298
										Element:span
											},
										Element:span
											...
										Element:span
											// more data
										Element:span
											]
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Funnel analysis
						Node:
						(type) c
						(layer)2
							Element:p
								Here's a pretty simple implementation of Funnels, another of Mixpanel's core features. Funnels help you understand how users flow through a series of steps that you define.
						Node:
						(type) c
						(layer)2
							Element:p
								In this example, we process each user individually to figure out how far they got in the funnel, then we count the number of users that ended at each step. From there, we can get the final funnel: the number of users who completed each step of the funnel.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								var
							Element:span
								funnel
							Element:span
								=
							Element:span
								params
							Element:span
								.
							Element:span
								funnel
							Element:span
								||
							Element:span
								[
							Element:span
								"homepage"
							Element:span
								,
							Element:span
								"signup"
							Element:span
								,
							Element:span
								"purchase"
							Element:span
								];
							Element:span
								function
							Element:span
								main
							Element:span
								()
							Element:span
								{
							Element:span
								return
							Element:span
								Events
							Element:span
								({
							Element:span
								from_date
							Element:span
								:
							Element:span
								params
							Element:span
								.
							Element:span
								from_date
							Element:span
								,
							Element:span
								to_date
							Element:span
								:
							Element:span
								params
							Element:span
								.
							Element:span
								to_date
							Element:span
								})
							Element:span
								// get the last step seen for each user
							Element:span
								.
							Element:span
								groupByUser
							Element:span
								(
							Element:span
								function
							Element:span
								(
							Element:span
								current_step
							Element:span
								,
							Element:span
								events
							Element:span
								)
							Element:span
								{
							Element:span
								if
							Element:span
								(
							Element:span
								current_step
							Element:span
								===
							Element:span
								undefined
							Element:span
								)
							Element:span
								{
							Element:span
								current_step
							Element:span
								=
							Element:span
								-
							Element:span
								1
							Element:span
								}
							Element:span
								_
							Element:span
								.
							Element:span
								each
							Element:span
								(
							Element:span
								events
							Element:span
								,
							Element:span
								function
							Element:span
								(
							Element:span
								e
							Element:span
								)
							Element:span
								{
							Element:span
								if
							Element:span
								(
							Element:span
								e
							Element:span
								.
							Element:span
								name
							Element:span
								==
							Element:span
								funnel
							Element:span
								[
							Element:span
								current_step
							Element:span
								+
							Element:span
								1
							Element:span
								])
							Element:span
								{
							Element:span
								current_step
							Element:span
								++
							Element:span
								;
							Element:span
								}
							Element:span
								});
							Element:span
								return
							Element:span
								current_step
							Element:span
								;
							Element:span
								})
							Element:span
								// filter out users who did not enter the funnel
							Element:span
								.
							Element:span
								filter
							Element:span
								(
							Element:span
								function
							Element:span
								(
							Element:span
								item
							Element:span
								)
							Element:span
								{
							Element:span
								return
							Element:span
								item
							Element:span
								.
							Element:span
								value
							Element:span
								>
							Element:span
								-
							Element:span
								1
							Element:span
								})
							Element:span
								// count the number of users who ended at each step
							Element:span
								.
							Element:span
								groupBy
							Element:span
								(
							Element:span
								[
							Element:span
								function
							Element:span
								(
							Element:span
								item
							Element:span
								)
							Element:span
								{
							Element:span
								return
							Element:span
								item
							Element:span
								.
							Element:span
								value
							Element:span
								}],
							Element:span
								mixpanel
							Element:span
								.
							Element:span
								reducer
							Element:span
								.
							Element:span
								count
							Element:span
								()
							Element:span
								)
							Element:span
								// do some math to add the step N users to the previous step(s)
							Element:span
								// this is converting us from "users who ended at each step"
							Element:span
								// into "users who were ever present at each step"
							Element:span
								.
							Element:span
								reduce
							Element:span
								(
							Element:span
								function
							Element:span
								(
							Element:span
								accumulators
							Element:span
								,
							Element:span
								steps
							Element:span
								)
							Element:span
								{
							Element:span
								var
							Element:span
								funnel_steps
							Element:span
								=
							Element:span
								Array
							Element:span
								(
							Element:span
								funnel
							Element:span
								.
							Element:span
								length
							Element:span
								);
							Element:span
								for
							Element:span
								(
							Element:span
								var
							Element:span
								i
							Element:span
								=
							Element:span
								0
							Element:span
								;
							Element:span
								i
							Element:span
								<
							Element:span
								funnel_steps
							Element:span
								.
							Element:span
								length
							Element:span
								;
							Element:span
								i
							Element:span
								++
							Element:span
								)
							Element:span
								{
							Element:span
								funnel_steps
							Element:span
								[
							Element:span
								i
							Element:span
								]
							Element:span
								=
							Element:span
								0
							Element:span
								;
							Element:span
								}
							Element:span
								_
							Element:span
								.
							Element:span
								each
							Element:span
								(
							Element:span
								steps
							Element:span
								,
							Element:span
								function
							Element:span
								(
							Element:span
								step
							Element:span
								)
							Element:span
								{
							Element:span
								// the group key was the step the user ended on
							Element:span
								var
							Element:span
								step_idx
							Element:span
								=
							Element:span
								step
							Element:span
								.
							Element:span
								key
							Element:span
								[
							Element:span
								0
							Element:span
								];
							Element:span
								// increment each previous step by the number of
							Element:span
								// users who ended at this step.
							Element:span
								while
							Element:span
								(
							Element:span
								step_idx
							Element:span
								>
							Element:span
								-
							Element:span
								1
							Element:span
								)
							Element:span
								{
							Element:span
								funnel_steps
							Element:span
								[
							Element:span
								step_idx
							Element:span
								]
							Element:span
								+=
							Element:span
								step
							Element:span
								.
							Element:span
								value
							Element:span
								;
							Element:span
								step_idx
							Element:span
								--
							Element:span
								;
							Element:span
								}
							Element:span
								});
							Element:span
								// if there are a LOT of steps we might have
							Element:span
								// processed some of them previously, so we have
							Element:span
								// to add the previously processed counts together.
							Element:span
								_
							Element:span
								.
							Element:span
								each
							Element:span
								(
							Element:span
								accumulators
							Element:span
								,
							Element:span
								function
							Element:span
								(
							Element:span
								accumulator
							Element:span
								)
							Element:span
								{
							Element:span
								_
							Element:span
								.
							Element:span
								each
							Element:span
								(
							Element:span
								accumulator
							Element:span
								,
							Element:span
								function
							Element:span
								(
							Element:span
								step_count
							Element:span
								,
							Element:span
								i
							Element:span
								)
							Element:span
								{
							Element:span
								funnel_steps
							Element:span
								[
							Element:span
								i
							Element:span
								]
							Element:span
								+=
							Element:span
								step_count
							Element:span
								;
							Element:span
								});
							Element:span
								});
							Element:span
								return
							Element:span
								funnel_steps
							Element:span
								;
							Element:span
								});
							Element:span
								}
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Example output
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											// step counts for a 5 step funnel
										Element:span
											[
										Element:span
											[
										Element:span
											2538
										Element:span
											,
										Element:span
											437
										Element:span
											,
										Element:span
											354
										Element:span
											,
										Element:span
											274
										Element:span
											,
										Element:span
											214
										Element:span
											]
										Element:span
											]
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Grouping by a dynamic key
						Node:
						(type) c
						(layer)2
							Element:p
								The most interesting thing about
							Element:span
								groupBy
								is that it makes it very easy to group by a dynamically computed key -- instead of just doing a simple "group by these two properties", we can write a function to calculate a key.
						Node:
						(type) c
						(layer)2
							Element:p
								In this example, we ask the question "what are the top 10 most common email domains of our users?". We don't have the email domain as a property, but we have the email, so we can compute it.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								// helper function to pluck out the domain
							Element:span
								function
							Element:span
								getEmailDomain
							Element:span
								(
							Element:span
								user
							Element:span
								)
							Element:span
								{
							Element:span
								var
							Element:span
								email
							Element:span
								=
							Element:span
								user
							Element:span
								.
							Element:span
								properties
							Element:span
								[
							Element:span
								"$email"
							Element:span
								];
							Element:span
								if
							Element:span
								(
							Element:span
								!
							Element:span
								email
							Element:span
								)
							Element:span
								{
							Element:span
								return
							Element:span
								undefined
							Element:span
								;
							Element:span
								}
							Element:span
								pos
							Element:span
								=
							Element:span
								email
							Element:span
								.
							Element:span
								indexOf
							Element:span
								(
							Element:span
								'@'
							Element:span
								);
							Element:span
								if
							Element:span
								(
							Element:span
								pos
							Element:span
								<
							Element:span
								0
							Element:span
								)
							Element:span
								{
							Element:span
								return
							Element:span
								undefined
							Element:span
								;
							Element:span
								}
							Element:span
								return
							Element:span
								email
							Element:span
								.
							Element:span
								substr
							Element:span
								(
							Element:span
								pos
							Element:span
								+
							Element:span
								1
							Element:span
								);
							Element:span
								}
							Element:span
								function
							Element:span
								main
							Element:span
								()
							Element:span
								{
							Element:span
								return
							Element:span
								People
							Element:span
								()
							Element:span
								.
							Element:span
								groupBy
							Element:span
								([
							Element:span
								getEmailDomain
							Element:span
								],
							Element:span
								mixpanel
							Element:span
								.
							Element:span
								reducer
							Element:span
								.
							Element:span
								count
							Element:span
								())
							Element:span
								.
							Element:span
								reduce
							Element:span
								(
							Element:span
								mixpanel
							Element:span
								.
							Element:span
								reducer
							Element:span
								.
							Element:span
								top
							Element:span
								(
							Element:span
								10
							Element:span
								));
							Element:span
								}
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Example output
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											[
										Element:span
											[
										Element:span
											{
										Element:span
											"key"
										Element:span
											:
										Element:span
											[
										Element:span
											"gmail.com"
										Element:span
											],
										Element:span
											"value"
										Element:span
											:
										Element:span
											2074
										Element:span
											},
										Element:span
											{
										Element:span
											"key"
										Element:span
											:
										Element:span
											[
										Element:span
											"mixpanel.com"
										Element:span
											],
										Element:span
											"value"
										Element:span
											:
										Element:span
											822
										Element:span
											},
										Element:span
											...
										Element:span
											// more data
										Element:span
											]
										Element:span
											]
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								User flows
						Node:
						(type) c
						(layer)2
							Element:p
								Mixpanel once built a product called
							Element:a
								Flow
								, which helped people understand how users were flowing through a website. Unfortunately, it was not a hugely popular product, so we chose to retire it.
						Node:
						(type) c
						(layer)2
							Element:p
								However, the analysis is an interesting example of what we can do with JQL. Here you can specify a first event (such as "logged in"), and a depth for the flow tree.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								var
							Element:span
								main
							Element:span
								=
							Element:span
								function
							Element:span
								()
							Element:span
								{
							Element:span
								return
							Element:span
								Events
							Element:span
								({
							Element:span
								from_date
							Element:span
								:
							Element:span
								params
							Element:span
								.
							Element:span
								from_date
							Element:span
								,
							Element:span
								to_date
							Element:span
								:
							Element:span
								params
							Element:span
								.
							Element:span
								to_date
							Element:span
								,
							Element:span
								})
							Element:span
								// use groupByUser to create a single flow object per user
							Element:span
								.
							Element:span
								groupByUser
							Element:span
								(
							Element:span
								function
							Element:span
								(
							Element:span
								flow
							Element:span
								,
							Element:span
								events
							Element:span
								)
							Element:span
								{
							Element:span
								flow
							Element:span
								=
							Element:span
								flow
							Element:span
								||
							Element:span
								{
							Element:span
								depth
							Element:span
								:
							Element:span
								0
							Element:span
								};
							Element:span
								flow
							Element:span
								.
							Element:span
								current
							Element:span
								=
							Element:span
								flow
							Element:span
								.
							Element:span
								current
							Element:span
								||
							Element:span
								flow
							Element:span
								;
							Element:span
								for
							Element:span
								(
							Element:span
								var
							Element:span
								i
							Element:span
								=
							Element:span
								0
							Element:span
								;
							Element:span
								i
							Element:span
								<
							Element:span
								events
							Element:span
								.
							Element:span
								length
							Element:span
								;
							Element:span
								i
							Element:span
								++
							Element:span
								)
							Element:span
								{
							Element:span
								var
							Element:span
								e
							Element:span
								=
							Element:span
								events
							Element:span
								[
							Element:span
								i
							Element:span
								];
							Element:span
								if
							Element:span
								(
							Element:span
								flow
							Element:span
								.
							Element:span
								depth
							Element:span
								===
							Element:span
								0
							Element:span
								&&
							Element:span
								e
							Element:span
								.
							Element:span
								name
							Element:span
								!=
							Element:span
								params
							Element:span
								.
							Element:span
								first_event
							Element:span
								)
							Element:span
								{
							Element:span
								// ignore events until we see the starting event
							Element:span
								continue
							Element:span
								;
							Element:span
								}
							Element:span
								if
							Element:span
								(
							Element:span
								flow
							Element:span
								.
							Element:span
								depth
							Element:span
								===
							Element:span
								params
							Element:span
								.
							Element:span
								max_depth
							Element:span
								)
							Element:span
								{
							Element:span
								// break after we hit the max depth
							Element:span
								return
							Element:span
								flow
							Element:span
								;
							Element:span
								}
							Element:span
								flow
							Element:span
								.
							Element:span
								depth
							Element:span
								++
							Element:span
								;
							Element:span
								flow
							Element:span
								.
							Element:span
								current
							Element:span
								[
							Element:span
								e
							Element:span
								.
							Element:span
								name
							Element:span
								]
							Element:span
								=
							Element:span
								flow
							Element:span
								.
							Element:span
								current
							Element:span
								[
							Element:span
								e
							Element:span
								.
							Element:span
								name
							Element:span
								]
							Element:span
								||
							Element:span
								{
							Element:span
								'count'
							Element:span
								:
							Element:span
								0
							Element:span
								,
							Element:span
								'next'
							Element:span
								:
							Element:span
								{}};
							Element:span
								flow
							Element:span
								.
							Element:span
								current
							Element:span
								[
							Element:span
								e
							Element:span
								.
							Element:span
								name
							Element:span
								].
							Element:span
								count
							Element:span
								++
							Element:span
								;
							Element:span
								flow
							Element:span
								.
							Element:span
								current
							Element:span
								=
							Element:span
								flow
							Element:span
								.
							Element:span
								current
							Element:span
								[
							Element:span
								e
							Element:span
								.
							Element:span
								name
							Element:span
								].
							Element:span
								next
							Element:span
								;
							Element:span
								}
							Element:span
								return
							Element:span
								flow
							Element:span
								;
							Element:span
								})
							Element:span
								.
							Element:span
								map
							Element:span
								(
							Element:span
								function
							Element:span
								(
							Element:span
								item
							Element:span
								)
							Element:span
								{
							Element:span
								// delete temporary variables
							Element:span
								delete
							Element:span
								item
							Element:span
								.
							Element:span
								value
							Element:span
								.
							Element:span
								depth
							Element:span
								;
							Element:span
								delete
							Element:span
								item
							Element:span
								.
							Element:span
								value
							Element:span
								.
							Element:span
								current
							Element:span
								;
							Element:span
								// return the flow object
							Element:span
								return
							Element:span
								item
							Element:span
								.
							Element:span
								value
							Element:span
								;
							Element:span
								})
							Element:span
								.
							Element:span
								reduce
							Element:span
								(
							Element:span
								mixpanel
							Element:span
								.
							Element:span
								reducer
							Element:span
								.
							Element:span
								object_merge
							Element:span
								())
							Element:span
								}
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Example output
									Node:
									(type) c
									(layer)3
										Element:pre
											Examples
										Element:span
											// Common paths starting at homepage:
										Element:span
											// homepage -> login -> play game
										Element:span
											// homepage -> play video -> login
										Element:span
											[
										Element:span
											{
										Element:span
											"homepage"
										Element:span
											:
										Element:span
											{
										Element:span
											"count"
										Element:span
											:
										Element:span
											3919
										Element:span
											,
										Element:span
											"next"
										Element:span
											:
										Element:span
											{
										Element:span
											"login"
										Element:span
											:
										Element:span
											{
										Element:span
											"count"
										Element:span
											:
										Element:span
											357
										Element:span
											,
										Element:span
											"next"
										Element:span
											:
										Element:span
											{
										Element:span
											"play game"
										Element:span
											:
										Element:span
											{
										Element:span
											"count"
										Element:span
											:
										Element:span
											200
										Element:span
											,
										Element:span
											"next"
										Element:span
											:
										Element:span
											{}
										Element:span
											},
										Element:span
											"purchase"
										Element:span
											:
										Element:span
											{
										Element:span
											"count"
										Element:span
											:
										Element:span
											20
										Element:span
											,
										Element:span
											"next"
										Element:span
											:
										Element:span
											{}
										Element:span
											}
										Element:span
											}
										Element:span
											},
										Element:span
											"play video"
										Element:span
											:
										Element:span
											{
										Element:span
											"count"
										Element:span
											:
										Element:span
											123
										Element:span
											,
										Element:span
											"next"
										Element:span
											:
										Element:span
											{
										Element:span
											"login"
										Element:span
											:
										Element:span
											{
										Element:span
											"count"
										Element:span
											:
										Element:span
											87
										Element:span
											,
										Element:span
											"next"
										Element:span
											:
										Element:span
											{}
										Element:span
											}
										Element:span
											"play video"
										Element:span
											:
										Element:span
											{
										Element:span
											"count"
										Element:span
											:
										Element:span
											23
										Element:span
											,
										Element:span
											"next"
										Element:span
											:
										Element:span
											{}
										Element:span
											}
										Element:span
											}
										Element:span
											},
										Element:span
											...
										Element:span
											// more data
										Element:span
											}
										Element:span
											}
										Element:span
											}
										Element:span
											]
									Node:
									(type) c
									(layer)3
										Element:ul
											Tutorials
										Element:li
										Element:a
											Segmentation
										Element:li
										Element:a
											Funnel analysis
										Element:li
										Element:a
											Grouping by a dynamic key
										Element:li
										Element:a
											User flows
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:a
											Cities with the most active users
										Element:li
										Element:a
											Funnel dropoff platform report
