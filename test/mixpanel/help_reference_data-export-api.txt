Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					Data Export API
			Node:
			(type) c
			(layer)1
				Element:p
					Mixpanel lets you pull your data out at any time - which means you can add key graphs to your own internal dashboards with ease.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Client libraries
						Node:
						(type) c
						(layer)2
							Element:p
								These are official libraries that can be used to easily consume data through the Mixpanel API.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Python
									Node:
									(type) c
									(layer)3
										Element:p
										Element:a
											Download the Python client library
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											PHP
									Node:
									(type) c
									(layer)3
										Element:p
										Element:a
											Download the PHP client library
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Ruby
									Node:
									(type) c
									(layer)3
										Element:p
											Option 1:
										Element:a
											Visit the Ruby repository
									Node:
									(type) c
									(layer)3
										Element:p
											Option 2:
										Element:a
											mixpanel-api (Customer contributed)
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											JavaScript
									Node:
									(type) c
									(layer)3
										Element:p
											We do not have a JavaScript client library, but we have implemented JSONP on the API backend. See the
										Element:a
											Wikipedia article
											for a brief overview. Our JSONP parameter is "callback". This parameter will not be used during signature calculation.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Authentication
						Node:
						(type) c
						(layer)2
							Element:p
								In order to ensure the security of your data, the Mixpanel API requires a basic system of authentication.
						Node:
						(type) c
						(layer)2
							Element:p
								Note: Our previously-used authentication method is deprecated. Please see further in this section for information on the old method.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Required parameter
									Node:
									(type) c
									(layer)3
										Element:p
										Element:code
											api_secret
											- This can be found by clicking on your name in the upper righthand corner under Project Settings.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Authorization steps
									Node:
									(type) c
									(layer)3
										Element:p
											The Data Export API accepts
										Element:a
											Basic access authentication
											over HTTPS as an authorization method. To make an authorized request, put your project's API Secret in the "username" field of the Basic access authentication header. Make sure you use HTTPS and not HTTP - our API rejects requests made over HTTP, since this sends your API Secret over the internet in plain text.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Examples
									Node:
									(type) c
									(layer)3
										Element:p
											Here's an example of a properly-authenticated request made with
										Element:a
											cURL
											:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											curl https://mixpanel.com/api/2.0/segmentation/ -u : -d from_date="2016-02-11" -d to_date="2016-02-11" -d event="Viewed Page"
									Node:
									(type) c
									(layer)3
										Element:p
											You can also make a request in your browser:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											https://api_secret@mixpanel.com/api/2.0/segmentation?from_date=2016-02-11&to_date=2016-02-11&event=Viewed Page
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Deprecated Authentication
						Node:
						(type) c
						(layer)2
							Element:p
								Note: This authentication method is deprecated. It is recommended that you use the current authentication method highlighted above.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Required parameters
									Node:
									(type) c
									(layer)3
										Element:p
										Element:code
											api_key
											- This is an API key corresponding to the project you wish to consume from.
									Node:
									(type) c
									(layer)3
										Element:p
										Element:code
											api_secret
											- This is a secret API key corresponding to the project. You should never give this out to anyone or show it.
									Node:
									(type) c
									(layer)3
										Element:p
										Element:code
											sig
											- Signature for the method call, used in combination with your api_key, api_secret, and API endpoint parameters.
									Node:
									(type) c
									(layer)3
										Element:p
										Element:code
											expire
											- UTC time in seconds; used to expire an API request.
									Node:
									(type) c
									(layer)3
										Element:p
											Both
										Element:code
											api_key
											and
										Element:code
											api_secret
											can be found on your account page under API information.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Authorization steps
									Node:
									(type) c
									(layer)3
										Element:ol
										Element:li
											All requests must have the following parameters:
										Element:code
											api_key
											,
										Element:code
											expire
											,
										Element:code
											sig
											.
										Element:li
										Element:code
											api_key
											can be found on your account page under API Information.
										Element:li
										Element:code
											expire
											is any UTC time in the future that represents how long you wish the request consuming data to last. For example, if you wish the request to only last 1 minute, you would calculate the UTC time as of now and then add 60 representing 1 minute ahead.
										Element:li
										Element:p
											Calculate the signature of the request using your
										Element:code
											api_secret
											. Calculating the signature is done in parts: sort the parameters you are including with the URL alphabetically, join into a string resulting in key=valuekey2=value2 (excluding ampersands), concatenate the result with the
										Element:code
											api_secret
											by appending it, and lastly md5 hash the final string.
										Element:p
											This hash is used for the
										Element:code
											sig
											parameter in the request therefore it should not be be calculated with
										Element:code
											sig
											as a parameter. The purpose of this process is to prevent unauthorized attempts to consume your data as much as possible.
										Element:p
											Pseudo code:
										Element:pre
										Element:span
											args
										Element:span
											=
										Element:span
											all
										Element:span
											query
										Element:span
											parameters
										Element:span
											going
										Element:span
											to
										Element:span
											be
										Element:span
											sent
										Element:span
											out
										Element:span
											with
										Element:span
											the
										Element:span
											request
										Element:span
											(
										Element:span
											e
										Element:span
											.
										Element:span
											g
										Element:span
											.
										Element:span
											api_key
										Element:span
											,
										Element:span
											unit
										Element:span
											,
										Element:span
											interval
										Element:span
											,
										Element:span
											expire
										Element:span
											,
										Element:span
											format
										Element:span
											,
										Element:span
											etc
										Element:span
											.)
										Element:span
											excluding
										Element:span
											sig
										Element:span
											.
										Element:span
											args_sorted
										Element:span
											=
										Element:span
											sort_args_alphabetically_by_key
										Element:span
											(
										Element:span
											args
										Element:span
											)
										Element:span
											args_concat
										Element:span
											=
										Element:span
											join
										Element:span
											(
										Element:span
											args_sorted
										Element:span
											)
										Element:span
											#
										Element:span
											Output
										Element:span
											:
										Element:span
											api_key
										Element:span
											=
										Element:span
											ed0b8ff6cc3fbb37a521b40019915f18event
										Element:span
											=
										Element:span
											[
										Element:span
											"pages"
										Element:span
											]
										Element:span
											#
										Element:span
											expire
										Element:span
											=
										Element:span
											1248499222
										Element:span
											format
										Element:span
											=
										Element:span
											jsoninterval
										Element:span
											=
										Element:span
											24
										Element:span
											unit
										Element:span
											=
										Element:span
											hour
										Element:span
											sig
										Element:span
											=
										Element:span
											md5
										Element:span
											(
										Element:span
											args_concat
										Element:span
											+
										Element:span
											api_secret
										Element:span
											)
										Element:li
										Element:p
											Lastly, include
										Element:code
											sig
											with your URL request along with the normal parameters to consume data securely. Your URL should look similar to this however varying on the endpoint you are requesting data from:
										Element:pre
										Element:code
											https://mixpanel.com/api/2.0/events/?interval=7&expire=1275624968&sig=046ceec93983811dad0fb20f842c351a&api_key=f0aa346688cee071cd85d857285a3464&type=average&event=%5B%22splash+features
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Annotations
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Method: annotations
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											URI: https://mixpanel.com/api/2.0/annotations/
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Description:
									Node:
									(type) c
									(layer)3
										Element:p
											List the annotations for the given date range.
											from_datestring The beginning of the date range to get annotations for in yyyy-mm-dd format. This date is inclusive. to_datestring The end of the date range to get annotations for in yyyy-mm-dd format. This date is inclusive.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Example URL:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											https://mixpanel.com/api/2.0/annotations/?from_date=2014-05-11&to_date=2014-06-09
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Return format:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											{
										Element:span
											"annotations"
										Element:span
											:
										Element:span
											[
										Element:span
											{
										Element:span
											"date"
										Element:span
											:
										Element:span
											"2014-05-23 00:00:00"
										Element:span
											,
										Element:span
											"project_id"
										Element:span
											:
										Element:span
											23880
										Element:span
											,
										Element:span
											"id"
										Element:span
											:
										Element:span
											148
										Element:span
											,
										Element:span
											"description"
										Element:span
											:
										Element:span
											"Launched v2.0 of product"
										Element:span
											},
										Element:span
											{
										Element:span
											"date"
										Element:span
											:
										Element:span
											"2014-05-29 00:00:00"
										Element:span
											,
										Element:span
											"project_id"
										Element:span
											:
										Element:span
											23880
										Element:span
											,
										Element:span
											"id"
										Element:span
											:
										Element:span
											150
										Element:span
											,
										Element:span
											"description"
										Element:span
											:
										Element:span
											"Streamlined registration process"
										Element:span
											}
										Element:span
											],
										Element:span
											"error"
										Element:span
											:
										Element:span
											false
										Element:span
											}
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Method: create
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											URI: https://mixpanel.com/api/2.0/annotations/create/
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Description:
									Node:
									(type) c
									(layer)3
										Element:p
											Create a new annotation at the specified time.
											datestring The time in yyyy-mm-hh HH:MM:SS when you want to create the annotation at. descriptionstring The annotation description.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Example URL:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											https://mixpanel.com/api/2.0/annotations/create?date=2014-05-15+00%3A00%3A00&description=Launched+version+2.0!
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Return format:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											{
										Element:span
											"error"
										Element:span
											:
										Element:span
											false
										Element:span
											}
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Method: update
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											URI: https://mixpanel.com/api/2.0/annotations/update/
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Description:
									Node:
									(type) c
									(layer)3
										Element:p
											Update an annotation to the new time or description.
											idstring The ID of the annotation you wish to update. datestring The time in yyyy-mm-hh HH:MM:SS to update the annotation to. descriptionstring The annotation description to update the annotation to.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Example URL:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											https://mixpanel.com/api/2.0/annotations/update?id=148&date=2014-03-09+12%3A34%3A56&description=Concluded button A/B test.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Return format:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											{
										Element:span
											"error"
										Element:span
											:
										Element:span
											false
										Element:span
											}
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Method: delete
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											URI: https://mixpanel.com/api/2.0/annotations/delete/
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Description:
									Node:
									(type) c
									(layer)3
										Element:p
											Delete an annotation.
											idstring The ID of the annotation to delete.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Example URL:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											https://mixpanel.com/api/2.0/annotations/delete?id=42
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Return format:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											{
										Element:span
											"error"
										Element:span
											:
										Element:span
											false
										Element:span
											}
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Events
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Method: events
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											URI: https://mixpanel.com/api/2.0/events/
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Description:
									Node:
									(type) c
									(layer)3
										Element:p
											Get unique, total, or average data for a set of events over N days, weeks, or months.
											eventarray The event or events that you wish to get data for, encoded as a JSON array. Example format: "["play song", "log in", "add playlist"]" typestring The analysis type you would like to get data for - such as general, unique, or average events. Valid values: "general", "unique", or "average" unitstring This can be "minute", "hour", "day", "week", or "month". It determines the level of granularity of the data you get back. Note that you cannot get hourly uniques. intervalinteger The number of "units" to return data for - minutes, hours, days, weeks, or months. 1 will return data for the current unit (minute, hour, day, week or month). 2 will return the current and previous units, and so on. Specify either interval or from_date and to_date. from_datestring The first date to return data for, in yyyy-mm-dd format. This date is inclusive. Specify either interval or from_date and to_date. to_datestring The last date to return data for, in yyyy-mm-dd format. This date is inclusive. Specify either interval or from_date and to_date. formatstring The data return format, such as JSON or CSV. Options: "json" (default), "csv"
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Example URL:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											https://mixpanel.com/api/2.0/events/?interval=7&&type=average&event=%5B%22splash+features%22%2C+%22account-page%22%5D&unit=day
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Return format:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											{
										Element:span
											"data"
										Element:span
											:
										Element:span
											{
										Element:span
											"series"
										Element:span
											:
										Element:span
											[
										Element:span
											"2010-05-29"
										Element:span
											,
										Element:span
											"2010-05-30"
										Element:span
											,
										Element:span
											"2010-05-31"
										Element:span
											,
										Element:span
											],
										Element:span
											"values"
										Element:span
											:
										Element:span
											{
										Element:span
											"account-page"
										Element:span
											:
										Element:span
											{
										Element:span
											"2010-05-30"
										Element:span
											:
										Element:span
											1
										Element:span
											,},
										Element:span
											"splash features"
										Element:span
											:
										Element:span
											{
										Element:span
											"2010-05-29"
										Element:span
											:
										Element:span
											6
										Element:span
											,
										Element:span
											"2010-05-30"
										Element:span
											:
										Element:span
											4
										Element:span
											,
										Element:span
											"2010-05-31"
										Element:span
											:
										Element:span
											5
										Element:span
											,
										Element:span
											}
										Element:span
											}
										Element:span
											},
										Element:span
											"legend_size"
										Element:span
											:
										Element:span
											2
										Element:span
											}
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Method: top
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											URI: https://mixpanel.com/api/2.0/events/top/
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Description:
									Node:
									(type) c
									(layer)3
										Element:p
											Get the top events for today, with their counts and the normalized percent change from yesterday.
											typestring The analysis type you would like to get data for - such as general, unique, or average events. Valid values: "general", "unique", or "average" limitinteger The maximum number of events to return. Defaults to 100.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Example URL:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											https://mixpanel.com/api/2.0/events/top?type=unique
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Return format:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											{
										Element:span
											"events"
										Element:span
											:
										Element:span
											[{
										Element:span
											"amount"
										Element:span
											:
										Element:span
											2
										Element:span
											,
										Element:span
											"event"
										Element:span
											:
										Element:span
											u
										Element:span
											"funnel"
										Element:span
											,
										Element:span
											"percent_change"
										Element:span
											:
										Element:span
											-
										Element:span
											0.35635745999582824
										Element:span
											},
										Element:span
											{
										Element:span
											"amount"
										Element:span
											:
										Element:span
											75
										Element:span
											,
										Element:span
											"event"
										Element:span
											:
										Element:span
											u
										Element:span
											"pages"
										Element:span
											,
										Element:span
											"percent_change"
										Element:span
											:
										Element:span
											-
										Element:span
											0.20209602478821687
										Element:span
											},
										Element:span
											{
										Element:span
											"amount"
										Element:span
											:
										Element:span
											2
										Element:span
											,
										Element:span
											"event"
										Element:span
											:
										Element:span
											u
										Element:span
											"projects"
										Element:span
											,
										Element:span
											"percent_change"
										Element:span
											:
										Element:span
											1.0
										Element:span
											}],
										Element:span
											"type"
										Element:span
											:
										Element:span
											u
										Element:span
											"unique"
										Element:span
											}
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Method: names
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											URI: https://mixpanel.com/api/2.0/events/names/
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Description:
									Node:
									(type) c
									(layer)3
										Element:p
											Get a list of the most common events over the last 31 days.
											typestring The analysis type you would like to get data for - such as general, unique, or average events. Valid values: "general", "unique", or "average" limitinteger The maximum number of events to return. Defaults to 255.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Example URL:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											https://mixpanel.com/api/2.0/events/names?type=general
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Return format:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											// Alphabetical Order, descending
										Element:span
											[
										Element:span
											"battle"
										Element:span
											,
										Element:span
											"click signup button"
										Element:span
											,
										Element:span
											"send message"
										Element:span
											,
										Element:span
											"View homepage"
										Element:span
											]
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Event properties
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Method: properties
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											URI: https://mixpanel.com/api/2.0/events/properties/
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Description:
									Node:
									(type) c
									(layer)3
										Element:p
											Get unique, total, or average data for of a single event and property over days, weeks, or months.
											eventstring The event that you wish to get data for. Note: this is a single event name, not an array. namestring The name of the property you would like to get data for. valuesarray The specific property values that you would like to get data for, encoded as a JSON array. Example: If you have a property "gender" you may have values "male", "female" and "unknown". If you just want data for female and unknown users, you can include a values property that looks like "["female", "unknown"]" typestring The analysis type you would like to get data for - such as general, unique, or average events. Valid values: "general", "unique", or "average" unitstring This can be "minute", "hour", "day", "week", or "month". It determines the level of granularity of the data you get back. Note that you cannot get hourly uniques. intervalinteger The number of "units" to return data for - minutes, hours, days, weeks, or months. 1 will return data for the current unit (minute, hour, day, week or month). 2 will return the current and previous units, and so on. Specify either interval or from_date and to_date. from_datestring The first date to return data for, in yyyy-mm-dd format. This date is inclusive. Specify either interval or from_date and to_date. to_datestring The last date to return data for, in yyyy-mm-dd format. This date is inclusive. Specify either interval or from_date and to_date. formatstring The data return format, such as JSON or CSV. Options: "json" (default), "csv" limitinteger The maximum number of values to return. Defaults to 255.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Example URL:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											https://mixpanel.com/api/2.0/events/properties?name=feature&interval=7&type=unique&event=splash+features&unit=day
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Return format:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											{
										Element:span
											"data"
										Element:span
											:
										Element:span
											{
										Element:span
											"series"
										Element:span
											:
										Element:span
											[
										Element:span
											"2010-05-29"
										Element:span
											,
										Element:span
											"2010-05-30"
										Element:span
											,
										Element:span
											"2010-05-31"
										Element:span
											,
										Element:span
											],
										Element:span
											"values"
										Element:span
											:
										Element:span
											{
										Element:span
											"splash features"
										Element:span
											:
										Element:span
											{
										Element:span
											"2010-05-29"
										Element:span
											:
										Element:span
											6
										Element:span
											,
										Element:span
											"2010-05-30"
										Element:span
											:
										Element:span
											4
										Element:span
											,
										Element:span
											"2010-05-31"
										Element:span
											:
										Element:span
											5
										Element:span
											,
										Element:span
											}
										Element:span
											}
										Element:span
											},
										Element:span
											"legend_size"
										Element:span
											:
										Element:span
											2
										Element:span
											}
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Method: top
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											URI: https://mixpanel.com/api/2.0/events/properties/top/
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Description:
									Node:
									(type) c
									(layer)3
										Element:p
											Get the top property names for an event.
											eventstring The event that you wish to get data for. Note: this is a single event name, not an array. limitinteger The maximum number of properties to return. Defaults to 10.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Example URL:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											https://mixpanel.com/api/2.0/events/properties/top?event=splash+feature
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Return format:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											{
										Element:span
											"ad version"
										Element:span
											:
										Element:span
											{
										Element:span
											"count"
										Element:span
											:
										Element:span
											295
										Element:span
											},
										Element:span
											"user type"
										Element:span
											:
										Element:span
											{
										Element:span
											"count"
										Element:span
											:
										Element:span
											91
										Element:span
											}}
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Method: values
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											URI: https://mixpanel.com/api/2.0/events/properties/values/
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Description:
									Node:
									(type) c
									(layer)3
										Element:p
											Get the top values for a property.
											eventstring The event that you wish to get data for. Note: this is a single event name, not an array. namestring The name of the property you would like to get data for. limitinteger The maximum number of events to return. Defaults to 255.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Example URL:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											https://mixpanel.com/api/2.0/events/properties/values?name=feature&interval=7&type=general&event=splash+features&unit=day
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Return format:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											[
										Element:span
											"male"
										Element:span
											,
										Element:span
											"female"
										Element:span
											,
										Element:span
											"unknown"
										Element:span
											]
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Funnels
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Method: funnels
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											URI: https://mixpanel.com/api/2.0/funnels/
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Description:
									Node:
									(type) c
									(layer)3
										Element:p
											Get data for a funnel.
											funnel_idinteger The funnel that you wish to get data for. from_datestring The first date in yyyy-mm-dd format from which a user can begin the first step in the funnel. This date is inclusive. to_datestring The last date in yyyy-mm-dd format from which a user can begin the first step in the funnel. This date is inclusive. lengthinteger The number of units (defined by length_unit) each user has to complete the funnel, starting from the time they triggered the first step in the funnel. May not be greater than 90 days. Note that we will query for events past the end of to_date to look for funnel completions. This defaults to the value that was previously saved in the UI for this funnel. length_unitstring The unit applied to the length parameter. Can be "second", "minute", "hour", or "day". Defaults to the value that was previously saved in the UI for this funnel. intervalinteger The number of days you want your results bucketed into. The default value is 1. unitstring This is an alternate way of specifying interval and can be "day", "week", or "month". onstring The property expression to segment the event on. See the
									Node:
									(type) c
									(layer)3
										Element:a
											expression section
											below. wherestring An expression to filter events by. See the
									Node:
									(type) c
									(layer)3
										Element:a
											expression section
											below. limitinteger Return the top limit property values. Defaults to 255 if not explicitly included. This parameter does nothing if "on" is not specified.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Example URL:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											https://mixpanel.com/api/2.0/funnels/?funnel_id=1&unit=week
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Return format:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											{
										Element:span
											"meta"
										Element:span
											:
										Element:span
											{
										Element:span
											"dates"
										Element:span
											:
										Element:span
											[
										Element:span
											"2016-09-12"
										Element:span
											,
										Element:span
											"2016-09-19"
										Element:span
											,
										Element:span
											"2016-09-26"
										Element:span
											]},
										Element:span
											"data"
										Element:span
											:
										Element:span
											{
										Element:span
											"2016-09-12"
										Element:span
											:
										Element:span
											{
										Element:span
											"steps"
										Element:span
											:
										Element:span
											[
										Element:span
											{
										Element:span
											"count"
										Element:span
											:
										Element:span
											32688
										Element:span
											,
										Element:span
											"step_conv_ratio"
										Element:span
											:
										Element:span
											1
										Element:span
											,
										Element:span
											"goal"
										Element:span
											:
										Element:span
											"App Open"
										Element:span
											,
										Element:span
											"overall_conv_ratio"
										Element:span
											:
										Element:span
											1
										Element:span
											,
										Element:span
											"avg_time"
										Element:span
											:
										Element:span
											null
										Element:span
											,
										Element:span
											"event"
										Element:span
											:
										Element:span
											"App Open"
										Element:span
											},
										Element:span
											{
										Element:span
											"count"
										Element:span
											:
										Element:span
											20524
										Element:span
											,
										Element:span
											"step_conv_ratio"
										Element:span
											:
										Element:span
											0.627875673029858
										Element:span
											,
										Element:span
											"goal"
										Element:span
											:
										Element:span
											"Game Played"
										Element:span
											,
										Element:span
											"overall_conv_ratio"
										Element:span
											:
										Element:span
											0.627875673029858
										Element:span
											,
										Element:span
											"avg_time"
										Element:span
											:
										Element:span
											718
										Element:span
											,
										Element:span
											"event"
										Element:span
											:
										Element:span
											"Game Played"
										Element:span
											}],
										Element:span
											"analysis"
										Element:span
											:
										Element:span
											{
										Element:span
											"completion"
										Element:span
											:
										Element:span
											20524
										Element:span
											,
										Element:span
											"starting_amount"
										Element:span
											:
										Element:span
											32688
										Element:span
											,
										Element:span
											"steps"
										Element:span
											:
										Element:span
											2
										Element:span
											,
										Element:span
											"worst"
										Element:span
											:
										Element:span
											1
										Element:span
											}},
										Element:span
											"2016-09-19"
										Element:span
											:
										Element:span
											{
										Element:span
											"steps"
										Element:span
											:
										Element:span
											[
										Element:span
											{
										Element:span
											"count"
										Element:span
											:
										Element:span
											32486
										Element:span
											,
										Element:span
											"step_conv_ratio"
										Element:span
											:
										Element:span
											1
										Element:span
											,
										Element:span
											"goal"
										Element:span
											:
										Element:span
											"App Open"
										Element:span
											,
										Element:span
											"overall_conv_ratio"
										Element:span
											:
										Element:span
											1
										Element:span
											,
										Element:span
											"avg_time"
										Element:span
											:
										Element:span
											null
										Element:span
											,
										Element:span
											"event"
										Element:span
											:
										Element:span
											"App Open"
										Element:span
											},
										Element:span
											{
										Element:span
											"count"
										Element:span
											:
										Element:span
											20809
										Element:span
											,
										Element:span
											"step_conv_ratio"
										Element:span
											:
										Element:span
											0.6405528535369082
										Element:span
											,
										Element:span
											"goal"
										Element:span
											:
										Element:span
											"Game Played"
										Element:span
											,
										Element:span
											"overall_conv_ratio"
										Element:span
											:
										Element:span
											0.6405528535369082
										Element:span
											,
										Element:span
											"avg_time"
										Element:span
											:
										Element:span
											698
										Element:span
											,
										Element:span
											"event"
										Element:span
											:
										Element:span
											"Game Played"
										Element:span
											}],
										Element:span
											"analysis"
										Element:span
											:
										Element:span
											{
										Element:span
											"completion"
										Element:span
											:
										Element:span
											20809
										Element:span
											,
										Element:span
											"starting_amount"
										Element:span
											:
										Element:span
											32486
										Element:span
											,
										Element:span
											"steps"
										Element:span
											:
										Element:span
											2
										Element:span
											,
										Element:span
											"worst"
										Element:span
											:
										Element:span
											1
										Element:span
											}},
										Element:span
											"2016-09-26"
										Element:span
											:
										Element:span
											{
										Element:span
											"steps"
										Element:span
											:
										Element:span
											[
										Element:span
											{
										Element:span
											"count"
										Element:span
											:
										Element:span
											16103
										Element:span
											,
										Element:span
											"step_conv_ratio"
										Element:span
											:
										Element:span
											1
										Element:span
											,
										Element:span
											"goal"
										Element:span
											:
										Element:span
											"App Open"
										Element:span
											,
										Element:span
											"overall_conv_ratio"
										Element:span
											:
										Element:span
											1
										Element:span
											,
										Element:span
											"avg_time"
										Element:span
											:
										Element:span
											null
										Element:span
											,
										Element:span
											"event"
										Element:span
											:
										Element:span
											"App Open"
										Element:span
											},
										Element:span
											{
										Element:span
											"count"
										Element:span
											:
										Element:span
											12679
										Element:span
											,
										Element:span
											"step_conv_ratio"
										Element:span
											:
										Element:span
											0.7873688132646091
										Element:span
											,
										Element:span
											"goal"
										Element:span
											:
										Element:span
											"Game Played"
										Element:span
											,
										Element:span
											"overall_conv_ratio"
										Element:span
											:
										Element:span
											0.7873688132646091
										Element:span
											,
										Element:span
											"avg_time"
										Element:span
											:
										Element:span
											571
										Element:span
											,
										Element:span
											"event"
										Element:span
											:
										Element:span
											"Game Played"
										Element:span
											}],
										Element:span
											"analysis"
										Element:span
											:
										Element:span
											{
										Element:span
											"completion"
										Element:span
											:
										Element:span
											12679
										Element:span
											,
										Element:span
											"starting_amount"
										Element:span
											:
										Element:span
											16103
										Element:span
											,
										Element:span
											"steps"
										Element:span
											:
										Element:span
											2
										Element:span
											,
										Element:span
											"worst"
										Element:span
											:
										Element:span
											1
										Element:span
											}}
										Element:span
											}}
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Method: list
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											URI: https://mixpanel.com/api/2.0/funnels/list/
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Description:
									Node:
									(type) c
									(layer)3
										Element:p
											Get the names and funnel_ids of your funnels. This method takes no parameters.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Example URL:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											https://mixpanel.com/api/2.0/funnels/list
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Return format:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											[{
										Element:span
											"funnel_id"
										Element:span
											:
										Element:span
											7509
										Element:span
											,
										Element:span
											"name"
										Element:span
											:
										Element:span
											"Signup funnel"
										Element:span
											},
										Element:span
											{
										Element:span
											"funnel_id"
										Element:span
											:
										Element:span
											9070
										Element:span
											,
										Element:span
											"name"
										Element:span
											:
										Element:span
											"Funnel tutorial"
										Element:span
											}]
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Segmentation
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Method: segmentation
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											URI: https://mixpanel.com/api/2.0/segmentation/
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Description:
									Node:
									(type) c
									(layer)3
										Element:p
											Get data for an event, segmented and filtered by properties.
											eventstring The event that you wish to segment on. from_datestring The date in yyyy-mm-dd format from which to begin querying for the event from. This date is inclusive. to_datestring The date in yyyy-mm-dd format from which to stop querying for the event from. This date is inclusive. onstring The property expression to segment the event on. See the
									Node:
									(type) c
									(layer)3
										Element:a
											expressions section
											below. unitstring This can be "minute", "hour", "day", or "month". This determines the buckets into which the property values that you segment on are placed. The default value is "day". intervalinteger Optional parameter in lieu of 'unit'. Determines the number of days your results are bucketed into. Can be used with or without 'from_date' and 'to_date' parameters. wherestring An expression to filter events by. See the
									Node:
									(type) c
									(layer)3
										Element:a
											expressions section
											below. limitinteger Return the top limit property values. This parameter does nothing if "on" is not specified. typestring This can be "general", "unique", or "average". If this is set to "unique", we return the unique count of events or property values. If set to "general", we return the total, including repeats. If set to "average", we return the average count. The default value is "general".
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Example 1
									Node:
									(type) c
									(layer)3
										Element:p
											Suppose Harry Q. Bovik has a website named example.com. He has an event named signed up, sent whenever a user signs up to example.com. It has a string property named mp_country_code that stores the country code of the user signing up.
									Node:
									(type) c
									(layer)3
										Element:p
											A query with the following GET parameters sent over HTTPS with your API Secret as the Basic Access Authentication username would return the number of signed up events for each day from 2011-08-06 to 2011-08-09:
											Parameter
									Node:
									(type) c
									(layer)3
										Element:b
											Value
											event signed up from_date 2011-08-06 to_date 2011-08-09
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Return format:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											{
										Element:span
											"data"
										Element:span
											:
										Element:span
											{
										Element:span
											"series"
										Element:span
											:
										Element:span
											[
										Element:span
											"2011-08-08"
										Element:span
											,
										Element:span
											"2011-08-09"
										Element:span
											,
										Element:span
											"2011-08-06"
										Element:span
											,
										Element:span
											"2011-08-07"
										Element:span
											],
										Element:span
											"values"
										Element:span
											:
										Element:span
											{
										Element:span
											"signed up"
										Element:span
											:
										Element:span
											{
										Element:span
											"2011-08-06"
										Element:span
											:
										Element:span
											147
										Element:span
											,
										Element:span
											"2011-08-07"
										Element:span
											:
										Element:span
											146
										Element:span
											,
										Element:span
											"2011-08-08"
										Element:span
											:
										Element:span
											776
										Element:span
											,
										Element:span
											"2011-08-09"
										Element:span
											:
										Element:span
											1376
										Element:span
											}}},
										Element:span
											"legend_size"
										Element:span
											:
										Element:span
											1
										Element:span
											}
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Example 2
									Node:
									(type) c
									(layer)3
										Element:p
											Suppose Harry is impressed with the number of signups on 2011-08-09, and now wants to know the top five countries his signups came from on that day. He can make the following query sent over HTTPS with your API Secret as the Basic Access Authentication username:
											Parameter
									Node:
									(type) c
									(layer)3
										Element:b
											Value
											event signed up from_date 2011-08-09 to_date 2011-08-09 limit 5 on properties["mp_country_code"]
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Return format:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											{
										Element:span
											"data"
										Element:span
											:
										Element:span
											{
										Element:span
											"series"
										Element:span
											:
										Element:span
											[
										Element:span
											"2011-08-09"
										Element:span
											],
										Element:span
											"values"
										Element:span
											:
										Element:span
											{
										Element:span
											"CA"
										Element:span
											:
										Element:span
											{
										Element:span
											"2011-08-09"
										Element:span
											:
										Element:span
											277
										Element:span
											},
										Element:span
											"FR"
										Element:span
											:
										Element:span
											{
										Element:span
											"2011-08-09"
										Element:span
											:
										Element:span
											8
										Element:span
											},
										Element:span
											"GB"
										Element:span
											:
										Element:span
											{
										Element:span
											"2011-08-09"
										Element:span
											:
										Element:span
											19
										Element:span
											},
										Element:span
											"IN"
										Element:span
											:
										Element:span
											{
										Element:span
											"2011-08-09"
										Element:span
											:
										Element:span
											19
										Element:span
											},
										Element:span
											"US"
										Element:span
											:
										Element:span
											{
										Element:span
											"2011-08-09"
										Element:span
											:
										Element:span
											1036
										Element:span
											}}},
										Element:span
											"legend_size"
										Element:span
											:
										Element:span
											5
										Element:span
											}
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Example 3
									Node:
									(type) c
									(layer)3
										Element:p
											Harry now wants to zero in on the US and Canada. He is tracking a property named mp_keyword, which tells him the search keyword that users used to get to example.com. Now he wants to determine how many signups from the US and Canada came about as a result of a search that contained the word "harry." He can do that with the following query sent over HTTPS with your API Secret as the Basic Access Authentication username:
											Parameter
									Node:
									(type) c
									(layer)3
										Element:b
											Value
											event signed up from_date 2011-08-09 to_date 2011-08-09 on properties["mp_country_code"] where "harry" in properties["mp_keyword"] and ("CA" == properties["mp_country_code"] or "US" == properties["mp_country_code"])
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Return format:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											{
										Element:span
											"data"
										Element:span
											:
										Element:span
											{
										Element:span
											"series"
										Element:span
											:
										Element:span
											[
										Element:span
											"2011-08-09"
										Element:span
											],
										Element:span
											"values"
										Element:span
											:
										Element:span
											{
										Element:span
											"CA"
										Element:span
											:
										Element:span
											{
										Element:span
											"2011-08-09"
										Element:span
											:
										Element:span
											31
										Element:span
											},
										Element:span
											"US"
										Element:span
											:
										Element:span
											{
										Element:span
											"2011-08-09"
										Element:span
											:
										Element:span
											312
										Element:span
											}}},
										Element:span
											"legend_size"
										Element:span
											:
										Element:span
											2
										Element:span
											}
									Node:
									(type) c
									(layer)3
										Element:p
											Note: Segmentation expressions with to_dates in the future will return inaccurate data.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Method: numeric
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											URI: https://mixpanel.com/api/2.0/segmentation/numeric/
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Description:
									Node:
									(type) c
									(layer)3
										Element:p
											Get data for an event, segmented and filtered by properties, with values placed into numeric buckets.
											eventstring The event that you wish to segment on. from_datestring The date in yyyy-mm-dd format from which to begin querying for the event from. This date is inclusive. to_datestring The date in yyyy-mm-dd format from which to stop querying for the event from. This date is inclusive. The date range may not be more than 30 days. onstring The property expression to segment the event on. This expression must be a numeric property. See the
									Node:
									(type) c
									(layer)3
										Element:a
											expressions section
											below. unitstring This can be "hour" or "day". This determines the buckets into which the property values that you segment on are placed. The default value is "day". wherestring An expression to filter events by. See the
									Node:
									(type) c
									(layer)3
										Element:a
											expressions section
											below. typestring This can be "general", "unique", or "average". If this is set to "unique", we return the unique count of events or property values. If it is set to "general", we return the total, including repeats. If this is set to "average", we return the unique count of events or property values divided by the general count. The default value is "general".
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Example 1
									Node:
									(type) c
									(layer)3
										Element:p
											Harry Q. Bovik also has an event named page loaded. It has a property named time that represents the time in milliseconds it took to load the page. Harry wants to see the distribution of page load times that are greater than 2000 milliseconds. But suppose Harry accidentally was sending the time property to Mixpanel as a string, so its the incorrect type. He can make the following query, sent over HTTPS with the API Secret as the Basic Access Authentication username, involving an explicit typecast to number to get the results he wants:
											Parameter
									Node:
									(type) c
									(layer)3
										Element:b
											Value
											event page loaded from_date 2011-08-06 to_date 2011-08-09 on number(properties["time"]) where number(properties["time"]) >= 2000 buckets 5
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Return format:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											{
										Element:span
											"data"
										Element:span
											:
										Element:span
											{
										Element:span
											"series"
										Element:span
											:
										Element:span
											[
										Element:span
											"2011-08-08"
										Element:span
											,
										Element:span
											"2011-08-09"
										Element:span
											,
										Element:span
											"2011-08-06"
										Element:span
											,
										Element:span
											"2011-08-07"
										Element:span
											],
										Element:span
											"values"
										Element:span
											:
										Element:span
											{
										Element:span
											"2,000 - 2,100"
										Element:span
											:
										Element:span
											{
										Element:span
											"2011-08-06"
										Element:span
											:
										Element:span
											1
										Element:span
											,
										Element:span
											"2011-08-07"
										Element:span
											:
										Element:span
											5
										Element:span
											,
										Element:span
											"2011-08-08"
										Element:span
											:
										Element:span
											4
										Element:span
											,
										Element:span
											"2011-08-09"
										Element:span
											:
										Element:span
											15
										Element:span
											},
										Element:span
											"2,100 - 2,200"
										Element:span
											:
										Element:span
											{
										Element:span
											"2011-08-07"
										Element:span
											:
										Element:span
											2
										Element:span
											,
										Element:span
											"2011-08-08"
										Element:span
											:
										Element:span
											7
										Element:span
											,
										Element:span
											"2011-08-09"
										Element:span
											:
										Element:span
											15
										Element:span
											},
										Element:span
											"2,200 - 2,300"
										Element:span
											:
										Element:span
											{
										Element:span
											"2011-08-06"
										Element:span
											:
										Element:span
											1
										Element:span
											,
										Element:span
											"2011-08-08"
										Element:span
											:
										Element:span
											6
										Element:span
											,
										Element:span
											"2011-08-09"
										Element:span
											:
										Element:span
											5
										Element:span
											},
										Element:span
											"2,300 - 2,400"
										Element:span
											:
										Element:span
											{
										Element:span
											"2011-08-06"
										Element:span
											:
										Element:span
											4
										Element:span
											,
										Element:span
											"2011-08-08"
										Element:span
											:
										Element:span
											1
										Element:span
											,
										Element:span
											"2011-08-09"
										Element:span
											:
										Element:span
											12
										Element:span
											},
										Element:span
											"2,400 - 2,500"
										Element:span
											:
										Element:span
											{
										Element:span
											"2011-08-08"
										Element:span
											:
										Element:span
											2
										Element:span
											,
										Element:span
											"2011-08-09"
										Element:span
											:
										Element:span
											5
										Element:span
											}}},
										Element:span
											"legend_size"
										Element:span
											:
										Element:span
											5
										Element:span
											}
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Method: sum
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											URI: https://mixpanel.com/api/2.0/segmentation/sum/
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Description:
									Node:
									(type) c
									(layer)3
										Element:p
											Sums an expression for events per unit time.
											eventstring The event that you wish to segment on. from_datestring The date in yyyy-mm-dd format from which to begin querying for the event from. This date is inclusive. to_datestring The date in yyyy-mm-dd format from which to stop querying for the event from. This date is inclusive. The date range may not be more than 30 days. onstring The expression to sum per unit time. The result of the expression should be a numeric value. If the expression is not numeric, a value of 0.0 is assumed. See the
									Node:
									(type) c
									(layer)3
										Element:a
											expressions section
											below. unitstring This can be "hour" or "day". This determines the buckets into which the property values that you segment on are placed. The default value is "day". wherestring An expression to filter events by. See the
									Node:
									(type) c
									(layer)3
										Element:a
											expressions section
											below.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Example 1
									Node:
									(type) c
									(layer)3
										Element:p
											Harry also sells things from example.com. He has an event named item sold that tracks each item that gets sold from his website. It has a number property named price that records the value of the item being sold. He has another number property named overhead that represents the overhead cost of the item. Harry can find out how much profit he is making each day with the following query, sent over HTTPS with the API Secret as the Basic Access Authentication username:
											Parameter
									Node:
									(type) c
									(layer)3
										Element:b
											Value
											event item sold from_date 2011-08-06 to_date 2011-08-09 on properties["price"] - properties["overhead"]
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Return format:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											{
										Element:span
											"results"
										Element:span
											:
										Element:span
											{
										Element:span
											"2011-08-06"
										Element:span
											:
										Element:span
											376.0
										Element:span
											,
										Element:span
											"2011-08-07"
										Element:span
											:
										Element:span
											634.0
										Element:span
											,
										Element:span
											"2011-08-08"
										Element:span
											:
										Element:span
											474.0
										Element:span
											,
										Element:span
											"2011-08-09"
										Element:span
											:
										Element:span
											483.0
										Element:span
											},
										Element:span
											"status"
										Element:span
											:
										Element:span
											"ok"
										Element:span
											}
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Method: average
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											URI: https://mixpanel.com/api/2.0/segmentation/average/
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Description:
									Node:
									(type) c
									(layer)3
										Element:p
											Averages an expression for events per unit time.
											eventstring The event that you wish to segment on. from_datestring The date in yyyy-mm-dd format from which to begin querying for the event from. This date is inclusive. to_datestring The date in yyyy-mm-dd format from which to stop querying for the event from. This date is inclusive. The date range may not be more than 30 days. onstring The expression to sum per unit time. The result of the expression should be a numeric value. If the expression is not numeric, a value of 0.0 is assumed. See the
									Node:
									(type) c
									(layer)3
										Element:a
											expressions section
											below. unitstring This can be "hour" or "day". This determines the buckets into which the property values that you segment on are placed. The default value is "day". wherestring An expression to filter events by. See the
									Node:
									(type) c
									(layer)3
										Element:a
											expressions section
											below.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Example 1
									Node:
									(type) c
									(layer)3
										Element:p
											Instead of finding out the total profit he is making per day by selling things from his website, Harry can also find out the average price of an item being sold with the following query, sent over HTTPS with the API Secret as the Basic Access Authentication username:
											Parameter
									Node:
									(type) c
									(layer)3
										Element:b
											Value
											event item sold from_date 2011-08-06 to_date 2011-08-09 on properties["price"]
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Return format:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											{
										Element:span
											"results"
										Element:span
											:
										Element:span
											{
										Element:span
											"2011-08-06"
										Element:span
											:
										Element:span
											8.64705882352939
										Element:span
											,
										Element:span
											"2011-08-07"
										Element:span
											:
										Element:span
											4.640625
										Element:span
											,
										Element:span
											"2011-08-08"
										Element:span
											:
										Element:span
											3.6230899830221
										Element:span
											,
										Element:span
											"2011-08-09"
										Element:span
											:
										Element:span
											7.3353658536585
										Element:span
											},
										Element:span
											"status"
										Element:span
											:
										Element:span
											"ok"
										Element:span
											}
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Segmentation expressions
						Node:
						(type) c
						(layer)2
							Element:p
								The power of segmentation comes from the ability to define custom expressions based on property names in the where and on parameters. An expression consists of a property, combined with one or more operators that can perform mathematical operations, logical operations, or typecasts. Expression are then applied in the where and on parameters of the segmentation API. The full grammar for expressions is given here:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								<
							Element:span
								expression
							Element:span
								>
							Element:span
								::=
							Element:span
								'properties["'
							Element:span
								<
							Element:span
								property
							Element:span
								>
							Element:span
								'"]'
							Element:span
								|
							Element:span
								<
							Element:span
								expression
							Element:span
								>
							Element:span
								<
							Element:span
								binary
							Element:span
								op
							Element:span
								>
							Element:span
								<
							Element:span
								expression
							Element:span
								>
							Element:span
								|
							Element:span
								<
							Element:span
								unary
							Element:span
								op
							Element:span
								>
							Element:span
								<
							Element:span
								expression
							Element:span
								>
							Element:span
								|
							Element:span
								<
							Element:span
								math
							Element:span
								op
							Element:span
								>
							Element:span
								'('
							Element:span
								<
							Element:span
								expression
							Element:span
								>
							Element:span
								')'
							Element:span
								|
							Element:span
								<
							Element:span
								typecast
							Element:span
								op
							Element:span
								>
							Element:span
								'('
							Element:span
								<
							Element:span
								expression
							Element:span
								>
							Element:span
								')'
							Element:span
								|
							Element:span
								'('
							Element:span
								<
							Element:span
								expression
							Element:span
								>
							Element:span
								')'
							Element:span
								|
							Element:span
								<
							Element:span
								boolean
							Element:span
								literal
							Element:span
								>
							Element:span
								|
							Element:span
								<
							Element:span
								numeric
							Element:span
								literal
							Element:span
								>
							Element:span
								|
							Element:span
								<
							Element:span
								string
							Element:span
								literal
							Element:span
								>
							Element:span
								<
							Element:span
								binary
							Element:span
								op
							Element:span
								>
							Element:span
								::=
							Element:span
								'+'
							Element:span
								|
							Element:span
								'-'
							Element:span
								|
							Element:span
								'*'
							Element:span
								|
							Element:span
								'/'
							Element:span
								|
							Element:span
								'%'
							Element:span
								|
							Element:span
								'=='
							Element:span
								|
							Element:span
								'!='
							Element:span
								|
							Element:span
								'>'
							Element:span
								|
							Element:span
								'>='
							Element:span
								|
							Element:span
								'<'
							Element:span
								|
							Element:span
								'<='
							Element:span
								|
							Element:span
								'in'
							Element:span
								|
							Element:span
								'and'
							Element:span
								|
							Element:span
								'or'
							Element:span
								<
							Element:span
								unary
							Element:span
								op
							Element:span
								>
							Element:span
								::=
							Element:span
								'-'
							Element:span
								|
							Element:span
								'not'
							Element:span
								<
							Element:span
								math
							Element:span
								op
							Element:span
								>
							Element:span
								::=
							Element:span
								'floor'
							Element:span
								|
							Element:span
								'round'
							Element:span
								|
							Element:span
								'ceil'
							Element:span
								<
							Element:span
								typecast
							Element:span
								op
							Element:span
								>
							Element:span
								::=
							Element:span
								'boolean'
							Element:span
								|
							Element:span
								'number'
							Element:span
								|
							Element:span
								'string'
							Element:span
								<
							Element:span
								property
							Element:span
								>
							Element:span
								::=
							Element:span
								'properties["'
							Element:span
								<
							Element:span
								property
							Element:span
								name
							Element:span
								>
							Element:span
								'"]'
						Node:
						(type) c
						(layer)2
							Element:p
								A great way to build segmentation expressions is via examining the segmentation requests made within our own Segmentation report!
							Element:a
								Click here to learn more
								.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Typecast Operations
									Node:
									(type) c
									(layer)3
										Element:p
											Internally, all properties of events have a type. This type is determined when we parse the event sent to us into a JSON object. Currently, there are three types, string, number, and boolean, which may be specified directly. A property may also have the values null and undefined, which are only handled internally. The default type is string. If you wish to treat an expression as another type, you may use the typecast operators to cast a property to a different type. For example, if properties["signed up"] has values of "true" and "false" as strings, and you wish to intercodet them as booleans, you may cast them by using the boolean() typecast function: boolean(properties["signed up"]).
									Node:
									(type) c
									(layer)3
										Element:p
											The typecasting rules are described below.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Casting to String
											Type
									Node:
									(type) c
									(layer)3
										Element:b
											Result
											String Same string Number String containing the decimal representation of the number. Boolean "true" or "false" null null undefined undefined
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Casting to Number
											Type
									Node:
									(type) c
									(layer)3
										Element:b
											Result
											String Attempts to interpret the string as a decimal. If this fails, the value becomes undefined. Number Same number Boolean 1.0 if true, 0.0 if false null undefined undefined undefined
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Casting to Boolean
											Type
									Node:
									(type) c
									(layer)3
										Element:b
											Result
											String "true", "1", "yes" evaluates to true; "false", "0", "no" evaluates to false Number false if 0, true otherwise Boolean Same boolean null false undefined false
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Binary Operations
									Node:
									(type) c
									(layer)3
										Element:p
											The arithmetic operators "-", "*", "/", "%" perform the subtraction, multiplication, division, and remainder operations, respectively. The division operator will return undefined if the divisor is 0. The sign of the value of the remainder will be equivalent to the dividend. All four of these operators expect both operands to be of the type number, or else the result is undefined.
									Node:
									(type) c
									(layer)3
										Element:p
											The "+" operator behaves as addition if its two operands are of type number. However, if its two operands are of type string, it will concatenate the two strings. In other cases, the result is undefined.
									Node:
									(type) c
									(layer)3
										Element:p
											The equals operator "==" will always return a boolean. When its two types are equal, it performs the standard equality comparison based on the values. If the types of its operands are not equal, false is returned. The not equals operator "!=" returns false when the equals operator would return true and vice-versa.
									Node:
									(type) c
									(layer)3
										Element:p
											The comparison operators ">", ">=", "
									Node:
									(type) c
									(layer)3
										Element:p
											The "in" operator returns true if both operands are of type string and the first string is a substring of the second. When both operands are of differing types, undefined is returned.
									Node:
									(type) c
									(layer)3
										Element:p
											The logical operators "and" and "or" accept boolean and undefined operands. An operand with type undefined evaluates as false. Any other types will result in an error.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Unary and Math Operations
									Node:
									(type) c
									(layer)3
										Element:p
											The "-" operator will negate an operand of type number, and return undefined otherwise.
									Node:
									(type) c
									(layer)3
										Element:p
											The "not" operator will perform the logical not on an operand of type boolean. It will also evaluate an operand of type undefined as true. All other operands will be evaluated to undefined.
									Node:
									(type) c
									(layer)3
										Element:p
											The "floor", "round", and "ceil" functions perform their mathematical operations on an operand of type number. On all other types, it will return undefined.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Retention
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Method: retention
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											URI: https://mixpanel.com/api/2.0/retention/
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Description:
									Node:
									(type) c
									(layer)3
										Element:p
											Get cohort analysis.
											from_datestring The date in yyyy-mm-dd format from which to begin generating cohorts from. This date is inclusive. to_datestring The date in yyyy-mm-dd format from which to stop generating cohorts from. This date is inclusive. retention_typestring Must be either "birth" or "compounded". Defaults to "birth". born_eventstring The first event a user must do to be counted in a birth retention cohort. Required when retention_type is "birth"; ignored otherwise. eventstring The event to generate returning counts for. Applies to both birth and compounded retention. If not specified, we look across all events. born_wherestring An expression to filter born_events by. See the
									Node:
									(type) c
									(layer)3
										Element:a
											expressions section
											above. wherestring An expression to filter the returning events by. See the
									Node:
									(type) c
									(layer)3
										Element:a
											expressions section
											above. intervalinteger The number of days you want your results bucketed into. May not be greater than 90 days. The default value is 1 or specified by unit. interval_countinteger The number of intervals you want; defaults to 1. Note that we include a "0th" interval for events which take place less than one interval after the initial event. unitstring This is an alternate way of specifying interval and can be "day", "week", or "month". onstring The property expression to segment the second event on. See the
									Node:
									(type) c
									(layer)3
										Element:a
											expressions section
											above. limitinteger Return the top limit segmentation values. This parameter does nothing if "on" is not specified.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Example URL:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											https://mixpanel.com/api/2.0/retention/?from_date=2012-01-01&to_date=2012-01-03&retention_type=birth&interval_count=2&event=viewed+report&born_event=event+integration&expire=1326512270&sig=2bdfb7fe5db9337f357e04f7d1a85b86
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Return format:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											{
										Element:span
											"2012-01-01"
										Element:span
											:
										Element:span
											{
										Element:span
											"counts"
										Element:span
											:
										Element:span
											[
										Element:span
											2
										Element:span
											,
										Element:span
											1
										Element:span
											,
										Element:span
											2
										Element:span
											],
										Element:span
											"first"
										Element:span
											:
										Element:span
											2
										Element:span
											},
										Element:span
											"2012-01-02"
										Element:span
											:
										Element:span
											{
										Element:span
											"counts"
										Element:span
											:
										Element:span
											[
										Element:span
											9
										Element:span
											,
										Element:span
											7
										Element:span
											,
										Element:span
											6
										Element:span
											],
										Element:span
											"first"
										Element:span
											:
										Element:span
											10
										Element:span
											},
										Element:span
											"2012-01-03"
										Element:span
											:
										Element:span
											{
										Element:span
											"counts"
										Element:span
											:
										Element:span
											[
										Element:span
											9
										Element:span
											,
										Element:span
											6
										Element:span
											,
										Element:span
											4
										Element:span
											],
										Element:span
											"first"
										Element:span
											:
										Element:span
											10
										Element:span
											}
										Element:span
											}
									Node:
									(type) c
									(layer)3
										Element:p
											We specified neither an interval nor a unit, so the interval is 1 day. This means that each user gets 24 hours in each interval to do the specified event. On 2012-01-02, 10 people did the born_event ("event integration"), as indicated by the first field. If the retention_type=compounded, then first will instead indicate the number of people who did event ("viewed report") on the specified date. 9 of those people did event ("viewed report") within 24 hours (the "0th" interval) of doing the born_event . 7 of those did event between 24 and 48 hours (interval 1) of the born_event. These 7 are a subset of the initial 10, but not necessarily a subset of the 9 (retention is not a funnel; see the number increase between 72 and 96 hours). And finially, 6 people did event between 48 and 72 hours (interval 2) after the born_event.
									Node:
									(type) c
									(layer)3
										Element:p
											In the Mixpanel retention UI, "First time" corresponds to retention_type=birth, and "Recurring" corresponds to retention_type=compounded.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Method: addiction
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											URI: https://mixpanel.com/api/2.0/retention/addiction/
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Description:
									Node:
									(type) c
									(layer)3
										Element:p
											Get data about how frequently people are performing events.
											from_datestring The date in yyyy-mm-dd format from which to begin generating cohorts from. This date is inclusive. to_datestring The date in yyyy-mm-dd format from which to stop generating cohorts from. This date is inclusive. unitstring The overall time period to return frequency of actions for. Can be "day", "week", or "month". addiction_unitstring The granularity to return frequency of actions at. Can be "hour" or "day". eventstring The event to generate returning counts for. wherestring An expression to filter the returning events by. See the
									Node:
									(type) c
									(layer)3
										Element:a
											expressions section
											above. onstring The property expression to segment the second event on. See the
									Node:
									(type) c
									(layer)3
										Element:a
											expressions section
											above. limitinteger Return the top limit segmentation values. This parameter does nothing if "on" is not specified.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Example URL:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											https://mixpanel.com/api/2.0/retention/addiction?unit=day&from_date=2012-01-01&to_date=2012-01-03&event=Viewed+report&addiction_unit=hour
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Return format:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											{
										Element:span
											"2012-01-01"
										Element:span
											:
										Element:span
											[
										Element:span
											305
										Element:span
											,
										Element:span
											107
										Element:span
											,
										Element:span
											60
										Element:span
											,
										Element:span
											41
										Element:span
											,
										Element:span
											32
										Element:span
											,
										Element:span
											20
										Element:span
											,
										Element:span
											12
										Element:span
											,
										Element:span
											7
										Element:span
											,
										Element:span
											4
										Element:span
											,
										Element:span
											3
										Element:span
											,
										Element:span
											3
										Element:span
											,
										Element:span
											3
										Element:span
											,
										Element:span
											2
										Element:span
											,
										Element:span
											2
										Element:span
											,
										Element:span
											2
										Element:span
											,
										Element:span
											1
										Element:span
											,
										Element:span
											1
										Element:span
											,
										Element:span
											1
										Element:span
											,
										Element:span
											1
										Element:span
											,
										Element:span
											1
										Element:span
											,
										Element:span
											1
										Element:span
											,
										Element:span
											1
										Element:span
											,
										Element:span
											1
										Element:span
											,
										Element:span
											1
										Element:span
											],
										Element:span
											"2012-01-02"
										Element:span
											:
										Element:span
											[
										Element:span
											495
										Element:span
											,
										Element:span
											204
										Element:span
											,
										Element:span
											117
										Element:span
											,
										Element:span
											77
										Element:span
											,
										Element:span
											53
										Element:span
											,
										Element:span
											36
										Element:span
											,
										Element:span
											26
										Element:span
											,
										Element:span
											20
										Element:span
											,
										Element:span
											12
										Element:span
											,
										Element:span
											7
										Element:span
											,
										Element:span
											4
										Element:span
											,
										Element:span
											3
										Element:span
											,
										Element:span
											3
										Element:span
											,
										Element:span
											1
										Element:span
											,
										Element:span
											1
										Element:span
											,
										Element:span
											1
										Element:span
											,
										Element:span
											1
										Element:span
											,
										Element:span
											0
										Element:span
											,
										Element:span
											0
										Element:span
											,
										Element:span
											0
										Element:span
											,
										Element:span
											0
										Element:span
											,
										Element:span
											0
										Element:span
											,
										Element:span
											0
										Element:span
											,
										Element:span
											0
										Element:span
											],
										Element:span
											"2012-01-03"
										Element:span
											:
										Element:span
											[
										Element:span
											671
										Element:span
											,
										Element:span
											324
										Element:span
											,
										Element:span
											176
										Element:span
											,
										Element:span
											122
										Element:span
											,
										Element:span
											81
										Element:span
											,
										Element:span
											63
										Element:span
											,
										Element:span
											48
										Element:span
											,
										Element:span
											31
										Element:span
											,
										Element:span
											21
										Element:span
											,
										Element:span
											14
										Element:span
											,
										Element:span
											9
										Element:span
											,
										Element:span
											5
										Element:span
											,
										Element:span
											3
										Element:span
											,
										Element:span
											1
										Element:span
											,
										Element:span
											1
										Element:span
											,
										Element:span
											1
										Element:span
											,
										Element:span
											0
										Element:span
											,
										Element:span
											0
										Element:span
											,
										Element:span
											0
										Element:span
											,
										Element:span
											0
										Element:span
											,
										Element:span
											0
										Element:span
											,
										Element:span
											0
										Element:span
											,
										Element:span
											0
										Element:span
											,
										Element:span
											0
										Element:span
											]
										Element:span
											}
									Node:
									(type) c
									(layer)3
										Element:p
											We specified "day" as unit and "hour" as addiction_unit, so one day"s worth of data is shown for each date, split into hours. On 2012-01-02, 495 people did the event ("Viewed report") during at least 1 hour out of the next 24 hour period (the period specified by "unit"). 204 people did the event during at least 2 hours. 117 people did the event during at least 3 hours.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Engage
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Method: engage
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											URI: https://mixpanel.com/api/2.0/engage/
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Description:
									Node:
									(type) c
									(layer)3
										Element:p
											Query People Data.
											wherestring An expression to filter people by. See the
									Node:
									(type) c
									(layer)3
										Element:a
											expressions section
											above. session_idstring A string id provided in the results of a previous query. Using a session_id speeds up api response, and allows paging through results. pageinteger Which page of the results to retrieve. Pages start at zero. If the "page" parameter is provided, the session_id parameter must also be provided.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Return format:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											{
										Element:span
											"page"
										Element:span
											:
										Element:span
											0
										Element:span
											,
										Element:span
											"page_size"
										Element:span
											:
										Element:span
											1000
										Element:span
											,
										Element:span
											"results"
										Element:span
											:
										Element:span
											[{
										Element:span
											"$distinct_id"
										Element:span
											:
										Element:span
											4
										Element:span
											,
										Element:span
											"$properties"
										Element:span
											:
										Element:span
											{
										Element:span
											"$created"
										Element:span
											:
										Element:span
											"2008-12-12T11:20:47"
										Element:span
											,
										Element:span
											"$email"
										Element:span
											:
										Element:span
											"example@mixpanel.com"
										Element:span
											,
										Element:span
											"$first_name"
										Element:span
											:
										Element:span
											"Example"
										Element:span
											,
										Element:span
											"$last_name"
										Element:span
											:
										Element:span
											"Name"
										Element:span
											,
										Element:span
											"$last_seen"
										Element:span
											:
										Element:span
											"2008-06-09T23:08:40"
										Element:span
											,}}],
										Element:span
											"session_id"
										Element:span
											:
										Element:span
											"1234567890-EXAMPL"
										Element:span
											,
										Element:span
											"status"
										Element:span
											:
										Element:span
											"ok"
										Element:span
											,
										Element:span
											"total"
										Element:span
											:
										Element:span
											1
										Element:span
											}
									Node:
									(type) c
									(layer)3
										Element:p
											Api responses will return at most page_size records for each request. To request additional records, callers should repeat their call to the api using the same where param, but provide a session_id parameter with a value taken from the first response, and include a page parameter with a value one greater than the value of page in the response.
									Node:
									(type) c
									(layer)3
										Element:p
											A caller trying to retrieve all of the records for a particular query might use an algorithm something like this:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											#
										Element:span
											Get
										Element:span
											the
										Element:span
											first
										Element:span
											page
										Element:span
											of
										Element:span
											data
										Element:span
											associated
										Element:span
											with
										Element:span
											our
										Element:span
											selector
										Element:span
											expression
										Element:span
											this_page
										Element:span
											=
										Element:span
											query_api
										Element:span
											(
										Element:span
											where
										Element:span
											=
										Element:span
											YOUR_SELECTOR_EXPRESSION
										Element:span
											)
										Element:span
											do_something_with_response
										Element:span
											(
										Element:span
											this_page
										Element:span
											)
										Element:span
											#
										Element:span
											If
										Element:span
											we
										Element:span
											get
										Element:span
											fewer
										Element:span
											records
										Element:span
											than
										Element:span
											the
										Element:span
											page_sized
										Element:span
											returned
										Element:span
											with
										Element:span
											our
										Element:span
											results
										Element:span
											,
										Element:span
											#
										Element:span
											then
										Element:span
											there
										Element:span
											are
										Element:span
											no
										Element:span
											more
										Element:span
											records
										Element:span
											to
										Element:span
											get
										Element:span
											.
										Element:span
											Otherwise
										Element:span
											,
										Element:span
											keep
										Element:span
											querying
										Element:span
											for
										Element:span
											additional
										Element:span
											pages
										Element:span
											.
										Element:span
											while
										Element:span
											(
										Element:span
											length
										Element:span
											of
										Element:span
											this_page
										Element:span
											.
										Element:span
											results
										Element:span
											)
										Element:span
											>=
										Element:span
											this_page
										Element:span
											.
										Element:span
											page_size
										Element:span
											:
										Element:span
											next_page_number
										Element:span
											=
										Element:span
											this_page
										Element:span
											.
										Element:span
											page
										Element:span
											+
										Element:span
											1
										Element:span
											this_page
										Element:span
											=
										Element:span
											query_api
										Element:span
											(
										Element:span
											where
										Element:span
											=
										Element:span
											YOUR_SELECTOR_EXPRESSION
										Element:span
											,
										Element:span
											session_id
										Element:span
											=
										Element:span
											this_page
										Element:span
											.
										Element:span
											session_id
										Element:span
											,
										Element:span
											page
										Element:span
											=
										Element:span
											next_page_number
										Element:span
											)
										Element:span
											do_something_with_response
										Element:span
											(
										Element:span
											this_page
										Element:span
											)
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								API errors
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Error format
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											{
										Element:span
											"error"
										Element:span
											:
										Element:span
											"Invalid parameter: unit"
										Element:span
											,
										Element:span
											"request"
										Element:span
											:
										Element:span
											"/api/2.0/events/general?interval=7&event=%5B%22splash+features%22%5D&unit=day"
										Element:span
											}
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Error table
											Error
									Node:
									(type) c
									(layer)3
										Element:b
											Description
											Missing required parameter: X The API method you are calling requires parameter X. Invalid parameter: X Parameter is not of the expected type or is malformed. Invalid JSON Format: X Parameter X is not properly JSON encoded. Invalid endpoint: X You are requesting an endpoint that does not exist. Invalid date range The date range you have specified is not 30 days or less. Query Error in selector, X The selector you supplied, most likely in a where clause, has an error. Query Error in action, X The action you supplied has an error. Document Sections
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:a
											Introduction
										Element:li
										Element:a
											Client libraries
										Element:li
										Element:a
											Authentication
										Element:li
										Element:a
											Annotations
										Element:li
										Element:a
											Export
										Element:li
										Element:a
											Events
										Element:li
										Element:a
											Event properties
										Element:li
										Element:a
											Funnels
										Element:li
										Element:a
											Segmentation
										Element:li
										Element:a
											Segmentation expressions
										Element:li
										Element:a
											Retention
										Element:li
										Element:a
											People analytics
										Element:li
										Element:a
											API errors
