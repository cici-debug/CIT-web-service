Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					Tutorial: Building an Application with JQL
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Integrating a JQL query and third-party data-visualization library (
							Element:a
								D3
								) with a custom report
						Node:
						(type) c
						(layer)2
							Element:p
							Element:a
								Mixpanel Applications
								allow developers to build visualizations, reports, and tools using the formatted data endpoints Mixpanel provides for predefined analysis (like Segmentation, Funnels, etc.). Adding a JQL query to an Application unlocks the power to visualize any custom analysis of raw Mixpanel data.
						Node:
						(type) c
						(layer)2
							Element:p
								Click the "dropped" section of any of the above events to view paths those users took after completing the previous funnel step (i.e., what the users did when they didn't convert).
						Node:
						(type) c
						(layer)2
							Element:p
								Mixpanel Funnels are very powerful - they allow anyone in your business to see where users drop off in important flows in your application and get granular insight into each of the funnel steps you define. But what happened to those users who didn't move on to step 3? Where did they go? What did they do instead?
						Node:
						(type) c
						(layer)2
							Element:p
								In this tutorial we'll walk through an advanced example of a JQL Application that allows you to aggregate the most common paths users follow after completing a certain event if they do not convert to the next event in any given funnel. We will incorporate a D3 visualization to visualize these paths in a Mixpanel Platform report.
						Node:
						(type) c
						(layer)2
							Element:p
								Let's break down all of the steps required to build this Application:
						Node:
						(type) c
						(layer)2
							Element:ol
							Element:li
							Element:a
								Build and test your JQL query
							Element:li
							Element:a
								Set up the UI using Mixpanel Platform
							Element:li
							Element:a
								Format the data
							Element:li
							Element:a
								Pass your JQL query into your Application
							Element:li
							Element:a
								Add finishing touches
						Node:
						(type) c
						(layer)2
							Element:p
								To help you follow along, you will find a link to a GitHub gist at the end of each tutorial section - this will show you the code you should have up to your current point in the tutorial.
						Node:
						(type) c
						(layer)2
							Element:hr
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Build the JQL query
						Node:
						(type) c
						(layer)2
							Element:p
								First, we'll use the JQL Console in the Applications menu to build a query that aggregates the most common paths users take after each event in a funnel.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Set up parameters
									Node:
									(type) c
									(layer)3
										Element:p
										Element:code
											from_date
											and
										Element:code
											to_date
											are required parameters for any JQL Query.
									Node:
									(type) c
									(layer)3
										Element:p
											In our case, we also need two other pieces of information:
									Node:
									(type) c
									(layer)3
										Element:p
											1. The events to include in our funnel (
										Element:code
											EVENT_LIST
											), and
									Node:
									(type) c
									(layer)3
										Element:p
											2. the number of events (
										Element:code
											PATH_LENGTH
											) we want to collect for each user when they drop out of the funnel.
									Node:
									(type) c
									(layer)3
										Element:p
											Let's add these parameters to our JQL query, including backup values in case they're not provided (be sure to edit the event names in the backup event list to include events in your project - include as many funnel steps as you'd like):
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											var
										Element:span
											EVENT_LIST
										Element:span
											=
										Element:span
											params
										Element:span
											.
										Element:span
											event_list
										Element:span
											||
										Element:span
											[
										Element:span
											'App Install'
										Element:span
											,
										Element:span
											'Game Played'
										Element:span
											,
										Element:span
											'In-App Purchase'
										Element:span
											];
										Element:span
											var
										Element:span
											PATH_LENGTH
										Element:span
											=
										Element:span
											params
										Element:span
											.
										Element:span
											path_length
										Element:span
											||
										Element:span
											3
										Element:span
											;
										Element:span
											function
										Element:span
											main
										Element:span
											()
										Element:span
											{
										Element:span
											return
										Element:span
											Events
										Element:span
											({
										Element:span
											from_date
										Element:span
											:
										Element:span
											params
										Element:span
											.
										Element:span
											from_date
										Element:span
											,
										Element:span
											to_date
										Element:span
											:
										Element:span
											params
										Element:span
											.
										Element:span
											to_date
										Element:span
											})
										Element:span
											}
									Node:
									(type) c
									(layer)3
										Element:p
											This function will return all events between the given
										Element:code
											from_date
											and
										Element:code
											to_date
											.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Collect user funnels and drop-off paths
									Node:
									(type) c
									(layer)3
										Element:p
											We'll want to group all of our events by
										Element:b
											user
											so that we can loop through users' events in order. This is key in finding funnel steps and drop-off paths for each user.
									Node:
									(type) c
									(layer)3
										Element:p
											Using
										Element:code
											.groupByUser()
											, JQL analyzes a few events at a time (in guaranteed chronological order) for one user at a time. We need to loop through those events, then save state on the user to loop through the next batch of events (do this
										Element:b
											inside
											the
										Element:code
											main()
											function, before the closing
										Element:code
											}
											):
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											...
										Element:span
											})
										Element:span
											// end of Events function - add code after this
										Element:span
											.
										Element:span
											groupByUser
										Element:span
											(
										Element:span
											function
										Element:span
											(
										Element:span
											state
										Element:span
											,
										Element:span
											events
										Element:span
											)
										Element:span
											{
										Element:span
											// collect the funnel step and drop-off event path for each user, if they entered the funnel
										Element:span
											// use the current user state if events have already been analyzed for that user, or initialize user state
										Element:span
											state
										Element:span
											=
										Element:span
											state
										Element:span
											||
										Element:span
											{
										Element:span
											current_step
										Element:span
											:
										Element:span
											-
										Element:span
											1
										Element:span
											,
										Element:span
											exit_path
										Element:span
											:
										Element:span
											[]
										Element:span
											};
										Element:span
											_
										Element:span
											.
										Element:span
											each
										Element:span
											(
										Element:span
											events
										Element:span
											,
										Element:span
											function
										Element:span
											(
										Element:span
											e
										Element:span
											)
										Element:span
											{
										Element:span
											// loop through each event in the current event batch
										Element:span
											if
										Element:span
											(
										Element:span
											e
										Element:span
											.
										Element:span
											name
										Element:span
											==
										Element:span
											EVENT_LIST
										Element:span
											[
										Element:span
											state
										Element:span
											.
										Element:span
											current_step
										Element:span
											+
										Element:span
											1
										Element:span
											])
										Element:span
											{
										Element:span
											// if the event name matches the next event in the funnel
										Element:span
											// reset the dropoff path (because they did not drop off if they converted to this event)
										Element:span
											// and move current step forward
										Element:span
											state
										Element:span
											.
										Element:span
											exit_path
										Element:span
											=
										Element:span
											[];
										Element:span
											state
										Element:span
											.
										Element:span
											current_step
										Element:span
											+=
										Element:span
											1
										Element:span
											;
										Element:span
											}
										Element:span
											else
										Element:span
											if
										Element:span
											(
										Element:span
											state
										Element:span
											.
										Element:span
											exit_path
										Element:span
											.
										Element:span
											length
										Element:span
											<
										Element:span
											PATH_LENGTH
										Element:span
											)
										Element:span
											{
										Element:span
											// record the n events after the last converted event
										Element:span
											state
										Element:span
											.
										Element:span
											exit_path
										Element:span
											.
										Element:span
											push
										Element:span
											(
										Element:span
											e
										Element:span
											.
										Element:span
											name
										Element:span
											);
										Element:span
											}
										Element:span
											});
										Element:span
											return
										Element:span
											state
										Element:span
											;
										Element:span
											})
									Node:
									(type) c
									(layer)3
										Element:p
											You may be wondering what the strange-looking _.each function on line 38 is. At Mixpanel we use
										Element:a
											Underscore.js
											to improve our code readability and consistency. While it's not necessary to know Underscore to use JQL or Mixpanel Platform, knowing a few basic Underscore functions will help in understanding this tutorial (and in our opinion, make your JavaScript cleaner).
									Node:
									(type) c
									(layer)3
										Element:p
										Element:a
											_.each
											iterates over a list of elements, yielding each in turn to an iteratee function.
									Node:
									(type) c
									(layer)3
										Element:p
											After we write each step in our JQL query, we should run the query we have so far to make sure it returns what we want (we'll use a small sample for readability):
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											[
										Element:span
											{
										Element:span
											"value"
										Element:span
											:
										Element:span
											{
										Element:span
											"current_step"
										Element:span
											:
										Element:span
											1
										Element:span
											,
										Element:span
											"exit_path"
										Element:span
											:
										Element:span
											[
										Element:span
											"App Open"
										Element:span
											]
										Element:span
											},
										Element:span
											"key"
										Element:span
											:
										Element:span
											[
										Element:span
											"17e2d29b-f48f-48d2-945e-0ef37cd96eee"
										Element:span
											]
										Element:span
											},
										Element:span
											{
										Element:span
											"value"
										Element:span
											:
										Element:span
											{
										Element:span
											"current_step"
										Element:span
											:-
										Element:span
											1
										Element:span
											,
										Element:span
											"exit_path"
										Element:span
											:
										Element:span
											[
										Element:span
											"App Open"
										Element:span
											,
										Element:span
											"Character Created"
										Element:span
											,
										Element:span
											"Level Completed"
										Element:span
											]
										Element:span
											},
										Element:span
											"key"
										Element:span
											:
										Element:span
											[
										Element:span
											"3ff1465b-3b58-4c96-ad32-8e7d9896fcd8"
										Element:span
											]
										Element:span
											},
										Element:span
											{
										Element:span
											"value"
										Element:span
											:
										Element:span
											{
										Element:span
											"current_step"
										Element:span
											:-
										Element:span
											1
										Element:span
											,
										Element:span
											"exit_path"
										Element:span
											:
										Element:span
											[
										Element:span
											"App Open"
										Element:span
											,
										Element:span
											"Game Played"
										Element:span
											,
										Element:span
											"In-App Purchase"
										Element:span
											]
										Element:span
											},
										Element:span
											"key"
										Element:span
											:
										Element:span
											[
										Element:span
											"06899718-15c7-45f7-b8f3-f4985bab78fa"
										Element:span
											]
										Element:span
											},
										Element:span
											{
										Element:span
											"value"
										Element:span
											:
										Element:span
											{
										Element:span
											"current_step"
										Element:span
											:-
										Element:span
											1
										Element:span
											,
										Element:span
											"exit_path"
										Element:span
											:
										Element:span
											[
										Element:span
											"App Open"
										Element:span
											,
										Element:span
											"Character Created"
										Element:span
											,
										Element:span
											"Game Played"
										Element:span
											]
										Element:span
											},
										Element:span
											"key"
										Element:span
											:
										Element:span
											[
										Element:span
											"9a1c835c-5777-41fb-a338-46f217fca051"
										Element:span
											]
										Element:span
											},
										Element:span
											{
										Element:span
											"value"
										Element:span
											:
										Element:span
											{
										Element:span
											"current_step"
										Element:span
											:
										Element:span
											2
										Element:span
											,
										Element:span
											"exit_path"
										Element:span
											:
										Element:span
											[]
										Element:span
											},
										Element:span
											"key"
										Element:span
											:
										Element:span
											[
										Element:span
											"79e6c031-3443-46a5-a377-e6ba11755075"
										Element:span
											]
										Element:span
											},
										Element:span
											{
										Element:span
											"value"
										Element:span
											:
										Element:span
											{
										Element:span
											"current_step"
										Element:span
											:
										Element:span
											0
										Element:span
											,
										Element:span
											"exit_path"
										Element:span
											:
										Element:span
											[
										Element:span
											"App Open"
										Element:span
											,
										Element:span
											"App Open"
										Element:span
											,
										Element:span
											"Registration Complete"
										Element:span
											]
										Element:span
											},
										Element:span
											"key"
										Element:span
											:
										Element:span
											[
										Element:span
											"eae2dd03-bca2-4cd8-9b18-d45f95eee2c3"
										Element:span
											]
										Element:span
											},
										Element:span
											{
										Element:span
											"value"
										Element:span
											:
										Element:span
											{
										Element:span
											"current_step"
										Element:span
											:-
										Element:span
											1
										Element:span
											,
										Element:span
											"exit_path"
										Element:span
											:
										Element:span
											[
										Element:span
											"App Open"
										Element:span
											,
										Element:span
											"Character Created"
										Element:span
											,
										Element:span
											"Game Played"
										Element:span
											]
										Element:span
											},
										Element:span
											"key"
										Element:span
											:
										Element:span
											[
										Element:span
											"e57174e2-0d0f-411d-867e-4c3eb070c874"
										Element:span
											]
										Element:span
											}
										Element:span
											]
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Filter users
									Node:
									(type) c
									(layer)3
										Element:p
											We need to take our result and filter out any users that did not enter the funnel at all so that we analyze only the applicable user paths (again, add the following code
										Element:b
											inside
											the
										Element:code
											main()
											function, before the closing
										Element:code
											}
											):
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											...
										Element:span
											})
										Element:span
											// end of .groupByUser() function - add code after this
										Element:span
											.
										Element:span
											filter
										Element:span
											(
										Element:span
											function
										Element:span
											(
										Element:span
											item
										Element:span
											)
										Element:span
											{
										Element:span
											// filter out users who did not enter the funnel
										Element:span
											return
										Element:span
											item
										Element:span
											.
										Element:span
											value
										Element:span
											.
										Element:span
											current_step
										Element:span
											&
										Element:span
											gt
										Element:span
											;
										Element:span
											-
										Element:span
											1
										Element:span
											;
										Element:span
											})
									Node:
									(type) c
									(layer)3
										Element:p
											After running the query again, we get only the users with
										Element:code
											current_step > -1
											:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											[
										Element:span
											{
										Element:span
											"value"
										Element:span
											:
										Element:span
											{
										Element:span
											"current_step"
										Element:span
											:
										Element:span
											0
										Element:span
											,
										Element:span
											"exit_path"
										Element:span
											:
										Element:span
											[
										Element:span
											"App Open"
										Element:span
											,
										Element:span
											"App Open"
										Element:span
											,
										Element:span
											"Registration Complete"
										Element:span
											]
										Element:span
											},
										Element:span
											"key"
										Element:span
											:
										Element:span
											[
										Element:span
											"eae2dd03-bca2-4cd8-9b18-d45f95eee2c3"
										Element:span
											]
										Element:span
											},
										Element:span
											{
										Element:span
											"value"
										Element:span
											:
										Element:span
											{
										Element:span
											"current_step"
										Element:span
											:
										Element:span
											1
										Element:span
											,
										Element:span
											"exit_path"
										Element:span
											:
										Element:span
											[
										Element:span
											"App Open"
										Element:span
											]
										Element:span
											},
										Element:span
											"key"
										Element:span
											:
										Element:span
											[
										Element:span
											"17e2d29b-f48f-48d2-945e-0ef37cd96eee"
										Element:span
											]
										Element:span
											},
										Element:span
											{
										Element:span
											"value"
										Element:span
											:
										Element:span
											{
										Element:span
											"current_step"
										Element:span
											:
										Element:span
											2
										Element:span
											,
										Element:span
											"exit_path"
										Element:span
											:
										Element:span
											[
										Element:span
											"App Open"
										Element:span
											,
										Element:span
											"App Open"
										Element:span
											,
										Element:span
											"Registration Complete"
										Element:span
											]
										Element:span
											},
										Element:span
											"key"
										Element:span
											:
										Element:span
											[
										Element:span
											"79e6c031-3443-46a5-a377-e6ba11755075"
										Element:span
											]
										Element:span
											}
										Element:span
											]
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Aggregate all users' paths
									Node:
									(type) c
									(layer)3
										Element:p
											Let's consider the input format we have from our previous code and the output format we need for our Platform report:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											Input
										Element:span
											:
										Element:span
											[{
										Element:span
											value
										Element:span
											:
										Element:span
											{
										Element:span
											current_step
										Element:span
											:
										Element:span
											1
										Element:span
											,
										Element:span
											exit_path
										Element:span
											:
										Element:span
											[
										Element:span
											"e1"
										Element:span
											,
										Element:span
											"e2"
										Element:span
											,
										Element:span
											"e3"
										Element:span
											]
										Element:span
											},
										Element:span
											key
										Element:span
											:
										Element:span
											[...]},
										Element:span
											{
										Element:span
											value
										Element:span
											:
										Element:span
											...,
										Element:span
											key
										Element:span
											:
										Element:span
											[..]},
										Element:span
											...
										Element:span
											]
										Element:span
											Output
										Element:span
											:
										Element:span
											[
										Element:span
											{
										Element:span
											step
										Element:span
											:
										Element:span
											"event name 1"
										Element:span
											,
										Element:span
											count
										Element:span
											:
										Element:span
											12345
										Element:span
											,
										Element:span
											next
										Element:span
											:
										Element:span
											{
										Element:span
											"event name 2"
										Element:span
											:
										Element:span
											{
										Element:span
											count
										Element:span
											:
										Element:span
											123
										Element:span
											,
										Element:span
											next
										Element:span
											:
										Element:span
											{}
										Element:span
											}
										Element:span
											}
										Element:span
											},
										Element:span
											]
									Node:
									(type) c
									(layer)3
										Element:p
											Now we need to write a .reduce function that will take us from A to B. Again, we will take in batches of "A" inputs, so we'll need to save our state of "B" (
										Element:code
											previous_outputs
											in this case) as we work through each batch (place inside the
										Element:code
											main()
											function once again):
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											...
										Element:span
											})
										Element:span
											// end of .filter() function - add code after this
										Element:span
											.
										Element:span
											reduce
										Element:span
											(
										Element:span
											function
										Element:span
											(
										Element:span
											previous_outputs
										Element:span
											,
										Element:span
											user_states
										Element:span
											)
										Element:span
											{
										Element:span
											// aggregate total users at each step in the funnel and
										Element:span
											// most common exit paths after dropping out of the funnel
										Element:span
											// initialize our output object for each event in the funnel
										Element:span
											var
										Element:span
											output
										Element:span
											=
										Element:span
											[];
										Element:span
											_
										Element:span
											.
										Element:span
											each
										Element:span
											(
										Element:span
											EVENT_LIST
										Element:span
											,
										Element:span
											function
										Element:span
											(
										Element:span
											e
										Element:span
											)
										Element:span
											{
										Element:span
											output
										Element:span
											.
										Element:span
											push
										Element:span
											({
										Element:span
											step
										Element:span
											:
										Element:span
											e
										Element:span
											,
										Element:span
											count
										Element:span
											:
										Element:span
											0
										Element:span
											,
										Element:span
											next
										Element:span
											:
										Element:span
											{}
										Element:span
											});
										Element:span
											});
										Element:span
											_
										Element:span
											.
										Element:span
											each
										Element:span
											(
										Element:span
											user_states
										Element:span
											,
										Element:span
											function
										Element:span
											(
										Element:span
											state
										Element:span
											)
										Element:span
											{
										Element:span
											// loop through each user object
										Element:span
											state
										Element:span
											=
										Element:span
											state
										Element:span
											.
										Element:span
											value
										Element:span
											;
										Element:span
											// include the user in the count for each step of the funnel they completed
										Element:span
											var
										Element:span
											step
										Element:span
											=
										Element:span
											0
										Element:span
											;
										Element:span
											while
										Element:span
											(
										Element:span
											step
										Element:span
											&
										Element:span
											lt
										Element:span
											;
										Element:span
											state
										Element:span
											.
										Element:span
											current_step
										Element:span
											)
										Element:span
											{
										Element:span
											output
										Element:span
											[
										Element:span
											step
										Element:span
											].
										Element:span
											count
										Element:span
											++
										Element:span
											;
										Element:span
											step
										Element:span
											++
										Element:span
											;
										Element:span
											}
										Element:span
											if
										Element:span
											(
										Element:span
											step
										Element:span
											!=
										Element:span
											state
										Element:span
											.
										Element:span
											current_step
										Element:span
											)
										Element:span
											{
										Element:span
											throw
										Element:span
											"you got a bug"
										Element:span
											}
										Element:span
											output
										Element:span
											[
										Element:span
											step
										Element:span
											].
										Element:span
											count
										Element:span
											++
										Element:span
											;
										Element:span
											var
										Element:span
											flow
										Element:span
											=
										Element:span
											output
										Element:span
											[
										Element:span
											step
										Element:span
											].
										Element:span
											next
										Element:span
											;
										Element:span
											_
										Element:span
											.
										Element:span
											each
										Element:span
											(
										Element:span
											state
										Element:span
											.
										Element:span
											exit_path
										Element:span
											,
										Element:span
											function
										Element:span
											(
										Element:span
											e
										Element:span
											)
										Element:span
											{
										Element:span
											// loop through each event in the user's exit path, and
										Element:span
											// add the event to an existing path or create a new one
										Element:span
											flow
										Element:span
											[
										Element:span
											e
										Element:span
											]
										Element:span
											=
										Element:span
											flow
										Element:span
											[
										Element:span
											e
										Element:span
											]
										Element:span
											||
										Element:span
											{
										Element:span
											count
										Element:span
											:
										Element:span
											0
										Element:span
											,
										Element:span
											next
										Element:span
											:
										Element:span
											{}};
										Element:span
											flow
										Element:span
											[
										Element:span
											e
										Element:span
											].
										Element:span
											count
										Element:span
											++
										Element:span
											;
										Element:span
											flow
										Element:span
											=
										Element:span
											flow
										Element:span
											[
										Element:span
											e
										Element:span
											].
										Element:span
											next
										Element:span
											;
										Element:span
											});
										Element:span
											});
										Element:span
											_
										Element:span
											.
										Element:span
											each
										Element:span
											(
										Element:span
											previous_outputs
										Element:span
											,
										Element:span
											function
										Element:span
											(
										Element:span
											previous_output
										Element:span
											)
										Element:span
											{
										Element:span
											// merge our previous output object with the one from this batch of user objects
										Element:span
											merge
										Element:span
											(
										Element:span
											output
										Element:span
											,
										Element:span
											previous_output
										Element:span
											);
										Element:span
											});
										Element:span
											return
										Element:span
											output
										Element:span
											;
										Element:span
											});
									Node:
									(type) c
									(layer)3
										Element:p
											To merge the output of each "batch" we process above, we need to write two merge functions.
									Node:
									(type) c
									(layer)3
										Element:p
											1.
										Element:code
											recursiveSumMerge
											allows us to merge objects together by adding all values at each level of the objects. Add this function at the end of your query,
										Element:b
											outside
											of the
										Element:code
											main()
											function:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											...
										Element:span
											}
										Element:span
											// end of entire main() function - add code after this
										Element:span
											function
										Element:span
											recursiveSumMerge
										Element:span
											(
										Element:span
											d1
										Element:span
											,
										Element:span
											d2
										Element:span
											)
										Element:span
											{
										Element:span
											for
										Element:span
											(
										Element:span
											var
										Element:span
											key
										Element:span
											in
										Element:span
											d2
										Element:span
											)
										Element:span
											{
										Element:span
											if
										Element:span
											(
										Element:span
											d2
										Element:span
											.
										Element:span
											hasOwnProperty
										Element:span
											(
										Element:span
											key
										Element:span
											))
										Element:span
											{
										Element:span
											var
										Element:span
											v1
										Element:span
											=
										Element:span
											d1
										Element:span
											[
										Element:span
											key
										Element:span
											],
										Element:span
											v2
										Element:span
											=
										Element:span
											d2
										Element:span
											[
										Element:span
											key
										Element:span
											];
										Element:span
											if
										Element:span
											(
										Element:span
											!
										Element:span
											(
										Element:span
											key
										Element:span
											in
										Element:span
											d1
										Element:span
											))
										Element:span
											{
										Element:span
											d1
										Element:span
											[
										Element:span
											key
										Element:span
											]
										Element:span
											=
										Element:span
											v2
										Element:span
											;
										Element:span
											}
										Element:span
											else
										Element:span
											if
										Element:span
											(
										Element:span
											typeof
										Element:span
											v1
										Element:span
											===
										Element:span
											"number"
										Element:span
											&&
										Element:span
											typeof
										Element:span
											v2
										Element:span
											===
										Element:span
											"number"
										Element:span
											)
										Element:span
											{
										Element:span
											d1
										Element:span
											[
										Element:span
											key
										Element:span
											]
										Element:span
											+=
										Element:span
											v2
										Element:span
											;
										Element:span
											}
										Element:span
											else
										Element:span
											if
										Element:span
											(
										Element:span
											typeof
										Element:span
											v1
										Element:span
											===
										Element:span
											"object"
										Element:span
											&&
										Element:span
											typeof
										Element:span
											v2
										Element:span
											===
										Element:span
											"object"
										Element:span
											)
										Element:span
											{
										Element:span
											recursiveSumMerge
										Element:span
											(
										Element:span
											v1
										Element:span
											,
										Element:span
											v2
										Element:span
											);
										Element:span
											}
										Element:span
											else
										Element:span
											{
										Element:span
											throw
										Element:span
											"mismatched types for key: "
										Element:span
											+
										Element:span
											key
										Element:span
											;
										Element:span
											}
										Element:span
											}
										Element:span
											}
										Element:span
											}
									Node:
									(type) c
									(layer)3
										Element:p
											2.
										Element:code
											merge
											merges event counts and uses
										Element:code
											recursiveSumMerge
											to merge our aggregated paths for each output object (add after all of the code we've written so far):
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											function
										Element:span
											merge
										Element:span
											(
										Element:span
											output1
										Element:span
											,
										Element:span
											output2
										Element:span
											)
										Element:span
											{
										Element:span
											for
										Element:span
											(
										Element:span
											var
										Element:span
											i
										Element:span
											=
										Element:span
											0
										Element:span
											;
										Element:span
											i
										Element:span
											&
										Element:span
											lt
										Element:span
											;
										Element:span
											output2
										Element:span
											.
										Element:span
											length
										Element:span
											;
										Element:span
											i
										Element:span
											++
										Element:span
											)
										Element:span
											{
										Element:span
											output1
										Element:span
											[
										Element:span
											i
										Element:span
											].
										Element:span
											count
										Element:span
											+=
										Element:span
											output2
										Element:span
											[
										Element:span
											i
										Element:span
											].
										Element:span
											count
										Element:span
											;
										Element:span
											recursiveSumMerge
										Element:span
											(
										Element:span
											output1
										Element:span
											[
										Element:span
											i
										Element:span
											].
										Element:span
											next
										Element:span
											,
										Element:span
											output2
										Element:span
											[
										Element:span
											i
										Element:span
											].
										Element:span
											next
										Element:span
											);
										Element:span
											}
										Element:span
											}
									Node:
									(type) c
									(layer)3
										Element:p
											Let's put it all together and test our final query result (using a slightly higher sample size):
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											[
										Element:span
											[
										Element:span
											{
										Element:span
											"count"
										Element:span
											:
										Element:span
											34
										Element:span
											,
										Element:span
											"step"
										Element:span
											:
										Element:span
											"App Install"
										Element:span
											,
										Element:span
											"next"
										Element:span
											:
										Element:span
											{
										Element:span
											"App Open"
										Element:span
											:
										Element:span
											{
										Element:span
											"count"
										Element:span
											:
										Element:span
											11
										Element:span
											,
										Element:span
											"next"
										Element:span
											:
										Element:span
											{
										Element:span
											"Registration Complete"
										Element:span
											:
										Element:span
											{
										Element:span
											"count"
										Element:span
											:
										Element:span
											3
										Element:span
											,
										Element:span
											"next"
										Element:span
											:
										Element:span
											{
										Element:span
											"Tutorial Exited"
										Element:span
											:
										Element:span
											{
										Element:span
											"count"
										Element:span
											:
										Element:span
											1
										Element:span
											,
										Element:span
											"next"
										Element:span
											:
										Element:span
											{
										Element:span
											}
										Element:span
											},
										Element:span
											"Notification Sent"
										Element:span
											:
										Element:span
											{
										Element:span
											"count"
										Element:span
											:
										Element:span
											2
										Element:span
											,
										Element:span
											"next"
										Element:span
											:
										Element:span
											{
										Element:span
											}
										Element:span
											}
										Element:span
											}
										Element:span
											},
										Element:span
											"App Open"
										Element:span
											:
										Element:span
											{
										Element:span
											"count"
										Element:span
											:
										Element:span
											3
										Element:span
											,
										Element:span
											"next"
										Element:span
											:
										Element:span
											{
										Element:span
											}
										Element:span
											}
										Element:span
											}
										Element:span
											}
										Element:span
											}
										Element:span
											},
										Element:span
											{
										Element:span
											"count"
										Element:span
											:
										Element:span
											27
										Element:span
											,
										Element:span
											"step"
										Element:span
											:
										Element:span
											"Game Played"
										Element:span
											,
										Element:span
											"next"
										Element:span
											:
										Element:span
											{
										Element:span
											"Character Created"
										Element:span
											:
										Element:span
											{
										Element:span
											"count"
										Element:span
											:
										Element:span
											13
										Element:span
											,
										Element:span
											"next"
										Element:span
											:
										Element:span
											{
										Element:span
											"Level Complete"
										Element:span
											:
										Element:span
											{
										Element:span
											"count"
										Element:span
											:
										Element:span
											5
										Element:span
											,
										Element:span
											"next"
										Element:span
											:
										Element:span
											{
										Element:span
											"Tutorial Exited"
										Element:span
											:
										Element:span
											{
										Element:span
											"count"
										Element:span
											:
										Element:span
											1
										Element:span
											,
										Element:span
											"next"
										Element:span
											:
										Element:span
											{
										Element:span
											}
										Element:span
											},
										Element:span
											"Notification Sent"
										Element:span
											:
										Element:span
											{
										Element:span
											"count"
										Element:span
											:
										Element:span
											2
										Element:span
											,
										Element:span
											"next"
										Element:span
											:
										Element:span
											{
										Element:span
											}
										Element:span
											}
										Element:span
											}
										Element:span
											},
										Element:span
											"App Open"
										Element:span
											:
										Element:span
											{
										Element:span
											"count"
										Element:span
											:
										Element:span
											5
										Element:span
											,
										Element:span
											"next"
										Element:span
											:
										Element:span
											{
										Element:span
											}
										Element:span
											}
										Element:span
											}
										Element:span
											},
										Element:span
											"Session End"
										Element:span
											:
										Element:span
											{
										Element:span
											"count"
										Element:span
											:
										Element:span
											3
										Element:span
											,
										Element:span
											"next"
										Element:span
											:
										Element:span
											{
										Element:span
											"App Open"
										Element:span
											:
										Element:span
											{
										Element:span
											"count"
										Element:span
											:
										Element:span
											1
										Element:span
											,
										Element:span
											"next"
										Element:span
											:
										Element:span
											{
										Element:span
											}
										Element:span
											}
										Element:span
											}
										Element:span
											},
										Element:span
											"Game Played"
										Element:span
											:
										Element:span
											{
										Element:span
											"count"
										Element:span
											:
										Element:span
											25
										Element:span
											,
										Element:span
											"next"
										Element:span
											:
										Element:span
											{
										Element:span
											"App Open"
										Element:span
											:
										Element:span
											{
										Element:span
											"count"
										Element:span
											:
										Element:span
											3
										Element:span
											,
										Element:span
											"next"
										Element:span
											:
										Element:span
											{
										Element:span
											}
										Element:span
											},
										Element:span
											"Level Complete"
										Element:span
											:
										Element:span
											{
										Element:span
											"count"
										Element:span
											:
										Element:span
											15
										Element:span
											,
										Element:span
											"next"
										Element:span
											:
										Element:span
											{
										Element:span
											"Session End"
										Element:span
											:
										Element:span
											{
										Element:span
											"count"
										Element:span
											:
										Element:span
											6
										Element:span
											,
										Element:span
											"next"
										Element:span
											:
										Element:span
											{
										Element:span
											}
										Element:span
											},
										Element:span
											"Game Played"
										Element:span
											:
										Element:span
											{
										Element:span
											"count"
										Element:span
											:
										Element:span
											4
										Element:span
											,
										Element:span
											"next"
										Element:span
											:
										Element:span
											{
										Element:span
											}
										Element:span
											}
										Element:span
											}
										Element:span
											}
										Element:span
											}
										Element:span
											}
										Element:span
											}
										Element:span
											},
										Element:span
											{
										Element:span
											"count"
										Element:span
											:
										Element:span
											12
										Element:span
											,
										Element:span
											"step"
										Element:span
											:
										Element:span
											"In-App Purchase"
										Element:span
											,
										Element:span
											"next"
										Element:span
											:
										Element:span
											{
										Element:span
											}
										Element:span
											}
										Element:span
											]
										Element:span
											]
									Node:
									(type) c
									(layer)3
										Element:p
											Looks good!
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											General debugging tips
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
											As you work through a query, check the result after each step (as we did above) so that 1) you can see if it worked as expected, and 2) you know what the input will look like for your next function.
										Element:li
											Filter for a small number of users (perhaps even one) if you're having trouble starting with the bigger picture.
										Element:li
											Try to return smaller pieces of your function so you can see and understand how the function is working at a granular level.
										Element:li
											Reach out to
										Element:a
											support@mixpanel.com
											if you need help!
									Node:
									(type) c
									(layer)3
										Element:p
										Element:a
											Here
											is the current state of the code. Use this as a reference in case you get lost.
									Node:
									(type) c
									(layer)3
										Element:hr
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Set up the Platform UI
						Node:
						(type) c
						(layer)2
							Element:p
								Now our query is working and it looks awesome -- to us. But it's not exactly ready to send out to your whole company. In this step we'll start to set up a nice user interface so that we can later pull in our JQL results and visualize them in a helpful way.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Create an HTML template
									Node:
									(type) c
									(layer)3
										Element:p
											Create a new Application within the "Applications" menu of the Mixpanel interface by selecting "Build an app." Name your report, and choose the "Blank Slate" option when prompted.
									Node:
									(type) c
									(layer)3
										Element:p
											Let's set up all of the pieces of our UI before building each of them out. Remove the
										Element:code
											<h1>Hello, World!</h1>
											code from your report and replace it with the following:
									Node:
									(type) c
									(layer)3
										Element:p
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											<div
										Element:span
											class=
										Element:span
											"mixpanel-platform-section"
										Element:span
											>
										Element:span
											<div
										Element:span
											id=
										Element:span
											"dates"
										Element:span
											></div>
										Element:span
											<div
										Element:span
											class=
										Element:span
											"events"
										Element:span
											>
										Element:span
											<div
										Element:span
											class=
										Element:span
											"label"
										Element:span
											>
											Funnel Steps:
										Element:span
											</div>
										Element:span
											<input
										Element:span
											id=
										Element:span
											"event_list"
										Element:span
											value=
										Element:span
											"App Install,Game Played,In-App Purchase"
										Element:span
											>
										Element:span
											<div
										Element:span
											class=
										Element:span
											"label"
										Element:span
											>
											Alt Path Length:
										Element:span
											</div>
										Element:span
											<input
										Element:span
											id=
										Element:span
											"path_length"
										Element:span
											value=
										Element:span
											"3"
										Element:span
											>
										Element:span
											<div
										Element:span
											id=
										Element:span
											"run"
										Element:span
											>
											RUN
										Element:span
											</div>
										Element:span
											</div>
										Element:span
											<div
										Element:span
											id=
										Element:span
											"graph"
										Element:span
											></div>
										Element:span
											</div>
										Element:span
											<div
										Element:span
											class=
										Element:span
											"mixpanel-platform-section flow"
										Element:span
											>
										Element:span
											<div
										Element:span
											class=
										Element:span
											"header"
										Element:span
											>
											Alternative Paths
										Element:span
											</div>
										Element:span
											<div
										Element:span
											id=
										Element:span
											"path"
										Element:span
											>
										Element:span
											<div
										Element:span
											class=
										Element:span
											"description"
										Element:span
											>
											Click the "dropped" section of any of the above events to view paths those users took after completing the previous funnel step (i.e., what the users did when they didn't convert).
										Element:span
											</div>
										Element:span
											</div>
										Element:span
											</div>
									Node:
									(type) c
									(layer)3
										Element:p
											Replace the events in the
										Element:code
											value
											attribute of the first input (
										Element:code
											#event_list
											) to include the events you included in the default
										Element:code
											EVENT_LIST
											of your JQL query (in line 1). Include commas but no spaces in between the event names.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Set up query inputs and global variables
									Node:
									(type) c
									(layer)3
										Element:p
											We have four parameters in our JQL query, each of which will be determined by user input. We added inputs for the
										Element:code
											event_list
											and
										Element:code
											path_length
											in our HTML above, but need to grab the values in order to pass them to our query. We also need to add a datepicker (Mixpanel provides one out-of-the-box) so users can dynamically change the date range of the data (
										Element:code
											from_date
											and
										Element:code
											to_date
											parameters) returned in the report. Let's add the following code inside the
										Element:code
											<script>
											tags in your report to set all of this up:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											// Set a global variable for the JQL result
										Element:span
											var
										Element:span
											jqlResult
										Element:span
											;
										Element:span
											// We'll need to convert dates to strings to include them in our query
										Element:span
											function
										Element:span
											date_to_string
										Element:span
											(
										Element:span
											d
										Element:span
											)
										Element:span
											{
										Element:span
											return
										Element:span
											d
										Element:span
											.
										Element:span
											toISOString
										Element:span
											().
										Element:span
											split
										Element:span
											(
										Element:span
											'T'
										Element:span
											)[
										Element:span
											0
										Element:span
											];
										Element:span
											}
										Element:span
											var
										Element:span
											datepicker
										Element:span
											=
										Element:span
											$
										Element:span
											(
										Element:span
											'#dates'
										Element:span
											).
										Element:span
											MPDatepicker
										Element:span
											();
										Element:span
											var
										Element:span
											event_list_input
										Element:span
											;
										Element:span
											var
										Element:span
											path_length_input
										Element:span
											;
										Element:span
											function
										Element:span
											runQuery
										Element:span
											()
										Element:span
											{
										Element:span
											event_list_input
										Element:span
											=
										Element:span
											$
										Element:span
											(
										Element:span
											'#event_list'
										Element:span
											).
										Element:span
											val
										Element:span
											().
										Element:span
											split
										Element:span
											(
										Element:span
											','
										Element:span
											);
										Element:span
											path_length_input
										Element:span
											=
										Element:span
											parseInt
										Element:span
											(
										Element:span
											$
										Element:span
											(
										Element:span
											'#path_length'
										Element:span
											).
										Element:span
											val
										Element:span
											());
										Element:span
											if
										Element:span
											(
										Element:span
											isNaN
										Element:span
											(
										Element:span
											path_length_input
										Element:span
											))
										Element:span
											{
										Element:span
											alert
										Element:span
											(
										Element:span
											'Error: Alternative path length must be a number'
										Element:span
											);
										Element:span
											return
										Element:span
											;
										Element:span
											}
										Element:span
											var
										Element:span
											dates
										Element:span
											=
										Element:span
											datepicker
										Element:span
											.
										Element:span
											val
										Element:span
											();
										Element:span
											}
									Node:
									(type) c
									(layer)3
										Element:p
											Notes:
									Node:
									(type) c
									(layer)3
										Element:p
											1. We defined
										Element:code
											event_list_input
											and
										Element:code
											path_length_input
											as global variables (we'll need to reference them in later functions), but set them inside a
										Element:code
											runQuery()
											function. The
										Element:code
											runQuery()
											function will be called whenever we run our JQL query, and we'll want to grab the most up-to-date values of our inputs each time it is run.
									Node:
									(type) c
									(layer)3
										Element:p
											2. We need to check that
										Element:code
											path_length_input
											can be parsed as an integer before using it in our query.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Add a funnel graph
									Node:
									(type) c
									(layer)3
										Element:p
											Mixpanel Platform also provides an out-of-the-box stacked bar chart visualization that we can use to plot our funnel. We can set up the options for that chart now. Inside the script tags of your Platform report, add the following code before the
										Element:code
											runQuery()
											function:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											var
										Element:span
											graph
										Element:span
											=
										Element:span
											$
										Element:span
											(
										Element:span
											'#graph'
										Element:span
											).
										Element:span
											MPChart
										Element:span
											({
										Element:span
											// chart options
										Element:span
											chartType
										Element:span
											:
										Element:span
											'bar'
										Element:span
											,
										Element:span
											stacked
										Element:span
											:
										Element:span
											true
										Element:span
											,
										Element:span
											highchartsOptions
										Element:span
											:
										Element:span
											{
										Element:span
											colors
										Element:span
											:
										Element:span
											[
										Element:span
											'#cccccc'
										Element:span
											,
										Element:span
											'#65afe7'
										Element:span
											],
										Element:span
											plotOptions
										Element:span
											:
										Element:span
											{
										Element:span
											series
										Element:span
											:
										Element:span
											{
										Element:span
											cursor
										Element:span
											:
										Element:span
											'pointer'
										Element:span
											,
										Element:span
											point
										Element:span
											:
										Element:span
											{
										Element:span
											events
										Element:span
											:
										Element:span
											{
										Element:span
											click
										Element:span
											:
										Element:span
											function
										Element:span
											()
										Element:span
											{
										Element:span
											if
										Element:span
											(
										Element:span
											this
										Element:span
											.
										Element:span
											series_name
										Element:span
											==
										Element:span
											'dropped'
										Element:span
											)
										Element:span
											{
										Element:span
											// enable clicking on the dropoff portion of the funnel bar to see the alternative paths for users
										Element:span
											var
										Element:span
											clicked_event
										Element:span
											=
										Element:span
											this
										Element:span
											.
										Element:span
											category
										Element:span
											;
										Element:span
											var
										Element:span
											index
										Element:span
											=
										Element:span
											event_list_input
										Element:span
											.
										Element:span
											indexOf
										Element:span
											(
										Element:span
											clicked_event
										Element:span
											);
										Element:span
											// show dropoff paths originating from the previous event
										Element:span
											// we'll define this function later
										Element:span
											mapFlow
										Element:span
											(
										Element:span
											index
										Element:span
											-
										Element:span
											1
										Element:span
											);
										Element:span
											}
										Element:span
											}
										Element:span
											}
										Element:span
											}
										Element:span
											}
										Element:span
											}
										Element:span
											}
										Element:span
											});
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Set up D3
									Node:
									(type) c
									(layer)3
										Element:p
											D3 is a data-visualization tool used for rendering your data in the browser using SVG. If you find you want to display data in a way not covered by one of the Mixpanel Platform charts, the combination of Mixpanel Platform and D3 will give you almost limitless flexibility.
									Node:
									(type) c
									(layer)3
										Element:p
											The only setup required for D3 is adding its minified JavaScript to the head of your report. Add this
										Element:code
											<script>
											tag after the others in the
										Element:code
											<head>
											section of the html:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											<script
										Element:span
											src=
										Element:span
											"https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.5/d3.min.js"
										Element:span
											></script>
									Node:
									(type) c
									(layer)3
										Element:p
											D3 uses SVG to draw basic shapes on the page that represent your data. In order to render our path visualization, we'll first need to set up the SVG element that will act as a canvas for D3 to draw on. Add this code at the bottom of your report, just before the closing
										Element:code
											</script>
											tag:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											// D3 tree setup
										Element:span
											var
										Element:span
											margin
										Element:span
											=
										Element:span
											{
										Element:span
											top
										Element:span
											:
										Element:span
											20
										Element:span
											,
										Element:span
											right
										Element:span
											:
										Element:span
											40
										Element:span
											,
										Element:span
											bottom
										Element:span
											:
										Element:span
											20
										Element:span
											,
										Element:span
											left
										Element:span
											:
										Element:span
											40
										Element:span
											},
										Element:span
											width
										Element:span
											=
										Element:span
											960
										Element:span
											-
										Element:span
											margin
										Element:span
											.
										Element:span
											right
										Element:span
											-
										Element:span
											margin
										Element:span
											.
										Element:span
											left
										Element:span
											,
										Element:span
											height
										Element:span
											=
										Element:span
											920
										Element:span
											-
										Element:span
											margin
										Element:span
											.
										Element:span
											top
										Element:span
											-
										Element:span
											margin
										Element:span
											.
										Element:span
											bottom
										Element:span
											;
										Element:span
											var
										Element:span
											i
										Element:span
											=
										Element:span
											0
										Element:span
											,
										Element:span
											duration
										Element:span
											=
										Element:span
											750
										Element:span
											,
										Element:span
											treeRoot
										Element:span
											;
										Element:span
											var
										Element:span
											tree
										Element:span
											=
										Element:span
											d3
										Element:span
											.
										Element:span
											layout
										Element:span
											.
										Element:span
											tree
										Element:span
											()
										Element:span
											.
										Element:span
											size
										Element:span
											([
										Element:span
											height
										Element:span
											,
										Element:span
											width
										Element:span
											]);
										Element:span
											var
										Element:span
											diagonal
										Element:span
											=
										Element:span
											d3
										Element:span
											.
										Element:span
											svg
										Element:span
											.
										Element:span
											diagonal
										Element:span
											()
										Element:span
											.
										Element:span
											projection
										Element:span
											(
										Element:span
											function
										Element:span
											(
										Element:span
											d
										Element:span
											)
										Element:span
											{
										Element:span
											return
										Element:span
											[
										Element:span
											d
										Element:span
											.
										Element:span
											y
										Element:span
											,
										Element:span
											d
										Element:span
											.
										Element:span
											x
										Element:span
											];
										Element:span
											});
										Element:span
											var
										Element:span
											svg
										Element:span
											=
										Element:span
											d3
										Element:span
											.
										Element:span
											select
										Element:span
											(
										Element:span
											"#path"
										Element:span
											).
										Element:span
											append
										Element:span
											(
										Element:span
											"svg"
										Element:span
											)
										Element:span
											.
										Element:span
											attr
										Element:span
											(
										Element:span
											"width"
										Element:span
											,
										Element:span
											width
										Element:span
											+
										Element:span
											margin
										Element:span
											.
										Element:span
											right
										Element:span
											+
										Element:span
											margin
										Element:span
											.
										Element:span
											left
										Element:span
											)
										Element:span
											.
										Element:span
											attr
										Element:span
											(
										Element:span
											"height"
										Element:span
											,
										Element:span
											height
										Element:span
											+
										Element:span
											margin
										Element:span
											.
										Element:span
											top
										Element:span
											+
										Element:span
											margin
										Element:span
											.
										Element:span
											bottom
										Element:span
											)
										Element:span
											.
										Element:span
											append
										Element:span
											(
										Element:span
											"g"
										Element:span
											)
										Element:span
											.
										Element:span
											attr
										Element:span
											(
										Element:span
											"transform"
										Element:span
											,
										Element:span
											"translate("
										Element:span
											+
										Element:span
											margin
										Element:span
											.
										Element:span
											left
										Element:span
											+
										Element:span
											","
										Element:span
											+
										Element:span
											margin
										Element:span
											.
										Element:span
											top
										Element:span
											+
										Element:span
											")"
										Element:span
											);
										Element:span
											d3
										Element:span
											.
										Element:span
											select
										Element:span
											(
										Element:span
											self
										Element:span
											.
										Element:span
											frameElement
										Element:span
											).
										Element:span
											style
										Element:span
											(
										Element:span
											"height"
										Element:span
											,
										Element:span
											height
										Element:span
											+
										Element:span
											"px"
										Element:span
											);
										Element:span
											function
										Element:span
											createFlow
										Element:span
											(
										Element:span
											flowObject
										Element:span
											)
										Element:span
											{
										Element:span
											treeRoot
										Element:span
											=
										Element:span
											flowObject
										Element:span
											;
										Element:span
											// initialize path flow with the root event
										Element:span
											treeRoot
										Element:span
											.
										Element:span
											x0
										Element:span
											=
										Element:span
											height
										Element:span
											/
										Element:span
											2
										Element:span
											;
										Element:span
											treeRoot
										Element:span
											.
										Element:span
											y0
										Element:span
											=
										Element:span
											0
										Element:span
											;
										Element:span
											function
										Element:span
											collapse
										Element:span
											(
										Element:span
											d
										Element:span
											)
										Element:span
											{
										Element:span
											if
										Element:span
											(
										Element:span
											d
										Element:span
											.
										Element:span
											children
										Element:span
											)
										Element:span
											{
										Element:span
											d
										Element:span
											.
										Element:span
											_children
										Element:span
											=
										Element:span
											d
										Element:span
											.
										Element:span
											children
										Element:span
											;
										Element:span
											d
										Element:span
											.
										Element:span
											_children
										Element:span
											.
										Element:span
											forEach
										Element:span
											(
										Element:span
											collapse
										Element:span
											);
										Element:span
											d
										Element:span
											.
										Element:span
											children
										Element:span
											=
										Element:span
											null
										Element:span
											;
										Element:span
											}
										Element:span
											}
										Element:span
											treeRoot
										Element:span
											.
										Element:span
											children
										Element:span
											.
										Element:span
											forEach
										Element:span
											(
										Element:span
											collapse
										Element:span
											);
										Element:span
											update
										Element:span
											(
										Element:span
											treeRoot
										Element:span
											);
										Element:span
											$
										Element:span
											(
										Element:span
											'#path svg'
										Element:span
											).
										Element:span
											show
										Element:span
											();
										Element:span
											}
										Element:span
											function
										Element:span
											update
										Element:span
											(
										Element:span
											source
										Element:span
											)
										Element:span
											{
										Element:span
											// Update the tree from a source node
										Element:span
											var
										Element:span
											flow_length
										Element:span
											=
										Element:span
											path_length_input
										Element:span
											+
										Element:span
											1
										Element:span
											;
										Element:span
											// Compute the new tree layout
										Element:span
											var
										Element:span
											nodes
										Element:span
											=
										Element:span
											tree
										Element:span
											.
										Element:span
											nodes
										Element:span
											(
										Element:span
											treeRoot
										Element:span
											).
										Element:span
											reverse
										Element:span
											(),
										Element:span
											links
										Element:span
											=
										Element:span
											tree
										Element:span
											.
										Element:span
											links
										Element:span
											(
										Element:span
											nodes
										Element:span
											);
										Element:span
											// Normalize for fixed-depth
										Element:span
											nodes
										Element:span
											.
										Element:span
											forEach
										Element:span
											(
										Element:span
											function
										Element:span
											(
										Element:span
											d
										Element:span
											)
										Element:span
											{
										Element:span
											d
										Element:span
											.
										Element:span
											y
										Element:span
											=
										Element:span
											width
										Element:span
											/
										Element:span
											flow_length
										Element:span
											*
										Element:span
											d
										Element:span
											.
										Element:span
											depth
										Element:span
											;
										Element:span
											});
										Element:span
											// Find max count
										Element:span
											var
										Element:span
											maxCount
										Element:span
											=
										Element:span
											0
										Element:span
											;
										Element:span
											nodes
										Element:span
											.
										Element:span
											forEach
										Element:span
											(
										Element:span
											function
										Element:span
											(
										Element:span
											d
										Element:span
											)
										Element:span
											{
										Element:span
											if
										Element:span
											(
										Element:span
											d
										Element:span
											.
										Element:span
											depth
										Element:span
											&
										Element:span
											gt
										Element:span
											;
										Element:span
											source
										Element:span
											.
										Element:span
											depth
										Element:span
											)
										Element:span
											maxCount
										Element:span
											=
										Element:span
											d
										Element:span
											.
										Element:span
											count
										Element:span
											&
										Element:span
											gt
										Element:span
											;
										Element:span
											maxCount
										Element:span
											?
										Element:span
											d
										Element:span
											.
										Element:span
											count
										Element:span
											:
										Element:span
											maxCount
										Element:span
											;
										Element:span
											});
										Element:span
											var
										Element:span
											ratio
										Element:span
											=
										Element:span
											calculateFlowLine
										Element:span
											(
										Element:span
											maxCount
										Element:span
											);
										Element:span
											// Update the nodes
										Element:span
											var
										Element:span
											node
										Element:span
											=
										Element:span
											svg
										Element:span
											.
										Element:span
											selectAll
										Element:span
											(
										Element:span
											"g.node"
										Element:span
											)
										Element:span
											.
										Element:span
											data
										Element:span
											(
										Element:span
											nodes
										Element:span
											,
										Element:span
											function
										Element:span
											(
										Element:span
											d
										Element:span
											)
										Element:span
											{
										Element:span
											return
										Element:span
											d
										Element:span
											.
										Element:span
											id
										Element:span
											||
										Element:span
											(
										Element:span
											d
										Element:span
											.
										Element:span
											id
										Element:span
											=
										Element:span
											++
										Element:span
											i
										Element:span
											);
										Element:span
											});
										Element:span
											// Enter any new nodes at the parent's previous position
										Element:span
											var
										Element:span
											nodeEnter
										Element:span
											=
										Element:span
											node
										Element:span
											.
										Element:span
											enter
										Element:span
											().
										Element:span
											append
										Element:span
											(
										Element:span
											"g"
										Element:span
											)
										Element:span
											.
										Element:span
											attr
										Element:span
											(
										Element:span
											"class"
										Element:span
											,
										Element:span
											function
										Element:span
											(
										Element:span
											d
										Element:span
											)
										Element:span
											{
										Element:span
											return
										Element:span
											d
										Element:span
											.
										Element:span
											parent
										Element:span
											?
										Element:span
											"node"
										Element:span
											:
										Element:span
											"root node"
										Element:span
											;
										Element:span
											})
										Element:span
											.
										Element:span
											attr
										Element:span
											(
										Element:span
											"transform"
										Element:span
											,
										Element:span
											function
										Element:span
											(
										Element:span
											d
										Element:span
											)
										Element:span
											{
										Element:span
											return
										Element:span
											"translate("
										Element:span
											+
										Element:span
											source
										Element:span
											.
										Element:span
											y0
										Element:span
											+
										Element:span
											","
										Element:span
											+
										Element:span
											source
										Element:span
											.
										Element:span
											x0
										Element:span
											+
										Element:span
											")"
										Element:span
											;
										Element:span
											})
										Element:span
											.
										Element:span
											style
										Element:span
											(
										Element:span
											"-webkit-clip-path"
										Element:span
											,
										Element:span
											"polygon(-3px 0, "
										Element:span
											+
										Element:span
											width
										Element:span
											/
										Element:span
											flow_length
										Element:span
											+
										Element:span
											"px 0, "
										Element:span
											+
										Element:span
											width
										Element:span
											/
										Element:span
											flow_length
										Element:span
											+
										Element:span
											"px 100%, -3px 100%"
										Element:span
											)
										Element:span
											.
										Element:span
											style
										Element:span
											(
										Element:span
											"clip-path"
										Element:span
											,
										Element:span
											"polygon(-3px 0, "
										Element:span
											+
										Element:span
											width
										Element:span
											/
										Element:span
											flow_length
										Element:span
											+
										Element:span
											"px 0, "
										Element:span
											+
										Element:span
											width
										Element:span
											/
										Element:span
											flow_length
										Element:span
											+
										Element:span
											"px 100%, -3px 100%"
										Element:span
											)
										Element:span
											.
										Element:span
											style
										Element:span
											(
										Element:span
											"cursor"
										Element:span
											,
										Element:span
											"pointer"
										Element:span
											)
										Element:span
											.
										Element:span
											on
										Element:span
											(
										Element:span
											"click"
										Element:span
											,
										Element:span
											click
										Element:span
											);
										Element:span
											nodeEnter
										Element:span
											.
										Element:span
											append
										Element:span
											(
										Element:span
											"circle"
										Element:span
											)
										Element:span
											.
										Element:span
											attr
										Element:span
											(
										Element:span
											"r"
										Element:span
											,
										Element:span
											1
										Element:span
											e
										Element:span
											-
										Element:span
											6
										Element:span
											)
										Element:span
											.
										Element:span
											style
										Element:span
											(
										Element:span
											"stroke"
										Element:span
											,
										Element:span
											"steelblue"
										Element:span
											)
										Element:span
											.
										Element:span
											style
										Element:span
											(
										Element:span
											"stroke-width"
										Element:span
											,
										Element:span
											"1.5px"
										Element:span
											)
										Element:span
											.
										Element:span
											style
										Element:span
											(
										Element:span
											"fill"
										Element:span
											,
										Element:span
											function
										Element:span
											(
										Element:span
											d
										Element:span
											)
										Element:span
											{
										Element:span
											return
										Element:span
											d
										Element:span
											.
										Element:span
											children
										Element:span
											?
										Element:span
											"#fff"
										Element:span
											:
										Element:span
											"lightsteelblue"
										Element:span
											;
										Element:span
											});
										Element:span
											nodeEnter
										Element:span
											.
										Element:span
											append
										Element:span
											(
										Element:span
											"text"
										Element:span
											)
										Element:span
											.
										Element:span
											attr
										Element:span
											(
										Element:span
											"dx"
										Element:span
											,
										Element:span
											10
										Element:span
											)
										Element:span
											.
										Element:span
											attr
										Element:span
											(
										Element:span
											"dy"
										Element:span
											,
										Element:span
											3
										Element:span
											)
										Element:span
											.
										Element:span
											attr
										Element:span
											(
										Element:span
											"text-anchor"
										Element:span
											,
										Element:span
											"start"
										Element:span
											)
										Element:span
											.
										Element:span
											text
										Element:span
											(
										Element:span
											function
										Element:span
											(
										Element:span
											d
										Element:span
											)
										Element:span
											{
										Element:span
											return
										Element:span
											d
										Element:span
											.
										Element:span
											name
										Element:span
											;
										Element:span
											})
										Element:span
											.
										Element:span
											style
										Element:span
											(
										Element:span
											"fill-opacity"
										Element:span
											,
										Element:span
											1
										Element:span
											e
										Element:span
											-
										Element:span
											6
										Element:span
											)
										Element:span
											.
										Element:span
											style
										Element:span
											(
										Element:span
											"font"
										Element:span
											,
										Element:span
											"10px sans-serif"
										Element:span
											)
										Element:span
											.
										Element:span
											style
										Element:span
											(
										Element:span
											"text-overflow"
										Element:span
											,
										Element:span
											"ellipsis"
										Element:span
											)
										Element:span
											.
										Element:span
											style
										Element:span
											(
										Element:span
											"overflow"
										Element:span
											,
										Element:span
											"hidden"
										Element:span
											)
										Element:span
											.
										Element:span
											style
										Element:span
											(
										Element:span
											"white-space"
										Element:span
											,
										Element:span
											"nowrap"
										Element:span
											);
										Element:span
											nodeEnter
										Element:span
											.
										Element:span
											append
										Element:span
											(
										Element:span
											"title"
										Element:span
											)
										Element:span
											.
										Element:span
											text
										Element:span
											(
										Element:span
											function
										Element:span
											(
										Element:span
											d
										Element:span
											)
										Element:span
											{
										Element:span
											return
										Element:span
											d
										Element:span
											.
										Element:span
											name
										Element:span
											;
										Element:span
											});
										Element:span
											// Transition nodes to their new position
										Element:span
											var
										Element:span
											nodeUpdate
										Element:span
											=
										Element:span
											node
										Element:span
											.
										Element:span
											transition
										Element:span
											()
										Element:span
											.
										Element:span
											duration
										Element:span
											(
										Element:span
											duration
										Element:span
											)
										Element:span
											.
										Element:span
											attr
										Element:span
											(
										Element:span
											"transform"
										Element:span
											,
										Element:span
											function
										Element:span
											(
										Element:span
											d
										Element:span
											)
										Element:span
											{
										Element:span
											return
										Element:span
											"translate("
										Element:span
											+
										Element:span
											d
										Element:span
											.
										Element:span
											y
										Element:span
											+
										Element:span
											","
										Element:span
											+
										Element:span
											d
										Element:span
											.
										Element:span
											x
										Element:span
											+
										Element:span
											")"
										Element:span
											;
										Element:span
											});
										Element:span
											nodeUpdate
										Element:span
											.
										Element:span
											select
										Element:span
											(
										Element:span
											"circle"
										Element:span
											)
										Element:span
											.
										Element:span
											attr
										Element:span
											(
										Element:span
											"r"
										Element:span
											,
										Element:span
											4.5
										Element:span
											)
										Element:span
											.
										Element:span
											style
										Element:span
											(
										Element:span
											"fill"
										Element:span
											,
										Element:span
											function
										Element:span
											(
										Element:span
											d
										Element:span
											)
										Element:span
											{
										Element:span
											return
										Element:span
											d
										Element:span
											.
										Element:span
											children
										Element:span
											?
										Element:span
											"#fff"
										Element:span
											:
										Element:span
											"lightsteelblue"
										Element:span
											;
										Element:span
											});
										Element:span
											nodeUpdate
										Element:span
											.
										Element:span
											select
										Element:span
											(
										Element:span
											"text"
										Element:span
											)
										Element:span
											.
										Element:span
											style
										Element:span
											(
										Element:span
											"fill-opacity"
										Element:span
											,
										Element:span
											1
										Element:span
											)
										Element:span
											.
										Element:span
											style
										Element:span
											(
										Element:span
											"font-weight"
										Element:span
											,
										Element:span
											function
										Element:span
											(
										Element:span
											d
										Element:span
											)
										Element:span
											{
										Element:span
											return
										Element:span
											d
										Element:span
											.
										Element:span
											children
										Element:span
											?
										Element:span
											"bold"
										Element:span
											:
										Element:span
											"normal"
										Element:span
											;
										Element:span
											});
										Element:span
											// Transition exiting nodes to the parent's new position
										Element:span
											var
										Element:span
											nodeExit
										Element:span
											=
										Element:span
											node
										Element:span
											.
										Element:span
											exit
										Element:span
											().
										Element:span
											transition
										Element:span
											()
										Element:span
											.
										Element:span
											duration
										Element:span
											(
										Element:span
											duration
										Element:span
											)
										Element:span
											.
										Element:span
											attr
										Element:span
											(
										Element:span
											"transform"
										Element:span
											,
										Element:span
											function
										Element:span
											(
										Element:span
											d
										Element:span
											)
										Element:span
											{
										Element:span
											return
										Element:span
											"translate("
										Element:span
											+
										Element:span
											source
										Element:span
											.
										Element:span
											y
										Element:span
											+
										Element:span
											","
										Element:span
											+
										Element:span
											source
										Element:span
											.
										Element:span
											x
										Element:span
											+
										Element:span
											")"
										Element:span
											;
										Element:span
											})
										Element:span
											.
										Element:span
											remove
										Element:span
											();
										Element:span
											nodeExit
										Element:span
											.
										Element:span
											select
										Element:span
											(
										Element:span
											"circle"
										Element:span
											)
										Element:span
											.
										Element:span
											attr
										Element:span
											(
										Element:span
											"r"
										Element:span
											,
										Element:span
											1
										Element:span
											e
										Element:span
											-
										Element:span
											6
										Element:span
											);
										Element:span
											nodeExit
										Element:span
											.
										Element:span
											select
										Element:span
											(
										Element:span
											"text"
										Element:span
											)
										Element:span
											.
										Element:span
											style
										Element:span
											(
										Element:span
											"fill-opacity"
										Element:span
											,
										Element:span
											1
										Element:span
											e
										Element:span
											-
										Element:span
											6
										Element:span
											);
										Element:span
											// Update the links
										Element:span
											var
										Element:span
											link
										Element:span
											=
										Element:span
											svg
										Element:span
											.
										Element:span
											selectAll
										Element:span
											(
										Element:span
											"path.link"
										Element:span
											)
										Element:span
											.
										Element:span
											data
										Element:span
											(
										Element:span
											links
										Element:span
											,
										Element:span
											function
										Element:span
											(
										Element:span
											d
										Element:span
											)
										Element:span
											{
										Element:span
											return
										Element:span
											d
										Element:span
											.
										Element:span
											target
										Element:span
											.
										Element:span
											id
										Element:span
											;
										Element:span
											});
										Element:span
											// Enter any new links at the parent's previous position
										Element:span
											link
										Element:span
											.
										Element:span
											enter
										Element:span
											().
										Element:span
											insert
										Element:span
											(
										Element:span
											"path"
										Element:span
											,
										Element:span
											"g"
										Element:span
											)
										Element:span
											.
										Element:span
											attr
										Element:span
											(
										Element:span
											"class"
										Element:span
											,
										Element:span
											"link"
										Element:span
											)
										Element:span
											.
										Element:span
											style
										Element:span
											(
										Element:span
											"stroke-width"
										Element:span
											,
										Element:span
											function
										Element:span
											(
										Element:span
											d
										Element:span
											)
										Element:span
											{
										Element:span
											var
										Element:span
											width
										Element:span
											=
										Element:span
											d
										Element:span
											.
										Element:span
											target
										Element:span
											.
										Element:span
											count
										Element:span
											*
										Element:span
											ratio
										Element:span
											&
										Element:span
											gt
										Element:span
											;
										Element:span
											1
										Element:span
											?
										Element:span
											d
										Element:span
											.
										Element:span
											target
										Element:span
											.
										Element:span
											count
										Element:span
											*
										Element:span
											ratio
										Element:span
											:
										Element:span
											1
										Element:span
											;
										Element:span
											return
										Element:span
											width
										Element:span
											;
										Element:span
											})
										Element:span
											.
										Element:span
											style
										Element:span
											(
										Element:span
											"fill"
										Element:span
											,
										Element:span
											"none"
										Element:span
											)
										Element:span
											.
										Element:span
											style
										Element:span
											(
										Element:span
											"stroke"
										Element:span
											,
										Element:span
											"#ccc"
										Element:span
											)
										Element:span
											.
										Element:span
											style
										Element:span
											(
										Element:span
											"stroke-linecap"
										Element:span
											,
										Element:span
											"round"
										Element:span
											)
										Element:span
											.
										Element:span
											attr
										Element:span
											(
										Element:span
											"d"
										Element:span
											,
										Element:span
											function
										Element:span
											(
										Element:span
											d
										Element:span
											)
										Element:span
											{
										Element:span
											var
										Element:span
											o
										Element:span
											=
										Element:span
											{
										Element:span
											x
										Element:span
											:
										Element:span
											source
										Element:span
											.
										Element:span
											x0
										Element:span
											,
										Element:span
											y
										Element:span
											:
										Element:span
											source
										Element:span
											.
										Element:span
											y0
										Element:span
											};
										Element:span
											return
										Element:span
											diagonal
										Element:span
											({
										Element:span
											source
										Element:span
											:
										Element:span
											o
										Element:span
											,
										Element:span
											target
										Element:span
											:
										Element:span
											o
										Element:span
											});
										Element:span
											});
										Element:span
											// Transition links to their new position
										Element:span
											link
										Element:span
											.
										Element:span
											transition
										Element:span
											()
										Element:span
											.
										Element:span
											duration
										Element:span
											(
										Element:span
											duration
										Element:span
											)
										Element:span
											.
										Element:span
											attr
										Element:span
											(
										Element:span
											"d"
										Element:span
											,
										Element:span
											diagonal
										Element:span
											);
										Element:span
											// Transition exiting nodes to the parent's new position
										Element:span
											link
										Element:span
											.
										Element:span
											exit
										Element:span
											().
										Element:span
											transition
										Element:span
											()
										Element:span
											.
										Element:span
											duration
										Element:span
											(
										Element:span
											duration
										Element:span
											)
										Element:span
											.
										Element:span
											attr
										Element:span
											(
										Element:span
											"d"
										Element:span
											,
										Element:span
											function
										Element:span
											(
										Element:span
											d
										Element:span
											)
										Element:span
											{
										Element:span
											var
										Element:span
											o
										Element:span
											=
										Element:span
											{
										Element:span
											x
										Element:span
											:
										Element:span
											source
										Element:span
											.
										Element:span
											x
										Element:span
											,
										Element:span
											y
										Element:span
											:
										Element:span
											source
										Element:span
											.
										Element:span
											y
										Element:span
											};
										Element:span
											return
										Element:span
											diagonal
										Element:span
											({
										Element:span
											source
										Element:span
											:
										Element:span
											o
										Element:span
											,
										Element:span
											target
										Element:span
											:
										Element:span
											o
										Element:span
											});
										Element:span
											})
										Element:span
											.
										Element:span
											remove
										Element:span
											();
										Element:span
											// Stash the old positions for transition
										Element:span
											nodes
										Element:span
											.
										Element:span
											forEach
										Element:span
											(
										Element:span
											function
										Element:span
											(
										Element:span
											d
										Element:span
											)
										Element:span
											{
										Element:span
											d
										Element:span
											.
										Element:span
											x0
										Element:span
											=
										Element:span
											d
										Element:span
											.
										Element:span
											x
										Element:span
											;
										Element:span
											d
										Element:span
											.
										Element:span
											y0
										Element:span
											=
										Element:span
											d
										Element:span
											.
										Element:span
											y
										Element:span
											;
										Element:span
											});
										Element:span
											}
										Element:span
											function
										Element:span
											click
										Element:span
											(
										Element:span
											d
										Element:span
											)
										Element:span
											{
										Element:span
											// Toggle children on click
										Element:span
											if
										Element:span
											(
										Element:span
											d
										Element:span
											.
										Element:span
											children
										Element:span
											)
										Element:span
											{
										Element:span
											d
										Element:span
											.
										Element:span
											_children
										Element:span
											=
										Element:span
											d
										Element:span
											.
										Element:span
											children
										Element:span
											;
										Element:span
											d
										Element:span
											.
										Element:span
											children
										Element:span
											=
										Element:span
											null
										Element:span
											;
										Element:span
											}
										Element:span
											else
										Element:span
											{
										Element:span
											d
										Element:span
											.
										Element:span
											children
										Element:span
											=
										Element:span
											d
										Element:span
											.
										Element:span
											_children
										Element:span
											;
										Element:span
											d
										Element:span
											.
										Element:span
											_children
										Element:span
											=
										Element:span
											null
										Element:span
											;
										Element:span
											}
										Element:span
											update
										Element:span
											(
										Element:span
											d
										Element:span
											);
										Element:span
											}
										Element:span
											function
										Element:span
											calculateFlowLine
										Element:span
											(
										Element:span
											count
										Element:span
											)
										Element:span
											{
										Element:span
											// Calculate a ratio normalize width of path links
										Element:span
											count
										Element:span
											=
										Element:span
											count
										Element:span
											||
										Element:span
											1
										Element:span
											;
										Element:span
											return
										Element:span
											15
										Element:span
											/
										Element:span
											count
										Element:span
											;
										Element:span
											}
									Node:
									(type) c
									(layer)3
										Element:p
										Element:a
											Here
											is the current state of the code. Use this as a reference in case you get lost.
									Node:
									(type) c
									(layer)3
										Element:hr
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Format the data
						Node:
						(type) c
						(layer)2
							Element:p
								We know what our JQL result looks like; we need to be able to pull applicable information from the result into each of the pieces (the funnel and the path) of our visualization.
						Node:
						(type) c
						(layer)2
							Element:p
								The funnel graph will take input like so:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								var
							Element:span
								funnel
							Element:span
								=
							Element:span
								{
							Element:span
								dropped
							Element:span
								:
							Element:span
								{
							Element:span
								'App Install'
							Element:span
								:
							Element:span
								0
							Element:span
								,
							Element:span
								'Game Played'
							Element:span
								:
							Element:span
								70
							Element:span
								,
							Element:span
								'In-App Purchase'
							Element:span
								:
							Element:span
								80
							Element:span
								},
							Element:span
								converted
							Element:span
								:
							Element:span
								{
							Element:span
								'App Install'
							Element:span
								:
							Element:span
								200
							Element:span
								,
							Element:span
								'Game Played'
							Element:span
								:
							Element:span
								130
							Element:span
								,
							Element:span
								'In-App Purchase'
							Element:span
								:
							Element:span
								50
							Element:span
								},
							Element:span
								}
						Node:
						(type) c
						(layer)2
							Element:p
								We thus need to add the following function to our code (again, before the closing
							Element:code
								</script>
								tag) to get from our JQL result to the above input:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								function
							Element:span
								generateFunnel
							Element:span
								(
							Element:span
								results
							Element:span
								)
							Element:span
								{
							Element:span
								var
							Element:span
								funnel
							Element:span
								=
							Element:span
								{
							Element:span
								dropped
							Element:span
								:
							Element:span
								{},
							Element:span
								converted
							Element:span
								:
							Element:span
								{}
							Element:span
								};
							Element:span
								_
							Element:span
								.
							Element:span
								each
							Element:span
								(
							Element:span
								results
							Element:span
								,
							Element:span
								function
							Element:span
								(
							Element:span
								funnel_step
							Element:span
								,
							Element:span
								i
							Element:span
								)
							Element:span
								{
							Element:span
								// loop through each of the event objects in the JQL result
							Element:span
								// assign the total count to the "converted" object in our funnel object
							Element:span
								funnel
							Element:span
								.
							Element:span
								converted
							Element:span
								[
							Element:span
								funnel_step
							Element:span
								.
							Element:span
								step
							Element:span
								]
							Element:span
								=
							Element:span
								funnel_step
							Element:span
								.
							Element:span
								count
							Element:span
								;
							Element:span
								// if there is a preceding event in the funnel, assign the difference between the preceding and current step to the "dropped" object
							Element:span
								funnel
							Element:span
								.
							Element:span
								dropped
							Element:span
								[
							Element:span
								funnel_step
							Element:span
								.
							Element:span
								step
							Element:span
								]
							Element:span
								=
							Element:span
								results
							Element:span
								[
							Element:span
								i
							Element:span
								-
							Element:span
								1
							Element:span
								]
							Element:span
								?
							Element:span
								results
							Element:span
								[
							Element:span
								i
							Element:span
								-
							Element:span
								1
							Element:span
								].
							Element:span
								count
							Element:span
								-
							Element:span
								funnel_step
							Element:span
								.
							Element:span
								count
							Element:span
								:
							Element:span
								0
							Element:span
								;
							Element:span
								});
							Element:span
								return
							Element:span
								funnel
							Element:span
								;
							Element:span
								}
						Node:
						(type) c
						(layer)2
							Element:p
								The D3 path visualization input looks like this:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								{
							Element:span
								"name"
							Element:span
								:
							Element:span
								"Root"
							Element:span
								,
							Element:span
								"count"
							Element:span
								:
							Element:span
								123
							Element:span
								,
							Element:span
								"children"
							Element:span
								:
							Element:span
								[
							Element:span
								{
							Element:span
								"name"
							Element:span
								:
							Element:span
								"Child 1"
							Element:span
								,
							Element:span
								"parent"
							Element:span
								:
							Element:span
								"Root"
							Element:span
								,
							Element:span
								"children"
							Element:span
								:
							Element:span
								[
							Element:span
								{
							Element:span
								"name"
							Element:span
								:
							Element:span
								"Child 1-1"
							Element:span
								,
							Element:span
								"parent"
							Element:span
								:
							Element:span
								"Child 1"
							Element:span
								},
							Element:span
								{
							Element:span
								"name"
							Element:span
								:
							Element:span
								"Child 1-2"
							Element:span
								,
							Element:span
								"parent"
							Element:span
								:
							Element:span
								"Child 1"
							Element:span
								}
							Element:span
								]
							Element:span
								},
							Element:span
								{
							Element:span
								"name"
							Element:span
								:
							Element:span
								"Child 2"
							Element:span
								,
							Element:span
								"parent"
							Element:span
								:
							Element:span
								"Root"
							Element:span
								}
							Element:span
								]
							Element:span
								}
						Node:
						(type) c
						(layer)2
							Element:p
								so we need to add the following functions (before the closing
							Element:code
								</script>
								tag) to get it there:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								function
							Element:span
								getChildren
							Element:span
								(
							Element:span
								parentObject
							Element:span
								,
							Element:span
								flowParent
							Element:span
								,
							Element:span
								prevFlowParent
							Element:span
								,
							Element:span
								event
							Element:span
								)
							Element:span
								{
							Element:span
								// loop through our result to get the children of each event and add them to the applicable parent
							Element:span
								var
							Element:span
								eventObject
							Element:span
								=
							Element:span
								{
							Element:span
								'name'
							Element:span
								:
							Element:span
								flowParent
							Element:span
								.
							Element:span
								count
							Element:span
								+
							Element:span
								': '
							Element:span
								+
							Element:span
								event
							Element:span
								,
							Element:span
								'count'
							Element:span
								:
							Element:span
								flowParent
							Element:span
								.
							Element:span
								count
							Element:span
								,
							Element:span
								'parent'
							Element:span
								:
							Element:span
								prevFlowParent
							Element:span
								,
							Element:span
								'children'
							Element:span
								:
							Element:span
								[]
							Element:span
								};
							Element:span
								// find the next events completed in a path after the parent event
							Element:span
								var
							Element:span
								next
							Element:span
								=
							Element:span
								flowParent
							Element:span
								.
							Element:span
								next
							Element:span
								;
							Element:span
								if
							Element:span
								(
							Element:span
								$
							Element:span
								.
							Element:span
								isEmptyObject
							Element:span
								(
							Element:span
								next
							Element:span
								)
							Element:span
								===
							Element:span
								false
							Element:span
								)
							Element:span
								{
							Element:span
								// continue to get the next events in the path
							Element:span
								for
							Element:span
								(
							Element:span
								var
							Element:span
								eventName
							Element:span
								in
							Element:span
								next
							Element:span
								)
							Element:span
								{
							Element:span
								if
							Element:span
								(
							Element:span
								next
							Element:span
								.
							Element:span
								hasOwnProperty
							Element:span
								(
							Element:span
								eventName
							Element:span
								))
							Element:span
								{
							Element:span
								getChildren
							Element:span
								(
							Element:span
								eventObject
							Element:span
								,
							Element:span
								next
							Element:span
								[
							Element:span
								eventName
							Element:span
								],
							Element:span
								event
							Element:span
								,
							Element:span
								eventName
							Element:span
								);
							Element:span
								}
							Element:span
								}
							Element:span
								}
							Element:span
								// add all next events as children of the parent event
							Element:span
								parentObject
							Element:span
								.
							Element:span
								children
							Element:span
								.
							Element:span
								push
							Element:span
								(
							Element:span
								eventObject
							Element:span
								);
							Element:span
								}
							Element:span
								function
							Element:span
								mapFlow
							Element:span
								(
							Element:span
								index
							Element:span
								)
							Element:span
								{
							Element:span
								// create the object to be passed into the D3 visualization
							Element:span
								// jqlResult is our JQL result (we'll assign it later)
							Element:span
								var
							Element:span
								flows
							Element:span
								=
							Element:span
								jqlResult
							Element:span
								[
							Element:span
								index
							Element:span
								];
							Element:span
								var
							Element:span
								root
							Element:span
								=
							Element:span
								event_list_input
							Element:span
								[
							Element:span
								index
							Element:span
								];
							Element:span
								flowObject
							Element:span
								=
							Element:span
								{
							Element:span
								'name'
							Element:span
								:
							Element:span
								flows
							Element:span
								.
							Element:span
								count
							Element:span
								+
							Element:span
								': '
							Element:span
								+
							Element:span
								root
							Element:span
								,
							Element:span
								'count'
							Element:span
								:
							Element:span
								flows
							Element:span
								.
							Element:span
								count
							Element:span
								,
							Element:span
								'children'
							Element:span
								:
							Element:span
								[],
							Element:span
								};
							Element:span
								_
							Element:span
								.
							Element:span
								each
							Element:span
								(
							Element:span
								_
							Element:span
								.
							Element:span
								keys
							Element:span
								(
							Element:span
								flows
							Element:span
								.
							Element:span
								next
							Element:span
								),
							Element:span
								function
							Element:span
								(
							Element:span
								eventName
							Element:span
								)
							Element:span
								{
							Element:span
								getChildren
							Element:span
								(
							Element:span
								flowObject
							Element:span
								,
							Element:span
								flows
							Element:span
								.
							Element:span
								next
							Element:span
								[
							Element:span
								eventName
							Element:span
								],
							Element:span
								''
							Element:span
								,
							Element:span
								eventName
							Element:span
								);
							Element:span
								});
							Element:span
								createFlow
							Element:span
								(
							Element:span
								flowObject
							Element:span
								);
							Element:span
								}
						Node:
						(type) c
						(layer)2
							Element:p
							Element:a
								Here
								is the current state of the code. Use this as a reference in case you get lost.
						Node:
						(type) c
						(layer)2
							Element:hr
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Add the JQL Query
						Node:
						(type) c
						(layer)2
							Element:p
								Let's pull it all together for our final result!
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Add the JQL script
									Node:
									(type) c
									(layer)3
										Element:p
											To run a JQL Query inside of a Mixpanel Application, we'll need to include the query script as a parameter in our request. The easiest way to do so is to add a new set of
										Element:code
											<script>
											tags (before the closing
										Element:code
											<body>
											tag) to your Mixpanel Application with type="text/jql" and id="jql" as such:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											<script
										Element:span
											type=
										Element:span
											"text/jql"
										Element:span
											id=
										Element:span
											"jql"
										Element:span
											>
										Element:span
											</script>
									Node:
									(type) c
									(layer)3
										Element:p
											This will allow us to reference the JavaScript inside these script tags with
										Element:code
											$('#jql').html()
											.
									Node:
									(type) c
									(layer)3
										Element:p
											Add the JQL script we wrote in step 1 inside the script tags:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											<script
										Element:span
											type=
										Element:span
											"text/jql"
										Element:span
											id=
										Element:span
											"jql"
										Element:span
											>
										Element:span
											var
										Element:span
											EVENT_LIST
										Element:span
											=
										Element:span
											params
										Element:span
											.
										Element:span
											event_list
										Element:span
											||
										Element:span
											[
										Element:span
											'App Install'
										Element:span
											,
										Element:span
											'Game Played'
										Element:span
											,
										Element:span
											'In-App Purchase'
										Element:span
											];
										Element:span
											var
										Element:span
											PATH_LENGTH
										Element:span
											=
										Element:span
											params
										Element:span
											.
										Element:span
											path_length
										Element:span
											||
										Element:span
											3
										Element:span
											;
										Element:span
											function
										Element:span
											main
										Element:span
											()
										Element:span
											{
										Element:span
											return
										Element:span
											Events
										Element:span
											({
										Element:span
											from_date
										Element:span
											:
										Element:span
											params
										Element:span
											.
										Element:span
											from_date
										Element:span
											,
										Element:span
											to_date
										Element:span
											:
										Element:span
											params
										Element:span
											.
										Element:span
											to_date
										Element:span
											})
										Element:span
											.
										Element:span
											groupByUser
										Element:span
											(
										Element:span
											function
										Element:span
											(
										Element:span
											state
										Element:span
											,
										Element:span
											events
										Element:span
											)
										Element:span
											{
										Element:span
											// collect the funnel step and drop-off event path for each user, if they entered the funnel
										Element:span
											// use the current user state if events have already been analyzed for that user, or initialize user state
										Element:span
											state
										Element:span
											=
										Element:span
											state
										Element:span
											||
										Element:span
											{
										Element:span
											current_step
										Element:span
											:
										Element:span
											-
										Element:span
											1
										Element:span
											,
										Element:span
											exit_path
										Element:span
											:
										Element:span
											[]
										Element:span
											};
										Element:span
											_
										Element:span
											.
										Element:span
											each
										Element:span
											(
										Element:span
											events
										Element:span
											,
										Element:span
											function
										Element:span
											(
										Element:span
											e
										Element:span
											)
										Element:span
											{
										Element:span
											// loop through each event in the current event batch
										Element:span
											if
										Element:span
											(
										Element:span
											e
										Element:span
											.
										Element:span
											name
										Element:span
											==
										Element:span
											EVENT_LIST
										Element:span
											[
										Element:span
											state
										Element:span
											.
										Element:span
											current_step
										Element:span
											+
										Element:span
											1
										Element:span
											])
										Element:span
											{
										Element:span
											// if the event name matches the next event in the funnel
										Element:span
											// reset the dropoff path (because they did not drop off if they converted to this event)
										Element:span
											// and move current step forward
										Element:span
											state
										Element:span
											.
										Element:span
											exit_path
										Element:span
											=
										Element:span
											[];
										Element:span
											state
										Element:span
											.
										Element:span
											current_step
										Element:span
											+=
										Element:span
											1
										Element:span
											;
										Element:span
											}
										Element:span
											else
										Element:span
											if
										Element:span
											(
										Element:span
											state
										Element:span
											.
										Element:span
											exit_path
										Element:span
											.
										Element:span
											length
										Element:span
											&
										Element:span
											lt
										Element:span
											;
										Element:span
											PATH_LENGTH
										Element:span
											)
										Element:span
											{
										Element:span
											// record the n events after the last converted event
										Element:span
											state
										Element:span
											.
										Element:span
											exit_path
										Element:span
											.
										Element:span
											push
										Element:span
											(
										Element:span
											e
										Element:span
											.
										Element:span
											name
										Element:span
											);
										Element:span
											}
										Element:span
											});
										Element:span
											return
										Element:span
											state
										Element:span
											;
										Element:span
											})
										Element:span
											.
										Element:span
											filter
										Element:span
											(
										Element:span
											function
										Element:span
											(
										Element:span
											item
										Element:span
											)
										Element:span
											{
										Element:span
											// filter out users who did not enter the funnel
										Element:span
											return
										Element:span
											item
										Element:span
											.
										Element:span
											value
										Element:span
											.
										Element:span
											current_step
										Element:span
											&
										Element:span
											gt
										Element:span
											;
										Element:span
											-
										Element:span
											1
										Element:span
											;
										Element:span
											})
										Element:span
											.
										Element:span
											reduce
										Element:span
											(
										Element:span
											function
										Element:span
											(
										Element:span
											previous_outputs
										Element:span
											,
										Element:span
											user_states
										Element:span
											)
										Element:span
											{
										Element:span
											// aggregate total users at each step in the funnel and
										Element:span
											// most common exit paths after dropping out of the funnel
										Element:span
											// initialize our output object for each event in the funnel
										Element:span
											var
										Element:span
											output
										Element:span
											=
										Element:span
											[];
										Element:span
											_
										Element:span
											.
										Element:span
											each
										Element:span
											(
										Element:span
											EVENT_LIST
										Element:span
											,
										Element:span
											function
										Element:span
											(
										Element:span
											e
										Element:span
											)
										Element:span
											{
										Element:span
											output
										Element:span
											.
										Element:span
											push
										Element:span
											({
										Element:span
											step
										Element:span
											:
										Element:span
											e
										Element:span
											,
										Element:span
											count
										Element:span
											:
										Element:span
											0
										Element:span
											,
										Element:span
											next
										Element:span
											:
										Element:span
											{}
										Element:span
											});
										Element:span
											});
										Element:span
											_
										Element:span
											.
										Element:span
											each
										Element:span
											(
										Element:span
											user_states
										Element:span
											,
										Element:span
											function
										Element:span
											(
										Element:span
											state
										Element:span
											)
										Element:span
											{
										Element:span
											// loop through each user object
										Element:span
											state
										Element:span
											=
										Element:span
											state
										Element:span
											.
										Element:span
											value
										Element:span
											;
										Element:span
											// include the user in the count for each step of the funnel they completed
										Element:span
											var
										Element:span
											step
										Element:span
											=
										Element:span
											0
										Element:span
											;
										Element:span
											while
										Element:span
											(
										Element:span
											step
										Element:span
											&
										Element:span
											lt
										Element:span
											;
										Element:span
											state
										Element:span
											.
										Element:span
											current_step
										Element:span
											)
										Element:span
											{
										Element:span
											output
										Element:span
											[
										Element:span
											step
										Element:span
											].
										Element:span
											count
										Element:span
											++
										Element:span
											;
										Element:span
											step
										Element:span
											++
										Element:span
											;
										Element:span
											}
										Element:span
											if
										Element:span
											(
										Element:span
											step
										Element:span
											!=
										Element:span
											state
										Element:span
											.
										Element:span
											current_step
										Element:span
											)
										Element:span
											{
										Element:span
											throw
										Element:span
											"you got a bug"
										Element:span
											}
										Element:span
											output
										Element:span
											[
										Element:span
											step
										Element:span
											].
										Element:span
											count
										Element:span
											++
										Element:span
											;
										Element:span
											var
										Element:span
											flow
										Element:span
											=
										Element:span
											output
										Element:span
											[
										Element:span
											step
										Element:span
											].
										Element:span
											next
										Element:span
											;
										Element:span
											_
										Element:span
											.
										Element:span
											each
										Element:span
											(
										Element:span
											state
										Element:span
											.
										Element:span
											exit_path
										Element:span
											,
										Element:span
											function
										Element:span
											(
										Element:span
											e
										Element:span
											)
										Element:span
											{
										Element:span
											// loop through each event in the user's exit path, and
										Element:span
											// add the event to an existing path or create a new one
										Element:span
											flow
										Element:span
											[
										Element:span
											e
										Element:span
											]
										Element:span
											=
										Element:span
											flow
										Element:span
											[
										Element:span
											e
										Element:span
											]
										Element:span
											||
										Element:span
											{
										Element:span
											count
										Element:span
											:
										Element:span
											0
										Element:span
											,
										Element:span
											next
										Element:span
											:
										Element:span
											{}};
										Element:span
											flow
										Element:span
											[
										Element:span
											e
										Element:span
											].
										Element:span
											count
										Element:span
											++
										Element:span
											;
										Element:span
											flow
										Element:span
											=
										Element:span
											flow
										Element:span
											[
										Element:span
											e
										Element:span
											].
										Element:span
											next
										Element:span
											;
										Element:span
											});
										Element:span
											});
										Element:span
											_
										Element:span
											.
										Element:span
											each
										Element:span
											(
										Element:span
											previous_outputs
										Element:span
											,
										Element:span
											function
										Element:span
											(
										Element:span
											previous_output
										Element:span
											)
										Element:span
											{
										Element:span
											// merge our previous output object with the one from this batch of user objects
										Element:span
											merge
										Element:span
											(
										Element:span
											output
										Element:span
											,
										Element:span
											previous_output
										Element:span
											);
										Element:span
											});
										Element:span
											return
										Element:span
											output
										Element:span
											;
										Element:span
											});
										Element:span
											}
										Element:span
											function
										Element:span
											recursiveSumMerge
										Element:span
											(
										Element:span
											d1
										Element:span
											,
										Element:span
											d2
										Element:span
											)
										Element:span
											{
										Element:span
											for
										Element:span
											(
										Element:span
											var
										Element:span
											key
										Element:span
											in
										Element:span
											d2
										Element:span
											)
										Element:span
											{
										Element:span
											if
										Element:span
											(
										Element:span
											d2
										Element:span
											.
										Element:span
											hasOwnProperty
										Element:span
											(
										Element:span
											key
										Element:span
											))
										Element:span
											{
										Element:span
											var
										Element:span
											v1
										Element:span
											=
										Element:span
											d1
										Element:span
											[
										Element:span
											key
										Element:span
											],
										Element:span
											v2
										Element:span
											=
										Element:span
											d2
										Element:span
											[
										Element:span
											key
										Element:span
											];
										Element:span
											if
										Element:span
											(
										Element:span
											!
										Element:span
											(
										Element:span
											key
										Element:span
											in
										Element:span
											d1
										Element:span
											))
										Element:span
											{
										Element:span
											d1
										Element:span
											[
										Element:span
											key
										Element:span
											]
										Element:span
											=
										Element:span
											v2
										Element:span
											;
										Element:span
											}
										Element:span
											else
										Element:span
											if
										Element:span
											(
										Element:span
											typeof
										Element:span
											v1
										Element:span
											===
										Element:span
											"number"
										Element:span
											&&
										Element:span
											typeof
										Element:span
											v2
										Element:span
											===
										Element:span
											"number"
										Element:span
											)
										Element:span
											{
										Element:span
											d1
										Element:span
											[
										Element:span
											key
										Element:span
											]
										Element:span
											+=
										Element:span
											v2
										Element:span
											;
										Element:span
											}
										Element:span
											else
										Element:span
											if
										Element:span
											(
										Element:span
											typeof
										Element:span
											v1
										Element:span
											===
										Element:span
											"object"
										Element:span
											&&
										Element:span
											typeof
										Element:span
											v2
										Element:span
											===
										Element:span
											"object"
										Element:span
											)
										Element:span
											{
										Element:span
											recursiveSumMerge
										Element:span
											(
										Element:span
											v1
										Element:span
											,
										Element:span
											v2
										Element:span
											);
										Element:span
											}
										Element:span
											else
										Element:span
											{
										Element:span
											throw
										Element:span
											"mismatched types for key: "
										Element:span
											+
										Element:span
											key
										Element:span
											;
										Element:span
											}
										Element:span
											}
										Element:span
											}
										Element:span
											}
										Element:span
											function
										Element:span
											merge
										Element:span
											(
										Element:span
											output1
										Element:span
											,
										Element:span
											output2
										Element:span
											)
										Element:span
											{
										Element:span
											for
										Element:span
											(
										Element:span
											var
										Element:span
											i
										Element:span
											=
										Element:span
											0
										Element:span
											;
										Element:span
											i
										Element:span
											&
										Element:span
											lt
										Element:span
											;
										Element:span
											output2
										Element:span
											.
										Element:span
											length
										Element:span
											;
										Element:span
											i
										Element:span
											++
										Element:span
											)
										Element:span
											{
										Element:span
											output1
										Element:span
											[
										Element:span
											i
										Element:span
											].
										Element:span
											count
										Element:span
											+=
										Element:span
											output2
										Element:span
											[
										Element:span
											i
										Element:span
											].
										Element:span
											count
										Element:span
											;
										Element:span
											recursiveSumMerge
										Element:span
											(
										Element:span
											output1
										Element:span
											[
										Element:span
											i
										Element:span
											].
										Element:span
											next
										Element:span
											,
										Element:span
											output2
										Element:span
											[
										Element:span
											i
										Element:span
											].
										Element:span
											next
										Element:span
											);
										Element:span
											}
										Element:span
											}
										Element:span
											</script>
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Make the JQL request
									Node:
									(type) c
									(layer)3
										Element:p
											At the end of the
										Element:code
											runQuery()
											function we created earlier (after the variable assignments and before the closing
										Element:code
											}
											), add the following code:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											var
										Element:span
											dates
										Element:span
											=
										Element:span
											datepicker
										Element:span
											.
										Element:span
											val
										Element:span
											();
										Element:span
											// last line of the runQuery() function - add code after this
										Element:span
											// clear previous result
										Element:span
											$
										Element:span
											(
										Element:span
											'#path svg'
										Element:span
											).
										Element:span
											hide
										Element:span
											();
										Element:span
											// grab the JQL script as a string
										Element:span
											var
										Element:span
											script
										Element:span
											=
										Element:span
											$
										Element:span
											(
										Element:span
											'#jql'
										Element:span
											).
										Element:span
											html
										Element:span
											();
										Element:span
											// trim all extra whitespace using jQuery trim
										Element:span
											script
										Element:span
											=
										Element:span
											$
										Element:span
											.
										Element:span
											trim
										Element:span
											(
										Element:span
											script
										Element:span
											);
										Element:span
											// grab the parameters from the inputs we defined
										Element:span
											var
										Element:span
											queryParams
										Element:span
											=
										Element:span
											{
										Element:span
											from_date
										Element:span
											:
										Element:span
											date_to_string
										Element:span
											(
										Element:span
											dates
										Element:span
											.
										Element:span
											from
										Element:span
											),
										Element:span
											to_date
										Element:span
											:
										Element:span
											date_to_string
										Element:span
											(
										Element:span
											dates
										Element:span
											.
										Element:span
											to
										Element:span
											),
										Element:span
											event_list
										Element:span
											:
										Element:span
											event_list_input
										Element:span
											,
										Element:span
											path_length
										Element:span
											:
										Element:span
											path_length_input
										Element:span
											}
										Element:span
											MP
										Element:span
											.
										Element:span
											api
										Element:span
											.
										Element:span
											jql
										Element:span
											(
										Element:span
											script
										Element:span
											,
										Element:span
											queryParams
										Element:span
											).
										Element:span
											done
										Element:span
											(
										Element:span
											function
										Element:span
											(
										Element:span
											results
										Element:span
											)
										Element:span
											{
										Element:span
											jqlResult
										Element:span
											=
										Element:span
											results
										Element:span
											[
										Element:span
											0
										Element:span
											];
										Element:span
											var
										Element:span
											funnel
										Element:span
											=
										Element:span
											generateFunnel
										Element:span
											(
										Element:span
											jqlResult
										Element:span
											);
										Element:span
											// add data to the chart we set up previously
										Element:span
											graph
										Element:span
											.
										Element:span
											MPChart
										Element:span
											(
										Element:span
											'setData'
										Element:span
											,
										Element:span
											funnel
										Element:span
											);
										Element:span
											});
									Node:
									(type) c
									(layer)3
										Element:p
											Let's make sure we actually run the query when appropriate. Add the following code right after the
										Element:code
											runQuery()
											function.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											}
										Element:span
											// end of runQuery() function - add code after this
										Element:span
											$
										Element:span
											(
										Element:span
											document
										Element:span
											).
										Element:span
											ready
										Element:span
											(
										Element:span
											function
										Element:span
											()
										Element:span
											{
										Element:span
											runQuery
										Element:span
											();
										Element:span
											});
										Element:span
											$
										Element:span
											(
										Element:span
											'#dates'
										Element:span
											).
										Element:span
											on
										Element:span
											(
										Element:span
											'change'
										Element:span
											,
										Element:span
											function
										Element:span
											()
										Element:span
											{
										Element:span
											runQuery
										Element:span
											();
										Element:span
											});
										Element:span
											$
										Element:span
											(
										Element:span
											'#run'
										Element:span
											).
										Element:span
											on
										Element:span
											(
										Element:span
											'click'
										Element:span
											,
										Element:span
											function
										Element:span
											()
										Element:span
											{
										Element:span
											runQuery
										Element:span
											();
										Element:span
											});
									Node:
									(type) c
									(layer)3
										Element:p
										Element:a
											Here
											is the current state of the code. Use this as a reference in case you get lost.
									Node:
									(type) c
									(layer)3
										Element:hr
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Add finishing touches
						Node:
						(type) c
						(layer)2
							Element:p
								Finally, we can add some styling to our report. Add all of the following just before the closing
							Element:code
								</head>
								tag, before the HTML body:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								<style>
							Element:span
								body
							Element:span
								{
							Element:span
								color
							Element:span
								:
							Element:span
								#5c617b
							Element:span
								;
							Element:span
								font-weight
							Element:span
								:
							Element:span
								normal
							Element:span
								;
							Element:span
								}
							Element:span
								.label
							Element:span
								{
							Element:span
								font-weight
							Element:span
								:
							Element:span
								bold
							Element:span
								;
							Element:span
								font-size
							Element:span
								:
							Element:span
								15px
							Element:span
								;
							Element:span
								margin-right
							Element:span
								:
							Element:span
								8px
							Element:span
								;
							Element:span
								display
							Element:span
								:
							Element:span
								inline
							Element:span
								-
							Element:span
								block
							Element:span
								;
							Element:span
								}
							Element:span
								.description
							Element:span
								{
							Element:span
								font-size
							Element:span
								:
							Element:span
								13px
							Element:span
								;
							Element:span
								padding
							Element:span
								:
							Element:span
								10px
							Element:span
								;
							Element:span
								}
							Element:span
								input
							Element:span
								{
							Element:span
								font-size
							Element:span
								:
							Element:span
								13px
							Element:span
								;
							Element:span
								color
							Element:span
								:
							Element:span
								#747d94
							Element:span
								;
							Element:span
								background-color
							Element:span
								:
							Element:span
								white
							Element:span
								;
							Element:span
								height
							Element:span
								:
							Element:span
								20px
							Element:span
								;
							Element:span
								width
							Element:span
								:
							Element:span
								300px
							Element:span
								;
							Element:span
								margin-right
							Element:span
								:
							Element:span
								15px
							Element:span
								;
							Element:span
								padding
							Element:span
								:
							Element:span
								5px
							Element:span
								;
							Element:span
								border
							Element:span
								:
							Element:span
								1px
							Element:span
								solid
							Element:span
								#bdc7d2
							Element:span
								;
							Element:span
								-
							Element:span
								webkit
							Element:span
								-
							Element:span
								border
							Element:span
								-
							Element:span
								radius
							Element:span
								:
							Element:span
								3px
							Element:span
								;
							Element:span
								-
							Element:span
								moz
							Element:span
								-
							Element:span
								border
							Element:span
								-
							Element:span
								radius
							Element:span
								:
							Element:span
								3px
							Element:span
								;
							Element:span
								border
							Element:span
								-
							Element:span
								radius
							Element:span
								:
							Element:span
								3px
							Element:span
								;
							Element:span
								position
							Element:span
								:
							Element:span
								relative
							Element:span
								;
							Element:span
								display
							Element:span
								:
							Element:span
								inline
							Element:span
								-
							Element:span
								block
							Element:span
								;
							Element:span
								}
							Element:span
								input
							Element:span
								:focus
							Element:span
								,
							Element:span
								input
							Element:span
								:hover
							Element:span
								{
							Element:span
								outline
							Element:span
								:
							Element:span
								0
							Element:span
								;
							Element:span
								border-color
							Element:span
								:
							Element:span
								#5ba7e1
							Element:span
								;
							Element:span
								}
							Element:span
								#path_length
							Element:span
								{
							Element:span
								width
							Element:span
								:
							Element:span
								40px
							Element:span
								;
							Element:span
								}
							Element:span
								#run
							Element:span
								{
							Element:span
								clear
							Element:span
								:
							Element:span
								both
							Element:span
								;
							Element:span
								cursor
							Element:span
								:
							Element:span
								pointer
							Element:span
								;
							Element:span
								color
							Element:span
								:
							Element:span
								#fff
							Element:span
								;
							Element:span
								text-shadow
							Element:span
								:
							Element:span
								0
							Element:span
								-1px
							Element:span
								0
							Element:span
								rgba
							Element:span
								(
							Element:span
								0
							Element:span
								,
							Element:span
								0
							Element:span
								,
							Element:span
								0
							Element:span
								,
							Element:span
								0
							Element:span
								.
							Element:span
								2
							Element:span
								);
							Element:span
								font-weight
							Element:span
								:
							Element:span
								bold
							Element:span
								;
							Element:span
								text-transform
							Element:span
								:
							Element:span
								uppercase
							Element:span
								;
							Element:span
								background-color
							Element:span
								:
							Element:span
								#61adf0
							Element:span
								;
							Element:span
								background-image
							Element:span
								:
							Element:span
								-
							Element:span
								webkit
							Element:span
								-
							Element:span
								linear
							Element:span
								-
							Element:span
								gradient
							Element:span
								(
							Element:span
								#6ab5f2
							Element:span
								,
							Element:span
								#53a0ee
							Element:span
								);
							Element:span
								background-image
							Element:span
								:
							Element:span
								-
							Element:span
								moz
							Element:span
								-
							Element:span
								linear
							Element:span
								-
							Element:span
								gradient
							Element:span
								(
							Element:span
								#6ab5f2
							Element:span
								,
							Element:span
								#53a0ee
							Element:span
								);
							Element:span
								background-image
							Element:span
								:
							Element:span
								linear
							Element:span
								-
							Element:span
								gradient
							Element:span
								(
							Element:span
								#6ab5f2
							Element:span
								,
							Element:span
								#53a0ee
							Element:span
								);
							Element:span
								box
							Element:span
								-
							Element:span
								shadow
							Element:span
								:
							Element:span
								inset
							Element:span
								0
							Element:span
								1px
							Element:span
								1px
							Element:span
								#77bdf4
							Element:span
								,
							Element:span
								0
							Element:span
								2px
							Element:span
								2px
							Element:span
								-1px
							Element:span
								rgba
							Element:span
								(
							Element:span
								0
							Element:span
								,
							Element:span
								0
							Element:span
								,
							Element:span
								0
							Element:span
								,
							Element:span
								0
							Element:span
								.
							Element:span
								2
							Element:span
								);
							Element:span
								padding
							Element:span
								:
							Element:span
								6px
							Element:span
								12px
							Element:span
								;
							Element:span
								border
							Element:span
								:
							Element:span
								1px
							Element:span
								solid
							Element:span
								#4d93d7
							Element:span
								;
							Element:span
								-
							Element:span
								webkit
							Element:span
								-
							Element:span
								border
							Element:span
								-
							Element:span
								radius
							Element:span
								:
							Element:span
								3px
							Element:span
								;
							Element:span
								-
							Element:span
								moz
							Element:span
								-
							Element:span
								border
							Element:span
								-
							Element:span
								radius
							Element:span
								:
							Element:span
								3px
							Element:span
								;
							Element:span
								border
							Element:span
								-
							Element:span
								radius
							Element:span
								:
							Element:span
								3px
							Element:span
								;
							Element:span
								vertical-align
							Element:span
								:
							Element:span
								1px
							Element:span
								;
							Element:span
								display
							Element:span
								:
							Element:span
								inline
							Element:span
								-
							Element:span
								block
							Element:span
								;
							Element:span
								}
							Element:span
								#dates
							Element:span
								{
							Element:span
								margin-right
							Element:span
								:
							Element:span
								20px
							Element:span
								;
							Element:span
								vertical-align
							Element:span
								:
							Element:span
								middle
							Element:span
								;
							Element:span
								display
							Element:span
								:
							Element:span
								inline
							Element:span
								-
							Element:span
								block
							Element:span
								;
							Element:span
								}
							Element:span
								.events
							Element:span
								{
							Element:span
								display
							Element:span
								:
							Element:span
								inline
							Element:span
								-
							Element:span
								block
							Element:span
								;
							Element:span
								}
							Element:span
								#report
							Element:span
								{
							Element:span
								margin
							Element:span
								:
							Element:span
								20px
							Element:span
								0
							Element:span
								55px
							Element:span
								;
							Element:span
								}
							Element:span
								.header
							Element:span
								{
							Element:span
								font-size
							Element:span
								:
							Element:span
								15px
							Element:span
								;
							Element:span
								font-weight
							Element:span
								:
							Element:span
								bold
							Element:span
								;
							Element:span
								text-shadow
							Element:span
								:
							Element:span
								0
							Element:span
								1px
							Element:span
								0
							Element:span
								rgba
							Element:span
								(
							Element:span
								255
							Element:span
								,
							Element:span
								255
							Element:span
								,
							Element:span
								255
							Element:span
								,
							Element:span
								0
							Element:span
								.
							Element:span
								7
							Element:span
								);
							Element:span
								padding
							Element:span
								:
							Element:span
								10px
							Element:span
								0
							Element:span
								;
							Element:span
								}
							Element:span
								#path
							Element:span
								{
							Element:span
								background-color
							Element:span
								:
							Element:span
								white
							Element:span
								;
							Element:span
								border
							Element:span
								:
							Element:span
								1px
							Element:span
								solid
							Element:span
								#bfcfda
							Element:span
								;
							Element:span
								-
							Element:span
								webkit
							Element:span
								-
							Element:span
								border
							Element:span
								-
							Element:span
								radius
							Element:span
								:
							Element:span
								5px
							Element:span
								;
							Element:span
								-
							Element:span
								moz
							Element:span
								-
							Element:span
								border
							Element:span
								-
							Element:span
								radius
							Element:span
								:
							Element:span
								5px
							Element:span
								;
							Element:span
								border
							Element:span
								-
							Element:span
								radius
							Element:span
								:
							Element:span
								5px
							Element:span
								;
							Element:span
								}
							Element:span
								#path
							Element:span
								svg
							Element:span
								{
							Element:span
								display
							Element:span
								:
							Element:span
								none
							Element:span
								;
							Element:span
								}
							Element:span
								</style>
						Node:
						(type) c
						(layer)2
							Element:p
								That's it!
							Element:a
								Here
								is the final result for reference. Commit your work, and take a look at what you've accomplished. Your report should match the one at the
							Element:a
								beginning
								of the tutorial. (Is your report blank? Check to make sure the event names you defined throughout your code - in lines
							Element:code
								100
								and
							Element:code
								428
								of the
							Element:a
								final result
								- actually exist in your project!)
						Node:
						(type) c
						(layer)2
							Element:p
								You have integrated a JQL query
								Document Sections
							Element:b
								and
								a D3 visualization into a Mixpanel Platform report, and have empowered anyone in your business to gain valuable insight into alternative user paths in funnels.
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:a
								Build the JQL query
							Element:li
							Element:a
								Set up the Platform UI
							Element:li
							Element:a
								Format the data
							Element:li
							Element:a
								Add the JQL Query
							Element:li
							Element:a
								Add finishing touches
