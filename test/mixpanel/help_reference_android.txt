Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					Android SDK - Quick Start Guide
					To use Mixpanel in your android app you need to add Mixpanel dependencies, update your application permissions, and initialize the Mixpanel library.
			Node:
			(type) c
			(layer)1
												Node:
												(type) c
												(layer)4
													Element:h4
														1. Add dependencies to
													Element:em
														app/build.gradle
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:span
														apply
													Element:span
														plugin:
													Element:span
														'com.android.application'
													Element:span
														dependencies
													Element:span
														{
													Element:span
														compile
													Element:span
														'com.android.support:appcompat-v7:22.1.1'
													Element:span
														compile
													Element:span
														"com.mixpanel.android:mixpanel-android:4.+"
													Element:span
														compile
													Element:span
														"com.google.android.gms:play-services:7.5.0+"
													Element:span
														}
													Element:span
														android
													Element:span
														{
													Element:span
														compileSdkVersion
													Element:span
														22
													Element:span
														buildToolsVersion
													Element:span
														"22.0.1"
													Element:span
														defaultConfig
													Element:span
														{
													Element:span
														applicationId
													Element:span
														"com.mixpanel.example.myapplication"
													Element:span
														minSdkVersion
													Element:span
														15
													Element:span
														targetSdkVersion
													Element:span
														22
													Element:span
														versionCode
													Element:span
														1
													Element:span
														versionName
													Element:span
														"1.0"
													Element:span
														}
													Element:span
														}
			Node:
			(type) c
			(layer)1
												Node:
												(type) c
												(layer)4
													Element:h4
														2. Add permissions to
													Element:em
														app/src/main/AndroidManifest.xml
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:span
														<?xml version="1.0" encoding="utf-8"?>
													Element:span
														<manifest
													Element:span
														xmlns:android=
													Element:span
														"http://schemas.android.com/apk/res/android"
													Element:span
														package=
													Element:span
														"com.mixpanel.example.myapplication"
													Element:span
														>
													Element:span
														<uses-permission
													Element:span
														android:name=
													Element:span
														"android.permission.INTERNET"
													Element:span
														/>
													Element:span
														<uses-permission
													Element:span
														android:name=
													Element:span
														"android.permission.ACCESS_NETWORK_STATE"
													Element:span
														/>
													Element:span
														<uses-permission
													Element:span
														android:name=
													Element:span
														"android.permission.BLUETOOTH"
													Element:span
														/>
													Element:span
														<application
													Element:span
														android:allowBackup=
													Element:span
														"true"
													Element:span
														android:icon=
													Element:span
														"@mipmap/ic_launcher"
													Element:span
														android:label=
													Element:span
														"@string/app_name"
													Element:span
														android:theme=
													Element:span
														"@style/AppTheme"
													Element:span
														>
													Element:span
														<activity
													Element:span
														android:name=
													Element:span
														".MainActivity"
													Element:span
														android:label=
													Element:span
														"@string/app_name"
													Element:span
														>
													Element:span
														<intent-filter>
													Element:span
														<action
													Element:span
														android:name=
													Element:span
														"android.intent.action.MAIN"
													Element:span
														/>
													Element:span
														<category
													Element:span
														android:name=
													Element:span
														"android.intent.category.LAUNCHER"
													Element:span
														/>
													Element:span
														</intent-filter>
													Element:span
														</activity>
													Element:span
														</application>
													Element:span
														</manifest>
			Node:
			(type) c
			(layer)1
												Node:
												(type) c
												(layer)4
													Element:h4
														3. Add Mixpanel to your main activity
													Element:em
														app/src/main/java/com/mixpanel/example/myapplication/MainActivity.java
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:span
														package
													Element:span
														com
													Element:span
														.
													Element:span
														mixpanel
													Element:span
														.
													Element:span
														example
													Element:span
														.
													Element:span
														myapplication
													Element:span
														;
													Element:span
														import
													Element:span
														android.os.Bundle
													Element:span
														;
													Element:span
														import
													Element:span
														android.support.v7.app.ActionBarActivity
													Element:span
														;
													Element:span
														import
													Element:span
														com.mixpanel.android.mpmetrics.MixpanelAPI
													Element:span
														;
													Element:span
														public
													Element:span
														class
													Element:span
														MainActivity
													Element:span
														extends
													Element:span
														ActionBarActivity
													Element:span
														{
													Element:span
														@Override
													Element:span
														protected
													Element:span
														void
													Element:span
														onCreate
													Element:span
														(
													Element:span
														Bundle
													Element:span
														savedInstanceState
													Element:span
														)
													Element:span
														{
													Element:span
														super
													Element:span
														.
													Element:span
														onCreate
													Element:span
														(
													Element:span
														savedInstanceState
													Element:span
														);
													Element:span
														setContentView
													Element:span
														(
													Element:span
														R
													Element:span
														.
													Element:span
														layout
													Element:span
														.
													Element:span
														activity_main
													Element:span
														);
													Element:span
														String
													Element:span
														projectToken
													Element:span
														=
													Element:span
														YOUR_PROJECT_TOKEN
													Element:span
														;
													Element:span
														// e.g.: "1ef7e30d2a58d27f4b90c42e31d6d7ad"
													Element:span
													Element:span
														MixpanelAPI
													Element:span
														mixpanel
													Element:span
														=
													Element:span
														MixpanelAPI
													Element:span
														.
													Element:span
														getInstance
													Element:span
														(
													Element:span
														this
													Element:span
														,
													Element:span
														projectToken
													Element:span
														);
													Element:span
														}
													Element:span
														}
												Node:
												(type) c
												(layer)4
													Element:p
														Make sure you've replaced "YOUR_PROJECT_TOKEN" with your project token, which you can find by clicking your name in the upper righthand corner of your Mixpanel project and selecting Settings from the dropdown. After running your app, you should see the "MainActivity - onCreate called" event show up in your Mixpanel reports.
			Node:
			(type) c
			(layer)1
												Node:
												(type) c
												(layer)4
													Element:h4
														4. Add code to track your first event
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:span
														package
													Element:span
														com
													Element:span
														.
													Element:span
														mixpanel
													Element:span
														.
													Element:span
														example
													Element:span
														.
													Element:span
														myapplication
													Element:span
														;
													Element:span
														import
													Element:span
														android.os.Bundle
													Element:span
														;
													Element:span
														import
													Element:span
														android.support.v7.app.ActionBarActivity
													Element:span
														;
													Element:span
														import
													Element:span
														android.util.Log
													Element:span
														;
													Element:span
														import
													Element:span
														com.mixpanel.android.mpmetrics.MixpanelAPI
													Element:span
														;
													Element:span
														import
													Element:span
														org.json.JSONException
													Element:span
														;
													Element:span
														import
													Element:span
														org.json.JSONObject
													Element:span
														;
													Element:span
														public
													Element:span
														class
													Element:span
														MainActivity
													Element:span
														extends
													Element:span
														ActionBarActivity
													Element:span
														{
													Element:span
														@Override
													Element:span
														protected
													Element:span
														void
													Element:span
														onCreate
													Element:span
														(
													Element:span
														Bundle
													Element:span
														savedInstanceState
													Element:span
														)
													Element:span
														{
													Element:span
														super
													Element:span
														.
													Element:span
														onCreate
													Element:span
														(
													Element:span
														savedInstanceState
													Element:span
														);
													Element:span
														setContentView
													Element:span
														(
													Element:span
														R
													Element:span
														.
													Element:span
														layout
													Element:span
														.
													Element:span
														activity_main
													Element:span
														);
													Element:span
														String
													Element:span
														projectToken
													Element:span
														=
													Element:span
														YOUR_PROJECT_TOKEN
													Element:span
														;
													Element:span
														// e.g.: "1ef7e30d2a58d27f4b90c42e31d6d7ad"
													Element:span
														MixpanelAPI
													Element:span
														mixpanel
													Element:span
														=
													Element:span
														MixpanelAPI
													Element:span
														.
													Element:span
														getInstance
													Element:span
														(
													Element:span
														this
													Element:span
														,
													Element:span
														projectToken
													Element:span
														);
													Element:span
														try
													Element:span
														{
													Element:span
														JSONObject
													Element:span
														props
													Element:span
														=
													Element:span
														new
													Element:span
														JSONObject
													Element:span
														();
													Element:span
														props
													Element:span
														.
													Element:span
														put
													Element:span
														(
													Element:span
														"Gender"
													Element:span
														,
													Element:span
														"Female"
													Element:span
														);
													Element:span
														props
													Element:span
														.
													Element:span
														put
													Element:span
														(
													Element:span
														"Logged in"
													Element:span
														,
													Element:span
														false
													Element:span
														);
													Element:span
														mixpanel
													Element:span
														.
													Element:span
														track
													Element:span
														(
													Element:span
														"MainActivity - onCreate called"
													Element:span
														,
													Element:span
														props
													Element:span
														);
													Element:span
														}
													Element:span
														catch
													Element:span
														(
													Element:span
														JSONException
													Element:span
														e
													Element:span
														)
													Element:span
														{
													Element:span
														Log
													Element:span
														.
													Element:span
														e
													Element:span
														(
													Element:span
														"MYAPP"
													Element:span
														,
													Element:span
														"Unable to add properties to JSONObject"
													Element:span
														,
													Element:span
														e
													Element:span
														);
													Element:span
														}
													Element:span
														}
													Element:span
														}
			Node:
			(type) c
			(layer)1
												Node:
												(type) c
												(layer)4
													Element:h4
														5. That's it! Mixpanel is now integrated with your app.
												Node:
												(type) c
												(layer)4
													Element:p
														Make sure you that have replaced "YOUR_PROJECT_TOKEN" with the project token you want to send data to and run your application. You should see the "MainActivity - onCreate called" event show up on your Mixpanel reports just seconds after your app runs. You're now ready to take advantage of everything Mixpanel has to offer!
												Node:
												(type) c
												(layer)4
													Element:p
														In order to ensure our library doesn't have a large impact on performance or battery life, events aren't sent to Mixpanel immediately. Instead we queue them on the device and then send them in batches every
													Element:strong
														60 seconds
														by default.
												Node:
												(type) c
												(layer)4
									Node:
									(type) c
									(layer)3
										Element:h3
											Next steps
									Node:
									(type) c
									(layer)3
										Element:p
											Now that you've integrated Mixpanel, there are a number of powerful ways to track and engage with your users.
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:strong
											To get the most value out of Mixpanel, you should identify the actions that are important to you and track them. To track events, you can
										Element:a
											Track important actions in your app
										Element:a
											add code to your app
											or use our codeless event tracking tool.
										Element:li
										Element:strong
											Once you have the Mixpanel SDK initialized you can build and run an A/B test without writing any additional code. This is a great way to quickly test and measure changes to your application.
										Element:a
											Setup and run your first A/B test
										Element:li
										Element:strong
											Mixpanel allows you to send your users targeted push notifications and in-app messages. To get started, you need to send
										Element:a
											Send your users a push notification or message
										Element:a
											people profiles
											to Mixpanel. This will allow you to send messages to particular users within your app.
			Node:
			(type) h1
			(layer)1
				Element:h1
					Full Android SDK Documentation
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Installing the library - Android Studio / Gradle
						Node:
						(type) c
						(layer)2
							Element:h3
								Step 1 - Add the mixpanel-android library as a gradle dependency:
						Node:
						(type) c
						(layer)2
							Element:p
								We publish builds of our library to the Maven central repository as an
							Element:em
								.aar
								file. This file contains all of the classes, resources, and configurations that you'll need to use the library. To install the library inside Android Studio, you can simply declare it as dependency in your
							Element:em
								build.gradle
								file.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								dependencies
							Element:span
								{
							Element:span
								compile
							Element:span
								'com.mixpanel.android:mixpanel-android:4.+'
							Element:span
								}
						Node:
						(type) c
						(layer)2
							Element:p
								The Android library also depends on Google Play Services to provide Google Cloud Messaging for push notifications, so you'll need to add a dependency to your build if you don't have one already. To do this, add the following to your
							Element:em
								build.gradle
								file.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								dependencies
							Element:span
								{
							Element:span
								compile
							Element:span
								'com.google.android.gms:play-services-base:7.5.0+'
							Element:span
								compile
							Element:span
								'com.google.android.gms:play-services-gcm:7.5.0+'
							Element:span
								}
						Node:
						(type) c
						(layer)2
							Element:p
								You can use any version of Google Play Services greater than 7.5.0
						Node:
						(type) c
						(layer)2
							Element:p
								Once you've updated your
							Element:em
								build.gradle
								file, you can force Android Studio to sync with your new configuration by clicking the "Sync Project with Gradle Files" icon at the top of the window.
						Node:
						(type) c
						(layer)2
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
								This should download the aar dependency at which point you'll have access to the Mixpanel library API calls. If it cannot find the dependency, you should make sure you've specified mavenCentral() as a repository in your
							Element:em
								build.gradle
						Node:
						(type) c
						(layer)2
							Element:h3
								Step 2 - Add permissions to your AndroidManifest.xml:
						Node:
						(type) c
						(layer)2
							Element:p
								In order for the library to work you'll need to ensure that you're requesting the following permissions in your AndroidManifest.xml:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								<!--
							Element:span
								This permission is required to allow the application to send
							Element:span
								events and properties to Mixpanel.
							Element:span
								-->
							Element:span
								<uses-permission
							Element:span
								android:name=
							Element:span
								"android.permission.INTERNET"
							Element:span
								/>
							Element:span
								<!--
							Element:span
								This permission is optional but recommended so we can be smart
							Element:span
								about when to send data.
							Element:span
								-->
							Element:span
								<uses-permission
							Element:span
								android:name=
							Element:span
								"android.permission.ACCESS_NETWORK_STATE"
							Element:span
								/>
							Element:span
								<!--
							Element:span
								This permission is optional but recommended so events will
							Element:span
								contain information about bluetooth state
							Element:span
								-->
							Element:span
								<uses-permission
							Element:span
								android:name=
							Element:span
								"android.permission.BLUETOOTH"
							Element:span
								/>
						Node:
						(type) c
						(layer)2
							Element:p
								At this point, you're ready to use the Mixpanel Android library inside Android Studio!
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Initializing the library
						Node:
						(type) c
						(layer)2
							Element:p
								Once you've set up your build system or IDE to use the Mixpanel library, you can initialize it in your code by calling
							Element:a
								MixpanelAPI.getInstance
								with your application context and your Mixpanel project token. You can find your token by clicking your name in the upper righthand corner of your Mixpanel project and selecting Settings from the dropdown.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								public
							Element:span
								static
							Element:span
								final
							Element:span
								String
							Element:span
								MIXPANEL_TOKEN
							Element:span
								=
							Element:span
								"YOUR_TOKEN"
							Element:span
								;
							Element:span
								// Initialize the library with your
							Element:span
								// Mixpanel project token, MIXPANEL_TOKEN, and a reference
							Element:span
								// to your application context.
							Element:span
								MixpanelAPI
							Element:span
								mixpanel
							Element:span
								=
							Element:span
								MixpanelAPI
							Element:span
								.
							Element:span
								getInstance
							Element:span
								(
							Element:span
								context
							Element:span
								,
							Element:span
								MIXPANEL_TOKEN
							Element:span
								);
						Node:
						(type) c
						(layer)2
							Element:h3
								Flushing events
						Node:
						(type) c
						(layer)2
							Element:p
								To preserve battery life and customer bandwidth, the Mixpanel library doesn't send the events you record immediately. Instead, it sends batches to the Mixpanel servers periodically while your application is running. This means when your application shuts down, you need to inform the library to send whatever events are still unsent. You can do this by calling
							Element:a
								MixpanelAPI.flush
								in the
							Element:code
								onDestroy
								method of your main application activity.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								@Override
							Element:span
								protected
							Element:span
								void
							Element:span
								onDestroy
							Element:span
								()
							Element:span
								{
							Element:span
								mMixpanel
							Element:span
								.
							Element:span
								flush
							Element:span
								();
							Element:span
								super
							Element:span
								.
							Element:span
								onDestroy
							Element:span
								();
							Element:span
								}
						Node:
						(type) c
						(layer)2
							Element:p
								When you call
							Element:a
								flush
								, the library attempts to send all of it's remaining messages. If you don't call flush, the messages will be sent the next time the application is opened.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Sending your first event
						Node:
						(type) c
						(layer)2
							Element:p
								Once you've initialized the library, you can track an event using
							Element:a
								MixpanelAPI.track
								with the event name and properties.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								MixpanelAPI
							Element:span
								mixpanel
							Element:span
								=
							Element:span
								MixpanelAPI
							Element:span
								.
							Element:span
								getInstance
							Element:span
								(
							Element:span
								context
							Element:span
								,
							Element:span
								MIXPANEL_TOKEN
							Element:span
								);
							Element:span
								JSONObject
							Element:span
								props
							Element:span
								=
							Element:span
								new
							Element:span
								JSONObject
							Element:span
								();
							Element:span
								props
							Element:span
								.
							Element:span
								put
							Element:span
								(
							Element:span
								"Gender"
							Element:span
								,
							Element:span
								"Female"
							Element:span
								);
							Element:span
								props
							Element:span
								.
							Element:span
								put
							Element:span
								(
							Element:span
								"Plan"
							Element:span
								,
							Element:span
								"Premium"
							Element:span
								);
							Element:span
								mixpanel
							Element:span
								.
							Element:span
								track
							Element:span
								(
							Element:span
								"Plan Selected"
							Element:span
								,
							Element:span
								props
							Element:span
								);
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Event timing
						Node:
						(type) c
						(layer)2
							Element:p
								You can track the time it took for an action to occur, such as an image upload or a comment post, using
							Element:a
								timeEvent
								. This will mark the "start" of your action, which will be timed until you finish with a track call. The time duration is then recorded in the "Duration" property.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								MixpanelAPI
							Element:span
								mixpanel
							Element:span
								=
							Element:span
								MixpanelAPI
							Element:span
								.
							Element:span
								getInstance
							Element:span
								(
							Element:span
								context
							Element:span
								,
							Element:span
								MIXPANEL_TOKEN
							Element:span
								);
							Element:span
								// start the timer for the event "Image Upload"
							Element:span
								mixpanel
							Element:span
								.
							Element:span
								timeEvent
							Element:span
								(
							Element:span
								"Image Upload"
							Element:span
								);
							Element:span
								// stop the timer if the imageUpload() method returns true
							Element:span
								if
							Element:span
								(
							Element:span
								imageUpload
							Element:span
								()){
							Element:span
								mixpanel
							Element:span
								.
							Element:span
								track
							Element:span
								(
							Element:span
								"Image Upload"
							Element:span
								);
							Element:span
								}
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Super properties
						Node:
						(type) c
						(layer)2
							Element:p
								It's very common to have certain properties that you want to include with each event you send. Generally, these are things you know about the
							Element:strong
								user
								rather than about a specific event - for example, the user's age, gender, source, or initial referrer.
						Node:
						(type) c
						(layer)2
							Element:p
								To make things easier, you can register these properties as
							Element:strong
								super properties
								. If you tell us just once that these properties are important, we will automatically include them with all events sent. Super properties are saved to device storage, and will persist across invocations of your app. Mixpanel already stores some information as super properties by default; see a full list of Mixpanel default properties
							Element:a
								here
								.
						Node:
						(type) c
						(layer)2
							Element:p
								To set super properties, call
							Element:a
								MixpanelAPI.registerSuperProperties
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								MixpanelAPI
							Element:span
								mixpanel
							Element:span
								=
							Element:span
								MixpanelAPI
							Element:span
								.
							Element:span
								getInstance
							Element:span
								(
							Element:span
								context
							Element:span
								,
							Element:span
								MIXPANEL_TOKEN
							Element:span
								);
							Element:span
								// Send a "User Type: Paid" property will be sent
							Element:span
								// with all future track calls.
							Element:span
								JSONObject
							Element:span
								props
							Element:span
								=
							Element:span
								new
							Element:span
								JSONObject
							Element:span
								();
							Element:span
								props
							Element:span
								.
							Element:span
								put
							Element:span
								(
							Element:span
								"User Type"
							Element:span
								,
							Element:span
								"Paid"
							Element:span
								);
							Element:span
								mixpanel
							Element:span
								.
							Element:span
								registerSuperProperties
							Element:span
								(
							Element:span
								props
							Element:span
								);
						Node:
						(type) c
						(layer)2
							Element:p
								The next time you track an event, the super properties you just set will be included as properties.
						Node:
						(type) c
						(layer)2
							Element:p
								Super properties are saved to device storage, and will persist between executions of your app.
						Node:
						(type) c
						(layer)2
							Element:h3
								Setting super properties once and only once
						Node:
						(type) c
						(layer)2
							Element:p
								If you want to store a super property only once (for example, a date of first login), you can use
							Element:a
								MixpanelAPI.registerSuperPropertiesOnce
								.
							Element:a
								registerSuperPropertiesOnce
								behaves like
							Element:a
								registerSuperProperties
								and has the same interface, but it doesn't override super properties you've already saved.
						Node:
						(type) c
						(layer)2
							Element:p
								This means it's safe to call
							Element:a
								registerSuperPropertiesOnce
								with the same property multiple times, and it will only set properties if the super property doesn't exist.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Managing user identity
						Node:
						(type) c
						(layer)2
							Element:p
								The Mixpanel library will assign a default unique identifier (we call it "distinct_id") to each install of your application. This distinct_id is saved in persistent device storage, and will be the same across executions of your app.
						Node:
						(type) c
						(layer)2
							Element:p
								If you choose, you can assign your own user IDs. This is particularly useful if a user is accessing your app on multiple platforms (both web and mobile, for example). To assign your own distinct_ids, you can use
							Element:a
								MixpanelAPI.identify
								and
							Element:a
								MixpanelAPI.getPeople().identify
								. We strongly recommend using the same distinct id for both calls.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								MixpanelAPI
							Element:span
								mixpanel
							Element:span
								=
							Element:span
								MixpanelAPI
							Element:span
								.
							Element:span
								getInstance
							Element:span
								(
							Element:span
								context
							Element:span
								,
							Element:span
								MIXPANEL_TOKEN
							Element:span
								);
							Element:span
								// Ensure all future events sent from
							Element:span
								// the device will have the distinct_id 13793
							Element:span
								mixpanel
							Element:span
								.
							Element:span
								identify
							Element:span
								(
							Element:span
								"13793"
							Element:span
								);
							Element:span
								// Ensure all future people properties sent from
							Element:span
								// the device will have the distinct_id 13793
							Element:span
								mixpanel
							Element:span
								.
							Element:span
								getPeople
							Element:span
								().
							Element:span
								identify
							Element:span
								(
							Element:span
								"13793"
							Element:span
								);
						Node:
						(type) c
						(layer)2
							Element:p
								In general, if you use
							Element:a
								identify
								, you should call it as soon as the user logs in to your application. This will track all of their authenticated application usage to the correct user ID.
						Node:
						(type) c
						(layer)2
							Element:p
								Calling
							Element:a
								identify
								with a new ID will
							Element:strong
								change
								the distinctID stored on the device. Updates to user profiles are queued on the device until getPeople().identify is called.
						Node:
						(type) c
						(layer)2
							Element:h3
								Combining anonymous and identifiable user data
						Node:
						(type) c
						(layer)2
							Element:p
								It's important to send the same distinct_id with each event that an individual user triggers. Events recorded with different distinct_ids will be treated in Mixpanel as if they were performed by different users.
						Node:
						(type) c
						(layer)2
							Element:p
								There are times when it can be convenient to start referring to a user by a different identifier in your implementation. The most common case is after registration, when a user switches from being an anonymous user (with an anonymous distinct_id) to an authenticated user with an (authenticated id). In this case, you can create an
							Element:a
								alias
								for the user to keep the distinct_id consistent. An alias is a string stored in a Mixpanel lookup table that is associated with an anonymous distinct_id. Once written, aliases are not editable. Any data sent to Mixpanel with an alias as the distinct_id will be remapped and written to disk using the alias's corresponding anonymous distinct_id. This allows you to start identifying a user by an authenticated id without changing the distinct_id that is ultimately written in Mixpanel.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								// This makes the current ID (by default an auto-generated GUID)
							Element:span
								// and '13793' interchangeable distinct ids (but not retroactively).
							Element:span
								mixpanel
							Element:span
								.
							Element:span
								alias
							Element:span
								(
							Element:span
								"13793"
							Element:span
								,
							Element:span
								null
							Element:span
								);
							Element:span
								// To create a user profile, you must call getPeople().identify
							Element:span
								mixpanel
							Element:span
								.
							Element:span
								getPeople
							Element:span
								().
							Element:span
								identify
							Element:span
								(
							Element:span
								mixpanel
							Element:span
								.
							Element:span
								getDistinctId
							Element:span
								());
						Node:
						(type) c
						(layer)2
							Element:p
								The recommended usage pattern is to call both
								If you use
							Element:a
								alias
								and
							Element:a
								identify
								when the user signs up (as shown in the example above), and only
							Element:a
								identify
								(with the aliased user ID) on future log ins. This will keep your signup funnels working correctly.
						Node:
						(type) c
						(layer)2
							Element:a
								alias
								we recommend only calling it once during the lifetime of the user.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Storing user profiles
						Node:
						(type) c
						(layer)2
							Element:p
								In addition to events, you can store user profiles in Mixpanel's
							Element:a
								People Analytics
								product. Profiles are persistent sets of properties that describe a user - things like name, email address, and signup date. You can use profiles to explore and segment users by who they are, rather than what they did. You can also use profiles to send notifications, such as emails, SMS, or push notifications.
						Node:
						(type) c
						(layer)2
							Element:p
								Before you send profile updates, you
							Element:strong
								must
								call
							Element:a
								getPeople().identify
								. The library uses a separate ID for People records, and you must set this value to send updates.
						Node:
						(type) c
						(layer)2
							Element:h3
								Setting profile properties
						Node:
						(type) c
						(layer)2
							Element:p
								You can set properties on a user profile with
							Element:a
								MixpanelAPI.getPeople().set
								.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								MixpanelAPI
							Element:span
								mixpanel
							Element:span
								=
							Element:span
								MixpanelAPI
							Element:span
								.
							Element:span
								getInstance
							Element:span
								(
							Element:span
								context
							Element:span
								,
							Element:span
								MIXPANEL_TOKEN
							Element:span
								);
							Element:span
								// identify must be called before
							Element:span
								// people properties can be set
							Element:span
								mixpanel
							Element:span
								.
							Element:span
								getPeople
							Element:span
								().
							Element:span
								identify
							Element:span
								(
							Element:span
								"13793"
							Element:span
								);
							Element:span
								// Sets user 13793's "Plan" attribute to "Premium"
							Element:span
								mixpanel
							Element:span
								.
							Element:span
								getPeople
							Element:span
								().
							Element:span
								set
							Element:span
								(
							Element:span
								"Plan"
							Element:span
								,
							Element:span
								"Premium"
							Element:span
								);
						Node:
						(type) c
						(layer)2
							Element:p
								This will set a "Plan" property, with a value "Premium", on user 13793's profile. If there isn't a profile with distinct_id 13793 in Mixpanel already, a new profile will be created. If user 13793 already has a property named "Plan" in their profile, the old value will be overwritten with "Premium".
						Node:
						(type) c
						(layer)2
							Element:h3
								Incrementing numeric properties
						Node:
						(type) c
						(layer)2
							Element:p
								You can use
							Element:a
								MixpanelAPI.getPeople().increment
								to change the current value of numeric properties. This is useful when you want to keep a running tally of things, such as games played, messages sent, or points earned.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								// Add 500 to the current value of
							Element:span
								// "points earned" in Mixpanel
							Element:span
								mixpanel
							Element:span
								.
							Element:span
								getPeople
							Element:span
								().
							Element:span
								increment
							Element:span
								(
							Element:span
								"points earned"
							Element:span
								,
							Element:span
								500
							Element:span
								);
							Element:span
								// Pass a Map to increment multiple properties
							Element:span
								Map
							Element:span
								<
							Element:span
								String
							Element:span
								,
							Element:span
								Integer
							Element:span
								>
							Element:span
								properties
							Element:span
								=
							Element:span
								new
							Element:span
								HashMap
							Element:span
								<
							Element:span
								String
							Element:span
								,
							Element:span
								Integer
							Element:span
								>();
							Element:span
								properties
							Element:span
								.
							Element:span
								put
							Element:span
								(
							Element:span
								"dollars spent"
							Element:span
								,
							Element:span
								17
							Element:span
								);
							Element:span
								// Subtract by passing a negative value
							Element:span
								properties
							Element:span
								.
							Element:span
								put
							Element:span
								(
							Element:span
								"credits remaining"
							Element:span
								,
							Element:span
								-
							Element:span
								34
							Element:span
								);
							Element:span
								mixpanel
							Element:span
								.
							Element:span
								getPeople
							Element:span
								().
							Element:span
								increment
							Element:span
								(
							Element:span
								properties
							Element:span
								);
						Node:
						(type) c
						(layer)2
							Element:h3
								Other types of profile updates
						Node:
						(type) c
						(layer)2
							Element:p
								There are a few other types of profile updates. They can be accessed through the
							Element:a
								MixpanelPeople class
								, which is accessible via
							Element:a
								MixpanelAPI.getPeople()
								.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Tracking revenue
						Node:
						(type) c
						(layer)2
							Element:p
								Mixpanel makes it easy to analyze the revenue you make from individual customers. By associating charges with People Analytics profiles, you can compare revenue across different customer segments and calculate customer lifetime value.
						Node:
						(type) c
						(layer)2
							Element:p
								You can track a single transaction with
							Element:a
								MixpanelAPI.getPeople().trackCharge
								. This call will add transactions to the individual user profile, which will also be reflected in the
							Element:a
								Mixpanel Revenue report
								.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								MixpanelAPI
							Element:span
								mixpanel
							Element:span
								=
							Element:span
								MixpanelAPI
							Element:span
								.
							Element:span
								getInstance
							Element:span
								(
							Element:span
								context
							Element:span
								,
							Element:span
								MIXPANEL_TOKEN
							Element:span
								);
							Element:span
								// Make getPeople() identify has been
							Element:span
								// called before making revenue updates
							Element:span
								mixpanel
							Element:span
								.
							Element:span
								getPeople
							Element:span
								().
							Element:span
								identify
							Element:span
								(
							Element:span
								"13793"
							Element:span
								);
							Element:span
								// Tracks $100 in revenue for user 13793
							Element:span
								mixpanel
							Element:span
								.
							Element:span
								getPeople
							Element:span
								().
							Element:span
								trackCharge
							Element:span
								(
							Element:span
								100
							Element:span
								,
							Element:span
								null
							Element:span
								);
							Element:span
								// Refund this user 50 dollars
							Element:span
								mixpanel
							Element:span
								.
							Element:span
								getPeople
							Element:span
								().
							Element:span
								trackCharge
							Element:span
								(-
							Element:span
								50
							Element:span
								,
							Element:span
								null
							Element:span
								);
							Element:span
								// Tracks $25 in revenue for user 13793
							Element:span
								// on the 2nd of january
							Element:span
								JSONObject
							Element:span
								properties
							Element:span
								=
							Element:span
								new
							Element:span
								JSONObject
							Element:span
								()
							Element:span
								properties
							Element:span
								.
							Element:span
								put
							Element:span
								(
							Element:span
								"$time"
							Element:span
								,
							Element:span
								"2012-01-02T00:00:00"
							Element:span
								);
							Element:span
								mixpanel
							Element:span
								.
							Element:span
								getPeople
							Element:span
								().
							Element:span
								trackCharge
							Element:span
								(
							Element:span
								25
							Element:span
								,
							Element:span
								properties
							Element:span
								);
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Handling push notifications
						Node:
						(type) c
						(layer)2
							Element:p
								The Mixpanel Android library will handle registering for and displaying Google Cloud Messaging notifications sent from the Mixpanel web application.
						Node:
						(type) c
						(layer)2
							Element:p
								To enable push handling in your app, you'll need to add the following permissions to the AndroidManifest.xml associated with your app.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								<permission
							Element:span
								android:name=
							Element:span
								"YOUR_PACKAGE_NAME.permission.C2D_MESSAGE"
							Element:span
								android:protectionLevel=
							Element:span
								"signature"
							Element:span
								/>
							Element:span
								<uses-permission
							Element:span
								android:name=
							Element:span
								"YOUR_PACKAGE_NAME.permission.C2D_MESSAGE"
							Element:span
								/>
							Element:span
								<uses-permission
							Element:span
								android:name=
							Element:span
								"android.permission.INTERNET"
							Element:span
								/>
							Element:span
								<uses-permission
							Element:span
								android:name=
							Element:span
								"android.permission.GET_ACCOUNTS"
							Element:span
								/>
							Element:span
								<uses-permission
							Element:span
								android:name=
							Element:span
								"com.google.android.c2dm.permission.RECEIVE"
							Element:span
								/>
							Element:span
								<uses-permission
							Element:span
								android:name=
							Element:span
								"android.permission.WAKE_LOCK"
							Element:span
								/>
						Node:
						(type) c
						(layer)2
							Element:p
								Be sure to change
							Element:strong
								YOUR_PACKAGE_NAME
								above to the name of your application package. If your application package is com.example.app, then you should define and use permission
							Element:strong
								com.example.app.permission.C2D_MESSAGE
								, like this:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								<permission
							Element:span
								android:name=
							Element:span
								"com.example.app.permission.C2D_MESSAGE"
							Element:span
								android:protectionLevel=
							Element:span
								"signature"
							Element:span
								/>
							Element:span
								<uses-permission
							Element:span
								android:name=
							Element:span
								"com.example.app.permission.C2D_MESSAGE"
							Element:span
								/>
						Node:
						(type) c
						(layer)2
							Element:p
								You'll also need to set up the Mixpanel library's
							Element:code
								com.mixpanel.android.mpmetrics.GCMReceiver
								class as a receiver for GCM intents:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								<receiver
							Element:span
								android:name=
							Element:span
								"com.mixpanel.android.mpmetrics.GCMReceiver"
							Element:span
								android:permission=
							Element:span
								"com.google.android.c2dm.permission.SEND"
							Element:span
								>
							Element:span
								<intent-filter>
							Element:span
								<action
							Element:span
								android:name=
							Element:span
								"com.google.android.c2dm.intent.RECEIVE"
							Element:span
								/>
							Element:span
								<action
							Element:span
								android:name=
							Element:span
								"com.google.android.c2dm.intent.REGISTRATION"
							Element:span
								/>
							Element:span
								<category
							Element:span
								android:name=
							Element:span
								"YOUR_PACKAGE_NAME"
							Element:span
								/>
							Element:span
								</intent-filter>
							Element:span
								</receiver>
						Node:
						(type) c
						(layer)2
							Element:p
								Be sure to change
							Element:strong
								YOUR_PACKAGE_NAME
								above to the name of your application package. If your application package is com.example.app, then you should declare the intent filter in category
							Element:strong
								com.example.app
								, like this:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								<category
							Element:span
								android:name=
							Element:span
								"com.example.app"
							Element:span
								/>
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Initializing push handling
						Node:
						(type) c
						(layer)2
							Element:p
								Once you've configured your app correctly, push handling with the Mixpanel library is almost completely automatic. You can initialize push handling in your app by callng
							Element:a
								MixpanelAPI.getPeople().initPushHandling
								with your 12 digit project number of your Google API project as an argument.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								MixpanelAPI
							Element:span
								mixpanel
							Element:span
								=
							Element:span
								MixpanelAPI
							Element:span
								.
							Element:span
								getInstance
							Element:span
								(
							Element:span
								context
							Element:span
								,
							Element:span
								MIXPANEL_TOKEN
							Element:span
								);
							Element:span
								// Always identify before initializing push notifications
							Element:span
								mixpanel
							Element:span
								.
							Element:span
								getPeople
							Element:span
								().
							Element:span
								identify
							Element:span
								(
							Element:span
								"13793"
							Element:span
								);
							Element:span
								// Sets up GCM registration and handling of GCM messages
							Element:span
								// for Google API project number 717871474771
							Element:span
								mixpanel
							Element:span
								.
							Element:span
								getPeople
							Element:span
								().
							Element:span
								initPushHandling
							Element:span
								(
							Element:span
								"717871474771"
							Element:span
								);
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Push notifications guide
						Node:
						(type) c
						(layer)2
							Element:p
								Mixpanel provides
							Element:a
								a quick-start guide for setting up push for your Android app
								that covers setting up your Google API project, locating your project number, uploading your Google API Project key to Mixpanel, and configuring your application to register for and receive push notifications.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								In-app notifications
						Node:
						(type) c
						(layer)2
							Element:p
								Mixpanel provides a
							Element:a
								quick start guide
								for Android in-app notifications to help you get integrated.
						Node:
						(type) c
						(layer)2
							Element:p
								Make sure that you have already:
						Node:
						(type) c
						(layer)2
							Element:ol
							Element:li
								Included the latest version of the
							Element:a
								Mixpanel Android library
								in your app
							Element:li
								Made sure you are
							Element:a
								identifying your users
								in the app.
							Element:li
								Created an in-app notification on the Notifications tab of the Mixpanel website.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								A/B testing
						Node:
						(type) c
						(layer)2
							Element:h3
								Prerequisites
						Node:
						(type) c
						(layer)2
							Element:p
								To use Mixpanel Android A/B testing, your app needs to be using version
							Element:strong
								4.6.0 or greater
								of the Mixpanel SDK. Make sure you are initializing the MixpanelAPI in your main activity using the project token that you wish to run tests in. See the
							Element:a
								quick start guide
								for installation steps.
						Node:
						(type) c
						(layer)2
							Element:p
								Planning to run an experiment on the initial view of your app? It can take several seconds for experiments to be applied on first app open; as a result, we recommend against putting UX changes or developer Tweaks on the first view of your app. If you wish to A/B test on the initial app view you will need to take delivery latency into account. We recommend employing the
							Element:a
								addOnMixpanelUpdatesReceivedListener
								(to know when test data is available) and
							Element:a
								joinExperimentIfAvailable()
								method (to apply the variant data to the view).
						Node:
						(type) c
						(layer)2
							Element:h3
								Creating your first A/B test
						Node:
						(type) c
						(layer)2
							Element:p
								Mixpanel A/B testing allows you to make changes to your app and deploy it to your users without a new release to the Google Play store. You can modify the look and feel of your app, change the copy, and even change the values of variables (using
							Element:a
								developer tweaks
								). Then you can see which version performs better without making any changes to your tracking code. Once you've installed the Mixpanel Android SDK, running your first A/B test is simple.
						Node:
						(type) c
						(layer)2
							Element:ol
							Element:li
								Open the A/B testing tab and create a new experiment
							Element:p
							Element:img
							Element:li
								Open your app and connect to Mixpanel using the flip gesture
							Element:li
								Use the visual editor to make the changes you want
							Element:p
							Element:img
							Element:li
								Save and deploy your changes
							Element:p
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
								Now the next time a user opens your app, they will receive the updated version. You can also use Mixpanel A/B testing to change the values of variables by taking advantage of
							Element:a
								developer tweaks
								.
						Node:
						(type) c
						(layer)2
							Element:h3
								Notes on experiment delivery
						Node:
						(type) c
						(layer)2
							Element:p
								Mixpanel checks for any new experiments asynchronously each time your application is opened or resumed. After the response is received, experiment changes and tweaks are applied or removed where appropriate. To handle network availability, each experiment is cached on the device so they can be re-applied when the API call cannot be successfully made.
						Node:
						(type) c
						(layer)2
							Element:p
								If you'd like more control over when this check for new experiments occurs, you can use the
							Element:a
								addOnMixpanelUpdatesReceivedListener
								listener and the
							Element:a
								joinExperimentIfAvailable
								method to download and apply experiments manually.
						Node:
						(type) c
						(layer)2
							Element:p
								The
							Element:strong
								$experiment_started
								event is fired when a given experiment (both changes and/or tweaks) is first started on a device. The event will contain an
							Element:strong
								$experiment_id
								property with the given experiment id which we encourage use within funnels, and our other reports.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								A/B developer tweaks
						Node:
						(type) c
						(layer)2
							Element:p
								For more complex changes that you want to A/B test, you can send arbitrary data to your apps as part of A/B testing, through a mechanism called Tweaks. Tweaks allow you to control variables in your app directly from Mixpanel. For example, you can alter the difficulty of a game, choose different paths through the app, or change text. The possibilities are endless.
						Node:
						(type) c
						(layer)2
							Element:h3
								Using tweaks in your application
						Node:
						(type) c
						(layer)2
							Element:p
								You can declare a tweak using
							Element:a
								MixpanelAPI.booleanTweak
								,
							Element:a
								MixpanelAPI.stringTweak
								,
							Element:a
								MixpanelAPI.longTweak
								,
							Element:a
								MixpanelAPI.doubleTweak
								, and other static methods that declare a tweak name and set a default value. To add A/B testable logic to your app, you might do something like this:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								package
							Element:span
								com
							Element:span
								.
							Element:span
								mixpanel
							Element:span
								.
							Element:span
								example
							Element:span
								.
							Element:span
								mygame
							Element:span
								;
							Element:span
								import
							Element:span
								android.app.Activity
							Element:span
								;
							Element:span
								import
							Element:span
								android.os.Bundle
							Element:span
								;
							Element:span
								import
							Element:span
								com.mixpanel.android.mpmetrics.MixpanelAPI
							Element:span
								;
							Element:span
								import
							Element:span
								com.mixpanel.android.mpmetrics.Tweak
							Element:span
								;
							Element:span
								public
							Element:span
								class
							Element:span
								GameActivity
							Element:span
								extends
							Element:span
								Activity
							Element:span
								{
							Element:span
								private
							Element:span
								static
							Element:span
								Tweak
							Element:span
								<
							Element:span
								Double
							Element:span
								>
							Element:span
								gameSpeed
							Element:span
								=
							Element:span
								MixpanelAPI
							Element:span
								.
							Element:span
								doubleTweak
							Element:span
								(
							Element:span
								"Game speed"
							Element:span
								,
							Element:span
								1.0
							Element:span
								);
							Element:span
								private
							Element:span
								static
							Element:span
								Tweak
							Element:span
								<
							Element:span
								Boolean
							Element:span
								>
							Element:span
								showAds
							Element:span
								=
							Element:span
								MixpanelAPI
							Element:span
								.
							Element:span
								booleanTweak
							Element:span
								(
							Element:span
								"Show ads"
							Element:span
								,
							Element:span
								false
							Element:span
								);
							Element:span
								@Override
							Element:span
								protected
							Element:span
								void
							Element:span
								onCreate
							Element:span
								(
							Element:span
								Bundle
							Element:span
								savedInstanceState
							Element:span
								)
							Element:span
								{
							Element:span
								super
							Element:span
								.
							Element:span
								onCreate
							Element:span
								(
							Element:span
								savedInstanceState
							Element:span
								);
							Element:span
								setContentView
							Element:span
								(
							Element:span
								R
							Element:span
								.
							Element:span
								layout
							Element:span
								.
							Element:span
								activity_main
							Element:span
								);
							Element:span
								runGame
							Element:span
								(
							Element:span
								gameSpeed
							Element:span
								.
							Element:span
								get
							Element:span
								());
							Element:span
								// pass in game speed for this A/B test, defaulted to 1.0
							Element:span
								if
							Element:span
								(
							Element:span
								showAds
							Element:span
								.
							Element:span
								get
							Element:span
								())
							Element:span
								{
							Element:span
								// do we want to show ads in this A/B test? defaulted to false
							Element:span
								showAdBar
							Element:span
								();
							Element:span
								}
							Element:span
								}
							Element:span
								public
							Element:span
								void
							Element:span
								runGame
							Element:span
								(
							Element:span
								Double
							Element:span
								speed
							Element:span
								)
							Element:span
								{
							Element:span
								// ... logic to start a new game
							Element:span
								}
							Element:span
								public
							Element:span
								void
							Element:span
								showAdBar
							Element:span
								()
							Element:span
								{
							Element:span
								// ... some logic that shows ads
							Element:span
								}
							Element:span
								}
						Node:
						(type) c
						(layer)2
							Element:p
								When you create an A/B test, you will be able to change the value of any Tweak you create in your app!
						Node:
						(type) c
						(layer)2
							Element:p
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
								Note that the class containing the Tweaks must be loaded for the Tweaks to appear in the A/B test builder.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Automatic Referrer Tracking
						Node:
						(type) c
						(layer)2
							Element:p
								The Mixpanel library can automatically set super properties associated with how your users found your app in the Google Play Store. To enable this feature, just add the following tag to the
							Element:em
								<application>
								tag in your AndroidManifest.xml file:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								<receiver
							Element:span
								android:name=
							Element:span
								"com.mixpanel.android.mpmetrics.InstallReferrerReceiver"
							Element:span
								android:exported=
							Element:span
								"true"
							Element:span
								>
							Element:span
								<intent-filter>
							Element:span
								<action
							Element:span
								android:name=
							Element:span
								"com.android.vending.INSTALL_REFERRER"
							Element:span
								/>
							Element:span
								</intent-filter>
							Element:span
								</receiver>
						Node:
						(type) c
						(layer)2
							Element:p
								Once you've updated your AndroidManifest.xml file, you will automatically send referrer and utm_campaign information along with every event you send to Mixpanel.
						Node:
						(type) c
						(layer)2
							Element:p
								The Google Play Store will only send the INSTALL_REFERRER message to a single receiver, so if you have multiple receivers you'd like to use to process referrer information, you should take a look at this
							Element:a
								simple workaround for using multiple INSTALL_REFERRER receivers
								.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								App Links Tracking
						Node:
						(type) c
						(layer)2
							Element:p
								The Mixpanel library has built in support for tracking in-bound and out-bound
							Element:a
								App Links
								. App Links is a specification to help standardize deep-linking between apps as well as give you additional information about how users are getting to and from your own mobile app.
						Node:
						(type) c
						(layer)2
							Element:h3
								Requirements
						Node:
						(type) c
						(layer)2
							Element:p
								In order for Mixpanel to track App Links, your app must statisfy the following dependencies:
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:a
								Bolts Framework
								>= v1.1.2
							Element:li
							Element:a
								Android Support Library v4
								.
						Node:
						(type) c
						(layer)2
							Element:p
								If your application does not meet these requirements, the Mixpanel library will log debug messages about App Links tracking not being enabled. This is NOT an error and can be safely ignored.
						Node:
						(type) c
						(layer)2
							Element:h3
								Tracking in-bound App Links
						Node:
						(type) c
						(layer)2
							Element:p
								If a user comes to your app via an App Link, Mixpanel will automatically track a "$al_nav_in" event with meta information about where they came from.
						Node:
						(type) c
						(layer)2
							Element:h3
								Tracking out-bound App Links
						Node:
						(type) c
						(layer)2
							Element:p
								If you're linking to other applications using the Bolts framework, Mixpanel will track a "$al_nav_out" event with additional meta information about where the user is being linked to.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								bolts
							Element:span
								.
							Element:span
								AppLinkNavigation
							Element:span
								.
							Element:span
								navigateInBackground
							Element:span
								(
							Element:span
								this
							Element:span
								,
							Element:span
								"http://anotherapp.com/app/link"
							Element:span
								);
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Surveys
						Node:
						(type) c
						(layer)2
							Element:p
								Mixpanel Mobile Surveys are deprecating in March 2017 and are no longer supported.
						Node:
						(type) c
						(layer)2
							Element:p
								To use Surveys in your Android app, you need to do four things:
						Node:
						(type) c
						(layer)2
							Element:ol
								By default, the Mixpanel Android library will check for a survey when your app loads or resumes from the background. If a survey is available for the current user that they haven't already seen, it will be displayed immediately in an overlay view.
							Element:li
								Include the
							Element:a
								Mixpanel Android library
								of version 4.1.0 or higher in your app
							Element:li
								Register the SurveyActivity in your AndroidManifest.xml file
							Element:li
								Identify the current user using
							Element:a
								getPeople().identify()
							Element:li
								Create a survey for your project in the Surveys tab of the Mixpanel website
						Node:
						(type) c
						(layer)2
							Element:p
								Surveys are only supported on Android versions from API Level 14 (Ice Cream Sandwich) and up.
						Node:
						(type) c
						(layer)2
							Element:h3
								Registering the SurveyActivity
						Node:
						(type) c
						(layer)2
							Element:p
								To enable your app to show surveys, you need to register the SurveyActivity within your AndroidManifest.xml inside the
							Element:em
								<application>
								tag. Here is an example snippet for an app that uses surveys:
						Node:
						(type) c
						(layer)2
							Element:pre
								...
								The specified theme is a general Mixpanel default, so feel free to substitute your own theme better match the look and feel of your application.
							Element:span
								<application>
							Element:span
								<activity
							Element:span
								android:name=
							Element:span
								"com.mixpanel.android.surveys.SurveyActivity"
							Element:span
								android:theme=
							Element:span
								"@style/com_mixpanel_android_SurveyActivityTheme"
							Element:span
								/>
							Element:span
								</application>
								...
						Node:
						(type) c
						(layer)2
							Element:h3
								Controlling when to show a survey
						Node:
						(type) c
						(layer)2
							Element:p
								You may not want the surveys to show immediately when your app loads. If, for example, you have an app like Skype™, and you want to show a call quality survey at the end of a phone call, you need to turn off the automatic showing of surveys, by setting
							Element:code
								com.mixpanel.android.MPConfig.AutoDisplayMixpanelUpdates
								in your main Activity using a
							Element:code
								meta-data
								tag in AndroidManifest.xml to false:
						Node:
						(type) c
						(layer)2
							Element:pre
								...
							Element:span
								<application>
							Element:span
								<meta-data
							Element:span
								android:name=
							Element:span
								"com.mixpanel.android.MPConfig.AutoShowMixpanelUpdates"
							Element:span
								android:value=
							Element:span
								"false"
							Element:span
								/>
								...
							Element:span
								</application>
								...
						Node:
						(type) c
						(layer)2
							Element:p
								If you turn off the auto-check, you'll need to manually use our library to display a survey.
						Node:
						(type) c
						(layer)2
							Element:p
								To manually check if a survey is available, you may call
							Element:a
								MixpanelAPI.People.getSurveyIfAvailable()
								. This method will return a
							Element:a
								Survey
								object if the Mixpanel library has received a survey for the currently identified user, and null otherwise. You may then use this object to render your own survey.
						Node:
						(type) c
						(layer)2
							Element:p
								You can also call
							Element:a
								MixpanelAPI.People.showSurveyIfAvailable()
								to allow the Mixpanel library to render a survey for you.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Debugging and Logging
						Node:
						(type) c
						(layer)2
							Element:p
								Enabling Mixpanel debugging and logging allows you to see the debug output from the Mixpanel Android library. This may be useful in determining when track calls go out or in-app notifications are fetched. To enable Mixpanel debugging and logging, you will want to add the following permission within your AndroidManifest.xml inside the
							Element:em
								<application>
								tag:
						Node:
						(type) c
						(layer)2
							Element:pre
								...
								INTEGRATION TUTORIALDocument Sections
							Element:span
								<application>
							Element:span
								<meta-data
							Element:span
								android:name=
							Element:span
								"com.mixpanel.android.MPConfig.EnableDebugLogging"
							Element:span
								android:value=
							Element:span
								"true"
							Element:span
								/>
								...
							Element:span
								</application>
								...
						Node:
						(type) c
						(layer)2
							Element:ul
								Learn more
							Element:li
							Element:a
								Quick start guide
							Element:li
							Element:a
								Installing the library - Android Studio
							Element:li
							Element:a
								Initializing the library
							Element:li
							Element:a
								Sending your first event
							Element:li
							Element:a
								Event timing
							Element:li
							Element:a
								Super properties
							Element:li
							Element:a
								Managing user identity
							Element:li
							Element:a
								Storing user profiles
							Element:li
							Element:a
								Tracking revenue
							Element:li
							Element:a
								Handling push notifications
							Element:li
							Element:a
								Initializing push handling
							Element:li
							Element:a
								Push notifications guide
							Element:li
							Element:a
								In-app notifications guide
							Element:li
							Element:a
								A/B testing
							Element:li
							Element:a
								A/B developer tweaks
							Element:li
							Element:a
								Automatic Referrer Tracking
							Element:li
							Element:a
								App Links Tracking
							Element:li
							Element:a
								Surveys
							Element:li
							Element:a
								Debugging and logging
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:a
								Full API reference
							Element:li
							Element:a
								Example application
							Element:li
							Element:a
								Library source code
