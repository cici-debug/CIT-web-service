Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					iOS - Objective-C API Integration
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Installing the library
						Node:
						(type) c
						(layer)2
							Element:p
								The easiest way to get Mixpanel into your iOS project is to use
							Element:a
								CocoaPods
								.
						Node:
						(type) c
						(layer)2
							Element:ol
							Element:li
								Install CocoaPods using
							Element:code
								gem install cocoapods
							Element:li
								If this is your first time using CocoaPods, run
							Element:code
								pod setup
								to create a local CocoaPods spec mirror.
							Element:li
								Create a file in your Xcode project called
							Element:code
								Podfile
								and add the following line:
							Element:code
								pod 'Mixpanel'
							Element:li
								Run
							Element:code
								pod install
								in your Xcode project directory. CocoaPods should download and install the Mixpanel library, and create a new Xcode workspace. Open up this workspace in Xcode.
						Node:
						(type) c
						(layer)2
							Element:p
								You can also get the library by downloading the
							Element:a
								latest version from Github
								and copying it into your project.
						Node:
						(type) c
						(layer)2
							Element:p
								If you don't want to use CocoaPods, we have step-by-step instructions on how to
							Element:a
								manually install our library.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Initializing the library
						Node:
						(type) c
						(layer)2
							Element:p
								To start tracking with the Mixpanel iOS library, you must first initialize it with your project token. Find your project token by clicking your name in the upper righthand corner of your Mixpanel project and selecting Settings from the dropdown.
						Node:
						(type) c
						(layer)2
							Element:p
								In most cases, it makes sense to do this in
							Element:a
								application:didFinishLaunchingWithOptions:
								.
						Node:
						(type) c
						(layer)2
							Element:p
								To initialize the library, first add
							Element:code
								#import "Mixpanel/Mixpanel.h"
								and call
							Element:a
								sharedInstanceWithToken:
								with your project token as its argument. Once you've called this method once, you can access your instance throughout the rest of your application with
							Element:a
								sharedInstance
								.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								[Mixpanel sharedInstanceWithToken:@"YOUR_API_TOKEN"];
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Automatically track events
						Node:
						(type) c
						(layer)2
							Element:p
								After installing the library into your iOS app, Mixpanel allows you to use our in-browser editor to add tracking on the fly. No code or app-store re-submission required!
						Node:
						(type) c
						(layer)2
							Element:p
								Navigate to our editor by clicking your name in the upper righthand corner of your Mixpanel project and selecting Set up tracking from the dropdown.
							Element:br
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
							Element:a
								Watch this short video
								to learn more about automatic event tracking.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Sending events
						Node:
						(type) c
						(layer)2
							Element:p
								We recommend tracking only five to seven events in your application instead of tracking too many things to start. Ideally, you track people going through your initial user experience and one key metric that matters for your application (e.g. YouTube might choose "Watched Video" as a key metric).
						Node:
						(type) c
						(layer)2
							Element:p
								Once you've initialized the library, you can track an event by calling
							Element:a
								track:properties:
								with the event name and properties.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								Mixpanel *mixpanel = [Mixpanel sharedInstance]; [mixpanel track:@"Plan selected" properties:@{ @"Plan": @"Premium" }];
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Timing events
						Node:
						(type) c
						(layer)2
							Element:p
								You can track the time it took for an action to occur, such as an image upload or a comment post, using
							Element:a
								timeEvent:
								This will mark the "start" of your action, which you can then finish with a track call. The time duration is then recorded in the "Duration" property.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								Mixpanel *mixpanel = [Mixpanel sharedInstance]; [mixpanel timeEvent:@"Image Upload"]; [self uploadImageWithSuccessHandler:^{ [mixpanel track:@"Image Upload"]; }];
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Super properties
						Node:
						(type) c
						(layer)2
							Element:p
								It's very common to have certain properties that you want to include with each event you send. Generally, these are things you know about the
							Element:strong
								user
								rather than about a specific eventâ€”for example, the user's age, gender, or source.
						Node:
						(type) c
						(layer)2
							Element:p
								To make things easier, you can register these properties as
							Element:strong
								super properties
								. If you do, we will automatically include them with all tracked events. Super properties are saved to device storage, and will persist across invocations of your app. Mixpanel already stores some information as super properties by default; see a full list of Mixpanel default properties
							Element:a
								here
								.
						Node:
						(type) c
						(layer)2
							Element:p
								To set super properties, call
							Element:a
								registerSuperProperties:
								.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								// Send a "Plan: Mega" property will be sent // with all future track calls. [mixpanel registerSuperProperties:@{@"Plan": @"Mega"}];
						Node:
						(type) c
						(layer)2
							Element:p
								Going forward, whenever you track an event, super properties will be included as properties. For instance, if you call
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								[mixpanel track:@"Signup" properties:@{ @"Source": @"Twitter" }];
						Node:
						(type) c
						(layer)2
							Element:p
								after making the above call to registerSuperProperties:, it is just like adding the properties directly:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								[mixpanel track:@"Signup" properties:@{ @"Source": @"Twitter", @"Plan": @"Mega" }];
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Setting super properties once and only once
									Node:
									(type) c
									(layer)3
										Element:p
											If you want to store a super property only once (often for things like ad campaign or source), you can use
										Element:a
											registerSuperPropertiesOnce:
											. This function behaves like
										Element:a
											registerSuperProperties:
											and has the same interface, but it doesn't override super properties you've already saved.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											[mixpanel registerSuperPropertiesOnce:@{@"Source": @"ad-01"}];
									Node:
									(type) c
									(layer)3
										Element:p
											This means that it's safe to call
										Element:a
											registerSuperPropertiesOnce:
											with the same property on every app load, and it will only set it if the super property doesn't exist.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Managing user identity
						Node:
						(type) c
						(layer)2
							Element:p
								The Mixpanel library will assign a default unique identifier (we call it a "distinct ID") to each unique user who installs your application. This distinct ID is saved to device storage so that it will persist across sessions.
						Node:
						(type) c
						(layer)2
							Element:p
								If you choose, you can assign your own user IDs. This is particularly useful if a user is using your app on multiple devices or platforms (both web and mobile, for example). To assign your own distinct_ids, you can use
							Element:a
								identify:
								.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								// Ensure all future events sent from // the device will have the distinct_id 13793 [mixpanel identify:@"13793"];
						Node:
						(type) c
						(layer)2
							Element:p
								Calling
							Element:a
								identify:
								with a new ID will
							Element:strong
								change
								the distinctID stored on the device. Updates to user profiles are queued on the device until identify is called.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Combining anonymous and identifiable user data
									Node:
									(type) c
									(layer)3
										Element:p
											It's important to send the same distinct_id with each event that an individual user triggers. Events recorded with different distinct_ids will be treated in Mixpanel as if they were performed by different users.
									Node:
									(type) c
									(layer)3
										Element:p
											There are times when it can be convenient to start referring to a user by a different identifier in your implementation. The most common case is after registration, when a user switches from being an anonymous user (with an anonymous distinct_id) to an authenticated user with an (authenticated id). In this case, you can create an
										Element:a
											Alias
											for the user to keep the distinct_id consistent. An alias is a string stored in a Mixpanel lookup table that is associated with an anonymous distinct_id. Once written, aliases are not editable. Any data sent to Mixpanel with an alias as the distinct_id will be remapped and written to disk using the alias's corresponding anonymous distinct_id. This allows you to start identifying a user by an authenticated id without changing the distinct_id that is ultimately written in Mixpanel.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											// This makes the current ID (by default an auto-generated GUID) // and '13793' interchangeable distinct ids (but not retroactively). [mixpanel createAlias:@"13793" forDistinctID:mixpanel.distinctId]; // To create a user profile, you must call identify [mixpanel identify:mixpanel.distinctId];
									Node:
									(type) c
									(layer)3
										Element:p
											The recommended usage pattern is to call both
											If you use
										Element:a
											createAlias:
											and
										Element:a
											identify:
											(with the Mixpanel generated distinctId, as shown in the example above) when the user signs up, and only
										Element:a
											identify:
											(with the aliased user ID) on future log ins. This will keep your signup funnels working correctly.
									Node:
									(type) c
									(layer)3
										Element:a
											createAlias:
											we recommend only calling it once during the lifetime of the user.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Storing user profiles
						Node:
						(type) c
						(layer)2
							Element:p
								In addition to events, you can store user profiles in Mixpanel's
							Element:a
								People Analytics
								product. Profiles are persistent sets of properties that describe a userâ€”things like name, email address, and signup date.
						Node:
						(type) c
						(layer)2
							Element:p
								You can use profiles to explore and segment users by who they are, rather than what they did. You can also use profiles to send notifications, such as emails, SMS, or push notifications.
						Node:
						(type) c
						(layer)2
							Element:p
								Before you send profile updates, you
							Element:strong
								must
								call
							Element:a
								identify:
								. This ensures that you only have actual registered users saved in the system.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Setting profile properties
									Node:
									(type) c
									(layer)3
										Element:p
											You can set properties on a user profile with
										Element:a
											people set:
											.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											// Sets user 13793's "Plan" attribute to "Premium" [mixpanel.people set:@{@"Plan": @"Premium"}];
									Node:
									(type) c
									(layer)3
										Element:p
											This will set a "Plan" property, with a value "Premium", on user 13793's profile. If there isn't a profile with distinct_id 13793 in Mixpanel already, a new profile will be created. If user 13793 already has a property named "Plan" in their profile, the old value will be overwritten with "Premium".
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Incrementing numeric properties
									Node:
									(type) c
									(layer)3
										Element:p
											You can use
										Element:a
											people increment:
											to change the current value of numeric properties. This is useful when you want to keep a running tally of things, such as games played, messages sent, or points earned.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											// Here we increment the user's point count by 500. [mixpanel.people increment:@"point count" by:@500]; // Pass an NSDictionary to increment multiple properties [mixpanel.people increment:@{ @"dollars spent": @17, @"credits remaining": @-34 }];
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Other types of profile updates
									Node:
									(type) c
									(layer)3
										Element:p
											There are a few other types of profile updates. To learn more, please review the
										Element:a
											full MixpanelPeople API documentation.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Tracking revenue
						Node:
						(type) c
						(layer)2
							Element:p
								Mixpanel makes it easy to analyze the revenue you earn from individual customers. By associating charges with user profiles, you can compare revenue across different customer segments and calculate things like lifetime value.
						Node:
						(type) c
						(layer)2
							Element:p
								You can track a single transaction with
							Element:a
								people trackCharge:
								. This call will add transactions to the individual user profile, which will also be reflected in the
							Element:a
								Mixpanel Revenue report
								.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								// Tracks $100.77 in revenue for user 13793 [mixpanel.people trackCharge:@(100.77)]; // Refund this user $50 [mixpanel.people trackCharge:@-50]; // Tracks $25 in revenue for user 13793 on the 2nd of // January [mixpanel.people trackCharge:@25 withProperties:@{ @"$time": "2016-01-02T00:00:00" }];
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Registering for push notifications
						Node:
						(type) c
						(layer)2
							Element:p
								The Mixpanel library includes support for sending push notification device tokens to Mixpanel. Once you send a device token, you can use Mixpanel to send push notifications to your app.
						Node:
						(type) c
						(layer)2
							Element:p
								You can send a device token to Mixpanel using
							Element:a
								people addPushDeviceToken:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								- (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken: (NSData *)deviceToken { Mixpanel *mixpanel = [Mixpanel sharedInstance]; // Make sure identify has been called before sending // a device token. [mixpanel identify:@"13793"]; // This sends the deviceToken to Mixpanel [mixpanel.people addPushDeviceToken:deviceToken]; }
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Push notifications quick start guides
									Node:
									(type) c
									(layer)3
										Element:p
											There is
										Element:a
											a quick start guide for iOS push notifications
											available to help you get started with push notifications in your app. It includes instructions for provising your app to use the
										Element:a
											Apple Push Notification service (
											, preparing your push SSL certificate from Apple and configuring your app for push notifications.
										Element:abbr
											APNs
											)
									Node:
									(type) c
									(layer)3
										Element:p
											There is also a
										Element:a
											step by step guide to integrating Mixpanel push notifications with your app
											that covers uploading your push credentials to Mixpanel, registering your user's device token from your app, and handling inbound push notification messages.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								In-app notifications
						Node:
						(type) c
						(layer)2
							Element:p
								There is a
							Element:a
								quick start guide
								for iOS in app notifications to help you get integrated.
						Node:
						(type) c
						(layer)2
							Element:p
								Make sure that you have already:
						Node:
						(type) c
						(layer)2
							Element:ol
							Element:li
								Included the latest version of the
							Element:a
								Mixpanel iOS library
								in your app
							Element:li
								Made sure you are
							Element:a
								identifying your users
								in the app.
							Element:li
								Created an in-app notification on the Notifications tab of the Mixpanel website.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Surveys
						Node:
						(type) c
						(layer)2
							Element:p
								Mixpanel Mobile Surveys are deprecating in March 2017 and are no longer supported.
						Node:
						(type) c
						(layer)2
							Element:p
								If you are using our
							Element:a
								mobile surveys product
								there are 3 things you need to make sure of.
						Node:
						(type) c
						(layer)2
							Element:ol
								The Mixpanel iOS library will automatically check for a survey when your app loads or resumes from the background. If a survey is available for the current user that they haven't already seen, it will be displayed immediately in an overlay view.
							Element:li
								Include the latest version of the
							Element:a
								Mixpanel iOS library
								in your app
							Element:li
								Make sure you are
							Element:a
								identifying your users
								in the app.
							Element:li
								Create a survey for your project in the Surveys tab of the Mixpanel website.
						Node:
						(type) c
						(layer)2
							Element:p
								That's it, you're done!
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Controlling when to show a survey
									Node:
									(type) c
									(layer)3
										Element:p
											You may not want the surveys to show immediately when your app loads. If, for example, you have an app like Skypeâ„¢, and you want to show a call quality survey at the end of a phone call, you need to turn off the automatic showing of surveys, by setting
										Element:a
											showSurveyOnActive
											to
										Element:code
											NO
											and call
										Element:a
											showSurveyWithID:
											at the appropriate point in your app. When looking at the survey in Mixpanel, the survey ID will be the last number in the URL.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											// In application:didFinishLaunchingWithOptions: // Turn this off so the survey doesn't pop up automatically. // mixpanel.showSurveyOnActive = NO; - (void)phoneCallEnded { [mixpanel showSurveyWithID:CALL_QUALITY_SURVEY_ID]; }
									Node:
									(type) c
									(layer)3
										Element:p
											If you don't want to specify the survey ID, you can use
										Element:a
											showSurvey
											instead, which will show the first available survey targeted at the identified user if there is one. Surveys are never shown twice to the same user, so you don't have to check for yourself if the user already saw the survey before calling showSurveyWithID.
									Node:
									(type) c
									(layer)3
										Element:p
											If you don't want mixpanel checking for new surveys when your app becomes active, you can turn it off by setting
										Element:a
											checkForSurveysOnActive
											to
										Element:code
											NO
											. This means that surveys will not show automatically, and that the network request to retrieve the survey will occur only when you call
										Element:a
											showSurvey
											or
										Element:a
											showSurveyWithID:
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								A/B testing experiments
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Prerequisites
									Node:
									(type) c
									(layer)3
										Element:p
											Getting started with A/B testing is quick and easy. Just include the latest version of the Mixpanel iOS library in your app and you are ready to start experimenting.
									Node:
									(type) c
									(layer)3
										Element:p
											Make sure that you have already:
									Node:
									(type) c
									(layer)3
										Element:ol
										Element:li
											Included the latest version of the
										Element:a
											Mixpanel iOS library
											in your app (v2.5+)
										Element:li
											Created an experiment on the A/B Testing tab of the Mixpanel website
									Node:
									(type) c
									(layer)3
										Element:p
											To use the UI's visual experiment creator, please ensure that you're in the project appropriate to your app's current build (i.e., Production or Development). While not required, it's a good idea to connect your mobile device to WiFi while using the A/B designer.
									Node:
									(type) c
									(layer)3
										Element:p
											Once you have created an experiment and, optionally, decided which users you wish to target, simply turn on the experiment to start serving your A/B test to customers. It is that simple!
									Node:
									(type) c
									(layer)3
										Element:p
											Planning to run an experiment on the initial view of your app? It can take several seconds for experiments to be applied on first app open; as a result, we recommend against putting UX changes or developer Tweaks on the first view of your app. If you wish to A/B test on the initial app view you will need to take delivery latency into account. We recommend enabling the option
										Element:a
											checkForVariantsOnActive
											(to grab data when the app is opened) and
										Element:a
											joinExperimentsWithCallback
											method (to apply the variant data to the view).
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Notes on experiment delivery
									Node:
									(type) c
									(layer)3
										Element:p
											Mixpanel checks for any new experiments asynchronously on
										Element:a
											applicationDidBecomeActive
											. After the response is received, experiment changes and Tweaks are applied or removed where appropriate. To handle network availability, each experiment is cached on the device so they can be re-applied when the API call cannot be successfully made.
									Node:
									(type) c
									(layer)3
										Element:p
											If you'd like more control over when this check for new experiments occurs, you can use the
										Element:a
											checkForVariantsOnActive
											flag and the
										Element:a
											joinExperiments
											or
										Element:a
											joinExperimentsWithCallback
											methods to download and apply experiments manually.
									Node:
									(type) c
									(layer)3
										Element:p
											The
										Element:strong
											$experiment_started
											event is fired when a given experiment (both changes and/or Tweaks) is first started on a device. The event will contain an
										Element:strong
											$experiment_id
											property with the given experiment id which we encourage use within funnels, and our other reports.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								A/B developer tweaks
								For more complex changes that you want to A/B test, you can include small bits of code in your apps called Tweaks. Tweaks allow you to control variables in your app from your Mixpanel dashboard. For example, you can alter the difficulty of a game, choose different paths through the app, or change text. The possibilities are endless.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Objective-C
									Node:
									(type) c
									(layer)3
										Element:p
											To use Tweaks in any Objective-C file in your app, you need to import one file.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											#import "Mixpanel/MPTweakInline.h"
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Swift
									Node:
									(type) c
									(layer)3
										Element:p
											If you're using Swift, you will need ensure all Tweaks are written to an Objective-C file and use a bridging-Header.h file to merge. If you're not sure how to do this, you can read Apple's documentation on using
										Element:a
											Swift and Objective-C in the same project
											. Make sure that you have included the latest version of the
										Element:a
											Mixpanel iOS library
											in your app (v2.9.2+).
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Value Tweaks
											A value Tweak allows you to assign a value to a variable that can be changed later. The simplest Tweak looks like this:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											NSInteger numLives = MPTweakValue(@"number of lives", 5);
									Node:
									(type) c
									(layer)3
										Element:p
											Once you add this line, you will see a Tweak called
										Element:code
											"number of lives"
											with a default value of
										Element:code
											5
											in the Mixpanel A/B test designer. You can then create an A/B test with a different value for
										Element:code
											"number of lives"
											. For example, you could set up an experiment where 50% of your users start a game with 5 lives, and 50% start with 10 lives. When there are no experiments running, the value of numLives will simply be the default of 5.
									Node:
									(type) c
									(layer)3
										Element:p
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Flow Control Tweaks
											Value Tweaks can also be used to control flow in your app.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											if (MPTweakValue(@"show alternate view", NO)) { // Show alternate view. } else { // Show original view }
									Node:
									(type) c
									(layer)3
										Element:p
											By default, the alternate view will not show. But you can now set up an A/B test that flips this value to
										Element:code
											YES
											for a percentage of your users.
									Node:
									(type) c
									(layer)3
										Element:p
											If you have more than 2 options, you could use a switch.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											switch (MPTweakValue(@"Action to take", 1)) { case 1: // Do something break; case 2: // Do something else break; case 3: // Do a third thing break; }
									Node:
									(type) c
									(layer)3
										Element:p
											You can use Tweaks to assign values to UI elements too.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											UILabel *label = [[UILabel alloc] init]; label.text = MPTweakValue(@"label text", @"Hello World"); label.hidden = MPTweakValue(@"label is hidden", NO);
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Binding Tweaks
											When designing an A/B test in Mixpanel,
									Node:
									(type) c
									(layer)3
										Element:code
											MPTweakValue
											changes will only apply when the code block they are in is executed. For example if you have an
									Node:
									(type) c
									(layer)3
										Element:code
											MPTweakValue
											to assign text to a label on viewDidLoad, and you made changes to the Tweak in the A/B test designer, you would not see the changes apply until the next time viewDidLoad was called. If you would like to see your changes applied immediately when designing a test, you can use
									Node:
									(type) c
									(layer)3
										Element:code
											MPTweakBind
											to accomplish this.
									Node:
									(type) c
									(layer)3
										Element:p
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											UILabel *label = [[UILabel alloc] init]; MPTweakBind(label, text, @"label text", @"Hello World");
									Node:
									(type) c
									(layer)3
										Element:p
											The first 2 arguments are an object and a property. Whenever the Tweak is changed in the A/B test designer, you will immediately see the new value of the Tweak applied to the given object and property, in this case
										Element:code
											label.text
											.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Debugging and logging
						Node:
						(type) c
						(layer)2
							Element:p
								You can turn on Mixpanel logging by adding the following Preprocessor Macros in
							Element:span
								Build Settings:
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:code
								MIXPANEL_DEBUG=1
								- logs queueing and flushing of events to Mixpanel
							Element:li
							Element:code
								MIXPANEL_ERROR=1
								- logs any errors related to connections or malformed events
						Node:
						(type) c
						(layer)2
							Element:p
								If you're using CocoaPods, you'll need to add this to the Pod target instead of your main app project's target:
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
								You can also add this to your Podfile to ensure everyone on your team will always have logging enabled:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								post_install do |installer| installer.pods_project.targets.each do |target| target.build_configurations.each do |config| settings = config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] settings = ['$(inherited)'] if settings.nil? if target.name == 'Pods-MyProject-Mixpanel' settings << 'MIXPANEL_DEBUG=1' settings << 'MIXPANEL_ERROR=1' end config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] = settings end end end
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								About ARC
						Node:
						(type) c
						(layer)2
							Element:p
								As of version 2.2.0 the Mixpanel iOS library uses ARC.
						Node:
						(type) c
						(layer)2
							Element:p
								If you are using Mixpanel in a project that does not have ARC enabled, you need to enable ARC for just the Mixpanel source files in your Xcode project settings. This is done by adding the
								INTEGRATION TUTORIALDocument Sections
							Element:code
								-fobj-arc
								compiler flag to each Mixpanel file under
							Element:code
								Build Phases -> Compile Sources
						Node:
						(type) c
						(layer)2
							Element:ul
								Learn more
							Element:li
							Element:a
								Installing the library - CocoaPods
							Element:li
							Element:a
								Initializing the library
							Element:li
							Element:a
								Sending events
							Element:li
							Element:a
								Event timing
							Element:li
							Element:a
								Super properties
							Element:li
							Element:a
								Managing user identity
							Element:li
							Element:a
								Storing user profiles
							Element:li
							Element:a
								Tracking revenue
							Element:li
							Element:a
								Push notifications
							Element:li
							Element:a
								In-app notifications
							Element:li
							Element:a
								Surveys
							Element:li
							Element:a
								A/B testing
							Element:li
							Element:a
								A/B developer tweaks
							Element:li
							Element:a
								Debugging and logging
							Element:li
							Element:a
								About ARC
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:a
								Full API reference
							Element:li
							Element:a
								Example application
							Element:li
							Element:a
								Library source code
