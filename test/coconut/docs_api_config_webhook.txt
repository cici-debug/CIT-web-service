Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					API documentation
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Coconut's API is a config-based API built with simplicity and flexibility in mind.
							Element:br
								Encode your first video in less than 5 minutes.
			Node:
			(type) h1
			(layer)1
				Element:h1
					API Reference
			Node:
			(type) c
			(layer)1
				Element:p
				Element:a
					Docs
					/
				Element:a
					API
					/
				Element:a
					Config
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Webhook
						Node:
						(type) c
						(layer)2
							Element:p
							Element:strong
								Keyword:
								webhook is a setting and must be prefixed by the keyword
							Element:code
								set
								.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:em
								Required
								â€“ When the job is complete, receive an HTTP notification to the given webhook URL in JSON format. The request contains all the output URLs and errors if any by default.
						Node:
						(type) c
						(layer)2
							Element:p
								For instance:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								set webhook = https://mysite.com/coconut/webhook
						Node:
						(type) c
						(layer)2
							Element:p
								Structure of a basic webhook:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								{ "id": 49342345, "event": "job.completed", "output_urls": { "mp4": "http://videobucket.s3.amazonaws.com/1234/test.mp4", "mp4:720p": "http://videobucket.s3.amazonaws.com/1234/test_hd.mp4", "hls": "http://videobucket.s3.amazonaws.com/1234/hls/test.m3u8" "jpg": [ "http://videobucket.s3.amazonaws.com/1234/thumbs/test_01.jpg", "http://videobucket.s3.amazonaws.com/1234/thumbs/test_02.jpg", "http://videobucket.s3.amazonaws.com/1234/thumbs/test_03.jpg" ], "gif": "http://videobucket.s3.amazonaws.com/1234/test.gif" }, "errors": { "output": { "webm": "unknown_error" } } }
						Node:
						(type) c
						(layer)2
							Element:p
							Element:br
							Element:strong
								Tips:
								Add custom query string parameters to the URL to match with objects of your application.
						Node:
						(type) c
						(layer)2
							Element:p
								Let's say you have videos attached to a Post in your application. When creating the coconut job, simply add the post_id to the webhook URL so you will know the webhook is related to the given post id when your application will receive it.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								set webhook = https://mysite.com/coconut/webhook?post_id=1234
						Node:
						(type) c
						(layer)2
							Element:p
							Element:br
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Metadata
									Node:
									(type) c
									(layer)3
										Element:p
										Element:em
											Available since version
										Element:code
											2015-04-07
									Node:
									(type) c
									(layer)3
										Element:p
											You can receive the metadata of the source and output videos as well by using the parameter
										Element:code
											metadata
											.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											set webhook = https://mysite.com/coconut/webhook, metadata=true
									Node:
									(type) c
									(layer)3
										Element:p
											Example of a webhook with metadata enabled:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											{ "id": 49342345, "event": "job.completed", "output_urls": { "mp4_360p": "http://videobucket.s3.amazonaws.com/1234/test_360p.mp4", "mp4_240p": "http://videobucket.s3.amazonaws.com/1234/test_240p.mp4", }, "errors": {}, "metadata": { "mp4:360p": { "streams": { "video": { "codec": "h264", "width": 480, "height": 360, "aspect": 1.33, "pix_fmt": "yuv420p", "fps": 15.0, "bitrate": 795 }, "audio": { "codec": "aac", "sample_rate": 44100, "channels": 2, "bitrate": 128 } }, "format": { "name": "mov", "duration": 5, "size": 517120, "mime_type": "video/mp4" } }, "source": { "streams": { "video": { "codec": "mpeg4", "width": 320, "height": 240, "aspect": 1.33, "pix_fmt": "yuv420p", "fps": 15.0, "bitrate": 501 }, "audio": { "codec": "aac", "sample_rate": 24000, "channels": 2, "bitrate": 53 } }, "format": { "name": "mov", "duration": 5, "size": 325632, "mime_type": "video/mp4" } }, "mp4:240p": { "streams": { "video": { "codec": "h264", "width": 320, "height": 240, "aspect": 1.33, "pix_fmt": "yuv420p", "fps": 15.0, "bitrate": 460 }, "audio": { "codec": "aac", "sample_rate": 44100, "channels": 2, "bitrate": 53 } }, "format": { "name": "mov", "duration": 5, "size": 299008, "mime_type": "video/mp4" } } } }
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Event changes & overall progress
									Node:
									(type) c
									(layer)3
										Element:p
										Element:em
											Available since version
										Element:code
											2015-05-07
									Node:
									(type) c
									(layer)3
										Element:p
											You can receive a webhook request where specific events occur via the boolean parameter
										Element:code
											events
											.
									Node:
									(type) c
									(layer)3
										Element:p
											Here is the list of events:
									Node:
									(type) c
									(layer)3
										Element:table
										Element:thead
										Element:tr
										Element:th
											Event type
										Element:th
											Description
										Element:tr
										Element:td
										Element:code
											job.completed
										Element:td
											When the job is completed.
										Element:tr
										Element:td
										Element:code
											source.transferred
										Element:td
											When the source file is transferred to Coconut. All the output jobs are then created. You also get the current progress of the job.
										Element:tr
										Element:td
										Element:code
											source.failed
										Element:td
											When the source file couldn't be transferred to Coconut. The job is aborted and the webhook `job.completed` is immediately sent.
										Element:tr
										Element:td
										Element:code
											output.processed
										Element:td
											When an output job just finished processing. You also get the current progress of the job.
										Element:tr
										Element:td
										Element:code
											output.failed
										Element:td
											When an error occurred while processing.
									Node:
									(type) c
									(layer)3
										Element:p
										Element:br
									Node:
									(type) c
									(layer)3
										Element:p
											Usage example:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											set webhook = https://mysite.com/coconut/webhook, events=true
									Node:
									(type) c
									(layer)3
										Element:p
											Here are some examples:
									Node:
									(type) c
									(layer)3
										Element:p
											Source file is transferred to Coconut:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											{ "id": 5194, "event": "source.transferred", "progress": "16%" }
									Node:
									(type) c
									(layer)3
										Element:p
											An output just processed:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											{ "id": 5194, "event": "output.processed", "progress": "75%", "format": "mp4:240p", "url": "http://files.coconut.co.s3.amazonaws.com/newapi/test_240p.mp4" }
									Node:
									(type) c
									(layer)3
										Element:p
											Source file error:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											{ "id": 5192, "event": "source.failed", "progress": "100%", "error": "source_http_404_error" }
									Node:
									(type) c
									(layer)3
										Element:p
											Output failed:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											{ "id": 5192, "event": "output.failed", "progress": "75%", "format": "webm", "error": "transcoding_audio_cant_be_resampled" }
									Node:
									(type) c
									(layer)3
										Element:p
											You can also combine
										Element:code
											events
											with
										Element:code
											metadata
											so you can receive the metadata of the source file and the output videos as well.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											{ "id": 5195, "event": "source.transferred", "progress": "25%", "metadata": { "streams": { "video": { "codec": "mpeg4", "width": 320, "height": 240, "aspect": 1.33, "pix_fmt": "yuv420p", "fps": 15.0, "bitrate": 501 }, "audio": { "codec": "aac", "sample_rate": 24000, "channels": 2, "bitrate": 53 } }, "format": { "name": "mov", "duration": 5, "size": 325632, "mime_type": "video/mp4" } } }
									Node:
									(type) c
									(layer)3
										Element:p
											Read our tutorial on
										Element:a
											how to receive webhooks server-side
											.
									Node:
									(type) c
									(layer)3
										Element:hr
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:a
											Getting started
										Element:li
										Element:a
											Creating jobs
										Element:ul
										Element:li
										Element:a
											Config file
										Element:ul
										Element:li
										Element:a
											Variables
										Element:li
										Element:a
											Source
										Element:li
										Element:a
											Video encoding
										Element:li
										Element:a
											HLS
										Element:li
										Element:a
											MPEG-DASH
										Element:li
										Element:a
											Video previews
										Element:li
										Element:a
											Webhook
										Element:li
										Element:a
											Tutorials
										Element:ul
										Element:li
										Element:a
											Encoding videos
										Element:li
										Element:a
											Creating thumbnails
										Element:li
										Element:a
											HTTP Live Streaming
										Element:li
										Element:a
											Receiving Webhooks
										Element:li
										Element:a
											Sample
										Element:li
										Element:span
											References
										Element:ul
										Element:li
										Element:a
											Supported CDN
										Element:li
										Element:a
											Format Specs
										Element:li
										Element:a
											Libraries
										Element:li
										Element:a
											Error codes
									Node:
									(type) c
									(layer)3
										Element:hr
