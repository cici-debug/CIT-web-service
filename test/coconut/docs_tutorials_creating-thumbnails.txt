Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					API Reference
			Node:
			(type) c
			(layer)1
				Element:p
				Element:a
					Docs
					/
				Element:a
					Tutorials
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Generating cool video previews for your users
						Node:
						(type) c
						(layer)2
							Element:p
							Element:em
								This tutorial follows our article about
							Element:a
								How to encode videos
								. You should read it first if you haven't.
						Node:
						(type) c
						(layer)2
							Element:p
								Without a cool thumbnail, a video is not as attractive as it could be, that's why we provide a number of features to make the difference.
						Node:
						(type) c
						(layer)2
							Element:p
								Before getting started, let's declare some variables to keep things DRY and easier to maintain. Open your text editor, create a config file
							Element:code
								coconut.conf
								:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								var s3 = s3://accesskey:secretkey@mybucket/demo var num = 3 # number of thumbnails we want to generate
						Node:
						(type) c
						(layer)2
							Element:p
								Then, we set the source video location:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								set source = http://media.s3.amazonaws.com/demo.mp4
						Node:
						(type) c
						(layer)2
							Element:p
								Note that you can edit the config file from the previous
							Element:a
								tutorial
								if you want.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Static thumbnails
									Node:
									(type) c
									(layer)3
										Element:p
											What we are going to do is simple: we will generate 3 small and 3 large thumbnails that will be uploaded to our S3 bucket. Small thumbnail size will be 200px wide and large ones 640px wide.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											-> jpg:200x = $s3/thumbnails/small/demo_#num#.jpg, number=$num -> jpg:640x = $s3/thumbnails/large/demo_#num#.jpg, number=$num
									Node:
									(type) c
									(layer)3
										Element:p
											As you notice, we used the
										Element:code
											#num#
											specifier in the filenames for the sequence number. In this example, the filenames will become: demo_01.jpg, demo_02.jpg and demo_03.jpg
									Node:
									(type) c
									(layer)3
										Element:p
											As we already saw in the first tutorial, we used the convenient variables
										Element:code
											$s3
											and
										Element:code
											$num
											to not repeat ourselves and to keep things organized.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Going further with static thumbnails
									Node:
									(type) c
									(layer)3
										Element:p
											We have developed a number of features to beautify your thumbnails such as filters Ã  la instagram, square format, border, rotation and shadow, so your thumbnails are unique. See a comparison below:
									Node:
									(type) c
									(layer)3
										Element:p
										Element:img
									Node:
									(type) c
									(layer)3
										Element:p
											Cool right? Let's see how to do this:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											-> jpg:500x500 = $s3/thumbnails/postcard/demo_#num#.jpg, square=true, filters=surrealistic, border_width=20, shadow=true
									Node:
									(type) c
									(layer)3
										Element:p
											We applied the filter
										Element:code
											surrealistic
											, added a white border of 20px, a drop shadow, and cropped the image to square format. The result should look great. Try testing different
										Element:a
											filters
											and settings to have the perfect picture.
									Node:
									(type) c
									(layer)3
										Element:p
											You can have a look at the
										Element:a
											full documentation
											.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Animated GIFs: a must to attract your users
									Node:
									(type) c
									(layer)3
										Element:p
											Animated GIFs are so trendy today that it's a big plus to use them to display a preview of a video.
									Node:
									(type) c
									(layer)3
										Element:p
										Element:img
									Node:
									(type) c
									(layer)3
										Element:p
											As always, it's really easy, we're doing all the heavy work from generating the GIF to optimizing it for you.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											-> gif:300x = $s3/animation.gif
									Node:
									(type) c
									(layer)3
										Element:p
											You can have a look at the
										Element:a
											documentation
											for more information.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Storyboard: get an insight of the video in one picture
									Node:
									(type) c
									(layer)3
										Element:p
											Storyboards are a neat way of getting insights into the video content. By looking at 8 pictures max, your users should have a good idea of what the video is about and whether they would like to watch it or not.
									Node:
									(type) c
									(layer)3
										Element:p
										Element:img
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											-> storyboard:640x = $s3/storyboard.png
									Node:
									(type) c
									(layer)3
										Element:p
											For more information, you can read the full
										Element:a
											documentation
											.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Submitting the config file
									Node:
									(type) c
									(layer)3
										Element:p
											This is how the config file looks so far:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											var s3 = s3://accesskey:secretkey@mybucket/demo var num = 3 # number of thumbnails we want to generate set source = http://media.s3.amazonaws.com.mp4 # We suggest you to use our Webhook Inspector https://app.coconut.co/tools/webhooks # to inspect the POST request we send. Very handy for testing set webhook = http://yourserver.com/webhook/coconut -> jpg:200x = $s3/thumbnails/small/demo_#num#.jpg, number=$num -> jpg:640x = $s3/thumbnails/large/demo_#num#.jpg, number=$num -> gif:300x = $s3/animation.gif -> storyboard:640x = $s3/storyboard.png
									Node:
									(type) c
									(layer)3
										Element:p
											Here is the curl command to create the job:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											curl https://api.coconut.co/v1/job \ -u api-key: \ -T coconut.conf
									Node:
									(type) c
									(layer)3
										Element:p
											We provide a number of
										Element:a
											client libraries
											to make requests very easily, so be sure to check them out.
									Node:
									(type) c
									(layer)3
										Element:p
											That concludes our tutorial about creating attractive and awesome video previews.
									Node:
									(type) c
									(layer)3
										Element:p
										Element:br
									Node:
									(type) c
									(layer)3
										Element:p
											The number of mobile users has increased making it essential to make your videos easily viewable under any conditions. In the
										Element:a
											Next tutorial
											, we will show you how to provide HTTP Live Streaming videos for iOS and android devices
										Element:a
										Element:i
									Node:
									(type) c
									(layer)3
										Element:hr
									Node:
									(type) c
									(layer)3
										Element:hr
