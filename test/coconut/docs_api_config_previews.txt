Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					API documentation
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Coconut's API is a config-based API built with simplicity and flexibility in mind.
							Element:br
								Encode your first video in less than 5 minutes.
			Node:
			(type) h1
			(layer)1
				Element:h1
					API Reference
			Node:
			(type) c
			(layer)1
				Element:p
				Element:a
					Docs
					/
				Element:a
					API
					/
				Element:a
					Config
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Video previews
						Node:
						(type) c
						(layer)2
							Element:p
							Element:strong
								Keyword:
								outputs must be prefixed by the keyword
							Element:code
								->
								followed by the format ID (type of preview).
						Node:
						(type) c
						(layer)2
							Element:p
								The first value is the
							Element:a
								output URL
								which is the
							Element:em
								full
								location URL with filename where you want the image(s) to be uploaded to.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Thumbnails
						Node:
						(type) c
						(layer)2
							Element:p
							Element:em
								Simple Format pattern:
							Element:code
								jpg|png:$widthx$height
						Node:
						(type) c
						(layer)2
							Element:p
								Generate thumbnails in either jpg or png format from the source video.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Example
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											var s3 = s3://accesskey:secretkey@bucket/previews/thumbnails -> jpg:300x = $s3/thumb_#num#.jpg, number=3 -> png:600x600 = $s3/thumb_square_#num#.png, number=10, square=true -> jpg:600x = $s3/thumb_large.jpg
									Node:
									(type) c
									(layer)3
										Element:p
											The output URL must contain the filename of the thumbnails with the special variable
										Element:code
											#num#
											which will be replaced by the sequence number. The sequence number is mandatory if
										Element:code
											number
											> 1.
									Node:
									(type) c
									(layer)3
										Element:p
										Element:code
											#num#
											is equal to
										Element:code
											%.2d
											in printf format identifier. If you need another format identifier, you can use a decimal identifier like
										Element:code
											mythumb_%1d.jpg
											to have mythumb_1.jpg, mythumb_2.jpg, etc.
									Node:
									(type) c
									(layer)3
										Element:p
											For instance, image names generated with filename mythumb_#num#.jpg will be: mythumb_01.jpg, mythumb_02.jpg, etc...
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Parameters
									Node:
									(type) c
									(layer)3
										Element:table
										Element:thead
										Element:tr
										Element:th
											Name
										Element:th
											Type
										Element:th
											Default
										Element:th
											Required
										Element:tr
										Element:td
										Element:strong
											if
										Element:br
											If the given condition is false, the current section won't be processed.
										Element:br
											Logical operators we support are: < > <= >= <> != = AND OR NOT.
										Element:td
											string
										Element:td
										Element:td
											No
										Element:tr
										Element:td
										Element:strong
											number
										Element:br
											Number of thumbnail you want to generate. Must be <= 100. Use either
										Element:code
											number
											or
										Element:code
											offsets
											, not both.
										Element:td
											int
										Element:td
											1
										Element:td
											No
										Element:tr
										Element:td
										Element:strong
											offsets
										Element:br
										Element:em
											Available since 2015-05-07
										Element:br
										Element:br
											Offset(s) in second where you want to extract the thumbnail(s). Use either
										Element:code
											number
											or
										Element:code
											offsets
											, not both.
										Element:td
											[int,]
										Element:td
										Element:td
											No
										Element:tr
										Element:td
										Element:strong
											square
										Element:br
											The image will be cropped to a square. Use the
										Element:code
											width
											value to determine the size.
										Element:br
										Element:em
										Element:code
											width
											and
										Element:code
											height
											are required.
										Element:td
											bool
										Element:td
											false
										Element:td
											No
										Element:tr
										Element:td
										Element:strong
											fit
										Element:br
										Element:em
											Available since 2016-05-24
										Element:br
											Option to change the fit mode. To keep the original aspect ratio by cropping instead of padding (default behavior), set
										Element:code
											fit=crop
										Element:br
										Element:em
										Element:code
											width
											and
										Element:code
											height
											are required.
										Element:td
											string
										Element:td
											pad
										Element:td
											No
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Animated GIF
						Node:
						(type) c
						(layer)2
							Element:p
							Element:em
								Simple Format pattern:
							Element:code
								gif:$widthx
						Node:
						(type) c
						(layer)2
							Element:p
								Create an animated GIF from the source video. Width must be < 500px.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Example
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											-> gif:240x = s3://accesskey:secretkey@bucket/previews/animation.gif
									Node:
									(type) c
									(layer)3
										Element:p
										Element:br
									Node:
									(type) c
									(layer)3
										Element:p
											The GIF maximum duration is 5 seconds.
									Node:
									(type) c
									(layer)3
										Element:p
											All the generated GIF files are optimized but keep in mind that the result is usually pretty fat: 1-5MB for 5 seconds. Prefer using a small width value to have good quality/size for your preview.
									Node:
									(type) c
									(layer)3
										Element:p
											The height is automatically calculated according to the given
										Element:code
											width
											and the original aspect ratio.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Parameters
									Node:
									(type) c
									(layer)3
										Element:table
										Element:thead
										Element:tr
										Element:th
											Name
										Element:th
											Type
										Element:th
											Default
										Element:th
											Required
										Element:tr
										Element:td
										Element:strong
											if
										Element:br
											If the given condition is false, the current section won't be processed.
										Element:br
											Logical operators we support are: < > <= >= <> != = AND OR NOT.
										Element:td
											string
										Element:td
										Element:td
											No
										Element:tr
										Element:td
										Element:strong
											offset
										Element:br
											Will start the animation from the given offset in second
										Element:td
											int
										Element:td
											video_length / 3
										Element:td
											No
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Storyboard
						Node:
						(type) c
						(layer)2
							Element:p
							Element:em
								Simple Format pattern:
							Element:code
								storyboard:$widthx
						Node:
						(type) c
						(layer)2
							Element:p
								Generate a storyboard from the source video. Width must be < 1280px.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Example
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											-> storyboard:800x = s3://accesskey:secretkey@bucket/previews/storyboard.png
									Node:
									(type) c
									(layer)3
										Element:p
										Element:br
											The number of tiles depends on two factors:
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
											The
										Element:code
											width
											of the whole storyboard
										Element:li
											The length of the video
									Node:
									(type) c
									(layer)3
										Element:p
											The Storyboard image format is png and its aspect ratio is
										Element:strong
											always 16/9
											.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Parameters
									Node:
									(type) c
									(layer)3
										Element:table
										Element:thead
										Element:tr
										Element:th
											Name
										Element:th
											Type
										Element:th
											Default
										Element:th
											Required
										Element:tr
										Element:td
										Element:strong
											if
										Element:br
											If the given condition is false, the current section won't be processed.
										Element:br
											Logical operators we support are: < > <= >= <> != = AND OR NOT.
										Element:td
											string
										Element:td
										Element:td
											No
									Node:
									(type) c
									(layer)3
										Element:hr
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:a
											Getting started
										Element:li
										Element:a
											Creating jobs
										Element:ul
										Element:li
										Element:a
											Config file
										Element:ul
										Element:li
										Element:a
											Variables
										Element:li
										Element:a
											Source
										Element:li
										Element:a
											Video encoding
										Element:li
										Element:a
											HLS
										Element:li
										Element:a
											MPEG-DASH
										Element:li
										Element:a
											Video previews
										Element:li
										Element:a
											Webhook
										Element:li
										Element:a
											Tutorials
										Element:ul
										Element:li
										Element:a
											Encoding videos
										Element:li
										Element:a
											Creating thumbnails
										Element:li
										Element:a
											HTTP Live Streaming
										Element:li
										Element:a
											Receiving Webhooks
										Element:li
										Element:a
											Sample
										Element:li
										Element:span
											References
										Element:ul
										Element:li
										Element:a
											Supported CDN
										Element:li
										Element:a
											Format Specs
										Element:li
										Element:a
											Libraries
										Element:li
										Element:a
											Error codes
									Node:
									(type) c
									(layer)3
										Element:hr
