Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
				Element:a
					ArcGIS REST API: Spatial Analysis Service
			Node:
			(type) c
			(layer)1
												Node:
												(type) c
												(layer)4
													Element:aside
													Element:h4
														Getting Started
													Element:h4
														Tasks
													Element:h4
														Context
												Node:
												(type) c
												(layer)4
													Element:a
														Back to Top
			Node:
			(type) h1
			(layer)1
				Element:h1
					Field Calculator
			Node:
			(type) c
			(layer)1
															Node:
															(type) c
															(layer)5
																Element:aside
																Element:h4
																	In this topic
																Element:h5
																	In this topic
																Element:ul
																Element:li
																Element:a
																	Request URL
																Element:li
																Element:a
																	Request Parameters
																Element:li
																Element:a
																	Response
																Element:li
																Element:a
																	Accessing results
															Node:
															(type) c
															(layer)5
																Element:p
																Element:img
															Node:
															(type) c
															(layer)5
																Element:p
																	The
																Element:b
																	Field Calculator
																	task updates values in one or more fields based on an expression you provide. The fields to update can be existing fields or a new fields that you create as part of the task request. The expression can use values from other fields. The result of this task is a new layer with all the fields from the input layer as well as any new fields you create. Field values are updated according to the expressions you provide.
															Node:
															(type) c
															(layer)5
						Node:
						(type) c
						(layer)2
							Element:h2
								Request URL
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								http://<analysis url>/FieldCalculator/submitJob
						Node:
						(type) c
						(layer)2
							Element:p
															Node:
															(type) c
															(layer)5
						Node:
						(type) c
						(layer)2
							Element:h2
								Request Parameters
						Node:
						(type) c
						(layer)2
							Element:p
						Node:
						(type) c
						(layer)2
							Element:h4
						Node:
						(type) c
						(layer)2
							Element:table
							Element:colgroup
							Element:colgroup
							Element:thead
							Element:tr
							Element:th
								Parameter
							Element:th
								Description
							Element:tbody
							Element:tr
							Element:td
							Element:p
							Element:span
								inputLayer
							Element:p
								(Required)
							Element:td
							Element:p
								The layer containing the field to be updated.
							Element:p
								The layer can be:
							Element:ul
							Element:li
								a URL to a feature service layer with an optional filter to select specific features, or
							Element:li
								a feature collection.
							Element:p
							Element:i
								Examples
								:
							Element:ul
							Element:li
							Element:span
								{"url": <feature service layer url>, "filter": <where clause>}
							Element:li
							Element:span
								{"layerDefinition": {}, "featureSet": {}, "filter": <where clause>}
							Element:p
								If a
							Element:span
								<where clause>
								is provided, only those records that match the where clause will be written to the
							Element:span
								resultLayer
							Element:tr
							Element:td
							Element:p
							Element:span
								expressions
							Element:p
								(Required)
							Element:td
							Element:p
								A list of fields and expressions. The general form is:
							Element:ul
							Element:li
							Element:span
								[ "field": { <field_description> }, "expression": <expresssion>}, ...]
							Element:p
							Element:b
								Field
							Element:p
								To update an existing field, supply the name of the field in
							Element:span
								<field_description>
								. For example, to update values in a field named
							Element:span
								POP2014
								:
							Element:ul
							Element:li
							Element:span
								"field": {"name": "POP2014"}
							Element:p
								To create a new field, supply the following in the
							Element:span
								<field_description>
								:
							Element:ul
							Element:li
							Element:span
								"name"
								— the name of the new field. When the task executes, the named will be checked for illegal characters. If any illegal characters exist, they will be replaced with underscores in the
							Element:span
								resultLayer
							Element:li
							Element:span
								"alias"
								— the alias name of the field, usually text that is more descriptive than the field name. The alias can contain spaces and other characters that cannot be used in field names.
							Element:li
							Element:span
								"type"
								— one of four types:
							Element:span
								"String"
								,
							Element:span
								"Integer"
								,
							Element:span
								"Double"
								, or
							Element:span
								"Date"
							Element:li
							Element:span
								"length"
								— required for type
							Element:span
								"String"
								, optional otherwise.
							Element:p
							Element:i
								Example
								: add a new field named
							Element:span
								POPDEN
								:
							Element:pre
							Element:code
								"field":{ "name":"POPDEN", "alias":"Population Density per Square Mile", "type":"Double"}
							Element:p
							Element:b
								Expression
							Element:p
								To use the value of an existing field in an expression, surround the field name with exclamation marks. For example, to calculate a population density value based on the value of the field
							Element:span
								POP
								divided by the field
							Element:span
								AREA
								:
							Element:ul
							Element:li
							Element:span
								"expression": "!POP! / !AREA!"
							Element:p
								Python is used to interpret expressions. The
							Element:b
								Field Calculator
								task uses the ArcGIS geoprocessing tool Calculate Field to perform all calculations. For more examples of expressions, see the
							Element:a
								Calculate Field tool reference documentation
								. As you read this tool reference page, keep the following in mind:
							Element:ul
							Element:li
								The syntax for the Calculate Field tool states that expressions can be based on VB (Visual Basic) or Python. Python syntax is used by
							Element:b
								Field Calculator
								.
							Element:li
								You cannot use code blocks as they present a security risk.
							Element:li
								The Calculate Field tool can only calculate one field at a time. You can calculate multiple fields with
							Element:b
								Field Calculator
								by supplying a list of fields and expressions.
							Element:p
							Element:i
								Working with strings
							Element:p
								When assigning strings to text fields, values must be single-quoted. For example, to assign the string VACANT to a field:
							Element:span
								"expression":" 'VACANT' "
								. Strings can be concatenated using
							Element:span
								+
								.
							Element:p
							Element:p
							Element:i
								Example
								: Create a new field named
							Element:span
								FULL_NAME
								and calculate its value to be the concatenation of
							Element:span
								STREET_NAME
								and
							Element:span
								STREET_TYPE
								.
							Element:pre
							Element:code
								{"field": { "name":"FULL_NAME", "type":"String", "alias":"Street name", "length":"80"}, "expression":"!STREET_NAME! + !STREET_TYPE!"}
							Element:p
								You can use Python string functions on field values. For example, to upper-case values in the field
							Element:span
								LotStatus
								:
							Element:p
							Element:span
								"expression": "!LotStatus!.upper()"
							Element:pre
							Element:code
							Element:p
							Element:i
								Working with numbers
							Element:p
								Functions in Python's
							Element:span
								math
								module can be used. For example, to calculate the square root of the values in the field
							Element:span
								POP
								:
							Element:p
							Element:span
								"expression": "math.sqrt(!POP!)"
							Element:p
								The math module provides number-theoretic and representation functions, power and logarithmic functions, trigonometric functions, angular conversion functions, hyperbolic functions, and mathematical constants. To learn more about the math module, see the Python help.
							Element:pre
							Element:code
							Element:p
							Element:i
								Working with dates
							Element:p
								Functions in Python's
							Element:span
								datetime
								module can be used.
							Element:p
							Element:i
								Example
								: Use the datetime model to calculate the current date and time into an existing field
							Element:span
								EDITDATE.
							Element:pre
							Element:code
								{"field": {"name":"EDITDATE"}, "expression":"datetime.datetime.now()"}
							Element:p
								The syntax for date and time constants is
							Element:span
								YYYYMMDD hh:mm:ss
								.
							Element:pre
							Element:code
							Element:p
							Element:i
								Working with geometries
							Element:p
								As shown in the Calculate Field documentation, you can access properties of
							Element:a
								feature geometry
								, including
							Element:span
								type
								,
							Element:span
								extent
								,
							Element:span
								centroid
								,
							Element:span
								firstPoint
								,
							Element:span
								lastPoint
								,
							Element:span
								area
								,
							Element:span
								length
								,
							Element:span
								isMultipart
								, and
							Element:span
								partCount
								. The syntax to access geometry properties is
							Element:span
								!shape.<property>!
								. For example, to access the
							Element:span
								length
								property:
							Element:span
								"expression": "!shape.area!"
							Element:p
								Expressions can use the geometry
							Element:span
								area
								and
							Element:span
								length
								properties with an areal or linear unit to convert the value to a different unit of measure (for example,
							Element:span
								!shape.length@kilometers!
								). If
							Element:span
								inputLayer
								is stored in a geographic coordinate system and a linear unit is supplied (for example, miles), the length will be calculated using a geodesic algorithm. Using areal units on geographic data will yield questionable results as decimal degrees are not consistent across the globe.
							Element:ul
							Element:li
								Areal unit of measure keywords:
							Element:ul
							Element:li
								ACRES | ARES | HECTARES | SQUARECENTIMETERS | SQUAREDECIMETERS | SQUAREINCHES | SQUAREFEET | SQUAREKILOMETERS | SQUAREMETERS | SQUAREMILES | SQUAREMILLIMETERS | SQUAREYARDS | SQUAREMAPUNITS | UNKNOWN
							Element:li
								Linear unit of measure keywords:
							Element:ul
							Element:li
								CENTIMETERS | DECIMALDEGREES | DECIMETERS | FEET | INCHES | KILOMETERS | METERS | MILES | MILLIMETERS | NAUTICALMILES | POINTS | UNKNOWN | YARDS
							Element:p
								Expressions can be used to calculate the geodesic area or length of a feature by using
							Element:span
								geodesicArea
								or
							Element:span
								geodesicLength
								properties combined with areal or linear units of measure. For example:
							Element:ul
							Element:li
							Element:span
								!shape.geodesicArea@hectares!
							Element:li
							Element:span
								!shape.geodesicLength@miles!
							Element:p
							Element:tr
							Element:td
							Element:p
							Element:span
								outputName
							Element:td
							Element:p
								If provided, the task will create a feature service of the results. You define the name of the service. If
							Element:span
								outputName
								is not supplied, the task will return a feature collection.
							Element:i
								Syntax:
							Element:pre
							Element:code
								{ "serviceProperties": { "name": "<service name>" } }
							Element:tr
							Element:td
							Element:p
							Element:span
								context
							Element:td
							Element:p
								Context contains additional settings that affect task execution. For Field Calculator, there are two settings.
							Element:ol
							Element:li
							Element:a
								Extent
								(
							Element:span
								extent
								)—a bounding box that defines the analysis area. Only those features in the
							Element:span
								inputLayer
								that intersect the bounding box will have the field values updated.
							Element:li
							Element:a
								Output Spatial Reference
								(
							Element:span
								outSR
								)—the output features will be projected into the output spatial reference.
							Element:p
							Element:i
								Syntax:
							Element:pre
							Element:code
								{ "extent" : {extent} "outSR" : {spatial reference} }
							Element:tr
							Element:td
							Element:p
							Element:span
								f
							Element:td
							Element:p
								The response format. The default response format is
							Element:span
								html
								.
							Element:p
							Element:i
								Values
								:
							Element:span
								html
								|
							Element:span
								json
															Node:
															(type) c
															(layer)5
						Node:
						(type) c
						(layer)2
							Element:h2
								Response
						Node:
						(type) c
						(layer)2
							Element:p
								When you submit a request, the service assigns a unique job ID for the transaction.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:i
								Syntax:
							Element:pre
							Element:code
								{ "jobId": "<unique job identifier>", "jobStatus": "<job status>" }
						Node:
						(type) c
						(layer)2
							Element:p
								After the initial request is submitted you can use the
							Element:span
								jobId
								to periodically check the status of the job and messages as described in the topic
							Element:a
								Checking job status
								. Once the job has successfully completed, you use the
							Element:span
								jobId
								to retrieve the results. To track the status, you can make a request of the following form:
							Element:pre
							Element:code
								http://<analysis url>/FieldCalculator/jobs/<jobId>
															Node:
															(type) c
															(layer)5
						Node:
						(type) c
						(layer)2
							Element:h2
								Accessing results
						Node:
						(type) c
						(layer)2
							Element:p
								When the status of the job request is
							Element:span
								esriJobSucceded
								, you can access the results of the analysis by making a request of the following form:
							Element:pre
							Element:code
								http://<analysis url>/FieldCalculator/jobs/<jobId>/results/<output parameter name>?token=<your token>&f=json
						Node:
						(type) c
						(layer)2
							Element:p
						Node:
						(type) c
						(layer)2
							Element:h4
						Node:
						(type) c
						(layer)2
							Element:table
							Element:colgroup
							Element:colgroup
							Element:thead
							Element:tr
							Element:th
								Parameter
							Element:th
								Description
							Element:tbody
							Element:tr
							Element:td
							Element:p
							Element:span
								resultLayer
							Element:td
							Element:p
							Element:i
								Request example:
							Element:pre
							Element:code
								{"url": "http://<analysis url>/FieldCalculator/jobs/<jobId>/results/resultLayer"}
							Element:p
								The result has properties for parameter name, data type, and value. The contents of value depends upon the
							Element:span
								outputName
								parameter provided in the initial request.
							Element:ul
							Element:li
								If
							Element:span
								outputName
								was provided,
							Element:span
								value
								contains the url to the feature service layer.
							Element:pre
							Element:code
								{ "paramName":"resultLayer", "dataType":"GPString", "value":{"url":"<hosted featureservice layer url>"} }
							Element:li
								If
							Element:span
								outputName
								was not provided,
							Element:span
								value
								contains a feature collection.
							Element:pre
							Element:code
								{ "paramName":"resultLayer", "dataType":"GPString", "value":{"layerDefinition": {}, "featureSet": {}} }
							Element:p
								See
							Element:a
								Feature Output
								for more information about how the result layer or collection is accessed.
						Node:
						(type) c
						(layer)2
							Element:hr
						Node:
						(type) c
						(layer)2
							Element:p
							Element:a
								Feedback on this topic?
						Node:
						(type) c
						(layer)2
							Element:h5
								In this topic
						Node:
						(type) c
						(layer)2
							Element:h5
								In this topic
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:a
								Request URL
							Element:li
							Element:a
								Request Parameters
							Element:li
							Element:a
								Response
							Element:li
							Element:a
								Accessing results
						Node:
						(type) c
						(layer)2
							Element:footer
							Element:p
							Element:small
							Element:a
								Copyright © 2017 Esri
								. All rights reserved. |
							Element:a
								Privacy
								|
							Element:a
								Terms of use
								|
							Element:a
								Plain English
								|
							Element:a
								FAQ
