Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					API Initialization
					Following are the values you need to set in the header of your API call
			Node:
			(type) c
			(layer)1
				Element:hr
					Instead of adding authentication information in the payload like Core V3, this version of the API allows you to add the authentication and user information in the header. This will make payloads smaller and easier to follow. These are the values you are expected to supply in the header. [block:parameters] { "data": { "h-0": "KEY", "h-1": "VALUE", "h-2": "Comments", "h-3": "Notes", "0-0": "X-SP-GATEWAY", "0-1": "CLIENT_ID|CLIENT_SECRET", "0-2": "Developer’s client_id and secret", "0-3": "You can send bulk instructions here", "1-0": "X-SP-USER", "1-1": "OAUTH_KEY|FINGERPRINT", "1-2": "User’s Oauth_key and device fingerprint", "1-3": "Paginated. Search by name and email available", "2-1": "IP.ADD.OF.USR", "2-0": "X-SP-USER-IP", "2-2": "IP Address of the user", "2-3": "Allows you to register a new user to SynapsePay" }, "cols": 3, "rows": 3 } [/block] [block:api-header] { "type": "basic", "title": "" } [/block] ##Client App Initialization Instead of using the API directly, you can also use our Client libraries to interface with REST V3. Following is how you initialize the environment for the libraries. [block:code] { "codes": [ { "code": "from synapse_pay_rest import Client\n\nrequired = {\n 'client_id': '', # your client id\n 'client_secret': '', # your client secret\n 'fingerprint': '', # user's fingerprint\n 'ip_address': '', # user's IP\n}\n\noptions = {\n 'development_mode': True, # default False\n 'logging': False # logs to stdout if True\n}\n\nclient = Client(**required, **options)", "language": "python" }, { "code": "const SynapsePay = require('synapsepay');\nconst Clients = SynapsePay.Clients;\nconst Users = SynapsePay.Users;\nconst Nodes = SynapsePay.Nodes;\nconst Transactions = SynapsePay.Transactions;\n\nconst client = new Clients(\n 'YOUR_CLIENT_ID',\n 'YOUR_CLIENT_SECRET',\n IS_PRODUCTION # boolean\n);", "language": "javascript", "name": "Node.js" }, { "code": "require 'synapse_pay_rest'\n\nargs = {\n # synapse client_id\n client_id: '',\n # synapse client_secret\n client_secret: '',\n # a hashed value, either unique to user or static for app\n fingerprint: '',\n # the user's IP\n ip_address: '',\n # (optional) requests go to sandbox endpoints if true\n development_mode: true,\n # (optional) if true logs requests to stdout\n logging: true,\n # (optional) file path to write logs to\n log_to: nil\n}\n\nclient = SynapsePayRest::Client.new(args)", "language": "ruby" }, { "code": "require(dirname(__FILE__) . '/../../init.php');\n\nuse SynapsePayRest\\Client;\n\n$options = array(\n 'oauth_key'=> USER_OAUTH KEY, # Optional,\n 'fingerprint'=> USER_FINGERPRINT,\n 'client_id'=> YOUR_CLIENT_ID,\n 'client_secret'=> YOUR_CLIENT_SECRET,\n 'development_mode'=> true, #True will ping sandbox.synapsepay.com\n 'ip_address'=> USER_IP_ADDRESS\n);\n\n\n$user = A_SYNAPSE_USER_OBJECT\n\n$client = new Client($options, $user['_id']); # USER_ID Optional", "language": "php" } ] } [/block] Please note that you do not need to add oauth_key in the options dictionary after the user is created and oauth is performed. The libraries automatically do that for you.
			Node:
			(type) c
			(layer)1
				Element:footer
				Element:a
					readme.io
