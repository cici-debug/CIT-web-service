Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					Authentication
				Element:a
					¶
			Node:
			(type) c
			(layer)1
				Element:p
					API users must have a registered Gengo account to acquire a pair of keys - a public key and private key. The
				Element:tt
					is used to identify a user, and the
				Element:span
					api_key
				Element:tt
					is used to authenticate each API call. The combination effectively functions as a user name and password. Therefore you should keep the private_key private.
				Element:span
					private_key
			Node:
			(type) c
			(layer)1
				Element:p
					The keys are created and retrieved from the
				Element:a
					account settings page
					.
			Node:
			(type) c
			(layer)1
				Element:p
					Every restricted (non public) REST call will need to be authenticated by Gengo as below.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Signing Calls
							Element:a
								¶
						Node:
						(type) c
						(layer)2
							Element:p
								All authenticated calls must be signed:
						Node:
						(type) c
						(layer)2
							Element:ol
							Element:li
								Get the current Unix epoch time as an integer
							Element:li
								Insert the time as the value to a ‘ts’ key in your argument list
							Element:li
								Calculate the SHA1 hash of the timestamp against your private key
							Element:li
								Append the value of this hash to the argument list as a parameter named api_sig
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Example API authenticated call
							Element:a
								¶
						Node:
						(type) c
						(layer)2
							Element:table
							Element:tr
							Element:td
							Element:pre
								1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42
							Element:td
							Element:pre
							Element:span
								#!/usr/bin/python
							Element:span
								# -*- coding: utf-8 -*-
							Element:span
								from
							Element:span
								hashlib
							Element:span
								import
							Element:span
								sha1
							Element:span
								import
							Element:span
								hmac
							Element:span
								import
							Element:span
								json
							Element:span
								import
							Element:span
								requests
							Element:span
								import
							Element:span
								time
							Element:span
								if
							Element:span
								__name__
							Element:span
								==
							Element:span
								'__main__'
							Element:span
								:
							Element:span
								PUBLIC_KEY
							Element:span
								=
							Element:span
								'your public key'
							Element:span
								PRIVATE_KEY
							Element:span
								=
							Element:span
								'your private key'
							Element:span
								# submit a comment for job ID 20
							Element:span
								JOB_ID
							Element:span
								=
							Element:span
								'20'
							Element:span
								COMMENT
							Element:span
								=
							Element:span
								'Please use British spelling'
							Element:span
								URL
							Element:span
								=
							Element:span
								"http://api.gengo.com/v2/translate/job/{0}/comment"
							Element:span
								.
							Element:span
								format
							Element:span
								(
							Element:span
								JOB_ID
							Element:span
								)
							Element:span
								header
							Element:span
								=
							Element:span
								{
							Element:span
								"Accept"
							Element:span
								:
							Element:span
								"application/json"
							Element:span
								}
							Element:span
								data
							Element:span
								=
							Element:span
								{
							Element:span
								# 'data' must be flattened. We use json.dumps()
							Element:span
								"data"
							Element:span
								:
							Element:span
								json
							Element:span
								.
							Element:span
								dumps
							Element:span
								({
							Element:span
								"body"
							Element:span
								:
							Element:span
								COMMENT
							Element:span
								},
							Element:span
								separators
							Element:span
								=
							Element:span
								(
							Element:span
								','
							Element:span
								,
							Element:span
								':'
							Element:span
								)),
							Element:span
								"api_key"
							Element:span
								:
							Element:span
								PUBLIC_KEY
							Element:span
								,
							Element:span
								"api_sig"
							Element:span
								:
							Element:span
								PRIVATE_KEY
							Element:span
								,
							Element:span
								"ts"
							Element:span
								:
							Element:span
								str
							Element:span
								(
							Element:span
								int
							Element:span
								(
							Element:span
								time
							Element:span
								.
							Element:span
								time
							Element:span
								()))
							Element:span
								}
							Element:span
								# use your private_key to create an hmac
							Element:span
								data
							Element:span
								[
							Element:span
								"api_sig"
							Element:span
								]
							Element:span
								=
							Element:span
								hmac
							Element:span
								.
							Element:span
								new
							Element:span
								(
							Element:span
								data
							Element:span
								[
							Element:span
								"api_sig"
							Element:span
								],
							Element:span
								data
							Element:span
								[
							Element:span
								"ts"
							Element:span
								],
							Element:span
								sha1
							Element:span
								)
							Element:span
								.
							Element:span
								hexdigest
							Element:span
								()
							Element:span
								post_comment
							Element:span
								=
							Element:span
								requests
							Element:span
								.
							Element:span
								post
							Element:span
								(
							Element:span
								URL
							Element:span
								,
							Element:span
								data
							Element:span
								=
							Element:span
								data
							Element:span
								,
							Element:span
								headers
							Element:span
								=
							Element:span
								header
							Element:span
								)
							Element:span
								res_json
							Element:span
								=
							Element:span
								json
							Element:span
								.
							Element:span
								loads
							Element:span
								(
							Element:span
								post_comment
							Element:span
								.
							Element:span
								text
							Element:span
								)
							Element:span
								if
							Element:span
								not
							Element:span
								res_json
							Element:span
								[
							Element:span
								"opstat"
							Element:span
								]
							Element:span
								==
							Element:span
								"ok"
							Element:span
								:
							Element:span
								msg
							Element:span
								=
							Element:span
								"API error occured.
							Element:span
								\n
							Element:span
								error msg: {0}"
							Element:span
								.
							Element:span
								format
							Element:span
								(
							Element:span
								res_json
							Element:span
								[
							Element:span
								"err"
							Element:span
								]
							Element:span
								)
							Element:span
								raise
							Element:span
								AssertionError
							Element:span
								(
							Element:span
								msg
							Element:span
								)
							Element:span
								else
							Element:span
								:
							Element:span
								print
							Element:span
								(
							Element:span
								res_json
							Element:span
								)
						Node:
						(type) c
						(layer)2
							Element:footer
							Element:a
							Element:span
								MENU
							Element:i
							Element:a
							Element:a
							Element:a
							Element:a
							Element:span
								© 2008-2017 Gengo, Inc
							Element:span
							Element:a
								Legal
							Element:span
							Element:a
								Quality Policy
							Element:a
							Element:p
								Professional, people-powered translation in one click
