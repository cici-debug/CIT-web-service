Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					First steps
				Element:a
					¶
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Follow these steps to get started
							Element:a
								¶
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:a
								Step 1: Create a sandbox account and obtain an API key
							Element:li
							Element:a
								Step 2: Play in the sandbox with your API keys
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Step 1: Create a sandbox account and obtain an API key
										Element:a
											¶
									Node:
									(type) c
									(layer)3
										Element:p
											Every API call must be authorized using an API key. While you’re testing, you should use the sandbox and generate your keys from there. In this tutorial I will show you how to create a sandbox account, so that you can get your API keys to make calls to the Gengo Translate API.
									Node:
									(type) c
									(layer)3
										Element:p
											First you need to
										Element:a
											create a free sandbox account
											.
									Node:
									(type) c
									(layer)3
										Element:p
											After logging in, go to your Account section, and click on “API settings” in the right-hand menu.
									Node:
									(type) c
									(layer)3
										Element:p
											This is where your API keys will be stored. To create a new key, click “Generate Key”.
									Node:
									(type) c
									(layer)3
										Element:p
											Each public key has a corresponding private key and callback URL. The public key is what identifies you - like your login name. The private key is like your password - do NOT share it with anyone, or they may be able to access your account. The callback URL is helpful if you want Gengo to send status updates about the progress of your job to your server or application.
									Node:
									(type) c
									(layer)3
										Element:p
											Copy the public and private keys so you can use them in your application.
									Node:
									(type) c
									(layer)3
										Element:table
										Element:tr
										Element:td
										Element:pre
											1 2 3 4 5
										Element:td
										Element:pre
										Element:span
											#!/usr/bin/python
										Element:span
											# -*- coding: utf-8 -*-
										Element:span
											PUBLIC_KEY
										Element:span
											=
										Element:span
											'rspZJxEnswelpvS0)tdwM]7uPjkcgR%@k_mN[Z1ac_3a=#EN
										Element:span
											%r
										Element:span
											=]cKwxq98-XQdK'
										Element:span
											PRIVATE_KEY
										Element:span
											=
										Element:span
											'IlUyZP5TISBSxRzEm0mil$L}-0FxeX(24W1d#TkY{qNkh42Q3B}m2)XJi_nYqrl^'
									Node:
									(type) c
									(layer)3
										Element:p
											That’s it! In the next step we’ll show some API calls in action.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Step 2: Play in the sandbox with your API keys
										Element:a
											¶
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Basic GET call
							Element:a
								¶
						Node:
						(type) c
						(layer)2
							Element:p
								In this tutorial I will demonstrate how to make API calls using some command-line Python scripts. In all examples, we’ll assume the following constant values:
						Node:
						(type) c
						(layer)2
							Element:table
							Element:tr
							Element:td
							Element:pre
								1 2 3 4 5 6 7 8
							Element:td
							Element:pre
							Element:span
								#!/usr/bin/python
							Element:span
								# -*- coding: utf-8 -*-
							Element:span
								PUBLIC_KEY
							Element:span
								=
							Element:span
								'your public key'
							Element:span
								PRIVATE_KEY
							Element:span
								=
							Element:span
								'your private key'
							Element:span
								URL
							Element:span
								=
							Element:span
								'http://api.sandbox.gengo.com/v2/'
							Element:span
								RESPONSE_TYPE
							Element:span
								=
							Element:span
								'json'
							Element:span
								header
							Element:span
								=
							Element:span
								{
							Element:span
								"Accept"
							Element:span
								:
							Element:span
								"application/{0}"
							Element:span
								.
							Element:span
								format
							Element:span
								(
							Element:span
								RESPONSE_TYPE
							Element:span
								)}
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Retrieving language pairs
							Element:a
								¶
						Node:
						(type) c
						(layer)2
							Element:p
								First we’ll make a simple call to retrieve a list of translation language pairs.
						Node:
						(type) c
						(layer)2
							Element:table
							Element:tr
							Element:td
							Element:pre
								1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37
							Element:td
							Element:pre
							Element:span
								#!/usr/bin/python
							Element:span
								# -*- coding: utf-8 -*-
							Element:span
								from
							Element:span
								hashlib
							Element:span
								import
							Element:span
								sha1
							Element:span
								import
							Element:span
								hmac
							Element:span
								import
							Element:span
								json
							Element:span
								import
							Element:span
								requests
							Element:span
								import
							Element:span
								time
							Element:span
								if
							Element:span
								__name__
							Element:span
								==
							Element:span
								'__main__'
							Element:span
								:
							Element:span
								PUBLIC_KEY
							Element:span
								=
							Element:span
								'your public key'
							Element:span
								PRIVATE_KEY
							Element:span
								=
							Element:span
								'your private key'
							Element:span
								URL
							Element:span
								=
							Element:span
								"http://api.gengo.com/v2/translate/service/language_pairs"
							Element:span
								header
							Element:span
								=
							Element:span
								{
							Element:span
								"Accept"
							Element:span
								:
							Element:span
								"application/json"
							Element:span
								}
							Element:span
								data
							Element:span
								=
							Element:span
								{
							Element:span
								"api_key"
							Element:span
								:
							Element:span
								PUBLIC_KEY
							Element:span
								,
							Element:span
								"api_sig"
							Element:span
								:
							Element:span
								PRIVATE_KEY
							Element:span
								,
							Element:span
								"ts"
							Element:span
								:
							Element:span
								str
							Element:span
								(
							Element:span
								int
							Element:span
								(
							Element:span
								time
							Element:span
								.
							Element:span
								time
							Element:span
								()))
							Element:span
								}
							Element:span
								# use your private_key to create an hmac
							Element:span
								data
							Element:span
								[
							Element:span
								"api_sig"
							Element:span
								]
							Element:span
								=
							Element:span
								hmac
							Element:span
								.
							Element:span
								new
							Element:span
								(
							Element:span
								data
							Element:span
								[
							Element:span
								"api_sig"
							Element:span
								],
							Element:span
								data
							Element:span
								[
							Element:span
								"ts"
							Element:span
								],
							Element:span
								sha1
							Element:span
								)
							Element:span
								.
							Element:span
								hexdigest
							Element:span
								()
							Element:span
								get_language_pair
							Element:span
								=
							Element:span
								requests
							Element:span
								.
							Element:span
								get
							Element:span
								(
							Element:span
								URL
							Element:span
								,
							Element:span
								headers
							Element:span
								=
							Element:span
								header
							Element:span
								,
							Element:span
								params
							Element:span
								=
							Element:span
								data
							Element:span
								)
							Element:span
								res_json
							Element:span
								=
							Element:span
								json
							Element:span
								.
							Element:span
								loads
							Element:span
								(
							Element:span
								get_language_pair
							Element:span
								.
							Element:span
								text
							Element:span
								)
							Element:span
								if
							Element:span
								not
							Element:span
								res_json
							Element:span
								[
							Element:span
								"opstat"
							Element:span
								]
							Element:span
								==
							Element:span
								"ok"
							Element:span
								:
							Element:span
								msg
							Element:span
								=
							Element:span
								"API error occured.
							Element:span
								\n
							Element:span
								error msg: {0}"
							Element:span
								.
							Element:span
								format
							Element:span
								(
							Element:span
								res_json
							Element:span
								[
							Element:span
								"err"
							Element:span
								]
							Element:span
								)
							Element:span
								raise
							Element:span
								AssertionError
							Element:span
								(
							Element:span
								msg
							Element:span
								)
							Element:span
								else
							Element:span
								:
							Element:span
								print
							Element:span
								(
							Element:span
								res_json
							Element:span
								)
						Node:
						(type) c
						(layer)2
							Element:p
								Return value:
						Node:
						(type) c
						(layer)2
							Element:pre
								{ "opstat": "ok", "response": [ { "tier": "standard", "lc_tgt": "en", "lc_src": "de", "unit_price": 0.05, "currency": "USD" }, { "tier": "pro", "lc_tgt": "en", "lc_src": "de", "unit_price": 0.10, "currency": "USD" }, ... ... ..., { "tier": "pro", "lc_tgt": "en", "lc_src": "pt-br", "unit_price": 0.10, "currency": "USD" } ] }
						Node:
						(type) c
						(layer)2
							Element:p
								What we get back is data about each supported language pair, including the quality level (or tier) and unit price.
						Node:
						(type) c
						(layer)2
							Element:p
								So, that’s a very simple example of how to retrieve data through the Gengo Translate API.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Basic POST call
							Element:a
								¶
						Node:
						(type) c
						(layer)2
							Element:p
								Now let’s submit some jobs for human translation. The sandbox allows users to quickly add fake credits so you can easily submit jobs. First, login and add some fake credits to your account.
						Node:
						(type) c
						(layer)2
							Element:p
								Once that’s done, open the example jobs-post.py script and edit fields for two jobs to submit. Add some text to have translated in the ‘body_src’ field, and check that the source, target, and tier parameters are what we want. We can also send some custom data to associate with each job; this is data specific to your service and won’t be touched at any time. Custom data will be returned verbatim whenever the job is requested.
						Node:
						(type) c
						(layer)2
							Element:table
							Element:tr
							Element:td
							Element:pre
								1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58
							Element:td
							Element:pre
							Element:span
								#!/usr/bin/python
							Element:span
								# -*- coding: utf-8 -*-
							Element:span
								from
							Element:span
								hashlib
							Element:span
								import
							Element:span
								sha1
							Element:span
								import
							Element:span
								hmac
							Element:span
								import
							Element:span
								json
							Element:span
								import
							Element:span
								requests
							Element:span
								import
							Element:span
								time
							Element:span
								if
							Element:span
								__name__
							Element:span
								==
							Element:span
								'__main__'
							Element:span
								:
							Element:span
								PUBLIC_KEY
							Element:span
								=
							Element:span
								'your public key'
							Element:span
								PRIVATE_KEY
							Element:span
								=
							Element:span
								'your private key'
							Element:span
								URL
							Element:span
								=
							Element:span
								"http://api.gengo.com/v2/translate/jobs"
							Element:span
								header
							Element:span
								=
							Element:span
								{
							Element:span
								"Accept"
							Element:span
								:
							Element:span
								"application/json"
							Element:span
								}
							Element:span
								data
							Element:span
								=
							Element:span
								{
							Element:span
								"api_key"
							Element:span
								:
							Element:span
								PUBLIC_KEY
							Element:span
								,
							Element:span
								"api_sig"
							Element:span
								:
							Element:span
								PRIVATE_KEY
							Element:span
								,
							Element:span
								"ts"
							Element:span
								:
							Element:span
								str
							Element:span
								(
							Element:span
								int
							Element:span
								(
							Element:span
								time
							Element:span
								.
							Element:span
								time
							Element:span
								()))
							Element:span
								}
							Element:span
								# use your private_key to create an hmac
							Element:span
								data
							Element:span
								[
							Element:span
								"api_sig"
							Element:span
								]
							Element:span
								=
							Element:span
								hmac
							Element:span
								.
							Element:span
								new
							Element:span
								(
							Element:span
								data
							Element:span
								[
							Element:span
								"api_sig"
							Element:span
								],
							Element:span
								data
							Element:span
								[
							Element:span
								"ts"
							Element:span
								],
							Element:span
								sha1
							Element:span
								)
							Element:span
								.
							Element:span
								hexdigest
							Element:span
								()
							Element:span
								job1
							Element:span
								=
							Element:span
								{
							Element:span
								'slug'
							Element:span
								:
							Element:span
								'job test 1'
							Element:span
								,
							Element:span
								'body_src'
							Element:span
								:
							Element:span
								'one two three four'
							Element:span
								,
							Element:span
								'lc_src'
							Element:span
								:
							Element:span
								'en'
							Element:span
								,
							Element:span
								'lc_tgt'
							Element:span
								:
							Element:span
								'ja'
							Element:span
								,
							Element:span
								'tier'
							Element:span
								:
							Element:span
								'standard'
							Element:span
								,
							Element:span
								'auto_approve'
							Element:span
								:
							Element:span
								1
							Element:span
								,
							Element:span
								'custom_data'
							Element:span
								:
							Element:span
								'some custom data untouched by Gengo.'
							Element:span
								,
							Element:span
								}
							Element:span
								job2
							Element:span
								=
							Element:span
								{
							Element:span
								'slug'
							Element:span
								:
							Element:span
								'job test 2'
							Element:span
								,
							Element:span
								'body_src'
							Element:span
								:
							Element:span
								'five six seven eight'
							Element:span
								,
							Element:span
								'lc_src'
							Element:span
								:
							Element:span
								'en'
							Element:span
								,
							Element:span
								'lc_tgt'
							Element:span
								:
							Element:span
								'ja'
							Element:span
								,
							Element:span
								'tier'
							Element:span
								:
							Element:span
								'standard'
							Element:span
								,
							Element:span
								'comment'
							Element:span
								:
							Element:span
								'This one has a comment'
							Element:span
								,
							Element:span
								}
							Element:span
								jobs
							Element:span
								=
							Element:span
								{
							Element:span
								'job_1'
							Element:span
								:
							Element:span
								job1
							Element:span
								,
							Element:span
								'job_2'
							Element:span
								:
							Element:span
								job2
							Element:span
								}
							Element:span
								data
							Element:span
								[
							Element:span
								"data"
							Element:span
								]
							Element:span
								=
							Element:span
								json
							Element:span
								.
							Element:span
								dumps
							Element:span
								({
							Element:span
								'jobs'
							Element:span
								:
							Element:span
								jobs
							Element:span
								},
							Element:span
								separators
							Element:span
								=
							Element:span
								(
							Element:span
								','
							Element:span
								,
							Element:span
								':'
							Element:span
								))
							Element:span
								post_job
							Element:span
								=
							Element:span
								requests
							Element:span
								.
							Element:span
								post
							Element:span
								(
							Element:span
								URL
							Element:span
								,
							Element:span
								data
							Element:span
								=
							Element:span
								data
							Element:span
								,
							Element:span
								headers
							Element:span
								=
							Element:span
								header
							Element:span
								)
							Element:span
								res_json
							Element:span
								=
							Element:span
								json
							Element:span
								.
							Element:span
								loads
							Element:span
								(
							Element:span
								post_job
							Element:span
								.
							Element:span
								text
							Element:span
								)
							Element:span
								if
							Element:span
								not
							Element:span
								res_json
							Element:span
								[
							Element:span
								"opstat"
							Element:span
								]
							Element:span
								==
							Element:span
								"ok"
							Element:span
								:
							Element:span
								msg
							Element:span
								=
							Element:span
								"API error occured.
							Element:span
								\n
							Element:span
								error msg: {0}"
							Element:span
								.
							Element:span
								format
							Element:span
								(
							Element:span
								res_json
							Element:span
								[
							Element:span
								"err"
							Element:span
								]
							Element:span
								)
							Element:span
								raise
							Element:span
								AssertionError
							Element:span
								(
							Element:span
								msg
							Element:span
								)
							Element:span
								else
							Element:span
								:
							Element:span
								print
							Element:span
								(
							Element:span
								res_json
							Element:span
								)
						Node:
						(type) c
						(layer)2
							Element:p
								You’ll want to review documentation for the “
							Element:a
								translate/jobs
								” entry-point to see what other parameters are available.
						Node:
						(type) c
						(layer)2
							Element:p
								So, let’s post these two jobs:
						Node:
						(type) c
						(layer)2
							Element:pre
								python jobs-post.py
						Node:
						(type) c
						(layer)2
							Element:p
								The response will let you know various statistics about the order:
						Node:
						(type) c
						(layer)2
							Element:table
							Element:tr
							Element:td
							Element:pre
								1 2 3 4 5 6 7 8 9
							Element:td
							Element:pre
							Element:span
								{
							Element:span
								"opstat"
							Element:span
								:
							Element:span
								"ok"
							Element:span
								,
							Element:span
								"response"
							Element:span
								:
							Element:span
								{
							Element:span
								"order_id"
							Element:span
								:
							Element:span
								914451
							Element:span
								,
							Element:span
								"job_count"
							Element:span
								:
							Element:span
								2
							Element:span
								,
							Element:span
								"credits_used"
							Element:span
								:
							Element:span
								0.40
							Element:span
								,
							Element:span
								"currency"
							Element:span
								:
							Element:span
								"USD"
							Element:span
								}
							Element:span
								}
						Node:
						(type) c
						(layer)2
							Element:p
								In the response from a job
							Element:tt
								, one of the most important pieces of info is the
							Element:span
								post
							Element:tt
								, which can be used to retrieve information about the order, such as the job ids of the jobs placed.
							Element:span
								order
							Element:span
								id
						Node:
						(type) c
						(layer)2
							Element:footer
							Element:a
							Element:span
								MENU
							Element:i
							Element:a
							Element:a
							Element:a
							Element:a
							Element:span
								© 2008-2017 Gengo, Inc
							Element:span
							Element:a
								Legal
							Element:span
							Element:a
								Quality Policy
							Element:a
							Element:p
								Professional, people-powered translation in one click
