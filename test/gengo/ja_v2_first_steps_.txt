Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					はじめの一歩
				Element:a
					¶
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								開始するには、以下のステップに従ってください
							Element:a
								¶
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:a
								ステップ1: Sandboxアカウントを作成して、APIキーを取得します。
							Element:li
							Element:a
								ステップ2: あなたのAPIキーを使って、Sandbox環境で遊んでみましょう
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											ステップ1: Sandboxアカウントを作成して、APIキーを取得します。
										Element:a
											¶
									Node:
									(type) c
									(layer)3
										Element:p
											あらゆるAPIの呼び出しは、APIキーを用いて承認される必要があります。テスト中は、Sandbox環境をご利用いただき、そこからあなたのキーを生成してください。このチュートリアルでは、Sandboxアカウントの作成方法をご説明して、Gengoの翻訳APIを呼び出すためのAPIキーを生成できるようにします。
									Node:
									(type) c
									(layer)3
										Element:p
											まず、
										Element:a
											無料のSandboxアカウントを作成
											する必要があります。
									Node:
									(type) c
									(layer)3
										Element:p
											ログイン後にAccountセクションに行き、右側にあるメニューから “API settings” をクリックしてください。
									Node:
									(type) c
									(layer)3
										Element:p
											ここにあなたのAPIキーが保存されます。別のキーを生成するには “Generate Key” をクリックしてください。
									Node:
									(type) c
									(layer)3
										Element:p
											各パブリックキーには、対応するプライベートキーとコールバックURLがあります。パブリックキーはあなたを識別するもので、あなたのログイン名と似た働きをします。プライベートキーはいわばあなたのパスワードなので、絶対に秘密にしてください。他人に知られた場合、その人はあなたのアカウントにアクセスできてしまいます。コールバックURLは、案件の進行状況についてステータスアップデートをGengoからあなたのサーバーやアプリケーションに送ってほしい場合に役立ちます。
									Node:
									(type) c
									(layer)3
										Element:p
											生成したパブリックキーとプライベートキーをコピーして、ご自分のアプリケーションで利用できるようにしましょう。
									Node:
									(type) c
									(layer)3
										Element:table
										Element:tr
										Element:td
										Element:pre
											1 2 3 4 5
										Element:td
										Element:pre
										Element:span
											#!/usr/bin/python
										Element:span
											# -*- coding: utf-8 -*-
										Element:span
											PUBLIC_KEY
										Element:span
											=
										Element:span
											'rspZJxEnswelpvS0)tdwM]7uPjkcgR%@k_mN[Z1ac_3a=#EN
										Element:span
											%r
										Element:span
											=]cKwxq98-XQdK'
										Element:span
											PRIVATE_KEY
										Element:span
											=
										Element:span
											'IlUyZP5TISBSxRzEm0mil$L}-0FxeX(24W1d#TkY{qNkh42Q3B}m2)XJi_nYqrl^'
									Node:
									(type) c
									(layer)3
										Element:p
											これだけです! 次のステップでは、APIコールの例をいくつかご紹介します。
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											ステップ2: あなたのAPIキーを使って、Sandbox環境で遊んでみましょう
										Element:a
											¶
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								ベーシックGETコール
							Element:a
								¶
						Node:
						(type) c
						(layer)2
							Element:p
								このチュートリアルでは、APIの呼び出しを行う方法を数種類のPHPスクリプトをコマンドラインで使用しながら具体的にご説明しています。これらすべての例では、以下の定数値を仮定しています。
						Node:
						(type) c
						(layer)2
							Element:table
							Element:tr
							Element:td
							Element:pre
								1 2 3 4 5 6 7 8
							Element:td
							Element:pre
							Element:span
								#!/usr/bin/python
							Element:span
								# -*- coding: utf-8 -*-
							Element:span
								PUBLIC_KEY
							Element:span
								=
							Element:span
								'your public key'
							Element:span
								PRIVATE_KEY
							Element:span
								=
							Element:span
								'your private key'
							Element:span
								URL
							Element:span
								=
							Element:span
								'http://api.sandbox.gengo.com/v2/'
							Element:span
								RESPONSE_TYPE
							Element:span
								=
							Element:span
								'json'
							Element:span
								header
							Element:span
								=
							Element:span
								{
							Element:span
								"Accept"
							Element:span
								:
							Element:span
								"application/{0}"
							Element:span
								.
							Element:span
								format
							Element:span
								(
							Element:span
								RESPONSE_TYPE
							Element:span
								)}
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								言語ペアの読み出し
							Element:a
								¶
						Node:
						(type) c
						(layer)2
							Element:p
								まずは、単純な呼び出しを行い、翻訳対応している言語ペアのリストを検索します。
						Node:
						(type) c
						(layer)2
							Element:table
							Element:tr
							Element:td
							Element:pre
								1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37
							Element:td
							Element:pre
							Element:span
								#!/usr/bin/python
							Element:span
								# -*- coding: utf-8 -*-
							Element:span
								from
							Element:span
								hashlib
							Element:span
								import
							Element:span
								sha1
							Element:span
								import
							Element:span
								hmac
							Element:span
								import
							Element:span
								json
							Element:span
								import
							Element:span
								requests
							Element:span
								import
							Element:span
								time
							Element:span
								if
							Element:span
								__name__
							Element:span
								==
							Element:span
								'__main__'
							Element:span
								:
							Element:span
								PUBLIC_KEY
							Element:span
								=
							Element:span
								'your public key'
							Element:span
								PRIVATE_KEY
							Element:span
								=
							Element:span
								'your private key'
							Element:span
								URL
							Element:span
								=
							Element:span
								"http://api.gengo.com/v2/translate/service/language_pairs"
							Element:span
								header
							Element:span
								=
							Element:span
								{
							Element:span
								"Accept"
							Element:span
								:
							Element:span
								"application/json"
							Element:span
								}
							Element:span
								data
							Element:span
								=
							Element:span
								{
							Element:span
								"api_key"
							Element:span
								:
							Element:span
								PUBLIC_KEY
							Element:span
								,
							Element:span
								"api_sig"
							Element:span
								:
							Element:span
								PRIVATE_KEY
							Element:span
								,
							Element:span
								"ts"
							Element:span
								:
							Element:span
								str
							Element:span
								(
							Element:span
								int
							Element:span
								(
							Element:span
								time
							Element:span
								.
							Element:span
								time
							Element:span
								()))
							Element:span
								}
							Element:span
								# use your private_key to create an hmac
							Element:span
								data
							Element:span
								[
							Element:span
								"api_sig"
							Element:span
								]
							Element:span
								=
							Element:span
								hmac
							Element:span
								.
							Element:span
								new
							Element:span
								(
							Element:span
								data
							Element:span
								[
							Element:span
								"api_sig"
							Element:span
								],
							Element:span
								data
							Element:span
								[
							Element:span
								"ts"
							Element:span
								],
							Element:span
								sha1
							Element:span
								)
							Element:span
								.
							Element:span
								hexdigest
							Element:span
								()
							Element:span
								get_language_pair
							Element:span
								=
							Element:span
								requests
							Element:span
								.
							Element:span
								get
							Element:span
								(
							Element:span
								URL
							Element:span
								,
							Element:span
								headers
							Element:span
								=
							Element:span
								header
							Element:span
								,
							Element:span
								params
							Element:span
								=
							Element:span
								data
							Element:span
								)
							Element:span
								res_json
							Element:span
								=
							Element:span
								json
							Element:span
								.
							Element:span
								loads
							Element:span
								(
							Element:span
								get_language_pair
							Element:span
								.
							Element:span
								text
							Element:span
								)
							Element:span
								if
							Element:span
								not
							Element:span
								res_json
							Element:span
								[
							Element:span
								"opstat"
							Element:span
								]
							Element:span
								==
							Element:span
								"ok"
							Element:span
								:
							Element:span
								msg
							Element:span
								=
							Element:span
								"API error occured.
							Element:span
								\n
							Element:span
								error msg: {0}"
							Element:span
								.
							Element:span
								format
							Element:span
								(
							Element:span
								res_json
							Element:span
								[
							Element:span
								"err"
							Element:span
								]
							Element:span
								)
							Element:span
								raise
							Element:span
								AssertionError
							Element:span
								(
							Element:span
								msg
							Element:span
								)
							Element:span
								else
							Element:span
								:
							Element:span
								print
							Element:span
								(
							Element:span
								res_json
							Element:span
								)
						Node:
						(type) c
						(layer)2
							Element:p
								戻り値
						Node:
						(type) c
						(layer)2
							Element:pre
								{ "opstat": "ok", "response": [ { "tier": "standard", "lc_tgt": "en", "lc_src": "de", "unit_price": 0.05, "currency": "USD" }, { "tier": "pro", "lc_tgt": "en", "lc_src": "de", "unit_price": 0.10, "currency": "USD" }, ... ... ..., { "tier": "pro", "lc_tgt": "en", "lc_src": "pt-br", "unit_price": 0.10, "currency": "USD" } ] }
						Node:
						(type) c
						(layer)2
							Element:p
								返ってくる値は、品質レベル (tier) と単価を含む各対応言語ペアに関するデータです。
						Node:
						(type) c
						(layer)2
							Element:p
								以上は、Gengoの翻訳APIを通じてデータを検索する方法のごく単純な例です。
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								ベーシックPOSTコール
							Element:a
								¶
						Node:
						(type) c
						(layer)2
							Element:p
								今度は、人力翻訳用に案件の注文をいくつか提出してみましょう。Sandbox環境では、ユーザーは仮ポイントを素早く追加して、案件の注文を簡単に提出できるようになっています。まずはログインし、あなたのアカウントに仮ポイントを適宜追加しましょう。
						Node:
						(type) c
						(layer)2
							Element:p
								仮ポイントを追加したら、jobs-post.pyのスクリプトの例を開き、フィールドを編集して2件の案件が提出できるようにします。’body_src’フィールドに翻訳用のテキストを適宜追加した後、ソース言語、ターゲット言語、レベルの各パラメータが希望通りであるかを確認しましょう。また、各案件と関連付けるカスタムデータを送信することもできます。これは、あなたに対するサービスに特化したデータで、その他の用途には一切使用されません。カスタムデータは案件がリクエストされるつど、全文そのままがリターンされます。
						Node:
						(type) c
						(layer)2
							Element:table
							Element:tr
							Element:td
							Element:pre
								1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58
							Element:td
							Element:pre
							Element:span
								#!/usr/bin/python
							Element:span
								# -*- coding: utf-8 -*-
							Element:span
								from
							Element:span
								hashlib
							Element:span
								import
							Element:span
								sha1
							Element:span
								import
							Element:span
								hmac
							Element:span
								import
							Element:span
								json
							Element:span
								import
							Element:span
								requests
							Element:span
								import
							Element:span
								time
							Element:span
								if
							Element:span
								__name__
							Element:span
								==
							Element:span
								'__main__'
							Element:span
								:
							Element:span
								PUBLIC_KEY
							Element:span
								=
							Element:span
								'your public key'
							Element:span
								PRIVATE_KEY
							Element:span
								=
							Element:span
								'your private key'
							Element:span
								URL
							Element:span
								=
							Element:span
								"http://api.gengo.com/v2/translate/jobs"
							Element:span
								header
							Element:span
								=
							Element:span
								{
							Element:span
								"Accept"
							Element:span
								:
							Element:span
								"application/json"
							Element:span
								}
							Element:span
								data
							Element:span
								=
							Element:span
								{
							Element:span
								"api_key"
							Element:span
								:
							Element:span
								PUBLIC_KEY
							Element:span
								,
							Element:span
								"api_sig"
							Element:span
								:
							Element:span
								PRIVATE_KEY
							Element:span
								,
							Element:span
								"ts"
							Element:span
								:
							Element:span
								str
							Element:span
								(
							Element:span
								int
							Element:span
								(
							Element:span
								time
							Element:span
								.
							Element:span
								time
							Element:span
								()))
							Element:span
								}
							Element:span
								# use your private_key to create an hmac
							Element:span
								data
							Element:span
								[
							Element:span
								"api_sig"
							Element:span
								]
							Element:span
								=
							Element:span
								hmac
							Element:span
								.
							Element:span
								new
							Element:span
								(
							Element:span
								data
							Element:span
								[
							Element:span
								"api_sig"
							Element:span
								],
							Element:span
								data
							Element:span
								[
							Element:span
								"ts"
							Element:span
								],
							Element:span
								sha1
							Element:span
								)
							Element:span
								.
							Element:span
								hexdigest
							Element:span
								()
							Element:span
								job1
							Element:span
								=
							Element:span
								{
							Element:span
								'slug'
							Element:span
								:
							Element:span
								'job test 1'
							Element:span
								,
							Element:span
								'body_src'
							Element:span
								:
							Element:span
								'one two three four'
							Element:span
								,
							Element:span
								'lc_src'
							Element:span
								:
							Element:span
								'en'
							Element:span
								,
							Element:span
								'lc_tgt'
							Element:span
								:
							Element:span
								'ja'
							Element:span
								,
							Element:span
								'tier'
							Element:span
								:
							Element:span
								'standard'
							Element:span
								,
							Element:span
								'auto_approve'
							Element:span
								:
							Element:span
								1
							Element:span
								,
							Element:span
								'custom_data'
							Element:span
								:
							Element:span
								'some custom data untouched by Gengo.'
							Element:span
								,
							Element:span
								}
							Element:span
								job2
							Element:span
								=
							Element:span
								{
							Element:span
								'slug'
							Element:span
								:
							Element:span
								'job test 2'
							Element:span
								,
							Element:span
								'body_src'
							Element:span
								:
							Element:span
								'five six seven eight'
							Element:span
								,
							Element:span
								'lc_src'
							Element:span
								:
							Element:span
								'en'
							Element:span
								,
							Element:span
								'lc_tgt'
							Element:span
								:
							Element:span
								'ja'
							Element:span
								,
							Element:span
								'tier'
							Element:span
								:
							Element:span
								'standard'
							Element:span
								,
							Element:span
								'comment'
							Element:span
								:
							Element:span
								'This one has a comment'
							Element:span
								,
							Element:span
								}
							Element:span
								jobs
							Element:span
								=
							Element:span
								{
							Element:span
								'job_1'
							Element:span
								:
							Element:span
								job1
							Element:span
								,
							Element:span
								'job_2'
							Element:span
								:
							Element:span
								job2
							Element:span
								}
							Element:span
								data
							Element:span
								[
							Element:span
								"data"
							Element:span
								]
							Element:span
								=
							Element:span
								json
							Element:span
								.
							Element:span
								dumps
							Element:span
								({
							Element:span
								'jobs'
							Element:span
								:
							Element:span
								jobs
							Element:span
								},
							Element:span
								separators
							Element:span
								=
							Element:span
								(
							Element:span
								','
							Element:span
								,
							Element:span
								':'
							Element:span
								))
							Element:span
								post_job
							Element:span
								=
							Element:span
								requests
							Element:span
								.
							Element:span
								post
							Element:span
								(
							Element:span
								URL
							Element:span
								,
							Element:span
								data
							Element:span
								=
							Element:span
								data
							Element:span
								,
							Element:span
								headers
							Element:span
								=
							Element:span
								header
							Element:span
								)
							Element:span
								res_json
							Element:span
								=
							Element:span
								json
							Element:span
								.
							Element:span
								loads
							Element:span
								(
							Element:span
								post_job
							Element:span
								.
							Element:span
								text
							Element:span
								)
							Element:span
								if
							Element:span
								not
							Element:span
								res_json
							Element:span
								[
							Element:span
								"opstat"
							Element:span
								]
							Element:span
								==
							Element:span
								"ok"
							Element:span
								:
							Element:span
								msg
							Element:span
								=
							Element:span
								"API error occured.
							Element:span
								\n
							Element:span
								error msg: {0}"
							Element:span
								.
							Element:span
								format
							Element:span
								(
							Element:span
								res_json
							Element:span
								[
							Element:span
								"err"
							Element:span
								]
							Element:span
								)
							Element:span
								raise
							Element:span
								AssertionError
							Element:span
								(
							Element:span
								msg
							Element:span
								)
							Element:span
								else
							Element:span
								:
							Element:span
								print
							Element:span
								(
							Element:span
								res_json
							Element:span
								)
						Node:
						(type) c
						(layer)2
							Element:p
								“
							Element:a
								translate/jobs
								” エントリーポインのドキュメントをご覧いただき、その他にどんなパラメータが利用できるかを確認されることをお勧めします。ただしこの例では、案件のグループ化をオフにしています (そうすると、各案件を異なる翻訳者が担当できます)。
						Node:
						(type) c
						(layer)2
							Element:p
								では、この2件の案件を送信してみましょう:
						Node:
						(type) c
						(layer)2
							Element:pre
								python jobs-post.py
						Node:
						(type) c
						(layer)2
							Element:p
								このレスポンスでは、ご注文に関する各種のデータを教えてくれます:
						Node:
						(type) c
						(layer)2
							Element:table
							Element:tr
							Element:td
							Element:pre
								1 2 3 4 5 6 7 8 9
							Element:td
							Element:pre
							Element:span
								{
							Element:span
								"opstat"
							Element:span
								:
							Element:span
								"ok"
							Element:span
								,
							Element:span
								"response"
							Element:span
								:
							Element:span
								{
							Element:span
								"order_id"
							Element:span
								:
							Element:span
								914451
							Element:span
								,
							Element:span
								"job_count"
							Element:span
								:
							Element:span
								2
							Element:span
								,
							Element:span
								"credits_used"
							Element:span
								:
							Element:span
								0.40
							Element:span
								,
							Element:span
								"currency"
							Element:span
								:
							Element:span
								"USD"
							Element:span
								}
							Element:span
								}
						Node:
						(type) c
						(layer)2
							Element:p
								案件の
							Element:tt
								からのレスポンスに含まれる最も重要な情報の1つは
							Element:span
								post
							Element:tt
								です。これは、ご注文に関する情報 (注文された各翻訳の案件IDなど) を取り出すときにも必要になります:
							Element:span
								order
							Element:span
								id
						Node:
						(type) c
						(layer)2
							Element:footer
							Element:a
							Element:span
								MENU
							Element:i
							Element:a
							Element:a
							Element:a
							Element:a
							Element:span
								© 2008-2017 Gengo, Inc
							Element:span
							Element:a
								ご利用規約
							Element:span
							Element:a
								品質方針
							Element:a
							Element:p
								法人様お問合せ先
							Element:br
								03-6450-5219
