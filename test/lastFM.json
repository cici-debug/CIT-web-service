[
  {
    "OptionalParams": [],
    "Url": "http://ws.audioscrobbler.com/2.0/",
    "ServiceName": "album.addTags",
    "RequiredParams": [
      {
        "ParamDescription": "The artist name",
        "ParamName": "artist"
      },
      {
        "ParamDescription": "The album name",
        "ParamName": "album"
      },
      {
        "ParamDescription": "A comma delimited list of user supplied tags to apply to this album. Accepts a maximum of 10 tags.",
        "ParamName": "tags"
      },
      {
        "ParamDescription": "A Last.fm API key.",
        "ParamName": "api_key"
      },
      {
        "ParamDescription": "A Last.fm method signature. See authentication for more information.",
        "ParamName": "api_sig"
      },
      {
        "ParamDescription": "A session key generated by authenticating a user via the authentication protocol.",
        "ParamName": "sk"
      }
    ],
    "ServiceDescription": "Tag an album using a list of user supplied tags."
  },
  {
    "OptionalParams": [
      {
        "ParamDescription": "The artist name",
        "ParamName": "artist"
      },
      {
        "ParamDescription": "The musicbrainz id for the artist",
        "ParamName": "mbid"
      },
      {
        "ParamDescription": "Transform misspelled artist names into correct artist names, returning the correct version instead.  The corrected artist name will be returned in the response.",
        "ParamName": "autocorrect[0|1]"
      },
      {
        "ParamDescription": "The page number to fetch.  Defaults to first page.",
        "ParamName": "page"
      },
      {
        "ParamDescription": "The number of results to fetch per page. Defaults to 50.",
        "ParamName": "limit"
      }
    ],
    "Url": "http://ws.audioscrobbler.com/2.0/?method=artist.gettoptracks&artist=cher&api_key=YOUR_API_KEY",
    "ServiceName": "artist.getTopTracks",
    "RequiredParams": [
      {
        "ParamDescription": "A Last.fm API key.",
        "ParamName": "api_key"
      }
    ],
    "ServiceDescription": "Get the top tracks by an artist on Last.fm, ordered by popularity"
  },
  {
    "OptionalParams": [
      {
        "ParamDescription": "The artist name",
        "ParamName": "artist"
      },
      {
        "ParamDescription": "The musicbrainz id for the artist",
        "ParamName": "mbid"
      },
      {
        "ParamDescription": "Transform misspelled artist names into correct artist names, returning the correct version instead.  The corrected artist name will be returned in the response.",
        "ParamName": "autocorrect[0|1]"
      }
    ],
    "Url": "http://ws.audioscrobbler.com/2.0/?method=artist.gettoptags&artist=cher&api_key=YOUR_API_KEY",
    "ServiceName": "artist.getTopTags",
    "RequiredParams": [
      {
        "ParamDescription": "A Last.fm API key.",
        "ParamName": "api_key"
      }
    ],
    "ServiceDescription": "Get the top tags for an artist on Last.fm, ordered by popularity."
  },
  {
    "OptionalParams": [
      {
        "ParamDescription": "The artist name",
        "ParamName": "artist"
      },
      {
        "ParamDescription": "The musicbrainz id for the artist",
        "ParamName": "mbid"
      },
      {
        "ParamDescription": "Transform misspelled artist names into correct artist names, returning the correct version instead.  The corrected artist name will be returned in the response.",
        "ParamName": "autocorrect[0|1]"
      },
      {
        "ParamDescription": "The page number to fetch.  Defaults to first page.",
        "ParamName": "page"
      },
      {
        "ParamDescription": "The number of results to fetch per page. Defaults to 50.",
        "ParamName": "limit"
      }
    ],
    "Url": "http://ws.audioscrobbler.com/2.0/?method=artist.gettopalbums&artist=cher&api_key=YOUR_API_KEY",
    "ServiceName": "artist.getTopAlbums",
    "RequiredParams": [
      {
        "ParamDescription": "A Last.fm API key.",
        "ParamName": "api_key"
      }
    ],
    "ServiceDescription": "Get the top albums for an artist on Last.fm, ordered by popularity."
  },
  {
    "OptionalParams": [
      {
        "ParamDescription": "Limit the number of similar artists returned",
        "ParamName": "limit"
      },
      {
        "ParamDescription": "The artist name",
        "ParamName": "artist"
      },
      {
        "ParamDescription": "Transform misspelled artist names into correct artist names, returning the correct version instead.  The corrected artist name will be returned in the response.",
        "ParamName": "autocorrect[0|1]"
      },
      {
        "ParamDescription": "The musicbrainz id for the artist",
        "ParamName": "mbid"
      }
    ],
    "Url": "http://ws.audioscrobbler.com/2.0/?method=artist.getsimilar&artist=cher&api_key=YOUR_API_KEY",
    "ServiceName": "artist.getSimilar",
    "RequiredParams": [
      {
        "ParamDescription": "A Last.fm API key.",
        "ParamName": "api_key"
      }
    ],
    "ServiceDescription": "Get all the artists similar to this artist"
  },
  {
    "OptionalParams": [
      {
        "ParamDescription": "The artist name",
        "ParamName": "artist"
      },
      {
        "ParamDescription": "The musicbrainz id for the artist",
        "ParamName": "mbid"
      },
      {
        "ParamDescription": "If called in non-authenticated mode you must specify the user to look up",
        "ParamName": "user"
      },
      {
        "ParamDescription": "Transform misspelled artist names into correct artist names, returning the correct version instead.  The corrected artist name will be returned in the response.",
        "ParamName": "autocorrect[0|1]"
      }
    ],
    "Url": "http://ws.audioscrobbler.com/2.0/?method=artist.getTags&artist=Red%20Hot%20Chili%20Peppers&user=RJ&api_key=YOUR_API_KEY",
    "ServiceName": "artist.getTags",
    "RequiredParams": [
      {
        "ParamDescription": "A Last.fm API key.",
        "ParamName": "api_key"
      }
    ],
    "ServiceDescription": "Get the tags applied by an individual user to an artist on Last.fm. If accessed as an authenticated service /and/ you don't supply a user parameter then this service will return tags for the authenticated user.   To retrieve the list of top tags applied to an artist by all users use artist.getTopTags."
  },
  {
    "OptionalParams": [
      {
        "ParamDescription": "The artist name",
        "ParamName": "artist"
      },
      {
        "ParamDescription": "The musicbrainz id for the artist",
        "ParamName": "mbid"
      },
      {
        "ParamDescription": "The language to return the biography in, expressed as an ISO 639 alpha-2 code.",
        "ParamName": "lang"
      },
      {
        "ParamDescription": "Transform misspelled artist names into correct artist names, returning the correct version instead.  The corrected artist name will be returned in the response.",
        "ParamName": "autocorrect[0|1]"
      },
      {
        "ParamDescription": "The username for the context of the request. If supplied, the user's playcount for this artist is included in the response.",
        "ParamName": "username"
      }
    ],
    "Url": "http://ws.audioscrobbler.com/2.0/?method=artist.getinfo&artist=Cher&api_key=YOUR_API_KEY",
    "ServiceName": "artist.getInfo",
    "RequiredParams": [
      {
        "ParamDescription": "A Last.fm API key.",
        "ParamName": "api_key"
      }
    ],
    "ServiceDescription": "Get the metadata for an artist. Includes biography, truncated at 300 characters."
  },
  {
    "OptionalParams": [],
    "Url": "http://ws.audioscrobbler.com/2.0/?method=artist.getcorrection&artist=Guns and Roses&api_key=YOUR_API_KEY",
    "ServiceName": "artist.getCorrection",
    "RequiredParams": [
      {
        "ParamDescription": "The artist name to correct.",
        "ParamName": "artist"
      },
      {
        "ParamDescription": "A Last.fm API key.",
        "ParamName": "api_key"
      }
    ],
    "ServiceDescription": "Use the last.fm corrections data to check whether the supplied artist has a correction to a canonical artist"
  },
  {
    "OptionalParams": [],
    "Url": "http://ws.audioscrobbler.com/2.0/",
    "ServiceName": "artist.addTags",
    "RequiredParams": [
      {
        "ParamDescription": "The artist name",
        "ParamName": "artist"
      },
      {
        "ParamDescription": "A comma delimited list of user supplied tags to apply to this artist. Accepts a maximum of 10 tags.",
        "ParamName": "tags"
      },
      {
        "ParamDescription": "A Last.fm API key.",
        "ParamName": "api_key"
      },
      {
        "ParamDescription": "A Last.fm method signature. See authentication for more information.",
        "ParamName": "api_sig"
      },
      {
        "ParamDescription": "A session key generated by authenticating a user via the authentication protocol.",
        "ParamName": "sk"
      }
    ],
    "ServiceDescription": "Tag an artist with one or more user supplied tags."
  },
  {
    "OptionalParams": [
      {
        "ParamDescription": "The number of results to fetch per page. Defaults to 30.",
        "ParamName": "limit"
      },
      {
        "ParamDescription": "The page number to fetch.  Defaults to first page.",
        "ParamName": "page"
      }
    ],
    "Url": "http://ws.audioscrobbler.com/2.0/?method=album.search&album=believe&api_key=YOUR_API_KEY",
    "ServiceName": "album.search",
    "RequiredParams": [
      {
        "ParamDescription": "The album name",
        "ParamName": "album"
      },
      {
        "ParamDescription": "A Last.fm API key.",
        "ParamName": "api_key"
      }
    ],
    "ServiceDescription": "Search for an album by name. Returns album matches sorted by relevance."
  },
  {
    "OptionalParams": [
      {
        "ParamDescription": "The artist name",
        "ParamName": "artist"
      },
      {
        "ParamDescription": "The album name",
        "ParamName": "album"
      },
      {
        "ParamDescription": "Transform misspelled artist names into correct artist names, returning the correct version instead.  The corrected artist name will be returned in the response.",
        "ParamName": "autocorrect[0|1]"
      },
      {
        "ParamDescription": "The musicbrainz id for the album",
        "ParamName": "mbid"
      }
    ],
    "Url": "http://ws.audioscrobbler.com/2.0/?method=album.gettoptags&artist=radiohead&album=the%20bends&api_key=YOUR_API_KEY",
    "ServiceName": "album.getTopTags",
    "RequiredParams": [
      {
        "ParamDescription": "A Last.fm API key.",
        "ParamName": "api_key"
      }
    ],
    "ServiceDescription": "Get the top tags for an album on Last.fm, ordered by popularity."
  },
  {
    "OptionalParams": [
      {
        "ParamDescription": "The artist name",
        "ParamName": "artist"
      },
      {
        "ParamDescription": "The album name",
        "ParamName": "album"
      },
      {
        "ParamDescription": "The musicbrainz id for the album",
        "ParamName": "mbid"
      },
      {
        "ParamDescription": "Transform misspelled artist names into correct artist names, returning the correct version instead.  The corrected artist name will be returned in the response.",
        "ParamName": "autocorrect[0|1]"
      },
      {
        "ParamDescription": "The username for the context of the request. If supplied, the user's playcount for this album is included in the response.",
        "ParamName": "username"
      },
      {
        "ParamDescription": "The language to return the biography in, expressed as an ISO 639 alpha-2 code.",
        "ParamName": "lang"
      }
    ],
    "Url": "http://ws.audioscrobbler.com/2.0/?method=album.getinfo&api_key=YOUR_API_KEY&artist=Cher&album=Believe",
    "ServiceName": "album.getInfo",
    "RequiredParams": [
      {
        "ParamDescription": "A Last.fm API key.",
        "ParamName": "api_key"
      }
    ],
    "ServiceDescription": "Get the metadata and tracklist for an album on Last.fm using the album name or a musicbrainz id."
  },
  {
    "OptionalParams": [
      {
        "ParamDescription": "The artist name",
        "ParamName": "artist"
      },
      {
        "ParamDescription": "The album name",
        "ParamName": "album"
      },
      {
        "ParamDescription": "The musicbrainz id for the album",
        "ParamName": "mbid"
      },
      {
        "ParamDescription": "Transform misspelled artist names into correct artist names, returning the correct version instead.  The corrected artist name will be returned in the response.",
        "ParamName": "autocorrect[0|1]"
      },
      {
        "ParamDescription": "If called in non-authenticated mode you must specify the user to look up",
        "ParamName": "user"
      }
    ],
    "Url": "http://ws.audioscrobbler.com/2.0/?method=album.gettags&artist=cher&album=believe&api_key=YOUR_API_KEY",
    "ServiceName": "album.getTags",
    "RequiredParams": [
      {
        "ParamDescription": "A Last.fm API key.",
        "ParamName": "api_key"
      }
    ],
    "ServiceDescription": "Get the tags applied by an individual user to an album on Last.fm. To retrieve the list of top tags applied to an album by all users use album.getTopTags."
  },
  {
    "OptionalParams": [],
    "Url": "http://ws.audioscrobbler.com/2.0/?method=user.getweeklychartlist&user=rj&api_key=YOUR_API_KEY",
    "ServiceName": "user.getWeeklyChartList",
    "RequiredParams": [
      {
        "ParamDescription": "The last.fm username to fetch the charts list for.",
        "ParamName": "user"
      },
      {
        "ParamDescription": "A Last.fm API key.",
        "ParamName": "api_key"
      }
    ],
    "ServiceDescription": "Get a list of available charts for this user, expressed as date ranges which can be sent to the chart services."
  },
  {
    "OptionalParams": [
      {
        "ParamDescription": "The date at which the chart should start from. See User.getWeeklyChartList for more.",
        "ParamName": "from"
      },
      {
        "ParamDescription": "The date at which the chart should end on. See User.getWeeklyChartList for more.",
        "ParamName": "to"
      }
    ],
    "Url": "http://ws.audioscrobbler.com/2.0/?method=user.getweeklytrackchart&user=rj&api_key=YOUR_API_KEY",
    "ServiceName": "user.getWeeklyTrackChart",
    "RequiredParams": [
      {
        "ParamDescription": "The last.fm username to fetch the charts of.",
        "ParamName": "user"
      },
      {
        "ParamDescription": "A Last.fm API key.",
        "ParamName": "api_key"
      }
    ],
    "ServiceDescription": "Get a track chart for a user profile, for a given date range. If no date range is supplied, it will return the most recent track chart for this user."
  },
  {
    "OptionalParams": [
      {
        "ParamDescription": "The date at which the chart should start from. See User.getWeeklyChartList for more.",
        "ParamName": "from"
      },
      {
        "ParamDescription": "The date at which the chart should end on. See User.getWeeklyChartList for more.",
        "ParamName": "to"
      }
    ],
    "Url": "http://ws.audioscrobbler.com/2.0/?method=user.getweeklyartistchart&user=rj&api_key=YOUR_API_KEY",
    "ServiceName": "user.getWeeklyArtistChart",
    "RequiredParams": [
      {
        "ParamDescription": "The last.fm username to fetch the charts of.",
        "ParamName": "user"
      },
      {
        "ParamDescription": "A Last.fm API key.",
        "ParamName": "api_key"
      }
    ],
    "ServiceDescription": "Get an artist chart for a user profile, for a given date range. If no date range is supplied, it will return the most recent artist chart for this user."
  },
  {
    "OptionalParams": [],
    "Url": "http://ws.audioscrobbler.com/2.0/",
    "ServiceName": "album.removeTag",
    "RequiredParams": [
      {
        "ParamDescription": "The artist name",
        "ParamName": "artist"
      },
      {
        "ParamDescription": "The album name",
        "ParamName": "album"
      },
      {
        "ParamDescription": "A single user tag to remove from this album.",
        "ParamName": "tag"
      },
      {
        "ParamDescription": "A Last.fm API key.",
        "ParamName": "api_key"
      },
      {
        "ParamDescription": "A Last.fm method signature. See authentication for more information.",
        "ParamName": "api_sig"
      },
      {
        "ParamDescription": "A session key generated by authenticating a user via the authentication protocol.",
        "ParamName": "sk"
      }
    ],
    "ServiceDescription": "Remove a user's tag from an album."
  },
  {
    "OptionalParams": [
      {
        "ParamDescription": "overall | 7day | 1month | 3month | 6month | 12month - The time period over which to retrieve top tracks for.",
        "ParamName": "period"
      },
      {
        "ParamDescription": "The number of results to fetch per page. Defaults to 50.",
        "ParamName": "limit"
      },
      {
        "ParamDescription": "The page number to fetch.  Defaults to first page.",
        "ParamName": "page"
      }
    ],
    "Url": "http://ws.audioscrobbler.com/2.0/?method=user.gettoptracks&user=rj&api_key=YOUR_API_KEY",
    "ServiceName": "user.getTopTracks",
    "RequiredParams": [
      {
        "ParamDescription": "The user name to fetch top tracks for.",
        "ParamName": "user"
      },
      {
        "ParamDescription": "A Last.fm API key.",
        "ParamName": "api_key"
      }
    ],
    "ServiceDescription": "Get the top tracks listened to by a user. You can stipulate a time period. Sends the overall chart by default."
  },
  {
    "OptionalParams": [
      {
        "ParamDescription": "Limit the number of tags returned",
        "ParamName": "limit"
      }
    ],
    "Url": "http://ws.audioscrobbler.com/2.0/?method=user.gettoptags&user=rj&api_key=YOUR_API_KEY",
    "ServiceName": "user.getTopTags",
    "RequiredParams": [
      {
        "ParamDescription": "The user name",
        "ParamName": "user"
      },
      {
        "ParamDescription": "A Last.fm API key.",
        "ParamName": "api_key"
      }
    ],
    "ServiceDescription": "Get the top tags used by this user."
  },
  {
    "OptionalParams": [
      {
        "ParamDescription": "overall | 7day | 1month | 3month | 6month | 12month - The time period over which to retrieve top artists for.",
        "ParamName": "period"
      },
      {
        "ParamDescription": "The number of results to fetch per page. Defaults to 50.",
        "ParamName": "limit"
      },
      {
        "ParamDescription": "The page number to fetch.  Defaults to first page.",
        "ParamName": "page"
      }
    ],
    "Url": "http://ws.audioscrobbler.com/2.0/?method=user.gettopartists&user=rj&api_key=YOUR_API_KEY",
    "ServiceName": "user.getTopArtists",
    "RequiredParams": [
      {
        "ParamDescription": "The user name to fetch top artists for.",
        "ParamName": "user"
      },
      {
        "ParamDescription": "A Last.fm API key.",
        "ParamName": "api_key"
      }
    ],
    "ServiceDescription": "Get the top artists listened to by a user. You can stipulate a time period. Sends the overall chart by default."
  },
  {
    "OptionalParams": [
      {
        "ParamDescription": "overall | 7day | 1month | 3month | 6month | 12month - The time period over which to retrieve top albums for.",
        "ParamName": "period"
      },
      {
        "ParamDescription": "The number of results to fetch per page. Defaults to 50.",
        "ParamName": "limit"
      },
      {
        "ParamDescription": "The page number to fetch.  Defaults to first page.",
        "ParamName": "page"
      }
    ],
    "Url": "http://ws.audioscrobbler.com/2.0/?method=user.gettopalbums&user=rj&api_key=YOUR_API_KEY",
    "ServiceName": "user.getTopAlbums",
    "RequiredParams": [
      {
        "ParamDescription": "The user name to fetch top albums for.",
        "ParamName": "user"
      },
      {
        "ParamDescription": "A Last.fm API key.",
        "ParamName": "api_key"
      }
    ],
    "ServiceDescription": "Get the top albums listened to by a user. You can stipulate a time period. Sends the overall chart by default."
  },
  {
    "OptionalParams": [
      {
        "ParamDescription": "The number of results to fetch per page. Defaults to 50. Maximum is 200.",
        "ParamName": "limit"
      },
      {
        "ParamDescription": "The page number to fetch.  Defaults to first page.",
        "ParamName": "page"
      },
      {
        "ParamDescription": "Beginning timestamp of a range - only display scrobbles after this time, in UNIX timestamp format (integer number of seconds since 00:00:00, January 1st 1970 UTC). This must be in the UTC time zone.",
        "ParamName": "from"
      },
      {
        "ParamDescription": "Includes extended data in each artist, and whether or not the user has loved each track",
        "ParamName": "extended"
      },
      {
        "ParamDescription": "End timestamp of a range - only display scrobbles before this time, in UNIX timestamp format (integer number of seconds since 00:00:00, January 1st 1970 UTC). This must be in the UTC time zone.",
        "ParamName": "to"
      }
    ],
    "Url": "http://ws.audioscrobbler.com/2.0/?method=user.getrecenttracks&user=rj&api_key=YOUR_API_KEY",
    "ServiceName": "user.getRecentTracks",
    "RequiredParams": [
      {
        "ParamDescription": "The last.fm username to fetch the recent tracks of.",
        "ParamName": "user"
      },
      {
        "ParamDescription": "A Last.fm API key.",
        "ParamName": "api_key"
      }
    ],
    "ServiceDescription": "Get a list of the recent tracks listened to by this user. Also includes the currently playing track with the nowplaying=\"true\" attribute if the user is currently listening."
  },
  {
    "OptionalParams": [
      {
        "ParamDescription": "The date at which the chart should start from. See User.getChartsList for more.",
        "ParamName": "from"
      },
      {
        "ParamDescription": "The date at which the chart should end on. See User.getChartsList for more.",
        "ParamName": "to"
      }
    ],
    "Url": "http://ws.audioscrobbler.com/2.0/?method=user.getweeklyalbumchart&user=rj&api_key=YOUR_API_KEY",
    "ServiceName": "user.getWeeklyAlbumChart",
    "RequiredParams": [
      {
        "ParamDescription": "The last.fm username to fetch the charts of.",
        "ParamName": "user"
      },
      {
        "ParamDescription": "A Last.fm API key.",
        "ParamName": "api_key"
      }
    ],
    "ServiceDescription": "Get an album chart for a user profile, for a given date range. If no date range is supplied, it will return the most recent album chart for this user."
  },
  {
    "OptionalParams": [
      {
        "ParamDescription": "The number of results to fetch per page. Defaults to 50.",
        "ParamName": "limit"
      },
      {
        "ParamDescription": "The page number to fetch.  Defaults to first page.",
        "ParamName": "page"
      }
    ],
    "Url": "http://ws.audioscrobbler.com/2.0/?method=user.getpersonaltags&user=rj&tag=rock&taggingtype=artist&api_key=YOUR_API_KEY",
    "ServiceName": "user.getPersonalTags",
    "RequiredParams": [
      {
        "ParamDescription": "The user who performed the taggings.",
        "ParamName": "user"
      },
      {
        "ParamDescription": "The tag you're interested in.",
        "ParamName": "tag"
      },
      {
        "ParamDescription": "The type of items which have been tagged",
        "ParamName": "taggingtype[artist|album|track]"
      },
      {
        "ParamDescription": "A Last.fm API key.",
        "ParamName": "api_key"
      }
    ],
    "ServiceDescription": "Get the user's personal tags"
  },
  {
    "OptionalParams": [
      {
        "ParamDescription": "The number of results to fetch per page. Defaults to 50.",
        "ParamName": "limit"
      },
      {
        "ParamDescription": "The page number to fetch.  Defaults to first page.",
        "ParamName": "page"
      }
    ],
    "Url": "http://ws.audioscrobbler.com/2.0/?method=user.getlovedtracks&user=rj&api_key=YOUR_API_KEY",
    "ServiceName": "user.getLovedTracks",
    "RequiredParams": [
      {
        "ParamDescription": "The user name to fetch the loved tracks for.",
        "ParamName": "user"
      },
      {
        "ParamDescription": "A Last.fm API key.",
        "ParamName": "api_key"
      }
    ],
    "ServiceDescription": "Get the last 50 tracks loved by a user."
  },
  {
    "OptionalParams": [
      {
        "ParamDescription": "The user to fetch info for.  Defaults to the authenticated user.",
        "ParamName": "user"
      }
    ],
    "Url": "http://ws.audioscrobbler.com/2.0/?method=user.getinfo&user=rj&api_key=YOUR_API_KEY",
    "ServiceName": "user.getInfo",
    "RequiredParams": [
      {
        "ParamDescription": "A Last.fm API key.",
        "ParamName": "api_key"
      }
    ],
    "ServiceDescription": "Get information about a user profile."
  },
  {
    "OptionalParams": [
      {
        "ParamDescription": "The album name.",
        "ParamName": "album"
      },
      {
        "ParamDescription": "The track number of the track on the album.",
        "ParamName": "trackNumber"
      },
      {
        "ParamDescription": "Sub-client version (not public, only enabled for certain API keys)",
        "ParamName": "context"
      },
      {
        "ParamDescription": "The MusicBrainz Track ID.",
        "ParamName": "mbid"
      },
      {
        "ParamDescription": "The length of the track in seconds.",
        "ParamName": "duration"
      },
      {
        "ParamDescription": "The album artist - if this differs from the track artist.",
        "ParamName": "albumArtist"
      }
    ],
    "Url": "http://ws.audioscrobbler.com/2.0/",
    "ServiceName": "track.updateNowPlaying",
    "RequiredParams": [
      {
        "ParamDescription": "The artist name.",
        "ParamName": "artist"
      },
      {
        "ParamDescription": "The track name.",
        "ParamName": "track"
      },
      {
        "ParamDescription": "A Last.fm API key.",
        "ParamName": "api_key"
      },
      {
        "ParamDescription": "A Last.fm method signature. See authentication for more information.",
        "ParamName": "api_sig"
      },
      {
        "ParamDescription": "A session key generated by authenticating a user via the authentication protocol.",
        "ParamName": "sk"
      }
    ],
    "ServiceDescription": "Used to notify Last.fm that a user has started listening to a track. Parameter names are case sensitive."
  },
  {
    "OptionalParams": [
      {
        "ParamDescription": "An unix timestamp to start at.",
        "ParamName": "startTimestamp"
      },
      {
        "ParamDescription": "The page number to fetch.  Defaults to first page.",
        "ParamName": "page"
      },
      {
        "ParamDescription": "An unix timestamp to end at.",
        "ParamName": "endTimestamp"
      }
    ],
    "Url": "http://ws.audioscrobbler.com/2.0/?method=user.getartisttracks&user=rj&artist=metallica&api_key=YOUR_API_KEY",
    "ServiceName": "user.getArtistTracks",
    "RequiredParams": [
      {
        "ParamDescription": "The last.fm username to fetch the recent tracks of.",
        "ParamName": "user"
      },
      {
        "ParamDescription": "The artist name you are interested in",
        "ParamName": "artist"
      },
      {
        "ParamDescription": "A Last.fm API key.",
        "ParamName": "api_key"
      }
    ],
    "ServiceDescription": "Get a list of tracks by a given artist scrobbled by this user, including scrobble time. Can be limited to specific timeranges, defaults to all time."
  },
  {
    "OptionalParams": [],
    "Url": "http://ws.audioscrobbler.com/2.0/",
    "ServiceName": "track.unlove",
    "RequiredParams": [
      {
        "ParamDescription": "A track name (utf8 encoded)",
        "ParamName": "track"
      },
      {
        "ParamDescription": "An artist name (utf8 encoded)",
        "ParamName": "artist"
      },
      {
        "ParamDescription": "A Last.fm API key.",
        "ParamName": "api_key"
      },
      {
        "ParamDescription": "A Last.fm method signature. See authentication for more information.",
        "ParamName": "api_sig"
      },
      {
        "ParamDescription": "A session key generated by authenticating a user via the authentication protocol.",
        "ParamName": "sk"
      }
    ],
    "ServiceDescription": "UnLove a track for a user profile."
  },
  {
    "OptionalParams": [
      {
        "ParamDescription": "The number of results to fetch per page. Defaults to 30.",
        "ParamName": "limit"
      },
      {
        "ParamDescription": "The page number to fetch.  Defaults to first page.",
        "ParamName": "page"
      },
      {
        "ParamDescription": "Narrow your search by specifying an artist.",
        "ParamName": "artist"
      }
    ],
    "Url": "http://ws.audioscrobbler.com/2.0/?method=track.search&track=Believe&api_key=YOUR_API_KEY",
    "ServiceName": "track.search",
    "RequiredParams": [
      {
        "ParamDescription": "The track name",
        "ParamName": "track"
      },
      {
        "ParamDescription": "A Last.fm API key.",
        "ParamName": "api_key"
      }
    ],
    "ServiceDescription": "Search for a track by track name. Returns track matches sorted by relevance."
  },
  {
    "OptionalParams": [
      {
        "ParamDescription": "The album name.",
        "ParamName": "album[i]"
      },
      {
        "ParamDescription": "Sub-client version (not public, only enabled for certain API keys)",
        "ParamName": "context[i]"
      },
      {
        "ParamDescription": "The stream id for this track received from the radio.getPlaylist service, if scrobbling Last.fm radio",
        "ParamName": "streamId[i]"
      },
      {
        "ParamDescription": "Set to 1 if the user chose this song, or 0 if the song was chosen by someone else (such as a radio station or recommendation service). Assumes 1 if not specified",
        "ParamName": "chosenByUser[i]"
      },
      {
        "ParamDescription": "The track number of the track on the album.",
        "ParamName": "trackNumber[i]"
      },
      {
        "ParamDescription": "The MusicBrainz Track ID.",
        "ParamName": "mbid[i]"
      },
      {
        "ParamDescription": "The album artist - if this differs from the track artist.",
        "ParamName": "albumArtist[i]"
      },
      {
        "ParamDescription": "The length of the track in seconds.",
        "ParamName": "duration[i]"
      }
    ],
    "Url": "http://ws.audioscrobbler.com/2.0/",
    "ServiceName": "track.scrobble",
    "RequiredParams": [
      {
        "ParamDescription": "The artist name.",
        "ParamName": "artist[i]"
      },
      {
        "ParamDescription": "The track name.",
        "ParamName": "track[i]"
      },
      {
        "ParamDescription": "The time the track started playing, in UNIX timestamp format (integer number of seconds since 00:00:00, January 1st 1970 UTC). This must be in the UTC time zone.",
        "ParamName": "timestamp[i]"
      },
      {
        "ParamDescription": "A Last.fm API key.",
        "ParamName": "api_key"
      },
      {
        "ParamDescription": "A Last.fm method signature. See authentication for more information.",
        "ParamName": "api_sig"
      },
      {
        "ParamDescription": "A session key generated by authenticating a user via the authentication protocol.",
        "ParamName": "sk"
      }
    ],
    "ServiceDescription": "Used to add a track-play to a user's profile. Scrobble a track, or a batch of tracks. Tracks are passed to the service using array notation for each of the below params, up to a maximum of 50 scrobbles per batch [0<=i<=49]. If you are only sending a single scrobble the array notation may be ommited. Note: Extra care should be taken while calculating the signature when using array notation as the parameter names MUST be sorted according to the ASCII table (i.e., artist[10] comes before artist[1]). It is important to not use the corrections returned by the now playing service as input for the scrobble request, unless they have been explicitly approved by the user. Parameter names are case sensitive."
  },
  {
    "OptionalParams": [
      {
        "ParamDescription": "Whether or not to include information about friends' recent listening in the response.",
        "ParamName": "recenttracks"
      },
      {
        "ParamDescription": "The number of results to fetch per page. Defaults to 50.",
        "ParamName": "limit"
      },
      {
        "ParamDescription": "The page number to fetch.  Defaults to first page.",
        "ParamName": "page"
      }
    ],
    "Url": "http://ws.audioscrobbler.com/2.0/?method=user.getfriends&user=rj&api_key=YOUR_API_KEY",
    "ServiceName": "user.getFriends",
    "RequiredParams": [
      {
        "ParamDescription": "The last.fm username to fetch the friends of.",
        "ParamName": "user"
      },
      {
        "ParamDescription": "A Last.fm API key.",
        "ParamName": "api_key"
      }
    ],
    "ServiceDescription": "Get a list of the user's friends on Last.fm."
  },
  {
    "OptionalParams": [],
    "Url": "http://ws.audioscrobbler.com/2.0/",
    "ServiceName": "track.removeTag",
    "RequiredParams": [
      {
        "ParamDescription": "The artist name",
        "ParamName": "artist"
      },
      {
        "ParamDescription": "The track name",
        "ParamName": "track"
      },
      {
        "ParamDescription": "A single user tag to remove from this track.",
        "ParamName": "tag"
      },
      {
        "ParamDescription": "A Last.fm API key.",
        "ParamName": "api_key"
      },
      {
        "ParamDescription": "A Last.fm method signature. See authentication for more information.",
        "ParamName": "api_sig"
      },
      {
        "ParamDescription": "A session key generated by authenticating a user via the authentication protocol.",
        "ParamName": "sk"
      }
    ],
    "ServiceDescription": "Remove a user's tag from a track."
  },
  {
    "OptionalParams": [
      {
        "ParamDescription": "The track name",
        "ParamName": "track"
      },
      {
        "ParamDescription": "The artist name",
        "ParamName": "artist"
      },
      {
        "ParamDescription": "The musicbrainz id for the track",
        "ParamName": "mbid"
      },
      {
        "ParamDescription": "Transform misspelled artist and track names into correct artist and track names, returning the correct version instead.  The corrected artist and track name will be returned in the response.",
        "ParamName": "autocorrect[0|1]"
      }
    ],
    "Url": "http://ws.audioscrobbler.com/2.0/?method=track.gettoptags&artist=radiohead&track=paranoid+android&api_key=YOUR_API_KEY",
    "ServiceName": "track.getTopTags",
    "RequiredParams": [
      {
        "ParamDescription": "A Last.fm API key.",
        "ParamName": "api_key"
      }
    ],
    "ServiceDescription": "Get the top tags for this track on Last.fm, ordered by tag count. Supply either track & artist name or mbid."
  },
  {
    "OptionalParams": [
      {
        "ParamDescription": "The artist name",
        "ParamName": "artist"
      },
      {
        "ParamDescription": "The track name",
        "ParamName": "track"
      },
      {
        "ParamDescription": "The musicbrainz id for the track",
        "ParamName": "mbid"
      },
      {
        "ParamDescription": "Transform misspelled artist and track names into correct artist and track names, returning the correct version instead.  The corrected artist and track name will be returned in the response.",
        "ParamName": "autocorrect[0|1]"
      },
      {
        "ParamDescription": "If called in non-authenticated mode you must specify the user to look up",
        "ParamName": "user"
      }
    ],
    "Url": "http://ws.audioscrobbler.com/2.0/?method=track.getTags&api_key=YOUR_API_KEY&artist=AC/DC&track=Hells+Bells&user=RJ",
    "ServiceName": "track.getTags",
    "RequiredParams": [
      {
        "ParamDescription": "A Last.fm API key.",
        "ParamName": "api_key"
      }
    ],
    "ServiceDescription": "Get the tags applied by an individual user to a track on Last.fm. To retrieve the list of top tags applied to a track by all users use track.getTopTags."
  },
  {
    "OptionalParams": [
      {
        "ParamDescription": "The track name",
        "ParamName": "track"
      },
      {
        "ParamDescription": "The artist name",
        "ParamName": "artist"
      },
      {
        "ParamDescription": "The musicbrainz id for the track",
        "ParamName": "mbid"
      },
      {
        "ParamDescription": "Transform misspelled artist and track names into correct artist and track names, returning the correct version instead.  The corrected artist and track name will be returned in the response.",
        "ParamName": "autocorrect[0|1]"
      },
      {
        "ParamDescription": "Maximum number of similar tracks to return",
        "ParamName": "limit"
      }
    ],
    "Url": "http://ws.audioscrobbler.com/2.0/?method=track.getsimilar&artist=cher&track=believe&api_key=YOUR_API_KEY",
    "ServiceName": "track.getSimilar",
    "RequiredParams": [
      {
        "ParamDescription": "A Last.fm API key.",
        "ParamName": "api_key"
      }
    ],
    "ServiceDescription": "Get the similar tracks for this track on Last.fm, based on listening data."
  },
  {
    "OptionalParams": [],
    "Url": "http://ws.audioscrobbler.com/2.0/",
    "ServiceName": "track.love",
    "RequiredParams": [
      {
        "ParamDescription": "A track name (utf8 encoded)",
        "ParamName": "track"
      },
      {
        "ParamDescription": "An artist name (utf8 encoded)",
        "ParamName": "artist"
      },
      {
        "ParamDescription": "A Last.fm API key.",
        "ParamName": "api_key"
      },
      {
        "ParamDescription": "A Last.fm method signature. See authentication for more information.",
        "ParamName": "api_sig"
      },
      {
        "ParamDescription": "A session key generated by authenticating a user via the authentication protocol.",
        "ParamName": "sk"
      }
    ],
    "ServiceDescription": "Love a track for a user profile."
  },
  {
    "OptionalParams": [
      {
        "ParamDescription": "The musicbrainz id for the track",
        "ParamName": "mbid"
      },
      {
        "ParamDescription": "The track name",
        "ParamName": "track"
      },
      {
        "ParamDescription": "The artist name",
        "ParamName": "artist"
      },
      {
        "ParamDescription": "The username for the context of the request. If supplied, the user's playcount for this track and whether they have loved the track is included in the response.",
        "ParamName": "username"
      },
      {
        "ParamDescription": "Transform misspelled artist and track names into correct artist and track names, returning the correct version instead.  The corrected artist and track name will be returned in the response.",
        "ParamName": "autocorrect[0|1]"
      }
    ],
    "Url": "http://ws.audioscrobbler.com/2.0/?method=track.getInfo&api_key=YOUR_API_KEY&artist=cher&track=believe",
    "ServiceName": "track.getInfo",
    "RequiredParams": [
      {
        "ParamDescription": "A Last.fm API key.",
        "ParamName": "api_key"
      }
    ],
    "ServiceDescription": "Get the metadata for a track on Last.fm using the artist/track name or a musicbrainz id."
  },
  {
    "OptionalParams": [],
    "Url": "http://ws.audioscrobbler.com/2.0/?method=track.getcorrection&artist=guns and roses&track=Mrbrownstone&api_key=YOUR_API_KEY",
    "ServiceName": "track.getCorrection",
    "RequiredParams": [
      {
        "ParamDescription": "The artist name to correct.",
        "ParamName": "artist"
      },
      {
        "ParamDescription": "The track name to  correct.",
        "ParamName": "track"
      },
      {
        "ParamDescription": "A Last.fm API key.",
        "ParamName": "api_key"
      }
    ],
    "ServiceDescription": "Use the last.fm corrections data to check whether the supplied track has a correction to a canonical track"
  },
  {
    "OptionalParams": [],
    "Url": "http://ws.audioscrobbler.com/2.0/",
    "ServiceName": "track.addTags",
    "RequiredParams": [
      {
        "ParamDescription": "The artist name",
        "ParamName": "artist"
      },
      {
        "ParamDescription": "The track name",
        "ParamName": "track"
      },
      {
        "ParamDescription": "A comma delimited list of user supplied tags to apply to this track. Accepts a maximum of 10 tags.",
        "ParamName": "tags"
      },
      {
        "ParamDescription": "A Last.fm API key.",
        "ParamName": "api_key"
      },
      {
        "ParamDescription": "A Last.fm method signature. See authentication for more information.",
        "ParamName": "api_sig"
      },
      {
        "ParamDescription": "A session key generated by authenticating a user via the authentication protocol.",
        "ParamName": "sk"
      }
    ],
    "ServiceDescription": "Tag an album using a list of user supplied tags."
  },
  {
    "OptionalParams": [],
    "Url": "http://ws.audioscrobbler.com/2.0/?method=tag.getweeklychartlist&tag=disco&api_key=YOUR_API_KEY",
    "ServiceName": "tag.getWeeklyChartList",
    "RequiredParams": [
      {
        "ParamDescription": "The tag name",
        "ParamName": "tag"
      },
      {
        "ParamDescription": "A Last.fm API key.",
        "ParamName": "api_key"
      }
    ],
    "ServiceDescription": "Get a list of available charts for this tag, expressed as date ranges which can be sent to the chart services."
  },
  {
    "OptionalParams": [
      {
        "ParamDescription": "The number of results to fetch per page. Defaults to 50.",
        "ParamName": "limit"
      },
      {
        "ParamDescription": "The page number to fetch.  Defaults to first page.",
        "ParamName": "page"
      }
    ],
    "Url": "http://ws.audioscrobbler.com/2.0/?method=tag.gettoptracks&tag=disco&api_key=YOUR_API_KEY",
    "ServiceName": "tag.getTopTracks",
    "RequiredParams": [
      {
        "ParamDescription": "The tag name",
        "ParamName": "tag"
      },
      {
        "ParamDescription": "A Last.fm API key.",
        "ParamName": "api_key"
      }
    ],
    "ServiceDescription": "Get the top tracks tagged by this tag, ordered by tag count."
  },
  {
    "OptionalParams": [
      {
        "ParamDescription": "The number of results to fetch per page. Defaults to 50.",
        "ParamName": "limit"
      },
      {
        "ParamDescription": "The page number to fetch.  Defaults to first page.",
        "ParamName": "page"
      }
    ],
    "Url": "http://ws.audioscrobbler.com/2.0/?method=tag.gettopartists&tag=disco&api_key=YOUR_API_KEY",
    "ServiceName": "tag.getTopArtists",
    "RequiredParams": [
      {
        "ParamDescription": "The tag name",
        "ParamName": "tag"
      },
      {
        "ParamDescription": "A Last.fm API key.",
        "ParamName": "api_key"
      }
    ],
    "ServiceDescription": "Get the top artists tagged by this tag, ordered by tag count."
  },
  {
    "OptionalParams": [
      {
        "ParamDescription": "The number of results to fetch per page. Defaults to 50.",
        "ParamName": "limit"
      },
      {
        "ParamDescription": "The page number to fetch.  Defaults to first page.",
        "ParamName": "page"
      }
    ],
    "Url": "http://ws.audioscrobbler.com/2.0/?method=tag.gettopalbums&tag=disco&api_key=YOUR_API_KEY",
    "ServiceName": "tag.getTopAlbums",
    "RequiredParams": [
      {
        "ParamDescription": "The tag name",
        "ParamName": "tag"
      },
      {
        "ParamDescription": "A Last.fm API key.",
        "ParamName": "api_key"
      }
    ],
    "ServiceDescription": "Get the top albums tagged by this tag, ordered by tag count."
  },
  {
    "OptionalParams": [],
    "Url": "http://ws.audioscrobbler.com/2.0/?method=tag.getsimilar&tag=disco&api_key=YOUR_API_KEY",
    "ServiceName": "tag.getSimilar",
    "RequiredParams": [
      {
        "ParamDescription": "The tag name",
        "ParamName": "tag"
      },
      {
        "ParamDescription": "A Last.fm API key.",
        "ParamName": "api_key"
      }
    ],
    "ServiceDescription": "Search for tags similar to this one. Returns tags ranked by similarity, based on listening data."
  },
  {
    "OptionalParams": [
      {
        "ParamDescription": "The language to return the wiki in, expressed as an ISO 639 alpha-2 code.",
        "ParamName": "lang"
      }
    ],
    "Url": "http://ws.audioscrobbler.com/2.0/?method=tag.getinfo&tag=disco&api_key=YOUR_API_KEY",
    "ServiceName": "tag.getInfo",
    "RequiredParams": [
      {
        "ParamDescription": "The tag name",
        "ParamName": "tag"
      },
      {
        "ParamDescription": "A Last.fm API key.",
        "ParamName": "api_key"
      }
    ],
    "ServiceDescription": "Get the metadata for a tag"
  },
  {
    "OptionalParams": [
      {
        "ParamDescription": "The number of results to fetch per page. Defaults to 50.",
        "ParamName": "limit"
      },
      {
        "ParamDescription": "The page number you wish to scan to.",
        "ParamName": "page"
      }
    ],
    "Url": "http://ws.audioscrobbler.com/2.0/?method=library.getartists&api_key=YOUR_API_KEY&user=joanofarctan",
    "ServiceName": "library.getArtists",
    "RequiredParams": [
      {
        "ParamDescription": "The user whose library you want to fetch.",
        "ParamName": "user"
      },
      {
        "ParamDescription": "A Last.fm API key.",
        "ParamName": "api_key"
      }
    ],
    "ServiceDescription": "A paginated list of all the artists in a user's library, with play counts and tag counts."
  },
  {
    "OptionalParams": [
      {
        "ParamDescription": "The number of results to fetch per page. Defaults to 50.",
        "ParamName": "limit"
      },
      {
        "ParamDescription": "The page number to fetch.  Defaults to first page.",
        "ParamName": "page"
      }
    ],
    "Url": "http://ws.audioscrobbler.com/2.0/?method=geo.gettopartists&country=spain&api_key=YOUR_API_KEY",
    "ServiceName": "geo.getTopArtists",
    "RequiredParams": [
      {
        "ParamDescription": "A country name, as defined by the ISO 3166-1 country names standard",
        "ParamName": "country"
      },
      {
        "ParamDescription": "A Last.fm API key.",
        "ParamName": "api_key"
      }
    ],
    "ServiceDescription": "Get the most popular artists on Last.fm by country"
  },
  {
    "OptionalParams": [
      {
        "ParamDescription": "The page number to fetch.  Defaults to first page.",
        "ParamName": "page"
      },
      {
        "ParamDescription": "The number of results to fetch per page. Defaults to 50.",
        "ParamName": "limit"
      }
    ],
    "Url": "http://ws.audioscrobbler.com/2.0/?method=chart.gettoptracks&api_key=YOUR_API_KEY",
    "ServiceName": "chart.getTopTracks",
    "RequiredParams": [
      {
        "ParamDescription": "A Last.fm API key.",
        "ParamName": "api_key"
      }
    ],
    "ServiceDescription": "Get the top tracks chart"
  },
  {
    "OptionalParams": [
      {
        "ParamDescription": "A metro name, to fetch the charts for (must be within the country specified)",
        "ParamName": "location"
      },
      {
        "ParamDescription": "The number of results to fetch per page. Defaults to 50.",
        "ParamName": "limit"
      },
      {
        "ParamDescription": "The page number to fetch.  Defaults to first page.",
        "ParamName": "page"
      }
    ],
    "Url": "http://ws.audioscrobbler.com/2.0/?method=geo.gettoptracks&country=spain&api_key=YOUR_API_KEY",
    "ServiceName": "geo.getTopTracks",
    "RequiredParams": [
      {
        "ParamDescription": "A country name, as defined by the ISO 3166-1 country names standard",
        "ParamName": "country"
      },
      {
        "ParamDescription": "A Last.fm API key.",
        "ParamName": "api_key"
      }
    ],
    "ServiceDescription": "Get the most popular tracks on Last.fm last week by country"
  },
  {
    "OptionalParams": [
      {
        "ParamDescription": "The page number to fetch.  Defaults to first page.",
        "ParamName": "page"
      },
      {
        "ParamDescription": "The number of results to fetch per page. Defaults to 50.",
        "ParamName": "limit"
      }
    ],
    "Url": "http://ws.audioscrobbler.com/2.0/?method=chart.gettoptags&api_key=YOUR_API_KEY",
    "ServiceName": "chart.getTopTags",
    "RequiredParams": [
      {
        "ParamDescription": "A Last.fm API key.",
        "ParamName": "api_key"
      }
    ],
    "ServiceDescription": "Get the top artists chart"
  },
  {
    "OptionalParams": [
      {
        "ParamDescription": "The page number to fetch.  Defaults to first page.",
        "ParamName": "page"
      },
      {
        "ParamDescription": "The number of results to fetch per page. Defaults to 50.",
        "ParamName": "limit"
      }
    ],
    "Url": "http://ws.audioscrobbler.com/2.0/?method=chart.gettopartists&api_key=YOUR_API_KEY",
    "ServiceName": "chart.getTopArtists",
    "RequiredParams": [
      {
        "ParamDescription": "A Last.fm API key.",
        "ParamName": "api_key"
      }
    ],
    "ServiceDescription": "Get the top artists chart"
  },
  {
    "OptionalParams": [],
    "Url": "http://ws.audioscrobbler.com/2.0/",
    "ServiceName": "auth.getSession",
    "RequiredParams": [
      {
        "ParamDescription": "A 32-character ASCII hexadecimal MD5 hash returned by step 1 of the authentication process (following the granting of permissions to the application by the user)",
        "ParamName": "token"
      },
      {
        "ParamDescription": "A Last.fm API key.",
        "ParamName": "api_key"
      },
      {
        "ParamDescription": "A Last.fm method signature. See authentication for more information.",
        "ParamName": "api_sig"
      }
    ],
    "ServiceDescription": "Fetch a session key for a user. The third step in the authentication process. See the authentication how-to for more information."
  },
  {
    "OptionalParams": [],
    "Url": "http://ws.audioscrobbler.com/2.0/",
    "ServiceName": "auth.getMobileSession",
    "RequiredParams": [
      {
        "ParamDescription": "The password in plain text.",
        "ParamName": "password"
      },
      {
        "ParamDescription": "The last.fm username or email address.",
        "ParamName": "username"
      },
      {
        "ParamDescription": "A Last.fm API key.",
        "ParamName": "api_key"
      },
      {
        "ParamDescription": "A Last.fm method signature. See authentication for more information.",
        "ParamName": "api_sig"
      }
    ],
    "ServiceDescription": "Create a web service session for a user. Used for authenticating a user when the password can be inputted by the user. Accepts email address as well, so please use the username supplied in the output. Only suitable for standalone mobile devices. See the authentication how-to for more. You must use HTTPS and POST in order to use this method."
  },
  {
    "OptionalParams": [
      {
        "ParamDescription": "The number of results to fetch per page. Defaults to 30.",
        "ParamName": "limit"
      },
      {
        "ParamDescription": "The page number to fetch.  Defaults to first page.",
        "ParamName": "page"
      }
    ],
    "Url": "http://ws.audioscrobbler.com/2.0/?method=artist.search&artist=cher&api_key=YOUR_API_KEY",
    "ServiceName": "artist.search",
    "RequiredParams": [
      {
        "ParamDescription": "The artist name",
        "ParamName": "artist"
      },
      {
        "ParamDescription": "A Last.fm API key.",
        "ParamName": "api_key"
      }
    ],
    "ServiceDescription": "Search for an artist by name. Returns artist matches sorted by relevance."
  },
  {
    "OptionalParams": [],
    "Url": "http://ws.audioscrobbler.com/2.0/",
    "ServiceName": "artist.removeTag",
    "RequiredParams": [
      {
        "ParamDescription": "The artist name",
        "ParamName": "artist"
      },
      {
        "ParamDescription": "A single user tag to remove from this artist.",
        "ParamName": "tag"
      },
      {
        "ParamDescription": "A Last.fm API key.",
        "ParamName": "api_key"
      },
      {
        "ParamDescription": "A Last.fm method signature. See authentication for more information.",
        "ParamName": "api_sig"
      },
      {
        "ParamDescription": "A session key generated by authenticating a user via the authentication protocol.",
        "ParamName": "sk"
      }
    ],
    "ServiceDescription": "Remove a user's tag from an artist."
  }
]