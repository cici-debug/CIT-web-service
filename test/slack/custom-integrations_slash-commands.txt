Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					Slash Commands
					You're viewing documentation on legacy custom integrations, an older way for teams to build into their Slack team. To securely utilize the newest platform features like message buttons & the Events API, build
			Node:
			(type) c
			(layer)1
				Element:a
					as part of a
				Element:em
					internal
					integrations
			Node:
			(type) c
			(layer)1
				Element:a
					Slack app
					just for your team instead.
			Node:
			(type) c
			(layer)1
				Element:a
					Get started
					.
			Node:
			(type) c
			(layer)1
				Element:p
					Slash Commands enable Slack users to interact with external services directly from Slack.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:a
					What are slash commands?
				Element:li
				Element:a
					How do slash commands work?
				Element:li
				Element:a
					Triggering commands
				Element:li
				Element:a
					Responding to commands
				Element:li
				Element:a
					Best Practices
				Element:li
				Element:a
					SSL
				Element:li
				Element:a
					Attaching your custom command to an app
			Node:
			(type) c
			(layer)1
				Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								What are commands?
						Node:
						(type) c
						(layer)2
							Element:p
								Messages that start with a slash
							Element:code
								/
								are commands and will behave differently from regular messages. For example, you can use the "topic" command to change your current channel's topic to "Hello!" by typing
							Element:code
								/topic Hello!
								. When you type
							Element:code
								/remind me in 10 minutes to drink a glass of water
								the command will set a reminder for you to drink a glass of water in 10 minutes.
						Node:
						(type) c
						(layer)2
							Element:p
								Under the hood, there are 3 different kinds of commands. They work similarly, but are useful for different reasons.
						Node:
						(type) c
						(layer)2
							Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Built-in Commands
									Node:
									(type) c
									(layer)3
										Element:p
											Commands like
										Element:code
											/topic
											and
										Element:code
											/remind
											are built into Slack, and available to every team. They often work as shortcuts for doing something related to your channel or Slack team quickly from the message input field.
										Element:a
											Here's a list
											of all of the built-in commands and descriptions about what they do. Give them a try!
									Node:
									(type) c
									(layer)3
										Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Custom Commands
									Node:
									(type) c
									(layer)3
										Element:p
											Every team has the ability to create their own custom commands that they can use on their team. For example, you may want to do something very specific like query your cloud-based employee directory, or deploy code to your servers. These commands are simple to create for your team and don't have many restrictions.
									Node:
									(type) c
									(layer)3
										Element:p
											When commands are executed, we send a request to your SSL-enabled server. Commands are executed from Slack's own servers, so your server needs to be accessible to Slack. Don't worry, we provide a means to
										Element:a
											verify the request
											is coming from Slack.
									Node:
									(type) c
									(layer)3
										Element:p
										Element:a
									Node:
									(type) c
									(layer)3
										Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Slack App Commands
									Node:
									(type) c
									(layer)3
										Element:p
											App commands, like custom commands, have been developed by 3rd parties and trigger an action (like posting a gif, or starting a video conference, or adding something new to your todo list). Because they are intended to be shared with other teams, they are easy to attach to an app and require minimal configuration to install.
									Node:
									(type) c
									(layer)3
										Element:p
											In order to protect data on teams, commands installed as part of a Slack app also have some additional restrictions:
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
											They only support HTTP POST requests.
										Element:li
											The external URLs that the command posts message data to must use TLS (https) with a valid certificate. Self-signed certificates are unsupported.
										Element:li
											They inherit the icon and name of the app that they're attached to, and these properties can't be overwritten in the command response message.
										Element:li
											Only users with permission to install apps can add an app to their team.
										Element:br
										Element:em
											(By default, all users on a Slack team can install apps, but sometimes Team Owners and Admins restrict those privileges to certain users.)
										Element:li
											On free teams, slash commands that are installed as part of a Slack App count as one towards the ten integration limit, that is to say: the app as a unit counts as one.
										Element:br
										Element:em
											(By comparison, custom slash commands installed as custom integrations are counted together categorically as a single integration.)
									Node:
									(type) c
									(layer)3
										Element:p
											Since custom commands on your own team have fewer restrictions than app commands, we recommend that developers start by creating a custom command for testing and development and import it to an app when they are ready to release it.
										Element:a
											Learn more about building and distributing your own Slack apps
											.
									Node:
									(type) c
									(layer)3
										Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								How do commands work?
						Node:
						(type) c
						(layer)2
							Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Triggering a command
									Node:
									(type) c
									(layer)3
										Element:p
											When someone types a custom command or an app command, the message (and its data) will be sent to the configured external URL via
										Element:code
											HTTP POST
											. It's up to you, the developer, to do something with the message data and respond back, if desired.
									Node:
									(type) c
									(layer)3
										Element:p
											For example, imagine that there's an app command installed called
										Element:code
											/weather
											. If someone on the example.slack.com team types
										Element:code
											/weather 94070
											in the #test channel and hits enter, this data would be posted to the external URL:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											token=gIkuvaNzQIHg97ATvDxqgjtO team_id=T0001 team_domain=example channel_id=C2147483705 channel_name=test user_id=U2147483697 user_name=Steve command=/weather text=94070 response_url=https://hooks.slack.com/commands/1234/5678
									Node:
									(type) c
									(layer)3
										Element:p
											Typically, this data will be sent to your URL as a HTTP POST with a
										Element:code
											Content-type
											header set as
										Element:code
											application/x-www-form-urlencoded
											. If you've chosen to have your slash command's URL receive invocations as a GET request, no explicit
										Element:code
											Content-type
											header will be set.
									Node:
									(type) c
									(layer)3
										Element:p
										Element:strong
											NOTE:
											The URL you provide must be a HTTPS URL with a valid, verifiable SSL certificate. Self-signed certificates cannot be used.
										Element:a
											See below
											for more information.
									Node:
									(type) c
									(layer)3
										Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Validating the command
									Node:
									(type) c
									(layer)3
										Element:p
											When your server receives the above data, you should validate whether to service the request by confirming that the
										Element:code
											token
											value matches the validation token you received from Slack when creating the command.
									Node:
									(type) c
									(layer)3
										Element:p
										Element:img
									Node:
									(type) c
									(layer)3
										Element:p
											Additionally, you can verify whether the
										Element:code
											team_id
											matches a team that has approved your command for usage.
									Node:
									(type) c
									(layer)3
										Element:p
											If the token or team are unknown to your application, you should refuse to service the request and return an error instead.
									Node:
									(type) c
									(layer)3
										Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Responding to a command
									Node:
									(type) c
									(layer)3
										Element:p
											When the external URL receives this data, you have a few different options for how to respond.
									Node:
									(type) c
									(layer)3
										Element:p
											If you'd like to just return information in the simplest possible way, it can respond immediately (within 3000 milliseconds) with a plain text string:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											It's 80 degrees right now.
									Node:
									(type) c
									(layer)3
										Element:p
										Element:img
									Node:
									(type) c
									(layer)3
										Element:p
											If you'd like to customize the appearance of the response message with extra
										Element:a
											message formatting
											or
										Element:a
											attachment fields
											, you can respond immediately (within 3000 milliseconds) with a valid JSON payload:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											{ "text": "It's 80 degrees right now.", "attachments": [ { "text":"Partly cloudy today and tomorrow" } ] }
									Node:
									(type) c
									(layer)3
										Element:p
											Your URL should respond with a HTTP 200 "OK" status code. Any other flavor of response will result in a user-facing error.
									Node:
									(type) c
									(layer)3
										Element:p
											If you don't want to respond with any message or would rather send your responses later using
										Element:em
											delayed responses
											, you should still respond to the invocation of your URL with a simple HTTP 200.
									Node:
									(type) c
									(layer)3
										Element:p
											That said, we strongly recommend that you send some kind of positive affirmation to the user as an ephemeral response, even if it's just a simple confirmation that the command was understood.
									Node:
									(type) c
									(layer)3
										Element:p
										Element:i
											If you are responding with JSON instead of plain text, the
										Element:code
											Content-type
											header of the response must match the disposition of your content,
										Element:code
											application/json
											.
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														"In Channel" vs "Ephemeral" responses
												Node:
												(type) c
												(layer)4
													Element:p
														By default, the response messages sent to commands will only be visible to the user that issued the command (we call these "ephemeral" messages). However, if you would like the response to be visible to all members of the channel in which the user typed the command, you can add a
													Element:code
														response_type
														of
													Element:code
														in_channel
														to the JSON response, like this:
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														{ "response_type": "in_channel", "text": "It's 80 degrees right now.", "attachments": [ { "text":"Partly cloudy today and tomorrow" } ] }
												Node:
												(type) c
												(layer)4
													Element:p
														When the
													Element:code
														response_type
														is
													Element:code
														in_channel
														,
													Element:strong
														both
														the response message and the initial message typed by the user will be shared in the channel. It will look like this:
												Node:
												(type) c
												(layer)4
													Element:p
													Element:img
												Node:
												(type) c
												(layer)4
													Element:p
														Setting
													Element:code
														response_type
														to
													Element:code
														ephemeral
														is the same as not including the response type at all, and the response message will be visible only to the user that issued the command. For the best clarity of intent, we recommend always declaring your intended
													Element:code
														response_type
														.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:img
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Delayed responses and multiple responses
												Node:
												(type) c
												(layer)4
													Element:p
														If you want to provide additional command response messages, or if you're unable to immediately respond to a command within 3000 milliseconds, use the specific
													Element:code
														response_url
														we send with our initial execution of your URL to respond to a command at your leisure. With this approach, you can respond to a user commands up to 5 times within 30 minutes of the user's invocation.
												Node:
												(type) c
												(layer)4
													Element:p
														Sending HTTP requests to this
													Element:code
														response_url
														is easy. Just build a JSON POST body in the same format as used when responding to our command invocation request to your registered URL. It supports all of the same fields (
													Element:code
														response_type
														,
													Element:code
														text
														, and
													Element:code
														attachments
														). Then, send that data as an HTTP POST with a
													Element:code
														content-type
														of
													Element:code
														application/json
														to the destination specified as the
													Element:code
														response_url
														.
												Node:
												(type) c
												(layer)4
													Element:p
														The only user-facing difference between immediate responses and delayed responses is that "in channel" delayed responses will not include the initial command sent by the user. To echo the command back to the channel, you'll still need to provide a response to Slack's original visit to your invocation URL.
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Making slash commands more interactive with message buttons
												Node:
												(type) c
												(layer)4
													Element:p
														Slash commands that are installed as part of a
													Element:a
														Slack app
														are also able to use
													Element:a
														message buttons
														to drive interactive workflows with precision and clarity.
												Node:
												(type) c
												(layer)4
													Element:p
														When responding to a command invocation or executing a
													Element:code
														response_url
														, include your message button actions as attachments to your message.
												Node:
												(type) c
												(layer)4
													Element:p
														Custom integrations-based slash commands cannot make use of these features. Build an
													Element:a
														internal integration
														instead.
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Responding to the user with an error message
												Node:
												(type) c
												(layer)4
													Element:p
														If you would like to let the user know that something went wrong, you can return an ephemeral response containing a helpful error message. To do this, you can either respond directly to the slash command request, or use the provided
													Element:code
														response_url
														.
												Node:
												(type) c
												(layer)4
													Element:p
														You'll want to send a JSON payload that looks like this:
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														{ "response_type": "ephemeral", "text": "Sorry, that didn't work. Please try again." }
												Node:
												(type) c
												(layer)4
													Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Best practices
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
								If you're not ready to respond to an incoming command but still want to acknowledge the user's action by having their slash command displayed within the channel, respond to your URL's invocation with a simplified JSON response containing only the
							Element:code
								response_type
								field set to
							Element:code
								in_channel
								:
							Element:code
								{"response_type": "in_channel"}
								.
							Element:li
								If your command doesn't need to post anything back (either privately or publicly), respond with an empty HTTP 200 response. Best to use this only if the nature of your command makes it obvious that no response is necessary or desired. Even a simple "Got it!" ephemeral response is better than nothing.
							Element:li
								Help your users understand how to use your command.
							Element:strong
								Provide a help action that explains your command's usage
								. If your slash command was
							Element:code
								/please
								, you should provide a response to
							Element:code
								/please help
								that lists the other actions available.
							Element:li
								Keep track of the validation token Slack gives you when the command is created. Always validate the
							Element:code
								token
								field in an incoming slash command request has been issued to you by Slack.
							Element:li
								Limit yourself to 20 attachments per message. We'll be unable to process messages with more than 100.
							Element:li
								If you're using message buttons or attachments, be sure and follow
							Element:a
								our guidelines
								.
						Node:
						(type) c
						(layer)2
							Element:p
								Consult our
							Element:a
								Slash Commands Style Guide
								for further tips!
						Node:
						(type) c
						(layer)2
							Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								SSL
						Node:
						(type) c
						(layer)2
							Element:p
								Slash command URLs must support HTTPS and serve a valid SSL certificate. Self-signed certificates are not allowed. Check out
							Element:a
								CloudFlare
								or
							Element:a
								Let's Encrypt
								for easy ways to obtain valid certificates.
						Node:
						(type) c
						(layer)2
							Element:p
								Before submitting a command to your server, Slack will occasionally send your command URLs a simple POST request to verify the certificate. These requests will include a parameter
							Element:code
								ssl_check
								set to
							Element:code
								1
								. Mostly, you may ignore these requests, but please do respond with a HTTP 200 OK.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Related Articles
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:a
								Tutorial from Pixelcode (medium.com)
							Element:span
								Creating Slack Slash Commands with AWS Lambda
							Element:li
							Element:a
								Testimonial by Looker (looker.com)
							Element:span
								Slack Your Data, Why We Created The Lookerbot for Slack
							Element:li
							Element:a
								Tutorial by Slack
							Element:span
								Your first slash command and custom integration
						Node:
						(type) c
						(layer)2
							Element:footer
							Element:ul
							Element:li
								Using Slack
							Element:li
							Element:a
								Product
							Element:li
							Element:a
								Pricing
							Element:li
							Element:a
								Support
							Element:li
							Element:a
								Slack Guides
							Element:li
							Element:a
								Video Guides
							Element:li
							Element:a
								App Directory
							Element:li
							Element:a
								API
							Element:ul
							Element:li
								Slack
							Element:li
							Element:a
								Jobs
							Element:li
							Element:a
								Customers
							Element:li
							Element:a
								Developers
							Element:li
							Element:a
								Events
							Element:li
							Element:a
								Blog
							Element:li
							Element:a
								Podcast
							Element:li
							Element:a
								Slack Shop
							Element:ul
							Element:li
								Legal
							Element:li
							Element:a
								Privacy
							Element:li
							Element:a
								Security
							Element:li
							Element:a
								Terms of Service
							Element:li
							Element:a
								Policies
							Element:ul
							Element:li
								Handy Links
							Element:li
							Element:a
								Download desktop app
							Element:li
							Element:a
								Download mobile app
							Element:li
							Element:a
								Brand Guidelines
							Element:li
							Element:a
								Slack at Work
							Element:li
							Element:a
								Status
							Element:a
							Element:ul
							Element:li
							Element:a
								Contact Us
							Element:li
							Element:a
							Element:li
							Element:a
