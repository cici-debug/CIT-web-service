Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					Using ngrok to develop locally for Slack
			Node:
			(type) c
			(layer)1
				Element:span
					By Claudio Medina
			Node:
			(type) c
			(layer)1
				Element:span
				Element:a
					Development environment
			Node:
			(type) c
			(layer)1
				Element:span
				Element:a
					Node.js
			Node:
			(type) c
			(layer)1
				Element:span
				Element:a
					Slack apps
			Node:
			(type) c
			(layer)1
				Element:hr
			Node:
			(type) c
			(layer)1
				Element:p
					Creating apps and integrations for Slack is super easy. You can have
				Element:a
					webhooks
					or
				Element:a
					slash commands
					working in no time!
			Node:
			(type) c
			(layer)1
				Element:p
					But wouldn't it be great if development could be simplified even
				Element:strong
					more
					by allowing you to test your requests directly from your machine without constantly redeploying your work to a hosting platform/webserver?
			Node:
			(type) c
			(layer)1
				Element:p
					Enter
				Element:a
					ngrok
					. This handy tool lets you set up a secure tunnel to your localhost, which is a fancy way of saying it opens access to your local app from the internet.
			Node:
			(type) c
			(layer)1
				Element:p
				Element:img
			Node:
			(type) c
			(layer)1
				Element:p
					This is what we'll do in this tutorial:
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:a
					Download
					and setup ngrok on Mac.
				Element:li
					Set up a simple HTTP server with node.js.
				Element:li
					Build a Slack APP.
				Element:li
					Create a slash command that sends a request to your new ngrok address and a simple message back to Slack.
			Node:
			(type) c
			(layer)1
				Element:p
					By the end of this tutorial you'll be comfortable creating, working and running Slack apps locally before putting your app out there.
			Node:
			(type) c
			(layer)1
				Element:hr
			Node:
			(type) c
			(layer)1
				Element:a
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
											Setting up Ngrok
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Step 1: Download ngrok
												Node:
												(type) c
												(layer)4
													Element:p
														Go to
													Element:a
														https://ngrok.com/
														and download the version that corresponds to your platform. In our case, we'll be downloading the Mac OS X 64-bit version.
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Step 2: Install ngrok
												Node:
												(type) c
												(layer)4
													Element:p
														Installing ngrok really only consists on extracting the file. Depending on how you want to run the app, you need to pay attention to where you extract the file:
												Node:
												(type) c
												(layer)4
													Element:p
														a) You can extract ngrok into the folder of your preference and run ngrok from there.
												Node:
												(type) c
												(layer)4
													Element:p
														or
												Node:
												(type) c
												(layer)4
													Element:p
														b)
													Element:strong
														(Recommended)
														Extract ngrok on your system's
													Element:code
														$PATH
														directory. The advantage of going with this option is that you'll be able to run ngrok from any path on the command line.
												Node:
												(type) c
												(layer)4
													Element:p
														To get your system's
													Element:code
														$PATH
														simply type from the Terminal:
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														echo $PATH
												Node:
												(type) c
												(layer)4
													Element:p
														In most cases this is usually:
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														/usr/local/bin
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Step 3: Tunnel your server
												Node:
												(type) c
												(layer)4
													Element:p
														It's time to run ngrok and let the magic happen.
												Node:
												(type) c
												(layer)4
													Element:p
														If you went for option A on Step 2, fire up a Terminal window, navigate to the directory where you unzipped ngrok and start it by telling it which port we want to expose to the public internet. To do this,type:
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														./ngrok http 4390
												Node:
												(type) c
												(layer)4
													Element:p
														If ngrok is on your
													Element:code
														$PATH
														, you can simply type the following from any directory:
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														ngrok http 4390
												Node:
												(type) c
												(layer)4
													Element:p
														If all goes well you should see the following:
												Node:
												(type) c
												(layer)4
													Element:p
													Element:img
												Node:
												(type) c
												(layer)4
													Element:p
														The
													Element:strong
														Online
														is a good sign! It means the tunnel is working and your app is now accessible at that particular 4390 port.
												Node:
												(type) c
												(layer)4
													Element:p
														The address to access it from the internet would be the one next to Forwarding, with ngrok.io domain. In my case:
													Element:a
														http://018bad74.ngrok.io
														.
												Node:
												(type) c
												(layer)4
													Element:p
														Finally, one of ngrok's neatest features is a UI to inspect requests. Let's access it by following the Web Interface URL
												Node:
												(type) c
												(layer)4
													Element:p
													Element:img
												Node:
												(type) c
												(layer)4
													Element:p
														If we open up the Web Interface, we'll see that there are no requests since we haven't made any requests to our new ngrok address. Let's just click on the first HTTP url there to make a simple GET request from our browser.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:img
												Node:
												(type) c
												(layer)4
													Element:p
														Mmm... something has gone awry. Fear not.
												Node:
												(type) c
												(layer)4
													Element:p
														While we've tunneled our app to the internet through that port &mash; we really don't have any app running yet! We'll need to create a web service that points to that port.
												Node:
												(type) c
												(layer)4
													Element:a
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
											Step 4: Create a simple HTTP server
									Node:
									(type) c
									(layer)3
										Element:p
											Let's set up a simple web server to processes all incoming HTTP requests.
									Node:
									(type) c
									(layer)3
										Element:p
											For this part you'll need a code editor such as Sublime Text or Brackets. We'll be using Node.js to develop our app, so you'll need to make sure you've
										Element:a
											installed it on your machine
											as well.
									Node:
									(type) c
									(layer)3
										Element:p
											Now create an empty folder for your project, let's name it
										Element:strong
											slackapp
											. Create an
										Element:strong
											index.js
											file inside that folder and open it up in your editor. Write down the following code. I've commented it so you can understand what's going on with each line:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											// First we need to import the HTTP module. This module contains all the logic for dealing with HTTP requests. var http = require('http'); // We define the port we want to listen to. Logically this has to be the same port than we specified on ngrok. const PORT=4390; // We create a function which handles any requests and sends a simple response function handleRequest(request, response){ response.end('Ngrok is working! - Path Hit: ' + request.url); } // We create the web server object calling the createServer function. Passing our request function onto createServer guarantees the function is called once for every HTTP request that's made against the server var server = http.createServer(handleRequest); // Finally we start the server server.listen(PORT, function(){ // Callback triggered when server is successfully listening. Hurray! console.log("Server listening on: http://localhost:%s", PORT); });
									Node:
									(type) c
									(layer)3
										Element:p
											To run the app type the following from your
										Element:strong
											slackapp
											directory using the Terminal:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											sudo node index.js
									Node:
									(type) c
									(layer)3
										Element:p
											If everything goes well, the following should be printed on your console:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											Server listening on:
									Node:
									(type) c
									(layer)3
										Element:p
											Now try visiting your ngrok address once more and you should be pleasantly surprised with a
										Element:strong
											Ngrok is working!
											message. Well done!
									Node:
									(type) c
									(layer)3
										Element:a
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
											Creating a Slack app and testing it locally with ngrok
									Node:
									(type) c
									(layer)3
										Element:p
											Now that your local server is exposed to the internet, let's create a simple app with a slash command that gets a message from your server to confirm it's operational.
									Node:
									(type) c
									(layer)3
										Element:p
											First, we'll need to modify our script so it can interact correctly with Slack. To keep our code short and sweet, we'll use a couple of essential third-party modules:
										Element:strong
											express
											and
										Element:strong
											request
											.
									Node:
									(type) c
									(layer)3
										Element:p
											Express is a web application framework that allows us to set up a simple web server. It makes it easy to set up the routing logic we need for the requests we'll receive from Slack.
									Node:
									(type) c
									(layer)3
										Element:p
										Element:strong
											request
											is a convenient module to make HTTP calls. We'll use it to interact with Slack's web API.
									Node:
									(type) c
									(layer)3
										Element:a
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
											Step 1: Create your Slack App
									Node:
									(type) c
									(layer)3
										Element:p
											Let's go through a few simple steps to create an app from the Slack side. It's important to note that the app will remain private — submitting an app to the App Directory it's an entirely different process.
									Node:
									(type) c
									(layer)3
										Element:p
											Creating an app will provide us with the
										Element:strong
											Client ID
											and
										Element:strong
											Secret
											we need to input in our script on the second step and it's where we'll input our different ngrok endpoints.
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
											Go to
										Element:a
											https://api.slack.com/apps
										Element:li
											Click on Create new App on the top-right hand-side.
										Element:li
											Select the team you'd like the app to be associated as its creator and fill all remaining fields as shown below. You can change the description if you wish to. For now we'll leave the links to support and installation instructions blank as we're just using this app for testing purposes.
										Element:li
											In the redirect URI field, paste your ngrok forwarding address and add the
										Element:strong
											/oauth
											endpoint at the end of the address that we opened up in our script. In this example it would look something like this:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											http://42c338e.ngrok.io/oauth
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
											Click on
										Element:code
											Create App
											towards the bottom.
									Node:
									(type) c
									(layer)3
										Element:p
										Element:img
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
											Now let's bundle a slash command with our app. Click on Slash Commands on the left menu -> Create New Command and fill the form as indicated below — just make sure that the Request URL matches your ngrok route and this time is pointing to the
										Element:strong
											/command
											endpoint.
									Node:
									(type) c
									(layer)3
										Element:p
										Element:img
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
											We need to get one final piece of information for our app. Click on
										Element:code
											OAuth & Permissions
											on the left menu, copy your
										Element:strong
											Client ID
											and
										Element:strong
											Client Secret
											and pass them as the corresponding variables on our script next.
									Node:
									(type) c
									(layer)3
										Element:a
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
											Step 2: Refactor our script to work with Slack
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											// Import express and request modules var express = require('express'); var request = require('request'); // Store our app's ID and Secret. These we got from Step 1. // For this tutorial, we'll keep your API credentials right here. But for an actual app, you'll want to store them securely in environment variables. var clientId = '123456789.123456789'; var clientSecret = '11111a2222b3333c44444e'; // Instantiates Express and assigns our app variable to it var app = express(); // Again, we define a port we want to listen to const PORT=4390; // Lets start our server app.listen(PORT, function () { //Callback triggered when server is successfully listening. Hurray! console.log("Example app listening on port " + PORT); }); // This route handles GET requests to our root ngrok address and responds with the same "Ngrok is working message" we used before app.get('/', function(req, res) { res.send('Ngrok is working! Path Hit: ' + req.url); }); // This route handles get request to a /oauth endpoint. We'll use this endpoint for handling the logic of the Slack oAuth process behind our app. app.get('/oauth', function(req, res) { // When a user authorizes an app, a code query parameter is passed on the oAuth endpoint. If that code is not there, we respond with an error message if (!req.query.code) { res.status(500); res.send({"Error": "Looks like we're not getting code."}); console.log("Looks like we're not getting code."); } else { // If it's there... // We'll do a GET call to Slack's `oauth.access` endpoint, passing our app's client ID, client secret, and the code we just got as query parameters. request({ url: 'https://slack.com/api/oauth.access', //URL to hit qs: {code: req.query.code, client_id: clientId, client_secret: clientSecret}, //Query string data method: 'GET', //Specify the method }, function (error, response, body) { if (error) { console.log(error); } else { res.json(body); } }) } // Route the endpoint that our slash command will point to and send back a simple response to indicate that ngrok is working app.post('/command', function(req, res) { res.send('Your ngrok tunnel is up and running!'); }); });
									Node:
									(type) c
									(layer)3
										Element:p
											Do
										Element:strong
											not
											upload this file to a public GitHub repository until you relocate variables such as the Client ID and Secret to environment variables. Keep your Client Secret safe!
									Node:
									(type) c
									(layer)3
										Element:a
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
											Step 3: Engage!
									Node:
									(type) c
									(layer)3
										Element:p
											Run the node script once more. Before we can run the slash command, we'll need to authenticate against our app to add it to our team. There's an easy way to generate the authentication link.
									Node:
									(type) c
									(layer)3
										Element:p
											Simply go to
										Element:a
											https://api.slack.com/docs/slack-button
											, scroll down to the **Add the Slack button **section where you can find a handy generator for a button that would allow anyone to add your new app. Make sure the right app is selected on the generator and that you're requesting the commands scope, which is necessary to add our bundled slash command:
									Node:
									(type) c
									(layer)3
										Element:p
										Element:img
									Node:
									(type) c
									(layer)3
										Element:p
											Click on the Add to Slack button to go through the OAuth process and add the app to the team of your preference (it doesn't have to be the team used to create the app).
									Node:
									(type) c
									(layer)3
										Element:hr
									Node:
									(type) c
									(layer)3
										Element:p
											If all goes well, you should be able to send the
										Element:strong
											/ngrok
											command from any channel on the team and will invoke the following response:
									Node:
									(type) c
									(layer)3
										Element:p
										Element:img
									Node:
									(type) c
									(layer)3
										Element:p
											Well done — you've created a app that's actually running from your local server. You could just modify the response above, save the file, run your node process once more and when using your slash command the changes would be immediately reflected. Neat!
									Node:
									(type) c
									(layer)3
										Element:p
											Now there's nothing stopping you from building more complex apps and use your new local development environment to test features like
										Element:a
											message buttons
											, using an ngrok route as your message action URI instead without any hassles. Try it out and experiment.
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
											Related documentation
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:a
											Building Slack apps
										Element:br
										Element:em
											Slack Platform documentation
										Element:li
										Element:a
											Slack Button
										Element:br
										Element:em
											Slack Platform documentation
									Node:
									(type) c
									(layer)3
										Element:footer
										Element:ul
										Element:li
											Using Slack
										Element:li
										Element:a
											Product
										Element:li
										Element:a
											Pricing
										Element:li
										Element:a
											Support
										Element:li
										Element:a
											Slack Guides
										Element:li
										Element:a
											Video Guides
										Element:li
										Element:a
											App Directory
										Element:li
										Element:a
											API
										Element:ul
										Element:li
											Slack
										Element:li
										Element:a
											Jobs
										Element:li
										Element:a
											Customers
										Element:li
										Element:a
											Developers
										Element:li
										Element:a
											Events
										Element:li
										Element:a
											Blog
										Element:li
										Element:a
											Podcast
										Element:li
										Element:a
											Slack Shop
										Element:ul
										Element:li
											Legal
										Element:li
										Element:a
											Privacy
										Element:li
										Element:a
											Security
										Element:li
										Element:a
											Terms of Service
										Element:li
										Element:a
											Policies
										Element:ul
										Element:li
											Handy Links
										Element:li
										Element:a
											Download desktop app
										Element:li
										Element:a
											Download mobile app
										Element:li
										Element:a
											Brand Guidelines
										Element:li
										Element:a
											Slack at Work
										Element:li
										Element:a
											Status
										Element:a
										Element:ul
										Element:li
										Element:a
											Contact Us
										Element:li
										Element:a
										Element:li
										Element:a
