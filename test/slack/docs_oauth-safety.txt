Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					Safely Storing Credentials
			Node:
			(type) c
			(layer)1
				Element:p
					Keeping credentials secure is important whether you're developing open source libraries and tools,
				Element:a
					custom integrations
					for your team, or
				Element:a
					Slack apps
					for distribution to teams across the world.
			Node:
			(type) c
			(layer)1
				Element:p
					Even if you're not working with
				Element:a
					OAuth 2.0
					and user access tokens, please consider these safety suggestions when working with the Slack Platform.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:a
					Security considerations for Slack apps
				Element:li
				Element:a
					Best practices for custom integrations
				Element:li
				Element:a
					Safe token storage
				Element:li
				Element:a
					7-layer OSI model
			Node:
			(type) c
			(layer)1
				Element:p
				Element:a
			Node:
			(type) h1
			(layer)1
				Element:h1
					Practical considerations
			Node:
			(type) c
			(layer)1
				Element:p
				Element:a
			Node:
			(type) c
			(layer)1
				Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Security considerations for Slack apps
						Node:
						(type) c
						(layer)2
							Element:p
								As a Slack App developer, you'll be working with credentials issued to you from Slack, as well as token values representing team members, teams, and specific features of your application.
						Node:
						(type) c
						(layer)2
							Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Client ID and secret
									Node:
									(type) c
									(layer)3
										Element:ol
										Element:li
										Element:p
											Your Client ID is one piece of information used to identify your application and frequently appears in OAuth negotiation URLs and other contexts. Your Client ID can be shared freely in code and email and cannot be used alone to act on your application's behalf.
										Element:li
										Element:p
											Your Client Secret should be treated delicately. It is how you securely identify your application's rights and identity when exchanging tokens with Slack. Do not distribute client secrets in email, distributed native applications, client-side javascript, or public code repositories.
									Node:
									(type) c
									(layer)3
										Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Slack-app based user & bot user tokens
									Node:
									(type) c
									(layer)3
										Element:p
											These tokens represent specific access levels granted by the OAuth scopes you negotiated.
									Node:
									(type) c
									(layer)3
										Element:p
										Element:a
											Bot user
											tokens can connect to the
										Element:a
											real time messaging API
											and post messages on their own behalf. They can also access a subset of API methods to better understand the channels, team members, and messages received as part of its activities.
									Node:
									(type) c
									(layer)3
										Element:p
											User tokens, such as those received through the
										Element:a
											Add to Slack
											and
										Element:a
											Sign in with Slack
											flows are capable only of the
										Element:a
											permissions granted
											to it during the OAuth flow using scopes.
									Node:
									(type) c
									(layer)3
										Element:p
											Store user and bot user tokens with care and never place them in a public code repository or client-side code like Javascript.
									Node:
									(type) c
									(layer)3
										Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Incoming webhook URLs
									Node:
									(type) c
									(layer)3
										Element:p
											Slack app-based incoming webhook URLs allows posting messages only to a specific channel configured by the approving team member. Their identity is always tied to the application associated with the URLs and cannot be used as arbitrary users or on unapproved channels.
									Node:
									(type) c
									(layer)3
										Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Redirect URIs
									Node:
									(type) c
									(layer)3
										Element:p
											Redirect URIs appear as URLs and are safe to be part of published code. However, ensure that the redirect URIs defined in a public application are limited only to domain names in your direct control.
									Node:
									(type) c
									(layer)3
										Element:p
											We recommend that after you complete local development, remove
										Element:code
											localhost
											and related domains from your configuration list.
									Node:
									(type) c
									(layer)3
										Element:p
										Element:a
									Node:
									(type) c
									(layer)3
										Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Best practices for Custom Integrations
						Node:
						(type) c
						(layer)2
							Element:p
								Developers working with custom integrations have the benefit of each feature having its own credentials and an association with a single team. However, without the application permissions enforced by Slack apps, the tokens, URLs, and credentials used by Custom Integrations can be very powerful and require special care.
						Node:
						(type) c
						(layer)2
							Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Incoming webhook URLs
									Node:
									(type) c
									(layer)3
										Element:p
											Do not share
										Element:a
											incoming webhook
											URLs in public code repositories. Incoming webhook URLs belong to a specific team member that installed them. When a webhook is contained within a Slack app, it is scoped to only post as a specific application-associated user and approved channel. Custom integration-based webhooks are capable of posting to any channel and have more flexibly identities.
									Node:
									(type) c
									(layer)3
										Element:p
											Compromised incoming webhook URLs can be used to post unwanted, unsolicited, or malicious messages to your team.
									Node:
									(type) c
									(layer)3
										Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Slash command tokens
									Node:
									(type) c
									(layer)3
										Element:p
											Tokens for
										Element:a
											slash commands
											represent a relationship between your application and Slack. Do not store them in public code repositories.
									Node:
									(type) c
									(layer)3
										Element:p
											Each application can have only one slash command token, even if they have multiple commands associated with an app. Safely store this token in your environment so that it is known only to your application and to Slack. Slack will use it to identify itself when executing slash command invocation URLs.
									Node:
									(type) c
									(layer)3
										Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Bot user tokens
									Node:
									(type) c
									(layer)3
										Element:p
											Custom Integration-based
										Element:a
											bot user
											tokens have more capabilities than bot user tokens received through
										Element:a
											Slack apps
											. Be especially careful with both kinds of tokens.
									Node:
									(type) c
									(layer)3
										Element:p
											Bot user tokens may connect to the real time streaming APIs, and perform a number of other activities, including posting messages. Do not distribute in code repositories or yield to untrusted third parties.
									Node:
									(type) c
									(layer)3
										Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Test tokens
									Node:
									(type) c
									(layer)3
										Element:p
											The tokens generated by the
										Element:a
											OAuth Test Token Generator
											should never be shared or published externally. They represent all the capabilities of a specific team user.
									Node:
									(type) c
									(layer)3
										Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Safe Token Storage
						Node:
						(type) c
						(layer)2
							Element:p
								Storing authentication secrets is difficult, and how you do it best depends on context, usage, and design requirements. While it would be super cool if all tokens were encrypted with individual keys controlled by the customers, most implementations do not allow that. Here are some things to consider when storing tokens to ensure that we're doing everything we can to prevent accidental exposure or mix-up of usage.
						Node:
						(type) c
						(layer)2
							Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											The actual token
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
											Do you need a token to make your functionality work?
										Element:ul
										Element:li
											If not, err on the side of not storing more customer secrets than you need to.
										Element:li
											Are you asking for a least-privilege token?
										Element:ul
										Element:li
											Most application need only perform a handful of things with a token. Make sure you are requesting the most limited token
										Element:a
											authorization scopes
											possible to protect your customers in case of a breach.
									Node:
									(type) c
									(layer)3
										Element:p
										Element:a
									Node:
									(type) c
									(layer)3
										Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Thinking of things in the 7-Layer OSI model
						Node:
						(type) c
						(layer)2
							Element:p
								The
							Element:a
								7-Layer OSI model
								breaks out how applications and computers function over a network and can provide a useful model for thinking about security at each layer. By breaking apart each layer, it's possible to look at different risks and mitigations to best apply.
						Node:
						(type) c
						(layer)2
							Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											7/6. Application layer and Presentation layer
									Node:
									(type) c
									(layer)3
										Element:p
											The Application layer is mostly focused on high-level APIs, and how your application exposes itself to an end user. Here are some things to consider:
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
											Don't expose the token to the end user once it is stored in a database
										Element:ul
										Element:li
											Ensure there is no functionality that echoes back tokens (or any other customer secrets) to the user. Check your error scenarios especially. Unless this is absolutely required, consider creating a middleware layer to facilitate the usage of a stored token without storing it within your application code.
										Element:li
											Lock down the usage of your application itself to prevent misuse of the token
										Element:ul
										Element:li
											Think about
										Element:a
											OWASP Top 10 Web Vulnerabilities
											such as XSS, CSRF, SQLi
										Element:li
											Can an attacker abuse your application's functionality to gain access to a token? or trigger functionality that may be undesirable functionality?
										Element:li
											Think about rate-limiting
										Element:ul
										Element:li
											Does your application utilize rate-limiting in a way that prevents misuse of a token? Spamming a token can potentially disable that token, leaving your integration in an erroneous state.
										Element:li
											Use a database to store tokens, and do not hard-code any tokens into code
										Element:li
											Don't consume tokens via the query string of a URL via a GET request. Always use a POST request when transmitting secrets over HTTP
									Node:
									(type) c
									(layer)3
										Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											5. Session layer
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
											Store tokens in a way that directly links them to the owner (team and user)
										Element:li
											Ensure that if a user deletes their account, data, or integration, that you also delete that token from your production systems, and backups
										Element:li
											If you no longer have need for a customer's token, delete it immediately from all production systems and backups
										Element:li
											Make sure that there is absolutely no way to expose one users token (or the functionality of that token) to another user on accident
										Element:li
											Ensure that your sessions on your application utilize best practices on session id generation, and test for the ability of one session to know about our see the contents of another user's session. (ensure that any debug functionality for user impersonation among other things does not exist in your application)
									Node:
									(type) c
									(layer)3
										Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											4. Transport
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
											Ensure you are using proper TLS to encrypt all traffic between you and the customer; you and the service you're using the token with to ensure the token never gets transmitted unencrypted across the wire
										Element:ul
										Element:li
											Make sure you do not have any "Ignore SSL/TLS Errors" in your application code
										Element:li
											If you have a web-facing service, ensure that you do not have any mixed content, and that your certificate setup is proper and supports modern cryptographic standards.
										Element:ul
										Element:li
											You can use
										Element:a
											Qualys' SSL Labs
											to help test for this
										Element:li
											Once your application has knowledge of a user token, ensure that you are not logging it, or moving it in any way outside of your application's database
									Node:
									(type) c
									(layer)3
										Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											3-1. Network, Data Link, Physical
									Node:
									(type) c
									(layer)3
										Element:p
											These layers encompass most of the non-application-based internet-plumbing, including protocols such as TCP, IPv4, MAC, and Ethernet. We're going to assume for safe token usage and storage that these layers are already secured, however there are a few points to consider, especially if you are hosting in the cloud.
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
											If you are using a cloud provider (AWS, DigitalOcean, Heroku, etc), make sure that your account has two-factor authentication enabled, and that you are using strong passwords
										Element:ul
										Element:li
											Make sure that the only accounts with access to your production systems actually need that access
										Element:li
											If you are backing up your data, ensure that you are storing it in a safe location that is locked down. Unsecured backups are easy targets for attackers to practically steal most if not all of your application's data and secrets
										Element:li
											If your application is not web based, but based on a computer or mobile device, ensure that you are using that platform's guided advice on how to store secrets. You should never have an instance in which you are writing a token to disk in plaintext when there is a system keychain or other encryption mechanism available.
									Node:
									(type) c
									(layer)3
										Element:footer
										Element:ul
										Element:li
											Using Slack
										Element:li
										Element:a
											Product
										Element:li
										Element:a
											Pricing
										Element:li
										Element:a
											Support
										Element:li
										Element:a
											Slack Guides
										Element:li
										Element:a
											Video Guides
										Element:li
										Element:a
											App Directory
										Element:li
										Element:a
											API
										Element:ul
										Element:li
											Slack
										Element:li
										Element:a
											Jobs
										Element:li
										Element:a
											Customers
										Element:li
										Element:a
											Developers
										Element:li
										Element:a
											Events
										Element:li
										Element:a
											Blog
										Element:li
										Element:a
											Podcast
										Element:li
										Element:a
											Slack Shop
										Element:ul
										Element:li
											Legal
										Element:li
										Element:a
											Privacy
										Element:li
										Element:a
											Security
										Element:li
										Element:a
											Terms of Service
										Element:li
										Element:a
											Policies
										Element:ul
										Element:li
											Handy Links
										Element:li
										Element:a
											Download desktop app
										Element:li
										Element:a
											Download mobile app
										Element:li
										Element:a
											Brand Guidelines
										Element:li
										Element:a
											Slack at Work
										Element:li
										Element:a
											Status
										Element:a
										Element:ul
										Element:li
										Element:a
											Contact Us
										Element:li
										Element:a
										Element:li
										Element:a
