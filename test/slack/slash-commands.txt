Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					Slash Commands
			Node:
			(type) c
			(layer)1
				Element:p
					Slash Commands enable Slack users to interact with your app directly from Slack.
			Node:
			(type) c
			(layer)1
				Element:p
				Element:img
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:a
					What are slash commands?
				Element:li
				Element:a
					How do slash commands work?
				Element:li
				Element:a
					Triggering commands
				Element:li
				Element:a
					Responding to commands
				Element:li
				Element:a
					Best Practices
				Element:li
				Element:a
					SSL
				Element:li
				Element:a
					Attaching your custom command to an app
			Node:
			(type) c
			(layer)1
				Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								What are commands?
						Node:
						(type) c
						(layer)2
							Element:p
								Messages that begin with a slash (
							Element:code
								/
								) are commands and will behave differently from regular messages. For example, you can use the "topic" command to change your current channel's topic to "Hello!" by typing
							Element:code
								/topic Hello!
								. When you type
							Element:code
								/remind me in 10 minutes to drink a glass of water
								the command will set a reminder for you to drink a glass of water in 10 minutes.
						Node:
						(type) c
						(layer)2
							Element:p
								Under the hood, there are at least 3 different kinds of commands. They work similarly, but are useful for different reasons.
						Node:
						(type) c
						(layer)2
							Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Built-in Commands
									Node:
									(type) c
									(layer)3
										Element:p
											Commands like
										Element:code
											/topic
											and
										Element:code
											/remind
											are built into Slack, and available to every team. They often work as shortcuts for doing something related to your channel or Slack team quickly from the message input field.
										Element:a
											Here's a list
											of all of the built-in commands and descriptions about what they do. Give them a try!
									Node:
									(type) c
									(layer)3
										Element:p
										Element:a
									Node:
									(type) c
									(layer)3
										Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Slack App Commands
									Node:
									(type) c
									(layer)3
										Element:p
											These are slash commands written by developers like you! They typically trigger an action (like posting a gif, or starting a video conference, or adding something new to your todo list).
									Node:
									(type) c
									(layer)3
										Element:p
											As part of a Slack app, they can be easily installed for your team as an
										Element:a
											internal integration
											or shared with the world, distributed to other teams.
									Node:
									(type) c
									(layer)3
										Element:p
											When a slash command is invoked, Slack sends your server a HTTP POST of data describing the user's invocation.
									Node:
									(type) c
									(layer)3
										Element:p
											In order to protect team data, commands installed as part of a
										Element:em
											distributed
											Slack app must use HTTPS for their command invocation URL. When building an internal integration for your own team, SSL verification is waived. We also provide a means to
										Element:a
											verify the request
											is coming from Slack.
									Node:
									(type) c
									(layer)3
										Element:p
											Once your server receives the invocation, it may post a message in response. Any posted messages will originate from your application's identity.
									Node:
									(type) c
									(layer)3
										Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Custom commands
									Node:
									(type) c
									(layer)3
										Element:p
											Another way to use
										Element:a
											slash commands
											is as part of a
										Element:a
											legacy custom integration
											. We recommend building your commands as part of a Slack app instead.
									Node:
									(type) c
									(layer)3
										Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								How do commands work?
						Node:
						(type) c
						(layer)2
							Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Triggering a command
									Node:
									(type) c
									(layer)3
										Element:p
											When someone types a slash command, the message (and its data) will be sent to the configured external URL via
										Element:code
											HTTP POST
											. It's up to you, the developer, to do something with the message data and respond back, if desired.
									Node:
									(type) c
									(layer)3
										Element:p
											For example, imagine that there's an app command installed called
										Element:code
											/weather
											. If someone on the example.slack.com team types
										Element:code
											/weather 94070
											in the #test channel and hits enter, this data would be posted to the external URL:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											token=gIkuvaNzQIHg97ATvDxqgjtO team_id=T0001 team_domain=example channel_id=C2147483705 channel_name=test user_id=U2147483697 user_name=Steve command=/weather text=94070 response_url=https://hooks.slack.com/commands/1234/5678
									Node:
									(type) c
									(layer)3
										Element:p
											Typically, this data will be sent to your URL as a HTTP POST with a
										Element:code
											Content-type
											header set as
										Element:code
											application/x-www-form-urlencoded
											. If you've chosen to have your slash command's URL receive invocations as a GET request, no explicit
										Element:code
											Content-type
											header will be set.
									Node:
									(type) c
									(layer)3
										Element:p
										Element:strong
											NOTE:
											If your Slack app is set to be distributable or is part of the Slack app directory, the URL you provide
										Element:strong
											must
											be use HTTPS with a valid, verifiable SSL certificate. Self-signed certificates cannot be used.
										Element:a
											See below
											for more information.
									Node:
									(type) c
									(layer)3
										Element:p
										Element:a
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Resolving mentioned user IDs, channel IDs, and URLs
												Node:
												(type) c
												(layer)4
													Element:p
														Let's say your slash command was about assigning tasks to a user within a channel. @bert might decide to assign @ernie a task like so:
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														/task @ernie don't wake me up at night anymore in #here
												Node:
												(type) c
												(layer)4
													Element:p
														In the above example, your received
													Element:code
														text
														parameter would look like this (though properly URL encoded)
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														text=@ernie don't wake me up at night anymore in #here
												Node:
												(type) c
												(layer)4
													Element:p
														The important part of that URL-encoded value, and somewhat useless to you on its own is:
													Element:code
														@ernie
														. That's a username mention.
												Node:
												(type) c
												(layer)4
													Element:p
														But to actually address that as any kind of unique entity on the team you're working with, you really want to work with a user ID, not the username. Of course, you'd also like to know that the channel named
													Element:code
														#here
														is actually the one with the ID
													Element:code
														C012ABCDE
														.
												Node:
												(type) c
												(layer)4
													Element:p
														Until just recently, you'd have had to make do with that username and look it up against
													Element:a
														or other means. Same with the channel name and
													Element:code
														users.list
													Element:a
														.
													Element:code
														channels.list
												Node:
												(type) c
												(layer)4
													Element:p
														But now there is another way.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:strong
														Configure your slash command to receive expanded entity references
												Node:
												(type) c
												(layer)4
													Element:p
														When configuring your slash command, you'll find a toggle that enables this translation of channel names and user names into their correlated IDs. It's labeled:
													Element:em
														Escape channels, users, and links sent to your app
														.
												Node:
												(type) c
												(layer)4
													Element:p
														After toggling this feature to "on", you'll find that the Bert's equivalent
													Element:code
														text
														parameter becomes:
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														text=<@U012ABCDEF|ernie> don't wake me up at night anymore in <#C012ABCDE|here>
												Node:
												(type) c
												(layer)4
													Element:p
														Note the angle brackets (
													Element:code
														<
														and cousin
													Element:code
														>
														) surrounding each tokenized entity. This is strikingly similar to how we
													Element:a
														format mentions in messages
														.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:strong
														What about links?
												Node:
												(type) c
												(layer)4
													Element:p
														There's nothing too special about links. Instead of the naked URL just appearing in the string of text, it'll be surrounded with angle brackets. So your
													Element:code
														https://api.slack.com/slash-commands
														URL becomes
													Element:code
														<https://api.slack.com/slash-commands>
														.
												Node:
												(type) c
												(layer)4
													Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Validating the command
									Node:
									(type) c
									(layer)3
										Element:p
											When your server receives the above data, you should validate whether to service the request by confirming that the
										Element:code
											token
											value matches the validation token you received from Slack when creating the command. The token is available in the "Basic information" section of your app's configuration. It's
										Element:strong
											not
											the same token as the one used to submit Web API requests, but instead a kind of shared secret.
									Node:
									(type) c
									(layer)3
										Element:p
										Element:img
									Node:
									(type) c
									(layer)3
										Element:p
											Additionally, you can verify whether the
										Element:code
											team_id
											matches a team that has approved your command for usage.
									Node:
									(type) c
									(layer)3
										Element:p
											If the token or team are unknown to your application, you should refuse to service the request and return an error instead.
									Node:
									(type) c
									(layer)3
										Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Responding to a command
									Node:
									(type) c
									(layer)3
										Element:p
											When the external URL receives this data, you have a few different options for how to respond.
									Node:
									(type) c
									(layer)3
										Element:p
											If you'd like to just return information in the simplest possible way, it can respond immediately (within 3000 milliseconds) with a plain text string:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											It's 80 degrees right now.
									Node:
									(type) c
									(layer)3
										Element:p
										Element:img
									Node:
									(type) c
									(layer)3
										Element:p
											If you'd like to customize the appearance of the response message with extra
										Element:a
											message formatting
											or
										Element:a
											attachment fields
											, you can respond immediately (within 3000 milliseconds) with a valid JSON payload:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											{ "text": "It's 80 degrees right now.", "attachments": [ { "text":"Partly cloudy today and tomorrow" } ] }
									Node:
									(type) c
									(layer)3
										Element:p
											Your URL should respond with a HTTP 200 "OK" status code. Any other flavor of response will result in a user-facing error.
									Node:
									(type) c
									(layer)3
										Element:p
											If you don't want to respond with any message or would rather send your responses later using
										Element:em
											delayed responses
											, you should still respond to the invocation of your URL with a simple HTTP 200.
									Node:
									(type) c
									(layer)3
										Element:p
											That said, we strongly recommend that you send some kind of positive affirmation to the user as an ephemeral response, even if it's just a simple confirmation that the command was understood.
									Node:
									(type) c
									(layer)3
										Element:p
										Element:i
											If you are responding with JSON instead of plain text, the
										Element:code
											Content-type
											header of the response must match the disposition of your content,
										Element:code
											application/json
											.
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														"In Channel" vs "Ephemeral" responses
												Node:
												(type) c
												(layer)4
													Element:p
														By default, the response messages sent to commands will only be visible to the user that issued the command (we call these "ephemeral" messages). However, if you would like the response to be visible to all members of the channel in which the user typed the command, you can add a
													Element:code
														response_type
														of
													Element:code
														in_channel
														to the JSON response, like this:
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														{ "response_type": "in_channel", "text": "It's 80 degrees right now.", "attachments": [ { "text":"Partly cloudy today and tomorrow" } ] }
												Node:
												(type) c
												(layer)4
													Element:p
														When the
													Element:code
														response_type
														is
													Element:code
														in_channel
														,
													Element:strong
														both
														the response message and the initial message typed by the user will be shared in the channel. It will look like this:
												Node:
												(type) c
												(layer)4
													Element:p
													Element:img
												Node:
												(type) c
												(layer)4
													Element:p
														Setting
													Element:code
														response_type
														to
													Element:code
														ephemeral
														is the same as not including the response type at all, and the response message will be visible only to the user that issued the command. For the best clarity of intent, we recommend always declaring your intended
													Element:code
														response_type
														.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:img
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Delayed responses and multiple responses
												Node:
												(type) c
												(layer)4
													Element:p
														If you want to provide additional command response messages, or if you're unable to immediately respond to a command within 3000 milliseconds, use the specific
													Element:code
														response_url
														we send with our initial execution of your URL to respond to a command at your leisure. With this approach, you can respond to a user's command up to 5 times within 30 minutes of the command's invocation.
												Node:
												(type) c
												(layer)4
													Element:p
														Sending HTTP requests to this
													Element:code
														response_url
														is easy. Just build a JSON POST body in the same format as used when responding to our command invocation request to your registered URL. It supports all of the same fields (
													Element:code
														response_type
														,
													Element:code
														text
														, and
													Element:code
														attachments
														). Then, send that data as an HTTP POST with a
													Element:code
														content-type
														of
													Element:code
														application/json
														to the destination specified as the
													Element:code
														response_url
														.
												Node:
												(type) c
												(layer)4
													Element:p
														The only user-facing difference between immediate responses and delayed responses is that "in channel" delayed responses will not include the initial command sent by the user. To echo the command back to the channel, you'll still need to provide a response to Slack's original visit to your invocation URL.
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Making slash commands more interactive with message buttons
												Node:
												(type) c
												(layer)4
													Element:p
														Slash commands that are installed as part of a
													Element:a
														Slack app
														are also able to use
													Element:a
														message buttons
														to drive interactive workflows with precision and clarity.
												Node:
												(type) c
												(layer)4
													Element:p
														When responding to a command invocation or executing a
													Element:code
														response_url
														, include your message button actions as attachments to your message.
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Responding to the user with an error message
												Node:
												(type) c
												(layer)4
													Element:p
														If you would like to let the user know that something went wrong, you can return an ephemeral response containing a helpful error message. To do this, you can either respond directly to the slash command request, or use the provided
													Element:code
														response_url
														.
												Node:
												(type) c
												(layer)4
													Element:p
														You'll want to send a JSON payload that looks like this:
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														{ "response_type": "ephemeral", "text": "Sorry, that didn't work. Please try again." }
												Node:
												(type) c
												(layer)4
													Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Best practices
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
								If you're not ready to respond to an incoming command but still want to acknowledge the user's action by having their slash command displayed within the channel, respond to your URL's invocation with a simplified JSON response containing only the
							Element:code
								response_type
								field set to
							Element:code
								in_channel
								:
							Element:code
								{"response_type": "in_channel"}
								.
							Element:li
								If your command doesn't need to post anything back (either privately or publicly), respond with an empty HTTP 200 response. Best to use this only if the nature of your command makes it obvious that no response is necessary or desired. Even a simple "Got it!" ephemeral response is better than nothing.
							Element:li
								Help your users understand how to use your command.
							Element:strong
								Provide a help action that explains your command's usage
								. If your slash command was
							Element:code
								/please
								, you should provide a response to
							Element:code
								/please help
								that lists the other actions available.
							Element:li
								Keep track of the validation token Slack gives you when the command is created. Always validate the
							Element:code
								token
								field in an incoming slash command request has been issued to you by Slack.
							Element:li
								Limit yourself to 20 attachments per message. We'll be unable to process messages with more than 100.
							Element:li
								Turn on entity resolution for usernames, channels, and links by flipping the toggle in your slash command's configuration dialog. Always work with user IDs and channel IDs.
							Element:li
								If you're using message buttons or attachments, be sure and follow
							Element:a
								our guidelines
								.
						Node:
						(type) c
						(layer)2
							Element:p
								Consult our
							Element:a
								Slash Commands Style Guide
								for further tips!
						Node:
						(type) c
						(layer)2
							Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								SSL
						Node:
						(type) c
						(layer)2
							Element:p
								Slash commands that are part of a Slack app set in "distributed mode" must support HTTPS and serve a valid SSL certificate. Self-signed certificates are not allowed. Check out
							Element:a
								CloudFlare
								or
							Element:a
								Let's Encrypt
								for easy ways to obtain valid certificates.
						Node:
						(type) c
						(layer)2
							Element:p
								Before submitting a command to your server, Slack will occasionally send your command URLs a simple POST request to verify the certificate. These requests will include a parameter
							Element:code
								ssl_check
								set to
							Element:code
								1
								. Mostly, you may ignore these requests, but please do respond with a HTTP 200 OK.
						Node:
						(type) c
						(layer)2
							Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Setting up your slash command
						Node:
						(type) c
						(layer)2
							Element:p
								Create a
							Element:a
								Slack app
								by visiting
							Element:a
								app management
								while logged in. After naming your app, make sure to add the Slash commands feature to your app before installing. The shared secret verification token is available in the "Basic information" section of your app's configuration.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Related Articles
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:a
								Tutorial by Beep Boop (beepboophq.com)
							Element:span
								Lessons learned building Beep Boop's new Slack bot
							Element:li
							Element:a
								Tutorial by Tomomi Imura (medium.com)
							Element:span
								Creating a Slack Command Bot from Scratch with Node.js & Distribute It
							Element:li
							Element:a
								Case study by Slack
							Element:span
								Behind the scenes of /todo
							Element:li
							Element:a
								Tutorial by Matthieu Varagnat (medium.com)
							Element:span
								How to build a Slack app
							Element:li
							Element:a
								Tutorial by Slack
							Element:span
								A style guide for slash commands
						Node:
						(type) c
						(layer)2
							Element:footer
							Element:ul
							Element:li
								Using Slack
							Element:li
							Element:a
								Product
							Element:li
							Element:a
								Pricing
							Element:li
							Element:a
								Support
							Element:li
							Element:a
								Slack Guides
							Element:li
							Element:a
								Video Guides
							Element:li
							Element:a
								App Directory
							Element:li
							Element:a
								API
							Element:ul
							Element:li
								Slack
							Element:li
							Element:a
								Jobs
							Element:li
							Element:a
								Customers
							Element:li
							Element:a
								Developers
							Element:li
							Element:a
								Events
							Element:li
							Element:a
								Blog
							Element:li
							Element:a
								Podcast
							Element:li
							Element:a
								Slack Shop
							Element:ul
							Element:li
								Legal
							Element:li
							Element:a
								Privacy
							Element:li
							Element:a
								Security
							Element:li
							Element:a
								Terms of Service
							Element:li
							Element:a
								Policies
							Element:ul
							Element:li
								Handy Links
							Element:li
							Element:a
								Download desktop app
							Element:li
							Element:a
								Download mobile app
							Element:li
							Element:a
								Brand Guidelines
							Element:li
							Element:a
								Slack at Work
							Element:li
							Element:a
								Status
							Element:a
							Element:ul
							Element:li
							Element:a
								Contact Us
							Element:li
							Element:a
							Element:li
							Element:a
