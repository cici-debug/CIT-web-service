Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					Slack Button
			Node:
			(type) c
			(layer)1
				Element:p
					The Slack button is the simplest way to offer your service to teams using Slack. A Slack button app gives you
				Element:a
					incoming webhooks
					,
				Element:a
					slash commands
					and
				Element:a
					bot users
					wrapped in OAuth. You write the commands and the webhook that your app needs, and configure the options for your users. With just a few clicks, your users can add your app to their Slack team and start receiving notifications, issuing commands and chatting with your bot.
			Node:
			(type) c
			(layer)1
				Element:p
					The Slack button is also a key aspect of sharing your
				Element:a
					Slack app
					in our
				Element:a
					Application Directory
					!
			Node:
			(type) c
			(layer)1
				Element:p
				Element:img
			Node:
			(type) c
			(layer)1
				Element:p
					When someone clicks on the Slack button in your website or app, the
				Element:a
					OAuth process
					begins by asking them to choose their Slack team and account. The app will then configure an incoming webhook, slash commands and/or a bot on their behalf. Users will no longer need to copy and paste HTML, webhook URLs, or API tokens!
			Node:
			(type) c
			(layer)1
				Element:p
				Element:img
			Node:
			(type) c
			(layer)1
				Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Using the Slack button
						Node:
						(type) c
						(layer)2
							Element:p
								Here's how to build a Slack app that can be added to any team via the Slack button. It will let your app send messages to Slack (via incoming webhooks), install slash commands and/or add a bot user on their team. From a user experience standpoint, the flow is identical to a normal OAuth 2.0 flow.
						Node:
						(type) c
						(layer)2
							Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Register your Slack app
									Node:
									(type) c
									(layer)3
										Element:p
											Before you do anything else, you'll need to
										Element:a
											create your Slack app
											to get a
										Element:code
											client_id
											and
										Element:code
											client_secret
											to use
										Element:a
											with OAuth
											.
									Node:
									(type) c
									(layer)3
										Element:p
										Element:a
											Create your Slack app
									Node:
									(type) c
									(layer)3
										Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Attach a slash command to your app (optional)
									Node:
									(type) c
									(layer)3
										Element:p
											After saving your app, you'll have the option to attach at least one slash command to your app so that teams installing your app will also be able to use your slash commands.
									Node:
									(type) c
									(layer)3
										Element:p
										Element:em
											Note: Slash commands attached to apps must point to URL on your servers with a valid secure certificate.
									Node:
									(type) c
									(layer)3
										Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Attach a bot user to your app (optional)
									Node:
									(type) c
									(layer)3
										Element:p
											After saving your app, you'll have the option to attach a bot user to your app so that teams installing your app will also be able to converse with your bot.
									Node:
									(type) c
									(layer)3
										Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Add the Slack button
									Node:
									(type) c
									(layer)3
										Element:p
											Now you can add the Slack button to your website, ideally in an area that makes sense for users to set up notifications and integrations with other services. Generate the code for your Slack button below:
									Node:
									(type) c
									(layer)3
										Element:label
										Element:span
											Button HTML
										Element:span
											Add to Slack Button HTML
									Node:
									(type) c
									(layer)3
										Element:span
											App:
									Node:
									(type) c
									(layer)3
										Element:span
											Code for app:
									Node:
									(type) c
									(layer)3
										Element:label
									Node:
									(type) c
									(layer)3
										Element:span
											Scopes:
									Node:
									(type) c
									(layer)3
										Element:span
											Scopes to include:
									Node:
									(type) c
									(layer)3
										Element:label
											incoming webhook
									Node:
									(type) c
									(layer)3
										Element:label
											commands
									Node:
									(type) c
									(layer)3
										Element:label
											bot
									Node:
									(type) c
									(layer)3
										Element:p
											Looks like you don't have any apps yet.
									Node:
									(type) c
									(layer)3
										Element:a
											Create An App
									Node:
									(type) c
									(layer)3
										Element:p
											At this time, the Slack button can request any combination of the
										Element:code
											incoming-webhook
											,
										Element:code
											bot
											,
										Element:code
											commands
											scopes. The scopes are requested in the
										Element:code
											scope
											parameter of the Slack button's URL. In addition to these compound scopes, you may also request the specific object scopes you're interested in, like
										Element:code
											reactions.read
											or
										Element:code
											emoji.list
											. You can also specify the following three optional parameters:
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:code
											redirect_uri
											-- The URL to redirect back to upon authorization
										Element:li
										Element:code
											state
											-- unique string to be passed back upon completion
										Element:li
										Element:code
											team
											-- Slack team ID of the authenticated user to the integration or app to that team
									Node:
									(type) c
									(layer)3
										Element:p
										Element:strong
											Note:
											the
										Element:code
											incoming-webhook
											scope is designed to allow you to request permission to post content into the user's Slack team. It intentionally does not include any read privileges, making it perfect for services that want to send posts or notifications into Slack teams that might not want to give read access to messages. For this reason, it cannot be added alongside the
										Element:code
											read
											,
										Element:code
											post
											, and
										Element:code
											client
											scopes.
									Node:
									(type) c
									(layer)3
										Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Add to Slack flow
						Node:
						(type) c
						(layer)2
							Element:p
							Element:img
						Node:
						(type) c
						(layer)2
							Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Request a token
									Node:
									(type) c
									(layer)3
										Element:p
											After someone accepts or denies the OAuth request, Slack redirects them back to your site via the redirect URI (which you passed into the OAuth flow as the
										Element:code
											redirect_uri
											parameter, or set up when you created the app). If the OAuth request was accepted, the URL will contain a temporary
										Element:code
											code
											in a GET code parameter, as well as the state you provided in the previous step in a
										Element:code
											state
											parameter. If the states don't match, the request has been created by a third party and the process should be aborted.
									Node:
									(type) c
									(layer)3
										Element:p
											You will need to exchange the
										Element:code
											code
											for an access token using
										Element:a
											the
											. The JSON response from this API call will contain the access token and incoming webhook URL:
										Element:code
											oauth.access
											method
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											{ "access_token": "xoxp-XXXXXXXX-XXXXXXXX-XXXXX", "scope": "incoming-webhook,commands,bot", "team_name": "Team Installing Your Hook", "team_id": "XXXXXXXXXX", "incoming_webhook": { "url": "https://hooks.slack.com/TXXXXX/BXXXXX/XXXXXXXXXX", "channel": "#channel-it-will-post-to", "configuration_url": "https://teamname.slack.com/services/BXXXXX" }, "bot":{ "bot_user_id":"UTTTTTTTTTTR", "bot_access_token":"xoxb-XXXXXXXXXXXX-TTTTTTTTTTTTTT" } }
									Node:
									(type) c
									(layer)3
										Element:p
											The
										Element:code
											team_name
											field will be the name of the team that installed your app, the
										Element:code
											channel
											will be the channel name that they have chosen to post to, and the
										Element:code
											configuration_url
											will be the URL that you can point your user to if they'd like to edit or remove this integration in Slack. You can use these fields to personalize the UI on your end to give context about where the incoming webhook will be posting and how they can edit or remove the integration.
									Node:
									(type) c
									(layer)3
										Element:p
											If your button is used to install a
										Element:a
											bot user
											, then pay special attention to the
										Element:code
											bot
											node of the JSON response. It contains
										Element:code
											bot_user_id
											and
										Element:code
											bot_access_token
											values, which you will need to use whenever you are acting on behalf of that bot user for that team context. Use the top-level
										Element:code
											access_token
											value for other integration points.
									Node:
									(type) c
									(layer)3
										Element:p
										Element:img
									Node:
									(type) c
									(layer)3
										Element:p
											You can now start
										Element:a
											sending messages via the incoming webhook
											,
										Element:a
											listening for and responding to slash commands
											and
										Element:a
											initiate or respond to conversations with your bot
											!
									Node:
									(type) c
									(layer)3
										Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Logging users in with Sign in with Slack
									Node:
									(type) c
									(layer)3
										Element:p
										Element:a
											Sign in with Slack
											is the best way to log individual team members into your application.
									Node:
									(type) c
									(layer)3
										Element:hr
									Node:
									(type) c
									(layer)3
										Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Storing tokens and credentials
									Node:
									(type) c
									(layer)3
										Element:p
											Store your application's credentials and user tokens with care. Read our article on
										Element:a
											safely storing credentials
											.
									Node:
									(type) c
									(layer)3
										Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Handling edge cases and errors
									Node:
									(type) c
									(layer)3
										Element:p
											Denying authorization: If the user denies your request during the OAuth flow, Slack redirects back to your
										Element:code
											redirect_uri
											URL with an error parameter.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											http://yourapp.com/oauth?error=access_denied
									Node:
									(type) c
									(layer)3
										Element:p
											Revoking authorization: Users can revoke the incoming webhook URL from within Slack. If a user does so, you'll receive an HTTP 404 response with a body of "No service" when you make requests to the incoming webhook URL. If this happens, you should stop posting messages to the that particular incoming webhook URL.
									Node:
									(type) c
									(layer)3
										Element:p
											Bot naming error: Since your bot inherits the name of the app, and is beholden to the same limitations of real user names, your app name can't be over 35 characters if it has a bot user, and it also can't be called "Slackbot".
									Node:
									(type) c
									(layer)3
										Element:p
											Email
										Element:a
											integrations@slack.com
											with any questions, feedback, or ideas that would help you get more use out of this, and we'll be more than happy to help.
									Node:
									(type) c
									(layer)3
										Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Share Your Incoming Webhook as a Slack App
									Node:
									(type) c
									(layer)3
										Element:p
										Element:a
											Create a Slack app
											to package and distribute your incoming webhook and share it in our
										Element:a
											application directory
											.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Related Articles
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:a
								Tutorial by Slack
							Element:span
								Using ngrok to develop locally for Slack
							Element:li
							Element:a
								Tutorial by Tomomi Imura (medium.com)
							Element:span
								Creating a Slack Command Bot from Scratch with Node.js & Distribute It
							Element:li
							Element:a
								Christophe Coenraets' web log (coenraets.org)
							Element:span
								Slack and Salesforce Integration: Authentication
						Node:
						(type) c
						(layer)2
							Element:footer
							Element:ul
							Element:li
								Using Slack
							Element:li
							Element:a
								Product
							Element:li
							Element:a
								Pricing
							Element:li
							Element:a
								Support
							Element:li
							Element:a
								Slack Guides
							Element:li
							Element:a
								Video Guides
							Element:li
							Element:a
								App Directory
							Element:li
							Element:a
								API
							Element:ul
							Element:li
								Slack
							Element:li
							Element:a
								Jobs
							Element:li
							Element:a
								Customers
							Element:li
							Element:a
								Developers
							Element:li
							Element:a
								Events
							Element:li
							Element:a
								Blog
							Element:li
							Element:a
								Podcast
							Element:li
							Element:a
								Slack Shop
							Element:ul
							Element:li
								Legal
							Element:li
							Element:a
								Privacy
							Element:li
							Element:a
								Security
							Element:li
							Element:a
								Terms of Service
							Element:li
							Element:a
								Policies
							Element:ul
							Element:li
								Handy Links
							Element:li
							Element:a
								Download desktop app
							Element:li
							Element:a
								Download mobile app
							Element:li
							Element:a
								Brand Guidelines
							Element:li
							Element:a
								Slack at Work
							Element:li
							Element:a
								Status
							Element:a
							Element:ul
							Element:li
							Element:a
								Contact Us
							Element:li
							Element:a
							Element:li
							Element:a
