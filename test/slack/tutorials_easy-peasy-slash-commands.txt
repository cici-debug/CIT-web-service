Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					Easy-peasy slash commands: Getting started
			Node:
			(type) c
			(layer)1
				Element:span
					By D.E. Goodman-Wilson
			Node:
			(type) c
			(layer)1
				Element:span
				Element:a
					Node.js
			Node:
			(type) c
			(layer)1
				Element:span
				Element:a
					Botkit
			Node:
			(type) c
			(layer)1
				Element:span
				Element:a
					Slash commands
			Node:
			(type) c
			(layer)1
				Element:hr
			Node:
			(type) c
			(layer)1
				Element:p
				Element:em
					You
					: Have a great idea for a new command to the new
				Element:a
					operating system for your business
					, but you're feeling a little confused as to how to start.
			Node:
			(type) c
			(layer)1
				Element:p
				Element:em
					Me
					: Short on ideas, but I have some experience in writing the code we need.
			Node:
			(type) c
			(layer)1
				Element:p
					So! Let's make like the Wonder Twins and build a
				Element:a
					slash command
					! 👫
			Node:
			(type) c
			(layer)1
				Element:p
				Element:img
					Still from the motion picture
				Element:strong
					5 Centimeters Per Second
			Node:
			(type) c
			(layer)1
				Element:p
					In this tutorial we'll walk through the steps to write a slash command app, getting it running on your laptop or desktop computer, and connecting it to Slack. In a future tutorial we'll cover deploying your app to a service like Heroku so others can use it too.
			Node:
			(type) c
			(layer)1
				Element:p
					If you've read my
				Element:a
					Easy-Peasy Bot tutorial
					, some of what follows might look familiar — there is a fair amount of overlap in building a
				Element:a
					Slack App
					of any kind! Please bear with me if I repeat myself.
			Node:
			(type) c
			(layer)1
				Element:a
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
											Bots and apps and slash commands, oh my!
									Node:
									(type) c
									(layer)3
										Element:p
											What is the difference between a bot and a slash command? Let's take a brief moment to understand the fundamental differences, and help you decide which you ought to be writing.
									Node:
									(type) c
									(layer)3
										Element:p
											A
										Element:a
											bot
											is a program that connects to Slack just like you do: Slack effectively sees bots as users (but not as paid users, fear not!): They have access to the stream of messages that pass through Slack's servers, and they interact with Slack much like you do by reading and posting messages. Bots are great if you need a high degree of interactivity, or you want to be able to process the message stream as a gestalt.
									Node:
									(type) c
									(layer)3
										Element:p
											A
										Element:a
											slash command
											, on the other hand, is like a command line utility for slack. It has a fixed syntax, and the program on the other end only ever sees the command itself. Likewise, it can only respond to that command in a limited way. Slash commands are great when you have a fixed set of interactions, and need to kick off a process on behalf of the user, or report structured data back to the user.
									Node:
									(type) c
									(layer)3
										Element:blockquote
										Element:p
											Most kinds of Slack Apps are best suited as slash commands, and so if you aren't sure, consider slash commands the default.
									Node:
									(type) c
									(layer)3
										Element:p
											In this tutorial, I'm going to take you through the process of writing a slash command. If you decide that a bot is right for your idea,
										Element:a
											have I got the answer for you
											.
									Node:
									(type) c
									(layer)3
										Element:a
									Node:
									(type) c
									(layer)3
						Node:
						(type) c
						(layer)2
							Element:h2
								Slash commands with Botkit
						Node:
						(type) c
						(layer)2
							Element:p
								Don't let the name fool you:
							Element:a
								Botkit
								is great for building more than just bots.
							Element:a
								Howdy.ai
								has done a lot (a
							Element:em
								lot
								) of the hard work for us, so why not leverage that?
						Node:
						(type) c
						(layer)2
							Element:p
								First, we need to install some things. Make sure you have
							Element:em
								node
								installed on your local machine. If not, you have
							Element:a
								several options for installing
							Element:em
								node
								.
						Node:
						(type) c
						(layer)2
							Element:p
								Begin by forking and then cloning this GitHub repository:
							Element:a
								https://github.com/DEGoodmanWilson/easy-peasy-slash-command-app
								. This is just the simplest possible slash command project built around one of the Botkit example apps. It includes everything we need to not only write a slash command, but set it up for distribution via the
							Element:a
								"Add to Slack" Button
								or even the
							Element:a
								App Directory
								, easy-peasy.
						Node:
						(type) c
						(layer)2
							Element:p
								This is a Node.js project, so of course once you have the repository on your local machine, you will need to run
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								npm install
						Node:
						(type) c
						(layer)2
							Element:p
								to install the various dependencies.
						Node:
						(type) c
						(layer)2
							Element:p
								Next, edit the
							Element:code
								package.json
								file to give your slash command a name, and to update the GitHub URLs to reflect the location of your fork.
						Node:
						(type) c
						(layer)2
							Element:a
						Node:
						(type) c
						(layer)2
							Element:h3
								Exposing your app to the outside world
						Node:
						(type) c
						(layer)2
							Element:p
								Slash commands can't do anything without some way to invoke them. We need to be able to open a secure HTTP connection to a service running locally on your laptop. There are many tools that will let us open such a window, such as
							Element:a
								*ngrok
							Element:em
								and
								to install:
							Element:a
								Pagekite
								. But I'm going to use
							Element:a
								localtunnel
								. Just use *npm
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								npm install -g localtunnel
						Node:
						(type) c
						(layer)2
							Element:p
								and run localtunnel as such:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								lt --port 8765 --subdomain myslashcommand
						Node:
						(type) c
						(layer)2
							Element:p
								Once your slash command is running on local port 8765, it will be accessible at
							Element:a
								https://myslashcommand.localtunnel.me
								, but your slash command will only be available for testing
							Element:em
								really
								once it is installed on Slack. (You might consider changing
							Element:code
								myslashcommand
								to something more...memorable. And unique.)
						Node:
						(type) c
						(layer)2
							Element:a
						Node:
						(type) c
						(layer)2
							Element:h3
								Pass the good word to Slack
						Node:
						(type) c
						(layer)2
							Element:p
								Now we need to let Slack know that your slash command exists. Couldn't be easier. Go to
							Element:a
								https://api.slack.com/applications/new
								and fill out the form. Don't worry too much about the support URLs. But do be clear on the redirect URL. Look to the localtunnel output: The redirect URL will be
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								https://myslashcommand.localtunnel.me/oauth
						Node:
						(type) c
						(layer)2
							Element:p
								On the next page, you will see a more detailed form for setting up your new app. Scroll down until you see the slash command section:
						Node:
						(type) c
						(layer)2
							Element:p
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
								Click on "Create new command". You'll now be asked to fill in the details for your command. So that the command will work with the demo code, fill it out as such:
						Node:
						(type) c
						(layer)2
							Element:p
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
								It's kind of hard to see: The Request URL should be set to
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								https://awesomeslashcommand.localtunnel.me/slack/receive
						Node:
						(type) c
						(layer)2
							Element:p
								Indeed, this is the URL you will use for
							Element:em
								any
								Botkit-based slash command — Botkit is prewired to expect
							Element:em
								all
								slash commands to arrive at this endpoint.
						Node:
						(type) c
						(layer)2
							Element:p
								(A common gotcha at this point is having a URL that is not secure: Either it doesn't use HTTPS, or the security of the HTTPS connection can't be verified. If you are using localtunnel as advised above, this shouldn't be an issue. But once you deploy your slash command, you should be certain that your hosting service provides a valid HTTPS connection — but we can worry about this in a later tutorial.)
						Node:
						(type) c
						(layer)2
							Element:p
								Slack gives us a nice little preview of what our slash command's auto-complete message will look like:
						Node:
						(type) c
						(layer)2
							Element:p
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
								Once we've hit "Save", Slack will issue us a Verification Token. This is super important, as it is a secret handshake that Slack shares with us so we know that a given slash command was
							Element:em
								actually
								issued by Slack, and not by some imposter. Keep it safe, keep it secret — and make sure your slash command knows about it and is checking it. Slack issues one token per app, so if you have multiple slash commands, they will all use the same verification token.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:img
						Node:
						(type) c
						(layer)2
							Element:a
									Node:
									(type) c
									(layer)3
						Node:
						(type) c
						(layer)2
							Element:h2
								Running your slash command
						Node:
						(type) c
						(layer)2
							Element:p
								We've got Slack all set up — now to look at the code, and make a slash command worthy of the name. The template code is pretty contrived, but provides all the basic tools you'll need to make a slash command work.
						Node:
						(type) c
						(layer)2
							Element:a
						Node:
						(type) c
						(layer)2
							Element:h3
								Running it locally
						Node:
						(type) c
						(layer)2
							Element:p
								Now, the time has come to run your bot. From the directory your bot is installed in, simply run
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								CLIENT_ID=xxx.yyy CLIENT_SECRET=abc VERIFICATION_TOKEN=123 PORT=8765 npm start
						Node:
						(type) c
						(layer)2
							Element:p
								And then visit
							Element:a
								https://awesomeslashcommand.localtunnel.me/login
								to install your bot on a team.
						Node:
						(type) c
						(layer)2
							Element:p
								Don't forget to restart the slash command when you make changes to the source code!
						Node:
						(type) c
						(layer)2
							Element:a
						Node:
						(type) c
						(layer)2
							Element:h3
								Making it fancy
						Node:
						(type) c
						(layer)2
							Element:p
								Botkit provides two functions for responding to a slash command:
							Element:code
								replyPublic()
								and
							Element:code
								replyPrivate()
								. The difference is that
							Element:code
								replyPublic()
								will post the response into the Slack channel for everyone to see.
							Element:code
								replyPrivate()
								on the other hand will post an ephemeral message that only the user issuing the command can see. For example, if you've ever used
							Element:code
								/giphy
								, its responses are public. On the other hand,
							Element:code
								/remind
								's responses are private — what Slack calls "ephemeral". Think carefully about whether the response should be publicized for all to see!
						Node:
						(type) c
						(layer)2
							Element:p
								The demonstration slash command has a basic structure that looks like this:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								// if no text was supplied, treat it as a help command if (message.text === "" || mesage.text === "help") { slashCommand.replyPrivate(message, "I echo back what you tell me. " + "Try typing `/echo hello` to see."); return; }
						Node:
						(type) c
						(layer)2
							Element:p
								// If we made it here, just echo what the user typed back at them //TODO You do it!
						Node:
						(type) c
						(layer)2
							Element:p
								This code does something very simple, depending on what the user types:
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								/echo
								or
							Element:code
								/echo help
								both summon a snippet of helpful text that describes how to use the command. Always provide a
							Element:code
								help
								sub-command for your users in this way.
						Node:
						(type) c
						(layer)2
							Element:p
								In every other case, we want the command to simply echo back to the user what they typed. So, let's replace the comment
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								//*TODO You do it!*
						Node:
						(type) c
						(layer)2
							Element:p
								with some actual code. Use
							Element:em
								slashCommand.replyPublic()
								to accomplish this:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								slashCommand.replyPublic(message, "Echo: " + message.text);
						Node:
						(type) c
						(layer)2
							Element:p
								Try playing around with the message response; also try out using
							Element:em
								replyPrivate
								and observe the difference.
						Node:
						(type) c
						(layer)2
							Element:a
						Node:
						(type) c
						(layer)2
							Element:h3
								Delayed and asynchronous replies
						Node:
						(type) c
						(layer)2
							Element:p
								In general, your app has 3000 milliseconds to send a reply (public or private), and can send at most
							Element:em
								one
								reply. For most cases, this is fine. But what if you need to hit a third-party API, or perform some time-intensive computation before you can respond? Or what if you need to send multiple replies? Enter the
							Element:em
								delayed reply
								.
						Node:
						(type) c
						(layer)2
							Element:p
								Delayed replies are simply a different way of replying to a slash command that can be invoked up to 5 times, and up to 30
							Element:em
								minutes
								later, giving your app lots of time to formulate its response. (You can read more about delayed replies and other awesome slash command tips in the official
							Element:a
								slash command style guide
								.) Using a delayed reply is just like using a regular reply:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								slashCommand.replyPublicDelayed(message, "delayed response");
						Node:
						(type) c
						(layer)2
							Element:p
								Note that if you send more than one delayed reply, Botkit does not guarantee the order if you send them procedurally — you'll need to use usual Node-style callback mechanism to ensure that your delayed replies are sent in the right order:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								slashCommand.replyPublicDelayed(message, "first response", function() { slashCommand.replyPublicDelayed(message, "second response"); });
						Node:
						(type) c
						(layer)2
							Element:a
									Node:
									(type) c
									(layer)3
						Node:
						(type) c
						(layer)2
							Element:h2
								Congratulations!
						Node:
						(type) c
						(layer)2
							Element:p
								👏 You've built your first slash command in Slack! Granted it doesn't do much — yet. But you've got ideas, I can feel it.
						Node:
						(type) c
						(layer)2
							Element:p
								At this point you will probably want to start doing more sophisticated things, like making requests to external services, so your slash command can respond with timely and useful information (depending on what your app does, of course).
						Node:
						(type) c
						(layer)2
							Element:p
								First, the Slack Platform team has a
							Element:a
								slash command style guide
								that covers idiomata and best practices that you should read, right this moment.
						Node:
						(type) c
						(layer)2
							Element:p
								Second, There's a lot more to Botkit than can be easily covered here. You can learn more about Botkit's awesome features by simply perusing the
							Element:a
								Botkit documentation
								.
						Node:
						(type) c
						(layer)2
							Element:a
									Node:
									(type) c
									(layer)3
						Node:
						(type) c
						(layer)2
							Element:h2
								Next time...
						Node:
						(type) c
						(layer)2
							Element:p
								Of course, you don't want to host your slash command on your laptop forever. (Or maybe you do?) Over the next articles, I will show you how easy it is to deploy your slash command to hosting services like
							Element:a
								Heroku
								, and give your slash command a more permanent memory. But at this point you should be far enough along to get your core logic going, and maybe even demo it.
						Node:
						(type) c
						(layer)2
							Element:h3
								Related documentation
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:a
								Slash Commands
							Element:br
							Element:em
								Slack Platform documentation
							Element:li
							Element:a
								Building Slack apps
							Element:br
							Element:em
								Slack Platform documentation
						Node:
						(type) c
						(layer)2
							Element:footer
							Element:ul
							Element:li
								Using Slack
							Element:li
							Element:a
								Product
							Element:li
							Element:a
								Pricing
							Element:li
							Element:a
								Support
							Element:li
							Element:a
								Slack Guides
							Element:li
							Element:a
								Video Guides
							Element:li
							Element:a
								App Directory
							Element:li
							Element:a
								API
							Element:ul
							Element:li
								Slack
							Element:li
							Element:a
								Jobs
							Element:li
							Element:a
								Customers
							Element:li
							Element:a
								Developers
							Element:li
							Element:a
								Events
							Element:li
							Element:a
								Blog
							Element:li
							Element:a
								Podcast
							Element:li
							Element:a
								Slack Shop
							Element:ul
							Element:li
								Legal
							Element:li
							Element:a
								Privacy
							Element:li
							Element:a
								Security
							Element:li
							Element:a
								Terms of Service
							Element:li
							Element:a
								Policies
							Element:ul
							Element:li
								Handy Links
							Element:li
							Element:a
								Download desktop app
							Element:li
							Element:a
								Download mobile app
							Element:li
							Element:a
								Brand Guidelines
							Element:li
							Element:a
								Slack at Work
							Element:li
							Element:a
								Status
							Element:a
							Element:ul
							Element:li
							Element:a
								Contact Us
							Element:li
							Element:a
							Element:li
							Element:a
