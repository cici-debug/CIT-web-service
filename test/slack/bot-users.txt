Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					Bot Users
			Node:
			(type) c
			(layer)1
				Element:p
					Enable teams to conversationally interact with external services or your custom code by building
				Element:strong
					bot users
					.
			Node:
			(type) c
			(layer)1
				Element:p
				Element:img
			Node:
			(type) h1
			(layer)1
				Element:h1
					What are bot users?
			Node:
			(type) c
			(layer)1
				Element:p
					Bot users have many of the same qualities as their human counterparts: they have profile photos, names, and bios, they exist in the team directory, they can be direct messaged or mentioned, they can post messages and upload files, and they can be invited to and kicked out of channels and private groups.
			Node:
			(type) c
			(layer)1
				Element:p
					The biggest difference between bot users and regular users is that instead of interacting with a team via one of Slack's mobile or desktop apps, bot users are controlled programmatically via a bot user token that accesses one or more of Slack's APIs.
			Node:
			(type) c
			(layer)1
				Element:p
					Bot users can't "log in," they don't have a password, and they only have access to a
				Element:a
					subset
					of all of the API methods available to regular users.
			Node:
			(type) c
			(layer)1
				Element:p
					Within a Slack channel, bot users can do nearly anything you can program them to do.
			Node:
			(type) c
			(layer)1
				Element:p
					Slack has two different kinds of bot users: custom bots and app bots. Each serves a different purpose and offers different functionality.
			Node:
			(type) c
			(layer)1
				Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Custom bot users
						Node:
						(type) c
						(layer)2
							Element:p
								Every team has the ability to create their own custom bot users that they can use on their team. They do this by going to their team's settings page and
							Element:a
								creating a new bot user
								.
						Node:
						(type) c
						(layer)2
							Element:p
								Custom bot users are useful for when you want to build something custom for your own team, and have no interest in distributing it to other teams.
						Node:
						(type) c
						(layer)2
							Element:p
								For example: you may want to do something very specific like send out an HR survey with a special link out to everyone at your company, or a way to listen for mentions of your company's dog mascot and post cute pictures whenever someone mentions his or her name.
						Node:
						(type) c
						(layer)2
							Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Attaching bot users to a Slack app
						Node:
						(type) c
						(layer)2
							Element:p
								If you'd like to
							Element:a
								distribute
								your bot user to other Slack teams, then you should attach it to a
							Element:a
								Slack app
								. This makes it much easier for teams to install via the
							Element:a
								Slack Button
								, lets you control the bot user's icon and name even after it has been installed, and allows you to bundle it with other app functionality like incoming webhooks and slash commands.
						Node:
						(type) c
						(layer)2
							Element:p
								Bot users in Slack apps have some
							Element:a
								special considerations
								when using the API.
			Node:
			(type) h1
			(layer)1
				Element:h1
					What can bot users do?
			Node:
			(type) c
			(layer)1
				Element:p
					The primary way bot users interact with people on a given team is by connecting to the
				Element:a
					Real Time Messaging API
					(RTM API for short) and opening up a websocket connection with Slack.
			Node:
			(type) c
			(layer)1
				Element:p
					The
				Element:a
					Events API
					is an alternative way to receive and respond to
				Element:a
					events
					as a bot user contained within a Slack App. Instead of connecting over a websocket, you subscribe to specific events and messages and Slack sends them to your server.
			Node:
			(type) c
			(layer)1
				Element:a
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
											Monitor and process channel activity
									Node:
									(type) c
									(layer)3
										Element:p
											This websocket will send you all of the messages and activity that happen in public and private channels that the bot user is invited to, as well as messages that are sent to it via direct message. A bot user opens this websocket with the RTM API by sending an authenticated call to the
										Element:code
											rtm.start
											API method. To learn more about connecting to the RTM API,
										Element:a
											read the documentation here
											.
									Node:
									(type) c
									(layer)3
										Element:a
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
											Post messages and react to users
									Node:
									(type) c
									(layer)3
										Element:p
											In addition to receiving messages and activity in the channels it belongs to, the RTM API can be used to post messages as well. However, the RTM API only supports posting messages in our
										Element:a
											default message formatting
											. It doesn't support attachments or other message formatting modes.
									Node:
									(type) c
									(layer)3
										Element:p
											To post more complex messages as a bot user, clients can use the Web API method
										Element:a
											. Set
										Element:code
											chat.postMessage
										Element:code
											as_user
											to
										Element:code
											true
											to send messages as your bot with its username and profile image.
									Node:
									(type) c
									(layer)3
										Element:p
											The bot user can also use the Web API to
										Element:a
											add emoji reactions
											to messages,
										Element:a
											upload files
											,
										Element:a
											pin
											and
										Element:a
											star
											messages, and generally behave like any other user on the team.
									Node:
									(type) c
									(layer)3
										Element:p
											Bots can also work within
										Element:a
											threaded messages
											and add replies to conversations.
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Make messages interactive with buttons
												Node:
												(type) c
												(layer)4
													Element:p
														Bot users wrapped in
													Element:a
														Slack apps
														can attach buttons to messages. These buttons trigger actions on your servers, allowing your bot to perform distinct tasks and incrementally alter messages.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:img
			Node:
			(type) h1
			(layer)1
				Element:h1
					Setting up your bot user
			Node:
			(type) c
			(layer)1
				Element:p
					After you've figured out what you want your bot user to do and have an idea of how you'll go about implementing it, you'll want to prepare Slack for the arrival of your bot user.
			Node:
			(type) c
			(layer)1
				Element:a
			Node:
			(type) c
			(layer)1
				Element:h3
					How do I create custom bot users for my team?
			Node:
			(type) c
			(layer)1
				Element:p
					Start by creating a
				Element:a
					new bot user integration
					. You'll need to pick a username for your new bot. Bot usernames can be up to 21 characters long and sorry, you can't name your bot
				Element:code
					Slackbot
					. Additionally, your bot username cannot be the same name as one of your team's channels.
			Node:
			(type) c
			(layer)1
				Element:p
					Once you've added the integration to your team, you'll be granted a
				Element:a
					bot access token
					, which you'll use when connecting to our APIs as that bot user.
			Node:
			(type) c
			(layer)1
				Element:a
			Node:
			(type) c
			(layer)1
				Element:h3
					How do I distribute my bot user to other teams?
			Node:
			(type) c
			(layer)1
				Element:p
					If you are the developer of an app or service that wants to provide bot-based functionality to Slack teams— or you just are working on something cool you want to share with everyone— you can
				Element:strong
					and implement the
				Element:a
					package your bot user as a Slack app
				Element:a
					Slack button
					to make it simple for any team to install.
			Node:
			(type) c
			(layer)1
				Element:a
			Node:
			(type) c
			(layer)1
				Element:h3
					Programming bot users
			Node:
			(type) c
			(layer)1
				Element:p
					Creating bot users probably means you'll be coding. If you're using an existing library (such as
				Element:a
					node-slack-client
					) then your bot access token should be all you need to get started.
			Node:
			(type) c
			(layer)1
				Element:p
					If you're writing your own library from scratch, you'll need to write code to
				Element:a
					make authenticated API calls
					and consume our
				Element:a
					Real Time Messaging API
					. After building those basics, you can focus on the interesting functionality of your bot user.
			Node:
			(type) c
			(layer)1
				Element:h4
					Botkit
			Node:
			(type) c
			(layer)1
				Element:p
					One easy way to build bot users, especially if you already work with
				Element:a
					Node.js
					, is Howdy's
				Element:a
					. Botkit is a framework that takes care of most these API gymnastics, so you can focus on your bot's behavior.
				Element:strong
					Botkit
			Node:
			(type) c
			(layer)1
				Element:a
			Node:
			(type) c
			(layer)1
				Element:h3
					Other differences between bot users and normal users
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:p
				Element:strong
					pricing
					- Like other APIs and integrations, bot users are free. Unlike regular users, the actions they can perform are somewhat limited. For teams on the Free plan, each bot user counts as a separate integration.
				Element:li
				Element:p
				Element:strong
					account management
					- Bot user account management is performed through the integration page for the bot user.
				Element:li
				Element:p
				Element:strong
					presence
					- Bot users do not follow the usual rules for automatically being
				Element:a
					marked as away when inactive
					. In most cases you want a bot user to display as "active" and ready to respond, even if it hasn't posted a message in a while. Use
				Element:a
					to set bot users as "away."
				Element:code
					users.setPresence
			Node:
			(type) c
			(layer)1
				Element:p
					There's more to learn about making your bot
				Element:em
					present
					in our
				Element:a
					bot user presence
					documentation.
			Node:
			(type) c
			(layer)1
				Element:a
			Node:
			(type) c
			(layer)1
				Element:h3
					Share your bot user as a Slack app
			Node:
			(type) c
			(layer)1
				Element:p
				Element:a
					Create a Slack app
					to package and distribute your bot user and submit it to our
				Element:a
					application directory
					.
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:a
					Tokens and scopes
			Node:
			(type) c
			(layer)1
				Element:p
					When teams add your application and install your bot user, the token belonging to your bot user is imbued with the necessary scopes to use API methods on its own behalf for the team that is installing your bot user.
			Node:
			(type) c
			(layer)1
				Element:p
					You may have other OAuth tokens associated with your app or specific users who have authorized it. Those tokens have a time and place, but when you want to use the Web or RTM API as the bot user, you must use the bot access token that has been awarded the
				Element:code
					bot
					scope. Bot user tokens begin with the characters
				Element:strong
					.
				Element:code
					xoxb
			Node:
			(type) c
			(layer)1
				Element:h4
					Retrieving your bot user token
			Node:
			(type) c
			(layer)1
				Element:p
					You'll receive team-specific bot tokens as part of the OAuth approval process. Once the team uses the
				Element:a
					Slack button
					to install your bot user and as you exchange the code for an access token, you'll receive an additional component to the typical access token response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					{ "access_token": "xoxp-XXXXXXXX-XXXXXXXX-XXXXX", "scope": "incoming-webhook,commands,bot", "team_name": "Team Installing Your Hook", "team_id": "XXXXXXXXXX", "incoming_webhook": { "url": "https://hooks.slack.com/TXXXXX/BXXXXX/XXXXXXXXXX", "channel": "#channel-it-will-post-to", "configuration_url": "https://teamname.slack.com/services/BXXXXX" }, "bot":{ "bot_user_id":"UTTTTTTTTTTR", "bot_access_token":"xoxb-XXXXXXXXXXXX-TTTTTTTTTTTTTT" } }
			Node:
			(type) c
			(layer)1
				Element:p
					The
				Element:code
					bot
					node of that JSON response contains two fields.
				Element:code
					bot_user_id
					is the Slack user ID for your bot user on that team. The
				Element:code
					bot_access_token
					is the OAuth access token you must use when acting on behalf of your bot for that team.
			Node:
			(type) c
			(layer)1
				Element:p
				Element:i
				Element:strong
					Secure your bot user tokens
					, as with all tokens and credentials. Do not share tokens with users or anyone else. Bot user tokens have particularly expansive capabilities not afforded to typical user tokens issued on behalf of team members.
			Node:
			(type) c
			(layer)1
				Element:a
			Node:
			(type) c
			(layer)1
				Element:h3
					API usage
			Node:
			(type) c
			(layer)1
				Element:p
					As mentioned above, when you connect to the
				Element:a
					Real Time Messaging API
					or other APIs in the agency of your bot user, you'll need to use your
				Element:strong
					bot user's
					OAuth token, awarded to you when a team authorizes your application.
			Node:
			(type) c
			(layer)1
				Element:p
					Bot users can also only call a subset of our API methods. Any method that cannot be used by a bot user will return a
				Element:code
					user_is_bot
					error.
			Node:
			(type) c
			(layer)1
				Element:p
					Bot users associated with Slack apps are granted access to fewer API methods than those in custom integrations.
			Node:
			(type) c
			(layer)1
				Element:p
					If your Slack app needs access to additional methods in the Web API, you'll need to request your
				Element:a
					required scopes
					separately as part of the authentication flow. Additionally requested scopes are applied to your application tokens but will
				Element:em
					not
					be applied to your bot user tokens.
			Node:
			(type) c
			(layer)1
				Element:p
					The full list of methods that can be used by bot users is:
			Node:
			(type) c
			(layer)1
				Element:p
				Element:a
			Node:
			(type) c
			(layer)1
				Element:a
			Node:
			(type) c
			(layer)1
				Element:table
				Element:tr
				Element:th
					Method
				Element:span
					& Description
				Element:th
					Description
				Element:th
					Custom Bots
				Element:th
					App Bots
				Element:tr
				Element:td
				Element:a
					api.test
					Checks API calling code.
				Element:td
					Checks API calling code.
				Element:td
				Element:td
				Element:tr
				Element:td
				Element:a
					auth.revoke
					Revokes a token.
				Element:td
					Revokes a token.
				Element:td
				Element:td
				Element:tr
				Element:td
				Element:a
					auth.test
					Checks authentication & identity.
				Element:td
					Checks authentication & identity.
				Element:td
				Element:td
				Element:tr
				Element:td
				Element:a
					channels.history
					Fetches history of messages and events from a channel.
				Element:td
					Fetches history of messages and events from a channel.
				Element:td
				Element:td
				Element:tr
				Element:td
				Element:a
					channels.info
					Gets information about a channel.
				Element:td
					Gets information about a channel.
				Element:td
				Element:td
				Element:tr
				Element:td
				Element:a
					channels.list
					Lists all channels in a Slack team.
				Element:td
					Lists all channels in a Slack team.
				Element:td
				Element:td
				Element:tr
				Element:td
				Element:a
					channels.mark
					Sets the read cursor in a channel.
				Element:td
					Sets the read cursor in a channel.
				Element:td
				Element:td
				Element:tr
				Element:td
				Element:a
					channels.replies
					Retrieve a thread of messages posted to a channel
				Element:td
					Retrieve a thread of messages posted to a channel
				Element:td
				Element:td
				Element:tr
				Element:td
				Element:a
					channels.setPurpose
					Sets the purpose for a channel.
				Element:td
					Sets the purpose for a channel.
				Element:td
				Element:td
				Element:tr
				Element:td
				Element:a
					channels.setTopic
					Sets the topic for a channel.
				Element:td
					Sets the topic for a channel.
				Element:td
				Element:td
				Element:tr
				Element:td
				Element:a
					chat.delete
					Deletes a message.
				Element:td
					Deletes a message.
				Element:td
				Element:td
				Element:tr
				Element:td
				Element:a
					chat.meMessage
					Share a me message into a channel.
				Element:td
					Share a me message into a channel.
				Element:td
				Element:td
				Element:tr
				Element:td
				Element:a
					chat.postMessage
					Sends a message to a channel.
				Element:td
					Sends a message to a channel.
				Element:td
				Element:td
				Element:tr
				Element:td
				Element:a
					chat.update
					Updates a message.
				Element:td
					Updates a message.
				Element:td
				Element:td
				Element:tr
				Element:td
				Element:a
					dnd.info
					Retrieves a user's current Do Not Disturb status.
				Element:td
					Retrieves a user's current Do Not Disturb status.
				Element:td
				Element:td
				Element:tr
				Element:td
				Element:a
					dnd.teamInfo
					Retrieves the Do Not Disturb status for users on a team.
				Element:td
					Retrieves the Do Not Disturb status for users on a team.
				Element:td
				Element:td
				Element:tr
				Element:td
				Element:a
					emoji.list
					Lists custom emoji for a team.
				Element:td
					Lists custom emoji for a team.
				Element:td
				Element:td
				Element:tr
				Element:td
				Element:a
					files.comments.add
					Add a comment to an existing file.
				Element:td
					Add a comment to an existing file.
				Element:td
				Element:td
				Element:tr
				Element:td
				Element:a
					files.comments.delete
					Deletes an existing comment on a file.
				Element:td
					Deletes an existing comment on a file.
				Element:td
				Element:td
				Element:tr
				Element:td
				Element:a
					files.comments.edit
					Edit an existing file comment.
				Element:td
					Edit an existing file comment.
				Element:td
				Element:td
				Element:tr
				Element:td
				Element:a
					files.delete
					Deletes a file.
				Element:td
					Deletes a file.
				Element:td
				Element:td
				Element:tr
				Element:td
				Element:a
					files.info
					Gets information about a team file.
				Element:td
					Gets information about a team file.
				Element:td
				Element:td
				Element:tr
				Element:td
				Element:a
					files.upload
					Uploads or creates a file.
				Element:td
					Uploads or creates a file.
				Element:td
				Element:td
				Element:tr
				Element:td
				Element:a
					groups.close
					Closes a private channel.
				Element:td
					Closes a private channel.
				Element:td
				Element:td
				Element:tr
				Element:td
				Element:a
					groups.history
					Fetches history of messages and events from a private channel.
				Element:td
					Fetches history of messages and events from a private channel.
				Element:td
				Element:td
				Element:tr
				Element:td
				Element:a
					groups.info
					Gets information about a private channel.
				Element:td
					Gets information about a private channel.
				Element:td
				Element:td
				Element:tr
				Element:td
				Element:a
					groups.list
					Lists private channels that the calling user has access to.
				Element:td
					Lists private channels that the calling user has access to.
				Element:td
				Element:td
				Element:tr
				Element:td
				Element:a
					groups.mark
					Sets the read cursor in a private channel.
				Element:td
					Sets the read cursor in a private channel.
				Element:td
				Element:td
				Element:tr
				Element:td
				Element:a
					groups.open
					Opens a private channel.
				Element:td
					Opens a private channel.
				Element:td
				Element:td
				Element:tr
				Element:td
				Element:a
					groups.setPurpose
					Sets the purpose for a private channel.
				Element:td
					Sets the purpose for a private channel.
				Element:td
				Element:td
				Element:tr
				Element:td
				Element:a
					groups.setTopic
					Sets the topic for a private channel.
				Element:td
					Sets the topic for a private channel.
				Element:td
				Element:td
				Element:tr
				Element:td
				Element:a
					im.close
					Close a direct message channel.
				Element:td
					Close a direct message channel.
				Element:td
				Element:td
				Element:tr
				Element:td
				Element:a
					im.history
					Fetches history of messages and events from direct message channel.
				Element:td
					Fetches history of messages and events from direct message channel.
				Element:td
				Element:td
				Element:tr
				Element:td
				Element:a
					im.list
					Lists direct message channels for the calling user.
				Element:td
					Lists direct message channels for the calling user.
				Element:td
				Element:td
				Element:tr
				Element:td
				Element:a
					im.mark
					Sets the read cursor in a direct message channel.
				Element:td
					Sets the read cursor in a direct message channel.
				Element:td
				Element:td
				Element:tr
				Element:td
				Element:a
					im.open
					Opens a direct message channel.
				Element:td
					Opens a direct message channel.
				Element:td
				Element:td
				Element:tr
				Element:td
				Element:a
					mpim.close
					Closes a multiparty direct message channel.
				Element:td
					Closes a multiparty direct message channel.
				Element:td
				Element:td
				Element:tr
				Element:td
				Element:a
					mpim.history
					Fetches history of messages and events from a multiparty direct message.
				Element:td
					Fetches history of messages and events from a multiparty direct message.
				Element:td
				Element:td
				Element:tr
				Element:td
				Element:a
					mpim.list
					Lists multiparty direct message channels for the calling user.
				Element:td
					Lists multiparty direct message channels for the calling user.
				Element:td
				Element:td
				Element:tr
				Element:td
				Element:a
					mpim.mark
					Sets the read cursor in a multiparty direct message channel.
				Element:td
					Sets the read cursor in a multiparty direct message channel.
				Element:td
				Element:td
				Element:tr
				Element:td
				Element:a
					mpim.open
					This method opens a multiparty direct message.
				Element:td
					This method opens a multiparty direct message.
				Element:td
				Element:td
				Element:tr
				Element:td
				Element:a
					oauth.access
					Exchanges a temporary OAuth code for an API token.
				Element:td
					Exchanges a temporary OAuth code for an API token.
				Element:td
				Element:td
				Element:tr
				Element:td
				Element:a
					pins.add
					Pins an item to a channel.
				Element:td
					Pins an item to a channel.
				Element:td
				Element:td
				Element:tr
				Element:td
				Element:a
					pins.list
					Lists items pinned to a channel.
				Element:td
					Lists items pinned to a channel.
				Element:td
				Element:td
				Element:tr
				Element:td
				Element:a
					pins.remove
					Un-pins an item from a channel.
				Element:td
					Un-pins an item from a channel.
				Element:td
				Element:td
				Element:tr
				Element:td
				Element:a
					reactions.add
					Adds a reaction to an item.
				Element:td
					Adds a reaction to an item.
				Element:td
				Element:td
				Element:tr
				Element:td
				Element:a
					reactions.get
					Gets reactions for an item.
				Element:td
					Gets reactions for an item.
				Element:td
				Element:td
				Element:tr
				Element:td
				Element:a
					reactions.list
					Lists reactions made by a user.
				Element:td
					Lists reactions made by a user.
				Element:td
				Element:td
				Element:tr
				Element:td
				Element:a
					reactions.remove
					Removes a reaction from an item.
				Element:td
					Removes a reaction from an item.
				Element:td
				Element:td
				Element:tr
				Element:td
				Element:a
					rtm.start
					Starts a Real Time Messaging session.
				Element:td
					Starts a Real Time Messaging session.
				Element:td
				Element:td
				Element:tr
				Element:td
				Element:a
					stars.add
					Adds a star to an item.
				Element:td
					Adds a star to an item.
				Element:td
				Element:td
				Element:tr
				Element:td
				Element:a
					stars.remove
					Removes a star from an item.
				Element:td
					Removes a star from an item.
				Element:td
				Element:td
				Element:tr
				Element:td
				Element:a
					team.info
					Gets information about the current team.
				Element:td
					Gets information about the current team.
				Element:td
				Element:td
				Element:tr
				Element:td
				Element:a
					users.getPresence
					Gets user presence information.
				Element:td
					Gets user presence information.
				Element:td
				Element:td
				Element:tr
				Element:td
				Element:a
					users.info
					Gets information about a user.
				Element:td
					Gets information about a user.
				Element:td
				Element:td
				Element:tr
				Element:td
				Element:a
					users.list
					Lists all users in a Slack team.
				Element:td
					Lists all users in a Slack team.
				Element:td
				Element:td
				Element:tr
				Element:td
				Element:a
					users.setActive
					Marks a user as active.
				Element:td
					Marks a user as active.
				Element:td
				Element:td
				Element:tr
				Element:td
				Element:a
					users.setPresence
					Manually sets user presence.
				Element:td
					Manually sets user presence.
				Element:td
				Element:td
			Node:
			(type) c
			(layer)1
				Element:p
					You can tell if a
				Element:a
					user object
					returned by our API is a bot user by checking the
				Element:code
					is_bot
					property.
			Node:
			(type) c
			(layer)1
				Element:h2
					Related Articles
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:a
					Thinkpiece from Slack (medium.com)
				Element:span
					Common Bot Misconceptions
				Element:li
				Element:a
					Tutorial by Slack
				Element:span
					Building a simple bot using Slack's Events API in Python
				Element:li
				Element:a
					Tutorial by Slack
				Element:span
					Building an onboarding bot in Ruby using Slack's Events API
				Element:li
				Element:a
					Case study by Slack
				Element:span
					Bots you can count on: meet the developers behind Statsbot
				Element:li
				Element:a
					Think piece by Fin (fin.ventures)
				Element:span
					On Bots, Conversation Apps, and Fin
			Node:
			(type) c
			(layer)1
				Element:footer
				Element:ul
				Element:li
					Using Slack
				Element:li
				Element:a
					Product
				Element:li
				Element:a
					Pricing
				Element:li
				Element:a
					Support
				Element:li
				Element:a
					Slack Guides
				Element:li
				Element:a
					Video Guides
				Element:li
				Element:a
					App Directory
				Element:li
				Element:a
					API
				Element:ul
				Element:li
					Slack
				Element:li
				Element:a
					Jobs
				Element:li
				Element:a
					Customers
				Element:li
				Element:a
					Developers
				Element:li
				Element:a
					Events
				Element:li
				Element:a
					Blog
				Element:li
				Element:a
					Podcast
				Element:li
				Element:a
					Slack Shop
				Element:ul
				Element:li
					Legal
				Element:li
				Element:a
					Privacy
				Element:li
				Element:a
					Security
				Element:li
				Element:a
					Terms of Service
				Element:li
				Element:a
					Policies
				Element:ul
				Element:li
					Handy Links
				Element:li
				Element:a
					Download desktop app
				Element:li
				Element:a
					Download mobile app
				Element:li
				Element:a
					Brand Guidelines
				Element:li
				Element:a
					Slack at Work
				Element:li
				Element:a
					Status
				Element:a
				Element:ul
				Element:li
				Element:a
					Contact Us
				Element:li
				Element:a
				Element:li
				Element:a
