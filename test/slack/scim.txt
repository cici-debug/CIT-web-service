Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					SCIM API
			Node:
			(type) c
			(layer)1
				Element:p
					The Slack SCIM API is used by SSO partners to help provision and manage user accounts and groups.
			Node:
			(type) c
			(layer)1
				Element:p
				Element:i
					Please note that the SCIM API is only available to Slack teams on the
				Element:a
					Plus plan
					.
			Node:
			(type) c
			(layer)1
				Element:p
					The SCIM API is based on the open standard
				Element:a
					Simple Cloud Identity Management: Protocol 1.1
					.
			Node:
			(type) c
			(layer)1
				Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								What can the SCIM API do?
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:a
								Create a new user
							Element:li
							Element:a
								Update a user's information
							Element:li
							Element:a
								Delete/disable/de-provision a user
							Element:li
							Element:a
								Create a new User Group
							Element:li
							Element:a
								Update group membership (add/remove users)
							Element:li
							Element:a
								Delete a User Group
						Node:
						(type) c
						(layer)2
							Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Which user details does Slack make use of?
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
								Username -
							Element:code
								userName
							Element:li
								First name -
							Element:code
								name.givenName
							Element:li
								Last name -
							Element:code
								name.familyName
							Element:li
								Primary email address -
							Element:code
								emails
							Element:li
								Profile photo -
							Element:code
								photos
							Element:li
								Title -
							Element:code
								title
						Node:
						(type) c
						(layer)2
							Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								How do I call the SCIM API?
						Node:
						(type) c
						(layer)2
							Element:p
								The base URL for the SCIM API is
							Element:strong
								.
							Element:code
								https://api.slack.com/scim/v1/
						Node:
						(type) c
						(layer)2
							Element:p
							Element:i
								When calling the SCIM API, you'll need to use an API token created with our
							Element:a
								Test Token Generator
								. Other kinds of tokens will not work.
						Node:
						(type) c
						(layer)2
							Element:p
								You must pass along the API token in the "Authorization" header, like this:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								GET /scim/v1/Users HTTP/1.1 Host: api.slack.com Accept: application/json Authorization: Bearer xoxp-4956040672-4956040692-6476208902-xxxxxx
						Node:
						(type) c
						(layer)2
							Element:p
								As a REST API, the HTTP method used for each operation is important. Typically you will use
							Element:code
								GET
								to retrieve information,
							Element:code
								POST
								to create new objects,
							Element:code
								PUT
								and
							Element:code
								PATCH
								to modify objects and collections, and
							Element:code
								DELETE
								for removal operations.
						Node:
						(type) c
						(layer)2
							Element:p
								Provide a JSON request body for
							Element:code
								POST
								,
							Element:code
								PUT
								, and
							Element:code
								PATCH
								write operations, and set your HTTP
							Element:code
								Content-type
								header to
							Element:code
								application/json
								.
						Node:
						(type) c
						(layer)2
							Element:hr
						Node:
						(type) c
						(layer)2
							Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								SCIM API endpoints
						Node:
						(type) c
						(layer)2
							Element:p
								The SCIM API is RESTful, so the endpoint URLs are different than the Web API.
						Node:
						(type) c
						(layer)2
							Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Service Provider Configuration
									Node:
									(type) c
									(layer)3
										Element:p
										Element:a
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														GET /ServiceProviderConfigs
												Node:
												(type) c
												(layer)4
													Element:p
														Returns Slack's configuration details for our SCIM API, including which operations are supported.
												Node:
												(type) c
												(layer)4
													Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Schemas
									Node:
									(type) c
									(layer)3
										Element:p
										Element:a
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														GET /Schemas/Users
												Node:
												(type) c
												(layer)4
													Element:p
														Returns Slack's configuration details for how Users are formatted.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														GET /Schemas/Groups
												Node:
												(type) c
												(layer)4
													Element:p
														Returns Slack's configuration details for how Groups are formatted.
												Node:
												(type) c
												(layer)4
													Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Users
									Node:
									(type) c
									(layer)3
										Element:p
										Element:a
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														GET /Users
												Node:
												(type) c
												(layer)4
													Element:p
														Returns a list of Users in a paginated fashion. Use
													Element:code
														startIndex
														and
													Element:code
														count
														query parameters to change pagination results. Supports the
													Element:code
														filter
														parameter.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														GET /Users/{id}
												Node:
												(type) c
												(layer)4
													Element:p
														Retrieves a single User resource.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														POST /Users
												Node:
												(type) c
												(layer)4
													Element:p
														Creates a user. Must include the
													Element:code
														userName
														attribute (as defined in the specification) and at least one email address. You may provide an email address in the
													Element:code
														userName
														field, but it will be automatically converted to a Slack-appropriate username.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:strong
														Example request body
														:
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														{ "schemas": [ "urn:scim:schemas:core:1.0" ], "userName": "other_username", "nickName": "slack_username", "name": { "givenName": "First", "familyName": "Last" }, "title": "Ms.", "emails": [ { "value": "some@email.com", "primary": true } ], "photos": [ { "value": "https://some.image/url", "type": "photo" } ] }
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														PUT /Users/{id}
												Node:
												(type) c
												(layer)4
													Element:p
														Updates an existing user resource, overwriting all values for a user even if an attribute is empty or not provided.
													Element:br
														Disabled users can be re-enabled by sending
													Element:code
														active
														attribute equal to
													Element:code
														true
														.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:strong
														Example request body
														:
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														{ "schemas": [ "urn:scim:schemas:core:1.0" ], "id": "U0XE15NH0", "active": false, "userName": "other_username", "nickName": "slack_username", "name": { "givenName": "First", "familyName": "Last" }, "title": "Ms.", "emails": [ { "value": "some@email.com", "primary": true } ], "photos": [ { "value": "https://some.image/url", "type": "photo" } ] }
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														PATCH /Users/{id}
												Node:
												(type) c
												(layer)4
													Element:p
														Updates an existing user resource, overwriting values for specified attributes. Attributes that are not provided will remain unchanged.
													Element:br
														Standard PUT/PATCH operations for users. PUT means empty or not provided fields are overwritten. PATCH only updates the provided fields.
													Element:br
														Disabled users can be re-enabled by sending
													Element:code
														active
														attribute equal to
													Element:code
														true
														.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:strong
														Example request body
														:
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														{ "schemas": [ "urn:scim:schemas:core:1.0" ], "id": "U0XE15NH0", "active": true, "emails": [ { "value": "some@new.email.com", "primary": true } ] }
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														DELETE /Users/{id}
												Node:
												(type) c
												(layer)4
													Element:p
														Sets a Slack user to disabled and hides this user from all future requests.
												Node:
												(type) c
												(layer)4
													Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Groups
									Node:
									(type) c
									(layer)3
										Element:p
										Element:a
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														GET /Groups
												Node:
												(type) c
												(layer)4
													Element:p
														Returns a list of Groups in a paginated fashion. Use
													Element:code
														startIndex
														and
													Element:code
														count
														query parameters to change pagination results. Supports the
													Element:code
														filter
														parameter.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														GET /Groups/{id}
												Node:
												(type) c
												(layer)4
													Element:p
														Retrieves a single Group resource.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														POST /Groups
												Node:
												(type) c
												(layer)4
													Element:p
														Creates a new group. Must include the
													Element:code
														displayName
														attribute (as defined in the specification). Users can be added to the group during creation by supplying their Slack user ID values in the
													Element:code
														members
														array attribute.
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														{ "schemas": [ "urn:scim:schemas:core:1.0" ], "id": "external_id", "displayName": "Group Name", "members": [ { "value": "U0W0NQFFC" }, { "value": "U0W0C30RE" } ] }
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														PUT /Groups/{id}
												Node:
												(type) c
												(layer)4
													Element:p
														Updates an existing group resource, overwriting all values for a group even if an attribute is empty or not provided.
													Element:br
														PUT will replace all members of a group with those members provided via the
													Element:code
														members
														attribute.
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														{ "schemas": [ "urn:scim:schemas:core:1.0" ], "displayName": "New Group Name", "members": [ { "value": "U0W0NQFFC" } ] }
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														PATCH /Groups/{id}
												Node:
												(type) c
												(layer)4
													Element:p
														Updates an existing group resource, allowing individual (or groups of) users to be added or removed from the group with a single operation.
													Element:br
														The
													Element:code
														operation
														attribute can be used to
													Element:code
														delete
														members from a group,
													Element:code
														add
														is the default operation for PATCH.
													Element:br
													Element:a
														More details
														.
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														{ "schemas": [ "urn:scim:schemas:core:1.0" ], "members": [ { "value": "U0W0NQFFC" }, { "value": "U0W0QCPK4", "operation": "delete" }, { "value": "U0W0C30RE" } ] }
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														DELETE /Groups/{id}
												Node:
												(type) c
												(layer)4
													Element:p
														Permanently removes a group (members are not deleted, only the group)
												Node:
												(type) c
												(layer)4
													Element:hr
												Node:
												(type) c
												(layer)4
													Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								SCIM provisioning limitations
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
								Users can not be permanently deleted from Slack, they can only be disabled.
							Element:li
								Attempts to provision a user with a duplicate email address (even if the existing user has been previously disabled in Slack) will fail. The existing user email address must be updated manually in Slack to free up the email to be re-provisioned.
							Element:li
								Multi-Channel and Single-Channel Guests can not be fully provisioned via SCIM. You will first need to provision them as a full user, then restrict them via Slack admin page.
							Element:li
								Group mention handles (@group) can not be set via SCIM provisioning API.
							Element:li
								Subteams that are automatically generated by Slack, such as
							Element:code
								Team Admins
								, can not be updated via the SCIM API.
						Node:
						(type) c
						(layer)2
							Element:footer
							Element:ul
							Element:li
								Using Slack
							Element:li
							Element:a
								Product
							Element:li
							Element:a
								Pricing
							Element:li
							Element:a
								Support
							Element:li
							Element:a
								Slack Guides
							Element:li
							Element:a
								Video Guides
							Element:li
							Element:a
								App Directory
							Element:li
							Element:a
								API
							Element:ul
							Element:li
								Slack
							Element:li
							Element:a
								Jobs
							Element:li
							Element:a
								Customers
							Element:li
							Element:a
								Developers
							Element:li
							Element:a
								Events
							Element:li
							Element:a
								Blog
							Element:li
							Element:a
								Podcast
							Element:li
							Element:a
								Slack Shop
							Element:ul
							Element:li
								Legal
							Element:li
							Element:a
								Privacy
							Element:li
							Element:a
								Security
							Element:li
							Element:a
								Terms of Service
							Element:li
							Element:a
								Policies
							Element:ul
							Element:li
								Handy Links
							Element:li
							Element:a
								Download desktop app
							Element:li
							Element:a
								Download mobile app
							Element:li
							Element:a
								Brand Guidelines
							Element:li
							Element:a
								Slack at Work
							Element:li
							Element:a
								Status
							Element:a
							Element:ul
							Element:li
							Element:a
								Contact Us
							Element:li
							Element:a
							Element:li
							Element:a
