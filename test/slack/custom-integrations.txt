Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					Legacy custom integrations
					You're viewing documentation on legacy custom integrations, an older way for teams to build into their Slack team. To securely utilize the newest platform features like message buttons & the Events API, build
			Node:
			(type) c
			(layer)1
				Element:a
					as part of a
				Element:em
					internal
					integrations
			Node:
			(type) c
			(layer)1
				Element:a
					Slack app
					just for your team instead.
			Node:
			(type) c
			(layer)1
				Element:a
					Get started
					.
			Node:
			(type) c
			(layer)1
				Element:p
					Use our API's custom tools to build the perfect tailor-made integration for your team. With a few simple methods and some scripting, you can extend Slack to improve your workflow, monitor external services, and coordinate your team's efforts across devices, locations, and functional groups.
			Node:
			(type) c
			(layer)1
				Element:p
					Building custom integrations is also a great way to learn what our APIs can do in preparation for building and distributing a
				Element:a
					Slack app
					through our
				Element:a
					App Directory
					.
			Node:
			(type) c
			(layer)1
				Element:img
			Node:
			(type) c
			(layer)1
				Element:p
					Here's a short overview of some of the things you can do with the Slack API toolbox.
			Node:
			(type) c
			(layer)1
				Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Post notifications to Slack
						Node:
						(type) c
						(layer)2
							Element:p
								Our
							Element:a
								incoming webhooks
								provide a simple mechanism to send messages into Slack from any service that can post data. Take any output from your external service, do some simple JSON formatting, and send it right into a channel. For example, let's say you have a help ticketing system that you'd like to monitor for new tickets. You can send a very simple message into Slack with a link to the ticket:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								{ "text": "New Help Ticket Received: http://domain.com/ticket/123456" }
						Node:
						(type) c
						(layer)2
							Element:p
								Which will display like this:
						Node:
						(type) c
						(layer)2
							Element:p
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
								But you can also provide more context and detail, like the title and text of the new ticket, by using our JSON
							Element:code
								attachment
								fields.
						Node:
						(type) c
						(layer)2
							Element:pre
								{ "text": "New Help Ticket Received:", "attachments": [ { "title": "App hangs on reboot", "title_link": "http://domain.com/ticket/123456", "text": "If I restart my computer without quitting your app, it stops the reboot sequence.\nhttp://domain.com/ticket/123456", } ] }
						Node:
						(type) c
						(layer)2
							Element:p
								Which will display like this:
						Node:
						(type) c
						(layer)2
							Element:p
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
								The title is turned into a link using the
							Element:code
								title_link
								field, and the additional URL in the attachment's
							Element:code
								text
								field is autolinked by the client app.
						Node:
						(type) c
						(layer)2
							Element:p
								Learn more about our
							Element:a
								incoming webhooks
								,
							Element:a
								message formatting
								, and
							Element:a
								message attachments
								.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:a
								Set up an incoming webhook
						Node:
						(type) c
						(layer)2
							Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Invoke external services with slash commands
						Node:
						(type) c
						(layer)2
							Element:p
							Element:a
								Slash commands
								are messages that begin with a slash character followed by a command and, optionally, some extra info or arguments, like
							Element:code
								/weather
								. They can be used to invoke an external service straight from Slack: request data from a service, perform calculations, search, or anything else you need them to do.
						Node:
						(type) c
						(layer)2
							Element:p
								When a user issues a command, Slack sends a request to a URL you've configured and waits for a response from your service at that URL. The response can simply be text, or you can provide a full JSON payload similar to our incoming webhooks. Additionally, you can choose to respond only to the user that sent the command (what we call an "ephemeral" message), or response messages can be posted in the channel for everyone to see. You can even wait to send feedback to the user and send up to 5 additional response messages as needed.
						Node:
						(type) c
						(layer)2
							Element:p
								Continuing with the help ticketing system example, you could make a slash command to quickly show the user a list of open tickets in the system such that only they can see it (so it doesn't fill the channel with noise). Start with a slash command of
							Element:code
								/tickets
								, and to that add
							Element:code
								list
								, so the complete command for this use would be
							Element:code
								/tickets list
								. The script that you send the command to would take that, query the ticket system and return this JSON payload to the slash command:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								{ "response_type": "ephemeral", "text": "Here are the currently open tickets:", "attachments": [ { "text": "#123456 http://domain.com/ticket/123456 \n #123457 http://domain.com/ticket/123457 \n #123458 http://domain.com/ticket/123458 \n #123459 http://domain.com/ticket/123459 \n #123460 http://domain.com/ticket/123460" } ] }
						Node:
						(type) c
						(layer)2
							Element:p
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
								And if you wanted to retrieve the text of a ticket for discussion within the channel, you could use
							Element:code
								/ticket display [ID]
								and configure your script to return this payload instead. Note that it's identical to the incoming webhook payload for a new ticket but uses a
							Element:code
								response_type
								parameter set to
							Element:code
								in_channel
								.
						Node:
						(type) c
						(layer)2
							Element:pre
								{ "response_type": "in_channel", "text": "Ticket #123456: http://domain.com/ticket/123456", "attachments": [ { "title": "App hangs on reboot", "text": "If I restart my computer without quitting your app, it stops the reboot sequence.", } ] }
						Node:
						(type) c
						(layer)2
							Element:p
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
								Note that in the case of a slash command configured to deliver an
							Element:code
								in_channel
								response, the message where the user invoked the slash command is sent into the channel. This helps provide context for other users.
						Node:
						(type) c
						(layer)2
							Element:p
								Learn more about our
							Element:a
								slash commands
								,
							Element:a
								message formatting
								, and
							Element:a
								message attachments
								.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:a
								Set up a slash command
						Node:
						(type) c
						(layer)2
							Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Listen for and respond to messages with a bot user
						Node:
						(type) c
						(layer)2
							Element:p
							Element:a
								Bot users
								are the Swiss army knife of our integration tools. They connect to our
							Element:a
								Real Time Messaging API
								like human users, which means they can listen to conversations and even call our
							Element:a
								Web API
								, giving them a kind of flexibility that our other DIY tools don't have. Add a bot user to build a conversational interface with any external service.
						Node:
						(type) c
						(layer)2
							Element:p
								It's definitely more work than our other integration tools, but the results can be
							Element:strong
								amazing
								.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
								Learn more about
							Element:a
								bot users
								and take a look at the
							Element:a
								Botkit framework
								from our friends at
							Element:a
								Howdy
								.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:a
								Set up a bot user
						Node:
						(type) c
						(layer)2
							Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Going further: the Web API
						Node:
						(type) c
						(layer)2
							Element:p
								Our
							Element:a
								Web API
								gives you access to a handy array of
							Element:a
								methods
								for interacting directly with your team's data and users. From searching channel history to checking user information to posting messages directly into channels to deleting those messages, this is where the nuts and bolts of integrating with Slack happen.
						Node:
						(type) c
						(layer)2
							Element:p
								To get started with the Web API,
							Element:a
								create a token
								and try the tester functionality on a few of the method pages. The
							Element:a
								and
							Element:code
								chat.postMessage
							Element:a
								methods are both useful and great places to start.
							Element:code
								channels.history
						Node:
						(type) c
						(layer)2
							Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Going even further: the Real Time Messaging API
						Node:
						(type) c
						(layer)2
							Element:p
								The
							Element:a
								Real Time Messaging API
								lets you or your bot user connect directly with our messaging servers to send and receive messages in — you guessed it — real time. Having this connection can make interactions between your integration and Slack as fast as you want it to be. We have an
							Element:a
								extensive list of events
								that are sent through the RTM API for your bot user or other integration to listen for and respond to.
						Node:
						(type) c
						(layer)2
							Element:p
								Like bot users, making full use of the RTM API takes a little more effort, but in the long run can produce amazing results.
						Node:
						(type) c
						(layer)2
							Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Share your integration: turn it into an app
						Node:
						(type) c
						(layer)2
							Element:p
								After you have perfected your integration for your team, you can also turn it into a
							Element:a
								Slack app
								that every team can install and enjoy.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:a
								Build a Slack app
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Related Articles
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:a
								Tutorial by Slack
							Element:span
								Your first slash command and custom integration
							Element:li
							Element:a
								Testimonial by Looker (looker.com)
							Element:span
								Slack Your Data, Why We Created The Lookerbot for Slack
							Element:li
							Element:a
								Announcement by Estimote (estimote.com)
							Element:span
								Workplace reinvented: RealityHack #3 comes to a close
						Node:
						(type) c
						(layer)2
							Element:footer
							Element:ul
							Element:li
								Using Slack
							Element:li
							Element:a
								Product
							Element:li
							Element:a
								Pricing
							Element:li
							Element:a
								Support
							Element:li
							Element:a
								Slack Guides
							Element:li
							Element:a
								Video Guides
							Element:li
							Element:a
								App Directory
							Element:li
							Element:a
								API
							Element:ul
							Element:li
								Slack
							Element:li
							Element:a
								Jobs
							Element:li
							Element:a
								Customers
							Element:li
							Element:a
								Developers
							Element:li
							Element:a
								Events
							Element:li
							Element:a
								Blog
							Element:li
							Element:a
								Podcast
							Element:li
							Element:a
								Slack Shop
							Element:ul
							Element:li
								Legal
							Element:li
							Element:a
								Privacy
							Element:li
							Element:a
								Security
							Element:li
							Element:a
								Terms of Service
							Element:li
							Element:a
								Policies
							Element:ul
							Element:li
								Handy Links
							Element:li
							Element:a
								Download desktop app
							Element:li
							Element:a
								Download mobile app
							Element:li
							Element:a
								Brand Guidelines
							Element:li
							Element:a
								Slack at Work
							Element:li
							Element:a
								Status
							Element:a
							Element:ul
							Element:li
							Element:a
								Contact Us
							Element:li
							Element:a
							Element:li
							Element:a
