Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					Improving error conditions for Incoming Webhooks
			Node:
			(type) c
			(layer)1
				Element:p
				Element:span
					Updated: 2016-05-17
				Element:span
					APIs
			Node:
			(type) c
			(layer)1
				Element:hr
			Node:
			(type) c
			(layer)1
				Element:p
					Today,
				Element:a
					incoming webhooks
					either work or they don't. Usually they do, but when they don't, you get a somewhat nasty umbrella HTTP 500 error, even when error conditions were due to something well-understood, like malformed requests or non-existent destination channels.
			Node:
			(type) c
			(layer)1
				Element:p
					We will diversify our responses to include commonly-interpreted HTTP status codes. For most developers using incoming webhooks, this change will not require additional effort. Most HTTP clients readily consume and predictably react with these status codes.
			Node:
			(type) c
			(layer)1
				Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								What's changing:
						Node:
						(type) c
						(layer)2
							Element:p
								To clarify the nature of these failures and reserve HTTP 500 for only the most exceptional of circumstances, we'll begin returning HTTP 400, 403, and 404 as appropriate, better explaining the situation.
						Node:
						(type) c
						(layer)2
							Element:p
								Here are the errors you may encounter, along with the simple strings we'll return to you in the response body.
						Node:
						(type) c
						(layer)2
							Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											HTTP 400 Bad Request
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:code
											invalid_payload
											- the data sent in your request cannot be understood as presented; verify your content body matches your content type and is structurally valid.
										Element:li
										Element:code
											user_not_found
											- the user used in your request does not actually exist.
									Node:
									(type) c
									(layer)3
										Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											HTTP 403 Forbidden
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:code
											action_prohibited
											- the team associated with your request has some kind of restriction on the webhook posting in this context.
									Node:
									(type) c
									(layer)3
										Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											HTTP 404 Not Found
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:code
											channel_not_found
											- the channel associated with your request does not exist.
									Node:
									(type) c
									(layer)3
										Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											HTTP 410 Gone
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:code
											channel_is_archived
											- the channel has been archived and doesn't accept further messages, even from your incoming webhook.
									Node:
									(type) c
									(layer)3
										Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											HTTP 500 Server Error
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:code
											rollup_error
											- something strange and unusual happened that was likely not your fault at all.
									Node:
									(type) c
									(layer)3
										Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								When it's happening:
						Node:
						(type) c
						(layer)2
							Element:p
								We'd like to make this change on
							Element:strong
								June 14th, 2016
								.
						Node:
						(type) c
						(layer)2
							Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								How to prepare:
						Node:
						(type) c
						(layer)2
							Element:p
								You're unlikely to run into trouble if you interpret a HTTP 200 response as success and any other response code as a failure of some kind. This is the most common behavior when working with incoming webhooks.
						Node:
						(type) c
						(layer)2
							Element:p
								If you're specifically looking for HTTP 500 as the primary failure state, you'll want to tell your computers to better understand these 400-series errors as well.
						Node:
						(type) c
						(layer)2
							Element:p
								Finally, interpreting these status codes and simple responses can be put to especially good use, by using them to provide users feedback when encountering error conditions, like incorrect channel selection. Logging these codes are also helpful when debugging and reporting issues with webhooks.
						Node:
						(type) c
						(layer)2
							Element:p
								Let us know if you anticipate any issues with your apps and integrations. If the coast is clear, you'll see this ship sail on
							Element:strong
								June 14th, 2016
								.
						Node:
						(type) c
						(layer)2
							Element:a
							Element:i
								Review other recent updates
						Node:
						(type) c
						(layer)2
							Element:footer
							Element:ul
							Element:li
								Using Slack
							Element:li
							Element:a
								Product
							Element:li
							Element:a
								Pricing
							Element:li
							Element:a
								Support
							Element:li
							Element:a
								Slack Guides
							Element:li
							Element:a
								Video Guides
							Element:li
							Element:a
								App Directory
							Element:li
							Element:a
								API
							Element:ul
							Element:li
								Slack
							Element:li
							Element:a
								Jobs
							Element:li
							Element:a
								Customers
							Element:li
							Element:a
								Developers
							Element:li
							Element:a
								Events
							Element:li
							Element:a
								Blog
							Element:li
							Element:a
								Podcast
							Element:li
							Element:a
								Slack Shop
							Element:ul
							Element:li
								Legal
							Element:li
							Element:a
								Privacy
							Element:li
							Element:a
								Security
							Element:li
							Element:a
								Terms of Service
							Element:li
							Element:a
								Policies
							Element:ul
							Element:li
								Handy Links
							Element:li
							Element:a
								Download desktop app
							Element:li
							Element:a
								Download mobile app
							Element:li
							Element:a
								Brand Guidelines
							Element:li
							Element:a
								Slack at Work
							Element:li
							Element:a
								Status
							Element:a
							Element:ul
							Element:li
							Element:a
								Contact Us
							Element:li
							Element:a
							Element:li
							Element:a
