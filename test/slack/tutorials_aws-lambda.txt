Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					Creating an AWS Lambda Function and API Endpoint
			Node:
			(type) c
			(layer)1
				Element:span
					By John Agan
			Node:
			(type) c
			(layer)1
				Element:span
				Element:a
					Node.js
			Node:
			(type) c
			(layer)1
				Element:span
				Element:a
					Botkit
			Node:
			(type) c
			(layer)1
				Element:span
				Element:a
					Slash commands
			Node:
			(type) c
			(layer)1
				Element:span
				Element:a
					Amazon Lambda
			Node:
			(type) c
			(layer)1
				Element:hr
			Node:
			(type) c
			(layer)1
				Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Introduction
						Node:
						(type) c
						(layer)2
							Element:p
								This is a step-by-step guide to setting up an AWS Lambda function and attaching it to an API endpoint. The goal of this tutorial is to get you familiar with setting up an AWS Lambda function that you can POST data to and return a response.
						Node:
						(type) c
						(layer)2
							Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Disclaimer
									Node:
									(type) c
									(layer)3
										Element:p
										Element:i
											This example uses a
										Element:em
											minimal
											AWS security configuration, which
										Element:strong
											should not
											be used for production applications.
									Node:
									(type) c
									(layer)3
										Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Prerequisites
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
											An
										Element:a
											AWS account
											with admin privileges
										Element:li
										Element:a
											cURL
											to test the API Endpoint (optional).
									Node:
									(type) c
									(layer)3
										Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Walkthrough
									Node:
									(type) c
									(layer)3
										Element:p
											If you prefer to
										Element:em
											watch
											a walkthrough, here is a recording of the steps below in action. ðŸ‘€
									Node:
									(type) c
									(layer)3
										Element:p
										Element:img
									Node:
									(type) c
									(layer)3
										Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Getting Started
						Node:
						(type) c
						(layer)2
							Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Select a Blueprint
									Node:
									(type) c
									(layer)3
										Element:p
											After clicking
										Element:strong
											Get Started Now
											, you will be presented with a list of blueprints to select. This is an optional step that we will skip for now. Instead, click
										Element:strong
											Configure triggers
											in the top left navigation menu.
									Node:
									(type) c
									(layer)3
										Element:p
										Element:img
									Node:
									(type) c
									(layer)3
										Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Configure Triggers
									Node:
									(type) c
									(layer)3
										Element:p
											An AWS Lambda is only a function, so something will have to trigger that function. In our tutorial, we want to POST data to a url and trigger the function. To do this in the AWS world, you will use the API Gateway trigger.
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Step 1
												Node:
												(type) c
												(layer)4
													Element:p
														Click the dotted-grey box and select API Gateway in the menu.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:img
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Step 2
												Node:
												(type) c
												(layer)4
													Element:p
														Here you will select the API to use and how it will be invoked. If this is your first time using the API Gateway, AWS will setup a gateway titled LambdaMicroservice. AWS will also create a resource named /null which isn't ideal, but I'll show you how to change that later. For now, make sure to update the following:
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
													Element:strong
														Method = POST
														- Since our tutorial will be submitting POST requests to the API
													Element:li
													Element:strong
														Security = Open
														- This makes the endpoint publicly accessible without requiring a token
												Node:
												(type) c
												(layer)4
													Element:p
													Element:img
												Node:
												(type) c
												(layer)4
													Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Configure Function
									Node:
									(type) c
									(layer)3
										Element:p
											Here we'll setup the function to run. Most of this should have the correct defaults, but AWS stores your previous settings in local storage, so
										Element:strong
											double check
											that everything matches below.
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Step 1
												Node:
												(type) c
												(layer)4
													Element:p
														Give the function a name and description. We'll use the default function for this example. In case this looks different for you, here is the code:
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														exports.handler = (event, context, callback) => { // TODO implement callback(null, 'Hello from Lambda'); };
												Node:
												(type) c
												(layer)4
													Element:p
													Element:img
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Step 2
												Node:
												(type) c
												(layer)4
													Element:p
														Scroll down till you reach the Role* option. This is where we specify the AWS security role to run the function as. If this is your first AWS Lambda function, I'd recommend creating a new role from template and giving it a name. In the example, I used slack-events as the name of my new role. Everything else can remain the same.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:img
												Node:
												(type) c
												(layer)4
													Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Review
									Node:
									(type) c
									(layer)3
										Element:p
											The last step is just to confirm the we got everything entered correctly. If everything looks good, click Create function.
									Node:
									(type) c
									(layer)3
										Element:p
										Element:img
									Node:
									(type) c
									(layer)3
										Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Success
									Node:
									(type) c
									(layer)3
										Element:p
											If all goes well, you should have a fancy new Lambda function waiting for requests and a URL to send requests to.
									Node:
									(type) c
									(layer)3
										Element:p
										Element:img
									Node:
									(type) c
									(layer)3
										Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Testing
									Node:
									(type) c
									(layer)3
										Element:p
											AWS has a test console in the Web UI, but I prefer testing it externally. This example shows a sample cURL post.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											curl -X POST https://1grvd23rfe.execute-api.us-east-1.amazonaws.com/prod/null
									Node:
									(type) c
									(layer)3
										Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Update Endpoint [optional]
						Node:
						(type) c
						(layer)2
							Element:p
								Things are working, but that /null endpoint is bothering you, right? No problem! Now that Lamba did all the heavy lifting of setting up the AWS API Gateway service for us, we can add a new endpoint to listen to easily.
						Node:
						(type) c
						(layer)2
							Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Configuration
									Node:
									(type) c
									(layer)3
										Element:ol
										Element:li
											Goto your Lambda function
										Element:li
											Click the Triggers tab
										Element:li
											Click the method POST
										Element:li
											Use the left tree to navigate to APIs > LambdaMicroservices > Resources
										Element:li
											Select to root / and click Actions > Create Resource just above it
										Element:li
											Name your resource and desired path
										Element:li
											Select your newly created resource and click Actions > Create Method
										Element:li
											Select POST in the new dropdown under your resource and click the checkmark to the right
										Element:li
											Select Lambda Function as the integration type
										Element:li
											Select the region you created your function in
										Element:li
											Type in the name of your function. This should auto-complete and find it for you.
										Element:li
											Click the Actions > Deploy API
										Element:li
											Select prod and click Deploy
										Element:li
											Success!
									Node:
									(type) c
									(layer)3
										Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Walkthrough
									Node:
									(type) c
									(layer)3
										Element:p
											There are a bunch of steps, but it sounds worse than it really is. Here's a recording of the the steps in action.
									Node:
									(type) c
									(layer)3
										Element:p
										Element:img
									Node:
									(type) c
									(layer)3
										Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Testing
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											curl -X POST https://1grvd23rfe.execute-api.us-east-1.amazonaws.com/prod/slack
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Related documentation
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:a
											Slash Commands
										Element:br
										Element:em
											Slack Platform documentation
										Element:li
										Element:a
											Building Slack apps
										Element:br
										Element:em
											Slack Platform documentation
									Node:
									(type) c
									(layer)3
										Element:footer
										Element:ul
										Element:li
											Using Slack
										Element:li
										Element:a
											Product
										Element:li
										Element:a
											Pricing
										Element:li
										Element:a
											Support
										Element:li
										Element:a
											Slack Guides
										Element:li
										Element:a
											Video Guides
										Element:li
										Element:a
											App Directory
										Element:li
										Element:a
											API
										Element:ul
										Element:li
											Slack
										Element:li
										Element:a
											Jobs
										Element:li
										Element:a
											Customers
										Element:li
										Element:a
											Developers
										Element:li
										Element:a
											Events
										Element:li
										Element:a
											Blog
										Element:li
										Element:a
											Podcast
										Element:li
										Element:a
											Slack Shop
										Element:ul
										Element:li
											Legal
										Element:li
										Element:a
											Privacy
										Element:li
										Element:a
											Security
										Element:li
										Element:a
											Terms of Service
										Element:li
										Element:a
											Policies
										Element:ul
										Element:li
											Handy Links
										Element:li
										Element:a
											Download desktop app
										Element:li
										Element:a
											Download mobile app
										Element:li
										Element:a
											Brand Guidelines
										Element:li
										Element:a
											Slack at Work
										Element:li
										Element:a
											Status
										Element:a
										Element:ul
										Element:li
										Element:a
											Contact Us
										Element:li
										Element:a
										Element:li
										Element:a
