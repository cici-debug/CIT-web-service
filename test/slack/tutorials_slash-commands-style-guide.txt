Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					A style guide for slash commands
			Node:
			(type) c
			(layer)1
				Element:span
					By Amir Shevat and Taylor Singletary
			Node:
			(type) c
			(layer)1
				Element:span
				Element:a
					Slash commands
			Node:
			(type) c
			(layer)1
				Element:span
				Element:a
					Best practices
			Node:
			(type) c
			(layer)1
				Element:hr
			Node:
			(type) c
			(layer)1
				Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								How make your slash commands delightful.
						Node:
						(type) c
						(layer)2
							Element:p
								We hope you've noticed that there is now a super easy way to build
							Element:a
								slash commands
								! Slash commands make your users feel powerful. By typing a
							Element:code
								/
								into the Slack command line, a drop down of possible commands helpfully announce themselves at a user's fingertips. With a wave of their hand, they can summon an action, like setting a reminder, requesting a Lyft, sharing a riotously amusing gif, or doing any special things that your own custom Slack command can do.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
							Element:em
								This is amazing!
						Node:
						(type) c
						(layer)2
							Element:p
								Of course, if you're building a nifty slash command, you want it to be easy to use and swiftly understood, and that's what this style guide is for.
						Node:
						(type) c
						(layer)2
							Element:p
								So let's learn about:
						Node:
						(type) c
						(layer)2
							Element:ol
							Element:li
								Providing friendly slash command usage instructions via
							Element:code
								/command help
							Element:li
								Using
							Element:code
								/command connect
								to auth individual users and other granular auth cases
							Element:li
								Slash command naming conventions
							Element:li
								When to use public, ephemeral, and delayed responses
							Element:li
								Slash Commands + Incoming Webhooks = Neat
						Node:
						(type) c
						(layer)2
							Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Help users help themselves with /command help
						Node:
						(type) c
						(layer)2
							Element:p
								Whatever your slash command does, you should provide an action called
							Element:code
								help
								.
						Node:
						(type) c
						(layer)2
							Element:p
								If your command is
							Element:code
								/please
								, you would provide a
							Element:code
								/please help
								action users can enter on their Slack command line. When invoked, we'll issue a trigger request to your external URL with the
							Element:code
								text
								attribute set to
							Element:code
								help
								. All you need to do is quickly provide a textual ephemeral response explaining to the user how your command works. If your command supported actions like
							Element:code
								feed
								and
							Element:code
								tease
								, you would tell the user how to
							Element:code
								/please feed
								and
							Element:code
								/please tease
								:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								{ "response_type": "ephemeral", "text": "How to use /please", "attachments":[ { "text":"To be fed, use `/please feed` to request food. We hear the elf needs food badly.\nTo tease, use `/please tease` &mdash; we always knew you liked noogies.\nYou've already learned how to get help with `/please help`." } ] }
						Node:
						(type) c
						(layer)2
							Element:p
								If your slash command's actions are sophisticated enough to take arguments, it is wise to also enhance your
							Element:code
								help
								function to provide illumination on those actions:
							Element:code
								/please help feed
								and
							Element:code
								/please help tease
								may explain how you can add a @username to
							Element:code
								/please feed @valkyrie
								and
							Element:code
								/please tease @wizard
								.
						Node:
						(type) c
						(layer)2
							Element:p
								A slash command that requires actions or arguments to function should provide a default help response. Users inevitably will try using your command without any additional text. If your
							Element:code
								/please
								command required an argument, then you'd want to offer some version of the
							Element:code
								/please help
								response when users just type
							Element:code
								/please
								. This way, users can easily explore your command's functionality without having to hit the books.
						Node:
						(type) c
						(layer)2
							Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Auth users with /command connect
						Node:
						(type) c
						(layer)2
							Element:p
								Some services and applications need to authenticate specific Slack users in a granular way, usually to associate a Slack user with a user account on that service.
						Node:
						(type) c
						(layer)2
							Element:p
								It's cool to do that, but it's even cooler to follow the
							Element:code
								/command connect
								convention to handle it. After a user types a command like
							Element:code
								/please connect
								, you would return an ephemeral message containing a link to a friendly auth flow on your site and follow it up with a fancy landing page with usage instructions. And then you'll know that "
							Element:strong
								@warrior
								" on that Slack team is "
							Element:strong
								fancywarrior
								" in your app and can act accordingly.
						Node:
						(type) c
						(layer)2
							Element:p
								To be even more helpful, offer users an opportunity to connect their account the first time they try to utilize a command that requires auth on your service.
						Node:
						(type) c
						(layer)2
							Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								The naming of slash commands
						Node:
						(type) c
						(layer)2
							Element:p
								Choose a descriptive name for your slash command, but make it easy to recall and type.
						Node:
						(type) c
						(layer)2
							Element:p
								If your application provides printing services, then
							Element:code
								/print
								makes sense, but avoid using copyrighted names that you do not own like
							Element:code
								/HP
								or
							Element:code
								/canon
								(unless you work there, and then ðŸŽ‰). If your service is known by its name, a command with your company's name in it (like /lyft and /uber to request car sharing service) is an easy way for Slack users to remember how to invoke your slash commands.
						Node:
						(type) c
						(layer)2
							Element:p
								You'll need to balance your careful command naming with knowing that slash commands aren't namespaced. Be mindful and choose a name that won't override or be overridden by another developer's carefully named command. Pick a name that is simple, easy to remember and connects directly with a purpose. Users shouldn't have to explore the slash command drop down every time they go to do that thing. Long slash commands can lead to this:
						Node:
						(type) c
						(layer)2
							Element:p
							Element:img
						Node:
						(type) c
						(layer)2
							Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Conventions
						Node:
						(type) c
						(layer)2
							Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Public vs ephemeral responses
									Node:
									(type) c
									(layer)3
										Element:p
											By default, the response messages sent to commands will only be visible to the user that issued the command (we call these "ephemeral" messages). However, if you would like the response to be visible to all channel members where the user typed the command, you can add a
										Element:code
											response_type
											of
										Element:code
											in_channel
											to the JSON response:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											{ "response_type": "in_channel", "text": "It's 80 degrees right now.", "attachments": [ { "text":"Partly cloudy today and tomorrow" } ] }
									Node:
									(type) c
									(layer)3
										Element:p
											Remember that a chatty app is not necessarily a good thing so only pick responses that are important to the entire team for this type of response.
									Node:
									(type) c
									(layer)3
										Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Delayed response
									Node:
									(type) c
									(layer)3
										Element:p
											You may notice a
										Element:code
											response_url
											field included in the initial command request we send you. You can treat them somewhat like Incoming Webhooks, as the response URL is a webhook that allows your app to post additional messages to a channel for a period of time after a command is triggered. Response URLs can be used to send five additional messages within a thirty minute window from the original command invocation.
									Node:
									(type) c
									(layer)3
										Element:p
											Any request that you make to the response URL can include either a plain text or JSON-encoded body. If your message is JSON encoded, you may also configure how your message is formatted using markdown. Like Incoming Webhooks, response URLs can also include attachments.
									Node:
									(type) c
									(layer)3
										Element:p
											Use delayed responses when your action might take more than 3 seconds to perform:
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
											When humans are involved in the process â€” approvals, questions and answers services. If the process will take more than 30 min, you may want to consider using a bot user rather than a slash command.
										Element:li
											Long-lasting computation processes â€” report generation, batch processing, highly distributed processes or even a script that might take more than 3 seconds.
										Element:li
											Retrieving results from external services â€” if your application relies on remote APIs, you should use delayed responses to mitigate potentially slow response times from 3rd party services.
										Element:li
											Waiting a few seconds to deliver your message, for dramatic effect or to stay on the right beat for workplace comedy.
									Node:
									(type) c
									(layer)3
										Element:p
											Though you may be in a hurry to wait and send your delayed response, it's important to respond to Slack's initial invocation of your slack command URL with a hardy HTTP 200 OK, just so we know that you've received the user's command.
									Node:
									(type) c
									(layer)3
										Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								/Conclusion
						Node:
						(type) c
						(layer)2
							Element:p
								Slash commands are a stellar way to invoke your app functionality from within Slack. Following these best practices will make your users working lives simpler, more pleasant and more productive. If you think your slash command is useful for other teams, consider packaging it up as
							Element:a
								Slack App
								and submitting it to
							Element:a
								our directory
								!
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Related documentation
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:a
											Slash Commands
										Element:br
										Element:em
											Slack Platform documentation
										Element:li
										Element:a
											Guidelines for building messages
										Element:br
										Element:em
											Slack Platform documentation
										Element:li
										Element:a
											Sign in with Slack
										Element:br
										Element:em
											Slack Platform documentation
									Node:
									(type) c
									(layer)3
										Element:footer
										Element:ul
										Element:li
											Using Slack
										Element:li
										Element:a
											Product
										Element:li
										Element:a
											Pricing
										Element:li
										Element:a
											Support
										Element:li
										Element:a
											Slack Guides
										Element:li
										Element:a
											Video Guides
										Element:li
										Element:a
											App Directory
										Element:li
										Element:a
											API
										Element:ul
										Element:li
											Slack
										Element:li
										Element:a
											Jobs
										Element:li
										Element:a
											Customers
										Element:li
										Element:a
											Developers
										Element:li
										Element:a
											Events
										Element:li
										Element:a
											Blog
										Element:li
										Element:a
											Podcast
										Element:li
										Element:a
											Slack Shop
										Element:ul
										Element:li
											Legal
										Element:li
										Element:a
											Privacy
										Element:li
										Element:a
											Security
										Element:li
										Element:a
											Terms of Service
										Element:li
										Element:a
											Policies
										Element:ul
										Element:li
											Handy Links
										Element:li
										Element:a
											Download desktop app
										Element:li
										Element:a
											Download mobile app
										Element:li
										Element:a
											Brand Guidelines
										Element:li
										Element:a
											Slack at Work
										Element:li
										Element:a
											Status
										Element:a
										Element:ul
										Element:li
										Element:a
											Contact Us
										Element:li
										Element:a
										Element:li
										Element:a
