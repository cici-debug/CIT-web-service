Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					An introduction to messages
			Node:
			(type) c
			(layer)1
				Element:p
					The simplest Slack messages are brief statements, authored by users and bots, and broadcast to channels for one or many team members to read. Messages are the basic building block of all conversations on Slack.
			Node:
			(type) c
			(layer)1
				Element:p
					Messages notify, communicate, and motivate. They invite response. To have their buttons pressed. Their wit awarded. Sometimes messages even inspire people to do the best work of their lives.
			Node:
			(type) c
			(layer)1
				Element:a
				Element:img
			Node:
			(type) c
			(layer)1
				Element:p
					Slack messages are part message, part medium. Posting messages means sending not only a bundle of words, but also a series of attributes both describing and containing content.
			Node:
			(type) c
			(layer)1
				Element:p
					We have a lot to say about messages. This particular document is a primer, a jumping off point for further adventures in messaging.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:a
					How to compose messages
				Element:li
				Element:a
					Formatting messages
				Element:li
				Element:a
					Simplifying complex interactions with buttons
				Element:li
				Element:a
					How to send messages
			Node:
			(type) c
			(layer)1
				Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Composing messages
						Node:
						(type) c
						(layer)2
							Element:p
								A local comic book store uses Slack to keep its staff informed and engaged in their collective hobby turned vocation. The owner set up an incoming webhook to notify employees when new issues hit the shelves.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
								To send this formatted text as an
							Element:a
								incoming webhook
								, the owner followed these very docs you're reading now to construct a JSON hash in our
							Element:a
								message builder
								that formatted the important notification with distinctive italics.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								{ "text": "New comic book alert! _The Further Adventures of Slackbot_, Volume 1, Issue 3." }
						Node:
						(type) c
						(layer)2
							Element:p
							Element:a
								You can try that out in message builder too
								.
						Node:
						(type) c
						(layer)2
							Element:p
								As effective and simple as that notification is, Slack messages are capable of more unobtrusive ornamentation and interaction opportunities.
						Node:
						(type) c
						(layer)2
							Element:p
								If you're wondering how to compose truly great messages — check out our
							Element:a
								message guidelines
								.
						Node:
						(type) c
						(layer)2
							Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Formatting messages
						Node:
						(type) c
						(layer)2
							Element:p
								Get your point across with bold, italics, and other markup-fu. If you're familiar with similar markup formats like Markdown, you'll be sending beautiful messages in no time.
						Node:
						(type) c
						(layer)2
							Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Simple formatting
									Node:
									(type) c
									(layer)3
										Element:p
											Make text bold by wrapping it in asterisks (*) like this:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											*Well, this is a bold statement.*
									Node:
									(type) c
									(layer)3
										Element:p
											(
										Element:a
											Message Builder example
											)
									Node:
									(type) c
									(layer)3
										Element:p
											Italics adds emphasis without the gaudiness of being bold. Wrap your text in underscores to italicize.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											My _spidey sense_ tells me I'll have to skip lunch today.
									Node:
									(type) c
									(layer)3
										Element:p
											(
										Element:a
											Message Builder example
											)
									Node:
									(type) c
									(layer)3
										Element:p
											Some times you want a line break to appear in your text. Perhaps you're writing poetry about your business' bottom line. Use the special control character
										Element:code
											\n
											to denote a new line. Yes, that's technically two characters.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											The spent cents are tails\nI'll never see wag again
									Node:
									(type) c
									(layer)3
										Element:p
											(
										Element:a
											Message Builder example
											)
									Node:
									(type) c
									(layer)3
										Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Code blocks
									Node:
									(type) c
									(layer)3
										Element:p
											If there's a short bit of code you want to appear inline, wrap a grave accent (
										Element:code
											`
											) around it.
									Node:
									(type) c
									(layer)3
										Element:p
											Slack will render this kind of text in a readable monotype font.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											We should be concerned if the variable value for `radioactive` is `true`.
									Node:
									(type) c
									(layer)3
										Element:p
											(
										Element:a
											Message Builder example
											)
									Node:
									(type) c
									(layer)3
										Element:p
											Finally, if you want to share a larger code block, you'll want to wrap it in multiple grave accents, which sounds like a bad accident waiting to happen but it's not.
									Node:
									(type) c
									(layer)3
										Element:p
											Use three accents
										Element:code
											```
											before and after your code block, which likely will contain new line characters represented as
										Element:code
											\n
											as suggested above.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											```\n{\n "text":"A short self-referential message we're sending in `JSON`."\n}\n```
									Node:
									(type) c
									(layer)3
										Element:p
											(
										Element:a
											Message Builder example
											)
									Node:
									(type) c
									(layer)3
										Element:hr
									Node:
									(type) c
									(layer)3
										Element:p
											There's even more to learn about message formatting — more ways to express yourself, and of course some complications that may arise.
									Node:
									(type) c
									(layer)3
										Element:p
											Continue on in
										Element:strong
											.
										Element:a
											message formatting
									Node:
									(type) c
									(layer)3
										Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Simplify complex interactions with buttons
						Node:
						(type) c
						(layer)2
							Element:p
								Users already can read, respond, and react to messages. There are so many interactive possibilities within those capabilities alone.
						Node:
						(type) c
						(layer)2
							Element:p
								But if you really want to solicit specific answers from users,
							Element:a
								buttons
								are the way to go.
						Node:
						(type) c
						(layer)2
							Element:p
								Messages containing buttons become even more interactive, as each clicked button sends a request to your servers where you get to decide what happens next:
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
								Respond with additional messages, even more buttons.
							Element:li
								Using
							Element:a
								, your messages can evolve as the consequences of users pressing buttons emerge.
							Element:code
								chat.update
							Element:li
								Each button press sends an identifiable request to your servers where you decide what happens next.
						Node:
						(type) c
						(layer)2
							Element:p
								You'll need a
							Element:a
								Slack app
								to use message buttons, as they are not supported when sending messages with custom integrations.
						Node:
						(type) c
						(layer)2
							Element:p
								Be sure and read all about
							Element:a
								message buttons
								and how actions are invoked.
						Node:
						(type) c
						(layer)2
							Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Meanwhile, back at work
									Node:
									(type) c
									(layer)3
										Element:p
											Back at the comic shop, the manager has been busy developing a deeper Slack integration with their inventory management software.
									Node:
									(type) c
									(layer)3
										Element:p
											Now when a comic book that's sold out comes back into stock, it's announced to employees and even gives them the opportunity to recommend it.
									Node:
									(type) c
									(layer)3
										Element:p
										Element:img
									Node:
									(type) c
									(layer)3
										Element:p
											This message highlights a number of message features. It includes a
										Element:code
											text
											field with a brief message and an emoji reference. It also contains four message attachments. The final attachment has been assigned a blue bar and contains two buttons, encouraging comic shop employees to click and share their opinion.
									Node:
									(type) c
									(layer)3
										Element:p
											Here's the JSON message definition used to create a message like this:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											{ "text": "New comic book alert!", "attachments": [ { "title": "The Further Adventures of Slackbot", "fields": [ { "title": "Volume", "value": "1", "short": true }, { "title": "Issue", "value": "3", "short": true } ], "author_name": "Stanford S. Strickland", "author_icon": "http://a.slack-edge.com/7f18https://a.slack-edge.com/bfaba/img/api/homepage_custom_integrations-2x.png", "image_url": "http://i.imgur.com/OJkaVOI.jpg?1" }, { "title": "Synopsis", "text": "After @episod pushed exciting changes to a devious new branch back in Issue 1, Slackbot notifies @don about an unexpected deploy..." }, { "fallback": "Would you recommend it to customers?", "title": "Would you recommend it to customers?", "callback_id": "comic_1234_xyz", "color": "#3AA3E3", "attachment_type": "default", "actions": [ { "name": "recommend", "text": "Recommend", "type": "button", "value": "recommend" }, { "name": "no", "text": "No", "type": "button", "value": "bad" } ] } ] }
									Node:
									(type) c
									(layer)3
										Element:p
										Element:a
											Try it!
									Node:
									(type) c
									(layer)3
										Element:p
										Element:a
											Read all about how to simplify workflows with action-invoking buttons
											.
									Node:
									(type) c
									(layer)3
										Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								How to send messages
						Node:
						(type) c
						(layer)2
							Element:p
								All this talk about writing a Slack message but so few words on how slipping missives into the system.
						Node:
						(type) c
						(layer)2
							Element:p
								Messages enter Slack by way of many avenues, some with differing capabilities and approaches.
						Node:
						(type) c
						(layer)2
							Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Users typing in a Slack app
									Node:
									(type) c
									(layer)3
										Element:p
											Sure, it seems obvious and this is developer documentation after all, but it's worth pointing out that users type messages in Slack. They even follow some of the conventions documented here. But applications are capable of quite a few more messaging tricks.
									Node:
									(type) c
									(layer)3
										Element:p
											Maybe users add some light formatting or an @mention. After pressing enter, their profound message is delivered to Slack and sent along to all the right team members and bot users listening in from afar.
									Node:
									(type) c
									(layer)3
										Element:p
											Typically when users post messages, they're sending them
										Element:a
											via the Real Time Messaging API
											.
									Node:
									(type) c
									(layer)3
										Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Using incoming webhooks
									Node:
									(type) c
									(layer)3
										Element:p
											A simple and effective way to send messages is with
										Element:a
											incoming webhooks
											.
									Node:
									(type) c
									(layer)3
										Element:p
											Incoming webhooks are capable of handling the most simple or the most richly formatted messages with parades of interactive buttons.
									Node:
									(type) c
									(layer)3
										Element:p
											Sending a message could be as easy as:
									Node:
									(type) c
									(layer)3
															Node:
															(type) c
															(layer)5
																Element:h5
																	curl example
																Element:i
															Node:
															(type) c
															(layer)5
																Element:pre
																Element:code
																	curl -X POST -H 'Content-type: application/json' \ --data '{"text":"This is a line of text.\nAnd this is another one."}' \ https://hooks.slack.com/services/T00000000/B00000000/XXXXXXXXXXXXXXXXXXXXXXXX
															Node:
															(type) c
															(layer)5
																Element:p
																	Incoming webhooks are ideal for sending notifications.
															Node:
															(type) c
															(layer)5
																Element:p
																	Find out more in the
																Element:a
																	incoming webhooks
																	and preview your messages with the
																Element:a
																	message builder
																	.
															Node:
															(type) c
															(layer)5
																Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Using the Web API
									Node:
									(type) c
									(layer)3
										Element:p
											Use
										Element:a
											to send messages using the web API. The token you use will need the
										Element:code
											chat.postMessage
										Element:code
											chat:write:bot
											or
										Element:code
											chat:write:user
										Element:a
											token scope
											applied to it.
									Node:
									(type) c
									(layer)3
										Element:p
											Unfortunately, you can't send messages to this method with JSON directly. However, it does support an
										Element:code
											attachments
											HTTP parameter that accepts a URL-encoded string of a JSON hash. Which sounds like gibberish but isn't too difficult to pull off.
									Node:
									(type) c
									(layer)3
										Element:p
										Element:a
											Read more about posting messages with the Web API
											.
									Node:
									(type) c
									(layer)3
										Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Using the Real Time Messaging API
									Node:
									(type) c
									(layer)3
										Element:p
											To send messages on behalf of the user owning a specific token, post message JSON directly into an open websocket connection in the
										Element:a
											Real Time Messaging API
											.
									Node:
									(type) c
									(layer)3
										Element:p
											You cannot provide attachments nor buttons to messages posted over the RTM API. If your bot user needs to send more complex messages, use the web API's
										Element:a
											.
										Element:code
											chat.postMessage
									Node:
									(type) c
									(layer)3
										Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Responding to slash commands
									Node:
									(type) c
									(layer)3
										Element:p
										Element:a
											Slash commands
											are powerful way for users to demonstrate intent. When your command URL is invoked, you can respond with your message in JSON, including attachments or interactive buttons. You can even wait until later to respond by following up with posting more JSON to the invocation's
										Element:code
											response_url
											. Implementation is very similar to incoming webhooks.
									Node:
									(type) c
									(layer)3
										Element:p
										Element:a
											Message buttons
											complement the slash command workflow well, especially when using ephemeral messages.
									Node:
									(type) c
									(layer)3
										Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Responding to message button actions
									Node:
									(type) c
									(layer)3
										Element:p
											Each time a
										Element:a
											message button
											is clicked, we send a request to your server and you can take that opportunity to add additional messages or replace the original. As with slash commands, you can also delay your response and perform follow up transformations and new messages.
									Node:
									(type) c
									(layer)3
										Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Threading messages
									Node:
									(type) c
									(layer)3
										Element:p
											Our documentation on
										Element:a
											message threads
											describes how messages knit together.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Related Articles
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:a
								Tutorial by Beep Boop (beepboophq.com)
							Element:span
								Lessons learned building Beep Boop's new Slack bot
							Element:li
							Element:a
								Slack platform blog (medium.com)
							Element:span
								Everything you ever wanted to know about unfurling but were afraid to ask /or/ How to make your site previews look amazing in Slack
							Element:li
							Element:a
								Sample code by Slack
							Element:span
								Learn how to make unfurls interactive with node.js and node-slack-sdk
						Node:
						(type) c
						(layer)2
							Element:footer
							Element:ul
							Element:li
								Using Slack
							Element:li
							Element:a
								Product
							Element:li
							Element:a
								Pricing
							Element:li
							Element:a
								Support
							Element:li
							Element:a
								Slack Guides
							Element:li
							Element:a
								Video Guides
							Element:li
							Element:a
								App Directory
							Element:li
							Element:a
								API
							Element:ul
							Element:li
								Slack
							Element:li
							Element:a
								Jobs
							Element:li
							Element:a
								Customers
							Element:li
							Element:a
								Developers
							Element:li
							Element:a
								Events
							Element:li
							Element:a
								Blog
							Element:li
							Element:a
								Podcast
							Element:li
							Element:a
								Slack Shop
							Element:ul
							Element:li
								Legal
							Element:li
							Element:a
								Privacy
							Element:li
							Element:a
								Security
							Element:li
							Element:a
								Terms of Service
							Element:li
							Element:a
								Policies
							Element:ul
							Element:li
								Handy Links
							Element:li
							Element:a
								Download desktop app
							Element:li
							Element:a
								Download mobile app
							Element:li
							Element:a
								Brand Guidelines
							Element:li
							Element:a
								Slack at Work
							Element:li
							Element:a
								Status
							Element:a
							Element:ul
							Element:li
							Element:a
								Contact Us
							Element:li
							Element:a
							Element:li
							Element:a
