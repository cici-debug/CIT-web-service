Node:
(type) c
(layer)0
	Element:body
						Node:
						(type) h2
						(layer)2
							Element:h2
							Element:a
								Store
							Element:a
								edit
						Node:
						(type) c
						(layer)2
							Element:p
								The store module allows you to control how index data is stored and accessed on disk.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											File system storage types
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											There are different file system implementations or
										Element:span
											. By default, elasticsearch will pick the best implementation based on the operating environment.
										Element:em
											storage types
									Node:
									(type) c
									(layer)3
										Element:p
											This can be overridden for all indices by adding this to the
										Element:code
											config/elasticsearch.yml
											file:
									Node:
									(type) c
									(layer)3
										Element:pre
											index.store.type: niofs
									Node:
									(type) c
									(layer)3
										Element:p
											It is a
										Element:span
											setting that can be set on a per-index basis at index creation time:
										Element:em
											static
									Node:
									(type) c
									(layer)3
										Element:pre
											PUT /my_index { "settings": { "index.store.type": "niofs" } }
									Node:
									(type) c
									(layer)3
										Element:img
											This is an expert-only setting and may be removed in the future
									Node:
									(type) c
									(layer)3
										Element:p
											The following sections lists all the different storage types supported.
									Node:
									(type) c
									(layer)3
										Element:dl
										Element:dt
										Element:span
										Element:code
											fs
										Element:dd
											Default file system implementation. This will pick the best implementation depending on the operating environment:
										Element:code
											simplefs
											on Windows 32bit,
										Element:code
											niofs
											on other 32bit systems and
										Element:code
											mmapfs
											on 64bit systems.
										Element:dt
										Element:span
										Element:a
										Element:code
											simplefs
										Element:dd
											The Simple FS type is a straightforward implementation of file system storage (maps to Lucene
										Element:code
											SimpleFsDirectory
											) using a random access file. This implementation has poor concurrent performance (multiple threads will bottleneck). It is usually better to use the
										Element:code
											niofs
											when you need index persistence.
										Element:dt
										Element:span
										Element:a
										Element:code
											niofs
										Element:dd
											The NIO FS type stores the shard index on the file system (maps to Lucene
										Element:code
											NIOFSDirectory
											) using NIO. It allows multiple threads to read from the same file concurrently. It is not recommended on Windows because of a bug in the SUN Java implementation.
										Element:dt
										Element:span
										Element:a
										Element:code
											mmapfs
										Element:dd
											The MMap FS type stores the shard index on the file system (maps to Lucene
										Element:code
											MMapDirectory
											) by mapping a file into memory (mmap). Memory mapping uses up a portion of the virtual memory address space in your process equal to the size of the file being mapped. Before using this class, be sure you have allowed plenty of
										Element:a
											virtual address space
											.
										Element:dt
										Element:span
										Element:a
										Element:code
											default_fs
										Element:span
											[
										Element:span
											5.0.0
											]
										Element:span
											Deprecated in 5.0.0. The
										Element:code
											default_fs
											store type is deprecated - use
										Element:code
											fs
											instead
										Element:dd
											The
										Element:code
											default
											type is deprecated and is aliased to
										Element:code
											fs
											for backward compatibility.
									Node:
									(type) c
									(layer)3
										Element:span
										Element:a
											« Slow Log
									Node:
									(type) c
									(layer)3
										Element:span
										Element:a
											Pre-loading data into the file system cache »
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Top Videos
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:a
											Elasticsearch Demo
										Element:li
										Element:a
											Kibana 101
										Element:li
										Element:a
											Logstash Primer
									Node:
									(type) c
									(layer)3
															Node:
															(type) c
															(layer)5
																Element:h5
																	Be in the know with the latest and greatest from Elastic.
															Node:
															(type) c
															(layer)5
																Element:p
																	Thanks for subscribing! We'll keep you updated with new releases.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:footer
										Element:h3
										Element:a
											Products >
										Element:ul
										Element:li
										Element:a
											Elasticsearch
										Element:li
										Element:a
											Kibana
										Element:li
										Element:a
											Beats
										Element:li
										Element:a
											Logstash
										Element:li
										Element:a
											X-Pack
										Element:li
										Element:a
											Elastic Cloud
										Element:li
										Element:a
											Security (formerly Shield)
										Element:li
										Element:a
											Alerting (via Watcher)
										Element:li
										Element:a
											Monitoring (formerly Marvel)
										Element:li
										Element:a
											Graph
										Element:li
										Element:a
											Reporting
										Element:li
										Element:a
											Machine Learning
										Element:li
										Element:a
											ES-Hadoop
										Element:h3
											Resources
										Element:ul
										Element:li
										Element:a
											Blog
										Element:li
										Element:a
											Cloud Status
										Element:li
										Element:a
											Community
										Element:li
										Element:a
											Customers & Use Cases
										Element:li
										Element:a
											Documentation
										Element:li
										Element:a
											Elastic{ON} Events
										Element:li
										Element:a
											Forums
										Element:li
										Element:a
											Meetups
										Element:li
										Element:a
											Subscriptions
										Element:li
										Element:a
											Support Portal
										Element:li
										Element:a
											Videos & Webinars
										Element:li
										Element:a
											Training
										Element:h3
										Element:a
											About >
										Element:ul
										Element:li
										Element:a
											Careers/Jobs
										Element:li
										Element:a
											Contact
										Element:li
										Element:a
											Leadership
										Element:li
										Element:a
											Partners
										Element:li
										Element:a
											Press
										Element:h3
											Language
										Element:ul
										Element:li
										Element:a
											English
										Element:li
										Element:a
											Français
										Element:li
										Element:a
											Deutsch
										Element:li
										Element:a
											日本語
										Element:li
										Element:a
											한국어
										Element:p
											FOLLOW US
										Element:ul
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:ul
										Element:li
										Element:a
											Trademarks
										Element:li
										Element:a
											Terms of Use
										Element:li
										Element:a
											Privacy
										Element:li
										Element:a
											Cookie Policy
										Element:li
										Element:a
											Brand
										Element:a
										Element:img
										Element:p
											© 2017. All Rights Reserved - Elasticsearch
										Element:p
											Elasticsearch is a trademark of Elasticsearch BV, registered in the U.S. and in other countries
										Element:p
											Apache, Apache Lucene, Apache Hadoop, Hadoop, HDFS and the yellow elephant logo are trademarks of the
										Element:a
											Apache Software Foundation
											in the United States and/or other countries.
