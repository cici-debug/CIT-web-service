Node:
(type) c
(layer)0
	Element:body
						Node:
						(type) h2
						(layer)2
							Element:h2
							Element:a
								Delete API
							Element:a
								edit
						Node:
						(type) c
						(layer)2
							Element:p
								The delete API allows to delete a typed JSON document from a specific index based on its id. The following example deletes the JSON document from an index called twitter, under a type called tweet, with id valued 1:
						Node:
						(type) c
						(layer)2
							Element:pre
								$ curl -XDELETE 'http://localhost:9200/twitter/tweet/1'
						Node:
						(type) c
						(layer)2
							Element:p
								The result of the above delete operation is:
						Node:
						(type) c
						(layer)2
							Element:pre
								{ "_shards" : { "total" : 10, "failed" : 0, "successful" : 10 }, "found" : true, "_index" : "twitter", "_type" : "tweet", "_id" : "1", "_version" : 2, "result": "deleted" }
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Versioning
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											Each document indexed is versioned. When deleting a document, the
										Element:code
											version
											can be specified to make sure the relevant document we are trying to delete is actually being deleted and it has not changed in the meantime. Every write operation executed on a document, deletes included, causes its version to be incremented.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Routing
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											When indexing using the ability to control the routing, in order to delete a document, the routing value should also be provided. For example:
									Node:
									(type) c
									(layer)3
										Element:pre
											$ curl -XDELETE 'http://localhost:9200/twitter/tweet/1?routing=kimchy'
									Node:
									(type) c
									(layer)3
										Element:p
											The above will delete a tweet with id 1, but will be routed based on the user. Note, issuing a delete without the correct routing, will cause the document to not be deleted.
									Node:
									(type) c
									(layer)3
										Element:p
											When the
										Element:code
											_routing
											mapping is set as
										Element:code
											required
											and no routing value is specified, the delete api will throw a
										Element:code
											RoutingMissingException
											and reject the request.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Parent
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											The
										Element:code
											parent
											parameter can be set, which will basically be the same as setting the routing parameter.
									Node:
									(type) c
									(layer)3
										Element:p
											Note that deleting a parent document does not automatically delete its children. One way of deleting all child documents given a parent’s id is to use the
										Element:a
											Delete By Query API
											to perform a index with the automatically generated (and indexed) field _parent, which is in the format parent_type#parent_id.
									Node:
									(type) c
									(layer)3
										Element:p
											When deleting a child document its parent id must be specified, otherwise the delete request will be rejected and a
										Element:code
											RoutingMissingException
											will be thrown instead.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Automatic index creation
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											The delete operation automatically creates an index if it has not been created before (check out the
										Element:a
											create index API
											for manually creating an index), and also automatically creates a dynamic type mapping for the specific type if it has not been created before (check out the
										Element:a
											put mapping
											API for manually creating type mapping).
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Distributed
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											The delete operation gets hashed into a specific shard id. It then gets redirected into the primary shard within that id group, and replicated (if needed) to shard replicas within that id group.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Wait For Active Shards
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											When making delete requests, you can set the
										Element:code
											wait_for_active_shards
											parameter to require a minimum number of shard copies to be active before starting to process the delete request. See
										Element:a
											here
											for further details and a usage example.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Refresh
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											Control when the changes made by this request are visible to search. See
										Element:a
											.
										Element:em
										Element:code
											?refresh
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Timeout
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											The primary shard assigned to perform the delete operation might not be available when the delete operation is executed. Some reasons for this might be that the primary shard is currently recovering from a store or undergoing relocation. By default, the delete operation will wait on the primary shard to become available for up to 1 minute before failing and responding with an error. The
										Element:code
											timeout
											parameter can be used to explicitly specify how long it waits. Here is an example of setting it to 5 minutes:
									Node:
									(type) c
									(layer)3
										Element:pre
											$ curl -XDELETE 'http://localhost:9200/twitter/tweet/1?timeout=5m'
									Node:
									(type) c
									(layer)3
										Element:span
										Element:a
											« Get API
									Node:
									(type) c
									(layer)3
										Element:span
										Element:a
											Delete By Query API »
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Top Videos
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:a
											Elasticsearch Demo
										Element:li
										Element:a
											Kibana 101
										Element:li
										Element:a
											Logstash Primer
									Node:
									(type) c
									(layer)3
															Node:
															(type) c
															(layer)5
																Element:h5
																	Be in the know with the latest and greatest from Elastic.
															Node:
															(type) c
															(layer)5
																Element:p
																	Thanks for subscribing! We'll keep you updated with new releases.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:footer
										Element:h3
										Element:a
											Products >
										Element:ul
										Element:li
										Element:a
											Elasticsearch
										Element:li
										Element:a
											Kibana
										Element:li
										Element:a
											Beats
										Element:li
										Element:a
											Logstash
										Element:li
										Element:a
											X-Pack
										Element:li
										Element:a
											Elastic Cloud
										Element:li
										Element:a
											Security (formerly Shield)
										Element:li
										Element:a
											Alerting (via Watcher)
										Element:li
										Element:a
											Monitoring (formerly Marvel)
										Element:li
										Element:a
											Graph
										Element:li
										Element:a
											Reporting
										Element:li
										Element:a
											Machine Learning
										Element:li
										Element:a
											ES-Hadoop
										Element:h3
											Resources
										Element:ul
										Element:li
										Element:a
											Blog
										Element:li
										Element:a
											Cloud Status
										Element:li
										Element:a
											Community
										Element:li
										Element:a
											Customers & Use Cases
										Element:li
										Element:a
											Documentation
										Element:li
										Element:a
											Elastic{ON} Events
										Element:li
										Element:a
											Forums
										Element:li
										Element:a
											Meetups
										Element:li
										Element:a
											Subscriptions
										Element:li
										Element:a
											Support Portal
										Element:li
										Element:a
											Videos & Webinars
										Element:li
										Element:a
											Training
										Element:h3
										Element:a
											About >
										Element:ul
										Element:li
										Element:a
											Careers/Jobs
										Element:li
										Element:a
											Contact
										Element:li
										Element:a
											Leadership
										Element:li
										Element:a
											Partners
										Element:li
										Element:a
											Press
										Element:h3
											Language
										Element:ul
										Element:li
										Element:a
											English
										Element:li
										Element:a
											Français
										Element:li
										Element:a
											Deutsch
										Element:li
										Element:a
											日本語
										Element:li
										Element:a
											한국어
										Element:p
											FOLLOW US
										Element:ul
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:ul
										Element:li
										Element:a
											Trademarks
										Element:li
										Element:a
											Terms of Use
										Element:li
										Element:a
											Privacy
										Element:li
										Element:a
											Cookie Policy
										Element:li
										Element:a
											Brand
										Element:a
										Element:img
										Element:p
											© 2017. All Rights Reserved - Elasticsearch
										Element:p
											Elasticsearch is a trademark of Elasticsearch BV, registered in the U.S. and in other countries
										Element:p
											Apache, Apache Lucene, Apache Hadoop, Hadoop, HDFS and the yellow elephant logo are trademarks of the
										Element:a
											Apache Software Foundation
											in the United States and/or other countries.
