Node:
(type) c
(layer)0
	Element:body
						Node:
						(type) h2
						(layer)2
							Element:h2
							Element:a
								Index Templates
							Element:a
								edit
						Node:
						(type) c
						(layer)2
							Element:p
								Index templates allow you to define templates that will automatically be applied when new indices are created. The templates include both settings and mappings, and a simple pattern template that controls whether the template should be applied to the new index.
						Node:
						(type) c
						(layer)2
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
								Templates are only applied at index creation time. Changing a template will have no impact on existing indices.
						Node:
						(type) c
						(layer)2
							Element:p
								For example:
						Node:
						(type) c
						(layer)2
							Element:pre
								PUT _template/template_1 { "template": "te*", "settings": { "number_of_shards": 1 }, "mappings": { "type1": { "_source": { "enabled": false }, "properties": { "host_name": { "type": "keyword" }, "created_at": { "type": "date", "format": "EEE MMM dd HH:mm:ss Z YYYY" } } } } }
						Node:
						(type) c
						(layer)2
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
								Index templates provide C-style /* */ block comments. Comments are allowed everywhere in the JSON document except before the initial opening curly bracket.
						Node:
						(type) c
						(layer)2
							Element:p
								Defines a template named
							Element:code
								template_1
								, with a template pattern of
							Element:code
								te*
								. The settings and mappings will be applied to any index name that matches the
							Element:code
								te*
								pattern.
						Node:
						(type) c
						(layer)2
							Element:p
								It is also possible to include aliases in an index template as follows:
						Node:
						(type) c
						(layer)2
							Element:pre
								PUT _template/template_1 { "template" : "te*", "settings" : { "number_of_shards" : 1 }, "aliases" : { "alias1" : {}, "alias2" : { "filter" : { "term" : {"user" : "kimchy" } }, "routing" : "kimchy" }, "{index}-alias" : {}
							Element:a
							Element:span
								} }
							Element:img
						Node:
						(type) c
						(layer)2
							Element:table
							Element:tr
							Element:td
							Element:p
							Element:a
							Element:span
							Element:img
							Element:td
							Element:p
								the
							Element:code
								{index}
								placeholder in the alias name will be replaced with the actual index name that the template gets applied to, during index creation.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Deleting a Template
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											Index templates are identified by a name (in the above case
										Element:code
											template_1
											) and can be deleted as well:
									Node:
									(type) c
									(layer)3
										Element:pre
											DELETE /_template/template_1
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Getting templates
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											Index templates are identified by a name (in the above case
										Element:code
											template_1
											) and can be retrieved using the following:
									Node:
									(type) c
									(layer)3
										Element:pre
											GET /_template/template_1
									Node:
									(type) c
									(layer)3
										Element:p
											You can also match several templates by using wildcards like:
									Node:
									(type) c
									(layer)3
										Element:pre
											GET /_template/temp* GET /_template/template_1,template_2
									Node:
									(type) c
									(layer)3
										Element:p
											To get list of all index templates you can run:
									Node:
									(type) c
									(layer)3
										Element:pre
											GET /_template
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Template exists
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											Used to check if the template exists or not. For example:
									Node:
									(type) c
									(layer)3
										Element:pre
											HEAD _template/template_1
									Node:
									(type) c
									(layer)3
										Element:p
											The HTTP status code indicates if the template with the given name exists or not. Status code
										Element:code
											200
											means it exists and
										Element:code
											404
											means it does not.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Multiple Templates Matching
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											Multiple index templates can potentially match an index, in this case, both the settings and mappings are merged into the final configuration of the index. The order of the merging can be controlled using the
										Element:code
											order
											parameter, with lower order being applied first, and higher orders overriding them. For example:
									Node:
									(type) c
									(layer)3
										Element:pre
											PUT /_template/template_1 { "template" : "*", "order" : 0, "settings" : { "number_of_shards" : 1 }, "mappings" : { "type1" : { "_source" : { "enabled" : false } } } } PUT /_template/template_2 { "template" : "te*", "order" : 1, "settings" : { "number_of_shards" : 1 }, "mappings" : { "type1" : { "_source" : { "enabled" : true } } } }
									Node:
									(type) c
									(layer)3
										Element:p
											The above will disable storing the
										Element:code
											_source
											on all
										Element:code
											type1
											types, but for indices that start with
										Element:code
											te*
											,
										Element:code
											_source
											will still be enabled. Note, for mappings, the merging is "deep", meaning that specific object/property based mappings can easily be added/overridden on higher order templates, with lower order templates providing the basis.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Template Versioning
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											Templates can optionally add a
										Element:code
											version
											number, which can be any integer value, in order to simplify template management by external systems. The
										Element:code
											version
											field is completely optional and it is meant solely for external management of templates. To unset a
										Element:code
											version
											, simply replace the template without specifying one.
									Node:
									(type) c
									(layer)3
										Element:pre
											PUT /_template/template_1 { "template" : "*", "order" : 0, "settings" : { "number_of_shards" : 1 }, "version": 123 }
									Node:
									(type) c
									(layer)3
										Element:p
											To check the
										Element:code
											version
											, you can
										Element:a
											filter responses
											using
										Element:code
											filter_path
											to limit the response to just the
										Element:code
											version
											:
									Node:
									(type) c
									(layer)3
										Element:pre
											GET /_template/template_1?filter_path=*.version
									Node:
									(type) c
									(layer)3
										Element:p
											This should give a small response that makes it both easy and inexpensive to parse:
									Node:
									(type) c
									(layer)3
										Element:pre
											{ "template_1" : { "version" : 123 } }
									Node:
									(type) c
									(layer)3
										Element:span
										Element:a
											« Explain Analyze
									Node:
									(type) c
									(layer)3
										Element:span
										Element:a
											Shadow replica indices »
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Top Videos
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:a
											Elasticsearch Demo
										Element:li
										Element:a
											Kibana 101
										Element:li
										Element:a
											Logstash Primer
									Node:
									(type) c
									(layer)3
															Node:
															(type) c
															(layer)5
																Element:h5
																	Be in the know with the latest and greatest from Elastic.
															Node:
															(type) c
															(layer)5
																Element:p
																	Thanks for subscribing! We'll keep you updated with new releases.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:footer
										Element:h3
										Element:a
											Products >
										Element:ul
										Element:li
										Element:a
											Elasticsearch
										Element:li
										Element:a
											Kibana
										Element:li
										Element:a
											Beats
										Element:li
										Element:a
											Logstash
										Element:li
										Element:a
											X-Pack
										Element:li
										Element:a
											Elastic Cloud
										Element:li
										Element:a
											Security (formerly Shield)
										Element:li
										Element:a
											Alerting (via Watcher)
										Element:li
										Element:a
											Monitoring (formerly Marvel)
										Element:li
										Element:a
											Graph
										Element:li
										Element:a
											Reporting
										Element:li
										Element:a
											Machine Learning
										Element:li
										Element:a
											ES-Hadoop
										Element:h3
											Resources
										Element:ul
										Element:li
										Element:a
											Blog
										Element:li
										Element:a
											Cloud Status
										Element:li
										Element:a
											Community
										Element:li
										Element:a
											Customers & Use Cases
										Element:li
										Element:a
											Documentation
										Element:li
										Element:a
											Elastic{ON} Events
										Element:li
										Element:a
											Forums
										Element:li
										Element:a
											Meetups
										Element:li
										Element:a
											Subscriptions
										Element:li
										Element:a
											Support Portal
										Element:li
										Element:a
											Videos & Webinars
										Element:li
										Element:a
											Training
										Element:h3
										Element:a
											About >
										Element:ul
										Element:li
										Element:a
											Careers/Jobs
										Element:li
										Element:a
											Contact
										Element:li
										Element:a
											Leadership
										Element:li
										Element:a
											Partners
										Element:li
										Element:a
											Press
										Element:h3
											Language
										Element:ul
										Element:li
										Element:a
											English
										Element:li
										Element:a
											Français
										Element:li
										Element:a
											Deutsch
										Element:li
										Element:a
											日本語
										Element:li
										Element:a
											한국어
										Element:p
											FOLLOW US
										Element:ul
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:ul
										Element:li
										Element:a
											Trademarks
										Element:li
										Element:a
											Terms of Use
										Element:li
										Element:a
											Privacy
										Element:li
										Element:a
											Cookie Policy
										Element:li
										Element:a
											Brand
										Element:a
										Element:img
										Element:p
											© 2017. All Rights Reserved - Elasticsearch
										Element:p
											Elasticsearch is a trademark of Elasticsearch BV, registered in the U.S. and in other countries
										Element:p
											Apache, Apache Lucene, Apache Hadoop, Hadoop, HDFS and the yellow elephant logo are trademarks of the
										Element:a
											Apache Software Foundation
											in the United States and/or other countries.
