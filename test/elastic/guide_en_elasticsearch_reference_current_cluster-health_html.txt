Node:
(type) c
(layer)0
	Element:body
						Node:
						(type) h2
						(layer)2
							Element:h2
							Element:a
								Cluster Health
							Element:a
								edit
						Node:
						(type) c
						(layer)2
							Element:p
								The cluster health API allows to get a very simple status on the health of the cluster. For example, on a quiet single node cluster with a single index with 5 shards and one replica, this:
						Node:
						(type) c
						(layer)2
							Element:pre
								GET _cluster/health
						Node:
						(type) c
						(layer)2
							Element:p
								Returns this:
						Node:
						(type) c
						(layer)2
							Element:pre
								{ "cluster_name" : "testcluster", "status" : "yellow", "timed_out" : false, "number_of_nodes" : 1, "number_of_data_nodes" : 1, "active_primary_shards" : 5, "active_shards" : 5, "relocating_shards" : 0, "initializing_shards" : 0, "unassigned_shards" : 5, "delayed_unassigned_shards": 0, "number_of_pending_tasks" : 0, "number_of_in_flight_fetch": 0, "task_max_waiting_in_queue_millis": 0, "active_shards_percent_as_number": 50.0 }
						Node:
						(type) c
						(layer)2
							Element:p
								The API can also be executed against one or more indices to get just the specified indices health:
						Node:
						(type) c
						(layer)2
							Element:pre
								GET /_cluster/health/test1,test2
						Node:
						(type) c
						(layer)2
							Element:p
								The cluster health status is:
							Element:code
								green
								,
							Element:code
								yellow
								or
							Element:code
								red
								. On the shard level, a
							Element:code
								red
								status indicates that the specific shard is not allocated in the cluster,
							Element:code
								yellow
								means that the primary shard is allocated but replicas are not, and
							Element:code
								green
								means that all shards are allocated. The index level status is controlled by the worst shard status. The cluster status is controlled by the worst index status.
						Node:
						(type) c
						(layer)2
							Element:p
								One of the main benefits of the API is the ability to wait until the cluster reaches a certain high water-mark health level. For example, the following will wait for 50 seconds for the cluster to reach the
							Element:code
								yellow
								level (if it reaches the
							Element:code
								green
								or
							Element:code
								yellow
								status before 50 seconds elapse, it will return at that point):
						Node:
						(type) c
						(layer)2
							Element:pre
								GET /_cluster/health?wait_for_status=yellow&timeout=50s
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Request Parameters
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											The cluster health API accepts the following request parameters:
									Node:
									(type) c
									(layer)3
										Element:dl
										Element:dt
										Element:span
										Element:code
											level
										Element:dd
											Can be one of
										Element:code
											cluster
											,
										Element:code
											indices
											or
										Element:code
											shards
											. Controls the details level of the health information returned. Defaults to
										Element:code
											cluster
											.
										Element:dt
										Element:span
										Element:code
											wait_for_status
										Element:dd
											One of
										Element:code
											green
											,
										Element:code
											yellow
											or
										Element:code
											red
											. Will wait (until the timeout provided) until the status of the cluster changes to the one provided or better, i.e.
										Element:code
											green
											>
										Element:code
											yellow
											>
										Element:code
											red
											. By default, will not wait for any status.
										Element:dt
										Element:span
										Element:code
											wait_for_no_relocating_shards
										Element:dd
											A boolean value which controls whether to wait (until the timeout provided) for the cluster to have no shard relocations. Defaults to false, which means it will not wait for relocating shards.
										Element:dt
										Element:span
										Element:code
											wait_for_active_shards
										Element:dd
											A number controlling to how many active shards to wait for,
										Element:code
											all
											to wait for all shards in the cluster to be active, or
										Element:code
											0
											to not wait. Defaults to
										Element:code
											0
											.
										Element:dt
										Element:span
										Element:code
											wait_for_nodes
										Element:dd
											The request waits until the specified number
										Element:code
											N
											of nodes is available. It also accepts
										Element:code
											>=N
											,
										Element:code
											<=N
											,
										Element:code
											>N
											and
										Element:code
											<N
											. Alternatively, it is possible to use
										Element:code
											ge(N)
											,
										Element:code
											le(N)
											,
										Element:code
											gt(N)
											and
										Element:code
											lt(N)
											notation.
										Element:dt
										Element:span
										Element:code
											timeout
										Element:dd
											A time based parameter controlling how long to wait if one of the wait_for_XXX are provided. Defaults to
										Element:code
											30s
											.
										Element:dt
										Element:span
										Element:code
											local
										Element:dd
											If
										Element:code
											true
											returns the local node information and does not provide the state from master node. Default:
										Element:code
											false
											.
									Node:
									(type) c
									(layer)3
										Element:p
											The following is an example of getting the cluster health at the
										Element:code
											shards
											level:
									Node:
									(type) c
									(layer)3
										Element:pre
											GET /_cluster/health/twitter?level=shards
									Node:
									(type) c
									(layer)3
										Element:span
										Element:a
											« Cluster APIs
									Node:
									(type) c
									(layer)3
										Element:span
										Element:a
											Cluster State »
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Top Videos
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:a
											Elasticsearch Demo
										Element:li
										Element:a
											Kibana 101
										Element:li
										Element:a
											Logstash Primer
									Node:
									(type) c
									(layer)3
															Node:
															(type) c
															(layer)5
																Element:h5
																	Be in the know with the latest and greatest from Elastic.
															Node:
															(type) c
															(layer)5
																Element:p
																	Thanks for subscribing! We'll keep you updated with new releases.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:footer
										Element:h3
										Element:a
											Products >
										Element:ul
										Element:li
										Element:a
											Elasticsearch
										Element:li
										Element:a
											Kibana
										Element:li
										Element:a
											Beats
										Element:li
										Element:a
											Logstash
										Element:li
										Element:a
											X-Pack
										Element:li
										Element:a
											Elastic Cloud
										Element:li
										Element:a
											Security (formerly Shield)
										Element:li
										Element:a
											Alerting (via Watcher)
										Element:li
										Element:a
											Monitoring (formerly Marvel)
										Element:li
										Element:a
											Graph
										Element:li
										Element:a
											Reporting
										Element:li
										Element:a
											Machine Learning
										Element:li
										Element:a
											ES-Hadoop
										Element:h3
											Resources
										Element:ul
										Element:li
										Element:a
											Blog
										Element:li
										Element:a
											Cloud Status
										Element:li
										Element:a
											Community
										Element:li
										Element:a
											Customers & Use Cases
										Element:li
										Element:a
											Documentation
										Element:li
										Element:a
											Elastic{ON} Events
										Element:li
										Element:a
											Forums
										Element:li
										Element:a
											Meetups
										Element:li
										Element:a
											Subscriptions
										Element:li
										Element:a
											Support Portal
										Element:li
										Element:a
											Videos & Webinars
										Element:li
										Element:a
											Training
										Element:h3
										Element:a
											About >
										Element:ul
										Element:li
										Element:a
											Careers/Jobs
										Element:li
										Element:a
											Contact
										Element:li
										Element:a
											Leadership
										Element:li
										Element:a
											Partners
										Element:li
										Element:a
											Press
										Element:h3
											Language
										Element:ul
										Element:li
										Element:a
											English
										Element:li
										Element:a
											Français
										Element:li
										Element:a
											Deutsch
										Element:li
										Element:a
											日本語
										Element:li
										Element:a
											한국어
										Element:p
											FOLLOW US
										Element:ul
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:ul
										Element:li
										Element:a
											Trademarks
										Element:li
										Element:a
											Terms of Use
										Element:li
										Element:a
											Privacy
										Element:li
										Element:a
											Cookie Policy
										Element:li
										Element:a
											Brand
										Element:a
										Element:img
										Element:p
											© 2017. All Rights Reserved - Elasticsearch
										Element:p
											Elasticsearch is a trademark of Elasticsearch BV, registered in the U.S. and in other countries
										Element:p
											Apache, Apache Lucene, Apache Hadoop, Hadoop, HDFS and the yellow elephant logo are trademarks of the
										Element:a
											Apache Software Foundation
											in the United States and/or other countries.
