Node:
(type) c
(layer)0
	Element:body
						Node:
						(type) h2
						(layer)2
							Element:h2
							Element:a
								integration tests
							Element:a
								edit
						Node:
						(type) c
						(layer)2
							Element:p
								These kind of tests require firing up a whole cluster of nodes, before the tests can actually be run. Compared to unit tests they are obviously way more time consuming, but the test infrastructure tries to minimize the time cost by only restarting the whole cluster, if this is configured explicitly.
						Node:
						(type) c
						(layer)2
							Element:p
								The class your tests have to inherit from is
							Element:code
								ESIntegTestCase
								. By inheriting from this class, you will no longer need to start elasticsearch nodes manually in your test, although you might need to ensure that at least a certain number of nodes are up. The integration test behaviour can be configured heavily by specifying different system properties on test runs. See the
							Element:code
								TESTING.asciidoc
								documentation in the
							Element:a
								source repository
								for more information.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											number of shards
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											The number of shards used for indices created during integration tests is randomized between
										Element:code
											1
											and
										Element:code
											10
											unless overwritten upon index creation via index settings. The rule of thumb is not to specify the number of shards unless needed, so that each test will use a different one all the time. Alternatively you can override the
										Element:code
											numberOfShards()
											method. The same applies to the
										Element:code
											numberOfReplicas()
											method.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											generic helper methods
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											There are a couple of helper methods in
										Element:code
											ESIntegTestCase
											, which will make your tests shorter and more concise.
									Node:
									(type) c
									(layer)3
										Element:table
										Element:colgroup
										Element:col
										Element:col
										Element:tbody
										Element:tr
										Element:td
										Element:p
										Element:code
											refresh()
										Element:td
										Element:p
											Refreshes all indices in a cluster
										Element:tr
										Element:td
										Element:p
										Element:code
											ensureGreen()
										Element:td
										Element:p
											Ensures a green health cluster state, waiting for relocations. Waits the default timeout of 30 seconds before failing.
										Element:tr
										Element:td
										Element:p
										Element:code
											ensureYellow()
										Element:td
										Element:p
											Ensures a yellow health cluster state, also waits for 30 seconds before failing.
										Element:tr
										Element:td
										Element:p
										Element:code
											createIndex(name)
										Element:td
										Element:p
											Creates an index with the specified name
										Element:tr
										Element:td
										Element:p
										Element:code
											flush()
										Element:td
										Element:p
											Flushes all indices in a cluster
										Element:tr
										Element:td
										Element:p
										Element:code
											flushAndRefresh()
										Element:td
										Element:p
											Combines
										Element:code
											flush()
											and
										Element:code
											refresh()
											calls
										Element:tr
										Element:td
										Element:p
										Element:code
											forceMerge()
										Element:td
										Element:p
											Waits for all relocations and force merges all indices in the cluster to one segment.
										Element:tr
										Element:td
										Element:p
										Element:code
											indexExists(name)
										Element:td
										Element:p
											Checks if given index exists
										Element:tr
										Element:td
										Element:p
										Element:code
											admin()
										Element:td
										Element:p
											Returns an
										Element:code
											AdminClient
											for administrative tasks
										Element:tr
										Element:td
										Element:p
										Element:code
											clusterService()
										Element:td
										Element:p
											Returns the cluster service java class
										Element:tr
										Element:td
										Element:p
										Element:code
											cluster()
										Element:td
										Element:p
											Returns the test cluster class, which is explained in the next paragraphs
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											test cluster methods
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											The
										Element:code
											InternalTestCluster
											class is the heart of the cluster functionality in a randomized test and allows you to configure a specific setting or replay certain types of outages to check, how your custom code reacts.
									Node:
									(type) c
									(layer)3
										Element:table
										Element:colgroup
										Element:col
										Element:col
										Element:tbody
										Element:tr
										Element:td
										Element:p
										Element:code
											ensureAtLeastNumNodes(n)
										Element:td
										Element:p
											Ensure at least the specified number of nodes is running in the cluster
										Element:tr
										Element:td
										Element:p
										Element:code
											ensureAtMostNumNodes(n)
										Element:td
										Element:p
											Ensure at most the specified number of nodes is running in the cluster
										Element:tr
										Element:td
										Element:p
										Element:code
											getInstance()
										Element:td
										Element:p
											Get a guice instantiated instance of a class from a random node
										Element:tr
										Element:td
										Element:p
										Element:code
											getInstanceFromNode()
										Element:td
										Element:p
											Get a guice instantiated instance of a class from a specified node
										Element:tr
										Element:td
										Element:p
										Element:code
											stopRandomNode()
										Element:td
										Element:p
											Stop a random node in your cluster to mimic an outage
										Element:tr
										Element:td
										Element:p
										Element:code
											stopCurrentMasterNode()
										Element:td
										Element:p
											Stop the current master node to force a new election
										Element:tr
										Element:td
										Element:p
										Element:code
											stopRandomNonMaster()
										Element:td
										Element:p
											Stop a random non master node to mimic an outage
										Element:tr
										Element:td
										Element:p
										Element:code
											buildNode()
										Element:td
										Element:p
											Create a new elasticsearch node
										Element:tr
										Element:td
										Element:p
										Element:code
											startNode(settings)
										Element:td
										Element:p
											Create and start a new elasticsearch node
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Changing node settings
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											If you want to ensure a certain configuration for the nodes, which are started as part of the
										Element:code
											EsIntegTestCase
											, you can override the
										Element:code
											nodeSettings()
											method
									Node:
									(type) c
									(layer)3
										Element:pre
											public class Mytests extends ESIntegTestCase { @Override protected Settings nodeSettings(int nodeOrdinal) { return Settings.builder().put(super.nodeSettings(nodeOrdinal)) .put("node.mode", "network") .build(); } }
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Accessing clients
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											In order to execute any actions, you have to use a client. You can use the
										Element:code
											ESIntegTestCase.client()
											method to get back a random client. This client can be a
										Element:code
											TransportClient
											or a
										Element:code
											NodeClient
											- and usually you do not need to care as long as the action gets executed. There are several more methods for client selection inside of the
										Element:code
											InternalTestCluster
											class, which can be accessed using the
										Element:code
											ESIntegTestCase.internalCluster()
											method.
									Node:
									(type) c
									(layer)3
										Element:table
										Element:colgroup
										Element:col
										Element:col
										Element:tbody
										Element:tr
										Element:td
										Element:p
										Element:code
											iterator()
										Element:td
										Element:p
											An iterator over all available clients
										Element:tr
										Element:td
										Element:p
										Element:code
											masterClient()
										Element:td
										Element:p
											Returns a client which is connected to the master node
										Element:tr
										Element:td
										Element:p
										Element:code
											nonMasterClient()
										Element:td
										Element:p
											Returns a client which is not connected to the master node
										Element:tr
										Element:td
										Element:p
										Element:code
											clientNodeClient()
										Element:td
										Element:p
											Returns a client, which is running on a client node
										Element:tr
										Element:td
										Element:p
										Element:code
											client(String nodeName)
										Element:td
										Element:p
											Returns a client to a given node
										Element:tr
										Element:td
										Element:p
										Element:code
											smartClient()
										Element:td
										Element:p
											Returns a smart client
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Scoping
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											By default the tests are run with unique cluster per test suite. Of course all indices and templates are deleted between each test. However, sometimes you need to start a new cluster for each test - for example, if you load a certain plugin, but you do not want to load it for every test.
									Node:
									(type) c
									(layer)3
										Element:p
											You can use the
										Element:code
											@ClusterScope
											annotation at class level to configure this behaviour
									Node:
									(type) c
									(layer)3
										Element:pre
											@ClusterScope(scope=TEST, numDataNodes=1) public class CustomSuggesterSearchTests extends ESIntegTestCase { // ... tests go here }
									Node:
									(type) c
									(layer)3
										Element:p
											The above sample configures the test to use a new cluster for each test method. The default scope is
										Element:code
											SUITE
											(one cluster for all test methods in the test). The
										Element:code
											numDataNodes
											settings allows you to only start a certain number of data nodes, which can speed up test execution, as starting a new node is a costly and time consuming operation and might not be needed for this test.
									Node:
									(type) c
									(layer)3
										Element:p
											By default, the testing infrastructure will randomly start dedicated master nodes. If you want to disable dedicated masters you can set
										Element:code
											supportsDedicatedMasters=false
											in a similar fashion to the
										Element:code
											numDataNodes
											setting. If dedicated master nodes are not used, data nodes will be allowed to become masters as well.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Changing plugins via configuration
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											As elasticsearch is using JUnit 4, using the
										Element:code
											@Before
											and
										Element:code
											@After
											annotations is not a problem. However you should keep in mind, that this does not have any effect in your cluster setup, as the cluster is already up and running when those methods are run. So in case you want to configure settings - like loading a plugin on node startup - before the node is actually running, you should overwrite the
										Element:code
											nodePlugins()
											method from the
										Element:code
											ESIntegTestCase
											class and return the plugin classes each node should load.
									Node:
									(type) c
									(layer)3
										Element:pre
											@Override protected Collection<Class<? extends Plugin>> nodePlugins() { return pluginList(CustomSuggesterPlugin.class); }
									Node:
									(type) c
									(layer)3
										Element:span
										Element:a
											« unit tests
									Node:
									(type) c
									(layer)3
										Element:span
										Element:a
											Randomized testing »
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Top Videos
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:a
											Elasticsearch Demo
										Element:li
										Element:a
											Kibana 101
										Element:li
										Element:a
											Logstash Primer
									Node:
									(type) c
									(layer)3
															Node:
															(type) c
															(layer)5
																Element:h5
																	Be in the know with the latest and greatest from Elastic.
															Node:
															(type) c
															(layer)5
																Element:p
																	Thanks for subscribing! We'll keep you updated with new releases.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:footer
										Element:h3
										Element:a
											Products >
										Element:ul
										Element:li
										Element:a
											Elasticsearch
										Element:li
										Element:a
											Kibana
										Element:li
										Element:a
											Beats
										Element:li
										Element:a
											Logstash
										Element:li
										Element:a
											X-Pack
										Element:li
										Element:a
											Elastic Cloud
										Element:li
										Element:a
											Security (formerly Shield)
										Element:li
										Element:a
											Alerting (via Watcher)
										Element:li
										Element:a
											Monitoring (formerly Marvel)
										Element:li
										Element:a
											Graph
										Element:li
										Element:a
											Reporting
										Element:li
										Element:a
											Machine Learning
										Element:li
										Element:a
											ES-Hadoop
										Element:h3
											Resources
										Element:ul
										Element:li
										Element:a
											Blog
										Element:li
										Element:a
											Cloud Status
										Element:li
										Element:a
											Community
										Element:li
										Element:a
											Customers & Use Cases
										Element:li
										Element:a
											Documentation
										Element:li
										Element:a
											Elastic{ON} Events
										Element:li
										Element:a
											Forums
										Element:li
										Element:a
											Meetups
										Element:li
										Element:a
											Subscriptions
										Element:li
										Element:a
											Support Portal
										Element:li
										Element:a
											Videos & Webinars
										Element:li
										Element:a
											Training
										Element:h3
										Element:a
											About >
										Element:ul
										Element:li
										Element:a
											Careers/Jobs
										Element:li
										Element:a
											Contact
										Element:li
										Element:a
											Leadership
										Element:li
										Element:a
											Partners
										Element:li
										Element:a
											Press
										Element:h3
											Language
										Element:ul
										Element:li
										Element:a
											English
										Element:li
										Element:a
											Français
										Element:li
										Element:a
											Deutsch
										Element:li
										Element:a
											日本語
										Element:li
										Element:a
											한국어
										Element:p
											FOLLOW US
										Element:ul
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:ul
										Element:li
										Element:a
											Trademarks
										Element:li
										Element:a
											Terms of Use
										Element:li
										Element:a
											Privacy
										Element:li
										Element:a
											Cookie Policy
										Element:li
										Element:a
											Brand
										Element:a
										Element:img
										Element:p
											© 2017. All Rights Reserved - Elasticsearch
										Element:p
											Elasticsearch is a trademark of Elasticsearch BV, registered in the U.S. and in other countries
										Element:p
											Apache, Apache Lucene, Apache Hadoop, Hadoop, HDFS and the yellow elephant logo are trademarks of the
										Element:a
											Apache Software Foundation
											in the United States and/or other countries.
