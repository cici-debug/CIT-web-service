Node:
(type) c
(layer)0
	Element:body
						Node:
						(type) h2
						(layer)2
							Element:h2
							Element:a
							Element:code
								fielddata
							Element:a
								edit
						Node:
						(type) c
						(layer)2
							Element:p
								Most fields are
							Element:a
								indexed
								by default, which makes them searchable. Sorting, aggregations, and accessing field values in scripts, however, requires a different access pattern from search.
						Node:
						(type) c
						(layer)2
							Element:p
								Search needs to answer the question
							Element:span
								, while sorting and aggregations need to answer a different question:
							Element:em
								"Which documents contain this term?"
							Element:span
								.
							Element:em
								"What is the value of this field for
							Element:span
								document?"
							Element:strong
								this
						Node:
						(type) c
						(layer)2
							Element:p
								Most fields can use index-time, on-disk
							Element:a
								for this data access pattern, but
							Element:code
								doc_values
							Element:a
								fields do not support
							Element:code
								text
							Element:code
								doc_values
								.
						Node:
						(type) c
						(layer)2
							Element:p
								Instead,
							Element:code
								text
								fields use a query-time
							Element:span
								data structure called
							Element:strong
								in-memory
							Element:code
								fielddata
								. This data structure is built on demand the first time that a field is used for aggregations, sorting, or in a script. It is built by reading the entire inverted index for each segment from disk, inverting the term ↔︎ document relationship, and storing the result in memory, in the JVM heap.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Fielddata is disabled on
										Element:code
											text
											fields by default
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											Fielddata can consume a
										Element:span
											of heap space, especially when loading high cardinality
										Element:strong
											lot
										Element:code
											text
											fields. Once fielddata has been loaded into the heap, it remains there for the lifetime of the segment. Also, loading fielddata is an expensive process which can cause users to experience latency hits. This is why fielddata is disabled by default.
									Node:
									(type) c
									(layer)3
										Element:p
											If you try to sort, aggregate, or access values from a script on a
										Element:code
											text
											field, you will see this exception:
									Node:
									(type) c
									(layer)3
										Element:blockquote
										Element:p
											Fielddata is disabled on text fields by default. Set
										Element:code
											fielddata=true
											on [
										Element:code
											your_field_name
											] in order to load fielddata in memory by uninverting the inverted index. Note that this can however use significant memory.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Before enabling fielddata
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											Before you enable fielddata, consider why you are using a
										Element:code
											text
											field for aggregations, sorting, or in a script. It usually doesn’t make sense to do so.
									Node:
									(type) c
									(layer)3
										Element:p
											A text field is analyzed before indexing so that a value like
										Element:code
											New York
											can be found by searching for
										Element:code
											new
											or for
										Element:code
											york
											. A
										Element:code
											terms
											aggregation on this field will return a
										Element:code
											new
											bucket and a
										Element:code
											york
											bucket, when you probably want a single bucket called
										Element:code
											New York
											.
									Node:
									(type) c
									(layer)3
										Element:p
											Instead, you should have a
										Element:code
											text
											field for full text searches, and an unanalyzed
										Element:a
											field with
										Element:code
											keyword
										Element:a
											enabled for aggregations, as follows:
										Element:code
											doc_values
									Node:
									(type) c
									(layer)3
										Element:pre
											PUT my_index { "mappings": { "my_type": { "properties": { "my_field": {
										Element:a
										Element:span
											"type": "text", "fields": { "keyword": {
										Element:img
										Element:a
										Element:span
											"type": "keyword" } } } } } } }
										Element:img
									Node:
									(type) c
									(layer)3
										Element:table
										Element:tr
										Element:td
										Element:p
										Element:a
										Element:span
										Element:img
										Element:td
										Element:p
											Use the
										Element:code
											my_field
											field for searches.
										Element:tr
										Element:td
										Element:p
										Element:a
										Element:span
										Element:img
										Element:td
										Element:p
											Use the
										Element:code
											my_field.keyword
											field for aggregations, sorting, or in scripts.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Enabling fielddata on
										Element:code
											text
											fields
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											You can enable fielddata on an existing
										Element:code
											text
											field using the
										Element:a
											PUT mapping API
											as follows:
									Node:
									(type) c
									(layer)3
										Element:pre
											PUT my_index/_mapping/my_type { "properties": { "my_field": {
										Element:a
										Element:span
											"type": "text", "fielddata": true } } }
										Element:img
									Node:
									(type) c
									(layer)3
										Element:table
										Element:tr
										Element:td
										Element:p
										Element:a
										Element:span
										Element:img
										Element:td
										Element:p
											The mapping that you specify for
										Element:code
											my_field
											should consist of the existing mapping for that field, plus the
										Element:code
											fielddata
											parameter.
									Node:
									(type) c
									(layer)3
										Element:img
									Node:
									(type) c
									(layer)3
										Element:p
											The
										Element:code
											fielddata.*
											parameter must have the same settings for fields of the same name in the same index. Its value can be updated on existing fields using the
										Element:a
											PUT mapping API
											.
									Node:
									(type) c
									(layer)3
										Element:a
									Node:
									(type) c
									(layer)3
										Element:p
										Element:strong
											Global ordinals
									Node:
									(type) c
									(layer)3
										Element:p
											Global ordinals is a data-structure on top of fielddata and doc values, that maintains an incremental numbering for each unique term in a lexicographic order. Each term has a unique number and the number of term
										Element:span
											is lower than the number of term
										Element:em
											A
										Element:span
											. Global ordinals are only supported on
										Element:em
											B
										Element:a
											and
										Element:code
											text
										Element:a
											fields.
										Element:code
											keyword
									Node:
									(type) c
									(layer)3
										Element:p
											Fielddata and doc values also have ordinals, which is a unique numbering for all terms in a particular segment and field. Global ordinals just build on top of this, by providing a mapping between the segment ordinals and the global ordinals, the latter being unique across the entire shard.
									Node:
									(type) c
									(layer)3
										Element:p
											Global ordinals are used for features that use segment ordinals, such as sorting and the terms aggregation, to improve the execution time. A terms aggregation relies purely on global ordinals to perform the aggregation at the shard level, then converts global ordinals to the real term only for the final reduce phase, which combines results from different shards.
									Node:
									(type) c
									(layer)3
										Element:p
											Global ordinals for a specified field are tied to
										Element:span
											, while fielddata and doc values ordinals are tied to a single segment. which is different than for field data for a specific field which is tied to a single segment. For this reason global ordinals need to be entirely rebuilt whenever a once new segment becomes visible.
										Element:em
											all the segments of a shard
									Node:
									(type) c
									(layer)3
										Element:p
											The loading time of global ordinals depends on the number of terms in a field, but in general it is low, since it source field data has already been loaded. The memory overhead of global ordinals is a small because it is very efficiently compressed. Eager loading of global ordinals can move the loading time from the first search request, to the refresh itself.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
										Element:code
											fielddata_frequency_filter
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											Fielddata filtering can be used to reduce the number of terms loaded into memory, and thus reduce memory usage. Terms can be filtered by
										Element:span
											:
										Element:em
											frequency
									Node:
									(type) c
									(layer)3
										Element:p
											The frequency filter allows you to only load terms whose document frequency falls between a
										Element:code
											min
											and
										Element:code
											max
											value, which can be expressed an absolute number (when the number is bigger than 1.0) or as a percentage (eg
										Element:code
											0.01
											is
										Element:code
											1%
											and
										Element:code
											1.0
											is
										Element:code
											100%
											). Frequency is calculated
										Element:span
											. Percentages are based on the number of docs which have a value for the field, as opposed to all docs in the segment.
										Element:strong
											per segment
									Node:
									(type) c
									(layer)3
										Element:p
											Small segments can be excluded completely by specifying the minimum number of docs that the segment should contain with
										Element:code
											min_segment_size
											:
									Node:
									(type) c
									(layer)3
										Element:pre
											PUT my_index { "mappings": { "my_type": { "properties": { "tag": { "type": "text", "fielddata": true, "fielddata_frequency_filter": { "min": 0.001, "max": 0.1, "min_segment_size": 500 } } } } } }
									Node:
									(type) c
									(layer)3
										Element:span
										Element:a
											«
										Element:code
											enabled
									Node:
									(type) c
									(layer)3
										Element:span
										Element:a
										Element:code
											format
											»
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Top Videos
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:a
											Elasticsearch Demo
										Element:li
										Element:a
											Kibana 101
										Element:li
										Element:a
											Logstash Primer
									Node:
									(type) c
									(layer)3
															Node:
															(type) c
															(layer)5
																Element:h5
																	Be in the know with the latest and greatest from Elastic.
															Node:
															(type) c
															(layer)5
																Element:p
																	Thanks for subscribing! We'll keep you updated with new releases.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:footer
										Element:h3
										Element:a
											Products >
										Element:ul
										Element:li
										Element:a
											Elasticsearch
										Element:li
										Element:a
											Kibana
										Element:li
										Element:a
											Beats
										Element:li
										Element:a
											Logstash
										Element:li
										Element:a
											X-Pack
										Element:li
										Element:a
											Elastic Cloud
										Element:li
										Element:a
											Security (formerly Shield)
										Element:li
										Element:a
											Alerting (via Watcher)
										Element:li
										Element:a
											Monitoring (formerly Marvel)
										Element:li
										Element:a
											Graph
										Element:li
										Element:a
											Reporting
										Element:li
										Element:a
											Machine Learning
										Element:li
										Element:a
											ES-Hadoop
										Element:h3
											Resources
										Element:ul
										Element:li
										Element:a
											Blog
										Element:li
										Element:a
											Cloud Status
										Element:li
										Element:a
											Community
										Element:li
										Element:a
											Customers & Use Cases
										Element:li
										Element:a
											Documentation
										Element:li
										Element:a
											Elastic{ON} Events
										Element:li
										Element:a
											Forums
										Element:li
										Element:a
											Meetups
										Element:li
										Element:a
											Subscriptions
										Element:li
										Element:a
											Support Portal
										Element:li
										Element:a
											Videos & Webinars
										Element:li
										Element:a
											Training
										Element:h3
										Element:a
											About >
										Element:ul
										Element:li
										Element:a
											Careers/Jobs
										Element:li
										Element:a
											Contact
										Element:li
										Element:a
											Leadership
										Element:li
										Element:a
											Partners
										Element:li
										Element:a
											Press
										Element:h3
											Language
										Element:ul
										Element:li
										Element:a
											English
										Element:li
										Element:a
											Français
										Element:li
										Element:a
											Deutsch
										Element:li
										Element:a
											日本語
										Element:li
										Element:a
											한국어
										Element:p
											FOLLOW US
										Element:ul
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:ul
										Element:li
										Element:a
											Trademarks
										Element:li
										Element:a
											Terms of Use
										Element:li
										Element:a
											Privacy
										Element:li
										Element:a
											Cookie Policy
										Element:li
										Element:a
											Brand
										Element:a
										Element:img
										Element:p
											© 2017. All Rights Reserved - Elasticsearch
										Element:p
											Elasticsearch is a trademark of Elasticsearch BV, registered in the U.S. and in other countries
										Element:p
											Apache, Apache Lucene, Apache Hadoop, Hadoop, HDFS and the yellow elephant logo are trademarks of the
										Element:a
											Apache Software Foundation
											in the United States and/or other countries.
