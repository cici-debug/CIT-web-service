Node:
(type) c
(layer)0
	Element:body
						Node:
						(type) h2
						(layer)2
							Element:h2
							Element:a
								Scripting and security
							Element:a
								edit
						Node:
						(type) c
						(layer)2
							Element:p
								You should never run Elasticsearch as the
							Element:code
								root
								user, as this would allow a script to access or do
							Element:span
								on your server, without limitations.
							Element:strong
								anything
						Node:
						(type) c
						(layer)2
							Element:p
								You should not expose Elasticsearch directly to users, but instead have a proxy application inbetween. If you
							Element:span
								intend to expose Elasticsearch directly to your users, then you have to decide whether you trust them enough to run scripts on your box or not, and apply the appropriate safety measures.
							Element:strong
								do
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Enabling dynamic scripting
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											The
										Element:code
											script.*
											settings allow for
										Element:a
											fine-grained
											control of which script languages (e.g
										Element:code
											groovy
											,
										Element:code
											painless
											) are allowed to run in which context ( e.g.
										Element:code
											search
											,
										Element:code
											aggs
											,
										Element:code
											update
											), and where the script source is allowed to come from (i.e.
										Element:code
											inline
											,
										Element:code
											stored
											,
										Element:code
											file
											).
									Node:
									(type) c
									(layer)3
										Element:p
											For instance, the following setting enables
										Element:code
											stored
										Element:code
											update
											scripts for
										Element:code
											groovy
											:
									Node:
									(type) c
									(layer)3
										Element:pre
											script.engine.groovy.inline.update: true
									Node:
									(type) c
									(layer)3
										Element:p
											Less fine-grained settings exist which allow you to enable or disable scripts for all sources, all languages, or all contexts. The following settings enable
										Element:code
											inline
											and
										Element:code
											stored
											scripts for all languages in all contexts:
									Node:
									(type) c
									(layer)3
										Element:pre
											script.inline: true script.stored: true
									Node:
									(type) c
									(layer)3
										Element:img
									Node:
									(type) c
									(layer)3
										Element:p
											The above settings mean that anybody who can send requests to your Elasticsearch instance can run whatever scripts they choose! This is a security risk and may well lead to your Elasticsearch cluster being compromised.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Script source settings
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											Scripts may be enabled or disabled depending on their source:
										Element:code
											inline
											,
										Element:code
											stored
											in the cluster state, or from a
										Element:code
											file
											on each node in the cluster. Each of these settings takes one of these values:
									Node:
									(type) c
									(layer)3
										Element:table
										Element:colgroup
										Element:col
										Element:col
										Element:tbody
										Element:tr
										Element:td
										Element:p
										Element:code
											false
										Element:td
										Element:p
											Scripting is disabled.
										Element:tr
										Element:td
										Element:p
										Element:code
											true
										Element:td
										Element:p
											Scripting is enabled.
									Node:
									(type) c
									(layer)3
										Element:p
											The default values are the following:
									Node:
									(type) c
									(layer)3
										Element:pre
											script.inline: false script.stored: false script.file: true
									Node:
									(type) c
									(layer)3
										Element:img
									Node:
									(type) c
									(layer)3
										Element:p
											Global scripting settings affect the
										Element:code
											mustache
											scripting language.
										Element:a
											Search templates
											internally use the
										Element:code
											mustache
											language, and will still be enabled by default as the
										Element:code
											mustache
											engine is sandboxed, but they will be enabled/disabled according to fine-grained settings specified in
										Element:code
											elasticsearch.yml
											.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Script context settings
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											Scripting may also be enabled or disabled in different contexts in the Elasticsearch API. The supported contexts are:
									Node:
									(type) c
									(layer)3
										Element:table
										Element:colgroup
										Element:col
										Element:col
										Element:tbody
										Element:tr
										Element:td
										Element:p
										Element:code
											aggs
										Element:td
										Element:p
											Aggregations
										Element:tr
										Element:td
										Element:p
										Element:code
											search
										Element:td
										Element:p
											Search api, Percolator API and Suggester API
										Element:tr
										Element:td
										Element:p
										Element:code
											update
										Element:td
										Element:p
											Update api
										Element:tr
										Element:td
										Element:p
										Element:code
											plugin
										Element:td
										Element:p
											Any plugin that makes use of scripts under the generic
										Element:code
											plugin
											category
									Node:
									(type) c
									(layer)3
										Element:p
											Plugins can also define custom operations that they use scripts for instead of using the generic
										Element:code
											plugin
											category. Those operations can be referred to in the following form:
										Element:code
											${pluginName}_${operation}
											.
									Node:
									(type) c
									(layer)3
										Element:p
											The following example disables scripting for
										Element:code
											update
											and
										Element:code
											plugin
											operations, regardless of the script source or language. Scripts can still be executed from sandboxed languages as part of
										Element:code
											aggregations
											,
										Element:code
											search
											and plugins execution though, as the above defaults still get applied.
									Node:
									(type) c
									(layer)3
										Element:pre
											script.update: false script.plugin: false
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Fine-grained script settings
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											First, the high-level script settings described above are applied in order (context settings have precedence over source settings). Then, fine-grained settings which include the script language take precedence over any high-level settings.
									Node:
									(type) c
									(layer)3
										Element:p
											Fine-grained settings have the form:
									Node:
									(type) c
									(layer)3
										Element:pre
											script.engine.{lang}.{source}.{context}: true|false
									Node:
									(type) c
									(layer)3
										Element:p
											And
									Node:
									(type) c
									(layer)3
										Element:pre
											script.engine.{lang}.{inline|file|stored}: true|false
									Node:
									(type) c
									(layer)3
										Element:p
											For example:
									Node:
									(type) c
									(layer)3
										Element:pre
											script.inline: false
										Element:a
										Element:span
											script.stored: false
										Element:img
										Element:a
										Element:span
											script.file: false
										Element:img
										Element:a
										Element:span
											script.engine.groovy.inline: true
										Element:img
										Element:a
										Element:span
											script.engine.groovy.stored.search: true
										Element:img
										Element:a
										Element:span
											script.engine.groovy.stored.aggs: true
										Element:img
										Element:a
										Element:span
											script.engine.mustache.stored.search: true
										Element:img
										Element:a
										Element:span
										Element:img
									Node:
									(type) c
									(layer)3
										Element:table
										Element:tr
										Element:td
										Element:p
										Element:a
										Element:span
										Element:img
										Element:a
										Element:span
										Element:img
										Element:a
										Element:span
										Element:img
										Element:td
										Element:p
											Disable all scripting from any source.
										Element:tr
										Element:td
										Element:p
										Element:a
										Element:span
										Element:img
										Element:td
										Element:p
											Allow inline Groovy scripts for all operations
										Element:tr
										Element:td
										Element:p
										Element:a
										Element:span
										Element:img
										Element:a
										Element:span
										Element:img
										Element:td
										Element:p
											Allow stored Groovy scripts to be used for search and aggregations.
										Element:tr
										Element:td
										Element:p
										Element:a
										Element:span
										Element:img
										Element:td
										Element:p
											Allow stored Mustache templates to be used for search.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Java Security Manager
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											Elasticsearch runs with the
										Element:a
											Java Security Manager
											enabled by default. The security policy in Elasticsearch locks down the permissions granted to each class to the bare minimum required to operate. The benefit of doing this is that it severely limits the attack vectors available to a hacker.
									Node:
									(type) c
									(layer)3
										Element:p
											Restricting permissions is particularly important with scripting languages like Groovy and Javascript which are designed to do anything that can be done in Java itself, including writing to the file system, opening sockets to remote servers, etc.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Script Classloader Whitelist
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											Scripting languages are only allowed to load classes which appear in a hardcoded whitelist that can be found in
										Element:a
											.
										Element:code
											org.elasticsearch.script.ClassPermission
									Node:
									(type) c
									(layer)3
										Element:p
											In a script, attempting to load a class that does not appear in the whitelist
										Element:span
											result in a
										Element:em
											may
										Element:code
											ClassNotFoundException
											, for instance this script:
									Node:
									(type) c
									(layer)3
										Element:pre
											GET _search { "script_fields": { "the_hour": { "script": "use(java.math.BigInteger); new BigInteger(1)" } } }
									Node:
									(type) c
									(layer)3
										Element:p
											will return the following exception:
									Node:
									(type) c
									(layer)3
										Element:pre
											{ "reason": { "type": "script_exception", "reason": "failed to run inline script [use(java.math.BigInteger); new BigInteger(1)] using lang [groovy]", "caused_by": { "type": "no_class_def_found_error", "reason": "java/math/BigInteger", "caused_by": { "type": "class_not_found_exception", "reason": "java.math.BigInteger" } } } }
									Node:
									(type) c
									(layer)3
										Element:p
											However, classloader issues may also result in more difficult to interpret exceptions. For instance, this script:
									Node:
									(type) c
									(layer)3
										Element:pre
											use(groovy.time.TimeCategory); new Date(123456789).format('HH')
									Node:
									(type) c
									(layer)3
										Element:p
											Returns the following exception:
									Node:
									(type) c
									(layer)3
										Element:pre
											{ "reason": { "type": "script_exception", "reason": "failed to run inline script [use(groovy.time.TimeCategory); new Date(123456789).format('HH')] using lang [groovy]", "caused_by": { "type": "missing_property_exception", "reason": "No such property: groovy for class: 8d45f5c1a07a1ab5dda953234863e283a7586240" } } }
						Node:
						(type) h2
						(layer)2
							Element:h2
							Element:a
								Dealing with Java Security Manager issues
							Element:a
								edit
						Node:
						(type) c
						(layer)2
							Element:p
								If you encounter issues with the Java Security Manager, you have two options for resolving these issues:
						Node:
						(type) c
						(layer)2
							Element:h3
							Element:a
								Fix the security problem
							Element:a
								edit
						Node:
						(type) c
						(layer)2
							Element:p
								The safest and most secure long term solution is to change the code causing the security issue. We recognise that this may take time to do correctly and so we provide the following two alternatives.
						Node:
						(type) c
						(layer)2
							Element:h3
							Element:a
								Customising the classloader whitelist
							Element:a
								edit
						Node:
						(type) c
						(layer)2
							Element:p
								The classloader whitelist can be customised by tweaking the local Java Security Policy either:
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
								system wide:
							Element:code
								$JAVA_HOME/lib/security/java.policy
								,
							Element:li
								for just the
							Element:code
								elasticsearch
								user:
							Element:code
								/home/elasticsearch/.java.policy
							Element:li
								by adding a system property to the
							Element:a
								jvm.options
								configuration:
							Element:code
								-Djava.security.policy=someURL
								, or
							Element:li
							Element:p
								via the
							Element:code
								ES_JAVA_OPTS
								environment variable with
							Element:code
								-Djava.security.policy=someURL
								:
							Element:pre
								export ES_JAVA_OPTS="${ES_JAVA_OPTS} -Djava.security.policy=file:///path/to/my.policy` ./bin/elasticsearch
						Node:
						(type) c
						(layer)2
							Element:p
								Permissions may be granted at the class, package, or global level. For instance:
						Node:
						(type) c
						(layer)2
							Element:pre
								grant { permission org.elasticsearch.script.ClassPermission "java.util.Base64"; // allow class permission org.elasticsearch.script.ClassPermission "java.util.*"; // allow package permission org.elasticsearch.script.ClassPermission "*"; // allow all (disables filtering basically) };
						Node:
						(type) c
						(layer)2
							Element:p
								Here is an example of how to enable the
							Element:code
								groovy.time.TimeCategory
								class:
						Node:
						(type) c
						(layer)2
							Element:pre
								grant { permission org.elasticsearch.script.ClassPermission "java.lang.Class"; permission org.elasticsearch.script.ClassPermission "groovy.time.TimeCategory"; };
						Node:
						(type) c
						(layer)2
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
								Before adding classes to the whitelist, consider the security impact that it will have on Elasticsearch. Do you really need an extra class or can your code be rewritten in a more secure way?
						Node:
						(type) c
						(layer)2
							Element:p
								It is quite possible that we have not whitelisted a generically useful and safe class. If you have a class that you think should be whitelisted by default, please open an issue on GitHub and we will consider the impact of doing so.
						Node:
						(type) c
						(layer)2
							Element:p
								See
							Element:a
								http://docs.oracle.com/javase/7/docs/technotes/guides/security/PolicyFiles.html
								for more information.
						Node:
						(type) c
						(layer)2
							Element:span
							Element:a
								« Accessing document fields and special variables
						Node:
						(type) c
						(layer)2
							Element:span
							Element:a
								Groovy Scripting Language »
						Node:
						(type) c
						(layer)2
							Element:h3
								Top Videos
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:a
								Elasticsearch Demo
							Element:li
							Element:a
								Kibana 101
							Element:li
							Element:a
								Logstash Primer
						Node:
						(type) c
						(layer)2
															Node:
															(type) c
															(layer)5
																Element:h5
																	Be in the know with the latest and greatest from Elastic.
															Node:
															(type) c
															(layer)5
																Element:p
																	Thanks for subscribing! We'll keep you updated with new releases.
															Node:
															(type) c
															(layer)5
																Element:footer
																Element:h3
																Element:a
																	Products >
																Element:ul
																Element:li
																Element:a
																	Elasticsearch
																Element:li
																Element:a
																	Kibana
																Element:li
																Element:a
																	Beats
																Element:li
																Element:a
																	Logstash
																Element:li
																Element:a
																	X-Pack
																Element:li
																Element:a
																	Elastic Cloud
																Element:li
																Element:a
																	Security (formerly Shield)
																Element:li
																Element:a
																	Alerting (via Watcher)
																Element:li
																Element:a
																	Monitoring (formerly Marvel)
																Element:li
																Element:a
																	Graph
																Element:li
																Element:a
																	Reporting
																Element:li
																Element:a
																	Machine Learning
																Element:li
																Element:a
																	ES-Hadoop
																Element:h3
																	Resources
																Element:ul
																Element:li
																Element:a
																	Blog
																Element:li
																Element:a
																	Cloud Status
																Element:li
																Element:a
																	Community
																Element:li
																Element:a
																	Customers & Use Cases
																Element:li
																Element:a
																	Documentation
																Element:li
																Element:a
																	Elastic{ON} Events
																Element:li
																Element:a
																	Forums
																Element:li
																Element:a
																	Meetups
																Element:li
																Element:a
																	Subscriptions
																Element:li
																Element:a
																	Support Portal
																Element:li
																Element:a
																	Videos & Webinars
																Element:li
																Element:a
																	Training
																Element:h3
																Element:a
																	About >
																Element:ul
																Element:li
																Element:a
																	Careers/Jobs
																Element:li
																Element:a
																	Contact
																Element:li
																Element:a
																	Leadership
																Element:li
																Element:a
																	Partners
																Element:li
																Element:a
																	Press
																Element:h3
																	Language
																Element:ul
																Element:li
																Element:a
																	English
																Element:li
																Element:a
																	Français
																Element:li
																Element:a
																	Deutsch
																Element:li
																Element:a
																	日本語
																Element:li
																Element:a
																	한국어
																Element:p
																	FOLLOW US
																Element:ul
																Element:li
																Element:a
																Element:li
																Element:a
																Element:li
																Element:a
																Element:li
																Element:a
																Element:li
																Element:a
																Element:ul
																Element:li
																Element:a
																	Trademarks
																Element:li
																Element:a
																	Terms of Use
																Element:li
																Element:a
																	Privacy
																Element:li
																Element:a
																	Cookie Policy
																Element:li
																Element:a
																	Brand
																Element:a
																Element:img
																Element:p
																	© 2017. All Rights Reserved - Elasticsearch
																Element:p
																	Elasticsearch is a trademark of Elasticsearch BV, registered in the U.S. and in other countries
																Element:p
																	Apache, Apache Lucene, Apache Hadoop, Hadoop, HDFS and the yellow elephant logo are trademarks of the
																Element:a
																	Apache Software Foundation
																	in the United States and/or other countries.
