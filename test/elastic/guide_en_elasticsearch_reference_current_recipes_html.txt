Node:
(type) c
(layer)0
	Element:body
						Node:
						(type) h2
						(layer)2
							Element:h2
							Element:a
								Recipes
							Element:a
								edit
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Mixing exact search with stemming
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											When building a search application, stemming is often a must as it is desirable for a query on
										Element:code
											skiing
											to match documents that contain
										Element:code
											ski
											or
										Element:code
											skis
											. But what if a user wants to search for
										Element:code
											skiing
											specifically? The typical way to do this would be to use a
										Element:a
											multi-field
											in order to have the same content indexed in two different ways:
									Node:
									(type) c
									(layer)3
										Element:pre
											PUT index { "settings": { "analysis": { "analyzer": { "english_exact": { "tokenizer": "standard", "filter": [ "lowercase" ] } } } }, "mappings": { "type": { "properties": { "body": { "type": "text", "analyzer": "english", "fields": { "exact": { "type": "text", "analyzer": "english_exact" } } } } } } } PUT index/type/1 { "body": "Ski resort" } PUT index/type/2 { "body": "A pair of skis" } POST index/_refresh
									Node:
									(type) c
									(layer)3
										Element:p
											With such a setup, searching for
										Element:code
											ski
											on
										Element:code
											body
											would return both documents:
									Node:
									(type) c
									(layer)3
										Element:pre
											GET index/_search { "query": { "simple_query_string": { "fields": [ "body" ], "query": "ski" } } }
									Node:
									(type) c
									(layer)3
										Element:pre
											{ "took": 2, "timed_out": false, "_shards": { "total": 5, "successful": 5, "failed": 0 }, "hits": { "total": 2, "max_score": 0.25811607, "hits": [ { "_index": "index", "_type": "type", "_id": "2", "_score": 0.25811607, "_source": { "body": "A pair of skis" } }, { "_index": "index", "_type": "type", "_id": "1", "_score": 0.25811607, "_source": { "body": "Ski resort" } } ] } }
									Node:
									(type) c
									(layer)3
										Element:p
											On the other hand, searching for
										Element:code
											ski
											on
										Element:code
											body.exact
											would only return document
										Element:code
											1
											since the analysis chain of
										Element:code
											body.exact
											does not perform stemming.
									Node:
									(type) c
									(layer)3
										Element:pre
											GET index/_search { "query": { "simple_query_string": { "fields": [ "body.exact" ], "query": "ski" } } }
									Node:
									(type) c
									(layer)3
										Element:pre
											{ "took": 1, "timed_out": false, "_shards": { "total": 5, "successful": 5, "failed": 0 }, "hits": { "total": 1, "max_score": 0.25811607, "hits": [ { "_index": "index", "_type": "type", "_id": "1", "_score": 0.25811607, "_source": { "body": "Ski resort" } } ] } }
									Node:
									(type) c
									(layer)3
										Element:p
											This is not something that is easy to expose to end users, as we would need to have a way to figure out whether they are looking for an exact match or not and redirect to the appropriate field accordingly. Also what to do if only parts of the query need to be matched exactly while other parts should still take stemming into account?
									Node:
									(type) c
									(layer)3
										Element:p
											Fortunately, the
										Element:code
											query_string
											and
										Element:code
											simple_query_string
											queries have a feature that solve this exact problem:
										Element:code
											quote_field_suffix
											. This tell Elasticsearch that the words that appear in between quotes are to be redirected to a different field, see below:
									Node:
									(type) c
									(layer)3
										Element:pre
											GET index/_search { "query": { "simple_query_string": { "fields": [ "body" ], "quote_field_suffix": ".exact", "query": "\"ski\"" } } }
									Node:
									(type) c
									(layer)3
										Element:pre
											{ "took": 2, "timed_out": false, "_shards": { "total": 5, "successful": 5, "failed": 0 }, "hits": { "total": 1, "max_score": 0.25811607, "hits": [ { "_index": "index", "_type": "type", "_id": "1", "_score": 0.25811607, "_source": { "body": "Ski resort" } } ] } }
									Node:
									(type) c
									(layer)3
										Element:p
											In the above case, since
										Element:code
											ski
											was in-between quotes, it was searched on the
										Element:code
											body.exact
											field due to the
										Element:code
											quote_field_suffix
											parameter, so only document
										Element:code
											1
											matched. This allows users to mix exact search with stemmed search as they like.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Getting consistent scoring
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											The fact that Elasticsearch operates with shards and replicas adds challenges when it comes to having good scoring.
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:a
														Scores are not reproducible
													Element:a
														edit
												Node:
												(type) c
												(layer)4
													Element:p
														Say the same user runs the same request twice in a row and documents do not come back in the same order both times, this is a pretty bad experience isnâ€™t it? Unfortunately this is something that can happen if you have replicas (
													Element:code
														index.number_of_replicas
														is greater than 0). The reason is that Elasticsearch selects the shards that the query should go to in a round-robin fashion, so it is quite likely if you run the same query twice in a row that it will go to different copies of the same shard.
												Node:
												(type) c
												(layer)4
													Element:p
														Now why is it a problem? Index statistics are an important part of the score. And these index statistics may be different across copies of the same shard due to deleted documents. As you may know when documents are deleted or updated, the old document is not immediately removed from the index, it is just marked as deleted and it will only be removed from disk on the next time that the segment this old document belongs to is merged. However for practical reasons, those deleted documents are taken into account for index statistics. So imagine that the primary shard just finished a large merge that removed lots of deleted documents, then it might have index statistics that are sufficiently different from the replica (which still have plenty of deleted documents) so that scores are different too.
												Node:
												(type) c
												(layer)4
													Element:p
														The recommended way to work around this issue is to use a string that identifies the user that is logged is (a user id or session id for instance) as a
													Element:a
														preference
														. This ensures that all queries of a given user are always going to hit the same shards, so scores remain more consistent across queries.
												Node:
												(type) c
												(layer)4
													Element:p
														This work around has another benefit: when two documents have the same score, they will be sorted by their internal Lucene doc id (which is unrelated to the
													Element:code
														_id
														or
													Element:code
														_uid
														) by default. However these doc ids could be different across copies of the same shard. So by always hitting the same shard, we would get more consistent ordering of documents that have the same scores.
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:a
														Relevancy looks wrong
													Element:a
														edit
												Node:
												(type) c
												(layer)4
													Element:p
														If you notice that two documents with the same content get different scores or that an exact match is not ranked first, then the issue might be related to sharding. By default, Elasticsearch makes each shard responsible for producing its own scores. However since index statistics are an important contributor to the scores, this only works well if shards have similar index statistics. The assumption is that since documents are routed evenly to shards by default, then index statistics should be very similar and scoring would work as expected. However in the event that you either - use routing at index time, - query multiple
													Element:span
														, - or have too little data in your index then there are good chances that all shards that are involved in the search request do not have similar index statistics and relevancy could be bad.
													Element:em
														indices
												Node:
												(type) c
												(layer)4
													Element:p
														If you have a small dataset, the easiest way to work around this issue is to index everything into an index that has a single shard (
													Element:code
														index.number_of_shards: 1
														). Then index statistics will be the same for all documents and scores will be consistent.
												Node:
												(type) c
												(layer)4
													Element:p
														Otherwise the recommended way to work around this issue is to use the
													Element:a
														search type. This will make Elasticsearch perform an inital round trip to all involved shards, asking them for their index statistics relatively to the query, then the coordinating node will merge those statistics and send the merged statistics alongside the request when asking shards to perform the
													Element:code
														dfs_query_then_fetch
													Element:code
														query
														phase, so that shards can use these global statistics rather than their own statistics in order to do the scoring.
												Node:
												(type) c
												(layer)4
													Element:p
														In most cases, this additional round trip should be very cheap. However in the event that your query contains a very large number of fields/terms or fuzzy queries, beware that gathering statistics alone might not be cheap since all terms have to be looked up in the terms dictionaries in order to look up statistics.
												Node:
												(type) c
												(layer)4
													Element:span
													Element:a
														Â« General recommendations
												Node:
												(type) c
												(layer)4
													Element:span
													Element:a
														Tune for indexing speed Â»
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Top Videos
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:a
											Elasticsearch Demo
										Element:li
										Element:a
											Kibana 101
										Element:li
										Element:a
											Logstash Primer
									Node:
									(type) c
									(layer)3
															Node:
															(type) c
															(layer)5
																Element:h5
																	Be in the know with the latest and greatest from Elastic.
															Node:
															(type) c
															(layer)5
																Element:p
																	Thanks for subscribing! We'll keep you updated with new releases.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:footer
										Element:h3
										Element:a
											Products >
										Element:ul
										Element:li
										Element:a
											Elasticsearch
										Element:li
										Element:a
											Kibana
										Element:li
										Element:a
											Beats
										Element:li
										Element:a
											Logstash
										Element:li
										Element:a
											X-Pack
										Element:li
										Element:a
											Elastic Cloud
										Element:li
										Element:a
											Security (formerly Shield)
										Element:li
										Element:a
											Alerting (via Watcher)
										Element:li
										Element:a
											Monitoring (formerly Marvel)
										Element:li
										Element:a
											Graph
										Element:li
										Element:a
											Reporting
										Element:li
										Element:a
											Machine Learning
										Element:li
										Element:a
											ES-Hadoop
										Element:h3
											Resources
										Element:ul
										Element:li
										Element:a
											Blog
										Element:li
										Element:a
											Cloud Status
										Element:li
										Element:a
											Community
										Element:li
										Element:a
											Customers & Use Cases
										Element:li
										Element:a
											Documentation
										Element:li
										Element:a
											Elastic{ON} Events
										Element:li
										Element:a
											Forums
										Element:li
										Element:a
											Meetups
										Element:li
										Element:a
											Subscriptions
										Element:li
										Element:a
											Support Portal
										Element:li
										Element:a
											Videos & Webinars
										Element:li
										Element:a
											Training
										Element:h3
										Element:a
											About >
										Element:ul
										Element:li
										Element:a
											Careers/Jobs
										Element:li
										Element:a
											Contact
										Element:li
										Element:a
											Leadership
										Element:li
										Element:a
											Partners
										Element:li
										Element:a
											Press
										Element:h3
											Language
										Element:ul
										Element:li
										Element:a
											English
										Element:li
										Element:a
											FranÃ§ais
										Element:li
										Element:a
											Deutsch
										Element:li
										Element:a
											æ—¥æœ¬èªž
										Element:li
										Element:a
											í•œêµ­ì–´
										Element:p
											FOLLOW US
										Element:ul
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:ul
										Element:li
										Element:a
											Trademarks
										Element:li
										Element:a
											Terms of Use
										Element:li
										Element:a
											Privacy
										Element:li
										Element:a
											Cookie Policy
										Element:li
										Element:a
											Brand
										Element:a
										Element:img
										Element:p
											Â© 2017. All Rights Reserved - Elasticsearch
										Element:p
											Elasticsearch is a trademark of Elasticsearch BV, registered in the U.S. and in other countries
										Element:p
											Apache, Apache Lucene, Apache Hadoop, Hadoop, HDFS and the yellow elephant logo are trademarks of the
										Element:a
											Apache Software Foundation
											in the United States and/or other countries.
