Node:
(type) c
(layer)0
	Element:body
						Node:
						(type) h2
						(layer)2
							Element:h2
							Element:a
								Percolate Query
							Element:a
								edit
						Node:
						(type) c
						(layer)2
							Element:p
								The
							Element:code
								percolate
								query can be used to match queries stored in an index. The
							Element:code
								percolate
								query itself contains the document that will be used as query to match with the stored queries.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Sample Usage
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											Create an index with two mappings:
									Node:
									(type) c
									(layer)3
										Element:pre
											PUT /my-index { "mappings": { "doctype": { "properties": { "message": { "type": "text" } } }, "queries": { "properties": { "query": { "type": "percolator" } } } } }
									Node:
									(type) c
									(layer)3
										Element:p
											The
										Element:code
											doctype
											mapping is the mapping used to preprocess the document defined in the
										Element:code
											percolator
											query before it gets indexed into a temporary index.
									Node:
									(type) c
									(layer)3
										Element:p
											The
										Element:code
											queries
											mapping is the mapping used for indexing the query documents. The
										Element:code
											query
											field will hold a json object that represents an actual Elasticsearch query. The
										Element:code
											query
											field has been configured to use the
										Element:a
											percolator field type
											. This field type understands the query dsl and stored the query in such a way that it can be used later on to match documents defined on the
										Element:code
											percolate
											query.
									Node:
									(type) c
									(layer)3
										Element:p
											Register a query in the percolator:
									Node:
									(type) c
									(layer)3
										Element:pre
											PUT /my-index/queries/1?refresh { "query" : { "match" : { "message" : "bonsai tree" } } }
									Node:
									(type) c
									(layer)3
										Element:p
											Match a document to the registered percolator queries:
									Node:
									(type) c
									(layer)3
										Element:pre
											GET /my-index/_search { "query" : { "percolate" : { "field" : "query", "document_type" : "doctype", "document" : { "message" : "A new bonsai tree in the office" } } } }
									Node:
									(type) c
									(layer)3
										Element:p
											The above request will yield the following response:
									Node:
									(type) c
									(layer)3
										Element:pre
											{ "took": 13, "timed_out": false, "_shards": { "total": 5, "successful": 5, "failed": 0 }, "hits": { "total": 1, "max_score": 0.5716521, "hits": [ {
										Element:a
										Element:span
											"_index": "my-index", "_type": "queries", "_id": "1", "_score": 0.5716521, "_source": { "query": { "match": { "message": "bonsai tree" } } } } ] } }
										Element:img
									Node:
									(type) c
									(layer)3
										Element:table
										Element:tr
										Element:td
										Element:p
										Element:a
										Element:span
										Element:img
										Element:td
										Element:p
											The query with id
										Element:code
											1
											matches our document.
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:a
														Parameters
													Element:a
														edit
												Node:
												(type) c
												(layer)4
													Element:p
														The following parameters are required when percolating a document:
												Node:
												(type) c
												(layer)4
													Element:table
													Element:colgroup
													Element:col
													Element:col
													Element:tbody
													Element:tr
													Element:td
													Element:p
													Element:code
														field
													Element:td
													Element:p
														The field of type
													Element:code
														percolator
														and that holds the indexed queries. This is a required parameter.
													Element:tr
													Element:td
													Element:p
													Element:code
														document_type
													Element:td
													Element:p
														The type / mapping of the document being percolated. This is a required parameter.
													Element:tr
													Element:td
													Element:p
													Element:code
														document
													Element:td
													Element:p
														The source of the document being percolated.
												Node:
												(type) c
												(layer)4
													Element:p
														Instead of specifying the source of the document being percolated, the source can also be retrieved from an already stored document. The
													Element:code
														percolate
														query will then internally execute a get request to fetch that document.
												Node:
												(type) c
												(layer)4
													Element:p
														In that case the
													Element:code
														document
														parameter can be substituted with the following parameters:
												Node:
												(type) c
												(layer)4
													Element:table
													Element:colgroup
													Element:col
													Element:col
													Element:tbody
													Element:tr
													Element:td
													Element:p
													Element:code
														index
													Element:td
													Element:p
														The index the document resides in. This is a required parameter.
													Element:tr
													Element:td
													Element:p
													Element:code
														type
													Element:td
													Element:p
														The type of the document to fetch. This is a required parameter.
													Element:tr
													Element:td
													Element:p
													Element:code
														id
													Element:td
													Element:p
														The id of the document to fetch. This is a required parameter.
													Element:tr
													Element:td
													Element:p
													Element:code
														routing
													Element:td
													Element:p
														Optionally, routing to be used to fetch document to percolate.
													Element:tr
													Element:td
													Element:p
													Element:code
														preference
													Element:td
													Element:p
														Optionally, preference to be used to fetch document to percolate.
													Element:tr
													Element:td
													Element:p
													Element:code
														version
													Element:td
													Element:p
														Optionally, the expected version of the document to be fetched.
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:a
														Percolating an Existing Document
													Element:a
														edit
												Node:
												(type) c
												(layer)4
													Element:p
														In order to percolate a newly indexed document, the
													Element:code
														percolate
														query can be used. Based on the response from an index request, the
													Element:code
														_id
														and other meta information can be used to immediately percolate the newly added document.
												Node:
												(type) c
												(layer)4
															Node:
															(type) c
															(layer)5
																Element:h5
																Element:a
																	Example
																Element:a
																	edit
															Node:
															(type) c
															(layer)5
																Element:p
																	Based on the previous example.
															Node:
															(type) c
															(layer)5
																Element:p
																	Index the document we want to percolate:
															Node:
															(type) c
															(layer)5
																Element:pre
																	PUT /my-index/message/1 { "message" : "A new bonsai tree in the office" }
															Node:
															(type) c
															(layer)5
																Element:p
																	Index response:
															Node:
															(type) c
															(layer)5
																Element:pre
																	{ "_index": "my-index", "_type": "message", "_id": "1", "_version": 1, "_shards": { "total": 2, "successful": 1, "failed": 0 }, "created": true, "result": "created" }
															Node:
															(type) c
															(layer)5
																Element:p
																	Percolating an existing document, using the index response as basis to build to new search request:
															Node:
															(type) c
															(layer)5
																Element:pre
																	GET /my-index/_search { "query" : { "percolate" : { "field": "query", "document_type" : "doctype", "index" : "my-index", "type" : "message", "id" : "1", "version" : 1
																Element:a
																Element:span
																	} } }
																Element:img
															Node:
															(type) c
															(layer)5
																Element:table
																Element:tr
																Element:td
																Element:p
																Element:a
																Element:span
																Element:img
																Element:td
																Element:p
																	The version is optional, but useful in certain cases. We can then ensure that we are try to percolate the document we just have indexed. A change may be made after we have indexed, and if that is the case the then the search request would fail with a version conflict error.
															Node:
															(type) c
															(layer)5
																Element:p
																	The search response returned is identical as in the previous example.
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:a
														Percolate query and highlighting
													Element:a
														edit
												Node:
												(type) c
												(layer)4
													Element:p
														The
													Element:code
														percolate
														query is handled in a special way when it comes to highlighting. The queries hits are used to highlight the document that is provided in the
													Element:code
														percolate
														query. Whereas with regular highlighting the query in the search request is used to highlight the hits.
												Node:
												(type) c
												(layer)4
															Node:
															(type) c
															(layer)5
																Element:h5
																Element:a
																	Example
																Element:a
																	edit
															Node:
															(type) c
															(layer)5
																Element:p
																	This example is based on the mapping of the first example.
															Node:
															(type) c
															(layer)5
																Element:p
																	Save a query:
															Node:
															(type) c
															(layer)5
																Element:pre
																	PUT /my-index/queries/1?refresh { "query" : { "match" : { "message" : "brown fox" } } }
															Node:
															(type) c
															(layer)5
																Element:p
																	Save another query:
															Node:
															(type) c
															(layer)5
																Element:pre
																	PUT /my-index/queries/2?refresh { "query" : { "match" : { "message" : "lazy dog" } } }
															Node:
															(type) c
															(layer)5
																Element:p
																	Execute a search request with the
																Element:code
																	percolate
																	query and highlighting enabled:
															Node:
															(type) c
															(layer)5
																Element:pre
																	GET /my-index/_search { "query" : { "percolate" : { "field": "query", "document_type" : "doctype", "document" : { "message" : "The quick brown fox jumps over the lazy dog" } } }, "highlight": { "fields": { "message": {} } } }
															Node:
															(type) c
															(layer)5
																Element:p
																	This will yield the following response.
															Node:
															(type) c
															(layer)5
																Element:pre
																	{ "took": 7, "timed_out": false, "_shards": { "total": 5, "successful": 5, "failed": 0 }, "hits": { "total": 2, "max_score": 0.5446649, "hits": [ { "_index": "my-index", "_type": "queries", "_id": "2", "_score": 0.5446649, "_source": { "query": { "match": { "message": "lazy dog" } } }, "highlight": { "message": [ "The quick brown fox jumps over the <em>lazy</em> <em>dog</em>"
																Element:a
																Element:span
																	] } }, { "_index": "my-index", "_type": "queries", "_id": "1", "_score": 0.5446649, "_source": { "query": { "match": { "message": "brown fox" } } }, "highlight": { "message": [ "The quick <em>brown</em> <em>fox</em> jumps over the lazy dog"
																Element:img
																Element:a
																Element:span
																	] } } ] } }
																Element:img
															Node:
															(type) c
															(layer)5
																Element:table
																Element:tr
																Element:td
																Element:p
																Element:a
																Element:span
																Element:img
																Element:a
																Element:span
																Element:img
																Element:td
																Element:p
																	The terms from each query have been highlighted in the document.
															Node:
															(type) c
															(layer)5
																Element:p
																	Instead of the query in the search request highlighting the percolator hits, the percolator queries are highlighting the document defined in the
																Element:code
																	percolate
																	query.
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:a
														How it Works Under the Hood
													Element:a
														edit
												Node:
												(type) c
												(layer)4
													Element:p
														When indexing a document into an index that has the
													Element:a
														percolator field type
														mapping configured, the query part of the documents gets parsed into a Lucene query and are stored into the Lucene index. A binary representation of the query gets stored, but also the query’s terms are analyzed and stored into an indexed field.
												Node:
												(type) c
												(layer)4
													Element:p
														At search time, the document specified in the request gets parsed into a Lucene document and is stored in a in-memory temporary Lucene index. This in-memory index can just hold this one document and it is optimized for that. After this a special query is build based on the terms in the in-memory index that select candidate percolator queries based on their indexed query terms. These queries are then evaluated by the in-memory index if they actually match.
												Node:
												(type) c
												(layer)4
													Element:p
														The selecting of candidate percolator queries matches is an important performance optimization during the execution of the
													Element:code
														percolate
														query as it can significantly reduce the number of candidate matches the in-memory index needs to evaluate. The reason the
													Element:code
														percolate
														query can do this is because during indexing of the percolator queries the query terms are being extracted and indexed with the percolator query. Unfortunately the percolator cannot extract terms from all queries (for example the
													Element:code
														wildcard
														or
													Element:code
														geo_shape
														query) and as a result of that in certain cases the percolator can’t do the selecting optimization (for example if an unsupported query is defined in a required clause of a boolean query or the unsupported query is the only query in the percolator document). These queries are marked by the percolator and can be found by running the following search:
												Node:
												(type) c
												(layer)4
													Element:pre
														GET /_search { "query": { "term" : { "query.extraction_result" : "failed" } } }
												Node:
												(type) c
												(layer)4
													Element:img
												Node:
												(type) c
												(layer)4
													Element:p
														The above example assumes that there is a
													Element:code
														query
														field of type
													Element:code
														percolator
														in the mappings.
												Node:
												(type) c
												(layer)4
													Element:span
													Element:a
														« Script Query
												Node:
												(type) c
												(layer)4
													Element:span
													Element:a
														Span queries »
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Top Videos
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:a
											Elasticsearch Demo
										Element:li
										Element:a
											Kibana 101
										Element:li
										Element:a
											Logstash Primer
									Node:
									(type) c
									(layer)3
															Node:
															(type) c
															(layer)5
																Element:h5
																	Be in the know with the latest and greatest from Elastic.
															Node:
															(type) c
															(layer)5
																Element:p
																	Thanks for subscribing! We'll keep you updated with new releases.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:footer
										Element:h3
										Element:a
											Products >
										Element:ul
										Element:li
										Element:a
											Elasticsearch
										Element:li
										Element:a
											Kibana
										Element:li
										Element:a
											Beats
										Element:li
										Element:a
											Logstash
										Element:li
										Element:a
											X-Pack
										Element:li
										Element:a
											Elastic Cloud
										Element:li
										Element:a
											Security (formerly Shield)
										Element:li
										Element:a
											Alerting (via Watcher)
										Element:li
										Element:a
											Monitoring (formerly Marvel)
										Element:li
										Element:a
											Graph
										Element:li
										Element:a
											Reporting
										Element:li
										Element:a
											Machine Learning
										Element:li
										Element:a
											ES-Hadoop
										Element:h3
											Resources
										Element:ul
										Element:li
										Element:a
											Blog
										Element:li
										Element:a
											Cloud Status
										Element:li
										Element:a
											Community
										Element:li
										Element:a
											Customers & Use Cases
										Element:li
										Element:a
											Documentation
										Element:li
										Element:a
											Elastic{ON} Events
										Element:li
										Element:a
											Forums
										Element:li
										Element:a
											Meetups
										Element:li
										Element:a
											Subscriptions
										Element:li
										Element:a
											Support Portal
										Element:li
										Element:a
											Videos & Webinars
										Element:li
										Element:a
											Training
										Element:h3
										Element:a
											About >
										Element:ul
										Element:li
										Element:a
											Careers/Jobs
										Element:li
										Element:a
											Contact
										Element:li
										Element:a
											Leadership
										Element:li
										Element:a
											Partners
										Element:li
										Element:a
											Press
										Element:h3
											Language
										Element:ul
										Element:li
										Element:a
											English
										Element:li
										Element:a
											Français
										Element:li
										Element:a
											Deutsch
										Element:li
										Element:a
											日本語
										Element:li
										Element:a
											한국어
										Element:p
											FOLLOW US
										Element:ul
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:ul
										Element:li
										Element:a
											Trademarks
										Element:li
										Element:a
											Terms of Use
										Element:li
										Element:a
											Privacy
										Element:li
										Element:a
											Cookie Policy
										Element:li
										Element:a
											Brand
										Element:a
										Element:img
										Element:p
											© 2017. All Rights Reserved - Elasticsearch
										Element:p
											Elasticsearch is a trademark of Elasticsearch BV, registered in the U.S. and in other countries
										Element:p
											Apache, Apache Lucene, Apache Hadoop, Hadoop, HDFS and the yellow elephant logo are trademarks of the
										Element:a
											Apache Software Foundation
											in the United States and/or other countries.
