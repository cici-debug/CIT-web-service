Node:
(type) c
(layer)0
	Element:body
						Node:
						(type) h2
						(layer)2
							Element:h2
							Element:a
								Handling Failures in Pipelines
							Element:a
								edit
						Node:
						(type) c
						(layer)2
							Element:p
								In its simplest use case, a pipeline defines a list of processors that are executed sequentially, and processing halts at the first exception. This behavior may not be desirable when failures are expected. For example, you may have logs that don’t match the specified grok expression. Instead of halting execution, you may want to index such documents into a separate index.
						Node:
						(type) c
						(layer)2
							Element:p
								To enable this behavior, you can use the
							Element:code
								on_failure
								parameter. The
							Element:code
								on_failure
								parameter defines a list of processors to be executed immediately following the failed processor. You can specify this parameter at the pipeline level, as well as at the processor level. If a processor specifies an
							Element:code
								on_failure
								configuration, whether it is empty or not, any exceptions that are thrown by the processor are caught, and the pipeline continues executing the remaining processors. Because you can define further processors within the scope of an
							Element:code
								on_failure
								statement, you can nest failure handling.
						Node:
						(type) c
						(layer)2
							Element:p
								The following example defines a pipeline that renames the
							Element:code
								foo
								field in the processed document to
							Element:code
								bar
								. If the document does not contain the
							Element:code
								foo
								field, the processor attaches an error message to the document for later analysis within Elasticsearch.
						Node:
						(type) c
						(layer)2
							Element:pre
								{ "description" : "my first pipeline with handled exceptions", "processors" : [ { "rename" : { "field" : "foo", "target_field" : "bar", "on_failure" : [ { "set" : { "field" : "error", "value" : "field \"foo\" does not exist, cannot rename to \"bar\"" } } ] } } ] }
						Node:
						(type) c
						(layer)2
							Element:p
								The following example defines an
							Element:code
								on_failure
								block on a whole pipeline to change the index to which failed documents get sent.
						Node:
						(type) c
						(layer)2
							Element:pre
								{ "description" : "my first pipeline with handled exceptions", "processors" : [ ... ], "on_failure" : [ { "set" : { "field" : "_index", "value" : "failed-{{ _index }}" } } ] }
						Node:
						(type) c
						(layer)2
							Element:p
								Alternatively instead of defining behaviour in case of processor failure, it is also possible to ignore a failure and continue with the next processor by specifying the
							Element:code
								ignore_failure
								setting.
						Node:
						(type) c
						(layer)2
							Element:p
								In case in the example below the field
							Element:code
								foo
								doesn’t exist the failure will be caught and the pipeline continues to execute, which in this case means that the pipeline does nothing.
						Node:
						(type) c
						(layer)2
							Element:pre
								{ "description" : "my first pipeline with handled exceptions", "processors" : [ { "rename" : { "field" : "foo", "target_field" : "bar", "ignore_failure" : true } } ] }
						Node:
						(type) c
						(layer)2
							Element:p
								The
							Element:code
								ignore_failure
								can be set on any processor and defaults to
							Element:code
								false
								.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Accessing Error Metadata From Processors Handling Exceptions
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											You may want to retrieve the actual error message that was thrown by a failed processor. To do so you can access metadata fields called
										Element:code
											on_failure_message
											,
										Element:code
											on_failure_processor_type
											, and
										Element:code
											on_failure_processor_tag
											. These fields are only accessible from within the context of an
										Element:code
											on_failure
											block.
									Node:
									(type) c
									(layer)3
										Element:p
											Here is an updated version of the example that you saw earlier. But instead of setting the error message manually, the example leverages the
										Element:code
											on_failure_message
											metadata field to provide the error message.
									Node:
									(type) c
									(layer)3
										Element:pre
											{ "description" : "my first pipeline with handled exceptions", "processors" : [ { "rename" : { "field" : "foo", "to" : "bar", "on_failure" : [ { "set" : { "field" : "error", "value" : "{{ _ingest.on_failure_message }}" } } ] } } ] }
									Node:
									(type) c
									(layer)3
										Element:span
										Element:a
											« Accessing Data in Pipelines
									Node:
									(type) c
									(layer)3
										Element:span
										Element:a
											Processors »
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Top Videos
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:a
											Elasticsearch Demo
										Element:li
										Element:a
											Kibana 101
										Element:li
										Element:a
											Logstash Primer
									Node:
									(type) c
									(layer)3
															Node:
															(type) c
															(layer)5
																Element:h5
																	Be in the know with the latest and greatest from Elastic.
															Node:
															(type) c
															(layer)5
																Element:p
																	Thanks for subscribing! We'll keep you updated with new releases.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:footer
										Element:h3
										Element:a
											Products >
										Element:ul
										Element:li
										Element:a
											Elasticsearch
										Element:li
										Element:a
											Kibana
										Element:li
										Element:a
											Beats
										Element:li
										Element:a
											Logstash
										Element:li
										Element:a
											X-Pack
										Element:li
										Element:a
											Elastic Cloud
										Element:li
										Element:a
											Security (formerly Shield)
										Element:li
										Element:a
											Alerting (via Watcher)
										Element:li
										Element:a
											Monitoring (formerly Marvel)
										Element:li
										Element:a
											Graph
										Element:li
										Element:a
											Reporting
										Element:li
										Element:a
											Machine Learning
										Element:li
										Element:a
											ES-Hadoop
										Element:h3
											Resources
										Element:ul
										Element:li
										Element:a
											Blog
										Element:li
										Element:a
											Cloud Status
										Element:li
										Element:a
											Community
										Element:li
										Element:a
											Customers & Use Cases
										Element:li
										Element:a
											Documentation
										Element:li
										Element:a
											Elastic{ON} Events
										Element:li
										Element:a
											Forums
										Element:li
										Element:a
											Meetups
										Element:li
										Element:a
											Subscriptions
										Element:li
										Element:a
											Support Portal
										Element:li
										Element:a
											Videos & Webinars
										Element:li
										Element:a
											Training
										Element:h3
										Element:a
											About >
										Element:ul
										Element:li
										Element:a
											Careers/Jobs
										Element:li
										Element:a
											Contact
										Element:li
										Element:a
											Leadership
										Element:li
										Element:a
											Partners
										Element:li
										Element:a
											Press
										Element:h3
											Language
										Element:ul
										Element:li
										Element:a
											English
										Element:li
										Element:a
											Français
										Element:li
										Element:a
											Deutsch
										Element:li
										Element:a
											日本語
										Element:li
										Element:a
											한국어
										Element:p
											FOLLOW US
										Element:ul
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:ul
										Element:li
										Element:a
											Trademarks
										Element:li
										Element:a
											Terms of Use
										Element:li
										Element:a
											Privacy
										Element:li
										Element:a
											Cookie Policy
										Element:li
										Element:a
											Brand
										Element:a
										Element:img
										Element:p
											© 2017. All Rights Reserved - Elasticsearch
										Element:p
											Elasticsearch is a trademark of Elasticsearch BV, registered in the U.S. and in other countries
										Element:p
											Apache, Apache Lucene, Apache Hadoop, Hadoop, HDFS and the yellow elephant logo are trademarks of the
										Element:a
											Apache Software Foundation
											in the United States and/or other countries.
