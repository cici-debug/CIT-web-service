Node:
(type) c
(layer)0
	Element:body
						Node:
						(type) h2
						(layer)2
							Element:h2
							Element:a
								Percolator type
							Element:a
								edit
						Node:
						(type) c
						(layer)2
							Element:p
								The
							Element:code
								percolator
								field type parses a json structure into a native query and stores that query, so that the
							Element:a
								percolate query
								can use it to match provided documents.
						Node:
						(type) c
						(layer)2
							Element:p
								Any field that contains a json object can be configured to be a percolator field. The percolator field type has no settings. Just configuring the
							Element:code
								percolator
								field type is sufficient to instruct Elasticsearch to treat a field as a query.
						Node:
						(type) c
						(layer)2
							Element:p
								If the following mapping configures the
							Element:code
								percolator
								field type for the
							Element:code
								query
								field:
						Node:
						(type) c
						(layer)2
							Element:pre
								{ "properties": { "query": { "type": "percolator" } } }
						Node:
						(type) c
						(layer)2
							Element:p
								Then the following json snippet can be indexed as a native query:
						Node:
						(type) c
						(layer)2
							Element:pre
								{ "query" : { "match" : { "field" : "value" } } }
						Node:
						(type) c
						(layer)2
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
								Fields referred to in a percolator query must
							Element:span
								exist in the mapping associated with the index used for percolation. In order to make sure these fields exist, add or update a mapping via the
							Element:strong
								already
							Element:a
								create index
								or
							Element:a
								put mapping
								APIs. Fields referred in a percolator query may exist in any type of the index containing the
							Element:code
								percolator
								field type.
						Node:
						(type) c
						(layer)2
							Element:p
								Also an index can only contain up to one percolator field mapping. Multiple percolator fields will be rejected by the put index and put mapping APIs.
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:a
														Dedicated Percolator Index
													Element:a
														edit
												Node:
												(type) c
												(layer)4
													Element:p
														Percolate queries can be added to any index. Instead of adding percolate queries to the index the data resides in, these queries can also be added to a dedicated index. The advantage of this is that this dedicated percolator index can have its own index settings (For example the number of primary and replica shards). If you choose to have a dedicated percolate index, you need to make sure that the mappings from the normal index are also available on the percolate index. Otherwise percolate queries can be parsed incorrectly.
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:a
														Forcing Unmapped Fields to be Handled as Strings
													Element:a
														edit
												Node:
												(type) c
												(layer)4
													Element:p
														In certain cases it is unknown what kind of percolator queries do get registered, and if no field mapping exists for fields that are referred by percolator queries then adding a percolator query fails. This means the mapping needs to be updated to have the field with the appropriate settings, and then the percolator query can be added. But sometimes it is sufficient if all unmapped fields are handled as if these were default string fields. In those cases one can configure the
													Element:code
														index.percolator.map_unmapped_fields_as_string
														setting to
													Element:code
														true
														(default to
													Element:code
														false
														) and then if a field referred in a percolator query does not exist, it will be handled as a default string field so that adding the percolator query doesn’t fail.
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:a
														Limitations
													Element:a
														edit
												Node:
												(type) c
												(layer)4
													Element:p
														Because the
													Element:code
														percolate
														query is processing one document at a time, it doesn’t support queries and filters that run against child documents such as
													Element:code
														has_child
														and
													Element:code
														has_parent
														.
												Node:
												(type) c
												(layer)4
													Element:p
														The percolator doesn’t accepts percolator queries containing
													Element:code
														range
														queries with ranges that are based on current time (using
													Element:code
														now
														).
												Node:
												(type) c
												(layer)4
													Element:p
														There are a number of queries that fetch data via a get call during query parsing. For example the
													Element:code
														terms
														query when using terms lookup,
													Element:code
														template
														query when using indexed scripts and
													Element:code
														geo_shape
														when using pre-indexed shapes. When these queries are indexed by the
													Element:code
														percolator
														field type then the get call is executed once. So each time the
													Element:code
														percolator
														query evaluates these queries, the fetches terms, shapes etc. as the were upon index time will be used. Important to note is that fetching of terms that these queries do, happens both each time the percolator query gets indexed on both primary and replica shards, so the terms that are actually indexed can be different between shard copies, if the source index changed while indexing.
												Node:
												(type) c
												(layer)4
													Element:span
													Element:a
														« Token count datatype
												Node:
												(type) c
												(layer)4
													Element:span
													Element:a
														Meta-Fields »
												Node:
												(type) c
												(layer)4
									Node:
									(type) c
									(layer)3
										Element:h3
											Top Videos
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:a
											Elasticsearch Demo
										Element:li
										Element:a
											Kibana 101
										Element:li
										Element:a
											Logstash Primer
									Node:
									(type) c
									(layer)3
															Node:
															(type) c
															(layer)5
																Element:h5
																	Be in the know with the latest and greatest from Elastic.
															Node:
															(type) c
															(layer)5
																Element:p
																	Thanks for subscribing! We'll keep you updated with new releases.
												Node:
												(type) c
												(layer)4
									Node:
									(type) c
									(layer)3
										Element:footer
										Element:h3
										Element:a
											Products >
										Element:ul
										Element:li
										Element:a
											Elasticsearch
										Element:li
										Element:a
											Kibana
										Element:li
										Element:a
											Beats
										Element:li
										Element:a
											Logstash
										Element:li
										Element:a
											X-Pack
										Element:li
										Element:a
											Elastic Cloud
										Element:li
										Element:a
											Security (formerly Shield)
										Element:li
										Element:a
											Alerting (via Watcher)
										Element:li
										Element:a
											Monitoring (formerly Marvel)
										Element:li
										Element:a
											Graph
										Element:li
										Element:a
											Reporting
										Element:li
										Element:a
											Machine Learning
										Element:li
										Element:a
											ES-Hadoop
										Element:h3
											Resources
										Element:ul
										Element:li
										Element:a
											Blog
										Element:li
										Element:a
											Cloud Status
										Element:li
										Element:a
											Community
										Element:li
										Element:a
											Customers & Use Cases
										Element:li
										Element:a
											Documentation
										Element:li
										Element:a
											Elastic{ON} Events
										Element:li
										Element:a
											Forums
										Element:li
										Element:a
											Meetups
										Element:li
										Element:a
											Subscriptions
										Element:li
										Element:a
											Support Portal
										Element:li
										Element:a
											Videos & Webinars
										Element:li
										Element:a
											Training
										Element:h3
										Element:a
											About >
										Element:ul
										Element:li
										Element:a
											Careers/Jobs
										Element:li
										Element:a
											Contact
										Element:li
										Element:a
											Leadership
										Element:li
										Element:a
											Partners
										Element:li
										Element:a
											Press
										Element:h3
											Language
										Element:ul
										Element:li
										Element:a
											English
										Element:li
										Element:a
											Français
										Element:li
										Element:a
											Deutsch
										Element:li
										Element:a
											日本語
										Element:li
										Element:a
											한국어
										Element:p
											FOLLOW US
										Element:ul
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:ul
										Element:li
										Element:a
											Trademarks
										Element:li
										Element:a
											Terms of Use
										Element:li
										Element:a
											Privacy
										Element:li
										Element:a
											Cookie Policy
										Element:li
										Element:a
											Brand
										Element:a
										Element:img
										Element:p
											© 2017. All Rights Reserved - Elasticsearch
										Element:p
											Elasticsearch is a trademark of Elasticsearch BV, registered in the U.S. and in other countries
										Element:p
											Apache, Apache Lucene, Apache Hadoop, Hadoop, HDFS and the yellow elephant logo are trademarks of the
										Element:a
											Apache Software Foundation
											in the United States and/or other countries.
