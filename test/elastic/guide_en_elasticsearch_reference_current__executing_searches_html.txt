Node:
(type) c
(layer)0
	Element:body
						Node:
						(type) h2
						(layer)2
							Element:h2
							Element:a
								Executing Searches
							Element:a
								edit
						Node:
						(type) c
						(layer)2
							Element:p
								Now that we have seen a few of the basic search parameters, let’s dig in some more into the Query DSL. Let’s first take a look at the returned document fields. By default, the full JSON document is returned as part of all searches. This is referred to as the source (
							Element:code
								_source
								field in the search hits). If we don’t want the entire source document returned, we have the ability to request only a few fields from within source to be returned.
						Node:
						(type) c
						(layer)2
							Element:p
								This example shows how to return two fields,
							Element:code
								account_number
								and
							Element:code
								balance
								(inside of
							Element:code
								_source
								), from the search:
						Node:
						(type) c
						(layer)2
							Element:pre
								GET /bank/_search { "query": { "match_all": {} }, "_source": ["account_number", "balance"] }
						Node:
						(type) c
						(layer)2
							Element:p
								Note that the above example simply reduces the
							Element:code
								_source
								field. It will still only return one field named
							Element:code
								_source
								but within it, only the fields
							Element:code
								account_number
								and
							Element:code
								balance
								are included.
						Node:
						(type) c
						(layer)2
							Element:p
								If you come from a SQL background, the above is somewhat similar in concept to the
							Element:code
								SQL SELECT FROM
								field list.
						Node:
						(type) c
						(layer)2
							Element:p
								Now let’s move on to the query part. Previously, we’ve seen how the
							Element:code
								match_all
								query is used to match all documents. Let’s now introduce a new query called the
							Element:a
								, which can be thought of as a basic fielded search query (i.e. a search done against a specific field or set of fields).
							Element:code
								match
								query
						Node:
						(type) c
						(layer)2
							Element:p
								This example returns the account numbered 20:
						Node:
						(type) c
						(layer)2
							Element:pre
								GET /bank/_search { "query": { "match": { "account_number": 20 } } }
						Node:
						(type) c
						(layer)2
							Element:p
								This example returns all accounts containing the term "mill" in the address:
						Node:
						(type) c
						(layer)2
							Element:pre
								GET /bank/_search { "query": { "match": { "address": "mill" } } }
						Node:
						(type) c
						(layer)2
							Element:p
								This example returns all accounts containing the term "mill" or "lane" in the address:
						Node:
						(type) c
						(layer)2
							Element:pre
								GET /bank/_search { "query": { "match": { "address": "mill lane" } } }
						Node:
						(type) c
						(layer)2
							Element:p
								This example is a variant of
							Element:code
								match
								(
							Element:code
								match_phrase
								) that returns all accounts containing the phrase "mill lane" in the address:
						Node:
						(type) c
						(layer)2
							Element:pre
								GET /bank/_search { "query": { "match_phrase": { "address": "mill lane" } } }
						Node:
						(type) c
						(layer)2
							Element:p
								Let’s now introduce the
							Element:a
								. The
							Element:code
								bool
								(ean) query
							Element:code
								bool
								query allows us to compose smaller queries into bigger queries using boolean logic.
						Node:
						(type) c
						(layer)2
							Element:p
								This example composes two
							Element:code
								match
								queries and returns all accounts containing "mill" and "lane" in the address:
						Node:
						(type) c
						(layer)2
							Element:pre
								GET /bank/_search { "query": { "bool": { "must": [ { "match": { "address": "mill" } }, { "match": { "address": "lane" } } ] } } }
						Node:
						(type) c
						(layer)2
							Element:p
								In the above example, the
							Element:code
								bool must
								clause specifies all the queries that must be true for a document to be considered a match.
						Node:
						(type) c
						(layer)2
							Element:p
								In contrast, this example composes two
							Element:code
								match
								queries and returns all accounts containing "mill" or "lane" in the address:
						Node:
						(type) c
						(layer)2
							Element:pre
								GET /bank/_search { "query": { "bool": { "should": [ { "match": { "address": "mill" } }, { "match": { "address": "lane" } } ] } } }
						Node:
						(type) c
						(layer)2
							Element:p
								In the above example, the
							Element:code
								bool should
								clause specifies a list of queries either of which must be true for a document to be considered a match.
						Node:
						(type) c
						(layer)2
							Element:p
								This example composes two
							Element:code
								match
								queries and returns all accounts that contain neither "mill" nor "lane" in the address:
						Node:
						(type) c
						(layer)2
							Element:pre
								GET /bank/_search { "query": { "bool": { "must_not": [ { "match": { "address": "mill" } }, { "match": { "address": "lane" } } ] } } }
						Node:
						(type) c
						(layer)2
							Element:p
								In the above example, the
							Element:code
								bool must_not
								clause specifies a list of queries none of which must be true for a document to be considered a match.
						Node:
						(type) c
						(layer)2
							Element:p
								We can combine
							Element:code
								must
								,
							Element:code
								should
								, and
							Element:code
								must_not
								clauses simultaneously inside a
							Element:code
								bool
								query. Furthermore, we can compose
							Element:code
								bool
								queries inside any of these
							Element:code
								bool
								clauses to mimic any complex multi-level boolean logic.
						Node:
						(type) c
						(layer)2
							Element:p
								This example returns all accounts of anybody who is 40 years old but doesn’t live in ID(aho):
						Node:
						(type) c
						(layer)2
							Element:pre
								GET /bank/_search { "query": { "bool": { "must": [ { "match": { "age": "40" } } ], "must_not": [ { "match": { "state": "ID" } } ] } } }
						Node:
						(type) c
						(layer)2
							Element:span
							Element:a
								« Introducing the Query Language
						Node:
						(type) c
						(layer)2
							Element:span
							Element:a
								Executing Filters »
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Top Videos
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:a
											Elasticsearch Demo
										Element:li
										Element:a
											Kibana 101
										Element:li
										Element:a
											Logstash Primer
									Node:
									(type) c
									(layer)3
															Node:
															(type) c
															(layer)5
																Element:h5
																	Be in the know with the latest and greatest from Elastic.
															Node:
															(type) c
															(layer)5
																Element:p
																	Thanks for subscribing! We'll keep you updated with new releases.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:footer
										Element:h3
										Element:a
											Products >
										Element:ul
										Element:li
										Element:a
											Elasticsearch
										Element:li
										Element:a
											Kibana
										Element:li
										Element:a
											Beats
										Element:li
										Element:a
											Logstash
										Element:li
										Element:a
											X-Pack
										Element:li
										Element:a
											Elastic Cloud
										Element:li
										Element:a
											Security (formerly Shield)
										Element:li
										Element:a
											Alerting (via Watcher)
										Element:li
										Element:a
											Monitoring (formerly Marvel)
										Element:li
										Element:a
											Graph
										Element:li
										Element:a
											Reporting
										Element:li
										Element:a
											Machine Learning
										Element:li
										Element:a
											ES-Hadoop
										Element:h3
											Resources
										Element:ul
										Element:li
										Element:a
											Blog
										Element:li
										Element:a
											Cloud Status
										Element:li
										Element:a
											Community
										Element:li
										Element:a
											Customers & Use Cases
										Element:li
										Element:a
											Documentation
										Element:li
										Element:a
											Elastic{ON} Events
										Element:li
										Element:a
											Forums
										Element:li
										Element:a
											Meetups
										Element:li
										Element:a
											Subscriptions
										Element:li
										Element:a
											Support Portal
										Element:li
										Element:a
											Videos & Webinars
										Element:li
										Element:a
											Training
										Element:h3
										Element:a
											About >
										Element:ul
										Element:li
										Element:a
											Careers/Jobs
										Element:li
										Element:a
											Contact
										Element:li
										Element:a
											Leadership
										Element:li
										Element:a
											Partners
										Element:li
										Element:a
											Press
										Element:h3
											Language
										Element:ul
										Element:li
										Element:a
											English
										Element:li
										Element:a
											Français
										Element:li
										Element:a
											Deutsch
										Element:li
										Element:a
											日本語
										Element:li
										Element:a
											한국어
										Element:p
											FOLLOW US
										Element:ul
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:ul
										Element:li
										Element:a
											Trademarks
										Element:li
										Element:a
											Terms of Use
										Element:li
										Element:a
											Privacy
										Element:li
										Element:a
											Cookie Policy
										Element:li
										Element:a
											Brand
										Element:a
										Element:img
										Element:p
											© 2017. All Rights Reserved - Elasticsearch
										Element:p
											Elasticsearch is a trademark of Elasticsearch BV, registered in the U.S. and in other countries
										Element:p
											Apache, Apache Lucene, Apache Hadoop, Hadoop, HDFS and the yellow elephant logo are trademarks of the
										Element:a
											Apache Software Foundation
											in the United States and/or other countries.
