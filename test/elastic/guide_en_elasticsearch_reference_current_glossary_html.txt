Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
				Element:a
					Glossary of terms
				Element:a
					edit
			Node:
			(type) c
			(layer)1
				Element:dl
				Element:dt
				Element:span
				Element:a
					analysis
				Element:dd
				Element:p
					Analysis is the process of converting
				Element:a
					full text
					to
				Element:a
					terms
					. Depending on which analyzer is used, these phrases:
				Element:code
					FOO BAR
					,
				Element:code
					Foo-Bar
					,
				Element:code
					foo,bar
					will probably all result in the terms
				Element:code
					foo
					and
				Element:code
					bar
					. These terms are what is actually stored in the index. A full text query (not a
				Element:a
					term
					query) for
				Element:code
					FoO:bAR
					will also be analyzed to the terms
				Element:code
					foo
					,
				Element:code
					bar
					and will thus match the terms stored in the index. It is this process of analysis (both at index time and at search time) that allows elasticsearch to perform full text queries. Also see
				Element:a
					text
					and
				Element:a
					term
					.
				Element:dt
				Element:span
				Element:a
					cluster
				Element:dd
				Element:p
					A cluster consists of one or more
				Element:a
					nodes
					which share the same cluster name. Each cluster has a single master node which is chosen automatically by the cluster and which can be replaced if the current master node fails.
				Element:dt
				Element:span
				Element:a
					document
				Element:dd
				Element:p
					A document is a JSON document which is stored in elasticsearch. It is like a row in a table in a relational database. Each document is stored in an
				Element:a
					index
					and has a
				Element:a
					type
					and an
				Element:a
					id
					. A document is a JSON object (also known in other languages as a hash / hashmap / associative array) which contains zero or more
				Element:a
					fields
					, or key-value pairs. The original JSON document that is indexed will be stored in the
				Element:a
					, which is returned by default when getting or searching for a document.
				Element:code
					_source
					field
				Element:dt
				Element:span
				Element:a
					id
				Element:dd
				Element:p
					The ID of a
				Element:a
					document
					identifies a document. The
				Element:code
					index/type/id
					of a document must be unique. If no ID is provided, then it will be auto-generated. (also see
				Element:a
					routing
					)
				Element:dt
				Element:span
				Element:a
					field
				Element:dd
				Element:p
					A
				Element:a
					document
					contains a list of fields, or key-value pairs. The value can be a simple (scalar) value (eg a string, integer, date), or a nested structure like an array or an object. A field is similar to a column in a table in a relational database. The
				Element:a
					mapping
					for each field has a field
				Element:span
					(not to be confused with document
				Element:em
					type
				Element:a
					type
					) which indicates the type of data that can be stored in that field, eg
				Element:code
					integer
					,
				Element:code
					string
					,
				Element:code
					object
					. The mapping also allows you to define (amongst other things) how the value for a field should be analyzed.
				Element:dt
				Element:span
				Element:a
					index
				Element:dd
				Element:p
					An index is like a
				Element:span
					in a relational database. It has a
				Element:em
					table
				Element:a
					mapping
					which defines the
				Element:a
					fields
					in the index, which are grouped by multiple
				Element:a
					type
					. An index is a logical namespace which maps to one or more
				Element:a
					primary shards
					and can have zero or more
				Element:a
					replica shards
					.
				Element:dt
				Element:span
				Element:a
					mapping
				Element:dd
				Element:p
					A mapping is like a
				Element:span
					in a relational database. Each
				Element:em
					schema definition
				Element:a
					index
					has a mapping, which defines each
				Element:a
					type
					within the index, plus a number of index-wide settings. A mapping can either be defined explicitly, or it will be generated automatically when a document is indexed.
				Element:dt
				Element:span
				Element:a
					node
				Element:dd
				Element:p
					A node is a running instance of elasticsearch which belongs to a
				Element:a
					cluster
					. Multiple nodes can be started on a single server for testing purposes, but usually you should have one node per server. At startup, a node will use unicast to discover an existing cluster with the same cluster name and will try to join that cluster.
				Element:dt
				Element:span
				Element:a
					primary shard
				Element:dd
				Element:p
					Each document is stored in a single primary
				Element:a
					shard
					. When you index a document, it is indexed first on the primary shard, then on all
				Element:a
					replicas
					of the primary shard. By default, an
				Element:a
					index
					has 5 primary shards. You can specify fewer or more primary shards to scale the number of
				Element:a
					documents
					that your index can handle. You cannot change the number of primary shards in an index, once the index is created. See also
				Element:a
					routing
				Element:dt
				Element:span
				Element:a
					replica shard
				Element:dd
				Element:p
					Each
				Element:a
					primary shard
					can have zero or more replicas. A replica is a copy of the primary shard, and has two purposes:
				Element:ol
				Element:li
					increase failover: a replica shard can be promoted to a primary shard if the primary fails
				Element:li
					increase performance: get and search requests can be handled by primary or replica shards. By default, each primary shard has one replica, but the number of replicas can be changed dynamically on an existing index. A replica shard will never be started on the same node as its primary shard.
				Element:dt
				Element:span
				Element:a
					routing
				Element:dd
				Element:p
					When you index a document, it is stored on a single
				Element:a
					primary shard
					. That shard is chosen by hashing the
				Element:code
					routing
					value. By default, the
				Element:code
					routing
					value is derived from the ID of the document or, if the document has a specified parent document, from the ID of the parent document (to ensure that child and parent documents are stored on the same shard). This value can be overridden by specifying a
				Element:code
					routing
					value at index time, or a
				Element:a
					routing field
					in the
				Element:a
					mapping
					.
				Element:dt
				Element:span
				Element:a
					shard
				Element:dd
				Element:p
					A shard is a single Lucene instance. It is a low-level “worker” unit which is managed automatically by elasticsearch. An index is a logical namespace which points to
				Element:a
					primary
					and
				Element:a
					replica
					shards. Other than defining the number of primary and replica shards that an index should have, you never need to refer to shards directly. Instead, your code should deal only with an index. Elasticsearch distributes shards amongst all
				Element:a
					nodes
					in the
				Element:a
					cluster
					, and can move shards automatically from one node to another in the case of node failure, or the addition of new nodes.
				Element:dt
				Element:span
				Element:a
					source field
				Element:dd
				Element:p
					By default, the JSON document that you index will be stored in the
				Element:code
					_source
					field and will be returned by all get and search requests. This allows you access to the original object directly from search results, rather than requiring a second step to retrieve the object from an ID.
				Element:dt
				Element:span
				Element:a
					term
				Element:dd
				Element:p
					A term is an exact value that is indexed in elasticsearch. The terms
				Element:code
					foo
					,
				Element:code
					Foo
					,
				Element:code
					FOO
					are NOT equivalent. Terms (i.e. exact values) can be searched for using
				Element:span
					queries. See also
				Element:em
					term
				Element:a
					text
					and
				Element:a
					analysis
					.
				Element:dt
				Element:span
				Element:a
					text
				Element:dd
				Element:p
					Text (or full text) is ordinary unstructured text, such as this paragraph. By default, text will be
				Element:a
					analyzed
					into
				Element:a
					terms
					, which is what is actually stored in the index. Text
				Element:a
					fields
					need to be analyzed at index time in order to be searchable as full text, and keywords in full text queries must be analyzed at search time to produce (and search for) the same terms that were generated at index time. See also
				Element:a
					term
					and
				Element:a
					analysis
					.
				Element:dt
				Element:span
				Element:a
					type
				Element:dd
				Element:p
					A type represents the
				Element:span
					of document, e.g. an
				Element:em
					type
				Element:code
					email
					, a
				Element:code
					user
					, or a
				Element:code
					tweet
					. The search API can filter documents by type. An
				Element:a
					index
					can contain multiple types, and each type has a list of
				Element:a
					fields
					that can be specified for
				Element:a
					documents
					of that type. Fields with the same name in different types in the same index must have the same
				Element:a
					mapping
					(which defines how each field in the document is indexed and made searchable).
			Node:
			(type) c
			(layer)1
				Element:span
				Element:a
					« Assertions
			Node:
			(type) c
			(layer)1
				Element:span
				Element:a
					Release Notes »
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
											Top Videos
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:a
											Elasticsearch Demo
										Element:li
										Element:a
											Kibana 101
										Element:li
										Element:a
											Logstash Primer
									Node:
									(type) c
									(layer)3
															Node:
															(type) c
															(layer)5
																Element:h5
																	Be in the know with the latest and greatest from Elastic.
															Node:
															(type) c
															(layer)5
																Element:p
																	Thanks for subscribing! We'll keep you updated with new releases.
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:footer
										Element:h3
										Element:a
											Products >
										Element:ul
										Element:li
										Element:a
											Elasticsearch
										Element:li
										Element:a
											Kibana
										Element:li
										Element:a
											Beats
										Element:li
										Element:a
											Logstash
										Element:li
										Element:a
											X-Pack
										Element:li
										Element:a
											Elastic Cloud
										Element:li
										Element:a
											Security (formerly Shield)
										Element:li
										Element:a
											Alerting (via Watcher)
										Element:li
										Element:a
											Monitoring (formerly Marvel)
										Element:li
										Element:a
											Graph
										Element:li
										Element:a
											Reporting
										Element:li
										Element:a
											Machine Learning
										Element:li
										Element:a
											ES-Hadoop
										Element:h3
											Resources
										Element:ul
										Element:li
										Element:a
											Blog
										Element:li
										Element:a
											Cloud Status
										Element:li
										Element:a
											Community
										Element:li
										Element:a
											Customers & Use Cases
										Element:li
										Element:a
											Documentation
										Element:li
										Element:a
											Elastic{ON} Events
										Element:li
										Element:a
											Forums
										Element:li
										Element:a
											Meetups
										Element:li
										Element:a
											Subscriptions
										Element:li
										Element:a
											Support Portal
										Element:li
										Element:a
											Videos & Webinars
										Element:li
										Element:a
											Training
										Element:h3
										Element:a
											About >
										Element:ul
										Element:li
										Element:a
											Careers/Jobs
										Element:li
										Element:a
											Contact
										Element:li
										Element:a
											Leadership
										Element:li
										Element:a
											Partners
										Element:li
										Element:a
											Press
										Element:h3
											Language
										Element:ul
										Element:li
										Element:a
											English
										Element:li
										Element:a
											Français
										Element:li
										Element:a
											Deutsch
										Element:li
										Element:a
											日本語
										Element:li
										Element:a
											한국어
										Element:p
											FOLLOW US
										Element:ul
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:ul
										Element:li
										Element:a
											Trademarks
										Element:li
										Element:a
											Terms of Use
										Element:li
										Element:a
											Privacy
										Element:li
										Element:a
											Cookie Policy
										Element:li
										Element:a
											Brand
										Element:a
										Element:img
										Element:p
											© 2017. All Rights Reserved - Elasticsearch
										Element:p
											Elasticsearch is a trademark of Elasticsearch BV, registered in the U.S. and in other countries
										Element:p
											Apache, Apache Lucene, Apache Hadoop, Hadoop, HDFS and the yellow elephant logo are trademarks of the
										Element:a
											Apache Software Foundation
											in the United States and/or other countries.
