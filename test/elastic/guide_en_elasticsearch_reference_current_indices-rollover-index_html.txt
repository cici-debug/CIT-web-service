Node:
(type) c
(layer)0
	Element:body
						Node:
						(type) h2
						(layer)2
							Element:h2
							Element:a
								Rollover Index
							Element:a
								edit
						Node:
						(type) c
						(layer)2
							Element:p
								The rollover index API rolls an alias over to a new index when the existing index is considered to be too large or too old.
						Node:
						(type) c
						(layer)2
							Element:p
								The API accepts a single alias name and a list of
							Element:code
								conditions
								. The alias must point to a single index only. If the index satisfies the specified conditions then a new index is created and the alias is switched to point to the new index.
						Node:
						(type) c
						(layer)2
							Element:pre
								PUT /logs-000001
							Element:a
							Element:span
								{ "aliases": { "logs_write": {} } } # Add > 1000 documents to logs-000001 POST /logs_write/_rollover
							Element:img
							Element:a
							Element:span
								{ "conditions": { "max_age": "7d", "max_docs": 1000 } }
							Element:img
						Node:
						(type) c
						(layer)2
							Element:table
							Element:tr
							Element:td
							Element:p
							Element:a
							Element:span
							Element:img
							Element:td
							Element:p
								Creates an index called
							Element:code
								logs-0000001
								with the alias
							Element:code
								logs_write
								.
							Element:tr
							Element:td
							Element:p
							Element:a
							Element:span
							Element:img
							Element:td
							Element:p
								If the index pointed to by
							Element:code
								logs_write
								was created 7 or more days ago, or contains 1,000 or more documents, then the
							Element:code
								logs-000002
								index is created and the
							Element:code
								logs_write
								alias is updated to point to
							Element:code
								logs-000002
								.
						Node:
						(type) c
						(layer)2
							Element:p
								The above request might return the following response:
						Node:
						(type) c
						(layer)2
							Element:pre
								{ "acknowledged": true, "shards_acknowledged": true, "old_index": "logs-000001", "new_index": "logs-000002", "rolled_over": true,
							Element:a
							Element:span
								"dry_run": false,
							Element:img
							Element:a
							Element:span
								"conditions": {
							Element:img
							Element:a
							Element:span
								"[max_age: 7d]": false, "[max_docs: 1000]": true } }
							Element:img
						Node:
						(type) c
						(layer)2
							Element:table
							Element:tr
							Element:td
							Element:p
							Element:a
							Element:span
							Element:img
							Element:td
							Element:p
								Whether the index was rolled over.
							Element:tr
							Element:td
							Element:p
							Element:a
							Element:span
							Element:img
							Element:td
							Element:p
								Whether the rollover was dry run.
							Element:tr
							Element:td
							Element:p
							Element:a
							Element:span
							Element:img
							Element:td
							Element:p
								The result of each condition.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Naming the new index
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											If the name of the existing index ends with
										Element:code
											-
											and a number — e.g.
										Element:code
											logs-000001
											— then the name of the new index will follow the same pattern, incrementing the number (
										Element:code
											logs-000002
											). The number is zero-padded with a length of 6, regardless of the old index name.
									Node:
									(type) c
									(layer)3
										Element:p
											If the old name doesn’t match this pattern then you must specify the name for the new index as follows:
									Node:
									(type) c
									(layer)3
										Element:pre
											POST /my_alias/_rollover/my_new_index_name { "conditions": { "max_age": "7d", "max_docs": 1000 } }
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Using date math with the rolllover API
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											It can be useful to use
										Element:a
											date math
											to name the rollover index according to the date that the index rolled over, e.g.
										Element:code
											logstash-2016.02.03
											. The rollover API supports date math, but requires the index name to end with a dash followed by a number, e.g.
										Element:code
											logstash-2016.02.03-1
											which is incremented every time the index is rolled over. For instance:
									Node:
									(type) c
									(layer)3
										Element:pre
											# PUT /<logs-{now/d}-1> with URI encoding: PUT /%3Clogs-%7Bnow%2Fd%7D-1%3E
										Element:a
										Element:span
											{ "aliases": { "logs_write": {} } } PUT logs_write/log/1 { "message": "a dummy log" } POST logs_write/_refresh # Wait for a day to pass POST /logs_write/_rollover
										Element:img
										Element:a
										Element:span
											{ "conditions": { "max_docs": "1" } }
										Element:img
									Node:
									(type) c
									(layer)3
										Element:table
										Element:tr
										Element:td
										Element:p
										Element:a
										Element:span
										Element:img
										Element:td
										Element:p
											Creates an index named with today’s date (e.g.)
										Element:code
											logs-2016.10.31-1
										Element:tr
										Element:td
										Element:p
										Element:a
										Element:span
										Element:img
										Element:td
										Element:p
											Rolls over to a new index with today’s date, e.g.
										Element:code
											logs-2016.10.31-000002
											if run immediately, or
										Element:code
											logs-2016.11.01-000002
											if run after 24 hours
									Node:
									(type) c
									(layer)3
										Element:p
											These indices can then be referenced as described in the
										Element:a
											date math documentation
											. For example, to search over indices created in the last three days, you could do the following:
									Node:
									(type) c
									(layer)3
										Element:pre
											# GET /<logs-{now/d}-*>,<logs-{now/d-1d}-*>,<logs-{now/d-2d}-*>/_search GET /%3Clogs-%7Bnow%2Fd%7D-*%3E%2C%3Clogs-%7Bnow%2Fd-1d%7D-*%3E%2C%3Clogs-%7Bnow%2Fd-2d%7D-*%3E/_search
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Defining the new index
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											The settings, mappings, and aliases for the new index are taken from any matching
										Element:a
											index templates
											. Additionally, you can specify
										Element:code
											settings
											,
										Element:code
											mappings
											, and
										Element:code
											aliases
											in the body of the request, just like the
										Element:a
											create index
											API. Values specified in the request override any values set in matching index templates. For example, the following
										Element:code
											rollover
											request overrides the
										Element:code
											index.number_of_shards
											setting:
									Node:
									(type) c
									(layer)3
										Element:pre
											PUT /logs-000001 { "aliases": { "logs_write": {} } } POST /logs_write/_rollover { "conditions" : { "max_age": "7d", "max_docs": 1000 }, "settings": { "index.number_of_shards": 2 } }
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Dry run
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											The rollover API supports
										Element:code
											dry_run
											mode, where request conditions can be checked without performing the actual rollover:
									Node:
									(type) c
									(layer)3
										Element:pre
											PUT /logs-000001 { "aliases": { "logs_write": {} } } POST /logs_write/_rollover?dry_run { "conditions" : { "max_age": "7d", "max_docs": 1000 } }
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Wait For Active Shards
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											Because the rollover operation creates a new index to rollover to, the
										Element:a
											setting on index creation applies to the rollover action as well.
										Element:code
											wait_for_active_shards
									Node:
									(type) c
									(layer)3
										Element:span
										Element:a
											« Shrink Index
									Node:
									(type) c
									(layer)3
										Element:span
										Element:a
											Put Mapping »
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Top Videos
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:a
											Elasticsearch Demo
										Element:li
										Element:a
											Kibana 101
										Element:li
										Element:a
											Logstash Primer
									Node:
									(type) c
									(layer)3
															Node:
															(type) c
															(layer)5
																Element:h5
																	Be in the know with the latest and greatest from Elastic.
															Node:
															(type) c
															(layer)5
																Element:p
																	Thanks for subscribing! We'll keep you updated with new releases.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:footer
										Element:h3
										Element:a
											Products >
										Element:ul
										Element:li
										Element:a
											Elasticsearch
										Element:li
										Element:a
											Kibana
										Element:li
										Element:a
											Beats
										Element:li
										Element:a
											Logstash
										Element:li
										Element:a
											X-Pack
										Element:li
										Element:a
											Elastic Cloud
										Element:li
										Element:a
											Security (formerly Shield)
										Element:li
										Element:a
											Alerting (via Watcher)
										Element:li
										Element:a
											Monitoring (formerly Marvel)
										Element:li
										Element:a
											Graph
										Element:li
										Element:a
											Reporting
										Element:li
										Element:a
											Machine Learning
										Element:li
										Element:a
											ES-Hadoop
										Element:h3
											Resources
										Element:ul
										Element:li
										Element:a
											Blog
										Element:li
										Element:a
											Cloud Status
										Element:li
										Element:a
											Community
										Element:li
										Element:a
											Customers & Use Cases
										Element:li
										Element:a
											Documentation
										Element:li
										Element:a
											Elastic{ON} Events
										Element:li
										Element:a
											Forums
										Element:li
										Element:a
											Meetups
										Element:li
										Element:a
											Subscriptions
										Element:li
										Element:a
											Support Portal
										Element:li
										Element:a
											Videos & Webinars
										Element:li
										Element:a
											Training
										Element:h3
										Element:a
											About >
										Element:ul
										Element:li
										Element:a
											Careers/Jobs
										Element:li
										Element:a
											Contact
										Element:li
										Element:a
											Leadership
										Element:li
										Element:a
											Partners
										Element:li
										Element:a
											Press
										Element:h3
											Language
										Element:ul
										Element:li
										Element:a
											English
										Element:li
										Element:a
											Français
										Element:li
										Element:a
											Deutsch
										Element:li
										Element:a
											日本語
										Element:li
										Element:a
											한국어
										Element:p
											FOLLOW US
										Element:ul
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:ul
										Element:li
										Element:a
											Trademarks
										Element:li
										Element:a
											Terms of Use
										Element:li
										Element:a
											Privacy
										Element:li
										Element:a
											Cookie Policy
										Element:li
										Element:a
											Brand
										Element:a
										Element:img
										Element:p
											© 2017. All Rights Reserved - Elasticsearch
										Element:p
											Elasticsearch is a trademark of Elasticsearch BV, registered in the U.S. and in other countries
										Element:p
											Apache, Apache Lucene, Apache Hadoop, Hadoop, HDFS and the yellow elephant logo are trademarks of the
										Element:a
											Apache Software Foundation
											in the United States and/or other countries.
