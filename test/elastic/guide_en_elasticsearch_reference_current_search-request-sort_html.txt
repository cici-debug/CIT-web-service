Node:
(type) c
(layer)0
	Element:body
						Node:
						(type) h2
						(layer)2
							Element:h2
							Element:a
								Sort
							Element:a
								edit
						Node:
						(type) c
						(layer)2
							Element:p
								Allows to add one or more sort on specific fields. Each sort can be reversed as well. The sort is defined on a per field level, with special field name for
							Element:code
								_score
								to sort by score, and
							Element:code
								_doc
								to sort by index order.
						Node:
						(type) c
						(layer)2
							Element:p
								Assuming the following index mapping:
						Node:
						(type) c
						(layer)2
							Element:pre
								PUT /my_index { "mappings": { "my_type": { "properties": { "post_date": { "type": "date" }, "user": { "type": "keyword" }, "name": { "type": "keyword" }, "age": { "type": "integer" } } } } }
						Node:
						(type) c
						(layer)2
							Element:pre
								GET /my_index/my_type/_search { "sort" : [ { "post_date" : {"order" : "asc"}}, "user", { "name" : "desc" }, { "age" : "desc" }, "_score" ], "query" : { "term" : { "user" : "kimchy" } } }
						Node:
						(type) c
						(layer)2
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								_doc
								has no real use-case besides being the most efficient sort order. So if you don’t care about the order in which documents are returned, then you should sort by
							Element:code
								_doc
								. This especially helps when
							Element:a
								scrolling
								.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Sort Values
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											The sort values for each document returned are also returned as part of the response.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Sort Order
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											The
										Element:code
											order
											option can have the following values:
									Node:
									(type) c
									(layer)3
										Element:table
										Element:colgroup
										Element:col
										Element:col
										Element:tbody
										Element:tr
										Element:td
										Element:p
										Element:code
											asc
										Element:td
										Element:p
											Sort in ascending order
										Element:tr
										Element:td
										Element:p
										Element:code
											desc
										Element:td
										Element:p
											Sort in descending order
									Node:
									(type) c
									(layer)3
										Element:p
											The order defaults to
										Element:code
											desc
											when sorting on the
										Element:code
											_score
											, and defaults to
										Element:code
											asc
											when sorting on anything else.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Sort mode option
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											Elasticsearch supports sorting by array or multi-valued fields. The
										Element:code
											mode
											option controls what array value is picked for sorting the document it belongs to. The
										Element:code
											mode
											option can have the following values:
									Node:
									(type) c
									(layer)3
										Element:table
										Element:colgroup
										Element:col
										Element:col
										Element:tbody
										Element:tr
										Element:td
										Element:p
										Element:code
											min
										Element:td
										Element:p
											Pick the lowest value.
										Element:tr
										Element:td
										Element:p
										Element:code
											max
										Element:td
										Element:p
											Pick the highest value.
										Element:tr
										Element:td
										Element:p
										Element:code
											sum
										Element:td
										Element:p
											Use the sum of all values as sort value. Only applicable for number based array fields.
										Element:tr
										Element:td
										Element:p
										Element:code
											avg
										Element:td
										Element:p
											Use the average of all values as sort value. Only applicable for number based array fields.
										Element:tr
										Element:td
										Element:p
										Element:code
											median
										Element:td
										Element:p
											Use the median of all values as sort value. Only applicable for number based array fields.
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:a
														Sort mode example usage
													Element:a
														edit
												Node:
												(type) c
												(layer)4
													Element:p
														In the example below the field price has multiple prices per document. In this case the result hits will be sorted by price ascending based on the average price per document.
												Node:
												(type) c
												(layer)4
													Element:pre
														PUT /my_index/my_type/1?refresh { "product": "chocolate", "price": [20, 4] } POST /_search { "query" : { "term" : { "product" : "chocolate" } }, "sort" : [ {"price" : {"order" : "asc", "mode" : "avg"}} ] }
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Sorting within nested objects.
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											Elasticsearch also supports sorting by fields that are inside one or more nested objects. The sorting by nested field support has the following parameters on top of the already existing sort options:
									Node:
									(type) c
									(layer)3
										Element:dl
										Element:dt
										Element:span
										Element:code
											nested_path
										Element:dd
											Defines on which nested object to sort. The actual sort field must be a direct field inside this nested object. When sorting by nested field, this field is mandatory.
										Element:dt
										Element:span
										Element:code
											nested_filter
										Element:dd
											A filter that the inner objects inside the nested path should match with in order for its field values to be taken into account by sorting. Common case is to repeat the query / filter inside the nested filter or query. By default no
										Element:code
											nested_filter
											is active.
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:a
														Nested sorting example
													Element:a
														edit
												Node:
												(type) c
												(layer)4
													Element:p
														In the below example
													Element:code
														offer
														is a field of type
													Element:code
														nested
														. The
													Element:code
														nested_path
														needs to be specified; otherwise, elasticsearch doesn’t know on what nested level sort values need to be captured.
												Node:
												(type) c
												(layer)4
													Element:pre
														POST /_search { "query" : { "term" : { "product" : "chocolate" } }, "sort" : [ { "offer.price" : { "mode" : "avg", "order" : "asc", "nested_path" : "offer", "nested_filter" : { "term" : { "offer.color" : "blue" } } } } ] }
												Node:
												(type) c
												(layer)4
													Element:p
														Nested sorting is also supported when sorting by scripts and sorting by geo distance.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Missing Values
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											The
										Element:code
											missing
											parameter specifies how docs which are missing the field should be treated: The
										Element:code
											missing
											value can be set to
										Element:code
											_last
											,
										Element:code
											_first
											, or a custom value (that will be used for missing docs as the sort value). The default is
										Element:code
											_last
											.
									Node:
									(type) c
									(layer)3
										Element:p
											For example:
									Node:
									(type) c
									(layer)3
										Element:pre
											GET /_search { "sort" : [ { "price" : {"missing" : "_last"} } ], "query" : { "term" : { "product" : "chocolate" } } }
									Node:
									(type) c
									(layer)3
										Element:img
									Node:
									(type) c
									(layer)3
										Element:p
											If a nested inner object doesn’t match with the
										Element:code
											nested_filter
											then a missing value is used.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Ignoring Unmapped Fields
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											By default, the search request will fail if there is no mapping associated with a field. The
										Element:code
											unmapped_type
											option allows to ignore fields that have no mapping and not sort by them. The value of this parameter is used to determine what sort values to emit. Here is an example of how it can be used:
									Node:
									(type) c
									(layer)3
										Element:pre
											GET /_search { "sort" : [ { "price" : {"unmapped_type" : "long"} } ], "query" : { "term" : { "product" : "chocolate" } } }
									Node:
									(type) c
									(layer)3
										Element:p
											If any of the indices that are queried doesn’t have a mapping for
										Element:code
											price
											then Elasticsearch will handle it as if there was a mapping of type
										Element:code
											long
											, with all documents in this index having no value for this field.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Geo Distance Sorting
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											Allow to sort by
										Element:code
											_geo_distance
											. Here is an example, assuming
										Element:code
											pin.location
											is a field of type
										Element:code
											geo_point
											:
									Node:
									(type) c
									(layer)3
										Element:pre
											GET /_search { "sort" : [ { "_geo_distance" : { "pin.location" : [-70, 40], "order" : "asc", "unit" : "km", "mode" : "min", "distance_type" : "sloppy_arc" } } ], "query" : { "term" : { "user" : "kimchy" } } }
									Node:
									(type) c
									(layer)3
										Element:dl
										Element:dt
										Element:span
										Element:code
											distance_type
										Element:dd
											How to compute the distance. Can either be
										Element:code
											sloppy_arc
											(default),
										Element:code
											arc
											(slightly more precise but significantly slower) or
										Element:code
											plane
											(faster, but inaccurate on long distances and close to the poles).
										Element:dt
										Element:span
										Element:code
											mode
										Element:dd
											What to do in case a field has several geo points. By default, the shortest distance is taken into account when sorting in ascending order and the longest distance when sorting in descending order. Supported values are
										Element:code
											min
											,
										Element:code
											max
											,
										Element:code
											median
											and
										Element:code
											avg
											.
										Element:dt
										Element:span
										Element:code
											unit
										Element:dd
											The unit to use when computing sort values. The default is
										Element:code
											m
											(meters).
									Node:
									(type) c
									(layer)3
										Element:img
									Node:
									(type) c
									(layer)3
										Element:p
											geo distance sorting does not support configurable missing values: the distance will always be considered equal to
										Element:code
											Infinity
											when a document does not have values for the field that is used for distance computation.
									Node:
									(type) c
									(layer)3
										Element:p
											The following formats are supported in providing the coordinates:
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:a
														Lat Lon as Properties
													Element:a
														edit
												Node:
												(type) c
												(layer)4
													Element:pre
														GET /_search { "sort" : [ { "_geo_distance" : { "pin.location" : { "lat" : 40, "lon" : -70 }, "order" : "asc", "unit" : "km" } } ], "query" : { "term" : { "user" : "kimchy" } } }
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:a
														Lat Lon as String
													Element:a
														edit
												Node:
												(type) c
												(layer)4
													Element:p
														Format in
													Element:code
														lat,lon
														.
												Node:
												(type) c
												(layer)4
													Element:pre
														GET /_search { "sort" : [ { "_geo_distance" : { "pin.location" : "40,-70", "order" : "asc", "unit" : "km" } } ], "query" : { "term" : { "user" : "kimchy" } } }
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:a
														Geohash
													Element:a
														edit
												Node:
												(type) c
												(layer)4
													Element:pre
														GET /_search { "sort" : [ { "_geo_distance" : { "pin.location" : "drm3btev3e86", "order" : "asc", "unit" : "km" } } ], "query" : { "term" : { "user" : "kimchy" } } }
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:a
														Lat Lon as Array
													Element:a
														edit
												Node:
												(type) c
												(layer)4
													Element:p
														Format in
													Element:code
														[lon, lat]
														, note, the order of lon/lat here in order to conform with
													Element:a
														GeoJSON
														.
												Node:
												(type) c
												(layer)4
													Element:pre
														GET /_search { "sort" : [ { "_geo_distance" : { "pin.location" : [-70, 40], "order" : "asc", "unit" : "km" } } ], "query" : { "term" : { "user" : "kimchy" } } }
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Multiple reference points
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											Multiple geo points can be passed as an array containing any
										Element:code
											geo_point
											format, for example
									Node:
									(type) c
									(layer)3
										Element:pre
											GET /_search { "sort" : [ { "_geo_distance" : { "pin.location" : [[-70, 40], [-71, 42]], "order" : "asc", "unit" : "km" } } ], "query" : { "term" : { "user" : "kimchy" } } }
									Node:
									(type) c
									(layer)3
										Element:p
											and so forth.
									Node:
									(type) c
									(layer)3
										Element:p
											The final distance for a document will then be
										Element:code
											min
											/
										Element:code
											max
											/
										Element:code
											avg
											(defined via
										Element:code
											mode
											) distance of all points contained in the document to all points given in the sort request.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Script Based Sorting
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											Allow to sort based on custom scripts, here is an example:
									Node:
									(type) c
									(layer)3
										Element:pre
											GET /_search { "query" : { "term" : { "user" : "kimchy" } }, "sort" : { "_script" : { "type" : "number", "script" : { "lang": "painless", "inline": "doc['field_name'].value * params.factor", "params" : { "factor" : 1.1 } }, "order" : "asc" } } }
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Track Scores
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											When sorting on a field, scores are not computed. By setting
										Element:code
											track_scores
											to true, scores will still be computed and tracked.
									Node:
									(type) c
									(layer)3
										Element:pre
											GET /_search { "track_scores": true, "sort" : [ { "post_date" : {"order" : "desc"} }, { "name" : "desc" }, { "age" : "desc" } ], "query" : { "term" : { "user" : "kimchy" } } }
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Memory Considerations
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											When sorting, the relevant sorted field values are loaded into memory. This means that per shard, there should be enough memory to contain them. For string based types, the field sorted on should not be analyzed / tokenized. For numeric types, if possible, it is recommended to explicitly set the type to narrower types (like
										Element:code
											short
											,
										Element:code
											integer
											and
										Element:code
											float
											).
									Node:
									(type) c
									(layer)3
										Element:span
										Element:a
											« From / Size
									Node:
									(type) c
									(layer)3
										Element:span
										Element:a
											Source filtering »
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Top Videos
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:a
											Elasticsearch Demo
										Element:li
										Element:a
											Kibana 101
										Element:li
										Element:a
											Logstash Primer
									Node:
									(type) c
									(layer)3
															Node:
															(type) c
															(layer)5
																Element:h5
																	Be in the know with the latest and greatest from Elastic.
															Node:
															(type) c
															(layer)5
																Element:p
																	Thanks for subscribing! We'll keep you updated with new releases.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:footer
										Element:h3
										Element:a
											Products >
										Element:ul
										Element:li
										Element:a
											Elasticsearch
										Element:li
										Element:a
											Kibana
										Element:li
										Element:a
											Beats
										Element:li
										Element:a
											Logstash
										Element:li
										Element:a
											X-Pack
										Element:li
										Element:a
											Elastic Cloud
										Element:li
										Element:a
											Security (formerly Shield)
										Element:li
										Element:a
											Alerting (via Watcher)
										Element:li
										Element:a
											Monitoring (formerly Marvel)
										Element:li
										Element:a
											Graph
										Element:li
										Element:a
											Reporting
										Element:li
										Element:a
											Machine Learning
										Element:li
										Element:a
											ES-Hadoop
										Element:h3
											Resources
										Element:ul
										Element:li
										Element:a
											Blog
										Element:li
										Element:a
											Cloud Status
										Element:li
										Element:a
											Community
										Element:li
										Element:a
											Customers & Use Cases
										Element:li
										Element:a
											Documentation
										Element:li
										Element:a
											Elastic{ON} Events
										Element:li
										Element:a
											Forums
										Element:li
										Element:a
											Meetups
										Element:li
										Element:a
											Subscriptions
										Element:li
										Element:a
											Support Portal
										Element:li
										Element:a
											Videos & Webinars
										Element:li
										Element:a
											Training
										Element:h3
										Element:a
											About >
										Element:ul
										Element:li
										Element:a
											Careers/Jobs
										Element:li
										Element:a
											Contact
										Element:li
										Element:a
											Leadership
										Element:li
										Element:a
											Partners
										Element:li
										Element:a
											Press
										Element:h3
											Language
										Element:ul
										Element:li
										Element:a
											English
										Element:li
										Element:a
											Français
										Element:li
										Element:a
											Deutsch
										Element:li
										Element:a
											日本語
										Element:li
										Element:a
											한국어
										Element:p
											FOLLOW US
										Element:ul
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:ul
										Element:li
										Element:a
											Trademarks
										Element:li
										Element:a
											Terms of Use
										Element:li
										Element:a
											Privacy
										Element:li
										Element:a
											Cookie Policy
										Element:li
										Element:a
											Brand
										Element:a
										Element:img
										Element:p
											© 2017. All Rights Reserved - Elasticsearch
										Element:p
											Elasticsearch is a trademark of Elasticsearch BV, registered in the U.S. and in other countries
										Element:p
											Apache, Apache Lucene, Apache Hadoop, Hadoop, HDFS and the yellow elephant logo are trademarks of the
										Element:a
											Apache Software Foundation
											in the United States and/or other countries.
