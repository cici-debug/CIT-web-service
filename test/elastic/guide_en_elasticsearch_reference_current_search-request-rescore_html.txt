Node:
(type) c
(layer)0
	Element:body
						Node:
						(type) h2
						(layer)2
							Element:h2
							Element:a
								Rescoring
							Element:a
								edit
						Node:
						(type) c
						(layer)2
							Element:p
								Rescoring can help to improve precision by reordering just the top (eg 100 - 500) documents returned by the
							Element:a
								and
							Element:code
								query
							Element:a
								phases, using a secondary (usually more costly) algorithm, instead of applying the costly algorithm to all documents in the index.
							Element:code
								post_filter
						Node:
						(type) c
						(layer)2
							Element:p
								A
							Element:code
								rescore
								request is executed on each shard before it returns its results to be sorted by the node handling the overall search request.
						Node:
						(type) c
						(layer)2
							Element:p
								Currently the rescore API has only one implementation: the query rescorer, which uses a query to tweak the scoring. In the future, alternative rescorers may be made available, for example, a pair-wise rescorer.
						Node:
						(type) c
						(layer)2
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
								the
							Element:code
								rescore
								phase is not executed when
							Element:a
								is used.
							Element:code
								sort
						Node:
						(type) c
						(layer)2
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
								when exposing pagination to your users, you should not change
							Element:code
								window_size
								as you step through each page (by passing different
							Element:code
								from
								values) since that can alter the top hits causing results to confusingly shift as the user steps through pages.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Query rescorer
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											The query rescorer executes a second query only on the Top-K results returned by the
										Element:a
											and
										Element:code
											query
										Element:a
											phases. The number of docs which will be examined on each shard can be controlled by the
										Element:code
											post_filter
										Element:code
											window_size
											parameter, which defaults to
										Element:a
											.
										Element:code
											from
											and
										Element:code
											size
									Node:
									(type) c
									(layer)3
										Element:p
											By default the scores from the original query and the rescore query are combined linearly to produce the final
										Element:code
											_score
											for each document. The relative importance of the original query and of the rescore query can be controlled with the
										Element:code
											query_weight
											and
										Element:code
											rescore_query_weight
											respectively. Both default to
										Element:code
											1
											.
									Node:
									(type) c
									(layer)3
										Element:p
											For example:
									Node:
									(type) c
									(layer)3
										Element:pre
											curl -s -XPOST 'localhost:9200/_search' -d '{ "query" : { "match" : { "field1" : { "operator" : "or", "query" : "the quick brown", "type" : "boolean" } } }, "rescore" : { "window_size" : 50, "query" : { "rescore_query" : { "match" : { "field1" : { "query" : "the quick brown", "type" : "phrase", "slop" : 2 } } }, "query_weight" : 0.7, "rescore_query_weight" : 1.2 } } } '
									Node:
									(type) c
									(layer)3
										Element:p
											The way the scores are combined can be controlled with the
										Element:code
											score_mode
											:
									Node:
									(type) c
									(layer)3
										Element:table
										Element:colgroup
										Element:col
										Element:col
										Element:thead
										Element:tr
										Element:th
											Score Mode
										Element:th
											Description
										Element:tbody
										Element:tr
										Element:td
										Element:p
										Element:code
											total
										Element:td
										Element:p
											Add the original score and the rescore query score. The default.
										Element:tr
										Element:td
										Element:p
										Element:code
											multiply
										Element:td
										Element:p
											Multiply the original score by the rescore query score. Useful for
										Element:a
											rescores.
										Element:code
											function query
										Element:tr
										Element:td
										Element:p
										Element:code
											avg
										Element:td
										Element:p
											Average the original score and the rescore query score.
										Element:tr
										Element:td
										Element:p
										Element:code
											max
										Element:td
										Element:p
											Take the max of original score and the rescore query score.
										Element:tr
										Element:td
										Element:p
										Element:code
											min
										Element:td
										Element:p
											Take the min of the original score and the rescore query score.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Multiple Rescores
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											It is also possible to execute multiple rescores in sequence:
									Node:
									(type) c
									(layer)3
										Element:pre
											curl -s -XPOST 'localhost:9200/_search' -d '{ "query" : { "match" : { "field1" : { "operator" : "or", "query" : "the quick brown", "type" : "boolean" } } }, "rescore" : [ { "window_size" : 100, "query" : { "rescore_query" : { "match" : { "field1" : { "query" : "the quick brown", "type" : "phrase", "slop" : 2 } } }, "query_weight" : 0.7, "rescore_query_weight" : 1.2 } }, { "window_size" : 10, "query" : { "score_mode": "multiply", "rescore_query" : { "function_score" : { "script_score": { "script": { "lang": "painless", "inline": "Math.log10(doc['numeric'].value + 2)" } } } } } } ] } '
									Node:
									(type) c
									(layer)3
										Element:p
											The first one gets the results of the query then the second one gets the results of the first, etc. The second rescore will "see" the sorting done by the first rescore so it is possible to use a large window on the first rescore to pull documents into a smaller window for the second rescore.
									Node:
									(type) c
									(layer)3
										Element:span
										Element:a
											« Highlighting
									Node:
									(type) c
									(layer)3
										Element:span
										Element:a
											Search Type »
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Top Videos
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:a
											Elasticsearch Demo
										Element:li
										Element:a
											Kibana 101
										Element:li
										Element:a
											Logstash Primer
									Node:
									(type) c
									(layer)3
															Node:
															(type) c
															(layer)5
																Element:h5
																	Be in the know with the latest and greatest from Elastic.
															Node:
															(type) c
															(layer)5
																Element:p
																	Thanks for subscribing! We'll keep you updated with new releases.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:footer
										Element:h3
										Element:a
											Products >
										Element:ul
										Element:li
										Element:a
											Elasticsearch
										Element:li
										Element:a
											Kibana
										Element:li
										Element:a
											Beats
										Element:li
										Element:a
											Logstash
										Element:li
										Element:a
											X-Pack
										Element:li
										Element:a
											Elastic Cloud
										Element:li
										Element:a
											Security (formerly Shield)
										Element:li
										Element:a
											Alerting (via Watcher)
										Element:li
										Element:a
											Monitoring (formerly Marvel)
										Element:li
										Element:a
											Graph
										Element:li
										Element:a
											Reporting
										Element:li
										Element:a
											Machine Learning
										Element:li
										Element:a
											ES-Hadoop
										Element:h3
											Resources
										Element:ul
										Element:li
										Element:a
											Blog
										Element:li
										Element:a
											Cloud Status
										Element:li
										Element:a
											Community
										Element:li
										Element:a
											Customers & Use Cases
										Element:li
										Element:a
											Documentation
										Element:li
										Element:a
											Elastic{ON} Events
										Element:li
										Element:a
											Forums
										Element:li
										Element:a
											Meetups
										Element:li
										Element:a
											Subscriptions
										Element:li
										Element:a
											Support Portal
										Element:li
										Element:a
											Videos & Webinars
										Element:li
										Element:a
											Training
										Element:h3
										Element:a
											About >
										Element:ul
										Element:li
										Element:a
											Careers/Jobs
										Element:li
										Element:a
											Contact
										Element:li
										Element:a
											Leadership
										Element:li
										Element:a
											Partners
										Element:li
										Element:a
											Press
										Element:h3
											Language
										Element:ul
										Element:li
										Element:a
											English
										Element:li
										Element:a
											Français
										Element:li
										Element:a
											Deutsch
										Element:li
										Element:a
											日本語
										Element:li
										Element:a
											한국어
										Element:p
											FOLLOW US
										Element:ul
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:ul
										Element:li
										Element:a
											Trademarks
										Element:li
										Element:a
											Terms of Use
										Element:li
										Element:a
											Privacy
										Element:li
										Element:a
											Cookie Policy
										Element:li
										Element:a
											Brand
										Element:a
										Element:img
										Element:p
											© 2017. All Rights Reserved - Elasticsearch
										Element:p
											Elasticsearch is a trademark of Elasticsearch BV, registered in the U.S. and in other countries
										Element:p
											Apache, Apache Lucene, Apache Hadoop, Hadoop, HDFS and the yellow elephant logo are trademarks of the
										Element:a
											Apache Software Foundation
											in the United States and/or other countries.
