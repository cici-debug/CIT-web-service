Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
				Element:a
					Mapping
				Element:a
					edit
			Node:
			(type) c
			(layer)1
				Element:p
					Mapping is the process of defining how a document, and the fields it contains, are stored and indexed. For instance, use mappings to define:
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					which string fields should be treated as full text fields.
				Element:li
					which fields contain numbers, dates, or geolocations.
				Element:li
					whether the values of all fields in the document should be indexed into the catch-all
				Element:a
					field.
				Element:code
					_all
				Element:li
					the
				Element:a
					format
					of date values.
				Element:li
					custom rules to control the mapping for
				Element:a
					dynamically added fields
					.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
							Element:a
								Mapping Types
							Element:a
								edit
						Node:
						(type) c
						(layer)2
							Element:p
								Each index has one or more
							Element:span
								, which are used to divide the documents in an index into logical groups. User documents might be stored in a
							Element:em
								mapping types
							Element:code
								user
								type, and blog posts in a
							Element:code
								blogpost
								type.
						Node:
						(type) c
						(layer)2
							Element:p
								Each mapping type has:
						Node:
						(type) c
						(layer)2
							Element:dl
							Element:dt
							Element:span
							Element:a
								Meta-fields
							Element:dd
								Meta-fields are used to customize how a document’s metadata associated is treated. Examples of meta-fields include the document’s
							Element:a
								,
							Element:code
								_index
							Element:a
								,
							Element:code
								_type
							Element:a
								, and
							Element:code
								_id
							Element:a
								fields.
							Element:code
								_source
							Element:dt
							Element:span
							Element:a
								Fields
								or
							Element:span
							Element:em
								properties
							Element:dd
								Each mapping type contains a list of fields or
							Element:code
								properties
								pertinent to that type. A
							Element:code
								user
								type might contain
							Element:code
								title
								,
							Element:code
								name
								, and
							Element:code
								age
								fields, while a
							Element:code
								blogpost
								type might contain
							Element:code
								title
								,
							Element:code
								body
								,
							Element:code
								user_id
								and
							Element:code
								created
								fields. Fields with the same name in different mapping types in the same index
							Element:a
								must have the same mapping
								.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
							Element:a
								Field datatypes
							Element:a
								edit
						Node:
						(type) c
						(layer)2
							Element:p
								Each field has a data
							Element:code
								type
								which can be:
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
								a simple type like
							Element:a
								,
							Element:code
								text
							Element:a
								,
							Element:code
								keyword
							Element:a
								,
							Element:code
								date
							Element:a
								,
							Element:code
								long
							Element:a
								,
							Element:code
								double
							Element:a
								or
							Element:code
								boolean
							Element:a
								.
							Element:code
								ip
							Element:li
								a type which supports the hierarchical nature of JSON such as
							Element:a
								or
							Element:code
								object
							Element:a
								.
							Element:code
								nested
							Element:li
								or a specialised type like
							Element:a
								,
							Element:code
								geo_point
							Element:a
								, or
							Element:code
								geo_shape
							Element:a
								.
							Element:code
								completion
						Node:
						(type) c
						(layer)2
							Element:p
								It is often useful to index the same field in different ways for different purposes. For instance, a
							Element:code
								string
								field could be
							Element:a
								indexed
								as a
							Element:code
								text
								field for full-text search, and as a
							Element:code
								keyword
								field for sorting or aggregations. Alternatively, you could index a string field with the
							Element:a
								, the
							Element:code
								standard
								analyzer
							Element:a
								analyzer, and the
							Element:code
								english
							Element:a
								.
							Element:code
								french
								analyzer
						Node:
						(type) c
						(layer)2
							Element:p
								This is the purpose of
							Element:span
								. Most datatypes support multi-fields via the
							Element:em
								multi-fields
							Element:a
								parameter.
							Element:code
								fields
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Settings to prevent mappings explosion
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											The following settings allow you to limit the number of field mappings that can be created manually or dynamically, in order to prevent bad documents from causing a mapping explosion:
									Node:
									(type) c
									(layer)3
										Element:dl
										Element:dt
										Element:span
										Element:code
											index.mapping.total_fields.limit
										Element:dd
											The maximum number of fields in an index. The default value is
										Element:code
											1000
											.
										Element:dt
										Element:span
										Element:code
											index.mapping.depth.limit
										Element:dd
											The maximum depth for a field, which is measured as the number of inner objects. For instance, if all fields are defined at the root object level, then the depth is
										Element:code
											1
											. If there is one object mapping, then the depth is
										Element:code
											2
											, etc. The default is
										Element:code
											20
											.
										Element:dt
										Element:span
										Element:code
											index.mapping.nested_fields.limit
										Element:dd
											The maximum number of
										Element:code
											nested
											fields in an index, defaults to
										Element:code
											50
											. Indexing 1 document with 100 nested fields actually indexes 101 documents as each nested document is indexed as a separate hidden document.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
							Element:a
								Dynamic mapping
							Element:a
								edit
						Node:
						(type) c
						(layer)2
							Element:p
								Fields and mapping types do not need to be defined before being used. Thanks to
							Element:span
								, new mapping types and new field names will be added automatically, just by indexing a document. New fields can be added both to the top-level mapping type, and to inner
							Element:em
								dynamic mapping
							Element:a
								and
							Element:code
								object
							Element:a
								fields.
							Element:code
								nested
						Node:
						(type) c
						(layer)2
							Element:p
								The
							Element:a
								dynamic mapping
								rules can be configured to customise the mapping that is used for new types and new fields.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
							Element:a
								Explicit mappings
							Element:a
								edit
						Node:
						(type) c
						(layer)2
							Element:p
								You know more about your data than Elasticsearch can guess, so while dynamic mapping can be useful to get started, at some point you will want to specify your own explicit mappings.
						Node:
						(type) c
						(layer)2
							Element:p
								You can create mapping types and field mappings when you
							Element:a
								create an index
								, and you can add mapping types and fields to an existing index with the
							Element:a
								PUT mapping API
								.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
							Element:a
								Updating existing mappings
							Element:a
								edit
						Node:
						(type) c
						(layer)2
							Element:p
								Other than where documented,
							Element:span
								. Changing the mapping would mean invalidating already indexed documents. Instead, you should create a new index with the correct mappings and reindex your data into that index.
							Element:strong
								existing type and field mappings cannot be updated
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
							Element:a
								Fields are shared across mapping types
							Element:a
								edit
						Node:
						(type) c
						(layer)2
							Element:p
								Mapping types are used to group fields, but the fields in each mapping type are not independent of each other. Fields with:
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
								the
							Element:span
							Element:em
								same name
							Element:li
								in the
							Element:span
							Element:em
								same index
							Element:li
								in
							Element:span
							Element:em
								different mapping types
							Element:li
								map to the
							Element:span
								internally,
							Element:em
								same field
							Element:li
								and
							Element:span
								.
							Element:strong
								must have the same mapping
						Node:
						(type) c
						(layer)2
							Element:p
								If a
							Element:code
								title
								field exists in both the
							Element:code
								user
								and
							Element:code
								blogpost
								mapping types, the
							Element:code
								title
								fields must have exactly the same mapping in each type. The only exceptions to this rule are the
							Element:a
								,
							Element:code
								copy_to
							Element:a
								,
							Element:code
								dynamic
							Element:a
								,
							Element:code
								enabled
							Element:a
								,
							Element:code
								ignore_above
							Element:a
								, and
							Element:code
								include_in_all
							Element:a
								parameters, which may have different settings per field.
							Element:code
								properties
						Node:
						(type) c
						(layer)2
							Element:p
								Usually, fields with the same name also contain the same type of data, so having the same mapping is not a problem. When conflicts do arise, these can be solved by choosing more descriptive names, such as
							Element:code
								user_title
								and
							Element:code
								blog_title
								.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
							Element:a
								Example mapping
							Element:a
								edit
						Node:
						(type) c
						(layer)2
							Element:p
								A mapping for the example described above could be specified when creating the index, as follows:
						Node:
						(type) c
						(layer)2
							Element:pre
								PUT my_index
							Element:a
							Element:span
								{ "mappings": { "user": {
							Element:img
							Element:a
							Element:span
								"_all": { "enabled": false },
							Element:img
							Element:a
							Element:span
								"properties": {
							Element:img
							Element:a
							Element:span
								"title": { "type": "text" },
							Element:img
							Element:a
							Element:span
								"name": { "type": "text" },
							Element:img
							Element:a
							Element:span
								"age": { "type": "integer" }
							Element:img
							Element:a
							Element:span
								} }, "blogpost": {
							Element:img
							Element:a
							Element:span
								"_all": { "enabled": false },
							Element:img
							Element:a
							Element:span
								"properties": {
							Element:img
							Element:a
							Element:span
								"title": { "type": "text" },
							Element:img
							Element:a
							Element:span
								"body": { "type": "text" },
							Element:img
							Element:a
							Element:span
								"user_id": { "type": "keyword"
							Element:img
							Element:a
							Element:span
								}, "created": { "type": "date",
							Element:img
							Element:a
							Element:span
								"format": "strict_date_optional_time||epoch_millis" } } } } }
							Element:img
						Node:
						(type) c
						(layer)2
							Element:table
							Element:tr
							Element:td
							Element:p
							Element:a
							Element:span
							Element:img
							Element:td
							Element:p
								Create an index called
							Element:code
								my_index
								.
							Element:tr
							Element:td
							Element:p
							Element:a
							Element:span
							Element:img
							Element:a
							Element:span
							Element:img
							Element:td
							Element:p
								Add mapping types called
							Element:code
								user
								and
							Element:code
								blogpost
								.
							Element:tr
							Element:td
							Element:p
							Element:a
							Element:span
							Element:img
							Element:a
							Element:span
							Element:img
							Element:td
							Element:p
								Disable the
							Element:code
								_all
							Element:a
								meta field
								for the
							Element:code
								user
								mapping type.
							Element:tr
							Element:td
							Element:p
							Element:a
							Element:span
							Element:img
							Element:a
							Element:span
							Element:img
							Element:td
							Element:p
								Specify fields or
							Element:span
								in each mapping type.
							Element:em
								properties
							Element:tr
							Element:td
							Element:p
							Element:a
							Element:span
							Element:img
							Element:a
							Element:span
							Element:img
							Element:a
							Element:span
							Element:img
							Element:a
							Element:span
							Element:img
							Element:a
							Element:span
							Element:img
							Element:a
							Element:span
							Element:img
							Element:a
							Element:span
							Element:img
							Element:td
							Element:p
								Specify the data
							Element:code
								type
								and mapping for each field.
						Node:
						(type) c
						(layer)2
							Element:span
							Element:a
								« Multi Term Query Rewrite
						Node:
						(type) c
						(layer)2
							Element:span
							Element:a
								Field datatypes »
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Top Videos
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:a
											Elasticsearch Demo
										Element:li
										Element:a
											Kibana 101
										Element:li
										Element:a
											Logstash Primer
									Node:
									(type) c
									(layer)3
															Node:
															(type) c
															(layer)5
																Element:h5
																	Be in the know with the latest and greatest from Elastic.
															Node:
															(type) c
															(layer)5
																Element:p
																	Thanks for subscribing! We'll keep you updated with new releases.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:footer
										Element:h3
										Element:a
											Products >
										Element:ul
										Element:li
										Element:a
											Elasticsearch
										Element:li
										Element:a
											Kibana
										Element:li
										Element:a
											Beats
										Element:li
										Element:a
											Logstash
										Element:li
										Element:a
											X-Pack
										Element:li
										Element:a
											Elastic Cloud
										Element:li
										Element:a
											Security (formerly Shield)
										Element:li
										Element:a
											Alerting (via Watcher)
										Element:li
										Element:a
											Monitoring (formerly Marvel)
										Element:li
										Element:a
											Graph
										Element:li
										Element:a
											Reporting
										Element:li
										Element:a
											Machine Learning
										Element:li
										Element:a
											ES-Hadoop
										Element:h3
											Resources
										Element:ul
										Element:li
										Element:a
											Blog
										Element:li
										Element:a
											Cloud Status
										Element:li
										Element:a
											Community
										Element:li
										Element:a
											Customers & Use Cases
										Element:li
										Element:a
											Documentation
										Element:li
										Element:a
											Elastic{ON} Events
										Element:li
										Element:a
											Forums
										Element:li
										Element:a
											Meetups
										Element:li
										Element:a
											Subscriptions
										Element:li
										Element:a
											Support Portal
										Element:li
										Element:a
											Videos & Webinars
										Element:li
										Element:a
											Training
										Element:h3
										Element:a
											About >
										Element:ul
										Element:li
										Element:a
											Careers/Jobs
										Element:li
										Element:a
											Contact
										Element:li
										Element:a
											Leadership
										Element:li
										Element:a
											Partners
										Element:li
										Element:a
											Press
										Element:h3
											Language
										Element:ul
										Element:li
										Element:a
											English
										Element:li
										Element:a
											Français
										Element:li
										Element:a
											Deutsch
										Element:li
										Element:a
											日本語
										Element:li
										Element:a
											한국어
										Element:p
											FOLLOW US
										Element:ul
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:ul
										Element:li
										Element:a
											Trademarks
										Element:li
										Element:a
											Terms of Use
										Element:li
										Element:a
											Privacy
										Element:li
										Element:a
											Cookie Policy
										Element:li
										Element:a
											Brand
										Element:a
										Element:img
										Element:p
											© 2017. All Rights Reserved - Elasticsearch
										Element:p
											Elasticsearch is a trademark of Elasticsearch BV, registered in the U.S. and in other countries
										Element:p
											Apache, Apache Lucene, Apache Hadoop, Hadoop, HDFS and the yellow elephant logo are trademarks of the
										Element:a
											Apache Software Foundation
											in the United States and/or other countries.
