Node:
(type) c
(layer)0
	Element:body
						Node:
						(type) h2
						(layer)2
							Element:h2
							Element:a
								Dynamic field mapping
							Element:a
								edit
						Node:
						(type) c
						(layer)2
							Element:p
								By default, when a previously unseen field is found in a document, Elasticsearch will add the new field to the type mapping. This behaviour can be disabled, both at the document and at the
							Element:a
								level, by setting the
							Element:code
								object
							Element:a
								parameter to
							Element:code
								dynamic
							Element:code
								false
								(to ignore new fields) or to
							Element:code
								strict
								(to throw an exception if an unknown field is encountered).
						Node:
						(type) c
						(layer)2
							Element:p
								Assuming
							Element:code
								dynamic
								field mapping is enabled, some simple rules are used to determine which datatype the field should have:
						Node:
						(type) c
						(layer)2
							Element:table
							Element:colgroup
							Element:col
							Element:col
							Element:tbody
							Element:tr
							Element:td
							Element:p
							Element:span
							Element:strong
								JSON datatype
							Element:td
							Element:p
							Element:span
							Element:strong
								Elasticsearch datatype
							Element:tr
							Element:td
							Element:p
							Element:code
								null
							Element:td
							Element:p
								No field is added.
							Element:tr
							Element:td
							Element:p
							Element:code
								true
								or
							Element:code
								false
							Element:td
							Element:p
							Element:a
								field
							Element:code
								boolean
							Element:tr
							Element:td
							Element:p
								floating point number
							Element:td
							Element:p
							Element:a
								field
							Element:code
								float
							Element:tr
							Element:td
							Element:p
								integer
							Element:td
							Element:p
							Element:a
								field
							Element:code
								long
							Element:tr
							Element:td
							Element:p
								object
							Element:td
							Element:p
							Element:a
								field
							Element:code
								object
							Element:tr
							Element:td
							Element:p
								array
							Element:td
							Element:p
								Depends on the first non-
							Element:code
								null
								value in the array.
							Element:tr
							Element:td
							Element:p
								string
							Element:td
							Element:p
								Either a
							Element:a
								field (if the value passes
							Element:code
								date
							Element:a
								date detection
								), a
							Element:a
								or
							Element:code
								double
							Element:a
								field (if the value passes
							Element:code
								long
							Element:a
								numeric detection
								) or a
							Element:a
								field, with a
							Element:code
								text
							Element:a
								sub-field.
							Element:code
								keyword
						Node:
						(type) c
						(layer)2
							Element:p
								These are the only
							Element:a
								field datatypes
								that are dynamically detected. All other datatypes must be mapped explicitly.
						Node:
						(type) c
						(layer)2
							Element:p
								Besides the options listed below, dynamic field mapping rules can be further customised with
							Element:a
								.
							Element:code
								dynamic_templates
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Date detection
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											If
										Element:code
											date_detection
											is enabled (default), then new string fields are checked to see whether their contents match any of the date patterns specified in
										Element:code
											dynamic_date_formats
											. If a match is found, a new
										Element:a
											field is added with the corresponding format.
										Element:code
											date
									Node:
									(type) c
									(layer)3
										Element:p
											The default value for
										Element:code
											dynamic_date_formats
											is:
									Node:
									(type) c
									(layer)3
										Element:p
											[
										Element:a
											,
										Element:code
											"strict_date_optional_time"
										Element:code
											"yyyy/MM/dd HH:mm:ss Z||yyyy/MM/dd Z"
											]
									Node:
									(type) c
									(layer)3
										Element:p
											For example:
									Node:
									(type) c
									(layer)3
										Element:pre
											PUT my_index/my_type/1 { "create_date": "2015/09/02" } GET my_index/_mapping
										Element:a
										Element:span
										Element:img
									Node:
									(type) c
									(layer)3
										Element:table
										Element:tr
										Element:td
										Element:p
										Element:a
										Element:span
										Element:img
										Element:td
										Element:p
											The
										Element:code
											create_date
											field has been added as a
										Element:a
											field with the
										Element:code
											date
										Element:a
											:
										Element:code
											format
										Element:code
											"yyyy/MM/dd HH:mm:ss Z||yyyy/MM/dd Z"
											.
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:a
														Disabling date detection
													Element:a
														edit
												Node:
												(type) c
												(layer)4
													Element:p
														Dynamic date detection can be disabled by setting
													Element:code
														date_detection
														to
													Element:code
														false
														:
												Node:
												(type) c
												(layer)4
													Element:pre
														PUT my_index { "mappings": { "my_type": { "date_detection": false } } } PUT my_index/my_type/1
													Element:a
													Element:span
														{ "create": "2015/09/02" }
													Element:img
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tr
													Element:td
													Element:p
													Element:a
													Element:span
													Element:img
													Element:td
													Element:p
														The
													Element:code
														create_date
														field has been added as a
													Element:a
														field.
													Element:code
														text
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:a
														Customising detected date formats
													Element:a
														edit
												Node:
												(type) c
												(layer)4
													Element:p
														Alternatively, the
													Element:code
														dynamic_date_formats
														can be customised to support your own
													Element:a
														date formats
														:
												Node:
												(type) c
												(layer)4
													Element:pre
														PUT my_index { "mappings": { "my_type": { "dynamic_date_formats": ["MM/dd/yyyy"] } } } PUT my_index/my_type/1 { "create_date": "09/25/2015" }
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Numeric detection
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											While JSON has support for native floating point and integer datatypes, some applications or languages may sometimes render numbers as strings. Usually the correct solution is to map these fields explicitly, but numeric detection (which is disabled by default) can be enabled to do this automatically:
									Node:
									(type) c
									(layer)3
										Element:pre
											PUT my_index { "mappings": { "my_type": { "numeric_detection": true } } } PUT my_index/my_type/1 { "my_float": "1.0",
										Element:a
										Element:span
											"my_integer": "1"
										Element:img
										Element:a
										Element:span
											}
										Element:img
									Node:
									(type) c
									(layer)3
										Element:table
										Element:tr
										Element:td
										Element:p
										Element:a
										Element:span
										Element:img
										Element:td
										Element:p
											The
										Element:code
											my_float
											field is added as a
										Element:a
											field.
										Element:code
											double
										Element:tr
										Element:td
										Element:p
										Element:a
										Element:span
										Element:img
										Element:td
										Element:p
											The
										Element:code
											my_integer
											field is added as a
										Element:a
											field.
										Element:code
											long
									Node:
									(type) c
									(layer)3
										Element:span
										Element:a
											«
										Element:code
											_default_
											mapping
									Node:
									(type) c
									(layer)3
										Element:span
										Element:a
											Dynamic templates »
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Top Videos
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:a
											Elasticsearch Demo
										Element:li
										Element:a
											Kibana 101
										Element:li
										Element:a
											Logstash Primer
									Node:
									(type) c
									(layer)3
															Node:
															(type) c
															(layer)5
																Element:h5
																	Be in the know with the latest and greatest from Elastic.
															Node:
															(type) c
															(layer)5
																Element:p
																	Thanks for subscribing! We'll keep you updated with new releases.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:footer
										Element:h3
										Element:a
											Products >
										Element:ul
										Element:li
										Element:a
											Elasticsearch
										Element:li
										Element:a
											Kibana
										Element:li
										Element:a
											Beats
										Element:li
										Element:a
											Logstash
										Element:li
										Element:a
											X-Pack
										Element:li
										Element:a
											Elastic Cloud
										Element:li
										Element:a
											Security (formerly Shield)
										Element:li
										Element:a
											Alerting (via Watcher)
										Element:li
										Element:a
											Monitoring (formerly Marvel)
										Element:li
										Element:a
											Graph
										Element:li
										Element:a
											Reporting
										Element:li
										Element:a
											Machine Learning
										Element:li
										Element:a
											ES-Hadoop
										Element:h3
											Resources
										Element:ul
										Element:li
										Element:a
											Blog
										Element:li
										Element:a
											Cloud Status
										Element:li
										Element:a
											Community
										Element:li
										Element:a
											Customers & Use Cases
										Element:li
										Element:a
											Documentation
										Element:li
										Element:a
											Elastic{ON} Events
										Element:li
										Element:a
											Forums
										Element:li
										Element:a
											Meetups
										Element:li
										Element:a
											Subscriptions
										Element:li
										Element:a
											Support Portal
										Element:li
										Element:a
											Videos & Webinars
										Element:li
										Element:a
											Training
										Element:h3
										Element:a
											About >
										Element:ul
										Element:li
										Element:a
											Careers/Jobs
										Element:li
										Element:a
											Contact
										Element:li
										Element:a
											Leadership
										Element:li
										Element:a
											Partners
										Element:li
										Element:a
											Press
										Element:h3
											Language
										Element:ul
										Element:li
										Element:a
											English
										Element:li
										Element:a
											Français
										Element:li
										Element:a
											Deutsch
										Element:li
										Element:a
											日本語
										Element:li
										Element:a
											한국어
										Element:p
											FOLLOW US
										Element:ul
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:ul
										Element:li
										Element:a
											Trademarks
										Element:li
										Element:a
											Terms of Use
										Element:li
										Element:a
											Privacy
										Element:li
										Element:a
											Cookie Policy
										Element:li
										Element:a
											Brand
										Element:a
										Element:img
										Element:p
											© 2017. All Rights Reserved - Elasticsearch
										Element:p
											Elasticsearch is a trademark of Elasticsearch BV, registered in the U.S. and in other countries
										Element:p
											Apache, Apache Lucene, Apache Hadoop, Hadoop, HDFS and the yellow elephant logo are trademarks of the
										Element:a
											Apache Software Foundation
											in the United States and/or other countries.
