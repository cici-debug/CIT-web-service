Node:
(type) c
(layer)0
	Element:body
						Node:
						(type) h2
						(layer)2
							Element:h2
							Element:a
								Painless Syntax
							Element:a
								edit
						Node:
						(type) c
						(layer)2
							Element:img
								The Painless scripting language is new and is still marked as experimental. The syntax or API may be changed in the future in non-backwards compatible ways if required.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Variable types
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											Painless supports all of
										Element:a
											Java’s types
											, including array types, but adds some additional built-in types.
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:a
														Def
													Element:a
														edit
												Node:
												(type) c
												(layer)4
													Element:p
														The dynamic type
													Element:code
														def
														serves as a placeholder for any other type. It adopts the behavior of whatever runtime type it represents.
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:a
														String
													Element:a
														edit
												Node:
												(type) c
												(layer)4
													Element:p
														String constants can be declared with single quotes, to avoid escaping horrors with JSON:
												Node:
												(type) c
												(layer)4
													Element:pre
														def mystring = 'foo';
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:a
														Arrays
													Element:a
														edit
												Node:
												(type) c
												(layer)4
													Element:p
														Arrays can be subscripted starting from
													Element:code
														0
														for traditional array access or with negative numbers to starting from the back of the array. So the following returns
													Element:code
														2
														.
												Node:
												(type) c
												(layer)4
													Element:pre
														int[] x = new int[5]; x[0]++; x[-5]++; return x[0];
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:a
														List
													Element:a
														edit
												Node:
												(type) c
												(layer)4
													Element:p
														Lists can be created explicitly (e.g.
													Element:code
														new ArrayList()
														) or initialized similar to Groovy:
												Node:
												(type) c
												(layer)4
													Element:pre
														def list = [1,2,3];
												Node:
												(type) c
												(layer)4
													Element:p
														Lists can also be accessed similar to arrays. They support
													Element:code
														.length
														and subscripts, including negative subscripts to read from the back of the list:
												Node:
												(type) c
												(layer)4
													Element:pre
														def list = [1,2,3]; list[-1] = 5 return list[0]
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:a
														Map
													Element:a
														edit
												Node:
												(type) c
												(layer)4
													Element:p
														Maps can be created explicitly (e.g.
													Element:code
														new HashMap()
														) or initialized similar to Groovy:
												Node:
												(type) c
												(layer)4
													Element:pre
														def person = ['name': 'Joe', 'age': 63];
												Node:
												(type) c
												(layer)4
													Element:p
														Map keys can also be accessed as properties.
												Node:
												(type) c
												(layer)4
													Element:pre
														def person = ['name': 'Joe', 'age': 63]; person.retired = true; return person.name
												Node:
												(type) c
												(layer)4
													Element:p
														Map keys can also be accessed via subscript (for keys containing special characters):
												Node:
												(type) c
												(layer)4
													Element:pre
														return map['something-absurd!']
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:a
														Pattern
													Element:a
														edit
												Node:
												(type) c
												(layer)4
													Element:p
														Regular expression constants are directly supported:
												Node:
												(type) c
												(layer)4
													Element:pre
														Pattern p = /[aeiou]/
												Node:
												(type) c
												(layer)4
													Element:p
														Patterns can only be created via this mechanism. This ensures fast performance, regular expressions are always constants and compiled efficiently a single time.
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:a
														Pattern flags
													Element:a
														edit
												Node:
												(type) c
												(layer)4
													Element:p
														You can define flags on patterns in Painless by adding characters after the trailing
													Element:code
														/
														like
													Element:code
														/foo/i
														or
													Element:code
														/foo \w #comment/iUx
														. Painless exposes all the flags from
													Element:a
														Java’s Pattern class
														using these characters:
												Node:
												(type) c
												(layer)4
													Element:table
													Element:colgroup
													Element:col
													Element:col
													Element:col
													Element:thead
													Element:tr
													Element:th
														Character
													Element:th
														Java Constant
													Element:th
														Example
													Element:tbody
													Element:tr
													Element:td
													Element:p
													Element:code
														c
													Element:td
													Element:p
														CANON_EQ
													Element:td
													Element:p
													Element:code
														'å' ==~ /å/c
														(open in hex editor to see)
													Element:tr
													Element:td
													Element:p
													Element:code
														i
													Element:td
													Element:p
														CASE_INSENSITIVE
													Element:td
													Element:p
													Element:code
														'A' ==~ /a/i
													Element:tr
													Element:td
													Element:p
													Element:code
														l
													Element:td
													Element:p
														LITERAL
													Element:td
													Element:p
													Element:code
														'[a]' ==~ /[a]/l
													Element:tr
													Element:td
													Element:p
													Element:code
														m
													Element:td
													Element:p
														MULTILINE
													Element:td
													Element:p
													Element:code
														'a\nb\nc' =~ /^b$/m
													Element:tr
													Element:td
													Element:p
													Element:code
														s
													Element:td
													Element:p
														DOTALL (aka single line)
													Element:td
													Element:p
													Element:code
														'a\nb\nc' =~ /.b./s
													Element:tr
													Element:td
													Element:p
													Element:code
														U
													Element:td
													Element:p
														UNICODE_CHARACTER_CLASS
													Element:td
													Element:p
													Element:code
														'Ɛ' ==~ /\\w/U
													Element:tr
													Element:td
													Element:p
													Element:code
														u
													Element:td
													Element:p
														UNICODE_CASE
													Element:td
													Element:p
													Element:code
														'Ɛ' ==~ /ɛ/iu
													Element:tr
													Element:td
													Element:p
													Element:code
														x
													Element:td
													Element:p
														COMMENTS (aka extended)
													Element:td
													Element:p
													Element:code
														'a' ==~ /a #comment/x
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Dereferences
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											Like lots of languages, Painless uses
										Element:code
											.
											to reference fields and call methods:
									Node:
									(type) c
									(layer)3
										Element:pre
											String foo = 'foo'; TypeWithGetterOrPublicField bar = new TypeWithGetterOrPublicField() return foo.length() + bar.x
									Node:
									(type) c
									(layer)3
										Element:p
											Like Groovy, Painless uses
										Element:code
											?.
											to perform null-safe references, with the result being
										Element:code
											null
											if the left hand side is null:
									Node:
									(type) c
									(layer)3
										Element:pre
											String foo = null; return foo?.length() // Returns null
									Node:
									(type) c
									(layer)3
										Element:p
											Unlike Groovy, Painless doesn’t support writing to null values with this operator:
									Node:
									(type) c
									(layer)3
										Element:pre
											TypeWithSetterOrPublicField foo = null; foo?.x = 'bar' // Compile error
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Operators
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											All of Java’s
										Element:a
											operators
											are supported with the same precedence, promotion, and semantics.
									Node:
									(type) c
									(layer)3
										Element:p
											There are only a few minor differences and add-ons:
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:code
											==
											behaves as Java’s for numeric types, but for non-numeric types acts as
										Element:a
										Element:code
											Object.equals()
										Element:li
										Element:code
											===
											and
										Element:code
											!==
											support exact reference comparison (e.g.
										Element:code
											x === y
											)
										Element:li
										Element:code
											=~
											true if a portion of the text matches a pattern (e.g.
										Element:code
											x =~ /b/
											)
										Element:li
										Element:code
											==~
											true if the entire text matches a pattern (e.g.
										Element:code
											x ==~ /[Bb]ob/
											)
									Node:
									(type) c
									(layer)3
										Element:p
											The
										Element:code
											?:
											(aka Elvis) operator coalesces null values. So
										Element:code
											x ?: 0
											is
										Element:code
											0
											if
										Element:code
											x
											is
										Element:code
											null
											and whatever value
										Element:code
											x
											has otherwise. It is a convenient way to write default values like
										Element:code
											doc['x'].value ?: 0
											which is 0 if
										Element:code
											x
											is not in the document being processed. It can also work with null safe dereferences to efficiently handle null in chains. For example,
										Element:code
											doc['foo.keyword'].value?.length() ?: 0
											is 0 if the document being processed doesn’t have a
										Element:code
											foo.keyword
											field but is the length of that field if it does. Lastly,
										Element:code
											?:
											is lazy so the right hand side is not evaluated at all if the left hand side isn’t null.
									Node:
									(type) c
									(layer)3
										Element:img
									Node:
									(type) c
									(layer)3
										Element:p
											Unlike Groovy, Painless'
										Element:code
											?:
											operator only coalesces ‘null
										Element:code
											, not `false
											or
										Element:a
											falsy
											values. Strictly speaking Painless’
										Element:code
											?:
											is more like Kotlin’s
										Element:code
											?:
											than Groovy’s
										Element:code
											?:
											.
									Node:
									(type) c
									(layer)3
										Element:img
									Node:
									(type) c
									(layer)3
										Element:p
											The result of
										Element:code
											?.
											and
										Element:code
											?:
											can’t be assigned to primitives. So
										Element:code
											int[] someArray = null; int l = someArray?.length
											and
										Element:code
											int s = params.size ?: 100
											don’t work. Do
										Element:code
											def someArray = null; def l = someArray?.length
											and
										Element:code
											def s = params.size ?: 100
											instead.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Control flow
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											Java’s
										Element:a
											control flow statements
											are supported, with the exception of the
										Element:code
											switch
											statement.
									Node:
									(type) c
									(layer)3
										Element:p
											In addition to Java’s
										Element:code
											enhanced for
											loop, the
										Element:code
											for in
											syntax from groovy can also be used:
									Node:
									(type) c
									(layer)3
										Element:pre
											for (item : list) { ... }
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Functions
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											Functions can be declared at the beginning of the script, for example:
									Node:
									(type) c
									(layer)3
										Element:pre
											boolean isNegative(def x) { x < 0 } ... if (isNegative(someVar)) { ... }
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Lambda expressions
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											Lambda expressions and method references work the same as
										Element:a
											Java’s
											.
									Node:
									(type) c
									(layer)3
										Element:pre
											list.removeIf(item -> item == 2); list.removeIf((int item) -> item == 2); list.removeIf((int item) -> { item == 2 }); list.sort((x, y) -> x - y); list.sort(Integer::compare);
									Node:
									(type) c
									(layer)3
										Element:p
											Method references to functions within the script can be accomplished using
										Element:code
											this
											, e.g.
										Element:code
											list.sort(this::mycompare)
											.
									Node:
									(type) c
									(layer)3
										Element:span
										Element:a
											« How painless dispatches functions
									Node:
									(type) c
									(layer)3
										Element:span
										Element:a
											Painless Debugging »
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Top Videos
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:a
											Elasticsearch Demo
										Element:li
										Element:a
											Kibana 101
										Element:li
										Element:a
											Logstash Primer
									Node:
									(type) c
									(layer)3
															Node:
															(type) c
															(layer)5
																Element:h5
																	Be in the know with the latest and greatest from Elastic.
															Node:
															(type) c
															(layer)5
																Element:p
																	Thanks for subscribing! We'll keep you updated with new releases.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:footer
										Element:h3
										Element:a
											Products >
										Element:ul
										Element:li
										Element:a
											Elasticsearch
										Element:li
										Element:a
											Kibana
										Element:li
										Element:a
											Beats
										Element:li
										Element:a
											Logstash
										Element:li
										Element:a
											X-Pack
										Element:li
										Element:a
											Elastic Cloud
										Element:li
										Element:a
											Security (formerly Shield)
										Element:li
										Element:a
											Alerting (via Watcher)
										Element:li
										Element:a
											Monitoring (formerly Marvel)
										Element:li
										Element:a
											Graph
										Element:li
										Element:a
											Reporting
										Element:li
										Element:a
											Machine Learning
										Element:li
										Element:a
											ES-Hadoop
										Element:h3
											Resources
										Element:ul
										Element:li
										Element:a
											Blog
										Element:li
										Element:a
											Cloud Status
										Element:li
										Element:a
											Community
										Element:li
										Element:a
											Customers & Use Cases
										Element:li
										Element:a
											Documentation
										Element:li
										Element:a
											Elastic{ON} Events
										Element:li
										Element:a
											Forums
										Element:li
										Element:a
											Meetups
										Element:li
										Element:a
											Subscriptions
										Element:li
										Element:a
											Support Portal
										Element:li
										Element:a
											Videos & Webinars
										Element:li
										Element:a
											Training
										Element:h3
										Element:a
											About >
										Element:ul
										Element:li
										Element:a
											Careers/Jobs
										Element:li
										Element:a
											Contact
										Element:li
										Element:a
											Leadership
										Element:li
										Element:a
											Partners
										Element:li
										Element:a
											Press
										Element:h3
											Language
										Element:ul
										Element:li
										Element:a
											English
										Element:li
										Element:a
											Français
										Element:li
										Element:a
											Deutsch
										Element:li
										Element:a
											日本語
										Element:li
										Element:a
											한국어
										Element:p
											FOLLOW US
										Element:ul
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:ul
										Element:li
										Element:a
											Trademarks
										Element:li
										Element:a
											Terms of Use
										Element:li
										Element:a
											Privacy
										Element:li
										Element:a
											Cookie Policy
										Element:li
										Element:a
											Brand
										Element:a
										Element:img
										Element:p
											© 2017. All Rights Reserved - Elasticsearch
										Element:p
											Elasticsearch is a trademark of Elasticsearch BV, registered in the U.S. and in other countries
										Element:p
											Apache, Apache Lucene, Apache Hadoop, Hadoop, HDFS and the yellow elephant logo are trademarks of the
										Element:a
											Apache Software Foundation
											in the United States and/or other countries.
