Node:
(type) c
(layer)0
	Element:body
						Node:
						(type) h2
						(layer)2
							Element:h2
							Element:a
								Nested datatype
							Element:a
								edit
						Node:
						(type) c
						(layer)2
							Element:p
								The
							Element:code
								nested
								type is a specialised version of the
							Element:a
								datatype that allows arrays of objects to be indexed and queried independently of each other.
							Element:code
								object
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											How arrays of objects are flattened
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											Arrays of inner
										Element:a
											do not work the way you may expect. Lucene has no concept of inner objects, so Elasticsearch flattens object hierarchies into a simple list of field names and values. For instance, the following document:
										Element:code
											object
											fields
									Node:
									(type) c
									(layer)3
										Element:pre
											PUT my_index/my_type/1 { "group" : "fans", "user" : [
										Element:a
										Element:span
											{ "first" : "John", "last" : "Smith" }, { "first" : "Alice", "last" : "White" } ] }
										Element:img
									Node:
									(type) c
									(layer)3
										Element:table
										Element:tr
										Element:td
										Element:p
										Element:a
										Element:span
										Element:img
										Element:td
										Element:p
											The
										Element:code
											user
											field is dynamically added as a field of type
										Element:code
											object
											.
									Node:
									(type) c
									(layer)3
										Element:p
											would be transformed internally into a document that looks more like this:
									Node:
									(type) c
									(layer)3
										Element:pre
											{ "group" : "fans", "user.first" : [ "alice", "john" ], "user.last" : [ "smith", "white" ] }
									Node:
									(type) c
									(layer)3
										Element:p
											The
										Element:code
											user.first
											and
										Element:code
											user.last
											fields are flattened into multi-value fields, and the association between
										Element:code
											alice
											and
										Element:code
											white
											is lost. This document would incorrectly match a query for
										Element:code
											alice AND smith
											:
									Node:
									(type) c
									(layer)3
										Element:pre
											GET my_index/_search { "query": { "bool": { "must": [ { "match": { "user.first": "Alice" }}, { "match": { "user.last": "Smith" }} ] } } }
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Using
										Element:code
											nested
											fields for arrays of objects
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											If you need to index arrays of objects and to maintain the independence of each object in the array, you should use the
										Element:code
											nested
											datatype instead of the
										Element:a
											datatype. Internally, nested objects index each object in the array as a separate hidden document, meaning that each nested object can be queried independently of the others, with the
										Element:code
											object
										Element:a
											:
										Element:code
											nested
											query
									Node:
									(type) c
									(layer)3
										Element:pre
											PUT my_index { "mappings": { "my_type": { "properties": { "user": { "type": "nested"
										Element:a
										Element:span
											} } } } } PUT my_index/my_type/1 { "group" : "fans", "user" : [ { "first" : "John", "last" : "Smith" }, { "first" : "Alice", "last" : "White" } ] } GET my_index/_search { "query": { "nested": { "path": "user", "query": { "bool": { "must": [ { "match": { "user.first": "Alice" }}, { "match": { "user.last": "Smith" }}
										Element:img
										Element:a
										Element:span
											] } } } } } GET my_index/_search { "query": { "nested": { "path": "user", "query": { "bool": { "must": [ { "match": { "user.first": "Alice" }}, { "match": { "user.last": "White" }}
										Element:img
										Element:a
										Element:span
											] } }, "inner_hits": {
										Element:img
										Element:a
										Element:span
											"highlight": { "fields": { "user.first": {} } } } } } }
										Element:img
									Node:
									(type) c
									(layer)3
										Element:table
										Element:tr
										Element:td
										Element:p
										Element:a
										Element:span
										Element:img
										Element:td
										Element:p
											The
										Element:code
											user
											field is mapped as type
										Element:code
											nested
											instead of type
										Element:code
											object
											.
										Element:tr
										Element:td
										Element:p
										Element:a
										Element:span
										Element:img
										Element:td
										Element:p
											This query doesn’t match because
										Element:code
											Alice
											and
										Element:code
											Smith
											are not in the same nested object.
										Element:tr
										Element:td
										Element:p
										Element:a
										Element:span
										Element:img
										Element:td
										Element:p
											This query matches because
										Element:code
											Alice
											and
										Element:code
											White
											are in the same nested object.
										Element:tr
										Element:td
										Element:p
										Element:a
										Element:span
										Element:img
										Element:td
										Element:p
										Element:code
											inner_hits
											allow us to highlight the matching nested documents.
									Node:
									(type) c
									(layer)3
										Element:p
											Nested documents can be:
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
											queried with the
										Element:a
											query.
										Element:code
											nested
										Element:li
											analyzed with the
										Element:a
											and
										Element:code
											nested
										Element:a
											aggregations.
										Element:code
											reverse_nested
										Element:li
											sorted with
										Element:a
											nested sorting
											.
										Element:li
											retrieved and highlighted with
										Element:a
											nested inner hits
											.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Parameters for
										Element:code
											nested
											fields
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											The following parameters are accepted by
										Element:code
											nested
											fields:
									Node:
									(type) c
									(layer)3
										Element:table
										Element:colgroup
										Element:col
										Element:col
										Element:tbody
										Element:tr
										Element:td
										Element:p
										Element:a
										Element:code
											dynamic
										Element:td
										Element:p
											Whether or not new
										Element:code
											properties
											should be added dynamically to an existing nested object. Accepts
										Element:code
											true
											(default),
										Element:code
											false
											and
										Element:code
											strict
											.
										Element:tr
										Element:td
										Element:p
										Element:a
										Element:code
											include_in_all
										Element:td
										Element:p
											Sets the default
										Element:code
											include_in_all
											value for all the
										Element:code
											properties
											within the nested object. Nested documents do not have their own
										Element:code
											_all
											field. Instead, values are added to the
										Element:code
											_all
											field of the main “root” document.
										Element:tr
										Element:td
										Element:p
										Element:a
										Element:code
											properties
										Element:td
										Element:p
											The fields within the nested object, which can be of any
										Element:a
											datatype
											, including
										Element:code
											nested
											. New properties may be added to an existing nested object.
									Node:
									(type) c
									(layer)3
										Element:img
									Node:
									(type) c
									(layer)3
										Element:p
											Because nested documents are indexed as separate documents, they can only be accessed within the scope of the
										Element:code
											nested
											query, the
										Element:code
											nested
											/
										Element:code
											reverse_nested
											, or
										Element:a
											nested inner hits
											.
									Node:
									(type) c
									(layer)3
										Element:p
											For instance, if a string field within a nested document has
										Element:a
											set to
										Element:code
											index_options
										Element:code
											offsets
											to allow use of the postings highlighter, these offsets will not be available during the main highlighting phase. Instead, highlighting needs to be performed via
										Element:a
											nested inner hits
											.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Limiting the number of
										Element:code
											nested
											fields
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											Indexing a document with 100 nested fields actually indexes 101 documents as each nested document is indexed as a separate document. To safeguard against ill-defined mappings the number of nested fields that can be defined per index has been limited to 50. See
										Element:a
											the section called “Settings to prevent mappings explosion
										Element:a
											edit
											”.
									Node:
									(type) c
									(layer)3
										Element:span
										Element:a
											« Keyword datatype
									Node:
									(type) c
									(layer)3
										Element:span
										Element:a
											Numeric datatypes »
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Top Videos
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:a
											Elasticsearch Demo
										Element:li
										Element:a
											Kibana 101
										Element:li
										Element:a
											Logstash Primer
									Node:
									(type) c
									(layer)3
															Node:
															(type) c
															(layer)5
																Element:h5
																	Be in the know with the latest and greatest from Elastic.
															Node:
															(type) c
															(layer)5
																Element:p
																	Thanks for subscribing! We'll keep you updated with new releases.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:footer
										Element:h3
										Element:a
											Products >
										Element:ul
										Element:li
										Element:a
											Elasticsearch
										Element:li
										Element:a
											Kibana
										Element:li
										Element:a
											Beats
										Element:li
										Element:a
											Logstash
										Element:li
										Element:a
											X-Pack
										Element:li
										Element:a
											Elastic Cloud
										Element:li
										Element:a
											Security (formerly Shield)
										Element:li
										Element:a
											Alerting (via Watcher)
										Element:li
										Element:a
											Monitoring (formerly Marvel)
										Element:li
										Element:a
											Graph
										Element:li
										Element:a
											Reporting
										Element:li
										Element:a
											Machine Learning
										Element:li
										Element:a
											ES-Hadoop
										Element:h3
											Resources
										Element:ul
										Element:li
										Element:a
											Blog
										Element:li
										Element:a
											Cloud Status
										Element:li
										Element:a
											Community
										Element:li
										Element:a
											Customers & Use Cases
										Element:li
										Element:a
											Documentation
										Element:li
										Element:a
											Elastic{ON} Events
										Element:li
										Element:a
											Forums
										Element:li
										Element:a
											Meetups
										Element:li
										Element:a
											Subscriptions
										Element:li
										Element:a
											Support Portal
										Element:li
										Element:a
											Videos & Webinars
										Element:li
										Element:a
											Training
										Element:h3
										Element:a
											About >
										Element:ul
										Element:li
										Element:a
											Careers/Jobs
										Element:li
										Element:a
											Contact
										Element:li
										Element:a
											Leadership
										Element:li
										Element:a
											Partners
										Element:li
										Element:a
											Press
										Element:h3
											Language
										Element:ul
										Element:li
										Element:a
											English
										Element:li
										Element:a
											Français
										Element:li
										Element:a
											Deutsch
										Element:li
										Element:a
											日本語
										Element:li
										Element:a
											한국어
										Element:p
											FOLLOW US
										Element:ul
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:ul
										Element:li
										Element:a
											Trademarks
										Element:li
										Element:a
											Terms of Use
										Element:li
										Element:a
											Privacy
										Element:li
										Element:a
											Cookie Policy
										Element:li
										Element:a
											Brand
										Element:a
										Element:img
										Element:p
											© 2017. All Rights Reserved - Elasticsearch
										Element:p
											Elasticsearch is a trademark of Elasticsearch BV, registered in the U.S. and in other countries
										Element:p
											Apache, Apache Lucene, Apache Hadoop, Hadoop, HDFS and the yellow elephant logo are trademarks of the
										Element:a
											Apache Software Foundation
											in the United States and/or other countries.
