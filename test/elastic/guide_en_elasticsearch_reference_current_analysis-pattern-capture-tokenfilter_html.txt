Node:
(type) c
(layer)0
	Element:body
						Node:
						(type) h2
						(layer)2
							Element:h2
							Element:a
								Pattern Capture Token Filter
							Element:a
								edit
						Node:
						(type) c
						(layer)2
							Element:p
								The
							Element:code
								pattern_capture
								token filter, unlike the
							Element:code
								pattern
								tokenizer, emits a token for every capture group in the regular expression. Patterns are not anchored to the beginning and end of the string, so each pattern can match multiple times, and matches are allowed to overlap.
						Node:
						(type) c
						(layer)2
							Element:img
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Beware of Pathological Regular Expressions
									Node:
									(type) c
									(layer)3
										Element:p
											The pattern capture token filter uses
										Element:a
											Java Regular Expressions
											.
									Node:
									(type) c
									(layer)3
										Element:p
											A badly written regular expression could run very slowly or even throw a StackOverflowError and cause the node it is running on to exit suddenly.
									Node:
									(type) c
									(layer)3
										Element:p
											Read more about
										Element:a
											pathological regular expressions and how to avoid them
											.
									Node:
									(type) c
									(layer)3
										Element:p
											For instance a pattern like :
									Node:
									(type) c
									(layer)3
										Element:pre
											"(([a-z]+)(\d*))"
									Node:
									(type) c
									(layer)3
										Element:p
											when matched against:
									Node:
									(type) c
									(layer)3
										Element:pre
											"abc123def456"
									Node:
									(type) c
									(layer)3
										Element:p
											would produce the tokens: [
										Element:code
											abc123
											,
										Element:code
											abc
											,
										Element:code
											123
											,
										Element:code
											def456
											,
										Element:code
											def
											,
										Element:code
											456
											]
									Node:
									(type) c
									(layer)3
										Element:p
											If
										Element:code
											preserve_original
											is set to
										Element:code
											true
											(the default) then it would also emit the original token:
										Element:code
											abc123def456
											.
									Node:
									(type) c
									(layer)3
										Element:p
											This is particularly useful for indexing text like camel-case code, eg
										Element:code
											stripHTML
											where a user may search for
										Element:code
											"strip html"
											or
										Element:code
											"striphtml"
											:
									Node:
									(type) c
									(layer)3
										Element:pre
											curl -XPUT localhost:9200/test/ -d ' { "settings" : { "analysis" : { "filter" : { "code" : { "type" : "pattern_capture", "preserve_original" : 1, "patterns" : [ "(\\p{Ll}+|\\p{Lu}\\p{Ll}+|\\p{Lu}+)", "(\\d+)" ] } }, "analyzer" : { "code" : { "tokenizer" : "pattern", "filter" : [ "code", "lowercase" ] } } } } } '
									Node:
									(type) c
									(layer)3
										Element:p
											When used to analyze the text
									Node:
									(type) c
									(layer)3
										Element:pre
											import static org.apache.commons.lang.StringEscapeUtils.escapeHtml
									Node:
									(type) c
									(layer)3
										Element:p
											this emits the tokens: [
										Element:code
											import
											,
										Element:code
											static
											,
										Element:code
											org
											,
										Element:code
											apache
											,
										Element:code
											commons
											,
										Element:code
											lang
											,
										Element:code
											stringescapeutils
											,
										Element:code
											string
											,
										Element:code
											escape
											,
										Element:code
											utils
											,
										Element:code
											escapehtml
											,
										Element:code
											escape
											,
										Element:code
											html
											]
									Node:
									(type) c
									(layer)3
										Element:p
											Another example is analyzing email addresses:
									Node:
									(type) c
									(layer)3
										Element:pre
											curl -XPUT localhost:9200/test/ -d ' { "settings" : { "analysis" : { "filter" : { "email" : { "type" : "pattern_capture", "preserve_original" : 1, "patterns" : [ "([^@]+)", "(\\p{L}+)", "(\\d+)", "@(.+)" ] } }, "analyzer" : { "email" : { "tokenizer" : "uax_url_email", "filter" : [ "email", "lowercase", "unique" ] } } } } } '
									Node:
									(type) c
									(layer)3
										Element:p
											When the above analyzer is used on an email address like:
									Node:
									(type) c
									(layer)3
										Element:pre
											john-smith_123@foo-bar.com
									Node:
									(type) c
									(layer)3
										Element:p
											it would produce the following tokens:
									Node:
									(type) c
									(layer)3
										Element:pre
											john-smith_123@foo-bar.com, john-smith_123, john, smith, 123, foo-bar.com, foo, bar, com
									Node:
									(type) c
									(layer)3
										Element:p
											Multiple patterns are required to allow overlapping captures, but also means that patterns are less dense and easier to understand.
									Node:
									(type) c
									(layer)3
										Element:p
										Element:span
											All tokens are emitted in the same position, and with the same character offsets, so when combined with highlighting, the whole original token will be highlighted, not just the matching subset. For instance, querying the above email address for
										Element:strong
											Note:
										Element:code
											"smith"
											would highlight:
									Node:
									(type) c
									(layer)3
										Element:pre
											<em>john-smith_123@foo-bar.com</em>
									Node:
									(type) c
									(layer)3
										Element:p
											not:
									Node:
									(type) c
									(layer)3
										Element:pre
											john-<em>smith</em>_123@foo-bar.com
									Node:
									(type) c
									(layer)3
										Element:span
										Element:a
											« Unique Token Filter
									Node:
									(type) c
									(layer)3
										Element:span
										Element:a
											Pattern Replace Token Filter »
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Top Videos
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:a
											Elasticsearch Demo
										Element:li
										Element:a
											Kibana 101
										Element:li
										Element:a
											Logstash Primer
									Node:
									(type) c
									(layer)3
															Node:
															(type) c
															(layer)5
																Element:h5
																	Be in the know with the latest and greatest from Elastic.
															Node:
															(type) c
															(layer)5
																Element:p
																	Thanks for subscribing! We'll keep you updated with new releases.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:footer
										Element:h3
										Element:a
											Products >
										Element:ul
										Element:li
										Element:a
											Elasticsearch
										Element:li
										Element:a
											Kibana
										Element:li
										Element:a
											Beats
										Element:li
										Element:a
											Logstash
										Element:li
										Element:a
											X-Pack
										Element:li
										Element:a
											Elastic Cloud
										Element:li
										Element:a
											Security (formerly Shield)
										Element:li
										Element:a
											Alerting (via Watcher)
										Element:li
										Element:a
											Monitoring (formerly Marvel)
										Element:li
										Element:a
											Graph
										Element:li
										Element:a
											Reporting
										Element:li
										Element:a
											Machine Learning
										Element:li
										Element:a
											ES-Hadoop
										Element:h3
											Resources
										Element:ul
										Element:li
										Element:a
											Blog
										Element:li
										Element:a
											Cloud Status
										Element:li
										Element:a
											Community
										Element:li
										Element:a
											Customers & Use Cases
										Element:li
										Element:a
											Documentation
										Element:li
										Element:a
											Elastic{ON} Events
										Element:li
										Element:a
											Forums
										Element:li
										Element:a
											Meetups
										Element:li
										Element:a
											Subscriptions
										Element:li
										Element:a
											Support Portal
										Element:li
										Element:a
											Videos & Webinars
										Element:li
										Element:a
											Training
										Element:h3
										Element:a
											About >
										Element:ul
										Element:li
										Element:a
											Careers/Jobs
										Element:li
										Element:a
											Contact
										Element:li
										Element:a
											Leadership
										Element:li
										Element:a
											Partners
										Element:li
										Element:a
											Press
										Element:h3
											Language
										Element:ul
										Element:li
										Element:a
											English
										Element:li
										Element:a
											Français
										Element:li
										Element:a
											Deutsch
										Element:li
										Element:a
											日本語
										Element:li
										Element:a
											한국어
										Element:p
											FOLLOW US
										Element:ul
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:ul
										Element:li
										Element:a
											Trademarks
										Element:li
										Element:a
											Terms of Use
										Element:li
										Element:a
											Privacy
										Element:li
										Element:a
											Cookie Policy
										Element:li
										Element:a
											Brand
										Element:a
										Element:img
										Element:p
											© 2017. All Rights Reserved - Elasticsearch
										Element:p
											Elasticsearch is a trademark of Elasticsearch BV, registered in the U.S. and in other countries
										Element:p
											Apache, Apache Lucene, Apache Hadoop, Hadoop, HDFS and the yellow elephant logo are trademarks of the
										Element:a
											Apache Software Foundation
											in the United States and/or other countries.
