Node:
(type) c
(layer)0
	Element:body
						Node:
						(type) h2
						(layer)2
							Element:h2
							Element:a
								Edge NGram Tokenizer
							Element:a
								edit
						Node:
						(type) c
						(layer)2
							Element:p
								The
							Element:code
								edge_ngram
								tokenizer first breaks text down into words whenever it encounters one of a list of specified characters, then it emits
							Element:a
								N-grams
								of each word where the start of the N-gram is anchored to the beginning of the word.
						Node:
						(type) c
						(layer)2
							Element:p
								Edge N-Grams are useful for
							Element:span
								queries.
							Element:em
								search-as-you-type
						Node:
						(type) c
						(layer)2
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
								When you need
							Element:span
								for text which has a widely known order, such as movie or song titles, the
							Element:em
								search-as-you-type
							Element:a
								completion suggester
								is a much more efficient choice than edge N-grams. Edge N-grams have the advantage when trying to autocomplete words that can appear in any order.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Example output
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											With the default settings, the
										Element:code
											edge_ngram
											tokenizer treats the initial text as a single token and produces N-grams with minimum length
										Element:code
											1
											and maximum length
										Element:code
											2
											:
									Node:
									(type) c
									(layer)3
										Element:pre
											POST _analyze { "tokenizer": "edge_ngram", "text": "Quick Fox" }
									Node:
									(type) c
									(layer)3
										Element:p
											The above sentence would produce the following terms:
									Node:
									(type) c
									(layer)3
										Element:pre
											[ Q, Qu ]
									Node:
									(type) c
									(layer)3
										Element:img
									Node:
									(type) c
									(layer)3
										Element:p
											These default gram lengths are almost entirely useless. You need to configure the
										Element:code
											edge_ngram
											before using it.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Configuration
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											The
										Element:code
											edge_ngram
											tokenizer accepts the following parameters:
									Node:
									(type) c
									(layer)3
										Element:table
										Element:colgroup
										Element:col
										Element:col
										Element:tbody
										Element:tr
										Element:td
										Element:p
										Element:code
											min_gram
										Element:td
										Element:p
											Minimum length of characters in a gram. Defaults to
										Element:code
											1
											.
										Element:tr
										Element:td
										Element:p
										Element:code
											max_gram
										Element:td
										Element:p
											Maximum length of characters in a gram. Defaults to
										Element:code
											2
											.
										Element:tr
										Element:td
										Element:p
										Element:code
											token_chars
										Element:td
										Element:p
											Character classes that should be included in a token. Elasticsearch will split on characters that don’t belong to the classes specified. Defaults to
										Element:code
											[]
											(keep all characters).
										Element:p
											Character classes may be any of the following:
										Element:ul
										Element:li
										Element:code
											letter
											— for example
										Element:code
											a
											,
										Element:code
											b
											,
										Element:code
											ï
											or
										Element:code
											京
										Element:li
										Element:code
											digit
											— for example
										Element:code
											3
											or
										Element:code
											7
										Element:li
										Element:code
											whitespace
											— for example
										Element:code
											" "
											or
										Element:code
											"\n"
										Element:li
										Element:code
											punctuation
											— for example
										Element:code
											!
											or
										Element:code
											"
										Element:li
										Element:code
											symbol
											— for example
										Element:code
											$
											or
										Element:code
											√
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Example configuration
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											In this example, we configure the
										Element:code
											edge_ngram
											tokenizer to treat letters and digits as tokens, and to produce grams with minimum length
										Element:code
											2
											and maximum length
										Element:code
											10
											:
									Node:
									(type) c
									(layer)3
										Element:pre
											PUT my_index { "settings": { "analysis": { "analyzer": { "my_analyzer": { "tokenizer": "my_tokenizer" } }, "tokenizer": { "my_tokenizer": { "type": "edge_ngram", "min_gram": 2, "max_gram": 10, "token_chars": [ "letter", "digit" ] } } } } } POST my_index/_analyze { "analyzer": "my_analyzer", "text": "2 Quick Foxes." }
									Node:
									(type) c
									(layer)3
										Element:p
											The above example produces the following terms:
									Node:
									(type) c
									(layer)3
										Element:pre
											[ Qu, Qui, Quic, Quick, Fo, Fox, Foxe, Foxes ]
									Node:
									(type) c
									(layer)3
										Element:p
											Usually we recommend using the same
										Element:code
											analyzer
											at index time and at search time. In the case of the
										Element:code
											edge_ngram
											tokenizer, the advice is different. It only makes sense to use the
										Element:code
											edge_ngram
											tokenizer at index time, to ensure that partial words are available for matching in the index. At search time, just search for the terms the user has typed in, for instance:
										Element:code
											Quick Fo
											.
									Node:
									(type) c
									(layer)3
										Element:p
											Below is an example of how to set up a field for
										Element:span
											:
										Element:em
											search-as-you-type
									Node:
									(type) c
									(layer)3
										Element:pre
											PUT my_index { "settings": { "analysis": { "analyzer": { "autocomplete": { "tokenizer": "autocomplete", "filter": [ "lowercase" ] }, "autocomplete_search": { "tokenizer": "lowercase" } }, "tokenizer": { "autocomplete": { "type": "edge_ngram", "min_gram": 2, "max_gram": 10, "token_chars": [ "letter" ] } } } }, "mappings": { "doc": { "properties": { "title": { "type": "text", "analyzer": "autocomplete", "search_analyzer": "autocomplete_search" } } } } } PUT my_index/doc/1 { "title": "Quick Foxes"
										Element:a
										Element:span
											} POST my_index/_refresh GET my_index/_search { "query": { "match": { "title": { "query": "Quick Fo",
										Element:img
										Element:a
										Element:span
											"operator": "and" } } } }
										Element:img
									Node:
									(type) c
									(layer)3
										Element:table
										Element:tr
										Element:td
										Element:p
										Element:a
										Element:span
										Element:img
										Element:td
										Element:p
											The
										Element:code
											autocomplete
											analyzer indexes the terms
										Element:code
											[qu, qui, quic, quick, fo, fox, foxe, foxes]
											.
										Element:tr
										Element:td
										Element:p
										Element:a
										Element:span
										Element:img
										Element:td
										Element:p
											The
										Element:code
											autocomplete_search
											analyzer searches for the terms
										Element:code
											[quick, fo]
											, both of which appear in the index.
									Node:
									(type) c
									(layer)3
										Element:span
										Element:a
											« NGram Tokenizer
									Node:
									(type) c
									(layer)3
										Element:span
										Element:a
											Keyword Tokenizer »
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Top Videos
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:a
											Elasticsearch Demo
										Element:li
										Element:a
											Kibana 101
										Element:li
										Element:a
											Logstash Primer
									Node:
									(type) c
									(layer)3
															Node:
															(type) c
															(layer)5
																Element:h5
																	Be in the know with the latest and greatest from Elastic.
															Node:
															(type) c
															(layer)5
																Element:p
																	Thanks for subscribing! We'll keep you updated with new releases.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:footer
										Element:h3
										Element:a
											Products >
										Element:ul
										Element:li
										Element:a
											Elasticsearch
										Element:li
										Element:a
											Kibana
										Element:li
										Element:a
											Beats
										Element:li
										Element:a
											Logstash
										Element:li
										Element:a
											X-Pack
										Element:li
										Element:a
											Elastic Cloud
										Element:li
										Element:a
											Security (formerly Shield)
										Element:li
										Element:a
											Alerting (via Watcher)
										Element:li
										Element:a
											Monitoring (formerly Marvel)
										Element:li
										Element:a
											Graph
										Element:li
										Element:a
											Reporting
										Element:li
										Element:a
											Machine Learning
										Element:li
										Element:a
											ES-Hadoop
										Element:h3
											Resources
										Element:ul
										Element:li
										Element:a
											Blog
										Element:li
										Element:a
											Cloud Status
										Element:li
										Element:a
											Community
										Element:li
										Element:a
											Customers & Use Cases
										Element:li
										Element:a
											Documentation
										Element:li
										Element:a
											Elastic{ON} Events
										Element:li
										Element:a
											Forums
										Element:li
										Element:a
											Meetups
										Element:li
										Element:a
											Subscriptions
										Element:li
										Element:a
											Support Portal
										Element:li
										Element:a
											Videos & Webinars
										Element:li
										Element:a
											Training
										Element:h3
										Element:a
											About >
										Element:ul
										Element:li
										Element:a
											Careers/Jobs
										Element:li
										Element:a
											Contact
										Element:li
										Element:a
											Leadership
										Element:li
										Element:a
											Partners
										Element:li
										Element:a
											Press
										Element:h3
											Language
										Element:ul
										Element:li
										Element:a
											English
										Element:li
										Element:a
											Français
										Element:li
										Element:a
											Deutsch
										Element:li
										Element:a
											日本語
										Element:li
										Element:a
											한국어
										Element:p
											FOLLOW US
										Element:ul
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:ul
										Element:li
										Element:a
											Trademarks
										Element:li
										Element:a
											Terms of Use
										Element:li
										Element:a
											Privacy
										Element:li
										Element:a
											Cookie Policy
										Element:li
										Element:a
											Brand
										Element:a
										Element:img
										Element:p
											© 2017. All Rights Reserved - Elasticsearch
										Element:p
											Elasticsearch is a trademark of Elasticsearch BV, registered in the U.S. and in other countries
										Element:p
											Apache, Apache Lucene, Apache Hadoop, Hadoop, HDFS and the yellow elephant logo are trademarks of the
										Element:a
											Apache Software Foundation
											in the United States and/or other countries.
