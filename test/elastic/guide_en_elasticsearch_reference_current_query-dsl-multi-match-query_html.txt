Node:
(type) c
(layer)0
	Element:body
						Node:
						(type) h2
						(layer)2
							Element:h2
							Element:a
								Multi Match Query
							Element:a
								edit
						Node:
						(type) c
						(layer)2
							Element:p
								The
							Element:code
								multi_match
								query builds on the
							Element:a
								to allow multi-field queries:
							Element:code
								match
								query
						Node:
						(type) c
						(layer)2
							Element:pre
								GET /_search { "query": { "multi_match" : { "query": "this is a test",
							Element:a
							Element:span
								"fields": [ "subject", "message" ]
							Element:img
							Element:a
							Element:span
								} } }
							Element:img
						Node:
						(type) c
						(layer)2
							Element:table
							Element:tr
							Element:td
							Element:p
							Element:a
							Element:span
							Element:img
							Element:td
							Element:p
								The query string.
							Element:tr
							Element:td
							Element:p
							Element:a
							Element:span
							Element:img
							Element:td
							Element:p
								The fields to be queried.
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:a
													Element:code
														fields
														and per-field boosting
													Element:a
														edit
												Node:
												(type) c
												(layer)4
													Element:p
														Fields can be specified with wildcards, eg:
												Node:
												(type) c
												(layer)4
													Element:pre
														GET /_search { "query": { "multi_match" : { "query": "Will Smith", "fields": [ "title", "*_name" ]
													Element:a
													Element:span
														} } }
													Element:img
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tr
													Element:td
													Element:p
													Element:a
													Element:span
													Element:img
													Element:td
													Element:p
														Query the
													Element:code
														title
														,
													Element:code
														first_name
														and
													Element:code
														last_name
														fields.
												Node:
												(type) c
												(layer)4
													Element:p
														Individual fields can be boosted with the caret (
													Element:code
														^
														) notation:
												Node:
												(type) c
												(layer)4
													Element:pre
														GET /_search { "query": { "multi_match" : { "query" : "this is a test", "fields" : [ "subject^3", "message" ]
													Element:a
													Element:span
														} } }
													Element:img
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tr
													Element:td
													Element:p
													Element:a
													Element:span
													Element:img
													Element:td
													Element:p
														The
													Element:code
														subject
														field is three times as important as the
													Element:code
														message
														field.
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:a
														Types of
													Element:code
														multi_match
														query:
													Element:a
														edit
												Node:
												(type) c
												(layer)4
													Element:p
														The way the
													Element:code
														multi_match
														query is executed internally depends on the
													Element:code
														type
														parameter, which can be set to:
												Node:
												(type) c
												(layer)4
													Element:table
													Element:colgroup
													Element:col
													Element:col
													Element:tbody
													Element:tr
													Element:td
													Element:p
													Element:code
														best_fields
													Element:td
													Element:p
														(
													Element:span
														) Finds documents which match any field, but uses the
													Element:strong
														default
													Element:code
														_score
														from the best field. See
													Element:a
														.
													Element:code
														best_fields
													Element:tr
													Element:td
													Element:p
													Element:code
														most_fields
													Element:td
													Element:p
														Finds documents which match any field and combines the
													Element:code
														_score
														from each field. See
													Element:a
														.
													Element:code
														most_fields
													Element:tr
													Element:td
													Element:p
													Element:code
														cross_fields
													Element:td
													Element:p
														Treats fields with the same
													Element:code
														analyzer
														as though they were one big field. Looks for each word in
													Element:span
														field. See
													Element:strong
														any
													Element:a
														.
													Element:code
														cross_fields
													Element:tr
													Element:td
													Element:p
													Element:code
														phrase
													Element:td
													Element:p
														Runs a
													Element:code
														match_phrase
														query on each field and combines the
													Element:code
														_score
														from each field. See
													Element:a
														.
													Element:code
														phrase
														and
													Element:code
														phrase_prefix
													Element:tr
													Element:td
													Element:p
													Element:code
														phrase_prefix
													Element:td
													Element:p
														Runs a
													Element:code
														match_phrase_prefix
														query on each field and combines the
													Element:code
														_score
														from each field. See
													Element:a
														.
													Element:code
														phrase
														and
													Element:code
														phrase_prefix
												Node:
												(type) c
												(layer)4
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
										Element:code
											best_fields
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											The
										Element:code
											best_fields
											type is most useful when you are searching for multiple words best found in the same field. For instance “brown fox” in a single field is more meaningful than “brown” in one field and “fox” in the other.
									Node:
									(type) c
									(layer)3
										Element:p
											The
										Element:code
											best_fields
											type generates a
										Element:a
											for each field and wraps them in a
										Element:code
											match
											query
										Element:a
											query, to find the single best matching field. For instance, this query:
										Element:code
											dis_max
									Node:
									(type) c
									(layer)3
										Element:pre
											GET /_search { "query": { "multi_match" : { "query": "brown fox", "type": "best_fields", "fields": [ "subject", "message" ], "tie_breaker": 0.3 } } }
									Node:
									(type) c
									(layer)3
										Element:p
											would be executed as:
									Node:
									(type) c
									(layer)3
										Element:pre
											GET /_search { "query": { "dis_max": { "queries": [ { "match": { "subject": "brown fox" }}, { "match": { "message": "brown fox" }} ], "tie_breaker": 0.3 } } }
									Node:
									(type) c
									(layer)3
										Element:p
											Normally the
										Element:code
											best_fields
											type uses the score of the
										Element:span
											best matching field, but if
										Element:strong
											single
										Element:code
											tie_breaker
											is specified, then it calculates the score as follows:
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
											the score from the best matching field
										Element:li
											plus
										Element:code
											tie_breaker * _score
											for all other matching fields
									Node:
									(type) c
									(layer)3
										Element:p
											Also, accepts
										Element:code
											analyzer
											,
										Element:code
											boost
											,
										Element:code
											operator
											,
										Element:code
											minimum_should_match
											,
										Element:code
											fuzziness
											,
										Element:code
											lenient
											,
										Element:code
											prefix_length
											,
										Element:code
											max_expansions
											,
										Element:code
											rewrite
											,
										Element:code
											zero_terms_query
											and
										Element:code
											cutoff_frequency
											, as explained in
										Element:a
											match query
											.
									Node:
									(type) c
									(layer)3
										Element:img
												Node:
												(type) c
												(layer)4
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:code
											operator
											and
										Element:code
											minimum_should_match
										Element:a
									Node:
									(type) c
									(layer)3
										Element:p
											The
										Element:code
											best_fields
											and
										Element:code
											most_fields
											types are
										Element:span
											— they generate a
										Element:em
											field-centric
										Element:code
											match
											query
										Element:span
											. This means that the
										Element:strong
											per field
										Element:code
											operator
											and
										Element:code
											minimum_should_match
											parameters are applied to each field individually, which is probably not what you want.
									Node:
									(type) c
									(layer)3
										Element:p
											Take this query for example:
									Node:
									(type) c
									(layer)3
										Element:pre
											GET /_search { "query": { "multi_match" : { "query": "Will Smith", "type": "best_fields", "fields": [ "first_name", "last_name" ], "operator": "and"
										Element:a
										Element:span
											} } }
										Element:img
									Node:
									(type) c
									(layer)3
										Element:table
										Element:tr
										Element:td
										Element:p
										Element:a
										Element:span
										Element:img
										Element:td
										Element:p
											All terms must be present.
									Node:
									(type) c
									(layer)3
										Element:p
											This query is executed as:
									Node:
									(type) c
									(layer)3
										Element:pre
											(+first_name:will +first_name:smith) | (+last_name:will +last_name:smith)
									Node:
									(type) c
									(layer)3
										Element:p
											In other words,
										Element:span
											must be present
										Element:strong
											all terms
										Element:span
											for a document to match.
										Element:strong
											in a single field
									Node:
									(type) c
									(layer)3
										Element:p
											See
										Element:a
											for a better solution.
										Element:code
											cross_fields
												Node:
												(type) c
												(layer)4
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
										Element:code
											most_fields
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											The
										Element:code
											most_fields
											type is most useful when querying multiple fields that contain the same text analyzed in different ways. For instance, the main field may contain synonyms, stemming and terms without diacritics. A second field may contain the original terms, and a third field might contain shingles. By combining scores from all three fields we can match as many documents as possible with the main field, but use the second and third fields to push the most similar results to the top of the list.
									Node:
									(type) c
									(layer)3
										Element:p
											This query:
									Node:
									(type) c
									(layer)3
										Element:pre
											GET /_search { "query": { "multi_match" : { "query": "quick brown fox", "type": "most_fields", "fields": [ "title", "title.original", "title.shingles" ] } } }
									Node:
									(type) c
									(layer)3
										Element:p
											would be executed as:
									Node:
									(type) c
									(layer)3
										Element:pre
											GET /_search { "query": { "bool": { "should": [ { "match": { "title": "quick brown fox" }}, { "match": { "title.original": "quick brown fox" }}, { "match": { "title.shingles": "quick brown fox" }} ] } } }
									Node:
									(type) c
									(layer)3
										Element:p
											The score from each
										Element:code
											match
											clause is added together, then divided by the number of
										Element:code
											match
											clauses.
									Node:
									(type) c
									(layer)3
										Element:p
											Also, accepts
										Element:code
											analyzer
											,
										Element:code
											boost
											,
										Element:code
											operator
											,
										Element:code
											minimum_should_match
											,
										Element:code
											fuzziness
											,
										Element:code
											lenient
											,
										Element:code
											prefix_length
											,
										Element:code
											max_expansions
											,
										Element:code
											rewrite
											,
										Element:code
											zero_terms_query
											and
										Element:code
											cutoff_frequency
											, as explained in
										Element:a
											match query
											, but
										Element:span
											.
										Element:strong
											see
										Element:a
										Element:code
											operator
											and
										Element:code
											minimum_should_match
												Node:
												(type) c
												(layer)4
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
										Element:code
											phrase
											and
										Element:code
											phrase_prefix
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											The
										Element:code
											phrase
											and
										Element:code
											phrase_prefix
											types behave just like
										Element:a
											, but they use a
										Element:code
											best_fields
										Element:code
											match_phrase
											or
										Element:code
											match_phrase_prefix
											query instead of a
										Element:code
											match
											query.
									Node:
									(type) c
									(layer)3
										Element:p
											This query:
									Node:
									(type) c
									(layer)3
										Element:pre
											GET /_search { "query": { "multi_match" : { "query": "quick brown f", "type": "phrase_prefix", "fields": [ "subject", "message" ] } } }
									Node:
									(type) c
									(layer)3
										Element:p
											would be executed as:
									Node:
									(type) c
									(layer)3
										Element:pre
											GET /_search { "query": { "dis_max": { "queries": [ { "match_phrase_prefix": { "subject": "quick brown f" }}, { "match_phrase_prefix": { "message": "quick brown f" }} ] } } }
									Node:
									(type) c
									(layer)3
										Element:p
											Also, accepts
										Element:code
											analyzer
											,
										Element:code
											boost
											,
										Element:code
											lenient
											,
										Element:code
											slop
											and
										Element:code
											zero_terms_query
											as explained in
										Element:a
											Match Query
											. Type
										Element:code
											phrase_prefix
											additionally accepts
										Element:code
											max_expansions
											.
									Node:
									(type) c
									(layer)3
										Element:img
												Node:
												(type) c
												(layer)4
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:code
											phrase
											,
										Element:code
											phrase_prefix
											and
										Element:code
											fuzziness
										Element:a
									Node:
									(type) c
									(layer)3
										Element:p
											The
										Element:code
											fuzziness
											parameter cannot be used with the
										Element:code
											phrase
											or
										Element:code
											phrase_prefix
											type.
												Node:
												(type) c
												(layer)4
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
										Element:code
											cross_fields
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											The
										Element:code
											cross_fields
											type is particularly useful with structured documents where multiple fields
										Element:span
											match. For instance, when querying the
										Element:strong
											should
										Element:code
											first_name
											and
										Element:code
											last_name
											fields for “Will Smith”, the best match is likely to have “Will” in one field and “Smith” in the other.
									Node:
									(type) c
									(layer)3
										Element:p
											This sounds like a job for
										Element:a
											but there are two problems with that approach. The first problem is that
										Element:code
											most_fields
										Element:code
											operator
											and
										Element:code
											minimum_should_match
											are applied per-field, instead of per-term (see
										Element:a
											explanation above
											).
									Node:
									(type) c
									(layer)3
										Element:p
											The second problem is to do with relevance: the different term frequencies in the
										Element:code
											first_name
											and
										Element:code
											last_name
											fields can produce unexpected results.
									Node:
									(type) c
									(layer)3
										Element:p
											For instance, imagine we have two people: “Will Smith” and “Smith Jones”. “Smith” as a last name is very common (and so is of low importance) but “Smith” as a first name is very uncommon (and so is of great importance).
									Node:
									(type) c
									(layer)3
										Element:p
											If we do a search for “Will Smith”, the “Smith Jones” document will probably appear above the better matching “Will Smith” because the score of
										Element:code
											first_name:smith
											has trumped the combined scores of
										Element:code
											first_name:will
											plus
										Element:code
											last_name:smith
											.
									Node:
									(type) c
									(layer)3
										Element:p
											One way of dealing with these types of queries is simply to index the
										Element:code
											first_name
											and
										Element:code
											last_name
											fields into a single
										Element:code
											full_name
											field. Of course, this can only be done at index time.
									Node:
									(type) c
									(layer)3
										Element:p
											The
										Element:code
											cross_field
											type tries to solve these problems at query time by taking a
										Element:span
											approach. It first analyzes the query string into individual terms, then looks for each term in any of the fields, as though they were one big field.
										Element:em
											term-centric
									Node:
									(type) c
									(layer)3
										Element:p
											A query like:
									Node:
									(type) c
									(layer)3
										Element:pre
											GET /_search { "query": { "multi_match" : { "query": "Will Smith", "type": "cross_fields", "fields": [ "first_name", "last_name" ], "operator": "and" } } }
									Node:
									(type) c
									(layer)3
										Element:p
											is executed as:
									Node:
									(type) c
									(layer)3
										Element:pre
											+(first_name:will last_name:will) +(first_name:smith last_name:smith)
									Node:
									(type) c
									(layer)3
										Element:p
											In other words,
										Element:span
											must be present
										Element:strong
											all terms
										Element:span
											for a document to match. (Compare this to
										Element:strong
											in at least one field
										Element:a
											the logic used for
											.)
										Element:code
											best_fields
											and
										Element:code
											most_fields
									Node:
									(type) c
									(layer)3
										Element:p
											That solves one of the two problems. The problem of differing term frequencies is solved by
										Element:span
											the term frequencies for all fields in order to even out the differences.
										Element:em
											blending
									Node:
									(type) c
									(layer)3
										Element:p
											In practice,
										Element:code
											first_name:smith
											will be treated as though it has the same frequencies as
										Element:code
											last_name:smith
											, plus one. This will make matches on
										Element:code
											first_name
											and
										Element:code
											last_name
											have comparable scores, with a tiny advantage for
										Element:code
											last_name
											since it is the most likely field that contains
										Element:code
											smith
											.
									Node:
									(type) c
									(layer)3
										Element:p
											Note that
										Element:code
											cross_fields
											is usually only useful on short string fields that all have a
										Element:code
											boost
											of
										Element:code
											1
											. Otherwise boosts, term freqs and length normalization contribute to the score in such a way that the blending of term statistics is not meaningful anymore.
									Node:
									(type) c
									(layer)3
										Element:p
											If you run the above query through the
										Element:a
											, it returns this explanation:
										Element:em
											Validate API
									Node:
									(type) c
									(layer)3
										Element:pre
											+blended("will", fields: [first_name, last_name]) +blended("smith", fields: [first_name, last_name])
									Node:
									(type) c
									(layer)3
										Element:p
											Also, accepts
										Element:code
											analyzer
											,
										Element:code
											boost
											,
										Element:code
											operator
											,
										Element:code
											minimum_should_match
											,
										Element:code
											lenient
											,
										Element:code
											zero_terms_query
											and
										Element:code
											cutoff_frequency
											, as explained in
										Element:a
											match query
											.
									Node:
									(type) c
									(layer)3
										Element:h4
										Element:a
										Element:code
											cross_field
											and analysis
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											The
										Element:code
											cross_field
											type can only work in term-centric mode on fields that have the same analyzer. Fields with the same analyzer are grouped together as in the example above. If there are multiple groups, they are combined with a
										Element:code
											bool
											query.
									Node:
									(type) c
									(layer)3
										Element:p
											For instance, if we have a
										Element:code
											first
											and
										Element:code
											last
											field which have the same analyzer, plus a
										Element:code
											first.edge
											and
										Element:code
											last.edge
											which both use an
										Element:code
											edge_ngram
											analyzer, this query:
									Node:
									(type) c
									(layer)3
										Element:pre
											GET /_search { "query": { "multi_match" : { "query": "Jon", "type": "cross_fields", "fields": [ "first", "first.edge", "last", "last.edge" ] } } }
									Node:
									(type) c
									(layer)3
										Element:p
											would be executed as:
									Node:
									(type) c
									(layer)3
										Element:pre
											blended("jon", fields: [first, last]) | ( blended("j", fields: [first.edge, last.edge]) blended("jo", fields: [first.edge, last.edge]) blended("jon", fields: [first.edge, last.edge]) )
									Node:
									(type) c
									(layer)3
										Element:p
											In other words,
										Element:code
											first
											and
										Element:code
											last
											would be grouped together and treated as a single field, and
										Element:code
											first.edge
											and
										Element:code
											last.edge
											would be grouped together and treated as a single field.
									Node:
									(type) c
									(layer)3
										Element:p
											Having multiple groups is fine, but when combined with
										Element:code
											operator
											or
										Element:code
											minimum_should_match
											, it can suffer from the
										Element:a
											same problem
											as
										Element:code
											most_fields
											or
										Element:code
											best_fields
											.
									Node:
									(type) c
									(layer)3
										Element:p
											You can easily rewrite this query yourself as two separate
										Element:code
											cross_fields
											queries combined with a
										Element:code
											bool
											query, and apply the
										Element:code
											minimum_should_match
											parameter to just one of them:
									Node:
									(type) c
									(layer)3
										Element:pre
											GET /_search { "query": { "bool": { "should": [ { "multi_match" : { "query": "Will Smith", "type": "cross_fields", "fields": [ "first", "last" ], "minimum_should_match": "50%"
										Element:a
										Element:span
											} }, { "multi_match" : { "query": "Will Smith", "type": "cross_fields", "fields": [ "*.edge" ] } } ] } } }
										Element:img
									Node:
									(type) c
									(layer)3
										Element:table
										Element:tr
										Element:td
										Element:p
										Element:a
										Element:span
										Element:img
										Element:td
										Element:p
											Either
										Element:code
											will
											or
										Element:code
											smith
											must be present in either of the
										Element:code
											first
											or
										Element:code
											last
											fields
									Node:
									(type) c
									(layer)3
										Element:p
											You can force all fields into the same group by specifying the
										Element:code
											analyzer
											parameter in the query.
									Node:
									(type) c
									(layer)3
										Element:pre
											GET /_search { "query": { "multi_match" : { "query": "Jon", "type": "cross_fields", "analyzer": "standard",
										Element:a
										Element:span
											"fields": [ "first", "last", "*.edge" ] } } }
										Element:img
									Node:
									(type) c
									(layer)3
										Element:table
										Element:tr
										Element:td
										Element:p
										Element:a
										Element:span
										Element:img
										Element:td
										Element:p
											Use the
										Element:code
											standard
											analyzer for all fields.
									Node:
									(type) c
									(layer)3
										Element:p
											which will be executed as:
									Node:
									(type) c
									(layer)3
										Element:pre
											blended("will", fields: [first, first.edge, last.edge, last]) blended("smith", fields: [first, first.edge, last.edge, last])
									Node:
									(type) c
									(layer)3
										Element:h4
										Element:a
										Element:code
											tie_breaker
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											By default, each per-term
										Element:code
											blended
											query will use the best score returned by any field in a group, then these scores are added together to give the final score. The
										Element:code
											tie_breaker
											parameter can change the default behaviour of the per-term
										Element:code
											blended
											queries. It accepts:
									Node:
									(type) c
									(layer)3
										Element:table
										Element:colgroup
										Element:col
										Element:col
										Element:tbody
										Element:tr
										Element:td
										Element:p
										Element:code
											0.0
										Element:td
										Element:p
											Take the single best score out of (eg)
										Element:code
											first_name:will
											and
										Element:code
											last_name:will
											(
										Element:span
											)
										Element:strong
											default
										Element:tr
										Element:td
										Element:p
										Element:code
											1.0
										Element:td
										Element:p
											Add together the scores for (eg)
										Element:code
											first_name:will
											and
										Element:code
											last_name:will
										Element:tr
										Element:td
										Element:p
										Element:code
											0.0 < n < 1.0
										Element:td
										Element:p
											Take the single best score plus
										Element:code
											tie_breaker
											multiplied by each of the scores from other matching fields.
									Node:
									(type) c
									(layer)3
										Element:img
												Node:
												(type) c
												(layer)4
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:code
											cross_fields
											and
										Element:code
											fuzziness
										Element:a
									Node:
									(type) c
									(layer)3
										Element:p
											The
										Element:code
											fuzziness
											parameter cannot be used with the
										Element:code
											cross_fields
											type.
									Node:
									(type) c
									(layer)3
										Element:span
										Element:a
											« Match Phrase Prefix Query
									Node:
									(type) c
									(layer)3
										Element:span
										Element:a
											Common Terms Query »
												Node:
												(type) c
												(layer)4
									Node:
									(type) c
									(layer)3
										Element:h3
											Top Videos
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:a
											Elasticsearch Demo
										Element:li
										Element:a
											Kibana 101
										Element:li
										Element:a
											Logstash Primer
									Node:
									(type) c
									(layer)3
															Node:
															(type) c
															(layer)5
																Element:h5
																	Be in the know with the latest and greatest from Elastic.
															Node:
															(type) c
															(layer)5
																Element:p
																	Thanks for subscribing! We'll keep you updated with new releases.
												Node:
												(type) c
												(layer)4
									Node:
									(type) c
									(layer)3
										Element:footer
										Element:h3
										Element:a
											Products >
										Element:ul
										Element:li
										Element:a
											Elasticsearch
										Element:li
										Element:a
											Kibana
										Element:li
										Element:a
											Beats
										Element:li
										Element:a
											Logstash
										Element:li
										Element:a
											X-Pack
										Element:li
										Element:a
											Elastic Cloud
										Element:li
										Element:a
											Security (formerly Shield)
										Element:li
										Element:a
											Alerting (via Watcher)
										Element:li
										Element:a
											Monitoring (formerly Marvel)
										Element:li
										Element:a
											Graph
										Element:li
										Element:a
											Reporting
										Element:li
										Element:a
											Machine Learning
										Element:li
										Element:a
											ES-Hadoop
										Element:h3
											Resources
										Element:ul
										Element:li
										Element:a
											Blog
										Element:li
										Element:a
											Cloud Status
										Element:li
										Element:a
											Community
										Element:li
										Element:a
											Customers & Use Cases
										Element:li
										Element:a
											Documentation
										Element:li
										Element:a
											Elastic{ON} Events
										Element:li
										Element:a
											Forums
										Element:li
										Element:a
											Meetups
										Element:li
										Element:a
											Subscriptions
										Element:li
										Element:a
											Support Portal
										Element:li
										Element:a
											Videos & Webinars
										Element:li
										Element:a
											Training
										Element:h3
										Element:a
											About >
										Element:ul
										Element:li
										Element:a
											Careers/Jobs
										Element:li
										Element:a
											Contact
										Element:li
										Element:a
											Leadership
										Element:li
										Element:a
											Partners
										Element:li
										Element:a
											Press
										Element:h3
											Language
										Element:ul
										Element:li
										Element:a
											English
										Element:li
										Element:a
											Français
										Element:li
										Element:a
											Deutsch
										Element:li
										Element:a
											日本語
										Element:li
										Element:a
											한국어
										Element:p
											FOLLOW US
										Element:ul
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:ul
										Element:li
										Element:a
											Trademarks
										Element:li
										Element:a
											Terms of Use
										Element:li
										Element:a
											Privacy
										Element:li
										Element:a
											Cookie Policy
										Element:li
										Element:a
											Brand
										Element:a
										Element:img
										Element:p
											© 2017. All Rights Reserved - Elasticsearch
										Element:p
											Elasticsearch is a trademark of Elasticsearch BV, registered in the U.S. and in other countries
										Element:p
											Apache, Apache Lucene, Apache Hadoop, Hadoop, HDFS and the yellow elephant logo are trademarks of the
										Element:a
											Apache Software Foundation
											in the United States and/or other countries.
