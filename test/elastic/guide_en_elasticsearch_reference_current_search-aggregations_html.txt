Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
				Element:a
					Aggregations
				Element:a
					edit
			Node:
			(type) c
			(layer)1
				Element:p
					The aggregations framework helps provide aggregated data based on a search query. It is based on simple building blocks called aggregations, that can be composed in order to build complex summaries of the data.
			Node:
			(type) c
			(layer)1
				Element:p
					An aggregation can be seen as a
				Element:span
					that builds analytic information over a set of documents. The context of the execution defines what this document set is (e.g. a top-level aggregation executes within the context of the executed query/filters of the search request).
				Element:em
					unit-of-work
			Node:
			(type) c
			(layer)1
				Element:p
					There are many different types of aggregations, each with its own purpose and output. To better understand these types, it is often easier to break them into three main families:
			Node:
			(type) c
			(layer)1
				Element:dl
				Element:dt
				Element:span
				Element:a
				Element:span
				Element:em
					Bucketing
				Element:dd
					A family of aggregations that build buckets, where each bucket is associated with a
				Element:span
					and a document criterion. When the aggregation is executed, all the buckets criteria are evaluated on every document in the context and when a criterion matches, the document is considered to "fall in" the relevant bucket. By the end of the aggregation process, we’ll end up with a list of buckets - each one with a set of documents that "belong" to it.
				Element:em
					key
				Element:dt
				Element:span
				Element:a
				Element:span
				Element:em
					Metric
				Element:dd
					Aggregations that keep track and compute metrics over a set of documents.
				Element:dt
				Element:span
				Element:a
				Element:span
				Element:em
					Matrix
				Element:dd
					A family of aggregations that operate on multiple fields and produce a matrix result based on the values extracted from the requested document fields. Unlike metric and bucket aggregations, this aggregation family does not yet support scripting.
				Element:dt
				Element:span
				Element:a
				Element:span
				Element:em
					Pipeline
				Element:dd
					Aggregations that aggregate the output of other aggregations and their associated metrics
			Node:
			(type) c
			(layer)1
				Element:p
					The interesting part comes next. Since each bucket effectively defines a document set (all documents belonging to the bucket), one can potentially associate aggregations on the bucket level, and those will execute within the context of that bucket. This is where the real power of aggregations kicks in:
				Element:span
				Element:strong
					aggregations can be nested!
			Node:
			(type) c
			(layer)1
				Element:img
			Node:
			(type) c
			(layer)1
				Element:p
					Bucketing aggregations can have sub-aggregations (bucketing or metric). The sub-aggregations will be computed for the buckets which their parent aggregation generates. There is no hard limit on the level/depth of nested aggregations (one can nest an aggregation under a "parent" aggregation, which is itself a sub-aggregation of another higher-level aggregation).
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
							Element:a
								Structuring Aggregations
							Element:a
								edit
						Node:
						(type) c
						(layer)2
							Element:p
								The following snippet captures the basic structure of aggregations:
						Node:
						(type) c
						(layer)2
							Element:pre
								"aggregations" : { "<aggregation_name>" : { "<aggregation_type>" : { <aggregation_body> } [,"meta" : { [<meta_data_body>] } ]? [,"aggregations" : { [<sub_aggregation>]+ } ]? } [,"<aggregation_name_2>" : { ... } ]* }
						Node:
						(type) c
						(layer)2
							Element:p
								The
							Element:code
								aggregations
								object (the key
							Element:code
								aggs
								can also be used) in the JSON holds the aggregations to be computed. Each aggregation is associated with a logical name that the user defines (e.g. if the aggregation computes the average price, then it would make sense to name it
							Element:code
								avg_price
								). These logical names will also be used to uniquely identify the aggregations in the response. Each aggregation has a specific type (
							Element:code
								<aggregation_type>
								in the above snippet) and is typically the first key within the named aggregation body. Each type of aggregation defines its own body, depending on the nature of the aggregation (e.g. an
							Element:code
								avg
								aggregation on a specific field will define the field on which the average will be calculated). At the same level of the aggregation type definition, one can optionally define a set of additional aggregations, though this only makes sense if the aggregation you defined is of a bucketing nature. In this scenario, the sub-aggregations you define on the bucketing aggregation level will be computed for all the buckets built by the bucketing aggregation. For example, if you define a set of aggregations under the
							Element:code
								range
								aggregation, the sub-aggregations will be computed for the range buckets that are defined.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Values Source
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											Some aggregations work on values extracted from the aggregated documents. Typically, the values will be extracted from a specific document field which is set using the
										Element:code
											field
											key for the aggregations. It is also possible to define a
										Element:a
											which will generate the values (per document).
										Element:code
											script
									Node:
									(type) c
									(layer)3
										Element:p
											When both
										Element:code
											field
											and
										Element:code
											script
											settings are configured for the aggregation, the script will be treated as a
										Element:code
											value script
											. While normal scripts are evaluated on a document level (i.e. the script has access to all the data associated with the document), value scripts are evaluated on the
										Element:span
											level. In this mode, the values are extracted from the configured
										Element:strong
											value
										Element:code
											field
											and the
										Element:code
											script
											is used to apply a "transformation" over these value/s.
									Node:
									(type) c
									(layer)3
										Element:img
									Node:
									(type) c
									(layer)3
										Element:a
									Node:
									(type) c
									(layer)3
										Element:p
											When working with scripts, the
										Element:code
											lang
											and
										Element:code
											params
											settings can also be defined. The former defines the scripting language which is used (assuming the proper language is available in Elasticsearch, either by default or as a plugin). The latter enables defining all the "dynamic" expressions in the script as parameters, which enables the script to keep itself static between calls (this will ensure the use of the cached compiled scripts in Elasticsearch).
									Node:
									(type) c
									(layer)3
										Element:p
											Elasticsearch uses the type of the field in the mapping in order to figure out how to run the aggregation and format the response. However there are two cases in which Elasticsearch cannot figure out this information: unmapped fields (for instance in the case of a search request across multiple indices, and only some of them have a mapping for the field) and pure scripts. For those cases, it is possible to give Elasticsearch a hint using the
										Element:code
											value_type
											option, which accepts the following values:
										Element:code
											string
											,
										Element:code
											long
											(works for all integer types),
										Element:code
											double
											(works for all decimal types like
										Element:code
											float
											or
										Element:code
											scaled_float
											),
										Element:code
											date
											,
										Element:code
											ip
											and
										Element:code
											boolean
											.
									Node:
									(type) c
									(layer)3
										Element:span
										Element:a
											« Field stats API
									Node:
									(type) c
									(layer)3
										Element:span
										Element:a
											Metrics Aggregations »
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Top Videos
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:a
											Elasticsearch Demo
										Element:li
										Element:a
											Kibana 101
										Element:li
										Element:a
											Logstash Primer
									Node:
									(type) c
									(layer)3
															Node:
															(type) c
															(layer)5
																Element:h5
																	Be in the know with the latest and greatest from Elastic.
															Node:
															(type) c
															(layer)5
																Element:p
																	Thanks for subscribing! We'll keep you updated with new releases.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:footer
										Element:h3
										Element:a
											Products >
										Element:ul
										Element:li
										Element:a
											Elasticsearch
										Element:li
										Element:a
											Kibana
										Element:li
										Element:a
											Beats
										Element:li
										Element:a
											Logstash
										Element:li
										Element:a
											X-Pack
										Element:li
										Element:a
											Elastic Cloud
										Element:li
										Element:a
											Security (formerly Shield)
										Element:li
										Element:a
											Alerting (via Watcher)
										Element:li
										Element:a
											Monitoring (formerly Marvel)
										Element:li
										Element:a
											Graph
										Element:li
										Element:a
											Reporting
										Element:li
										Element:a
											Machine Learning
										Element:li
										Element:a
											ES-Hadoop
										Element:h3
											Resources
										Element:ul
										Element:li
										Element:a
											Blog
										Element:li
										Element:a
											Cloud Status
										Element:li
										Element:a
											Community
										Element:li
										Element:a
											Customers & Use Cases
										Element:li
										Element:a
											Documentation
										Element:li
										Element:a
											Elastic{ON} Events
										Element:li
										Element:a
											Forums
										Element:li
										Element:a
											Meetups
										Element:li
										Element:a
											Subscriptions
										Element:li
										Element:a
											Support Portal
										Element:li
										Element:a
											Videos & Webinars
										Element:li
										Element:a
											Training
										Element:h3
										Element:a
											About >
										Element:ul
										Element:li
										Element:a
											Careers/Jobs
										Element:li
										Element:a
											Contact
										Element:li
										Element:a
											Leadership
										Element:li
										Element:a
											Partners
										Element:li
										Element:a
											Press
										Element:h3
											Language
										Element:ul
										Element:li
										Element:a
											English
										Element:li
										Element:a
											Français
										Element:li
										Element:a
											Deutsch
										Element:li
										Element:a
											日本語
										Element:li
										Element:a
											한국어
										Element:p
											FOLLOW US
										Element:ul
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:ul
										Element:li
										Element:a
											Trademarks
										Element:li
										Element:a
											Terms of Use
										Element:li
										Element:a
											Privacy
										Element:li
										Element:a
											Cookie Policy
										Element:li
										Element:a
											Brand
										Element:a
										Element:img
										Element:p
											© 2017. All Rights Reserved - Elasticsearch
										Element:p
											Elasticsearch is a trademark of Elasticsearch BV, registered in the U.S. and in other countries
										Element:p
											Apache, Apache Lucene, Apache Hadoop, Hadoop, HDFS and the yellow elephant logo are trademarks of the
										Element:a
											Apache Software Foundation
											in the United States and/or other countries.
