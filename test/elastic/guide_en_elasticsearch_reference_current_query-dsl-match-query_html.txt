Node:
(type) c
(layer)0
	Element:body
						Node:
						(type) h2
						(layer)2
							Element:h2
							Element:a
								Match Query
							Element:a
								edit
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								match
								queries accept text/numerics/dates, analyzes them, and constructs a query. For example:
						Node:
						(type) c
						(layer)2
							Element:pre
								GET /_search { "query": { "match" : { "message" : "this is a test" } } }
						Node:
						(type) c
						(layer)2
							Element:p
								Note,
							Element:code
								message
								is the name of a field, you can substitute the name of any field (including
							Element:code
								_all
								) instead.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											match
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											The
										Element:code
											match
											query is of type
										Element:code
											boolean
											. It means that the text provided is analyzed and the analysis process constructs a boolean query from the provided text. The
										Element:code
											operator
											flag can be set to
										Element:code
											or
											or
										Element:code
											and
											to control the boolean clauses (defaults to
										Element:code
											or
											). The minimum number of optional
										Element:code
											should
											clauses to match can be set using the
										Element:a
											parameter.
										Element:code
											minimum_should_match
									Node:
									(type) c
									(layer)3
										Element:p
											The
										Element:code
											analyzer
											can be set to control which analyzer will perform the analysis process on the text. It defaults to the field explicit mapping definition, or the default search analyzer.
									Node:
									(type) c
									(layer)3
										Element:p
											The
										Element:code
											lenient
											parameter can be set to
										Element:code
											true
											to ignore exceptions caused by data-type mismatches, such as trying to query a numeric field with a text query string. Defaults to
										Element:code
											false
											.
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:a
														Fuzziness
													Element:a
														edit
												Node:
												(type) c
												(layer)4
													Element:p
													Element:code
														fuzziness
														allows
													Element:span
														based on the type of field being queried. See
													Element:em
														fuzzy matching
													Element:a
														the section called “Fuzziness
													Element:a
														edit
														” for allowed settings.
												Node:
												(type) c
												(layer)4
													Element:p
														The
													Element:code
														prefix_length
														and
													Element:code
														max_expansions
														can be set in this case to control the fuzzy process. If the fuzzy option is set the query will use
													Element:code
														top_terms_blended_freqs_${max_expansions}
														as its
													Element:a
														rewrite method
														the
													Element:code
														fuzzy_rewrite
														parameter allows to control how the query will get rewritten.
												Node:
												(type) c
												(layer)4
													Element:p
														Fuzzy transpositions (
													Element:code
														ab
														→
													Element:code
														ba
														) are allowed by default but can be disabled by setting
													Element:code
														fuzzy_transpositions
														to
													Element:code
														false
														.
												Node:
												(type) c
												(layer)4
													Element:p
														Here is an example when providing additional parameters (note the slight change in structure,
													Element:code
														message
														is the field name):
												Node:
												(type) c
												(layer)4
													Element:pre
														GET /_search { "query": { "match" : { "message" : { "query" : "this is a test", "operator" : "and" } } } }
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:a
														Zero terms query
													Element:a
														edit
												Node:
												(type) c
												(layer)4
													Element:p
														If the analyzer used removes all tokens in a query like a
													Element:code
														stop
														filter does, the default behavior is to match no documents at all. In order to change that the
													Element:code
														zero_terms_query
														option can be used, which accepts
													Element:code
														none
														(default) and
													Element:code
														all
														which corresponds to a
													Element:code
														match_all
														query.
												Node:
												(type) c
												(layer)4
													Element:pre
														GET /_search { "query": { "match" : { "message" : { "query" : "to be or not to be", "operator" : "and", "zero_terms_query": "all" } } } }
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:a
														Cutoff frequency
													Element:a
														edit
												Node:
												(type) c
												(layer)4
													Element:p
														The match query supports a
													Element:code
														cutoff_frequency
														that allows specifying an absolute or relative document frequency where high frequency terms are moved into an optional subquery and are only scored if one of the low frequency (below the cutoff) terms in the case of an
													Element:code
														or
														operator or all of the low frequency terms in the case of an
													Element:code
														and
														operator match.
												Node:
												(type) c
												(layer)4
													Element:p
														This query allows handling
													Element:code
														stopwords
														dynamically at runtime, is domain independent and doesn’t require a stopword file. It prevents scoring / iterating high frequency terms and only takes the terms into account if a more significant / lower frequency term matches a document. Yet, if all of the query terms are above the given
													Element:code
														cutoff_frequency
														the query is automatically transformed into a pure conjunction (
													Element:code
														and
														) query to ensure fast execution.
												Node:
												(type) c
												(layer)4
													Element:p
														The
													Element:code
														cutoff_frequency
														can either be relative to the total number of documents if in the range
													Element:code
														[0..1)
														or absolute if greater or equal to
													Element:code
														1.0
														.
												Node:
												(type) c
												(layer)4
													Element:p
														Here is an example showing a query composed of stopwords exclusively:
												Node:
												(type) c
												(layer)4
													Element:pre
														GET /_search { "query": { "match" : { "message" : { "query" : "to be or not to be", "cutoff_frequency" : 0.001 } } } }
												Node:
												(type) c
												(layer)4
													Element:img
												Node:
												(type) c
												(layer)4
													Element:p
														The
													Element:code
														cutoff_frequency
														option operates on a per-shard-level. This means that when trying it out on test indexes with low document numbers you should follow the advice in
													Element:a
														Relevance is broken
														.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:strong
														Comparison to query_string / field
												Node:
												(type) c
												(layer)4
													Element:p
														The match family of queries does not go through a "query parsing" process. It does not support field name prefixes, wildcard characters, or other "advanced" features. For this reason, chances of it failing are very small / non existent, and it provides an excellent behavior when it comes to just analyze and run that text as a query behavior (which is usually what a text search box does). Also, the
													Element:code
														phrase_prefix
														type can provide a great "as you type" behavior to automatically load search results.
												Node:
												(type) c
												(layer)4
													Element:span
													Element:a
														« Full text queries
												Node:
												(type) c
												(layer)4
													Element:span
													Element:a
														Match Phrase Query »
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Top Videos
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:a
											Elasticsearch Demo
										Element:li
										Element:a
											Kibana 101
										Element:li
										Element:a
											Logstash Primer
									Node:
									(type) c
									(layer)3
															Node:
															(type) c
															(layer)5
																Element:h5
																	Be in the know with the latest and greatest from Elastic.
															Node:
															(type) c
															(layer)5
																Element:p
																	Thanks for subscribing! We'll keep you updated with new releases.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:footer
										Element:h3
										Element:a
											Products >
										Element:ul
										Element:li
										Element:a
											Elasticsearch
										Element:li
										Element:a
											Kibana
										Element:li
										Element:a
											Beats
										Element:li
										Element:a
											Logstash
										Element:li
										Element:a
											X-Pack
										Element:li
										Element:a
											Elastic Cloud
										Element:li
										Element:a
											Security (formerly Shield)
										Element:li
										Element:a
											Alerting (via Watcher)
										Element:li
										Element:a
											Monitoring (formerly Marvel)
										Element:li
										Element:a
											Graph
										Element:li
										Element:a
											Reporting
										Element:li
										Element:a
											Machine Learning
										Element:li
										Element:a
											ES-Hadoop
										Element:h3
											Resources
										Element:ul
										Element:li
										Element:a
											Blog
										Element:li
										Element:a
											Cloud Status
										Element:li
										Element:a
											Community
										Element:li
										Element:a
											Customers & Use Cases
										Element:li
										Element:a
											Documentation
										Element:li
										Element:a
											Elastic{ON} Events
										Element:li
										Element:a
											Forums
										Element:li
										Element:a
											Meetups
										Element:li
										Element:a
											Subscriptions
										Element:li
										Element:a
											Support Portal
										Element:li
										Element:a
											Videos & Webinars
										Element:li
										Element:a
											Training
										Element:h3
										Element:a
											About >
										Element:ul
										Element:li
										Element:a
											Careers/Jobs
										Element:li
										Element:a
											Contact
										Element:li
										Element:a
											Leadership
										Element:li
										Element:a
											Partners
										Element:li
										Element:a
											Press
										Element:h3
											Language
										Element:ul
										Element:li
										Element:a
											English
										Element:li
										Element:a
											Français
										Element:li
										Element:a
											Deutsch
										Element:li
										Element:a
											日本語
										Element:li
										Element:a
											한국어
										Element:p
											FOLLOW US
										Element:ul
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:ul
										Element:li
										Element:a
											Trademarks
										Element:li
										Element:a
											Terms of Use
										Element:li
										Element:a
											Privacy
										Element:li
										Element:a
											Cookie Policy
										Element:li
										Element:a
											Brand
										Element:a
										Element:img
										Element:p
											© 2017. All Rights Reserved - Elasticsearch
										Element:p
											Elasticsearch is a trademark of Elasticsearch BV, registered in the U.S. and in other countries
										Element:p
											Apache, Apache Lucene, Apache Hadoop, Hadoop, HDFS and the yellow elephant logo are trademarks of the
										Element:a
											Apache Software Foundation
											in the United States and/or other countries.
