Node:
(type) c
(layer)0
	Element:body
						Node:
						(type) h2
						(layer)2
							Element:h2
							Element:a
								Advanced text scoring in scripts
							Element:a
								edit
						Node:
						(type) c
						(layer)2
							Element:img
								The functionality described on this page is considered experimental and may be changed or removed in a future release
						Node:
						(type) c
						(layer)2
							Element:p
								Text features, such as term or document frequency for a specific term can be accessed in scripts with the
							Element:code
								_index
								variable. This can be useful if, for example, you want to implement your own scoring model using for example a script inside a
							Element:a
								function score query
								. Statistics over the document collection are computed
							Element:span
								, not per index.
							Element:strong
								per shard
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Nomenclature:
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:table
										Element:colgroup
										Element:col
										Element:col
										Element:tbody
										Element:tr
										Element:td
										Element:p
										Element:code
											df
										Element:td
										Element:p
											document frequency. The number of documents a term appears in. Computed per field.
										Element:tr
										Element:td
										Element:p
										Element:code
											tf
										Element:td
										Element:p
											term frequency. The number times a term appears in a field in one specific document.
										Element:tr
										Element:td
										Element:p
										Element:code
											ttf
										Element:td
										Element:p
											total term frequency. The number of times this term appears in all documents, that is, the sum of
										Element:code
											tf
											over all documents. Computed per field.
									Node:
									(type) c
									(layer)3
										Element:p
										Element:code
											df
											and
										Element:code
											ttf
											are computed per shard and therefore these numbers can vary depending on the shard the current document resides in.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Shard statistics:
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:dl
										Element:dt
										Element:span
										Element:code
											_index.numDocs()
										Element:dd
											Number of documents in shard.
										Element:dt
										Element:span
										Element:code
											_index.maxDoc()
										Element:dd
											Maximal document number in shard.
										Element:dt
										Element:span
										Element:code
											_index.numDeletedDocs()
										Element:dd
											Number of deleted documents in shard.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Field statistics:
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											Field statistics can be accessed with a subscript operator like this:
										Element:code
											_index['FIELD']
											.
									Node:
									(type) c
									(layer)3
										Element:dl
										Element:dt
										Element:span
										Element:code
											_index['FIELD'].docCount()
										Element:dd
											Number of documents containing the field
										Element:code
											FIELD
											. Does not take deleted documents into account.
										Element:dt
										Element:span
										Element:code
											_index['FIELD'].sumttf()
										Element:dd
											Sum of
										Element:code
											ttf
											over all terms that appear in field
										Element:code
											FIELD
											in all documents.
										Element:dt
										Element:span
										Element:code
											_index['FIELD'].sumdf()
										Element:dd
											The sum of
										Element:code
											df
											s over all terms that appear in field
										Element:code
											FIELD
											in all documents.
									Node:
									(type) c
									(layer)3
										Element:p
											Field statistics are computed per shard and therefore these numbers can vary depending on the shard the current document resides in. The number of terms in a field cannot be accessed using the
										Element:code
											_index
											variable. See
										Element:a
											Token count datatype
											for how to do that.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Term statistics:
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											Term statistics for a field can be accessed with a subscript operator like this:
										Element:code
											_index['FIELD']['TERM']
											. This will never return null, even if term or field does not exist. If you do not need the term frequency, call
										Element:code
											_index['FIELD'].get('TERM', 0)
											to avoid unnecessary initialization of the frequencies. The flag will have only affect is your set the
										Element:a
											to
										Element:code
											index_options
										Element:code
											docs
											.
									Node:
									(type) c
									(layer)3
										Element:dl
										Element:dt
										Element:span
										Element:code
											_index['FIELD']['TERM'].df()
										Element:dd
										Element:code
											df
											of term
										Element:code
											TERM
											in field
										Element:code
											FIELD
											. Will be returned, even if the term is not present in the current document.
										Element:dt
										Element:span
										Element:code
											_index['FIELD']['TERM'].ttf()
										Element:dd
											The sum of term frequencies of term
										Element:code
											TERM
											in field
										Element:code
											FIELD
											over all documents. Will be returned, even if the term is not present in the current document.
										Element:dt
										Element:span
										Element:code
											_index['FIELD']['TERM'].tf()
										Element:dd
										Element:code
											tf
											of term
										Element:code
											TERM
											in field
										Element:code
											FIELD
											. Will be 0 if the term is not present in the current document.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Term positions, offsets and payloads:
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											If you need information on the positions of terms in a field, call
										Element:code
											_index['FIELD'].get('TERM', flag)
											where flag can be
									Node:
									(type) c
									(layer)3
										Element:table
										Element:colgroup
										Element:col
										Element:col
										Element:tbody
										Element:tr
										Element:td
										Element:p
										Element:code
											_POSITIONS
										Element:td
										Element:p
											if you need the positions of the term
										Element:tr
										Element:td
										Element:p
										Element:code
											_OFFSETS
										Element:td
										Element:p
											if you need the offsets of the term
										Element:tr
										Element:td
										Element:p
										Element:code
											_PAYLOADS
										Element:td
										Element:p
											if you need the payloads of the term
										Element:tr
										Element:td
										Element:p
										Element:code
											_CACHE
										Element:td
										Element:p
											if you need to iterate over all positions several times
									Node:
									(type) c
									(layer)3
										Element:p
											The iterator uses the underlying lucene classes to iterate over positions. For efficiency reasons, you can only iterate over positions once. If you need to iterate over the positions several times, set the
										Element:code
											_CACHE
											flag.
									Node:
									(type) c
									(layer)3
										Element:p
											You can combine the operators with a
										Element:code
											|
											if you need more than one info. For example, the following will return an object holding the positions and payloads, as well as all statistics:
									Node:
									(type) c
									(layer)3
										Element:pre
											`_index['FIELD'].get('TERM', _POSITIONS | _PAYLOADS)`
									Node:
									(type) c
									(layer)3
										Element:p
											Positions can be accessed with an iterator that returns an object (
										Element:code
											POS_OBJECT
											) holding position, offsets and payload for each term position.
									Node:
									(type) c
									(layer)3
										Element:dl
										Element:dt
										Element:span
										Element:code
											POS_OBJECT.position
										Element:dd
											The position of the term.
										Element:dt
										Element:span
										Element:code
											POS_OBJECT.startOffset
										Element:dd
											The start offset of the term.
										Element:dt
										Element:span
										Element:code
											POS_OBJECT.endOffset
										Element:dd
											The end offset of the term.
										Element:dt
										Element:span
										Element:code
											POS_OBJECT.payload
										Element:dd
											The payload of the term.
										Element:dt
										Element:span
										Element:code
											POS_OBJECT.payloadAsInt(missingValue)
										Element:dd
											The payload of the term converted to integer. If the current position has no payload, the
										Element:code
											missingValue
											will be returned. Call this only if you know that your payloads are integers.
										Element:dt
										Element:span
										Element:code
											POS_OBJECT.payloadAsFloat(missingValue)
										Element:dd
											The payload of the term converted to float. If the current position has no payload, the
										Element:code
											missingValue
											will be returned. Call this only if you know that your payloads are floats.
										Element:dt
										Element:span
										Element:code
											POS_OBJECT.payloadAsString()
										Element:dd
											The payload of the term converted to string. If the current position has no payload,
										Element:code
											null
											will be returned. Call this only if you know that your payloads are strings.
									Node:
									(type) c
									(layer)3
										Element:p
											Example: sums up all payloads for the term
										Element:code
											foo
											.
									Node:
									(type) c
									(layer)3
										Element:pre
											termInfo = _index['my_field'].get('foo',_PAYLOADS); score = 0; for (pos in termInfo) { score = score + pos.payloadAsInt(0); } return score;
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Term vectors:
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											The
										Element:code
											_index
											variable can only be used to gather statistics for single terms. If you want to use information on all terms in a field, you must store the term vectors (see
										Element:a
											). To access them, call
										Element:code
											term_vector
										Element:code
											_index.termVectors()
											to get a
										Element:a
											Fields
											instance. This object can then be used as described in
										Element:a
											lucene doc
											to iterate over fields and then for each field iterate over each term in the field. The method will return null if the term vectors were not stored.
									Node:
									(type) c
									(layer)3
										Element:span
										Element:a
											« Native (Java) Scripts
									Node:
									(type) c
									(layer)3
										Element:span
										Element:a
											Snapshot And Restore »
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Top Videos
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:a
											Elasticsearch Demo
										Element:li
										Element:a
											Kibana 101
										Element:li
										Element:a
											Logstash Primer
									Node:
									(type) c
									(layer)3
															Node:
															(type) c
															(layer)5
																Element:h5
																	Be in the know with the latest and greatest from Elastic.
															Node:
															(type) c
															(layer)5
																Element:p
																	Thanks for subscribing! We'll keep you updated with new releases.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:footer
										Element:h3
										Element:a
											Products >
										Element:ul
										Element:li
										Element:a
											Elasticsearch
										Element:li
										Element:a
											Kibana
										Element:li
										Element:a
											Beats
										Element:li
										Element:a
											Logstash
										Element:li
										Element:a
											X-Pack
										Element:li
										Element:a
											Elastic Cloud
										Element:li
										Element:a
											Security (formerly Shield)
										Element:li
										Element:a
											Alerting (via Watcher)
										Element:li
										Element:a
											Monitoring (formerly Marvel)
										Element:li
										Element:a
											Graph
										Element:li
										Element:a
											Reporting
										Element:li
										Element:a
											Machine Learning
										Element:li
										Element:a
											ES-Hadoop
										Element:h3
											Resources
										Element:ul
										Element:li
										Element:a
											Blog
										Element:li
										Element:a
											Cloud Status
										Element:li
										Element:a
											Community
										Element:li
										Element:a
											Customers & Use Cases
										Element:li
										Element:a
											Documentation
										Element:li
										Element:a
											Elastic{ON} Events
										Element:li
										Element:a
											Forums
										Element:li
										Element:a
											Meetups
										Element:li
										Element:a
											Subscriptions
										Element:li
										Element:a
											Support Portal
										Element:li
										Element:a
											Videos & Webinars
										Element:li
										Element:a
											Training
										Element:h3
										Element:a
											About >
										Element:ul
										Element:li
										Element:a
											Careers/Jobs
										Element:li
										Element:a
											Contact
										Element:li
										Element:a
											Leadership
										Element:li
										Element:a
											Partners
										Element:li
										Element:a
											Press
										Element:h3
											Language
										Element:ul
										Element:li
										Element:a
											English
										Element:li
										Element:a
											Français
										Element:li
										Element:a
											Deutsch
										Element:li
										Element:a
											日本語
										Element:li
										Element:a
											한국어
										Element:p
											FOLLOW US
										Element:ul
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:ul
										Element:li
										Element:a
											Trademarks
										Element:li
										Element:a
											Terms of Use
										Element:li
										Element:a
											Privacy
										Element:li
										Element:a
											Cookie Policy
										Element:li
										Element:a
											Brand
										Element:a
										Element:img
										Element:p
											© 2017. All Rights Reserved - Elasticsearch
										Element:p
											Elasticsearch is a trademark of Elasticsearch BV, registered in the U.S. and in other countries
										Element:p
											Apache, Apache Lucene, Apache Hadoop, Hadoop, HDFS and the yellow elephant logo are trademarks of the
										Element:a
											Apache Software Foundation
											in the United States and/or other countries.
