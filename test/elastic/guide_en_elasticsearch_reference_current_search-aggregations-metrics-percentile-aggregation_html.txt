Node:
(type) c
(layer)0
	Element:body
						Node:
						(type) h2
						(layer)2
							Element:h2
							Element:a
								Percentiles Aggregation
							Element:a
								edit
						Node:
						(type) c
						(layer)2
							Element:p
								A
							Element:code
								multi-value
								metrics aggregation that calculates one or more percentiles over numeric values extracted from the aggregated documents. These values can be extracted either from specific numeric fields in the documents, or be generated by a provided script.
						Node:
						(type) c
						(layer)2
							Element:p
								Percentiles show the point at which a certain percentage of observed values occur. For example, the 95th percentile is the value which is greater than 95% of the observed values.
						Node:
						(type) c
						(layer)2
							Element:p
								Percentiles are often used to find outliers. In normal distributions, the 0.13th and 99.87th percentiles represents three standard deviations from the mean. Any data which falls outside three standard deviations is often considered an anomaly.
						Node:
						(type) c
						(layer)2
							Element:p
								When a range of percentiles are retrieved, they can be used to estimate the data distribution and determine if the data is skewed, bimodal, etc.
						Node:
						(type) c
						(layer)2
							Element:p
								Assume your data consists of website load times. The average and median load times are not overly useful to an administrator. The max may be interesting, but it can be easily skewed by a single slow response.
						Node:
						(type) c
						(layer)2
							Element:p
								Let’s look at a range of percentiles representing load time:
						Node:
						(type) c
						(layer)2
							Element:pre
								{ "aggs" : { "load_time_outlier" : { "percentiles" : { "field" : "load_time"
							Element:a
							Element:span
								} } } }
							Element:img
						Node:
						(type) c
						(layer)2
							Element:table
							Element:tr
							Element:td
							Element:p
							Element:a
							Element:span
							Element:img
							Element:td
							Element:p
								The field
							Element:code
								load_time
								must be a numeric field
						Node:
						(type) c
						(layer)2
							Element:p
								By default, the
							Element:code
								percentile
								metric will generate a range of percentiles:
							Element:code
								[ 1, 5, 25, 50, 75, 95, 99 ]
								. The response will look like this:
						Node:
						(type) c
						(layer)2
							Element:pre
								{ ... "aggregations": { "load_time_outlier": { "values" : { "1.0": 15, "5.0": 20, "25.0": 23, "50.0": 25, "75.0": 29, "95.0": 60, "99.0": 150 } } } }
						Node:
						(type) c
						(layer)2
							Element:p
								As you can see, the aggregation will return a calculated value for each percentile in the default range. If we assume response times are in milliseconds, it is immediately obvious that the webpage normally loads in 15-30ms, but occasionally spikes to 60-150ms.
						Node:
						(type) c
						(layer)2
							Element:p
								Often, administrators are only interested in outliers — the extreme percentiles. We can specify just the percents we are interested in (requested percentiles must be a value between 0-100 inclusive):
						Node:
						(type) c
						(layer)2
							Element:pre
								{ "aggs" : { "load_time_outlier" : { "percentiles" : { "field" : "load_time", "percents" : [95, 99, 99.9]
							Element:a
							Element:span
								} } } }
							Element:img
						Node:
						(type) c
						(layer)2
							Element:table
							Element:tr
							Element:td
							Element:p
							Element:a
							Element:span
							Element:img
							Element:td
							Element:p
								Use the
							Element:code
								percents
								parameter to specify particular percentiles to calculate
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Script
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											The percentile metric supports scripting. For example, if our load times are in milliseconds but we want percentiles calculated in seconds, we could use a script to convert them on-the-fly:
									Node:
									(type) c
									(layer)3
										Element:pre
											{ "aggs" : { "load_time_outlier" : { "percentiles" : { "script" : { "lang": "painless", "inline": "doc['load_time'].value / params.timeUnit",
										Element:a
										Element:span
											"params" : { "timeUnit" : 1000
										Element:img
										Element:a
										Element:span
											} } } } } }
										Element:img
									Node:
									(type) c
									(layer)3
										Element:table
										Element:tr
										Element:td
										Element:p
										Element:a
										Element:span
										Element:img
										Element:td
										Element:p
											The
										Element:code
											field
											parameter is replaced with a
										Element:code
											script
											parameter, which uses the script to generate values which percentiles are calculated on
										Element:tr
										Element:td
										Element:p
										Element:a
										Element:span
										Element:img
										Element:td
										Element:p
											Scripting supports parameterized input just like any other script
									Node:
									(type) c
									(layer)3
										Element:p
											This will interpret the
										Element:code
											script
											parameter as an
										Element:code
											inline
											script with the
										Element:code
											painless
											script language and no script parameters. To use a file script use the following syntax:
									Node:
									(type) c
									(layer)3
										Element:pre
											{ "aggs" : { "load_time_outlier" : { "percentiles" : { "script" : { "file": "my_script", "params" : { "timeUnit" : 1000 } } } } } }
									Node:
									(type) c
									(layer)3
										Element:img
									Node:
									(type) c
									(layer)3
										Element:p
											for indexed scripts replace the
										Element:code
											file
											parameter with an
										Element:code
											id
											parameter.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Percentiles are (usually) approximate
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											There are many different algorithms to calculate percentiles. The naive implementation simply stores all the values in a sorted array. To find the 50th percentile, you simply find the value that is at
										Element:code
											my_array[count(my_array) * 0.5]
											.
									Node:
									(type) c
									(layer)3
										Element:p
											Clearly, the naive implementation does not scale — the sorted array grows linearly with the number of values in your dataset. To calculate percentiles across potentially billions of values in an Elasticsearch cluster,
										Element:span
											percentiles are calculated.
										Element:em
											approximate
									Node:
									(type) c
									(layer)3
										Element:p
											The algorithm used by the
										Element:code
											percentile
											metric is called TDigest (introduced by Ted Dunning in
										Element:a
											Computing Accurate Quantiles using T-Digests
											).
									Node:
									(type) c
									(layer)3
										Element:p
											When using this metric, there are a few guidelines to keep in mind:
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
											Accuracy is proportional to
										Element:code
											q(1-q)
											. This means that extreme percentiles (e.g. 99%) are more accurate than less extreme percentiles, such as the median
										Element:li
											For small sets of values, percentiles are highly accurate (and potentially 100% accurate if the data is small enough).
										Element:li
											As the quantity of values in a bucket grows, the algorithm begins to approximate the percentiles. It is effectively trading accuracy for memory savings. The exact level of inaccuracy is difficult to generalize, since it depends on your data distribution and volume of data being aggregated
									Node:
									(type) c
									(layer)3
										Element:p
											The following chart shows the relative error on a uniform distribution depending on the number of collected values and the requested percentile:
									Node:
									(type) c
									(layer)3
										Element:p
										Element:span
										Element:img
									Node:
									(type) c
									(layer)3
										Element:p
											It shows how precision is better for extreme percentiles. The reason why error diminishes for large number of values is that the law of large numbers makes the distribution of values more and more uniform and the t-digest tree can do a better job at summarizing it. It would not be the case on more skewed distributions.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Compression
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:img
											The compression parameter is specific to the current internal implementation of percentiles, and may change in the future
									Node:
									(type) c
									(layer)3
										Element:p
											Approximate algorithms must balance memory utilization with estimation accuracy. This balance can be controlled using a
										Element:code
											compression
											parameter:
									Node:
									(type) c
									(layer)3
										Element:pre
											{ "aggs" : { "load_time_outlier" : { "percentiles" : { "field" : "load_time", "tdigest": { "compression" : 200
										Element:a
										Element:span
											} } } } }
										Element:img
									Node:
									(type) c
									(layer)3
										Element:table
										Element:tr
										Element:td
										Element:p
										Element:a
										Element:span
										Element:img
										Element:td
										Element:p
											Compression controls memory usage and approximation error
									Node:
									(type) c
									(layer)3
										Element:p
											The TDigest algorithm uses a number of "nodes" to approximate percentiles — the more nodes available, the higher the accuracy (and large memory footprint) proportional to the volume of data. The
										Element:code
											compression
											parameter limits the maximum number of nodes to
										Element:code
											20 * compression
											.
									Node:
									(type) c
									(layer)3
										Element:p
											Therefore, by increasing the compression value, you can increase the accuracy of your percentiles at the cost of more memory. Larger compression values also make the algorithm slower since the underlying tree data structure grows in size, resulting in more expensive operations. The default compression value is
										Element:code
											100
											.
									Node:
									(type) c
									(layer)3
										Element:p
											A "node" uses roughly 32 bytes of memory, so under worst-case scenarios (large amount of data which arrives sorted and in-order) the default settings will produce a TDigest roughly 64KB in size. In practice data tends to be more random and the TDigest will use less memory.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											HDR Histogram
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:img
									Node:
									(type) c
									(layer)3
										Element:p
											This functionality is experimental and may be changed or removed completely in a future release. Elastic will take a best effort approach to fix any issues, but experimental features are not subject to the support SLA of official GA features.
									Node:
									(type) c
									(layer)3
										Element:p
										Element:a
											HDR Histogram
											(High Dynamic Range Histogram) is an alternative implementation that can be useful when calculating percentiles for latency measurements as it can be faster than the t-digest implementation with the trade-off of a larger memory footprint. This implementation maintains a fixed worse-case percentage error (specified as a number of significant digits). This means that if data is recorded with values from 1 microsecond up to 1 hour (3,600,000,000 microseconds) in a histogram set to 3 significant digits, it will maintain a value resolution of 1 microsecond for values up to 1 millisecond and 3.6 seconds (or better) for the maximum tracked value (1 hour).
									Node:
									(type) c
									(layer)3
										Element:p
											The HDR Histogram can be used by specifying the
										Element:code
											method
											parameter in the request:
									Node:
									(type) c
									(layer)3
										Element:pre
											{ "aggs" : { "load_time_outlier" : { "percentiles" : { "field" : "load_time", "percents" : [95, 99, 99.9], "hdr": {
										Element:a
										Element:span
											"number_of_significant_value_digits" : 3
										Element:img
										Element:a
										Element:span
											} } } } }
										Element:img
									Node:
									(type) c
									(layer)3
										Element:table
										Element:tr
										Element:td
										Element:p
										Element:a
										Element:span
										Element:img
										Element:td
										Element:p
										Element:code
											hdr
											object indicates that HDR Histogram should be used to calculate the percentiles and specific settings for this algorithm can be specified inside the object
										Element:tr
										Element:td
										Element:p
										Element:a
										Element:span
										Element:img
										Element:td
										Element:p
										Element:code
											number_of_significant_value_digits
											specifies the resolution of values for the histogram in number of significant digits
									Node:
									(type) c
									(layer)3
										Element:p
											The HDRHistogram only supports positive values and will error if it is passed a negative value. It is also not a good idea to use the HDRHistogram if the range of values is unknown as this could lead to high memory usage.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Missing value
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											The
										Element:code
											missing
											parameter defines how documents that are missing a value should be treated. By default they will be ignored but it is also possible to treat them as if they had a value.
									Node:
									(type) c
									(layer)3
										Element:pre
											{ "aggs" : { "grade_percentiles" : { "percentiles" : { "field" : "grade", "missing": 10
										Element:a
										Element:span
											} } } }
										Element:img
									Node:
									(type) c
									(layer)3
										Element:table
										Element:tr
										Element:td
										Element:p
										Element:a
										Element:span
										Element:img
										Element:td
										Element:p
											Documents without a value in the
										Element:code
											grade
											field will fall into the same bucket as documents that have the value
										Element:code
											10
											.
									Node:
									(type) c
									(layer)3
										Element:span
										Element:a
											« Min Aggregation
									Node:
									(type) c
									(layer)3
										Element:span
										Element:a
											Percentile Ranks Aggregation »
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Top Videos
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:a
											Elasticsearch Demo
										Element:li
										Element:a
											Kibana 101
										Element:li
										Element:a
											Logstash Primer
									Node:
									(type) c
									(layer)3
															Node:
															(type) c
															(layer)5
																Element:h5
																	Be in the know with the latest and greatest from Elastic.
															Node:
															(type) c
															(layer)5
																Element:p
																	Thanks for subscribing! We'll keep you updated with new releases.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:footer
										Element:h3
										Element:a
											Products >
										Element:ul
										Element:li
										Element:a
											Elasticsearch
										Element:li
										Element:a
											Kibana
										Element:li
										Element:a
											Beats
										Element:li
										Element:a
											Logstash
										Element:li
										Element:a
											X-Pack
										Element:li
										Element:a
											Elastic Cloud
										Element:li
										Element:a
											Security (formerly Shield)
										Element:li
										Element:a
											Alerting (via Watcher)
										Element:li
										Element:a
											Monitoring (formerly Marvel)
										Element:li
										Element:a
											Graph
										Element:li
										Element:a
											Reporting
										Element:li
										Element:a
											Machine Learning
										Element:li
										Element:a
											ES-Hadoop
										Element:h3
											Resources
										Element:ul
										Element:li
										Element:a
											Blog
										Element:li
										Element:a
											Cloud Status
										Element:li
										Element:a
											Community
										Element:li
										Element:a
											Customers & Use Cases
										Element:li
										Element:a
											Documentation
										Element:li
										Element:a
											Elastic{ON} Events
										Element:li
										Element:a
											Forums
										Element:li
										Element:a
											Meetups
										Element:li
										Element:a
											Subscriptions
										Element:li
										Element:a
											Support Portal
										Element:li
										Element:a
											Videos & Webinars
										Element:li
										Element:a
											Training
										Element:h3
										Element:a
											About >
										Element:ul
										Element:li
										Element:a
											Careers/Jobs
										Element:li
										Element:a
											Contact
										Element:li
										Element:a
											Leadership
										Element:li
										Element:a
											Partners
										Element:li
										Element:a
											Press
										Element:h3
											Language
										Element:ul
										Element:li
										Element:a
											English
										Element:li
										Element:a
											Français
										Element:li
										Element:a
											Deutsch
										Element:li
										Element:a
											日本語
										Element:li
										Element:a
											한국어
										Element:p
											FOLLOW US
										Element:ul
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:ul
										Element:li
										Element:a
											Trademarks
										Element:li
										Element:a
											Terms of Use
										Element:li
										Element:a
											Privacy
										Element:li
										Element:a
											Cookie Policy
										Element:li
										Element:a
											Brand
										Element:a
										Element:img
										Element:p
											© 2017. All Rights Reserved - Elasticsearch
										Element:p
											Elasticsearch is a trademark of Elasticsearch BV, registered in the U.S. and in other countries
										Element:p
											Apache, Apache Lucene, Apache Hadoop, Hadoop, HDFS and the yellow elephant logo are trademarks of the
										Element:a
											Apache Software Foundation
											in the United States and/or other countries.
