Node:
(type) c
(layer)0
	Element:body
						Node:
						(type) h2
						(layer)2
							Element:h2
							Element:a
								Cluster Allocation Explain API
							Element:a
								edit
						Node:
						(type) c
						(layer)2
							Element:p
								The purpose of the cluster allocation explain API is to provide explanations for shard allocations in the cluster. For unassigned shards, the explain API provides an explanation for why the shard is unassigned. For assigned shards, the explain API provides an explanation for why the shard is remaining on its current node and has not moved or rebalanced to another node. This API can be very useful when attempting to diagnose why a shard is unassigned or why a shard continues to remain on its current node when you might expect otherwise.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Explain API Request
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											To explain the allocation of a shard, issue a request:
									Node:
									(type) c
									(layer)3
										Element:pre
											$ curl -XGET 'http://localhost:9200/_cluster/allocation/explain' -d '{ "index": "myindex", "shard": 0, "primary": true }'
									Node:
									(type) c
									(layer)3
										Element:p
											Specify the
										Element:code
											index
											and
										Element:code
											shard
											id of the shard you would like an explanation for, as well as the
										Element:code
											primary
											flag to indicate whether to explain the primary shard for the given shard id or one of its replica shards. These three request parameters are required.
									Node:
									(type) c
									(layer)3
										Element:p
											You may also specify an optional
										Element:code
											current_node
											request parameter to only explain a shard that is currently located on
										Element:code
											current_node
											. The
										Element:code
											current_node
											can be specified as either the node id or node name.
									Node:
									(type) c
									(layer)3
										Element:pre
											$ curl -XGET 'http://localhost:9200/_cluster/allocation/explain' -d '{ "index": "myindex", "shard": 0, "primary": false, "current_node": "nodeA"
										Element:a
										Element:span
											}'
										Element:img
									Node:
									(type) c
									(layer)3
										Element:table
										Element:tr
										Element:td
										Element:p
										Element:a
										Element:span
										Element:img
										Element:td
										Element:p
											The node where shard 0 currently has a replica on
									Node:
									(type) c
									(layer)3
										Element:p
											You can also have Elasticsearch explain the allocation of the first unassigned shard that it finds by sending an empty body for the request:
									Node:
									(type) c
									(layer)3
										Element:pre
											$ curl -XGET 'http://localhost:9200/_cluster/allocation/explain'
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Explain API Response
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											This section includes examples of the cluster allocation explain API response output under various scenarios.
									Node:
									(type) c
									(layer)3
										Element:p
											The API response for an unassigned shard:
									Node:
									(type) c
									(layer)3
										Element:pre
											{ "index" : "idx", "shard" : 0, "primary" : true, "current_state" : "unassigned",
										Element:a
										Element:span
											"unassigned_info" : { "reason" : "INDEX_CREATED",
										Element:img
										Element:a
										Element:span
											"at" : "2017-01-04T18:08:16.600Z", "last_allocation_status" : "no" }, "can_allocate" : "no",
										Element:img
										Element:a
										Element:span
											"allocate_explanation" : "cannot allocate because allocation is not permitted to any of the nodes", "node_allocation_decisions" : [ { "node_id" : "8qt2rY-pT6KNZB3-hGfLnw", "node_name" : "node_t1", "transport_address" : "127.0.0.1:9401", "node_decision" : "no",
										Element:img
										Element:a
										Element:span
											"weight_ranking" : 1, "deciders" : [ { "decider" : "filter",
										Element:img
										Element:a
										Element:span
											"decision" : "NO", "explanation" : "node does not match index setting [index.routing.allocation.include] filters [_name:\"non_existent_node\"]"
										Element:img
										Element:a
										Element:span
											} ] }, { "node_id" : "7Wr-QxLXRLKDxhzNm50pFA", "node_name" : "node_t0", "transport_address" : "127.0.0.1:9400", "node_decision" : "no", "weight_ranking" : 2, "deciders" : [ { "decider" : "filter", "decision" : "NO", "explanation" : "node does not match index setting [index.routing.allocation.include] filters [_name:\"non_existent_node\"]" } ] } ] }
										Element:img
									Node:
									(type) c
									(layer)3
										Element:table
										Element:tr
										Element:td
										Element:p
										Element:a
										Element:span
										Element:img
										Element:td
										Element:p
											The current state of the shard
										Element:tr
										Element:td
										Element:p
										Element:a
										Element:span
										Element:img
										Element:td
										Element:p
											The reason for the shard originally becoming unassigned
										Element:tr
										Element:td
										Element:p
										Element:a
										Element:span
										Element:img
										Element:td
										Element:p
											Whether to allocate the shard
										Element:tr
										Element:td
										Element:p
										Element:a
										Element:span
										Element:img
										Element:td
										Element:p
											Whether to allocate the shard to the particular node
										Element:tr
										Element:td
										Element:p
										Element:a
										Element:span
										Element:img
										Element:td
										Element:p
											The decider which led to the
										Element:code
											no
											decision for the node
										Element:tr
										Element:td
										Element:p
										Element:a
										Element:span
										Element:img
										Element:td
										Element:p
											An explanation as to why the decider returned a
										Element:code
											no
											decision, with a helpful hint pointing to the setting that led to the decision
									Node:
									(type) c
									(layer)3
										Element:p
											You can return information gathered by the cluster info service about disk usage and shard sizes by setting the
										Element:code
											include_disk_info
											parameter to
										Element:code
											true
											:
									Node:
									(type) c
									(layer)3
										Element:pre
											$ curl -XGET 'http://localhost:9200/_cluster/allocation/explain?include_disk_info=true'
									Node:
									(type) c
									(layer)3
										Element:p
											Additionally, if you would like to include all decisions that were factored into the final decision, the
										Element:code
											include_yes_decisions
											parameter will return all decisions for each node:
									Node:
									(type) c
									(layer)3
										Element:pre
											$ curl -XGET 'http://localhost:9200/_cluster/allocation/explain?include_yes_decisions=true'
									Node:
									(type) c
									(layer)3
										Element:p
											The default value for
										Element:code
											include_yes_decisions
											is
										Element:code
											false
											, which will only include the
										Element:code
											no
											decisions in the response. This is generally what you would want, as the
										Element:code
											no
											decisions indicate why a shard is unassigned or cannot be moved, and including all decisions include the
										Element:code
											yes
											ones adds a lot of verbosity to the APIâ€™s response output.
									Node:
									(type) c
									(layer)3
										Element:p
											The API response output for an unassigned primary shard that had previously been allocated to a node in the cluster:
									Node:
									(type) c
									(layer)3
										Element:pre
											{ "index" : "idx", "shard" : 0, "primary" : true, "current_state" : "unassigned", "unassigned_info" : { "reason" : "NODE_LEFT", "at" : "2017-01-04T18:03:28.464Z", "details" : "node_left[OIWe8UhhThCK0V5XfmdrmQ]", "last_allocation_status" : "no_valid_shard_copy" }, "can_allocate" : "no_valid_shard_copy", "allocate_explanation" : "cannot allocate because a previous copy of the primary shard existed but can no longer be found on the nodes in the cluster" }
									Node:
									(type) c
									(layer)3
										Element:p
											The API response output for a replica that is unassigned due to delayed allocation:
									Node:
									(type) c
									(layer)3
										Element:pre
											{ "index" : "idx", "shard" : 0, "primary" : false, "current_state" : "unassigned", "unassigned_info" : { "reason" : "NODE_LEFT", "at" : "2017-01-04T18:53:59.498Z", "details" : "node_left[G92ZwuuaRY-9n8_tc-IzEg]", "last_allocation_status" : "no_attempt" }, "can_allocate" : "allocation_delayed", "allocate_explanation" : "cannot allocate because the cluster is still waiting 59.8s for the departed node holding a replica to rejoin, despite being allowed to allocate the shard to at least one other node", "configured_delay" : "1m",
										Element:a
										Element:span
											"configured_delay_in_millis" : 60000, "remaining_delay" : "59.8s",
										Element:img
										Element:a
										Element:span
											"remaining_delay_in_millis" : 59824, "node_allocation_decisions" : [ { "node_id" : "pmnHu_ooQWCPEFobZGbpWw", "node_name" : "node_t2", "transport_address" : "127.0.0.1:9402", "node_decision" : "yes" }, { "node_id" : "3sULLVJrRneSg0EfBB-2Ew", "node_name" : "node_t0", "transport_address" : "127.0.0.1:9400", "node_decision" : "no", "store" : {
										Element:img
										Element:a
										Element:span
											"matching_size" : "4.2kb", "matching_size_in_bytes" : 4325 }, "deciders" : [ { "decider" : "same_shard", "decision" : "NO", "explanation" : "the shard cannot be allocated to the same node on which a copy of the shard already exists [[idx][0], node[3sULLVJrRneSg0EfBB-2Ew], [P], s[STARTED], a[id=eV9P8BN1QPqRc3B4PLx6cg]]" } ] } ] }
										Element:img
									Node:
									(type) c
									(layer)3
										Element:table
										Element:tr
										Element:td
										Element:p
										Element:a
										Element:span
										Element:img
										Element:td
										Element:p
											The configured delay before allocating a replica shard that does not exist due to the node holding it leaving the cluster
										Element:tr
										Element:td
										Element:p
										Element:a
										Element:span
										Element:img
										Element:td
										Element:p
											The remaining delay before allocating the replica shard
										Element:tr
										Element:td
										Element:p
										Element:a
										Element:span
										Element:img
										Element:td
										Element:p
											Information about the shard data found on a node
									Node:
									(type) c
									(layer)3
										Element:p
											The API response output for an assigned shard that is not allowed to remain on its current node and is required to move:
									Node:
									(type) c
									(layer)3
										Element:pre
											{ "index" : "idx", "shard" : 0, "primary" : true, "current_state" : "started", "current_node" : { "id" : "8lWJeJ7tSoui0bxrwuNhTA", "name" : "node_t1", "transport_address" : "127.0.0.1:9401" }, "can_remain_on_current_node" : "no",
										Element:a
										Element:span
											"can_remain_decisions" : [
										Element:img
										Element:a
										Element:span
											{ "decider" : "filter", "decision" : "NO", "explanation" : "node does not match index setting [index.routing.allocation.include] filters [_name:\"non_existent_node\"]" } ], "can_move_to_other_node" : "no",
										Element:img
										Element:a
										Element:span
											"move_explanation" : "cannot move shard to another node, even though it is not allowed to remain on its current node", "node_allocation_decisions" : [ { "node_id" : "_P8olZS8Twax9u6ioN-GGA", "node_name" : "node_t0", "transport_address" : "127.0.0.1:9400", "node_decision" : "no", "weight_ranking" : 1, "deciders" : [ { "decider" : "filter", "decision" : "NO", "explanation" : "node does not match index setting [index.routing.allocation.include] filters [_name:\"non_existent_node\"]" } ] } ] }
										Element:img
									Node:
									(type) c
									(layer)3
										Element:table
										Element:tr
										Element:td
										Element:p
										Element:a
										Element:span
										Element:img
										Element:td
										Element:p
											Whether the shard is allowed to remain on its current node
										Element:tr
										Element:td
										Element:p
										Element:a
										Element:span
										Element:img
										Element:td
										Element:p
											The deciders that factored into the decision of why the shard is not allowed to remain on its current node
										Element:tr
										Element:td
										Element:p
										Element:a
										Element:span
										Element:img
										Element:td
										Element:p
											Whether the shard is allowed to be allocated to another node
									Node:
									(type) c
									(layer)3
										Element:p
											The API response output for an assigned shard that remains on its current node because moving the shard to another node does not form a better cluster balance:
									Node:
									(type) c
									(layer)3
										Element:pre
											{ "index" : "idx", "shard" : 0, "primary" : true, "current_state" : "started", "current_node" : { "id" : "wLzJm4N4RymDkBYxwWoJsg", "name" : "node_t0", "transport_address" : "127.0.0.1:9400", "weight_ranking" : 1 }, "can_remain_on_current_node" : "yes", "can_rebalance_cluster" : "yes",
										Element:a
										Element:span
											"can_rebalance_to_other_node" : "no",
										Element:img
										Element:a
										Element:span
											"rebalance_explanation" : "cannot rebalance as no target node exists that can both allocate this shard and improve the cluster balance", "node_allocation_decisions" : [ { "node_id" : "oE3EGFc8QN-Tdi5FFEprIA", "node_name" : "node_t1", "transport_address" : "127.0.0.1:9401", "node_decision" : "worse_balance",
										Element:img
										Element:a
										Element:span
											"weight_ranking" : 1 } ] }
										Element:img
									Node:
									(type) c
									(layer)3
										Element:table
										Element:tr
										Element:td
										Element:p
										Element:a
										Element:span
										Element:img
										Element:td
										Element:p
											Whether rebalancing is allowed on the cluster
										Element:tr
										Element:td
										Element:p
										Element:a
										Element:span
										Element:img
										Element:td
										Element:p
											Whether the shard can be rebalanced to another node
										Element:tr
										Element:td
										Element:p
										Element:a
										Element:span
										Element:img
										Element:td
										Element:p
											The reason the shard cannot be rebalanced to the node, in this case indicating that it offers no better balance than the current node
									Node:
									(type) c
									(layer)3
										Element:span
										Element:a
											Â« Nodes hot_threads
									Node:
									(type) c
									(layer)3
										Element:span
										Element:a
											Query DSL Â»
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Top Videos
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:a
											Elasticsearch Demo
										Element:li
										Element:a
											Kibana 101
										Element:li
										Element:a
											Logstash Primer
									Node:
									(type) c
									(layer)3
															Node:
															(type) c
															(layer)5
																Element:h5
																	Be in the know with the latest and greatest from Elastic.
															Node:
															(type) c
															(layer)5
																Element:p
																	Thanks for subscribing! We'll keep you updated with new releases.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:footer
										Element:h3
										Element:a
											Products >
										Element:ul
										Element:li
										Element:a
											Elasticsearch
										Element:li
										Element:a
											Kibana
										Element:li
										Element:a
											Beats
										Element:li
										Element:a
											Logstash
										Element:li
										Element:a
											X-Pack
										Element:li
										Element:a
											Elastic Cloud
										Element:li
										Element:a
											Security (formerly Shield)
										Element:li
										Element:a
											Alerting (via Watcher)
										Element:li
										Element:a
											Monitoring (formerly Marvel)
										Element:li
										Element:a
											Graph
										Element:li
										Element:a
											Reporting
										Element:li
										Element:a
											Machine Learning
										Element:li
										Element:a
											ES-Hadoop
										Element:h3
											Resources
										Element:ul
										Element:li
										Element:a
											Blog
										Element:li
										Element:a
											Cloud Status
										Element:li
										Element:a
											Community
										Element:li
										Element:a
											Customers & Use Cases
										Element:li
										Element:a
											Documentation
										Element:li
										Element:a
											Elastic{ON} Events
										Element:li
										Element:a
											Forums
										Element:li
										Element:a
											Meetups
										Element:li
										Element:a
											Subscriptions
										Element:li
										Element:a
											Support Portal
										Element:li
										Element:a
											Videos & Webinars
										Element:li
										Element:a
											Training
										Element:h3
										Element:a
											About >
										Element:ul
										Element:li
										Element:a
											Careers/Jobs
										Element:li
										Element:a
											Contact
										Element:li
										Element:a
											Leadership
										Element:li
										Element:a
											Partners
										Element:li
										Element:a
											Press
										Element:h3
											Language
										Element:ul
										Element:li
										Element:a
											English
										Element:li
										Element:a
											FranÃ§ais
										Element:li
										Element:a
											Deutsch
										Element:li
										Element:a
											æ—¥æœ¬èªž
										Element:li
										Element:a
											í•œêµ­ì–´
										Element:p
											FOLLOW US
										Element:ul
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:ul
										Element:li
										Element:a
											Trademarks
										Element:li
										Element:a
											Terms of Use
										Element:li
										Element:a
											Privacy
										Element:li
										Element:a
											Cookie Policy
										Element:li
										Element:a
											Brand
										Element:a
										Element:img
										Element:p
											Â© 2017. All Rights Reserved - Elasticsearch
										Element:p
											Elasticsearch is a trademark of Elasticsearch BV, registered in the U.S. and in other countries
										Element:p
											Apache, Apache Lucene, Apache Hadoop, Hadoop, HDFS and the yellow elephant logo are trademarks of the
										Element:a
											Apache Software Foundation
											in the United States and/or other countries.
