Node:
(type) c
(layer)0
	Element:body
						Node:
						(type) h2
						(layer)2
							Element:h2
							Element:a
								Range Aggregation
							Element:a
								edit
						Node:
						(type) c
						(layer)2
							Element:p
								A multi-bucket value source based aggregation that enables the user to define a set of ranges - each representing a bucket. During the aggregation process, the values extracted from each document will be checked against each bucket range and "bucket" the relevant/matching document. Note that this aggregation includes the
							Element:code
								from
								value and excludes the
							Element:code
								to
								value for each range.
						Node:
						(type) c
						(layer)2
							Element:p
								Example:
						Node:
						(type) c
						(layer)2
							Element:pre
								{ "aggs" : { "price_ranges" : { "range" : { "field" : "price", "ranges" : [ { "to" : 50 }, { "from" : 50, "to" : 100 }, { "from" : 100 } ] } } } }
						Node:
						(type) c
						(layer)2
							Element:p
								Response:
						Node:
						(type) c
						(layer)2
							Element:pre
								{ ... "aggregations": { "price_ranges" : { "buckets": [ { "to": 50, "doc_count": 2 }, { "from": 50, "to": 100, "doc_count": 4 }, { "from": 100, "doc_count": 4 } ] } } }
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Keyed Response
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											Setting the
										Element:code
											keyed
											flag to
										Element:code
											true
											will associate a unique string key with each bucket and return the ranges as a hash rather than an array:
									Node:
									(type) c
									(layer)3
										Element:pre
											{ "aggs" : { "price_ranges" : { "range" : { "field" : "price", "keyed" : true, "ranges" : [ { "to" : 50 }, { "from" : 50, "to" : 100 }, { "from" : 100 } ] } } } }
									Node:
									(type) c
									(layer)3
										Element:p
											Response:
									Node:
									(type) c
									(layer)3
										Element:pre
											{ ... "aggregations": { "price_ranges" : { "buckets": { "*-50.0": { "to": 50, "doc_count": 2 }, "50.0-100.0": { "from": 50, "to": 100, "doc_count": 4 }, "100.0-*": { "from": 100, "doc_count": 4 } } } } }
									Node:
									(type) c
									(layer)3
										Element:p
											It is also possible to customize the key for each range:
									Node:
									(type) c
									(layer)3
										Element:pre
											{ "aggs" : { "price_ranges" : { "range" : { "field" : "price", "keyed" : true, "ranges" : [ { "key" : "cheap", "to" : 50 }, { "key" : "average", "from" : 50, "to" : 100 }, { "key" : "expensive", "from" : 100 } ] } } } }
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Script
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:pre
											{ "aggs" : { "price_ranges" : { "range" : { "script" : { "lang": "painless", "inline": "doc['price'].value" }, "ranges" : [ { "to" : 50 }, { "from" : 50, "to" : 100 }, { "from" : 100 } ] } } } }
									Node:
									(type) c
									(layer)3
										Element:p
											This will interpret the
										Element:code
											script
											parameter as an
										Element:code
											inline
											script with the
										Element:code
											painless
											script language and no script parameters. To use a file script use the following syntax:
									Node:
									(type) c
									(layer)3
										Element:pre
											{ "aggs" : { "price_ranges" : { "range" : { "script" : { "file": "my_script", "params": { "field": "price" } }, "ranges" : [ { "to" : 50 }, { "from" : 50, "to" : 100 }, { "from" : 100 } ] } } } }
									Node:
									(type) c
									(layer)3
										Element:img
									Node:
									(type) c
									(layer)3
										Element:p
											for indexed scripts replace the
										Element:code
											file
											parameter with an
										Element:code
											id
											parameter.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Value Script
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											Lets say the product prices are in USD but we would like to get the price ranges in EURO. We can use value script to convert the prices prior the aggregation (assuming conversion rate of 0.8)
									Node:
									(type) c
									(layer)3
										Element:pre
											{ "aggs" : { "price_ranges" : { "range" : { "field" : "price", "script" : { "lang": "painless", "inline": "_value * params.conversion_rate", "params" : { "conversion_rate" : 0.8 } }, "ranges" : [ { "to" : 35 }, { "from" : 35, "to" : 70 }, { "from" : 70 } ] } } } }
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Sub Aggregations
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											The following example, not only "bucket" the documents to the different buckets but also computes statistics over the prices in each price range
									Node:
									(type) c
									(layer)3
										Element:pre
											{ "aggs" : { "price_ranges" : { "range" : { "field" : "price", "ranges" : [ { "to" : 50 }, { "from" : 50, "to" : 100 }, { "from" : 100 } ] }, "aggs" : { "price_stats" : { "stats" : { "field" : "price" } } } } } }
									Node:
									(type) c
									(layer)3
										Element:p
											Response:
									Node:
									(type) c
									(layer)3
										Element:pre
											{ "aggregations": { "price_ranges" : { "buckets": [ { "to": 50, "doc_count": 2, "price_stats": { "count": 2, "min": 20, "max": 47, "avg": 33.5, "sum": 67 } }, { "from": 50, "to": 100, "doc_count": 4, "price_stats": { "count": 4, "min": 60, "max": 98, "avg": 82.5, "sum": 330 } }, { "from": 100, "doc_count": 4, "price_stats": { "count": 4, "min": 134, "max": 367, "avg": 216, "sum": 864 } } ] } } }
									Node:
									(type) c
									(layer)3
										Element:p
											If a sub aggregation is also based on the same value source as the range aggregation (like the
										Element:code
											stats
											aggregation in the example above) it is possible to leave out the value source definition for it. The following will return the same response as above:
									Node:
									(type) c
									(layer)3
										Element:pre
											{ "aggs" : { "price_ranges" : { "range" : { "field" : "price", "ranges" : [ { "to" : 50 }, { "from" : 50, "to" : 100 }, { "from" : 100 } ] }, "aggs" : { "price_stats" : { "stats" : {}
										Element:a
										Element:span
											} } } } }
										Element:img
									Node:
									(type) c
									(layer)3
										Element:table
										Element:tr
										Element:td
										Element:p
										Element:a
										Element:span
										Element:img
										Element:td
										Element:p
											We don’t need to specify the
										Element:code
											price
											as we "inherit" it by default from the parent
										Element:code
											range
											aggregation
									Node:
									(type) c
									(layer)3
										Element:span
										Element:a
											« Nested Aggregation
									Node:
									(type) c
									(layer)3
										Element:span
										Element:a
											Reverse nested Aggregation »
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Top Videos
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:a
											Elasticsearch Demo
										Element:li
										Element:a
											Kibana 101
										Element:li
										Element:a
											Logstash Primer
									Node:
									(type) c
									(layer)3
															Node:
															(type) c
															(layer)5
																Element:h5
																	Be in the know with the latest and greatest from Elastic.
															Node:
															(type) c
															(layer)5
																Element:p
																	Thanks for subscribing! We'll keep you updated with new releases.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:footer
										Element:h3
										Element:a
											Products >
										Element:ul
										Element:li
										Element:a
											Elasticsearch
										Element:li
										Element:a
											Kibana
										Element:li
										Element:a
											Beats
										Element:li
										Element:a
											Logstash
										Element:li
										Element:a
											X-Pack
										Element:li
										Element:a
											Elastic Cloud
										Element:li
										Element:a
											Security (formerly Shield)
										Element:li
										Element:a
											Alerting (via Watcher)
										Element:li
										Element:a
											Monitoring (formerly Marvel)
										Element:li
										Element:a
											Graph
										Element:li
										Element:a
											Reporting
										Element:li
										Element:a
											Machine Learning
										Element:li
										Element:a
											ES-Hadoop
										Element:h3
											Resources
										Element:ul
										Element:li
										Element:a
											Blog
										Element:li
										Element:a
											Cloud Status
										Element:li
										Element:a
											Community
										Element:li
										Element:a
											Customers & Use Cases
										Element:li
										Element:a
											Documentation
										Element:li
										Element:a
											Elastic{ON} Events
										Element:li
										Element:a
											Forums
										Element:li
										Element:a
											Meetups
										Element:li
										Element:a
											Subscriptions
										Element:li
										Element:a
											Support Portal
										Element:li
										Element:a
											Videos & Webinars
										Element:li
										Element:a
											Training
										Element:h3
										Element:a
											About >
										Element:ul
										Element:li
										Element:a
											Careers/Jobs
										Element:li
										Element:a
											Contact
										Element:li
										Element:a
											Leadership
										Element:li
										Element:a
											Partners
										Element:li
										Element:a
											Press
										Element:h3
											Language
										Element:ul
										Element:li
										Element:a
											English
										Element:li
										Element:a
											Français
										Element:li
										Element:a
											Deutsch
										Element:li
										Element:a
											日本語
										Element:li
										Element:a
											한국어
										Element:p
											FOLLOW US
										Element:ul
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:ul
										Element:li
										Element:a
											Trademarks
										Element:li
										Element:a
											Terms of Use
										Element:li
										Element:a
											Privacy
										Element:li
										Element:a
											Cookie Policy
										Element:li
										Element:a
											Brand
										Element:a
										Element:img
										Element:p
											© 2017. All Rights Reserved - Elasticsearch
										Element:p
											Elasticsearch is a trademark of Elasticsearch BV, registered in the U.S. and in other countries
										Element:p
											Apache, Apache Lucene, Apache Hadoop, Hadoop, HDFS and the yellow elephant logo are trademarks of the
										Element:a
											Apache Software Foundation
											in the United States and/or other countries.
