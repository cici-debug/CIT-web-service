Node:
(type) c
(layer)0
	Element:body
						Node:
						(type) h2
						(layer)2
							Element:h2
							Element:a
								How painless dispatches functions
							Element:a
								edit
						Node:
						(type) c
						(layer)2
							Element:p
								Painless uses receiver, name, and
							Element:a
								arity
								to for method dispatch. For example,
							Element:code
								s.foo(a, b)
								is resolved by first getting the class of
							Element:code
								s
								and then looking up the method
							Element:code
								foo
								with two parameters. This is different from Groovy which uses the
							Element:a
								runtime types
								of the parameters and Java which uses the compile time types of the parameters.
						Node:
						(type) c
						(layer)2
							Element:p
								The consequence of this that Painless doesn’t support overloaded methods like Java, leading to some trouble when it whitelists classes from the Java standard library. For example, in Java and Groovy,
							Element:code
								Matcher
								has two methods:
							Element:code
								group(int)
								and
							Element:code
								group(String)
								. Painless can’t whitelist both of them methods because they have the same name and the same number of parameters. So instead it has
							Element:code
								group(int)
								and
							Element:code
								namedGroup(String)
								.
						Node:
						(type) c
						(layer)2
							Element:p
								We have a few justifications for this different way of dispatching methods:
						Node:
						(type) c
						(layer)2
							Element:ol
							Element:li
								It makes operating on
							Element:code
								def
								types simpler and, presumably, faster. Using receiver, name, and arity means when Painless sees a call on a
							Element:code
								def
								objects it can dispatch the appropriate method without having to do expensive comparisons of the types of the parameters. The same is true for invocations with
							Element:code
								def
								typed parameters.
							Element:li
								It keeps things consistent. It would be genuinely weird for Painless to behave like Groovy if any
							Element:code
								def
								typed parameters were involved and Java otherwise. It’d be slow for it to behave like Groovy all the time.
							Element:li
								It keeps Painless maintainable. Adding the Java or Groovy like method dispatch
							Element:span
								like it’d add a ton of complexity which’d make maintenance and other improvements much more difficult.
							Element:strong
								feels
						Node:
						(type) c
						(layer)2
							Element:span
							Element:a
								« Painless Scripting Language
						Node:
						(type) c
						(layer)2
							Element:span
							Element:a
								Painless Syntax »
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Top Videos
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:a
											Elasticsearch Demo
										Element:li
										Element:a
											Kibana 101
										Element:li
										Element:a
											Logstash Primer
									Node:
									(type) c
									(layer)3
															Node:
															(type) c
															(layer)5
																Element:h5
																	Be in the know with the latest and greatest from Elastic.
															Node:
															(type) c
															(layer)5
																Element:p
																	Thanks for subscribing! We'll keep you updated with new releases.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:footer
										Element:h3
										Element:a
											Products >
										Element:ul
										Element:li
										Element:a
											Elasticsearch
										Element:li
										Element:a
											Kibana
										Element:li
										Element:a
											Beats
										Element:li
										Element:a
											Logstash
										Element:li
										Element:a
											X-Pack
										Element:li
										Element:a
											Elastic Cloud
										Element:li
										Element:a
											Security (formerly Shield)
										Element:li
										Element:a
											Alerting (via Watcher)
										Element:li
										Element:a
											Monitoring (formerly Marvel)
										Element:li
										Element:a
											Graph
										Element:li
										Element:a
											Reporting
										Element:li
										Element:a
											Machine Learning
										Element:li
										Element:a
											ES-Hadoop
										Element:h3
											Resources
										Element:ul
										Element:li
										Element:a
											Blog
										Element:li
										Element:a
											Cloud Status
										Element:li
										Element:a
											Community
										Element:li
										Element:a
											Customers & Use Cases
										Element:li
										Element:a
											Documentation
										Element:li
										Element:a
											Elastic{ON} Events
										Element:li
										Element:a
											Forums
										Element:li
										Element:a
											Meetups
										Element:li
										Element:a
											Subscriptions
										Element:li
										Element:a
											Support Portal
										Element:li
										Element:a
											Videos & Webinars
										Element:li
										Element:a
											Training
										Element:h3
										Element:a
											About >
										Element:ul
										Element:li
										Element:a
											Careers/Jobs
										Element:li
										Element:a
											Contact
										Element:li
										Element:a
											Leadership
										Element:li
										Element:a
											Partners
										Element:li
										Element:a
											Press
										Element:h3
											Language
										Element:ul
										Element:li
										Element:a
											English
										Element:li
										Element:a
											Français
										Element:li
										Element:a
											Deutsch
										Element:li
										Element:a
											日本語
										Element:li
										Element:a
											한국어
										Element:p
											FOLLOW US
										Element:ul
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:ul
										Element:li
										Element:a
											Trademarks
										Element:li
										Element:a
											Terms of Use
										Element:li
										Element:a
											Privacy
										Element:li
										Element:a
											Cookie Policy
										Element:li
										Element:a
											Brand
										Element:a
										Element:img
										Element:p
											© 2017. All Rights Reserved - Elasticsearch
										Element:p
											Elasticsearch is a trademark of Elasticsearch BV, registered in the U.S. and in other countries
										Element:p
											Apache, Apache Lucene, Apache Hadoop, Hadoop, HDFS and the yellow elephant logo are trademarks of the
										Element:a
											Apache Software Foundation
											in the United States and/or other countries.
