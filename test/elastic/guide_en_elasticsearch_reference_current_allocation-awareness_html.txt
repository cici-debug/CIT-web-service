Node:
(type) c
(layer)0
	Element:body
						Node:
						(type) h2
						(layer)2
							Element:h2
							Element:a
								Shard Allocation Awareness
							Element:a
								edit
						Node:
						(type) c
						(layer)2
							Element:p
								When running nodes on multiple VMs on the same physical server, on multiple racks, or across multiple awareness zones, it is more likely that two nodes on the same physical server, in the same rack, or in the same awareness zone will crash at the same time, rather than two unrelated nodes crashing simultaneously.
						Node:
						(type) c
						(layer)2
							Element:p
								If Elasticsearch is
							Element:span
								of the physical configuration of your hardware, it can ensure that the primary shard and its replica shards are spread across different physical servers, racks, or zones, to minimise the risk of losing all shard copies at the same time.
							Element:em
								aware
						Node:
						(type) c
						(layer)2
							Element:p
								The shard allocation awareness settings allow you to tell Elasticsearch about your hardware configuration.
						Node:
						(type) c
						(layer)2
							Element:p
								As an example, let’s assume we have several racks. When we start a node, we can tell it which rack it is in by assigning it an arbitrary metadata attribute called
							Element:code
								rack_id
								— we could use any attribute name. For example:
						Node:
						(type) c
						(layer)2
							Element:pre
								./bin/elasticsearch -Enode.attr.rack_id=rack_one
							Element:a
							Element:span
							Element:img
						Node:
						(type) c
						(layer)2
							Element:table
							Element:tr
							Element:td
							Element:p
							Element:a
							Element:span
							Element:img
							Element:td
							Element:p
								This setting could also be specified in the
							Element:code
								elasticsearch.yml
								config file.
						Node:
						(type) c
						(layer)2
							Element:p
								Now, we need to setup
							Element:span
								by telling Elasticsearch which attributes to use. This can be configured in the
							Element:em
								shard allocation awareness
							Element:code
								elasticsearch.yml
								file on
							Element:span
								master-eligible nodes, or it can be set (and changed) with the
							Element:strong
								all
							Element:a
								cluster-update-settings
								API.
						Node:
						(type) c
						(layer)2
							Element:p
								For our example, we’ll set the value in the config file:
						Node:
						(type) c
						(layer)2
							Element:pre
								cluster.routing.allocation.awareness.attributes: rack_id
						Node:
						(type) c
						(layer)2
							Element:p
								With this config in place, let’s say we start two nodes with
							Element:code
								node.attr.rack_id
								set to
							Element:code
								rack_one
								, and we create an index with 5 primary shards and 1 replica of each primary. All primaries and replicas are allocated across the two nodes.
						Node:
						(type) c
						(layer)2
							Element:p
								Now, if we start two more nodes with
							Element:code
								node.attr.rack_id
								set to
							Element:code
								rack_two
								, Elasticsearch will move shards across to the new nodes, ensuring (if possible) that no two copies of the same shard will be in the same rack. However if
							Element:code
								rack_two
								were to fail, taking down both of its nodes, Elasticsearch will still allocate the lost shard copies to nodes in
							Element:code
								rack_one
								.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:strong
								Prefer local shards
						Node:
						(type) c
						(layer)2
							Element:p
								When executing search or GET requests, with shard awareness enabled, Elasticsearch will prefer using local shards — shards in the same awareness group — to execute the request. This is usually faster than crossing racks or awareness zones.
						Node:
						(type) c
						(layer)2
							Element:p
								Multiple awareness attributes can be specified, in which case the combination of values from each attribute is considered to be a separate value.
						Node:
						(type) c
						(layer)2
							Element:pre
								cluster.routing.allocation.awareness.attributes: rack_id,zone
						Node:
						(type) c
						(layer)2
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
								When using awareness attributes, shards will not be allocated to nodes that don’t have values set for those attributes.
						Node:
						(type) c
						(layer)2
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
								Number of primary/replica of a shard allocated on a specific group of nodes with the same awareness attribute value is determined by the number of attribute values. When the number of nodes in groups is unbalanced and there are many replicas, replica shards may be left unassigned.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Forced Awareness
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											Imagine that you have two awareness zones and enough hardware across the two zones to host all of your primary and replica shards. But perhaps the hardware in a single zone, while sufficient to host half the shards, would be unable to host
										Element:span
											the shards.
										Element:strong
											ALL
									Node:
									(type) c
									(layer)3
										Element:p
											With ordinary awareness, if one zone lost contact with the other zone, Elasticsearch would assign all of the missing replica shards to a single zone. But in this example, this sudden extra load would cause the hardware in the remaining zone to be overloaded.
									Node:
									(type) c
									(layer)3
										Element:p
											Forced awareness solves this problem by
										Element:span
											allowing copies of the same shard to be allocated to the same zone.
										Element:strong
											NEVER
									Node:
									(type) c
									(layer)3
										Element:p
											For example, lets say we have an awareness attribute called
										Element:code
											zone
											, and we know we are going to have two zones,
										Element:code
											zone1
											and
										Element:code
											zone2
											. Here is how we can force awareness on a node:
									Node:
									(type) c
									(layer)3
										Element:pre
											cluster.routing.allocation.awareness.force.zone.values: zone1,zone2
										Element:a
										Element:span
											cluster.routing.allocation.awareness.attributes: zone
										Element:img
									Node:
									(type) c
									(layer)3
										Element:table
										Element:tr
										Element:td
										Element:p
										Element:a
										Element:span
										Element:img
										Element:td
										Element:p
											We must list all possible values that the
										Element:code
											zone
											attribute can have.
									Node:
									(type) c
									(layer)3
										Element:p
											Now, if we start 2 nodes with
										Element:code
											node.attr.zone
											set to
										Element:code
											zone1
											and create an index with 5 shards and 1 replica. The index will be created, but only the 5 primary shards will be allocated (with no replicas). Only when we start more nodes with
										Element:code
											node.attr.zone
											set to
										Element:code
											zone2
											will the replicas be allocated.
									Node:
									(type) c
									(layer)3
										Element:p
											The
										Element:code
											cluster.routing.allocation.awareness.*
											settings can all be updated dynamically on a live cluster with the
										Element:a
											cluster-update-settings
											API.
									Node:
									(type) c
									(layer)3
										Element:span
										Element:a
											« Disk-based Shard Allocation
									Node:
									(type) c
									(layer)3
										Element:span
										Element:a
											Shard Allocation Filtering »
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Top Videos
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:a
											Elasticsearch Demo
										Element:li
										Element:a
											Kibana 101
										Element:li
										Element:a
											Logstash Primer
									Node:
									(type) c
									(layer)3
															Node:
															(type) c
															(layer)5
																Element:h5
																	Be in the know with the latest and greatest from Elastic.
															Node:
															(type) c
															(layer)5
																Element:p
																	Thanks for subscribing! We'll keep you updated with new releases.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:footer
										Element:h3
										Element:a
											Products >
										Element:ul
										Element:li
										Element:a
											Elasticsearch
										Element:li
										Element:a
											Kibana
										Element:li
										Element:a
											Beats
										Element:li
										Element:a
											Logstash
										Element:li
										Element:a
											X-Pack
										Element:li
										Element:a
											Elastic Cloud
										Element:li
										Element:a
											Security (formerly Shield)
										Element:li
										Element:a
											Alerting (via Watcher)
										Element:li
										Element:a
											Monitoring (formerly Marvel)
										Element:li
										Element:a
											Graph
										Element:li
										Element:a
											Reporting
										Element:li
										Element:a
											Machine Learning
										Element:li
										Element:a
											ES-Hadoop
										Element:h3
											Resources
										Element:ul
										Element:li
										Element:a
											Blog
										Element:li
										Element:a
											Cloud Status
										Element:li
										Element:a
											Community
										Element:li
										Element:a
											Customers & Use Cases
										Element:li
										Element:a
											Documentation
										Element:li
										Element:a
											Elastic{ON} Events
										Element:li
										Element:a
											Forums
										Element:li
										Element:a
											Meetups
										Element:li
										Element:a
											Subscriptions
										Element:li
										Element:a
											Support Portal
										Element:li
										Element:a
											Videos & Webinars
										Element:li
										Element:a
											Training
										Element:h3
										Element:a
											About >
										Element:ul
										Element:li
										Element:a
											Careers/Jobs
										Element:li
										Element:a
											Contact
										Element:li
										Element:a
											Leadership
										Element:li
										Element:a
											Partners
										Element:li
										Element:a
											Press
										Element:h3
											Language
										Element:ul
										Element:li
										Element:a
											English
										Element:li
										Element:a
											Français
										Element:li
										Element:a
											Deutsch
										Element:li
										Element:a
											日本語
										Element:li
										Element:a
											한국어
										Element:p
											FOLLOW US
										Element:ul
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:ul
										Element:li
										Element:a
											Trademarks
										Element:li
										Element:a
											Terms of Use
										Element:li
										Element:a
											Privacy
										Element:li
										Element:a
											Cookie Policy
										Element:li
										Element:a
											Brand
										Element:a
										Element:img
										Element:p
											© 2017. All Rights Reserved - Elasticsearch
										Element:p
											Elasticsearch is a trademark of Elasticsearch BV, registered in the U.S. and in other countries
										Element:p
											Apache, Apache Lucene, Apache Hadoop, Hadoop, HDFS and the yellow elephant logo are trademarks of the
										Element:a
											Apache Software Foundation
											in the United States and/or other countries.
