Node:
(type) c
(layer)0
	Element:body
						Node:
						(type) h2
						(layer)2
							Element:h2
							Element:a
							Element:code
								?refresh
							Element:a
								edit
						Node:
						(type) c
						(layer)2
							Element:p
								The
							Element:a
								Index
								,
							Element:a
								Update
								,
							Element:a
								Delete
								, and
							Element:a
								Bulk
								APIs support setting
							Element:code
								refresh
								to control when changes made by this request are made visible to search. These are the allowed values:
						Node:
						(type) c
						(layer)2
							Element:dl
							Element:dt
							Element:span
								Empty string or
							Element:code
								true
							Element:dd
								Refresh the relevant primary and replica shards (not the whole index) immediately after the operation occurs, so that the updated document appears in search results immediately. This should
							Element:span
								be done after careful thought and verification that it does not lead to poor performance, both from an indexing and a search standpoint.
							Element:strong
								ONLY
							Element:dt
							Element:span
							Element:code
								wait_for
							Element:dd
								Wait for the changes made by the request to be made visible by a refresh before replying. This doesn’t force an immediate refresh, rather, it waits for a refresh to happen. Elasticsearch automatically refreshes shards that have changed every
							Element:code
								index.refresh_interval
								which defaults to one second. That setting is
							Element:a
								dynamic
								. Calling the
							Element:a
								API or setting
							Element:em
								Refresh
							Element:code
								refresh
								to
							Element:code
								true
								on any of the APIs that support it will also cause a refresh, in turn causing already running requests with
							Element:code
								refresh=wait_for
								to return.
							Element:dt
							Element:span
							Element:code
								false
								(the default)
							Element:dd
								Take no refresh related actions. The changes made by this request will be made visible at some point after the request returns.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Choosing which setting to use
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											Unless you have a good reason to wait for the change to become visible always use
										Element:code
											refresh=false
											, or, because that is the default, just leave the
										Element:code
											refresh
											parameter out of the URL. That is the simplest and fastest choice.
									Node:
									(type) c
									(layer)3
										Element:p
											If you absolutely must have the changes made by a request visible synchronously with the request then you must pick between putting more load on Elasticsearch (
										Element:code
											true
											) and waiting longer for the response (
										Element:code
											wait_for
											). Here are a few points that should inform that decision:
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
											The more changes being made to the index the more work
										Element:code
											wait_for
											saves compared to
										Element:code
											true
											. In the case that the index is only changed once every
										Element:code
											index.refresh_interval
											then it saves no work.
										Element:li
										Element:code
											true
											creates less efficient indexes constructs (tiny segments) that must later be merged into more efficient index constructs (larger segments). Meaning that the cost of
										Element:code
											true
											is payed at index time to create the tiny segment, at search time to search the tiny segment, and at merge time to make the larger segments.
										Element:li
											Never start multiple
										Element:code
											refresh=wait_for
											requests in a row. Instead batch them into a single bulk request with
										Element:code
											refresh=wait_for
											and Elasticsearch will start them all in parallel and return only when they have all finished.
										Element:li
											If the refresh interval is set to
										Element:code
											-1
											, disabling the automatic refreshes, then requests with
										Element:code
											refresh=wait_for
											will wait indefinitely until some action causes a refresh. Conversely, setting
										Element:code
											index.refresh_interval
											to something shorter than the default like
										Element:code
											200ms
											will make
										Element:code
											refresh=wait_for
											come back faster, but it’ll still generate inefficient segments.
										Element:li
										Element:code
											refresh=wait_for
											only affects the request that it is on, but, by forcing a refresh immediately,
										Element:code
											refresh=true
											will affect other ongoing request. In general, if you have a running system you don’t wish to disturb then
										Element:code
											refresh=wait_for
											is a smaller modification.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
										Element:code
											refresh=wait_for
											Can Force a Refresh
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											If a
										Element:code
											refresh=wait_for
											request comes in when there are already
										Element:code
											index.max_refresh_listeners
											(defaults to 1000) requests waiting for a refresh on that shard then that request will behave just as though it had
										Element:code
											refresh
											set to
										Element:code
											true
											instead: it will force a refresh. This keeps the promise that when a
										Element:code
											refresh=wait_for
											request returns that its changes are visible for search while preventing unchecked resource usage for blocked requests. If a request forced a refresh because it ran out of listener slots then its response will contain
										Element:code
											"forced_refresh": true
											.
									Node:
									(type) c
									(layer)3
										Element:p
											Bulk requests only take up one slot on each shard that they touch no matter how many times they modify the shard.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Examples
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											These will create a document and immediately refresh the index so it is visible:
									Node:
									(type) c
									(layer)3
										Element:pre
											PUT /test/test/1?refresh {"test": "test"} PUT /test/test/2?refresh=true {"test": "test"}
									Node:
									(type) c
									(layer)3
										Element:p
											These will create a document without doing anything to make it visible for search:
									Node:
									(type) c
									(layer)3
										Element:pre
											PUT /test/test/3 {"test": "test"} PUT /test/test/4?refresh=false {"test": "test"}
									Node:
									(type) c
									(layer)3
										Element:p
											This will create a document and wait for it to become visible for search:
									Node:
									(type) c
									(layer)3
										Element:pre
											PUT /test/test/4?refresh=wait_for {"test": "test"}
									Node:
									(type) c
									(layer)3
										Element:span
										Element:a
											« Multi termvectors API
									Node:
									(type) c
									(layer)3
										Element:span
										Element:a
											Search APIs »
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Top Videos
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:a
											Elasticsearch Demo
										Element:li
										Element:a
											Kibana 101
										Element:li
										Element:a
											Logstash Primer
									Node:
									(type) c
									(layer)3
															Node:
															(type) c
															(layer)5
																Element:h5
																	Be in the know with the latest and greatest from Elastic.
															Node:
															(type) c
															(layer)5
																Element:p
																	Thanks for subscribing! We'll keep you updated with new releases.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:footer
										Element:h3
										Element:a
											Products >
										Element:ul
										Element:li
										Element:a
											Elasticsearch
										Element:li
										Element:a
											Kibana
										Element:li
										Element:a
											Beats
										Element:li
										Element:a
											Logstash
										Element:li
										Element:a
											X-Pack
										Element:li
										Element:a
											Elastic Cloud
										Element:li
										Element:a
											Security (formerly Shield)
										Element:li
										Element:a
											Alerting (via Watcher)
										Element:li
										Element:a
											Monitoring (formerly Marvel)
										Element:li
										Element:a
											Graph
										Element:li
										Element:a
											Reporting
										Element:li
										Element:a
											Machine Learning
										Element:li
										Element:a
											ES-Hadoop
										Element:h3
											Resources
										Element:ul
										Element:li
										Element:a
											Blog
										Element:li
										Element:a
											Cloud Status
										Element:li
										Element:a
											Community
										Element:li
										Element:a
											Customers & Use Cases
										Element:li
										Element:a
											Documentation
										Element:li
										Element:a
											Elastic{ON} Events
										Element:li
										Element:a
											Forums
										Element:li
										Element:a
											Meetups
										Element:li
										Element:a
											Subscriptions
										Element:li
										Element:a
											Support Portal
										Element:li
										Element:a
											Videos & Webinars
										Element:li
										Element:a
											Training
										Element:h3
										Element:a
											About >
										Element:ul
										Element:li
										Element:a
											Careers/Jobs
										Element:li
										Element:a
											Contact
										Element:li
										Element:a
											Leadership
										Element:li
										Element:a
											Partners
										Element:li
										Element:a
											Press
										Element:h3
											Language
										Element:ul
										Element:li
										Element:a
											English
										Element:li
										Element:a
											Français
										Element:li
										Element:a
											Deutsch
										Element:li
										Element:a
											日本語
										Element:li
										Element:a
											한국어
										Element:p
											FOLLOW US
										Element:ul
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:ul
										Element:li
										Element:a
											Trademarks
										Element:li
										Element:a
											Terms of Use
										Element:li
										Element:a
											Privacy
										Element:li
										Element:a
											Cookie Policy
										Element:li
										Element:a
											Brand
										Element:a
										Element:img
										Element:p
											© 2017. All Rights Reserved - Elasticsearch
										Element:p
											Elasticsearch is a trademark of Elasticsearch BV, registered in the U.S. and in other countries
										Element:p
											Apache, Apache Lucene, Apache Hadoop, Hadoop, HDFS and the yellow elephant logo are trademarks of the
										Element:a
											Apache Software Foundation
											in the United States and/or other countries.
