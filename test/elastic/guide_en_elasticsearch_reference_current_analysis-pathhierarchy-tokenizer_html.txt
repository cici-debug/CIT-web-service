Node:
(type) c
(layer)0
	Element:body
						Node:
						(type) h2
						(layer)2
							Element:h2
							Element:a
								Path Hierarchy Tokenizer
							Element:a
								edit
						Node:
						(type) c
						(layer)2
							Element:p
								The
							Element:code
								path_hierarchy
								tokenizer takes a hierarchical value like a filesystem path, splits on the path separator, and emits a term for each component in the tree.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Example output
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:pre
											POST _analyze { "tokenizer": "path_hierarchy", "text": "/one/two/three" }
									Node:
									(type) c
									(layer)3
										Element:p
											The above text would produce the following terms:
									Node:
									(type) c
									(layer)3
										Element:pre
											[ /one, /one/two, /one/two/three ]
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Configuration
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											The
										Element:code
											path_hierarchy
											tokenizer accepts the following parameters:
									Node:
									(type) c
									(layer)3
										Element:table
										Element:colgroup
										Element:col
										Element:col
										Element:tbody
										Element:tr
										Element:td
										Element:p
										Element:code
											delimiter
										Element:td
										Element:p
											The character to use as the path separator. Defaults to
										Element:code
											/
											.
										Element:tr
										Element:td
										Element:p
										Element:code
											replacement
										Element:td
										Element:p
											An optional replacement character to use for the delimiter. Defaults to the
										Element:code
											delimiter
											.
										Element:tr
										Element:td
										Element:p
										Element:code
											buffer_size
										Element:td
										Element:p
											The number of characters read into the term buffer in a single pass. Defaults to
										Element:code
											1024
											. The term buffer will grow by this size until all the text has been consumed. It is advisable not to change this setting.
										Element:tr
										Element:td
										Element:p
										Element:code
											reverse
										Element:td
										Element:p
											If set to
										Element:code
											true
											, emits the tokens in reverse order. Defaults to
										Element:code
											false
											.
										Element:tr
										Element:td
										Element:p
										Element:code
											skip
										Element:td
										Element:p
											The number of initial tokens to skip. Defaults to
										Element:code
											0
											.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Example configuration
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											In this example, we configure the
										Element:code
											path_hierarchy
											tokenizer to split on
										Element:code
											-
											characters, and to replace them with
										Element:code
											/
											. The first two tokens are skipped:
									Node:
									(type) c
									(layer)3
										Element:pre
											PUT my_index { "settings": { "analysis": { "analyzer": { "my_analyzer": { "tokenizer": "my_tokenizer" } }, "tokenizer": { "my_tokenizer": { "type": "path_hierarchy", "delimiter": "-", "replacement": "/", "skip": 2 } } } } } POST my_index/_analyze { "analyzer": "my_analyzer", "text": "one-two-three-four-five" }
									Node:
									(type) c
									(layer)3
										Element:p
											The above example produces the following terms:
									Node:
									(type) c
									(layer)3
										Element:pre
											[ /three, /three/four, /three/four/five ]
									Node:
									(type) c
									(layer)3
										Element:p
											If we were to set
										Element:code
											reverse
											to
										Element:code
											true
											, it would produce the following:
									Node:
									(type) c
									(layer)3
										Element:pre
											[ one/two/three/, two/three/, three/ ]
									Node:
									(type) c
									(layer)3
										Element:span
										Element:a
											« Pattern Tokenizer
									Node:
									(type) c
									(layer)3
										Element:span
										Element:a
											Token Filters »
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Top Videos
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:a
											Elasticsearch Demo
										Element:li
										Element:a
											Kibana 101
										Element:li
										Element:a
											Logstash Primer
									Node:
									(type) c
									(layer)3
															Node:
															(type) c
															(layer)5
																Element:h5
																	Be in the know with the latest and greatest from Elastic.
															Node:
															(type) c
															(layer)5
																Element:p
																	Thanks for subscribing! We'll keep you updated with new releases.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:footer
										Element:h3
										Element:a
											Products >
										Element:ul
										Element:li
										Element:a
											Elasticsearch
										Element:li
										Element:a
											Kibana
										Element:li
										Element:a
											Beats
										Element:li
										Element:a
											Logstash
										Element:li
										Element:a
											X-Pack
										Element:li
										Element:a
											Elastic Cloud
										Element:li
										Element:a
											Security (formerly Shield)
										Element:li
										Element:a
											Alerting (via Watcher)
										Element:li
										Element:a
											Monitoring (formerly Marvel)
										Element:li
										Element:a
											Graph
										Element:li
										Element:a
											Reporting
										Element:li
										Element:a
											Machine Learning
										Element:li
										Element:a
											ES-Hadoop
										Element:h3
											Resources
										Element:ul
										Element:li
										Element:a
											Blog
										Element:li
										Element:a
											Cloud Status
										Element:li
										Element:a
											Community
										Element:li
										Element:a
											Customers & Use Cases
										Element:li
										Element:a
											Documentation
										Element:li
										Element:a
											Elastic{ON} Events
										Element:li
										Element:a
											Forums
										Element:li
										Element:a
											Meetups
										Element:li
										Element:a
											Subscriptions
										Element:li
										Element:a
											Support Portal
										Element:li
										Element:a
											Videos & Webinars
										Element:li
										Element:a
											Training
										Element:h3
										Element:a
											About >
										Element:ul
										Element:li
										Element:a
											Careers/Jobs
										Element:li
										Element:a
											Contact
										Element:li
										Element:a
											Leadership
										Element:li
										Element:a
											Partners
										Element:li
										Element:a
											Press
										Element:h3
											Language
										Element:ul
										Element:li
										Element:a
											English
										Element:li
										Element:a
											Français
										Element:li
										Element:a
											Deutsch
										Element:li
										Element:a
											日本語
										Element:li
										Element:a
											한국어
										Element:p
											FOLLOW US
										Element:ul
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:ul
										Element:li
										Element:a
											Trademarks
										Element:li
										Element:a
											Terms of Use
										Element:li
										Element:a
											Privacy
										Element:li
										Element:a
											Cookie Policy
										Element:li
										Element:a
											Brand
										Element:a
										Element:img
										Element:p
											© 2017. All Rights Reserved - Elasticsearch
										Element:p
											Elasticsearch is a trademark of Elasticsearch BV, registered in the U.S. and in other countries
										Element:p
											Apache, Apache Lucene, Apache Hadoop, Hadoop, HDFS and the yellow elephant logo are trademarks of the
										Element:a
											Apache Software Foundation
											in the United States and/or other countries.
