Node:
(type) c
(layer)0
	Element:body
						Node:
						(type) h2
						(layer)2
							Element:h2
							Element:a
								Grok Processor
							Element:a
								edit
						Node:
						(type) c
						(layer)2
							Element:p
								Extracts structured fields out of a single text field within a document. You choose which field to extract matched fields from, as well as the grok pattern you expect will match. A grok pattern is like a regular expression that supports aliased expressions that can be reused.
						Node:
						(type) c
						(layer)2
							Element:p
								This tool is perfect for syslog logs, apache and other webserver logs, mysql logs, and in general, any log format that is generally written for humans and not computer consumption. This processor comes packaged with over
							Element:a
								120 reusable patterns
								.
						Node:
						(type) c
						(layer)2
							Element:p
								If you need help building patterns to match your logs, you will find the
							Element:a
								http://grokdebug.herokuapp.com
								and
							Element:a
								http://grokconstructor.appspot.com/
								applications quite useful!
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Grok Basics
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											Grok sits on top of regular expressions, so any regular expressions are valid in grok as well. The regular expression library is Oniguruma, and you can see the full supported regexp syntax
										Element:a
											on the Onigiruma site
											.
									Node:
									(type) c
									(layer)3
										Element:p
											Grok works by leveraging this regular expression language to allow naming existing patterns and combining them into more complex patterns that match your fields.
									Node:
									(type) c
									(layer)3
										Element:p
											The syntax for reusing a grok pattern comes in three forms:
										Element:code
											%{SYNTAX:SEMANTIC}
											,
										Element:code
											%{SYNTAX}
											,
										Element:code
											%{SYNTAX:SEMANTIC:TYPE}
											.
									Node:
									(type) c
									(layer)3
										Element:p
											The
										Element:code
											SYNTAX
											is the name of the pattern that will match your text. For example,
										Element:code
											3.44
											will be matched by the
										Element:code
											NUMBER
											pattern and
										Element:code
											55.3.244.1
											will be matched by the
										Element:code
											IP
											pattern. The syntax is how you match.
										Element:code
											NUMBER
											and
										Element:code
											IP
											are both patterns that are provided within the default patterns set.
									Node:
									(type) c
									(layer)3
										Element:p
											The
										Element:code
											SEMANTIC
											is the identifier you give to the piece of text being matched. For example,
										Element:code
											3.44
											could be the duration of an event, so you could call it simply
										Element:code
											duration
											. Further, a string
										Element:code
											55.3.244.1
											might identify the
										Element:code
											client
											making a request.
									Node:
									(type) c
									(layer)3
										Element:p
											The
										Element:code
											TYPE
											is the type you wish to cast your named field.
										Element:code
											int
											and
										Element:code
											float
											are currently the only types supported for coercion.
									Node:
									(type) c
									(layer)3
										Element:p
											For example, you might want to match the following text:
									Node:
									(type) c
									(layer)3
										Element:pre
											3.44 55.3.244.1
									Node:
									(type) c
									(layer)3
										Element:p
											You may know that the message in the example is a number followed by an IP address. You can match this text by using the following Grok expression.
									Node:
									(type) c
									(layer)3
										Element:pre
											%{NUMBER:duration} %{IP:client}
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Using the Grok Processor in a Pipeline
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:a
									Node:
									(type) c
									(layer)3
										Element:p
										Element:strong
											Table 20. Grok Options
									Node:
									(type) c
									(layer)3
										Element:table
										Element:colgroup
										Element:col
										Element:col
										Element:col
										Element:col
										Element:thead
										Element:tr
										Element:th
											Name
										Element:th
											Required
										Element:th
											Default
										Element:th
											Description
										Element:tbody
										Element:tr
										Element:td
										Element:p
										Element:code
											field
										Element:td
										Element:p
											yes
										Element:td
										Element:p
											-
										Element:td
										Element:p
											The field to use for grok expression parsing
										Element:tr
										Element:td
										Element:p
										Element:code
											patterns
										Element:td
										Element:p
											yes
										Element:td
										Element:p
											-
										Element:td
										Element:p
											An ordered list of grok expression to match and extract named captures with. Returns on the first expression in the list that matches.
										Element:tr
										Element:td
										Element:p
										Element:code
											pattern_definitions
										Element:td
										Element:p
											no
										Element:td
										Element:p
											-
										Element:td
										Element:p
											A map of pattern-name and pattern tuples defining custom patterns to be used by the current processor. Patterns matching existing names will override the pre-existing definition.
										Element:tr
										Element:td
										Element:p
										Element:code
											trace_match
										Element:td
										Element:p
											no
										Element:td
										Element:p
											false
										Element:td
										Element:p
											when true,
										Element:code
											_ingest._grok_match_index
											will be inserted into your matched documentâ€™s metadata with the index into the pattern found in
										Element:code
											patterns
											that matched.
										Element:tr
										Element:td
										Element:p
										Element:code
											ignore_missing
										Element:td
										Element:p
											no
										Element:td
										Element:p
											false
										Element:td
										Element:p
											If
										Element:code
											true
											and
										Element:code
											field
											does not exist or is
										Element:code
											null
											, the processor quietly exits without modifying the document
									Node:
									(type) c
									(layer)3
										Element:br
									Node:
									(type) c
									(layer)3
										Element:p
											Here is an example of using the provided patterns to extract out and name structured fields from a string field in a document.
									Node:
									(type) c
									(layer)3
										Element:pre
											{ "message": "55.3.244.1 GET /index.html 15824 0.043" }
									Node:
									(type) c
									(layer)3
										Element:p
											The pattern for this could be:
									Node:
									(type) c
									(layer)3
										Element:pre
											%{IP:client} %{WORD:method} %{URIPATHPARAM:request} %{NUMBER:bytes} %{NUMBER:duration}
									Node:
									(type) c
									(layer)3
										Element:p
											Here is an example pipeline for processing the above document by using Grok:
									Node:
									(type) c
									(layer)3
										Element:pre
											{ "description" : "...", "processors": [ { "grok": { "field": "message", "patterns": ["%{IP:client} %{WORD:method} %{URIPATHPARAM:request} %{NUMBER:bytes} %{NUMBER:duration}"] } } ] }
									Node:
									(type) c
									(layer)3
										Element:p
											This pipeline will insert these named captures as new fields within the document, like so:
									Node:
									(type) c
									(layer)3
										Element:pre
											{ "message": "55.3.244.1 GET /index.html 15824 0.043", "client": "55.3.244.1", "method": "GET", "request": "/index.html", "bytes": 15824, "duration": "0.043" }
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Custom Patterns and Pattern Files
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											The Grok processor comes pre-packaged with a base set of pattern. These patterns may not always have what you are looking for. Pattern have a very basic format. Each entry describes has a name and the pattern itself.
									Node:
									(type) c
									(layer)3
										Element:p
											You can add your own patterns to a processor definition under the
										Element:code
											pattern_definitions
											option. Here is an example of a pipeline specifying custom pattern definitions:
									Node:
									(type) c
									(layer)3
										Element:pre
											{ "description" : "...", "processors": [ { "grok": { "field": "message", "patterns": ["my %{FAVORITE_DOG:dog} is colored %{RGB:color}"] "pattern_definitions" : { "FAVORITE_DOG" : "beagle", "RGB" : "RED|GREEN|BLUE" } } } ] }
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Providing Multiple Match Patterns
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											Sometimes one pattern is not enough to capture the potential structure of a field. Letâ€™s assume we want to match all messages that contain your favorite pet breeds of either cats or dogs. One way to accomplish this is to provide two distinct patterns that can be matched, instead of one really complicated expression capturing the same
										Element:code
											or
											behavior.
									Node:
									(type) c
									(layer)3
										Element:p
											Here is an example of such a configuration executed against the simulate API:
									Node:
									(type) c
									(layer)3
										Element:pre
											POST _ingest/pipeline/_simulate { "pipeline": { "description" : "parse multiple patterns", "processors": [ { "grok": { "field": "message", "patterns": ["%{FAVORITE_DOG:pet}", "%{FAVORITE_CAT:pet}"], "pattern_definitions" : { "FAVORITE_DOG" : "beagle", "FAVORITE_CAT" : "burmese" } } } ] }, "docs":[ { "_source": { "message": "I love burmese cats!" } } ] }
									Node:
									(type) c
									(layer)3
										Element:p
											response:
									Node:
									(type) c
									(layer)3
										Element:pre
											{ "docs": [ { "doc": { "_type": "_type", "_index": "_index", "_id": "_id", "_source": { "message": "I love burmese cats!", "pet": "burmese" }, "_ingest": { "timestamp": "2016-11-08T19:43:03.850+0000" } } } ] }
									Node:
									(type) c
									(layer)3
										Element:p
											Both patterns will set the field
										Element:code
											pet
											with the appropriate match, but what if we want to trace which of our patterns matched and populated our fields? We can do this with the
										Element:code
											trace_match
											parameter. Here is the output of that same pipeline, but with
										Element:code
											"trace_match": true
											configured:
									Node:
									(type) c
									(layer)3
										Element:pre
											{ "docs": [ { "doc": { "_type": "_type", "_index": "_index", "_id": "_id", "_source": { "message": "I love burmese cats!", "pet": "burmese" }, "_ingest": { "_grok_match_index": "1", "timestamp": "2016-11-08T19:43:03.850+0000" } } } ] }
									Node:
									(type) c
									(layer)3
										Element:p
											In the above response, you can see that the index of the pattern that matched was
										Element:code
											"1"
											. This is to say that it was the second (index starts at zero) pattern in
										Element:code
											patterns
											to match.
									Node:
									(type) c
									(layer)3
										Element:p
											This trace metadata enables debugging which of the patterns matched. This information is stored in the ingest metadata and will not be indexed.
									Node:
									(type) c
									(layer)3
										Element:span
										Element:a
											Â« Foreach Processor
									Node:
									(type) c
									(layer)3
										Element:span
										Element:a
											Gsub Processor Â»
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Top Videos
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:a
											Elasticsearch Demo
										Element:li
										Element:a
											Kibana 101
										Element:li
										Element:a
											Logstash Primer
									Node:
									(type) c
									(layer)3
															Node:
															(type) c
															(layer)5
																Element:h5
																	Be in the know with the latest and greatest from Elastic.
															Node:
															(type) c
															(layer)5
																Element:p
																	Thanks for subscribing! We'll keep you updated with new releases.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:footer
										Element:h3
										Element:a
											Products >
										Element:ul
										Element:li
										Element:a
											Elasticsearch
										Element:li
										Element:a
											Kibana
										Element:li
										Element:a
											Beats
										Element:li
										Element:a
											Logstash
										Element:li
										Element:a
											X-Pack
										Element:li
										Element:a
											Elastic Cloud
										Element:li
										Element:a
											Security (formerly Shield)
										Element:li
										Element:a
											Alerting (via Watcher)
										Element:li
										Element:a
											Monitoring (formerly Marvel)
										Element:li
										Element:a
											Graph
										Element:li
										Element:a
											Reporting
										Element:li
										Element:a
											Machine Learning
										Element:li
										Element:a
											ES-Hadoop
										Element:h3
											Resources
										Element:ul
										Element:li
										Element:a
											Blog
										Element:li
										Element:a
											Cloud Status
										Element:li
										Element:a
											Community
										Element:li
										Element:a
											Customers & Use Cases
										Element:li
										Element:a
											Documentation
										Element:li
										Element:a
											Elastic{ON} Events
										Element:li
										Element:a
											Forums
										Element:li
										Element:a
											Meetups
										Element:li
										Element:a
											Subscriptions
										Element:li
										Element:a
											Support Portal
										Element:li
										Element:a
											Videos & Webinars
										Element:li
										Element:a
											Training
										Element:h3
										Element:a
											About >
										Element:ul
										Element:li
										Element:a
											Careers/Jobs
										Element:li
										Element:a
											Contact
										Element:li
										Element:a
											Leadership
										Element:li
										Element:a
											Partners
										Element:li
										Element:a
											Press
										Element:h3
											Language
										Element:ul
										Element:li
										Element:a
											English
										Element:li
										Element:a
											FranÃ§ais
										Element:li
										Element:a
											Deutsch
										Element:li
										Element:a
											æ—¥æœ¬èªž
										Element:li
										Element:a
											í•œêµ­ì–´
										Element:p
											FOLLOW US
										Element:ul
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:ul
										Element:li
										Element:a
											Trademarks
										Element:li
										Element:a
											Terms of Use
										Element:li
										Element:a
											Privacy
										Element:li
										Element:a
											Cookie Policy
										Element:li
										Element:a
											Brand
										Element:a
										Element:img
										Element:p
											Â© 2017. All Rights Reserved - Elasticsearch
										Element:p
											Elasticsearch is a trademark of Elasticsearch BV, registered in the U.S. and in other countries
										Element:p
											Apache, Apache Lucene, Apache Hadoop, Hadoop, HDFS and the yellow elephant logo are trademarks of the
										Element:a
											Apache Software Foundation
											in the United States and/or other countries.
