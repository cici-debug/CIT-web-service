Node:
(type) c
(layer)0
	Element:body
						Node:
						(type) h2
						(layer)2
							Element:h2
							Element:a
								Highlighting
							Element:a
								edit
						Node:
						(type) c
						(layer)2
							Element:p
								Allows to highlight search results on one or more fields. The implementation uses either the lucene
							Element:code
								plain
								highlighter, the fast vector highlighter (
							Element:code
								fvh
								) or
							Element:code
								postings
								highlighter. The following is an example of the search request body:
						Node:
						(type) c
						(layer)2
							Element:pre
								GET /_search { "query" : { "match": { "content": "kimchy" } }, "highlight" : { "fields" : { "content" : {} } } }
						Node:
						(type) c
						(layer)2
							Element:p
								In the above case, the
							Element:code
								content
								field will be highlighted for each search hit (there will be another element in each search hit, called
							Element:code
								highlight
								, which includes the highlighted fields and the highlighted fragments).
						Node:
						(type) c
						(layer)2
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
								In order to perform highlighting, the actual content of the field is required. If the field in question is stored (has
							Element:code
								store
								set to
							Element:code
								true
								in the mapping) it will be used, otherwise, the actual
							Element:code
								_source
								will be loaded and the relevant field will be extracted from it.
						Node:
						(type) c
						(layer)2
							Element:p
								The
							Element:code
								_all
								field cannot be extracted from
							Element:code
								_source
								, so it can only be used for highlighting if it mapped to have
							Element:code
								store
								set to
							Element:code
								true
								.
						Node:
						(type) c
						(layer)2
							Element:p
								The field name supports wildcard notation. For example, using
							Element:code
								comment_*
								will cause all
							Element:a
								text
								and
							Element:a
								keyword
								fields (and
							Element:a
								string
								from versions before 5.0) that match the expression to be highlighted. Note that all other fields will not be highlighted. If you use a custom mapper and want to highlight on a field anyway, you have to provide the field name explicitly.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Plain highlighter
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											The default choice of highlighter is of type
										Element:code
											plain
											and uses the Lucene highlighter. It tries hard to reflect the query matching logic in terms of understanding word importance and any word positioning criteria in phrase queries.
									Node:
									(type) c
									(layer)3
										Element:img
									Node:
									(type) c
									(layer)3
										Element:p
											If you want to highlight a lot of fields in a lot of documents with complex queries this highlighter will not be fast. In its efforts to accurately reflect query logic it creates a tiny in-memory index and re-runs the original query criteria through Lucene’s query execution planner to get access to low-level match information on the current document. This is repeated for every field and every document that needs highlighting. If this presents a performance issue in your system consider using an alternative highlighter.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Postings highlighter
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											If
										Element:code
											index_options
											is set to
										Element:code
											offsets
											in the mapping the postings highlighter will be used instead of the plain highlighter. The postings highlighter:
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
											Is faster since it doesn’t require to reanalyze the text to be highlighted: the larger the documents the better the performance gain should be
										Element:li
											Requires less disk space than term_vectors, needed for the fast vector highlighter
										Element:li
											Breaks the text into sentences and highlights them. Plays really well with natural languages, not as well with fields containing for instance html markup
										Element:li
											Treats the document as the whole corpus, and scores individual sentences as if they were documents in this corpus, using the BM25 algorithm
									Node:
									(type) c
									(layer)3
										Element:p
											Here is an example of setting the
										Element:code
											content
											field in the index mapping to allow for highlighting using the postings highlighter on it:
									Node:
									(type) c
									(layer)3
										Element:pre
											{ "type_name" : { "content" : {"index_options" : "offsets"} } }
									Node:
									(type) c
									(layer)3
										Element:img
									Node:
									(type) c
									(layer)3
										Element:p
											Note that the postings highlighter is meant to perform simple query terms highlighting, regardless of their positions. That means that when used for instance in combination with a phrase query, it will highlight all the terms that the query is composed of, regardless of whether they are actually part of a query match, effectively ignoring their positions.
									Node:
									(type) c
									(layer)3
										Element:img
									Node:
									(type) c
									(layer)3
										Element:p
											The postings highlighter doesn’t support highlighting some complex queries, like a
										Element:code
											match
											query with
										Element:code
											type
											set to
										Element:code
											match_phrase_prefix
											. No highlighted snippets will be returned in that case.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Fast vector highlighter
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											If
										Element:code
											term_vector
											information is provided by setting
										Element:code
											term_vector
											to
										Element:code
											with_positions_offsets
											in the mapping then the fast vector highlighter will be used instead of the plain highlighter. The fast vector highlighter:
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
											Is faster especially for large fields (>
										Element:code
											1MB
											)
										Element:li
											Can be customized with
										Element:code
											boundary_chars
											,
										Element:code
											boundary_max_scan
											, and
										Element:code
											fragment_offset
											(see
										Element:a
											below
											)
										Element:li
											Requires setting
										Element:code
											term_vector
											to
										Element:code
											with_positions_offsets
											which increases the size of the index
										Element:li
											Can combine matches from multiple fields into one result. See
										Element:code
											matched_fields
										Element:li
											Can assign different weights to matches at different positions allowing for things like phrase matches being sorted above term matches when highlighting a Boosting Query that boosts phrase matches over term matches
									Node:
									(type) c
									(layer)3
										Element:p
											Here is an example of setting the
										Element:code
											content
											field to allow for highlighting using the fast vector highlighter on it (this will cause the index to be bigger):
									Node:
									(type) c
									(layer)3
										Element:pre
											{ "type_name" : { "content" : {"term_vector" : "with_positions_offsets"} } }
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Force highlighter type
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											The
										Element:code
											type
											field allows to force a specific highlighter type. This is useful for instance when needing to use the plain highlighter on a field that has
										Element:code
											term_vectors
											enabled. The allowed values are:
										Element:code
											plain
											,
										Element:code
											postings
											and
										Element:code
											fvh
											. The following is an example that forces the use of the plain highlighter:
									Node:
									(type) c
									(layer)3
										Element:pre
											GET /_search { "query" : { "match": { "user": "kimchy" } }, "highlight" : { "fields" : { "content" : {"type" : "plain"} } } }
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Force highlighting on source
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											Forces the highlighting to highlight fields based on the source even if fields are stored separately. Defaults to
										Element:code
											false
											.
									Node:
									(type) c
									(layer)3
										Element:pre
											GET /_search { "query" : { "match": { "user": "kimchy" } }, "highlight" : { "fields" : { "content" : {"force_source" : true} } } }
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Highlighting Tags
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											By default, the highlighting will wrap highlighted text in
										Element:code
											<em>
											and
										Element:code
											</em>
											. This can be controlled by setting
										Element:code
											pre_tags
											and
										Element:code
											post_tags
											, for example:
									Node:
									(type) c
									(layer)3
										Element:pre
											GET /_search { "query" : { "match": { "user": "kimchy" } }, "highlight" : { "pre_tags" : ["<tag1>"], "post_tags" : ["</tag1>"], "fields" : { "_all" : {} } } }
									Node:
									(type) c
									(layer)3
										Element:p
											Using the fast vector highlighter there can be more tags, and the "importance" is ordered.
									Node:
									(type) c
									(layer)3
										Element:pre
											GET /_search { "query" : { "match": { "user": "kimchy" } }, "highlight" : { "pre_tags" : ["<tag1>", "<tag2>"], "post_tags" : ["</tag1>", "</tag2>"], "fields" : { "_all" : {} } } }
									Node:
									(type) c
									(layer)3
										Element:p
											There are also built in "tag" schemas, with currently a single schema called
										Element:code
											styled
											with the following
										Element:code
											pre_tags
											:
									Node:
									(type) c
									(layer)3
										Element:pre
											<em class="hlt1">, <em class="hlt2">, <em class="hlt3">, <em class="hlt4">, <em class="hlt5">, <em class="hlt6">, <em class="hlt7">, <em class="hlt8">, <em class="hlt9">, <em class="hlt10">
									Node:
									(type) c
									(layer)3
										Element:p
											and
										Element:code
											</em>
											as
										Element:code
											post_tags
											. If you think of more nice to have built in tag schemas, just send an email to the mailing list or open an issue. Here is an example of switching tag schemas:
									Node:
									(type) c
									(layer)3
										Element:pre
											GET /_search { "query" : { "match": { "user": "kimchy" } }, "highlight" : { "tags_schema" : "styled", "fields" : { "content" : {} } } }
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Encoder
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											An
										Element:code
											encoder
											parameter can be used to define how highlighted text will be encoded. It can be either
										Element:code
											default
											(no encoding) or
										Element:code
											html
											(will escape html, if you use html highlighting tags).
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Highlighted Fragments
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											Each field highlighted can control the size of the highlighted fragment in characters (defaults to
										Element:code
											100
											), and the maximum number of fragments to return (defaults to
										Element:code
											5
											). For example:
									Node:
									(type) c
									(layer)3
										Element:pre
											GET /_search { "query" : { "match": { "user": "kimchy" } }, "highlight" : { "fields" : { "content" : {"fragment_size" : 150, "number_of_fragments" : 3} } } }
									Node:
									(type) c
									(layer)3
										Element:p
											The
										Element:code
											fragment_size
											is ignored when using the postings highlighter, as it outputs sentences regardless of their length.
									Node:
									(type) c
									(layer)3
										Element:p
											On top of this it is possible to specify that highlighted fragments need to be sorted by score:
									Node:
									(type) c
									(layer)3
										Element:pre
											GET /_search { "query" : { "match": { "user": "kimchy" } }, "highlight" : { "order" : "score", "fields" : { "content" : {"fragment_size" : 150, "number_of_fragments" : 3} } } }
									Node:
									(type) c
									(layer)3
										Element:p
											If the
										Element:code
											number_of_fragments
											value is set to
										Element:code
											0
											then no fragments are produced, instead the whole content of the field is returned, and of course it is highlighted. This can be very handy if short texts (like document title or address) need to be highlighted but no fragmentation is required. Note that
										Element:code
											fragment_size
											is ignored in this case.
									Node:
									(type) c
									(layer)3
										Element:pre
											GET /_search { "query" : { "match": { "user": "kimchy" } }, "highlight" : { "fields" : { "_all" : {}, "bio.title" : {"number_of_fragments" : 0} } } }
									Node:
									(type) c
									(layer)3
										Element:p
											When using
										Element:code
											fvh
											one can use
										Element:code
											fragment_offset
											parameter to control the margin to start highlighting from.
									Node:
									(type) c
									(layer)3
										Element:p
											In the case where there is no matching fragment to highlight, the default is to not return anything. Instead, we can return a snippet of text from the beginning of the field by setting
										Element:code
											no_match_size
											(default
										Element:code
											0
											) to the length of the text that you want returned. The actual length may be shorter than specified as it tries to break on a word boundary. When using the postings highlighter it is not possible to control the actual size of the snippet, therefore the first sentence gets returned whenever
										Element:code
											no_match_size
											is greater than
										Element:code
											0
											.
									Node:
									(type) c
									(layer)3
										Element:pre
											GET /_search { "query" : { "match": { "user": "kimchy" } }, "highlight" : { "fields" : { "content" : { "fragment_size" : 150, "number_of_fragments" : 3, "no_match_size": 150 } } } }
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Highlight query
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											It is also possible to highlight against a query other than the search query by setting
										Element:code
											highlight_query
											. This is especially useful if you use a rescore query because those are not taken into account by highlighting by default. Elasticsearch does not validate that
										Element:code
											highlight_query
											contains the search query in any way so it is possible to define it so legitimate query results aren’t highlighted at all. Generally it is better to include the search query in the
										Element:code
											highlight_query
											. Here is an example of including both the search query and the rescore query in
										Element:code
											highlight_query
											.
									Node:
									(type) c
									(layer)3
										Element:pre
											GET /_search { "stored_fields": [ "_id" ], "query" : { "match": { "content": { "query": "foo bar" } } }, "rescore": { "window_size": 50, "query": { "rescore_query" : { "match_phrase": { "content": { "query": "foo bar", "slop": 1 } } }, "rescore_query_weight" : 10 } }, "highlight" : { "order" : "score", "fields" : { "content" : { "fragment_size" : 150, "number_of_fragments" : 3, "highlight_query": { "bool": { "must": { "match": { "content": { "query": "foo bar" } } }, "should": { "match_phrase": { "content": { "query": "foo bar", "slop": 1, "boost": 10.0 } } }, "minimum_should_match": 0 } } } } } }
									Node:
									(type) c
									(layer)3
										Element:p
											Note that the score of text fragment in this case is calculated by the Lucene highlighting framework. For implementation details you can check the
										Element:code
											ScoreOrderFragmentsBuilder.java
											class. On the other hand when using the postings highlighter the fragments are scored using, as mentioned above, the BM25 algorithm.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Global Settings
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											Highlighting settings can be set on a global level and then overridden at the field level.
									Node:
									(type) c
									(layer)3
										Element:pre
											GET /_search { "query" : { "match": { "user": "kimchy" } }, "highlight" : { "number_of_fragments" : 3, "fragment_size" : 150, "fields" : { "_all" : { "pre_tags" : ["<em>"], "post_tags" : ["</em>"] }, "bio.title" : { "number_of_fragments" : 0 }, "bio.author" : { "number_of_fragments" : 0 }, "bio.content" : { "number_of_fragments" : 5, "order" : "score" } } } }
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Require Field Match
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
										Element:code
											require_field_match
											can be set to
										Element:code
											false
											which will cause any field to be highlighted regardless of whether the query matched specifically on them. The default behaviour is
										Element:code
											true
											, meaning that only fields that hold a query match will be highlighted.
									Node:
									(type) c
									(layer)3
										Element:pre
											GET /_search { "query" : { "match": { "user": "kimchy" } }, "highlight" : { "require_field_match": false, "fields": { "_all" : { "pre_tags" : ["<em>"], "post_tags" : ["</em>"] } } } }
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Boundary Characters
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											When highlighting a field using the fast vector highlighter,
										Element:code
											boundary_chars
											can be configured to define what constitutes a boundary for highlighting. It’s a single string with each boundary character defined in it. It defaults to
										Element:code
											.,!? \t\n
											.
									Node:
									(type) c
									(layer)3
										Element:p
											The
										Element:code
											boundary_max_scan
											allows to control how far to look for boundary characters, and defaults to
										Element:code
											20
											.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Matched Fields
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											The Fast Vector Highlighter can combine matches on multiple fields to highlight a single field using
										Element:code
											matched_fields
											. This is most intuitive for multifields that analyze the same string in different ways. All
										Element:code
											matched_fields
											must have
										Element:code
											term_vector
											set to
										Element:code
											with_positions_offsets
											but only the field to which the matches are combined is loaded so only that field would benefit from having
										Element:code
											store
											set to
										Element:code
											yes
											.
									Node:
									(type) c
									(layer)3
										Element:p
											In the following examples
										Element:code
											content
											is analyzed by the
										Element:code
											english
											analyzer and
										Element:code
											content.plain
											is analyzed by the
										Element:code
											standard
											analyzer.
									Node:
									(type) c
									(layer)3
										Element:pre
											GET /_search { "query": { "query_string": { "query": "content.plain:running scissors", "fields": ["content"] } }, "highlight": { "order": "score", "fields": { "content": { "matched_fields": ["content", "content.plain"], "type" : "fvh" } } } }
									Node:
									(type) c
									(layer)3
										Element:p
											The above matches both "run with scissors" and "running with scissors" and would highlight "running" and "scissors" but not "run". If both phrases appear in a large document then "running with scissors" is sorted above "run with scissors" in the fragments list because there are more matches in that fragment.
									Node:
									(type) c
									(layer)3
										Element:pre
											GET /_search { "query": { "query_string": { "query": "running scissors", "fields": ["content", "content.plain^10"] } }, "highlight": { "order": "score", "fields": { "content": { "matched_fields": ["content", "content.plain"], "type" : "fvh" } } } }
									Node:
									(type) c
									(layer)3
										Element:p
											The above highlights "run" as well as "running" and "scissors" but still sorts "running with scissors" above "run with scissors" because the plain match ("running") is boosted.
									Node:
									(type) c
									(layer)3
										Element:pre
											GET /_search { "query": { "query_string": { "query": "running scissors", "fields": ["content", "content.plain^10"] } }, "highlight": { "order": "score", "fields": { "content": { "matched_fields": ["content.plain"], "type" : "fvh" } } } }
									Node:
									(type) c
									(layer)3
										Element:p
											The above query wouldn’t highlight "run" or "scissor" but shows that it is just fine not to list the field to which the matches are combined (
										Element:code
											content
											) in the matched fields.
									Node:
									(type) c
									(layer)3
										Element:img
									Node:
									(type) c
									(layer)3
										Element:p
											Technically it is also fine to add fields to
										Element:code
											matched_fields
											that don’t share the same underlying string as the field to which the matches are combined. The results might not make much sense and if one of the matches is off the end of the text then the whole query will fail.
									Node:
									(type) c
									(layer)3
										Element:img
									Node:
									(type) c
									(layer)3
										Element:p
											There is a small amount of overhead involved with setting
										Element:code
											matched_fields
											to a non-empty array so always prefer
									Node:
									(type) c
									(layer)3
										Element:pre
											"highlight": { "fields": { "content": {} } }
									Node:
									(type) c
									(layer)3
										Element:p
											to
									Node:
									(type) c
									(layer)3
										Element:pre
											"highlight": { "fields": { "content": { "matched_fields": ["content"], "type" : "fvh" } } }
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Phrase Limit
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											The fast vector highlighter has a
										Element:code
											phrase_limit
											parameter that prevents it from analyzing too many phrases and eating tons of memory. It defaults to 256 so only the first 256 matching phrases in the document scored considered. You can raise the limit with the
										Element:code
											phrase_limit
											parameter but keep in mind that scoring more phrases consumes more time and memory.
									Node:
									(type) c
									(layer)3
										Element:p
											If using
										Element:code
											matched_fields
											keep in mind that
										Element:code
											phrase_limit
											phrases per matched field are considered.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Field Highlight Order
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											Elasticsearch highlights the fields in the order that they are sent. Per the json spec objects are unordered but if you need to be explicit about the order that fields are highlighted then you can use an array for
										Element:code
											fields
											like this:
									Node:
									(type) c
									(layer)3
										Element:pre
											"highlight": { "fields": [ {"title":{ /*params*/ }}, {"text":{ /*params*/ }} ] }
									Node:
									(type) c
									(layer)3
										Element:p
											None of the highlighters built into Elasticsearch care about the order that the fields are highlighted but a plugin may.
									Node:
									(type) c
									(layer)3
										Element:span
										Element:a
											« Post filter
									Node:
									(type) c
									(layer)3
										Element:span
										Element:a
											Rescoring »
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Top Videos
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:a
											Elasticsearch Demo
										Element:li
										Element:a
											Kibana 101
										Element:li
										Element:a
											Logstash Primer
									Node:
									(type) c
									(layer)3
															Node:
															(type) c
															(layer)5
																Element:h5
																	Be in the know with the latest and greatest from Elastic.
															Node:
															(type) c
															(layer)5
																Element:p
																	Thanks for subscribing! We'll keep you updated with new releases.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:footer
										Element:h3
										Element:a
											Products >
										Element:ul
										Element:li
										Element:a
											Elasticsearch
										Element:li
										Element:a
											Kibana
										Element:li
										Element:a
											Beats
										Element:li
										Element:a
											Logstash
										Element:li
										Element:a
											X-Pack
										Element:li
										Element:a
											Elastic Cloud
										Element:li
										Element:a
											Security (formerly Shield)
										Element:li
										Element:a
											Alerting (via Watcher)
										Element:li
										Element:a
											Monitoring (formerly Marvel)
										Element:li
										Element:a
											Graph
										Element:li
										Element:a
											Reporting
										Element:li
										Element:a
											Machine Learning
										Element:li
										Element:a
											ES-Hadoop
										Element:h3
											Resources
										Element:ul
										Element:li
										Element:a
											Blog
										Element:li
										Element:a
											Cloud Status
										Element:li
										Element:a
											Community
										Element:li
										Element:a
											Customers & Use Cases
										Element:li
										Element:a
											Documentation
										Element:li
										Element:a
											Elastic{ON} Events
										Element:li
										Element:a
											Forums
										Element:li
										Element:a
											Meetups
										Element:li
										Element:a
											Subscriptions
										Element:li
										Element:a
											Support Portal
										Element:li
										Element:a
											Videos & Webinars
										Element:li
										Element:a
											Training
										Element:h3
										Element:a
											About >
										Element:ul
										Element:li
										Element:a
											Careers/Jobs
										Element:li
										Element:a
											Contact
										Element:li
										Element:a
											Leadership
										Element:li
										Element:a
											Partners
										Element:li
										Element:a
											Press
										Element:h3
											Language
										Element:ul
										Element:li
										Element:a
											English
										Element:li
										Element:a
											Français
										Element:li
										Element:a
											Deutsch
										Element:li
										Element:a
											日本語
										Element:li
										Element:a
											한국어
										Element:p
											FOLLOW US
										Element:ul
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:ul
										Element:li
										Element:a
											Trademarks
										Element:li
										Element:a
											Terms of Use
										Element:li
										Element:a
											Privacy
										Element:li
										Element:a
											Cookie Policy
										Element:li
										Element:a
											Brand
										Element:a
										Element:img
										Element:p
											© 2017. All Rights Reserved - Elasticsearch
										Element:p
											Elasticsearch is a trademark of Elasticsearch BV, registered in the U.S. and in other countries
										Element:p
											Apache, Apache Lucene, Apache Hadoop, Hadoop, HDFS and the yellow elephant logo are trademarks of the
										Element:a
											Apache Software Foundation
											in the United States and/or other countries.
