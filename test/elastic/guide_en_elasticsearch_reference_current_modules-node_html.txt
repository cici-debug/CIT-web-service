Node:
(type) c
(layer)0
	Element:body
						Node:
						(type) h2
						(layer)2
							Element:h2
							Element:a
								Node
							Element:a
								edit
						Node:
						(type) c
						(layer)2
							Element:p
								Any time that you start an instance of Elasticsearch, you are starting a
							Element:span
								. A collection of connected nodes is called a
							Element:em
								node
							Element:a
								cluster
								. If you are running a single node of Elasticsearch, then you have a cluster of one node.
						Node:
						(type) c
						(layer)2
							Element:p
								Every node in the cluster can handle
							Element:a
								HTTP
								and
							Element:a
								Transport
								traffic by default. The transport layer is used exclusively for communication between nodes and the
							Element:a
								Java
								; the HTTP layer is used only by external REST clients.
							Element:code
								TransportClient
						Node:
						(type) c
						(layer)2
							Element:p
								All nodes know about all the other nodes in the cluster and can forward client requests to the appropriate node. Besides that, each node serves one or more purpose:
						Node:
						(type) c
						(layer)2
							Element:dl
							Element:dt
							Element:span
							Element:a
								Master-eligible node
							Element:dd
								A node that has
							Element:code
								node.master
								set to
							Element:code
								true
								(default), which makes it eligible to be
							Element:a
								elected as the
								, which controls the cluster.
							Element:span
								node
							Element:em
								master
							Element:dt
							Element:span
							Element:a
								Data node
							Element:dd
								A node that has
							Element:code
								node.data
								set to
							Element:code
								true
								(default). Data nodes hold data and perform data related operations such as CRUD, search, and aggregations.
							Element:dt
							Element:span
							Element:a
								Ingest node
							Element:dd
								A node that has
							Element:code
								node.ingest
								set to
							Element:code
								true
								(default). Ingest nodes are able to apply an
							Element:a
								ingest pipeline
								to a document in order to transform and enrich the document before indexing. With a heavy ingest load, it makes sense to use dedicated ingest nodes and to mark the master and data nodes as
							Element:code
								node.ingest: false
								.
							Element:dt
							Element:span
							Element:a
								Tribe node
							Element:dd
								A tribe node, configured via the
							Element:code
								tribe.*
								settings, is a special type of coordinating only node that can connect to multiple clusters and perform search and other operations across all connected clusters.
						Node:
						(type) c
						(layer)2
							Element:p
								By default a node is a master-eligible node and a data node, plus it can pre-process documents through ingest pipelines. This is very convenient for small clusters but, as the cluster grows, it becomes important to consider separating dedicated master-eligible nodes from dedicated data nodes.
						Node:
						(type) c
						(layer)2
							Element:img
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Coordinating node
										Element:a
									Node:
									(type) c
									(layer)3
										Element:p
											Requests like search requests or bulk-indexing requests may involve data held on different data nodes. A search request, for example, is executed in two phases which are coordinated by the node which receives the client request — the
										Element:span
											.
										Element:em
											coordinating node
									Node:
									(type) c
									(layer)3
										Element:p
											In the
										Element:span
											phase, the coordinating node forwards the request to the data nodes which hold the data. Each data node executes the request locally and returns its results to the coordinating node. In the
										Element:em
											scatter
										Element:span
											phase, the coordinating node reduces each data node’s results into a single global resultset.
										Element:em
											gather
									Node:
									(type) c
									(layer)3
										Element:p
											Every node is implicitly a coordinating node. This means that a node that has all three
										Element:code
											node.master
											,
										Element:code
											node.data
											and
										Element:code
											node.ingest
											set to
										Element:code
											false
											will only act as a coordinating node, which cannot be disabled. As a result, such a node needs to have enough memory and CPU in order to deal with the gather phase.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Master Eligible Node
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											The master node is responsible for lightweight cluster-wide actions such as creating or deleting an index, tracking which nodes are part of the cluster, and deciding which shards to allocate to which nodes. It is important for cluster health to have a stable master node.
									Node:
									(type) c
									(layer)3
										Element:p
											Any master-eligible node (all nodes by default) may be elected to become the master node by the
										Element:a
											master election process
											.
									Node:
									(type) c
									(layer)3
										Element:img
									Node:
									(type) c
									(layer)3
										Element:p
											Master nodes must have access to the
										Element:code
											data/
											directory (just like
										Element:code
											data
											nodes) as this is where the cluster state is persisted between node restarts.
									Node:
									(type) c
									(layer)3
										Element:p
											Indexing and searching your data is CPU-, memory-, and I/O-intensive work which can put pressure on a node’s resources. To ensure that your master node is stable and not under pressure, it is a good idea in a bigger cluster to split the roles between dedicated master-eligible nodes and dedicated data nodes.
									Node:
									(type) c
									(layer)3
										Element:p
											While master nodes can also behave as
										Element:a
											coordinating nodes
											and route search and indexing requests from clients to data nodes, it is better
										Element:span
											to use dedicated master nodes for this purpose. It is important for the stability of the cluster that master-eligible nodes do as little work as possible.
										Element:em
											not
									Node:
									(type) c
									(layer)3
										Element:p
											To create a standalone master-eligible node, set:
									Node:
									(type) c
									(layer)3
										Element:pre
											node.master: true
										Element:a
										Element:span
											node.data: false
										Element:img
										Element:a
										Element:span
											node.ingest: false
										Element:img
										Element:a
										Element:span
										Element:img
									Node:
									(type) c
									(layer)3
										Element:table
										Element:tr
										Element:td
										Element:p
										Element:a
										Element:span
										Element:img
										Element:td
										Element:p
											The
										Element:code
											node.master
											role is enabled by default.
										Element:tr
										Element:td
										Element:p
										Element:a
										Element:span
										Element:img
										Element:td
										Element:p
											Disable the
										Element:code
											node.data
											role (enabled by default).
										Element:tr
										Element:td
										Element:p
										Element:a
										Element:span
										Element:img
										Element:td
										Element:p
											Disable the
										Element:code
											node.ingest
											role (enabled by default).
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:a
														Avoiding split brain with
													Element:code
														minimum_master_nodes
													Element:a
														edit
												Node:
												(type) c
												(layer)4
													Element:p
														To prevent data loss, it is vital to configure the
													Element:code
														discovery.zen.minimum_master_nodes
														setting (which defaults to
													Element:code
														1
														) so that each master-eligible node knows the
													Element:span
														that must be visible in order to form a cluster.
													Element:em
														minimum number of master-eligible nodes
												Node:
												(type) c
												(layer)4
													Element:p
														To explain, imagine that you have a cluster consisting of two master-eligible nodes. A network failure breaks communication between these two nodes. Each node sees one master-eligible node… itself. With
													Element:code
														minimum_master_nodes
														set to the default of
													Element:code
														1
														, this is sufficient to form a cluster. Each node elects itself as the new master (thinking that the other master-eligible node has died) and the result is two clusters, or a
													Element:span
														. These two nodes will never rejoin until one node is restarted. Any data that has been written to the restarted node will be lost.
													Element:em
														split brain
												Node:
												(type) c
												(layer)4
													Element:p
														Now imagine that you have a cluster with three master-eligible nodes, and
													Element:code
														minimum_master_nodes
														set to
													Element:code
														2
														. If a network split separates one node from the other two nodes, the side with one node cannot see enough master-eligible nodes and will realise that it cannot elect itself as master. The side with two nodes will elect a new master (if needed) and continue functioning correctly. As soon as the network split is resolved, the single node will rejoin the cluster and start serving requests again.
												Node:
												(type) c
												(layer)4
													Element:p
														This setting should be set to a
													Element:span
														of master-eligible nodes:
													Element:em
														quorum
												Node:
												(type) c
												(layer)4
													Element:pre
														(master_eligible_nodes / 2) + 1
												Node:
												(type) c
												(layer)4
													Element:p
														In other words, if there are three master-eligible nodes, then minimum master nodes should be set to
													Element:code
														(3 / 2) + 1
														or
													Element:code
														2
														:
												Node:
												(type) c
												(layer)4
													Element:pre
														discovery.zen.minimum_master_nodes: 2
													Element:a
													Element:span
													Element:img
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tr
													Element:td
													Element:p
													Element:a
													Element:span
													Element:img
													Element:td
													Element:p
														Defaults to
													Element:code
														1
														.
												Node:
												(type) c
												(layer)4
													Element:p
														This setting can also be changed dynamically on a live cluster with the
													Element:a
														cluster update settings API
														:
												Node:
												(type) c
												(layer)4
													Element:pre
														PUT _cluster/settings { "transient": { "discovery.zen.minimum_master_nodes": 2 } }
												Node:
												(type) c
												(layer)4
													Element:img
												Node:
												(type) c
												(layer)4
													Element:p
														An advantage of splitting the master and data roles between dedicated nodes is that you can have just three master-eligible nodes and set
													Element:code
														minimum_master_nodes
														to
													Element:code
														2
														. You never have to change this setting, no matter how many dedicated data nodes you add to the cluster.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Data Node
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											Data nodes hold the shards that contain the documents you have indexed. Data nodes handle data related operations like CRUD, search, and aggregations. These operations are I/O-, memory-, and CPU-intensive. It is important to monitor these resources and to add more data nodes if they are overloaded.
									Node:
									(type) c
									(layer)3
										Element:p
											The main benefit of having dedicated data nodes is the separation of the master and data roles.
									Node:
									(type) c
									(layer)3
										Element:p
											To create a dedicated data node, set:
									Node:
									(type) c
									(layer)3
										Element:pre
											node.master: false
										Element:a
										Element:span
											node.data: true
										Element:img
										Element:a
										Element:span
											node.ingest: false
										Element:img
										Element:a
										Element:span
										Element:img
									Node:
									(type) c
									(layer)3
										Element:table
										Element:tr
										Element:td
										Element:p
										Element:a
										Element:span
										Element:img
										Element:td
										Element:p
											Disable the
										Element:code
											node.master
											role (enabled by default).
										Element:tr
										Element:td
										Element:p
										Element:a
										Element:span
										Element:img
										Element:td
										Element:p
											The
										Element:code
											node.data
											role is enabled by default.
										Element:tr
										Element:td
										Element:p
										Element:a
										Element:span
										Element:img
										Element:td
										Element:p
											Disable the
										Element:code
											node.ingest
											role (enabled by default).
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Ingest Node
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											Ingest nodes can execute pre-processing pipelines, composed of one or more ingest processors. Depending on the type of operations performed by the ingest processors and the required resources, it may make sense to have dedicated ingest nodes, that will only perform this specific task.
									Node:
									(type) c
									(layer)3
										Element:p
											To create a dedicated ingest node, set:
									Node:
									(type) c
									(layer)3
										Element:pre
											node.master: false
										Element:a
										Element:span
											node.data: false
										Element:img
										Element:a
										Element:span
											node.ingest: true
										Element:img
										Element:a
										Element:span
										Element:img
									Node:
									(type) c
									(layer)3
										Element:table
										Element:tr
										Element:td
										Element:p
										Element:a
										Element:span
										Element:img
										Element:td
										Element:p
											Disable the
										Element:code
											node.master
											role (enabled by default).
										Element:tr
										Element:td
										Element:p
										Element:a
										Element:span
										Element:img
										Element:td
										Element:p
											Disable the
										Element:code
											node.data
											role (enabled by default).
										Element:tr
										Element:td
										Element:p
										Element:a
										Element:span
										Element:img
										Element:td
										Element:p
											The
										Element:code
											node.ingest
											role is enabled by default.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Coordinating only node
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											If you take away the ability to be able to handle master duties, to hold data, and pre-process documents, then you are left with a
										Element:span
											node that can only route requests, handle the search reduce phase, and distribute bulk indexing. Essentially, coordinating only nodes behave as smart load balancers.
										Element:em
											coordinating
									Node:
									(type) c
									(layer)3
										Element:p
											Coordinating only nodes can benefit large clusters by offloading the coordinating node role from data and master-eligible nodes. They join the cluster and receive the full
										Element:a
											cluster state
											, like every other node, and they use the cluster state to route requests directly to the appropriate place(s).
									Node:
									(type) c
									(layer)3
										Element:img
									Node:
									(type) c
									(layer)3
										Element:p
											Adding too many coordinating only nodes to a cluster can increase the burden on the entire cluster because the elected master node must await acknowledgement of cluster state updates from every node! The benefit of coordinating only nodes should not be overstated — data nodes can happily serve the same purpose.
									Node:
									(type) c
									(layer)3
										Element:p
											To create a coordinating only node, set:
									Node:
									(type) c
									(layer)3
										Element:pre
											node.master: false
										Element:a
										Element:span
											node.data: false
										Element:img
										Element:a
										Element:span
											node.ingest: false
										Element:img
										Element:a
										Element:span
										Element:img
									Node:
									(type) c
									(layer)3
										Element:table
										Element:tr
										Element:td
										Element:p
										Element:a
										Element:span
										Element:img
										Element:td
										Element:p
											Disable the
										Element:code
											node.master
											role (enabled by default).
										Element:tr
										Element:td
										Element:p
										Element:a
										Element:span
										Element:img
										Element:td
										Element:p
											Disable the
										Element:code
											node.data
											role (enabled by default).
										Element:tr
										Element:td
										Element:p
										Element:a
										Element:span
										Element:img
										Element:td
										Element:p
											Disable the
										Element:code
											node.ingest
											role (enabled by default).
						Node:
						(type) h2
						(layer)2
							Element:h2
							Element:a
								Node data path settings
							Element:a
								edit
						Node:
						(type) c
						(layer)2
							Element:h3
							Element:a
							Element:code
								path.data
							Element:a
								edit
						Node:
						(type) c
						(layer)2
							Element:p
								Every data and master-eligible node requires access to a data directory where shards and index and cluster metadata will be stored. The
							Element:code
								path.data
								defaults to
							Element:code
								$ES_HOME/data
								but can be configured in the
							Element:code
								elasticsearch.yml
								config file an absolute path or a path relative to
							Element:code
								$ES_HOME
								as follows:
						Node:
						(type) c
						(layer)2
							Element:pre
								path.data: /var/elasticsearch/data
						Node:
						(type) c
						(layer)2
							Element:p
								Like all node settings, it can also be specified on the command line as:
						Node:
						(type) c
						(layer)2
							Element:pre
								./bin/elasticsearch -Epath.data=/var/elasticsearch/data
						Node:
						(type) c
						(layer)2
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
								When using the
							Element:code
								.zip
								or
							Element:code
								.tar.gz
								distributions, the
							Element:code
								path.data
								setting should be configured to locate the data directory outside the Elasticsearch home directory, so that the home directory can be deleted without deleting your data! The RPM and Debian distributions do this for you already.
						Node:
						(type) c
						(layer)2
							Element:h3
							Element:a
							Element:code
								node.max_local_storage_nodes
							Element:a
								edit
						Node:
						(type) c
						(layer)2
							Element:p
								The
							Element:a
								data path
								can be shared by multiple nodes, even by nodes from different clusters. This is very useful for testing failover and different configurations on your development machine. In production, however, it is recommended to run only one node of Elasticsearch per server.
						Node:
						(type) c
						(layer)2
							Element:p
								By default, Elasticsearch is configured to prevent more than one node from sharing the same data path. To allow for more than one node (e.g., on your development machine), use the setting
							Element:code
								node.max_local_storage_nodes
								and set this to a positive integer larger than one.
						Node:
						(type) c
						(layer)2
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
								Never run different node types (i.e. master, data) from the same data directory. This can lead to unexpected data loss.
						Node:
						(type) h2
						(layer)2
							Element:h2
							Element:a
								Other node settings
							Element:a
								edit
						Node:
						(type) c
						(layer)2
							Element:p
								More node settings can be found in
							Element:a
								Modules
								. Of particular note are the
							Element:a
								, the
							Element:code
								cluster.name
							Element:a
								and the
							Element:code
								node.name
							Element:a
								network settings
								.
						Node:
						(type) c
						(layer)2
							Element:span
							Element:a
								« Network Settings
						Node:
						(type) c
						(layer)2
							Element:span
							Element:a
								Plugins »
						Node:
						(type) c
						(layer)2
							Element:h3
								Top Videos
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:a
								Elasticsearch Demo
							Element:li
							Element:a
								Kibana 101
							Element:li
							Element:a
								Logstash Primer
						Node:
						(type) c
						(layer)2
															Node:
															(type) c
															(layer)5
																Element:h5
																	Be in the know with the latest and greatest from Elastic.
															Node:
															(type) c
															(layer)5
																Element:p
																	Thanks for subscribing! We'll keep you updated with new releases.
															Node:
															(type) c
															(layer)5
																Element:footer
																Element:h3
																Element:a
																	Products >
																Element:ul
																Element:li
																Element:a
																	Elasticsearch
																Element:li
																Element:a
																	Kibana
																Element:li
																Element:a
																	Beats
																Element:li
																Element:a
																	Logstash
																Element:li
																Element:a
																	X-Pack
																Element:li
																Element:a
																	Elastic Cloud
																Element:li
																Element:a
																	Security (formerly Shield)
																Element:li
																Element:a
																	Alerting (via Watcher)
																Element:li
																Element:a
																	Monitoring (formerly Marvel)
																Element:li
																Element:a
																	Graph
																Element:li
																Element:a
																	Reporting
																Element:li
																Element:a
																	Machine Learning
																Element:li
																Element:a
																	ES-Hadoop
																Element:h3
																	Resources
																Element:ul
																Element:li
																Element:a
																	Blog
																Element:li
																Element:a
																	Cloud Status
																Element:li
																Element:a
																	Community
																Element:li
																Element:a
																	Customers & Use Cases
																Element:li
																Element:a
																	Documentation
																Element:li
																Element:a
																	Elastic{ON} Events
																Element:li
																Element:a
																	Forums
																Element:li
																Element:a
																	Meetups
																Element:li
																Element:a
																	Subscriptions
																Element:li
																Element:a
																	Support Portal
																Element:li
																Element:a
																	Videos & Webinars
																Element:li
																Element:a
																	Training
																Element:h3
																Element:a
																	About >
																Element:ul
																Element:li
																Element:a
																	Careers/Jobs
																Element:li
																Element:a
																	Contact
																Element:li
																Element:a
																	Leadership
																Element:li
																Element:a
																	Partners
																Element:li
																Element:a
																	Press
																Element:h3
																	Language
																Element:ul
																Element:li
																Element:a
																	English
																Element:li
																Element:a
																	Français
																Element:li
																Element:a
																	Deutsch
																Element:li
																Element:a
																	日本語
																Element:li
																Element:a
																	한국어
																Element:p
																	FOLLOW US
																Element:ul
																Element:li
																Element:a
																Element:li
																Element:a
																Element:li
																Element:a
																Element:li
																Element:a
																Element:li
																Element:a
																Element:ul
																Element:li
																Element:a
																	Trademarks
																Element:li
																Element:a
																	Terms of Use
																Element:li
																Element:a
																	Privacy
																Element:li
																Element:a
																	Cookie Policy
																Element:li
																Element:a
																	Brand
																Element:a
																Element:img
																Element:p
																	© 2017. All Rights Reserved - Elasticsearch
																Element:p
																	Elasticsearch is a trademark of Elasticsearch BV, registered in the U.S. and in other countries
																Element:p
																	Apache, Apache Lucene, Apache Hadoop, Hadoop, HDFS and the yellow elephant logo are trademarks of the
																Element:a
																	Apache Software Foundation
																	in the United States and/or other countries.
