Node:
(type) c
(layer)0
	Element:body
						Node:
						(type) h2
						(layer)2
							Element:h2
							Element:a
								Randomized testing
							Element:a
								edit
						Node:
						(type) c
						(layer)2
							Element:p
								The code snippets you saw so far did not show any trace of randomized testing features, as they are carefully hidden under the hood. However when you are writing your own tests, you should make use of these features as well. Before starting with that, you should know, how to repeat a failed test with the same setup, how it failed. Luckily this is quite easy, as the whole mvn call is logged together with failed tests, which means you can simply copy and paste that line and run the test.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Generating random data
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											The next step is to convert your test using static test data into a test using randomized test data. The kind of data you could randomize varies a lot with the functionality you are testing against. Take a look at the following examples (note, that this list could go on for pages, as a distributed system has many, many moving parts):
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
											Searching for data using arbitrary UTF8 signs
										Element:li
											Changing your mapping configuration, index and field names with each run
										Element:li
											Changing your response sizes/configurable limits with each run
										Element:li
											Changing the number of shards/replicas when creating an index
									Node:
									(type) c
									(layer)3
										Element:p
											So, how can you create random data. The most important thing to know is, that you never should instantiate your own
										Element:code
											Random
											instance, but use the one provided in the
										Element:code
											RandomizedTest
											, from which all elasticsearch dependent test classes inherit from.
									Node:
									(type) c
									(layer)3
										Element:table
										Element:colgroup
										Element:col
										Element:col
										Element:tbody
										Element:tr
										Element:td
										Element:p
										Element:code
											getRandom()
										Element:td
										Element:p
											Returns the random instance, which can recreated when calling the test with specific parameters
										Element:tr
										Element:td
										Element:p
										Element:code
											randomBoolean()
										Element:td
										Element:p
											Returns a random boolean
										Element:tr
										Element:td
										Element:p
										Element:code
											randomByte()
										Element:td
										Element:p
											Returns a random byte
										Element:tr
										Element:td
										Element:p
										Element:code
											randomShort()
										Element:td
										Element:p
											Returns a random short
										Element:tr
										Element:td
										Element:p
										Element:code
											randomInt()
										Element:td
										Element:p
											Returns a random integer
										Element:tr
										Element:td
										Element:p
										Element:code
											randomLong()
										Element:td
										Element:p
											Returns a random long
										Element:tr
										Element:td
										Element:p
										Element:code
											randomFloat()
										Element:td
										Element:p
											Returns a random float
										Element:tr
										Element:td
										Element:p
										Element:code
											randomDouble()
										Element:td
										Element:p
											Returns a random double
										Element:tr
										Element:td
										Element:p
										Element:code
											randomInt(max)
										Element:td
										Element:p
											Returns a random integer between 0 and max
										Element:tr
										Element:td
										Element:p
										Element:code
											between()
										Element:td
										Element:p
											Returns a random between the supplied range
										Element:tr
										Element:td
										Element:p
										Element:code
											atLeast()
										Element:td
										Element:p
											Returns a random integer of at least the specified integer
										Element:tr
										Element:td
										Element:p
										Element:code
											atMost()
										Element:td
										Element:p
											Returns a random integer of at most the specified integer
										Element:tr
										Element:td
										Element:p
										Element:code
											randomLocale()
										Element:td
										Element:p
											Returns a random locale
										Element:tr
										Element:td
										Element:p
										Element:code
											randomTimeZone()
										Element:td
										Element:p
											Returns a random timezone
										Element:tr
										Element:td
										Element:p
										Element:code
											randomFrom()
										Element:td
										Element:p
											Returns a random element from a list/array
									Node:
									(type) c
									(layer)3
										Element:p
											In addition, there are a couple of helper methods, allowing you to create random ASCII and Unicode strings, see methods beginning with
										Element:code
											randomAscii
											,
										Element:code
											randomUnicode
											, and
										Element:code
											randomRealisticUnicode
											in the random test class. The latter one tries to create more realistic unicode string by not being arbitrary random.
									Node:
									(type) c
									(layer)3
										Element:p
											If you want to debug a specific problem with a specific random seed, you can use the
										Element:code
											@Seed
											annotation to configure a specific seed for a test. If you want to run a test more than once, instead of starting the whole test suite over and over again, you can use the
										Element:code
											@Repeat
											annotation with an arbitrary value. Each iteration than gets run with a different seed.
									Node:
									(type) c
									(layer)3
										Element:span
										Element:a
											« integration tests
									Node:
									(type) c
									(layer)3
										Element:span
										Element:a
											Assertions »
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Top Videos
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:a
											Elasticsearch Demo
										Element:li
										Element:a
											Kibana 101
										Element:li
										Element:a
											Logstash Primer
									Node:
									(type) c
									(layer)3
															Node:
															(type) c
															(layer)5
																Element:h5
																	Be in the know with the latest and greatest from Elastic.
															Node:
															(type) c
															(layer)5
																Element:p
																	Thanks for subscribing! We'll keep you updated with new releases.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:footer
										Element:h3
										Element:a
											Products >
										Element:ul
										Element:li
										Element:a
											Elasticsearch
										Element:li
										Element:a
											Kibana
										Element:li
										Element:a
											Beats
										Element:li
										Element:a
											Logstash
										Element:li
										Element:a
											X-Pack
										Element:li
										Element:a
											Elastic Cloud
										Element:li
										Element:a
											Security (formerly Shield)
										Element:li
										Element:a
											Alerting (via Watcher)
										Element:li
										Element:a
											Monitoring (formerly Marvel)
										Element:li
										Element:a
											Graph
										Element:li
										Element:a
											Reporting
										Element:li
										Element:a
											Machine Learning
										Element:li
										Element:a
											ES-Hadoop
										Element:h3
											Resources
										Element:ul
										Element:li
										Element:a
											Blog
										Element:li
										Element:a
											Cloud Status
										Element:li
										Element:a
											Community
										Element:li
										Element:a
											Customers & Use Cases
										Element:li
										Element:a
											Documentation
										Element:li
										Element:a
											Elastic{ON} Events
										Element:li
										Element:a
											Forums
										Element:li
										Element:a
											Meetups
										Element:li
										Element:a
											Subscriptions
										Element:li
										Element:a
											Support Portal
										Element:li
										Element:a
											Videos & Webinars
										Element:li
										Element:a
											Training
										Element:h3
										Element:a
											About >
										Element:ul
										Element:li
										Element:a
											Careers/Jobs
										Element:li
										Element:a
											Contact
										Element:li
										Element:a
											Leadership
										Element:li
										Element:a
											Partners
										Element:li
										Element:a
											Press
										Element:h3
											Language
										Element:ul
										Element:li
										Element:a
											English
										Element:li
										Element:a
											Français
										Element:li
										Element:a
											Deutsch
										Element:li
										Element:a
											日本語
										Element:li
										Element:a
											한국어
										Element:p
											FOLLOW US
										Element:ul
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:ul
										Element:li
										Element:a
											Trademarks
										Element:li
										Element:a
											Terms of Use
										Element:li
										Element:a
											Privacy
										Element:li
										Element:a
											Cookie Policy
										Element:li
										Element:a
											Brand
										Element:a
										Element:img
										Element:p
											© 2017. All Rights Reserved - Elasticsearch
										Element:p
											Elasticsearch is a trademark of Elasticsearch BV, registered in the U.S. and in other countries
										Element:p
											Apache, Apache Lucene, Apache Hadoop, Hadoop, HDFS and the yellow elephant logo are trademarks of the
										Element:a
											Apache Software Foundation
											in the United States and/or other countries.
