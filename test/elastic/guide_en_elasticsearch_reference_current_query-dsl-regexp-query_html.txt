Node:
(type) c
(layer)0
	Element:body
						Node:
						(type) h2
						(layer)2
							Element:h2
							Element:a
								Regexp Query
							Element:a
								edit
						Node:
						(type) c
						(layer)2
							Element:p
								The
							Element:code
								regexp
								query allows you to use regular expression term queries. See
							Element:a
								Regular expression syntax
								for details of the supported regular expression language. The "term queries" in that first sentence means that Elasticsearch will apply the regexp to the terms produced by the tokenizer for that field, and not to the original text of the field.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								: The performance of a
							Element:strong
								Note
							Element:code
								regexp
								query heavily depends on the regular expression chosen. Matching everything like
							Element:code
								.*
								is very slow as well as using lookaround regular expressions. If possible, you should try to use a long prefix before your regular expression starts. Wildcard matchers like
							Element:code
								.*?+
								will mostly lower performance.
						Node:
						(type) c
						(layer)2
							Element:pre
								GET /_search { "query": { "regexp":{ "name.first": "s.*y" } } }
						Node:
						(type) c
						(layer)2
							Element:p
								Boosting is also supported
						Node:
						(type) c
						(layer)2
							Element:pre
								GET /_search { "query": { "regexp":{ "name.first":{ "value":"s.*y", "boost":1.2 } } } }
						Node:
						(type) c
						(layer)2
							Element:p
								You can also use special flags
						Node:
						(type) c
						(layer)2
							Element:pre
								GET /_search { "query": { "regexp":{ "name.first": { "value": "s.*y", "flags" : "INTERSECTION|COMPLEMENT|EMPTY" } } } }
						Node:
						(type) c
						(layer)2
							Element:p
								Possible flags are
							Element:code
								ALL
								(default),
							Element:code
								ANYSTRING
								,
							Element:code
								COMPLEMENT
								,
							Element:code
								EMPTY
								,
							Element:code
								INTERSECTION
								,
							Element:code
								INTERVAL
								, or
							Element:code
								NONE
								. Please check the
							Element:a
								Lucene documentation
								for their meaning
						Node:
						(type) c
						(layer)2
							Element:p
								Regular expressions are dangerous because it’s easy to accidentally create an innocuous looking one that requires an exponential number of internal determinized automaton states (and corresponding RAM and CPU) for Lucene to execute. Lucene prevents these using the
							Element:code
								max_determinized_states
								setting (defaults to 10000). You can raise this limit to allow more complex regular expressions to execute.
						Node:
						(type) c
						(layer)2
							Element:pre
								GET /_search { "query": { "regexp":{ "name.first": { "value": "s.*y", "flags" : "INTERSECTION|COMPLEMENT|EMPTY", "max_determinized_states": 20000 } } } }
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Regular expression syntax
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											Regular expression queries are supported by the
										Element:code
											regexp
											and the
										Element:code
											query_string
											queries. The Lucene regular expression engine is not Perl-compatible but supports a smaller range of operators.
									Node:
									(type) c
									(layer)3
										Element:img
									Node:
									(type) c
									(layer)3
										Element:p
											We will not attempt to explain regular expressions, but just explain the supported operators.
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:a
														Standard operators
													Element:a
														edit
												Node:
												(type) c
												(layer)4
													Element:dl
													Element:dt
													Element:span
														Anchoring
													Element:dd
													Element:p
														Most regular expression engines allow you to match any part of a string. If you want the regexp pattern to start at the beginning of the string or finish at the end of the string, then you have to
													Element:span
														it specifically, using
													Element:em
														anchor
													Element:code
														^
														to indicate the beginning or
													Element:code
														$
														to indicate the end.
													Element:p
														Lucene’s patterns are always anchored. The pattern provided must match the entire string. For string
													Element:code
														"abcde"
														:
													Element:pre
														ab.* # match abcd # no match
													Element:dt
													Element:span
														Allowed characters
													Element:dd
													Element:p
														Any Unicode characters may be used in the pattern, but certain characters are reserved and must be escaped. The standard reserved characters are:
													Element:pre
														. ? + * | { } [ ] ( ) " \
													Element:p
														If you enable optional features (see below) then these characters may also be reserved:
													Element:pre
														# @ & < > ~
													Element:p
														Any reserved character can be escaped with a backslash
													Element:code
														"\*"
														including a literal backslash character:
													Element:code
														"\\"
													Element:p
														Additionally, any characters (except double quotes) are interpreted literally when surrounded by double quotes:
													Element:pre
														john"@smith.com"
													Element:dt
													Element:span
														Match any character
													Element:dd
													Element:p
														The period
													Element:code
														"."
														can be used to represent any character. For string
													Element:code
														"abcde"
														:
													Element:pre
														ab... # match a.c.e # match
													Element:dt
													Element:span
														One-or-more
													Element:dd
													Element:p
														The plus sign
													Element:code
														"+"
														can be used to repeat the preceding shortest pattern once or more times. For string
													Element:code
														"aaabbb"
														:
													Element:pre
														a+b+ # match aa+bb+ # match a+.+ # match aa+bbb+ # match
													Element:dt
													Element:span
														Zero-or-more
													Element:dd
													Element:p
														The asterisk
													Element:code
														"*"
														can be used to match the preceding shortest pattern zero-or-more times. For string
													Element:code
														"aaabbb
														":
													Element:pre
														a*b* # match a*b*c* # match .*bbb.* # match aaa*bbb* # match
													Element:dt
													Element:span
														Zero-or-one
													Element:dd
													Element:p
														The question mark
													Element:code
														"?"
														makes the preceding shortest pattern optional. It matches zero or one times. For string
													Element:code
														"aaabbb"
														:
													Element:pre
														aaa?bbb? # match aaaa?bbbb? # match .....?.? # match aa?bb? # no match
													Element:dt
													Element:span
														Min-to-max
													Element:dd
													Element:p
														Curly brackets
													Element:code
														"{}"
														can be used to specify a minimum and (optionally) a maximum number of times the preceding shortest pattern can repeat. The allowed forms are:
													Element:pre
														{5} # repeat exactly 5 times {2,5} # repeat at least twice and at most 5 times {2,} # repeat at least twice
													Element:p
														For string
													Element:code
														"aaabbb"
														:
													Element:pre
														a{3}b{3} # match a{2,4}b{2,4} # match a{2,}b{2,} # match .{3}.{3} # match a{4}b{4} # no match a{4,6}b{4,6} # no match a{4,}b{4,} # no match
													Element:dt
													Element:span
														Grouping
													Element:dd
													Element:p
														Parentheses
													Element:code
														"()"
														can be used to form sub-patterns. The quantity operators listed above operate on the shortest previous pattern, which can be a group. For string
													Element:code
														"ababab"
														:
													Element:pre
														(ab)+ # match ab(ab)+ # match (..)+ # match (...)+ # no match (ab)* # match abab(ab)? # match ab(ab)? # no match (ab){3} # match (ab){1,2} # no match
													Element:dt
													Element:span
														Alternation
													Element:dd
													Element:p
														The pipe symbol
													Element:code
														"|"
														acts as an OR operator. The match will succeed if the pattern on either the left-hand side OR the right-hand side matches. The alternation applies to the
													Element:span
														, not the shortest. For string
													Element:em
														longest pattern
													Element:code
														"aabb"
														:
													Element:pre
														aabb|bbaa # match aacc|bb # no match aa(cc|bb) # match a+|b+ # no match a+b+|b+a+ # match a+(b|c)+ # match
													Element:dt
													Element:span
														Character classes
													Element:dd
													Element:p
														Ranges of potential characters may be represented as character classes by enclosing them in square brackets
													Element:code
														"[]"
														. A leading
													Element:code
														^
														negates the character class. The allowed forms are:
													Element:pre
														[abc] # 'a' or 'b' or 'c' [a-c] # 'a' or 'b' or 'c' [-abc] # '-' or 'a' or 'b' or 'c' [abc\-] # '-' or 'a' or 'b' or 'c' [^abc] # any character except 'a' or 'b' or 'c' [^a-c] # any character except 'a' or 'b' or 'c' [^-abc] # any character except '-' or 'a' or 'b' or 'c' [^abc\-] # any character except '-' or 'a' or 'b' or 'c'
													Element:p
														Note that the dash
													Element:code
														"-"
														indicates a range of characters, unless it is the first character or if it is escaped with a backslash.
													Element:p
														For string
													Element:code
														"abcd"
														:
													Element:pre
														ab[cd]+ # match [a-d]+ # match [^a-d]+ # no match
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:a
														Optional operators
													Element:a
														edit
												Node:
												(type) c
												(layer)4
													Element:p
														These operators are available by default as the
													Element:code
														flags
														parameter defaults to
													Element:code
														ALL
														. Different flag combinations (concatenated with
													Element:code
														"|"
														) can be used to enable/disable specific operators:
												Node:
												(type) c
												(layer)4
													Element:pre
														{ "regexp": { "username": { "value": "john~athon<1-5>", "flags": "COMPLEMENT|INTERVAL" } } }
												Node:
												(type) c
												(layer)4
													Element:dl
													Element:dt
													Element:span
														Complement
													Element:dd
													Element:p
														The complement is probably the most useful option. The shortest pattern that follows a tilde
													Element:code
														"~"
														is negated. For instance, `"ab~cd" means:
													Element:ul
													Element:li
														Starts with
													Element:code
														a
													Element:li
														Followed by
													Element:code
														b
													Element:li
														Followed by a string of any length that it anything but
													Element:code
														c
													Element:li
														Ends with
													Element:code
														d
													Element:p
														For the string
													Element:code
														"abcdef"
														:
													Element:pre
														ab~df # match ab~cf # match ab~cdef # no match a~(cb)def # match a~(bc)def # no match
													Element:p
														Enabled with the
													Element:code
														COMPLEMENT
														or
													Element:code
														ALL
														flags.
													Element:dt
													Element:span
														Interval
													Element:dd
													Element:p
														The interval option enables the use of numeric ranges, enclosed by angle brackets
													Element:code
														"<>"
														. For string:
													Element:code
														"foo80"
														:
													Element:pre
														foo<1-100> # match foo<01-100> # match foo<001-100> # no match
													Element:p
														Enabled with the
													Element:code
														INTERVAL
														or
													Element:code
														ALL
														flags.
													Element:dt
													Element:span
														Intersection
													Element:dd
													Element:p
														The ampersand
													Element:code
														"&"
														joins two patterns in a way that both of them have to match. For string
													Element:code
														"aaabbb"
														:
													Element:pre
														aaa.+&.+bbb # match aaa&bbb # no match
													Element:p
														Using this feature usually means that you should rewrite your regular expression.
													Element:p
														Enabled with the
													Element:code
														INTERSECTION
														or
													Element:code
														ALL
														flags.
													Element:dt
													Element:span
														Any string
													Element:dd
													Element:p
														The at sign
													Element:code
														"@"
														matches any string in its entirety. This could be combined with the intersection and complement above to express “everything except”. For instance:
													Element:pre
														@&~(foo.+) # anything except string beginning with "foo"
													Element:p
														Enabled with the
													Element:code
														ANYSTRING
														or
													Element:code
														ALL
														flags.
												Node:
												(type) c
												(layer)4
													Element:span
													Element:a
														« Wildcard Query
												Node:
												(type) c
												(layer)4
													Element:span
													Element:a
														Fuzzy Query »
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Top Videos
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:a
											Elasticsearch Demo
										Element:li
										Element:a
											Kibana 101
										Element:li
										Element:a
											Logstash Primer
									Node:
									(type) c
									(layer)3
															Node:
															(type) c
															(layer)5
																Element:h5
																	Be in the know with the latest and greatest from Elastic.
															Node:
															(type) c
															(layer)5
																Element:p
																	Thanks for subscribing! We'll keep you updated with new releases.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:footer
										Element:h3
										Element:a
											Products >
										Element:ul
										Element:li
										Element:a
											Elasticsearch
										Element:li
										Element:a
											Kibana
										Element:li
										Element:a
											Beats
										Element:li
										Element:a
											Logstash
										Element:li
										Element:a
											X-Pack
										Element:li
										Element:a
											Elastic Cloud
										Element:li
										Element:a
											Security (formerly Shield)
										Element:li
										Element:a
											Alerting (via Watcher)
										Element:li
										Element:a
											Monitoring (formerly Marvel)
										Element:li
										Element:a
											Graph
										Element:li
										Element:a
											Reporting
										Element:li
										Element:a
											Machine Learning
										Element:li
										Element:a
											ES-Hadoop
										Element:h3
											Resources
										Element:ul
										Element:li
										Element:a
											Blog
										Element:li
										Element:a
											Cloud Status
										Element:li
										Element:a
											Community
										Element:li
										Element:a
											Customers & Use Cases
										Element:li
										Element:a
											Documentation
										Element:li
										Element:a
											Elastic{ON} Events
										Element:li
										Element:a
											Forums
										Element:li
										Element:a
											Meetups
										Element:li
										Element:a
											Subscriptions
										Element:li
										Element:a
											Support Portal
										Element:li
										Element:a
											Videos & Webinars
										Element:li
										Element:a
											Training
										Element:h3
										Element:a
											About >
										Element:ul
										Element:li
										Element:a
											Careers/Jobs
										Element:li
										Element:a
											Contact
										Element:li
										Element:a
											Leadership
										Element:li
										Element:a
											Partners
										Element:li
										Element:a
											Press
										Element:h3
											Language
										Element:ul
										Element:li
										Element:a
											English
										Element:li
										Element:a
											Français
										Element:li
										Element:a
											Deutsch
										Element:li
										Element:a
											日本語
										Element:li
										Element:a
											한국어
										Element:p
											FOLLOW US
										Element:ul
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:ul
										Element:li
										Element:a
											Trademarks
										Element:li
										Element:a
											Terms of Use
										Element:li
										Element:a
											Privacy
										Element:li
										Element:a
											Cookie Policy
										Element:li
										Element:a
											Brand
										Element:a
										Element:img
										Element:p
											© 2017. All Rights Reserved - Elasticsearch
										Element:p
											Elasticsearch is a trademark of Elasticsearch BV, registered in the U.S. and in other countries
										Element:p
											Apache, Apache Lucene, Apache Hadoop, Hadoop, HDFS and the yellow elephant logo are trademarks of the
										Element:a
											Apache Software Foundation
											in the United States and/or other countries.
