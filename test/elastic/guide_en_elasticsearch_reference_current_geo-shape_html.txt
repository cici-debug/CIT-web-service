Node:
(type) c
(layer)0
	Element:body
						Node:
						(type) h2
						(layer)2
							Element:h2
							Element:a
								Geo-Shape datatype
							Element:a
								edit
						Node:
						(type) c
						(layer)2
							Element:p
								The
							Element:code
								geo_shape
								datatype facilitates the indexing of and searching with arbitrary geo shapes such as rectangles and polygons. It should be used when either the data being indexed or the queries being executed contain shapes other than just points.
						Node:
						(type) c
						(layer)2
							Element:p
								You can query documents using this type using
							Element:a
								geo_shape Query
								.
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:a
														Mapping Options
													Element:a
														edit
												Node:
												(type) c
												(layer)4
													Element:p
														The geo_shape mapping maps geo_json geometry objects to the geo_shape type. To enable it, users must explicitly map fields to the geo_shape type.
												Node:
												(type) c
												(layer)4
													Element:table
													Element:colgroup
													Element:col
													Element:col
													Element:col
													Element:thead
													Element:tr
													Element:th
														Option
													Element:th
														Description
													Element:th
														Default
													Element:tbody
													Element:tr
													Element:td
													Element:p
													Element:code
														tree
													Element:td
													Element:p
														Name of the PrefixTree implementation to be used:
													Element:code
														geohash
														for GeohashPrefixTree and
													Element:code
														quadtree
														for QuadPrefixTree.
													Element:td
													Element:p
													Element:code
														geohash
													Element:tr
													Element:td
													Element:p
													Element:code
														precision
													Element:td
													Element:p
														This parameter may be used instead of
													Element:code
														tree_levels
														to set an appropriate value for the
													Element:code
														tree_levels
														parameter. The value specifies the desired precision and Elasticsearch will calculate the best tree_levels value to honor this precision. The value should be a number followed by an optional distance unit. Valid distance units include:
													Element:code
														in
														,
													Element:code
														inch
														,
													Element:code
														yd
														,
													Element:code
														yard
														,
													Element:code
														mi
														,
													Element:code
														miles
														,
													Element:code
														km
														,
													Element:code
														kilometers
														,
													Element:code
														m
														,
													Element:code
														meters
														,
													Element:code
														cm
														,
													Element:code
														centimeters
														,
													Element:code
														mm
														,
													Element:code
														millimeters
														.
													Element:td
													Element:p
													Element:code
														meters
													Element:tr
													Element:td
													Element:p
													Element:code
														tree_levels
													Element:td
													Element:p
														Maximum number of layers to be used by the PrefixTree. This can be used to control the precision of shape representations and therefore how many terms are indexed. Defaults to the default value of the chosen PrefixTree implementation. Since this parameter requires a certain level of understanding of the underlying implementation, users may use the
													Element:code
														precision
														parameter instead. However, Elasticsearch only uses the tree_levels parameter internally and this is what is returned via the mapping API even if you use the precision parameter.
													Element:td
													Element:p
													Element:code
														50m
													Element:tr
													Element:td
													Element:p
													Element:code
														strategy
													Element:td
													Element:p
														The strategy parameter defines the approach for how to represent shapes at indexing and search time. It also influences the capabilities available so it is recommended to let Elasticsearch set this parameter automatically. There are two strategies available:
													Element:code
														recursive
														and
													Element:code
														term
														. Term strategy supports point types only (the
													Element:code
														points_only
														parameter will be automatically set to true) while Recursive strategy supports all shape types. (IMPORTANT: see
													Element:a
														Prefix trees
														for more detailed information)
													Element:td
													Element:p
													Element:code
														recursive
													Element:tr
													Element:td
													Element:p
													Element:code
														distance_error_pct
													Element:td
													Element:p
														Used as a hint to the PrefixTree about how precise it should be. Defaults to 0.025 (2.5%) with 0.5 as the maximum supported value. PERFORMANCE NOTE: This value will default to 0 if a
													Element:code
														precision
														or
													Element:code
														tree_level
														definition is explicitly defined. This guarantees spatial precision at the level defined in the mapping. This can lead to significant memory usage for high resolution shapes with low error (e.g., large shapes at 1m with < 0.001 error). To improve indexing performance (at the cost of query accuracy) explicitly define
													Element:code
														tree_level
														or
													Element:code
														precision
														along with a reasonable
													Element:code
														distance_error_pct
														, noting that large shapes will have greater false positives.
													Element:td
													Element:p
													Element:code
														0.025
													Element:tr
													Element:td
													Element:p
													Element:code
														orientation
													Element:td
													Element:p
														Optionally define how to interpret vertex order for polygons / multipolygons. This parameter defines one of two coordinate system rules (Right-hand or Left-hand) each of which can be specified in three different ways. 1. Right-hand rule:
													Element:code
														right
														,
													Element:code
														ccw
														,
													Element:code
														counterclockwise
														, 2. Left-hand rule:
													Element:code
														left
														,
													Element:code
														cw
														,
													Element:code
														clockwise
														. The default orientation (
													Element:code
														counterclockwise
														) complies with the OGC standard which defines outer ring vertices in counterclockwise order with inner ring(s) vertices (holes) in clockwise order. Setting this parameter in the geo_shape mapping explicitly sets vertex order for the coordinate list of a geo_shape field but can be overridden in each individual GeoJSON document.
													Element:td
													Element:p
													Element:code
														ccw
													Element:tr
													Element:td
													Element:p
													Element:code
														points_only
													Element:td
													Element:p
														Setting this option to
													Element:code
														true
														(defaults to
													Element:code
														false
														) configures the
													Element:code
														geo_shape
														field type for point shapes only (NOTE: Multi-Points are not yet supported). This optimizes index and search performance for the
													Element:code
														geohash
														and
													Element:code
														quadtree
														when it is known that only points will be indexed. At present geo_shape queries can not be executed on
													Element:code
														geo_point
														field types. This option bridges the gap by improving point performance on a
													Element:code
														geo_shape
														field so that
													Element:code
														geo_shape
														queries are optimal on a point only field.
													Element:td
													Element:p
													Element:code
														false
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:a
														Prefix trees
													Element:a
														edit
												Node:
												(type) c
												(layer)4
													Element:p
														To efficiently represent shapes in the index, Shapes are converted into a series of hashes representing grid squares (commonly referred to as "rasters") using implementations of a PrefixTree. The tree notion comes from the fact that the PrefixTree uses multiple grid layers, each with an increasing level of precision to represent the Earth. This can be thought of as increasing the level of detail of a map or image at higher zoom levels.
												Node:
												(type) c
												(layer)4
													Element:p
														Multiple PrefixTree implementations are provided:
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														GeohashPrefixTree - Uses
													Element:a
														geohashes
														for grid squares. Geohashes are base32 encoded strings of the bits of the latitude and longitude interleaved. So the longer the hash, the more precise it is. Each character added to the geohash represents another tree level and adds 5 bits of precision to the geohash. A geohash represents a rectangular area and has 32 sub rectangles. The maximum amount of levels in Elasticsearch is 24.
													Element:li
														QuadPrefixTree - Uses a
													Element:a
														quadtree
														for grid squares. Similar to geohash, quad trees interleave the bits of the latitude and longitude the resulting hash is a bit set. A tree level in a quad tree represents 2 bits in this bit set, one for each coordinate. The maximum amount of levels for the quad trees in Elasticsearch is 50.
												Node:
												(type) c
												(layer)4
															Node:
															(type) c
															(layer)5
																Element:h5
																Element:a
																	Spatial strategies
																Element:a
																	edit
															Node:
															(type) c
															(layer)5
																Element:p
																	The PrefixTree implementations rely on a SpatialStrategy for decomposing the provided Shape(s) into approximated grid squares. Each strategy answers the following:
															Node:
															(type) c
															(layer)5
																Element:ul
																Element:li
																	What type of Shapes can be indexed?
																Element:li
																	What types of Query Operations and Shapes can be used?
																Element:li
																	Does it support more than one Shape per field?
															Node:
															(type) c
															(layer)5
																Element:p
																	The following Strategy implementations (with corresponding capabilities) are provided:
															Node:
															(type) c
															(layer)5
																Element:table
																Element:colgroup
																Element:col
																Element:col
																Element:col
																Element:col
																Element:thead
																Element:tr
																Element:th
																	Strategy
																Element:th
																	Supported Shapes
																Element:th
																	Supported Queries
																Element:th
																	Multiple Shapes
																Element:tbody
																Element:tr
																Element:td
																Element:p
																Element:code
																	recursive
																Element:td
																Element:p
																Element:a
																	All
																Element:td
																Element:p
																Element:code
																	INTERSECTS
																	,
																Element:code
																	DISJOINT
																	,
																Element:code
																	WITHIN
																	,
																Element:code
																	CONTAINS
																Element:td
																Element:p
																	Yes
																Element:tr
																Element:td
																Element:p
																Element:code
																	term
																Element:td
																Element:p
																Element:a
																	Points
																Element:td
																Element:p
																Element:code
																	INTERSECTS
																Element:td
																Element:p
																	Yes
												Node:
												(type) c
												(layer)4
															Node:
															(type) c
															(layer)5
																Element:h5
																Element:a
																	Accuracy
																Element:a
																	edit
															Node:
															(type) c
															(layer)5
																Element:p
																	Geo_shape does not provide 100% accuracy and depending on how it is configured it may return some false positives or false negatives for certain queries. To mitigate this, it is important to select an appropriate value for the tree_levels parameter and to adjust expectations accordingly. For example, a point may be near the border of a particular grid cell and may thus not match a query that only matches the cell right next to it — even though the shape is very close to the point.
												Node:
												(type) c
												(layer)4
															Node:
															(type) c
															(layer)5
																Element:h5
																Element:a
																	Example
																Element:a
																	edit
															Node:
															(type) c
															(layer)5
																Element:pre
																	{ "properties": { "location": { "type": "geo_shape", "tree": "quadtree", "precision": "1m" } } }
															Node:
															(type) c
															(layer)5
																Element:p
																	This mapping maps the location field to the geo_shape type using the quad_tree implementation and a precision of 1m. Elasticsearch translates this into a tree_levels setting of 26.
												Node:
												(type) c
												(layer)4
															Node:
															(type) c
															(layer)5
																Element:h5
																Element:a
																	Performance considerations
																Element:a
																	edit
															Node:
															(type) c
															(layer)5
																Element:p
																	Elasticsearch uses the paths in the prefix tree as terms in the index and in queries. The higher the level is (and thus the precision), the more terms are generated. Of course, calculating the terms, keeping them in memory, and storing them on disk all have a price. Especially with higher tree levels, indices can become extremely large even with a modest amount of data. Additionally, the size of the features also matters. Big, complex polygons can take up a lot of space at higher tree levels. Which setting is right depends on the use case. Generally one trades off accuracy against index size and query performance.
															Node:
															(type) c
															(layer)5
																Element:p
																	The defaults in Elasticsearch for both implementations are a compromise between index size and a reasonable level of precision of 50m at the equator. This allows for indexing tens of millions of shapes without overly bloating the resulting index too much relative to the input size.
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:a
														Input Structure
													Element:a
														edit
												Node:
												(type) c
												(layer)4
													Element:p
														The
													Element:a
														GeoJSON
														format is used to represent
													Element:a
														shapes
														as input as follows:
												Node:
												(type) c
												(layer)4
													Element:table
													Element:colgroup
													Element:col
													Element:col
													Element:col
													Element:thead
													Element:tr
													Element:th
														GeoJSON Type
													Element:th
														Elasticsearch Type
													Element:th
														Description
													Element:tbody
													Element:tr
													Element:td
													Element:p
													Element:code
														Point
													Element:td
													Element:p
													Element:code
														point
													Element:td
													Element:p
														A single geographic coordinate.
													Element:tr
													Element:td
													Element:p
													Element:code
														LineString
													Element:td
													Element:p
													Element:code
														linestring
													Element:td
													Element:p
														An arbitrary line given two or more points.
													Element:tr
													Element:td
													Element:p
													Element:code
														Polygon
													Element:td
													Element:p
													Element:code
														polygon
													Element:td
													Element:p
														A
													Element:span
														polygon whose first and last point must match, thus requiring
													Element:em
														closed
													Element:code
														n + 1
														vertices to create an
													Element:code
														n
														-sided polygon and a minimum of
													Element:code
														4
														vertices.
													Element:tr
													Element:td
													Element:p
													Element:code
														MultiPoint
													Element:td
													Element:p
													Element:code
														multipoint
													Element:td
													Element:p
														An array of unconnected, but likely related points.
													Element:tr
													Element:td
													Element:p
													Element:code
														MultiLineString
													Element:td
													Element:p
													Element:code
														multilinestring
													Element:td
													Element:p
														An array of separate linestrings.
													Element:tr
													Element:td
													Element:p
													Element:code
														MultiPolygon
													Element:td
													Element:p
													Element:code
														multipolygon
													Element:td
													Element:p
														An array of separate polygons.
													Element:tr
													Element:td
													Element:p
													Element:code
														GeometryCollection
													Element:td
													Element:p
													Element:code
														geometrycollection
													Element:td
													Element:p
														A GeoJSON shape similar to the
													Element:code
														multi*
														shapes except that multiple types can coexist (e.g., a Point and a LineString).
													Element:tr
													Element:td
													Element:p
													Element:code
														N/A
													Element:td
													Element:p
													Element:code
														envelope
													Element:td
													Element:p
														A bounding rectangle, or envelope, specified by specifying only the top left and bottom right points.
													Element:tr
													Element:td
													Element:p
													Element:code
														N/A
													Element:td
													Element:p
													Element:code
														circle
													Element:td
													Element:p
														A circle specified by a center point and radius with units, which default to
													Element:code
														METERS
														.
												Node:
												(type) c
												(layer)4
													Element:img
												Node:
												(type) c
												(layer)4
													Element:p
														For all types, both the inner
													Element:code
														type
														and
													Element:code
														coordinates
														fields are required.
												Node:
												(type) c
												(layer)4
													Element:p
														In GeoJSON, and therefore Elasticsearch, the correct
													Element:span
														within coordinate arrays. This differs from many Geospatial APIs (e.g., Google Maps) that generally use the colloquial latitude, longitude (Y, X).
													Element:strong
														coordinate order is longitude, latitude (X, Y)
												Node:
												(type) c
												(layer)4
															Node:
															(type) c
															(layer)5
																Element:h5
																Element:a
																Element:a
																	Point
																Element:a
																	edit
															Node:
															(type) c
															(layer)5
																Element:p
																	A point is a single geographic coordinate, such as the location of a building or the current position given by a smartphone’s Geolocation API.
															Node:
															(type) c
															(layer)5
																Element:pre
																	{ "location" : { "type" : "point", "coordinates" : [-77.03653, 38.897676] } }
												Node:
												(type) c
												(layer)4
															Node:
															(type) c
															(layer)5
																Element:h5
																Element:a
																Element:a
																	LineString
																Element:a
																	edit
															Node:
															(type) c
															(layer)5
																Element:p
																	A
																Element:code
																	linestring
																	defined by an array of two or more positions. By specifying only two points, the
																Element:code
																	linestring
																	will represent a straight line. Specifying more than two points creates an arbitrary path.
															Node:
															(type) c
															(layer)5
																Element:pre
																	{ "location" : { "type" : "linestring", "coordinates" : [[-77.03653, 38.897676], [-77.009051, 38.889939]] } }
															Node:
															(type) c
															(layer)5
																Element:p
																	The above
																Element:code
																	linestring
																	would draw a straight line starting at the White House to the US Capitol Building.
												Node:
												(type) c
												(layer)4
															Node:
															(type) c
															(layer)5
																Element:h5
																Element:a
																Element:a
																	Polygon
																Element:a
																	edit
															Node:
															(type) c
															(layer)5
																Element:p
																	A polygon is defined by a list of a list of points. The first and last points in each (outer) list must be the same (the polygon must be closed).
															Node:
															(type) c
															(layer)5
																Element:pre
																	{ "location" : { "type" : "polygon", "coordinates" : [ [ [100.0, 0.0], [101.0, 0.0], [101.0, 1.0], [100.0, 1.0], [100.0, 0.0] ] ] } }
															Node:
															(type) c
															(layer)5
																Element:p
																	The first array represents the outer boundary of the polygon, the other arrays represent the interior shapes ("holes"):
															Node:
															(type) c
															(layer)5
																Element:pre
																	{ "location" : { "type" : "polygon", "coordinates" : [ [ [100.0, 0.0], [101.0, 0.0], [101.0, 1.0], [100.0, 1.0], [100.0, 0.0] ], [ [100.2, 0.2], [100.8, 0.2], [100.8, 0.8], [100.2, 0.8], [100.2, 0.2] ] ] } }
															Node:
															(type) c
															(layer)5
																Element:p
																Element:span
																	GeoJSON does not mandate a specific order for vertices thus ambiguous polygons around the dateline and poles are possible. To alleviate ambiguity the Open Geospatial Consortium (OGC)
																Element:strong
																	IMPORTANT NOTE:
																Element:a
																	Simple Feature Access
																	specification defines the following vertex ordering:
															Node:
															(type) c
															(layer)5
																Element:ul
																Element:li
																	Outer Ring - Counterclockwise
																Element:li
																	Inner Ring(s) / Holes - Clockwise
															Node:
															(type) c
															(layer)5
																Element:p
																	For polygons that do not cross the dateline, vertex order will not matter in Elasticsearch. For polygons that do cross the dateline, Elasticsearch requires vertex ordering to comply with the OGC specification. Otherwise, an unintended polygon may be created and unexpected query/filter results will be returned.
															Node:
															(type) c
															(layer)5
																Element:p
																	The following provides an example of an ambiguous polygon. Elasticsearch will apply OGC standards to eliminate ambiguity resulting in a polygon that crosses the dateline.
															Node:
															(type) c
															(layer)5
																Element:pre
																	{ "location" : { "type" : "polygon", "coordinates" : [ [ [-177.0, 10.0], [176.0, 15.0], [172.0, 0.0], [176.0, -15.0], [-177.0, -10.0], [-177.0, 10.0] ], [ [178.2, 8.2], [-178.8, 8.2], [-180.8, -8.8], [178.2, 8.8] ] ] } }
															Node:
															(type) c
															(layer)5
																Element:p
																	An
																Element:code
																	orientation
																	parameter can be defined when setting the geo_shape mapping (see
																Element:a
																	the section called “Mapping Options
																Element:a
																	edit
																	”). This will define vertex order for the coordinate list on the mapped geo_shape field. It can also be overridden on each document. The following is an example for overriding the orientation on a document:
															Node:
															(type) c
															(layer)5
																Element:pre
																	{ "location" : { "type" : "polygon", "orientation" : "clockwise", "coordinates" : [ [ [-177.0, 10.0], [176.0, 15.0], [172.0, 0.0], [176.0, -15.0], [-177.0, -10.0], [-177.0, 10.0] ], [ [178.2, 8.2], [-178.8, 8.2], [-180.8, -8.8], [178.2, 8.8] ] ] } }
												Node:
												(type) c
												(layer)4
															Node:
															(type) c
															(layer)5
																Element:h5
																Element:a
																Element:a
																	MultiPoint
																Element:a
																	edit
															Node:
															(type) c
															(layer)5
																Element:p
																	A list of geojson points.
															Node:
															(type) c
															(layer)5
																Element:pre
																	{ "location" : { "type" : "multipoint", "coordinates" : [ [102.0, 2.0], [103.0, 2.0] ] } }
												Node:
												(type) c
												(layer)4
															Node:
															(type) c
															(layer)5
																Element:h5
																Element:a
																Element:a
																	MultiLineString
																Element:a
																	edit
															Node:
															(type) c
															(layer)5
																Element:p
																	A list of geojson linestrings.
															Node:
															(type) c
															(layer)5
																Element:pre
																	{ "location" : { "type" : "multilinestring", "coordinates" : [ [ [102.0, 2.0], [103.0, 2.0], [103.0, 3.0], [102.0, 3.0] ], [ [100.0, 0.0], [101.0, 0.0], [101.0, 1.0], [100.0, 1.0] ], [ [100.2, 0.2], [100.8, 0.2], [100.8, 0.8], [100.2, 0.8] ] ] } }
												Node:
												(type) c
												(layer)4
															Node:
															(type) c
															(layer)5
																Element:h5
																Element:a
																Element:a
																	MultiPolygon
																Element:a
																	edit
															Node:
															(type) c
															(layer)5
																Element:p
																	A list of geojson polygons.
															Node:
															(type) c
															(layer)5
																Element:pre
																	{ "location" : { "type" : "multipolygon", "coordinates" : [ [ [[102.0, 2.0], [103.0, 2.0], [103.0, 3.0], [102.0, 3.0], [102.0, 2.0]] ], [ [[100.0, 0.0], [101.0, 0.0], [101.0, 1.0], [100.0, 1.0], [100.0, 0.0]], [[100.2, 0.2], [100.8, 0.2], [100.8, 0.8], [100.2, 0.8], [100.2, 0.2]] ] ] } }
												Node:
												(type) c
												(layer)4
															Node:
															(type) c
															(layer)5
																Element:h5
																Element:a
																Element:a
																	Geometry Collection
																Element:a
																	edit
															Node:
															(type) c
															(layer)5
																Element:p
																	A collection of geojson geometry objects.
															Node:
															(type) c
															(layer)5
																Element:pre
																	{ "location" : { "type": "geometrycollection", "geometries": [ { "type": "point", "coordinates": [100.0, 0.0] }, { "type": "linestring", "coordinates": [ [101.0, 0.0], [102.0, 1.0] ] } ] } }
												Node:
												(type) c
												(layer)4
															Node:
															(type) c
															(layer)5
																Element:h5
																Element:a
																	Envelope
																Element:a
																	edit
															Node:
															(type) c
															(layer)5
																Element:p
																	Elasticsearch supports an
																Element:code
																	envelope
																	type, which consists of coordinates for upper left and lower right points of the shape to represent a bounding rectangle:
															Node:
															(type) c
															(layer)5
																Element:pre
																	{ "location" : { "type" : "envelope", "coordinates" : [ [-45.0, 45.0], [45.0, -45.0] ] } }
												Node:
												(type) c
												(layer)4
															Node:
															(type) c
															(layer)5
																Element:h5
																Element:a
																	Circle
																Element:a
																	edit
															Node:
															(type) c
															(layer)5
																Element:p
																	Elasticsearch supports a
																Element:code
																	circle
																	type, which consists of a center point with a radius:
															Node:
															(type) c
															(layer)5
																Element:pre
																	{ "location" : { "type" : "circle", "coordinates" : [-45.0, 45.0], "radius" : "100m" } }
															Node:
															(type) c
															(layer)5
																Element:p
																	Note: The inner
																Element:code
																	radius
																	field is required. If not specified, then the units of the
																Element:code
																	radius
																	will default to
																Element:code
																	METERS
																	.
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:a
														Sorting and Retrieving index Shapes
													Element:a
														edit
												Node:
												(type) c
												(layer)4
													Element:p
														Due to the complex input structure and index representation of shapes, it is not currently possible to sort shapes or retrieve their fields directly. The geo_shape value is only retrievable through the
													Element:code
														_source
														field.
												Node:
												(type) c
												(layer)4
													Element:span
													Element:a
														« Geo-point datatype
												Node:
												(type) c
												(layer)4
													Element:span
													Element:a
														IP datatype »
												Node:
												(type) c
												(layer)4
									Node:
									(type) c
									(layer)3
										Element:h3
											Top Videos
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:a
											Elasticsearch Demo
										Element:li
										Element:a
											Kibana 101
										Element:li
										Element:a
											Logstash Primer
									Node:
									(type) c
									(layer)3
															Node:
															(type) c
															(layer)5
																Element:h5
																	Be in the know with the latest and greatest from Elastic.
															Node:
															(type) c
															(layer)5
																Element:p
																	Thanks for subscribing! We'll keep you updated with new releases.
												Node:
												(type) c
												(layer)4
									Node:
									(type) c
									(layer)3
										Element:footer
										Element:h3
										Element:a
											Products >
										Element:ul
										Element:li
										Element:a
											Elasticsearch
										Element:li
										Element:a
											Kibana
										Element:li
										Element:a
											Beats
										Element:li
										Element:a
											Logstash
										Element:li
										Element:a
											X-Pack
										Element:li
										Element:a
											Elastic Cloud
										Element:li
										Element:a
											Security (formerly Shield)
										Element:li
										Element:a
											Alerting (via Watcher)
										Element:li
										Element:a
											Monitoring (formerly Marvel)
										Element:li
										Element:a
											Graph
										Element:li
										Element:a
											Reporting
										Element:li
										Element:a
											Machine Learning
										Element:li
										Element:a
											ES-Hadoop
										Element:h3
											Resources
										Element:ul
										Element:li
										Element:a
											Blog
										Element:li
										Element:a
											Cloud Status
										Element:li
										Element:a
											Community
										Element:li
										Element:a
											Customers & Use Cases
										Element:li
										Element:a
											Documentation
										Element:li
										Element:a
											Elastic{ON} Events
										Element:li
										Element:a
											Forums
										Element:li
										Element:a
											Meetups
										Element:li
										Element:a
											Subscriptions
										Element:li
										Element:a
											Support Portal
										Element:li
										Element:a
											Videos & Webinars
										Element:li
										Element:a
											Training
										Element:h3
										Element:a
											About >
										Element:ul
										Element:li
										Element:a
											Careers/Jobs
										Element:li
										Element:a
											Contact
										Element:li
										Element:a
											Leadership
										Element:li
										Element:a
											Partners
										Element:li
										Element:a
											Press
										Element:h3
											Language
										Element:ul
										Element:li
										Element:a
											English
										Element:li
										Element:a
											Français
										Element:li
										Element:a
											Deutsch
										Element:li
										Element:a
											日本語
										Element:li
										Element:a
											한국어
										Element:p
											FOLLOW US
										Element:ul
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:ul
										Element:li
										Element:a
											Trademarks
										Element:li
										Element:a
											Terms of Use
										Element:li
										Element:a
											Privacy
										Element:li
										Element:a
											Cookie Policy
										Element:li
										Element:a
											Brand
										Element:a
										Element:img
										Element:p
											© 2017. All Rights Reserved - Elasticsearch
										Element:p
											Elasticsearch is a trademark of Elasticsearch BV, registered in the U.S. and in other countries
										Element:p
											Apache, Apache Lucene, Apache Hadoop, Hadoop, HDFS and the yellow elephant logo are trademarks of the
										Element:a
											Apache Software Foundation
											in the United States and/or other countries.
