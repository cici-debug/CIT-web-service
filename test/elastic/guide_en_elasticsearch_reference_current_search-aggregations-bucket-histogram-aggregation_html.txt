Node:
(type) c
(layer)0
	Element:body
						Node:
						(type) h2
						(layer)2
							Element:h2
							Element:a
								Histogram Aggregation
							Element:a
								edit
						Node:
						(type) c
						(layer)2
							Element:p
								A multi-bucket values source based aggregation that can be applied on numeric values extracted from the documents. It dynamically builds fixed size (a.k.a. interval) buckets over the values. For example, if the documents have a field that holds a price (numeric), we can configure this aggregation to dynamically build buckets with interval
							Element:code
								5
								(in case of price it may represent $5). When the aggregation executes, the price field of every document will be evaluated and will be rounded down to its closest bucket - for example, if the price is
							Element:code
								32
								and the bucket size is
							Element:code
								5
								then the rounding will yield
							Element:code
								30
								and thus the document will "fall" into the bucket that is associated with the key
							Element:code
								30
								. To make this more formal, here is the rounding function that is used:
						Node:
						(type) c
						(layer)2
							Element:pre
								bucket_key = Math.floor((value - offset) / interval) * interval + offset
						Node:
						(type) c
						(layer)2
							Element:p
								The
							Element:code
								interval
								must be a positive decimal, while the
							Element:code
								offset
								must be a decimal in
							Element:code
								[0, interval[
								.
						Node:
						(type) c
						(layer)2
							Element:p
								The following snippet "buckets" the products based on their
							Element:code
								price
								by interval of
							Element:code
								50
								:
						Node:
						(type) c
						(layer)2
							Element:pre
								{ "aggs" : { "prices" : { "histogram" : { "field" : "price", "interval" : 50 } } } }
						Node:
						(type) c
						(layer)2
							Element:p
								And the following may be the response:
						Node:
						(type) c
						(layer)2
							Element:pre
								{ "aggregations": { "prices" : { "buckets": [ { "key": 0, "doc_count": 2 }, { "key": 50, "doc_count": 4 }, { "key": 100, "doc_count": 0 }, { "key": 150, "doc_count": 3 } ] } } }
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Minimum document count
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											The response above show that no documents has a price that falls within the range of
										Element:code
											[100 - 150)
											. By default the response will fill gaps in the histogram with empty buckets. It is possible change that and request buckets with a higher minimum count thanks to the
										Element:code
											min_doc_count
											setting:
									Node:
									(type) c
									(layer)3
										Element:pre
											{ "aggs" : { "prices" : { "histogram" : { "field" : "price", "interval" : 50, "min_doc_count" : 1 } } } }
									Node:
									(type) c
									(layer)3
										Element:p
											Response:
									Node:
									(type) c
									(layer)3
										Element:pre
											{ "aggregations": { "prices" : { "buckets": [ { "key": 0, "doc_count": 2 }, { "key": 50, "doc_count": 4 }, { "key": 150, "doc_count": 3 } ] } } }
									Node:
									(type) c
									(layer)3
										Element:p
										Element:a
											By default the
										Element:code
											histogram
											returns all the buckets within the range of the data itself, that is, the documents with the smallest values (on which with histogram) will determine the min bucket (the bucket with the smallest key) and the documents with the highest values will determine the max bucket (the bucket with the highest key). Often, when requesting empty buckets, this causes a confusion, specifically, when the data is also filtered.
									Node:
									(type) c
									(layer)3
										Element:p
											To understand why, let’s look at an example:
									Node:
									(type) c
									(layer)3
										Element:p
											Lets say the you’re filtering your request to get all docs with values between
										Element:code
											0
											and
										Element:code
											500
											, in addition you’d like to slice the data per price using a histogram with an interval of
										Element:code
											50
											. You also specify
										Element:code
											"min_doc_count" : 0
											as you’d like to get all buckets even the empty ones. If it happens that all products (documents) have prices higher than
										Element:code
											100
											, the first bucket you’ll get will be the one with
										Element:code
											100
											as its key. This is confusing, as many times, you’d also like to get those buckets between
										Element:code
											0 - 100
											.
									Node:
									(type) c
									(layer)3
										Element:p
											With
										Element:code
											extended_bounds
											setting, you now can "force" the histogram aggregation to start building buckets on a specific
										Element:code
											min
											values and also keep on building buckets up to a
										Element:code
											max
											value (even if there are no documents anymore). Using
										Element:code
											extended_bounds
											only makes sense when
										Element:code
											min_doc_count
											is 0 (the empty buckets will never be returned if
										Element:code
											min_doc_count
											is greater than 0).
									Node:
									(type) c
									(layer)3
										Element:p
											Note that (as the name suggest)
										Element:code
											extended_bounds
											is
										Element:span
											filtering buckets. Meaning, if the
										Element:strong
											not
										Element:code
											extended_bounds.min
											is higher than the values extracted from the documents, the documents will still dictate what the first bucket will be (and the same goes for the
										Element:code
											extended_bounds.max
											and the last bucket). For filtering buckets, one should nest the histogram aggregation under a range
										Element:code
											filter
											aggregation with the appropriate
										Element:code
											from
											/
										Element:code
											to
											settings.
									Node:
									(type) c
									(layer)3
										Element:p
											Example:
									Node:
									(type) c
									(layer)3
										Element:pre
											{ "query" : { "constant_score" : { "filter": { "range" : { "price" : { "to" : "500" } } } } }, "aggs" : { "prices" : { "histogram" : { "field" : "price", "interval" : 50, "extended_bounds" : { "min" : 0, "max" : 500 } } } } }
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Order
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											By default the returned buckets are sorted by their
										Element:code
											key
											ascending, though the order behaviour can be controlled using the
										Element:code
											order
											setting.
									Node:
									(type) c
									(layer)3
										Element:p
											Ordering the buckets by their key - descending:
									Node:
									(type) c
									(layer)3
										Element:pre
											{ "aggs" : { "prices" : { "histogram" : { "field" : "price", "interval" : 50, "order" : { "_key" : "desc" } } } } }
									Node:
									(type) c
									(layer)3
										Element:p
											Ordering the buckets by their
										Element:code
											doc_count
											- ascending:
									Node:
									(type) c
									(layer)3
										Element:pre
											{ "aggs" : { "prices" : { "histogram" : { "field" : "price", "interval" : 50, "order" : { "_count" : "asc" } } } } }
									Node:
									(type) c
									(layer)3
										Element:p
											If the histogram aggregation has a direct metrics sub-aggregation, the latter can determine the order of the buckets:
									Node:
									(type) c
									(layer)3
										Element:pre
											{ "aggs" : { "prices" : { "histogram" : { "field" : "price", "interval" : 50, "order" : { "price_stats.min" : "asc" }
										Element:a
										Element:span
											}, "aggs" : { "price_stats" : { "stats" : {} }
										Element:img
										Element:a
										Element:span
											} } } }
										Element:img
									Node:
									(type) c
									(layer)3
										Element:table
										Element:tr
										Element:td
										Element:p
										Element:a
										Element:span
										Element:img
										Element:td
										Element:p
											The
										Element:code
											{ "price_stats.min" : asc" }
											will sort the buckets based on
										Element:code
											min
											value of their
										Element:code
											price_stats
											sub-aggregation.
										Element:tr
										Element:td
										Element:p
										Element:a
										Element:span
										Element:img
										Element:td
										Element:p
											There is no need to configure the
										Element:code
											price
											field for the
										Element:code
											price_stats
											aggregation as it will inherit it by default from its parent histogram aggregation.
									Node:
									(type) c
									(layer)3
										Element:p
											It is also possible to order the buckets based on a "deeper" aggregation in the hierarchy. This is supported as long as the aggregations path are of a single-bucket type, where the last aggregation in the path may either by a single-bucket one or a metrics one. If it’s a single-bucket type, the order will be defined by the number of docs in the bucket (i.e.
										Element:code
											doc_count
											), in case it’s a metrics one, the same rules as above apply (where the path must indicate the metric name to sort by in case of a multi-value metrics aggregation, and in case of a single-value metrics aggregation the sort will be applied on that value).
									Node:
									(type) c
									(layer)3
										Element:p
											The path must be defined in the following form:
									Node:
									(type) c
									(layer)3
										Element:pre
											AGG_SEPARATOR = '>' ; METRIC_SEPARATOR = '.' ; AGG_NAME = <the name of the aggregation> ; METRIC = <the name of the metric (in case of multi-value metrics aggregation)> ; PATH = <AGG_NAME> [ <AGG_SEPARATOR>, <AGG_NAME> ]* [ <METRIC_SEPARATOR>, <METRIC> ] ;
									Node:
									(type) c
									(layer)3
										Element:pre
											{ "aggs" : { "prices" : { "histogram" : { "field" : "price", "interval" : 50, "order" : { "promoted_products>rating_stats.avg" : "desc" }
										Element:a
										Element:span
											}, "aggs" : { "promoted_products" : { "filter" : { "term" : { "promoted" : true }}, "aggs" : { "rating_stats" : { "stats" : { "field" : "rating" }} } } } } } }
										Element:img
									Node:
									(type) c
									(layer)3
										Element:p
											The above will sort the buckets based on the avg rating among the promoted products
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Offset
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											By default the bucket keys start with 0 and then continue in even spaced steps of
										Element:code
											interval
											, e.g. if the interval is 10 the first buckets (assuming there is data inside them) will be [0 - 9], [10-19], [20-29]. The bucket boundaries can be shifted by using the
										Element:code
											offset
											option.
									Node:
									(type) c
									(layer)3
										Element:p
											This can be best illustrated with an example. If there are 10 documents with values ranging from 5 to 14, using interval
										Element:code
											10
											will result in two buckets with 5 documents each. If an additional offset
										Element:code
											5
											is used, there will be only one single bucket [5-14] containing all the 10 documents.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Response Format
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											By default, the buckets are returned as an ordered array. It is also possible to request the response as a hash instead keyed by the buckets keys:
									Node:
									(type) c
									(layer)3
										Element:pre
											{ "aggs" : { "prices" : { "histogram" : { "field" : "price", "interval" : 50, "keyed" : true } } } }
									Node:
									(type) c
									(layer)3
										Element:p
											Response:
									Node:
									(type) c
									(layer)3
										Element:pre
											{ "aggregations": { "prices": { "buckets": { "0": { "key": 0, "doc_count": 2 }, "50": { "key": 50, "doc_count": 4 }, "150": { "key": 150, "doc_count": 3 } } } } }
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Missing value
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											The
										Element:code
											missing
											parameter defines how documents that are missing a value should be treated. By default they will be ignored but it is also possible to treat them as if they had a value.
									Node:
									(type) c
									(layer)3
										Element:pre
											{ "aggs" : { "quantity" : { "histogram" : { "field" : "quantity", "interval": 10, "missing": 0
										Element:a
										Element:span
											} } } }
										Element:img
									Node:
									(type) c
									(layer)3
										Element:table
										Element:tr
										Element:td
										Element:p
										Element:a
										Element:span
										Element:img
										Element:a
										Element:span
										Element:img
										Element:td
										Element:p
											Documents without a value in the
										Element:code
											quantity
											field will fall into the same bucket as documents that have the value
										Element:code
											0
											.
									Node:
									(type) c
									(layer)3
										Element:span
										Element:a
											« Global Aggregation
									Node:
									(type) c
									(layer)3
										Element:span
										Element:a
											IP Range Aggregation »
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Top Videos
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:a
											Elasticsearch Demo
										Element:li
										Element:a
											Kibana 101
										Element:li
										Element:a
											Logstash Primer
									Node:
									(type) c
									(layer)3
															Node:
															(type) c
															(layer)5
																Element:h5
																	Be in the know with the latest and greatest from Elastic.
															Node:
															(type) c
															(layer)5
																Element:p
																	Thanks for subscribing! We'll keep you updated with new releases.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:footer
										Element:h3
										Element:a
											Products >
										Element:ul
										Element:li
										Element:a
											Elasticsearch
										Element:li
										Element:a
											Kibana
										Element:li
										Element:a
											Beats
										Element:li
										Element:a
											Logstash
										Element:li
										Element:a
											X-Pack
										Element:li
										Element:a
											Elastic Cloud
										Element:li
										Element:a
											Security (formerly Shield)
										Element:li
										Element:a
											Alerting (via Watcher)
										Element:li
										Element:a
											Monitoring (formerly Marvel)
										Element:li
										Element:a
											Graph
										Element:li
										Element:a
											Reporting
										Element:li
										Element:a
											Machine Learning
										Element:li
										Element:a
											ES-Hadoop
										Element:h3
											Resources
										Element:ul
										Element:li
										Element:a
											Blog
										Element:li
										Element:a
											Cloud Status
										Element:li
										Element:a
											Community
										Element:li
										Element:a
											Customers & Use Cases
										Element:li
										Element:a
											Documentation
										Element:li
										Element:a
											Elastic{ON} Events
										Element:li
										Element:a
											Forums
										Element:li
										Element:a
											Meetups
										Element:li
										Element:a
											Subscriptions
										Element:li
										Element:a
											Support Portal
										Element:li
										Element:a
											Videos & Webinars
										Element:li
										Element:a
											Training
										Element:h3
										Element:a
											About >
										Element:ul
										Element:li
										Element:a
											Careers/Jobs
										Element:li
										Element:a
											Contact
										Element:li
										Element:a
											Leadership
										Element:li
										Element:a
											Partners
										Element:li
										Element:a
											Press
										Element:h3
											Language
										Element:ul
										Element:li
										Element:a
											English
										Element:li
										Element:a
											Français
										Element:li
										Element:a
											Deutsch
										Element:li
										Element:a
											日本語
										Element:li
										Element:a
											한국어
										Element:p
											FOLLOW US
										Element:ul
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:ul
										Element:li
										Element:a
											Trademarks
										Element:li
										Element:a
											Terms of Use
										Element:li
										Element:a
											Privacy
										Element:li
										Element:a
											Cookie Policy
										Element:li
										Element:a
											Brand
										Element:a
										Element:img
										Element:p
											© 2017. All Rights Reserved - Elasticsearch
										Element:p
											Elasticsearch is a trademark of Elasticsearch BV, registered in the U.S. and in other countries
										Element:p
											Apache, Apache Lucene, Apache Hadoop, Hadoop, HDFS and the yellow elephant logo are trademarks of the
										Element:a
											Apache Software Foundation
											in the United States and/or other countries.
