Node:
(type) c
(layer)0
	Element:body
						Node:
						(type) h2
						(layer)2
							Element:h2
							Element:a
								Array datatype
							Element:a
								edit
						Node:
						(type) c
						(layer)2
							Element:p
								In Elasticsearch, there is no dedicated
							Element:code
								array
								type. Any field can contain zero or more values by default, however, all values in the array must be of the same datatype. For instance:
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
								an array of strings: [
							Element:code
								"one"
								,
							Element:code
								"two"
								]
							Element:li
								an array of integers: [
							Element:code
								1
								,
							Element:code
								2
								]
							Element:li
								an array of arrays: [
							Element:code
								1
								, [
							Element:code
								2
								,
							Element:code
								3
								]] which is the equivalent of [
							Element:code
								1
								,
							Element:code
								2
								,
							Element:code
								3
								]
							Element:li
								an array of objects: [
							Element:code
								{ "name": "Mary", "age": 12 }
								,
							Element:code
								{ "name": "John", "age": 10 }
								]
						Node:
						(type) c
						(layer)2
							Element:img
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Arrays of objects
									Node:
									(type) c
									(layer)3
										Element:p
											Arrays of objects do not work as you would expect: you cannot query each object independently of the other objects in the array. If you need to be able to do this then you should use the
										Element:a
											datatype instead of the
										Element:code
											nested
										Element:a
											datatype.
										Element:code
											object
									Node:
									(type) c
									(layer)3
										Element:p
											This is explained in more detail in
										Element:a
											Nested datatype
											.
									Node:
									(type) c
									(layer)3
										Element:p
											When adding a field dynamically, the first value in the array determines the field
										Element:code
											type
											. All subsequent values must be of the same datatype or it must at least be possible to
										Element:a
											coerce
											subsequent values to the same datatype.
									Node:
									(type) c
									(layer)3
										Element:p
											Arrays with a mixture of datatypes are
										Element:span
											supported: [
										Element:em
											not
										Element:code
											10
											,
										Element:code
											"some string"
											]
									Node:
									(type) c
									(layer)3
										Element:p
											An array may contain
										Element:code
											null
											values, which are either replaced by the configured
										Element:a
											or skipped entirely. An empty array
										Element:code
											null_value
										Element:code
											[]
											is treated as a missing field — a field with no values.
									Node:
									(type) c
									(layer)3
										Element:p
											Nothing needs to be pre-configured in order to use arrays in documents, they are supported out of the box:
									Node:
									(type) c
									(layer)3
										Element:pre
											PUT my_index/my_type/1 { "message": "some arrays in this document...", "tags": [ "elasticsearch", "wow" ],
										Element:a
										Element:span
											"lists": [
										Element:img
										Element:a
										Element:span
											{ "name": "prog_list", "description": "programming list" }, { "name": "cool_list", "description": "cool stuff list" } ] } PUT my_index/my_type/2
										Element:img
										Element:a
										Element:span
											{ "message": "no arrays in this document...", "tags": "elasticsearch", "lists": { "name": "prog_list", "description": "programming list" } } GET my_index/_search { "query": { "match": { "tags": "elasticsearch"
										Element:img
										Element:a
										Element:span
											} } }
										Element:img
									Node:
									(type) c
									(layer)3
										Element:table
										Element:tr
										Element:td
										Element:p
										Element:a
										Element:span
										Element:img
										Element:td
										Element:p
											The
										Element:code
											tags
											field is dynamically added as a
										Element:code
											string
											field.
										Element:tr
										Element:td
										Element:p
										Element:a
										Element:span
										Element:img
										Element:td
										Element:p
											The
										Element:code
											lists
											field is dynamically added as an
										Element:code
											object
											field.
										Element:tr
										Element:td
										Element:p
										Element:a
										Element:span
										Element:img
										Element:td
										Element:p
											The second document contains no arrays, but can be indexed into the same fields.
										Element:tr
										Element:td
										Element:p
										Element:a
										Element:span
										Element:img
										Element:td
										Element:p
											The query looks for
										Element:code
											elasticsearch
											in the
										Element:code
											tags
											field, and matches both documents.
									Node:
									(type) c
									(layer)3
										Element:p
										Element:strong
											Multi-value fields and the inverted index
									Node:
									(type) c
									(layer)3
										Element:p
											The fact that all field types support multi-value fields out of the box is a consequence of the origins of Lucene. Lucene was designed to be a full text search engine. In order to be able to search for individual words within a big block of text, Lucene tokenizes the text into individual terms, and adds each term to the inverted index separately.
									Node:
									(type) c
									(layer)3
										Element:p
											This means that even a simple text field must be able to support multiple values by default. When other datatypes were added, such as numbers and dates, they used the same data structure as strings, and so got multi-values for free.
									Node:
									(type) c
									(layer)3
										Element:span
										Element:a
											« Field datatypes
									Node:
									(type) c
									(layer)3
										Element:span
										Element:a
											Binary datatype »
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Top Videos
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:a
											Elasticsearch Demo
										Element:li
										Element:a
											Kibana 101
										Element:li
										Element:a
											Logstash Primer
									Node:
									(type) c
									(layer)3
															Node:
															(type) c
															(layer)5
																Element:h5
																	Be in the know with the latest and greatest from Elastic.
															Node:
															(type) c
															(layer)5
																Element:p
																	Thanks for subscribing! We'll keep you updated with new releases.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:footer
										Element:h3
										Element:a
											Products >
										Element:ul
										Element:li
										Element:a
											Elasticsearch
										Element:li
										Element:a
											Kibana
										Element:li
										Element:a
											Beats
										Element:li
										Element:a
											Logstash
										Element:li
										Element:a
											X-Pack
										Element:li
										Element:a
											Elastic Cloud
										Element:li
										Element:a
											Security (formerly Shield)
										Element:li
										Element:a
											Alerting (via Watcher)
										Element:li
										Element:a
											Monitoring (formerly Marvel)
										Element:li
										Element:a
											Graph
										Element:li
										Element:a
											Reporting
										Element:li
										Element:a
											Machine Learning
										Element:li
										Element:a
											ES-Hadoop
										Element:h3
											Resources
										Element:ul
										Element:li
										Element:a
											Blog
										Element:li
										Element:a
											Cloud Status
										Element:li
										Element:a
											Community
										Element:li
										Element:a
											Customers & Use Cases
										Element:li
										Element:a
											Documentation
										Element:li
										Element:a
											Elastic{ON} Events
										Element:li
										Element:a
											Forums
										Element:li
										Element:a
											Meetups
										Element:li
										Element:a
											Subscriptions
										Element:li
										Element:a
											Support Portal
										Element:li
										Element:a
											Videos & Webinars
										Element:li
										Element:a
											Training
										Element:h3
										Element:a
											About >
										Element:ul
										Element:li
										Element:a
											Careers/Jobs
										Element:li
										Element:a
											Contact
										Element:li
										Element:a
											Leadership
										Element:li
										Element:a
											Partners
										Element:li
										Element:a
											Press
										Element:h3
											Language
										Element:ul
										Element:li
										Element:a
											English
										Element:li
										Element:a
											Français
										Element:li
										Element:a
											Deutsch
										Element:li
										Element:a
											日本語
										Element:li
										Element:a
											한국어
										Element:p
											FOLLOW US
										Element:ul
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:ul
										Element:li
										Element:a
											Trademarks
										Element:li
										Element:a
											Terms of Use
										Element:li
										Element:a
											Privacy
										Element:li
										Element:a
											Cookie Policy
										Element:li
										Element:a
											Brand
										Element:a
										Element:img
										Element:p
											© 2017. All Rights Reserved - Elasticsearch
										Element:p
											Elasticsearch is a trademark of Elasticsearch BV, registered in the U.S. and in other countries
										Element:p
											Apache, Apache Lucene, Apache Hadoop, Hadoop, HDFS and the yellow elephant logo are trademarks of the
										Element:a
											Apache Software Foundation
											in the United States and/or other countries.
