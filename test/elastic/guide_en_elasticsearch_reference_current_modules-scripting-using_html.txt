Node:
(type) c
(layer)0
	Element:body
						Node:
						(type) h2
						(layer)2
							Element:h2
							Element:a
								How to use scripts
							Element:a
								edit
						Node:
						(type) c
						(layer)2
							Element:p
								Wherever scripting is supported in the Elasticsearch API, the syntax follows the same pattern:
						Node:
						(type) c
						(layer)2
							Element:pre
								"script": { "lang": "...",
							Element:a
							Element:span
								"inline" | "stored" | "file": "...",
							Element:img
							Element:a
							Element:span
								"params": { ... }
							Element:img
							Element:a
							Element:span
								}
							Element:img
						Node:
						(type) c
						(layer)2
							Element:table
							Element:tr
							Element:td
							Element:p
							Element:a
							Element:span
							Element:img
							Element:td
							Element:p
								The language the script is written in, which defaults to
							Element:code
								painless
								.
							Element:tr
							Element:td
							Element:p
							Element:a
							Element:span
							Element:img
							Element:td
							Element:p
								The script itself which may be specified as
							Element:code
								inline
								,
							Element:code
								stored
								, or
							Element:code
								file
								.
							Element:tr
							Element:td
							Element:p
							Element:a
							Element:span
							Element:img
							Element:td
							Element:p
								Any named parameters that should be passed into the script.
						Node:
						(type) c
						(layer)2
							Element:p
								For example, the following script is used in a search request to return a
							Element:a
								scripted field
								:
						Node:
						(type) c
						(layer)2
							Element:pre
								PUT my_index/my_type/1 { "my_field": 5 } GET my_index/_search { "script_fields": { "my_doubled_field": { "script": { "lang": "expression", "inline": "doc['my_field'] * multiplier", "params": { "multiplier": 2 } } } } }
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Script Parameters
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:dl
										Element:dt
										Element:span
										Element:code
											lang
										Element:dd
											Specifies the language the script is written in. Defaults to
										Element:code
											painless
											but may be set to any of languages listed in
										Element:a
											. The default language may be changed in the
										Element:em
											Scripting
										Element:code
											elasticsearch.yml
											config file by setting
										Element:code
											script.default_lang
											to the appropriate language.
										Element:dt
										Element:span
										Element:code
											inline
											,
										Element:code
											id
											,
										Element:code
											file
										Element:dd
										Element:p
											Specifies the source of the script. An
										Element:code
											inline
											script is specified
										Element:code
											inline
											as in the example above, a stored script with the specified
										Element:code
											id
											is retrieved from the cluster state (see
										Element:a
											Stored Scripts
											), and a
										Element:code
											file
											script is retrieved from a file in the
										Element:code
											config/scripts
											directory (see
										Element:a
											File Scripts
											).
										Element:p
											While languages like
										Element:code
											expression
											and
										Element:code
											painless
											can be used out of the box as inline or stored scripts, other languages like
										Element:code
											groovy
											can only be specified as
										Element:code
											file
											unless you first adjust the default
										Element:a
											scripting security settings
											.
										Element:dt
										Element:span
										Element:code
											params
										Element:dd
											Specifies any named parameters that are passed into the script as variables.
									Node:
									(type) c
									(layer)3
										Element:img
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Prefer parameters
										Element:a
									Node:
									(type) c
									(layer)3
										Element:p
											The first time Elasticsearch sees a new script, it compiles it and stores the compiled version in a cache. Compilation can be a heavy process.
									Node:
									(type) c
									(layer)3
										Element:p
											If you need to pass variables into the script, you should pass them in as named
										Element:code
											params
											instead of hard-coding values into the script itself. For example, if you want to be able to multiply a field value by different multipliers, donâ€™t hard-code the multiplier into the script:
									Node:
									(type) c
									(layer)3
										Element:pre
											"inline": "doc['my_field'] * 2"
									Node:
									(type) c
									(layer)3
										Element:p
											Instead, pass it in as a named parameter:
									Node:
									(type) c
									(layer)3
										Element:pre
											"inline": "doc['my_field'] * multiplier", "params": { "multiplier": 2 }
									Node:
									(type) c
									(layer)3
										Element:p
											The first version has to be recompiled every time the multiplier changes. The second version is only compiled once.
									Node:
									(type) c
									(layer)3
										Element:p
											If you compile too many unique scripts within a small amount of time, Elasticsearch will reject the new dynamic scripts with a
										Element:code
											circuit_breaking_exception
											error. By default, up to 15 inline scripts per minute will be compiled. You can change this setting dynamically by setting
										Element:code
											script.max_compilations_per_minute
											.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											File-based Scripts
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											To increase security, non-sandboxed languages can only be specified in script files stored on every node in the cluster. File scripts must be saved in the
										Element:code
											scripts
											directory whose default location depends on whether you use the
										Element:a
											(
										Element:code
											zip
											/
										Element:code
											tar.gz
										Element:code
											$ES_HOME/config/scripts/
											),
										Element:a
											RPM
											, or
										Element:a
											Debian
											package. The default may be changed with the
										Element:code
											path.scripts
											setting.
									Node:
									(type) c
									(layer)3
										Element:p
											The languages which are assumed to be safe by default are:
										Element:code
											painless
											,
										Element:code
											expression
											, and
										Element:code
											mustache
											(used for search and query templates).
									Node:
									(type) c
									(layer)3
										Element:p
											Any files placed in the
										Element:code
											scripts
											directory will be compiled automatically when the node starts up and then
										Element:a
											every 60 seconds thereafter
											.
									Node:
									(type) c
									(layer)3
										Element:p
											The file should be named as follows:
										Element:code
											{script-name}.{lang}
											. For instance, the following example creates a Groovy script called
										Element:code
											calculate-score
											:
									Node:
									(type) c
									(layer)3
										Element:pre
											cat "log(_score * 2) + my_modifier" > config/scripts/calculate-score.groovy
									Node:
									(type) c
									(layer)3
										Element:p
											This script can be used as follows:
									Node:
									(type) c
									(layer)3
										Element:pre
											GET my_index/_search { "query": { "script": { "script": { "lang": "groovy",
										Element:a
										Element:span
											"file": "calculate-score",
										Element:img
										Element:a
										Element:span
											"params": { "my_modifier": 2 } } } } }
										Element:img
									Node:
									(type) c
									(layer)3
										Element:table
										Element:tr
										Element:td
										Element:p
										Element:a
										Element:span
										Element:img
										Element:td
										Element:p
											The language of the script, which should correspond with the script file suffix.
										Element:tr
										Element:td
										Element:p
										Element:a
										Element:span
										Element:img
										Element:td
										Element:p
											The name of the script, which should be the name of the file.
									Node:
									(type) c
									(layer)3
										Element:p
											The
										Element:code
											script
											directory may contain sub-directories, in which case the hierarchy of directories is flattened and concatenated with underscores. A script in
										Element:code
											group1/group2/my_script.groovy
											should use
										Element:code
											group1_group2_myscript
											as the
										Element:code
											file
											name.
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:a
														Automatic script reloading
													Element:a
														edit
												Node:
												(type) c
												(layer)4
													Element:p
														The
													Element:code
														scripts
														directory will be rescanned every
													Element:code
														60s
														(configurable with the
													Element:code
														resource.reload.interval
														setting) and new, changed, or removed scripts will be compiled, updated, or deleted from the script cache.
												Node:
												(type) c
												(layer)4
													Element:p
														Script reloading can be completely disabled by setting
													Element:code
														script.auto_reload_enabled
														to
													Element:code
														false
														.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Stored Scripts
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											Scripts may be stored in and retrieved from the cluster state using the
										Element:code
											_scripts
											end-point:
									Node:
									(type) c
									(layer)3
										Element:pre
											/_scripts/{lang}/{id}
										Element:a
										Element:span
										Element:img
										Element:a
										Element:span
										Element:img
									Node:
									(type) c
									(layer)3
										Element:table
										Element:tr
										Element:td
										Element:p
										Element:a
										Element:span
										Element:img
										Element:td
										Element:p
											The
										Element:code
											lang
											represents the script language.
										Element:tr
										Element:td
										Element:p
										Element:a
										Element:span
										Element:img
										Element:td
										Element:p
											The
										Element:code
											id
											is a unique identifier or script name.
									Node:
									(type) c
									(layer)3
										Element:p
											This example stores a Groovy script called
										Element:code
											calculate-score
											in the cluster state:
									Node:
									(type) c
									(layer)3
										Element:pre
											POST _scripts/groovy/calculate-score { "script": "log(_score * 2) + my_modifier" }
									Node:
									(type) c
									(layer)3
										Element:p
											This same script can be retrieved with:
									Node:
									(type) c
									(layer)3
										Element:pre
											GET _scripts/groovy/calculate-score
									Node:
									(type) c
									(layer)3
										Element:p
											Stored scripts can be used by specifying the
										Element:code
											lang
											and
										Element:code
											stored
											parameters as follows:
									Node:
									(type) c
									(layer)3
										Element:pre
											GET _search { "query": { "script": { "script": { "lang": "groovy", "stored": "calculate-score", "params": { "my_modifier": 2 } } } } }
									Node:
									(type) c
									(layer)3
										Element:p
											And deleted with:
									Node:
									(type) c
									(layer)3
										Element:pre
											DELETE _scripts/groovy/calculate-score
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Script Caching
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											All scripts are cached by default so that they only need to be recompiled when updates occur. File scripts keep a static cache and will always reside in memory. Both inline and stored scripts are stored in a cache that can evict residing scripts. By default, scripts do not have a time-based expiration, but you can change this behavior by using the
										Element:code
											script.cache.expire
											setting. You can configure the size of this cache by using the
										Element:code
											script.cache.max_size
											setting. By default, the cache size is
										Element:code
											100
											.
									Node:
									(type) c
									(layer)3
										Element:img
									Node:
									(type) c
									(layer)3
										Element:p
											The size of stored scripts is limited to 65,535 bytes. This can be changed by setting
										Element:code
											script.max_size_in_bytes
											setting to increase that soft limit, but if scripts are really large then alternatives like
										Element:a
											native
											scripts should be considered instead.
									Node:
									(type) c
									(layer)3
										Element:span
										Element:a
											Â« Scripting
									Node:
									(type) c
									(layer)3
										Element:span
										Element:a
											Accessing document fields and special variables Â»
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Top Videos
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:a
											Elasticsearch Demo
										Element:li
										Element:a
											Kibana 101
										Element:li
										Element:a
											Logstash Primer
									Node:
									(type) c
									(layer)3
															Node:
															(type) c
															(layer)5
																Element:h5
																	Be in the know with the latest and greatest from Elastic.
															Node:
															(type) c
															(layer)5
																Element:p
																	Thanks for subscribing! We'll keep you updated with new releases.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:footer
										Element:h3
										Element:a
											Products >
										Element:ul
										Element:li
										Element:a
											Elasticsearch
										Element:li
										Element:a
											Kibana
										Element:li
										Element:a
											Beats
										Element:li
										Element:a
											Logstash
										Element:li
										Element:a
											X-Pack
										Element:li
										Element:a
											Elastic Cloud
										Element:li
										Element:a
											Security (formerly Shield)
										Element:li
										Element:a
											Alerting (via Watcher)
										Element:li
										Element:a
											Monitoring (formerly Marvel)
										Element:li
										Element:a
											Graph
										Element:li
										Element:a
											Reporting
										Element:li
										Element:a
											Machine Learning
										Element:li
										Element:a
											ES-Hadoop
										Element:h3
											Resources
										Element:ul
										Element:li
										Element:a
											Blog
										Element:li
										Element:a
											Cloud Status
										Element:li
										Element:a
											Community
										Element:li
										Element:a
											Customers & Use Cases
										Element:li
										Element:a
											Documentation
										Element:li
										Element:a
											Elastic{ON} Events
										Element:li
										Element:a
											Forums
										Element:li
										Element:a
											Meetups
										Element:li
										Element:a
											Subscriptions
										Element:li
										Element:a
											Support Portal
										Element:li
										Element:a
											Videos & Webinars
										Element:li
										Element:a
											Training
										Element:h3
										Element:a
											About >
										Element:ul
										Element:li
										Element:a
											Careers/Jobs
										Element:li
										Element:a
											Contact
										Element:li
										Element:a
											Leadership
										Element:li
										Element:a
											Partners
										Element:li
										Element:a
											Press
										Element:h3
											Language
										Element:ul
										Element:li
										Element:a
											English
										Element:li
										Element:a
											FranÃ§ais
										Element:li
										Element:a
											Deutsch
										Element:li
										Element:a
											æ—¥æœ¬èªž
										Element:li
										Element:a
											í•œêµ­ì–´
										Element:p
											FOLLOW US
										Element:ul
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:ul
										Element:li
										Element:a
											Trademarks
										Element:li
										Element:a
											Terms of Use
										Element:li
										Element:a
											Privacy
										Element:li
										Element:a
											Cookie Policy
										Element:li
										Element:a
											Brand
										Element:a
										Element:img
										Element:p
											Â© 2017. All Rights Reserved - Elasticsearch
										Element:p
											Elasticsearch is a trademark of Elasticsearch BV, registered in the U.S. and in other countries
										Element:p
											Apache, Apache Lucene, Apache Hadoop, Hadoop, HDFS and the yellow elephant logo are trademarks of the
										Element:a
											Apache Software Foundation
											in the United States and/or other countries.
