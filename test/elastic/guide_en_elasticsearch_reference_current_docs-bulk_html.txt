Node:
(type) c
(layer)0
	Element:body
						Node:
						(type) h2
						(layer)2
							Element:h2
							Element:a
								Bulk API
							Element:a
								edit
						Node:
						(type) c
						(layer)2
							Element:p
								The bulk API makes it possible to perform many index/delete operations in a single API call. This can greatly increase the indexing speed.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:strong
								Client support for bulk requests
						Node:
						(type) c
						(layer)2
							Element:p
								Some of the officially supported clients provide helpers to assist with bulk requests and reindexing of documents from one index to another:
						Node:
						(type) c
						(layer)2
							Element:dl
							Element:dt
							Element:span
								Perl
							Element:dd
								See
							Element:a
								Search::Elasticsearch::Bulk
								and
							Element:a
								Search::Elasticsearch::Scroll
							Element:dt
							Element:span
								Python
							Element:dd
								See
							Element:a
								elasticsearch.helpers.*
						Node:
						(type) c
						(layer)2
							Element:p
								The REST API endpoint is
							Element:code
								/_bulk
								, and it expects the following JSON structure:
						Node:
						(type) c
						(layer)2
							Element:pre
								action_and_meta_data\n optional_source\n action_and_meta_data\n optional_source\n .... action_and_meta_data\n optional_source\n
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								: the final line of data must end with a newline character
							Element:strong
								NOTE
							Element:code
								\n
								.
						Node:
						(type) c
						(layer)2
							Element:p
								The possible actions are
							Element:code
								index
								,
							Element:code
								create
								,
							Element:code
								delete
								and
							Element:code
								update
								.
							Element:code
								index
								and
							Element:code
								create
								expect a source on the next line, and have the same semantics as the
							Element:code
								op_type
								parameter to the standard index API (i.e. create will fail if a document with the same index and type exists already, whereas index will add or replace a document as necessary).
							Element:code
								delete
								does not expect a source on the following line, and has the same semantics as the standard delete API.
							Element:code
								update
								expects that the partial doc, upsert and script and its options are specified on the next line.
						Node:
						(type) c
						(layer)2
							Element:p
								If you’re providing text file input to
							Element:code
								curl
								, you
							Element:span
								use the
							Element:strong
								must
							Element:code
								--data-binary
								flag instead of plain
							Element:code
								-d
								. The latter doesn’t preserve newlines. Example:
						Node:
						(type) c
						(layer)2
							Element:pre
								$ cat requests { "index" : { "_index" : "test", "_type" : "type1", "_id" : "1" } } { "field1" : "value1" } $ curl -s -XPOST localhost:9200/_bulk --data-binary "@requests"; echo {"took":7, "errors": false, "items":[{"index":{"_index":"test","_type":"type1","_id":"1","_version":1,"result":"created","forced_refresh":false}}]}
						Node:
						(type) c
						(layer)2
							Element:p
								Because this format uses literal
							Element:code
								\n
								's as delimiters, please be sure that the JSON actions and sources are not pretty printed. Here is an example of a correct sequence of bulk commands:
						Node:
						(type) c
						(layer)2
							Element:pre
								POST _bulk { "index" : { "_index" : "test", "_type" : "type1", "_id" : "1" } } { "field1" : "value1" } { "delete" : { "_index" : "test", "_type" : "type1", "_id" : "2" } } { "create" : { "_index" : "test", "_type" : "type1", "_id" : "3" } } { "field1" : "value3" } { "update" : {"_id" : "1", "_type" : "type1", "_index" : "test"} } { "doc" : {"field2" : "value2"} }
						Node:
						(type) c
						(layer)2
							Element:p
								The result of this bulk operation is:
						Node:
						(type) c
						(layer)2
							Element:pre
								{ "took": 30, "errors": false, "items": [ { "index": { "_index": "test", "_type": "type1", "_id": "1", "_version": 1, "result": "created", "_shards": { "total": 2, "successful": 1, "failed": 0 }, "created": true, "status": 201 } }, { "delete": { "found": false, "_index": "test", "_type": "type1", "_id": "2", "_version": 1, "result": "not_found", "_shards": { "total": 2, "successful": 1, "failed": 0 }, "status": 404 } }, { "create": { "_index": "test", "_type": "type1", "_id": "3", "_version": 1, "result": "created", "_shards": { "total": 2, "successful": 1, "failed": 0 }, "created": true, "status": 201 } }, { "update": { "_index": "test", "_type": "type1", "_id": "1", "_version": 2, "result": "updated", "_shards": { "total": 2, "successful": 1, "failed": 0 }, "status": 200 } } ] }
						Node:
						(type) c
						(layer)2
							Element:p
								The endpoints are
							Element:code
								/_bulk
								,
							Element:code
								/{index}/_bulk
								, and
							Element:code
								{index}/{type}/_bulk
								. When the index or the index/type are provided, they will be used by default on bulk items that don’t provide them explicitly.
						Node:
						(type) c
						(layer)2
							Element:p
								A note on the format. The idea here is to make processing of this as fast as possible. As some of the actions will be redirected to other shards on other nodes, only
							Element:code
								action_meta_data
								is parsed on the receiving node side.
						Node:
						(type) c
						(layer)2
							Element:p
								Client libraries using this protocol should try and strive to do something similar on the client side, and reduce buffering as much as possible.
						Node:
						(type) c
						(layer)2
							Element:p
								The response to a bulk action is a large JSON structure with the individual results of each action that was performed. The failure of a single action does not affect the remaining actions.
						Node:
						(type) c
						(layer)2
							Element:p
								There is no "correct" number of actions to perform in a single bulk call. You should experiment with different settings to find the optimum size for your particular workload.
						Node:
						(type) c
						(layer)2
							Element:p
								If using the HTTP API, make sure that the client does not send HTTP chunks, as this will slow things down.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Versioning
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											Each bulk item can include the version value using the
										Element:code
											_version
											/
										Element:code
											version
											field. It automatically follows the behavior of the index / delete operation based on the
										Element:code
											_version
											mapping. It also support the
										Element:code
											version_type
											/
										Element:code
											_version_type
											(see
										Element:a
											versioning
											)
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Routing
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											Each bulk item can include the routing value using the
										Element:code
											_routing
											/
										Element:code
											routing
											field. It automatically follows the behavior of the index / delete operation based on the
										Element:code
											_routing
											mapping.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Parent
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											Each bulk item can include the parent value using the
										Element:code
											_parent
											/
										Element:code
											parent
											field. It automatically follows the behavior of the index / delete operation based on the
										Element:code
											_parent
											/
										Element:code
											_routing
											mapping.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Wait For Active Shards
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											When making bulk calls, you can set the
										Element:code
											wait_for_active_shards
											parameter to require a minimum number of shard copies to be active before starting to process the bulk request. See
										Element:a
											here
											for further details and a usage example.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Refresh
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											Control when the changes made by this request are visible to search. See
										Element:a
											refresh
											.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Update
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											When using
										Element:code
											update
											action
										Element:code
											_retry_on_conflict
											can be used as field in the action itself (not in the extra payload line), to specify how many times an update should be retried in the case of a version conflict.
									Node:
									(type) c
									(layer)3
										Element:p
											The
										Element:code
											update
											action payload, supports the following options:
										Element:code
											doc
											(partial document),
										Element:code
											upsert
											,
										Element:code
											doc_as_upsert
											,
										Element:code
											script
											,
										Element:code
											params
											(for script),
										Element:code
											lang
											(for script) and
										Element:code
											_source
											. See update documentation for details on the options. Example with update actions:
									Node:
									(type) c
									(layer)3
										Element:pre
											POST _bulk { "update" : {"_id" : "1", "_type" : "type1", "_index" : "index1", "_retry_on_conflict" : 3} } { "doc" : {"field" : "value"} } { "update" : { "_id" : "0", "_type" : "type1", "_index" : "index1", "_retry_on_conflict" : 3} } { "script" : { "inline": "ctx._source.counter += params.param1", "lang" : "painless", "params" : {"param1" : 1}}, "upsert" : {"counter" : 1}} { "update" : {"_id" : "2", "_type" : "type1", "_index" : "index1", "_retry_on_conflict" : 3} } { "doc" : {"field" : "value"}, "doc_as_upsert" : true } { "update" : {"_id" : "3", "_type" : "type1", "_index" : "index1", "_source" : true} } { "doc" : {"field" : "value"} } { "update" : {"_id" : "4", "_type" : "type1", "_index" : "index1"} } { "doc" : {"field" : "value"}, "_source": true}
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Security
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											See
										Element:a
										Element:em
											URL-based access control
									Node:
									(type) c
									(layer)3
										Element:span
										Element:a
											« Multi Get API
									Node:
									(type) c
									(layer)3
										Element:span
										Element:a
											Reindex API »
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Top Videos
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:a
											Elasticsearch Demo
										Element:li
										Element:a
											Kibana 101
										Element:li
										Element:a
											Logstash Primer
									Node:
									(type) c
									(layer)3
															Node:
															(type) c
															(layer)5
																Element:h5
																	Be in the know with the latest and greatest from Elastic.
															Node:
															(type) c
															(layer)5
																Element:p
																	Thanks for subscribing! We'll keep you updated with new releases.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:footer
										Element:h3
										Element:a
											Products >
										Element:ul
										Element:li
										Element:a
											Elasticsearch
										Element:li
										Element:a
											Kibana
										Element:li
										Element:a
											Beats
										Element:li
										Element:a
											Logstash
										Element:li
										Element:a
											X-Pack
										Element:li
										Element:a
											Elastic Cloud
										Element:li
										Element:a
											Security (formerly Shield)
										Element:li
										Element:a
											Alerting (via Watcher)
										Element:li
										Element:a
											Monitoring (formerly Marvel)
										Element:li
										Element:a
											Graph
										Element:li
										Element:a
											Reporting
										Element:li
										Element:a
											Machine Learning
										Element:li
										Element:a
											ES-Hadoop
										Element:h3
											Resources
										Element:ul
										Element:li
										Element:a
											Blog
										Element:li
										Element:a
											Cloud Status
										Element:li
										Element:a
											Community
										Element:li
										Element:a
											Customers & Use Cases
										Element:li
										Element:a
											Documentation
										Element:li
										Element:a
											Elastic{ON} Events
										Element:li
										Element:a
											Forums
										Element:li
										Element:a
											Meetups
										Element:li
										Element:a
											Subscriptions
										Element:li
										Element:a
											Support Portal
										Element:li
										Element:a
											Videos & Webinars
										Element:li
										Element:a
											Training
										Element:h3
										Element:a
											About >
										Element:ul
										Element:li
										Element:a
											Careers/Jobs
										Element:li
										Element:a
											Contact
										Element:li
										Element:a
											Leadership
										Element:li
										Element:a
											Partners
										Element:li
										Element:a
											Press
										Element:h3
											Language
										Element:ul
										Element:li
										Element:a
											English
										Element:li
										Element:a
											Français
										Element:li
										Element:a
											Deutsch
										Element:li
										Element:a
											日本語
										Element:li
										Element:a
											한국어
										Element:p
											FOLLOW US
										Element:ul
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:ul
										Element:li
										Element:a
											Trademarks
										Element:li
										Element:a
											Terms of Use
										Element:li
										Element:a
											Privacy
										Element:li
										Element:a
											Cookie Policy
										Element:li
										Element:a
											Brand
										Element:a
										Element:img
										Element:p
											© 2017. All Rights Reserved - Elasticsearch
										Element:p
											Elasticsearch is a trademark of Elasticsearch BV, registered in the U.S. and in other countries
										Element:p
											Apache, Apache Lucene, Apache Hadoop, Hadoop, HDFS and the yellow elephant logo are trademarks of the
										Element:a
											Apache Software Foundation
											in the United States and/or other countries.
