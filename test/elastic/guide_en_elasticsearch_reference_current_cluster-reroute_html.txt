Node:
(type) c
(layer)0
	Element:body
						Node:
						(type) h2
						(layer)2
							Element:h2
							Element:a
								Cluster Reroute
							Element:a
								edit
						Node:
						(type) c
						(layer)2
							Element:p
								The reroute command allows to explicitly execute a cluster reroute allocation command including specific commands. For example, a shard can be moved from one node to another explicitly, an allocation can be canceled, or an unassigned shard can be explicitly allocated on a specific node.
						Node:
						(type) c
						(layer)2
							Element:p
								Here is a short example of how a simple reroute API call:
						Node:
						(type) c
						(layer)2
							Element:pre
								curl -XPOST 'localhost:9200/_cluster/reroute' -d '{ "commands" : [ { "move" : { "index" : "test", "shard" : 0, "from_node" : "node1", "to_node" : "node2" } }, { "allocate_replica" : { "index" : "test", "shard" : 1, "node" : "node3" } } ] }'
						Node:
						(type) c
						(layer)2
							Element:p
								An important aspect to remember is the fact that once when an allocation occurs, the cluster will aim at re-balancing its state back to an even state. For example, if the allocation includes moving a shard from
							Element:code
								node1
								to
							Element:code
								node2
								, in an
							Element:code
								even
								state, then another shard will be moved from
							Element:code
								node2
								to
							Element:code
								node1
								to even things out.
						Node:
						(type) c
						(layer)2
							Element:p
								The cluster can be set to disable allocations, which means that only the explicitly allocations will be performed. Obviously, only once all commands has been applied, the cluster will aim to be re-balance its state.
						Node:
						(type) c
						(layer)2
							Element:p
								Another option is to run the commands in
							Element:code
								dry_run
								(as a URI flag, or in the request body). This will cause the commands to apply to the current cluster state, and return the resulting cluster after the commands (and re-balancing) has been applied.
						Node:
						(type) c
						(layer)2
							Element:p
								If the
							Element:code
								explain
								parameter is specified, a detailed explanation of why the commands could or could not be executed is returned.
						Node:
						(type) c
						(layer)2
							Element:p
								The commands supported are:
						Node:
						(type) c
						(layer)2
							Element:dl
							Element:dt
							Element:span
							Element:code
								move
							Element:dd
								Move a started shard from one node to another node. Accepts
							Element:code
								index
								and
							Element:code
								shard
								for index name and shard number,
							Element:code
								from_node
								for the node to move the shard
							Element:code
								from
								, and
							Element:code
								to_node
								for the node to move the shard to.
							Element:dt
							Element:span
							Element:code
								cancel
							Element:dd
								Cancel allocation of a shard (or recovery). Accepts
							Element:code
								index
								and
							Element:code
								shard
								for index name and shard number, and
							Element:code
								node
								for the node to cancel the shard allocation on. It also accepts
							Element:code
								allow_primary
								flag to explicitly specify that it is allowed to cancel allocation for a primary shard. This can be used to force resynchronization of existing replicas from the primary shard by cancelling them and allowing them to be reinitialized through the standard reallocation process.
							Element:dt
							Element:span
							Element:code
								allocate_replica
							Element:dd
								Allocate an unassigned replica shard to a node. Accepts the
							Element:code
								index
								and
							Element:code
								shard
								for index name and shard number, and
							Element:code
								node
								to allocate the shard to. Takes
							Element:a
								allocation deciders
								into account.
						Node:
						(type) c
						(layer)2
							Element:p
								Two more commands are available that allow the allocation of a primary shard to a node. These commands should however be used with extreme care, as primary shard allocation is usually fully automatically handled by Elasticsearch. Reasons why a primary shard cannot be automatically allocated include the following:
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
								A new index was created but there is no node which satisfies the allocation deciders.
							Element:li
								An up-to-date shard copy of the data cannot be found on the current data nodes in the cluster. To prevent data loss, the system does not automatically promote a stale shard copy to primary.
						Node:
						(type) c
						(layer)2
							Element:p
								As a manual override, two commands to forcefully allocate primary shards are available:
						Node:
						(type) c
						(layer)2
							Element:dl
							Element:dt
							Element:span
							Element:code
								allocate_stale_primary
							Element:dd
								Allocate a primary shard to a node that holds a stale copy. Accepts the
							Element:code
								index
								and
							Element:code
								shard
								for index name and shard number, and
							Element:code
								node
								to allocate the shard to. Using this command may lead to data loss for the provided shard id. If a node which has the good copy of the data rejoins the cluster later on, that data will be overwritten with the data of the stale copy that was forcefully allocated with this command. To ensure that these implications are well-understood, this command requires the special field
							Element:code
								accept_data_loss
								to be explicitly set to
							Element:code
								true
								for it to work.
							Element:dt
							Element:span
							Element:code
								allocate_empty_primary
							Element:dd
								Allocate an empty primary shard to a node. Accepts the
							Element:code
								index
								and
							Element:code
								shard
								for index name and shard number, and
							Element:code
								node
								to allocate the shard to. Using this command leads to a complete loss of all data that was indexed into this shard, if it was previously started. If a node which has a copy of the data rejoins the cluster later on, that data will be deleted! To ensure that these implications are well-understood, this command requires the special field
							Element:code
								accept_data_loss
								to be explicitly set to
							Element:code
								true
								for it to work.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Retry failed shards
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											The cluster will attempt to allocate a shard a maximum of
										Element:code
											index.allocation.max_retries
											times in a row (defaults to
										Element:code
											5
											), before giving up and leaving the shard unallocated. This scenario can be caused by structural problems such as having an analyzer which refers to a stopwords file which doesn’t exist on all nodes.
									Node:
									(type) c
									(layer)3
										Element:p
											Once the problem has been corrected, allocation can be manually retried by calling the
										Element:a
											API with
										Element:code
											_reroute
										Element:code
											?retry_failed
											, which will attempt a single retry round for these shards.
									Node:
									(type) c
									(layer)3
										Element:span
										Element:a
											« Pending cluster tasks
									Node:
									(type) c
									(layer)3
										Element:span
										Element:a
											Cluster Update Settings »
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Top Videos
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:a
											Elasticsearch Demo
										Element:li
										Element:a
											Kibana 101
										Element:li
										Element:a
											Logstash Primer
									Node:
									(type) c
									(layer)3
															Node:
															(type) c
															(layer)5
																Element:h5
																	Be in the know with the latest and greatest from Elastic.
															Node:
															(type) c
															(layer)5
																Element:p
																	Thanks for subscribing! We'll keep you updated with new releases.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:footer
										Element:h3
										Element:a
											Products >
										Element:ul
										Element:li
										Element:a
											Elasticsearch
										Element:li
										Element:a
											Kibana
										Element:li
										Element:a
											Beats
										Element:li
										Element:a
											Logstash
										Element:li
										Element:a
											X-Pack
										Element:li
										Element:a
											Elastic Cloud
										Element:li
										Element:a
											Security (formerly Shield)
										Element:li
										Element:a
											Alerting (via Watcher)
										Element:li
										Element:a
											Monitoring (formerly Marvel)
										Element:li
										Element:a
											Graph
										Element:li
										Element:a
											Reporting
										Element:li
										Element:a
											Machine Learning
										Element:li
										Element:a
											ES-Hadoop
										Element:h3
											Resources
										Element:ul
										Element:li
										Element:a
											Blog
										Element:li
										Element:a
											Cloud Status
										Element:li
										Element:a
											Community
										Element:li
										Element:a
											Customers & Use Cases
										Element:li
										Element:a
											Documentation
										Element:li
										Element:a
											Elastic{ON} Events
										Element:li
										Element:a
											Forums
										Element:li
										Element:a
											Meetups
										Element:li
										Element:a
											Subscriptions
										Element:li
										Element:a
											Support Portal
										Element:li
										Element:a
											Videos & Webinars
										Element:li
										Element:a
											Training
										Element:h3
										Element:a
											About >
										Element:ul
										Element:li
										Element:a
											Careers/Jobs
										Element:li
										Element:a
											Contact
										Element:li
										Element:a
											Leadership
										Element:li
										Element:a
											Partners
										Element:li
										Element:a
											Press
										Element:h3
											Language
										Element:ul
										Element:li
										Element:a
											English
										Element:li
										Element:a
											Français
										Element:li
										Element:a
											Deutsch
										Element:li
										Element:a
											日本語
										Element:li
										Element:a
											한국어
										Element:p
											FOLLOW US
										Element:ul
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:ul
										Element:li
										Element:a
											Trademarks
										Element:li
										Element:a
											Terms of Use
										Element:li
										Element:a
											Privacy
										Element:li
										Element:a
											Cookie Policy
										Element:li
										Element:a
											Brand
										Element:a
										Element:img
										Element:p
											© 2017. All Rights Reserved - Elasticsearch
										Element:p
											Elasticsearch is a trademark of Elasticsearch BV, registered in the U.S. and in other countries
										Element:p
											Apache, Apache Lucene, Apache Hadoop, Hadoop, HDFS and the yellow elephant logo are trademarks of the
										Element:a
											Apache Software Foundation
											in the United States and/or other countries.
