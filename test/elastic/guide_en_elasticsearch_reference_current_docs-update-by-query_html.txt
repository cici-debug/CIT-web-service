Node:
(type) c
(layer)0
	Element:body
						Node:
						(type) h2
						(layer)2
							Element:h2
							Element:a
								Update By Query API
							Element:a
								edit
						Node:
						(type) c
						(layer)2
							Element:img
								The update-by-query API is new and should still be considered experimental. The API may change in ways that are not backwards compatible
						Node:
						(type) c
						(layer)2
							Element:p
								The simplest usage of
							Element:code
								_update_by_query
								just performs an update on every document in the index without changing the source. This is useful to
							Element:a
								pick up a new property
								or some other online mapping change. Here is the API:
						Node:
						(type) c
						(layer)2
							Element:pre
								POST twitter/_update_by_query?conflicts=proceed
						Node:
						(type) c
						(layer)2
							Element:p
								That will return something like this:
						Node:
						(type) c
						(layer)2
							Element:pre
								{ "took" : 147, "timed_out": false, "updated": 120, "deleted": 0, "batches": 1, "version_conflicts": 0, "noops": 0, "retries": { "bulk": 0, "search": 0 }, "throttled_millis": 0, "requests_per_second": -1.0, "throttled_until_millis": 0, "total": 120, "failures" : [ ] }
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								_update_by_query
								gets a snapshot of the index when it starts and indexes what it finds using
							Element:code
								internal
								versioning. That means that you’ll get a version conflict if the document changes between the time when the snapshot was taken and when the index request is processed. When the versions match the document is updated and the version number is incremented.
						Node:
						(type) c
						(layer)2
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
								Since
							Element:code
								internal
								versioning does not support the value 0 as a valid version number, documents with version equal to zero cannot be updated using
							Element:code
								_update_by_query
								and will fail the request.
						Node:
						(type) c
						(layer)2
							Element:p
								All update and query failures cause the
							Element:code
								_update_by_query
								to abort and are returned in the
							Element:code
								failures
								of the response. The updates that have been performed still stick. In other words, the process is not rolled back, only aborted. While the first failure causes the abort, all failures that are returned by the failing bulk request are returned in the
							Element:code
								failures
								element; therefore it’s possible for there to be quite a few failed entities.
						Node:
						(type) c
						(layer)2
							Element:p
								If you want to simply count version conflicts not cause the
							Element:code
								_update_by_query
								to abort you can set
							Element:code
								conflicts=proceed
								on the url or
							Element:code
								"conflicts": "proceed"
								in the request body. The first example does this because it is just trying to pick up an online mapping change and a version conflict simply means that the conflicting document was updated between the start of the
							Element:code
								_update_by_query
								and the time when it attempted to update the document. This is fine because that update will have picked up the online mapping update.
						Node:
						(type) c
						(layer)2
							Element:p
								Back to the API format, you can limit
							Element:code
								_update_by_query
								to a single type. This will only update
							Element:code
								tweet
								documents from the
							Element:code
								twitter
								index:
						Node:
						(type) c
						(layer)2
							Element:pre
								POST twitter/tweet/_update_by_query?conflicts=proceed
						Node:
						(type) c
						(layer)2
							Element:p
								You can also limit
							Element:code
								_update_by_query
								using the
							Element:a
								Query DSL
								. This will update all documents from the
							Element:code
								twitter
								index for the user
							Element:code
								kimchy
								:
						Node:
						(type) c
						(layer)2
							Element:pre
								POST twitter/_update_by_query?conflicts=proceed { "query": {
							Element:a
							Element:span
								"term": { "user": "kimchy" } } }
							Element:img
						Node:
						(type) c
						(layer)2
							Element:table
							Element:tr
							Element:td
							Element:p
							Element:a
							Element:span
							Element:img
							Element:td
							Element:p
								The query must be passed as a value to the
							Element:code
								query
								key, in the same way as the
							Element:a
								Search API
								. You can also use the
							Element:code
								q
								parameter in the same way as the search api.
						Node:
						(type) c
						(layer)2
							Element:p
								So far we’ve only been updating documents without changing their source. That is genuinely useful for things like
							Element:a
								picking up new properties
								but it’s only half the fun.
							Element:code
								_update_by_query
								supports a
							Element:code
								script
								object to update the document. This will increment the
							Element:code
								likes
								field on all of kimchy’s tweets:
						Node:
						(type) c
						(layer)2
							Element:pre
								POST twitter/_update_by_query { "script": { "inline": "ctx._source.likes++", "lang": "painless" }, "query": { "term": { "user": "kimchy" } } }
						Node:
						(type) c
						(layer)2
							Element:p
								Just as in
							Element:a
								Update API
								you can set
							Element:code
								ctx.op
								to change the operation that is executed:
						Node:
						(type) c
						(layer)2
							Element:dl
							Element:dt
							Element:span
							Element:code
								noop
							Element:dd
								Set
							Element:code
								ctx.op = "noop"
								if your script decides that it doesn’t have to make any changes. That will cause
							Element:code
								_update_by_query
								to omit that document from its updates. This no operation will be reported in the
							Element:code
								noop
								counter in the
							Element:a
								response body
								.
							Element:dt
							Element:span
							Element:code
								delete
							Element:dd
								Set
							Element:code
								ctx.op = "delete"
								if your script decides that the document must be deleted. The deletion will be reported in the
							Element:code
								deleted
								counter in the
							Element:a
								response body
								.
						Node:
						(type) c
						(layer)2
							Element:p
								Setting
							Element:code
								ctx.op
								to anything else is an error. Setting any other field in
							Element:code
								ctx
								is an error.
						Node:
						(type) c
						(layer)2
							Element:p
								Note that we stopped specifying
							Element:code
								conflicts=proceed
								. In this case we want a version conflict to abort the process so we can handle the failure.
						Node:
						(type) c
						(layer)2
							Element:p
								This API doesn’t allow you to move the documents it touches, just modify their source. This is intentional! We’ve made no provisions for removing the document from its original location.
						Node:
						(type) c
						(layer)2
							Element:p
								It’s also possible to do this whole thing on multiple indexes and multiple types at once, just like the search API:
						Node:
						(type) c
						(layer)2
							Element:pre
								POST twitter,blog/tweet,post/_update_by_query
						Node:
						(type) c
						(layer)2
							Element:p
								If you provide
							Element:code
								routing
								then the routing is copied to the scroll query, limiting the process to the shards that match that routing value:
						Node:
						(type) c
						(layer)2
							Element:pre
								POST twitter/_update_by_query?routing=1
						Node:
						(type) c
						(layer)2
							Element:p
								By default
							Element:code
								_update_by_query
								uses scroll batches of 1000. You can change the batch size with the
							Element:code
								scroll_size
								URL parameter:
						Node:
						(type) c
						(layer)2
							Element:pre
								POST twitter/_update_by_query?scroll_size=100
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								_update_by_query
								can also use the
							Element:a
								Ingest Node
								feature by specifying a
							Element:code
								pipeline
								like this:
						Node:
						(type) c
						(layer)2
							Element:pre
								PUT _ingest/pipeline/set-foo { "description" : "sets foo", "processors" : [ { "set" : { "field": "foo", "value": "bar" } } ] } POST twitter/_update_by_query?pipeline=set-foo
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											URL Parameters
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											In addition to the standard parameters like
										Element:code
											pretty
											, the Update By Query API also supports
										Element:code
											refresh
											,
										Element:code
											wait_for_completion
											,
										Element:code
											wait_for_active_shards
											, and
										Element:code
											timeout
											.
									Node:
									(type) c
									(layer)3
										Element:p
											Sending the
										Element:code
											refresh
											will update all shards in the index being updated when the request completes. This is different than the Index API’s
										Element:code
											refresh
											parameter which causes just the shard that received the new data to be indexed.
									Node:
									(type) c
									(layer)3
										Element:p
											If the request contains
										Element:code
											wait_for_completion=false
											then Elasticsearch will perform some preflight checks, launch the request, and then return a
										Element:code
											task
											which can be used with
										Element:a
											Tasks APIs
											to cancel or get the status of the task. Elasticsearch will also create a record of this task as a document at
										Element:code
											.tasks/task/${taskId}
											. This is yours to keep or remove as you see fit. When you are done with it, delete it so Elasticsearch can reclaim the space it uses.
									Node:
									(type) c
									(layer)3
										Element:p
										Element:code
											wait_for_active_shards
											controls how many copies of a shard must be active before proceeding with the request. See
										Element:a
											here
											for details.
										Element:code
											timeout
											controls how long each write request waits for unavailable shards to become available. Both work exactly how they work in the
										Element:a
											Bulk API
											.
									Node:
									(type) c
									(layer)3
										Element:p
										Element:code
											requests_per_second
											can be set to any positive decimal number (
										Element:code
											1.4
											,
										Element:code
											6
											,
										Element:code
											1000
											, etc) and throttles the number of requests per second that the update-by-query issues or it can be set to
										Element:code
											-1
											to disabled throttling. The throttling is done waiting between bulk batches so that it can manipulate the scroll timeout. The wait time is the difference between the time it took the batch to complete and the time
										Element:code
											requests_per_second * requests_in_the_batch
											. Since the batch isn’t broken into multiple bulk requests large batch sizes will cause Elasticsearch to create many requests and then wait for a while before starting the next set. This is "bursty" instead of "smooth". The default is
										Element:code
											-1
											.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Response body
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											The JSON response looks like this:
									Node:
									(type) c
									(layer)3
										Element:pre
											{ "took" : 639, "updated": 0, "batches": 1, "version_conflicts": 2, "retries": { "bulk": 0, "search": 0 } "throttled_millis": 0, "failures" : [ ] }
									Node:
									(type) c
									(layer)3
										Element:dl
										Element:dt
										Element:span
										Element:code
											took
										Element:dd
											The number of milliseconds from start to end of the whole operation.
										Element:dt
										Element:span
										Element:code
											updated
										Element:dd
											The number of documents that were successfully updated.
										Element:dt
										Element:span
										Element:code
											batches
										Element:dd
											The number of scroll responses pulled back by the the update by query.
										Element:dt
										Element:span
										Element:code
											version_conflicts
										Element:dd
											The number of version conflicts that the update by query hit.
										Element:dt
										Element:span
										Element:code
											retries
										Element:dd
											The number of retries attempted by update-by-query.
										Element:code
											bulk
											is the number of bulk actions retried and
										Element:code
											search
											is the number of search actions retried.
										Element:dt
										Element:span
										Element:code
											throttled_millis
										Element:dd
											Number of milliseconds the request slept to conform to
										Element:code
											requests_per_second
											.
										Element:dt
										Element:span
										Element:code
											failures
										Element:dd
											Array of all indexing failures. If this is non-empty then the request aborted because of those failures. See
										Element:code
											conflicts
											for how to prevent version conflicts from aborting the operation.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Works with the Task API
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											You can fetch the status of all running update-by-query requests with the
										Element:a
											Task API
											:
									Node:
									(type) c
									(layer)3
										Element:pre
											GET _tasks?detailed=true&actions=*byquery
									Node:
									(type) c
									(layer)3
										Element:p
											The responses looks like:
									Node:
									(type) c
									(layer)3
										Element:pre
											{ "nodes" : { "r1A2WoRbTwKZ516z6NEs5A" : { "name" : "r1A2WoR", "transport_address" : "127.0.0.1:9300", "host" : "127.0.0.1", "ip" : "127.0.0.1:9300", "attributes" : { "testattr" : "test", "portsfile" : "true" }, "tasks" : { "r1A2WoRbTwKZ516z6NEs5A:36619" : { "node" : "r1A2WoRbTwKZ516z6NEs5A", "id" : 36619, "type" : "transport", "action" : "indices:data/write/update/byquery", "status" : {
										Element:a
										Element:span
											"total" : 6154, "updated" : 3500, "created" : 0, "deleted" : 0, "batches" : 4, "version_conflicts" : 0, "noops" : 0, "retries": { "bulk": 0, "search": 0 } "throttled_millis": 0 }, "description" : "" } } } } }
										Element:img
									Node:
									(type) c
									(layer)3
										Element:table
										Element:tr
										Element:td
										Element:p
										Element:a
										Element:span
										Element:img
										Element:td
										Element:p
											this object contains the actual status. It is just like the response json with the important addition of the
										Element:code
											total
											field.
										Element:code
											total
											is the total number of operations that the reindex expects to perform. You can estimate the progress by adding the
										Element:code
											updated
											,
										Element:code
											created
											, and
										Element:code
											deleted
											fields. The request will finish when their sum is equal to the
										Element:code
											total
											field.
									Node:
									(type) c
									(layer)3
										Element:p
											With the task id you can look up the task directly:
									Node:
									(type) c
									(layer)3
										Element:pre
											GET /_tasks/taskId:1
									Node:
									(type) c
									(layer)3
										Element:p
											The advantage of this API is that it integrates with
										Element:code
											wait_for_completion=false
											to transparently return the status of completed tasks. If the task is completed and
										Element:code
											wait_for_completion=false
											was set on it them it’ll come back with a
										Element:code
											results
											or an
										Element:code
											error
											field. The cost of this feature is the document that
										Element:code
											wait_for_completion=false
											creates at
										Element:code
											.tasks/task/${taskId}
											. It is up to you to delete that document.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Works with the Cancel Task API
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											Any Update By Query can be canceled using the
										Element:a
											Task Cancel API
											:
									Node:
									(type) c
									(layer)3
										Element:pre
											POST _tasks/task_id:1/_cancel
									Node:
									(type) c
									(layer)3
										Element:p
											The
										Element:code
											task_id
											can be found using the tasks API above.
									Node:
									(type) c
									(layer)3
										Element:p
											Cancellation should happen quickly but might take a few seconds. The task status API above will continue to list the task until it is wakes to cancel itself.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Rethrottling
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											The value of
										Element:code
											requests_per_second
											can be changed on a running update by query using the
										Element:code
											_rethrottle
											API:
									Node:
									(type) c
									(layer)3
										Element:pre
											POST _update_by_query/task_id:1/_rethrottle?requests_per_second=-1
									Node:
									(type) c
									(layer)3
										Element:p
											The
										Element:code
											task_id
											can be found using the tasks API above.
									Node:
									(type) c
									(layer)3
										Element:p
											Just like when setting it on the
										Element:code
											_update_by_query
											API
										Element:code
											requests_per_second
											can be either
										Element:code
											-1
											to disable throttling or any decimal number like
										Element:code
											1.7
											or
										Element:code
											12
											to throttle to that level. Rethrottling that speeds up the query takes effect immediately but rethrotting that slows down the query will take effect on after completing the current batch. This prevents scroll timeouts.
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:a
														Manual slicing
													Element:a
														edit
												Node:
												(type) c
												(layer)4
													Element:p
														Update-by-query supports
													Element:a
														Sliced Scroll
														allowing you to manually parallelize the process relatively easily:
												Node:
												(type) c
												(layer)4
													Element:pre
														POST twitter/_update_by_query { "slice": { "id": 0, "max": 2 }, "script": { "inline": "ctx._source['extra'] = 'test'" } } POST twitter/_update_by_query { "slice": { "id": 1, "max": 2 }, "script": { "inline": "ctx._source['extra'] = 'test'" } }
												Node:
												(type) c
												(layer)4
													Element:p
														Which you can verify works with:
												Node:
												(type) c
												(layer)4
													Element:pre
														GET _refresh POST twitter/_search?size=0&q=extra:test&filter_path=hits.total
												Node:
												(type) c
												(layer)4
													Element:p
														Which results in a sensible
													Element:code
														total
														like this one:
												Node:
												(type) c
												(layer)4
													Element:pre
														{ "hits": { "total": 120 } }
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Automatic slicing
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											You can also let update-by-query automatically parallelize using
										Element:a
											Sliced Scroll
											to slice on
										Element:code
											_uid
											:
									Node:
									(type) c
									(layer)3
										Element:pre
											POST twitter/_update_by_query?refresh&slices=5 { "script": { "inline": "ctx._source['extra'] = 'test'" } }
									Node:
									(type) c
									(layer)3
										Element:p
											Which you also can verify works with:
									Node:
									(type) c
									(layer)3
										Element:pre
											POST twitter/_search?size=0&q=extra:test&filter_path=hits.total
									Node:
									(type) c
									(layer)3
										Element:p
											Which results in a sensible
										Element:code
											total
											like this one:
									Node:
									(type) c
									(layer)3
										Element:pre
											{ "hits": { "total": 120 } }
									Node:
									(type) c
									(layer)3
										Element:p
											Adding
										Element:code
											slices
											to
										Element:code
											_update_by_query
											just automates the manual process used in the section above, creating sub-requests which means it has some quirks:
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
											You can see these requests in the
										Element:a
											Tasks APIs
											. These sub-requests are "child" tasks of the task for the request with
										Element:code
											slices
											.
										Element:li
											Fetching the status of the task for the request with
										Element:code
											slices
											only contains the status of completed slices.
										Element:li
											These sub-requests are individually addressable for things like cancellation and rethrottling.
										Element:li
											Rethrottling the request with
										Element:code
											slices
											will rethrottle the unfinished sub-request proportionally.
										Element:li
											Canceling the request with
										Element:code
											slices
											will cancel each sub-request.
										Element:li
											Due to the nature of
										Element:code
											slices
											each sub-request won’t get a perfectly even portion of the documents. All documents will be addressed, but some slices may be larger than others. Expect larger slices to have a more even distribution.
										Element:li
											Parameters like
										Element:code
											requests_per_second
											and
										Element:code
											size
											on a request with
										Element:code
											slices
											are distributed proportionally to each sub-request. Combine that with the point above about distribution being uneven and you should conclude that the using
										Element:code
											size
											with
										Element:code
											slices
											might not result in exactly
										Element:code
											size
											documents being `_update_by_query`ed.
										Element:li
											Each sub-requests gets a slightly different snapshot of the source index though these are all taken at approximately the same time.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Picking the number of slices
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											At this point we have a few recommendations around the number of
										Element:code
											slices
											to use (the
										Element:code
											max
											parameter in the slice API if manually parallelizing):
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
											Don’t use large numbers.
										Element:code
											500
											creates fairly massive CPU thrash.
										Element:li
											It is more efficient from a query performance standpoint to use some multiple of the number of shards in the source index.
										Element:li
											Using exactly as many shards as are in the source index is the most efficient from a query performance standpoint.
										Element:li
											Indexing performance should scale linearly across available resources with the number of
										Element:code
											slices
											.
										Element:li
											Whether indexing or query performance dominates that process depends on lots of factors like the documents being reindexed and the cluster doing the reindexing.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Pick up a new property
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											Say you created an index without dynamic mapping, filled it with data, and then added a mapping value to pick up more fields from the data:
									Node:
									(type) c
									(layer)3
										Element:pre
											PUT test { "mappings": { "test": { "dynamic": false,
										Element:a
										Element:span
											"properties": { "text": {"type": "text"} } } } } POST test/test?refresh { "text": "words words", "flag": "bar" } POST test/test?refresh { "text": "words words", "flag": "foo" } PUT test/_mapping/test
										Element:img
										Element:a
										Element:span
											{ "properties": { "text": {"type": "text"}, "flag": {"type": "text", "analyzer": "keyword"} } }
										Element:img
									Node:
									(type) c
									(layer)3
										Element:table
										Element:tr
										Element:td
										Element:p
										Element:a
										Element:span
										Element:img
										Element:td
										Element:p
											This means that new fields won’t be indexed, just stored in
										Element:code
											_source
											.
										Element:tr
										Element:td
										Element:p
										Element:a
										Element:span
										Element:img
										Element:td
										Element:p
											This updates the mapping to add the new
										Element:code
											flag
											field. To pick up the new field you have to reindex all documents with it.
									Node:
									(type) c
									(layer)3
										Element:p
											Searching for the data won’t find anything:
									Node:
									(type) c
									(layer)3
										Element:pre
											POST test/_search?filter_path=hits.total { "query": { "match": { "flag": "foo" } } }
									Node:
									(type) c
									(layer)3
										Element:pre
											{ "hits" : { "total" : 0 } }
									Node:
									(type) c
									(layer)3
										Element:p
											But you can issue an
										Element:code
											_update_by_query
											request to pick up the new mapping:
									Node:
									(type) c
									(layer)3
										Element:pre
											POST test/_update_by_query?refresh&conflicts=proceed POST test/_search?filter_path=hits.total { "query": { "match": { "flag": "foo" } } }
									Node:
									(type) c
									(layer)3
										Element:pre
											{ "hits" : { "total" : 1 } }
									Node:
									(type) c
									(layer)3
										Element:p
											You can do the exact same thing when adding a field to a multifield.
									Node:
									(type) c
									(layer)3
										Element:span
										Element:a
											« Update API
									Node:
									(type) c
									(layer)3
										Element:span
										Element:a
											Multi Get API »
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Top Videos
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:a
											Elasticsearch Demo
										Element:li
										Element:a
											Kibana 101
										Element:li
										Element:a
											Logstash Primer
									Node:
									(type) c
									(layer)3
															Node:
															(type) c
															(layer)5
																Element:h5
																	Be in the know with the latest and greatest from Elastic.
															Node:
															(type) c
															(layer)5
																Element:p
																	Thanks for subscribing! We'll keep you updated with new releases.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:footer
										Element:h3
										Element:a
											Products >
										Element:ul
										Element:li
										Element:a
											Elasticsearch
										Element:li
										Element:a
											Kibana
										Element:li
										Element:a
											Beats
										Element:li
										Element:a
											Logstash
										Element:li
										Element:a
											X-Pack
										Element:li
										Element:a
											Elastic Cloud
										Element:li
										Element:a
											Security (formerly Shield)
										Element:li
										Element:a
											Alerting (via Watcher)
										Element:li
										Element:a
											Monitoring (formerly Marvel)
										Element:li
										Element:a
											Graph
										Element:li
										Element:a
											Reporting
										Element:li
										Element:a
											Machine Learning
										Element:li
										Element:a
											ES-Hadoop
										Element:h3
											Resources
										Element:ul
										Element:li
										Element:a
											Blog
										Element:li
										Element:a
											Cloud Status
										Element:li
										Element:a
											Community
										Element:li
										Element:a
											Customers & Use Cases
										Element:li
										Element:a
											Documentation
										Element:li
										Element:a
											Elastic{ON} Events
										Element:li
										Element:a
											Forums
										Element:li
										Element:a
											Meetups
										Element:li
										Element:a
											Subscriptions
										Element:li
										Element:a
											Support Portal
										Element:li
										Element:a
											Videos & Webinars
										Element:li
										Element:a
											Training
										Element:h3
										Element:a
											About >
										Element:ul
										Element:li
										Element:a
											Careers/Jobs
										Element:li
										Element:a
											Contact
										Element:li
										Element:a
											Leadership
										Element:li
										Element:a
											Partners
										Element:li
										Element:a
											Press
										Element:h3
											Language
										Element:ul
										Element:li
										Element:a
											English
										Element:li
										Element:a
											Français
										Element:li
										Element:a
											Deutsch
										Element:li
										Element:a
											日本語
										Element:li
										Element:a
											한국어
										Element:p
											FOLLOW US
										Element:ul
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:ul
										Element:li
										Element:a
											Trademarks
										Element:li
										Element:a
											Terms of Use
										Element:li
										Element:a
											Privacy
										Element:li
										Element:a
											Cookie Policy
										Element:li
										Element:a
											Brand
										Element:a
										Element:img
										Element:p
											© 2017. All Rights Reserved - Elasticsearch
										Element:p
											Elasticsearch is a trademark of Elasticsearch BV, registered in the U.S. and in other countries
										Element:p
											Apache, Apache Lucene, Apache Hadoop, Hadoop, HDFS and the yellow elephant logo are trademarks of the
										Element:a
											Apache Software Foundation
											in the United States and/or other countries.
