Node:
(type) c
(layer)0
	Element:body
						Node:
						(type) h2
						(layer)2
							Element:h2
							Element:a
								Put Mapping
							Element:a
								edit
						Node:
						(type) c
						(layer)2
							Element:p
								The PUT mapping API allows you to add a new type to an existing index, or add new fields to an existing type:
						Node:
						(type) c
						(layer)2
							Element:pre
								PUT twitter
							Element:a
							Element:span
								{ "mappings": { "tweet": { "properties": { "message": { "type": "text" } } } } } PUT twitter/_mapping/user
							Element:img
							Element:a
							Element:span
								{ "properties": { "name": { "type": "text" } } } PUT twitter/_mapping/tweet
							Element:img
							Element:a
							Element:span
								{ "properties": { "user_name": { "type": "text" } } }
							Element:img
						Node:
						(type) c
						(layer)2
							Element:table
							Element:tr
							Element:td
							Element:p
							Element:a
							Element:span
							Element:img
							Element:td
							Element:p
							Element:a
								Creates an index
								called
							Element:code
								twitter
								with the
							Element:code
								message
								field in the
							Element:code
								tweet
							Element:a
								mapping type
								.
							Element:tr
							Element:td
							Element:p
							Element:a
							Element:span
							Element:img
							Element:td
							Element:p
								Uses the PUT mapping API to add a new mapping type called
							Element:code
								user
								.
							Element:tr
							Element:td
							Element:p
							Element:a
							Element:span
							Element:img
							Element:td
							Element:p
								Uses the PUT mapping API to add a new field called
							Element:code
								user_name
								to the
							Element:code
								tweet
								mapping type.
						Node:
						(type) c
						(layer)2
							Element:p
								More information on how to define type mappings can be found in the
							Element:a
								mapping
								section.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Multi-index
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											The PUT mapping API can be applied to multiple indices with a single request. It has the following format:
									Node:
									(type) c
									(layer)3
										Element:pre
											PUT /{index}/_mapping/{type} { body }
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:code
											{index}
											accepts
										Element:a
											multiple index names
											and wildcards.
										Element:li
										Element:code
											{type}
											is the name of the type to update.
										Element:li
										Element:code
											{body}
											contains the mapping changes that should be applied.
									Node:
									(type) c
									(layer)3
										Element:img
									Node:
									(type) c
									(layer)3
										Element:p
											When updating the
										Element:code
											_default_
											mapping with the
										Element:a
											PUT mapping
											API, the new mapping is not merged with the existing mapping. Instead, the new
										Element:code
											_default_
											mapping replaces the existing one.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Updating field mappings
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											In general, the mapping for existing fields cannot be updated. There are some exceptions to this rule. For instance:
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
											new
										Element:a
											can be added to
										Element:code
											properties
										Element:a
											Object datatype
											fields.
										Element:li
											new
										Element:a
											multi-fields
											can be added to existing fields.
										Element:li
										Element:a
											can be disabled, but not enabled.
										Element:code
											doc_values
										Element:li
											the
										Element:a
											parameter can be updated.
										Element:code
											ignore_above
									Node:
									(type) c
									(layer)3
										Element:p
											For example:
									Node:
									(type) c
									(layer)3
										Element:pre
											PUT my_index
										Element:a
										Element:span
											{ "mappings": { "user": { "properties": { "name": { "properties": { "first": { "type": "text" } } }, "user_id": { "type": "keyword" } } } } } PUT my_index/_mapping/user { "properties": { "name": { "properties": { "last": {
										Element:img
										Element:a
										Element:span
											"type": "text" } } }, "user_id": { "type": "keyword", "ignore_above": 100
										Element:img
										Element:a
										Element:span
											} } }
										Element:img
									Node:
									(type) c
									(layer)3
										Element:table
										Element:tr
										Element:td
										Element:p
										Element:a
										Element:span
										Element:img
										Element:td
										Element:p
											Create an index with a
										Element:code
											first
											field under the
										Element:code
											name
										Element:a
											Object datatype
											field, and a
										Element:code
											user_id
											field.
										Element:tr
										Element:td
										Element:p
										Element:a
										Element:span
										Element:img
										Element:td
										Element:p
											Add a
										Element:code
											last
											field under the
										Element:code
											name
											object field.
										Element:tr
										Element:td
										Element:p
										Element:a
										Element:span
										Element:img
										Element:td
										Element:p
											Update the
										Element:code
											ignore_above
											setting from its default of 0.
									Node:
									(type) c
									(layer)3
										Element:p
											Each
										Element:a
											mapping parameter
											specifies whether or not its setting can be updated on an existing field.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Conflicts between fields in different types
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											Fields in the same index with the same name in two different types must have the same mapping, as they are backed by the same field internally. Trying to
										Element:a
											update a mapping parameter
											for a field which exists in more than one type will throw an exception, unless you specify the
										Element:code
											update_all_types
											parameter, in which case it will update that parameter across all fields with the same name in the same index.
									Node:
									(type) c
									(layer)3
										Element:img
									Node:
									(type) c
									(layer)3
										Element:p
											The only parameters which are exempt from this rule — they can be set to different values on each field — can be found in
										Element:a
											the section called “Fields are shared across mapping types
										Element:a
											edit
											”.
									Node:
									(type) c
									(layer)3
										Element:p
											For example, this fails:
									Node:
									(type) c
									(layer)3
										Element:pre
											PUT my_index { "mappings": { "type_one": { "properties": { "text": {
										Element:a
										Element:span
											"type": "text", "analyzer": "standard" } } }, "type_two": { "properties": { "text": {
										Element:img
										Element:a
										Element:span
											"type": "text", "analyzer": "standard" } } } } } PUT my_index/_mapping/type_one
										Element:img
										Element:a
										Element:span
											{ "properties": { "text": { "type": "text", "analyzer": "standard", "search_analyzer": "whitespace" } } }
										Element:img
									Node:
									(type) c
									(layer)3
										Element:table
										Element:tr
										Element:td
										Element:p
										Element:a
										Element:span
										Element:img
										Element:a
										Element:span
										Element:img
										Element:td
										Element:p
											Create an index with two types, both of which contain a
										Element:code
											text
											field which have the same mapping.
										Element:tr
										Element:td
										Element:p
										Element:a
										Element:span
										Element:img
										Element:td
										Element:p
											Trying to update the
										Element:code
											search_analyzer
											just for
										Element:code
											type_one
											throws an exception like
										Element:code
											"Merge failed with failures..."
											.
									Node:
									(type) c
									(layer)3
										Element:p
											But this then running this succeeds:
									Node:
									(type) c
									(layer)3
										Element:pre
											PUT my_index/_mapping/type_one?update_all_types
										Element:a
										Element:span
											{ "properties": { "text": { "type": "text", "analyzer": "standard", "search_analyzer": "whitespace" } } }
										Element:img
									Node:
									(type) c
									(layer)3
										Element:table
										Element:tr
										Element:td
										Element:p
										Element:a
										Element:span
										Element:img
										Element:td
										Element:p
											Adding the
										Element:code
											update_all_types
											parameter updates the
										Element:code
											text
											field in
										Element:code
											type_one
											and
										Element:code
											type_two
											.
									Node:
									(type) c
									(layer)3
										Element:span
										Element:a
											« Rollover Index
									Node:
									(type) c
									(layer)3
										Element:span
										Element:a
											Get Mapping »
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Top Videos
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:a
											Elasticsearch Demo
										Element:li
										Element:a
											Kibana 101
										Element:li
										Element:a
											Logstash Primer
									Node:
									(type) c
									(layer)3
															Node:
															(type) c
															(layer)5
																Element:h5
																	Be in the know with the latest and greatest from Elastic.
															Node:
															(type) c
															(layer)5
																Element:p
																	Thanks for subscribing! We'll keep you updated with new releases.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:footer
										Element:h3
										Element:a
											Products >
										Element:ul
										Element:li
										Element:a
											Elasticsearch
										Element:li
										Element:a
											Kibana
										Element:li
										Element:a
											Beats
										Element:li
										Element:a
											Logstash
										Element:li
										Element:a
											X-Pack
										Element:li
										Element:a
											Elastic Cloud
										Element:li
										Element:a
											Security (formerly Shield)
										Element:li
										Element:a
											Alerting (via Watcher)
										Element:li
										Element:a
											Monitoring (formerly Marvel)
										Element:li
										Element:a
											Graph
										Element:li
										Element:a
											Reporting
										Element:li
										Element:a
											Machine Learning
										Element:li
										Element:a
											ES-Hadoop
										Element:h3
											Resources
										Element:ul
										Element:li
										Element:a
											Blog
										Element:li
										Element:a
											Cloud Status
										Element:li
										Element:a
											Community
										Element:li
										Element:a
											Customers & Use Cases
										Element:li
										Element:a
											Documentation
										Element:li
										Element:a
											Elastic{ON} Events
										Element:li
										Element:a
											Forums
										Element:li
										Element:a
											Meetups
										Element:li
										Element:a
											Subscriptions
										Element:li
										Element:a
											Support Portal
										Element:li
										Element:a
											Videos & Webinars
										Element:li
										Element:a
											Training
										Element:h3
										Element:a
											About >
										Element:ul
										Element:li
										Element:a
											Careers/Jobs
										Element:li
										Element:a
											Contact
										Element:li
										Element:a
											Leadership
										Element:li
										Element:a
											Partners
										Element:li
										Element:a
											Press
										Element:h3
											Language
										Element:ul
										Element:li
										Element:a
											English
										Element:li
										Element:a
											Français
										Element:li
										Element:a
											Deutsch
										Element:li
										Element:a
											日本語
										Element:li
										Element:a
											한국어
										Element:p
											FOLLOW US
										Element:ul
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:ul
										Element:li
										Element:a
											Trademarks
										Element:li
										Element:a
											Terms of Use
										Element:li
										Element:a
											Privacy
										Element:li
										Element:a
											Cookie Policy
										Element:li
										Element:a
											Brand
										Element:a
										Element:img
										Element:p
											© 2017. All Rights Reserved - Elasticsearch
										Element:p
											Elasticsearch is a trademark of Elasticsearch BV, registered in the U.S. and in other countries
										Element:p
											Apache, Apache Lucene, Apache Hadoop, Hadoop, HDFS and the yellow elephant logo are trademarks of the
										Element:a
											Apache Software Foundation
											in the United States and/or other countries.
