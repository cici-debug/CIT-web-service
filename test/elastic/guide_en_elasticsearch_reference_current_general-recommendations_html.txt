Node:
(type) c
(layer)0
	Element:body
						Node:
						(type) h2
						(layer)2
							Element:h2
							Element:a
								General recommendations
							Element:a
								edit
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Don’t return large result sets
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											Elasticsearch is designed as a search engine, which makes it very good at getting back the top documents that match a query. However, it is not as good for workloads that fall into the database domain, such as retrieving all documents that match a particular query. If you need to do this, make sure to use the
										Element:a
											Scroll
											API.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Avoid large documents
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											Given that the default
										Element:a
											is set to 100MB, Elasticsearch will refuse to index any document that is larger than that. You might decide to increase that particular setting, but Lucene still has a limit of about 2GB.
										Element:code
											http.max_context_length
									Node:
									(type) c
									(layer)3
										Element:p
											Even without considering hard limits, large documents are usually not practical. Large documents put more stress on network, memory usage and disk, even for search requests that do not request the
										Element:code
											_source
											since Elasticsearch needs to fetch the
										Element:code
											_id
											of the document in all cases, and the cost of getting this field is bigger for large documents due to how the filesystem cache works. Indexing this document can use an amount of memory that is a multiplier of the original size of the document. Proximity search (phrase queries for instance) and
										Element:a
											highlighting
											also become more expensive since their cost directly depends on the size of the original document.
									Node:
									(type) c
									(layer)3
										Element:p
											It is sometimes useful to reconsider what the unit of information should be. For instance, the fact you want to make books searchable doesn’t necesarily mean that a document should consist of a whole book. It might be a better idea to use chapters or even paragraphs as documents, and then have a property in these documents that identifies which book they belong to. This does not only avoid the issues with large documents, it also makes the search experience better. For instance if a user searches for two words
										Element:code
											foo
											and
										Element:code
											bar
											, a match across different chapters is probably very poor, while a match within the same paragraph is likely good.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Avoid sparsity
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											The data-structures behind Lucene, which Elasticsearch relies on in order to index and store data, work best with dense data, ie. when all documents have the same fields. This is especially true for fields that have norms enabled (which is the case for
										Element:code
											text
											fields by default) or doc values enabled (which is the case for numerics,
										Element:code
											date
											,
										Element:code
											ip
											and
										Element:code
											keyword
											by default).
									Node:
									(type) c
									(layer)3
										Element:p
											The reason is that Lucene internally identifies documents with so-called doc ids, which are integers between 0 and the total number of documents in the index. These doc ids are used for communication between the internal APIs of Lucene: for instance searching on a term with a
										Element:code
											match
											query produces an iterator of doc ids, and these doc ids are then used to retrieve the value of the
										Element:code
											norm
											in order to compute a score for these documents. The way this
										Element:code
											norm
											lookup is implemented currently is by reserving one byte for each document. The
										Element:code
											norm
											value for a given doc id can then be retrieved by reading the byte at index
										Element:code
											doc_id
											. While this is very efficient and helps Lucene quickly have access to the
										Element:code
											norm
											values of every document, this has the drawback that documents that do not have a value will also require one byte of storage.
									Node:
									(type) c
									(layer)3
										Element:p
											In practice, this means that if an index has
										Element:code
											M
											documents, norms will require
										Element:code
											M
											bytes of storage
										Element:span
											, even for fields that only appear in a small fraction of the documents of the index. Although slightly more complex with doc values due to the fact that doc values have multiple ways that they can be encoded depending on the type of field and on the actual data that the field stores, the problem is very similar. In case you wonder:
										Element:strong
											per field
										Element:code
											fielddata
											, which was used in Elasticsearch pre-2.0 before being replaced with doc values, also suffered from this issue, except that the impact was only on the memory footprint since
										Element:code
											fielddata
											was not explicitly materialized on disk.
									Node:
									(type) c
									(layer)3
										Element:p
											Note that even though the most notable impact of sparsity is on storage requirements, it also has an impact on indexing speed and search speed since these bytes for documents that do not have a field still need to be written at index time and skipped over at search time.
									Node:
									(type) c
									(layer)3
										Element:p
											It is totally fine to have a minority of sparse fields in an index. But beware that if sparsity becomes the rule rather than the exception, then the index will not be as efficient as it could be.
									Node:
									(type) c
									(layer)3
										Element:p
											This section mostly focused on
										Element:code
											norms
											and
										Element:code
											doc values
											because those are the two features that are most affected by sparsity. Sparsity also affect the efficiency of the inverted index (used to index
										Element:code
											text
											/
										Element:code
											keyword
											fields) and dimensional points (used to index
										Element:code
											geo_point
											and numerics) but to a lesser extent.
									Node:
									(type) c
									(layer)3
										Element:p
											Here are some recommendations that can help avoid sparsity:
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:a
														Avoid putting unrelated data in the same index
													Element:a
														edit
												Node:
												(type) c
												(layer)4
													Element:p
														You should avoid putting documents that have totally different structures into the same index in order to avoid sparsity. It is often better to put these documents into different indices, you could also consider giving fewer shards to these smaller indices since they will contain fewer documents overall.
												Node:
												(type) c
												(layer)4
													Element:p
														Note that this advice does not apply in the case that you need to use parent/child relations between your documents since this feature is only supported on documents that live in the same index.
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:a
														Normalize document structures
													Element:a
														edit
												Node:
												(type) c
												(layer)4
													Element:p
														Even if you really need to put different kinds of documents in the same index, maybe there are opportunities to reduce sparsity. For instance if all documents in the index have a timestamp field but some call it
													Element:code
														timestamp
														and others call it
													Element:code
														creation_date
														, it would help to rename it so that all documents have the same field name for the same data.
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:a
														Avoid types
													Element:a
														edit
												Node:
												(type) c
												(layer)4
													Element:p
														Types might sound like a good way to store multiple tenants in a single index. They are not: given that types store everything in a single index, having multiple types that have different fields in a single index will also cause problems due to sparsity as described above. If your types do not have very similar mappings, you might want to consider moving them to a dedicated index.
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:a
														Disable
													Element:code
														norms
														and
													Element:code
														doc_values
														on sparse fields
													Element:a
														edit
												Node:
												(type) c
												(layer)4
													Element:p
														If none of the above recommendations apply in your case, you might want to check whether you actually need
													Element:code
														norms
														and
													Element:code
														doc_values
														on your sparse fields.
													Element:code
														norms
														can be disabled if producing scores is not necessary on a field, this is typically true for fields that are only used for filtering.
													Element:code
														doc_values
														can be disabled on fields that are neither used for sorting nor for aggregations. Beware that this decision should not be made lightly since these parameters cannot be changed on a live index, so you would have to reindex if you realize that you need
													Element:code
														norms
														or
													Element:code
														doc_values
														.
												Node:
												(type) c
												(layer)4
													Element:span
													Element:a
														« How To
												Node:
												(type) c
												(layer)4
													Element:span
													Element:a
														Recipes »
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Top Videos
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:a
											Elasticsearch Demo
										Element:li
										Element:a
											Kibana 101
										Element:li
										Element:a
											Logstash Primer
									Node:
									(type) c
									(layer)3
															Node:
															(type) c
															(layer)5
																Element:h5
																	Be in the know with the latest and greatest from Elastic.
															Node:
															(type) c
															(layer)5
																Element:p
																	Thanks for subscribing! We'll keep you updated with new releases.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:footer
										Element:h3
										Element:a
											Products >
										Element:ul
										Element:li
										Element:a
											Elasticsearch
										Element:li
										Element:a
											Kibana
										Element:li
										Element:a
											Beats
										Element:li
										Element:a
											Logstash
										Element:li
										Element:a
											X-Pack
										Element:li
										Element:a
											Elastic Cloud
										Element:li
										Element:a
											Security (formerly Shield)
										Element:li
										Element:a
											Alerting (via Watcher)
										Element:li
										Element:a
											Monitoring (formerly Marvel)
										Element:li
										Element:a
											Graph
										Element:li
										Element:a
											Reporting
										Element:li
										Element:a
											Machine Learning
										Element:li
										Element:a
											ES-Hadoop
										Element:h3
											Resources
										Element:ul
										Element:li
										Element:a
											Blog
										Element:li
										Element:a
											Cloud Status
										Element:li
										Element:a
											Community
										Element:li
										Element:a
											Customers & Use Cases
										Element:li
										Element:a
											Documentation
										Element:li
										Element:a
											Elastic{ON} Events
										Element:li
										Element:a
											Forums
										Element:li
										Element:a
											Meetups
										Element:li
										Element:a
											Subscriptions
										Element:li
										Element:a
											Support Portal
										Element:li
										Element:a
											Videos & Webinars
										Element:li
										Element:a
											Training
										Element:h3
										Element:a
											About >
										Element:ul
										Element:li
										Element:a
											Careers/Jobs
										Element:li
										Element:a
											Contact
										Element:li
										Element:a
											Leadership
										Element:li
										Element:a
											Partners
										Element:li
										Element:a
											Press
										Element:h3
											Language
										Element:ul
										Element:li
										Element:a
											English
										Element:li
										Element:a
											Français
										Element:li
										Element:a
											Deutsch
										Element:li
										Element:a
											日本語
										Element:li
										Element:a
											한국어
										Element:p
											FOLLOW US
										Element:ul
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:ul
										Element:li
										Element:a
											Trademarks
										Element:li
										Element:a
											Terms of Use
										Element:li
										Element:a
											Privacy
										Element:li
										Element:a
											Cookie Policy
										Element:li
										Element:a
											Brand
										Element:a
										Element:img
										Element:p
											© 2017. All Rights Reserved - Elasticsearch
										Element:p
											Elasticsearch is a trademark of Elasticsearch BV, registered in the U.S. and in other countries
										Element:p
											Apache, Apache Lucene, Apache Hadoop, Hadoop, HDFS and the yellow elephant logo are trademarks of the
										Element:a
											Apache Software Foundation
											in the United States and/or other countries.
