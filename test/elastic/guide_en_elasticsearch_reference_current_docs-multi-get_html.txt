Node:
(type) c
(layer)0
	Element:body
						Node:
						(type) h2
						(layer)2
							Element:h2
							Element:a
								Multi Get API
							Element:a
								edit
						Node:
						(type) c
						(layer)2
							Element:p
								Multi GET API allows to get multiple documents based on an index, type (optional) and id (and possibly routing). The response includes a
							Element:code
								docs
								array with all the fetched documents, each element similar in structure to a document provided by the
							Element:a
								get
								API. Here is an example:
						Node:
						(type) c
						(layer)2
							Element:pre
								curl 'localhost:9200/_mget' -d '{ "docs" : [ { "_index" : "test", "_type" : "type", "_id" : "1" }, { "_index" : "test", "_type" : "type", "_id" : "2" } ] }'
						Node:
						(type) c
						(layer)2
							Element:p
								The
							Element:code
								mget
								endpoint can also be used against an index (in which case it is not required in the body):
						Node:
						(type) c
						(layer)2
							Element:pre
								curl 'localhost:9200/test/_mget' -d '{ "docs" : [ { "_type" : "type", "_id" : "1" }, { "_type" : "type", "_id" : "2" } ] }'
						Node:
						(type) c
						(layer)2
							Element:p
								And type:
						Node:
						(type) c
						(layer)2
							Element:pre
								curl 'localhost:9200/test/type/_mget' -d '{ "docs" : [ { "_id" : "1" }, { "_id" : "2" } ] }'
						Node:
						(type) c
						(layer)2
							Element:p
								In which case, the
							Element:code
								ids
								element can directly be used to simplify the request:
						Node:
						(type) c
						(layer)2
							Element:pre
								curl 'localhost:9200/test/type/_mget' -d '{ "ids" : ["1", "2"] }'
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Optional Type
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											The mget API allows for
										Element:code
											_type
											to be optional. Set it to
										Element:code
											_all
											or leave it empty in order to fetch the first document matching the id across all types.
									Node:
									(type) c
									(layer)3
										Element:p
											If you don’t set the type and have many documents sharing the same
										Element:code
											_id
											, you will end up getting only the first matching document.
									Node:
									(type) c
									(layer)3
										Element:p
											For example, if you have a document 1 within typeA and typeB then following request will give you back only the same document twice:
									Node:
									(type) c
									(layer)3
										Element:pre
											curl 'localhost:9200/test/_mget' -d '{ "ids" : ["1", "1"] }'
									Node:
									(type) c
									(layer)3
										Element:p
											You need in that case to explicitly set the
										Element:code
											_type
											:
									Node:
									(type) c
									(layer)3
										Element:pre
											GET /test/_mget/ { "docs" : [ { "_type":"typeA", "_id" : "1" }, { "_type":"typeB", "_id" : "1" } ] }
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Source filtering
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											By default, the
										Element:code
											_source
											field will be returned for every document (if stored). Similar to the
										Element:a
											get
											API, you can retrieve only parts of the
										Element:code
											_source
											(or not at all) by using the
										Element:code
											_source
											parameter. You can also use the url parameters
										Element:code
											_source
											,
										Element:code
											_source_include
											&
										Element:code
											_source_exclude
											to specify defaults, which will be used when there are no per-document instructions.
									Node:
									(type) c
									(layer)3
										Element:p
											For example:
									Node:
									(type) c
									(layer)3
										Element:pre
											curl 'localhost:9200/_mget' -d '{ "docs" : [ { "_index" : "test", "_type" : "type", "_id" : "1", "_source" : false }, { "_index" : "test", "_type" : "type", "_id" : "2", "_source" : ["field3", "field4"] }, { "_index" : "test", "_type" : "type", "_id" : "3", "_source" : { "include": ["user"], "exclude": ["user.location"] } } ] }'
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Fields
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											Specific stored fields can be specified to be retrieved per document to get, similar to the
										Element:a
											stored_fields
											parameter of the Get API. For example:
									Node:
									(type) c
									(layer)3
										Element:pre
											curl 'localhost:9200/_mget' -d '{ "docs" : [ { "_index" : "test", "_type" : "type", "_id" : "1", "stored_fields" : ["field1", "field2"] }, { "_index" : "test", "_type" : "type", "_id" : "2", "stored_fields" : ["field3", "field4"] } ] }'
									Node:
									(type) c
									(layer)3
										Element:p
											Alternatively, you can specify the
										Element:code
											stored_fields
											parameter in the query string as a default to be applied to all documents.
									Node:
									(type) c
									(layer)3
										Element:pre
											curl 'localhost:9200/test/type/_mget?stored_fields=field1,field2' -d '{ "docs" : [ { "_id" : "1"
										Element:a
										Element:span
											}, { "_id" : "2", "stored_fields" : ["field3", "field4"]
										Element:img
										Element:a
										Element:span
											} ] }'
										Element:img
									Node:
									(type) c
									(layer)3
										Element:table
										Element:tr
										Element:td
										Element:p
										Element:a
										Element:span
										Element:img
										Element:td
										Element:p
											Returns
										Element:code
											field1
											and
										Element:code
											field2
										Element:tr
										Element:td
										Element:p
										Element:a
										Element:span
										Element:img
										Element:td
										Element:p
											Returns
										Element:code
											field3
											and
										Element:code
											field4
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Generated fields
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											See
										Element:a
											the section called “Generated fields
										Element:a
											edit
											” for fields generated only when indexing.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Routing
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											You can also specify routing value as a parameter:
									Node:
									(type) c
									(layer)3
										Element:pre
											curl 'localhost:9200/_mget?routing=key1' -d '{ "docs" : [ { "_index" : "test", "_type" : "type", "_id" : "1", "_routing" : "key2" }, { "_index" : "test", "_type" : "type", "_id" : "2" } ] }'
									Node:
									(type) c
									(layer)3
										Element:p
											In this example, document
										Element:code
											test/type/2
											will be fetch from shard corresponding to routing key
										Element:code
											key1
											but document
										Element:code
											test/type/1
											will be fetch from shard corresponding to routing key
										Element:code
											key2
											.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Security
										Element:a
											edit
									Node:
									(type) c
									(layer)3
										Element:p
											See
										Element:a
										Element:em
											URL-based access control
									Node:
									(type) c
									(layer)3
										Element:span
										Element:a
											« Update By Query API
									Node:
									(type) c
									(layer)3
										Element:span
										Element:a
											Bulk API »
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Top Videos
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:a
											Elasticsearch Demo
										Element:li
										Element:a
											Kibana 101
										Element:li
										Element:a
											Logstash Primer
									Node:
									(type) c
									(layer)3
															Node:
															(type) c
															(layer)5
																Element:h5
																	Be in the know with the latest and greatest from Elastic.
															Node:
															(type) c
															(layer)5
																Element:p
																	Thanks for subscribing! We'll keep you updated with new releases.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:footer
										Element:h3
										Element:a
											Products >
										Element:ul
										Element:li
										Element:a
											Elasticsearch
										Element:li
										Element:a
											Kibana
										Element:li
										Element:a
											Beats
										Element:li
										Element:a
											Logstash
										Element:li
										Element:a
											X-Pack
										Element:li
										Element:a
											Elastic Cloud
										Element:li
										Element:a
											Security (formerly Shield)
										Element:li
										Element:a
											Alerting (via Watcher)
										Element:li
										Element:a
											Monitoring (formerly Marvel)
										Element:li
										Element:a
											Graph
										Element:li
										Element:a
											Reporting
										Element:li
										Element:a
											Machine Learning
										Element:li
										Element:a
											ES-Hadoop
										Element:h3
											Resources
										Element:ul
										Element:li
										Element:a
											Blog
										Element:li
										Element:a
											Cloud Status
										Element:li
										Element:a
											Community
										Element:li
										Element:a
											Customers & Use Cases
										Element:li
										Element:a
											Documentation
										Element:li
										Element:a
											Elastic{ON} Events
										Element:li
										Element:a
											Forums
										Element:li
										Element:a
											Meetups
										Element:li
										Element:a
											Subscriptions
										Element:li
										Element:a
											Support Portal
										Element:li
										Element:a
											Videos & Webinars
										Element:li
										Element:a
											Training
										Element:h3
										Element:a
											About >
										Element:ul
										Element:li
										Element:a
											Careers/Jobs
										Element:li
										Element:a
											Contact
										Element:li
										Element:a
											Leadership
										Element:li
										Element:a
											Partners
										Element:li
										Element:a
											Press
										Element:h3
											Language
										Element:ul
										Element:li
										Element:a
											English
										Element:li
										Element:a
											Français
										Element:li
										Element:a
											Deutsch
										Element:li
										Element:a
											日本語
										Element:li
										Element:a
											한국어
										Element:p
											FOLLOW US
										Element:ul
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:li
										Element:a
										Element:ul
										Element:li
										Element:a
											Trademarks
										Element:li
										Element:a
											Terms of Use
										Element:li
										Element:a
											Privacy
										Element:li
										Element:a
											Cookie Policy
										Element:li
										Element:a
											Brand
										Element:a
										Element:img
										Element:p
											© 2017. All Rights Reserved - Elasticsearch
										Element:p
											Elasticsearch is a trademark of Elasticsearch BV, registered in the U.S. and in other countries
										Element:p
											Apache, Apache Lucene, Apache Hadoop, Hadoop, HDFS and the yellow elephant logo are trademarks of the
										Element:a
											Apache Software Foundation
											in the United States and/or other countries.
