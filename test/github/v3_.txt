Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
				Element:a
					Overview
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					This describes the resources that make up the official GitHub API v3. If you have any problems or requests please contact
				Element:a
					support
					.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:a
					Current Version
				Element:li
				Element:a
					Schema
				Element:li
				Element:a
					Parameters
				Element:li
				Element:a
					Root Endpoint
				Element:li
				Element:a
					Client Errors
				Element:li
				Element:a
					HTTP Redirects
				Element:li
				Element:a
					HTTP Verbs
				Element:li
				Element:a
					Authentication
				Element:li
				Element:a
					Hypermedia
				Element:li
				Element:a
					Pagination
				Element:li
				Element:a
					Rate Limiting
				Element:li
				Element:a
					User Agent Required
				Element:li
				Element:a
					Conditional requests
				Element:li
				Element:a
					Cross Origin Resource Sharing
				Element:li
				Element:a
					JSON-P Callbacks
				Element:li
				Element:a
					Timezones
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
							Element:a
								Current Version
							Element:span
						Node:
						(type) c
						(layer)2
							Element:p
								By default, all requests receive the
							Element:strong
								v3
							Element:a
								version
								of the API. We encourage you to
							Element:a
								explicitly request this version via the
								.
							Element:code
								Accept
								header
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								Accept: application/vnd.github.v3+json
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
							Element:a
								Schema
							Element:span
						Node:
						(type) c
						(layer)2
							Element:p
								All API access is over HTTPS, and accessed from the
							Element:code
								https://api.github.com
								. All data is sent and received as JSON.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								curl -i https://api.github.com/users/octocat/orgs
							Element:span
								HTTP/1.1 200 OK
							Element:span
								Server: nginx
							Element:span
								Date: Fri, 12 Oct 2012 23:33:14 GMT
							Element:span
								Content-Type: application/json; charset=utf-8
							Element:span
								Connection: keep-alive
							Element:span
								Status: 200 OK
							Element:span
								ETag: "a00049ba79152d03380c34652f2cb612"
							Element:span
								X-GitHub-Media-Type: github.v3
							Element:span
								X-RateLimit-Limit: 5000
							Element:span
								X-RateLimit-Remaining: 4987
							Element:span
								X-RateLimit-Reset: 1350085394
							Element:span
								Content-Length: 5
							Element:span
								Cache-Control: max-age=0, private, must-revalidate
							Element:span
								X-Content-Type-Options: nosniff
						Node:
						(type) c
						(layer)2
							Element:p
								Blank fields are included as
							Element:code
								null
								instead of being omitted.
						Node:
						(type) c
						(layer)2
							Element:p
								All timestamps are returned in ISO 8601 format:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								YYYY-MM-DDTHH:MM:SSZ
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Summary Representations
										Element:span
									Node:
									(type) c
									(layer)3
										Element:p
											When you fetch a list of resources, the response includes a
										Element:em
											subset
											of the attributes for that resource. This is the "summary" representation of the resource. (Some attributes are computationally expensive for the API to provide. For performance reasons, the summary representation excludes those attributes. To obtain those attributes, fetch the "detailed" representation.)
									Node:
									(type) c
									(layer)3
										Element:p
										Element:strong
											Example
											: When you get a list of repositories, you get the summary representation of each repository. Here, we fetch the list of repositories owned by the
										Element:a
											octokit
											organization:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											GET /orgs/octokit/repos
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Detailed Representations
										Element:span
									Node:
									(type) c
									(layer)3
										Element:p
											When you fetch an individual resource, the response typically includes
										Element:em
											all
											attributes for that resource. This is the "detailed" representation of the resource. (Note that authorization sometimes influences the amount of detail included in the representation.)
									Node:
									(type) c
									(layer)3
										Element:p
										Element:strong
											Example
											: When you get an individual repository, you get the detailed representation of the repository. Here, we fetch the
										Element:a
											octokit/octokit.rb
											repository:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											GET /repos/octokit/octokit.rb
									Node:
									(type) c
									(layer)3
										Element:p
											The documentation provides an example response for each API method. The example response illustrates all attributes that are returned by that method.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
							Element:a
								Parameters
							Element:span
						Node:
						(type) c
						(layer)2
							Element:p
								Many API methods take optional parameters. For GET requests, any parameters not specified as a segment in the path can be passed as an HTTP query string parameter:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								curl -i "https://api.github.com/repos/vmg/redcarpet/issues?state=closed"
						Node:
						(type) c
						(layer)2
							Element:p
								In this example, the 'vmg' and 'redcarpet' values are provided for the
							Element:code
								:owner
								and
							Element:code
								:repo
								parameters in the path while
							Element:code
								:state
								is passed in the query string.
						Node:
						(type) c
						(layer)2
							Element:p
								For POST, PATCH, PUT, and DELETE requests, parameters not included in the URL should be encoded as JSON with a Content-Type of 'application/json':
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								curl -i -u username -d '{"scopes":["public_repo"]}' https://api.github.com/authorizations
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
							Element:a
								Root Endpoint
							Element:span
						Node:
						(type) c
						(layer)2
							Element:p
								You can issue a
							Element:code
								GET
								request to the root endpoint to get all the endpoint categories that the API supports:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								curl https://api.github.com
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
							Element:a
								Client Errors
							Element:span
						Node:
						(type) c
						(layer)2
							Element:p
								There are three possible types of client errors on API calls that receive request bodies:
						Node:
						(type) c
						(layer)2
							Element:ol
							Element:li
							Element:p
								Sending invalid JSON will result in a
							Element:code
								400 Bad Request
								response.
							Element:pre
							Element:code
								HTTP/1.1 400 Bad Request Content-Length: 35 {"message":"Problems parsing JSON"}
							Element:li
							Element:p
								Sending the wrong type of JSON values will result in a
							Element:code
								400 Bad Request
								response.
							Element:pre
							Element:code
								HTTP/1.1 400 Bad Request Content-Length: 40 {"message":"Body should be a JSON object"}
							Element:li
							Element:p
								Sending invalid fields will result in a
							Element:code
								422 Unprocessable Entity
								response.
							Element:pre
							Element:code
								HTTP/1.1 422 Unprocessable Entity Content-Length: 149 { "message": "Validation Failed", "errors": [ { "resource": "Issue", "field": "title", "code": "missing_field" } ] }
						Node:
						(type) c
						(layer)2
							Element:p
								All error objects have resource and field properties so that your client can tell what the problem is. There's also an error code to let you know what is wrong with the field. These are the possible validation error codes:
						Node:
						(type) c
						(layer)2
							Element:table
							Element:thead
							Element:tr
							Element:th
								Error Name
							Element:th
								Description
							Element:tbody
							Element:tr
							Element:td
							Element:code
								missing
							Element:td
								This means a resource does not exist.
							Element:tr
							Element:td
							Element:code
								missing_field
							Element:td
								This means a required field on a resource has not been set.
							Element:tr
							Element:td
							Element:code
								invalid
							Element:td
								This means the formatting of a field is invalid. The documentation for that resource should be able to give you more specific information.
							Element:tr
							Element:td
							Element:code
								already_exists
							Element:td
								This means another resource has the same value as this field. This can happen in resources that must have some unique key (such as Label names).
						Node:
						(type) c
						(layer)2
							Element:p
								Resources may also send custom validation errors (where
							Element:code
								code
								is
							Element:code
								custom
								). Custom errors will always have a
							Element:code
								message
								field describing the error, and most errors will also include a
							Element:code
								documentation_url
								field pointing to some content that might help you resolve the error.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
							Element:a
								HTTP Redirects
							Element:span
						Node:
						(type) c
						(layer)2
							Element:p
								API v3 uses HTTP redirection where appropriate. Clients should assume that any request may result in a redirection. Receiving an HTTP redirection is
							Element:em
								not
								an error and clients should follow that redirect. Redirect responses will have a
							Element:code
								Location
								header field which contains the URI of the resource to which the client should repeat the requests.
						Node:
						(type) c
						(layer)2
							Element:table
							Element:thead
							Element:tr
							Element:th
								Status Code
							Element:th
								Description
							Element:tbody
							Element:tr
							Element:td
							Element:code
								301
							Element:td
								Permanent redirection. The URI you used to make the request has been superseded by the one specified in the
							Element:code
								Location
								header field. This and all future requests to this resource should be directed to the new URI.
							Element:tr
							Element:td
							Element:code
								302
								,
							Element:code
								307
							Element:td
								Temporary redirection. The request should be repeated verbatim to the URI specified in the
							Element:code
								Location
								header field but clients should continue to use the original URI for future requests.
						Node:
						(type) c
						(layer)2
							Element:p
								Other redirection status codes may be used in accordance with the HTTP 1.1 spec.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
							Element:a
								HTTP Verbs
							Element:span
						Node:
						(type) c
						(layer)2
							Element:p
								Where possible, API v3 strives to use appropriate HTTP verbs for each action.
						Node:
						(type) c
						(layer)2
							Element:table
							Element:thead
							Element:tr
							Element:th
								Verb
							Element:th
								Description
							Element:tbody
							Element:tr
							Element:td
							Element:code
								HEAD
							Element:td
								Can be issued against any resource to get just the HTTP header info.
							Element:tr
							Element:td
							Element:code
								GET
							Element:td
								Used for retrieving resources.
							Element:tr
							Element:td
							Element:code
								POST
							Element:td
								Used for creating resources.
							Element:tr
							Element:td
							Element:code
								PATCH
							Element:td
								Used for updating resources with partial JSON data. For instance, an Issue resource has
							Element:code
								title
								and
							Element:code
								body
								attributes. A PATCH request may accept one or more of the attributes to update the resource. PATCH is a relatively new and uncommon HTTP verb, so resource endpoints also accept
							Element:code
								POST
								requests.
							Element:tr
							Element:td
							Element:code
								PUT
							Element:td
								Used for replacing resources or collections. For
							Element:code
								PUT
								requests with no
							Element:code
								body
								attribute, be sure to set the
							Element:code
								Content-Length
								header to zero.
							Element:tr
							Element:td
							Element:code
								DELETE
							Element:td
								Used for deleting resources.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
							Element:a
								Authentication
							Element:span
						Node:
						(type) c
						(layer)2
							Element:p
								There are three ways to authenticate through GitHub API v3. Requests that require authentication will return
							Element:code
								404 Not Found
								, instead of
							Element:code
								403 Forbidden
								, in some places. This is to prevent the accidental leakage of private repositories to unauthorized users.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Basic Authentication
										Element:span
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											curl -u "username" https://api.github.com
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											OAuth2 Token (sent in a header)
										Element:span
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											curl -H "Authorization: token OAUTH-TOKEN" https://api.github.com
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											OAuth2 Token (sent as a parameter)
										Element:span
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											curl https://api.github.com/?access_token=OAUTH-TOKEN
									Node:
									(type) c
									(layer)3
										Element:p
											Read
										Element:a
											more about OAuth2
											. Note that OAuth2 tokens can be
										Element:a
											acquired programmatically
											, for applications that are not websites.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											OAuth2 Key/Secret
										Element:span
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											curl 'https://api.github.com/users/whatever?client_id=xxxx&client_secret=yyyy'
									Node:
									(type) c
									(layer)3
										Element:p
											This should only be used in server to server scenarios. Don't leak your OAuth application's client secret to your users.
									Node:
									(type) c
									(layer)3
										Element:p
											Read
										Element:a
											more about unauthenticated rate limiting
											.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Failed login limit
										Element:span
									Node:
									(type) c
									(layer)3
										Element:p
											Authenticating with invalid credentials will return
										Element:code
											401 Unauthorized
											:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											curl -i https://api.github.com -u foo:bar
										Element:span
											HTTP/1.1 401 Unauthorized
										Element:span
											{
										Element:span
											"message": "Bad credentials",
										Element:span
											"documentation_url": "https://developer.github.com/v3"
										Element:span
											}
									Node:
									(type) c
									(layer)3
										Element:p
											After detecting several requests with invalid credentials within a short period, the API will temporarily reject all authentication attempts for that user (including ones with valid credentials) with
										Element:code
											403 Forbidden
											:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											curl -i https://api.github.com -u valid_username:valid_password
										Element:span
											HTTP/1.1 403 Forbidden
										Element:span
											{
										Element:span
											"message": "Maximum number of login attempts exceeded. Please try again later.",
										Element:span
											"documentation_url": "https://developer.github.com/v3"
										Element:span
											}
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
							Element:a
								Hypermedia
							Element:span
						Node:
						(type) c
						(layer)2
							Element:p
								All resources may have one or more
							Element:code
								*_url
								properties linking to other resources. These are meant to provide explicit URLs so that proper API clients don't need to construct URLs on their own. It is highly recommended that API clients use these. Doing so will make future upgrades of the API easier for developers. All URLs are expected to be proper
							Element:a
								RFC 6570
								URI templates.
						Node:
						(type) c
						(layer)2
							Element:p
								You can then expand these templates using something like the
							Element:a
								uri_template
								gem:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								>> tmpl = URITemplate.new('/notifications{?since,all,participating}') >> tmpl.expand => "/notifications" >> tmpl.expand :all => 1 => "/notifications?all=1" >> tmpl.expand :all => 1, :participating => 1 => "/notifications?all=1&participating=1"
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
							Element:a
								Pagination
							Element:span
						Node:
						(type) c
						(layer)2
							Element:p
								Requests that return multiple items will be paginated to 30 items by default. You can specify further pages with the
							Element:code
								?page
								parameter. For some resources, you can also set a custom page size up to 100 with the
							Element:code
								?per_page
								parameter. Note that for technical reasons not all endpoints respect the
							Element:code
								?per_page
								parameter, see
							Element:a
								events
								for example.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								curl 'https://api.github.com/user/repos?page=2&per_page=100'
						Node:
						(type) c
						(layer)2
							Element:p
								Note that page numbering is 1-based and that omitting the
							Element:code
								?page
								parameter will return the first page.
						Node:
						(type) c
						(layer)2
							Element:p
								For more information on pagination, check out our guide on
							Element:a
								Traversing with Pagination
								.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Link Header
										Element:span
									Node:
									(type) c
									(layer)3
										Element:p
										Element:strong
											Note:
											It's important to form calls with Link header values instead of constructing your own URLs.
									Node:
									(type) c
									(layer)3
										Element:p
											The
										Element:a
											Link header
											includes pagination information:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											Link: <https://api.github.com/user/repos?page=3&per_page=100>; rel="next", <https://api.github.com/user/repos?page=50&per_page=100>; rel="last"
									Node:
									(type) c
									(layer)3
										Element:p
										Element:em
											The example includes a line break for readability.
									Node:
									(type) c
									(layer)3
										Element:p
											This
										Element:code
											Link
											response header contains one or more
										Element:a
											Hypermedia
											link relations, some of which may require expansion as
										Element:a
											URI templates
											.
									Node:
									(type) c
									(layer)3
										Element:p
											The possible
										Element:code
											rel
											values are:
									Node:
									(type) c
									(layer)3
										Element:table
										Element:thead
										Element:tr
										Element:th
											Name
										Element:th
											Description
										Element:tbody
										Element:tr
										Element:td
										Element:code
											next
										Element:td
											The link relation for the immediate next page of results.
										Element:tr
										Element:td
										Element:code
											last
										Element:td
											The link relation for the last page of results.
										Element:tr
										Element:td
										Element:code
											first
										Element:td
											The link relation for the first page of results.
										Element:tr
										Element:td
										Element:code
											prev
										Element:td
											The link relation for the immediate previous page of results.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
							Element:a
								Rate Limiting
							Element:span
						Node:
						(type) c
						(layer)2
							Element:p
								For requests using Basic Authentication or OAuth, you can make up to 5,000 requests per hour. For unauthenticated requests, the rate limit allows you to make up to 60 requests per hour. Unauthenticated requests are associated with your IP address, and not the user making requests. Note that
							Element:a
								the Search API has custom rate limit rules
								.
						Node:
						(type) c
						(layer)2
							Element:p
								You can check the returned HTTP headers of any API request to see your current rate limit status:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								curl -i https://api.github.com/users/whatever
							Element:span
								HTTP/1.1 200 OK
							Element:span
								Date: Mon, 01 Jul 2013 17:27:06 GMT
							Element:span
								Status: 200 OK
							Element:span
								X-RateLimit-Limit: 60
							Element:span
								X-RateLimit-Remaining: 56
							Element:span
								X-RateLimit-Reset: 1372700873
						Node:
						(type) c
						(layer)2
							Element:p
								The headers tell you everything you need to know about your current rate limit status:
						Node:
						(type) c
						(layer)2
							Element:table
							Element:thead
							Element:tr
							Element:th
								Header Name
							Element:th
								Description
							Element:tbody
							Element:tr
							Element:td
							Element:code
								X-RateLimit-Limit
							Element:td
								The maximum number of requests that the consumer is permitted to make per hour.
							Element:tr
							Element:td
							Element:code
								X-RateLimit-Remaining
							Element:td
								The number of requests remaining in the current rate limit window.
							Element:tr
							Element:td
							Element:code
								X-RateLimit-Reset
							Element:td
								The time at which the current rate limit window resets in
							Element:a
								UTC epoch seconds
								.
						Node:
						(type) c
						(layer)2
							Element:p
								If you need the time in a different format, any modern programming language can get the job done. For example, if you open up the console on your web browser, you can easily get the reset time as a JavaScript Date object.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
								new
							Element:span
								Date
							Element:span
								(
							Element:span
								1372700873
							Element:span
								*
							Element:span
								1000
							Element:span
								)
							Element:span
								// => Mon Jul 01 2013 13:47:53 GMT-0400 (EDT)
						Node:
						(type) c
						(layer)2
							Element:p
								Once you go over the rate limit you will receive an error response:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								HTTP/1.1 403 Forbidden
							Element:span
								Date: Tue, 20 Aug 2013 14:50:41 GMT
							Element:span
								Status: 403 Forbidden
							Element:span
								X-RateLimit-Limit: 60
							Element:span
								X-RateLimit-Remaining: 0
							Element:span
								X-RateLimit-Reset: 1377013266
							Element:span
								{
							Element:span
								"message": "API rate limit exceeded for xxx.xxx.xxx.xxx. (But here's the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.)",
							Element:span
								"documentation_url": "https://developer.github.com/v3/#rate-limiting"
							Element:span
								}
						Node:
						(type) c
						(layer)2
							Element:p
								You can also
							Element:a
								check your rate limit status
								without incurring an API hit.
							Element:br
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Increasing the unauthenticated rate limit for OAuth applications
										Element:span
									Node:
									(type) c
									(layer)3
										Element:p
											If your OAuth application needs to make unauthenticated calls with a higher rate limit, you can pass your app's client ID and secret as part of the query string.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											curl -i 'https://api.github.com/users/whatever?client_id=xxxx&client_secret=yyyy'
										Element:span
											HTTP/1.1 200 OK
										Element:span
											Date: Mon, 01 Jul 2013 17:27:06 GMT
										Element:span
											Status: 200 OK
										Element:span
											X-RateLimit-Limit: 5000
										Element:span
											X-RateLimit-Remaining: 4966
										Element:span
											X-RateLimit-Reset: 1372700873
									Node:
									(type) c
									(layer)3
										Element:p
											This method should only be used for server-to-server calls. You should never share your client secret with anyone or include it in client-side browser code.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Staying within the rate limit
										Element:span
									Node:
									(type) c
									(layer)3
										Element:p
											If you are using Basic Authentication or OAuth, and you are exceeding your rate limit, you can likely fix the issue by caching API responses and using
										Element:a
											conditional requests
											.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Abuse Rate Limits
										Element:span
									Node:
									(type) c
									(layer)3
										Element:p
											To protect the quality of service from GitHub, additional rate limits may apply to some actions. For example, rapidly creating content, polling aggressively instead of using webhooks, making API calls with a high concurrency, or repeatedly requesting data that is computationally expensive may result in abuse rate limiting.
									Node:
									(type) c
									(layer)3
										Element:p
											It is not intended for this rate limit to interfere with any legitimate use of the API. Your normal
										Element:a
											rate limits
											should be the only limit you target. To ensure you're acting as a good API citizen, check out our
										Element:a
											Best Practices guidelines
											.
									Node:
									(type) c
									(layer)3
										Element:p
											If your application triggers this rate limit, you'll receive an informative response:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											HTTP/1.1 403 Forbidden
										Element:span
											Content-Type: application/json; charset=utf-8
										Element:span
											Connection: close
										Element:span
											{
										Element:span
											"message": "You have triggered an abuse detection mechanism and have been temporarily blocked from content creation. Please retry your request again later.",
										Element:span
											"documentation_url": "https://developer.github.com/v3#abuse-rate-limits"
										Element:span
											}
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
							Element:a
								User Agent Required
							Element:span
						Node:
						(type) c
						(layer)2
							Element:p
								All API requests MUST include a valid
							Element:code
								User-Agent
								header. Requests with no
							Element:code
								User-Agent
								header will be rejected. We request that you use your GitHub username, or the name of your application, for the
							Element:code
								User-Agent
								header value. This allows us to contact you if there are problems.
						Node:
						(type) c
						(layer)2
							Element:p
								Here's an example:
						Node:
						(type) c
						(layer)2
							Element:pre
								User-Agent: Awesome-Octocat-App
						Node:
						(type) c
						(layer)2
							Element:p
								If you provide an invalid
							Element:code
								User-Agent
								header, you will receive a
							Element:code
								403 Forbidden
								response:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								curl -iH 'User-Agent: ' https://api.github.com/meta
							Element:span
								HTTP/1.0 403 Forbidden
							Element:span
								Connection: close
							Element:span
								Content-Type: text/html
							Element:span
								Request forbidden by administrative rules.
							Element:span
								Please make sure your request has a User-Agent header.
							Element:span
								Check https://developer.github.com for other possible causes.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
							Element:a
								Conditional requests
							Element:span
						Node:
						(type) c
						(layer)2
							Element:p
								Most responses return an
							Element:code
								ETag
								header. Many responses also return a
							Element:code
								Last-Modified
								header. You can use the values of these headers to make subsequent requests to those resources using the
							Element:code
								If-None-Match
								and
							Element:code
								If-Modified-Since
								headers, respectively. If the resource has not changed, the server will return a
							Element:code
								304 Not Modified
								.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:strong
								Note
								: Making a conditional request and receiving a 304 response does not count against your
							Element:a
								Rate Limit
								, so we encourage you to use it whenever possible.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								curl -i https://api.github.com/user
							Element:span
								HTTP/1.1 200 OK
							Element:span
								Cache-Control: private, max-age=60
							Element:span
								ETag: "644b5b0155e6404a9cc4bd9d8b1ae730"
							Element:span
								Last-Modified: Thu, 05 Jul 2012 15:31:30 GMT
							Element:span
								Status: 200 OK
							Element:span
								Vary: Accept, Authorization, Cookie
							Element:span
								X-RateLimit-Limit: 5000
							Element:span
								X-RateLimit-Remaining: 4996
							Element:span
								X-RateLimit-Reset: 1372700873
							Element:span
								curl -i https://api.github.com/user -H 'If-None-Match: "644b5b0155e6404a9cc4bd9d8b1ae730"'
							Element:span
								HTTP/1.1 304 Not Modified
							Element:span
								Cache-Control: private, max-age=60
							Element:span
								ETag: "644b5b0155e6404a9cc4bd9d8b1ae730"
							Element:span
								Last-Modified: Thu, 05 Jul 2012 15:31:30 GMT
							Element:span
								Status: 304 Not Modified
							Element:span
								Vary: Accept, Authorization, Cookie
							Element:span
								X-RateLimit-Limit: 5000
							Element:span
								X-RateLimit-Remaining: 4996
							Element:span
								X-RateLimit-Reset: 1372700873
							Element:span
								curl -i https://api.github.com/user -H "If-Modified-Since: Thu, 05 Jul 2012 15:31:30 GMT"
							Element:span
								HTTP/1.1 304 Not Modified
							Element:span
								Cache-Control: private, max-age=60
							Element:span
								Last-Modified: Thu, 05 Jul 2012 15:31:30 GMT
							Element:span
								Status: 304 Not Modified
							Element:span
								Vary: Accept, Authorization, Cookie
							Element:span
								X-RateLimit-Limit: 5000
							Element:span
								X-RateLimit-Remaining: 4996
							Element:span
								X-RateLimit-Reset: 1372700873
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
							Element:a
								Cross Origin Resource Sharing
							Element:span
						Node:
						(type) c
						(layer)2
							Element:p
								The API supports Cross Origin Resource Sharing (CORS) for AJAX requests from any origin. You can read the
							Element:a
								CORS W3C Recommendation
								, or
							Element:a
								this intro
								from the HTML 5 Security Guide.
						Node:
						(type) c
						(layer)2
							Element:p
								Here's a sample request sent from a browser hitting
							Element:code
								http://example.com
								:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								curl -i https://api.github.com -H "Origin: http://example.com"
								HTTP/1.1 302 Found Access-Control-Allow-Origin: * Access-Control-Expose-Headers: ETag, Link, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval
						Node:
						(type) c
						(layer)2
							Element:p
								This is what the CORS preflight request looks like:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								curl -i https://api.github.com -H "Origin: http://example.com" -X OPTIONS
								HTTP/1.1 204 No Content Access-Control-Allow-Origin: * Access-Control-Allow-Headers: Authorization, Content-Type, If-Match, If-Modified-Since, If-None-Match, If-Unmodified-Since, X-GitHub-OTP, X-Requested-With Access-Control-Allow-Methods: GET, POST, PATCH, PUT, DELETE Access-Control-Expose-Headers: ETag, Link, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval Access-Control-Max-Age: 86400
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
							Element:a
								JSON-P Callbacks
							Element:span
						Node:
						(type) c
						(layer)2
							Element:p
								You can send a
							Element:code
								?callback
								parameter to any GET call to have the results wrapped in a JSON function. This is typically used when browsers want to embed GitHub content in web pages by getting around cross domain issues. The response includes the same data output as the regular API, plus the relevant HTTP Header information.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								curl https://api.github.com?callback=foo
							Element:span
								/**/foo({
							Element:span
								"meta": {
							Element:span
								"status": 200,
							Element:span
								"X-RateLimit-Limit": "5000",
							Element:span
								"X-RateLimit-Remaining": "4966",
							Element:span
								"X-RateLimit-Reset": "1372700873",
							Element:span
								"Link": [ // pagination headers and other links
							Element:span
								["https://api.github.com?page=2", {"rel": "next"}]
							Element:span
								]
							Element:span
								},
							Element:span
								"data": {
							Element:span
								// the data
							Element:span
								}
							Element:span
								})
						Node:
						(type) c
						(layer)2
							Element:p
								You can write a JavaScript handler to process the callback. Here's a minimal example you can try out:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								<html> <head> <script type="text/javascript"> function foo(response) { var meta = response.meta; var data = response.data; console.log(meta); console.log(data); } var script = document.createElement('script'); script.src = 'https://api.github.com?callback=foo'; document.getElementsByTagName('head')[0].appendChild(script); </script> </head> <body> <p>Open up your browser's console.</p> </body> </html>
						Node:
						(type) c
						(layer)2
							Element:p
								All of the headers are the same String value as the HTTP Headers with one notable exception: Link. Link headers are pre-parsed for you and come through as an array of
							Element:code
								[url, options]
								tuples.
						Node:
						(type) c
						(layer)2
							Element:p
								A link that looks like this:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								Link: <url1>; rel="next", <url2>; rel="foo"; bar="baz"
						Node:
						(type) c
						(layer)2
							Element:p
								... will look like this in the Callback output:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
								{
							Element:span
							Element:span
								"Link"
							Element:span
								:
							Element:span
							Element:span
								[
							Element:span
							Element:span
								[
							Element:span
							Element:span
								"url1"
							Element:span
								,
							Element:span
							Element:span
								{
							Element:span
							Element:span
								"rel"
							Element:span
								:
							Element:span
							Element:span
								"next"
							Element:span
							Element:span
								}
							Element:span
							Element:span
								],
							Element:span
							Element:span
								[
							Element:span
							Element:span
								"url2"
							Element:span
								,
							Element:span
							Element:span
								{
							Element:span
							Element:span
								"rel"
							Element:span
								:
							Element:span
							Element:span
								"foo"
							Element:span
								,
							Element:span
							Element:span
								"bar"
							Element:span
								:
							Element:span
							Element:span
								"baz"
							Element:span
							Element:span
								}
							Element:span
							Element:span
								]
							Element:span
							Element:span
								]
							Element:span
							Element:span
								}
							Element:span
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
							Element:a
								Timezones
							Element:span
						Node:
						(type) c
						(layer)2
							Element:p
								Some requests allow for specifying timestamps or generate timestamps with time zone information. We apply the following rules, in order of priority, to determine timezone information for API calls.
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:a
														Explicitly provide an ISO 8601 timestamp with timezone information
													Element:span
												Node:
												(type) c
												(layer)4
													Element:p
														For API calls that allow for a timestamp to be specified, we use that exact timestamp. An example of this is the
													Element:a
														Commits API
														.
												Node:
												(type) c
												(layer)4
													Element:p
														These timestamps look something like
													Element:code
														2014-02-27T15:05:06+01:00
														. Also see
													Element:a
														this example
														for how these timestamps can be specified.
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:a
														Using the
													Element:span
													Element:code
														Time-Zone
														header
												Node:
												(type) c
												(layer)4
													Element:p
														It is possible to supply a
													Element:code
														Time-Zone
														header which defines a timezone according to the
													Element:a
														list of names from the Olson database
														.
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:span
														curl -H "Time-Zone: Europe/Amsterdam" -X POST https://api.github.com/repos/github/linguist/contents/new_file.md
												Node:
												(type) c
												(layer)4
													Element:p
														This means that we generate a timestamp for the moment your API call is made in the timezone this header defines. For example, the
													Element:a
														Contents API
														generates a git commit for each addition or change and uses the current time as the timestamp. This header will determine the timezone used for generating that current timestamp.
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:a
														Using the last known timezone for the user
													Element:span
												Node:
												(type) c
												(layer)4
													Element:p
														If no
													Element:code
														Time-Zone
														header is specified and you make an authenticated call to the API, we use the last known timezone for the authenticated user. The last known timezone is updated whenever you browse the GitHub website.
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:a
														UTC
													Element:span
												Node:
												(type) c
												(layer)4
													Element:p
														If the steps above don't result in any information, we use UTC as the timezone to create the git commit.
												Node:
												(type) c
												(layer)4
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:h3
										Element:a
										Element:a
											Overview
										Element:ul
										Element:li
										Element:a
											Media Types
										Element:li
										Element:a
											OAuth
										Element:li
										Element:a
											OAuth Authorizations API
										Element:li
										Element:a
											Other Authentication Methods
										Element:li
										Element:a
											Troubleshooting
										Element:li
										Element:a
											Pre-release Program
										Element:li
										Element:a
											API Previews
										Element:li
										Element:a
											Versions
										Element:li
										Element:h3
										Element:a
										Element:a
											Activity
										Element:ul
										Element:li
										Element:a
											Events
										Element:li
										Element:a
											Event Types & Payloads
										Element:li
										Element:a
											Feeds
										Element:li
										Element:a
											Notifications
										Element:li
										Element:a
											Starring
										Element:li
										Element:a
											Watching
										Element:li
										Element:h3
										Element:a
										Element:a
											Gists
										Element:ul
										Element:li
										Element:a
											Comments
										Element:li
										Element:h3
										Element:a
										Element:a
											Git Data
										Element:ul
										Element:li
										Element:a
											Blobs
										Element:li
										Element:a
											Commits
										Element:li
										Element:a
											References
										Element:li
										Element:a
											Tags
										Element:li
										Element:a
											Trees
										Element:li
										Element:h3
										Element:a
										Element:a
											Integrations
										Element:ul
										Element:li
										Element:a
											Integrations
										Element:li
										Element:a
											Installations
										Element:li
										Element:h3
										Element:a
										Element:a
											Issues
										Element:ul
										Element:li
										Element:a
											Assignees
										Element:li
										Element:a
											Comments
										Element:li
										Element:a
											Events
										Element:li
										Element:a
											Labels
										Element:li
										Element:a
											Milestones
										Element:li
										Element:a
											Timeline
										Element:li
										Element:h3
										Element:a
										Element:a
											Migration
										Element:ul
										Element:li
										Element:a
											Migrations
										Element:li
										Element:a
											Source Imports
										Element:li
										Element:h3
										Element:a
										Element:a
											Miscellaneous
										Element:ul
										Element:li
										Element:a
											Emojis
										Element:li
										Element:a
											Gitignore
										Element:li
										Element:a
											Licenses
										Element:li
										Element:a
											Markdown
										Element:li
										Element:a
											Meta
										Element:li
										Element:a
											Rate Limit
										Element:li
										Element:h3
										Element:a
										Element:a
											Organizations
										Element:ul
										Element:li
										Element:a
											Members
										Element:li
										Element:a
											Outside Collaborators
										Element:li
										Element:a
											Teams
										Element:li
										Element:a
											Webhooks
										Element:li
										Element:a
											Blocking Users (Organizations)
										Element:li
										Element:h3
										Element:a
										Element:a
											Projects
										Element:ul
										Element:li
										Element:a
											Cards
										Element:li
										Element:a
											Columns
										Element:li
										Element:h3
										Element:a
										Element:a
											Pull Requests
										Element:ul
										Element:li
										Element:a
											Reviews
										Element:li
										Element:a
											Review Comments
										Element:li
										Element:a
											Review Requests
										Element:li
										Element:h3
										Element:a
										Element:a
											Reactions
										Element:ul
										Element:li
										Element:a
											Commit Comment
										Element:li
										Element:a
											Issue
										Element:li
										Element:a
											Issue Comment
										Element:li
										Element:a
											Pull Request Review Comment
										Element:li
										Element:h3
										Element:a
										Element:a
											Repositories
										Element:ul
										Element:li
										Element:a
											Branches
										Element:li
										Element:a
											Collaborators
										Element:li
										Element:a
											Comments
										Element:li
										Element:a
											Community
										Element:li
										Element:a
											Commits
										Element:li
										Element:a
											Contents
										Element:li
										Element:a
											Deploy Keys
										Element:li
										Element:a
											Deployments
										Element:li
										Element:a
											Downloads
										Element:li
										Element:a
											Forks
										Element:li
										Element:a
											Invitations
										Element:li
										Element:a
											Merging
										Element:li
										Element:a
											Pages
										Element:li
										Element:a
											Releases
										Element:li
										Element:a
											Statistics
										Element:li
										Element:a
											Statuses
										Element:li
										Element:a
											Traffic
										Element:li
										Element:a
											Webhooks
										Element:li
										Element:h3
										Element:a
										Element:a
											Search
										Element:ul
										Element:li
										Element:a
											Repositories
										Element:li
										Element:a
											Code
										Element:li
										Element:a
											Commits
										Element:li
										Element:a
											Issues
										Element:li
										Element:a
											Users
										Element:li
										Element:a
											Legacy Search
										Element:li
										Element:h3
										Element:a
										Element:a
											Users
										Element:ul
										Element:li
										Element:a
											Emails
										Element:li
										Element:a
											Followers
										Element:li
										Element:a
											Git SSH Keys
										Element:li
										Element:a
											GPG Keys
										Element:li
										Element:a
											Administration (Enterprise)
										Element:li
										Element:a
											Blocking Users
										Element:li
										Element:h3
										Element:a
										Element:a
											Enterprise
										Element:ul
										Element:li
										Element:a
											Admin Stats
										Element:li
										Element:a
											LDAP
										Element:li
										Element:a
											License
										Element:li
										Element:a
											Management Console
										Element:li
										Element:a
											Pre-receive Environments
										Element:li
										Element:a
											Pre-receive Hooks
										Element:li
										Element:a
											Search Indexing
										Element:li
										Element:a
											Organization Administration
									Node:
									(type) c
									(layer)3
										Element:a
											API Status
									Node:
									(type) c
									(layer)3
										Element:footer
										Element:span
											© 2017 GitHub Inc. All rights reserved.
										Element:span
