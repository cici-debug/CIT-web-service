Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					Sentry Integration
			Node:
			(type) c
			(layer)1
				Element:p
					Segment makes it easy to send your data to
				Element:a
					Sentry
					(and lots of other integrations). Once you've tracked your data through our open source
				Element:a
					libraries
					we'll translate and route your data to Sentry in the format they understand.
			Node:
			(type) c
			(layer)1
				Element:p
				Element:a
					Our Sentry integration code
					is all open-source on GitHub if you want to check it out.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Getting Started
						Node:
						(type) c
						(layer)2
							Element:p
								When you toggle on Sentry in Segment, this is what happens:
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
								Our CDN is updated within 5-10 minutes. Then our snippet will start asynchronously loading Sentry’s javascript onto your page. This means you should remove Sentry’s snippet from your page.
							Element:li
								Sentry will automatically start tracking errors in your app’s javascript.
						Node:
						(type) c
						(layer)2
							Element:p
								Sentry is only supported on the client-side.
						Node:
						(type) c
						(layer)2
							Element:hr
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Identify
						Node:
						(type) c
						(layer)2
							Element:p
								When you call
							Element:code
								identify
								we call
							Element:code
								Raven.setUserContext
								by passing in the
							Element:code
								traits
								you provided. We will map the
							Element:code
								userId
								you provide as
							Element:code
								traits.id
								.
						Node:
						(type) c
						(layer)2
							Element:hr
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Supported Sources and Connection Modes
						Node:
						(type) c
						(layer)2
							Element:table
							Element:tr
							Element:th
							Element:th
								Web
							Element:th
								Mobile
							Element:th
								Server
							Element:tr
							Element:td
								📱 Device-based
							Element:td
								✅
							Element:td
							Element:td
							Element:tr
							Element:td
								☁️ Cloud-based
							Element:td
							Element:td
							Element:td
						Node:
						(type) c
						(layer)2
							Element:p
								To learn more about about Connection Modes and what dictates which we support,
							Element:a
								see here
								.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Settings
						Node:
						(type) c
						(layer)2
							Element:p
								Segment lets you change these integration settings via your Segment dashboard without having to touch any code.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Public DSN
									Node:
									(type) c
									(layer)3
										Element:p
											You can find your Public DSN by going to Sentry and clicking Projects & Teams > Any Project > Settings > Client Keys (DSN). This should be the PUBLIC DSN since it does not contain a secret.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Ignore Errors
									Node:
									(type) c
									(layer)3
										Element:p
											A list of these messages to be filtered out before being sent to Sentry as either regular expressions or strings.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Ignore Urls
									Node:
									(type) c
									(layer)3
										Element:p
											The inverse of whitelistUrls and similar to ignoreErrors, but will ignore errors from whole urls matching a regex pattern or an exact string.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Include Paths
									Node:
									(type) c
									(layer)3
										Element:p
											An array of regex patterns to indicate which urls are a part of your app in the stack trace. All other frames will appear collapsed inside Sentry to make it easier to discern between frames that happened in your code vs other code. It’d be suggested to add the current page url, and the host for your CDN.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Logger
									Node:
									(type) c
									(layer)3
										Element:p
											The name of the logger used by Sentry.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Maximum Message Length
									Node:
									(type) c
									(layer)3
										Element:p
											By default, Raven does not truncate messages. If you need to truncate characters for whatever reason, you may set this to limit the length.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Release
									Node:
									(type) c
									(layer)3
										Element:p
											Track the version of your application in Sentry.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Server Name
									Node:
									(type) c
									(layer)3
										Element:p
											Typically this would be the server name, but that doesn’t exist on all platforms. Instead you may use something like the device ID, as it indicates the host which the client is running on.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Whitelist Urls
									Node:
									(type) c
									(layer)3
										Element:p
											The inverse of ignoreUrls. Only report errors from whole urls matching a regex pattern or an exact string. whitelistUrls should match the url of your actual JavaScript files. It should match the url of your site if and only if you are inlining code inside
