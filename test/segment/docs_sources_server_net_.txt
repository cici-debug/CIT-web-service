Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					Analytics for .NET
			Node:
			(type) c
			(layer)1
				Element:p
					Our .NET library is the best way to integrate analytics into your .NET application or website. It lets you record analytics data from your ASP.NET, C#, F#, and Visual Basic code. The library issues requests that hit our servers, and then we route your data to any analytics service you enable on our integrations page. This library is open-source, so you can
				Element:a
					check it out on Github
					.
			Node:
			(type) c
			(layer)1
				Element:p
					All of our server-side libraries are built for high-performance, so you can use them in your web server controller code. This library uses an internal queue to make
				Element:code
					identify
					and
				Element:code
					track
					calls non-blocking and fast. It also batches messages and flushes asynchronously to our servers.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Getting Started
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Client-side vs Server-side
									Node:
									(type) c
									(layer)3
										Element:p
											The best analytics installation combines both client-side and server-side tracking. A client-side analytics.js installation allows you to install A/B testing, heat mapping, session recording, and ad optimization tools. A server-side .NET installation allows you to accurately track events that aren’t available client-side, such as payments. For best practices,
										Element:a
											check out our guide client-side vs. server-side
											.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Step 1: Add Analytics.js to your ASP.NET Master Page
									Node:
									(type) c
									(layer)3
										Element:p
											Create a .NET server source in Segment.
									Node:
									(type) c
									(layer)3
										Element:p
										Element:img
									Node:
									(type) c
									(layer)3
										Element:p
											You will then be presented with an
										Element:a
											snippet.
										Element:code
											analytics.js
									Node:
									(type) c
									(layer)3
										Element:p
											Copy the snippet directly into your ASP.NET
										Element:a
											Site.master
											.
									Node:
									(type) c
									(layer)3
										Element:p
											That snippet will load
										Element:code
											analytics.js
											onto the page
										Element:em
											asynchronously
											, so it won’t affect your page load speed.
									Node:
									(type) c
									(layer)3
										Element:p
											As soon as that snippet is running on your site, you can start turning on any integrations on your Segment integrations page. In fact, if you reload, you can start seeing
										Element:code
											page
											calls in our debugger.
									Node:
									(type) c
									(layer)3
										Element:p
											For more in depth
										Element:code
											analytics.js
											information, check out our
										Element:a
											analytics.js docs
											.
									Node:
									(type) c
									(layer)3
										Element:p
											Lots of analytics and marketing tools want to know more information about your users, and what they’re doing on your app. In the next section, we’ll install the .NET library and start sending an event every time a new user registers on your site.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Step 2: Install our .NET Library
									Node:
									(type) c
									(layer)3
										Element:p
											Your website will use our .NET library to
										Element:code
											identify
											and
										Element:code
											track
											users. You can use
										Element:a
											NuGet
											to install the library.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											Install-Package Analytics
									Node:
									(type) c
									(layer)3
										Element:p
										Element:strong
											Note:
											the Analytics package has a dependency on
										Element:a
											Newton.JSON
											.
									Node:
									(type) c
									(layer)3
										Element:p
											You can also accomplish the same thing in the Visual Studio
										Element:code
											Tools
											menu, select
										Element:code
											Library Package Manager
											and then click
										Element:code
											Package Manager Console
											.
									Node:
									(type) c
									(layer)3
										Element:p
											Now the .NET library needs to know which Segment project you want to send data to. You can initialize the library with your Segment source’s
										Element:code
											writeKey
											in the
										Element:a
											Global.asax file
											. Then you can use the
										Element:code
											Analytics
											singleton in any controller you want.:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											<%@ Application Language="C#" %> <%@ Import Namespace="ASP.NET_Example" %> <%@ Import Namespace="System.Web.Optimization" %> <%@ Import Namespace="System.Web.Routing" %> <%@ Import Namespace="Segment" %> <script runat="server"> void Application_Start(object sender, EventArgs e) { RouteConfig.RegisterRoutes(RouteTable.Routes); BundleConfig.RegisterBundles(BundleTable.Bundles); // this is your project's write key Segment.Analytics.Initialize("x24b2rmtvv"); } </script>
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											using Segment; // initialize the project #{source.owner.login}/#{source.slug}... Analytics.Initialize("YOUR_WRITE_KEY");
									Node:
									(type) c
									(layer)3
										Element:p
											You only need to initialize once at the start of your program. You can then keep using the
										Element:code
											Analytics
											singleton anywhere in your code.
									Node:
									(type) c
									(layer)3
										Element:p
											The default initialization settings are production-ready and queue messages on another thread before sending any requests. In development you might want to use
										Element:a
											development settings
											.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Identify
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								identify
								lets you tie a user to their actions and record traits about them. It includes a unique User ID and any optional traits you know about them.
						Node:
						(type) c
						(layer)2
							Element:p
								We recommend calling
							Element:code
								identify
								after a user registers, every time a user logs in and upon loading any pages that are accessible by a logged in user. You can read more about our
							Element:code
								identify
								best practices
							Element:a
								here
								.
						Node:
						(type) c
						(layer)2
							Element:p
								Example
							Element:code
								identify
								call:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								Analytics.Client.Identify("019mr8mf4r", new Traits() { { "name", "#{ user.name }" }, { "email", "#{ user.email }" }, { "friends", 29 } });
						Node:
						(type) c
						(layer)2
							Element:p
								This call is identifying the user by his unique User ID (the one you know him by in your database) and labeling him with
							Element:code
								name
								,
							Element:code
								email
								, and
							Element:code
								friends
								traits.
						Node:
						(type) c
						(layer)2
							Element:p
								The
							Element:code
								identify
								call has the following fields:
						Node:
						(type) c
						(layer)2
							Element:table
							Element:tr
							Element:td
							Element:code
								userId
							Element:em
								String
							Element:td
								The ID for this user in your database.
							Element:tr
							Element:td
							Element:code
								Traits
							Element:em
								Traits, optional
							Element:td
								A dictionary of traits you know about the user. Things like:
							Element:code
								email
								,
							Element:code
								name
								or
							Element:code
								friends
								.
							Element:tr
							Element:td
							Element:code
								options
							Element:em
								Options, optional
							Element:td
								A custom object which allows you to set a timestamp, an anonymous cookie id, or enable specific integrations.
						Node:
						(type) c
						(layer)2
							Element:p
								Find details on the
							Element:strong
								identify method payload
								in our
							Element:a
								Spec
								.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Track
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								track
								lets you record the actions your users perform. Every action triggers what we call an “event”, which can also have associated properties.
						Node:
						(type) c
						(layer)2
							Element:p
								You’ll want to track events that are indicators of success for your site, like
							Element:strong
								Signed Up
								,
							Element:strong
								Item Purchased
								or
							Element:strong
								Article Bookmarked
								.
						Node:
						(type) c
						(layer)2
							Element:p
								To get started, we recommend tracking just a few important events. You can always add more later!
						Node:
						(type) c
						(layer)2
							Element:p
								Example
							Element:code
								track
								call:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								Analytics.Client.Track("019mr8mf4r", "Item Purchased", new Properties() { { "revenue", 39.95 }, { "shipping", "2-day" } });
						Node:
						(type) c
						(layer)2
							Element:p
								This example
							Element:code
								track
								call tells us that your user just triggered the
							Element:strong
								Item Purchased
								event with a revenue of $39.95 and chose your hypothetical ‘2-day’ shipping.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								track
								event properties can be anything you want to record. In this case, revenue and shipping.
						Node:
						(type) c
						(layer)2
							Element:p
								The
							Element:code
								track
								call has the following fields:
						Node:
						(type) c
						(layer)2
							Element:table
							Element:tr
							Element:td
							Element:code
								userId
							Element:em
								String
							Element:td
								The ID for this user in your database.
							Element:tr
							Element:td
							Element:code
								event
							Element:em
								String
							Element:td
								The name of the event you’re tracking. We recommend human-readable names like
							Element:strong
								Song Played
								or
							Element:strong
								Status Updated
								.
							Element:tr
							Element:td
							Element:code
								properties
							Element:em
								Properties, optional
							Element:td
								A dictionary of properties for the event. If the event was
							Element:strong
								Product Added
								to cart, it might have properties like
							Element:code
								price
								or
							Element:code
								product
								.
							Element:tr
							Element:td
							Element:code
								options
							Element:em
								Options, optional
							Element:td
								A custom object which allows you to set a timestamp, an anonymous cookie id, or enable specific integrations.
						Node:
						(type) c
						(layer)2
							Element:p
								Find details on
							Element:strong
								best practices in event naming
								as well as the
							Element:strong
								in our
							Element:code
								track
								method payload
							Element:a
								Spec
								.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Page
						Node:
						(type) c
						(layer)2
							Element:p
								The
							Element:a
								method lets you record page views on your website, along with optional extra information about the page being viewed.
							Element:code
								page
						Node:
						(type) c
						(layer)2
							Element:p
								Example
							Element:code
								page
								call:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								Analytics.Client.Page("019mr8mf4r", "Login", new Properties() { { "path", "/login" }, { "title", "Initech Login" } });
						Node:
						(type) c
						(layer)2
							Element:p
								The
							Element:code
								page
								call has the following fields:
						Node:
						(type) c
						(layer)2
							Element:table
							Element:tr
							Element:td
							Element:code
								userId
							Element:em
								String
							Element:td
								The ID for this user in your database.
							Element:tr
							Element:td
							Element:code
								name
							Element:em
								String
							Element:td
								The webpage name you’re tracking. We recommend human-readable names like
							Element:strong
								Login
								or
							Element:strong
								Register
								.
							Element:tr
							Element:td
							Element:code
								category
							Element:em
								String
							Element:td
								The webpage category. If you’re making a news app, the category could be
							Element:strong
								Sports
								.
							Element:tr
							Element:td
							Element:code
								properties
							Element:em
								Properties, optional
							Element:td
								A dictionary of properties for the webpage visit. If the event was
							Element:strong
								Login
								, it might have properties like
							Element:code
								path
								or
							Element:code
								title
								.
							Element:tr
							Element:td
							Element:code
								options
							Element:em
								Options, optional
							Element:td
								A custom object which allows you to set a timestamp, an anonymous cookie id, or enable specific integrations.
						Node:
						(type) c
						(layer)2
							Element:p
								Find details on the
							Element:strong
								in our
							Element:code
								page
								payload
							Element:a
								Spec
								.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Screen
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								screen
								lets you record mobile screen views from your web servers, along with optional extra information about the page being viewed.
						Node:
						(type) c
						(layer)2
							Element:p
								Example
							Element:code
								screen
								call:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								Analytics.Client.Screen("019mr8mf4r", "Register", new Properties() { { "type", "facebook" } });
						Node:
						(type) c
						(layer)2
							Element:p
								The
							Element:code
								screen
								call has the following fields:
						Node:
						(type) c
						(layer)2
							Element:table
							Element:tr
							Element:td
							Element:code
								userId
							Element:em
								String
							Element:td
								The ID for this user in your database.
							Element:tr
							Element:td
							Element:code
								name
							Element:em
								String
							Element:td
								The screen name you’re tracking. We recommend human-readable names like
							Element:strong
								Login
								or
							Element:strong
								Register
								.
							Element:tr
							Element:td
							Element:code
								category
							Element:em
								String
							Element:td
								The screen category. If you’re making a news app, the category could be
							Element:strong
								Sports
								.
							Element:tr
							Element:td
							Element:code
								properties
							Element:em
								Properties, optional
							Element:td
								A dictionary of properties for the screen view. If the screen is
							Element:strong
								Restaurant Reviews
								, it might have properties like
							Element:code
								reviewCount
								or
							Element:code
								restaurantName
								.
							Element:tr
							Element:td
							Element:code
								options
							Element:em
								Options, optional
							Element:td
								A custom object which allows you to set a timestamp, an anonymous cookie id, or enable specific integrations.
						Node:
						(type) c
						(layer)2
							Element:p
								Find more details about
							Element:code
								screen
								including the
							Element:strong
								in our
							Element:code
								screen
								payload
							Element:a
								Spec
								.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Group
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								group
								lets you associate an
							Element:a
								identified user
								with a group. A group could be a company, organization, account, project or team! It also lets you record custom traits about the group, like industry or number of employees.
						Node:
						(type) c
						(layer)2
							Element:p
								This is useful for tools like
							Element:a
								Intercom
								,
							Element:a
								Preact
								and
							Element:a
								Totango
								, as it ties the user to a
							Element:strong
								group
								of other users.
						Node:
						(type) c
						(layer)2
							Element:p
								Example
							Element:code
								group
								call:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								Analytics.Client.Group("userId", "groupId", new Traits() { { "name", "Initech, Inc." }, { "website", "http://www.initech.com" } });
						Node:
						(type) c
						(layer)2
							Element:p
								The
							Element:code
								group
								call has the following fields:
						Node:
						(type) c
						(layer)2
							Element:table
							Element:tr
							Element:td
							Element:code
								userId
							Element:em
								String
							Element:td
								The ID for this user in your database.
							Element:tr
							Element:td
							Element:code
								groupId
							Element:em
								String
							Element:td
								The ID for this group in your database.
							Element:tr
							Element:td
							Element:code
								traits
							Element:em
								Traits, optional
							Element:td
								A dictionary of traits you know about the group. Things like:
							Element:code
								ma,e
								or
							Element:code
								website
								.
							Element:tr
							Element:td
							Element:code
								options
							Element:em
								Options, optional
							Element:td
								A custom object which allows you to set a timestamp, an anonymous cookie id, or enable specific integrations.
						Node:
						(type) c
						(layer)2
							Element:p
								Find more details about
							Element:code
								group
								including the
							Element:strong
								in our
							Element:code
								group
								payload
							Element:a
								Spec
								.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Alias
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								alias
								is how you associate one identity with another. This is an advanced method, but it is required to manage user identities successfully in
							Element:em
								some
								of our integrations.
						Node:
						(type) c
						(layer)2
							Element:p
								In
							Element:a
								Mixpanel
								it’s used to associate an anonymous user with an identified user once they sign up. For
							Element:a
								KISSmetrics
								, if your user switches IDs, you can use ‘alias’ to rename the ‘userId’.
						Node:
						(type) c
						(layer)2
							Element:p
								Example
							Element:code
								alias
								call:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								Analytics.Client.Alias("previousId", "userId")
						Node:
						(type) c
						(layer)2
							Element:p
								Here’s a full example of how we might use the
							Element:code
								alias
								call:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								// the anonymous user does actions ... Analytics.Client.Track("anonymous_user", "Anonymous Event"); // the anonymous user signs up and is aliased Analytics.Client.Alias("anonymous_user", "identified@gmail.com"); // the identified user is identified Analytics.Client.Identify("identified@gmail.com", new Traits() { plan: "Free" }); // the identified user does actions ... Analytics.Client.Track("identified@gmail.com", "Identified Action");
						Node:
						(type) c
						(layer)2
							Element:p
								For more details about
							Element:code
								alias
								, including the
							Element:strong
								, check out our
							Element:code
								alias
								call payload
							Element:a
								Spec
								.
						Node:
						(type) c
						(layer)2
							Element:hr
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Development Settings
						Node:
						(type) c
						(layer)2
							Element:p
								You can use this initialization during development while testing the library.
							Element:code
								SetAsync(false)
								will make sure the library makes a request to our servers every time it’s called.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								Analytics.Initialize("YOUR_WRITE_KEY", new Config().SetAsync(false));
						Node:
						(type) c
						(layer)2
							Element:p
								Don’t forget to set async back to
							Element:code
								true
								for production, so that you can advantage of asynchronous flushing on a different thread.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Historical Import
						Node:
						(type) c
						(layer)2
							Element:p
								You can import historical data by adding the
							Element:code
								timestamp
								argument to any of your method calls. This can be helpful if you’ve just switched to Segment.
						Node:
						(type) c
						(layer)2
							Element:p
								Historical imports can only be done into integrations that can accept historical timestamp’ed data. Most analytics tools like Mixpanel, Amplitude, Kissmetrics, etc. can handle that type of data just fine. One common integration that does not accept historical data is Google Analytics since their API cannot accept historical data.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:strong
								Note:
								If you’re tracking things that are happening right now, leave out the
							Element:code
								timestamp
								and our servers will timestamp the requests for you.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								Analytics.Client.Track("sadi89e2jd", "Workout Logged", new Properties() { { "distance", "10 miles" }, { "city", "Boston" }, }, new Options() .SetTimestamp(new DateTime(2010, 1, 18)) );
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Selecting Integrations
						Node:
						(type) c
						(layer)2
							Element:p
								The
							Element:code
								alias
								,
							Element:code
								group
								,
							Element:code
								identify
								,
							Element:code
								page
								and
							Element:code
								track
								calls can all be passed an object of
							Element:code
								options
								that lets you turn certain integrations on or off. By default all integrations are enabled.
						Node:
						(type) c
						(layer)2
							Element:p
								You can specify which analytics integrations you want each action to go to.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								Analytics.Client.Identify("hj2kf92ds212", new Traits() { { "email", "tom@initech.com" }, { "name", "Tom Smykowski" }, }, new Options() .SetIntegration("all", false) .SetIntegration("KISSmetrics", true) );
						Node:
						(type) c
						(layer)2
							Element:p
								In this case, we’re specifying that we want this identify to only go to KISSmetrics.
							Element:code
								"all", false
								says that no integration should be enabled unless otherwise specified.
							Element:code
								{ "KISSmetrics", true }
								turns on KISSmetrics, etc.
						Node:
						(type) c
						(layer)2
							Element:p
								Integration flags are
							Element:strong
								case sensitive
								and match
							Element:a
								the integration’s name in the docs
								(i.e. “AdLearn Open Platform”, “awe.sm”, “MailChimp”, etc.).
						Node:
						(type) c
						(layer)2
							Element:p
							Element:strong
								Note:
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:p
								Available at the business level, filtering track calls can be done right from the Segment UI on your source schema page. We recommend using the UI if possible since it’s a much simpler way of managing your filters and can be updated with no code changes on your side.
							Element:li
							Element:p
								If you are on a grandfathered plan, events sent server-side that are filtered through the Segment dashboard will still count towards your API usage.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Context
						Node:
						(type) c
						(layer)2
							Element:p
								If you’re running a web server, you might want to send context variables such as
							Element:code
								userAgent
								or
							Element:code
								ip
								with your
							Element:code
								page
								or
							Element:code
								screen
								calls. You can do so by setting the
							Element:code
								Context
								in the
							Element:code
								Options
								object.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								Analytics.Client.Page("019mr8mf4r", "Login", new Properties() { { "path", "/login" }, { "title", "Initech Login" } }, new Options() .SetContext (new Context () { { "ip", "12.212.12.49" }, { "language", "en-us" }, { "Google Analytics", new Dict() { { "clientId", User.ClientId } } } });
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Anonymous ID
						Node:
						(type) c
						(layer)2
							Element:p
								By default, the .Net library requires all messages to have a
							Element:code
								userId
								. If you would like to use an
							Element:code
								anonymousId
								, you can pass it in with options.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								Analytics.Client.Page(null, "Login", new Properties(), new Options() .SetAnonymousId("some-id"));
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Nested Properties
						Node:
						(type) c
						(layer)2
							Element:p
								You can provide nested properties, like so:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								Analytics.Client.Identify("hj2kf92ds212", new Traits() { { "email", "tom@initech.com" }, { "name", "Tom Smykowski" }, { "address", new Dict() { { "street", "123 Fake Street" }, { "city", "Boston" } }} });
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Batching
						Node:
						(type) c
						(layer)2
							Element:p
								Our libraries are built to support high performance environments. That means it is safe to use Analytics.NET on a web server that’s serving hundreds of requests per second.
						Node:
						(type) c
						(layer)2
							Element:p
								By default (in async mode), this library will start a single seperate thread on initialization, and flush all messages on that thread. That means every method you call
							Element:strong
								does not
								result in an HTTP request, but is queued in memory instead. Messages are flushed in batch in the background, which allows for much faster operation.
						Node:
						(type) c
						(layer)2
							Element:p
								There is a maximum of
							Element:code
								500kb
								per batch request and
							Element:code
								15kb
								per call.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											How do I turn batching off?
									Node:
									(type) c
									(layer)3
										Element:p
											Sometimes you might not want batching (eg. when debugging, or in short-lived programs). You can turn off batching by setting the
										Element:code
											async
											argument to
										Element:code
											false
											, and your requests will always be sent in a blocking manner.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											Analytics.Initialize("YOUR_WRITE_KEY", new Config().SetAsync(false));
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											What happens if there are just too many messages?
									Node:
									(type) c
									(layer)3
										Element:p
											If the module detects that it can’t flush faster than it’s receiving messages, it’ll simply stop accepting messages. This means your program will never crash because of a backing up analytics queue. The maximum size of the queue defaults to
										Element:code
											10000
											, and here’s how you can change it:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											Analytics.Initialize("YOUR_WRITE_KEY", new Config().SetMaxQueueSize(10000));
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											How do I flush right now?!
									Node:
									(type) c
									(layer)3
										Element:p
											You can also flush on demand. For example, at the end of your program, you’ll want to flush to make sure there’s nothing left in the queue. Just call the
										Element:code
											Flush
											method:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											Analytics.Client.Flush();
									Node:
									(type) c
									(layer)3
										Element:p
											This method will block until all messages are flushed.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											How do I dispose of the flushing thread at the end of my program?
									Node:
									(type) c
									(layer)3
										Element:p
											The Analytics client implements the
										Element:code
											IDisposable
											interface, and will turn off its flushing thread when you call
										Element:code
											Dispose
											.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											Analytics.Client.Dispose();
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Configuration
						Node:
						(type) c
						(layer)2
							Element:p
								If you hate defaults, than you’ll love how configurable the Analytics.NET is. Check out these gizmos:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								Analytics.Initialize("YOUR_WRITE_KEY", new Config() .SetAsync(true) .SetTimeout(TimeSpan.FromSeconds(10)) .SetMaxQueueSize(10000));));
						Node:
						(type) c
						(layer)2
							Element:table
							Element:tr
							Element:td
							Element:code
								async
							Element:em
								boolean
							Element:td
							Element:code
								true
								to flush on a different thread,
							Element:code
								false
								to flush immediately on the same thread.
							Element:tr
							Element:td
							Element:code
								timeout
							Element:em
								TimeSpan
							Element:td
								The amount of time to wait before calling the HTTP request a timeout.
							Element:tr
							Element:td
							Element:code
								maxQueueSize
							Element:em
								int
							Element:td
								The maximum number of messages to allow into the queue before no new message are accepted.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Multiple Clients
						Node:
						(type) c
						(layer)2
							Element:p
								Different parts of your app may require different Segment . In that case, you can initialize different
							Element:code
								Analytics.Client
								instances instead of using the singleton.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								Client client = new Client("YOUR_WRITE_KEY", new Config() .SetAsync(false) .SetTimeout(TimeSpan.FromSeconds(10)) .SetMaxQueueSize(10000)); client.Track(...);
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Troubleshooting
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Logging
									Node:
									(type) c
									(layer)3
										Element:p
										Element:code
											Analytics.NET
											has detailed logging, which you can enable by attaching your own handler, like so:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											using Segment; Segment.Logger.Handlers += Logging_Handler; void Logging_Handler(Level level, string message, Dict args) { if (args != null) { foreach (string key in args.Keys) { message += String.Format(" {0}: {1},", "" + key, "" + args[key]); } } Console.WriteLine(String.Format("[Analytics] [{0}] {1}", level, message)); }
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Json.NET
									Node:
									(type) c
									(layer)3
										Element:p
										Element:code
											Analytics.NET
											uses
										Element:a
											Json.NET
											to serialize json payloads. If you have an older version of
										Element:code
											Json.NET
											in your build path,
										Element:code
											Analytics.NET
											could create incomplete json payloads, which can cause strange API responses. If you’re seeing issues, try updating
										Element:code
											Json.NET
											.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Mono
									Node:
									(type) c
									(layer)3
										Element:p
										Element:code
											Analytics.NET
											has been tested and works in Mono.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Troubleshooting
						Node:
						(type) c
						(layer)2
							Element:p
								If you’re having trouble we have a few tips that help common problems.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											No events in my debugger
									Node:
									(type) c
									(layer)3
										Element:ol
										Element:li
										Element:p
											Double check that you’ve followed all the steps in the
										Element:a
											Quickstart
											.
										Element:li
										Element:p
											Make sure that you’re calling one of our API methods once the library is successfully installed—
										Element:a
											,
										Element:code
											identify
										Element:a
											, etc.
										Element:code
											track
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											No events in my end tools
									Node:
									(type) c
									(layer)3
										Element:ol
										Element:li
										Element:p
											Double check your credentials for that integration.
										Element:li
										Element:p
											Make sure that the integration you are troubleshooting can accept server-side API calls. Compatibility is shown on the
										Element:a
											integration docs
											pages and on the sheets on your Segment source Integrations page.
										Element:li
										Element:p
											Check out the
										Element:a
											integration’s documentation
											to see if there are other requirements for using the method and integration you’re trying to get working.
									Node:
									(type) c
									(layer)3
										Element:hr
									Node:
									(type) c
									(layer)3
										Element:p
											If you have any questions or see anywhere we can improve our documentation, please
										Element:a
											let us know
											or kick off a conversation in the
										Element:a
											Segment Community
											!
									Node:
									(type) c
									(layer)3
										Element:footer
										Element:span
										Element:span
											Was this document helpful?
										Element:span
										Element:label
										Element:span
											Yes
										Element:label
										Element:span
											No
									Node:
									(type) c
									(layer)3
										Element:i
			Node:
			(type) h1
			(layer)1
				Element:h1
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:a
					Overview
				Element:li
				Element:a
					ActiveCampaign
				Element:li
				Element:a
					AMP
				Element:li
				Element:a
					analytics.js
				Element:li
				Element:a
					Android
				Element:li
				Element:a
					Android Wear
				Element:li
				Element:a
					Clojure
				Element:li
				Element:a
					Customer.io
				Element:li
				Element:a
					Drip
				Element:li
				Element:a
					Facebook Ads
				Element:li
				Element:a
					Facebook Lead Ads
				Element:li
				Element:a
					Go
				Element:li
				Element:a
					Google AdWords
				Element:li
				Element:a
					HTTP
				Element:li
				Element:a
					HubSpot
				Element:li
				Element:a
					Intercom
				Element:li
				Element:a
					iOS
				Element:li
				Element:a
					Iterable
				Element:li
				Element:a
					Java
				Element:li
				Element:a
					Klaviyo
				Element:li
				Element:a
					Mailchimp
				Element:li
				Element:a
					Mailjet
				Element:li
				Element:a
					Marketo
				Element:li
				Element:a
					Node
				Element:li
				Element:a
					Nudgespot
				Element:li
				Element:a
					PHP
				Element:li
				Element:a
					Python
				Element:li
				Element:a
					Ruby
				Element:li
				Element:a
					Salesforce
				Element:li
				Element:a
					Selligent
				Element:li
				Element:a
					SendGrid
				Element:li
				Element:a
					Stripe
				Element:li
				Element:a
					Twilio
				Element:li
				Element:a
					Vero
				Element:li
				Element:a
					Xamarin
				Element:li
				Element:a
					Zendesk
				Element:li
				Element:a
					.NET
