Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					Mixpanel Integration
			Node:
			(type) c
			(layer)1
				Element:p
					Segment makes it easy to send your data to
				Element:a
					Mixpanel
					(and lots of other integrations). Once you've tracked your data through our open source
				Element:a
					libraries
					we'll translate and route your data to Mixpanel in the format they understand.
			Node:
			(type) c
			(layer)1
				Element:p
					Our Mixpanel integration code is open sourced on Github. Feel free to check it out:
				Element:a
					iOS
					,
				Element:a
					Android
					,
				Element:a
					JS
					,
				Element:a
					Server
					.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Getting Started
						Node:
						(type) c
						(layer)2
							Element:p
								When you toggle on Mixpanel in Segment, this is what happens:
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
								Our CDN is updated within 5-10 minutes. Then our snippet will start asynchronously loading mixpanel.js onto your page. This means you should remove Mixpanel’s snippet.
							Element:li
								Since Mixpanel only records custom events and custom user data, no events or users will appear in Mixpanel until you start using the API outlined below.
							Element:li
								Any iOS and Android apps running our mobile sources will start sending data to Mixpanel. New settings will take up to an hour to propagate to all of your existing users. Or if you just added the
							Element:a
								iOS
								or
							Element:a
								Android
								library to your app code, it’ll be instantaneous!
						Node:
						(type) c
						(layer)2
							Element:hr
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Page
						Node:
						(type) c
						(layer)2
							Element:p
							Element:a
								Page
								calls are transformed to Mixpanel Track events by the default ON: “Track All Pages to Mixpanel with a Consolidated Event Name” Mixpanel integration settings. This will send all
							Element:code
								page
								and
							Element:code
								screen
								calls with a single name,
							Element:code
								Loaded a Page
								or
							Element:code
								Loaded a Screen
								respectively, with the calls’ properties in the body. This gives the best experience of Page/Screen analytics with Mixpanel’s reporting.
						Node:
						(type) c
						(layer)2
							Element:p
								If you want to track the page
							Element:code
								or
								screen` calls to Mixpanel with the name or category in the event name, we offer three more options for sending page/screen calls.
						Node:
						(type) c
						(layer)2
							Element:blockquote
							Element:p
								Note: Beginning with Consolidate Page calls, the following options are each
							Element:em
								mutually exclusive
								.
							Element:a
								See the code for details
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
								0) [default]
							Element:strong
								Track All Pages to Mixpanel with a Consolidated Event Name
							Element:li
								1)
							Element:strong
								Track all Pages to Mixpanel
							Element:li
								2)
							Element:strong
								Track Categorized Pages to Mixpanel
								[default]
							Element:li
								3)
							Element:strong
								Track Named Pags to Mixpanel
								[default]
						Node:
						(type) c
						(layer)2
							Element:p
								If you select
							Element:strong
								Track all Pages to Mixpanel
								, all
							Element:code
								page
								calls regardless of how you have customized it will send a
							Element:code
								Loaded A Page
								. Even if you have the other options enabled, we will only send this call to prevent double counting your pageviews.
						Node:
						(type) c
						(layer)2
							Element:p
								If you select
							Element:strong
								Track Categorized Pages to Mixpanel
								, we will send a
							Element:code
								Viewed [category] Page
								event.
						Node:
						(type) c
						(layer)2
							Element:p
								If you select
							Element:strong
								Track Named Pages to Mixpanel
								, we will send a
							Element:code
								Viewed [name] Page
								event.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:strong
								Note
								: If both option 2 and 3 are enabled, we will give precedence to
							Element:code
								category
								. If you pass both
							Element:code
								category
								and
							Element:code
								name
								, (e.g.
							Element:code
								analytics.page('category', 'name');
								), we will send a
							Element:code
								Viewed category name Page
								to Mixpanel.
						Node:
						(type) c
						(layer)2
							Element:p
								In summary, Segment will only send 1 event to Mixpanel per
							Element:code
								page
								call.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Identify
						Node:
						(type) c
						(layer)2
							Element:p
								The first thing you’ll want to do is to
							Element:a
								your users so Mixpanel knows who they are. You’ll use the
							Element:code
								identify
							Element:a
								method to accomplish this.
							Element:code
								identify
						Node:
						(type) c
						(layer)2
							Element:p
							Element:a
								takes the unique
							Element:code
								identify
							Element:code
								userId
								of a user and any
							Element:code
								traits
								you know about them.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Client Side
									Node:
									(type) c
									(layer)3
										Element:p
											When you call
										Element:a
											from the client in either a browser via Analytics.js or one of our mobile SDKs a bunch of things happen:
										Element:code
											identify
									Node:
									(type) c
									(layer)3
										Element:p
											We start by recognizing and translating our
										Element:a
											special traits
											so that they fit the expectations of Mixpanel’s API. The table below shows the mappings. You’ll pass the key on the left into Segment and we will transform it to the key on the right before sending to Mixpanel.
									Node:
									(type) c
									(layer)3
										Element:table
										Element:tr
										Element:td
										Element:code
											created
										Element:td
										Element:code
											$created
										Element:tr
										Element:td
										Element:code
											email
										Element:td
										Element:code
											$email
										Element:tr
										Element:td
										Element:code
											firstName
										Element:td
										Element:code
											$first_name
										Element:tr
										Element:td
										Element:code
											lastName
										Element:td
										Element:code
											$last_name
										Element:tr
										Element:td
										Element:code
											name
										Element:td
										Element:code
											$name
										Element:tr
										Element:td
										Element:code
											username
										Element:td
										Element:code
											$username
										Element:tr
										Element:td
										Element:code
											phone
										Element:td
										Element:code
											$phone
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Register Super Properties
									Node:
									(type) c
									(layer)3
										Element:p
											By default, each trait (i.e. properties in an
										Element:code
											identify
											call) is registered as a super property. This does not require passing a
										Element:code
											userId
											in the
										Element:code
											identify
											call. You can pass a
										Element:code
											traits
											object by itself and it will still register the traits as super properties.
									Node:
									(type) c
									(layer)3
										Element:p
											We also allow you to disable the default behavior and register super properties explicitly by unchecking
										Element:code
											Set All Traits as Super Properties or People Properties By Default
											and explicitly specifying in the traits or properties you want us to register as super properties in Segment’s Mixpanel Integration panel.
										Element:a
											Check out the documentation here
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Set People Properties
												Node:
												(type) c
												(layer)4
													Element:p
														If you’ve enabled Mixpanel People in your Segment settings, we also call Mixpanel’s
													Element:code
														people.set
														with the same
													Element:code
														traits
														object. There’s no need for an additional API call to populate Mixpanel People.
												Node:
												(type) c
												(layer)4
													Element:p
														We also allow you to disable the default behavior and set people properties explicitly by unchecking
													Element:code
														Set All Traits as Super Properties or People Properties By Default
														and explicitly specifying in the traits or properties you want us to set as people properties in the Mixpanel integration panel in Segment. We’ll automatically include any trait on an identify that matches one of Mixpanel’s special properties, which you can see in the table above.
													Element:a
														Check out the documentation here
												Node:
												(type) c
												(layer)4
													Element:p
														If you call
													Element:code
														identify
														without a
													Element:code
														userId
														, it may not set the People Properties inside Mixpanel, but it will cache those traits for later use with Segment’s
													Element:code
														analytics.js
														. It is best practice to always call
													Element:code
														identify
														with a
													Element:code
														userId
														.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Server Side
									Node:
									(type) c
									(layer)3
										Element:p
											When you call
										Element:a
											from any of our server-side libraries, we create or update the user in Mixpanel People with the traits you provide. Calling
										Element:code
											identify
										Element:a
											doesn’t create any users in the standard Mixpanel reporting interface since that only supports
										Element:code
											identify
										Element:a
											events.
										Element:code
											track
									Node:
									(type) c
									(layer)3
										Element:p
											You won’t see server-side
										Element:code
											traits
											appear as super-properties on any events you track. This is because Mixpanel
										Element:a
											has no REST API
											for setting
										Element:a
											super properties
											for a
										Element:code
											distinct_id
											, so
										Element:a
											calls only affect Mixpanel People.
										Element:code
											identify
									Node:
									(type) c
									(layer)3
										Element:p
											For Mixpanel People, it’s important to
										Element:a
											a user before you call
										Element:code
											identify
										Element:a
											. A
										Element:code
											track
										Element:a
											without an
										Element:code
											track
										Element:a
											won’t create a user in Mixpanel People.
										Element:code
											identify
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Track
						Node:
						(type) c
						(layer)2
							Element:p
								Because Mixpanel is an event tracking analytics tool, you’ll want to
							Element:a
								your user’s actions. The more useful events you
							Element:code
								track
							Element:a
								, the better Mixpanel becomes.
							Element:code
								track
						Node:
						(type) c
						(layer)2
							Element:p
								You should use the
							Element:a
								method to accomplish this. The Segment
							Element:code
								track
							Element:a
								method maps events and event properties directly to Mixpanel events and event properties.
							Element:code
								track
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Track Charge
									Node:
									(type) c
									(layer)3
										Element:p
											If Mixpanel People is enabled in your Segment settings and you include an event property called
										Element:code
											revenue
											, we’ll track a charge to the current user.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Reserved Properties
									Node:
									(type) c
									(layer)3
										Element:p
											There are two strings to avoid when naming event properties that will be sent to Mixpanel:
										Element:code
											length
											and
										Element:code
											bucket
											.
										Element:code
											length
											is interpreted as the JavaScript
										Element:code
											.length
											method, which causes the
										Element:code
											mixpanel.track
											call to fail silently.
										Element:code
											bucket
											is a reserved property that was used in the early days of Mixpanel. If you include a property called
										Element:code
											bucket
											in your events, it will not show up in the UI. However, it will not cause the
										Element:code
											mixpanel.track
											call to fail.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Alias
						Node:
						(type) c
						(layer)2
							Element:p
								Calling
							Element:a
								is required for Mixpanel in all libraries in order to connect anonymous visitors to identified users.
							Element:code
								alias
						Node:
						(type) c
						(layer)2
							Element:p
								As soon as you have a
							Element:code
								userId
								for a visitor that was previously anonymous you’ll need to
							Element:a
								their old anonymous
							Element:code
								alias
							Element:code
								id
								to the new
							Element:code
								userId
								. In Mixpanel only
							Element:strong
								one
								anonymous user history can be merged to
							Element:strong
								one
								identified user. For that reason you should only call
							Element:a
								once, right after a user registered, but before the first
							Element:code
								alias
							Element:a
								.
							Element:code
								identify
						Node:
						(type) c
						(layer)2
							Element:p
								You’ll also want to
							Element:a
								the action that caused the user to be identified or created. Read our
							Element:code
								track
							Element:a
								guide on how to identify new users
								to learn why.
						Node:
						(type) c
						(layer)2
							Element:p
								Read more about how Mixpanel recommends using
							Element:code
								alias
							Element:a
								in their docs
								.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:strong
								Note:
								Due to technical limitations with aliasing server-side, aliasing on the client is recommended whenever possible.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Aliasing From the Browser
									Node:
									(type) c
									(layer)3
										Element:p
											In client-side javascript you only need to pass the new identified
										Element:code
											userId
											. We will automatically alias the old anonymous
										Element:code
											id
											to your new
										Element:code
											userId
											.
									Node:
									(type) c
									(layer)3
										Element:p
											Here’s a javascript example where the new
										Element:code
											userId
											is
										Element:code
											12345
											:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											alias('12345'); identify('12345'); track('Signed Up');
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Aliasing Server-Side
									Node:
									(type) c
									(layer)3
										Element:p
											If an
										Element:code
											identify
											or
										Element:code
											track
											call arrives to Mixpanel with a new
										Element:code
											distinct_id
											too quickly after an
										Element:code
											alias
											call, there is a race condition between the event and the alias call. As long as your
										Element:code
											identify
											and
										Element:code
											track
											calls arrive ~1 second after the
										Element:code
											alias
											, this shouldn’t be an issue; when the alias queue is backed up, Mixpanel queues events as well, mitigating the race condition.
									Node:
									(type) c
									(layer)3
										Element:p
											However, in cases when events are processed too quickly, before their corresponding alias, your calls can result in split/duplicate profiles.
									Node:
									(type) c
									(layer)3
										Element:p
											Mixpanel’s client-side javasript library fixes this issue by continuing to send
										Element:code
											track
											calls to the original mixpanel
										Element:code
											distinct_id
											while the records update.
										Element:strong
											To leverage that protection and avoid creating split profiles and broken funnels, we recommend doing all aliasing for Mixpanel on the client side through Analytics.js
									Node:
									(type) c
									(layer)3
										Element:p
											However, in certain circumstances, despite the risk of duplicate profiles, you may still wish to send the calls server-side. In those cases, there are two options for calling
										Element:a
											from your servers:
										Element:code
											alias
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														In Conjunction with Client-Side Tracking
												Node:
												(type) c
												(layer)4
													Element:p
														If you’re tracking anonymous users on the client side either from a browser or one of our mobile SDK you’ll need to pass the Mixpanel
													Element:code
														distinct_id
														from the browser to your servers in order to
													Element:a
														it to the new
													Element:code
														alias
													Element:code
														userId
														.
												Node:
												(type) c
												(layer)4
													Element:p
														First, use
													Element:a
														to grab the Mixpanel
													Element:code
														analytics.ready
													Element:code
														distinct_id
														:
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														analytics.ready(function(){ var anonId = mixpanel.get_distinct_id(); });
												Node:
												(type) c
												(layer)4
													Element:p
														Next, pass the
													Element:code
														anonId
														to your server and
													Element:a
														,
													Element:code
														alias
													Element:a
														, and
													Element:code
														identify
													Element:a
														your new user.
													Element:code
														track
												Node:
												(type) c
												(layer)4
													Element:p
														Here’s a Node example where the new
													Element:code
														userId
														is
													Element:code
														12345
														:
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														analytics.alias({ previousId: anonId, userId: '12345' }); analytics.flush(); // flush the alias analytics.identify({userId: '12345'}); analytics.track({ userId: '12345', event: 'Connected Facebook' });
												Node:
												(type) c
												(layer)4
													Element:p
														As you can see we recommend flushing the
													Element:a
														to give Mixpanel a bit of extra time to process it on their side before you
													Element:code
														alias
													Element:a
														and
													Element:code
														identify
													Element:a
														.
													Element:code
														track
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Tracking Exclusively Server Side
												Node:
												(type) c
												(layer)4
													Element:p
														If you’re tracking anonymous users in one of our server-side libraries that makes things a lot easier. All you have to do is
													Element:a
														the anonymous
													Element:code
														alias
													Element:code
														id
														to the new
													Element:code
														userId
														.
												Node:
												(type) c
												(layer)4
													Element:p
														Here’s a Python example of the
													Element:a
														,
													Element:code
														alias
													Element:a
														,
													Element:code
														identify
													Element:a
														sequence where the anonymous
													Element:code
														track
													Element:code
														id
														was
													Element:code
														92fh49fqh9849hf
														and the new
													Element:code
														userId
														is
													Element:code
														12345
														:
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														analytics.alias('92fh49fqh9849hf', '12345') analytics.flush() # flush the alias analytics.identify('12345') analytics.track('12345', 'Registered')
												Node:
												(type) c
												(layer)4
													Element:p
														As you can see we recommend flushing the
													Element:a
														to give Mixpanel a bit of extra time to process it on their side before you
													Element:code
														alias
													Element:a
														and
													Element:code
														identify
													Element:a
														.
													Element:code
														track
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Collecting contextual properties
									Node:
									(type) c
									(layer)3
										Element:p
											If you are sending events server side, depending on your library (JS, mobile, or server), we will map as many
										Element:a
											Mixpanel supported contextual properties
											as we can.
									Node:
									(type) c
									(layer)3
										Element:p
											You can check out which
										Element:a
											context properties are being automatically collected by any Segment library
											. If you are using a library that does not support a certain contextual property, you can still send them manually with your events, as long as it is sent in accordance with our
										Element:a
											spec
											.
									Node:
									(type) c
									(layer)3
										Element:p
											For example, if you want to send
										Element:code
											utm
											parameters with your server side library, you can attach a
										Element:code
											context.campaign
											object like this:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											// node library analytics.track({ userId: '019mr8mf4r', event: 'Purchased an Item', properties: { revenue: 39.95, shippingMethod: '2-day' }, context: { campaign: { name: "TPS Innovation Newsletter", source: "Newsletter", medium: "email", term: "tps reports", content: "image link" } } });
									Node:
									(type) c
									(layer)3
										Element:p
											We do not map
										Element:code
											$library_version
											since that is reserved for Mixpanel’s library version, not Segment’s. We do not map to
										Element:code
											$brand
											.
									Node:
									(type) c
									(layer)3
										Element:hr
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Features
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Autotrack
									Node:
									(type) c
									(layer)3
										Element:p
											Mixpanel’s
										Element:a
											Autotrack
											feature is supported via Segment as long as you are using one of our client-side libraries (
										Element:a
											analytics.js
											,
										Element:a
											iOS
											,
										Element:a
											Android
											). Additionally, if you’re using analytics for Android or iOS, make sure your Mixpanel integration is bundled - otherwise Autotrack will not work. Once Mixpanel is installed via segment, all you have to do is
										Element:a
											enable the Autotrack feature for your Mixpanel account
											and it will start working.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											People
									Node:
									(type) c
									(layer)3
										Element:p
											By default we don’t send data to Mixpanel People since it usually requires upgrading your Mixpanel account. If you want to enable Mixpanel People simply check the box for:
										Element:strong
											Use Mixpanel People
											from your source integrations page in the Mixpanel sheet.
									Node:
									(type) c
									(layer)3
										Element:p
											If you want to add people properties in Mixpanel before you know the user’s unique databse
										Element:code
											userId
											you can identify
										Element:code
											traits
											without the
										Element:code
											userId
											.
										Element:strong
											Note:
											this only works in Analytics.js and our mobile SDKs.
									Node:
									(type) c
									(layer)3
										Element:p
											Your
										Element:code
											identify
											call would look like this in Analytics.js if you only want to set people properties without a
										Element:code
											userId
											:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											analytics.identify({ email: 'friends@segment.com', name: 'Ian Taylor' })
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											UTM Campaign Parameters
									Node:
									(type) c
									(layer)3
										Element:p
											Since Segment’s client-side javascript library (
										Element:code
											analytics.js
											) loads
										Element:code
											mixpanel.js
											in the background, you’ll get the exact same functionality of Mixpanel around UTM Campaign Paramters as you would when using Mixpanel directly.
									Node:
									(type) c
									(layer)3
										Element:p
										Element:a
											Read more in Mixpanel’s UTM docs
									Node:
									(type) c
									(layer)3
										Element:p
											In order to pass UTM parameters server-side, you’ll need to pass properties or traits of
										Element:code
											utm_source
											,
										Element:code
											utm_medium
											,
										Element:code
											utm_campaign
											,
										Element:code
											utm_content
											, and
										Element:code
											utm_term
											in your track and identify calls, respectively.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Explicitly Set People Properties and Super Properties
									Node:
									(type) c
									(layer)3
										Element:p
											We used to set all of your traits and properties as both Super Properties and People Properties (If you had Mixpanel People enabled) but now Mixpanel allows you to segment your reports by both People Properties and Super Properties. In order to give you better precision and control over what property or trait gets set as a Super Property or People Property, you can uncheck
										Element:code
											Set All Traits as Super Properties or People Properties By Default
											and pass in the properties or traits that you want to send to Mixpanel as People or Super Properties as shown below. We’ll still pass through all of Mixpanel’s special traits as People Properties so you only need to add the ones that aren’t on
										Element:a
											this list.
											Please note that we’ll only set People Properties off of .identify() calls.
									Node:
									(type) c
									(layer)3
										Element:p
										Element:img
									Node:
									(type) c
									(layer)3
										Element:p
											Assuming these are properties on your events, in addition to sending the calls to Mixpanel, we call this under the covers for you.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											window.mixpanel.people.set ({cohort: 'organic signup' .....}); // sets a people property window.mixpanel.register ({firstTimeUser: true}); //registers a super property
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Increment
									Node:
									(type) c
									(layer)3
										Element:p
											If you need to increment event counts for Mixpanel people, there’s no need to add any extra code. All you have to do is tell us which events need to be incremented and we’ll take care of the rest:
									Node:
									(type) c
									(layer)3
										Element:p
										Element:img
									Node:
									(type) c
									(layer)3
										Element:p
											You can find this in the Advanced Options of your Mixpanel settings on your Segment integrations page.
									Node:
									(type) c
									(layer)3
										Element:p
											For each event name listed we will automatically call Mixpanel increment and also set a user trait of
										Element:code
											Last +
											.
									Node:
									(type) c
									(layer)3
										Element:p
											For example, if you add
										Element:strong
											Logged In
											to the list of increment events, we will increment a user trait called
										Element:strong
											Logged In
											and set a trait called
										Element:strong
											Last Logged In
											with the current date and time.
									Node:
									(type) c
									(layer)3
										Element:p
											If you’d like to add an increment for viewing a specific page or screen, ensure you have the setting “Track Named Pages” selected and use the dynamically generated event name under “Events to Increment in People.” For example,
										Element:code
											.page('Signup')
											would translate to “
										Element:em
											Viewed
											Signup
										Element:em
											Page
											“ and
										Element:code
											.screen('Listing')
											would translate to “
										Element:em
											Viewed
											Listing
										Element:em
											Screen
											“.
									Node:
									(type) c
									(layer)3
										Element:p
											Remember, we will only send 1 event per
										Element:code
											page
											call.
									Node:
									(type) c
									(layer)3
										Element:p
										Element:strong
											Note
											: Increment only works for “known users”, so if your track call is being made server-side, you need to pass in a userId. If your track call is being made client-side, you need to identify your user first.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Bypass “Last Seen” in Server-side Calls
									Node:
									(type) c
									(layer)3
										Element:p
											You can bypass the automatic re-setting of the “Last Seen” date property by passing
										Element:strong
											active
											with a value of
										Element:code
											false
											in the
										Element:code
											context
											object, as follows:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											analytics.identify(user_id='12345', traits={ 'name': 'Frank'}, context={ 'active': false })
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Reset Mixpanel Cookies
									Node:
									(type) c
									(layer)3
										Element:p
											When a user logs out, we recommend that you cal
										Element:code
											analytics.reset();
											to wipe Segment cookie. Currently this function is not mapped to Mixpanel’s reset method. If you are having issues with
										Element:code
											distinct_id
											such as not being matched with the right user, you should add this to your logout flow:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											analytics.ready(function(){ window.mixpanel.cookie.clear(); });
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											IP
									Node:
									(type) c
									(layer)3
										Element:p
											If an
										Element:code
											ip
											property is passed to Mixpanel, the value will be interpreted as the IP address of the request and therefore automatically parsed into Mixpanel geolocation properties (City, Country, Region). After that IP address has been parsed, they will throw out the IP address and only hold onto those resulting geolocation properties. As such, if you want to display an IP address as a property within the Mixpanel UI or within raw data, you will simply want to slightly modify the naming convention for that property.
									Node:
									(type) c
									(layer)3
										Element:p
											Instead of
										Element:code
											ip
											, you can use a property name of
										Element:code
											user IP
											or
										Element:code
											IP Address
											( whatever is most clear for your implementation). This way, Mixpanel won’t automatically interpret the IP address as an IP address, and instead store that value as a property on the event. You can read more
										Element:a
											here
											.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Ignore IP from Server to Disable Geo-location in Mixpanel People
									Node:
									(type) c
									(layer)3
										Element:p
											If you’d like to avoid having any ip address sent to Mixpanel and by doing so, turn off geo-location for server-side users, please pass the
										Element:code
											context.ip
											as 0.
									Node:
									(type) c
									(layer)3
										Element:p
											Here’s a python example:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											analytics.track(user_id=user.id, event='Ignore My IP', context={ 'ip': 0 })
									Node:
									(type) c
									(layer)3
										Element:p
											Please provide
										Element:code
											context.ip
											to all your
										Element:a
											,
										Element:code
											identify
										Element:a
											, and
										Element:code
											track
										Element:a
											calls to make sure Mixpanel doesn’t geo-locate your users.
										Element:code
											alias
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Push Notifications
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Device Connection Mode (Bundled Mobile SDK)
												Node:
												(type) c
												(layer)4
													Element:p
														We support Mixpanel push notifications automatically via the
													Element:a
														didRegisterForRemoteNotificationsWithDeviceToken method
														.
												Node:
												(type) c
												(layer)4
													Element:p
														For
													Element:em
														in-app
														notifications and surveys there is one additional step of setup required. By default, frameworks do not include the resource bundles necessary to render the notifications and surveys. To add these resources go to your resource bundle (see pic), click to “Add Item”, then “Add Other” then open the Analytics.framework folder and add the symlinked folder “Resources”.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:img
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Cloud Connection Mode (Unbundled/ Serverside)
												Node:
												(type) c
												(layer)4
													Element:p
														If you are using Mixpanel server side and you have access to your users’ device tokens, you can import into Mixpanel by sending the token via
													Element:code
														context.device.token
														as described in our
													Element:a
														specs
														with an
													Element:code
														identify
														call. We will send the token as Mixpanel’s special trait
													Element:code
														$ios_devices
														. This only works on iOS. In order to use push on Android, you must bundle the Mixpanel SDK.
												Node:
												(type) c
												(layer)4
													Element:p
														For example, using our
													Element:a
														node library
														:
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														analytics.identify({ userId: '019mr8mf4r', traits: { name: 'Michael Bolton', email: 'mbolton@initech.com', plan: 'Enterprise', friends: 42 }, context: { device: { token: 'ff15bc0c20c4aa6cd50854ff165fd265c838e5405bfeb9571066395b8c9da449' } } });
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Tracking Mixpanel Push Notification Open Rate
									Node:
									(type) c
									(layer)3
										Element:p
											To enable push tracking, click the checkbox within Mixpanel as explained in
										Element:a
											Mixpanel’s documentation
											. This feature allows push notification opens to be tracked as properties of an app open event, however this will miss pushes which are received when the app is already open.
									Node:
									(type) c
									(layer)3
										Element:p
											To add push open tracking, Mixpanel requires that on initialization Mixpanel is launched with options. Segment makes this available through the factory
										Element:code
											(instancetype)createWithLaunchOptions:(NSString *)token launchOptions:(NSDictionary *)launchOptions;
									Node:
									(type) c
									(layer)3
										Element:p
										Element:em
											Note
											: Push open tracking in Android is not currently supported by the Mixpanel Android library.
									Node:
									(type) c
									(layer)3
										Element:hr
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Troubleshooting
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											When Will I See Data from my Mobile App?
									Node:
									(type) c
									(layer)3
										Element:p
											If you already have an app deployed with the Segment library, and you just turned on Mixpanel mobile, it will take up to an hour for all your mobile users to refresh their Segment settings cache, and learn about the new service that you want to send to.
									Node:
									(type) c
									(layer)3
										Element:p
											After the settings cache refreshes, our library will automatically start sending data to Mixpanel.
									Node:
									(type) c
									(layer)3
										Element:p
											Also worth noting, Mixpanel’s SDK only submits requests to the Mixpanel servers when the app is backgrounded. That means you may see events in your Segment debugger while testing, but those requests won’t actually be forwarded to Mixpanel until the app gets sent to the background.
									Node:
									(type) c
									(layer)3
										Element:p
											If you are testing in Xcode remember you must first background the app, then the events will show up in Mixpanel. If you terminate the session without backgrounding those events will be lost.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											I’m seeing events come into Mixpanel but not people.
									Node:
									(type) c
									(layer)3
										Element:ol
										Element:li
											You’ll need to make sure you’re using
										Element:a
											. A Mixpanel track does not create users in Mixpanel People.
										Element:code
											identify
										Element:li
											Make sure to turn on the “People” setting so that all of your
										Element:a
											calls will be sent to Mixpanel’s People feature.
										Element:code
											identify
										Element:li
											Make sure you have disable the default filter in the Mixpanel People Explore tab.
									Node:
									(type) c
									(layer)3
										Element:hr
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Supported Sources and Connection Modes
						Node:
						(type) c
						(layer)2
							Element:table
							Element:tr
							Element:th
							Element:th
								Web
							Element:th
								Mobile
							Element:th
								Server
							Element:tr
							Element:td
								📱 Device-based
							Element:td
								✅
							Element:td
								✅
							Element:td
							Element:tr
							Element:td
								☁️ Cloud-based
							Element:td
								✅
							Element:td
								✅
							Element:td
								✅
						Node:
						(type) c
						(layer)2
							Element:p
								To learn more about about Connection Modes and what dictates which we support,
							Element:a
								see here
								.
						Node:
						(type) c
						(layer)2
							Element:p
								We offer an optional
							Element:strong
								Cloud-based
								Connection Mode for
							Element:strong
								Web
								data with Mixpanel. As a reminder, this removes the Mixpanel javascript library from your site, improving performance. However, there are a few disparities between the Cloud-based and Device-based connection modes to keep in mind brefore enabling it in the Segment app. When you enable the
							Element:strong
								Cloud-based
								integration mode, here’s what happens:
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
								Previously, `identify` calls sent through the server-side integration behaved as though the "Automatically set all Traits as Super Properties and People Properties" setting were enabled, and ignored any "Properties to send as People Properties" settings. It now respects both settings.
							Element:li
								Super properties set via `identify` calls will not be attached to track and page calls (these traits are stored in a user's browser storage Mixpanel's JavaScript SDK to store, and so disabling the SDK disables this functionality).
							Element:li
								Calls will no longer include screen width or height data
							Element:li
								Calls will no longer include `initial_referrer` or `initial_referrer_domain` data
						Node:
						(type) c
						(layer)2
							Element:p
								Segment offers a
							Element:strong
								Device-based
								Connection Mode for
							Element:strong
								Mobile
								data with Mixpanel. If you’d like to use those features that require client-based functionality, follow the steps above to ensure you have packaged the Mixpanel SDK with Segment’s.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Settings
						Node:
						(type) c
						(layer)2
							Element:p
								Segment lets you change these integration settings via your Segment dashboard without having to touch any code.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											API Key
									Node:
									(type) c
									(layer)3
										Element:p
											You can find your API Key under
										Element:strong
											Account
											in the upper-right of the
										Element:a
											Mixpanel interface
											.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Track All Pages to Mixpanel with a Consolidated Event Name
									Node:
									(type) c
									(layer)3
										Element:p
											This will track
										Element:strong
											Loaded a Page
											events to Mixpanel for all
										Element:a
											calls and
										Element:code
											page
											method
										Element:strong
											Loaded a Screen
											events for all
										Element:a
											calls. We enable this by default as it’s how Mixpanel suggests sending these calls.
										Element:code
											screen
											method
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Cross Subdomain Cookie
									Node:
									(type) c
									(layer)3
										Element:p
											This will allow the Mixpanel cookie to persist between different pages of your application.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Events to increment in People
									Node:
									(type) c
									(layer)3
										Element:p
											If you want to see and segment by event counts and last event date in Mixpanel people, enable people, and then list the events you want to see in People here.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Use Mixpanel People
									Node:
									(type) c
									(layer)3
										Element:p
											This will send all of your
										Element:a
											identify
											calls to Mixpanel’s People feature.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Traits to set as People Properties
									Node:
									(type) c
									(layer)3
										Element:p
											If you only want to set specific traits as People Properties in Mixpanel People, enable people, and then list the traits here.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Persistence Type
									Node:
									(type) c
									(layer)3
										Element:p
											This will allow the Mixpanel cookie to persist between different pages of your application.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Secure Cookie
									Node:
									(type) c
									(layer)3
										Element:p
											This will mark the Mixpanel cookie as secure, meaning it will only be transmitted over https
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Automatically set all Traits as Super Properties and People Properties
									Node:
									(type) c
									(layer)3
										Element:p
											While this is checked, our integration automatically sets all traits on identify calls as super properties and people properties if Mixpanel People is checked as well.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Properties to send as Super Properties
									Node:
									(type) c
									(layer)3
										Element:p
											If you want to see and segment by Super Properties in Mixpanel, then list the properties you want to see as Super Properties here.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Token
									Node:
									(type) c
									(layer)3
										Element:p
											You can find your token under
										Element:strong
											Account
											in the upper-right of the
										Element:a
											Mixpanel interface
											.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Track All Pages to Mixpanel
									Node:
									(type) c
									(layer)3
										Element:p
											This will track
										Element:strong
											Loaded a Page
											events to Mixpanel for all
										Element:a
											calls. We keep this disabled by default.
										Element:code
											page
											method
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Track Categorized Pages to Mixpanel
									Node:
									(type) c
									(layer)3
										Element:p
											This will track events to Mixpanel for
										Element:a
											calls that have a
										Element:code
											page
											method
										Element:code
											category
											associated with them. For example
										Element:code
											page('Docs', 'Index')
											would translate to
										Element:strong
											Viewed Docs Index Page
											.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Track Named Pages to Mixpanel
									Node:
									(type) c
									(layer)3
										Element:p
											This will track events to Mixpanel for
										Element:a
											calls that have a
										Element:code
											page
											method
										Element:code
											name
											associated with them. For example
										Element:code
											page('Signup')
											would translate to
										Element:strong
											Viewed Signup Page
											.
									Node:
									(type) c
									(layer)3
										Element:hr
									Node:
									(type) c
									(layer)3
										Element:p
											If you have any questions or see anywhere we can improve our documentation, please
										Element:a
											let us know
											or kick off a conversation in the
										Element:a
											Segment Community
											!
									Node:
									(type) c
									(layer)3
										Element:i
									Node:
									(type) c
									(layer)3
										Element:i
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
									Node:
									(type) c
									(layer)3
										Element:span
											Check out the code!
									Node:
									(type) c
									(layer)3
										Element:a
											android
									Node:
									(type) c
									(layer)3
										Element:a
											ios
									Node:
									(type) c
									(layer)3
										Element:a
											browser
									Node:
									(type) c
									(layer)3
										Element:a
											server
