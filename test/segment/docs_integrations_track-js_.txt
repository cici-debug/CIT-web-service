Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					Track JS Integration
			Node:
			(type) c
			(layer)1
				Element:p
					Segment makes it easy to send your data to
				Element:a
					Track JS
					(and lots of other integrations). Once you've tracked your data through our open source
				Element:a
					libraries
					we'll translate and route your data to Track JS in the format they understand.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Getting Started
						Node:
						(type) c
						(layer)2
							Element:p
								When you toggle on Track JS in Segment, this is what happens:
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
								Our CDN is updated within 5-10 minutes. Then our snippet will start asynchronously loading Track JS onto your page. This means you should remove Track JS‚Äô snippet from your page.
							Element:li
								Track JS will automatically start recording error data.
						Node:
						(type) c
						(layer)2
							Element:p
								Since Track JS only records data about errors, it does not collect any of the data represented by our API.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Non-supported options
						Node:
						(type) c
						(layer)2
							Element:p
								We do not currently support Track JS‚Äô
							Element:code
								onError
								and
							Element:code
								serialize
								options because they pose a
							Element:a
								XSS vulnerability
								.
						Node:
						(type) c
						(layer)2
							Element:p
								To work around this issue, however, you can directly set these options in the
							Element:code
								window._trackJs
								object on your page. These options will be merged with the settings you have configured in the interface once the Track JS script is loaded.
						Node:
						(type) c
						(layer)2
							Element:p
								We also do not support
							Element:code
								version
								, or
							Element:code
								sessionId
								. These can either be set prior to initialization as described above, or can be set after the snippet has been loaded with the
							Element:code
								ready
								callback
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								analytics.ready(function(){ window.trackJs.configure({ sessionId: '123456', version: '1.0' }); });
						Node:
						(type) c
						(layer)2
							Element:p
								Note that the
							Element:code
								userId
								parameter is automatically determined.
						Node:
						(type) c
						(layer)2
							Element:hr
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Supported Sources and Connection Modes
						Node:
						(type) c
						(layer)2
							Element:table
							Element:tr
							Element:th
							Element:th
								Web
							Element:th
								Mobile
							Element:th
								Server
							Element:tr
							Element:td
								üì± Device-based
							Element:td
								‚úÖ
							Element:td
							Element:td
							Element:tr
							Element:td
								‚òÅÔ∏è Cloud-based
							Element:td
							Element:td
							Element:td
						Node:
						(type) c
						(layer)2
							Element:p
								To learn more about about Connection Modes and what dictates which we support,
							Element:a
								see here
								.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Settings
						Node:
						(type) c
						(layer)2
							Element:p
								Segment lets you change these integration settings via your Segment dashboard without having to touch any code.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Application Key
									Node:
									(type) c
									(layer)3
										Element:p
											Optional. The name of the section of your application that this Segment project encompasses. For more info
										Element:a
											see here
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Callback BindStack
									Node:
									(type) c
									(layer)3
										Element:p
											Whether TrackJS should record the stacktrace for how a callback came to be bound, allowing the creation of an ‚Äòasync stacktrace‚Äô in the TrackJS UI. This gives you more context of how the application arrived at the function that failed. Enabling this has a nontrivial performance penalty, test before enabling in production
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Callback Enabled
									Node:
									(type) c
									(layer)3
										Element:p
											Whether TrackJS should watch for errors on host-function callbacks, such as addEventListener, and setTimeout. Disabling this greatly decreases the likelihood of recording a stacktrace for an error.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Console Display
									Node:
									(type) c
									(layer)3
										Element:p
											Whether calls to console.log and other console functions should be displayed into the browser‚Äôs console.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Console Enabled
									Node:
									(type) c
									(layer)3
										Element:p
											Whether TrackJS should wrap and watch the console for events. If disabled, window.console is not guaranteed to exist in all browsers.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Console Error
									Node:
									(type) c
									(layer)3
										Element:p
											Whether TrackJS should transmit errors on calls to console.error.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Enabled
									Node:
									(type) c
									(layer)3
										Element:p
											Whether to enable TrackJS for the page. If false, the TrackJS watchers will not be set up. The window.trackJs API will still be available and function locally, but no errors will be transmitted from the browser
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Network Enabled
									Node:
									(type) c
									(layer)3
										Element:p
											Whether TrackJS should wrap and watch AJAX calls. If disabled, network events will not appear in your Telemetry Timeline.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Network Error
									Node:
									(type) c
									(layer)3
										Element:p
											Whether TrackJS should transmit errors when an AJAX call completes with a ‚Äòfailing‚Äô status code, 400 or greater. If you wish to customize the list of status codes you want to capture errors from, set this to true and filter out status codes using the onError callback.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Token
									Node:
									(type) c
									(layer)3
										Element:p
											You can find your token under Track JS
										Element:a
											setup page
											.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Visitor Enabled
									Node:
									(type) c
									(layer)3
										Element:p
											Whether TrackJS should watch visitor interaction events, such as clicks and field input.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Window Enabled
									Node:
									(type) c
									(layer)3
										Element:p
											Whether TrackJS should watch window.onerror for global errors
									Node:
									(type) c
									(layer)3
										Element:hr
									Node:
									(type) c
									(layer)3
										Element:p
											If you have any questions or see anywhere we can improve our documentation, please
										Element:a
											let us know
											or kick off a conversation in the
										Element:a
											Segment Community
											!
									Node:
									(type) c
									(layer)3
										Element:i
									Node:
									(type) c
									(layer)3
										Element:i
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
									Node:
									(type) c
									(layer)3
										Element:span
											Check out the code!
									Node:
									(type) c
									(layer)3
										Element:a
											browser
