Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					Salesforce Integration
			Node:
			(type) c
			(layer)1
				Element:p
					Segment makes it easy to send your data to
				Element:a
					Salesforce
					(and lots of other integrations). Once you've tracked your data through our open source
				Element:a
					libraries
					we'll translate and route your data to Salesforce in the format they understand.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Getting Started
						Node:
						(type) c
						(layer)2
							Element:p
								Segment’s Salesforce integration allows you to identify leads without using SOAP APIs.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											API Access
									Node:
									(type) c
									(layer)3
										Element:p
											You’ll need to provide API access to Segment via a Salesforce user credentials. Since we use Salesforce’s SOAP API, you’ll need to provide an email, password, and security token to get access to their API. We’ll need to store this password in plain text in our database.
									Node:
									(type) c
									(layer)3
										Element:p
											Since we don’t want to ask for the password of one of your actual user accounts, we recommend you create a new Salesforce user account for Segment. We realize an extra user account costs money, so feel free to use an existing account if you wish.
									Node:
									(type) c
									(layer)3
										Element:p
											If you decide to create a new user account for the Segment API, please create this user by going to
										Element:em
											Setup > Administration Setup > Users > New User
											, and creating a new user with a System Administrator profile. This profile is required to give us enough permissions to access the API.
									Node:
									(type) c
									(layer)3
										Element:p
											Also make sure that IP Security is disabled in this Salesforce user account. This is because our servers often change and its hard to predict their IPs.
									Node:
									(type) c
									(layer)3
										Element:hr
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Identify
						Node:
						(type) c
						(layer)2
							Element:p
								Our integration makes it simple to integrate Salesforce. This integration supports the most important pain point for Salesforce users: getting your prospective customers into Salesforce as Leads from your website or mobile app.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Identifying a Lead
									Node:
									(type) c
									(layer)3
										Element:p
											Let’s go through a quick javascript example of identifying a lead:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											analytics.identify('YOUR_USERS_ID', { name: 'Peter Gibbons', title: 'VP of Derp', email: 'peter.gibbons@initech.com', company: 'Initech', phone: '570-690-4150', state: 'California', rating: 'Hot', city: 'east greenwich', postalCode: '94115', country: 'USA', street: '19123 forest lane', state: 'RI' }, { 'integrations': { 'Salesforce': true } });
									Node:
									(type) c
									(layer)3
										Element:p
											Additionally, if you’re using another integration, like Intercom, that requires the company trait to be an object, you can pass the name of the company as follows and our integration will still map it as expected.
									Node:
									(type) c
									(layer)3
										Element:p
											Also, you can send the address data in a object as well.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											analytics.identify('YOUR_USERS_ID', { name: 'Peter Gibbons', title: 'VP of Derp', email: 'peter.gibbons@initech.com', company: {id: 666, name: 'Initech'}, phone: '570-690-4150', state: 'California', rating: 'Hot', address: { city: 'east greenwich', postalCode: '94115', country: 'USA', street: '19123 forest lane', state: 'RI' } }, { 'integrations':{ 'Salesforce': true } });
									Node:
									(type) c
									(layer)3
										Element:p
											When you call
										Element:code
											identify
											, we’ll check to see if this Lead exists based on the
										Element:code
											email
											trait. If it does, we’ll update the Lead with the traits you’ve passed in your
										Element:code
											identify
											call, otherwise we’ll create a Salesforce Lead.
									Node:
									(type) c
									(layer)3
										Element:p
										Element:strong
											IMPORTANT
											: If you’re planning to update custom fields in Salesforce with Segment, you need to make sure you create the custom Lead Field inside Salesforce
										Element:em
											prior
											to sending the data.
									Node:
									(type) c
									(layer)3
										Element:p
											For example, if you want to collect a custom trait in Segment called
										Element:code
											testProp
											, you can create a Field Label called
										Element:code
											testProp
											which will generate an API Name as
										Element:code
											testProp__c
											. We will append the
										Element:code
											__c
											to any custom traits so you don’t need to worry about that. Please ensure that you are sending custom traits as camelcase!
									Node:
									(type) c
									(layer)3
										Element:p
										Element:strong
											NOTE
											: By default we do not send identify calls to Salesforce, given their strict API limits, which is why we ask you to explicitly define which identify calls are sent to Salesforce.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Group
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								.group()
								calls will now create or update
							Element:strong
								Account Objects
								inside Salesforce. When we receive a group call, similar to the
							Element:code
								.identify()
								call, we will first check using the
							Element:code
								groupId
								to see if the Account Object already exists in your SF account. Depending on the response, we will update that object or create a new one.
						Node:
						(type) c
						(layer)2
							Element:p
								Take this sample
							Element:code
								.group()
								call that you might send to Segment:
						Node:
						(type) c
						(layer)2
							Element:p
								(analytics.js)
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								analytics.group('813', { name: 'Teemo Industries', address: { city: 'East Greenwich', state: 'RI', country: 'US', postalCode: '02818', street: '9000 Forest Lane' }, phone: '222-333-4444', description: 'Makes great husky products', employees: 4, website: 'https://teemothewolf.com' }, { 'integrations': { 'Salesforce': true } });
						Node:
						(type) c
						(layer)2
							Element:p
								The above call will be sent like the following, in accordance with
							Element:a
								Salesforce’s API specs
								:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								{ Name: 'Teemo Industries', AccountNumber: '813', BillingCity: 'East Greenwich', BillingCountry: 'US', BillingPostalCode: '02818', BillingState: 'RI', BillingStreet: '9000 Forest Lane', NumberOfEmployees: 4, Phone: '222-333-4444', Website: 'https://teemothewolf.com', Description: 'Makes great husky products' }
						Node:
						(type) c
						(layer)2
							Element:p
							Element:em
								NOTE
								: By default we will map
							Element:code
								address
								to the Account’s
							Element:strong
								billing
								address. If you’d like to map the address to the Account’s
							Element:strong
								shipping
								address, you can do so inside your Salesforce settings in Segment. You can also opt to map it to
							Element:em
								both
								billing and shipping.
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
														Required Steps
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														You must be using V2 of this integration.
													Element:li
														You must pass in
													Element:code
														traits.name
														as this is a required field imposed by Salesforce for Account Objects.
													Element:li
														You must pass
													Element:code
														{ 'Salesforce': true }
														in the
													Element:code
														options
														.
													Element:li
														You must include
													Element:code
														AccountNumber
														as part of your page layout for us to be able to look up for the Account Objects via
													Element:code
														groupId
														:
													Element:ul
													Element:li
														Log into your Salesforce account and go to
													Element:code
														setup
													Element:li
														Go to
													Element:code
														Build
														>
													Element:code
														Customize
														>
													Element:code
														Accounts
														>
													Element:code
														Page Layout
													Element:li
														Drag the
													Element:code
														Account Number
														Field to the
													Element:code
														Account Detail
													Element:li
														Click
													Element:code
														Save
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
														Custom traits
												Node:
												(type) c
												(layer)4
													Element:p
														In order to send custom traits, you must do the same steps as you had done for the
													Element:code
														.identify()
														call. You have to
													Element:strong
														predefine
														them inside Salesforce. We will send any custom traits by appending
													Element:code
														__c
														.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Trait Validation
						Node:
						(type) c
						(layer)2
							Element:p
								Salesforce has documented strict validations on their semantic traits. We will trim all of those traits if they go over the limit. Please refer to their docs for
							Element:a
								Account Objects
								and
							Element:a
								Lead Objects
								to make sure you are sending the trait values under these limits if you do not want to see them trimmed off.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Troubleshooting
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Creating Other Resources
									Node:
									(type) c
									(layer)3
										Element:p
											To reduce the complexity of our API, our Salesforce integration intentionally only supports creating leads via the
										Element:code
											identify
											call. We make it extremely easy to create and update leads with our integration.
									Node:
									(type) c
									(layer)3
										Element:p
											To create resources of other types, such as Accounts or custom objects, we recommend integrating with Salesforce directly
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Sandbox Mode
									Node:
									(type) c
									(layer)3
										Element:p
											Currently our integration does not support sending data to the Sandbox environment in Salesforce.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											API Call Limits
									Node:
									(type) c
									(layer)3
										Element:p
											Salesforce limits both the concurrent amount of requests and the total amount of daily requests we can make to their API on your behalf. Check
										Element:a
											these limits
											. They vary per edition and your number of bought user licenses.
									Node:
									(type) c
									(layer)3
										Element:p
											We make two API requests per
										Element:code
											identify
											. The first request is a SQL query to determine whether this object already exists. The second is to either update or create that object.
									Node:
									(type) c
									(layer)3
										Element:p
											Also, every thirty minutes, our servers make two queries: one to renew our connection’s sessionId and another to describe your Salesforce object model so to determine which Salesforce objects are available.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											How can I check how many Salesforce API calls I have left today?
									Node:
									(type) c
									(layer)3
										Element:p
											Go to
										Element:code
											Setup > Administration Setup > Company Profile > Company Information
											, and you’ll find a field labeled:
										Element:code
											API Requests, Last 24 Hours
											.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											What do I do if I ran out of calls?
									Node:
									(type) c
									(layer)3
										Element:p
											You can either decrease the amount of Salesforce calls Segment makes using context.integrations, or buy more Salesforce user licenses.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Lookup Fields
									Node:
									(type) c
									(layer)3
										Element:p
											You can add whatever lookup fields you want to help us find the object you want to update.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Custom Fields Aren’t Updating
									Node:
									(type) c
									(layer)3
										Element:p
											Make sure that the traits you’re passing through match the Custom Field’s API name and data type!
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Password Expiration
									Node:
									(type) c
									(layer)3
										Element:p
											By default, Salesforce user accounts are set to have their passwords expire after 90 days. When this happens, the Salesforce user account that’s making API calls on your behalf will no longer be able to make API calls. You’ll need to set a new password, get a new security token, and then set both of these in your Segment Salesforce integration settings.
									Node:
									(type) c
									(layer)3
										Element:p
											If you want to set your passwords to never expire, you can do so in
										Element:strong
											Salesforce Setup > Administration Setup > Security Controls > Password Policies
											.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Updating Lead Status
									Node:
									(type) c
									(layer)3
										Element:p
											Currently Segment does not support updating the Salesforce Lead Status field due to constraints of the Salesforce API.
									Node:
									(type) c
									(layer)3
										Element:hr
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Supported Sources and Connection Modes
						Node:
						(type) c
						(layer)2
							Element:table
							Element:tr
							Element:th
							Element:th
								Web
							Element:th
								Mobile
							Element:th
								Server
							Element:tr
							Element:td
								📱 Device-based
							Element:td
							Element:td
							Element:td
							Element:tr
							Element:td
								☁️ Cloud-based
							Element:td
								✅
							Element:td
								✅
							Element:td
								✅
						Node:
						(type) c
						(layer)2
							Element:p
								To learn more about about Connection Modes and what dictates which we support,
							Element:a
								see here
								.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Settings
						Node:
						(type) c
						(layer)2
							Element:p
								Segment lets you change these integration settings via your Segment dashboard without having to touch any code.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Send Address as Billing Address
									Node:
									(type) c
									(layer)3
										Element:p
											This will map address traits in your group calls as Billing Address for your Account Objects.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Account Password
									Node:
									(type) c
									(layer)3
										Element:p
											Salesforce requires we store a Salesforce user’s password to access their SOAP API. We recommend you add a new System Administrator user profile to your Salesforce account, so that you don’t have to tell us your actual password. You can do that under
										Element:strong
											Setup > Administration Setup > Users > New User
											.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Security Token
									Node:
									(type) c
									(layer)3
										Element:p
											You can find your Security Token under
										Element:strong
											Setup > Personal Setup > My Personal Information >
											.
										Element:a
											Reset My Security Token
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Send Address as Shipping Address
									Node:
									(type) c
									(layer)3
										Element:p
											This will map address traits in your group calls as Shipping Address for your Account Objects.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Account Email
									Node:
									(type) c
									(layer)3
										Element:p
											Enter your Salesforce account email. We recommend creating a separate account just for Segment so that you don’t need to use your actual password.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Version
									Node:
									(type) c
									(layer)3
										Element:p
											V1 is deprecated: should not be used going forwards and is left for legacy compatibility. Our V2 integration supports getting your prospective customers into Salesforce as Leads from your website or mobile app.
									Node:
									(type) c
									(layer)3
										Element:hr
									Node:
									(type) c
									(layer)3
										Element:p
											If you have any questions or see anywhere we can improve our documentation, please
										Element:a
											let us know
											or kick off a conversation in the
										Element:a
											Segment Community
											!
									Node:
									(type) c
									(layer)3
										Element:i
									Node:
									(type) c
									(layer)3
										Element:i
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
									Node:
									(type) c
									(layer)3
										Element:span
											Check out the code!
									Node:
									(type) c
									(layer)3
										Element:a
											server
