Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					KISSmetrics Integration
			Node:
			(type) c
			(layer)1
				Element:p
					Segment makes it easy to send your data to
				Element:a
					KISSmetrics
					(and lots of other integrations). Once you've tracked your data through our open source
				Element:a
					libraries
					we'll translate and route your data to KISSmetrics in the format they understand.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Getting Started
						Node:
						(type) c
						(layer)2
							Element:p
								When you toggle on KISSmetrics in Segment, this is what happens:
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
								Our CDN is updated within 5-10 minutes. Then our snippet will start asynchronously loading KISSmetrics’ i.js onto your page. This means you should remove KISSmetrics’s snippet from your page.
							Element:li
								Your KISSmetrics source will start automatically collecting “Visited Site” events and
							Element:a
								other data
								.
						Node:
						(type) c
						(layer)2
							Element:p
								To get full value out of KISSmetrics you’ll want to record custom events and user data using the API outlined below.
						Node:
						(type) c
						(layer)2
							Element:p
								KISSmetrics is supported on the client-side and server-side as well as mobile.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:strong
								NOTE:
								KISSmetrics requires an initial pageview to load the library. By default we include a call to
							Element:a
								in your snippet. This call must be made at least once on any page where you expect KISSmetrics to be loaded.
							Element:code
								page
						Node:
						(type) c
						(layer)2
							Element:hr
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Page
						Node:
						(type) c
						(layer)2
							Element:p
								KISSmetrics relies on an initial pageview before the javascript library will be loaded on your site. There’s a
							Element:a
								call in your snippet by default, so this usually isn’t a problem.
							Element:code
								page
						Node:
						(type) c
						(layer)2
							Element:p
								You can also trigger an event in KISSmetrics by passing a
							Element:code
								name
								and
							Element:code
								category
								into your
							Element:a
								calls, these properties are necessary for a page to be captured in KM.
							Element:code
								page
						Node:
						(type) c
						(layer)2
							Element:p
								Here’s an example call on docs pages:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								analytics.page('Docs', { url: 'http:example.com/docs', referrer: 'http://google.com' })
						Node:
						(type) c
						(layer)2
							Element:p
								This
							Element:a
								call is translated into an event labeled:
							Element:code
								page
							Element:strong
								Viewed Docs Page
								and will have the properties:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								'Page - url': 'http:example.com/docs' 'Page - referrer': 'http://google.com'
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Identify
						Node:
						(type) c
						(layer)2
							Element:p
								When you call
							Element:a
								, we first call KISSmetrics’
							Element:code
								identify
							Element:code
								identify
								method to store the
							Element:code
								userId
								. Then we call
							Element:code
								set
								to store the
							Element:code
								traits
								.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Track
						Node:
						(type) c
						(layer)2
							Element:p
								When you call
							Element:a
								or one of its helper functions, we call KISSmetrics’
							Element:code
								track
							Element:code
								record
								with the exact same parameters.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Revenue
									Node:
									(type) c
									(layer)3
										Element:p
											This one’s easy. Just send us an event with a property called “revenue” and we’ll pass that on to KISSmetrics as
										Element:code
											Billing amount
											.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Group
						Node:
						(type) c
						(layer)2
							Element:p
								When you call
							Element:a
								, we first call KISSmetrics’
							Element:code
								group
							Element:code
								identify
								method to store the
							Element:code
								userId
								. Then we call
							Element:code
								set
								to store the company
							Element:code
								traits
								on the user. We prefix these traits with ‘Group -‘. For example,
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								analytics.group('123', { name: 'Test Inc', employees: 250, ... })
						Node:
						(type) c
						(layer)2
							Element:p
								will add the following traits to the user:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								'Group - id': '123', 'Group - Name': 'Test Inc' 'Group - Employees': 250
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Alias
						Node:
						(type) c
						(layer)2
							Element:p
								KISSmetrics automatically aliases anonymous visitors the first time you call
							Element:a
								from the browser. That means there’s no need to explicitly call
							Element:code
								identify
							Element:a
								if you’re tracking anonymous visitors and identified users in client-side javascript.
							Element:code
								alias
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Merging Identities
									Node:
									(type) c
									(layer)3
										Element:p
											A common use of
										Element:a
											for KISSmetrics is when an already identified user’s unique
										Element:code
											alias
										Element:code
											id
											changes. In this case you need to merge the old identity with a new one.
									Node:
									(type) c
									(layer)3
										Element:p
											For example, if you’re identifying people by their email address and they change it. In that case you’ll need to alias from the previous
										Element:code
											id
											(their old email address) to the new
										Element:code
											userId
											(their new email address). Here’s an example in
										Element:code
											node
											:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											analytics.alias({ previousId: 'old_email@aol.com', userId: 'new_email@gmail.com' });
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Aliasing New Users Server-Side
									Node:
									(type) c
									(layer)3
										Element:p
											In order to
										Element:a
										Element:code
											identify
										Element:strong
											new users
											server side and connect that user profile to an existing anonymous visitor profile there’s some work to be done.
									Node:
									(type) c
									(layer)3
										Element:p
										Element:strong
											Remember:
											KISSmetrics aliases automatically the first time you call
										Element:a
											in client-side javascript, so in most cases you don’t have to call
										Element:code
											identify
										Element:a
											at all.
										Element:code
											alias
									Node:
									(type) c
									(layer)3
										Element:p
											We don’t recommend handling
										Element:a
											server side, but if you must, here’s how to make it happen. There are two options: aliasing
										Element:code
											alias
										Element:strong
											in conjunction with client-side tracking
											or aliasing when
										Element:strong
											tracking exclusively server side
											.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											In Conjunction with Client-Side Tracking
									Node:
									(type) c
									(layer)3
										Element:p
											If you’re already tracking anonymous users on the client side you’ll need to pass the KISSmetrics identity from the browser to your servers in order to
										Element:a
											it to the new
										Element:code
											alias
										Element:code
											userId
											.
									Node:
									(type) c
									(layer)3
										Element:p
											First, use
										Element:a
											to grab the KISSmetrics identity:
										Element:code
											analytics.ready
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											analytics.ready(function(){ var anonIdentity = KM.i(); });
									Node:
									(type) c
									(layer)3
										Element:p
											Next, pass the
										Element:code
											anonIdentity
											to your server and
										Element:a
											,
										Element:code
											alias
										Element:a
											,
										Element:code
											identify
										Element:a
											your new user.
										Element:code
											track
									Node:
									(type) c
									(layer)3
										Element:p
											Here’s a
										Element:code
											node
											example where the new
										Element:code
											userId
											is
										Element:code
											12345
											:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											analytics.alias({ previousId: anonIdentity, userId: '12345' }); analytics.identify('12345'); analytics.track('Connected Facebook');
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Tracking Exclusively Server-Side
									Node:
									(type) c
									(layer)3
										Element:p
											If you’re only tracking anonymous users with one of our server-side sources that makes things easier. All you have to do is
										Element:a
											the anonymous
										Element:code
											alias
										Element:code
											id
											to the new
										Element:code
											userId
											.
									Node:
									(type) c
									(layer)3
										Element:p
											Here’s a Python example of the
										Element:a
											,
										Element:code
											alias
										Element:a
											,
										Element:code
											identify
										Element:a
											sequence where the server-side anonymous
										Element:code
											track
										Element:code
											id
											was
										Element:code
											92fh49fqh9849hf
											and the new
										Element:code
											userId
											is
										Element:code
											12345
											:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											analytics.alias('92fh49fqh9849hf', '12345') analytics.identify('12345') analytics.track('Registered')
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Aliasing on iOS
									Node:
									(type) c
									(layer)3
										Element:p
											We will automatically call
										Element:a
											for you the first time you
										Element:code
											alias
										Element:a
											users from our iOS SDK. That way it works exactly like web browser tracking - you don’t have to manually
										Element:code
											identify
										Element:a
											new users.
										Element:code
											alias
									Node:
									(type) c
									(layer)3
										Element:p
											You can read more about how KISSmetrics recommends using
										Element:a
										Element:code
											alias
										Element:a
											in their docs
											.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Receive experiment data from A/B Testing tools
									Node:
									(type) c
									(layer)3
										Element:p
											You can track A/B testing event data like
										Element:a
											and send it to Kissmetrics via Segment.
										Element:code
											Experiment Viewed
									Node:
									(type) c
									(layer)3
										Element:p
											In order to enable this feature,
									Node:
									(type) c
									(layer)3
										Element:ol
										Element:li
											Find your A/B testing tool in your Segment dashboard
										Element:li
											Select “Send experiment data to other tools (as an identify call) in Overview
										Element:li
											Save and Close
										Element:li
											You should see these events in the debugger
									Node:
									(type) c
									(layer)3
										Element:hr
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Engage
						Node:
						(type) c
						(layer)2
							Element:p
								Kissmetrics has a feature called Engage which you can use on top of Analyze. Engage helps marketers increase conversions and engagement on their website.
							Element:a
								Engage
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								E-Commerce
						Node:
						(type) c
						(layer)2
							Element:p
								If you are using our ecommerce api, we will forward that data along to KISSmetrics following the
							Element:a
								KISSmetrics Ecommerce Essentials Guide
								.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Features
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											User Properties
									Node:
									(type) c
									(layer)3
										Element:p
											You can set KISSmetrics user properties in 2 ways with Segment:
									Node:
									(type) c
									(layer)3
										Element:ol
										Element:li
											Make an
										Element:a
											call and include a
										Element:code
											identify
										Element:code
											traits
											object.
										Element:li
											Make a
										Element:a
											call and include a
										Element:code
											track
										Element:code
											properties
											object.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Nested Objects or Arrays
									Node:
									(type) c
									(layer)3
										Element:p
											Keep in mind that if you send arrays, we will stringify them. Also if you pass a nested object as
										Element:code
											traits
											or
										Element:code
											properties
											inside the
										Element:code
											identify
											or
										Element:code
											track
											call, we will flatten them.
									Node:
									(type) c
									(layer)3
										Element:p
											For example:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											analytics.track('Signed Up', { foo: { bar: { prop: [1, 2, 3] } } });
									Node:
									(type) c
									(layer)3
										Element:p
											The properties would be sent as
										Element:code
											foo.bar.prop: '1,2,3'
											.
									Node:
									(type) c
									(layer)3
										Element:p
											Note that this is without the prefix setting enabled. If you had enabled that feature, it would be
										Element:code
											Signed Up - foo.bar.prop: '1,2,3'
											.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Automatic Events
									Node:
									(type) c
									(layer)3
										Element:p
											The KISSmetrics javascript library automatically tracks a bunch of events (Visited Site, Ad Campaign Hit, Search Engine Hit, Form Submit, Pageview, etc.) These will all still work when you use KISSmetrics through Segment.
									Node:
									(type) c
									(layer)3
										Element:hr
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Supported Sources and Connection Modes
						Node:
						(type) c
						(layer)2
							Element:table
							Element:tr
							Element:th
							Element:th
								Web
							Element:th
								Mobile
							Element:th
								Server
							Element:tr
							Element:td
								📱 Device-based
							Element:td
								✅
							Element:td
							Element:td
							Element:tr
							Element:td
								☁️ Cloud-based
							Element:td
							Element:td
								✅
							Element:td
								✅
						Node:
						(type) c
						(layer)2
							Element:p
								To learn more about about Connection Modes and what dictates which we support,
							Element:a
								see here
								.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Settings
						Node:
						(type) c
						(layer)2
							Element:p
								Segment lets you change these integration settings via your Segment dashboard without having to touch any code.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											API Key
									Node:
									(type) c
									(layer)3
										Element:p
											You can find your API Key on the Kissmetrics
										Element:a
											Settings page
											.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Prefix Properties
									Node:
									(type) c
									(layer)3
										Element:p
											Prefix the properties with the page or event name.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Track Categorized Pages
									Node:
									(type) c
									(layer)3
										Element:p
											Send an event for every page with a category.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Track Named Pages
									Node:
									(type) c
									(layer)3
										Element:p
											Send an event for every page with a name.
									Node:
									(type) c
									(layer)3
										Element:hr
									Node:
									(type) c
									(layer)3
										Element:p
											If you have any questions or see anywhere we can improve our documentation, please
										Element:a
											let us know
											or kick off a conversation in the
										Element:a
											Segment Community
											!
									Node:
									(type) c
									(layer)3
										Element:i
									Node:
									(type) c
									(layer)3
										Element:i
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
									Node:
									(type) c
									(layer)3
										Element:span
											Check out the code!
									Node:
									(type) c
									(layer)3
										Element:a
											browser
									Node:
									(type) c
									(layer)3
										Element:a
											server
