Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					Analytics for Xamarin
			Node:
			(type) c
			(layer)1
				Element:p
					Our
				Element:a
					Xamarin
					Portable Class Library (
				Element:a
					PCL
					) is the best way to integrate analytics into your Xamarin application. It lets you record analytics data from your C#, F#, and .NET code, and supports
				Element:code
					PCL Profile 4.0 - Profile136
					, which targets the following platforms:
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					.NET Framework 4 or later
				Element:li
					Windows Phone 8 or later
				Element:li
					Silverlight 5
				Element:li
					Windows 8
				Element:li
					Windows Phone Silverlight 8
				Element:li
					Windows Store apps (Windows 8)
				Element:li
					Xamarin.Android
				Element:li
					Xamarin.iOS
			Node:
			(type) c
			(layer)1
				Element:p
					The library issues requests that hit our servers, and then we route your data to any analytics service you enable on our integrations page. This library is open-source, so you can
				Element:a
					check it out on Github
					.
			Node:
			(type) c
			(layer)1
				Element:p
				Element:strong
					Note:
					Since Xamarin requires our library to be portable to different builds, we can only enable server-side integrations, as opposed to bundling select native SDKs like we do for iOS and Android. Look for the “Server” icon when selecting integrations. For tools for which we offer both bundled and server-side integrations, like Mixpanel, Amplitude, and Google Analytics, our Xamarin library will only be able to leverage their server-side functionality.
				Element:a
					Read this help article for more information
					.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Getting Started
						Node:
						(type) c
						(layer)2
							Element:p
								Clone
							Element:code
								Analytics.Xamarin
								from
							Element:a
								Github
								…
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								git clone https://github.com/segmentio/Analytics.Xamarin.git
						Node:
						(type) c
						(layer)2
							Element:p
								Import the
							Element:code
								Analytics.Xamarin
								project into Xamarin Studio, and add it as a reference to your code.
						Node:
						(type) c
						(layer)2
							Element:p
								Now you’ll need to initialize the library.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								using Segment; // initialize with your Segment source write key ... Analytics.Initialize("YOUR_WRITE_KEY");
						Node:
						(type) c
						(layer)2
							Element:p
								You only need to initialize once at the start of your program. You can then keep using the
							Element:code
								Analytics
								singleton anywhere in your code.
						Node:
						(type) c
						(layer)2
							Element:p
								The default initialization settings are production-ready and queue messages on another thread before sending any requests. In development you might want to use
							Element:a
								development settings
								.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Identify
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								identify
								lets you tie a user to their actions and record traits about them. It includes a unique User ID and any optional traits you know about them.
						Node:
						(type) c
						(layer)2
							Element:p
								We recommend calling
							Element:code
								identify
								a single time when the user’s account is first created, and only identifying again later when their traits change.
						Node:
						(type) c
						(layer)2
							Element:p
								Example
							Element:code
								identify
								call:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								Analytics.Client.Identify("019mr8mf4r", new Traits() { { "name", "Tom Smykowski" }, { "email", "tom@initech.com" }, { "friends", 29 } });
						Node:
						(type) c
						(layer)2
							Element:p
								This example call identifies Tom by his unique User ID (the one you know him by in your database) and label him with
							Element:code
								name
								,
							Element:code
								email
								and
							Element:code
								friends
								traits.
						Node:
						(type) c
						(layer)2
							Element:p
								The
							Element:code
								identify
								call has the following fields:
						Node:
						(type) c
						(layer)2
							Element:table
							Element:tr
							Element:td
							Element:code
								userId
							Element:em
								String
							Element:td
								The ID for this user in your database.
							Element:tr
							Element:td
							Element:code
								Traits
							Element:em
								Traits, optional
							Element:td
								A dictionary of traits you know about the user. Things like:
							Element:code
								email
								,
							Element:code
								name
								or
							Element:code
								friends
								.
							Element:tr
							Element:td
							Element:code
								options
							Element:em
								Options, optional
							Element:td
								An
							Element:code
								Options
								object lets you set a
							Element:a
								timestamp
								,
							Element:a
								enable or disable integrations
								, or
							Element:a
								send additional context
								.
						Node:
						(type) c
						(layer)2
							Element:p
								Find details on the
							Element:strong
								identify method payload
								in our
							Element:a
								Spec
								.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Track
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								track
								lets you record the actions your users perform. Every action triggers what we call an “event”, which can also have associated properties.
						Node:
						(type) c
						(layer)2
							Element:p
								You’ll want to track events that are indicators of success for your site, like
							Element:strong
								Signed Up
								,
							Element:strong
								Item Purchased
								or
							Element:strong
								Article Bookmarked
								.
						Node:
						(type) c
						(layer)2
							Element:p
								To get started, we recommend tracking just a few important events. You can always add more later!
						Node:
						(type) c
						(layer)2
							Element:p
								Example
							Element:code
								track
								call:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								Analytics.Client.Track("019mr8mf4r", "Item Purchased", new Properties() { { "revenue", 39.95 }, { "shipping", "2-day" } });
						Node:
						(type) c
						(layer)2
							Element:p
								This example
							Element:code
								track
								call tells us that your user just triggered the
							Element:strong
								Item Purchased
								event with a revenue of $39.95 and chose your hypothetical ‘2-day’ shipping.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								track
								event properties can be anything you want to record.
						Node:
						(type) c
						(layer)2
							Element:p
								The
							Element:code
								track
								call has the following fields:
						Node:
						(type) c
						(layer)2
							Element:table
							Element:tr
							Element:td
							Element:code
								userId
							Element:em
								String
							Element:td
								The ID for this user in your database.
							Element:tr
							Element:td
							Element:code
								event
							Element:em
								String
							Element:td
								The name of the event you’re tracking. We recommend human-readable names like
							Element:strong
								Played Song
								or
							Element:strong
								Updated Status
								.
							Element:tr
							Element:td
							Element:code
								properties
							Element:em
								Properties, optional
							Element:td
								A dictionary of properties for the event. If the event was
							Element:strong
								Added to Cart
								, it might have properties like
							Element:code
								price
								or
							Element:code
								product
								.
							Element:tr
							Element:td
							Element:code
								options
							Element:em
								Options, optional
							Element:td
								An
							Element:code
								Options
								object lets you set a
							Element:a
								timestamp
								,
							Element:a
								enable or disable integrations
								, or
							Element:a
								send additional context
								.
						Node:
						(type) c
						(layer)2
							Element:p
								Find details on
							Element:strong
								best practices in event naming
								as well as the
							Element:strong
								in our
							Element:code
								track
								method payload
							Element:a
								Spec
								.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Screen
						Node:
						(type) c
						(layer)2
							Element:p
								The
							Element:a
								method lets you you record whenever a user sees a screen of your mobile app, along with optional extra information about the page being viewed.
							Element:code
								screen
						Node:
						(type) c
						(layer)2
							Element:p
								You’ll want to record a screen event an event whenever the user opens a screen in your app. This could be a view, fragment, dialog or activity depending on your app.
						Node:
						(type) c
						(layer)2
							Element:p
								Not all services support screen, so when it’s not supported explicitly, the screen method tracks as an event with the same parameters.
						Node:
						(type) c
						(layer)2
							Element:p
								Example
							Element:code
								screen
								call:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								Analytics.Client.Screen("019mr8mf4r", "Register", new Properties() { { "type", "facebook" } });
						Node:
						(type) c
						(layer)2
							Element:p
								The
							Element:code
								screen
								call has the following fields:
						Node:
						(type) c
						(layer)2
							Element:table
							Element:tr
							Element:td
							Element:code
								userId
							Element:em
								String
							Element:td
								The ID for this user in your database.
							Element:tr
							Element:td
							Element:code
								name
							Element:em
								String
							Element:td
								The screen name you’re tracking. We recommend human-readable names like
							Element:strong
								Login
								or
							Element:strong
								Register
								.
							Element:tr
							Element:td
							Element:code
								category
							Element:em
								String
							Element:td
								The screen category. If you’re making a news app, the category could be
							Element:strong
								Sports
								.
							Element:tr
							Element:td
							Element:code
								properties
							Element:em
								Properties, optional
							Element:td
								A dictionary of properties for the screen view. If the screen is
							Element:strong
								Restaurant Reviews
								, it might have properties like
							Element:code
								reviewCount
								or
							Element:code
								restaurantName
								.
							Element:tr
							Element:td
							Element:code
								options
							Element:em
								Options, optional
							Element:td
								An
							Element:code
								Options
								object lets you set a
							Element:a
								timestamp
								,
							Element:a
								enable or disable integrations
								, or
							Element:a
								send additional context
								.
						Node:
						(type) c
						(layer)2
							Element:p
								Find details on the
							Element:strong
								in our
							Element:code
								screen
								payload
							Element:a
								Spec
								.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Group
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								group
								lets you associate an
							Element:a
								identified user
								user with a group. A group could be a company, organization, account, project or team! It also lets you record custom traits about the group, like industry or number of employees.
						Node:
						(type) c
						(layer)2
							Element:p
								This is useful for tools like
							Element:a
								Intercom
								,
							Element:a
								Preact
								and
							Element:a
								Totango
								, as it ties the user to a
							Element:strong
								group
								of other users.
						Node:
						(type) c
						(layer)2
							Element:p
								Example
							Element:code
								group
								call:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								Analytics.Client.Group("userId", "groupId", new Traits() { { "name", "Initech, Inc." }, { "website", "http://www.initech.com" } });
						Node:
						(type) c
						(layer)2
							Element:p
								The
							Element:code
								group
								call has the following fields:
						Node:
						(type) c
						(layer)2
							Element:table
							Element:tr
							Element:td
							Element:code
								userId
							Element:em
								String
							Element:td
								The ID for this user in your database.
							Element:tr
							Element:td
							Element:code
								groupId
							Element:em
								String
							Element:td
								The ID for this group in your database.
							Element:tr
							Element:td
							Element:code
								traits
							Element:em
								Traits, optional
							Element:td
								A dictionary of traits you know about the group. Things like:
							Element:code
								name
								or
							Element:code
								website
								.
							Element:tr
							Element:td
							Element:code
								options
							Element:em
								Options, optional
							Element:td
								An
							Element:code
								Options
								object lets you set a
							Element:a
								timestamp
								,
							Element:a
								enable or disable integrations
								, or
							Element:a
								send additional context
								.
						Node:
						(type) c
						(layer)2
							Element:p
								Find more details about
							Element:code
								group
								including the
							Element:strong
								in our
							Element:code
								group
								payload
							Element:a
								Spec
								.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Alias
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								alias
								is how you associate one identity with another. This is an advanced method, but it is required to manage user identities successfully in
							Element:em
								some
								of our integrations.
						Node:
						(type) c
						(layer)2
							Element:p
								In
							Element:a
								Mixpanel
								it’s used to associate an anonymous user with an identified user once they sign up. For
							Element:a
								KISSmetrics
								, if your user switches IDs, you can use ‘alias’ to rename the ‘userId’.
						Node:
						(type) c
						(layer)2
							Element:p
								Example
							Element:code
								alias
								call:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								Analytics.Client.Alias("previousId", "userId");
						Node:
						(type) c
						(layer)2
							Element:p
								Here’s a full example of how we might use the
							Element:code
								alias
								call:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								// the anonymous user does actions ... Analytics.Client.Track("anonymous_user", "Anonymous Event"); // the anonymous user signs up and is aliased Analytics.Client.Alias("anonymous_user", "identified@gmail.com"); // the identified user is identified Analytics.Client.Identify("identified@gmail.com", new Traits() { plan: "Free" }); // the identified user does actions ... Analytics.Client.Track("identified@gmail.com", "Identified Action");
						Node:
						(type) c
						(layer)2
							Element:p
								For more details about
							Element:code
								alias
								, including the
							Element:strong
								, check out our
							Element:code
								alias
								call payload
							Element:a
								Spec
								.
						Node:
						(type) c
						(layer)2
							Element:hr
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Development Settings
						Node:
						(type) c
						(layer)2
							Element:p
								You can use this initialization during development while testing the library.
							Element:code
								SetAsync(false)
								will make sure the library makes a request to our servers every time it’s called.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								Analytics.Initialize("YOUR_WRITE_KEY", new Config().SetAsync(false));
						Node:
						(type) c
						(layer)2
							Element:p
								Don’t forget to set async back to
							Element:code
								true
								for production, so that you can advantage of asynchronous flushing on a different thread.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Options
						Node:
						(type) c
						(layer)2
							Element:p
								An
							Element:code
								Options
								object lets you:
						Node:
						(type) c
						(layer)2
							Element:ol
							Element:li
								Set a
							Element:a
								timestamp
								,
							Element:a
								enable or disable integrations
							Element:li
							Element:a
								Send additional context
							Element:li
							Element:a
								Send an anoymousId
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Selecting Integrations
						Node:
						(type) c
						(layer)2
							Element:p
								The
							Element:code
								alias
								,
							Element:code
								group
								,
							Element:code
								identify
								,
							Element:code
								page
								and
							Element:code
								track
								calls can all be passed an object of
							Element:code
								options
								that lets you turn certain integrations on or off. By default all integrations are enabled.
						Node:
						(type) c
						(layer)2
							Element:p
								Here’s an example
							Element:code
								identify
								call with the
							Element:code
								options
								object shown.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								Analytics.Client.Identify("hj2kf92ds212", new Traits() { { "email", "tom@initech.com" }, { "name", "Tom Smykowski" }, }, new Options() .SetIntegration("all", false) .SetIntegration("KISSmetrics", true) );
						Node:
						(type) c
						(layer)2
							Element:p
								In this case, we’re specifying that we want this identify to only go to KISSmetrics.
							Element:code
								"all", false
								says that no integration should be enabled unless otherwise specified.
							Element:code
								{ "KISSmetrics", true }
								turns on KISSmetrics, etc.
						Node:
						(type) c
						(layer)2
							Element:p
								Integration flags are
							Element:strong
								case sensitive
								and match
							Element:a
								the integration’s name in the docs
								(i.e. “AdLearn Open Platform”, “awe.sm”, “MailChimp”, etc.).
						Node:
						(type) c
						(layer)2
							Element:p
							Element:strong
								Note:
								Available at the business level, filtering track calls can be done right from the Segment UI on your source schema page. We recommend using the UI if possible since it’s a much simpler way of managing your filters and can be updated with no code changes on your side.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Historical Import
						Node:
						(type) c
						(layer)2
							Element:p
								You can import historical data by adding the
							Element:code
								timestamp
								argument to your
							Element:code
								identify
								and
							Element:code
								track
								calls.
							Element:em
								Note: If you’re tracking things that are happening right now, leave out the timestamp and our servers will timestamp the requests for you.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								Analytics.Client.Track("sadi89e2jd", "Logged Workout", new Properties() { { "distance", "10 miles" }, { "city", "Boston" }, }, new Options() .SetTimestamp(new DateTime(2010, 1, 18)) );
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Context
						Node:
						(type) c
						(layer)2
							Element:p
								If you’re running a web server, you might want to send context variables such as
							Element:code
								userAgent
								or
							Element:code
								ip
								with your
							Element:code
								page
								or
							Element:code
								screen
								calls. You can do so by setting the
							Element:code
								Context
								in the
							Element:code
								Options
								object.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								Analytics.Client.Page("019mr8mf4r", "Login", new Properties() { { "path", "/login" }, { "title", "Initech Login" } }, new Options() .SetContext(new Context() { { "app", "Education App 2" } }));
						Node:
						(type) c
						(layer)2
							Element:p
								Learn more on the
							Element:a
								Context page
								.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Anonymous ID
						Node:
						(type) c
						(layer)2
							Element:p
								By default, the Xamarin library requires all messages to have a
							Element:code
								userId
								. If you would like to use an
							Element:code
								anonymousId
								, you can pass it in with options.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								Analytics.Client.Page(null, "Login", new Properties(), new Options() .SetAnonymousId("some-id"));
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Nested Properties
						Node:
						(type) c
						(layer)2
							Element:p
								You can provide nested properties, like so:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								Analytics.Client.Identify("hj2kf92ds212", new Traits() { { "email", "tom@initech.com" }, { "name", "Tom Smykowski" }, { "address", new Dict() { { "street", "123 Fake Street" }, { "city", "Boston" } }} });
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Batching
						Node:
						(type) c
						(layer)2
							Element:p
								Our libraries are built to support high performance environments. That means it is safe to use Analytics.Xamarin on a web server that’s serving hundreds of requests per second.
						Node:
						(type) c
						(layer)2
							Element:p
								By default (in async mode), this library will start a single seperate thread on initialization, and flush all messages on that thread. That means every method you call
							Element:strong
								does not
								result in an HTTP request, but is queued in memory instead. Messages are flushed in batch in the background, which allows for much faster operation.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											How do I turn batching off?
									Node:
									(type) c
									(layer)3
										Element:p
											Sometimes you might not want batching (eg. when debugging, or in short-lived programs). You can turn off batching by setting the
										Element:code
											async
											argument to
										Element:code
											false
											, and your requests will always be sent in a blocking manner.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											Analytics.Initialize("YOUR_WRITE_KEY", new Config().SetAsync(false));
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											What happens if there are just too many messages?
									Node:
									(type) c
									(layer)3
										Element:p
											If the module detects that it can’t flush faster than it’s receiving messages, it’ll simply stop accepting messages. This means your program will never crash because of a backing up analytics queue. The maximum size of the queue defaults to
										Element:code
											10000
											, and here’s how you can change it:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											Analytics.Initialize("YOUR_WRITE_KEY", new Config().SetMaxQueueSize(10000));
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											How do I flush right now?!
									Node:
									(type) c
									(layer)3
										Element:p
											You can also flush on demand. For example, at the end of your program, you’ll want to flush to make sure there’s nothing left in the queue. Just call the
										Element:code
											Flush
											method:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											Analytics.Client.Flush();
									Node:
									(type) c
									(layer)3
										Element:p
											This method will block until all messages are flushed.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											How do I dispose of the flushing thread at the end of my program?
									Node:
									(type) c
									(layer)3
										Element:p
											The Analytics client implements the
										Element:code
											IDisposable
											interface, and will turn off its flushing thread when you call
										Element:code
											Dispose
											.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											Analytics.Client.Dispose();
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Configuration
						Node:
						(type) c
						(layer)2
							Element:p
								If you hate defaults, than you’ll love how configurable the Analytics.Xamarin is. Check out these gizmos:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								Analytics.Initialize("YOUR_WRITE_KEY", new Config() .SetAsync(true) .SetTimeout(TimeSpan.FromSeconds(10)) .SetMaxQueueSize(10000));
						Node:
						(type) c
						(layer)2
							Element:table
							Element:tr
							Element:td
							Element:code
								SetAsync
							Element:em
								boolean
							Element:td
							Element:code
								true
								to flush on a different thread,
							Element:code
								false
								to flush immediately on the same thread.
							Element:tr
							Element:td
							Element:code
								SetTimeout
							Element:em
								TimeSpan
							Element:td
								The amount of time to wait before calling the HTTP request a timeout.
							Element:tr
							Element:td
							Element:code
								SetMaxQueueSize
							Element:em
								int
							Element:td
								The maximum number of messages to allow into the queue before no new message are accepted.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Logging
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								Analytics.Xamarin
								has detailed logging, which you can enable by attaching your own handler, like so:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								using Segment; Segment.Logger.Handlers += Logging_Handler; void Logging_Handler(Level level, string message, Dict args) { if (args != null) { foreach (string key in args.Keys) { message += String.Format(" {0}: {1},", "" + key, "" + args[key]); } } Console.WriteLine(String.Format("[Analytics] [{0}] {1}", level, message)); }
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Anonymizing IP
						Node:
						(type) c
						(layer)2
							Element:p
								We collect IP address for client-side (iOS, Android, Analytics.js and Xamarin) events automatically.
						Node:
						(type) c
						(layer)2
							Element:p
								If you don’t want us to record your tracked users’ IP in integrations and S3, you can set your event’s
							Element:code
								context.ip
								field to
							Element:code
								0.0.0.0
								. Our server won’t record the IP address of the client for libraries if the
							Element:code
								context.ip
								field is already set.
						Node:
						(type) c
						(layer)2
							Element:hr
						Node:
						(type) c
						(layer)2
							Element:p
								If you have any questions or see anywhere we can improve our documentation, please
							Element:a
								let us know
								or kick off a conversation in the
							Element:a
								Segment Community
								!
						Node:
						(type) c
						(layer)2
							Element:footer
							Element:span
							Element:span
								Was this document helpful?
							Element:span
							Element:label
							Element:span
								Yes
							Element:label
							Element:span
								No
						Node:
						(type) c
						(layer)2
							Element:i
			Node:
			(type) h1
			(layer)1
				Element:h1
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:a
					Overview
				Element:li
				Element:a
					ActiveCampaign
				Element:li
				Element:a
					AMP
				Element:li
				Element:a
					analytics.js
				Element:li
				Element:a
					Android
				Element:li
				Element:a
					Android Wear
				Element:li
				Element:a
					Clojure
				Element:li
				Element:a
					Customer.io
				Element:li
				Element:a
					Drip
				Element:li
				Element:a
					Facebook Ads
				Element:li
				Element:a
					Facebook Lead Ads
				Element:li
				Element:a
					Go
				Element:li
				Element:a
					Google AdWords
				Element:li
				Element:a
					HTTP
				Element:li
				Element:a
					HubSpot
				Element:li
				Element:a
					Intercom
				Element:li
				Element:a
					iOS
				Element:li
				Element:a
					Iterable
				Element:li
				Element:a
					Java
				Element:li
				Element:a
					Klaviyo
				Element:li
				Element:a
					Mailchimp
				Element:li
				Element:a
					Mailjet
				Element:li
				Element:a
					Marketo
				Element:li
				Element:a
					Node
				Element:li
				Element:a
					Nudgespot
				Element:li
				Element:a
					PHP
				Element:li
				Element:a
					Python
				Element:li
				Element:a
					Ruby
				Element:li
				Element:a
					Salesforce
				Element:li
				Element:a
					Selligent
				Element:li
				Element:a
					SendGrid
				Element:li
				Element:a
					Stripe
				Element:li
				Element:a
					Twilio
				Element:li
				Element:a
					Vero
				Element:li
				Element:a
					Xamarin
				Element:li
				Element:a
					Zendesk
				Element:li
				Element:a
					.NET
