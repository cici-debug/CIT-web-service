Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					Castle Integration
			Node:
			(type) c
			(layer)1
				Element:p
					Segment makes it easy to send your data to
				Element:a
					Castle
					(and lots of other integrations). Once you've tracked your data through our open source
				Element:a
					libraries
					we'll translate and route your data to Castle in the format they understand.
			Node:
			(type) c
			(layer)1
				Element:p
					This integration is maintained by Castle.
			Node:
			(type) c
			(layer)1
				Element:hr
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Identify
						Node:
						(type) c
						(layer)2
							Element:p
								When you call
							Element:a
								, we create or update a user in Castle. We‚Äôll map our special traits (
							Element:code
								identify
							Element:code
								email
								,
							Element:code
								username
								,
							Element:code
								name
								, and
							Element:code
								createdAt
								) to Castle special properties.
						Node:
						(type) c
						(layer)2
							Element:p
								The remaining
							Element:code
								traits
								will populate Castle‚Äôs
							Element:code
								custom_attributes
								.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Server-side tracking
						Node:
						(type) c
						(layer)2
							Element:p
								Tracking from your servers is recommended for
							Element:a
								security events
								such as logins and password changes in order to not be blocked by malicious actors.
						Node:
						(type) c
						(layer)2
							Element:p
								Server-side methods don‚Äôt have any effect on Castle unless they contain an IP address and user agent. Analytics.js and mobile SDKs automatically populate these properties, but server-side calls need to explicitly specify the
							Element:code
								ip
								and
							Element:code
								user_agent
								fields in
							Element:code
								context
								.
						Node:
						(type) c
						(layer)2
							Element:p
								Here‚Äôs a full Ruby example:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								Analytics.identify( user_id: '019mr8mf4r', traits: { email: 'mbolton@initech.com' }, context: { ip: '8.8.8.8', user_agent: 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.115 Safari/537.36' })
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Features
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Secure Mode
									Node:
									(type) c
									(layer)3
										Element:p
											If you want to enable
										Element:a
											Secure Mode
											for Analytics.js, you can pass in the
										Element:code
											secure
											variable by rendering it in your server-side templates.
									Node:
									(type) c
									(layer)3
										Element:p
											The
										Element:code
											secure
											field should be a SHA256 hash of your Castle API Secret and the user ID. Here‚Äôs an example of a Ruby web server rendering an
										Element:code
											identify
											call with Secure Mode:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											analytics.identify('<%= current_user.id %>', { email: '<%= current_user.email %>' }, { integrations: { 'Castle': { secure: '<%= OpenSSL::HMAC.hexdigest("sha256", "YOUR_CASTLE_API_SECRET", current_user.id.to_s) %>' } } });
									Node:
									(type) c
									(layer)3
										Element:p
											Secure Mode is supported and encouraged for
										Element:code
											identify
											,
										Element:code
											group
											and
										Element:code
											alias
											.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Troubleshooting
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											I‚Äôm seeing a 400 Bad Request error
									Node:
									(type) c
									(layer)3
										Element:p
											If you have enabled Castle‚Äôs Secure Mode, make sure you set the
										Element:code
											secure
											field for all
										Element:code
											identify
											,
										Element:code
											group
											and
										Element:code
											alias
											requests.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											I‚Äôm not seeing any server events
									Node:
									(type) c
									(layer)3
										Element:p
											All server-side calls need to specify the
										Element:code
											ip
											and
										Element:code
											user_agent
											fields in
										Element:code
											context
											.
									Node:
									(type) c
									(layer)3
										Element:hr
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Supported Sources and Connection Modes
						Node:
						(type) c
						(layer)2
							Element:table
							Element:tr
							Element:th
							Element:th
								Web
							Element:th
								Mobile
							Element:th
								Server
							Element:tr
							Element:td
								üì± Device-based
							Element:td
							Element:td
							Element:td
							Element:tr
							Element:td
								‚òÅÔ∏è Cloud-based
							Element:td
								‚úÖ
							Element:td
								‚úÖ
							Element:td
								‚úÖ
						Node:
						(type) c
						(layer)2
							Element:p
								To learn more about about Connection Modes and what dictates which we support,
							Element:a
								see here
								.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Settings
						Node:
						(type) c
						(layer)2
							Element:p
								Segment lets you change these integration settings via your Segment dashboard without having to touch any code.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											API Secret
									Node:
									(type) c
									(layer)3
										Element:p
											You can find your API Secret under
										Element:strong
											Settings
											in the Castle dashboard. It should be 32 characters long, and look something like this:
										Element:code
											KmoUyttyEiHCdFTWSqhAF1SL1z9Fi1yg
											.
									Node:
									(type) c
									(layer)3
										Element:hr
									Node:
									(type) c
									(layer)3
										Element:p
											If you have any questions or see anywhere we can improve our documentation, please
										Element:a
											let us know
											or kick off a conversation in the
										Element:a
											Segment Community
											!
									Node:
									(type) c
									(layer)3
										Element:i
									Node:
									(type) c
									(layer)3
										Element:i
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
									Node:
									(type) c
									(layer)3
										Element:span
											Check out the code!
