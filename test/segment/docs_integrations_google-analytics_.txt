Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					Google Analytics Integration
			Node:
			(type) c
			(layer)1
				Element:p
					Segment makes it easy to send your data to
				Element:a
					Google Analytics
					(and lots of other integrations). Once you've tracked your data through our open source
				Element:a
					libraries
					we'll translate and route your data to Google Analytics in the format they understand.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Getting Started
						Node:
						(type) c
						(layer)2
							Element:p
								When you toggle on Google Analytics in Segment, this is what happens:
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:p
								Our CDN is updated within 5-10 minutes. Then our snippet will start asynchronously loading Google Analytics javascript library onto your web page.
							Element:strong
								This means you should remove Google’s snippet from your page.
							Element:li
							Element:p
								Your Google Analytics real-time dashboard will start showing live concurrent visitors.
							Element:li
							Element:p
								Any iOS and Android apps running our mobile libraries will start sending data to Google Analytics. New settings will take up to an hour to propagate to all of your existing users.Or if you just added the iOS or Android library to your app code, it’ll be instantaneous!
							Element:li
							Element:p
								Google Analytics will start automatically collecting data on your site or mobile app. It takes several hours for Google to process this data and add it to your reports, but you should still see events showing up in their real-time events dashboard.
						Node:
						(type) c
						(layer)2
							Element:p
								Segment supports Google Analytics client-side and the server-side tracking, in addition to mobile app analytics for iOS and Android.
						Node:
						(type) c
						(layer)2
							Element:p
								These docs will only cover GA Universal features, since the
							Element:a
								Classic tracking method has been depreciated
								.
						Node:
						(type) c
						(layer)2
							Element:hr
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Page & Screen
						Node:
						(type) c
						(layer)2
							Element:p
								When you call
							Element:a
								, we send a pageview to Google Analytics. Pageviews can be sent from the browser or through any of our server-side libraries.
							Element:code
								page
						Node:
						(type) c
						(layer)2
							Element:p
								The resulting
							Element:code
								page
								event name in Google Analytics will correspond to the
							Element:code
								fullName
								of your page event.
							Element:code
								fullName
								consists of a combination of the
							Element:code
								category
								and
							Element:code
								name
								parameters. For example,
							Element:code
								analytics.page('Home');
								would produce a
							Element:code
								Home
								page event in GA’s dashboard, whereas
							Element:code
								analytics.page('Retail Page', 'Home');
								would produce an event called
							Element:code
								Retail Page Home
								.
						Node:
						(type) c
						(layer)2
							Element:p
								Note that when sending
							Element:code
								page
								views from one of Segment’s server-side libraries, a
							Element:code
								url
								property is required. Otherwise, Google Analytics will silently reject your
							Element:code
								page
								event.
						Node:
						(type) c
						(layer)2
							Element:p
								When you call
							Element:a
								in your mobile app, we send a screen view to Google Analytics for mobile apps.
							Element:code
								screen
						Node:
						(type) c
						(layer)2
							Element:p
								If you are sending a
							Element:a
								call server-side, you must pass in an
							Element:code
								screen
							Element:a
								application name
								through Segment’s
							Element:code
								context.app.name
								object or Google will reject your event.
						Node:
						(type) c
						(layer)2
							Element:p
								If you’ve set an application name in your Android or iOS project, Segment will grab the name and pass
							Element:code
								context.app.name
								automatically. For iOS, Segment collects your project’s
							Element:code
								infoDictionary
								and uses whatever name you’ve set there. You can see
							Element:a
								Segment’s iOS Library code in action
								, and you can read more about how to
							Element:a
								set the display name for your iOS app
								.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Virtual Pageviews
									Node:
									(type) c
									(layer)3
										Element:p
											Virtual pageviews are when you send a pageview to Google Analytics when the page URL didn’t actually change. You can do this through Segment by simply calling
										Element:a
											with optional properties, like this:
										Element:code
											page
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											analytics.page({ title: 'Signup Modal', url: 'https://segment.com/#signup', path: '/#signup', referrer: 'https://segment.com/' });
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											URL Query Strings
									Node:
									(type) c
									(layer)3
										Element:p
											By default we will only send the domain and path to Google Analytics. For example, if someone lands on:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											http://domain.com/page/?xyz=123&r=5
									Node:
									(type) c
									(layer)3
										Element:p
											Segment will send this as the URL to Google Analytics:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											http://domain.com/page/
									Node:
									(type) c
									(layer)3
										Element:p
											In some cases, like using Google Analytics to track search queries, you may want to pass the whole URL with query string to Google Analytics. To make that happen check the
										Element:strong
											Include the Query String in Pageviews
											box under Advanced Options in the Google Analytics sheet on the Segment integrations page.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Identify
						Node:
						(type) c
						(layer)2
							Element:p
								It is against Google’s terms of service to pass Personally Identifiable Information (PII) to your Google Anlaytics reporting interface. For that reason Segment will never pass anything from an
							Element:a
								call to Google unless you specifically tell us to.
							Element:code
								identify
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											User ID
									Node:
									(type) c
									(layer)3
										Element:p
											Google Analytics Universal tracking method allows you to set a user ID for your identified visitors.
										Element:a
											Read more here
											.
									Node:
									(type) c
									(layer)3
										Element:p
											To use this feature you must enable User-ID in your Google Analytics property and create a User-ID view,
										Element:a
											read more here
											.
									Node:
									(type) c
									(layer)3
										Element:p
											If you want to pass the
										Element:code
											id
											from your
										Element:a
											calls to Google Anlaytics - enable
										Element:code
											identify
										Element:strong
											Send User-ID to GA
											in your Advanced Google Analytics settings on the Segment integrations page.
									Node:
									(type) c
									(layer)3
										Element:p
											Here’s an example:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											analytics.identify('12345', { email: 'friends@segment.com', name: 'Jake Peterson' });
									Node:
									(type) c
									(layer)3
										Element:p
											In this example we will set the
										Element:code
											User-ID
											to
										Element:code
											12345
											for Google Analytics, but we won’t share the
										Element:code
											email
											or
										Element:code
											name
											traits with Google.
									Node:
									(type) c
									(layer)3
										Element:p
											If you are passing an
										Element:strong
											email
											,
										Element:strong
											phone number
											,
										Element:strong
											full name
											or other PII as the
										Element:code
											id
											in
										Element:a
											do not use this feature. That is against the Google Analytics terms of service and your account could be suspended.
										Element:code
											identify
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Custom Dimensions
									Node:
									(type) c
									(layer)3
										Element:p
											First, configure the Custom Dimensions in your Google Analytics admin page.
										Element:a
											Read how to set those up here
											.
									Node:
									(type) c
									(layer)3
										Element:p
											Once you are set up in Google Analytics, you are ready to map traits and properties to your custom dimensions. From your Segment Dashboard, open the Integrations page and select the Google Analytics Integration, then Advanced Options. Locate Custom Dimensions and declare the mapping.
									Node:
									(type) c
									(layer)3
										Element:p
											Here’s an example of mapping “Gender” to “dimension9” and “User Type” to “dimension17”:
									Node:
									(type) c
									(layer)3
										Element:p
										Element:img
									Node:
									(type) c
									(layer)3
										Element:p
										Element:strong
											Note:
											A particular trait or property may only be mapped to a single Custom Dimension at a time.
									Node:
									(type) c
									(layer)3
										Element:p
											Once all your dimensions have been mapped, we will check user traits and properties in
										Element:a
											,
										Element:code
											identify
										Element:a
											and
										Element:code
											track
										Element:a
											calls to see if they are defined as a dimension. If they are defined in your mapping, we will send that dimension to Google Analytics.
										Element:code
											page
									Node:
									(type) c
									(layer)3
										Element:p
										Element:strong
											Note:
											Traits in
										Element:a
											calls that map to Custom Dimensions will only be recorded to Google Analytics when the next
										Element:code
											Identify
										Element:a
											or
										Element:code
											track
										Element:a
											call is fired from the browser.
										Element:code
											page
									Node:
									(type) c
									(layer)3
										Element:p
											Continuing the example above, we can set the
										Element:strong
											Gender
											trait with the value of
										Element:strong
											Male
											, which maps to
										Element:code
											dimension9
											, and it will be passed to Google Analytics
										Element:strong
											when we make the ‘Viewed History’
											.
										Element:a
											call
										Element:code
											track
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											analytics.identify({ Gender: 'Male' });
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											analytics.track('Viewed History');
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											A/B Test Versions to Dimensions
									Node:
									(type) c
									(layer)3
										Element:p
											Segment makes it simple to save your A/B testing versions to custom dimensions in Google Analytics. All you have to do is map an experiment to a custom dimension in the Google Analytics Advanced Options inside Segment.
									Node:
									(type) c
									(layer)3
										Element:p
											When you have an active A/B test on a page, Segment will either set that experiment as a property or a user trait, depending on how you opt to send experiment data to other tools on your A/B testing tool’s Segment settings page. The property or trait for A/B test experiments are labeled like this:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											'Experiment: EXPERIMENT_NAME': 'EXPERIMENT_VARIATION'
									Node:
									(type) c
									(layer)3
										Element:p
											For example, if you have an experiment called
										Element:strong
											Home CTA
											and a visitor sees a variation called
										Element:strong
											Create free account now
											, Segment sets the following property or trait:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											'Experiment: Home CTA': 'Create free account now'
									Node:
									(type) c
									(layer)3
										Element:p
											If you want to record that property or trait as a custom dimension you’d map
										Element:strong
											Experiment: Home CTA
											to a custom dimension, like this:
									Node:
									(type) c
									(layer)3
										Element:p
										Element:img
									Node:
									(type) c
									(layer)3
										Element:p
										Element:em
											Remember: You’ll need to setup dimension13 inside of your Google Analytics Admin first as described at the top of this docs section.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Track
						Node:
						(type) c
						(layer)2
							Element:p
								We’ll record a Google Analytics event whenever you make a
							Element:a
								call. You can see your events inside Google Analytics under
							Element:code
								track
							Element:strong
								Behavior
								->
							Element:strong
								Events
								->
							Element:strong
								Overview
								. Keep reading for more details about the Google Analytics event category, action, label, value and how to populate them.
						Node:
						(type) c
						(layer)2
							Element:p
								Events can be sent from the browser, your server, or our mobile SDKs. Here’s a basic
							Element:a
								example:
							Element:code
								track
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								analytics.track('Logged In');
						Node:
						(type) c
						(layer)2
							Element:p
								For this example these event attributes are sent to Google Analytics:
						Node:
						(type) c
						(layer)2
							Element:table
							Element:tr
							Element:td
							Element:strong
								Event Category
							Element:td
								All
							Element:tr
							Element:td
							Element:strong
								Event Action
							Element:td
								Logged In
						Node:
						(type) c
						(layer)2
							Element:p
								And another
							Element:a
								example, this time with all Google Analytics event parameters:
							Element:code
								track
						Node:
						(type) c
						(layer)2
							Element:figure
							Element:pre
							Element:code
								analytics.track("Logged In", new Properties() .putValue("category", "Account") .putValue("label", "Premium") .putValue("value", 50));
							Element:pre
							Element:code
								client.Track(&analytics.Track{ UserId: "12345", Event: "Logged In", Properties: map[string]interface{}{ "category": "Account", "label": "Premium", "value": 50, }, })
							Element:pre
							Element:code
								[[SEGAnalytics sharedAnalytics] track:@"Logged In", properties: @{ @"category" : @"Account", @"label" : @"Premium", @"value" : @50 }];
							Element:pre
							Element:code
								Analytics.track("12345", "Logged In", new Props() .put("category", "Account") .put("label", "Premium") .put("value", 50));
							Element:pre
							Element:code
								analytics.track({ userId: '12345', event: 'Logged In', properties: { category: 'Account', label: 'Premium', value: 50 } });
							Element:pre
							Element:code
								Analytics::track(array( "userId" => "12345", "event" => "Logged In", "properties" => array( "category" => "Account", "label" => "Premium", "value" => 50 ) ));
							Element:pre
							Element:code
								analytics.track('12345', 'Logged In', { 'category': 'Account', 'label': 'Premium', 'value': 50 })
							Element:pre
							Element:code
								Analytics.track( user_id: '12345', event: 'Logged In', properties: { category: 'Account', label: 'Premium', value: 50 } )
							Element:pre
							Element:code
								analytics.track('Logged In', { category: 'Account', label: 'Premium', value: 50 });
							Element:pre
							Element:code
								Analytics.Client.Track("12345", "Logged In", new Properties() { { "category", "Account" }, { "label", "Premium" }, { "value", 50 } });
							Element:pre
							Element:code
								Analytics.Client.Track("12345", "Logged In", new Properties() { { "category", "Account" }, { "label", "Premium" }, { "value", 50 } });
							Element:pre
							Element:code
								curl
							Element:a
								https://api.segment.io/v1/track
								\ -d userId=12345 \ -d "event=Logged In" \ -d properties[category]=Account \ -d properties[label]=Premium \ -d properties[value]=50
						Node:
						(type) c
						(layer)2
							Element:p
								That call will create a Google Analytics event with these attributes:
						Node:
						(type) c
						(layer)2
							Element:table
							Element:tr
							Element:td
							Element:strong
								Event Category
							Element:td
								Account
							Element:tr
							Element:td
							Element:strong
								Event Action
							Element:td
								Logged In
							Element:tr
							Element:td
							Element:strong
								Event Label
							Element:td
								Premium
							Element:tr
							Element:td
							Element:strong
								Event Value
							Element:td
								50
						Node:
						(type) c
						(layer)2
							Element:p
								For
							Element:strong
								Event Value
								you can name the event property
							Element:code
								value
								or
							Element:code
								revenue
								. We recommend using
							Element:code
								value
								for client-side tracking and
							Element:code
								revenue
								for more accurate server-side revenue tracking. Calling it
							Element:code
								revenue
								is best if the event made you money directly. That way we can also pass the revenue data to other integrations you have enabled.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Non-interaction Events
									Node:
									(type) c
									(layer)3
										Element:p
											To create an event with the
										Element:code
											nonInteraction
											flag just pass us an event property labeled
										Element:code
											nonInteraction
											with the value of 1. You can also set all events to be non-interactive by default in the Advanced Options.
									Node:
									(type) c
									(layer)3
										Element:p
											Here’s an example:
									Node:
									(type) c
									(layer)3
										Element:figure
										Element:pre
										Element:code
											analytics.track("Viewed Legal Info", new Properties() .putValue("nonInteraction", 1));
										Element:pre
										Element:code
											client.Track(&analytics.Track{ Event: "Viewed Legal Info", Properties: map[string]interface{}{ "nonInteraction": 1, }, })
										Element:pre
										Element:code
											[[SEGAnalytics sharedAnalytics] track:@"Viewed Legal Info", properties: @{ @"nonInteraction" : @1 }];
										Element:pre
										Element:code
											Analytics.track("Viewed Legal Info", new Props() .put("nonInteraction", 1));
										Element:pre
										Element:code
											analytics.track({ event: 'Viewed Legal Info', properties: { nonInteraction: 1 } });
										Element:pre
										Element:code
											Analytics::track(array( "event" => "Viewed Legal Info", "properties" => array( "nonInteraction" => 1 ) ));
										Element:pre
										Element:code
											analytics.track('Viewed Legal Info', { 'nonInteraction': 1 })
										Element:pre
										Element:code
											Analytics.track( event: 'Viewed Legal Info', properties: { nonInteraction: 1 } )
										Element:pre
										Element:code
											analytics.track('Viewed Legal Info', { nonInteraction: 1 });
										Element:pre
										Element:code
											Analytics.Client.Track("Viewed Legal Info", new Properties() { { "nonInteraction", 1 } });
										Element:pre
										Element:code
											Analytics.Client.Track("Viewed Legal Info", new Properties() { { "nonInteraction", 1 } });
										Element:pre
										Element:code
											curl
										Element:a
											https://api.segment.io/v1/track
											\ -d "event=Viewed Legal Info" \ -d properties[nonInteraction]=1
									Node:
									(type) c
									(layer)3
										Element:hr
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								E-Commerce
						Node:
						(type) c
						(layer)2
							Element:p
								Segment supports Google Analytics basic e-commerce tracking across all our libraries. All you have to do is adhere to our
							Element:a
								e-commerce tracking API
								and we’ll record the appropriate data to Google Analytics.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Required Steps
									Node:
									(type) c
									(layer)3
										Element:p
											All of our
										Element:a
											e-commerce events
											are recommended, but not required. The only required event is
										Element:code
											Order Completed
											. For each order completed you must include an
										Element:code
											orderId
											, and for each product inside that order, you must include an
										Element:code
											id
											and
										Element:code
											name
											for each product.
										Element:strong
											All other properties are optional
											.
									Node:
									(type) c
									(layer)3
										Element:p
											The most important thing to remember in Google’s Universal Analytics is to enable e-commerce tracking for the view you want to track transactions to. This can be done inside of Google Analytics by clicking:
									Node:
									(type) c
									(layer)3
										Element:p
										Element:strong
											Admin > View Settings > Ecommerce Settings switch to ON
									Node:
									(type) c
									(layer)3
										Element:p
											Without this step transactions will not show up in your reports.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Enhanced E-Commerce
						Node:
						(type) c
						(layer)2
							Element:p
								Segment supports Google Analytics Enhanced E-Commerce tracking across both our client-side (analytics.js) and server-side integrations, but not yet in our packaged mobile integrations. Enhanced Ecommerce allows you to derive insights by combining impression data, product data, promotion data, and action data. To get started, you need only enable enhanced ecommerce and adhere to our standard
							Element:a
								e-commerce tracking API
								, and we’ll record the data to Google Analytics with their enhanced ecommerce API.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Required Steps (enhanced)
									Node:
									(type) c
									(layer)3
										Element:p
											Similar to regular e-commerce, the only required event is
										Element:code
											Order Completed
											. This call also must include an
										Element:code
											orderId
											and an array of products, each containing an
										Element:code
											id
											or
										Element:code
											name
											.
									Node:
									(type) c
									(layer)3
										Element:p
											For all events that include product details you must pass either
										Element:code
											name
											or
										Element:code
											id
											. For
										Element:code
											id
											we default to
										Element:code
											properties.id
											and fallback to
										Element:code
											properties.sku
											.
									Node:
									(type) c
									(layer)3
										Element:p
										Element:strong
											All other properties are optional
											. The Refunded Order event also requires an
										Element:code
											orderId
											.
									Node:
									(type) c
									(layer)3
										Element:p
											In order to see Enhanced E-Commerce data in your reports, you must be using Google Analytics Universal and enable Enhanced E-Commerce in your Google Analytics:
									Node:
									(type) c
									(layer)3
										Element:p
										Element:strong
											Admin > View Settings > Enhanced Ecommerce Settings switch to ON
									Node:
									(type) c
									(layer)3
										Element:p
											Lastly, you have to enable Enhanced Ecommerce in the Advanced Options tab of the Google Analytics sheet in your Segment integrations page.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Measuring Checkout Steps
									Node:
									(type) c
									(layer)3
										Element:p
											To take full advantage of all the features of Enhanced E-commerce, you’ll want to take advantage of some specific events. The biggest differentiator between e-commerce and enhanced e-commerce is support for checkout steps. To take advantage of tracking your checkout funnel and measuring metrics like cart abandonment, etc, you’ll first need to configure your checkout funnel in the Google Analytics admin interface, giving easily readable labels to the numeric checkout steps:
									Node:
									(type) c
									(layer)3
										Element:p
										Element:img
									Node:
									(type) c
									(layer)3
										Element:p
											Then you’ll instrument your checkout flow with
										Element:code
											Viewed Checkout Step
											and
										Element:code
											Completed Checkout Step
											for each step of the funnel you configured in the Google Analytics admin interface, passing the step number and step-specific options through as a property of those events:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											//upon arrival at first checkout step ('Review Cart' per the screenshot example above) analytics.track('Viewed Checkout Step', { step: 1 }); //upon completion of first checkout step ('Review Cart') analytics.track('Completed Checkout Step', { step: 1 }); //upon arrival at second checkout step ('Collect Payment Info' per the screenshot example above) analytics.track('Viewed Checkout Step', { step: 2 }); //upon completion of this checkout step ('Collect Payment Info') analytics.track('Completed Checkout Step', { step: 2, //if this is the shipping step shippingMethod: 'FedEx', //if this is the payment step paymentMethod: 'Visa' }); //upon arrival at third checkout step ('Confirm Purchase Details' per the screenshot example above) analytics.track('Viewed Checkout Step', { step: 3 }); //upon completion of third checkout step ('Confirm Purchase Details') analytics.track('Completed Checkout Step', { step: 3 }); //upon arrival at fourth checkout step ('Receipt' per the screenshot example above) analytics.track('Viewed Checkout Step', { step: 4 }); //upon completion of fourth checkout step ('Receipt') analytics.track('Completed Checkout Step', { step: 4 });
									Node:
									(type) c
									(layer)3
										Element:p
										Element:em
											Note
											:
										Element:code
											shippingMethod
											and
										Element:code
											paymentMethod
											are semantic properties so if you want to send that information, please do so in this exact spelling!
									Node:
									(type) c
									(layer)3
										Element:p
											You can have as many or as few steps in the checkout funnel as you’d like. The 4 steps above merely serve as an example. Note that you’ll still need to track the
										Element:code
											Order Completed
											event per our standard
										Element:a
											e-commerce tracking API
											after you’ve tracked the checkout steps.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Measuring Promotions
									Node:
									(type) c
									(layer)3
										Element:p
											Enhanced Ecommerce allows you to go beyond measuring product performance to measure the internal and external marketing efforts that support those products. To take advantage of enhance e-commerce’s promotion reports, you can easily collect data about promotion impressions and promotion clicks with Analytics.js, like so:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											analytics.track('Viewed Promotion', { id: <id>, name: <name>, creative: <creative>, // optional position: <position> // optional });
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											analytics.track('Clicked Promotion', { id: <id>, name: <name>, creative: <creative>, // optional position: <position> // optional });
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Coupons
									Node:
									(type) c
									(layer)3
										Element:p
											If you want to send coupon data to your
										Element:code
											Order Completed
											event when using Enhanced Eccomerce, you can simply add the
										Element:code
											coupon
											property on the order level or the product level or both. In the below example, note that our Google Analytics Ecommerce integration accepts
										Element:code
											total
										Element:em
											or
										Element:code
											revenue
											, but not both. We recommend using
										Element:code
											revenue
											because several other integrations use
										Element:code
											revenue
											too. For better flexibility and total control over tracking, we let you decide how to calculate how coupons and discounts are applied. For example:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											analytics.track({ userId: '019mr8mf4r', event: 'Order Completed', properties: { orderId: '50314b8e9bcf000000000000', total: 27.5, shipping: 3, tax: 2, discount: 2.5, coupon: 'hasbros', currency: 'USD', repeat: true, products: [ { id: '507f1f77bcf86cd799439011', sku: '45790-32', name: 'Monopoly: 3rd Edition', price: 19, quantity: 1, category: 'Games', coupon: '15%OFF' }, { id: '505bd76785ebb509fc183733', sku: '46493-32', name: 'Uno Card Game', price: 3, quantity: 2, category: 'Games', coupon: '20%OFF' } ] } });
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Refunds
									Node:
									(type) c
									(layer)3
										Element:p
											For refunds to work, you need to have enhanced e-commerce turned on.
									Node:
									(type) c
									(layer)3
										Element:p
											For full refunds, fire this event whenever an order/transaction gets refunded:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											analytics.track('Order Refunded', { order_id: '50314b8e9bcf000000000000', });
									Node:
									(type) c
									(layer)3
										Element:p
											For partial refunds, you must include the productId and quantity for the items you want refunded:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											analytics.track('Order Refunded', { order_id: '50314b8e9bcf000000000000', products: [ { product_id: '123abc', quantity: 200 } ] });
									Node:
									(type) c
									(layer)3
										Element:hr
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Mobile Apps
						Node:
						(type) c
						(layer)2
							Element:p
								Segment supports Google Analytics mobile app analytics via our iOS and Android sources. For getting started with our mobile sources, check out the
							Element:a
								iOS
								and
							Element:a
								Android
								technical docs.
						Node:
						(type) c
						(layer)2
							Element:p
								When including Segment-GoogleAnalytics in your project, we bundle IDFA support by default. You can choose to exclude IDFA Support by specifying
							Element:code
								pod "Segment-GoogleAnalytics/Core"
								. Doing this, we will only bundle the Segment and Core GA libraries, excluding GoogleIDFASupport.
						Node:
						(type) c
						(layer)2
							Element:p
								You’ll need to create a new Google Analytics property for your mobile app. You can’t mix website and mobile apps within the same Google Analytics property. You can however mix Android and iOS implementations of the same app, or many different builds of the same app inside the same property.
						Node:
						(type) c
						(layer)2
							Element:p
								Here are
							Element:a
								Google’s Best Practices for Mobile App Analytics
								:
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
								Track different apps in separate properties
							Element:li
								Track different platforms of an app in separate properties
							Element:li
								Track app editions based on feature similarities
							Element:li
								Track different app versions in the same property
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Add the Mobile Tracking Id Field
									Node:
									(type) c
									(layer)3
										Element:p
											The first thing you’ll want to do if you’re bundling the Segment-GoogleAnalytics SDK is to add your
										Element:strong
											Mobile Tracking Id
											to your Google Analytics settings inside Segment. This ensures that data can flow from each user’s mobile device to Google Analytics. Otherwise, Segment won’t know where to send your data, and the events will be lost.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											When Will I See Data?
									Node:
									(type) c
									(layer)3
										Element:p
											If you already have an app deployed with the Segment library, and you just turned on Google Analytics mobile, it will take up to an hour for all your mobile users to refresh their Segment settings cache, and learn about the new service that you want to send to.
									Node:
									(type) c
									(layer)3
										Element:p
											After the settings cache refreshes, our library will automatically start sending data to Google Analytics.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Android Permissions
									Node:
									(type) c
									(layer)3
										Element:p
											You’ll need to make sure you added these permissions to your
										Element:code
											AndroidManifest.xml
											:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											<uses-permission android:name="android.permission.INTERNET" /> <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Calling Google Analytics Directly
									Node:
									(type) c
									(layer)3
										Element:p
											Since our SDKs bundle the Google Analytics SDK, you can access the Google Analytics
										Element:code
											Tracker
											object directly. Here’s an Android example:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											GoogleAnalytics ga = GoogleAnalytics.getInstance(this); Tracker tracker = ga.getDefaultTracker();
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											// perform custom actions, such as user timings t.send(new HitBuilders.TimingBuilder() .setCategory(getTimingCategory()) .setValue(getTimingInterval()) .setVariable(getTimingName()) .setLabel(getTimingLabel()) .build());
									Node:
									(type) c
									(layer)3
										Element:p
											This allows you to perform custom actions with Google Analytics, such as
										Element:a
											user timings
											.
									Node:
									(type) c
									(layer)3
										Element:hr
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Server Side
						Node:
						(type) c
						(layer)2
							Element:p
								When you track an event or pageview with one of our server-side libraries or
							Element:a
								HTTP API
								we will send it along to the Google Analytics REST API.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:strong
								You must include a server-side tracking ID in your Google Analytics settings (on your Segment source integrations page) or we won’t pass server-side events to Google Analytics.
								The tracking ID can be the same UA code as your regular property ID, or you can choose to send the server-side events to a separate Google Analytics property.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Combining Server-side and Client-side Events
									Node:
									(type) c
									(layer)3
										Element:p
											Google Analytics uses cookies to keep track of visitors and their sessions while visiting your website. The cookie data is stored in the visitor’s browser, and is sent along to Google Analytics every time a new pageview or event occurs. This allows Google Analytics to show a single unique visitor between multiple page reloads.
									Node:
									(type) c
									(layer)3
										Element:p
											Your servers also have access to this cookie, so they can re-use it when you send server-side events to Segment. If you don’t use the existing cookie Segment has to create a new one to make the server-side request to Google Analytics. When we create a new cookie the client-side and server-side events from the same user will look like two distinct visitors in Google Analytics.
									Node:
									(type) c
									(layer)3
										Element:p
											If you want to use server-side Google Analytics, there are three options with Segment:
									Node:
									(type) c
									(layer)3
										Element:ol
										Element:li
										Element:strong
											Pass your Google Analytics cookies to Segment (preferred).
										Element:li
											Use two Google Analytics profiles: one for client-side data and one for server-side data.
										Element:li
											Ignore the additional visitors generated by not passing the cookie.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Passing Cookies from Universal Analytics
									Node:
									(type) c
									(layer)3
										Element:p
											Universal Analytics (analytics.js) uses the
										Element:a
											to keep track of unique visitors.
										Element:code
											clientId
									Node:
									(type) c
									(layer)3
										Element:p
										Element:em
											A Google Analytics Universal cookie will look like this:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											_ga=GA1.2.1033501218.1368477899;
									Node:
									(type) c
									(layer)3
										Element:p
											The
										Element:code
											clientId
											is this part:
										Element:code
											1033501218.1368477899
									Node:
									(type) c
									(layer)3
										Element:p
											You can double check that it’s your
										Element:code
											clientId
											by running this script in your javascript console:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											ga(function (tracker) { var clientId = tracker.get('clientId'); console.log('My GA universal client ID is: ' + clientId); });
									Node:
									(type) c
									(layer)3
										Element:p
											If you want our server-side integration to use your user’s
										Element:code
											clientId
											, pass it to us in the
										Element:code
											context['Google Analytics'].clientId
											object. You must pass this value manually on every call as we do not store this value for you. If you do not pass this through, we look for the
										Element:code
											userId
											or
										Element:code
											anonymousId
											value and set it as the
										Element:code
											cid
											.
									Node:
									(type) c
									(layer)3
										Element:p
										Element:em
											Here’s a Ruby example:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											Analytics.track( user_id: '019mr8mf4r', event: 'Purchased a Bear', properties: { item : 'Bear Repellent', quantity : 10, revenue : '9.95' }, context: { 'Google Analytics' => { clientId: '1033501218.1368477899' } } )
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											User Agent
									Node:
									(type) c
									(layer)3
										Element:p
											By default, we won’t set the
										Element:code
											user-agent
											header. If you have your user’s
										Element:code
											user-agent
											server-side, you can send it to us using the
										Element:code
											context
											object. The
										Element:code
											context
											object is an optional argument supported by all of our server-side sources.
									Node:
									(type) c
									(layer)3
										Element:p
											Here’s a Ruby example:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											Analytics.track( user_id: '019mr8mf4r', event: 'Loaded a Page', properties: { url: 'http://initech.com/pricing' }, context: { user_agent: 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_2) AppleWebKit/537.17 (KHTML, like Gecko) Chrome/24.0.1312.57 Safari/537.17' } )
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Visitor Geo-Location
									Node:
									(type) c
									(layer)3
										Element:p
											Google Analytics uses the IP address of the HTTP request to determine the location of the visitor. This happens automatically for client-side and mobile tracking, but takes a little more work for server-side calls.
									Node:
									(type) c
									(layer)3
										Element:p
											For geo-location to work from a server-side call you’ll need to include the visitor’s
										Element:code
											ip
											in your
										Element:code
											.track()
											call.
									Node:
									(type) c
									(layer)3
										Element:p
										Element:em
											Here’s a Ruby example:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											Analytics.track( user_id: '019mr8mf4r', event: 'Purchased Item', properties: { revenue: 39.95 } context: { ip: '11.1.11.11' })
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											UTM Parameters
									Node:
									(type) c
									(layer)3
										Element:p
											If you want to send UTM parameters to Google Analytics via one of the Segment server-side sources they need to be passed manually. The client-side Javascript library (
										Element:a
											Analytics.js
											) is highly recommended for collecting this data since it all happens automatically.
									Node:
									(type) c
									(layer)3
										Element:p
											Your UTM params need to be passed in the
										Element:code
											context
											object in
										Element:code
											context.campaign
											. For Google Analytics
										Element:code
											campaign.name
											,
										Element:code
											campaign.source
											and
										Element:code
											campaign.medium
											all need to be sent together for things to show up in reports. The other two params (
										Element:code
											campaign.term
											and
										Element:code
											campaign.content
											) are both optional, but will be forwarded to GA if you send them to Segment.
									Node:
									(type) c
									(layer)3
										Element:hr
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Features
						Node:
						(type) c
						(layer)2
							Element:p
								We support all of the following Google Analytics features:
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:a
								Client-side (Analytics.js) library methods
							Element:li
							Element:a
								Anonymize IP Address
							Element:li
							Element:a
								Cookie Domain Name
							Element:li
							Element:a
								Custom Dimensions
							Element:li
							Element:a
								Cross-domain Tracking
							Element:li
							Element:a
								Ecommerce Transactions
							Element:li
							Element:a
								Events
							Element:li
							Element:a
								Ignored Referrers
							Element:li
							Element:a
								Multiple Trackers
							Element:li
							Element:a
								Query strings in Pageview
							Element:li
							Element:a
								Remarketing
								(Demographics & Interest Reports)
							Element:li
							Element:a
								Server-Side Tracking
							Element:li
							Element:a
								Site Search
							Element:li
							Element:a
								User-ID
							Element:li
							Element:a
								Virtual Pageviews
							Element:li
							Element:a
								Optimize
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Client-Side Library Methods
									Node:
									(type) c
									(layer)3
										Element:p
											Because Segment’s client-side snippet wraps Google Analytics’s Javascript, all GA library methods that don’t map to Segment methods are available client side. Although invoking a native library method won’t send data to Segment or other Segment-enabled integrations, the method
										Element:em
											will
											send data to Google Analytics.
									Node:
									(type) c
									(layer)3
										Element:p
											To access Google Analytics methods while using Segment, write these methods inside an
										Element:code
											analytics.ready()
											function, for example:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											analytics.ready(function(){ // GA library methods here })
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Anonymize IP Address
									Node:
									(type) c
									(layer)3
										Element:p
											Check the box in the Advanced Options for Google Analytics inside of Segment.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Remarketing
									Node:
									(type) c
									(layer)3
										Element:p
											Google’s remarketing (The remarketing tag formerly known as Doubleclick) is used to tag visitors for remarketing campaigns. It is also used to identify demographic and interest data on visitors that is displayed in Demographic & Interest reports inside of Google Analytics.
									Node:
									(type) c
									(layer)3
										Element:p
											Turn this feature on by checking the box in your Google Analytics settings on the Segment integrations page.
									Node:
									(type) c
									(layer)3
										Element:p
											Since remarketing is loaded through Segment Google Analytics will not be able to validate that the code is present on the page. Just click
										Element:strong
											Skip validation
											and your data will start showing up within a few hours.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Across Sub-domains
									Node:
									(type) c
									(layer)3
										Element:p
											This works automatically if you’re using the Universal tracking method. To track across sub-domains we recommend upgrading to universal if you haven’t already.
									Node:
									(type) c
									(layer)3
										Element:p
											If you need to set a specific domain name keep reading :)
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Multiple Trackers
									Node:
									(type) c
									(layer)3
										Element:p
											Although Segment does not support loading multiple trackers through the integrations settings page (you will probably run into Google Analytics’s
										Element:a
											rate limits
											), you can load a 2nd tracker on the page manually.
									Node:
									(type) c
									(layer)3
										Element:p
											Here’s how you’d initialize the second tracker and send a pageview to the second tracker Google Analytics property:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											analytics.ready(function(){ ga('create', 'UA-XXXXX-Y', 'auto', {'name': 'secondTracker'}); ga('secondTracker.send', 'pageview'); })
									Node:
									(type) c
									(layer)3
										Element:p
										Element:em
											Note
											: Make sure this script is placed after your Segment snippet, ideally at the end of the head tag.
									Node:
									(type) c
									(layer)3
										Element:p
											After you create the second tracker, you probably want to use our
										Element:code
											.on()
											emitter to automatically send data to this separate Google Analytics instance based on when you make other Segment calls.
									Node:
									(type) c
									(layer)3
										Element:p
											The below code would trigger an event to Google Analytics when you make a Segment track call.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											analytics.on('track', function(event, properties, options){ // custom logic based on event properties ga('secondTracker.send', { hitType: 'event', eventCategory: properties.category || 'All', eventAction: event, eventLabel: properties.label || 'All' }) });
									Node:
									(type) c
									(layer)3
										Element:p
										Element:strong
											Important
											: Keep in mind you will need to do all the data translation/properties mapping inside this
										Element:code
											.on()
											function before you send the event to Google Analytics like you see in our
										Element:a
											integration code
											.
									Node:
									(type) c
									(layer)3
										Element:p
											To do this server side, you can create a separate
										Element:a
											source
											in Segment, and within this source enter your GA credentials for the second tracker.
									Node:
									(type) c
									(layer)3
										Element:p
											This source can be your server-side source. From there, its easy to send data to multiple projects server-side, as you can see in this
										Element:a
											Node example
											you can initialize multiple instances of our library.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Cookie Domain Name
									Node:
									(type) c
									(layer)3
										Element:p
											The Google Analytics
										Element:strong
											Cookie Domain Name
											setting allows you to specify the domain that the
										Element:code
											_ga
											cookie will be set on. By default the cookie is placed on the top level domain:
										Element:code
											domain.com
											.
									Node:
									(type) c
									(layer)3
										Element:p
											We default the
										Element:strong
											Cookie Domain Name
											to
										Element:code
											auto
											, which automatically sets the cookie at the root domain level, which allows you to track across multiple sub-domains, but does not work on
										Element:code
											localhost
											. You can find this setting on your Segment integrations page under Google Analytics Advanced settings.
									Node:
									(type) c
									(layer)3
										Element:p
											If you need to test on
										Element:code
											localhost
											, but don’t need to track between multiple sub-domains, then you can set the domain to
										Element:code
											none
											.
									Node:
									(type) c
									(layer)3
										Element:p
											If you only want the cookie to persist on a single sub-domain, enter that sub-domain in the
										Element:strong
											Cookie Domain Name
											field, like this:
										Element:code
											swingline.initech.com
											. In this case visitors to
										Element:code
											conclusions.initech.com
											or
										Element:code
											initech.com
											will not be tracked.
									Node:
									(type) c
									(layer)3
										Element:p
											For more information on Google Analytics cookies and domains name see
										Element:a
											Google’s docs on the subject
											.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Cross-Domain Tracking
									Node:
									(type) c
									(layer)3
										Element:p
											Segment supports Google Analytics tracking across multiple top level domains, but it requires a bit of work from you. There are two ways to track visitors across domains.
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Tracking Visitors with User-ID
												Node:
												(type) c
												(layer)4
													Element:p
														If you’re identifying your users with a
													Element:a
														User-ID
														cross-domain tracking becomes simple. All you have to do is make sure you identify your users on each domain and Google will merge those users together as one.
												Node:
												(type) c
												(layer)4
													Element:p
														The only problem with this approach is that it only works for identified users, anonymous visitor sessions will not be maintained across domains.
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Tracking Anonymous Visitors
												Node:
												(type) c
												(layer)4
													Element:p
														When a visitor comes to your website,
													Element:code
														domain1.com
														, Google Analytics sets a first-party cookie that represents that user. That cookie looks like
													Element:code
														182119591.1441315536
														, and is tied to
													Element:code
														domain1.com
														(making it a first party cookie).
												Node:
												(type) c
												(layer)4
													Element:p
														When your visitor clicks a link to go another domain, let’s say
													Element:code
														domain2.com
														, you’ll need to tell the new site about the
													Element:code
														domain1.com
														cookie. This is done by rewriting your
													Element:code
														domain2.com
														links to include this
													Element:code
														domain1.com
														cookie, like so:
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														http://company2.com?_ga=1.182119591.1441315536.1362115890410
												Node:
												(type) c
												(layer)4
													Element:p
														Luckily, Google Analytics providers an auto-linking plugin to make this easier. To access the
													Element:code
														ga
														methods while using Segment they must be inside an
													Element:code
														analytics.ready()
														function, which should appear after your basic Segment snippet, like this:
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														analytics.ready(function () { ga('require', 'linker'); ga('linker:autoLink', ['company2.com']); });
												Node:
												(type) c
												(layer)4
													Element:p
														To make things easy Segment enables
													Element:code
														allowLinker
														by default so all you need to do is run these two functions with any domains you want to track across to in the second call above.
												Node:
												(type) c
												(layer)4
													Element:p
														You’ll want to carefully read the
													Element:a
														Google Analytics Domain Guide
														to get this setup.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Site Search
									Node:
									(type) c
									(layer)3
										Element:p
											In order to populate the Site Search report in Google Analytics there are a few you need to do…
									Node:
									(type) c
									(layer)3
										Element:ol
										Element:li
										Element:p
											When someone searches on your site, the search term they used must be added to the URL query, like this:
										Element:code
											domain.com?s=coconuts
											. The key (“s” in this case) can be any letter or string of letters.
										Element:li
										Element:p
											In your Segment source integrations page open the Google Analytics settings, click to the Advanced Options tab, scroll down and make sure the box is checked for
										Element:strong
											Include the Querystring in Page Views
											.
										Element:li
										Element:p
											Inside Google Analytics, go to the
										Element:strong
											Admin
											section, then click
										Element:strong
											View Settings
											for the view you want to add Site Search to. Turn on
										Element:strong
											Site search Tracking
											and enter the string from #1 into the Query parameter field. In this example it’d look like this:
									Node:
									(type) c
									(layer)3
										Element:p
										Element:img
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Webmaster Tools
									Node:
									(type) c
									(layer)3
										Element:p
											When you use Segment to load Google Analytics, our script loads the Google Analytics script. If you use
										Element:a
											Google Analytics as the verification option
											in Google Webmaster Tools, you’ll need to switch to the
										Element:a
											Meta tags verification option
											instead. This will require you to find the
										Element:code
											<meta name=google-site-verification" ..>
											tag in Webmaster Tools and place it in your master HTML template.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Cannonical Urls
									Node:
									(type) c
									(layer)3
										Element:p
											We take care of tracking the canonical URL to Google Analytics for you automatically. As long as there is a
										Element:code
											<meta rel="canonical">
											tag on your page, we’ll make sure Google Analytics gets the right canonical URL from it.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Optimize
									Node:
									(type) c
									(layer)3
										Element:p
											If you’d like to integrate with Google Analytics’
										Element:a
											Optimize plugin
											, all you have to do is insert your Optimize
										Element:strong
											Container ID
											in your integration settings and we will require the plugin when we initialize GA!
									Node:
									(type) c
									(layer)3
										Element:p
											You may, however, want to deploy
										Element:a
											page hiding
											to prevent the page from flashing / flickering when the A/B test is loaded. This is recommended by Google. This code must be added manually by customers since it needs to load synchronously. Note that the Optimize container ID must be included in this snippet too.
									Node:
									(type) c
									(layer)3
										Element:hr
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Troubleshooting
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Metrics vs. Dimensions
									Node:
									(type) c
									(layer)3
										Element:p
											They both allow you to track custom data properties in Google Analytics. However, Metrics are for event properties with a numeric data type and Dimensions are for event properties with a string data type.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Real-Time Reports
									Node:
									(type) c
									(layer)3
										Element:p
											Google Analytics doesn’t process their data in real-time in most of their reports. The easiest way to see if the data is streaming in is to check the Real-Time reports inside Google Analytics.
									Node:
									(type) c
									(layer)3
										Element:p
											If you see events in your real-time reports, but they never show up in other reports that is usually due to a filter you have applied. You can see your active filters inside Google Analytics by clicking on
										Element:strong
											Admin
											then under your View on the right click on
										Element:strong
											Filters
											.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Self Referrals
									Node:
									(type) c
									(layer)3
										Element:p
											This article does a great job of explaining GA self referrals and how to fix them:
										Element:a
											https://threeventures.com/how-to-fix-self-referrals-in-google-analytics/
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Time Frame
									Node:
									(type) c
									(layer)3
										Element:p
											Google Analytics’s default reporting time frame is a month ago to yesterday. You’ll need to adjust it from a month ago to today’s date to see today’s already processed events.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											HTTPS
									Node:
									(type) c
									(layer)3
										Element:p
											If your site uses
										Element:code
											https://
											, please go to your Google Analytics property settings page and change your
										Element:strong
											Site URL
											to use the
										Element:code
											https://
											protocol.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Bounce Rates
									Node:
									(type) c
									(layer)3
										Element:p
											Using Segment won’t affect your bounce rates in Google Analytics.
									Node:
									(type) c
									(layer)3
										Element:p
											If you see your bounce rates drop after installing Segment make sure you don’t have multiple copies of our snippet on your page. Also be sure you’re not calling
										Element:code
											page
											more than once when the page loads.
									Node:
									(type) c
									(layer)3
										Element:p
											If you call
										Element:code
											track
											on page load make sure to set
										Element:code
											nonInteraction
											to
										Element:code
											1
											. You can also set all events to be non-interactive by default in
										Element:code
											Advanced Options
											. Read more in our
										Element:a
											non-interaction events
											docs.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Traffic from Boardman or Segmentio Browser
									Node:
									(type) c
									(layer)3
										Element:p
											If you are seeing traffic from Boardman or see Segment as the browser, this is most likely because you are sending calls to Google Analytics from the
										Element:strong
											server side
											(our AWS servers reside in Boardman, Oregon). In order to prevent the Boardman issue, you would have to manually pass the
										Element:code
											IP
											information in the
										Element:code
											context
											object from the server.
									Node:
									(type) c
									(layer)3
										Element:p
											Here is an example:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											Analytics.track( user_id: '507f191e810c19729de860ea', event: 'Visited Agency Profile', properties: { name: 'Ram Estate Agent', favorite_color: 'blue' }, context: { ip: '127.0.0.1' } )
									Node:
									(type) c
									(layer)3
										Element:p
											To prevent the Segment as the browser issue, you want to manually pass in the
										Element:code
											user_agent
											:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											Analytics.track( user_id: '507f191e810c19729de860ea', event: 'Visited Agency Profile', properties: { name: 'Ram Estate Agent', favorite_color: 'blue' }, context: { user_agent: 'some user-agent' } )
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Providing Required Field Display Name
									Node:
									(type) c
									(layer)3
										Element:p
											Google Analytics requires the
										Element:code
											context.app.name
											passed in each call. Since the
										Element:code
											analytics-ios
											SDK pulls it in
										Element:a
											locally
											, you may see the error “
										Element:code
											context.app.name
											required” if you are not providing a
										Element:code
											CFBundleDisplayName
											within your
										Element:strong
											Info.plist
											file.
									Node:
									(type) c
									(layer)3
										Element:p
											To resolve this error, ensure you
										Element:a
											provide a localized info dictionary
											as outlined
										Element:a
											here
											.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Target has transitive dependencies that include static binaries
									Node:
									(type) c
									(layer)3
										Element:p
											This is an
										Element:a
											issue
											that doesn’t have an out of the box solution due to
										Element:a
											Cocoapods
											limitations. The limitation occurs when an application is built in Swift, you are including
										Element:code
											use_frameworks!
											in your podfile, and are using a transitive dependency that is provided as a static library (such as Google Analytics).
									Node:
									(type) c
									(layer)3
										Element:p
											Becase Google will not provide a dynamic framework, the current workaround is to copy the
										Element:a
											integration code
											manually into your project, then depend on Google Analytics directly. Instead of importing the integration from our library you would import the integration from your local copy. This eliminates the transitive dependency from the App -> Segment-GoogleAnalytics -> GA to App -> GA.
									Node:
									(type) c
									(layer)3
										Element:hr
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Supported Sources and Connection Modes
						Node:
						(type) c
						(layer)2
							Element:table
							Element:tr
							Element:th
							Element:th
								Web
							Element:th
								Mobile
							Element:th
								Server
							Element:tr
							Element:td
								📱 Device-based
							Element:td
								✅
							Element:td
								✅
							Element:td
							Element:tr
							Element:td
								☁️ Cloud-based
							Element:td
							Element:td
								✅
							Element:td
								✅
						Node:
						(type) c
						(layer)2
							Element:p
								To learn more about about Connection Modes and what dictates which we support,
							Element:a
								see here
								.
						Node:
						(type) c
						(layer)2
							Element:p
								Segment offers a
							Element:strong
								Device-based
								Connection Mode for
							Element:strong
								Mobile
								data with Google Analytics. If you’d like to use those features that require client-based functionality, follow the steps above to ensure you have packaged the Google Analytics SDK with Segment’s.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Settings
						Node:
						(type) c
						(layer)2
							Element:p
								Segment lets you change these integration settings via your Segment dashboard without having to touch any code.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Anonymize IP Addresses
									Node:
									(type) c
									(layer)3
										Element:p
											Read more about anonymizing IP addresses from the
										Element:a
											Google support documentation
											.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Use Classic Analytics on Your Site
									Node:
									(type) c
									(layer)3
										Element:p
										Element:strong
											Important:
											When creating your Google Analytics profile, you can choose between
										Element:strong
											Classic
											and
										Element:strong
											Universal
											Analytics. After March 2013, new profiles default to Universal, while earlier ones are Classic. An easy test: if you see
										Element:code
											_gaq.push
											in your code you’re using Classic, so enable this.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Content Groupings
									Node:
									(type) c
									(layer)3
										Element:p
											Enter a property name on the left. Choose the Google Analytics content grouping you want on the right. Google Analytics only accepts numbered content groupings (e.g. contentGrouping3). When you use
										Element:code
											analytics.page(name, properties)
											with custom properties, we’ll use the value of the property you designate as the value of the specified content grouping. Currently only available client-side, server-side coming soon!
										Element:a
											Contact us
											if you need help!
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Custom Dimensions
									Node:
									(type) c
									(layer)3
										Element:p
											Because Google Analytics cannot accept arbitrary data about users or events, when you use
										Element:code
											analytics.identify(userId, traits)
											with custom traits or
										Element:code
											analytics.track('event', properties)
											with custom properties, you need to map those traits and properties to Google Analytics custom dimensions if you want them to be sent to GA. Enter a trait or property name on the left. Choose the Google Analytics dimension you want on the right. Google Analytics only accepts numbered dimensions (e.g. dimension3). We suggest using user-scoped dimensions for trait mappings and hit-scoped dimensions for properties
										Element:a
											Contact us
											if you need help!
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Cookie Domain Name
									Node:
									(type) c
									(layer)3
										Element:p
										Element:em
											Only data sent from visitors on this domain
											will be recorded. By default Google Analytics automatically resolves the domain name, so you should
										Element:strong
											leave this blank unless you know you want otherwise
											! This option is useful if you need to ignore data from other domains, or explicitly set the domain of your Google Analytics cookie. This is known as Override Domain Name in
										Element:a
											GA Classic
											. If you are testing locally, you can set the domain to
										Element:code
											none
											.
										Element:a
											Read more about this setting in our docs
											.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Remarketing, Display Ads and Demographic Reports.
									Node:
									(type) c
									(layer)3
										Element:p
											Works with both Universal and Classic tracking methods.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Enable Enhanced Ecommerce
									Node:
									(type) c
									(layer)3
										Element:p
											If you want more detailed reports on ecommerce, you might want to enable this feature. Read more about it
										Element:a
											here
											.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Enable Enhanced Link Attribution
									Node:
									(type) c
									(layer)3
										Element:p
											Provides more detailed reports on the links clicked on your site. Read more about it in the
										Element:a
											Google support documentation
											.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Ignored Referrers
									Node:
									(type) c
									(layer)3
										Element:p
											Add any domains you want to ignore, separated by line breaks. You might use this if you want Google Analytics to ignore certain referral domains (e.g. to prevent your subdomains from showing up as referrers in your analytics).
										Element:em
											Note: this only works for Classic profiles. Universal profiles can
										Element:a
											edit their ignored referrers
										Element:em
											directly inside Google Analytics.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Include the Querystring in Page Views
									Node:
									(type) c
									(layer)3
										Element:p
											The querystring doesn’t usually affect the content of the page in a significant way (like sorting), so we disable this by default.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Custom Metrics
									Node:
									(type) c
									(layer)3
										Element:p
											Because Google Analytics cannot accept arbitrary data about users or events, when you use
										Element:code
											analytics.identify(userId, traits)
											with custom numerical traits or
										Element:code
											analytics.track('event', properties)
											with custom numerical properties, you need to map those traits and properties to Google Analytics custom metrics if you want them to be sent to GA. Enter a trait or property name on the left. Choose the Google Analytics metric you want on the right. Google Analytics only accepts numbered metrics (e.g. metric3). We suggest using user-scoped metrics for trait mappings and hit-scoped metrics for properties.
										Element:a
											Contact us
											if you need help!
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Mobile Tracking ID
									Node:
									(type) c
									(layer)3
										Element:p
											Google Analytics tracks mobile apps separately, so you’ll want to create a separate Google Analytics mobile app property. Remember to only add a mobile tracking ID if you’re tracking from a mobile library. If you’re tracking from a hybrid app, fill in your website tracking ID instead. Leave it blank if you don’t have a mobile app property.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Add the non-interaction flag to all events
									Node:
									(type) c
									(layer)3
										Element:p
											Adds a
										Element:em
											noninteraction: true flag
											to every event tracked to Google Analytics. If you’re seeing unusually low bounce rates this will solve that issue.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Optimize Container ID
									Node:
									(type) c
									(layer)3
										Element:p
											Integrate with Google Analytics Optimize plugin. Please enter your Optimize Container ID
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Send Uncaught Exceptions to GA (Mobile)
									Node:
									(type) c
									(layer)3
										Element:p
											This lets you study errors and exceptions in your iOS and Android apps in Google Analytics.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Sample Rate
									Node:
									(type) c
									(layer)3
										Element:p
											Specifies what percentage of users should be tracked. This defaults to 100 (no users are sampled out) but large sites may need to use a lower sample rate to stay within Google Analytics processing limits as
										Element:a
											seen here
											. Currently only available in the browser - mobile coming soon.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Send User-ID to GA
									Node:
									(type) c
									(layer)3
										Element:p
											User-ID enables the analysis of groups of sessions across devices, using a unique and persistent ID. This only works with Google Analytics Universal. IMPORTANT: Sending email or other personally identifiable information (PII) violates Google Analytics Terms of Service.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Use Classic Analytics for Your Serverside Tracking
									Node:
									(type) c
									(layer)3
										Element:p
										Element:strong
											Important:
											When creating your Google Analytics profile, you can choose between
										Element:strong
											Classic
											and
										Element:strong
											Universal
											Analytics. After March 2013, new profiles default to Universal, while earlier profiles are Classic. An easy test: if you see
										Element:code
											_gaq.push
											in your code you’re using Classic, so enable this.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Serverside Tracking ID
									Node:
									(type) c
									(layer)3
										Element:p
											Your Serverside Tracking ID is the UA code for the Google Analytics property you want to send server-side calls to. Leave it blank if you don’t have a server-side client library that you want to send data from. Remember that data tracked from mobile integrations that are not bundled in your app send data to Google Analytics server side, since Segment sends data to them via our own servers.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Site Speed Sample Rate
									Node:
									(type) c
									(layer)3
										Element:p
											Defines the sample size for Site Speed data collection. If you have a small number of visitors you might want to adjust the sampling to a larger rate for your
										Element:a
											site speed stats
											.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Track Categorized Pages
									Node:
									(type) c
									(layer)3
										Element:p
											Tracks events to Google Analytics for
										Element:a
											calls that have a
										Element:code
											page
											method
										Element:code
											category
											associated with them. E.g.
										Element:code
											page('Docs', 'Index')
											translates to
										Element:strong
											Viewed Docs Page
											.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Track Named Pages
									Node:
									(type) c
									(layer)3
										Element:p
											Tracks events to Google Analytics for
										Element:a
											calls that have a
										Element:code
											page
											method
										Element:code
											name
											associated with them. E.g.
										Element:code
											page('Signup')
											translates to
										Element:strong
											Viewed Signup Page
											.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Website Tracking ID
									Node:
									(type) c
									(layer)3
										Element:p
											Your website’s Tracking ID is in the
										Element:strong
											Tracking Info
											tab on the
										Element:a
											Admin Page
											of Google Analytics. Leave it blank if you don’t have a website property.
									Node:
									(type) c
									(layer)3
										Element:hr
									Node:
									(type) c
									(layer)3
										Element:p
											If you have any questions or see anywhere we can improve our documentation, please
										Element:a
											let us know
											or kick off a conversation in the
										Element:a
											Segment Community
											!
									Node:
									(type) c
									(layer)3
										Element:i
									Node:
									(type) c
									(layer)3
										Element:i
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
									Node:
									(type) c
									(layer)3
										Element:span
											Check out the code!
									Node:
									(type) c
									(layer)3
										Element:a
											android
									Node:
									(type) c
									(layer)3
										Element:a
											browser
									Node:
									(type) c
									(layer)3
										Element:a
											ios
									Node:
									(type) c
									(layer)3
										Element:a
											server
