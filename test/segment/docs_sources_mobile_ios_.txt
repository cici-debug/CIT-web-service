Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					Analytics for iOS
			Node:
			(type) c
			(layer)1
				Element:p
					Analytics for iOS makes it dead simple to send your data to any analytics or marketing tool without having to learn, test or implement a new API every time.
			Node:
			(type) c
			(layer)1
				Element:p
					All of our libraries are open-source, so you can
				Element:a
					view Analytics for iOS on Github
					, or check out our
				Element:a
					browser and server-side libraries
					too.
			Node:
			(type) c
			(layer)1
				Element:p
					Want to stay updated on releases? Subscirbe to the
				Element:a
					release feed
					.
			Node:
			(type) c
			(layer)1
				Element:p
				Element:strong
					Note:
					At the moment we can’t support tracking of watchkit extensions for the Apple watch.
				Element:a
					Email us
					if you’re interested in a watchkit SDK. For now we recommend tracking watch interactions via the iPhone app code.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Getting Started
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Step 1: Install the SDK
									Node:
									(type) c
									(layer)3
										Element:p
											The recommended way to install Analytics for iOS is via
										Element:a
											Cocoapods
											, since it means you can create a build with specific integrations, and because it makes it dead simple to install and upgrade.
									Node:
									(type) c
									(layer)3
										Element:p
											First, add the
										Element:code
											Analytics
											dependency to your
										Element:code
											Podfile
											, like so:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											pod 'Analytics', '~> 3.0'
									Node:
									(type) c
									(layer)3
										Element:p
											Then in your application delegate’s
										Element:code
											- application:didFinishLaunchingWithOptions:
											method, setup the SDK like so:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											SEGAnalyticsConfiguration *configuration = [SEGAnalyticsConfiguration configurationWithWriteKey:@"YOUR_WRITE_KEY"]; configuration.trackApplicationLifecycleEvents = YES; // Enable this to record certain application events automatically! configuration.recordScreenViews = YES; // Enable this to record screen views automatically! [SEGAnalytics setupWithConfiguration:configuration];
									Node:
									(type) c
									(layer)3
										Element:p
										Element:strong
											Note:
											Automatically tracking lifecycle events (
										Element:code
											Application Opened
											,
										Element:code
											Application Installed
											,
										Element:code
											Application Updated
											) and screen views is optional via initialization config parameters, but highly recommended to hit the ground running with core events! See
										Element:a
											below
											for more info!
									Node:
									(type) c
									(layer)3
										Element:p
											And of course, import the SDK in the files that you use it with:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											#import <Analytics/SEGAnalytics.h>
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Including SDKs for Integrations with Device-based Connection Modes
									Node:
									(type) c
									(layer)3
										Element:p
											In the interest of keeping our SDK lightweight, the Analytics pod only installs the Segment integration. This means that all your data will be sent via Segment’s servers to any tools you’ve enabled by the default Cloud-based Connection Mode.
									Node:
									(type) c
									(layer)3
										Element:p
										Element:a
											As described here
											, some integrations require or offer Device-based Connection Modes. In those cases, you’ll need to take some additional steps as
										Element:a
											shown in the source documentation here
											.
									Node:
									(type) c
									(layer)3
										Element:p
											Now that the SDK is installed and setup, you’re ready to…
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Identify
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								identify
								lets you tie a user to their actions and record traits about them. It includes a unique User ID and any optional traits you know about them.
						Node:
						(type) c
						(layer)2
							Element:p
								We recommend calling
							Element:code
								identify
								a single time when the user’s account is first created, and only identifying again later when their traits are change.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:strong
								Note:
								We automatically assign an anonymousId to users before you identify them. The userId is what connects anonymous activity across devices (e.g. iPhone and iPad).
						Node:
						(type) c
						(layer)2
							Element:p
								Example
							Element:code
								identify
								call:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								[[SEGAnalytics sharedAnalytics] identify:@"a user's id" traits:@{ @"email": @"a user's email address" }];
						Node:
						(type) c
						(layer)2
							Element:p
								This call is identifying a user by his unique User ID (the one you know him by in your database) and labeling him with
							Element:code
								name
								and
							Element:code
								email
								traits.
						Node:
						(type) c
						(layer)2
							Element:p
								The
							Element:code
								identify
								call has the following fields:
						Node:
						(type) c
						(layer)2
							Element:table
							Element:tr
							Element:td
							Element:code
								userId
							Element:em
								NSString *, optional
							Element:td
								The database ID for this user. If you don’t know who the user is yet, you can omit the
							Element:code
								userId
								and just record
							Element:code
								traits
								. You can read more in the
							Element:a
								identify reference
								.
							Element:tr
							Element:td
							Element:code
								traits
							Element:em
								NSDictionary *, optional
							Element:td
								A dictionary of traits you know about the user, like their
							Element:code
								email
								or
							Element:code
								name
								. You can read more about traits in the
							Element:a
								identify reference
								.
							Element:tr
							Element:td
							Element:code
								options
							Element:em
								NSDictionary *, optional
							Element:td
								A dictionary of extra
							Element:a
								options
								for the call.
						Node:
						(type) c
						(layer)2
							Element:p
								Analytics for iOS works on its own background thread, so it will never block the main thread for the UI or the calling thread.
						Node:
						(type) c
						(layer)2
							Element:p
								Calling
							Element:code
								- identify:
								with a
							Element:code
								userId
								will write that ID to disk to be used in subsequent calls. That ID can be removed either by uninstalling the app or by calling
							Element:a
								.
							Element:code
								reset
						Node:
						(type) c
						(layer)2
							Element:p
								Find details on the
							Element:strong
								identify method payload
								in our
							Element:a
								Spec
								.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Track
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								track
								lets you record the actions your users perform. Every action triggers what we call an “event”, which can also have associated properties.
						Node:
						(type) c
						(layer)2
							Element:p
								To get started, our SDK can automatically tracks a few key common events with our
							Element:a
								Native Mobile Spec
								, such as the
							Element:code
								Application Installed
								,
							Element:code
								Application Updated
								and
							Element:code
								Application Opened
								. Simply enable this option during initialization.
						Node:
						(type) c
						(layer)2
							Element:p
								You’ll also want to track events that are indicators of success for your mobile app, like
							Element:strong
								Signed Up
								,
							Element:strong
								Item Purchased
								or
							Element:strong
								Article Bookmarked
								. We recommend tracking just a few important events. You can always add more later!
						Node:
						(type) c
						(layer)2
							Element:p
								Example
							Element:code
								track
								call:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								[[SEGAnalytics sharedAnalytics] track:@"Item Purchased" properties:@{ @"item": @"Sword of Heracles", @"revenue": @2.95 }];
						Node:
						(type) c
						(layer)2
							Element:p
								This example
							Element:code
								track
								call tells us that your user just triggered the
							Element:strong
								Item Purchased
								event recording the
							Element:code
								item
								name of “Sword of Hercales” and
							Element:code
								revenue
								of 2.95.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								track
								event properties can be anything you want to record. In this case, item and revenue.
						Node:
						(type) c
						(layer)2
							Element:p
								The
							Element:code
								track
								call has the following fields:
						Node:
						(type) c
						(layer)2
							Element:table
							Element:tr
							Element:td
							Element:code
								event
							Element:em
								NSString *
							Element:td
								The name of the event. We recommend human-readable names like
							Element:strong
								Song Played
								or
							Element:strong
								Status Updated
								.
							Element:tr
							Element:td
							Element:code
								properties
							Element:em
								NSDictionary *, optional
							Element:td
								A dictionary of properties for the event. If the event was
							Element:code
								Product Added
								to cart, it might have properties like
							Element:code
								price
								and
							Element:code
								productType
								.
							Element:tr
							Element:td
							Element:code
								options
							Element:em
								NSDictionary *, optional
							Element:td
								A dictionary of extra
							Element:a
								options
								for the call.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Screen
						Node:
						(type) c
						(layer)2
							Element:p
								The
							Element:a
								method lets you you record whenever a user sees a screen of your mobile app, along with optional extra information about the page being viewed.
							Element:code
								screen
						Node:
						(type) c
						(layer)2
							Element:p
								You’ll want to record a screen event an event whenever the user opens a screen in your app. This could be a view, fragment, dialog or activity depending on your app.
						Node:
						(type) c
						(layer)2
							Element:p
								Example
							Element:code
								screen
								call:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								[[SEGAnalytics sharedAnalytics] screen:@"Photo Feed" properties:@{ @"Feed Type": @"private" }];
						Node:
						(type) c
						(layer)2
							Element:p
								The
							Element:code
								screen
								call has the following fields:
						Node:
						(type) c
						(layer)2
							Element:table
							Element:tr
							Element:td
							Element:code
								name
							Element:em
								NSString *
							Element:td
								The name of the screen, for example
							Element:strong
								Signup
								or
							Element:strong
								Home
								.
							Element:tr
							Element:td
							Element:code
								properties
							Element:em
								NSDictionary *, optional
							Element:td
								A dictionary of properties for the screen. A screen
							Element:strong
								Photo Feed
								might have properties like
							Element:code
								Feed Type
								or
							Element:code
								Sort Order
								.
							Element:tr
							Element:td
							Element:code
								options
							Element:em
								NSDictionary *, optional
							Element:td
								A dictionary of extra
							Element:a
								options
								for the call.
						Node:
						(type) c
						(layer)2
							Element:p
								Find details on the
							Element:strong
								in our
							Element:code
								screen
								payload
							Element:a
								Spec
								.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Group
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								group
								lets you associate an
							Element:a
								identified user
								user with a group. A group could be a company, organization, account, project or team! It also lets you record custom traits about the group, like industry or number of employees.
						Node:
						(type) c
						(layer)2
							Element:p
								This is useful for tools like
							Element:a
								Intercom
								,
							Element:a
								Preact
								and
							Element:a
								Totango
								, as it ties the user to a
							Element:strong
								group
								of other users.
						Node:
						(type) c
						(layer)2
							Element:p
								Example
							Element:code
								group
								call:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								[[SEGAnalytics sharedAnalytics] group:@"group123" traits:@{ @"name": @"Initech", @"description": @"Accounting Software" }];
						Node:
						(type) c
						(layer)2
							Element:p
								The
							Element:code
								group
								call has the following fields:
						Node:
						(type) c
						(layer)2
							Element:table
							Element:tr
							Element:td
							Element:code
								userId
							Element:em
								String
							Element:td
								The ID for this user in your database.
							Element:tr
							Element:td
							Element:code
								groupId
							Element:em
								String
							Element:td
								The ID for this group in your database.
							Element:tr
							Element:td
							Element:code
								traits
							Element:em
								Traits, optional
							Element:td
								A dictionary of traits you know about the group. Things like:
							Element:code
								name
								or
							Element:code
								website
								.
							Element:tr
							Element:td
							Element:code
								options
							Element:em
								Options, optional
							Element:td
								An
							Element:code
								Options
								object lets you set a
							Element:a
								timestamp
								,
							Element:a
								enable or disable integrations
								, or
							Element:a
								send additional context
								.
						Node:
						(type) c
						(layer)2
							Element:p
								Find more details about
							Element:code
								group
								including the
							Element:strong
								in our
							Element:code
								group
								payload
							Element:a
								Spec
								.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Alias
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								alias
								is how you associate one identity with another. This is an advanced method, but it is required to manage user identities successfully in
							Element:em
								some
								of our integrations.
						Node:
						(type) c
						(layer)2
							Element:p
								In
							Element:a
								Mixpanel
								it’s used to associate an anonymous user with an identified user once they sign up. For
							Element:a
								KISSmetrics
								, if your user switches IDs, you can use ‘alias’ to rename the ‘userId’.
						Node:
						(type) c
						(layer)2
							Element:p
								Example
							Element:code
								alias
								call:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								[[SEGAnalytics sharedAnalytics] alias:@"some new id"];
						Node:
						(type) c
						(layer)2
							Element:p
								The
							Element:code
								alias
								call has the following fields:
						Node:
						(type) c
						(layer)2
							Element:table
							Element:tr
							Element:td
							Element:code
								newId
							Element:em
								NSString *
							Element:td
								The newId of the user you want to map to.
							Element:tr
							Element:td
							Element:code
								options
							Element:em
								NSDictionary *, optional
							Element:td
								A dictionary of extra
							Element:a
								options
								for the call.
						Node:
						(type) c
						(layer)2
							Element:p
								For more details about
							Element:code
								alias
								, including the
							Element:strong
								, check out our
							Element:code
								alias
								call payload
							Element:a
								Spec
								.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Reset
						Node:
						(type) c
						(layer)2
							Element:p
								The
							Element:code
								- reset
								method clears the SDK’s internal stores for the current
							Element:code
								user
								and
							Element:code
								group
								. This is useful for apps where users can log in and out with different identities over time.
						Node:
						(type) c
						(layer)2
							Element:p
								Clearing all information about the user is as simple as calling:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								[[SEGAnalytics sharedAnalytics] reset];
						Node:
						(type) c
						(layer)2
							Element:hr
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Migrating to v3
						Node:
						(type) c
						(layer)2
							Element:p
								v3 is an API compatible release, but there are a few additional steps for packaging integrations with Device-based Connection Modes.
						Node:
						(type) c
						(layer)2
							Element:p
								In version 3, we’ve organized the integrations to be make the core SDK even leaner and smaller. The
							Element:code
								Analytics/Segmentio
								pod is not available any longer. It has been renamed to
							Element:code
								Analytics
								(which previously packaged all possible integrations). Version 3 of
							Element:code
								Analytics
								only includes the core library which forwards data directly to . To add an integration with a Device-based Connection Mode, you must manually add that integration’s dependencies, like so:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								pod 'Segment-Bugsnag' pod 'Segment-Branch' pod 'Segment-GoogleAnalytics' ...
						Node:
						(type) c
						(layer)2
							Element:p
								…and then register them in your configuration when you initialize the SDK.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:em
								Note:
								If you are unsure about the name of the pod for a given SDK, you can always confirm on by searching for the integration in
							Element:a
								our app
								!
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								#import <Segment-GoogleAnalytics/SEGGoogleAnalyticsIntegrationFactory.h> #import <Segment-Branch/BNCBranchIntegrationFactory.h> SEGAnalyticsConfiguration *config = [SEGAnalyticsConfiguration configurationWithWriteKey:@"YOUR_WRITE_KEY"]; // Add any of your Device-based integration components. [config use:[SEGGoogleAnalyticsIntegrationFactory instance]]; [config use:[BNCBranchIntegrationFactory instance]]; ... [SEGAnalytics setupWithConfiguration:config];
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Submitting to the App Store
						Node:
						(type) c
						(layer)2
							Element:p
								When you submit to the app store, be aware that Segment collects the IDFA for use in doing mobile install attribution with integrations like Mobile App Tracking. Even if you’re not currently doing mobile install attribution, if you get asked, “Does this app use the Advertising Identifier (IDFA)?” on
							Element:a
								this
								page, you’ll want to
							Element:strong
								check
								the following three boxes:
						Node:
						(type) c
						(layer)2
							Element:ol
							Element:li
								“Attribute this app installation to a previously served advertisement”
							Element:li
								“Attribute an action taken within this app to a previously served advertisement”
							Element:li
								“I, YOUR_NAME, confirm that this app, and any third party…”
						Node:
						(type) c
						(layer)2
							Element:p
								Note, you should
							Element:em
								not
								check the box labeled “Serve advertisements within the app” unless you are actually going to display ads.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Selecting Integrations
						Node:
						(type) c
						(layer)2
							Element:p
								The
							Element:code
								alias
								,
							Element:code
								group
								,
							Element:code
								identify
								,
							Element:code
								page
								and
							Element:code
								track
								calls can all be passed an object of
							Element:code
								integrations
								that lets you turn certain integrations on or off. By default all integrations are enabled.
						Node:
						(type) c
						(layer)2
							Element:p
								You can enable or disable integrations by specifying an
							Element:code
								NSDictionary *
								in the options parameter of our methods as follows:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								options:@{ @"integrations": @{ @"ENABLED_INTEGRATION_NAME": @YES, @"DISABLED_INTEGRATION_NAME: @NO } }
						Node:
						(type) c
						(layer)2
							Element:p
								Here’s an example showing an
							Element:code
								- track:
								call that is sent to all enabled integrations except Mixpanel:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								[[SEGAnalytics sharedAnalytics] track:@"Product Rated" properties:nil options:@{ @"integrations": @{ @"All": @YES, @"Mixpanel": @NO }}];
						Node:
						(type) c
						(layer)2
							Element:p
								Integration flags are
							Element:strong
								case sensitive
								and match
							Element:a
								the integration’s name in the docs
								(i.e. “AdLearn Open Platform”, “awe.sm”, “MailChimp”, etc.).
						Node:
						(type) c
						(layer)2
							Element:p
							Element:strong
								Note:
								Available at the business level, filtering track calls can be done right from the Segment UI on your source schema page. We recommend using the UI if possible since it’s a much simpler way of managing your filters and can be updated with no code changes on your side.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Integrations in Debugger
									Node:
									(type) c
									(layer)3
										Element:p
											If you are seeing any of your integrations turned off in the raw version of requests in the Segment live debugger, but you haven’t added those to your requests, like this:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											"integrations": { "Segment.io": false, "Google Analytics": false, "Localytics": false, "Mixpanel": false }
									Node:
									(type) c
									(layer)3
										Element:p
											These flags tell the Segment servers that a request was already made directly from the device through a packaged SDK. That way we don’t send a duplicate request via our servers to those services.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Configuration
						Node:
						(type) c
						(layer)2
							Element:p
								The
							Element:code
								SEGAnalyticsConfiguration
								class provides a set of properties that control various policies of the
							Element:code
								SEGAnalytics
								instance. You initialize it with a
							Element:code
								writeKey
								like so:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								[SEGAnalytics setupWithConfiguration:[SEGAnalyticsConfiguration configurationWithWriteKey:@"YOUR_WRITE_KEY"]];
						Node:
						(type) c
						(layer)2
							Element:table
							Element:tr
							Element:td
							Element:code
								writeKey
							Element:em
								NSString *
							Element:td
								Your Segment source’s
							Element:strong
								Write Key
								.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Location Services
									Node:
									(type) c
									(layer)3
										Element:p
											You can set whether the analytics client should use location services. If
										Element:code
											YES
											and the host app hasn’t asked for permission to use location services, then the user may be presented with an alert view asking to do so.
										Element:code
											NO
											by default.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											SEGAnalyticsConfiguration *configuration = [SEGAnalyticsConfiguration configurationWithWriteKey:@"YOUR_WRITE_KEY"]; configuration.shouldUseLocationServices = YES; [SEGAnalytics setupWithConfiguration:configuration];
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Flushing
									Node:
									(type) c
									(layer)3
										Element:p
											You can set the number of events should queue before flushing. Setting this to
										Element:code
											1
											will send events as they come in (i.e. not send batched events) and will use more battery.
										Element:code
											20
											by default.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											SEGAnalyticsConfiguration *configuration = [SEGAnalyticsConfiguration configurationWithWriteKey:@"YOUR_WRITE_KEY"]; configuration.flushAt = 1; [SEGAnalytics setupWithConfiguration:configuration];
									Node:
									(type) c
									(layer)3
										Element:p
											You can also manually
										Element:code
											flush
											the queue:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											[[SEGAnalytics sharedAnalytics] alias:@"glenncoco"]; [[SEGAnalytics sharedAnalytics] flush]
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Application Lifecycle Tracking
									Node:
									(type) c
									(layer)3
										Element:p
											Our SDK can automatically instrument common application lifecycle events such as “Application Installed”, “Application Updated” and “Application Opened”. Simply enable this option when you initialize the SDK.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											SEGAnalyticsConfiguration *configuration = [SEGAnalyticsConfiguration configurationWithWriteKey:@"YOUR_WRITE_KEY"]; configuration.trackApplicationLifecycleEvents = YES; [SEGAnalytics setupWithConfiguration:configuration];
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Automatic Screen Tracking
									Node:
									(type) c
									(layer)3
										Element:p
											Our SDK can automatically instrument screen calls. It uses method swizzling to detect when ViewController’s are loaded and uses the label of the view controller (or the class name if a label is not available) as the screen name.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											SEGAnalyticsConfiguration *configuration = [SEGAnalyticsConfiguration configurationWithWriteKey:@"YOUR_WRITE_KEY"]; configuration.recordScreenViews = YES; [SEGAnalytics setupWithConfiguration:configuration];
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Bleeding Edge Releases
						Node:
						(type) c
						(layer)2
							Element:p
								We publish stable releases every second Wednesday, when we tag and release the
							Element:code
								master
								branch.
						Node:
						(type) c
						(layer)2
							Element:p
								After releasing, we also merge the
							Element:code
								dev
								branch merged into
							Element:code
								master
								. In general, code will be available on
							Element:code
								master
								for two weeks before being tagged as a stable release. During this two week period, it is available for use via Cocoapods and Carthage — our equivalent of bleeding edge releases. We recommend using this version to try out upcoming features and fixes that have not been published yet.
						Node:
						(type) c
						(layer)2
							Element:p
								To use the
							Element:code
								master
								branch for CocoaPods users, use this line in your
							Element:code
								Podfile
								:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								pod 'Analytics', :git => 'https://github.com/segmentio/analytics-ios.git', :branch => 'master'
						Node:
						(type) c
						(layer)2
							Element:p
								To use the
							Element:code
								master
								branch for Carthage users, use this line in your
							Element:code
								Cartfile
								:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								github "segmentio/analytics-ios" "master"
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Logging
						Node:
						(type) c
						(layer)2
							Element:p
								To see a trace of your data going through the SDK, you can enable debug logging with
							Element:code
								- debug:
								:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								[SEGAnalytics debug:YES];
						Node:
						(type) c
						(layer)2
							Element:p
								Or disable it like this:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								[SEGAnalytics debug:NO];
						Node:
						(type) c
						(layer)2
							Element:p
								By default debug logging is disabled.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Proxy HTTP Calls
						Node:
						(type) c
						(layer)2
							Element:p
								You can point the iOS SDK to your own hosted
							Element:a
								proxy
								of the Segment API. This will run the HTTP traffic for the Segment API through the proxy.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								SEGAnalyticsConfiguration *configuration = [SEGAnalyticsConfiguration configurationWithWriteKey:@"YOUR_WRITE_KEY"]; // Set a custom request factory which allows you to modify the way the library creates an HTTP request. // In this case, we're transforming the URL to point to our own custom non-Segment host. configuration.requestFactory = ^(NSURL *url) { NSURLComponents *components = [NSURLComponents componentsWithURL:url resolvingAgainstBaseURL:NO]; // Replace YOUR_PROXY_HOST with the address of your proxy, e.g. aba64da6.ngrok.io. components.host = @"YOUR_PROXY_HOST"; NSURL *transformedURL = components.URL; return [NSMutableURLRequest requestWithURL:transformedURL]; }; // Set any other custom configuration options. ... // Initialize the SDK with the configuration. [SEGAnalytics setupWithConfiguration:configuration];
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Opt-out
						Node:
						(type) c
						(layer)2
							Element:p
								Depending on the audience for your app (e.g. children) or the countries where you sell your app (e.g. the EU), you may need to offer the ability for users to opt-out of analytics data collection inside your app. You can turn off ALL integrations including Segment itself:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								[[SEGAnalytics sharedAnalytics] disable];
						Node:
						(type) c
						(layer)2
							Element:p
								Or if they opt-back-in, you can re-enable data collection:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								[[SEGAnalytics sharedAnalytics] enable];
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Packaging Integrations with Device-based Connection Modes
						Node:
						(type) c
						(layer)2
							Element:p
								By default, our
							Element:code
								Analytics
								pod packages no external SDKs.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								pod 'Analytics', '~> 3.1.0'
						Node:
						(type) c
						(layer)2
							Element:p
								If you would like to add any integrations with Device-based Connection Modes, first add the dependencies you need. You can find these in our app when you open the integration sheet for any mobile integration with a Device-based Connection Mode option.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								pod 'Segment-Bugsnag' pod 'Segment-Branch' pod 'Segment-GoogleAnalytics' ...
						Node:
						(type) c
						(layer)2
							Element:p
								After adding the dependency, you must register the integration with our SDK.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								#import <Segment-GoogleAnalytics/SEGGoogleAnalyticsIntegrationFactory.h> #import <Segment-Branch/BNCBranchIntegrationFactory.h> SEGAnalyticsConfiguration *config = [SEGAnalyticsConfiguration configurationWithWriteKey:@"YOUR_WRITE_KEY"]; // Add any of your Device-based integrations. [config use:[SEGGoogleAnalyticsIntegrationFactory instance]]; [config use:[BNCBranchIntegrationFactory instance]]; ... [SEGAnalytics setupWithConfiguration:config];
						Node:
						(type) c
						(layer)2
							Element:p
								We recommend using Device-based integrations and Connection Modes sparingly to reduce the size of your application.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Anonymizing IP
						Node:
						(type) c
						(layer)2
							Element:p
								We collect IP address for client-side (iOS, Android, Analytics.js and Xamarin) events automatically.
						Node:
						(type) c
						(layer)2
							Element:p
								If you don’t want us to record your tracked users’ IP in integrations and S3, you can set your event’s
							Element:code
								context.ip
								field to
							Element:code
								0.0.0.0
								. Our server won’t record the IP address of the client for libraries if the
							Element:code
								context.ip
								field is already set.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								FAQ
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											How big is the Segment SDK?
									Node:
									(type) c
									(layer)3
										Element:p
											The core Segment SDK is extremely lightweight. It weighs in at about 212kb.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											What if your SDK doesn’t support feature X?
									Node:
									(type) c
									(layer)3
										Element:p
											If you’re using a Device-based Connection Mode for a mobile integration, if you want to access a feature from a tool’s native SDK, you can include the header file and call the method just as normal.
									Node:
									(type) c
									(layer)3
										Element:p
											For example, you might want access to Flurry’s location logging or Localytics’s attribution parameters. To use the integration’s SDK, just import the headers and then access the SDK as you would without Segment. We’ll still handle initialization, event, screen & user tracking, plus all the proxied services and data storage for you.
									Node:
									(type) c
									(layer)3
										Element:p
											Here’s an example for Flurry location logging:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											#import <Flurry-iOS-SDK/Flurry.h> CLLocationManager *locationManager = [[CLLocationManager alloc] init]; [locationManager startUpdatingLocation]; CLLocation *location = locationManager.location; [Flurry setLatitude:location.coordinate.latitude longitude:location.coordinate.longitude horizontalAccuracy:location.horizontalAccuracy verticalAccuracy:location.verticalAccuracy];
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											How Do I Use Push Notifications?
									Node:
									(type) c
									(layer)3
										Element:p
											For services that send push notifications, you first want to
										Element:a
											create a Push SSL certificate following these steps
											. You then want to configure your application delegate to look like the code below, and replace your Segment source write key.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions { [SEGAnalytics setupWithConfiguration:[SEGAnalyticsConfiguration configurationWithWriteKey:@"YOUR_WRITE_KEY"]]; if ([[UIApplication sharedApplication] respondsToSelector:@selector(registerForRemoteNotifications)]) { UIUserNotificationType types = UIUserNotificationTypeAlert | UIUserNotificationTypeSound | UIUserNotificationTypeBadge; UIUserNotificationSettings *settings = [UIUserNotificationSettings settingsForTypes:types categories:nil]; [[UIApplication sharedApplication] registerUserNotificationSettings:settings]; [[UIApplication sharedApplication] registerForRemoteNotifications]; } else { UIRemoteNotificationType types = UIRemoteNotificationTypeAlert | UIRemoteNotificationTypeSound | UIRemoteNotificationTypeBadge; [[UIApplication sharedApplication] registerForRemoteNotificationTypes:types]; } return YES; } - (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken { [[SEGAnalytics sharedAnalytics] registeredForRemoteNotificationsWithDeviceToken:deviceToken]; } // iOS 8+ only - (void)application:(UIApplication *)application didRegisterUserNotificationSettings:(UIUserNotificationSettings *)notificationSettings { //register to receive notifications [application registerForRemoteNotifications]; }
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											How Do You Handle Unique Identifiers?
									Node:
									(type) c
									(layer)3
										Element:p
											A key component of any analytics platform is consistently and accurately identifying users. Some kind of ID must be assigned and persisted on the device so that user actions can be effectively studied. This is especially important for funnel conversion analysis and retention analysis.
									Node:
									(type) c
									(layer)3
										Element:p
											Naturally the Analytics SDK needs a unique ID for each user. To protect end-users’ privacy, Apple places restrictions on how these IDs can be generated and used. Here’s an explanation of these policies from Apple, and how we generate IDs in compliance.
									Node:
									(type) c
									(layer)3
										Element:p
											Before iOS 5 developers had access to uniqueIdentifier which was a hardware-specific serial number that was consistent across different apps, vendors and installs. Starting with iOS 5, however,
										Element:a
											Apple deprecated access to this identifier
											. In iOS 6 Apple introduced the identifierForVendor which protects end-users from cross-app identification. In iOS 7 Apple
										Element:a
											restricted access to the device’s MAC address
											, which was being used by many developers as a workaround to get a device-specific serial number similar to like uniqueIdentifier.
									Node:
									(type) c
									(layer)3
										Element:p
											Segment’s iOS library supports iOS 7+ by generating a UUID and storing it on disk. This is in line with the privacy policies required by Apple, maintains compatibility, and leaves open the option for multiple users on one device since the UUID can be regenerated.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Should I include each service’s SDK alongside Segment?
									Node:
									(type) c
									(layer)3
										Element:p
											No, don’t include an SDK manually for a service we support. That will cause symbol conflicts/namespace collisions. Sometimes it can even fail silently :( So make sure you remove the old Google Analytics or Mixpanel SDK when you install Segment’s SDK.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											How does the SDK queue API calls?
									Node:
									(type) c
									(layer)3
										Element:p
											Our SDK queues API calls so that we don’t use up your user’s battery life by making a network request for each event tracked.
									Node:
									(type) c
									(layer)3
										Element:p
											Here’s how queuing works for server-side integrations: When you make an API call (e.g.
										Element:code
											-track:
											) that call is added to the queue. The SDK sends the events to the server in batches (by default, the batch size is
										Element:code
											100
											). The batches are then sent either when there are 20 or more events in the queue, on a scheduled timer every 30 seconds, or when the app goes to the background.
									Node:
									(type) c
									(layer)3
										Element:p
											When the app is terminated we persist the queue to disk and load that data at app launch so there is no data loss. The queue behavior may differ in packaged integrations.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Can I set user traits without a User ID?
									Node:
									(type) c
									(layer)3
										Element:p
											Yes! Just pass a
										Element:code
											nil
											value for the
										Element:code
											userId
											into your
										Element:a
											call, like this:
										Element:code
											identify
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											[[SEGAnalytics sharedAnalytics] identify: nil traits:@{ @"email": @"friends@segment.com", @"Gender": @"F" }];
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Do you support iOS 5?
									Node:
									(type) c
									(layer)3
										Element:p
											Our SDK does not support iOS 5. If you need support for iOS 5 it’s possible by forking
										Element:a
											our iOS repo on GitHub
											and
										Element:a
											building the framework
											.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Is The Segment SDK Compatible with Swift?
									Node:
									(type) c
									(layer)3
										Element:p
											Indeed! Swift’s compatibility with Objective-C lets you create a source that contains files written in either language, so to use our SDK from a Swift source just follow the instructions from Apple
										Element:a
											here
											.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Can I help develop an integration?
									Node:
									(type) c
									(layer)3
										Element:p
											Yep! Our SDK is
										Element:a
											open-source
											. If you’d like to contribute, fix a bug, or add an integration - here’s
										Element:a
											documentation on how to do so
											. to add an integration, make sure you contact our
										Element:a
											partners team
											first.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											How do I know when an integration is initialized?
									Node:
									(type) c
									(layer)3
										Element:p
											The iOS library will post a notification to indicate when it initializes any integration so you can call it’s methods directly.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											[[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(integrationDidStart:) name:SEGAnalyticsIntegrationDidStart object:nil]; - (void)integrationDidStart:(NSNotification *)notification { SEGAnalyticsIntegration *integration = notification.object; if ([integration.name isEqualToString:@"Mixpanel"]) { // Call Mixpanel library methods here. } }
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											IDFA
									Node:
									(type) c
									(layer)3
										Element:p
											Some integrations, particularly mobile attribution tools (e.g. Kochava), require the IDFA (identifier for advertisers). The IDFA shows up in Segment calls in the debugger under
										Element:code
											context.device.advertiserId
											. In order for this value to be captured by the Segment SDK, ensure that you include the
										Element:a
											iAd framework
											.
									Node:
									(type) c
									(layer)3
										Element:p
											Once you enable this, you will see the
										Element:code
											context.device.advertiserId
											populate and the
										Element:code
											context.device.adTrackingEnabled
											flag set to
										Element:code
											true
											.
									Node:
									(type) c
									(layer)3
										Element:p
										Element:em
											Note
											: While the network is deprecated, the relevant
										Element:a
											framework
											is not.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Target has transitive dependencies that include static binaries
									Node:
									(type) c
									(layer)3
										Element:p
											This is an
										Element:a
											issue
											that doesn’t have an out of the box solution due to
										Element:a
											Cocoapods
											limitations. The limitation occurs when an application is built in Swift, you are including
										Element:code
											use_frameworks!
											in your podfile, and are using a transitive dependency that is provided as a static library (such as Google Analytics, Flurry, AppsFlyer, etc.).
									Node:
									(type) c
									(layer)3
										Element:p
											The best recommendation is to ask these tools to provide a dynamic framework instead of a static library.
									Node:
									(type) c
									(layer)3
										Element:p
											If the tool does not provide a dynamic framework, the workaround is to copy the integration code manually into your project.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											tvOS Support
									Node:
									(type) c
									(layer)3
										Element:p
											As of
										Element:a
											Version 3.3.0
											we now have support for tvOS through our
										Element:code
											Analytics-iOS
											sdk. You simply will follow the
										Element:a
											iOS quickstart documentation
											and you should be good to go!
									Node:
									(type) c
									(layer)3
										Element:hr
									Node:
									(type) c
									(layer)3
										Element:p
											If you have any questions or see anywhere we can improve our documentation, please
										Element:a
											let us know
											or kick off a conversation in the
										Element:a
											Segment Community
											!
									Node:
									(type) c
									(layer)3
										Element:footer
										Element:span
										Element:span
											Was this document helpful?
										Element:span
										Element:label
										Element:span
											Yes
										Element:label
										Element:span
											No
									Node:
									(type) c
									(layer)3
										Element:i
			Node:
			(type) h1
			(layer)1
				Element:h1
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:a
					Overview
				Element:li
				Element:a
					ActiveCampaign
				Element:li
				Element:a
					AMP
				Element:li
				Element:a
					analytics.js
				Element:li
				Element:a
					Android
				Element:li
				Element:a
					Android Wear
				Element:li
				Element:a
					Clojure
				Element:li
				Element:a
					Customer.io
				Element:li
				Element:a
					Drip
				Element:li
				Element:a
					Facebook Ads
				Element:li
				Element:a
					Facebook Lead Ads
				Element:li
				Element:a
					Go
				Element:li
				Element:a
					Google AdWords
				Element:li
				Element:a
					HTTP
				Element:li
				Element:a
					HubSpot
				Element:li
				Element:a
					Intercom
				Element:li
				Element:a
					iOS
				Element:li
				Element:a
					Iterable
				Element:li
				Element:a
					Java
				Element:li
				Element:a
					Klaviyo
				Element:li
				Element:a
					Mailchimp
				Element:li
				Element:a
					Mailjet
				Element:li
				Element:a
					Marketo
				Element:li
				Element:a
					Node
				Element:li
				Element:a
					Nudgespot
				Element:li
				Element:a
					PHP
				Element:li
				Element:a
					Python
				Element:li
				Element:a
					Ruby
				Element:li
				Element:a
					Salesforce
				Element:li
				Element:a
					Selligent
				Element:li
				Element:a
					SendGrid
				Element:li
				Element:a
					Stripe
				Element:li
				Element:a
					Twilio
				Element:li
				Element:a
					Vero
				Element:li
				Element:a
					Xamarin
				Element:li
				Element:a
					Zendesk
				Element:li
				Element:a
					.NET
