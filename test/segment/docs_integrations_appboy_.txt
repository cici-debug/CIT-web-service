Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					Appboy Integration
			Node:
			(type) c
			(layer)1
				Element:p
					Segment makes it easy to send your data to
				Element:a
					Appboy
					(and lots of other integrations). Once you've tracked your data through our open source
				Element:a
					libraries
					we'll translate and route your data to Appboy in the format they understand.
			Node:
			(type) c
			(layer)1
				Element:p
					Our Appboy integration code is open-source on GitHub if you want to
				Element:a
					check it out
					.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Getting Started
						Node:
						(type) c
						(layer)2
							Element:p
								Once the Segment library is integrated, toggle Appboy on in your Segment integrations, and add your App Group Identifier which you can find in the Appboy Dashboard under App Settings > Developer Console.
						Node:
						(type) c
						(layer)2
							Element:p
								You can integrate Appboy via a server side or mobile integration (ios or andriod). If you are interested in using Appboy’s push notifications product, we recommend the mobile integrations.
						Node:
						(type) c
						(layer)2
							Element:p
								Appboy supports the
							Element:code
								identify
								,
							Element:code
								track
								, and
							Element:code
								group
								methods.
						Node:
						(type) c
						(layer)2
							Element:hr
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Identify
						Node:
						(type) c
						(layer)2
							Element:p
								When you
							Element:code
								identify
								a user, we’ll pass that user’s information to Appboy with
							Element:code
								userId
								as Appboy’s External User ID. Segment’s special traits recognized as Appboy’s standard user profile fields (in parentheses) are:
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:code
								firstName
								(
							Element:code
								first_name
								)
							Element:li
							Element:code
								lastName
								(
							Element:code
								last_name
								)
							Element:li
							Element:code
								birthday
								(
							Element:code
								dob
								)
							Element:li
							Element:code
								avatar
								(
							Element:code
								image_url
								)
							Element:li
							Element:code
								address.city
								(
							Element:code
								home_city
								)
							Element:li
							Element:code
								address.country
								(
							Element:code
								country
								)
							Element:li
							Element:code
								gender
								(
							Element:code
								gender
								)
						Node:
						(type) c
						(layer)2
							Element:p
								All other traits will be sent to Appboy as custom attributes.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Track
						Node:
						(type) c
						(layer)2
							Element:p
								When you
							Element:code
								track
								an event, we will send that event to Appboy as a custom event.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Order Completed
									Node:
									(type) c
									(layer)3
										Element:p
											When you
										Element:code
											track
											an event with the name
										Element:code
											Order Completed
											using the
										Element:a
											e-commerce tracking API
											, we will send the products you’ve listed to Appboy as purchases.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Group
						Node:
						(type) c
						(layer)2
							Element:p
								When you call
							Element:code
								group
								, we will send a custom attribute to Appboy with the name
							Element:code
								ab_segment_group_<groupId>
								, where
							Element:code
								<groupId>
								is the group’s ID in the method’s parameters. For example, if the group’s ID is
							Element:code
								1234
								, then the custom attrubite name will be
							Element:code
								ab_segment_group_1234
								. The value of the custom attribute will be set to
							Element:code
								true
								.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Android
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Integrating
									Node:
									(type) c
									(layer)3
										Element:p
											1) In your top-level project
										Element:code
											build.gradle
											put
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											maven { url "http://appboy.github.io/appboy-android-sdk/sdk" }
									Node:
									(type) c
									(layer)3
										Element:p
											as a repository under allprojects -> repositories.
									Node:
									(type) c
									(layer)3
										Element:p
											2) Add the Appboy Segment Integration dependency to your app
										Element:code
											build.gradle
											:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											compile 'com.appboy:appboy-segment-integration:+'
									Node:
									(type) c
									(layer)3
										Element:p
											We recommend using the latest version on
										Element:a
											Maven
											since it will contain the most up to date features and bug fixes.
									Node:
									(type) c
									(layer)3
										Element:p
										Element:strong
											Note:
											Our group Id is
										Element:code
											com.appboy
											and not
										Element:code
											com.segment.analytics.android.integrations
											.
									Node:
									(type) c
									(layer)3
										Element:p
											3) Next, declare Appboy’s integration in your
										Element:code
											Analytics
											instance:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											Analytics analytics = new Analytics.Builder(context, "YOUR_WRITE_KEY_HERE") .use(AppboyIntegration.FACTORY) ... .build();
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Integrating Push
									Node:
									(type) c
									(layer)3
										Element:p
											Please follow Appboy’s
										Element:a
											push notification documentation here
											.
									Node:
									(type) c
									(layer)3
										Element:p
											Note that if you don’t have Appboy automatically register for push (i.e. you pass the push token from an FCM or manual GCM registration) you need to ensure you call
										Element:code
											registerAppboyPushMessages
											after Appboy is initialized.
									Node:
									(type) c
									(layer)3
										Element:p
											You can do this by checking if Appboy is initialized before trying to pass the push token, and waiting for initializing to set if not.
									Node:
									(type) c
									(layer)3
										Element:p
											You can do this in an
										Element:code
											onIntegrationReady
											method:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											String appboyPushToken; bool appboyInitialized = false; … // When you get the push token String receivedToken; appboyPushToken = recievedToken; if (appboyInitialized) { Appboy.getInstance(getContext()).registerAppboyPushMessages(appboyPushToken); } …. Analytics.with(this).onIntegrationReady(Appboy, new Callback() { @Override public void onIntegrationReady(Object integration) { appboyInitialized = true; if(appboyPushToken != null) { Appboy.getInstance(getContext()).registerAppboyPushMessages(appboyPushToken); } } });
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											In-App Messages
									Node:
									(type) c
									(layer)3
										Element:p
											No further action is required to integrate in-app messages, which are registered for and requested by default by our Appboy Segment integration.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Sample App
									Node:
									(type) c
									(layer)3
										Element:p
											Appboy has created a sample Android application that integrates Appboy via Segment. Check it out at the
										Element:a
											Github repo
											.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Non-Segment Functionality
									Node:
									(type) c
									(layer)3
										Element:p
											Appboy functionality that isn’t integrated with Segment is supported via the use of our standard Android SDK API. For more information, visit our
										Element:a
											documentation
											,
										Element:a
											Javadoc
											, and
										Element:a
											Github repo
											.
									Node:
									(type) c
									(layer)3
										Element:p
											Note that you should gate Appboy functionality that is accessed directly via Appboy API methods based on whether the Segment Appboy integration is active and enabled. That way, when Appboy is turned off via Segment, all Appboy functionality is turned off.
									Node:
									(type) c
									(layer)3
										Element:p
											For an example of gating Appboy functionality based on whether Appboy Segment is enabled, see our
										Element:a
											sample application class
											, which stores the enabled state, and
										Element:a
											sample activity class
											, which checks the enabled state before displaying the Appboy News Feed or the Appboy feedback fragment.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								iOS
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Integrating
									Node:
									(type) c
									(layer)3
										Element:p
											1) Add the Appboy Segment Pod to your
										Element:code
											Podfile
											:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											pod 'Segment-Appboy'
									Node:
									(type) c
									(layer)3
										Element:p
											We recommend using the latest version on
										Element:a
											CocoaPods
											since it will contain the most up to date features and bug fixes.
									Node:
									(type) c
									(layer)3
										Element:p
											2) Next, declare Appboy’s integration in your app delegate instance:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											SEGAnalyticsConfiguration *config = [SEGAnalyticsConfiguration configurationWithWriteKey:@"YOUR_WRITE_KEY_HERE"]; [config use:[SEGAppboyIntegrationFactory instance]]; [SEGAnalytics setupWithConfiguration:config];
									Node:
									(type) c
									(layer)3
										Element:p
										Element:a
											Here
											is a sample project which shows how to integrate the above.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Integrating Push
									Node:
									(type) c
									(layer)3
										Element:p
											1) Follow the directions to register for push at:
										Element:a
											https://segment.com/docs/libraries/ios/
									Node:
									(type) c
									(layer)3
										Element:p
											2) Add the following to your application:didFinishLaunchingWithOptions
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											[[SEGAppboyIntegrationFactory instance] saveLaunchOptions:launchOptions];
									Node:
									(type) c
									(layer)3
										Element:p
											3) In your application’s application:didReceiveRemoteNotification: method, add the following:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											[[SEGAnalytics sharedAnalytics] receivedRemoteNotification:userInfo];
									Node:
									(type) c
									(layer)3
										Element:p
											4) If you integrated the application:didReceiveRemoteNotification:fetchCompletionHandler: in your app, add the following to that method:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											if ([Appboy sharedInstance] == nil) { [[SEGAppboyIntegrationFactory instance] saveRemoteNotification:userInfo]; }
									Node:
									(type) c
									(layer)3
										Element:p
											5) If you implemented handleActionWithIdentifier:forRemoteNotification:, add the following to that method:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											if ([Appboy sharedInstance] == nil) { [[SEGAppboyIntegrationFactory instance] saveRemoteNotification:userInfo]; }
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											In-App Messages
									Node:
									(type) c
									(layer)3
										Element:p
											No further action is required to integrate in-app messages, which are registered for and requested by default by our Appboy Segment integration.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Sample App
									Node:
									(type) c
									(layer)3
										Element:p
											Appboy has created a sample iOS application that integrates Appboy via Segment. Check it out at the
										Element:a
											Github repo
											.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Non-Segment Functionality
									Node:
									(type) c
									(layer)3
										Element:p
											Appboy functionality that isn’t integrated with Segment is supported via the use of our standard iOS SDK API. For more information, visit our
										Element:a
											documentation
											,
										Element:a
											Full Classes List
											, and
										Element:a
											Github repo
											.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Enable IDFA collection in Appboy
									Node:
									(type) c
									(layer)3
										Element:p
											To enable IDFA collection in Appboy, please add following lines to your
										Element:code
											Podfile
											:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											post_install do |installer| installer.pods_project.targets.each do |target| target.build_configurations.each do |config| if target.name == "Appboy-iOS-SDK" target.build_configurations.each do |config| config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= [ '$(inherited)', 'ABK_ENABLE_IDFA_COLLECTION'] end end end end end
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Purchases
									Node:
									(type) c
									(layer)3
										Element:p
											To ensure that
										Element:a
											ecommerce events
											populate in Appboy, you must be sure to provide the following
										Element:a
											required values
											:
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
											A
										Element:code
											userId
										Element:li
											A
										Element:code
											product_id
										Element:li
											A
										Element:code
											price
									Node:
									(type) c
									(layer)3
										Element:p
											These values can be passed into the
										Element:code
											products
											array like so:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											products: [ { product_id: '1234', name: 'Bag', category: 'Accessories', price: 30.59, currency: quantity: 1 } ]
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Web
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Push Notifications
									Node:
									(type) c
									(layer)3
										Element:p
											1) To support push notifications on Chrome, you’ll need to enable FCM/GCM as well as configure your site. Check out steps
										Element:a
											one and two here, for detailed instructions on both
											.
									Node:
									(type) c
									(layer)3
										Element:p
											2) Browser Registration. In order for a browser to receive push notifications, you must register it for push by calling:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											analytics.ready(function() { window.appboy.registerAppboyPushMessages(); });
									Node:
									(type) c
									(layer)3
										Element:p
										Element:strong
											Note:
											We recommend placing this snippet outside of your
										Element:a
											Segment Snippet
											within your
										Element:code
											script
											tag.
									Node:
									(type) c
									(layer)3
										Element:p
										Element:strong
											Note:
											This will immediately request push permission from the user.
									Node:
									(type) c
									(layer)3
										Element:p
											If you wish to show your own push-related UI to the user before requesting push permission (known as a soft push prompt), you can test to see if push is supported in the user’s browser by calling:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											analytics.ready(function() { if (window.appboy.isPushSupported()) { // Add your push logic } });
									Node:
									(type) c
									(layer)3
										Element:p
											Appboy recommends checking to see if this returns
										Element:code
											true
											since not all browsers can recieve push notifications.
										Element:a
											See below
											for instuctions on setting up a soft push prompt using Appboy In-App Messages.
									Node:
									(type) c
									(layer)3
										Element:p
											If you’d like to unsubscribe a user, you can do so by calling:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											analytics.ready(function() { window.appboy.unregisterAppboyPushMessages(); });
									Node:
									(type) c
									(layer)3
										Element:p
											3) Set your GCM/FCM server API key and SenderID on the Appboy dashboard. You can find more details for this
										Element:a
											here
											.
									Node:
									(type) c
									(layer)3
										Element:p
											4) To support push notifications on Safari, add your Website Push ID into your
										Element:a
											and we’ll send it for you when we initialize the Appboy Web SDK. To get your Website Push ID, follow the first two bullet points in
										Element:strong
											Appboy Integration Settings
										Element:a
											these instructions
											.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Soft Push Prompts
									Node:
									(type) c
									(layer)3
										Element:p
											1) Follow
										Element:a
											step one
											to create a “Prime for Push” in-app messaging Campaign on the Appboy dashboard.
									Node:
									(type) c
									(layer)3
										Element:p
											2) Disable your
										Element:a
											Automatically Send In-App Messages Integration setting
											. By default, it is enabled when you enable the Appboy integration.
									Node:
									(type) c
									(layer)3
										Element:p
											3) Add the following snippet to your site:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											analytics.ready(function() { window.appboy.subscribeToNewInAppMessages(function(inAppMessages) { var message = inAppMessages[0]; if (message != null) { // Read the key/value pair for msg-id var msgId = message.extras["msg-id"]; var shouldDisplayMessage = true; // If this is our push primer message if (msgId == "push-primer") { // We don't want to display the soft push prompt to users on browsers that don't support push, or if the user // has already granted/blocked permission if (!window.appboy.isPushSupported() || window.appboy.isPushPermissionGranted() || window.appboy.isPushBlocked()) { shouldDisplayMessage = false; } // Prompt the user when the first button is clicked message.buttons[0].subscribeToClickedEvent(function() { window.appboy.registerAppboyPushMessages(); }); } // Display the message if (shouldDisplayMessage) { window.appboy.display.showInAppMessage(message); } } // Remove this message from the array of IAMs and return whatever's left return inAppMessages.slice(1); }); });
									Node:
									(type) c
									(layer)3
										Element:p
											For more details on this snippet, check out the Appboy’s docs
										Element:a
											here
											.
									Node:
									(type) c
									(layer)3
										Element:p
										Element:strong
											Note:
											We recommend placing this snippet outside of your
										Element:a
											Segment Snippet
											within your
										Element:code
											script
											tag.
									Node:
									(type) c
									(layer)3
										Element:p
											4) When you’d like to display the Soft Push to a user, call:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											analytics.ready(function() { window.appboy.logCustomEvent("prime-for-push") });
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											In-App Messaging
									Node:
									(type) c
									(layer)3
										Element:p
											Appboy offers three default In-App Message types:
										Element:strong
											Slideup
											,
										Element:strong
											Modal
											, and
										Element:strong
											Full
											. You can find a detailed explaination of each
										Element:a
											here
											as well as instructions on how to set up In-App Messages within Appboy
										Element:a
											here
									Node:
									(type) c
									(layer)3
										Element:p
											Appboy’s In-App Message product allows you to trigger in-app message display as a result of several different event types. By default, all In-App Messages that a user is eligible for are automatically delivered to the user upon a session start event. A new session automatically starts when a user loads your site. If you’d like to force a new session for a user, simply make an identify with the corresponding
										Element:a
											userId
											for that user.
									Node:
									(type) c
									(layer)3
										Element:p
											If you don’t want your site to immediately display new In-App Messages when they’re received, you can disable automatic display and register your own display subscribers. To do this:
									Node:
									(type) c
									(layer)3
										Element:p
											1) Disable your
										Element:a
											Automatically Send In-App Messages Integrations setting
											. By default, it is enabled when you enable the Appboy integration.
									Node:
									(type) c
									(layer)3
										Element:p
											2) Create your subscriber by calling:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											analytics.ready(function() { window.appboy.subscribeToNewInAppMessages(function(inAppMessages) { // Display the first in-app message. You could defer display here by pushing this message to code within in your own application. // If you don't want to use Appboy's built-in display capabilities, you could alternatively pass the in-app message to your own display code here. window.appboy.display.showInAppMessage(inAppMessages[0]); // Return an array with any remaining, unhandled messages to appboy's internal queue. // These will be part of the inAppMessages param the next time this subscriber is invoked. return inAppMessages.slice(1); }); });
									Node:
									(type) c
									(layer)3
										Element:p
											The
										Element:code
											inAppMessages
											parameter will be an array of
										Element:a
											subclass or
										Element:code
											appboy.ab.InAppMessage
										Element:a
											objects, each of which has various lifecycle event subscription methods.
										Element:code
											appboy.ab.ControlMessage
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											FAQ
									Node:
									(type) c
									(layer)3
										Element:p
										Element:strong
											Why do you have to use
										Element:code
											.ready()
											?
									Node:
									(type) c
									(layer)3
										Element:p
											You need to wrap the Appboy snippets in
										Element:code
											.ready()
											to ensure that Appboy’s Web SDK native objects are available and ready for use. For a more detailed explanation of
										Element:code
											.ready()
											, check out
										Element:a
											this community post
											.
									Node:
									(type) c
									(layer)3
										Element:hr
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Supported Sources and Connection Modes
						Node:
						(type) c
						(layer)2
							Element:table
							Element:tr
							Element:th
							Element:th
								Web
							Element:th
								Mobile
							Element:th
								Server
							Element:tr
							Element:td
								📱 Device-based
							Element:td
								✅
							Element:td
								✅
							Element:td
							Element:tr
							Element:td
								☁️ Cloud-based
							Element:td
							Element:td
								✅
							Element:td
								✅
						Node:
						(type) c
						(layer)2
							Element:p
								To learn more about about Connection Modes and what dictates which we support,
							Element:a
								see here
								.
						Node:
						(type) c
						(layer)2
							Element:p
								Segment offers a
							Element:strong
								Device-based
								Connection Mode for
							Element:strong
								Mobile
								data with Appboy. If you’d like to use those features that require client-based functionality, follow the steps above to ensure you have packaged the Appboy SDK with Segment’s.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Settings
						Node:
						(type) c
						(layer)2
							Element:p
								Segment lets you change these integration settings via your Segment dashboard without having to touch any code.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											API Key
									Node:
									(type) c
									(layer)3
										Element:p
										Element:strong
											For Bundled Integration Only
											: The API key found in your Appboy dashboard, used to identify your application.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											App Group Identifier
									Node:
									(type) c
									(layer)3
										Element:p
											The App Group Identifier can be found in your Appboy dashboard under App Settings > Developer Console
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Automatically Send In-App Messages
									Node:
									(type) c
									(layer)3
										Element:p
										Element:strong
											Web Only
											: When this is enabled, all In-App Messages that a user is eligible for are automatically delivered to the user. If you’d like to register your own display subscribers or send soft push notifications to your users, make sure to disable this option.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Appboy Datacenter
									Node:
									(type) c
									(layer)3
										Element:p
											Choose your datacenter from either US (default) or EU.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Safari Website Push ID
									Node:
									(type) c
									(layer)3
										Element:p
										Element:strong
											Web Only
											: To send push notifications on Safari, Appboy needs your Website Push Id. To get your Webite Push ID, check out the first two bullet points
										Element:a
											here
											.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Update Existing Users Only
									Node:
									(type) c
									(layer)3
										Element:p
											A flag to determine whether to update existing users only, defaults to false
									Node:
									(type) c
									(layer)3
										Element:hr
									Node:
									(type) c
									(layer)3
										Element:p
											If you have any questions or see anywhere we can improve our documentation, please
										Element:a
											let us know
											or kick off a conversation in the
										Element:a
											Segment Community
											!
									Node:
									(type) c
									(layer)3
										Element:i
									Node:
									(type) c
									(layer)3
										Element:i
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
									Node:
									(type) c
									(layer)3
										Element:span
											Check out the code!
									Node:
									(type) c
									(layer)3
										Element:a
											android
									Node:
									(type) c
									(layer)3
										Element:a
											ios
									Node:
									(type) c
									(layer)3
										Element:a
											server
									Node:
									(type) c
									(layer)3
										Element:a
											browser
