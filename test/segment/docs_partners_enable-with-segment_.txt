Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					Enable with Segment
			Node:
			(type) c
			(layer)1
				Element:p
					The Enable with Segment Button is a fast and easy way for new customers to start sending data to your app, as soon as they sign up. If you’ve already integrated with Segment as a partner, you can implement the button in your setup-flow now. If you haven’t integrated with us yet, you can
				Element:a
					learn more about joining our platform here
					.
			Node:
			(type) c
			(layer)1
				Element:p
					Without the Segment button, a customer who wants to activate your product via Segment would need to visit the Segment website, choose a project to send data from, go to the Segment dashboard, find your service amongst hundreds of other integrations and copy-paste API keys from your interface. We saw that many users were confused going through this process! This
				Element:a
					explainer video
					will show a customer’s current confusion, and what an experience would look like with the new button.
			Node:
			(type) c
			(layer)1
				Element:p
					The Enable with Segment Button will improve your activation rate with Segment customers because it simplifies the activation process.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Example Flow
						Node:
						(type) c
						(layer)2
							Element:p
							Element:img
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Install the Button
						Node:
						(type) c
						(layer)2
							Element:p
								Implementing the Segment button and improving your activation experience is easy.
						Node:
						(type) c
						(layer)2
							Element:p
								The bare minimum to get the button functional is to include your “Integration ID” as well as the settings we will use to configure the integration. Since both of these rely on Segment internals, below is a little tool to help you discover those values.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Add HTML
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											<script src="//static.segment.com/enable-button/v1/index.js" async></script> <div class="segment-enable-button" data-integration="..." data-settings="..."></div>
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Add Settings
									Node:
									(type) c
									(layer)3
										Element:table
										Element:thead
										Element:tr
										Element:th
											Key
										Element:th
											Name
										Element:th
											Type
										Element:tbody
										Element:tr
										Element:td
											Select your app above to show available settings
										Element:tfoot
										Element:tr
										Element:td
											bold settings are
										Element:b
											required
									Node:
									(type) c
									(layer)3
										Element:p
											The settings can vary a lot from integration to integration, so in order to give you the most flexibility, we’ve opted to use a raw JSON string for this attribute. (for example:
										Element:code
											data-settings='{"apiKey":"abc123"}'
											)
									Node:
									(type) c
									(layer)3
										Element:p
											When you choose your integration above, we will give you a list of all the settings we offer to our customers to configure their integration. (required settings will be in bold) Your JSON object can use any of the keys specified above.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Available Options
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Integration ID (
										Element:code
											data-integration
											)
									Node:
									(type) c
									(layer)3
										Element:p
											The Integration ID will let us know which integration your user is interested in activating. Select your app from the dropdown in the
										Element:a
											Install the Button
											section to make sure you know what your Integration ID is. Set your Integration ID in the
										Element:code
											data-integration
											attribute on the button element.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											data-integration="my-app"
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Settings (
										Element:code
											data-settings
											)
									Node:
									(type) c
									(layer)3
										Element:p
											In order for a customer to successfully send data from their Segment data hub to your app, we’ll need the proper configuration for your customer. Select your app from the dropdown in the
										Element:a
											Install the Button
											section to make sure you know what configuration options are available for your integration. The settings will need to be encoded as a raw JSON string in the
										Element:code
											data-settings
											attribute.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											data-settings='{"apiKey":"..."}'
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Redirect URL (
										Element:code
											data-redirect-url
											)
									Node:
									(type) c
									(layer)3
										Element:p
											The redirect URL can be anything you want it to be. It’s where we’ll send customers after successfully starting the flow of data from Segment to your app. This could be a page for further setup and activation, or a dashboard where they’ll be able to start seeing data.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											data-redirect-url="http://example.com/"
									Node:
									(type) c
									(layer)3
										Element:p
											Note that if a redirect URL is not specified, we will simply bring the user to the configuration page inside our own app so that they can setup Segment on their site, servers, or app. Similarly, if the user has not started sending data via Segment, we will ignore your redirect url so that the customer can setup Segment. This prevents confusion about why Segment or the integration isn’t working.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Button Size (
										Element:code
											data-size
											)
									Node:
									(type) c
									(layer)3
										Element:p
											The button has one visual style but can be easily displayed in three different sizes: large, small and medium (the default). Set the size of your Segment Activation button via the
										Element:code
											data-size
											attribute.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											<!-- large button --> data-size="large" <!-- small button --> data-size="small"
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Advanced Usage
						Node:
						(type) c
						(layer)2
							Element:p
								If you need more flexibility, you can also use the raw JS API for the button. When the script above is loaded, it will create a
							Element:code
								segment
								global namespace.
						Node:
						(type) c
						(layer)2
							Element:p
								When the script loads, it will automatically initialize the button for any
							Element:code
								.segment-enable-button
								elements it finds on the page. If you don’t necessarily have your button ready on page load, you can also trigger this magic yourself using
							Element:code
								segment.EnableButton.init()
								.
						Node:
						(type) c
						(layer)2
							Element:p
								Otherwise, you can initialize new buttons yourself using
							Element:code
								segment.EnableButton
								as a constructor:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								var btn = new segment.EnableButton({ element: '#my-button', integration: '...', settings: {} });
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Available Configuration Options:
									Node:
									(type) c
									(layer)3
										Element:p
											Most of the configuration options below correspond to the HTML options above, except being in
										Element:code
											camelCase
											instead of being hyphenated.
									Node:
									(type) c
									(layer)3
										Element:table
										Element:thead
										Element:tr
										Element:th
											Key
										Element:th
											Type
										Element:th
											Comments
										Element:tbody
										Element:tr
										Element:td
										Element:code
											element
										Element:td
										Element:code
											String, HTMLElement
										Element:td
										Element:strong
											Required
											: A CSS selector string (for a
										Element:em
											single
											element) or the raw DOM node itself.
										Element:tr
										Element:td
										Element:code
											integration
										Element:td
										Element:code
											String
										Element:td
										Element:strong
											Required
											: The Integration ID, see
										Element:a
											above
										Element:tr
										Element:td
										Element:code
											settings
										Element:td
										Element:code
											Object, Function
										Element:td
										Element:strong
											Required
											: Can either be a raw JS object or a function that returns an object. (see
										Element:a
											below
											)
										Element:tr
										Element:td
										Element:code
											redirectUrl
										Element:td
										Element:code
											String
										Element:td
											See
										Element:a
											above
										Element:tr
										Element:td
										Element:code
											size
										Element:td
										Element:code
											String
										Element:td
											See
										Element:a
											above
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Generating Settings with a Function
									Node:
									(type) c
									(layer)3
										Element:p
											In some cases, it might not be possible to know the settings ahead of time. In this case, we’ve allowed for
										Element:code
											settings
											to be passed as a function, which will be invoked when the user clicks the button, but before they are taken to Segment:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											var btn = new segment.EnableButton({ element: '#my-button', integration: '...', settings: function() { return { /* ... */ }; } });
									Node:
									(type) c
									(layer)3
										Element:p
											You can also work asynchronously, simply add an argument to your function. This will be passed in as a callback function. (it only accepts a single argument, which is the settings object you’ve generated)
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											var btn = new segment.EnableButton({ element: '#my-button', integration: '...', settings: function(done) { generateKey(function(err, key) { // make sure to handle errors yourself, as the button has no error-handling done({ apiKey: key }); }); } });
									Node:
									(type) c
									(layer)3
										Element:p
											When using a function, errors will need to be handled directly by your application.
									Node:
									(type) c
									(layer)3
										Element:p
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Examples of Button Placement
						Node:
						(type) c
						(layer)2
							Element:p
								Kissmetrics
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
								Threads
							Element:img
						Node:
						(type) c
						(layer)2
							Element:hr
						Node:
						(type) c
						(layer)2
							Element:p
								If you have any questions or see anywhere we can improve our documentation, please
							Element:a
								let us know
								or kick off a conversation in the
							Element:a
								Segment Community
								!
						Node:
						(type) c
						(layer)2
							Element:footer
							Element:span
							Element:span
								Was this document helpful?
							Element:span
							Element:label
							Element:span
								Yes
							Element:label
							Element:span
								No
						Node:
						(type) c
						(layer)2
							Element:i
						Node:
						(type) c
						(layer)2
							Element:ul
