Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					Direct Integrations
			Node:
			(type) c
			(layer)1
				Element:p
					With a Direct integration, Segment will forward all of the incoming data for our mutual customers to your service’s HTTPS endpoint in realtime.
			Node:
			(type) c
			(layer)1
				Element:p
					A Direct integration gives you complete control over how you want to store, transform and process the data. It means that our customers can immediately start sending you data from any one of our
				Element:a
					sources
					—from the browser, from their mobile apps, or from their servers—with no added work. Segment Business plan customers can also replay histroic data, which means you can demonstrate the value of your tool rapidly.
			Node:
			(type) c
			(layer)1
				Element:p
					This type of integration works well for analytics tools, email marketing tools, attribution tools, CRMs, raw data tools, helpdesks, customer success tools, etc.
			Node:
			(type) c
			(layer)1
				Element:p
					Becoming a Direct Partner is a quick five-step process. By starting or continuing this process, you agree to the
				Element:a
					Segment Platform Partners Agreement
					.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Five-step Process:
						Node:
						(type) c
						(layer)2
							Element:ol
							Element:li
							Element:a
								Complete the integration survey
							Element:li
							Element:a
								Build an endpoint to recieve customer data
							Element:li
							Element:a
								Test your integration
							Element:li
							Element:a
								Submit your technical survey for review
							Element:li
							Element:a
								Private Beta
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								1. Complete the integration survey
						Node:
						(type) c
						(layer)2
							Element:p
							Element:a
								Complete an integration survey
								so we know you’re building an integration and can support you.
						Node:
						(type) c
						(layer)2
							Element:p
								Please do not move forward in the process until you hear back from our Partners team.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								2. Build an endpoint to receive customer data
						Node:
						(type) c
						(layer)2
							Element:p
								The following sections outline what kind of requests and data we send to you, and what we expect in return.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Accepting Segment Data
									Node:
									(type) c
									(layer)3
										Element:p
											In order to receive data from Segment, you’ll need a server ready to accept HTTPS requests. You’ll give us a static endpoint to send data to, and that endpoint must:
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:em
											Accept POST requests.
											We’ll send customer data to the endpoint you designate in POST requests.
										Element:li
										Element:em
											Accept JSON data.
											This is the format we’ll send data to you in.
										Element:li
										Element:em
											Use HTTPS.
											We transmit potentially sensitive data on behalf of customers, and using HTTPS goes a long way toward making sure their data stays safe.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Authorization
									Node:
									(type) c
									(layer)3
										Element:p
											We’ll send your user’s API key with requests, which you can then use to authenticate requests. Note that this is the API key
										Element:em
											you
											give to your users; it’s not a Segment API key.
									Node:
									(type) c
									(layer)3
										Element:p
											We’ll send the key in the
										Element:code
											Authorization
											header using the
										Element:code
											Basic
											authentication type. It’ll be Base64 encoded, with your user’s API key as the username and an empty password. For example, if your user’s API key was
										Element:code
											segment
											, we’d Base64 encode the string
										Element:code
											'segment:'
											and prepend the string
										Element:code
											'Basic '
											. (Note that the colon is always present, even when the password is absent.) This would result in a final string of
										Element:code
											'Basic c2VnbWVudDo='
											. This is what is contained in the
										Element:code
											Authorization
											header.
									Node:
									(type) c
									(layer)3
										Element:p
											You’ll need to decode the string when you receive it, just like any Authorization header.
									Node:
									(type) c
									(layer)3
										Element:p
											See the
										Element:a
											headers
											section for more details.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Headers
									Node:
									(type) c
									(layer)3
										Element:p
											We’ll send you the following HTTP headers with all our requests:
									Node:
									(type) c
									(layer)3
										Element:table
										Element:thead
										Element:tr
										Element:th
											Header
										Element:th
											Description
										Element:th
											Example
										Element:tbody
										Element:tr
										Element:td
										Element:code
											Accept
										Element:td
											We accept any content type, but ignore responses unless this header is set to
										Element:code
											application/json
											.
										Element:td
										Element:code
											Accept: */*
										Element:tr
										Element:td
										Element:code
											Authorization
										Element:td
											We’ll send you your user’s API token in this header, with the
										Element:code
											Basic
											authentication type.
										Element:td
										Element:code
											Authorization: Basic c2VnbWVudDo=
										Element:tr
										Element:td
										Element:code
											Cache-Control
										Element:td
											Each request we send you is a new event, and so we expect you to not implement caching on your end.
										Element:td
										Element:code
											Cache-Control: no-cache
										Element:tr
										Element:td
										Element:code
											Connection
										Element:td
											We use HTTP/1.1’s keep-alive functionality whenever possible (but you don’t
										Element:em
											have
											to).
										Element:td
										Element:code
											Connection: Keep-Alive
										Element:tr
										Element:td
										Element:code
											Content-Length
										Element:td
											We’ll always send you the length of the request in bytes.
										Element:td
										Element:code
											Content-Length: 348
										Element:tr
										Element:td
										Element:code
											Content-Type
										Element:td
											We indicate the type of data we’re sending you (we’ll always send you JSON), along with our vendor type.
										Element:td
										Element:code
											Content-Type: application/json
										Element:tr
										Element:td
										Element:code
											User-Agent
										Element:td
											We’ll send you this field every time. You can count on us!
										Element:td
										Element:code
											User-Agent: Segment
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Request Body
									Node:
									(type) c
									(layer)3
										Element:p
											Our
										Element:a
											spec
											standardizes the data that you can expect from Segment. You can choose to implement four types types of calls:
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
											Who is this?
										Element:code
											.identify(userId, traits)
										Element:li
											What are they doing?
										Element:code
											.track(userId, event, properties)
										Element:li
											Where are they doing it?
										Element:code
											.page(userId, pageName, properties)
										Element:li
											What group are they part of?
										Element:code
											.group(userId, groupId, groupTraits)
									Node:
									(type) c
									(layer)3
										Element:p
											For example, you may want to implement the
										Element:code
											.identify(userId, traits)
											call to create contacts in an email marketing application. You can expect the following customer infomation as a JSON object in the call body
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											{ "anonymous_id": "507f191e810c19729de860ea", "context": { "ip": "8.8.8.8", "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.115 Safari/537.36" }, "message_id": "022bb90c-bbac-11e4-8dfc-aa07a5b093db", "received_at": "2015-02-23T22:28:55.387Z", "sent_at": "2015-02-23T22:28:55.111Z", "traits": { "name": "Peter Gibbons", "email": "peter@initech.com", "plan": "premium", "logins": 5 }, "type": "identify", "user_id": "97980cfea0067", "version": "1.1" }
									Node:
									(type) c
									(layer)3
										Element:p
											To learn more about the 4 API calls we support, and the semantic fields and event names we recognize, please follow the Segment
										Element:a
											spec
											for all contributions.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Formatting
									Node:
									(type) c
									(layer)3
										Element:p
											Segment allows users to send their data formatted using the conventions of their host language; in a user’s Ruby code, they can use
										Element:code
											snake_case
											, while in their JavaScript code they can use
										Element:code
											camelCase
											.
									Node:
									(type) c
									(layer)3
										Element:p
											To make integrating with Segment easy, we send you all keys in
										Element:code
											snake_case
											.For example, when a user sends us this JSON:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											{ "address": { "city": "Newport Coast", "postalCode": "92606", "state": "CA", "street": "1 Lucille Lane" }, "CreatedAt": "1967-12-14T08:00:00.000Z", "NAME": "Michael Bluth", "user_id": 12345 }
									Node:
									(type) c
									(layer)3
										Element:p
											We will send you:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											{ "address": { "city": "Newport Coast", "postal_code": "92606", "state": "CA", "street": "1 Lucille Lane" }, "created_at": "1967-12-14T08:00:00.000Z", "name": "Michael Bluth", "user_id": 12345 }
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Responding to Segment
									Node:
									(type) c
									(layer)3
										Element:p
											This section defines how you should respond to our requests.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Status Code
									Node:
									(type) c
									(layer)3
										Element:p
											We use standard HTTP status code conventions to help us diagnose problems quickly and give better insight into how the integration is working.
									Node:
									(type) c
									(layer)3
										Element:p
											Upon receiving data, your endpoint should reply with one of the following status codes:
									Node:
									(type) c
									(layer)3
										Element:table
										Element:thead
										Element:tr
										Element:th
											Code
										Element:th
											Reason
										Element:tbody
										Element:tr
										Element:td
										Element:code
											200
										Element:td
											You’ve accepted and successfully processed the message.
										Element:tr
										Element:td
										Element:code
											202
										Element:td
											You’ve accepted the message, but have not yet processed it.
										Element:tr
										Element:td
										Element:code
											400
										Element:td
											The message is malformed, or otherwise contains an error that is the client’s fault.
										Element:tr
										Element:td
										Element:code
											401
										Element:td
											The client’s API key is malformed, or has expired or is otherwise no longer valid.
										Element:tr
										Element:td
										Element:code
											403
										Element:td
											The client’s API key is valid but has been rejected due to inadequate permissions.
										Element:tr
										Element:td
										Element:code
											500
										Element:td
											If you encounter an internal error when processing the message, reply with this code. (Hopefully you don’t have to send too many of these.)
										Element:tr
										Element:td
										Element:code
											501
										Element:td
											If we send you a
										Element:a
											call type
											(indicated by the
										Element:code
											type
											property included on all messages) you don’t support, reply with this code. Read more about the API call types we support
										Element:a
											here
											.
										Element:tr
										Element:td
										Element:code
											503
										Element:td
											Send us this code when your endpoint is temporarily down for maintenance or otherwise not accepting messages. This will help us to avoid dropping users’ messages during your downtime.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Response Body
									Node:
									(type) c
									(layer)3
										Element:p
											You can normally send back an empty body, but when sending back a
										Element:code
											4xx
											- or
										Element:code
											5xx
											-class error, you may optionally send us a diagnostic message that explains the error. This message will be displayed to the user in the Segment debugger.
									Node:
									(type) c
									(layer)3
										Element:p
											Be sure to send JSON (and set your
										Element:code
											Content-Type
											header to
										Element:code
											application/json
											), and send your message in the
										Element:code
											message
											property.
									Node:
									(type) c
									(layer)3
										Element:p
											Here’s an example of a
										Element:code
											401
											response that would help a user track down why their calls aren’t appearing in your tool’s UI:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											{ "message": "API token expired" }
									Node:
									(type) c
									(layer)3
										Element:p
											Or, if your tool requires an email address in order to accept calls, this
										Element:code
											400
											reply:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											{ "message": "Missing email address" }
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								3. Test your integration
						Node:
						(type) c
						(layer)2
							Element:p
								Once you’ve understood the Segment data
							Element:a
								spec
								and the requirements above, you’re ready to start testing your integration!
						Node:
						(type) c
						(layer)2
							Element:p
								The good news is we provide the test data. You can ping
							Element:code
								spec.segment.com
								and tell us which type of test call you want.
						Node:
						(type) c
						(layer)2
							Element:p
								To retrieve a test
							Element:code
								identify
								call for example:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								curl -H "Accept: application/json; version=2.0" \ http://spec.segment.com/generate/identify?pretty=true
						Node:
						(type) c
						(layer)2
							Element:p
								You can then send this data directly to your endpoint (be sure to replace
							Element:code
								YOUR_API_KEY
								with test credentials for your API):
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								curl -H "Accept: application/json; version=2.0" \ http://spec.segment.com/generate/identify | \ curl -X POST \ --user "YOUR_API_KEY:" \ -H "Content-Type: application/json" \ -d @- \ http://api.your-endpoint.com/segment
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								4. Submit your technical survey for review
						Node:
						(type) c
						(layer)2
							Element:p
								Once you’ve tested your endpoint succesfully, complete the
							Element:a
								Direct Integration Application
								. This is a short application that helps us gather the essentials to get you onto our platform.
						Node:
						(type) c
						(layer)2
							Element:p
								Due to the high volume of requests, it may take up to a week for Segment to review your application.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								5. Private Beta
						Node:
						(type) c
						(layer)2
							Element:p
								After we have reviewed and approved your application and integration, you will be placed in Private Beta. The purpose of Private Beta is to test the integration with at least 10 mutual customers or more than 20MM events. You will remain in Private Beta until you have fulfilled this criteria.
						Node:
						(type) c
						(layer)2
							Element:p
								When you have completed the requirements of Private Beta, you will be launched onto the platform in Public Beta. From this point on, you will be visible to all Segment customers in the dashboard!
						Node:
						(type) c
						(layer)2
							Element:hr
						Node:
						(type) c
						(layer)2
							Element:p
								If you have any questions or see anywhere we can improve our documentation, please
							Element:a
								let us know
								or kick off a conversation in the
							Element:a
								Segment Community
								!
						Node:
						(type) c
						(layer)2
							Element:footer
							Element:span
							Element:span
								Was this document helpful?
							Element:span
							Element:label
							Element:span
								Yes
							Element:label
							Element:span
								No
						Node:
						(type) c
						(layer)2
							Element:i
						Node:
						(type) c
						(layer)2
							Element:ul
