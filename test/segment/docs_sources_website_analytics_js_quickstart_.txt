Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					Quickstart: Analytics.js
			Node:
			(type) c
			(layer)1
				Element:p
					This tutorial will help you start sending data from your website to Segment and any of our integrations, using our Analytics.js library. As soon as you’re setup you’ll be able to turn on any new integrations with the flip of a switch!
			Node:
			(type) c
			(layer)1
				Element:p
					If you want to dive deeper at any point, check out the
				Element:a
					Analytics.js reference
					.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Step 1: Copy the Snippet
						Node:
						(type) c
						(layer)2
							Element:p
								Installing Segment is easy, just paste this snippet into the head of your site:
						Node:
						(type) c
						(layer)2
							Element:figure
							Element:pre
							Element:code
								<script type="text/javascript"> !function(){var analytics=window.analytics=window.analytics||[];if(!analytics.initialize)if(analytics.invoked)window.console&&console.error&&console.error("Segment snippet included twice.");else{analytics.invoked=!0;analytics.methods=["trackSubmit","trackClick","trackLink","trackForm","pageview","identify","reset","group","track","ready","alias","debug","page","once","off","on"];analytics.factory=function(t){return function(){var e=Array.prototype.slice.call(arguments);e.unshift(t);analytics.push(e);return analytics}};for(var t=0;t<analytics.methods.length;t++){var e=analytics.methods[t];analytics[e]=analytics.factory(e)}analytics.load=function(t){var e=document.createElement("script");e.type="text/javascript";e.async=!0;e.src=("https:"===document.location.protocol?"
							Element:a
								https://":"http://")+"cdn.segment.com/analytics.js/v1/"+t+"/analytics.min.js";var
								n=document.getElementsByTagName("script")[0];n.parentNode.insertBefore(e,n)};analytics.SNIPPET_VERSION="4.0.0"; analytics.load("YOUR_WRITE_KEY"); analytics.page(); }}(); </script>
							Element:pre
							Element:code
								<script type="text/javascript"> (function(){ // Create a queue, but don't obliterate an existing one! var analytics = window.analytics = window.analytics || []; // If the real analytics.js is already on the page return. if (analytics.initialize) return; // If the snippet was invoked already show an error. if (analytics.invoked) { if (window.console && console.error) { console.error('Segment snippet included twice.'); } return; } // Invoked flag, to make sure the snippet // is never invoked twice. analytics.invoked = true; // A list of the methods in Analytics.js to stub. analytics.methods = [ 'trackSubmit', 'trackClick', 'trackLink', 'trackForm', 'pageview', 'identify', 'reset', 'group', 'track', 'ready', 'alias', 'debug', 'page', 'once', 'off', 'on' ]; // Define a factory to create stubs. These are placeholders // for methods in Analytics.js so that you never have to wait // for it to load to actually record data. The `method` is // stored as the first argument, so we can replay the data. analytics.factory = function(method){ return function(){ var args = Array.prototype.slice.call(arguments); args.unshift(method); analytics.push(args); return analytics; }; }; // For each of our methods, generate a queueing stub. for (var i = 0; i < analytics.methods.length; i++) { var key = analytics.methods[i]; analytics[key] = analytics.factory(key); } // Define a method to load Analytics.js from our CDN, // and that will be sure to only ever load it once. analytics.load = function(key){ // Create an async script element based on your key. var script = document.createElement('script'); script.type = 'text/javascript'; script.async = true; script.src = ('https:' === document.location.protocol ? '
							Element:a
								https://&#x27
								; : '
							Element:a
								http://&#x27
								;) + 'cdn.segment.com/analytics.js/v1/' + key + '/analytics.min.js'; // Insert our script next to the first script element. var first = document.getElementsByTagName('script')[0]; first.parentNode.insertBefore(script, first); }; // Add a version to keep track of what's in the wild. analytics.SNIPPET_VERSION = '4.0.0'; // Load Analytics.js with your key, which will automatically // load the tools you've enabled for your account. Boosh! analytics.load("YOUR_WRITE_KEY"); // Make the first page call to load the integrations. If // you'd like to manually name or tag the page, edit or // move this call however you'd like. analytics.page(); })(); </script>
						Node:
						(type) c
						(layer)2
							Element:p
								When you paste it, you’ll need to replace
							Element:code
								YOUR_WRITE_KEY
								with your Segment project’s
							Element:strong
								Write Key
								, which you can find in your project setup guide or settings.
						Node:
						(type) c
						(layer)2
							Element:p
								That snippet will load Analytics.js onto the page
							Element:em
								asynchronously
								, so it won’t affect your page load speed. As soon as that snippet is running on your site, you can start turning on any integrations on your Segment integrations page and they will start loading on your site automatically!
						Node:
						(type) c
						(layer)2
							Element:p
								Note that you’ll want to remove other native 3rd party integration code that you have on your site since it may cause issues if you turn on those same integrations (e.g. Google Analytics, Mixpanel, Customer.io, etc.) via Segment.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:strong
								Fun fact:
								if you only want the most basic Google Analytics setup you can stop reading right now. You’re done! Just switch on Google Analytics in our interface.
						Node:
						(type) c
						(layer)2
							Element:p
								However, lots of analytics and marketing tools will need to record
							Element:em
								who
								each user is on your site. If you’re looking to use any tool that deals with the identity of your users, read on about the
							Element:code
								identify
								method…
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Step 2: Identify Users
						Node:
						(type) c
						(layer)2
							Element:p
								The
							Element:code
								identify
								method is how you tell Segment who the current user is. It includes a unique User ID and any optional traits you know about them. You can read more about it in the
							Element:a
								identify reference
								.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:strong
								Note:
								You won’t need to call
							Element:code
								identify
								for anonymous visitors to your site. We’ll automatically assign them an
							Element:code
								anonymousId
								, so just calling
							Element:code
								page
								and
							Element:code
								track
								will still work just fine without
							Element:code
								identify
								.
						Node:
						(type) c
						(layer)2
							Element:p
								Here’s what a basic call to
							Element:code
								identify
								might look like:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								analytics.identify('f4ca124298', { name: 'Michael Bolton', email: 'mbolton@initech.com' });
						Node:
						(type) c
						(layer)2
							Element:p
								That’s identifying Michael by his unique User ID (the one you know him by in your database) and labeling him with
							Element:code
								name
								and
							Element:code
								email
								traits.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:strong
								Hold up though!
								When you actually put that code on your site, you’ll need to replace all those hard-coded strings with details about the currently logged-in user.
						Node:
						(type) c
						(layer)2
							Element:p
								To do that, we recommend using a backend template to inject an
							Element:code
								identify
								call straight into the footer of
							Element:strong
								every page
								of your site where the user is logged in. That way, no matter what page the user first lands on, they will always be identified. You don’t need to call
							Element:code
								identify
								if your unique identifier (
							Element:code
								userId
								) is not known.
						Node:
						(type) c
						(layer)2
							Element:p
								Depending on your templating language, that would look something like this:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								analytics.identify('{{ user.id }}', { name: '{{ user.fullname }}', email: '{{ user.email }}' });
						Node:
						(type) c
						(layer)2
							Element:p
								With that call on your page, you’re now successfully identifying every user that visits your site.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:strong
								Second fun fact:
								if you only want to use a basic CRM setup, you can call it a day right now. Just switch on Salesforce, Intercom, or any other CRM you’d like to use from our interface and we’ll start sending all of your user data to it!
						Node:
						(type) c
						(layer)2
							Element:p
								Of course, lots of analytics tools record more than just
							Element:em
								identities
								… they record the actions each user performs too! If you’re looking for a complete event tracking analytics setup, keep reading…
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Step 3: Track Actions
						Node:
						(type) c
						(layer)2
							Element:p
								The
							Element:code
								track
								method is how you tell Segment about which actions your users are performing on your site. Every action triggers what we call an “event”, which can also have associated properties. You can read more about
							Element:code
								track
								in the
							Element:a
								track reference
								.
						Node:
						(type) c
						(layer)2
							Element:p
								Here’s what a call to
							Element:code
								track
								might look like when a user signs up:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								analytics.track('Signed Up', { plan: 'Enterprise' });
						Node:
						(type) c
						(layer)2
							Element:p
								That’s just telling us that your user just triggered the
							Element:strong
								Signed Up
								event and chose your hypothetical
							Element:code
								'Enterprise'
								plan. Properties can be anything you want to record, for example:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								analytics.track('Article Bookmarked', { title: 'Snow Fall', subtitle: 'The Avalanche at Tunnel Creek', author: 'John Branch' });
						Node:
						(type) c
						(layer)2
							Element:p
								You’ll want to track events that are indicators of success for your site, like
							Element:strong
								Signed Up
								,
							Element:strong
								Item Purchased
								or
							Element:strong
								Article Bookmarked
								.
						Node:
						(type) c
						(layer)2
							Element:p
								To get started, we recommend tracking just a few important events. You can always add more later!
						Node:
						(type) c
						(layer)2
							Element:p
								Once you’ve added a few
							Element:code
								track
								calls,
							Element:strong
								you’re done!
								You successfully installed Analytics.js tracking. Now you’re ready to turn on any integration you fancy from our interface, margarita in hand.
						Node:
						(type) c
						(layer)2
							Element:hr
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								What’s Next?
						Node:
						(type) c
						(layer)2
							Element:p
								We just walked through the quickest way to get started with Segment using Analytics.js. You might also want to check out our full
							Element:a
								Analytics.js reference
								to see what else is possible, or read about the
							Element:a
								Tracking API methods
								to get a sense for the bigger picture.
						Node:
						(type) c
						(layer)2
							Element:p
								If you’re running an
							Element:strong
								Ecommerce
								site or app you should also check out our
							Element:a
								Ecommerce API reference
								to make sure your products and checkout experience are instrumented properly!
						Node:
						(type) c
						(layer)2
							Element:hr
						Node:
						(type) c
						(layer)2
							Element:p
								If you have any questions or see anywhere we can improve our documentation, please
							Element:a
								let us know
								or kick off a conversation in the
							Element:a
								Segment Community
								!
						Node:
						(type) c
						(layer)2
							Element:footer
							Element:span
							Element:span
								Was this document helpful?
							Element:span
							Element:label
							Element:span
								Yes
							Element:label
							Element:span
								No
						Node:
						(type) c
						(layer)2
							Element:i
			Node:
			(type) h1
			(layer)1
				Element:h1
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:a
					Overview
				Element:li
				Element:a
					ActiveCampaign
				Element:li
				Element:a
					AMP
				Element:li
				Element:a
					analytics.js
				Element:li
				Element:a
					Android
				Element:li
				Element:a
					Android Wear
				Element:li
				Element:a
					Clojure
				Element:li
				Element:a
					Customer.io
				Element:li
				Element:a
					Drip
				Element:li
				Element:a
					Facebook Ads
				Element:li
				Element:a
					Facebook Lead Ads
				Element:li
				Element:a
					Go
				Element:li
				Element:a
					Google AdWords
				Element:li
				Element:a
					HTTP
				Element:li
				Element:a
					HubSpot
				Element:li
				Element:a
					Intercom
				Element:li
				Element:a
					iOS
				Element:li
				Element:a
					Iterable
				Element:li
				Element:a
					Java
				Element:li
				Element:a
					Klaviyo
				Element:li
				Element:a
					Mailchimp
				Element:li
				Element:a
					Mailjet
				Element:li
				Element:a
					Marketo
				Element:li
				Element:a
					Node
				Element:li
				Element:a
					Nudgespot
				Element:li
				Element:a
					PHP
				Element:li
				Element:a
					Python
				Element:li
				Element:a
					Ruby
				Element:li
				Element:a
					Salesforce
				Element:li
				Element:a
					Selligent
				Element:li
				Element:a
					SendGrid
				Element:li
				Element:a
					Stripe
				Element:li
				Element:a
					Twilio
				Element:li
				Element:a
					Vero
				Element:li
				Element:a
					Xamarin
				Element:li
				Element:a
					Zendesk
				Element:li
				Element:a
					.NET
