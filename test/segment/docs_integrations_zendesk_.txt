Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					Zendesk Integration
			Node:
			(type) c
			(layer)1
				Element:p
					Segment makes it easy to send your data to
				Element:a
					Zendesk
					(and lots of other integrations). Once you've tracked your data through our open source
				Element:a
					libraries
					we'll translate and route your data to Zendesk in the format they understand.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Credentials for our Zendesk Integration
						Node:
						(type) c
						(layer)2
							Element:p
								There two ways to authenticate your Zendesk account with Segment so that we can send you data, there is the standard email and password vs. Zendesk Oauth.
						Node:
						(type) c
						(layer)2
							Element:p
								For the former, you can enter your email and password in the Zendesk integration panel on your dashboard and for the latter, you should pass the email as ‚Äòemail/token‚Äô and the password as ‚Äòtoken‚Äô.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Identify
						Node:
						(type) c
						(layer)2
							Element:p
								When you call
							Element:code
								identify
								we will insert or update a user record in Zendesk. We‚Äôll use the user email in
							Element:code
								traits.email
								to match user records in Zendesk. If there are multiple users matching the email, then no updates are submitted. Note that you must provide a trait for
							Element:code
								name
								or
							Element:code
								first_name
								and
							Element:code
								last_name
								in order for the
							Element:code
								identify
								call to send to Zendesk.
						Node:
						(type) c
						(layer)2
							Element:p
								Here‚Äôs an example:
						Node:
						(type) c
						(layer)2
							Element:figure
							Element:pre
							Element:code
								analytics.identify("12345", new Traits() .putValue("name", "Kobe Bryant") .putValue("email", "kobe@lakers.com") .putValue("timezone", "Los Angeles") .putValue("locale", "en-US") .putValue("locale_id", "1") .putValue("organizationId", 6789) .putValue("phone", "763-555-2342"));
							Element:pre
							Element:code
								client.Identify(&analytics.Identify{ UserId: "12345", Traits: map[string]interface{}{ "name": "Kobe Bryant", "email": "kobe@lakers.com", "timezone": "Los Angeles", "locale": "en-US", "locale_id": "1", "organizationId": 6789, "phone": "763-555-2342", }, })
							Element:pre
							Element:code
								[[SEGAnalytics sharedAnalytics] identify:@"12345", traits: @{ @"name" : @"Kobe Bryant", @"email" : @"kobe@lakers.com", @"timezone" : @"Los Angeles", @"locale" : @"en-US", @"locale_id" : @"1", @"organizationId" : @6789, @"phone" : @"763-555-2342" }];
							Element:pre
							Element:code
								Analytics.identify("12345", new Traits() .put("name", "Kobe Bryant") .put("email", "kobe@lakers.com") .put("timezone", "Los Angeles") .put("locale", "en-US") .put("locale_id", "1") .put("organizationId", 6789) .put("phone", "763-555-2342"));
							Element:pre
							Element:code
								analytics.identify({ userId: '12345', traits: { name: 'Kobe Bryant', email: 'kobe@lakers.com', timezone: 'Los Angeles', locale: 'en-US', locale_id: '1', organizationId: 6789, phone: '763-555-2342' } });
							Element:pre
							Element:code
								Analytics::identify(array( "userId" => "12345", "traits" => array( "name" => "Kobe Bryant", "email" => "kobe@lakers.com", "timezone" => "Los Angeles", "locale" => "en-US", "locale_id" => "1", "organizationId" => 6789, "phone" => "763-555-2342" ) ));
							Element:pre
							Element:code
								analytics.identify('12345', { 'name': 'Kobe Bryant', 'email': 'kobe@lakers.com', 'timezone': 'Los Angeles', 'locale': 'en-US', 'locale_id': '1', 'organizationId': 6789, 'phone': '763-555-2342' })
							Element:pre
							Element:code
								Analytics.identify( user_id: '12345', traits: { name: 'Kobe Bryant', email: 'kobe@lakers.com', timezone: 'Los Angeles', locale: 'en-US', locale_id: '1', organizationId: 6789, phone: '763-555-2342' } )
							Element:pre
							Element:code
								analytics.identify('12345', { name: 'Kobe Bryant', email: 'kobe@lakers.com', timezone: 'Los Angeles', locale: 'en-US', locale_id: '1', organizationId: 6789, phone: '763-555-2342' });
							Element:pre
							Element:code
								Analytics.Client.Identify("12345", new Traits() { { "name", "Kobe Bryant" }, { "email", "kobe@lakers.com" }, { "timezone", "Los Angeles" }, { "locale", "en-US" }, { "locale_id", "1" }, { "organizationId", 6789 }, { "phone", "763-555-2342" } });
							Element:pre
							Element:code
								Analytics.Client.Identify("12345", new Traits() { { "name", "Kobe Bryant" }, { "email", "kobe@lakers.com" }, { "timezone", "Los Angeles" }, { "locale", "en-US" }, { "locale_id", "1" }, { "organizationId", 6789 }, { "phone", "763-555-2342" } });
							Element:pre
							Element:code
								curl
							Element:a
								https://api.segment.io/v1/identify
								\ -d userId=12345 \ -d "traits[name]=Kobe Bryant" \ -d traits[email]=kobe@lakers.com \ -d "traits[timezone]=Los Angeles" \ -d traits[locale]=en-US \ -d traits[locale_id]=1 \ -d traits[organizationId]=6789 \ -d traits[phone]=763-555-2342
						Node:
						(type) c
						(layer)2
							Element:p
							Element:strong
								Note:
								To limit identified users from receiving a verification email from Zendesk, simply enable the ‚Äúverified‚Äù option in the Zendesk integration settings.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Group
						Node:
						(type) c
						(layer)2
							Element:p
								Important: To make group calls, you
							Element:em
								must
								be an Administrator in Zendesk.
						Node:
						(type) c
						(layer)2
							Element:p
								When you call
							Element:code
								group
								we will insert or update an organization in Zendesk. We‚Äôll use the
							Element:code
								groupId
								you include in the call to match organization records in Zendesk. If there are multiple organizations matching the name, then no updates are submitted.
						Node:
						(type) c
						(layer)2
							Element:p
								Here‚Äôs an example:
						Node:
						(type) c
						(layer)2
							Element:figure
							Element:pre
							Element:code
								analytics.group("6789", "908172409", new Traits() .putValue("name", "LA Lakers") .putValue("url", "
							Element:a
								https://lakers.com&quot
								;) .putValue("deleted", false));
							Element:pre
							Element:code
								client.Group(&analytics.Group{ UserId: "6789", GroupId: "908172409", Traits: map[string]interface{}{ "name": "LA Lakers", "url": "
							Element:a
								https://lakers.com&quot
								;, "deleted": false, }, })
							Element:pre
							Element:code
								[[SEGAnalytics sharedAnalytics] group:@"908172409", traits: @{ @"name" : @"LA Lakers", @"url" : @"
							Element:a
								https://lakers.com&quot
								;, @"deleted" : @false }];
							Element:pre
							Element:code
								Analytics.group("6789", "908172409", new Traits() .put("name", "LA Lakers") .put("url", "
							Element:a
								https://lakers.com&quot
								;) .put("deleted", false));
							Element:pre
							Element:code
								analytics.group({ userId: '6789', groupId: '908172409', traits: { name: 'LA Lakers', url: '
							Element:a
								https://lakers.com&#x27
								;, deleted: false } });
							Element:pre
							Element:code
								Analytics::group(array( "userId" => "6789", "groupId" => "908172409", "traits" => array( "name" => "LA Lakers", "url" => "
							Element:a
								https://lakers.com&quot
								;, "deleted" => false ) ));
							Element:pre
							Element:code
								analytics.group('6789', '908172409', { 'name': 'LA Lakers', 'url': '
							Element:a
								https://lakers.com&#x27
								;, 'deleted': false })
							Element:pre
							Element:code
								Analytics.group( user_id: '6789', group_id: '908172409', traits: { name: 'LA Lakers', url: '
							Element:a
								https://lakers.com&#x27
								;, deleted: false } )
							Element:pre
							Element:code
								analytics.group('908172409', { name: 'LA Lakers', url: '
							Element:a
								https://lakers.com&#x27
								;, deleted: false });
							Element:pre
							Element:code
								Analytics.Client.Group("6789", "908172409", new Traits() { { "name", "LA Lakers" }, { "url", "
							Element:a
								https://lakers.com&quot
								; }, { "deleted", false } });
							Element:pre
							Element:code
								Analytics.Client.Group("6789", "908172409", new Traits() { { "name", "LA Lakers" }, { "url", "
							Element:a
								https://lakers.com&quot
								; }, { "deleted", false } });
							Element:pre
							Element:code
								curl
							Element:a
								https://api.segment.io/v1/group
								\ -d groupId=908172409 \ -d userId=6789 \ -d "traits[name]=LA Lakers" \ -d traits[url]=
							Element:a
								https://lakers.com
								\ -d traits[deleted]=false
						Node:
						(type) c
						(layer)2
							Element:p
								Every time you call group, we will also link the organization to the user making the request.
						Node:
						(type) c
						(layer)2
							Element:hr
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Supported Sources and Connection Modes
						Node:
						(type) c
						(layer)2
							Element:table
							Element:tr
							Element:th
							Element:th
								Web
							Element:th
								Mobile
							Element:th
								Server
							Element:tr
							Element:td
								üì± Device-based
							Element:td
							Element:td
							Element:td
							Element:tr
							Element:td
								‚òÅÔ∏è Cloud-based
							Element:td
								‚úÖ
							Element:td
								‚úÖ
							Element:td
								‚úÖ
						Node:
						(type) c
						(layer)2
							Element:p
								To learn more about about Connection Modes and what dictates which we support,
							Element:a
								see here
								.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Settings
						Node:
						(type) c
						(layer)2
							Element:p
								Segment lets you change these integration settings via your Segment dashboard without having to touch any code.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Email
									Node:
									(type) c
									(layer)3
										Element:p
											Your Zendesk account email. If you‚Äôre using oAuth to login, fill in your email/token - e.g.
										Element:code
											john@gmail.com/token
											Use the actual word
										Element:code
											token
											in your email address if using this method of authentication and then set your password as the actual oAuth token.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Password
									Node:
									(type) c
									(layer)3
										Element:p
											Your Zendesk account password or oAuth token.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Subdomain
									Node:
									(type) c
									(layer)3
										Element:p
											Your Zendesk subdomain, not including
										Element:code
											.zendesk.com
											.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Create Users as Verified
									Node:
									(type) c
									(layer)3
										Element:p
											Passes the
										Element:code
											verify
											flag set to
										Element:code
											true
											on each user upsertion, which will mean customers needn‚Äôt confirm their email upon account creation. See
										Element:a
											here
											for more information.
									Node:
									(type) c
									(layer)3
										Element:hr
									Node:
									(type) c
									(layer)3
										Element:p
											If you have any questions or see anywhere we can improve our documentation, please
										Element:a
											let us know
											or kick off a conversation in the
										Element:a
											Segment Community
											!
									Node:
									(type) c
									(layer)3
										Element:i
									Node:
									(type) c
									(layer)3
										Element:i
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
									Node:
									(type) c
									(layer)3
										Element:span
											Check out the code!
									Node:
									(type) c
									(layer)3
										Element:a
											server
