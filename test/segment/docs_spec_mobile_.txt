Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					Native Mobile Spec
			Node:
			(type) c
			(layer)1
				Element:p
					One of the core components of the Segment
				Element:a
					Spec
					is the
				Element:a
					method. It records any arbitrary event that the user has triggered. For Mobile tracking, in addition to
				Element:code
					track
				Element:code
					screen
					calls, you’ll want to send
				Element:strong
					specific event names
					that we recognize semantically. That way, we can transform them correctly before sending them off to downstream integrations.
			Node:
			(type) c
			(layer)1
				Element:p
					By standardizing the events that comprise the core
				Element:strong
					mobile application lifecycle
					and associated
				Element:strong
					mobile campaign and referral events
					, Segment and our partners can, wherever possible, automatically collect and forward these events on your behalf and build downstream integrations which take full advantage of the semantic meaning associated with these events and their properties.
			Node:
			(type) c
			(layer)1
				Element:p
				Element:strong
					Note:
					If you’re already collecting similar events, we recommend migrating to these event names so that you can take advantage of available features in our integrations which depend on the spec as they become available.
			Node:
			(type) c
			(layer)1
				Element:p
					These events pair nicely with our
				Element:a
					ecommerce spec
					for mobile marketplaces to take full advantage of features like dynamic ads in Facebook and the ability to take full advantage of server-side integrations with Mobile Attribution Platforms like Tune and Kochava.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Overview of Events
						Node:
						(type) c
						(layer)2
							Element:p
								The Segment Native Mobile Spec includes the following semantic events:
						Node:
						(type) c
						(layer)2
							Element:p
							Element:strong
								Note:
								the bolded events are
							Element:em
								currently
								collected automatically by the latest version of our Android and iOS SDKS.
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:a
							Element:strong
								Application Installed
							Element:li
							Element:a
							Element:strong
								Application Opened
							Element:li
							Element:a
							Element:strong
								Application Updated
							Element:li
							Element:a
								Application Backgrounded
							Element:li
							Element:a
								Application Crashed
							Element:li
							Element:a
								Application Uninstalled
							Element:li
							Element:a
								Push Notification Received
							Element:li
							Element:a
								Push Notification Tapped
							Element:li
							Element:a
								Push Notification Bounced
							Element:li
							Element:a
								Install Attributed
							Element:li
							Element:a
								Deep Link Clicked
							Element:li
							Element:a
								Deep Link Opened
						Node:
						(type) c
						(layer)2
							Element:p
								We recommend using the above event names if you’re going to be integrating the events yourself in the meantime. We’ll be working to expand our automatic collection to include the rest of these events across our SDKs in conjunction with our integration partners over the coming weeks!
						Node:
						(type) c
						(layer)2
							Element:p
								Additionally, though they’re not formally part of the Native Mobile Spec, we also collect
							Element:code
								Order Completed
								from our ecommerce spec automatically upon in-app purchases on iOS and can collect screen views automatically in iOS and Android as well.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Lifecycle Events
						Node:
						(type) c
						(layer)2
							Element:p
								Mobile applications live within a fairly bounded lifecycle. In order to understand and communicate effectively with your users, it’s crucial to instrument the core flows associated with installing and opening your app. The following events, many of which we can capture automatically in the latest versions of our SDKs, allow you to get a picture of top-line metrics like DAUs, MAUs, Screen Views per session, etc. Automatic tracking of lifecycle events comletely optional - you can learn how to enable and disable them in our
							Element:a
								iOS
								and
							Element:a
								Android
								library docs.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Application Installed
									Node:
									(type) c
									(layer)3
										Element:p
											This event fires when a user
										Element:strong
											first
											installs your mobile application. This event does not wait for attribution or campaign information to be received, and is collected automatically by our SDKs. Advertising providers like Facebook and Google require discrete install events to correctly attribute installs to ads served through their platform.
									Node:
									(type) c
									(layer)3
										Element:figure
										Element:pre
										Element:code
											analytics.track("Application Installed", new Properties() .putValue("version", "1.2.3") .putValue("build", 1234));
										Element:pre
										Element:code
											client.Track(&analytics.Track{ UserId: "019mr8mf4r", Event: "Application Installed", Properties: map[string]interface{}{ "version": "1.2.3", "build": 1234, }, })
										Element:pre
										Element:code
											[[SEGAnalytics sharedAnalytics] track:@"Application Installed", properties: @{ @"version" : @"1.2.3", @"build" : @1234 }];
										Element:pre
										Element:code
											Analytics.track("019mr8mf4r", "Application Installed", new Props() .put("version", "1.2.3") .put("build", 1234));
										Element:pre
										Element:code
											analytics.track({ userId: '019mr8mf4r', event: 'Application Installed', properties: { version: '1.2.3', build: 1234 } });
										Element:pre
										Element:code
											Analytics::track(array( "userId" => "019mr8mf4r", "event" => "Application Installed", "properties" => array( "version" => "1.2.3", "build" => 1234 ) ));
										Element:pre
										Element:code
											analytics.track('019mr8mf4r', 'Application Installed', { 'version': '1.2.3', 'build': 1234 })
										Element:pre
										Element:code
											Analytics.track( user_id: '019mr8mf4r', event: 'Application Installed', properties: { version: '1.2.3', build: 1234 } )
										Element:pre
										Element:code
											analytics.track('Application Installed', { version: '1.2.3', build: 1234 });
										Element:pre
										Element:code
											Analytics.Client.Track("019mr8mf4r", "Application Installed", new Properties() { { "version", "1.2.3" }, { "build", 1234 } });
										Element:pre
										Element:code
											Analytics.Client.Track("019mr8mf4r", "Application Installed", new Properties() { { "version", "1.2.3" }, { "build", 1234 } });
										Element:pre
										Element:code
											curl
										Element:a
											https://api.segment.io/v1/track
											\ -d userId=019mr8mf4r \ -d "event=Application Installed" \ -d properties[version]=1.2.3 \ -d properties[build]=1234
									Node:
									(type) c
									(layer)3
										Element:table
										Element:thead
										Element:tr
										Element:th
										Element:strong
											Property
										Element:th
										Element:strong
											Type
										Element:th
										Element:strong
											Description
										Element:tbody
										Element:tr
										Element:td
										Element:code
											version
										Element:td
											String
										Element:td
											The version installed.
										Element:tr
										Element:td
										Element:code
											build
										Element:td
											Number
										Element:td
											The build number of the installed app.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Application Opened
									Node:
									(type) c
									(layer)3
										Element:p
											This event fires when a user launches or foregrounds your mobile application after the first open. It will fire after the
										Element:code
											Application Installed
											event and again after the app is re-opened after being closed. This event does not wait for attribution information to be received but may include information about referring applications or deep link URLs if available to the application upon open.
									Node:
									(type) c
									(layer)3
										Element:figure
										Element:pre
										Element:code
											analytics.track("Application Opened", new Properties() .putValue("from_background", false) .putValue("referring_application", "GMail") .putValue("url", "url://location"));
										Element:pre
										Element:code
											client.Track(&analytics.Track{ UserId: "019mr8mf4r", Event: "Application Opened", Properties: map[string]interface{}{ "from_background": false, "referring_application": "GMail", "url": "url://location", }, })
										Element:pre
										Element:code
											[[SEGAnalytics sharedAnalytics] track:@"Application Opened", properties: @{ @"from_background" : @false, @"referring_application" : @"GMail", @"url" : @"url://location" }];
										Element:pre
										Element:code
											Analytics.track("019mr8mf4r", "Application Opened", new Props() .put("from_background", false) .put("referring_application", "GMail") .put("url", "url://location"));
										Element:pre
										Element:code
											analytics.track({ userId: '019mr8mf4r', event: 'Application Opened', properties: { from_background: false, referring_application: 'GMail', url: 'url://location' } });
										Element:pre
										Element:code
											Analytics::track(array( "userId" => "019mr8mf4r", "event" => "Application Opened", "properties" => array( "from_background" => false, "referring_application" => "GMail", "url" => "url://location" ) ));
										Element:pre
										Element:code
											analytics.track('019mr8mf4r', 'Application Opened', { 'from_background': false, 'referring_application': 'GMail', 'url': 'url://location' })
										Element:pre
										Element:code
											Analytics.track( user_id: '019mr8mf4r', event: 'Application Opened', properties: { from_background: false, referring_application: 'GMail', url: 'url://location' } )
										Element:pre
										Element:code
											analytics.track('Application Opened', { from_background: false, referring_application: 'GMail', url: 'url://location' });
										Element:pre
										Element:code
											Analytics.Client.Track("019mr8mf4r", "Application Opened", new Properties() { { "from_background", false }, { "referring_application", "GMail" }, { "url", "url://location" } });
										Element:pre
										Element:code
											Analytics.Client.Track("019mr8mf4r", "Application Opened", new Properties() { { "from_background", false }, { "referring_application", "GMail" }, { "url", "url://location" } });
										Element:pre
										Element:code
											curl
										Element:a
											https://api.segment.io/v1/track
											\ -d userId=019mr8mf4r \ -d "event=Application Opened" \ -d properties[from_background]=false \ -d properties[referring_application]=GMail \ -d properties[url]=url://location
									Node:
									(type) c
									(layer)3
										Element:table
										Element:thead
										Element:tr
										Element:th
										Element:strong
											Property
										Element:th
										Element:strong
											Type
										Element:th
										Element:strong
											Description
										Element:tbody
										Element:tr
										Element:td
										Element:code
											from_background
										Element:td
											Boolean
										Element:td
											If application
										Element:a
											transitioned
											from “Background” to “Inactive” state prior to foregrounding (as opposed to from “Not Running” state)
										Element:tr
										Element:td
										Element:code
											url
										Element:td
											String
										Element:td
											The value of
										Element:code
											UIApplicationLaunchOptionsURLKey
											from
										Element:code
											launchOptions
										Element:tr
										Element:td
										Element:code
											source_application
										Element:td
											String
										Element:td
											The value of
										Element:code
											UIApplicationLaunchOptionsSourceApplicationKey
											from
										Element:code
											launchOptions
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Application Backgrounded
									Node:
									(type) c
									(layer)3
										Element:p
											This event fires when a user backgrounds the application upon
										Element:a
										Element:code
											applicationDidEnterBackground
									Node:
									(type) c
									(layer)3
										Element:figure
										Element:pre
										Element:code
											analytics.track("Application Backgrounded", new Properties());
										Element:pre
										Element:code
											client.Track(&analytics.Track{ UserId: "019mr8mf4r", Event: "Application Backgrounded", })
										Element:pre
										Element:code
											[[SEGAnalytics sharedAnalytics] track:@"Application Backgrounded", properties: @{ }];
										Element:pre
										Element:code
											Analytics.track("019mr8mf4r", "Application Backgrounded", new Props());
										Element:pre
										Element:code
											analytics.track({ userId: '019mr8mf4r', event: 'Application Backgrounded' });
										Element:pre
										Element:code
											Analytics::track(array( "userId" => "019mr8mf4r", "event" => "Application Backgrounded" ));
										Element:pre
										Element:code
											analytics.track('019mr8mf4r', 'Application Backgrounded', {})
										Element:pre
										Element:code
											Analytics.track( user_id: '019mr8mf4r', event: 'Application Backgrounded', properties: {} )
										Element:pre
										Element:code
											analytics.track('Application Backgrounded');
										Element:pre
										Element:code
											Analytics.Client.Track("019mr8mf4r", "Application Backgrounded", new Properties() { });
										Element:pre
										Element:code
											Analytics.Client.Track("019mr8mf4r", "Application Backgrounded", new Properties() { });
										Element:pre
										Element:code
											curl
										Element:a
											https://api.segment.io/v1/track
											\ -d userId=019mr8mf4r \ -d "event=Application Backgrounded"
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Application Updated
									Node:
									(type) c
									(layer)3
										Element:p
											This event fires when a user updates the application. Our SDK will automatically collect this event in lieu of an “Application Opened” event when we determine that the Open is first since an update.
									Node:
									(type) c
									(layer)3
										Element:figure
										Element:pre
										Element:code
											analytics.track("Application Updated", new Properties() .putValue("previous_version", "1.1.2") .putValue("previous_build", 1234) .putValue("version", "1.2.0") .putValue("build", 1456));
										Element:pre
										Element:code
											client.Track(&analytics.Track{ UserId: "019mr8mf4r", Event: "Application Updated", Properties: map[string]interface{}{ "previous_version": "1.1.2", "previous_build": 1234, "version": "1.2.0", "build": 1456, }, })
										Element:pre
										Element:code
											[[SEGAnalytics sharedAnalytics] track:@"Application Updated", properties: @{ @"previous_version" : @"1.1.2", @"previous_build" : @1234, @"version" : @"1.2.0", @"build" : @1456 }];
										Element:pre
										Element:code
											Analytics.track("019mr8mf4r", "Application Updated", new Props() .put("previous_version", "1.1.2") .put("previous_build", 1234) .put("version", "1.2.0") .put("build", 1456));
										Element:pre
										Element:code
											analytics.track({ userId: '019mr8mf4r', event: 'Application Updated', properties: { previous_version: '1.1.2', previous_build: 1234, version: '1.2.0', build: 1456 } });
										Element:pre
										Element:code
											Analytics::track(array( "userId" => "019mr8mf4r", "event" => "Application Updated", "properties" => array( "previous_version" => "1.1.2", "previous_build" => 1234, "version" => "1.2.0", "build" => 1456 ) ));
										Element:pre
										Element:code
											analytics.track('019mr8mf4r', 'Application Updated', { 'previous_version': '1.1.2', 'previous_build': 1234, 'version': '1.2.0', 'build': 1456 })
										Element:pre
										Element:code
											Analytics.track( user_id: '019mr8mf4r', event: 'Application Updated', properties: { previous_version: '1.1.2', previous_build: 1234, version: '1.2.0', build: 1456 } )
										Element:pre
										Element:code
											analytics.track('Application Updated', { previous_version: '1.1.2', previous_build: 1234, version: '1.2.0', build: 1456 });
										Element:pre
										Element:code
											Analytics.Client.Track("019mr8mf4r", "Application Updated", new Properties() { { "previous_version", "1.1.2" }, { "previous_build", 1234 }, { "version", "1.2.0" }, { "build", 1456 } });
										Element:pre
										Element:code
											Analytics.Client.Track("019mr8mf4r", "Application Updated", new Properties() { { "previous_version", "1.1.2" }, { "previous_build", 1234 }, { "version", "1.2.0" }, { "build", 1456 } });
										Element:pre
										Element:code
											curl
										Element:a
											https://api.segment.io/v1/track
											\ -d userId=019mr8mf4r \ -d "event=Application Updated" \ -d properties[previous_version]=1.1.2 \ -d properties[previous_build]=1234 \ -d properties[version]=1.2.0 \ -d properties[build]=1456
									Node:
									(type) c
									(layer)3
										Element:table
										Element:thead
										Element:tr
										Element:th
										Element:strong
											Property
										Element:th
										Element:strong
											Type
										Element:th
										Element:strong
											Description
										Element:tbody
										Element:tr
										Element:td
										Element:code
											previous_version
										Element:td
											String
										Element:td
											The previously recorded version.
										Element:tr
										Element:td
										Element:code
											previous_build
										Element:td
											Number
										Element:td
											The previously recorded build.
										Element:tr
										Element:td
										Element:code
											version
										Element:td
											String
										Element:td
											The new version.
										Element:tr
										Element:td
										Element:code
											build
										Element:td
											Number
										Element:td
											The new build.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Application Uninstalled
									Node:
									(type) c
									(layer)3
										Element:p
											Fire this event when a user uninstalls the application. Several integration partners will detect this for you using Silent Push Notifications and send this event to Segment on your behalf.
									Node:
									(type) c
									(layer)3
										Element:figure
										Element:pre
										Element:code
											analytics.track("Application Uninstalled", new Properties());
										Element:pre
										Element:code
											client.Track(&analytics.Track{ UserId: "019mr8mf4r", Event: "Application Uninstalled", })
										Element:pre
										Element:code
											[[SEGAnalytics sharedAnalytics] track:@"Application Uninstalled", properties: @{ }];
										Element:pre
										Element:code
											Analytics.track("019mr8mf4r", "Application Uninstalled", new Props());
										Element:pre
										Element:code
											analytics.track({ userId: '019mr8mf4r', event: 'Application Uninstalled' });
										Element:pre
										Element:code
											Analytics::track(array( "userId" => "019mr8mf4r", "event" => "Application Uninstalled" ));
										Element:pre
										Element:code
											analytics.track('019mr8mf4r', 'Application Uninstalled', {})
										Element:pre
										Element:code
											Analytics.track( user_id: '019mr8mf4r', event: 'Application Uninstalled', properties: {} )
										Element:pre
										Element:code
											analytics.track('Application Uninstalled');
										Element:pre
										Element:code
											Analytics.Client.Track("019mr8mf4r", "Application Uninstalled", new Properties() { });
										Element:pre
										Element:code
											Analytics.Client.Track("019mr8mf4r", "Application Uninstalled", new Properties() { });
										Element:pre
										Element:code
											curl
										Element:a
											https://api.segment.io/v1/track
											\ -d userId=019mr8mf4r \ -d "event=Application Uninstalled"
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Application Crashed
									Node:
									(type) c
									(layer)3
										Element:p
											This event fires when the application crashes, but is not meant to supplant traditional crash reporting tools. By tracking crashes as an analytics event with device and user information, you can analyze the which types of users are impacted by crashes and how those crashes, in turn, affect their engagement. You may also want to target those customers with tailored communications in other channels if they’ve encountered several crashes.
									Node:
									(type) c
									(layer)3
										Element:figure
										Element:pre
										Element:code
											analytics.track("Application Crashed", new Properties());
										Element:pre
										Element:code
											client.Track(&analytics.Track{ UserId: "019mr8mf4r", Event: "Application Crashed", })
										Element:pre
										Element:code
											[[SEGAnalytics sharedAnalytics] track:@"Application Crashed", properties: @{ }];
										Element:pre
										Element:code
											Analytics.track("019mr8mf4r", "Application Crashed", new Props());
										Element:pre
										Element:code
											analytics.track({ userId: '019mr8mf4r', event: 'Application Crashed' });
										Element:pre
										Element:code
											Analytics::track(array( "userId" => "019mr8mf4r", "event" => "Application Crashed" ));
										Element:pre
										Element:code
											analytics.track('019mr8mf4r', 'Application Crashed', {})
										Element:pre
										Element:code
											Analytics.track( user_id: '019mr8mf4r', event: 'Application Crashed', properties: {} )
										Element:pre
										Element:code
											analytics.track('Application Crashed');
										Element:pre
										Element:code
											Analytics.Client.Track("019mr8mf4r", "Application Crashed", new Properties() { });
										Element:pre
										Element:code
											Analytics.Client.Track("019mr8mf4r", "Application Crashed", new Properties() { });
										Element:pre
										Element:code
											curl
										Element:a
											https://api.segment.io/v1/track
											\ -d userId=019mr8mf4r \ -d "event=Application Crashed"
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Campaign-Related Events
						Node:
						(type) c
						(layer)2
							Element:p
								As the walls between apps become increasingly lowered, capturing information about the content and campaigns that drive users to engage with your app is critical to building more targeted, relevant, personalized experiences for your users.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Install Attributed
									Node:
									(type) c
									(layer)3
										Element:p
											When Segment or an integrated partner can discern the source of an install, we’ll collect an
										Element:code
											Install Attributed
											event. This event may be sent to Segment via server-to-server connection from your attribution provider, or directly on the device via packaged integrations. In either case, this will happen
										Element:strong
											after
											install, and does not apply to all installs, which is why it is a discrete event.
									Node:
									(type) c
									(layer)3
										Element:figure
										Element:pre
										Element:code
											analytics.track("Install Attributed", new Properties() .putValue("provider", "Tune/Kochava/Branch") .putValue("campaign", new Properties() .putValue("source", "Network/FB/AdWords/MoPub/Source") .putValue("name", "Campaign Name") .putValue("content", "Organic Content Title") .putValue("ad_creative", "Red Hello World Ad") .putValue("ad_group", "Red Ones")));
										Element:pre
										Element:code
											client.Track(&analytics.Track{ UserId: "019mr8mf4r", Event: "Install Attributed", Properties: map[string]interface{}{ "provider": "Tune/Kochava/Branch", "campaign": map[string]interface{}{ "source": "Network/FB/AdWords/MoPub/Source", "name": "Campaign Name", "content": "Organic Content Title", "ad_creative": "Red Hello World Ad", "ad_group": "Red Ones", }, }, })
										Element:pre
										Element:code
											[[SEGAnalytics sharedAnalytics] track:@"Install Attributed", properties: @{ @"provider" : @"Tune/Kochava/Branch", @"campaign" : @{ @"source" : @"Network/FB/AdWords/MoPub/Source", @"name" : @"Campaign Name", @"content" : @"Organic Content Title", @"ad_creative" : @"Red Hello World Ad", @"ad_group" : @"Red Ones" } }];
										Element:pre
										Element:code
											Analytics.track("019mr8mf4r", "Install Attributed", new Props() .put("provider", "Tune/Kochava/Branch") .put("campaign", new Props() .put("source", "Network/FB/AdWords/MoPub/Source") .put("name", "Campaign Name") .put("content", "Organic Content Title") .put("ad_creative", "Red Hello World Ad") .put("ad_group", "Red Ones")));
										Element:pre
										Element:code
											analytics.track({ userId: '019mr8mf4r', event: 'Install Attributed', properties: { provider: 'Tune/Kochava/Branch', campaign: { source: 'Network/FB/AdWords/MoPub/Source', name: 'Campaign Name', content: 'Organic Content Title', ad_creative: 'Red Hello World Ad', ad_group: 'Red Ones' } } });
										Element:pre
										Element:code
											Analytics::track(array( "userId" => "019mr8mf4r", "event" => "Install Attributed", "properties" => array( "provider" => "Tune/Kochava/Branch", "campaign" => array( "source" => "Network/FB/AdWords/MoPub/Source", "name" => "Campaign Name", "content" => "Organic Content Title", "ad_creative" => "Red Hello World Ad", "ad_group" => "Red Ones" ) ) ));
										Element:pre
										Element:code
											analytics.track('019mr8mf4r', 'Install Attributed', { 'provider': 'Tune/Kochava/Branch', 'campaign': { 'source': 'Network/FB/AdWords/MoPub/Source', 'name': 'Campaign Name', 'content': 'Organic Content Title', 'ad_creative': 'Red Hello World Ad', 'ad_group': 'Red Ones' } })
										Element:pre
										Element:code
											Analytics.track( user_id: '019mr8mf4r', event: 'Install Attributed', properties: { provider: 'Tune/Kochava/Branch', campaign: { source: 'Network/FB/AdWords/MoPub/Source', name: 'Campaign Name', content: 'Organic Content Title', ad_creative: 'Red Hello World Ad', ad_group: 'Red Ones' } } )
										Element:pre
										Element:code
											analytics.track('Install Attributed', { provider: 'Tune/Kochava/Branch', campaign: { source: 'Network/FB/AdWords/MoPub/Source', name: 'Campaign Name', content: 'Organic Content Title', ad_creative: 'Red Hello World Ad', ad_group: 'Red Ones' } });
										Element:pre
										Element:code
											Analytics.Client.Track("019mr8mf4r", "Install Attributed", new Properties() { { "provider", "Tune/Kochava/Branch" }, { "campaign", new Properties() { { "source", "Network/FB/AdWords/MoPub/Source" }, { "name", "Campaign Name" }, { "content", "Organic Content Title" }, { "ad_creative", "Red Hello World Ad" }, { "ad_group", "Red Ones" } } } });
										Element:pre
										Element:code
											Analytics.Client.Track("019mr8mf4r", "Install Attributed", new Properties() { { "provider", "Tune/Kochava/Branch" }, { "campaign", new Properties() { { "source", "Network/FB/AdWords/MoPub/Source" }, { "name", "Campaign Name" }, { "content", "Organic Content Title" }, { "ad_creative", "Red Hello World Ad" }, { "ad_group", "Red Ones" } } } });
										Element:pre
										Element:code
											curl
										Element:a
											https://api.segment.io/v1/track
											\ -d userId=019mr8mf4r \ -d "event=Install Attributed" \ -d properties[provider]=Tune/Kochava/Branch \ -d properties[campaign][source]=Network/FB/AdWords/MoPub/Source \ -d "properties[campaign][name]=Campaign Name" \ -d "properties[campaign][content]=Organic Content Title" \ -d "properties[campaign][ad_creative]=Red Hello World Ad" \ -d "properties[campaign][ad_group]=Red Ones"
									Node:
									(type) c
									(layer)3
										Element:table
										Element:thead
										Element:tr
										Element:th
										Element:strong
											Property
										Element:th
										Element:strong
											Type
										Element:th
										Element:strong
											Description
										Element:tbody
										Element:tr
										Element:td
										Element:code
											provider
										Element:td
											String
										Element:td
											The attribution provider.
										Element:tr
										Element:td
										Element:code
											campaign[source]
										Element:td
											String
										Element:td
											Campaign source — attributed ad network
										Element:tr
										Element:td
										Element:code
											campaign[name]
										Element:td
											String
										Element:td
											The name of the attributed campaign.
										Element:tr
										Element:td
										Element:code
											campaign[content]
										Element:td
											String
										Element:td
											The content of the campaign.
										Element:tr
										Element:td
										Element:code
											campaign[ad_creative]
										Element:td
											String
										Element:td
											The ad creative name.
										Element:tr
										Element:td
										Element:code
											campaign[ad_group]
										Element:td
											String
										Element:td
											The ad group name.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Push Notification Received
									Node:
									(type) c
									(layer)3
										Element:p
											This event fires when a push notification is received by your mobile app.
									Node:
									(type) c
									(layer)3
										Element:figure
										Element:pre
										Element:code
											analytics.track("Push Notification Received", new Properties() .putValue("campaign", new Properties() .putValue("medium", "Push") .putValue("source", "Vendor Name") .putValue("name", "Referral Flow") .putValue("content", "Your friend invited you to play a match.")));
										Element:pre
										Element:code
											client.Track(&analytics.Track{ UserId: "019mr8mf4r", Event: "Push Notification Received", Properties: map[string]interface{}{ "campaign": map[string]interface{}{ "medium": "Push", "source": "Vendor Name", "name": "Referral Flow", "content": "Your friend invited you to play a match.", }, }, })
										Element:pre
										Element:code
											[[SEGAnalytics sharedAnalytics] track:@"Push Notification Received", properties: @{ @"campaign" : @{ @"medium" : @"Push", @"source" : @"Vendor Name", @"name" : @"Referral Flow", @"content" : @"Your friend invited you to play a match." } }];
										Element:pre
										Element:code
											Analytics.track("019mr8mf4r", "Push Notification Received", new Props() .put("campaign", new Props() .put("medium", "Push") .put("source", "Vendor Name") .put("name", "Referral Flow") .put("content", "Your friend invited you to play a match.")));
										Element:pre
										Element:code
											analytics.track({ userId: '019mr8mf4r', event: 'Push Notification Received', properties: { campaign: { medium: 'Push', source: 'Vendor Name', name: 'Referral Flow', content: 'Your friend invited you to play a match.' } } });
										Element:pre
										Element:code
											Analytics::track(array( "userId" => "019mr8mf4r", "event" => "Push Notification Received", "properties" => array( "campaign" => array( "medium" => "Push", "source" => "Vendor Name", "name" => "Referral Flow", "content" => "Your friend invited you to play a match." ) ) ));
										Element:pre
										Element:code
											analytics.track('019mr8mf4r', 'Push Notification Received', { 'campaign': { 'medium': 'Push', 'source': 'Vendor Name', 'name': 'Referral Flow', 'content': 'Your friend invited you to play a match.' } })
										Element:pre
										Element:code
											Analytics.track( user_id: '019mr8mf4r', event: 'Push Notification Received', properties: { campaign: { medium: 'Push', source: 'Vendor Name', name: 'Referral Flow', content: 'Your friend invited you to play a match.' } } )
										Element:pre
										Element:code
											analytics.track('Push Notification Received', { campaign: { medium: 'Push', source: 'Vendor Name', name: 'Referral Flow', content: 'Your friend invited you to play a match.' } });
										Element:pre
										Element:code
											Analytics.Client.Track("019mr8mf4r", "Push Notification Received", new Properties() { { "campaign", new Properties() { { "medium", "Push" }, { "source", "Vendor Name" }, { "name", "Referral Flow" }, { "content", "Your friend invited you to play a match." } } } });
										Element:pre
										Element:code
											Analytics.Client.Track("019mr8mf4r", "Push Notification Received", new Properties() { { "campaign", new Properties() { { "medium", "Push" }, { "source", "Vendor Name" }, { "name", "Referral Flow" }, { "content", "Your friend invited you to play a match." } } } });
										Element:pre
										Element:code
											curl
										Element:a
											https://api.segment.io/v1/track
											\ -d userId=019mr8mf4r \ -d "event=Push Notification Received" \ -d properties[campaign][medium]=Push \ -d "properties[campaign][source]=Vendor Name" \ -d "properties[campaign][name]=Referral Flow" \ -d "properties[campaign][content]=Your friend invited you to play a match."
									Node:
									(type) c
									(layer)3
										Element:table
										Element:thead
										Element:tr
										Element:th
										Element:strong
											Property
										Element:th
										Element:strong
											Type
										Element:th
										Element:strong
											Description
										Element:tbody
										Element:tr
										Element:td
										Element:code
											campaign[name]
										Element:td
											String
										Element:td
											Campaign Name.
										Element:tr
										Element:td
										Element:code
											campaign[medium]
										Element:td
											String
										Element:td
											Medium.
										Element:tr
										Element:td
										Element:code
											campaign[content]
										Element:td
											String
										Element:td
											Push notification content content
										Element:tr
										Element:td
										Element:code
											campaign[source]
										Element:td
											String
										Element:td
											Designates the push provider. (Optional)
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Push Notification Tapped
									Node:
									(type) c
									(layer)3
										Element:p
											This event fires when a user taps on a push notification associated with your app.
									Node:
									(type) c
									(layer)3
										Element:figure
										Element:pre
										Element:code
											analytics.track("Push Notification Tapped", new Properties() .putValue("action", "Accept") .putValue("campaign", new Properties() .putValue("medium", "Push") .putValue("source", "Vendor Name") .putValue("name", "Referral Flow") .putValue("content", "Your friend invited you to play a match.")));
										Element:pre
										Element:code
											client.Track(&analytics.Track{ UserId: "019mr8mf4r", Event: "Push Notification Tapped", Properties: map[string]interface{}{ "action": "Accept", "campaign": map[string]interface{}{ "medium": "Push", "source": "Vendor Name", "name": "Referral Flow", "content": "Your friend invited you to play a match.", }, }, })
										Element:pre
										Element:code
											[[SEGAnalytics sharedAnalytics] track:@"Push Notification Tapped", properties: @{ @"action" : @"Accept", @"campaign" : @{ @"medium" : @"Push", @"source" : @"Vendor Name", @"name" : @"Referral Flow", @"content" : @"Your friend invited you to play a match." } }];
										Element:pre
										Element:code
											Analytics.track("019mr8mf4r", "Push Notification Tapped", new Props() .put("action", "Accept") .put("campaign", new Props() .put("medium", "Push") .put("source", "Vendor Name") .put("name", "Referral Flow") .put("content", "Your friend invited you to play a match.")));
										Element:pre
										Element:code
											analytics.track({ userId: '019mr8mf4r', event: 'Push Notification Tapped', properties: { action: 'Accept', campaign: { medium: 'Push', source: 'Vendor Name', name: 'Referral Flow', content: 'Your friend invited you to play a match.' } } });
										Element:pre
										Element:code
											Analytics::track(array( "userId" => "019mr8mf4r", "event" => "Push Notification Tapped", "properties" => array( "action" => "Accept", "campaign" => array( "medium" => "Push", "source" => "Vendor Name", "name" => "Referral Flow", "content" => "Your friend invited you to play a match." ) ) ));
										Element:pre
										Element:code
											analytics.track('019mr8mf4r', 'Push Notification Tapped', { 'action': 'Accept', 'campaign': { 'medium': 'Push', 'source': 'Vendor Name', 'name': 'Referral Flow', 'content': 'Your friend invited you to play a match.' } })
										Element:pre
										Element:code
											Analytics.track( user_id: '019mr8mf4r', event: 'Push Notification Tapped', properties: { action: 'Accept', campaign: { medium: 'Push', source: 'Vendor Name', name: 'Referral Flow', content: 'Your friend invited you to play a match.' } } )
										Element:pre
										Element:code
											analytics.track('Push Notification Tapped', { action: 'Accept', campaign: { medium: 'Push', source: 'Vendor Name', name: 'Referral Flow', content: 'Your friend invited you to play a match.' } });
										Element:pre
										Element:code
											Analytics.Client.Track("019mr8mf4r", "Push Notification Tapped", new Properties() { { "action", "Accept" }, { "campaign", new Properties() { { "medium", "Push" }, { "source", "Vendor Name" }, { "name", "Referral Flow" }, { "content", "Your friend invited you to play a match." } } } });
										Element:pre
										Element:code
											Analytics.Client.Track("019mr8mf4r", "Push Notification Tapped", new Properties() { { "action", "Accept" }, { "campaign", new Properties() { { "medium", "Push" }, { "source", "Vendor Name" }, { "name", "Referral Flow" }, { "content", "Your friend invited you to play a match." } } } });
										Element:pre
										Element:code
											curl
										Element:a
											https://api.segment.io/v1/track
											\ -d userId=019mr8mf4r \ -d "event=Push Notification Tapped" \ -d properties[action]=Accept \ -d properties[campaign][medium]=Push \ -d "properties[campaign][source]=Vendor Name" \ -d "properties[campaign][name]=Referral Flow" \ -d "properties[campaign][content]=Your friend invited you to play a match."
									Node:
									(type) c
									(layer)3
										Element:table
										Element:thead
										Element:tr
										Element:th
										Element:strong
											Property
										Element:th
										Element:strong
											Type
										Element:th
										Element:strong
											Description
										Element:tbody
										Element:tr
										Element:td
										Element:code
											action
										Element:td
											String
										Element:td
											If this notification is “
										Element:a
											actionable
											“, the custom action tapped.
										Element:strong
											Default:
											“Open”
										Element:tr
										Element:td
										Element:code
											campaign[name]
										Element:td
											String
										Element:td
											Campaign Name.
										Element:tr
										Element:td
										Element:code
											campaign[medium]
										Element:td
											String
										Element:td
											Medium.
										Element:tr
										Element:td
										Element:code
											campaign[content]
										Element:td
											String
										Element:td
											Push notification content content
										Element:tr
										Element:td
										Element:code
											campaign[source]
										Element:td
											String
										Element:td
											Designates the push provider. (Optional)
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Push Notification Bounced
									Node:
									(type) c
									(layer)3
										Element:p
											This event fires when a push notification from a provider bounces. If your push notification provider forwards push lifecycle events to Segment, they should include this event in their suite.
									Node:
									(type) c
									(layer)3
										Element:figure
										Element:pre
										Element:code
											analytics.track("Push Notification Bounced", new Properties() .putValue("action", "Accept") .putValue("campaign", new Properties() .putValue("medium", "Push") .putValue("source", "Vendor Name") .putValue("name", "Referral Flow") .putValue("content", "Your friend invited you to play a match.")));
										Element:pre
										Element:code
											client.Track(&analytics.Track{ UserId: "019mr8mf4r", Event: "Push Notification Bounced", Properties: map[string]interface{}{ "action": "Accept", "campaign": map[string]interface{}{ "medium": "Push", "source": "Vendor Name", "name": "Referral Flow", "content": "Your friend invited you to play a match.", }, }, })
										Element:pre
										Element:code
											[[SEGAnalytics sharedAnalytics] track:@"Push Notification Bounced", properties: @{ @"action" : @"Accept", @"campaign" : @{ @"medium" : @"Push", @"source" : @"Vendor Name", @"name" : @"Referral Flow", @"content" : @"Your friend invited you to play a match." } }];
										Element:pre
										Element:code
											Analytics.track("019mr8mf4r", "Push Notification Bounced", new Props() .put("action", "Accept") .put("campaign", new Props() .put("medium", "Push") .put("source", "Vendor Name") .put("name", "Referral Flow") .put("content", "Your friend invited you to play a match.")));
										Element:pre
										Element:code
											analytics.track({ userId: '019mr8mf4r', event: 'Push Notification Bounced', properties: { action: 'Accept', campaign: { medium: 'Push', source: 'Vendor Name', name: 'Referral Flow', content: 'Your friend invited you to play a match.' } } });
										Element:pre
										Element:code
											Analytics::track(array( "userId" => "019mr8mf4r", "event" => "Push Notification Bounced", "properties" => array( "action" => "Accept", "campaign" => array( "medium" => "Push", "source" => "Vendor Name", "name" => "Referral Flow", "content" => "Your friend invited you to play a match." ) ) ));
										Element:pre
										Element:code
											analytics.track('019mr8mf4r', 'Push Notification Bounced', { 'action': 'Accept', 'campaign': { 'medium': 'Push', 'source': 'Vendor Name', 'name': 'Referral Flow', 'content': 'Your friend invited you to play a match.' } })
										Element:pre
										Element:code
											Analytics.track( user_id: '019mr8mf4r', event: 'Push Notification Bounced', properties: { action: 'Accept', campaign: { medium: 'Push', source: 'Vendor Name', name: 'Referral Flow', content: 'Your friend invited you to play a match.' } } )
										Element:pre
										Element:code
											analytics.track('Push Notification Bounced', { action: 'Accept', campaign: { medium: 'Push', source: 'Vendor Name', name: 'Referral Flow', content: 'Your friend invited you to play a match.' } });
										Element:pre
										Element:code
											Analytics.Client.Track("019mr8mf4r", "Push Notification Bounced", new Properties() { { "action", "Accept" }, { "campaign", new Properties() { { "medium", "Push" }, { "source", "Vendor Name" }, { "name", "Referral Flow" }, { "content", "Your friend invited you to play a match." } } } });
										Element:pre
										Element:code
											Analytics.Client.Track("019mr8mf4r", "Push Notification Bounced", new Properties() { { "action", "Accept" }, { "campaign", new Properties() { { "medium", "Push" }, { "source", "Vendor Name" }, { "name", "Referral Flow" }, { "content", "Your friend invited you to play a match." } } } });
										Element:pre
										Element:code
											curl
										Element:a
											https://api.segment.io/v1/track
											\ -d userId=019mr8mf4r \ -d "event=Push Notification Bounced" \ -d properties[action]=Accept \ -d properties[campaign][medium]=Push \ -d "properties[campaign][source]=Vendor Name" \ -d "properties[campaign][name]=Referral Flow" \ -d "properties[campaign][content]=Your friend invited you to play a match."
									Node:
									(type) c
									(layer)3
										Element:table
										Element:thead
										Element:tr
										Element:th
										Element:strong
											Property
										Element:th
										Element:strong
											Type
										Element:th
										Element:strong
											Description
										Element:tbody
										Element:tr
										Element:td
										Element:code
											action
										Element:td
											String
										Element:td
											If this notification is “
										Element:a
											actionable
											“, the custom action tapped.
										Element:strong
											Default:
											“Open”
										Element:tr
										Element:td
										Element:code
											campaign[name]
										Element:td
											String
										Element:td
											Campaign Name.
										Element:tr
										Element:td
										Element:code
											campaign[medium]
										Element:td
											String
										Element:td
											Medium.
										Element:tr
										Element:td
										Element:code
											campaign[content]
										Element:td
											String
										Element:td
											Push notification content content
										Element:tr
										Element:td
										Element:code
											campaign[source]
										Element:td
											String
										Element:td
											Designates the push provider. (Optional)
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Deep Link Clicked
									Node:
									(type) c
									(layer)3
										Element:p
											This event may be provided by deep link providers or an internal redirect service if you use one in order to provide a waypoint funnel step between your content or advertisement and the resulting app open.
									Node:
									(type) c
									(layer)3
										Element:figure
										Element:pre
										Element:code
											analytics.track("Deep Link Clicked", new Properties() .putValue("provider", "Branch Metrics") .putValue("url", "brnch.io/1234"));
										Element:pre
										Element:code
											client.Track(&analytics.Track{ UserId: "019mr8mf4r", Event: "Deep Link Clicked", Properties: map[string]interface{}{ "provider": "Branch Metrics", "url": "brnch.io/1234", }, })
										Element:pre
										Element:code
											[[SEGAnalytics sharedAnalytics] track:@"Deep Link Clicked", properties: @{ @"provider" : @"Branch Metrics", @"url" : @"brnch.io/1234" }];
										Element:pre
										Element:code
											Analytics.track("019mr8mf4r", "Deep Link Clicked", new Props() .put("provider", "Branch Metrics") .put("url", "brnch.io/1234"));
										Element:pre
										Element:code
											analytics.track({ userId: '019mr8mf4r', event: 'Deep Link Clicked', properties: { provider: 'Branch Metrics', url: 'brnch.io/1234' } });
										Element:pre
										Element:code
											Analytics::track(array( "userId" => "019mr8mf4r", "event" => "Deep Link Clicked", "properties" => array( "provider" => "Branch Metrics", "url" => "brnch.io/1234" ) ));
										Element:pre
										Element:code
											analytics.track('019mr8mf4r', 'Deep Link Clicked', { 'provider': 'Branch Metrics', 'url': 'brnch.io/1234' })
										Element:pre
										Element:code
											Analytics.track( user_id: '019mr8mf4r', event: 'Deep Link Clicked', properties: { provider: 'Branch Metrics', url: 'brnch.io/1234' } )
										Element:pre
										Element:code
											analytics.track('Deep Link Clicked', { provider: 'Branch Metrics', url: 'brnch.io/1234' });
										Element:pre
										Element:code
											Analytics.Client.Track("019mr8mf4r", "Deep Link Clicked", new Properties() { { "provider", "Branch Metrics" }, { "url", "brnch.io/1234" } });
										Element:pre
										Element:code
											Analytics.Client.Track("019mr8mf4r", "Deep Link Clicked", new Properties() { { "provider", "Branch Metrics" }, { "url", "brnch.io/1234" } });
										Element:pre
										Element:code
											curl
										Element:a
											https://api.segment.io/v1/track
											\ -d userId=019mr8mf4r \ -d "event=Deep Link Clicked" \ -d "properties[provider]=Branch Metrics" \ -d properties[url]=brnch.io/1234
									Node:
									(type) c
									(layer)3
										Element:table
										Element:thead
										Element:tr
										Element:th
										Element:strong
											Property
										Element:th
										Element:strong
											Type
										Element:th
										Element:strong
											Description
										Element:tbody
										Element:tr
										Element:td
										Element:code
											provider
										Element:td
											String
										Element:td
											The deep link provider.
										Element:tr
										Element:td
										Element:code
											url
										Element:td
											String
										Element:td
											The deep link URL clicked.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Deep Link Opened
									Node:
									(type) c
									(layer)3
										Element:p
											When your application is opened via a referring link, Segment or your packaged deep link partner will fire this event on your behalf. If the deep link has additional data associated with it, either passed through the third party service or as
										Element:code
											annotations
											in
										Element:code
											launchOption
											, you may want to include those values as properties here as well. This event is fired
										Element:em
											in addition
											to the associated
										Element:code
											App Opened
											event.
									Node:
									(type) c
									(layer)3
										Element:figure
										Element:pre
										Element:code
											analytics.track("Deep Link Opened", new Properties() .putValue("provider", "Branch Metrics") .putValue("url", "app://landing"));
										Element:pre
										Element:code
											client.Track(&analytics.Track{ UserId: "019mr8mf4r", Event: "Deep Link Opened", Properties: map[string]interface{}{ "provider": "Branch Metrics", "url": "app://landing", }, })
										Element:pre
										Element:code
											[[SEGAnalytics sharedAnalytics] track:@"Deep Link Opened", properties: @{ @"provider" : @"Branch Metrics", @"url" : @"app://landing" }];
										Element:pre
										Element:code
											Analytics.track("019mr8mf4r", "Deep Link Opened", new Props() .put("provider", "Branch Metrics") .put("url", "app://landing"));
										Element:pre
										Element:code
											analytics.track({ userId: '019mr8mf4r', event: 'Deep Link Opened', properties: { provider: 'Branch Metrics', url: 'app://landing' } });
										Element:pre
										Element:code
											Analytics::track(array( "userId" => "019mr8mf4r", "event" => "Deep Link Opened", "properties" => array( "provider" => "Branch Metrics", "url" => "app://landing" ) ));
										Element:pre
										Element:code
											analytics.track('019mr8mf4r', 'Deep Link Opened', { 'provider': 'Branch Metrics', 'url': 'app://landing' })
										Element:pre
										Element:code
											Analytics.track( user_id: '019mr8mf4r', event: 'Deep Link Opened', properties: { provider: 'Branch Metrics', url: 'app://landing' } )
										Element:pre
										Element:code
											analytics.track('Deep Link Opened', { provider: 'Branch Metrics', url: 'app://landing' });
										Element:pre
										Element:code
											Analytics.Client.Track("019mr8mf4r", "Deep Link Opened", new Properties() { { "provider", "Branch Metrics" }, { "url", "app://landing" } });
										Element:pre
										Element:code
											Analytics.Client.Track("019mr8mf4r", "Deep Link Opened", new Properties() { { "provider", "Branch Metrics" }, { "url", "app://landing" } });
										Element:pre
										Element:code
											curl
										Element:a
											https://api.segment.io/v1/track
											\ -d userId=019mr8mf4r \ -d "event=Deep Link Opened" \ -d "properties[provider]=Branch Metrics" \ -d properties[url]=app://landing
									Node:
									(type) c
									(layer)3
										Element:table
										Element:thead
										Element:tr
										Element:th
										Element:strong
											Property
										Element:th
										Element:strong
											Type
										Element:th
										Element:strong
											Description
										Element:tbody
										Element:tr
										Element:td
										Element:code
											provider
										Element:td
											String
										Element:td
											The deep link provider.
										Element:tr
										Element:td
										Element:code
											url
										Element:td
											String
										Element:td
											The App URL opened.
									Node:
									(type) c
									(layer)3
										Element:hr
									Node:
									(type) c
									(layer)3
										Element:p
											If you have any questions or see anywhere we can improve our documentation, please
										Element:a
											let us know
											or kick off a conversation in the
										Element:a
											Segment Community
											!
									Node:
									(type) c
									(layer)3
										Element:footer
										Element:span
										Element:span
											Was this document helpful?
										Element:span
										Element:label
										Element:span
											Yes
										Element:label
										Element:span
											No
									Node:
									(type) c
									(layer)3
										Element:i
			Node:
			(type) h1
			(layer)1
				Element:h1
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:a
					Overview
				Element:li
				Element:a
					Identify
				Element:li
				Element:a
					Track
				Element:li
				Element:a
					Page
				Element:li
				Element:a
					Screen
				Element:li
				Element:a
					Group
				Element:li
				Element:a
					Alias
				Element:li
				Element:a
					Common Fields
				Element:li
				Element:a
					Semantic Events
				Element:li
				Element:a
					Ecommerce
				Element:li
				Element:a
					Mobile
