Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					Analytics for Node.js
			Node:
			(type) c
			(layer)1
				Element:p
					Our Node.js library lets you record analytics data from your node code. The requests hit our servers, and then we route your data to any analytics service you enable on your integrations page.
			Node:
			(type) c
			(layer)1
				Element:p
					This library is open-source, so you can
				Element:a
					check it out on Github
					.
			Node:
			(type) c
			(layer)1
				Element:p
					All of our server-side libraries are built for high-performance, so you can use them in your web server controller code. This library uses an internal queue to make
				Element:code
					identify
					and
				Element:code
					track
					calls non-blocking and fast. It also batches messages and flushes asynchronously to our servers.
			Node:
			(type) c
			(layer)1
				Element:p
					Want to stay updated on releases? Subscribe to the
				Element:a
					release feed
					.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Getting Started
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Install the Module
									Node:
									(type) c
									(layer)3
										Element:p
											Run:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											npm install --save analytics-node
									Node:
									(type) c
									(layer)3
										Element:p
											This will add our Node library module to your
										Element:code
											package.json
											. The module exposes an
										Element:code
											Analytics
											constructor, which you need to initialize with your Segment source’s
										Element:strong
											Write Key
											, like so:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											var Analytics = require('analytics-node'); var analytics = new Analytics('YOUR_WRITE_KEY');
									Node:
									(type) c
									(layer)3
										Element:p
											Of course, you’ll want to replace
										Element:code
											YOUR_WRITE_KEY
											with your actual
										Element:strong
											Write Key
											which you can find in Segment under your source settings.
									Node:
									(type) c
									(layer)3
										Element:p
											This will create an instance of
										Element:code
											Analytics
											that you can use to send data to Segment for your project. The default initialization settings are production-ready and queue 20 messages before sending any requests. In development you might want to use
										Element:a
											development settings
											.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Identify
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								identify
								lets you tie a user to their actions and record traits about them. It includes a unique User ID and any optional traits you know about them.
						Node:
						(type) c
						(layer)2
							Element:p
								We recommend calling
							Element:code
								identify
								a single time when the user’s account is first created, and only identifying again later when their traits change.
						Node:
						(type) c
						(layer)2
							Element:p
								Example
							Element:code
								identify
								call:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								analytics.identify({ userId: '019mr8mf4r', traits: { name: 'Michael Bolton', email: 'mbolton@initech.com', plan: 'Enterprise', friends: 42 } });
						Node:
						(type) c
						(layer)2
							Element:p
								This call is identifying Michael by his unique User ID (the one you know him by in your database) and labeling him with
							Element:code
								name
								,
							Element:code
								email
								,
							Element:code
								plan
								and
							Element:code
								friends
								traits.
						Node:
						(type) c
						(layer)2
							Element:p
								The
							Element:code
								identify
								call has the following fields:
						Node:
						(type) c
						(layer)2
							Element:table
							Element:tr
							Element:td
							Element:code
								userId
								_String
							Element:td
								The ID for this user in your database.
							Element:tr
							Element:td
							Element:code
								traits
							Element:em
								Object, optional
							Element:td
								A dictionary of
							Element:a
								traits
								you know about the user. Things like:
							Element:code
								email
								,
							Element:code
								name
								or
							Element:code
								friends
								.
							Element:tr
							Element:td
							Element:code
								timestamp
							Element:em
								Date, optional
							Element:td
								A Javascript date object representing when the identify took place. If the identify just happened, leave it out and we’ll use the server’s time. If you’re importing data from the past make sure you to send a
							Element:code
								timestamp
								.
							Element:tr
							Element:td
							Element:code
								context
							Element:em
								Object, optional
							Element:td
								A dictionary of extra
							Element:a
								context
								to attach to the call.
							Element:em
								Note:
							Element:code
								context
								differs from
							Element:code
								traits
								because it is not attributes of the user itself.
							Element:tr
							Element:td
							Element:code
								anonymousId
							Element:em
								String, optional
							Element:td
								An ID to associated with the user when you don’t know who they are (eg.,
							Element:a
								the anonymousId generated by
								)
							Element:code
								analytics.js
						Node:
						(type) c
						(layer)2
							Element:p
								Find details on the
							Element:strong
								identify method payload
								in our
							Element:a
								Spec
								.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Track
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								track
								lets you record the actions your users perform. Every action triggers what we call an “event”, which can also have associated properties.
						Node:
						(type) c
						(layer)2
							Element:p
								You’ll want to track events that are indicators of success for your site, like
							Element:strong
								Signed Up
								,
							Element:strong
								Item Purchased
								or
							Element:strong
								Article Bookmarked
								.
						Node:
						(type) c
						(layer)2
							Element:p
								To get started, we recommend tracking just a few important events. You can always add more later!
						Node:
						(type) c
						(layer)2
							Element:p
								Example
							Element:code
								track
								call:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								analytics.track({ userId: '019mr8mf4r', event: 'Item Purchased', properties: { revenue: 39.95, shippingMethod: '2-day' } });
						Node:
						(type) c
						(layer)2
							Element:p
								This example
							Element:code
								track
								call tells us that your user just triggered the
							Element:strong
								Item Purchased
								event with a revenue of $39.95 and chose your hypothetical ‘2-day’ shipping.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								track
								event properties can be anything you want to record. In this case, revenue and shipping method.
						Node:
						(type) c
						(layer)2
							Element:p
								The
							Element:code
								track
								call has the following fields:
						Node:
						(type) c
						(layer)2
							Element:table
							Element:tr
							Element:td
							Element:code
								userId
								_String
							Element:td
								The ID for this user in your database.
							Element:tr
							Element:td
							Element:code
								event
							Element:em
								String
							Element:td
								The name of the event you’re tracking. We recommend human-readable names like
							Element:code
								Song Played
								or
							Element:code
								Status Updated
								.
							Element:tr
							Element:td
							Element:code
								properties
							Element:em
								Object, optional
							Element:td
								A dictionary of properties for the event. If the event was
							Element:code
								Product Added
								, it might have properties like
							Element:code
								price
								or
							Element:code
								product
								.
							Element:tr
							Element:td
							Element:code
								timestamp
							Element:em
								Date, optional
							Element:td
								A Javascript date object representing when the track took place. If the track just happened, leave it out and we’ll use the server’s time. If you’re importing data from the past make sure you to send a
							Element:code
								timestamp
								.
							Element:tr
							Element:td
							Element:code
								context
							Element:em
								Object, optional
							Element:td
								A dictionary of extra
							Element:a
								context
								to attach to the call.
							Element:em
								Note:
							Element:code
								context
								differs from
							Element:code
								traits
								because it is not attributes of the user itself.
							Element:tr
							Element:td
							Element:code
								anonymousId
							Element:em
								String, optional
							Element:td
								An ID to associated with the user when you don’t know who they are (eg.,
							Element:a
								the anonymousId generated by
								)
							Element:code
								analytics.js
						Node:
						(type) c
						(layer)2
							Element:p
								Find details on
							Element:strong
								best practices in event naming
								as well as the
							Element:strong
								in our
							Element:code
								track
								method payload
							Element:a
								Spec
								.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Page
						Node:
						(type) c
						(layer)2
							Element:p
								The
							Element:a
								method lets you record page views on your website, along with optional extra information about the page being viewed.
							Element:code
								page
						Node:
						(type) c
						(layer)2
							Element:p
								If you’re using our client-side setup in combination with the Node.js library, page calls are
							Element:strong
								already tracked for you
								by default. However, if you want to record your own page views manually and aren’t using our client-side library, read on!
						Node:
						(type) c
						(layer)2
							Element:p
								Example
							Element:code
								page
								call:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								analytics.page({ userId: '019mr8mf4r', category: 'Docs', name: 'Node.js Library', properties: { url: 'https://segment.com/docs/libraries/node', path: '/docs/libraries/node/', title: 'Node.js Library - Segment', referrer: 'https://github.com/segmentio/analytics-node' } });
						Node:
						(type) c
						(layer)2
							Element:p
								The
							Element:code
								page
								call has the following fields:
						Node:
						(type) c
						(layer)2
							Element:table
							Element:tr
							Element:td
							Element:code
								userId
								_String
							Element:td
								The ID for this user in your database.
							Element:tr
							Element:td
							Element:code
								category
							Element:em
								String, optional
							Element:td
								The category of the page. Useful for things like ecommerce where many pages often live under a larger category.
							Element:tr
							Element:td
							Element:code
								name
							Element:em
								String, optional
							Element:td
								The name of the of the page, for example
							Element:strong
								Signup
								or
							Element:strong
								Home
								.
							Element:tr
							Element:td
							Element:code
								properties
							Element:em
								Object, optional
							Element:td
								A dictionary of properties of the page. A few properties specially recognized and automatically translated:
							Element:code
								url
								,
							Element:code
								title
								,
							Element:code
								referrer
								and
							Element:code
								path
								, but you can add your own too!
							Element:tr
							Element:td
							Element:code
								timestamp
							Element:em
								Date, optional
							Element:td
								A Javascript date object representing when the track took place. If the track just happened, leave it out and we’ll use the server’s time. If you’re importing data from the past make sure you to send a
							Element:code
								timestamp
								.
							Element:tr
							Element:td
							Element:code
								context
							Element:em
								Object, optional
							Element:td
								A dictionary of extra
							Element:a
								context
								to attach to the call.
							Element:em
								Note:
							Element:code
								context
								differs from
							Element:code
								traits
								because it is not attributes of the user itself.
							Element:tr
							Element:td
							Element:code
								anonymousId
							Element:em
								String, optional
							Element:td
								An ID to associated with the user when you don’t know who they are (eg.,
							Element:a
								the anonymousId generated by
								)
							Element:code
								analytics.js
						Node:
						(type) c
						(layer)2
							Element:p
								Find details on the
							Element:strong
								in our
							Element:code
								page
								payload
							Element:a
								Spec
								.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Group
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								group
								lets you associate an
							Element:a
								identified user
								with a group. A group could be a company, organization, account, project or team! It also lets you record custom traits about the group, like industry or number of employees.
						Node:
						(type) c
						(layer)2
							Element:p
								This is useful for tools like
							Element:a
								Intercom
								,
							Element:a
								Preact
								and
							Element:a
								Totango
								, as it ties the user to a
							Element:strong
								group
								of other users.
						Node:
						(type) c
						(layer)2
							Element:p
								Example
							Element:code
								group
								call:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								analytics.group({ userId: '019mr8mf4r', groupId: '56', traits: { name: 'Initech', description: 'Accounting Software' } });
						Node:
						(type) c
						(layer)2
							Element:p
								The
							Element:code
								group
								call has the following fields:
						Node:
						(type) c
						(layer)2
							Element:table
							Element:tr
							Element:td
							Element:code
								userId
								_string
							Element:td
								The ID for the user that is a part of the group.
							Element:tr
							Element:td
							Element:code
								groupId
								_string
							Element:td
								The ID of the group.
							Element:tr
							Element:td
							Element:code
								traits
							Element:em
								dict, optional
							Element:td
								A dict of traits you know about the group. For a company, they might be things like
							Element:code
								name
								,
							Element:code
								address
								, or
							Element:code
								phone
								.
							Element:tr
							Element:td
							Element:code
								context
							Element:em
								dict, optional
							Element:td
								A dict containing any context about the request. To see the full reference of supported keys, check them out in the
							Element:a
								context reference
							Element:tr
							Element:td
							Element:code
								timestamp
							Element:em
								datetime, optional
							Element:td
								A
							Element:code
								datetime
								object representing when the group took place. If the group just happened, leave it out and we’ll use the server’s time. If you’re importing data from the past make sure you send
							Element:code
								timestamp
								.
							Element:tr
							Element:td
							Element:code
								anonymousId
							Element:em
								String, optional
							Element:td
								An ID to associated with the user when you don’t know who they are (eg.,
							Element:a
								the anonymousId generated by
								)
							Element:code
								analytics.js
							Element:tr
							Element:td
							Element:code
								integrations
							Element:em
								dict, optional
							Element:td
								A dictionary of integrations to enable or disable
						Node:
						(type) c
						(layer)2
							Element:p
								Find more details about
							Element:code
								group
								, including the
							Element:strong
								, in our
							Element:code
								group
								payload
							Element:a
								Spec
								.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Alias
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								alias
								is how you associate one identity with another. This is an advanced method, but it is required to manage user identities successfully in
							Element:em
								some
								of our integrations.
						Node:
						(type) c
						(layer)2
							Element:p
								In
							Element:a
								Mixpanel
								it’s used to associate an anonymous user with an identified user once they sign up. For
							Element:a
								KISSmetrics
								, if your user switches IDs, you can use ‘alias’ to rename the ‘userId’.
						Node:
						(type) c
						(layer)2
							Element:p
								Example
							Element:code
								alias
								call:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								analytics.alias({ previousId: 'old_id', userId: 'new_id' });
						Node:
						(type) c
						(layer)2
							Element:p
								The
							Element:code
								alias
								call has the following fields:
						Node:
						(type) c
						(layer)2
							Element:table
							Element:tr
							Element:td
							Element:code
								userId
							Element:em
								String
							Element:td
								The ID for this user in your database.
							Element:tr
							Element:td
							Element:code
								previousId
							Element:em
								String
							Element:td
								The previous ID to alias from.
						Node:
						(type) c
						(layer)2
							Element:p
								Here’s a full example of how we might use the
							Element:code
								alias
								call:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								// the anonymous user does actions ... analytics.track({ userId: 'anonymous_user', event: 'Anonymous Event' }) // the anonymous user signs up and is aliased analytics.alias({ previousId: 'anonymous_user', userId: 'identified@gmail.com' }) // the identified user is identified analytics.identify({ userId: 'identified@gmail.com', traits: { plan: 'Free' } }) // the identified user does actions ... analytics.track({ userId: 'identified@gmail.com', event: 'Identified Action' })
						Node:
						(type) c
						(layer)2
							Element:p
								For more details about
							Element:code
								alias
								, including the
							Element:strong
								, check out our
							Element:code
								alias
								call payload
							Element:a
								Spec
								.
						Node:
						(type) c
						(layer)2
							Element:hr
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Configuration
						Node:
						(type) c
						(layer)2
							Element:p
								The second argument to the
							Element:code
								Analytics
								constructor is an optional dictionary of settings to configure the module.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								var analytics = new Analytics('YOUR_WRITE_KEY', { flushAt: 20, flushAfter: 10000 });
						Node:
						(type) c
						(layer)2
							Element:table
							Element:tr
							Element:td
							Element:code
								flushAt
							Element:em
								Number
							Element:td
								The number of messages to enqueue before flushing.
							Element:tr
							Element:td
							Element:code
								flushAfter
							Element:em
								Number
							Element:td
								The number of milliseconds to wait before flushing the queue automatically.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Development
						Node:
						(type) c
						(layer)2
							Element:p
								You can use this initialization during development to make the library flush every time a message is submitted, so that you can be sure your calls are working properly before pushing to production.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								var analytics = new Analytics('YOUR_WRITE_KEY', { flushAt: 1 });
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Selecting Integrations
						Node:
						(type) c
						(layer)2
							Element:p
								The
							Element:code
								alias
								,
							Element:code
								group
								,
							Element:code
								identify
								,
							Element:code
								page
								and
							Element:code
								track
								calls can all be passed an object of
							Element:code
								integrations
								that lets you turn certain integrations on or off. By default all integrations are enabled.
						Node:
						(type) c
						(layer)2
							Element:p
								Here’s an example with the
							Element:code
								integrations
								object shown:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								analytics.track({ event: 'Membership Upgraded', userId: '97234974', integrations: { 'All': false, 'Vero': true, 'Google Analytics': false } })
						Node:
						(type) c
						(layer)2
							Element:p
								In this case, we’re specifying that we want this
							Element:code
								track
								to only go to Vero.
							Element:code
								All: false
								says that no integration should be enabled unless otherwise specified.
							Element:code
								Vero: true
								turns on Vero, etc.
						Node:
						(type) c
						(layer)2
							Element:p
								Integration flags are
							Element:strong
								case sensitive
								and match
							Element:a
								the integration’s name in the docs
								(i.e. “AdLearn Open Platform”, “awe.sm”, “MailChimp”, etc.).
						Node:
						(type) c
						(layer)2
							Element:p
							Element:strong
								Note:
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:p
								Available at the business level, filtering track calls can be done right from the Segment UI on your source schema page. We recommend using the UI if possible since it’s a much simpler way of managing your filters and can be updated with no code changes on your side.
							Element:li
							Element:p
								If you are on a grandfathered plan, events sent server-side that are filtered through the Segment dashboard will still count towards your API usage.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Historical Import
						Node:
						(type) c
						(layer)2
							Element:p
								You can import historical data by adding the
							Element:code
								timestamp
								argument to any of your method calls. This can be helpful if you’ve just switched to Segment.
						Node:
						(type) c
						(layer)2
							Element:p
								Historical imports can only be done into integrations that can accept historical timestamp’ed data. Most analytics tools like Mixpanel, Amplitude, Kissmetrics, etc. can handle that type of data just fine. One common integration that does not accept historical data is Google Analytics since their API cannot accept historical data.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:strong
								Note:
								If you’re tracking things that are happening right now, leave out the
							Element:code
								timestamp
								and our servers will timestamp the requests for you.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Batching
						Node:
						(type) c
						(layer)2
							Element:p
								Our libraries are built to support high performance environments. That means it is safe to use our Node library on a web server that’s serving hundreds of requests per second.
						Node:
						(type) c
						(layer)2
							Element:p
								Every method you call
							Element:strong
								does not
								result in an HTTP request, but is queued in memory instead. Messages are then flushed in batch in the background, which allows for much faster operation.
						Node:
						(type) c
						(layer)2
							Element:p
								By default, our library will flush:
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
								The very first time it gets a message.
							Element:li
								Every 20 messages (controlled by
							Element:code
								options.flushAt
								).
							Element:li
								If 10 seconds has passed since the last flush (controlled by
							Element:code
								options.flushAfter
								)
						Node:
						(type) c
						(layer)2
							Element:p
								There is a maximum of
							Element:code
								500kb
								per batch request and
							Element:code
								15kb
								per call.
						Node:
						(type) c
						(layer)2
							Element:p
								If you don’t want to batch messages, you can turn batching off by setting the
							Element:code
								flushAt
								option to
							Element:code
								1
								, like so:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								var analytics = new Analytics('YOUR_WRITE_KEY', { flushAt: 1 });
						Node:
						(type) c
						(layer)2
							Element:p
								Batching means that your message might not get sent right away. But every method call takes an optional
							Element:code
								callback
								, which you can use to know when a particular message is flushed from the queue, like so:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								analytics.track({ userId: '019mr8mf4r', event: 'Ultimate Played' }, function(err, batch){ if (err) // There was an error flushing your message... // Your message was successfully flushed! });
						Node:
						(type) c
						(layer)2
							Element:p
								You can also flush on demand. For example, at the end of your program, you need to flush to make sure that nothing is left in the queue. To do that, call the
							Element:code
								flush
								method:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								analytics.flush(function(err, batch){ console.log('Flushed, and now this program can exit!'); });
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Multiple Clients
						Node:
						(type) c
						(layer)2
							Element:p
								Different parts of your application may require different types of batching, or even sending to multiple Segment sources. In that case, you can initialize multiple instances of
							Element:code
								Analytics
								with different settings:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								var Analytics = require('analytics-node'); var marketingAnalytics = new Analytics('MARKETING_WRITE_KEY'); var appAnalytics = new Analytics('APP_WRITE_KEY');
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Troubleshooting
						Node:
						(type) c
						(layer)2
							Element:p
								If you’re having trouble we have a few tips that help common problems.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											No events in my debugger
									Node:
									(type) c
									(layer)3
										Element:ol
										Element:li
										Element:p
											Double check that you’ve followed all the steps in the
										Element:a
											Quickstart
											.
										Element:li
										Element:p
											Make sure that you’re calling one of our API methods once the library is successfully installed—
										Element:a
											,
										Element:code
											identify
										Element:a
											, etc.
										Element:code
											track
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											No events in my end tools
									Node:
									(type) c
									(layer)3
										Element:ol
										Element:li
										Element:p
											Double check your credentials for that integration.
										Element:li
										Element:p
											Make sure that the integration you are troubleshooting can accept server-side API calls. Compatibility is shown on the
										Element:a
											integration docs
											pages and on the sheets on your Segment source Integrations page.
										Element:li
										Element:p
											Check out the
										Element:a
											integration’s documentation
											to see if there are other requirements for using the method and integration you’re trying to get working.
									Node:
									(type) c
									(layer)3
										Element:hr
									Node:
									(type) c
									(layer)3
										Element:p
											If you have any questions or see anywhere we can improve our documentation, please
										Element:a
											let us know
											or kick off a conversation in the
										Element:a
											Segment Community
											!
									Node:
									(type) c
									(layer)3
										Element:footer
										Element:span
										Element:span
											Was this document helpful?
										Element:span
										Element:label
										Element:span
											Yes
										Element:label
										Element:span
											No
									Node:
									(type) c
									(layer)3
										Element:i
			Node:
			(type) h1
			(layer)1
				Element:h1
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:a
					Overview
				Element:li
				Element:a
					ActiveCampaign
				Element:li
				Element:a
					AMP
				Element:li
				Element:a
					analytics.js
				Element:li
				Element:a
					Android
				Element:li
				Element:a
					Android Wear
				Element:li
				Element:a
					Clojure
				Element:li
				Element:a
					Customer.io
				Element:li
				Element:a
					Drip
				Element:li
				Element:a
					Facebook Ads
				Element:li
				Element:a
					Facebook Lead Ads
				Element:li
				Element:a
					Go
				Element:li
				Element:a
					Google AdWords
				Element:li
				Element:a
					HTTP
				Element:li
				Element:a
					HubSpot
				Element:li
				Element:a
					Intercom
				Element:li
				Element:a
					iOS
				Element:li
				Element:a
					Iterable
				Element:li
				Element:a
					Java
				Element:li
				Element:a
					Klaviyo
				Element:li
				Element:a
					Mailchimp
				Element:li
				Element:a
					Mailjet
				Element:li
				Element:a
					Marketo
				Element:li
				Element:a
					Node
				Element:li
				Element:a
					Nudgespot
				Element:li
				Element:a
					PHP
				Element:li
				Element:a
					Python
				Element:li
				Element:a
					Ruby
				Element:li
				Element:a
					Salesforce
				Element:li
				Element:a
					Selligent
				Element:li
				Element:a
					SendGrid
				Element:li
				Element:a
					Stripe
				Element:li
				Element:a
					Twilio
				Element:li
				Element:a
					Vero
				Element:li
				Element:a
					Xamarin
				Element:li
				Element:a
					Zendesk
				Element:li
				Element:a
					.NET
