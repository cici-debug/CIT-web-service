Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					Analytics for Android Wear
			Node:
			(type) c
			(layer)1
				Element:p
					Analytics for Android Wear makes it dead simple to send your data to any tool without having to learn, test or implement a new API every time.
			Node:
			(type) c
			(layer)1
				Element:p
					All of our client libraries are open-source, so you can
				Element:a
					view Analytics for Android on Github
					, or check out our
				Element:a
					browser and server-side libraries
					too.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Getting Started
						Node:
						(type) c
						(layer)2
							Element:p
								To get started with Analytics for Android Wear check out our
							Element:a
								quickstart guide
								which will help you install analytics tracking in your mobile app in just a few minutes. Once you’ve installed the SDK, read on for setting it up the wear part of your App. Please note that you can only use the Android SDK v2 or higher with wear, and that any Beta APIs below are subject to change.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Adding the Wear dependency
						Node:
						(type) c
						(layer)2
							Element:p
								Add the
							Element:code
								wear
								module to your phone and wear applications.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								compile('com.segment.analytics.android:wear:+@aar') { transitive = true }
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Initializing the client
						Node:
						(type) c
						(layer)2
							Element:p
								The entry point of the library is through the
							Element:code
								WearAnalytics
								class. We maintain a global default instance. Unlike the mobile SDK, this instance is not configurable, simply because it doesn’t have it’s own settings! It will proxy all the calls to the device, which will then call the analytics client on the phone. We’ll show you how to customize the phone client.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								WearAnaytics analytics = WearAnalytics.with(context); analytics.track(...);
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Setting up the Phone Manifest
						Node:
						(type) c
						(layer)2
							Element:p
								In your
							Element:code
								AndroidManifest.xml
								, you’ll need to register the
							Element:code
								PhoneAnalyticsListenerService
								service.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								<manifest xmlns:android="http://schemas.android.com/apk/res/android" package="..."> ... <application ...> <service android:name="com.segment.analytics.PhoneAnalyticsListenerService"> <intent-filter> <action android:name="com.google.android.gms.wearable.BIND_LISTENER"/> </intent-filter> </service> <meta-data android:name="com.google.android.gms.version" android:value="@integer/google_play_services_version"/> </application> </manifest>
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Custom Client
						Node:
						(type) c
						(layer)2
							Element:p
								To customize the analytics client, you can subclass
							Element:code
								PhoneAnalyticsListenerService
								and override the
							Element:code
								getAnalytics()
								method. By default we use the singleton instance, but you can provide us with your custom instances. We recommend reusing the same instance in your phone app. Remember to register your subclassed service instead of ours. The
							Element:code
								getAnalytics()
								method is consulted for every call, so make sure you return the same instance each time.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Track
						Node:
						(type) c
						(layer)2
							Element:p
								The
							Element:code
								track
								method lets you record the actions your users perform, and record adiditonal properties the action.
						Node:
						(type) c
						(layer)2
							Element:p
								You’ll want to track an event whenever the user clicks, taps or submits something in your app. You can read more about
							Element:a
								how it works
								.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								analytics.track("Viewed Product", new Properties().putValue("name", "Moto 360")); analytics.track("Purchased Item", new Properties().putValue("sku", "13d31").putRevenue(199.99));
						Node:
						(type) c
						(layer)2
							Element:table
							Element:tr
							Element:td
							Element:code
								name
							Element:em
								String,required
							Element:td
								A name for the tracked action.
							Element:tr
							Element:td
							Element:code
								properties
							Element:em
								Properties,optional
							Element:td
								A map of properties for this action, e.g. revenue if the action was a purchase.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Screen
						Node:
						(type) c
						(layer)2
							Element:p
								The
							Element:code
								screen
								method lets you record the screens your users view.
						Node:
						(type) c
						(layer)2
							Element:p
								You’ll want to record a screen event an event whenever the user opens a screen in your app. This could be a view, fragment, dialog or activity depending on your app. You can read more about
							Element:a
								how it works
								.
						Node:
						(type) c
						(layer)2
							Element:p
								Not all services support screen, so when it’s not supported explicitly, the screen method tracks as an event with the same parameters.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								analytics.screen("Photo Feed", "", new Properties().putValue("Feed Length", "26")); analytics.screen("Purchase Screen", "Smartwatches", new Properties().putValue("sku", "13d31"));
						Node:
						(type) c
						(layer)2
							Element:table
							Element:tr
							Element:td
							Element:code
								name
							Element:em
								String,optional*
							Element:td
								A name for the screen. Optional if category is provided.
							Element:tr
							Element:td
							Element:code
								category
							Element:em
								String,optional*
							Element:td
								A category for the screen. Optional if name is provided.
							Element:tr
							Element:td
							Element:code
								properties
							Element:em
								Properties,optional
							Element:td
								A map of properties for this screen.
						Node:
						(type) c
						(layer)2
							Element:p
								If you have any questions or see anywhere we can improve our documentation, please
							Element:a
								let us know
								or kick off a conversation in the
							Element:a
								Segment Community
								.
						Node:
						(type) c
						(layer)2
							Element:hr
						Node:
						(type) c
						(layer)2
							Element:p
								If you have any questions or see anywhere we can improve our documentation, please
							Element:a
								let us know
								or kick off a conversation in the
							Element:a
								Segment Community
								!
						Node:
						(type) c
						(layer)2
							Element:footer
							Element:span
							Element:span
								Was this document helpful?
							Element:span
							Element:label
							Element:span
								Yes
							Element:label
							Element:span
								No
						Node:
						(type) c
						(layer)2
							Element:i
			Node:
			(type) h1
			(layer)1
				Element:h1
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:a
					Overview
				Element:li
				Element:a
					ActiveCampaign
				Element:li
				Element:a
					AMP
				Element:li
				Element:a
					analytics.js
				Element:li
				Element:a
					Android
				Element:li
				Element:a
					Android Wear
				Element:li
				Element:a
					Clojure
				Element:li
				Element:a
					Customer.io
				Element:li
				Element:a
					Drip
				Element:li
				Element:a
					Facebook Ads
				Element:li
				Element:a
					Facebook Lead Ads
				Element:li
				Element:a
					Go
				Element:li
				Element:a
					Google AdWords
				Element:li
				Element:a
					HTTP
				Element:li
				Element:a
					HubSpot
				Element:li
				Element:a
					Intercom
				Element:li
				Element:a
					iOS
				Element:li
				Element:a
					Iterable
				Element:li
				Element:a
					Java
				Element:li
				Element:a
					Klaviyo
				Element:li
				Element:a
					Mailchimp
				Element:li
				Element:a
					Mailjet
				Element:li
				Element:a
					Marketo
				Element:li
				Element:a
					Node
				Element:li
				Element:a
					Nudgespot
				Element:li
				Element:a
					PHP
				Element:li
				Element:a
					Python
				Element:li
				Element:a
					Ruby
				Element:li
				Element:a
					Salesforce
				Element:li
				Element:a
					Selligent
				Element:li
				Element:a
					SendGrid
				Element:li
				Element:a
					Stripe
				Element:li
				Element:a
					Twilio
				Element:li
				Element:a
					Vero
				Element:li
				Element:a
					Xamarin
				Element:li
				Element:a
					Zendesk
				Element:li
				Element:a
					.NET
