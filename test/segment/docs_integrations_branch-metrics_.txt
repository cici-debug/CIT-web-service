Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					Branch Metrics Integration
			Node:
			(type) c
			(layer)1
				Element:p
					Segment makes it easy to send your data to
				Element:a
					Branch Metrics
					(and lots of other integrations). Once you've tracked your data through our open source
				Element:a
					libraries
					we'll translate and route your data to Branch Metrics in the format they understand.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
							Element:strong
								Getting Started
						Node:
						(type) c
						(layer)2
							Element:p
								Branch is a bundled integration. You will need to add their integration to your SDK.
						Node:
						(type) c
						(layer)2
							Element:p
								First you will need to
							Element:a
								sign up for a free Branch account
								and follow the steps on their Dashboard to complete setup and retrieve your API Key.
						Node:
						(type) c
						(layer)2
							Element:p
								Next you will have to set up deep link routing and enable your app to create links, the guides for which are below
			Node:
			(type) h1
			(layer)1
				Element:h1
					iOS
			Node:
			(type) c
			(layer)1
				Element:p
					**Note that the below code snippets are in objective-c. The
				Element:a
					Swift setup guide
					, as well as setup guides for advanced product features can all be found in
				Element:a
					Branch’s Developer Portal
					.
			Node:
			(type) c
			(layer)1
				Element:p
					Also, when referencing Branch’s quickstart guide within the dev portal, don’t worry about installing the SDK files. Segment has already taken care of that for you. Skip down to the section entitled “PList Configuration”.
			Node:
			(type) c
			(layer)1
				Element:h2
					1 - Configure the SDK
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
											PList configuration
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Add your Branch key
												Node:
												(type) c
												(layer)4
													Element:p
														Your app key can be retrieved on the
													Element:a
														Settings
														page of your dashboard. Now you need to add it to
													Element:code
														YourProject-Info.plist
														(
													Element:code
														Info.plist
														for Swift).
												Node:
												(type) c
												(layer)4
													Element:ol
													Element:li
													Element:p
														In the plist file, mouse over “Information Property List” which is the root item under the Key column.
													Element:li
													Element:p
														After about half a second, you will see a “+” sign appear. Click it.
													Element:li
													Element:p
														In the newly added row, fill in
													Element:code
														branch_key
														for its key, leave type as String, and enter your app key obtained in above steps in its value column.
													Element:li
													Element:p
														Save the plist file.
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Configure for URI deep linking
												Node:
												(type) c
												(layer)4
													Element:p
														To set up your URI Scheme, you’ll need to open your project in XCode and complete the following.
												Node:
												(type) c
												(layer)4
													Element:ol
													Element:li
													Element:p
														Click on YourProject-Info.plist on the left (or in Swift, Info.plist).
													Element:li
													Element:p
														Find URL Types and click the right arrow. (If it doesn’t exist, right click anywhere and choose “Add Row”. Scroll down and choose URL Types)
													Element:li
													Element:p
														Add
													Element:code
														myapp
														, where
													Element:em
														myapp
														is a unique string for your app, as an item in URL Schemes as below:
												Node:
												(type) c
												(layer)4
													Element:p
													Element:img
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Configure for Universal Links
												Node:
												(type) c
												(layer)4
													Element:p
														Configuring your app for Branch’s Universal Links is very simple. At a high level, you just need to go in and add in the selected
													Element:code
														Associated Domains
														to your Xcode project.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:strong
														Step 1.
														Enable Associated Domains in Xcode
												Node:
												(type) c
												(layer)4
													Element:p
														First, double check that provisioning profiles in your app belong to the same team that you are going to use throughout the Universal Link configuration process with Branch. Using provisioning profiles from a different team will cause Universal Links to fail and fall back to normal Branch links. Then go to the
													Element:code
														Capabilities
														tab of your project file.
												Node:
												(type) c
												(layer)4
													Element:p
														Scroll down and enable
													Element:code
														Associated Domains
														so that the accordion expands.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:img
												Node:
												(type) c
												(layer)4
													Element:p
														If you see an error like this, make sure:
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
													Element:p
														that you have the right team selected
													Element:li
													Element:p
														your Bundle Identifier of your Xcode project matches the one used to register the App Identifier
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Full instructions here
														.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:strong
														Step 2:
														Add in your Branch link domains
												Node:
												(type) c
												(layer)4
													Element:p
														In the
													Element:code
														Domains
														section, add the appropriate domain tags for
													Element:code
														bnc.lt
														as well as your
													Element:code
														white label domain
														if you use one. You must prefix it with
													Element:code
														applinks:
														. If you’re just using
													Element:code
														bnc.lt
														for all of your Branch links, you only need to add a single domain:
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
													Element:code
														applinks:bnc.lt
												Node:
												(type) c
												(layer)4
													Element:p
													Element:img
												Node:
												(type) c
												(layer)4
													Element:p
													Element:strong
														Note: If you encounter any issues, please follow the
													Element:a
														full instructions here
														.
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
											Starting a Branch Session
									Node:
									(type) c
									(layer)3
										Element:p
											The Branch session starts every single time your app opens up, and checks if the user came from a link. You register a callback method here that will return any deep link parameters upon link click. Please note that the callback function is called 100% of the time, even when the network is out.
									Node:
									(type) c
									(layer)3
										Element:p
											We also bundle in a
										Element:a
											bunch of other stuff
											that you might find useful.
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
											Initialize SDK And Register Deep Link Routing Function
									Node:
									(type) c
									(layer)3
										Element:p
											There are a few pieces of code that must be in place. First, open your project’s
										Element:strong
											AppDelegate.m
											(or
										Element:strong
											AppDelegate.Swift
											) file.
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:p
											Add
										Element:code
											#import "Branch.h
											at the top of the file (Objective-C only)
										Element:li
										Element:p
											Find the line which reads:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											(BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:
									Node:
									(type) c
									(layer)3
										Element:p
										Element:strong
											and paste the following:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											Branch *branch = [Branch getInstance]; [branch initSessionWithLaunchOptions:launchOptions andRegisterDeepLinkHandler:^(NSDictionary *params, NSError *error) { if (!error) { // params are the deep linked params associated with the link that the user clicked -> was re-directed to this app // params will be empty if no data found_**** // ... insert custom logic here ..._**** NSLog(@"params: %@", params.description); } }];
									Node:
									(type) c
									(layer)3
										Element:p
										Element:strong
											NOTE
											If you are seeing a “Branch.h file not found” error but you’ve imported the SDK, or it’s breaking during compiling–and you’re
										Element:strong
											using Xcode 6.3 or newer
											–
										Element:a
											click here
											.
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
											Handle Deep Link
									Node:
									(type) c
									(layer)3
										Element:p
											This method is necessary to receive a Branch parameter when the URI scheme is called and the app open immediately. It will automatically call the
										Element:strong
											Deep Link Handler
											registered above:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											(BOOL)application:(UIApplication *)application openURL:(NSURL *)url sourceApplication:NSString *)sourceApplication annotation:(id)annotation { // pass the url to the handle deep link call [[Branch getInstance] handleDeepLink:url]; // do other deep link routing for the Facebook SDK, Pinterest SDK, etc return YES; }
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
											Continue User Activity
									Node:
									(type) c
									(layer)3
										Element:p
											Additionally, in iOS9, if you list content in Spotlight with Branch, you’ll want to receive those parameters in this App Delegate callback.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											(BOOL)application:(UIApplication *)application continueUserActivity:(NSUserActivity *)userActivity restorationHandler:(void (^)(NSArray *restorableObjects))restorationHandler { BOOL handledByBranch = [[Branch getInstance] continueUserActivity:userActivity]; return handledByBranch; }
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
											Advanced functionality
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Branch-provided data parameters in callback
												Node:
												(type) c
												(layer)4
													Element:p
														Previously, Branch did not return any information to the app if
													Element:code
														initSession
														was called but the user hadn’t clicked on a link. Now Branch returns explicit parameters every time. Here is a list, and a description of what each represents.
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
													Element:p
													Element:code
														~
														denotes analytics
													Element:li
													Element:p
													Element:code
														+
														denotes information added by Branch
													Element:li
													Element:p
														(for the curious,
													Element:code
														$
														denotes reserved keywords used for controlling how the Branch service behaves)
												Node:
												(type) c
												(layer)4
													Element:table
													Element:thead
													Element:tr
													Element:th
														Parameter
													Element:th
														Meaning
													Element:tbody
													Element:tr
													Element:td
														~channel
													Element:td
														The channel on which the link was shared, specified at link creation time
													Element:tr
													Element:td
														~feature
													Element:td
														The feature, such as
													Element:code
														invite
														or
													Element:code
														share
														, specified at link creation time
													Element:tr
													Element:td
														~tags
													Element:td
														Any tags, specified at link creation time
													Element:tr
													Element:td
														~campaign
													Element:td
														The campaign the link is associated with, specified at link creation time
													Element:tr
													Element:td
														~stage
													Element:td
														The stage, specified at link creation time
													Element:tr
													Element:td
														~creation_source
													Element:td
														Where the link was created (‘API’, ‘Dashboard’, ‘SDK’, ‘iOS SDK’, ‘Android SDK’, or ‘Web SDK’)
													Element:tr
													Element:td
														+match_guaranteed
													Element:td
														True or false as to whether the match was made with 100% accuracy
													Element:tr
													Element:td
														+referrer
													Element:td
														The referrer for the link click, if a link was clicked
													Element:tr
													Element:td
														+phone_number
													Element:td
														The phone number of the user, if the user texted himself/herself the app
													Element:tr
													Element:td
														+is_first_session
													Element:td
														Denotes whether this is the first session (install) or any other session (open)
													Element:tr
													Element:td
														+clicked_branch_link
													Element:td
														Denotes whether or not the user clicked a Branch link that triggered this session
													Element:tr
													Element:td
														+click_timestamp
													Element:td
														Epoch timestamp of when the click occurred
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Retrieve deep link params after initialization
												Node:
												(type) c
												(layer)4
													Element:p
														You can retrieve the deep link data at any time from the Branch singleton by calling one of the below methods.
												Node:
												(type) c
												(layer)4
															Node:
															(type) c
															(layer)5
																Element:h5
																	Get First Referring Params
															Node:
															(type) c
															(layer)5
																Element:p
																	This is the latest set of deep link data from the most recent link that was clicked. If you minimize the app and reopen it, the session will be cleared and so will this data.
															Node:
															(type) c
															(layer)5
																Element:pre
																Element:code
																	NSDictionary *params = [[Branch getInstance] getLatestReferringParams];
												Node:
												(type) c
												(layer)4
															Node:
															(type) c
															(layer)5
																Element:h5
																	Get first referring params
															Node:
															(type) c
															(layer)5
																Element:p
																	These are the first set of deep link data the ever referred the user. Once it’s been set for a given user, it can never be updated. This is useful for referral programs.
															Node:
															(type) c
															(layer)5
																Element:pre
																Element:code
																	NSDictionary *params = [[Branch getInstance] getFirstReferringParams];
															Node:
															(type) c
															(layer)5
																Element:h2
																	2 - Setup deep linking
															Node:
															(type) c
															(layer)5
																Element:p
																	Deep linking is an incredibly important part of building your app, and essential for delivering a high quality user experience. When a user clicks a link, you should take them to the exact thing they clicked on. Here’s how to do it.
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
											Create your deep link
									Node:
									(type) c
									(layer)3
										Element:p
										Element:code
											BranchUniversalObject
											is the best way of tracking and sharing content with Branch. It provides convenient methods for sharing, deep linking, and tracking how often that content is viewed. This information is then used to provide you with powerful content analytics.
									Node:
									(type) c
									(layer)3
										Element:p
											Below is how to create your own Branch Links. In order to share these links, we’ve built a
										Element:em
											native share sheet for Android
											and implemented a simple way to use
										Element:em
											UIActivityViewController
											on
										Element:em
											iOS
											. Check out the section on
										Element:a
											content sharing
											.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											#import "BranchUniversalObject.h" #import "BranchLinkProperties.h"
									Node:
									(type) c
									(layer)3
										Element:p
											First create the object that you’d like to link to:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											BranchUniversalObject *branchUniversalObject = [[BranchUniversalObject alloc] initWithCanonicalIdentifier:@"item/12345"]; branchUniversalObject.title = @"My Content Title"; branchUniversalObject.contentDescription = @"My Content Description"; branchUniversalObject.imageUrl = @"https://example.com/mycontent-12345.png"; [branchUniversalObject addMetadataKey:@"property1" value:@"blue"]; [branchUniversalObject addMetadataKey:@"property2" value:@"red"];
									Node:
									(type) c
									(layer)3
										Element:p
											Then define the properties of the link you’d like to create.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											BranchLinkProperties *linkProperties = [[BranchLinkProperties alloc] init]; linkProperties.feature = @"sharing"; linkProperties.channel = @"facebook"; [linkProperties addControlParam:@"$desktop_url" withValue:@"http://example.com/home"]; [linkProperties addControlParam:@"$ios_url" withValue:@"http://example.com/ios"];
									Node:
									(type) c
									(layer)3
										Element:p
											Lastly, create the link by referencing the universal object.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											[branchUniversalObject getShortUrlWithLinkProperties:linkProperties andCallback:^(NSString *url, NSError *error) { if (!error) { NSLog(@"success getting url! %@", url); } }];
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
											Alternate 1: Easy deep link routing
									Node:
									(type) c
									(layer)3
										Element:p
											Branch will handle all the deep link routing for you if you leverage the automatic deeplinking functionality described below. Here’s how to build on it:
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Make your UIViewController a delegate for BranchDeepLinkingController
												Node:
												(type) c
												(layer)4
													Element:p
														The work in this section will take place in the view controller that you want to appear when a user clicks a link. For example, this could be a view to show a product.
												Node:
												(type) c
												(layer)4
															Node:
															(type) c
															(layer)5
																Element:h5
																	Import the proper header
															Node:
															(type) c
															(layer)5
																Element:p
																	In the view controller that will display on link click, first import
																Element:code
																	Branch.h
																	.
															Node:
															(type) c
															(layer)5
																Element:pre
																Element:code
																	import "Branch.h"
												Node:
												(type) c
												(layer)4
															Node:
															(type) c
															(layer)5
																Element:h5
																	Register for the delegate
															Node:
															(type) c
															(layer)5
																Element:p
																	Make your view controller conform to the delegate
																Element:code
																	BranchDeepLinkingController
																	.
															Node:
															(type) c
															(layer)5
																Element:pre
																Element:code
																	@interface ExampleDeepLinkingController : UIViewController <BranchDeepLinkingController>
												Node:
												(type) c
												(layer)4
															Node:
															(type) c
															(layer)5
																Element:h5
																	Configure your view on load
															Node:
															(type) c
															(layer)5
																Element:p
																	Receive the delegate method that will be called when the view controller is loaded from a link click.
															Node:
															(type) c
															(layer)5
																Element:pre
																Element:code
																	@synthesize deepLinkingCompletionDelegate; - (void)configureControlWithData:(NSDictionary *)data { NSString *pictureUrl = data[@"product_picture"]; // show the picture dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{ NSData *imageData = [NSData dataWithContentsOfURL:[NSURL URLWithString:pictureUrl]]; UIImage *image = [UIImage imageWithData:imageData]; dispatch_async(dispatch_get_main_queue(), ^{ self.productImageView.image = image; }); }); }
												Node:
												(type) c
												(layer)4
															Node:
															(type) c
															(layer)5
																Element:h5
																	Add a close button
															Node:
															(type) c
															(layer)5
																Element:p
																	Since the view controller is displayed modally, you should add a close button that let’s the user minimize to continue the remainder of your flow.
															Node:
															(type) c
															(layer)5
																Element:pre
																Element:code
																	(IBAction)closePressed { [self.deepLinkingCompletionDelegate deepLinkingControllerCompleted]; }
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Register your UIViewController for a specific key
												Node:
												(type) c
												(layer)4
													Element:p
														Lastly, you need to tell Branch which view controller you will use and which key to respond to. In this case we’re using
													Element:code
														product_picture
														as above.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:strong
														Note
														: If you don’t know what this key is, see
													Element:a
														Creating Links
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														(BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions { Branch *branch = [Branch getInstance]; ExampleDeepLinkingController *controller = [[UIStoryboard storyboardWithName:@"Main" bundle:[NSBundle mainBundle]] instantiateViewControllerWithIdentifier:@"DeepLinkingController"]; [branch registerDeepLinkController:controller forKey:@"product_picture"]; [branch initSessionWithLaunchOptions:launchOptions automaticallyDisplayDeepLinkController:YES]; **return** YES; }
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Where to define your deep link keys
												Node:
												(type) c
												(layer)4
													Element:p
														You can define the deep link metadata in the
													Element:code
														Branch Universal Object
														that you’ll create before creating a deep link.
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														BranchUniversalObject *branchUniversalObject = [[BranchUniversalObject alloc] initWithCanonicalIdentifier:@"item/12345"]; branchUniversalObject.title = @"My Content Title"; branchUniversalObject.contentDescription = @"My Content Description"; branchUniversalObject.imageUrl = @"https://example.com/mycontent-12345.png"; // Add the custom deep link keys and values as metadata [branchUniversalObject addMetadataKey:@"product_picture" value:@"12345"]; [branchUniversalObject addMetadataKey:@"user_id" value:@"6789"];
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
											Alternate 2: Handle routing yourself in the Branch callback
									Node:
									(type) c
									(layer)3
										Element:p
											This section will describe a routing example in an abstract way. In case you want the simple version, Branch can handle routing for you automatically. Just check out the section on
										Element:a
											simplified deep link routing
											.
									Node:
									(type) c
									(layer)3
										Element:p
											Inside of the deepLinkHandler, you will want to examine the params dictionary to determine whether the user clicked on a link to content. Below is an example assuming that the links correspond to pictures.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											(BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *****)launchOptions { // initialize the session, setup a deep link handler [[Branch getInstance] initSessionWithLaunchOptions:launchOptions andRegisterDeepLinkHandler:^(NSDictionary *****params, NSError *****error) { // start setting up the view controller hierarchy UINavigationController *navC = (UINavigationController *)self.window.rootViewController; UIStoryboard *storyboard = [UIStoryboard storyboardWithName:@"Main" bundle:nil]; UIViewController *nextVC; // If the key 'pictureId' is present in the deep link dictionary // then load the picture screen with the appropriate picture NSString *pictureId = [params objectForKey:@"pictureId"]; if (pictureId) { nextVC = [storyboard instantiateViewControllerWithIdentifier:@"PicVC"]; [nextVC setNextPictureId:pictureId]; } else { nextVC = [storyboard instantiateViewControllerWithIdentifier:@"MainVC"]; } // navigate! [navC setViewControllers:@[nextVC] animated:YES]; }]; return YES; }
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
											Supporting existing routes
									Node:
									(type) c
									(layer)3
										Element:p
											You spent a bunch of time already setting up deeplink paths before you heard of Branch and now you want the Branch links to leverage them? No problem at all. You can either set
										Element:code
											$deeplink_path
											,
										Element:code
											$ios_deeplink_path
											or
										Element:code
											$android_deeplink_path
											to the URI path you’d like us to call.
									Node:
									(type) c
									(layer)3
										Element:p
										Element:strong
											Note that Universal Links and Spotlight on iOS do not support URI paths
									Node:
									(type) c
									(layer)3
										Element:p
											All of the examples below will cause Branch to trigger
										Element:code
											myapp://content/1234:
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Dynamic link control
												Node:
												(type) c
												(layer)4
													Element:p
														If you’re
													Element:a
														creating links dynamically
														, you simply need to append the parameters. For example:
												Node:
												(type) c
												(layer)4
													Element:p
													Element:code
														"https://bnc.lt/a/key_live_jbgnjxvlhSb6PGH23BhO4hiflcp3y7ky?$deeplink_path=content%2F1234"
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														SDK/API link control
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														BranchLinkProperties *linkProperties = [[BranchLinkProperties alloc] init]; linkProperties.feature = @"sharing"; linkProperties.channel = @"facebook"; [linkProperties addControlParam:@"$deeplink_path" withValue:@"content/1234"];
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Dashboard link control
												Node:
												(type) c
												(layer)4
													Element:p
														You can also control it for individual marketing links by inserting the keys and values into the deep link data section.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:img
												Node:
												(type) c
												(layer)4
													Element:p
													Element:br
												Node:
												(type) c
												(layer)4
													Element:hr
												Node:
												(type) c
												(layer)4
													Element:p
													Element:br
			Node:
			(type) h1
			(layer)1
				Element:h1
					Android
			Node:
			(type) c
			(layer)1
				Element:h2
				Element:strong
					Getting Started
			Node:
			(type) c
			(layer)1
				Element:p
					First you will have to set up deep link routing and enable your app to create links, the guide for which is below. You can also visit
				Element:a
					Branch’s Developer Portal
					for advanced deep link features, integration customizations, and API reference guides.
			Node:
			(type) c
			(layer)1
				Element:p
					If you referencing Branch’s quickstart guide within the dev portal, don’t worry about installing the SDK files. Segment has already taken care of that for you. Skip down to the section entitled “Manifest configuration”.
			Node:
			(type) c
			(layer)1
				Element:h2
					1 - Configure the SDK
			Node:
			(type) c
			(layer)1
				Element:h3
					Manifest configuration
			Node:
			(type) c
			(layer)1
				Element:h4
					Step 1: Add your Branch key
			Node:
			(type) c
			(layer)1
				Element:p
					Your Branch Key can be retrieved on the
				Element:a
					Settings
					page of the dashboard. Now you need to add it to your project workspace.
			Node:
			(type) c
			(layer)1
				Element:p
					Navigate to AndroidManifest.xml and add the following
				Element:code
					<meta-data>
					tags:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					<application> <!-- Other existing entries --> <!-- Set to true to use Branch_Test_Key --> <meta-data android:name="io.branch.sdk.TestMode" android:value="true" /> <meta-data android:name="io.branch.sdk.BranchKey" android:value="key_live_abc123" /> <meta-data android:name="io.branch.sdk.BranchKey.test" android:value="key_test_abc123" /> </application>
			Node:
			(type) c
			(layer)1
				Element:h4
					Step 2: Configure for deep linking
			Node:
			(type) c
			(layer)1
				Element:p
					Find the
				Element:code
					Activity
					you want to open up when a link is clicked. This is typically your
				Element:code
					SplashActivity
					or a
				Element:code
					BaseActivity
					that all other activities inherit from. Inside your
				Element:code
					AndroidManifest.xml
					where the
				Element:code
					Activity
					is defined, do the following:
			Node:
			(type) c
			(layer)1
				Element:ol
				Element:li
				Element:p
					Copy in the intent filter as seen below with VIEW/DEFAULT/BROWSABLE in it.
				Element:li
				Element:p
					Change
				Element:em
					yourapp
					under
				Element:code
					android:scheme
					to the URI scheme you’ve registered with us.
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					<activity android:name="com.yourapp.SplashActivity" android:label="@string/app_name" > <intent-filter> <action android:name="android.intent.action.MAIN" /> <category android:name="android.intent.category.LAUNCHER" /> </intent-filter> <!-- Add this intent filter below, and change yourapp to your app name --> <intent-filter> <data android:scheme="yourapp" android:host="open" /> <action android:name="android.intent.action.VIEW" /> <category android:name="android.intent.category.DEFAULT" /> <category android:name="android.intent.category.BROWSABLE" /> </intent-filter> </activity>
			Node:
			(type) c
			(layer)1
				Element:h4
					Step 3: Enable Auto Session Management - Custom Application Class
			Node:
			(type) c
			(layer)1
				Element:p
					If you already have an Application class, then create a Branch instance in your
				Element:code
					Application#onCreate()
					method. If you don’t know what a custom application class is, you probably don’t have one, so skip this Step 3 and use the one below.
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					public void onCreate() { super.onCreate(); Branch.getAutoInstance(this); }
			Node:
			(type) c
			(layer)1
				Element:h4
					Step 3 Alternative: Enable Auto Session Management - No Application Class
			Node:
			(type) c
			(layer)1
				Element:p
					If you don’t have a custom application class, the last step is to register our
				Element:code
					Application
					class. The final step in setting up the Branch SDK is as follows:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					<application android:name="io.branch.referral.BranchApp">
			Node:
			(type) c
			(layer)1
				Element:p
					Note: Auto session tracking is only available for
				Element:code
					minSdkVersion
					14 or above.
			Node:
			(type) c
			(layer)1
				Element:p
				Element:strong
					What if I support pre14 Android?
			Node:
			(type) c
			(layer)1
				Element:p
					If you need to support pre-14, please see our section about
				Element:a
					session management below
					.
			Node:
			(type) c
			(layer)1
				Element:h3
					Starting a Branch Session
			Node:
			(type) c
			(layer)1
				Element:p
					The Branch session starts every single time your app opens up, and checks if the user came from a link. You register a callback method here that will return any deep link parameters upon link click. Please note that the callback function is called 100% of the time, even when the network is out.
			Node:
			(type) c
			(layer)1
				Element:p
					We also bundle in a
				Element:a
					bunch of other stuff
					that you might find useful.
			Node:
			(type) c
			(layer)1
				Element:h3
					Initialize SDK And Register Deep Link Routing Function
			Node:
			(type) c
			(layer)1
				Element:p
					Open up your
				Element:strong
					splash activity
					(or the activity you registered the intent for above), then add the onStart lifecycle method:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					@Override public void onStart() { super.onStart(); // Lifecycle callback method }
			Node:
			(type) c
			(layer)1
				Element:p
					Initialize the session and register your deep link router. Take note of how the instance is retrieved. If you are
				Element:strong
					not
					using automatic session management, then you will need to use
				Element:code
					getInstance(Context context)
					.
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					Branch branch = Branch.getInstance(); // ONLY use the line below IF you ARE NOT using automatic session management.* // Branch branch = Branch.getInstance(getApplicationContext()); branch.initSession(new Branch.BranchReferralInitListener(){ @Override public void onInitFinished(JSONObject referringParams, BranchError error) { if (error == null) { // params are the deep linked params associated with the link that the user clicked -> was re-directed to this app* // params will be empty if no data found // ... insert custom logic here ... } else { Log.i("MyApp", error.getMessage()); } } }, this.getIntent().getData(), this);
			Node:
			(type) c
			(layer)1
				Element:p
				Element:strong
					NOTE
					if you’re calling this inside a fragment, please use ‘getActivity()’ instead of passing in
				Element:code
					this
					. Also,
				Element:code
					this.getIntent().getData()
					refers to the data associated with an incoming intent.
			Node:
			(type) c
			(layer)1
				Element:p
					Next, you’ll need to hook into the
				Element:code
					onNewIntent
					method specified inside the Activity lifecycle and set the intent. This is required for conformity with Facebook’s AppLinks.
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					@Override public voidonNewIntent(Intent intent) { this.setIntent(intent); }
			Node:
			(type) c
			(layer)1
				Element:h3
					Advanced functionality
			Node:
			(type) c
			(layer)1
				Element:h4
					Branch-provided data parameters in callback
			Node:
			(type) c
			(layer)1
				Element:p
					Previously, Branch did not return any information to the app if
				Element:code
					initSession
					was called but the user hadn’t clicked on a link. Now Branch returns explicit parameters every time. Here is a list, and a description of what each represents.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:p
				Element:code
					~
					denotes analytics
				Element:li
				Element:p
				Element:code
					+
					denotes information added by Branch
				Element:li
				Element:p
					(for the curious,
				Element:code
					$
					denotes reserved keywords used for controlling how the Branch service behaves)
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Meaning
				Element:tbody
				Element:tr
				Element:td
					~channel
				Element:td
					The channel on which the link was shared, specified at link creation time
				Element:tr
				Element:td
					~feature
				Element:td
					The feature, such as
				Element:code
					invite
					or
				Element:code
					share
					, specified at link creation time
				Element:tr
				Element:td
					~tags
				Element:td
					Any tags, specified at link creation time
				Element:tr
				Element:td
					~campaign
				Element:td
					The campaign the link is associated with, specified at link creation time
				Element:tr
				Element:td
					~stage
				Element:td
					The stage, specified at link creation time
				Element:tr
				Element:td
					~creation_source
				Element:td
					Where the link was created (‘API’, ‘Dashboard’, ‘SDK’, ‘iOS SDK’, ‘Android SDK’, or ‘Web SDK’)
				Element:tr
				Element:td
					+match_guaranteed
				Element:td
					True or false as to whether the match was made with 100% accuracy
				Element:tr
				Element:td
					+referrer
				Element:td
					The referrer for the link click, if a link was clicked
				Element:tr
				Element:td
					+phone_number
				Element:td
					The phone number of the user, if the user texted himself/herself the app
				Element:tr
				Element:td
					+is_first_session
				Element:td
					Denotes whether this is the first session (install) or any other session (open)
				Element:tr
				Element:td
					+clicked_branch_link
				Element:td
					Denotes whether or not the user clicked a Branch link that triggered this session
				Element:tr
				Element:td
					+click_timestamp
				Element:td
					Epoch timestamp of when the click occurred
			Node:
			(type) c
			(layer)1
				Element:h4
					Retrieve deep link params after initialization
			Node:
			(type) c
			(layer)1
				Element:p
					You can retrieve the deep link data at any time from the Branch singleton by calling one of the below methods.
			Node:
			(type) c
			(layer)1
															Node:
															(type) c
															(layer)5
																Element:h5
																Element:a
																	Get First Referring Params
															Node:
															(type) c
															(layer)5
																Element:p
																	This is the latest set of deep link data from the most recent link that was clicked. If you minimize the app and reopen it, the session will be cleared and so will this data.
															Node:
															(type) c
															(layer)5
																Element:pre
																Element:code
																	JSONObject sessionParams = Branch.getInstance().getLatestReferringParams();
			Node:
			(type) c
			(layer)1
															Node:
															(type) c
															(layer)5
																Element:h5
																	Get first referring params
															Node:
															(type) c
															(layer)5
																Element:p
																	These are the first set of deep link data the ever referred the user. Once it’s been set for a given user, it can never be updated. This is useful for referral programs.
															Node:
															(type) c
															(layer)5
																Element:pre
																Element:code
																	JSONObject installParams = Branch.getInstance().getFirstReferringParams();
															Node:
															(type) c
															(layer)5
																Element:h4
																	Initialization to support Android pre-14
															Node:
															(type) c
															(layer)5
																Element:p
																	If you want to support pre-14 this method, you should include Branch SDK methods in both
																Element:code
																	onStart()
																	and
																Element:code
																	onStop()
																	. If you don’t close the Branch session, you’ll see strange behaviors like deep link parameters not showing up after clicking a link the second time. Branch must know when the app opens or closes to properly handle the deep link parameters retrieval.
			Node:
			(type) c
			(layer)1
															Node:
															(type) c
															(layer)5
																Element:h5
																	Init Session
															Node:
															(type) c
															(layer)5
																Element:p
																	Please add this for every Activity for pre-14 support.
															Node:
															(type) c
															(layer)5
																Element:pre
																Element:code
																	@Override protected void onStart() { super.onStart(); Branch.getInstance(getApplicationContext()).initSession(); }
			Node:
			(type) c
			(layer)1
															Node:
															(type) c
															(layer)5
																Element:h5
																	Close session
															Node:
															(type) c
															(layer)5
																Element:p
																	Please add this for every Activity for pre-14 support.
															Node:
															(type) c
															(layer)5
																Element:pre
																Element:code
																	@Override protected void onStop() { super.onStop(); branch.closeSession(); }
															Node:
															(type) c
															(layer)5
																Element:p
																Element:strong
																	Support for 100% Matching Branch can leverage the install referrer broadcast to guarantee 100% accuracy of deeplinking through install when Google Play delivers it in time. All you need to do is register Branch for the install referrer broadcast in the
																	AndroidManifest.xml**.
															Node:
															(type) c
															(layer)5
																Element:p
																Element:strong
																	(Common)
															Node:
															(type) c
															(layer)5
																Element:pre
																Element:code
																	<receiver android:name="io.branch.referral.InstallListener" android:exported="true"> <intent-filter> <action android:name="com.android.vending.INSTALL_REFERRER" /> </intent-filter> </receiver>
															Node:
															(type) c
															(layer)5
																Element:p
																Element:strong
																	(Uncommon)
															Node:
															(type) c
															(layer)5
																Element:pre
																Element:code
																	<receiver android:name="com.myapp.CustomInstallListener" android:exported="true"> <intent-filter> <action android:name="com.android.vending.INSTALL_REFERRER" /> </intent-filter> </receiver>
															Node:
															(type) c
															(layer)5
																Element:p
																Element:br
															Node:
															(type) c
															(layer)5
																Element:h2
																	2 - Setup deep linking
															Node:
															(type) c
															(layer)5
																Element:p
																	Deep linking is an incredibly important part of building your app, and essential for delivering a high quality user experience. When a user clicks a link, you should take them to the exact thing they clicked on. Here’s how to do it.
															Node:
															(type) c
															(layer)5
																Element:h3
																	Create your deep link
															Node:
															(type) c
															(layer)5
																Element:p
																Element:code
																	BranchUniversalObject
																	is the best way of tracking and sharing content with Branch. It provides convenient methods for sharing, deeplinking, and tracking how often that content is viewed. This information is then used to provide you with powerful content analytics.
															Node:
															(type) c
															(layer)5
																Element:p
																	Below is how to create your own Branch Links. In order to share these links, we’ve built a
																Element:em
																	native share sheet for Android
																	and implemented a simple way to use
																Element:em
																	UIActivityViewController on iOS
																	. Check out the section on
																Element:strong
																	[content sharin
																	g](
																Element:a
																	https://dev.branch.io/recipes/content_sharing/android
																	).
															Node:
															(type) c
															(layer)5
																Element:p
																	First create the object that you’d like to link to:
															Node:
															(type) c
															(layer)5
																Element:pre
																Element:code
																	BranchUniversalObject branchUniversalObject = new BranchUniversalObject() .setCanonicalIdentifier("item/12345") .setTitle("My Content Title") .setContentDescription("My Content Description") .setContentImageUrl("https://example.com/mycontent-12345.png") .setContentIndexingMode(BranchUniversalObject.CONTENT_INDEX_MODE.PUBLIC) .addContentMetadata("property1", "blue") .addContentMetadata("property2", "red"); Then define the properties of the link you’d like to create. LinkProperties linkProperties = new LinkProperties() .setChannel("facebook") .setFeature("sharing") .addControlParameter("$desktop_url", "http://example.com/home") .addControlParameter("$ios_url", "http://example.com/ios");
															Node:
															(type) c
															(layer)5
																Element:p
																	Lastly, create the link by referencing the universal object.
															Node:
															(type) c
															(layer)5
																Element:pre
																Element:code
																	branchUniversalObject.generateShortUrl(this, linkProperties, new BranchLinkCreateListener() { @Override public void onLinkCreate(String url, BranchError error) { if (error == null) { Log.i("MyApp", "got my Branch link to share: " +url); } } });
															Node:
															(type) c
															(layer)5
																Element:h3
																	Alternate 1: Easy deep link routing
															Node:
															(type) c
															(layer)5
																Element:p
																	Branch will handle all the deep link routing for you if you leverage the automatic deeplinking functionality described below. Here’s how to build on it:
															Node:
															(type) c
															(layer)5
																Element:h4
																	Register your Activity for a specific key
															Node:
															(type) c
															(layer)5
																Element:p
																	Most of the configuration for the auto deep link feature will happen in the Manifest file, so let’s start there.
			Node:
			(type) c
			(layer)1
															Node:
															(type) c
															(layer)5
																Element:h5
																	Option 1: List the key you want
															Node:
															(type) c
															(layer)5
																Element:p
																	In your Manifest file, it’s easy to specify which deep link keys you want to trigger the Activity to load. Just add this additional metadata for
																Element:code
																	io.branch.sdk.auto_link_keys
																	to the Activity you want to use. Let’s use
																Element:code
																	product_picture
																	in this example
															Node:
															(type) c
															(layer)5
																Element:p
																Element:strong
																	Note
																	: If you don’t know what this key is, see
																Element:a
																	Creating Links
															Node:
															(type) c
															(layer)5
																Element:pre
																Element:code
																	<activity android:name="com.myapp.AutoDeepLinkExampleActivity"> <meta-data android:name="io.branch.sdk.auto_link_keys" android:value="product_picture" /> *<!-- your other activity stuff -->* </activity>
			Node:
			(type) c
			(layer)1
															Node:
															(type) c
															(layer)5
																Element:h5
																	Option 2: Specify the deeplink path you want
															Node:
															(type) c
															(layer)5
																Element:p
																	Alternatively to the key approach above, if you’re using Branch’s $deeplink_path to support previous URI routing, you can add this metadata
																Element:code
																	nameio.branch.sdk.auto_link_path
																	with the values of the deeplink paths that you want to open up an activity.
															Node:
															(type) c
															(layer)5
																Element:pre
																Element:code
																	<activity android:name="com.myapp.AutoDeepLinkExampleActivity"> <meta-data android:name="io.branch.sdk.auto_link_path" android:value="custom/path/*,another/path/" /> <!-- your other activity stuff --> </activity>
			Node:
			(type) c
			(layer)1
															Node:
															(type) c
															(layer)5
																Element:h5
																	Optional: Add in a request code for tracking
															Node:
															(type) c
															(layer)5
																Element:p
																	If you register your base activity to receive
																Element:code
																	onActivityResult
																	you can specify a custom code for the deep link activity like so.
															Node:
															(type) c
															(layer)5
																Element:pre
																Element:code
																	<meta-data android:name="io.branch.sdk.auto_link_request_code" android:value="@integer/AutoDeeplinkRequestCode" />
															Node:
															(type) c
															(layer)5
																Element:h4
																	Setup your Activity for deep linking
															Node:
															(type) c
															(layer)5
																Element:p
																	Once a link has been clicked, a Branch session has been initialized and the deep link key is detected, the Activity will show. For example, this could be an Activity used to show a product.
			Node:
			(type) c
			(layer)1
															Node:
															(type) c
															(layer)5
																Element:h5
																	Retrieve parameters on Activity start
															Node:
															(type) c
															(layer)5
																Element:p
																	The following code snippet shows an example of how to configure said Activity.
															Node:
															(type) c
															(layer)5
																Element:pre
																Element:code
																	@Override protected void onResume() { super.onResume(); if (Branch.isAutoDeepLinkLaunch(this)) { try { String autoDeeplinkedValue = Branch.getInstance().getLatestReferringParams().getString("auto_deeplink_key_1"); launch_mode_txt.setText("Launched by Branch on auto deep linking!" + "\n\n" + autoDeeplinkedValue); } catch (JSONException e) { e.printStackTrace(); } } else { launch_mode_txt.setText("Launched by normal application flow"); } }
			Node:
			(type) c
			(layer)1
															Node:
															(type) c
															(layer)5
																Element:h5
																	Optional: Be notified when Activity finishes
															Node:
															(type) c
															(layer)5
																Element:p
																	You can be notified when the deep link activity finishes by using the onActivityResult parameter. Just check for the code you inserted in the Manifest.
															Node:
															(type) c
															(layer)5
																Element:pre
																Element:code
																	@Override protected void onActivityResult(int requestCode, int resultCode, Intent data) { super.onActivityResult(requestCode, resultCode, data); //Checking if the previous activity is launched on branch Auto deep link. if(requestCode == getResources().getInteger(R.integer.AutoDeeplinkRequestCode)){ //Decide here where to navigate when an auto deep linked activity finishes. //For e.g. Go to HomeActivity or a SignUp Activity. Intent i = new Intent(getApplicationContext(), CreditHistoryActivity.class); startActivity(i); } }
															Node:
															(type) c
															(layer)5
																Element:h4
																	Where to define your deep link keys
															Node:
															(type) c
															(layer)5
																Element:p
																	You can define the deep link metadata in the
																Element:code
																	Branch Universal Object
																	that you’ll create before creating a deep link.
															Node:
															(type) c
															(layer)5
																Element:pre
																Element:code
																	BranchUniversalObject branchUniversalObject = new BranchUniversalObject() .setCanonicalIdentifier("content/12345") .setTitle("My Content Title") .setContentDescription("My Content Description") .setContentImageUrl("https://example.com/mycontent-12345.png") .setContentIndexingMode(BranchUniversalObject.CONTENT_INDEX_MODE.PUBLIC) // Add the custom deep link keys and values as metadata .addContentMetadata("product_picture", "12345") .addContentMetadata("user_id", "6789");
															Node:
															(type) c
															(layer)5
																Element:h3
																	Alternate 2: Handle routing yourself in the Branch callback
															Node:
															(type) c
															(layer)5
																Element:p
																	This section will describe a routing example in an abstract way. In case you want the simple version, Branch can handle routing for you automatically. Just check out the section on
																Element:strong
																Element:a
																	simplified deep link routing
																	.
															Node:
															(type) c
															(layer)5
																Element:p
																	Inside
																Element:code
																	onStart
																	, when Branch is initialized, you will want to examine the dictionary we pass to you from our callback. Below is an example assuming that the links correspond to pictures.
															Node:
															(type) c
															(layer)5
																Element:pre
																Element:code
																	@Override public void onStart() { super.onStart(); Branch branch = Branch.getInstance(); // If NOT using automatic session management // Branch branch = Branch.getInstance(getApplicationContext()); branch.initSession(new BranchReferralInitListener(){ @Override public void onInitFinished(JSONObject referringParams, Branch.BranchError error) { if (error == null) { // params are the deep linked params associated with the link that the user clicked before showing up // params will be empty if no data found String pictureID = referringParams.optString("picture_id", ""); if (pictureID.equals("")) { startActivity(new Intent(this, HomeActivity.class)); } else { Intent i = new Intent(this, ViewerActivity.class); i.putExtra("picture_id", pictureID); startActivity(i); } } else { Log.e("MyApp", error.getMessage()); } } }, this.getIntent().getData(), this); }
															Node:
															(type) c
															(layer)5
																Element:h3
																	Supporting existing routes
															Node:
															(type) c
															(layer)5
																Element:p
																	You spent a bunch of time already setting up deeplink paths before you heard of Branch and now you want the Branch links to leverage them? No problem at all. You can either set
																Element:code
																	$deeplink_path
																	,
																Element:code
																	$ios_deeplink_path
																	or
																Element:code
																	$android_deeplink_path
																	to the URI path you’d like us to call.
															Node:
															(type) c
															(layer)5
																Element:p
																	All of the examples below will cause Branch to trigger
																Element:code
																	myapp://content/1234
																	:
															Node:
															(type) c
															(layer)5
																Element:h4
																	Dynamic link control
															Node:
															(type) c
															(layer)5
																Element:p
																	If you’re
																Element:a
																	creating links dynamically
																	, you simply need to append the parameters. For example:
															Node:
															(type) c
															(layer)5
																Element:pre
																Element:code
																	"https://bnc.lt/a/key_live_jbgnjxvlhSb6PGH23BhO4hiflcp3y7ky?$deeplink_path=content%2F1234"
															Node:
															(type) c
															(layer)5
																Element:h4
																	SDK/API link control
															Node:
															(type) c
															(layer)5
																Element:pre
																Element:code
																	LinkProperties linkProperties = new LinkProperties() .setChannel("facebook") .setFeature("sharing") .addControlParameter("$deeplink_path", "content/1234");
															Node:
															(type) c
															(layer)5
																Element:h4
																Element:a
																	Dashboard link control
															Node:
															(type) c
															(layer)5
																Element:p
																	You can also control it for individual marketing links by inserting the keys and values into the deep link data section.
															Node:
															(type) c
															(layer)5
																Element:p
																Element:img
															Node:
															(type) c
															(layer)5
																Element:hr
															Node:
															(type) c
															(layer)5
																Element:h2
																	Supported Sources and Connection Modes
															Node:
															(type) c
															(layer)5
																Element:table
																Element:tr
																Element:th
																Element:th
																	Web
																Element:th
																	Mobile
																Element:th
																	Server
																Element:tr
																Element:td
																	📱 Device-based
																Element:td
																Element:td
																	✅
																Element:td
																Element:tr
																Element:td
																	☁️ Cloud-based
																Element:td
																Element:td
																Element:td
															Node:
															(type) c
															(layer)5
																Element:p
																	To learn more about about Connection Modes and what dictates which we support,
																Element:a
																	see here
																	.
															Node:
															(type) c
															(layer)5
																Element:p
																	This integration
																Element:em
																	requires
																	a
																Element:strong
																	Device-based
																	Connection Mode for
																Element:strong
																	Mobile
																	data. Follow the steps above to ensure you have packaged the Branch Metrics SDK with Segment’s.
															Node:
															(type) c
															(layer)5
																Element:h2
																	Settings
															Node:
															(type) c
															(layer)5
																Element:p
																	Segment lets you change these integration settings via your Segment dashboard without having to touch any code.
															Node:
															(type) c
															(layer)5
																Element:h3
																	Branch Key
															Node:
															(type) c
															(layer)5
																Element:p
																	Your Branch app key can be retrieved on the settings page of the
																Element:a
																	Branch dashboard
																	.
															Node:
															(type) c
															(layer)5
																Element:hr
															Node:
															(type) c
															(layer)5
																Element:p
																	If you have any questions or see anywhere we can improve our documentation, please
																Element:a
																	let us know
																	or kick off a conversation in the
																Element:a
																	Segment Community
																	!
															Node:
															(type) c
															(layer)5
																Element:i
															Node:
															(type) c
															(layer)5
																Element:i
															Node:
															(type) c
															(layer)5
																Element:ul
																Element:li
															Node:
															(type) c
															(layer)5
																Element:span
																	Check out the code!
															Node:
															(type) c
															(layer)5
																Element:a
																	android
															Node:
															(type) c
															(layer)5
																Element:a
																	ios
