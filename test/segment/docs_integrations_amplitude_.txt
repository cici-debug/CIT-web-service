Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					Amplitude Integration
			Node:
			(type) c
			(layer)1
				Element:p
					Segment makes it easy to send your data to
				Element:a
					Amplitude
					(and lots of other integrations). Once you've tracked your data through our open source
				Element:a
					libraries
					we'll translate and route your data to Amplitude in the format they understand.
			Node:
			(type) c
			(layer)1
				Element:p
					Our Amplitude integration code is open sourced on Github. Feel free to check it out:
				Element:a
					iOS
					,
				Element:a
					Android
					,
				Element:a
					JS
					,
				Element:a
					Server
					.
			Node:
			(type) c
			(layer)1
				Element:p
					In addition to the docs below, Amplitude has created an
				Element:a
					integration guide
					.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Getting Started
						Node:
						(type) c
						(layer)2
							Element:p
								Once you’re tracking data to one of our
							Element:a
								sources
								, toggle Amplitude on in your Segment integrations, and add your application’s Amplitude
							Element:strong
								API Key
								in the Segment Integrations Page. You can find your Amplitude API Key in your
							Element:a
								Amplitude app settings
								.
						Node:
						(type) c
						(layer)2
							Element:hr
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Page
						Node:
						(type) c
						(layer)2
							Element:p
								By default Segment doesn’t send standard
							Element:a
								calls to Amplitude. However, if you include a
							Element:code
								page
							Element:code
								name
								argument in the call we do generate an event.
						Node:
						(type) c
						(layer)2
							Element:p
								Learn more about
							Element:a
								settings for
							Element:code
								page
							Element:a
								Amplitude
								. You can adjust these settings under the Advanced Options tab inside the Amplitude sheet on your Integrations page.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Screen
						Node:
						(type) c
						(layer)2
							Element:p
								Screen calls work very similarly to page calls. By default Segment doesn’t send standard
							Element:a
								calls to Amplitude. However, if you include a
							Element:code
								screen
							Element:code
								name
								argument in the call we do generate an event.
						Node:
						(type) c
						(layer)2
							Element:p
								Learn more about
							Element:a
								settings for
							Element:code
								screen
							Element:a
								Amplitude
								. You can adjust these settings under the Advanced Options tab inside the Amplitude sheet on your Integrations page.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Identify
						Node:
						(type) c
						(layer)2
							Element:p
								The next thing you’ll want to do is
							Element:a
								and
							Element:code
								identify
							Element:a
								your users, so that Amplitude can give you more user-centric data and insights into what your users are really doing.
							Element:code
								track
						Node:
						(type) c
						(layer)2
							Element:p
								When you call
							Element:a
								, we’ll set the
							Element:code
								identify
							Element:code
								userId
								as the Amplitude custom ID, and set any
							Element:code
								traits
								you provide as Amplitude custom properties.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:strong
								Important:
								If you’re using a server-side library or the Segment HTTP API to send events or traits about anonymous visitors using an
							Element:code
								anonymousId
								Amplitude won’t be able to connect the dots between that anonymous visitor and an identified visitor automatically. To connect the dots, the first time you call
							Element:code
								identify
								with a
							Element:code
								userId
								you’ll need to include both the
							Element:code
								userId
								and the
							Element:code
								anonymousId
								you were using to record data about that user before they had a
							Element:code
								userId
								.
						Node:
						(type) c
						(layer)2
							Element:p
								If you’re using our HTTP API the request will look like this:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								{ "userId": "123", "anonymousId": "a80b66d5-b86d-41bd-866f-fe04ee7841af", "traits": { "email": "derek@sivers.org", "name": "Derek Sivers", "industry": "Music" } }
						Node:
						(type) c
						(layer)2
							Element:p
							Element:strong
								Note:
								Amplitude first associates users based on
							Element:code
								context.device.id
								and if one is not present, by
							Element:code
								anonymousId
								as shown in our
							Element:a
								Amplitude integration code
								. For Amplitude to associate both client-side and server-side activity with the same user, you will need to pass the same
							Element:code
								deviceId
								to Amplitude. Otherwise, Amplitude will create two users - one associated with your
							Element:code
								deviceId
								and another user associated with your Segment
							Element:code
								anonymousId
								.
						Node:
						(type) c
						(layer)2
							Element:p
								You can grab
							Element:code
								deviceId
								from Amplitude by calling this method within the
							Element:a
								function on the client-side to send server-side:
							Element:code
								ready
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								analytics.ready(amplitude.options.deviceId);
						Node:
						(type) c
						(layer)2
							Element:p
								For server-side libraries check out the
							Element:code
								identify
								section in the
							Element:a
								sources you’re using
								.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Group
						Node:
						(type) c
						(layer)2
							Element:p
								You can use the
							Element:code
								group
								call to send group data to Amplitude. We will use pass the
							Element:code
								groupId
								as the value for “[Segment] << GROUPID >>”.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Track
						Node:
						(type) c
						(layer)2
							Element:p
								Amplitude’s main goal is to help you understand your user’s behavior. To accomplish that, you’ll want to
							Element:a
								your user’s actions.
							Element:code
								track
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Special Properties
									Node:
									(type) c
									(layer)3
										Element:p
											Amplitude supports a bunch of special properties, all of which are included in the example Segment
										Element:code
											track
											call below. The example shows the JSON object you’d need to use our
										Element:a
											HTTP API
											, but the same structure applies for
										Element:a
											any of our server-side libraries
											.
									Node:
									(type) c
									(layer)3
										Element:p
										Element:strong
											Note: for the special properties below you don’t need to manually map them if you use the out-of-the-box bundled client-side tracking in
										Element:a
											Analytics.js
											,
										Element:a
											iOS
											, or
										Element:a
											Android
											.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											{ "userId": "123", "event": "Subscription Started", "properties": { "plan": "Basic", "revenue": "32" }, "context": { "ip": "8.8.8.8", "device": { "id": "2b6f0cc904d137be2e1730235f5664094b831186", "model": "iPhone 6", "brand": "Apple", "manufacturer": "Apple" }, "os": { "name": "iOS", "version": "9.1" }, "network": { "carrier": "T-Mobile" }, "app": { "version": "3.5.1" }, "location": { "country": "United States", "region": "California", "city": "San Francisco", "latitude": "37.7672319", "longitude": "-122.4021353" }, "locale": { "language": "en-us" } } }
									Node:
									(type) c
									(layer)3
										Element:p
											For a complete list of special
										Element:code
											context
											keys see
										Element:a
											our common fields spec
											.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Revenue
									Node:
									(type) c
									(layer)3
										Element:p
											If you call
										Element:a
											from the client side, with a property labeled
										Element:code
											track
										Element:code
											revenue
											, we’ll call
										Element:code
											Amplitude.logRevenue
											with that amount (assuming the value is a number).
									Node:
									(type) c
									(layer)3
										Element:p
											From the server,
										Element:code
											revenue
											is simply mapped to
										Element:code
											revenue
											as Amplitude expects. For
										Element:code
											Order Completed
											events, you should pass a property labeled
										Element:code
											total
											per our
										Element:a
											e-commerce spec
											, and we’ll pass that value instead.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											deviceId
									Node:
									(type) c
									(layer)3
										Element:p
											To grab the value for the
										Element:code
											deviceId
											from Amplitude, you can use a
										Element:a
											ready function
											on the client like so:
									Node:
									(type) c
									(layer)3
										Element:p
										Element:code
											analytics.ready(amplitude.options.deviceId);
									Node:
									(type) c
									(layer)3
										Element:p
											You will then pass this to the
										Element:code
											context.device.id
											property. If you need to set this server-side, you will need to send in the value for the
										Element:code
											deviceId
											to your server and again, pass it through the
										Element:code
											context.device.id
											.
									Node:
									(type) c
									(layer)3
										Element:p
											You can see
										Element:a
											here
											that we are setting Amplitude’s
										Element:code
											device_id
											to the
										Element:code
											context.device.id
											value, or the
										Element:code
											anonymousId
											when one is not present.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											sessionId
									Node:
									(type) c
									(layer)3
										Element:p
											To set up the same
										Element:code
											sessionId
											for server-side and client-side calls, you will have to explicitly set the
										Element:a
											session_id
											as an option property like so:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											{ "userId": "1234", "traits": { "email": "someone@somewhere.com", "name": "Some Person", "industry": "Technology" }, "context": { "ip": "00.0.00.00" }, "timestamp": "2016-10-17T00:30:08.276Z", "integrations": { "Amplitude": { "session_id": "<Timestamp>" } } }
									Node:
									(type) c
									(layer)3
										Element:p
											You will need the start time of a session passed as
										Element:code
											<timestamp>
											.
										Element:a
											Segment doesn’t have a concept for a session
											, so you would have to handle defining when the session begins, and when it ends.
									Node:
									(type) c
									(layer)3
										Element:hr
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Supported Sources and Connection Modes
						Node:
						(type) c
						(layer)2
							Element:table
							Element:tr
							Element:th
							Element:th
								Web
							Element:th
								Mobile
							Element:th
								Server
							Element:tr
							Element:td
								📱 Device-based
							Element:td
								✅
							Element:td
								✅
							Element:td
							Element:tr
							Element:td
								☁️ Cloud-based
							Element:td
								✅
							Element:td
								✅
							Element:td
								✅
						Node:
						(type) c
						(layer)2
							Element:p
								To learn more about about Connection Modes and what dictates which we support,
							Element:a
								see here
								.
						Node:
						(type) c
						(layer)2
							Element:p
								We offer an optional
							Element:strong
								Cloud-based
								Connection Mode for
							Element:strong
								Web
								data with Amplitude. As a reminder, this removes the Amplitude javascript library from your site, improving performance. However, there are a few disparities between the Cloud-based and Device-based connection modes to keep in mind brefore enabling it in the Segment app. When you enable the
							Element:strong
								Cloud-based
								integration mode, here’s what happens:
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
								Server-side `identify` calls do not populate geolocation or timestamp (first and last seen) data. Amplitude has acknowledged and is developing a fix for this issue. In the interim, making a `track` call against an identified user will populate this data.
							Element:li
								Amplitude's JavaScript SDK automatically generates `[Amplitude] Revenue` and `[Amplitude] Revenue (Unverified)` events in the Amplitude UI for all e-commerce `track` calls; server-side `track` do not automatically generate these events. Amplitude has acknowledged and is developing a fix for this issue. In the interim, be aware that analysis workflows that depend on these events may not work as expected with a disabled JavaScript SDK.
							Element:li
								Segment's server-side Amplitude integration now respects "Track Named/Categorized/All Pages to Amplitude" settings (accessible in the Advanced Settings pane). This makes for a more consistent tracking experience across all platforms. If you are analyzing on page and screen views in Amplitude, be sure to enable these options before upgrading.
						Node:
						(type) c
						(layer)2
							Element:p
								Segment offers a
							Element:strong
								Device-based
								Connection Mode for
							Element:strong
								Mobile
								data with Amplitude. If you’d like to use those features that require client-based functionality, follow the steps above to ensure you have packaged the Amplitude SDK with Segment’s.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Settings
						Node:
						(type) c
						(layer)2
							Element:p
								Segment lets you change these integration settings via your Segment dashboard without having to touch any code.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											API Key
									Node:
									(type) c
									(layer)3
										Element:p
											You can find your API Key on your Amplitude
										Element:a
											Settings page
											.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Batch Events
									Node:
									(type) c
									(layer)3
										Element:p
											If true, events are batched together and uploaded only when the number of unsent events is greater than or equal to
										Element:code
											eventUploadThreshold
											or after
										Element:code
											eventUploadPeriodMillis
											milliseconds have passed since the first unsent event was logged.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Set Device ID From URL Parameter amp_device_id
									Node:
									(type) c
									(layer)3
										Element:p
											If true, the SDK will parse device ID values from url parameter
										Element:code
											amp_device_id
											if available.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Event Upload Period Millis (for batching events)
									Node:
									(type) c
									(layer)3
										Element:p
											Amount of time in milliseconds that the SDK waits before uploading events if
										Element:code
											batchEvents
											is
										Element:code
											true
											.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Event Upload Threshold (for batching events)
									Node:
									(type) c
									(layer)3
										Element:p
											Minimum number of events to batch together per request if
										Element:code
											batchEvents
											is
										Element:code
											true
											.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Force Https
									Node:
									(type) c
									(layer)3
										Element:p
											If true, the events will always be uploaded to HTTPS endpoint. Otherwise the SDK will use the embedding site’s protocol.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Save Referrer, URL Params, GCLID Once Per Session
									Node:
									(type) c
									(layer)3
										Element:p
											If true then includeGclid, includeReferrer, and includeUtm will only track their respective properties once per session. New values that come in during the middle of the user’s session will be ignored. Set to false to always capture new values.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Track All Pages to Amplitude
									Node:
									(type) c
									(layer)3
										Element:p
											This will track
										Element:strong
											Loaded a Page
											events to Amplitude for all
										Element:a
											calls. We keep this disabled by default, since Amplitude isn’t generally used for pageview tracking.
										Element:code
											page
											method
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Track Categorized Pages to Amplitude
									Node:
									(type) c
									(layer)3
										Element:p
											This will track events to Amplitude for
										Element:a
											calls that have a
										Element:code
											page
											method
										Element:code
											category
											associated with them. For example
										Element:code
											page('Docs', 'Index')
											would translate to
										Element:strong
											Viewed Docs Page
											.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Track GCLID
									Node:
									(type) c
									(layer)3
										Element:p
											If true, captures the gclid url parameter as well as the user’s initial_gclid via a set once operation.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Track Named Pages to Amplitude
									Node:
									(type) c
									(layer)3
										Element:p
											This will track events to Amplitude for
										Element:a
											calls that have a
										Element:code
											page
											method
										Element:code
											name
											associated with them. For example
										Element:code
											page('Signup')
											would translate to
										Element:strong
											Viewed Signup Page
											. Remember that
										Element:code
											name
											includes
										Element:code
											category
											, so
										Element:code
											page('Conversion', 'Signup')
											would translate to a
										Element:strong
											Viewed Conversion Signup Page
											event in Amplitude.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Track Referrer to Amplitude
									Node:
									(type) c
									(layer)3
										Element:p
											Enabling this will send referrer information as a user property to Amplitude.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Track Session Events to Amplitude
									Node:
									(type) c
									(layer)3
										Element:p
											This will enable the sending of start and end session events to Amplitude, which are no longer sent by default (only for mobile libraries).
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Track UTM Properties to Amplitude.
									Node:
									(type) c
									(layer)3
										Element:p
											This will track UTM properties found in the querystring to Amplitude (only for browser).
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Use Amplitude logRevenueV2.
									Node:
									(type) c
									(layer)3
										Element:p
											Use Amplitude’s logRevenueV2 API, which allows for the tracking of event properties with the revenue event. Track an event with “price” and “quantity” properties, and it will log total revenue = price * quantity. You may also set a revenueType property to designate the type of revenue (ex: purchase, refund, etc). Negative prices can be used to indicate revenue lost.
									Node:
									(type) c
									(layer)3
										Element:hr
									Node:
									(type) c
									(layer)3
										Element:p
											If you have any questions or see anywhere we can improve our documentation, please
										Element:a
											let us know
											or kick off a conversation in the
										Element:a
											Segment Community
											!
									Node:
									(type) c
									(layer)3
										Element:i
									Node:
									(type) c
									(layer)3
										Element:i
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
									Node:
									(type) c
									(layer)3
										Element:span
											Check out the code!
									Node:
									(type) c
									(layer)3
										Element:a
											android
									Node:
									(type) c
									(layer)3
										Element:a
											browser
									Node:
									(type) c
									(layer)3
										Element:a
											ios
									Node:
									(type) c
									(layer)3
										Element:a
											server
