Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					TUNE Integration
			Node:
			(type) c
			(layer)1
				Element:p
					Segment makes it easy to send your data to
				Element:a
					TUNE
					(and lots of other integrations). Once you've tracked your data through our open source
				Element:a
					libraries
					we'll translate and route your data to TUNE in the format they understand.
			Node:
			(type) c
			(layer)1
				Element:p
					Tune’s main goal is to help attribute mobile app events to the advertisements that a customer interacted with. We take care of sending those mobile events to MAT so that they can be reconciled with ad views. The attributed data can then be
				Element:a
					routed
					back into other tools that you have enabled in Segment.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Getting Started
						Node:
						(type) c
						(layer)2
							Element:p
								Once you’re tracking data from one of our
							Element:a
								mobile libraries
								, toggle Tune on in your Segment integrations, and add your application’s Tune
							Element:strong
								Advertiser ID
								in the Segment Integrations Page. In your Tune account, ensure that new apps are created dynamically by selecting ‘Enabled’ under Application > Settings > Create New Apps Dynamically.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								SDK version
						Node:
						(type) c
						(layer)2
							Element:p
								The MAT integration requires that a package name / bundle identifier be sent in all calls. To meet this requirement, ensure that you are using our latest Android SDK (3.0.1+) and our iOS SDKs (1.11.12+). On Android and iOS, this will automatically add the
							Element:code
								context.app.namespace
								parameter to your calls, which represents the developer name of your mobile application. In Xamarin, however, you have to populate this value manually. A sample call in node.js may look like:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								analytics.track({ "userId": "abcd9435db2d4b53c94fb4b688a63fab", "event": "Opened App" "properties": {}, "context": { "device": { "manufacturer": "Apple", "model": "iPhone7,2", "idfv": "A3D261E4-DE0A-470B-9E4A-720F3D3D22E6", "type": "ios" }, "os": { "name": "iPhone OS", "version": "8.1.1" }, "app": { "name": "Test App", "namespace": "com.segment.testapp", "version": "2.1.1", "build": "2.1.1.4" }, "library": { "name": "analytics-ios", "version": "1.6.11" }, "locale": "en-US", "traits": {}, "network": { "bluetooth": true, "carrier": "AT&T" }, "ip": "70.128.91.158" } })
						Node:
						(type) c
						(layer)2
							Element:hr
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Track
						Node:
						(type) c
						(layer)2
							Element:p
								To track the effectiveness of a mobile ad campaign, you’ll want to
							Element:a
								key conversion events. For example, you might want to track when your app is opened for the first time to measure install attribution. This integration recognizes six special events (listed below), as well any custom events you wish to track.
							Element:code
								track
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
														Opened App
												Node:
												(type) c
												(layer)4
													Element:p
														Install attribution is the most common use case for mobile attribution tools. To send this event to MAT, send a track call from your mobile application when the app is opened with the event name
													Element:code
														Opened App
														. MAT will take care of determining whether this is a first-time install, open, or update.
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
														Viewed Product
												Node:
												(type) c
												(layer)4
													Element:p
													Element:code
														Viewed Product
														is a special event from our
													Element:a
														e-commerce API
														. This will appear in MAT as a
													Element:code
														Content View
														event.
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
														Added Product
												Node:
												(type) c
												(layer)4
													Element:p
													Element:code
														Added Product
														is a special event from our
													Element:a
														e-commerce API
														. This will appear in MAT as an
													Element:code
														Add to Cart
														event.
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
														Wishlisted Product
												Node:
												(type) c
												(layer)4
													Element:p
													Element:code
														Wishlisted Product
														is a special event from our
													Element:a
														e-commerce API
														. This will appear in MAT as an
													Element:code
														Add to Wishlist
														event.
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
														Viewed Checkout
												Node:
												(type) c
												(layer)4
													Element:p
													Element:code
														Viewed Checkout
														is a special event from our
													Element:a
														e-commerce API
														. This will appear in MAT as a
													Element:code
														Checkout Initiated
														event.
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
														Completed Order
												Node:
												(type) c
												(layer)4
													Element:p
													Element:code
														Order Completed
														is a special event from our
													Element:a
														e-commerce API
														. This will appear in MAT as a
													Element:code
														Purchase
														event.
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
														Other
												Node:
												(type) c
												(layer)4
													Element:p
														If you send an event with a name not included in the list above, Segment will send it to MAT as a generic conversion event. You can then assign those events to pre-defined event categories in MAT.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Identify
						Node:
						(type) c
						(layer)2
							Element:p
								If your app also has user accounts, you may want to
							Element:a
								these users when they login. This will appear in MAT as a
							Element:code
								identify
							Element:code
								Login
								event.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Postbacks
						Node:
						(type) c
						(layer)2
							Element:p
								In addition to sending data to MAT to be attributed, Segment allows you to route that data back into other tools that you have enabled. For example, you might want to use a particular analytics tool’s dashboards to compare the different channels of your mobile ad campaign. To do this, enable postbacks in MAT and provide them with your source write key, as explained in
							Element:a
								Tune’s documentation
								.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Troubleshooting
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
														iOS Setup
												Node:
												(type) c
												(layer)4
													Element:p
														To ensure that our iOS SDK is properly sending device information, make sure you are using the AdSupport Framework. You can verify this by checking if
													Element:code
														context.device.advertisingId
														(formerly
													Element:code
														context.device.idfa
														) is getting set in your source’s debugger (check raw format).
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
														Xamarin Setup
												Node:
												(type) c
												(layer)4
													Element:p
														Because device-specific information is automatically sent in the
													Element:code
														track.context
														dictionary, MAT is able to attribute events like app installs and re-engagement. On iOS and Android devices, this device information is picked up automatically by the Segment SDK. Our
													Element:a
														Xamarin library
														, however, is a
													Element:a
														Portable Class Library
														, which means that it cannot access the same information as the native libraries. This requires a little more work to get it working.
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
														Xamarin.iOS
												Node:
												(type) c
												(layer)4
													Element:p
														For iOS apps built with Xamarin, you need to set the
													Element:code
														context.device.advertisingId
														field to the Apple advertising identifier, and the
													Element:code
														context.device.adTrackingEnabled
														boolean to indicate whether ad tracking is supported.
												Node:
												(type) c
												(layer)4
													Element:p
														You can retrieve these values by adding the following directive to your
													Element:code
														.cs
														file:
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														using MonoTouch.AdSupport;
												Node:
												(type) c
												(layer)4
													Element:p
														And access the values as:
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														ASIdentifierManager.SharedManager.AdvertisingIdentifier ASIdentifierManager.SharedManager.IsAdvertisingTrackingEnabled
												Node:
												(type) c
												(layer)4
													Element:p
														An example track call might look like this:
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														Analytics.Client.Track("019mr8mf4r", "Opened App", new Properties() { ... }, new Options() .SetContext(new Context() { { "device", new Dict() { { "advertisingId", ASIdentifierManager.SharedManager.AdvertisingIdentifier }, { "adTrackingEnabled", ASIdentifierManager.SharedManager.IsAdvertisingTrackingEnabled } } }));
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
														Xamarin.Android
												Node:
												(type) c
												(layer)4
													Element:p
														For Android apps built with Xamarin, you first need to add the Google Play Services component through the Xamarin Component Store
													Element:code
														(Project -> Get More Components)
														. You then need to set the
													Element:code
														context.device.advertisingId
														field to the Google Advertising ID and
													Element:code
														context.device.adTrackingEnabled
														to the ad tracking boolean for each call.
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														using Android.Gms.Ads.Identifier; using Android.Gms.Common; AdvertisingIdClient.Info adInfo = AdvertisingIdClient.GetAdvertisingIdInfo(this.ApplicationContext); Analytics.Client.Track("019mr8mf4r", "Opened App", new Properties() { ... }, new Options() .SetContext(new Context() { { "device", new Dict() { { "advertisingId", adInfo.Id }, { "adTrackingEnabled", adInfo.IsLimitAdTrackingEnabled } } }));
												Node:
												(type) c
												(layer)4
													Element:hr
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Supported Sources and Connection Modes
						Node:
						(type) c
						(layer)2
							Element:table
							Element:tr
							Element:th
							Element:th
								Web
							Element:th
								Mobile
							Element:th
								Server
							Element:tr
							Element:td
								📱 Device-based
							Element:td
							Element:td
								✅
							Element:td
							Element:tr
							Element:td
								☁️ Cloud-based
							Element:td
								✅
							Element:td
								✅
							Element:td
								✅
						Node:
						(type) c
						(layer)2
							Element:p
								To learn more about about Connection Modes and what dictates which we support,
							Element:a
								see here
								.
						Node:
						(type) c
						(layer)2
							Element:p
								Segment offers a
							Element:strong
								Device-based
								Connection Mode for
							Element:strong
								Mobile
								data with TUNE. If you’d like to use those features that require client-based functionality, follow the steps above to ensure you have packaged the TUNE SDK with Segment’s.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Settings
						Node:
						(type) c
						(layer)2
							Element:p
								Segment lets you change these integration settings via your Segment dashboard without having to touch any code.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Advertiser ID
									Node:
									(type) c
									(layer)3
										Element:p
											You can find your Advertiser ID in your TUNE account under Accounts > Advertiser Account
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Advanced Event Property Mappings
									Node:
									(type) c
									(layer)3
										Element:p
											If you have any event properties that you would like to map to TUNE custom event attributes on a per-event basis, you can specify them here.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Consumer Key
									Node:
									(type) c
									(layer)3
										Element:p
										Element:em
											Required for Server to Server Integration
											. This is the public key that will be included with each request so the Private Key used to create the signature can be identified. Please contact your TUNE account manager to get your consumer key.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Conversion Key
									Node:
									(type) c
									(layer)3
										Element:p
										Element:em
											Required for Client Side Integration.
											You can find your Conversion Key in your TUNE account.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Custom Event Attributes
									Node:
									(type) c
									(layer)3
										Element:p
											If you have any event properties that you would like to map to TUNE custom event attributes for all events, please specify them here. You may override any of these on a per-event basis in Advanced Settings.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Private Key
									Node:
									(type) c
									(layer)3
										Element:p
										Element:em
											Required for Server to Server Integration
											. This is the Private key that will be used to generate the signature on both the client and server but will not be included in the request. Please contact your TUNE account manager to get your private key.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Custom Item Attributes
									Node:
									(type) c
									(layer)3
										Element:p
											If you have any product properties that you would like to map to item-scoped custom attributes inside
										Element:code
											site_event_items
											for your ecommerce events, please specify them here.
									Node:
									(type) c
									(layer)3
										Element:hr
									Node:
									(type) c
									(layer)3
										Element:p
											If you have any questions or see anywhere we can improve our documentation, please
										Element:a
											let us know
											or kick off a conversation in the
										Element:a
											Segment Community
											!
									Node:
									(type) c
									(layer)3
										Element:i
									Node:
									(type) c
									(layer)3
										Element:i
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
									Node:
									(type) c
									(layer)3
										Element:span
											Check out the code!
									Node:
									(type) c
									(layer)3
										Element:a
											android
									Node:
									(type) c
									(layer)3
										Element:a
											ios
									Node:
									(type) c
									(layer)3
										Element:a
											server
