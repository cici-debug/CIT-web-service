Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					analytics.js
			Node:
			(type) c
			(layer)1
				Element:p
					analytics.js makes it dead simple to send your data to any tool without having to learn, test or implement a new API every time.
			Node:
			(type) c
			(layer)1
				Element:p
					All of our libraries are open source, and you can
				Element:a
					view
					.
				Element:code
					analytics.js
					on Github
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Getting Started
						Node:
						(type) c
						(layer)2
							Element:p
								Head over to our
							Element:a
								which will help you implement analytics.js on your site in just a few minutes. Once you’ve installed the library, read on for the detailed API reference!
							Element:code
								analytics.js
								QuickStart Guide
						Node:
						(type) c
						(layer)2
							Element:p
								Want to stay updated on releases? Subscribe to the
							Element:a
								release feed
								.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Identify
						Node:
						(type) c
						(layer)2
							Element:p
								The
							Element:code
								identify
								method is how you associate your users and their actions to a recognizable
							Element:code
								userId
								and
							Element:code
								traits
								. You can see
							Element:a
								an
								or
							Element:code
								identify
								example in the guide
							Element:a
								find details on the identify method payload
								.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:strong
								Note:
								We recommend against using
							Element:code
								identify
								for anonymous visitors to your site.
							Element:code
								analytics.js
								automatically retrieves an
							Element:code
								anonymousId
								from localStorage or assigns one for new visitors. It will be attached to all
							Element:code
								page
								and
							Element:code
								track
								events both before and after an
							Element:code
								identify
								.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								identify
								method definition::
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								analytics.identify([userId], [traits], [options], [callback]);
						Node:
						(type) c
						(layer)2
							Element:p
								The
							Element:code
								identify
								call has the following fields:
						Node:
						(type) c
						(layer)2
							Element:table
							Element:tr
							Element:td
							Element:code
								userId
								optional
							Element:td
								String
							Element:td
								The database ID for the user. If you don’t know who the user is yet, you can omit the
							Element:code
								userId
								and just record
							Element:code
								traits
								. You can read more about identities in the
							Element:a
								identify reference
								.
							Element:tr
							Element:td
							Element:code
								traits
								optional
							Element:td
								Object
							Element:td
								A dictionary of traits you know about the user, like their
							Element:code
								email
								or
							Element:code
								name
								. You can read more about traits in the
							Element:a
								identify reference
								.
							Element:tr
							Element:td
							Element:code
								options
								optional
							Element:td
								Object
							Element:td
								A dictionary of options. For example,
							Element:a
								enable or disable specific integrations
								for the call.
							Element:em
								Note: If you do not pass a
							Element:em
								traits
								object, pass an empty object (ie, ‘{}’) before
							Element:em
								options
							Element:tr
							Element:td
							Element:code
								callback
								optional
							Element:td
								Function
							Element:td
								A function that is executed after a short timeout, giving the browser time to make outbound requests first.
						Node:
						(type) c
						(layer)2
							Element:p
								By default, traits are cached in the browser’s local storage and attached to each subsequent identify call. For example, you might do that when someone signs up for a newsletter but hasn’t yet created an account on your site:
						Node:
						(type) c
						(layer)2
							Element:p
								Example
							Element:code
								identify
								with hard-coded information:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								analytics.identify({ nickname: 'Amazing Grace', favoriteCompiler: 'A-0', industry: 'Computer Science' });
						Node:
						(type) c
						(layer)2
							Element:p
								and when the user completes signup:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								analytics.identify('12091906-01011992', { name: 'Grace Hopper', email: 'grace@usnavy.gov' });
						Node:
						(type) c
						(layer)2
							Element:p
								The traits object for the second call will also include
							Element:code
								nickname
								,
							Element:code
								favoriteCompiler
								, and
							Element:code
								industry
								.
						Node:
						(type) c
						(layer)2
							Element:p
								You may omit both traits and options—-passing the callback as the second argument if
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								analytics.identify('12091906-01011992', function(){ // Do something after the identify request has been sent // Note: site-critical functionality should not depend on your analytics provider });
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Track
						Node:
						(type) c
						(layer)2
							Element:p
								The
							Element:code
								track
								method lets you record any actions your users perform. You can
							Element:a
								see a track example in the guide
								or find details on
							Element:a
								the track method payload
								.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								track
								method definition:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								analytics.track(event, [properties], [options], [callback]);
						Node:
						(type) c
						(layer)2
							Element:p
								The
							Element:code
								track
								call has the following fields:
						Node:
						(type) c
						(layer)2
							Element:table
							Element:tr
							Element:td
							Element:code
								event
							Element:td
								String
							Element:td
								The name of the event you’re tracking. You can read more about the
							Element:a
								track method
								and what event names we recommend.
							Element:tr
							Element:td
							Element:code
								properties
								optional
							Element:td
								Object
							Element:td
								A dictionary of
							Element:a
								properties
								for the event. If the event was
							Element:code
								'Added to Cart'
								, it might have properties like
							Element:code
								price
								and
							Element:code
								productType
								.
							Element:tr
							Element:td
							Element:code
								options
								optional
							Element:td
								Object
							Element:td
								A dictionary of options. For example,
							Element:a
								enable or disable specific integrations
								for the call.
							Element:em
								Note: If you do not pass a
							Element:em
								properties
								object, pass an empty object (ie, ‘{}’) before
							Element:em
								options
							Element:tr
							Element:td
							Element:code
								callback
								optional
							Element:td
								Function
							Element:td
								A function that is executed after a short timeout, giving the browser time to make outbound requests first.
						Node:
						(type) c
						(layer)2
							Element:p
								The only required argument to track in
							Element:code
								analytics.js
								is an event name string. You can read more about
							Element:a
								how we recommend naming your events
								.
						Node:
						(type) c
						(layer)2
							Element:p
								Example
							Element:code
								track
								call:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								analytics.track('Article Completed', { title: 'How to Create a Tracking Plan', course: 'Intro to Analytics', });
						Node:
						(type) c
						(layer)2
							Element:p
								For more information about choosing which events to track, event naming and more, check out
							Element:a
								Analytics Academy
						Node:
						(type) c
						(layer)2
							Element:p
								The only required argument to
							Element:code
								track
								in
							Element:code
								analytics.js
								is an
							Element:code
								event
								name string. Read more about how we recommend
							Element:a
								naming your events
								.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Page
						Node:
						(type) c
						(layer)2
							Element:p
								The
							Element:a
								method lets you record page views on your website, along with optional extra information about the page being viewed.
							Element:code
								page
						Node:
						(type) c
						(layer)2
							Element:p
								Because some integrations require a
							Element:code
								page
								call to instantiate their libraries,
							Element:strong
								you must call
								at least once per page load! You may call it more than once if needed, (eg, on virtual page changes in a single page app).
							Element:code
								page
						Node:
						(type) c
						(layer)2
							Element:p
								A
							Element:code
								page
								call is included by default as the final line in the
							Element:code
								analytics.js
							Element:a
								snippet
								. You may modify this
							Element:code
								page
								call within the guidelines below.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								page
								method definition:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								analytics.page([category], [name], [properties], [options], [callback]);
						Node:
						(type) c
						(layer)2
							Element:p
								The
							Element:code
								page
								call has the following fields:
						Node:
						(type) c
						(layer)2
							Element:table
							Element:tr
							Element:td
							Element:code
								category
								optional
							Element:td
								String
							Element:td
								The category of the page. Useful for cases like ecommerce where many pages might live under a single category.
							Element:em
								Note: if you pass only one string to
							Element:code
								page
								it is assumed to be
							Element:code
								name
								. You
							Element:strong
								must
								include a
							Element:code
								name
								to send a
							Element:code
								category
								.
							Element:tr
							Element:td
							Element:code
								name
								optional
							Element:td
								String
							Element:td
								The name of the page.
							Element:tr
							Element:td
							Element:code
								properties
								optional
							Element:td
								Object
							Element:td
								A dictionary of properties of the page. Note:
							Element:code
								url
								,
							Element:code
								title
								,
							Element:code
								referrer
								and
							Element:code
								path
								are collected automatically! Additionally this defaults to a
							Element:code
								canonical url
								, if available, and falls back to
							Element:code
								document.location.href
								.
							Element:tr
							Element:td
							Element:code
								options
								optional
							Element:td
								Object
							Element:td
								A dictionary of options. For example,
							Element:a
								enable or disable specific integrations
								for the call.
							Element:em
								Note: If you do not pass a
							Element:code
								properties
								object, pass an empty object (ie, ‘{}’) before
							Element:code
								options
							Element:tr
							Element:td
							Element:code
								callback
								optional
							Element:td
								Function
							Element:td
								A function that is executed after a short timeout, giving the browser time to make outbound requests first.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Default Properties
									Node:
									(type) c
									(layer)3
										Element:p
											A few properties are automatically added to each
										Element:code
											page
											call.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											analytics.page('Pricing');
									Node:
									(type) c
									(layer)3
										Element:p
											We will translate that to the following without any extra work from you:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											analytics.page('Pricing', { title: 'Segment Pricing', url: 'https://segment.com/pricing', path: '/pricing', referrer: 'https://segment.com/warehouses' });
									Node:
									(type) c
									(layer)3
										Element:p
											You can override these values. For example:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											analytics.page('Pricing', { title: 'My Overridden Title', path: '/pricing/view' });
									Node:
									(type) c
									(layer)3
										Element:p
											Will be translated to:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											analytics.page('Pricing', { title: 'My Overridden Title', url: 'https://segment.com/pricing', path: '/pricing/view', referrer: 'https://segment.com/warehouses' });
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Group
						Node:
						(type) c
						(layer)2
							Element:p
								The
							Element:code
								group
								method associates an
							Element:a
								identified user
								with a company, organization, project, workspace, team, tribe, platoon, assemblage, cluster, troop, gang, party, society or any other name you came up with for the same concept.
						Node:
						(type) c
						(layer)2
							Element:p
								This is useful for tools like
							Element:a
								Intercom
								,
							Element:a
								Preact
								and
							Element:a
								Totango
								, as it ties the user to a
							Element:strong
								group
								of other users.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								group
								method definition:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								analytics.group(groupId, [traits], [options], [callback]);
						Node:
						(type) c
						(layer)2
							Element:p
								The
							Element:code
								group
								call has the following fields:
						Node:
						(type) c
						(layer)2
							Element:table
							Element:tr
							Element:td
							Element:code
								groupId
							Element:td
								String
							Element:td
								The Group ID to associate with the current user.
							Element:tr
							Element:td
							Element:code
								traits
								optional
							Element:td
								Object
							Element:td
								A dictionary of
							Element:a
								traits
								for the group. Example traits for a group include
							Element:code
								address
								,
							Element:code
								website
								and
							Element:code
								employees
								.
							Element:tr
							Element:td
							Element:code
								options
								optional
							Element:td
								Object
							Element:td
								A dictionary of options. For example,
							Element:a
								enable or disable specific integrations
								for the call.
							Element:em
								Note: If you do not pass a
							Element:code
								properties
								object, pass an empty object (ie, ‘{}’) before
							Element:code
								options
							Element:tr
							Element:td
							Element:code
								callback
								optional
							Element:td
								Function
							Element:td
								A function that is executed after a short timeout, giving the browser time to make outbound requests first.
						Node:
						(type) c
						(layer)2
							Element:p
								Example
							Element:code
								group
								call:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								analytics.group('UNIVAC Working Group', { principles: ['Eckert', 'Mauchly'], site: 'Eckert–Mauchly Computer Corporation', statedGoals: 'Develop the first commercial computer', industry: 'Technology' });
						Node:
						(type) c
						(layer)2
							Element:p
								By default, group
							Element:code
								traits
								are cached in the browser’s local storage and attached to each subsequent
							Element:code
								group
								call, similar to
							Element:code
								identify
								method behavior.
						Node:
						(type) c
						(layer)2
							Element:p
								Find more details about
							Element:code
								group
								including the
							Element:strong
								in our
							Element:code
								group
								payload
							Element:a
								Spec
								.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Alias
						Node:
						(type) c
						(layer)2
							Element:p
								The
							Element:code
								alias
								method combines two previously unassociated user identities. Aliasing is generally handled automatically when you
							Element:code
								identify
								a user. However, some tools will require an explicit
							Element:code
								alias
								call.
						Node:
						(type) c
						(layer)2
							Element:p
								This is an advanced method, but it is required to manage user identities successfully in
							Element:em
								some
								of our integrations. Most notably, alias is necessary for properly implementing
							Element:a
								KISSmetrics
								and
							Element:a
								Mixpanel
								.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								alias
								method definition:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								analytics.alias(userId, [previousId], [options], [callback]);
						Node:
						(type) c
						(layer)2
							Element:p
								The
							Element:code
								alias
								call has the following fields:
						Node:
						(type) c
						(layer)2
							Element:table
							Element:tr
							Element:td
							Element:code
								userId
							Element:td
								String
							Element:td
								The new user ID you want to associate with the user.
							Element:tr
							Element:td
							Element:code
								previousId
								optional
							Element:td
								String
							Element:td
								The previous ID that the user was recognized by. This defaults to the currently identified user’s ID.
							Element:tr
							Element:td
							Element:code
								options
								optional
							Element:td
								Object
							Element:td
								A dictionary of options. For example,
							Element:a
								enable or disable specific integrations
								for the call.
							Element:tr
							Element:td
							Element:code
								callback
								optional
							Element:td
								Fucntion
							Element:td
								A function that is executed after a short timeout, giving the browser time to make outbound requests first.
						Node:
						(type) c
						(layer)2
							Element:p
								For more details about
							Element:code
								alias
								, including the
							Element:strong
								, check out our
							Element:code
								alias
								call payload
							Element:a
								Spec
								.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Ready
						Node:
						(type) c
						(layer)2
							Element:p
								The
							Element:code
								ready
								method allows you to pass in a callback that will be called as soon as all of your enabled integrations have loaded and
							Element:code
								analytics.js
								has completed initialization.. It’s like jQuery’s ready method, except for integrations.
						Node:
						(type) c
						(layer)2
							Element:p
								Code inside this function will only be executed after
							Element:code
								ready
								has been emitted.
						Node:
						(type) c
						(layer)2
							Element:p
								If you would like to access end-tool library methods that do not match any
							Element:code
								analytics.js
								methods, like adding an extra setting to Mixpanel, you can use a ready callback so that you’re guaranteed to have access to the Mixpanel object, like so:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								analytics.ready(function() { window.mixpanel.set_config({ verbose: true }); });
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								ready
								method definition:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								analytics.ready(callback);
						Node:
						(type) c
						(layer)2
							Element:p
								The
							Element:code
								ready
								method has the following fields:
						Node:
						(type) c
						(layer)2
							Element:table
							Element:tr
							Element:td
							Element:code
								callback
							Element:td
								Function
							Element:td
								A function to be executed after all enabled integrations have loaded.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Querystring API
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								analytics.js
								can trigger track and identify events based on the URL querystring. This is helpful for tracking email click throughs, social media clicks, and digital advertising as well as for cross-domain tracking.
						Node:
						(type) c
						(layer)2
							Element:p
								Here are the query parameters to use:
						Node:
						(type) c
						(layer)2
							Element:table
							Element:thead
							Element:tr
							Element:th
								param
							Element:th
								description
							Element:th
								triggers
							Element:tbody
							Element:tr
							Element:td
							Element:code
								ajs_uid
							Element:td
								The userId to pass to an identify call.
							Element:td
								This will trigger an
							Element:code
								identify
								call.
							Element:tr
							Element:td
							Element:code
								ajs_event
							Element:td
								The event name to pass to a track call.
							Element:td
								This will trigger a
							Element:code
								track
								call.
							Element:tr
							Element:td
							Element:code
								ajs_aid
							Element:td
								The anonymousId to set for the user.
							Element:td
								This will trigger an
							Element:code
								analytics.user().anonymousId()
								call.
							Element:tr
							Element:td
							Element:code
								ajs_prop_<property>
							Element:td
								A property to pass to the track call
							Element:td
								This won’t implicitly trigger an event and is dependent on you also passing
							Element:code
								ajs_event
								- this property will be included in the resulting
							Element:code
								track
								call
							Element:tr
							Element:td
							Element:code
								ajs_trait_<trait>
							Element:td
								A trait to pass to the identify call
							Element:td
								This won’t implicitly trigger any call and is dependent on you also passing
							Element:code
								ajs_uid
								- this trait will be included in the resulting
							Element:code
								identify
								call
						Node:
						(type) c
						(layer)2
							Element:p
								So for example, with this URL:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								http://segment.com/?ajs_uid=123456789abcd&ajs_event=Clicked%20Email&ajs_aid=abc123&ajs_prop_emailCampaign=First+Touch&ajs_trait_name=Karl+Jr.
						Node:
						(type) c
						(layer)2
							Element:p
								it would trigger the following events on the page:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								analytics.identify('123456789abcd', { name: 'Karl Jr.' }); analytics.track('Clicked Email', { 'emailCampaign': 'First Touch' }); analytics.user().anonymousId('abc123');
						Node:
						(type) c
						(layer)2
							Element:p
								You can pass up to
							Element:strong
								one of each trigger parameter
								as shown in the example above.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Selecting Integrations
						Node:
						(type) c
						(layer)2
							Element:p
								An
							Element:code
								integrations
								object may be passed in the
							Element:code
								options
								of
							Element:code
								alias
								,
							Element:code
								group
								,
							Element:code
								identify
								,
							Element:code
								page
								and
							Element:code
								track
								methods, allowing selective integration filtering. By default all integrations are enabled.
						Node:
						(type) c
						(layer)2
							Element:p
								An example showing how to send data only to Intercom and Google Analytics:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								analytics.identify('025pikachu025', { email: 'peekAtMe@email.poke', name: 'Pikachu', type: 'electric' }, { integrations: { 'All': false, 'Intercom': true, 'Google Analytics': true } });
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								'All': false
								flags that no integration should receive data.
						Node:
						(type) c
						(layer)2
							Element:p
								Integration flags are
							Element:strong
								case sensitive
								and match
							Element:a
								the integration’s name in the docs
								(i.e. “AdLearn Open Platform”, “awe.sm”, “MailChimp”, etc.).
						Node:
						(type) c
						(layer)2
							Element:p
							Element:strong
								Note:
								Available at the business plan level, filtering
							Element:code
								track
								calls can be done right from the Segment UI on your source schema page. We recommend using the UI if possible since it’s a much simpler way of managing your filters and can be updated with no code changes on your side.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								User & Group Information
						Node:
						(type) c
						(layer)2
							Element:p
								Once
							Element:code
								analytics.js
								is loaded, executing the
							Element:code
								user
								or
							Element:code
								group
								method functions will return information about the currently identified user or group.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:strong
								Note:
								To ensure these methods are available, wrap any reference to
							Element:code
								user()
								or
							Element:code
								group()
								in a
							Element:a
								ready function block
								.
						Node:
						(type) c
						(layer)2
							Element:p
								Examples:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								analytics.ready(function() { var user = analytics.user(); var id = user.id(); var traits = user.traits(); });
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								analytics.ready(function() { var group = analytics.group(); var id = group.id(); var traits = group.traits(); });
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Clearing Traits
									Node:
									(type) c
									(layer)3
										Element:p
											Passing an empty object to the
										Element:code
											traits
											object will clear all cached traits for a User or Group. Remember,
										Element:code
											traits
											are cached by default by
										Element:code
											identify
											and
										Element:code
											group
											methods You can clear the
										Element:code
											traits
											object for the user or group by passing
										Element:code
											traits
											an empty object:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											analytics.user().traits({});
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											analytics.group().traits({});
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Reset / Logout
									Node:
									(type) c
									(layer)3
										Element:p
											Calling
										Element:code
											reset
											will reset the
										Element:code
											id
											, including anonymousId, and clear
										Element:code
											traits
											for the currently identified user and group.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											analytics.reset();
									Node:
									(type) c
									(layer)3
										Element:p
											Note: The reset method only clears the cookies/localStorage set by Segment, not the those of integrated end-tools, as their native libraries might set their own cookies to manage user tracking, sessions, and manage state. To completely clear out the user session, check the documentation provided by those tools.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Anonymous ID
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								analytics.js
								generates a UUID and sets this as
							Element:code
								anonymousId
								for all new visitors to your site.
						Node:
						(type) c
						(layer)2
							Element:p
								Example:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								ajs_anonymous_id=%2239ee7ea5-b6d8-4174-b612-04e1ef3fa952
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Retrieving the Anonymous ID
									Node:
									(type) c
									(layer)3
										Element:p
											Retrieve the of the current user
										Element:code
											anonymousId
											:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											analytics.user().anonymousId();
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Setting the Anonymous ID
									Node:
									(type) c
									(layer)3
										Element:p
											Override the assigned
										Element:code
											anonymousId
											for the current user:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											analytics.user().anonymousId('ABC-123-XYZ');
									Node:
									(type) c
									(layer)3
										Element:p
											Or in the
										Element:code
											options
											object of
										Element:a
											,
										Element:code
											identify
										Element:a
											, or
										Element:code
											page
										Element:a
											calls, like this:
										Element:code
											track
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											analytics.identify('025pikachu025', { name: 'Pikachu' }, { anonymousId: 'ABC-123-XYZ' });
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											analytics.page({}, { anonymousId: 'ABC-123-XYZ' });
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											analytics.track('Email Clicked', { callToAction: 'Signup' }, { anonymousId: 'ABC-123-XYZ' });
									Node:
									(type) c
									(layer)3
										Element:p
											Keep in mind that setting the
										Element:code
											anonymousId
											in
										Element:code
											analytics.js
											does not overwrite the anonymous tracking IDs for any integrations you’re using.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Refreshing the Anonymous ID
									Node:
									(type) c
									(layer)3
										Element:p
											A user’s
										Element:code
											anonymousId
											will refresh on any of the following conditions:
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
											A user clears their cache or cookies
										Element:li
										Element:a
											is called during in the user’s browser session
										Element:code
											analytics.reset()
										Element:li
										Element:code
											analytics.identify()
											is called with a userId that differs from the current userId
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Debug
						Node:
						(type) c
						(layer)2
							Element:p
								Calling the
							Element:code
								debug
								method will turn on debug mode, logging helpful messages to the console.
						Node:
						(type) c
						(layer)2
							Element:p
								Enable:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								analytics.debug();
						Node:
						(type) c
						(layer)2
							Element:p
								Disable:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								analytics.debug(false);
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Emitter
						Node:
						(type) c
						(layer)2
							Element:p
								The global
							Element:code
								analytics
								object emits events whenever you call
							Element:code
								alias
								,
							Element:code
								group
								,
							Element:code
								identify
								,
							Element:code
								track
								or
							Element:code
								page
								. Using the
							Element:code
								on
								method You can set listeners for these events and run your own custom code. Useful for sending data to a service for which Segment does not have an integration.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								analytics.on(method, callback);
						Node:
						(type) c
						(layer)2
							Element:table
							Element:tr
							Element:td
							Element:code
								method
							Element:td
								String
							Element:td
								Name of the method to listen for
							Element:tr
							Element:td
							Element:code
								callback
							Element:td
								Function
							Element:td
								A function to execute after each the emitted method, taking three arguments:
							Element:code
								event
								,
							Element:code
								properties
								,
							Element:code
								options
						Node:
						(type) c
						(layer)2
							Element:p
								Example:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								analytics.on('track', function(event, properties, options) { bigdataTool.push(['recordEvent', event]); });
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Track Link
									Node:
									(type) c
									(layer)3
										Element:p
										Element:code
											trackLink
											is a helper method that attaches the
										Element:code
											track
											call as a handler to a link. With
										Element:code
											trackLink
											a small timeout (300 ms) is inserted to give the
										Element:code
											track
											call more time. This is useful when a page would redirect before the
										Element:code
											track
											method could complete all requests.
									Node:
									(type) c
									(layer)3
										Element:p
										Element:code
											trackLink
											method definition:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											analytics.trackLink(element, event, [properties])
									Node:
									(type) c
									(layer)3
										Element:table
										Element:tr
										Element:td
										Element:code
											element(s)
										Element:td
											Element or Array
										Element:td
											DOM element to be bound with
										Element:code
											track
											method. You may pass an array of elements or jQuery objects.
										Element:em
											Note: This must be an element,
										Element:strong
											not
											a CSS selector.
										Element:tr
										Element:td
										Element:code
											event
										Element:td
											String or Function
										Element:td
											The name of the event, passed to the
										Element:code
											track
											method. Or a
										Element:strong
											function
											that returns a string to be used as the name of the
										Element:code
											track
											event.
										Element:tr
										Element:td
										Element:code
											properties
											optional
										Element:td
											Object or Function
										Element:td
											A dictionary of properties to pass with the track method. Or a
										Element:strong
											function
											that returns an object to be used as the
										Element:code
											properties
											of the event.
									Node:
									(type) c
									(layer)3
										Element:p
											Example:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											var link = document.getElementById('free-trial-link'); analytics.trackLink(link, 'Clicked Free-Trial Link', { plan: 'Enterprise' });
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Track Form
									Node:
									(type) c
									(layer)3
										Element:p
										Element:code
											trackForm
											is a helper method that binds a
										Element:code
											track
											call to a form submission. With
										Element:code
											trackForm
											a small timeout (300 ms) is inserted to give the
										Element:code
											track
											call more time. Useful when a page would redirect before the
										Element:code
											track
											method can complete all requests.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											analytics.trackForm(form, event, [properties])
									Node:
									(type) c
									(layer)3
										Element:table
										Element:tr
										Element:td
										Element:code
											form(s)
											Element or Array
										Element:td
											Element or Array
										Element:td
											The form element to track or an array of form elements or jQuery objects.
										Element:em
											Note: trackForm takes an element, not a CSS selector.
										Element:tr
										Element:td
										Element:code
											event
										Element:td
											String or Function
										Element:td
											The name of the event, passed to the
										Element:code
											track
											method. Or a
										Element:strong
											function
											that returns a string to be used as the name of the
										Element:code
											track
											event.
										Element:tr
										Element:td
										Element:code
											properties
											optional
										Element:td
											Object or Function
										Element:td
											A dictionary of properties to pass with the track method. Or a
										Element:strong
											function
											that returns an object to be used as the
										Element:code
											properties
											of the event.
									Node:
									(type) c
									(layer)3
										Element:p
											Example:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											var form = document.getElementById('signup-form'); analytics.trackForm(form, 'Signed Up', { plan: 'Premium', revenue: 99.00 });
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Extending Timeout
						Node:
						(type) c
						(layer)2
							Element:p
								The
							Element:code
								timeout
								method will set the length (in milliseconds) of the callbacks and helper functions:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								analytics.timeout(500);
						Node:
						(type) c
						(layer)2
							Element:p
								Set the timeout to 500ms. This is helpful if you have multiple scripts that need to fire in your callback or
							Element:code
								trackLink
								,
							Element:code
								trackForm
								helper function. We recommend extending to 500ms if you’re triggering ad network conversion pixels since those are often a bit slower to load.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Performance
						Node:
						(type) c
						(layer)2
							Element:p
								The
							Element:code
								analytics.js
								library and all of the integration libraries are loaded with the
							Element:a
								HTML script
								. This also means that Segment methods are fired asynchronously, so you should adjust your code accordingly if you require that events be sent from the browser in a particular order.
							Element:code
								async
								tag
						Node:
						(type) c
						(layer)2
							Element:p
								While many tools require access to the DOM or cookies, for the Omniture, Salesforce, and MailChimp integrations do not load the native Javascript library! Instead data is sent from Segment’s servers to the end-tools. We aim to expand on this front in the future.
						Node:
						(type) c
						(layer)2
							Element:p
								Only the libraries required for your
							Element:strong
								enabled
								integrations are loaded. Whenever an integration is disabled, the custom version of
							Element:code
								analytics.js
								will no longer request that library.
						Node:
						(type) c
						(layer)2
							Element:p
								Using
							Element:code
								analytics.js
								will not offer a
							Element:em
								huge
								performance benefit, but it should be slightly more performant than installing each of the integrations individually. And as we move more and more integrations server-side, you’ll receive more performance benefits automatically.
						Node:
						(type) c
						(layer)2
							Element:p
								One option, if you don’t want to use any bundled 3rd-party tools, is to use our browserify’d
							Element:a
								analytics-node
								package.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Data Durability
						Node:
						(type) c
						(layer)2
							Element:p
								Every request that analytics.js makes to the Segment Tracking API is
							Element:a
								written synchronously to
								before being flushed over the network. This ensures that we can retry requests that fail due to connectivity issues, page unloads, or API downtime. The
							Element:code
								localstorage
							Element:code
								localstorage
								queue is persisted across page loads for maximum durability.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Cross Subdomain Tracking
						Node:
						(type) c
						(layer)2
							Element:p
								Since all of our integrations fully support tracking across subdomains, you only need to create one source to manage your website.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Anonymizing IP
						Node:
						(type) c
						(layer)2
							Element:p
								We collect IP address for client-side (iOS, Android,
							Element:code
								analytics.js
								and Xamarin) events automatically.
						Node:
						(type) c
						(layer)2
							Element:p
								Passing a value for
							Element:code
								options.context.ip
								will prevent our server from recording the IP address associated with the request.
						Node:
						(type) c
						(layer)2
							Element:p
								Example:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								analytics.track("Order Completed", {}, { context: { ip: "0.0.0.0" }});
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Troubleshooting
						Node:
						(type) c
						(layer)2
							Element:p
								The console reveals all!
							Element:a
								Learn how to access the Javascript console in each browser
								. Any
							Element:code
								analytics.js
								methods may be executed manually. Use the Network tab to inspect requests.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Are you loading
										Element:code
											analytics.js
											?
									Node:
									(type) c
									(layer)3
										Element:p
											Open the Javascript console and enter
										Element:code
											analytics
											. Does it return an object, as seen below?
									Node:
									(type) c
									(layer)3
										Element:p
										Element:img
									Node:
									(type) c
									(layer)3
										Element:p
											The object means that you are successfully loading
										Element:code
											analytics.js
											onto your website. If you get an
										Element:code
											undefined
											error,
										Element:code
											analytics.js
											is not loading successfully:
									Node:
									(type) c
									(layer)3
										Element:p
										Element:img
									Node:
									(type) c
									(layer)3
										Element:p
											Solution:
										Element:a
											Follow the
										Element:code
											analytics.js
											Quickstart Guide
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Are you loading two instances of
										Element:code
											analytics.js
											?
									Node:
									(type) c
									(layer)3
										Element:p
											Please note that you
										Element:em
											cannot
											load
										Element:code
											analytics.js
											twice on the same page, even if you’re using different write keys. You might encounter
										Element:code
											Uncaught RangeError: Maximum call stack size exceeded
											. You can onditionally set the write key based on an environment variable.
									Node:
									(type) c
									(layer)3
										Element:p
											Example:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											var writeKey; ENV === 'production' ? writeKey = 'A' : writeKey = 'B';
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Do you see events appear in your debugger?
									Node:
									(type) c
									(layer)3
										Element:p
											When you reload the page, does your debugger show a new
										Element:a
											and an
										Element:code
											page
										Element:a
											call? You can also check the Javascript console in the browser and manually fire an
										Element:code
											identify
										Element:code
											identify
											call as such, which would show up in the debugger.
									Node:
									(type) c
									(layer)3
										Element:p
										Element:img
									Node:
									(type) c
									(layer)3
										Element:p
											If the call doesn’t appear in the debugger, open up the Javascript console and check the Network tab to see if the outbound web services requests are being initiated:
									Node:
									(type) c
									(layer)3
										Element:p
										Element:img
									Node:
									(type) c
									(layer)3
										Element:p
											In the above, the
										Element:code
											p
											is a
										Element:a
											call and the
										Element:code
											page
										Element:code
											i
											is an
										Element:a
											call. If you don’t at least see the
										Element:code
											identify
										Element:code
											p
											, then check if you are loading
										Element:code
											analytics.js
											correctly.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Is data being transmitted to your third-party integrations?
									Node:
									(type) c
									(layer)3
										Element:p
											Some integrations send data directly from the website to their servers. You can check the Network tab in your Javascript console to see the outbound web services requests being initiated.
									Node:
									(type) c
									(layer)3
										Element:p
											In the below image, we use Google Analytics as an example. Our
										Element:code
											page
											call will form an outbound request that looks like this:
									Node:
									(type) c
									(layer)3
										Element:p
										Element:img
									Node:
									(type) c
									(layer)3
										Element:p
											If this outbound request is not showing up in the network when you fire an
										Element:code
											identify
											call, then check the following:
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Do you have any ad blockers enabled in your browser?
									Node:
									(type) c
									(layer)3
										Element:p
											Segment and many integration partners use cookies to store information about users in the browser. Ad blockers prevent cookies and other data these tools rely on to make valid analytics requests. Some portion of your users are likely using ad blockers which will prevent the Segment script from fully executing. Both desktop and mobile browsers are impacted.
									Node:
									(type) c
									(layer)3
										Element:p
											One particular issue is Safari private browsing mode which allows analytics.js identify calls to be made, but the traits object is stripped from the call. This will result in identify calls missing email address and other traits.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Is your web site deployed under a domain on the Public Suffix List?
									Node:
									(type) c
									(layer)3
										Element:p
											The
										Element:a
											Public Suffix List
											is a catalog of certain Internet effective top-level domains–enumerating all domain suffixes controlled by registrars.
									Node:
									(type) c
									(layer)3
										Element:p
											The implications of these domain suffixes is that first party cookies cannot be set on them. Meaning, foo.example.co.uk can share cookie access with bar.example.co.uk, but example.co.uk should be walled off from cookies at example2.co.uk. The latter two domains could be registered by different owners.
									Node:
									(type) c
									(layer)3
										Element:p
											Examples of domains on the Public Suffix List that are common in troubleshooting include:
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
											*.github.io
										Element:li
											*.herokuapp.com
										Element:li
											*.appspot.com
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											How do I open the Javascript console in your debugger?
									Node:
									(type) c
									(layer)3
										Element:p
											The Javascript console reveals all requests, outbound and inbound, to your browser. Additionally, you may execute valid Javascript.
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:strong
											Chrome
											:
										Element:code
											COMMAND+OPTION+J
											(Mac) or
										Element:code
											CTRL+SHIFT+J
											(Windows).
										Element:li
										Element:strong
											Firefox
											:
										Element:code
											COMMAND+OPTION+K
											(Mac) or
										Element:code
											CTRL+SHIFT+K
											(Windows) and then click on the
										Element:strong
											Console
											tab.
										Element:li
										Element:strong
											Safari
											:
										Element:code
											COMMAND+OPTION+I
											(Mac) or
										Element:code
											CTRL+ALT+I
											(Windows) and then click on the
										Element:strong
											Console
											tab.
										Element:li
										Element:strong
											IE
											:
										Element:code
											F12
											and then click on the
										Element:strong
											Console
											tab.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Is there a size limit on requests?
									Node:
									(type) c
									(layer)3
										Element:p
											Yes, 15kb per message.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											If
										Element:code
											analytics.js
											fails to load, are callbacks not fired?
									Node:
									(type) c
									(layer)3
										Element:p
											In the event that
										Element:code
											analytics.js
											does not load, any callbacks passed into your API calls will not fire. We believe is reasonable since the purpose of callbacks are to provide an estimate that the event was delivered and if the library never loads, the events won’t be delivered.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Known Issues:
									Node:
									(type) c
									(layer)3
										Element:p
										Element:a
											Review and contribute to these on Github
									Node:
									(type) c
									(layer)3
										Element:hr
									Node:
									(type) c
									(layer)3
										Element:p
											If you have any questions or see anywhere we can improve our documentation, please
										Element:a
											let us know
											or kick off a conversation in the
										Element:a
											Segment Community
											!
									Node:
									(type) c
									(layer)3
										Element:footer
										Element:span
										Element:span
											Was this document helpful?
										Element:span
										Element:label
										Element:span
											Yes
										Element:label
										Element:span
											No
									Node:
									(type) c
									(layer)3
										Element:i
			Node:
			(type) h1
			(layer)1
				Element:h1
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:a
					Overview
				Element:li
				Element:a
					ActiveCampaign
				Element:li
				Element:a
					AMP
				Element:li
				Element:a
					analytics.js
				Element:li
				Element:a
					Android
				Element:li
				Element:a
					Android Wear
				Element:li
				Element:a
					Clojure
				Element:li
				Element:a
					Customer.io
				Element:li
				Element:a
					Drip
				Element:li
				Element:a
					Facebook Ads
				Element:li
				Element:a
					Facebook Lead Ads
				Element:li
				Element:a
					Go
				Element:li
				Element:a
					Google AdWords
				Element:li
				Element:a
					HTTP
				Element:li
				Element:a
					HubSpot
				Element:li
				Element:a
					Intercom
				Element:li
				Element:a
					iOS
				Element:li
				Element:a
					Iterable
				Element:li
				Element:a
					Java
				Element:li
				Element:a
					Klaviyo
				Element:li
				Element:a
					Mailchimp
				Element:li
				Element:a
					Mailjet
				Element:li
				Element:a
					Marketo
				Element:li
				Element:a
					Node
				Element:li
				Element:a
					Nudgespot
				Element:li
				Element:a
					PHP
				Element:li
				Element:a
					Python
				Element:li
				Element:a
					Ruby
				Element:li
				Element:a
					Salesforce
				Element:li
				Element:a
					Selligent
				Element:li
				Element:a
					SendGrid
				Element:li
				Element:a
					Stripe
				Element:li
				Element:a
					Twilio
				Element:li
				Element:a
					Vero
				Element:li
				Element:a
					Xamarin
				Element:li
				Element:a
					Zendesk
				Element:li
				Element:a
					.NET
