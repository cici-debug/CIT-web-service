Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					Librato Integration
			Node:
			(type) c
			(layer)1
				Element:p
					Segment makes it easy to send your data to
				Element:a
					Librato
					(and lots of other integrations). Once you've tracked your data through our open source
				Element:a
					libraries
					we'll translate and route your data to Librato in the format they understand.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Getting Started
						Node:
						(type) c
						(layer)2
							Element:p
								When you toggle on Librato in Segment, this is what happens:
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
								Our CDN is updated within 5-10 minutes with our custom Librato provider inside analytics.js.
							Element:li
								Since Librato only records custom events, no metrics will appear in Librato until you start using the API outlined below.
						Node:
						(type) c
						(layer)2
							Element:p
								Librato supports our
							Element:code
								track
								method for both client-side and server-side.
						Node:
						(type) c
						(layer)2
							Element:hr
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Track
						Node:
						(type) c
						(layer)2
							Element:p
								When you call
							Element:a
								, we add a gauge measurement to Librato. The gauge is named after your event.
							Element:code
								track
						Node:
						(type) c
						(layer)2
							Element:figure
							Element:pre
							Element:code
								analytics.track("Event Triggered", new Properties() .putValue("value", 2));
							Element:pre
							Element:code
								client.Track(&analytics.Track{ UserId: "507f191e81", Event: "Event Triggered", Properties: map[string]interface{}{ "value": 2, }, })
							Element:pre
							Element:code
								[[SEGAnalytics sharedAnalytics] track:@"Event Triggered", properties: @{ @"value" : @2 }];
							Element:pre
							Element:code
								Analytics.track("507f191e81", "Event Triggered", new Props() .put("value", 2));
							Element:pre
							Element:code
								analytics.track({ userId: '507f191e81', event: 'Event Triggered', properties: { value: 2 } });
							Element:pre
							Element:code
								Analytics::track(array( "userId" => "507f191e81", "event" => "Event Triggered", "properties" => array( "value" => 2 ) ));
							Element:pre
							Element:code
								analytics.track('507f191e81', 'Event Triggered', { 'value': 2 })
							Element:pre
							Element:code
								Analytics.track( user_id: '507f191e81', event: 'Event Triggered', properties: { value: 2 } )
							Element:pre
							Element:code
								analytics.track('Event Triggered', { value: 2 });
							Element:pre
							Element:code
								Analytics.Client.Track("507f191e81", "Event Triggered", new Properties() { { "value", 2 } });
							Element:pre
							Element:code
								Analytics.Client.Track("507f191e81", "Event Triggered", new Properties() { { "value", 2 } });
							Element:pre
							Element:code
								curl
							Element:a
								https://api.segment.io/v1/track
								\ -d userId=507f191e81 \ -d "event=Event Triggered" \ -d properties[value]=2
						Node:
						(type) c
						(layer)2
							Element:p
								The
							Element:code
								value
								event property allows you to set the magnitude of the data point. All other event properties will be ignored.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Metrics
									Node:
									(type) c
									(layer)3
										Element:p
											To get the most out of your event gauges, you‚Äôll want to enable the following options in the Librato interface for each Segment gauge:
									Node:
									(type) c
									(layer)3
										Element:p
										Element:img
									Node:
									(type) c
									(layer)3
										Element:p
										Element:code
											Period
											- if set to 60 seconds, each data point on the graph represents the sum of the total number of events that happened in the last 60 seconds.
									Node:
									(type) c
									(layer)3
										Element:p
										Element:code
											Source Aggregation
											- allows you to aggregate your gauge metrics over a period of time.
									Node:
									(type) c
									(layer)3
										Element:p
										Element:code
											Average: Sum
											- sums measurement values over time.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Metric Source
									Node:
									(type) c
									(layer)3
										Element:p
											You may want to be able to split your time series metrics by the
										Element:em
											source
											, such as the computer which the event is coming from. By default, the source is set to the event, but you can override it by setting
										Element:code
											context.Librato.source
											.
									Node:
									(type) c
									(layer)3
										Element:p
											Here‚Äôs an example:
									Node:
									(type) c
									(layer)3
										Element:figure
										Element:pre
										Element:code
											analytics.track("Event Triggered", new Properties() .putValue("value", 2));
										Element:pre
										Element:code
											client.Track(&analytics.Track{ UserId: "507f191e81", Event: "Event Triggered", Properties: map[string]interface{}{ "value": 2, }, })
										Element:pre
										Element:code
											[[SEGAnalytics sharedAnalytics] track:@"Event Triggered", properties: @{ @"value" : @2 }];
										Element:pre
										Element:code
											Analytics.track("507f191e81", "Event Triggered", new Props() .put("value", 2));
										Element:pre
										Element:code
											analytics.track({ userId: '507f191e81', event: 'Event Triggered', properties: { value: 2 }, context: { Librato: { source: 'your-web-server-X.X.X.XX' } } });
										Element:pre
										Element:code
											Analytics::track(array( "userId" => "507f191e81", "event" => "Event Triggered", "properties" => array( "value" => 2 ), "context" => array( "Librato" => array( "source" => "your-web-server-X.X.X.XX" ) ) ));
										Element:pre
										Element:code
											analytics.track('507f191e81', 'Event Triggered', { 'value': 2 })
										Element:pre
										Element:code
											Analytics.track( user_id: '507f191e81', event: 'Event Triggered', properties: { value: 2 } )
										Element:pre
										Element:code
											analytics.track('Event Triggered', { value: 2 }, { context: { Librato: { source: 'your-web-server-X.X.X.XX' } } });
										Element:pre
										Element:code
											Analytics.Client.Track("507f191e81", "Event Triggered", new Properties() { { "value", 2 } });
										Element:pre
										Element:code
											Analytics.Client.Track("507f191e81", "Event Triggered", new Properties() { { "value", 2 } });
										Element:pre
										Element:code
											curl
										Element:a
											https://api.segment.io/v1/track
											\ -d userId=507f191e81 \ -d "event=Event Triggered" \ -d properties[value]=2 \ -d context[Librato][source]=your-web-server-X.X.X.XX
									Node:
									(type) c
									(layer)3
										Element:hr
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Supported Sources and Connection Modes
						Node:
						(type) c
						(layer)2
							Element:table
							Element:tr
							Element:th
							Element:th
								Web
							Element:th
								Mobile
							Element:th
								Server
							Element:tr
							Element:td
								üì± Device-based
							Element:td
							Element:td
							Element:td
							Element:tr
							Element:td
								‚òÅÔ∏è Cloud-based
							Element:td
								‚úÖ
							Element:td
								‚úÖ
							Element:td
								‚úÖ
						Node:
						(type) c
						(layer)2
							Element:p
								To learn more about about Connection Modes and what dictates which we support,
							Element:a
								see here
								.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Settings
						Node:
						(type) c
						(layer)2
							Element:p
								Segment lets you change these integration settings via your Segment dashboard without having to touch any code.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											email
									Node:
									(type) c
									(layer)3
										Element:p
											This should be the email you signed up for your Librato account with.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Token
									Node:
									(type) c
									(layer)3
										Element:p
											You can find your API Token on the Librato
										Element:a
											Account page
											.
									Node:
									(type) c
									(layer)3
										Element:hr
									Node:
									(type) c
									(layer)3
										Element:p
											If you have any questions or see anywhere we can improve our documentation, please
										Element:a
											let us know
											or kick off a conversation in the
										Element:a
											Segment Community
											!
									Node:
									(type) c
									(layer)3
										Element:i
									Node:
									(type) c
									(layer)3
										Element:i
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
									Node:
									(type) c
									(layer)3
										Element:span
											Check out the code!
									Node:
									(type) c
									(layer)3
										Element:a
											server
