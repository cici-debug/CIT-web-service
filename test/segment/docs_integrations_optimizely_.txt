Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					Optimizely Integration
			Node:
			(type) c
			(layer)1
				Element:p
					Segment makes it easy to send your data to
				Element:a
					Optimizely
					(and lots of other integrations). Once you've tracked your data through our open source
				Element:a
					libraries
					we'll translate and route your data to Optimizely in the format they understand.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Getting Started
						Node:
						(type) c
						(layer)2
							Element:p
								Segment allows you to track events directly into Optimizely, and record your Optimizely experiments or campaigns back into Segment, allowing you to analyze Optimizely data inside you other downstream tools enabled inside Segment!
						Node:
						(type) c
						(layer)2
							Element:p
								Our integration supports both
							Element:strong
								Classic
								,
							Element:strong
								Optimizely X
								, or
							Element:strong
								Both
								.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Required Step
									Node:
									(type) c
									(layer)3
										Element:p
											Because the Optimizely integration needs to be on the page right away, Segment can’t load its client side library for you. That means you
										Element:strong
											MUST
											put the Optimizely javascript snippet on the page. Pop over to Optimizely and click “Settings” to get your custom script and paste it inside your
										Element:code
											<HEAD>
											tag
										Element:strong
											BEFORE
											above your Segment snippet!
									Node:
									(type) c
									(layer)3
										Element:p
											The Optimizely script script looks something like this:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											<script src="//cdn.optimizely.com/js/#########.js"></script>
									Node:
									(type) c
									(layer)3
										Element:p
											Include this snippet on every page you want to run experiments on. This snippet will not change. It’s important that this script is loaded first before Segment’s async script since Optimizely alters the page to run its experiments so we want to make sure that the experiment data is available by the time Segment finishes initializing its Optimizely integration.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											On Android
									Node:
									(type) c
									(layer)3
										Element:p
											Since Optimizely needs to be initialized as early as possible, you need to supply the API key when you initialize the factory that is registered with the analytics client.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											analytics.use(OptimizelyIntegration.createFactory(application, apiKey));
									Node:
									(type) c
									(layer)3
										Element:p
											This will initialize the Optimizely SDK under the hood and begin forwarding events and collecting experiment data as defined in your integration settings.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											On iOS
									Node:
									(type) c
									(layer)3
										Element:p
											Since Optimizely needs to be initialized as early as possible, you need to supply the API key when you initialize the factory that is registered with the analytics client.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											[config use:[SEGOptimizelyIntegrationFactory instanceWithToken:apiKey launchOptions:launchOptions]];
									Node:
									(type) c
									(layer)3
										Element:p
											This will initialize the Optimizely SDK under the hood and begin forwarding events and collecting experiment data as defined in your integration settings.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Server-side
									Node:
									(type) c
									(layer)3
										Element:p
											Currently Optimizely does not accept server-side events.
									Node:
									(type) c
									(layer)3
										Element:hr
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Track
						Node:
						(type) c
						(layer)2
							Element:p
								If you want to track custom events directly to Optimizely, you’d use our
							Element:a
								method.
							Element:code
								track
						Node:
						(type) c
						(layer)2
							Element:p
								To use events in Optimizely create a
							Element:strong
								Custom Event Goal
								inside Optimizely’s UI with the exact same name as the event you are recording in your Segment
							Element:a
								call. Inside Optimizely’s UI, the
							Element:code
								track
							Element:strong
								Custom Event to track
								should be an exact string match of the name that is passed from Segment.
						Node:
						(type) c
						(layer)2
							Element:p
								We will send any
							Element:code
								.track()
								events you record via Optimizely’s
							Element:code
								trackEvent
								API by passing it the event name and the
							Element:code
								revenue
								(if provided). Read more about how we map the
							Element:code
								properties.revenue
							Element:a
								below
								.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Revenue
									Node:
									(type) c
									(layer)3
										Element:p
											Optimizely recognizes
										Element:code
											revenue
											, which is one of our
										Element:a
											special, semantic properties
											. To pass in revenue to Optimizely, just send the exact dollar amount of revenue you earned as a
										Element:code
											revenue
											property.
									Node:
									(type) c
									(layer)3
										Element:p
										Element:em
											Note: Optimizely usually takes revenue in cents instead of dollars so we make that conversion for you automatically.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Offline Conversions
									Node:
									(type) c
									(layer)3
										Element:p
											Optimizely offline conversions are not currently supported through Segment since Optimizely doesn’t have a method for identifying visitors by a
										Element:code
											userId
											. That means we’d have to ask you, our cherished user, to keep track of the
										Element:code
											optimizelyEndUserId
											, experiments and variations for each visitor to make this work.
									Node:
									(type) c
									(layer)3
										Element:p
											If you’d like to hook up to the Optimizely offline conversion API directly you can
										Element:a
											find the docs here
											.
									Node:
									(type) c
									(layer)3
										Element:hr
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Sending Experiment Data to Segment
						Node:
						(type) c
						(layer)2
							Element:p
								A key feature of our Optimizely integration is the ability to send your experiment data
							Element:em
								back into
								Segment so that you can analyze them in your other analytics providers outside of Optimizely.
						Node:
						(type) c
						(layer)2
							Element:p
								There are two methods in which you can do this. In your Optimizely settings, you can opt to choose to send experiment data via
							Element:code
								.track()
								or
							Element:code
								.identify()
								.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:img
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
							Element:strong
								Important
								: Sending via
							Element:code
								.identify()
								is
							Element:strong
								NOT
								recommended as it may have adverse effects since it could lead to many unwanted traits being cached to your user profiles in your other end tools as well as unwanted columns in Segment connected warehouses. It also lacks many additional properties that is collected by the
							Element:code
								.track()
								option.
						Node:
						(type) c
						(layer)2
							Element:p
								Depending on whether you are running experiments created inside
							Element:strong
								Optimizely
							Element:strong
								Classic
								or
							Element:strong
								X
								, the following is what you can expect to be seen inside Segment:
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Optimizely Classic
									Node:
									(type) c
									(layer)3
										Element:p
											If you are using Optimizely Classic, we are able to send back experiments that are
										Element:em
											only
										Element:strong
											Immediately Activated
											. We do not support collecting data of manually or conditionally activated experiments. However, we will be able to track these types of activations if you are using Optimizely X.
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Standard or Redirect Experiments
												Node:
												(type) c
												(layer)4
													Element:p
														Properties sent via
													Element:code
														.track()
														calls:
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
													Element:code
														experimentId
													Element:li
													Element:code
														experimentName
													Element:li
													Element:code
														variationId
													Element:li
													Element:code
														variationName
													Element:li
													Element:code
														referrer
														(only set
													Element:em
														if
														the effective referrer is different than
													Element:code
														document.referrer
														, please refer to
													Element:a
														here
														)
													Element:li
													Element:code
														nonInteraction
														(based on your advanced settings inside Segment)
												Node:
												(type) c
												(layer)4
													Element:p
														Example call automatically invoked upon page load:
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														analytics.track('Experiment Viewed', { experimentId: '7561662364', experimentName: 'Home Page CTA Button', variationId: '7549901603', variationName: 'Variation Blue Background', nonInteraction: 1 });
												Node:
												(type) c
												(layer)4
													Element:p
													Element:em
														Note
														: the
													Element:code
														nonInteraction
														property is set if you have enabled
													Element:strong
														Send
														setting.
													Element:code
														Experiment Viewed
														as a non-interaction event
												Node:
												(type) c
												(layer)4
													Element:p
														Trait sent via
													Element:code
														.identify()
														calls:
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
													Element:code
														experimentName
													Element:li
													Element:code
														variationName
												Node:
												(type) c
												(layer)4
													Element:p
														Example call automatically invoked upon page load:
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														analytics.identify({ 'Experiment: Home Page CTA Button': 'Variation Blue Background' });
												Node:
												(type) c
												(layer)4
													Element:p
													Element:em
														Note
														: If you run multiple experiments during a user session, since traits are cached, subsequent experiments would fire
													Element:code
														.identify()
														calls that still contain previous experiment data.
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Multivariate Experiments
												Node:
												(type) c
												(layer)4
													Element:p
														Properties sent via
													Element:code
														.track()
														calls:
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
													Element:code
														experimentId
													Element:li
													Element:code
														experimentName
													Element:li
													Element:code
														variationId
													Element:li
													Element:code
														variationName
													Element:li
													Element:code
														sectionName
													Element:li
													Element:code
														sectionId
													Element:li
													Element:p
													Element:code
														nonInteraction
														(based on your advanced settings inside Segment)
													Element:p
													Element:em
														Note
														: We will concatenate all the
													Element:code
														variationId
														s,
													Element:code
														variationName
														s,
													Element:code
														sectionName
														s, and
													Element:code
														sectionId
														s where necessary.
												Node:
												(type) c
												(layer)4
													Element:p
														Example call automatically invoked upon page load:
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														analytics.track('Experiment Viewed', { experimentId: '7571581357', experimentName: 'Most Popular LoL Champion', variationId: '756194997,7563911532' variationName: 'Variation Teemo, Variation Corki', sectionName: 'Section Top, Section ADC', sectionId: '752911997,226194955' nonInteraction: 1 });
												Node:
												(type) c
												(layer)4
													Element:p
													Element:em
														Note
														: the
													Element:code
														nonInteraction
														property is set if you have enabled
													Element:strong
														Send
														setting.
													Element:code
														Experiment Viewed
														as a non-interaction event
												Node:
												(type) c
												(layer)4
													Element:p
														Trait sent via
													Element:code
														.identify()
														calls:
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
													Element:code
														experimentName
													Element:li
													Element:code
														variationName
												Node:
												(type) c
												(layer)4
													Element:p
														Example call automatically invoked upon page load:
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														analytics.identify({ 'Experiment: Most Popular LoL Champion': 'Variation Teemo, Variation Corki' });
												Node:
												(type) c
												(layer)4
													Element:p
													Element:em
														Note
														: If you run multiple experiments during a user session, since traits are cached, subsequent experiments would fire
													Element:code
														.identify()
														calls that still contain previous experiment data.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Optimizely X
									Node:
									(type) c
									(layer)3
										Element:p
											Our integration supports sending experiment or personalized campaign data when using Optimizely X. Note that we can support all of the available activation types:
										Element:strong
											Immediately
											,
										Element:strong
											Polling
											(formerly known in Classic as
										Element:em
											Conditional
											),
										Element:strong
											Callback
											and
										Element:strong
											Manual
											.
									Node:
									(type) c
									(layer)3
										Element:p
											Also note that Optimizely X no longer supports Multivariate experiments.
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Standard or Redirect Experiments/Campaigns
												Node:
												(type) c
												(layer)4
													Element:p
														Properties sent via
													Element:code
														.track()
														calls:
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
													Element:code
														campaignName
													Element:li
													Element:code
														campaignId
													Element:li
													Element:code
														experimentId
													Element:li
													Element:code
														experimentName
													Element:li
													Element:code
														referrer
														(only set
													Element:em
														if
														the effective referrer is different than
													Element:code
														document.referrer
														, please refer to
													Element:a
														here
														)
													Element:li
													Element:code
														variationName
													Element:li
													Element:code
														variationId
													Element:li
													Element:code
														audienceId
													Element:li
													Element:code
														audienceName
													Element:li
													Element:p
													Element:code
														nonInteraction
														(based on your advanced settings inside Segment)
													Element:p
													Element:em
														Note
														:
													Element:code
														campaignName
														and
													Element:code
														experimentName
														will be the same if you create an experiment directly rather than creating an “experience” inside a personalized campaign. However,
													Element:code
														campaignId
														will still be auto generated by Optimizely’s API, thus it will be different than the
													Element:code
														experimentId
														.
													Element:p
													Element:img
												Node:
												(type) c
												(layer)4
													Element:p
														Example call automatically invoked upon page load:
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														analytics.track('Experiment Viewed', { campaignName: 'Countdown to Stranger Things 2', campaignId: '7554165405', experimentId: '7556781578', experimentName: 'What about Barbs?', variationId: '7578240035', variationName: 'Variation Barbs', audienceId: '7527565438', audienceName: 'Netflix Bingers', nonInteraction: 1 });
												Node:
												(type) c
												(layer)4
													Element:p
														Trait sent via
													Element:code
														.identify()
														calls:
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
													Element:code
														experimentName
													Element:li
													Element:code
														variationName
												Node:
												(type) c
												(layer)4
													Element:p
														Example call automatically invoked upon page load:
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														analytics.identify({ 'Experiment: What about Barbs?': 'Variation Barbs' });
												Node:
												(type) c
												(layer)4
													Element:p
													Element:em
														Note
														: If you run multiple experiments during a user session, since traits are cached, subsequent experiments would fire
													Element:code
														.identify()
														calls that still contain previous experiment data.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Sending
										Element:code
											Experiment Viewed
											events as Non-Interaction for GA
									Node:
									(type) c
									(layer)3
										Element:p
											If you’re using GA and the above setting, you’ll likely want to check this setting in the Segment UI for the Optimizely integration:
									Node:
									(type) c
									(layer)3
										Element:p
										Element:img
									Node:
									(type) c
									(layer)3
										Element:p
											This will append an additional property in your
										Element:code
											Experiment Viewed
											events called
										Element:code
											nonInteraction
											and set it to
										Element:code
											1
											. This is to prevent negatively affecting your bounce rate.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Sending
										Element:code
											Experiment Viewed
											event properties as Google Analytics Custom Dimensions
									Node:
									(type) c
									(layer)3
										Element:p
											If you’re sending your Experiments to GA in the form of
										Element:code
											track
											calls, we recommend
										Element:a
											creating hit-scoped custom dimensions in Google Analytics
											with titles like Experiment Name and Variation Name, and then mapping the properties to those Custom Dimensions accordingly. For example, if you set
										Element:strong
											Custom Dimension 5
											to “Experiment Name” and
										Element:strong
											Custom Dimension 1
											to “Variation Name”, here’s how you’d configure the mappings in your Segment <> GA settings pane:
									Node:
									(type) c
									(layer)3
										Element:p
										Element:img
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Optimizely X Fullstack
						Node:
						(type) c
						(layer)2
							Element:p
								You can also additionally opt to integrate
							Element:a
								Optimizely X Fullstack
								:
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:p
								1) Create an
							Element:a
								Optimizely X Fullstack
								project.
							Element:li
							Element:p
								2) If you have any attributes to track in the event, please create them in our
							Element:a
								Optimizely dashboard
								first.
							Element:li
							Element:p
								3) Then
							Element:a
								install
								the JavaScript SDK before the Segment snippet, just like how you do with the original Optimizely snippet.
							Element:li
							Element:p
								4) Create an
							Element:a
								instance
								of the JavaScript SDK client and attach it to the global variable
							Element:code
								window.optimizelyClientInstance
								. This step must be done
							Element:strong
								before
								any calls to
							Element:code
								analytics.track
								!
							Element:li
							Element:p
								5) Call
							Element:code
								.track()
								as you normally would and the events should also be sent to the Optimizely Fullstack experiment. We will send the event
							Element:code
								name
								,
							Element:code
								userId
								, any
							Element:code
								properties
								and
							Element:code
								properties.revenue
								.
							Element:p
							Element:strong
								Important
								: If you are sending anonymous data to Optimizely Fullstack via their server side SDK and you’d like to send anonymous data of that same user but from the client side, you can pass in an Optimizely specific
							Element:code
								userId
								:
							Element:pre
							Element:code
								analytics.track('Some event', {}, { Optimizely: { userId: 'some anonymousId' } });
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Troubleshooting
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Lower
										Element:code
											Experiment Viewed
											counts inside Segment and other tools vs. Optimizely unique visitors
									Node:
									(type) c
									(layer)3
										Element:p
											The count of the
										Element:code
											Experiment Viewed
											may be slightly lower compared to the number of unique visitors seen in Optimizely because Optimizely loads synchronously and Segment loads asynchronously (to ensure pages load as fast as possible). This means that if the user quickly closes or redirects from a given page, sometimes Segment might not have enough time to scrape the experiment data from the global Optimizely object and make its API calls back to Segment or to your other enabled tools.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Sending effective referrer in your automatic page calls
									Node:
									(type) c
									(layer)3
										Element:p
											If you are running
										Element:strong
											Redirect Experiments
											, you might run into a case where the effective referrer is
										Element:em
											different
											than the
										Element:code
											referrer
											that is captured by
										Element:code
											.page()
											calls, such as the default page call in our Segment snippet.
									Node:
									(type) c
									(layer)3
										Element:p
											For example, let’s say you run a redirect experiment on page
										Element:code
											http://home.com
											that redirects you to
										Element:code
											http://home-offers.com
											. Now, if a customer visits your page via an advertisement on Google.com, you want to make sure that the
										Element:code
											.page()
											call fired on
										Element:code
											http://home-offers.com
											knows that the true referrer was
										Element:code
											Google.com
											and NOT
										Element:code
											http://home.com
											.
									Node:
									(type) c
									(layer)3
										Element:p
											Our Optimizely integration will detect this and send the effective referrer value as a property of the
										Element:code
											Experiment Viewed
											event that we send back into Segment. We will also override the
										Element:code
											context.page.referrer
											with the effective referrer!
									Node:
									(type) c
									(layer)3
										Element:p
											More importantly, in order to send this true referrer value with your default initial
										Element:code
											.page()
											call inside the Segment snippet, you can look up
										Element:code
											window.optimizelyEffectiveReferrer
											and if it exists, you can pass that into your page call. This is how you might modify your Segment snippet:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											<script type="text/javascript"> !function(){var analytics=window.analytics=window.analytics||[];if(!analytics.initialize)if(analytics.invoked)window.console&&console.error&&console.error("Segment snippet included twice.");else{analytics.invoked=!0;analytics.methods=["trackSubmit","trackClick","trackLink","trackForm","pageview","identify","reset","group","track","ready","alias","page","once","off","on"];analytics.factory=function(t){return function(){var e=Array.prototype.slice.call(arguments);e.unshift(t);analytics.push(e);return analytics}};for(var t=0;t<analytics.methods.length;t++){var e=analytics.methods[t];analytics[e]=analytics.factory(e)}analytics.load=function(t){var e=document.createElement("script");e.type="text/javascript";e.async=!0;e.src=("https:"===document.location.protocol?"https://":"http://")+"cdn.segment.com/analytics.js/v1/"+t+"/analytics.min.js";var n=document.getElementsByTagName("script")[0];n.parentNode.insertBefore(e,n)};analytics.SNIPPET_VERSION="3.1.0"; analytics.load("YOUR_WRITE_KEY"); /* MODIFIED SECTION */ // Hey did Optimizely set an effective referrer? if (window.optimizelyEffectiveReferrer) var referrer = window.optimizelyEffectiveReferrer; // If they did, override the document.referrer referrer ? analytics.page({ referrer: referrer }); : analytics.page(); /* MODIFIED SECTION */ }}(); </script>
									Node:
									(type) c
									(layer)3
										Element:hr
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Supported Sources and Connection Modes
						Node:
						(type) c
						(layer)2
							Element:table
							Element:tr
							Element:th
							Element:th
								Web
							Element:th
								Mobile
							Element:th
								Server
							Element:tr
							Element:td
								📱 Device-based
							Element:td
								✅
							Element:td
								✅
							Element:td
							Element:tr
							Element:td
								☁️ Cloud-based
							Element:td
							Element:td
							Element:td
						Node:
						(type) c
						(layer)2
							Element:p
								To learn more about about Connection Modes and what dictates which we support,
							Element:a
								see here
								.
						Node:
						(type) c
						(layer)2
							Element:p
								This integration
							Element:em
								requires
								a
							Element:strong
								Device-based
								Connection Mode for
							Element:strong
								Mobile
								data. Follow the steps above to ensure you have packaged the Optimizely SDK with Segment’s.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Settings
						Node:
						(type) c
						(layer)2
							Element:p
								Segment lets you change these integration settings via your Segment dashboard without having to touch any code.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Send experiment data to other tools (as a track call)
									Node:
									(type) c
									(layer)3
										Element:p
											Sends the experiment and variation information as properties on a track call.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Send `Experiment Viewed` as a non-interaction event
									Node:
									(type) c
									(layer)3
										Element:p
											Specifies the
										Element:code
											Experiment Viewed
											as a non-interaction event for Google Analytics
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Track Categorized Pages
									Node:
									(type) c
									(layer)3
										Element:p
											This will track events to Optimizely for
										Element:a
											calls that have a
										Element:code
											page
											method
										Element:code
											category
											associated with them. For example
										Element:code
											page('Docs', 'Index')
											would translate to
										Element:strong
											Viewed Docs Index Page
											.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Track Named Pages
									Node:
									(type) c
									(layer)3
										Element:p
											This will track events to Optimizely for
										Element:a
											calls that have a
										Element:code
											page
											method
										Element:code
											name
											associated with them. For example
										Element:code
											page('Signup')
											would translate to
										Element:strong
											Viewed Signup Page
											.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Send experiment data to other tools as an identify call (not recommended)
									Node:
									(type) c
									(layer)3
										Element:p
											The reason this is not recommended is because if you’re running lots of experiments, this could lead to loads of unwanted properties in end tools as well as unwanted columns in Segment connected databases.
									Node:
									(type) c
									(layer)3
										Element:hr
									Node:
									(type) c
									(layer)3
										Element:p
											If you have any questions or see anywhere we can improve our documentation, please
										Element:a
											let us know
											or kick off a conversation in the
										Element:a
											Segment Community
											!
									Node:
									(type) c
									(layer)3
										Element:i
									Node:
									(type) c
									(layer)3
										Element:i
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
									Node:
									(type) c
									(layer)3
										Element:span
											Check out the code!
									Node:
									(type) c
									(layer)3
										Element:a
											android
									Node:
									(type) c
									(layer)3
										Element:a
											browser
									Node:
									(type) c
									(layer)3
										Element:a
											ios
