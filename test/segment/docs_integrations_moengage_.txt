Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					MoEngage Integration
			Node:
			(type) c
			(layer)1
				Element:p
					Segment makes it easy to send your data to
				Element:a
					MoEngage
					(and lots of other integrations). Once you've tracked your data through our open source
				Element:a
					libraries
					we'll translate and route your data to MoEngage in the format they understand.
			Node:
			(type) h1
			(layer)1
				Element:h1
					Getting Started
			Node:
			(type) c
			(layer)1
				Element:p
					Once the Segment library is integrated with your app, toggle MoEngage on in your Segment integrations. These new settings will take up to an hour to propogate to all of your existing users. For new users it’ll be instanteneous! Segment-MoEngage Integration is a bundled integration, requires client side integration.
			Node:
			(type) c
			(layer)1
				Element:p
					Follow the below steps for integration
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								iOS
						Node:
						(type) c
						(layer)2
							Element:p
								To get started with MoEngage on iOS, first integrate your app with the MoEngage
							Element:a
								iOS
								library. To get the APP ID,
							Element:a
								login
								to your account, click on
							Element:code
								Settings
								in the left menu and select
							Element:code
								App Settings
								, here we show the APP ID of your app. Next, go to
							Element:code
								Push Settings
								, and select
							Element:code
								iOS Settings
								tab, upload the pem file for Push Notifications here and enter the password for the same. If you don’t have the pem already, follow the steps listed
							Element:a
								here
								. Finally, you want to ensure you have configured your app delegate to
							Element:a
								enable push notifications
								.
						Node:
						(type) c
						(layer)2
							Element:p
								For more information about setting up Push Notifications, In-App messaging, Notification Center with MoEngage, see their
							Element:a
								docs
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
														Identify
												Node:
												(type) c
												(layer)4
													Element:p
														Use
													Element:a
														Identify
														to track user specific attributes. It equivalent to tracking
													Element:a
														user attributes
														on MoEngage. MoEngage supports traits supported by Segment as well as custom traits. If you set traits.id, we set that as the Unique ID for that user.
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
														Track
												Node:
												(type) c
												(layer)4
													Element:p
														Use
													Element:a
														track
														to track events and user behaviour in your app. This will send the event to MoEngage with the associated properties. Tracking events is essential and will help you create segments for engaging users differently.
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
														Reset
												Node:
												(type) c
												(layer)4
													Element:p
														If your app supports the ability for a user to logout and login with a new identity, then you’ll need to call reset in your mobile app. Here we will call MoEngage’s resetUser implementation to ensure the user information remains consistent.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Android
						Node:
						(type) c
						(layer)2
							Element:p
								To get up and running with MoEngage on Android, there a couple of steps we will walk you through.
						Node:
						(type) c
						(layer)2
							Element:p
								To enable its full functionality (like Push Notifications, InApp Messaging, Acquisition Tracking), there are still a couple of steps that you have to take care of in your Android app.
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
														Adding MoEngage Dependency:
												Node:
												(type) c
												(layer)4
													Element:p
														Along with the segment dependency add the below dependency in your build.gradle file.
												Node:
												(type) c
												(layer)4
													Element:p
														compile(‘com.moengage:moengage-segment-integration:+’) { transitive = true }
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
														How To - Push Notifications:
												Node:
												(type) c
												(layer)4
													Element:ol
													Element:li
													Element:p
														Manifest permissions: Copy the permissions XML below into the
													Element:code
														AndroidManifest.xml
														and insert your package name into the name fields where it says [YOUR_PACKAGE_NAME/applicationId].
													Element:pre
													Element:code
														<uses-permission android:name="android.permission.INTERNET" /> <permission android:name="[YOUR_PACKAGE_NAME/applicationId].permission.C2D_MESSAGE" android:protectionLevel="signature" /> <uses-permission android:name="[YOUR_PACKAGE_NAME/applicationId].permission.C2D_MESSAGE" /> <uses-permission android:name="com.google.android.c2dm.permission.RECEIVE" /> <uses-permission android:name="android.permission.GET_ACCOUNTS" /> <uses-permission android:name="android.permission.WAKE_LOCK" /> <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" /> <!-- If you want to use our Geo Fencing feature --> <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION"/>
													Element:li
														Declaring Receivers: Add the below components into the
													Element:code
														AndroidManifest.xml
														and replace
													Element:code
														[YOUR_PACKAGE_NAME/applicationId]
														with your package name or application id for Push.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:strong
														When using Play Services 7.3
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														<!-- MOENGAGE RECEIVER FOR RECEIVING GCM BROADCAST MESSAGES --> <receiver android:name="com.moengage.receiver.MoEngagePushReceiver" android:permission="com.google.android.c2dm.permission.SEND" > <intent-filter> <action android:name="com.google.android.c2dm.intent.RECEIVE" /> <action android:name="com.google.android.c2dm.intent.REGISTRATION" /> <category android:name="[YOUR_PACKAGE_NAME/applicationId]" /> </intent-filter> </receiver>
												Node:
												(type) c
												(layer)4
													Element:p
													Element:strong
														When using Play Services 7.5 and above
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														<receiver android:name="com.google.android.gms.gcm.GcmReceiver" android:exported="true" android:permission="com.google.android.c2dm.permission.SEND" > <intent-filter> <action android:name="com.google.android.c2dm.intent.RECEIVE" /> <category android:name="[YOUR_PACKAGE_NAME/applicationId]" /> </intent-filter> </receiver> <service android:name="com.moengage.worker.MoEGCMListenerService" android:exported="false" > <intent-filter> <action android:name="com.google.android.c2dm.intent.RECEIVE" /> <action android:name="com.google.android.c2dm.intent.REGISTRATION" /> </intent-filter> </service> <service android:name="com.moengage.receiver.MoEInstanceIDListener" android:exported="false"> <intent-filter> <action android:name="com.google.android.gms.iid.InstanceID"/> </intent-filter> </service>
												Node:
												(type) c
												(layer)4
													Element:p
														Add the below components into the
													Element:code
														AndroidManifest.xml
														for Install Intents
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														<!-- MOENGAGE RECEIVER FOR RECEIVING INSTALLATION INTENT --> <receiver android:name="com.moe.pushlibrary.InstallReceiver" > <intent-filter> <action android:name="com.android.vending.INSTALL_REFERRER" /> </intent-filter> </receiver>
												Node:
												(type) c
												(layer)4
													Element:ol
													Element:li
													Element:p
														Declaring MoEngage Specific Meta Tags: Add the following
													Element:code
														meta tags
														into the
													Element:code
														AndroidManifest.xml
														. Description of each meta tag and its value:
													Element:ul
													Element:li
													Element:code
														[APP_ID]
														: MoEngage App Id which you can find under
													Element:code
														AppSettings
														on MoEngage
													Element:a
														Dashboard
													Element:li
													Element:code
														[SENDER_ID]
														: The Google Project Number as seen on Google Developer console. This is required for GCM registration.
													Element:li
													Element:code
														[NOTIFICATION_ICON]
														: The Small Notification icon which needs to be shown. The value must be just the image file name.
													Element:li
													Element:code
														[NOTIFICATION_LARGE_ICON]
														: The large notification icon which will be used for notifications on Lollipop and above. The value must be just the image file name.
													Element:li
													Element:code
														[NOTIFICATION_TYPE]
														: Whether its multiple or single. By default it is single but specified
													Element:code
														@integer/notification_type_multiple
														it will be able to show multiple notifications as one go.
													Element:li
													Element:code
														[NOTIFICATION_TONE]
														: The Notification Tone which will be used to play when the notification is shown. By Default it is picked up from system settings but setting the sound file name will play that sound. Remember the value has to be just the sound file name.
													Element:pre
													Element:code
														<!-- MANDATORY FIELD: APP ID AS SEEN ON MOENGAGE DASHBOARD APP SETTINGS PAGE --> <meta-data android:name="APP_ID" android:value="[MOENGAGE_APP_ID]" /> <!-- MANDATORY FIELD: SENDER ID , i.e. THE PROJECT NUMBER AS MENTIONED ON GOOGLE CLOUD CONSOLE PROJECTS PAGE --> <meta-data android:name="SENDER_ID" android:value="id:[SENDER_ID]" /> <!-- MANDATORY FIELD: THE NOTIFICATION SMALL ICON WHICH WILL BE USED TO SET TO NOTIFICATIONS POSTED --> <meta-data android:name="NOTIFICATION_ICON" android:value="ic_launcher" /> <!-- MANDATORY FIELD: THE NOTIFICATION LARGE ICON WHICH WILL BE USED TO SET TO NOTIFICATIONS POSTED --> <meta-data android:name="NOTIFICATION_LARGE_ICON" android:value="large_icon" /> <!-- OPTIONAL FIELD: THE NOTIFICATION TYPE WHICH WILL BE USED, SINGLE OR MULTIPLE. DEFAULT BEHAVIOR IS SINGLE --> <meta-data android:name="NOTIFICATION_TYPE" android:value="@integer/notification_type_multiple" /> <!-- OPTIONAL FIELD: THE NOTIFICATION TONE THAT WILL BE USED. IF NOT SET WILL PLAY THE DEFAULT SOUND --> <meta-data android:name="NOTIFICATION_TONE" android:value="tring" />
													Element:li
													Element:p
														Declaring & configuring Rich Landing Activity: Add the following snippet and replace
													Element:code
														[PARENT_ACTIVITY_NAME]
														with the name of the parent activity;
													Element:code
														[ACTIVITY_NAME]
														with the activity name which should be the parent of the Rich Landing Page
													Element:pre
													Element:code
														<activity android:name="com.moe.pushlibrary.activities.MoEActivity" android:label="[ACTIVITY_NAME]" android:parentActivityName="[PARENT_ACTIVITY_AME]" > <!-- Parent activity meta-data to support 4.0 and lower --> <meta-data android:name="android.support.PARENT_ACTIVITY" android:value="[PARENT_ACTIVITY_AME]" /> </activity>
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
														Install/Update Differentiation
												Node:
												(type) c
												(layer)4
													Element:p
														We need your help to tell the SDK whether the user is a new user or an existing user. You can check for an existing SharedPreferences value and confirm whether its a fresh user or an existing user.
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														SharedPreferences pref = context.getSharedPreferences(PREF_NAME, Context.MODE_PRIVATE); if( pref.contains("your_key")){ helper.setExistingUser(true); }else{ helper.setExistingUser(false); }
												Node:
												(type) c
												(layer)4
													Element:p
														In the above code “your_key” is something you expect in the shared preference file if the app has been run at least once before. Possible values might be (firstRun, AppVersion, SenderId, Push Token, etc)
												Node:
												(type) c
												(layer)4
													Element:p
														This code should be done in your Application class and should be called only once If this code is not added INSTALL InApp/Push Campaigns will not work
												Node:
												(type) c
												(layer)4
													Element:p
														Now log on to
													Element:a
														MoEngage Dashboard
														and go to
													Element:code
														Push Platform Settings
														section. Add the GCM API Key which you have generated from the Google Developer console API Access for GCM Module. Also update the app package name.
												Node:
												(type) c
												(layer)4
													Element:p
														You are now all setup to receive push notifications from MoEngage. For more information about setting up Push Notifications, In-App messaging, Notification Center with MoEngage, see their
													Element:a
														docs
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
														Identify
												Node:
												(type) c
												(layer)4
													Element:p
														Use
													Element:a
														Identify
														to track user specific attributes. It equivalent to tracking
													Element:a
														user attributes
														on MoEngage. MoEngage supports traits supported by Segment as well as custom traits. If you set traits.id, we set that as the Unique ID for that user.
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
														Track
												Node:
												(type) c
												(layer)4
													Element:p
														Use
													Element:a
														track
														to track events and user behaviour in your app. This will send the event to MoEngage with the associated properties. Tracking events is essential and will help you create segments for engaging users.
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
														Reset
												Node:
												(type) c
												(layer)4
													Element:p
														If your app supports the ability for a user to logout and login with a new identity, then you’ll need to call reset for the Analytics client.
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
														Migrating from older version(One time process)
												Node:
												(type) c
												(layer)4
													Element:p
														Please refer to
													Element:a
														this
														link to migrate from SDK version less than 2.0.00
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
														Sample Implementation
												Node:
												(type) c
												(layer)4
													Element:p
														Refer to
													Element:a
														this
														github repository for sample implementation
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								APP_ID
						Node:
						(type) c
						(layer)2
							Element:p
								You can find the APP_ID key under
							Element:code
								App Settings
								on the MoEngage
							Element:a
								dashboard
						Node:
						(type) c
						(layer)2
							Element:hr
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Supported Sources and Connection Modes
						Node:
						(type) c
						(layer)2
							Element:table
							Element:tr
							Element:th
							Element:th
								Web
							Element:th
								Mobile
							Element:th
								Server
							Element:tr
							Element:td
								📱 Device-based
							Element:td
							Element:td
								✅
							Element:td
							Element:tr
							Element:td
								☁️ Cloud-based
							Element:td
							Element:td
							Element:td
						Node:
						(type) c
						(layer)2
							Element:p
								To learn more about about Connection Modes and what dictates which we support,
							Element:a
								see here
								.
						Node:
						(type) c
						(layer)2
							Element:p
								This integration
							Element:em
								requires
								a
							Element:strong
								Device-based
								Connection Mode for
							Element:strong
								Mobile
								data. Follow the steps above to ensure you have packaged the MoEngage SDK with Segment’s.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Settings
						Node:
						(type) c
						(layer)2
							Element:p
								Segment lets you change these integration settings via your Segment dashboard without having to touch any code.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											APP ID
									Node:
									(type) c
									(layer)3
										Element:p
											You can find the APP_ID key under App Settings on the MoEngage dashboard. Please make sure you have uploaded the pem file for sending push on iOS and GCM Key for Android.
									Node:
									(type) c
									(layer)3
										Element:hr
									Node:
									(type) c
									(layer)3
										Element:p
											If you have any questions or see anywhere we can improve our documentation, please
										Element:a
											let us know
											or kick off a conversation in the
										Element:a
											Segment Community
											!
									Node:
									(type) c
									(layer)3
										Element:i
									Node:
									(type) c
									(layer)3
										Element:i
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
									Node:
									(type) c
									(layer)3
										Element:span
											Check out the code!
									Node:
									(type) c
									(layer)3
										Element:a
											android
									Node:
									(type) c
									(layer)3
										Element:a
											ios
