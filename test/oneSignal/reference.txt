Node:
(type) c
(layer)0
	Element:section
						Node:
						(type) h2
						(layer)2
							Element:h2
								Create notification
						Node:
						(type) c
						(layer)2
							Element:p
								Sends notifications to your users
						Node:
						(type) c
						(layer)2
							Element:span
								post
								https://
						Node:
						(type) c
						(layer)2
							Element:span
							Element:span
								onesignal.com/api/v1
							Element:span
								/notifications
						Node:
						(type) c
						(layer)2
							Element:p
								The Create Notification method is used when you want your server to programmatically send notifications to a segment or individual users. You may target users in one of three ways using this method: by
							Element:strong
								Segment
								, by
							Element:strong
								Filter
								, or by
							Element:strong
								Device
								. At least one targeting parameter must be specified.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:i
											You may only use one method of targeting users
									Node:
									(type) c
									(layer)3
										Element:p
											If a targeting parameter of one type is used, then targeting parameters from other types may not be used. For instance, you cannot use the
										Element:code
											included_segments
											parameter (from segments) with the
										Element:code
											filters
											.
						Node:
						(type) h2
						(layer)2
							Element:h2
								Send to Segments
							Element:a
						Node:
						(type) c
						(layer)2
							Element:p
								Parameter Type Description
							Element:a
								Segments
								are the most common way developers send notifications via OneSignal. Sending to segments is easy: you simply specify which segments you want to send to, and, optionally, which ones you don't.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								included_segments
						Node:
						(type) c
						(layer)2
							Element:p
								array_string
						Node:
						(type) c
						(layer)2
							Element:p
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								Required
								The segment names you want to target. Users in these segments
							Element:em
								will
								receive a notification. This targeting parameter is
							Element:em
								only compatible with
							Element:code
								excluded_segments
								.
						Node:
						(type) c
						(layer)2
							Element:br
						Node:
						(type) c
						(layer)2
							Element:p
								Example:
							Element:code
								["Active Users", "Inactive Users"]
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								excluded_segments
						Node:
						(type) c
						(layer)2
							Element:p
								array_string
						Node:
						(type) c
						(layer)2
							Element:p
						Node:
						(type) c
						(layer)2
							Element:p
								Segment that will be excluded when sending. Users in these segments
							Element:em
								will not
								receive a notification, even if they were included in
							Element:code
								included_segments
								. This targeting parameter is
							Element:em
								only compatible with
							Element:code
								included_segments
								.
						Node:
						(type) c
						(layer)2
							Element:br
						Node:
						(type) c
						(layer)2
							Element:p
								Example:
							Element:code
								["Active Users", "Inactive Users"]
						Node:
						(type) c
						(layer)2
							Element:h3
							Element:i
								Requires Authentication Key
						Node:
						(type) c
						(layer)2
							Element:p
								Requires your OneSignal App Auth Key, available in
							Element:a
								Keys & IDs
								.
						Node:
						(type) c
						(layer)2
							Element:h3
								Segments Usage
							Element:a
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
								Tip: If you want to send to all your users, just send to the
							Element:code
								All Users
								segment, which is available in every app you create in OneSignal.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:a
								See below for example code
						Node:
						(type) h2
						(layer)2
							Element:h2
								Send to Users Based on Filters
							Element:a
						Node:
						(type) c
						(layer)2
							Element:p
							Element:a
								Filters
								are a powerful way to target users, allowing you to use both data that OneSignal has about a user and any
							Element:a
								Tags
								your app may send OneSignal. Filters can be combined together to form advanced, highly precise user targeting. OneSignal customers use all sorts of filters to send notifications, including language, location, user activity, and more.
						Node:
						(type) c
						(layer)2
							Element:p
								The
								Option Description
							Element:code
								filters
								parameter targets notification recipients using an array of JSON objects containing field conditions to check. The following are filter field options:
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								last_session
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								relation
								=
							Element:code
								">"
								or
							Element:code
								"<"
							Element:br
							Element:code
								hours_ago
								= number of hours before or after the users last session. Example:
							Element:code
								"1.1"
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								first_session
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								relation
								=
							Element:code
								">"
								or
							Element:code
								"<"
							Element:br
							Element:code
								hours_ago
								= number of hours before or after the users first session. Example:
							Element:code
								"1.1"
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								session_count
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								relation
								=
							Element:code
								">"
								,
							Element:code
								"<"
								,
							Element:code
								"="
								or
							Element:code
								"!="
							Element:br
							Element:code
								value
								= number sessions. Example:
							Element:code
								"1"
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								session_time
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								relation
								=
							Element:code
								">"
								or
							Element:code
								"<"
							Element:br
							Element:code
								value
								= Time in seconds the user has been in your app. Example:
							Element:code
								"3600"
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								amount_spent
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								relation
								=
							Element:code
								">"
								,
							Element:code
								"<"
								, or
							Element:code
								"="
							Element:br
							Element:code
								value
								= Amount in USD a user has spent on IAP (In App Purchases). Example:
							Element:code
								"0.99"
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								bought_sku
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								relation
								=
							Element:code
								">"
								,
							Element:code
								"<"
								or
							Element:code
								"="
							Element:br
							Element:code
								key
								= SKU purchased in your app as an IAP (In App Purchases). Example:
							Element:code
								"com.domain.100coinpack"
							Element:br
							Element:code
								value
								= value of SKU to compare to. Example:
							Element:code
								"0.99"
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								tag
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								relation
								=
							Element:code
								">"
								,
							Element:code
								"<"
								,
							Element:code
								"="
								,
							Element:code
								"!="
								,
							Element:code
								"exists"
								or
							Element:code
								"not_exists"
							Element:br
							Element:code
								key
								= Tag key to compare.
							Element:br
							Element:code
								value
								= Tag value to compare. Not required for
							Element:code
								"exists"
								or
							Element:code
								"not_exists"
								. Example: See
							Element:a
								Formatting Filters
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								language
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								relation
								=
							Element:code
								"="
								or
							Element:code
								"!="
							Element:br
							Element:code
								value
								= 2 character language code. Example:
							Element:code
								"en"
								. For a list of all language codes
							Element:a
								go here
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								app_version
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								relation
								=
							Element:code
								">"
								,
							Element:code
								"<"
								,
							Element:code
								"="
								or
							Element:code
								"!="
							Element:br
							Element:code
								value
								= app version. Example:
							Element:code
								"1.0.0"
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								location
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								radius
								= in meters
							Element:br
							Element:code
								lat
								= latitude
							Element:br
							Element:code
								long
								= longitude
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								email
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								value
								= email address
						Node:
						(type) c
						(layer)2
							Element:h3
							Element:i
								Requires Authentication Key
						Node:
						(type) c
						(layer)2
							Element:p
								Requires your OneSignal App Auth Key, available in
							Element:a
								Keys & IDs
								.
						Node:
						(type) c
						(layer)2
							Element:h3
								Filter Usage
							Element:a
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
								Filter entries use
							Element:code
								AND
								by default; insert
							Element:code
								{"operator": "OR"}
								between entries to
							Element:code
								OR
								the parameters together.
							Element:li
								For performance reasons, a
							Element:em
								maximum of 200 entries
								can be used at a time. The 200 entries limit includes the "relation" entry and "field" entry -- each entry contributes to the 200 limit.
							Element:li
								This filter targeting parameter cannot be combined with any other targeting parameters.
						Node:
						(type) c
						(layer)2
							Element:h3
								Formatting Filters
							Element:a
						Node:
						(type) c
						(layer)2
							Element:p
								The power of filters comes from combining several fields and operators to precisely target your users. The following are examples of filters and how to format them:
						Node:
						(type) c
						(layer)2
							Element:ol
							Element:li
							Element:p
								A user
							Element:em
								is
								level 10
							Element:em
								and
								purchased an item
							Element:li
							Element:p
								A user
							Element:em
								is
								level 10
							Element:em
								or
								20
							Element:li
							Element:p
								A user
							Element:em
								is not
								VIP
							Element:em
								or
								is admin
							Element:li
							Element:p
								User's tags include key username
							Element:em
								and
								the user is not banned.
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:a
								Formatting Example 1
							Element:li
							Element:a
								Formatting Example 2
							Element:li
							Element:a
								Formatting Example 3
							Element:li
							Element:a
								Formatting Example 4
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
								[ {
							Element:span
								"field"
								:
							Element:span
								"tag"
								,
							Element:span
								"key"
								:
							Element:span
								"level"
								,
							Element:span
								"relation"
								:
							Element:span
								">"
								,
							Element:span
								"value"
								:
							Element:span
								"10"
								}, {
							Element:span
								"field"
								:
							Element:span
								"amount_spent"
								,
							Element:span
								"relation"
								:
							Element:span
								">"
								,
							Element:span
								"value"
								:
							Element:span
								"0"
								} ]
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
								[ {
							Element:span
								"field"
								:
							Element:span
								"tag"
								,
							Element:span
								"key"
								:
							Element:span
								"level"
								,
							Element:span
								"relation"
								:
							Element:span
								"="
								,
							Element:span
								"value"
								:
							Element:span
								"10"
								}, {
							Element:span
								"operator"
								:
							Element:span
								"OR"
								}, {
							Element:span
								"field"
								:
							Element:span
								"tag"
								,
							Element:span
								"key"
								:
							Element:span
								"level"
								,
							Element:span
								"relation"
								:
							Element:span
								"="
								,
							Element:span
								"value"
								:
							Element:span
								"20"
								} ]
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
								[ {
							Element:span
								"field"
								:
							Element:span
								"tag"
								,
							Element:span
								"key"
								:
							Element:span
								"is_vip"
								,
							Element:span
								"relation"
								:
							Element:span
								"!="
								,
							Element:span
								"value"
								:
							Element:span
								"true"
								}, {
							Element:span
								"operator"
								:
							Element:span
								"OR"
								}, {
							Element:span
								"field"
								:
							Element:span
								"tag"
								,
							Element:span
								"key"
								:
							Element:span
								"is_admin"
								,
							Element:span
								"relation"
								:
							Element:span
								"="
								,
							Element:span
								"value"
								:
							Element:span
								"true"
								} ]
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
								[ {
							Element:span
								"field"
								:
							Element:span
								"tag"
								,
							Element:span
								"key"
								:
							Element:span
								"username"
								,
							Element:span
								"relation"
								:
							Element:span
								"exists"
								}, {
							Element:span
								"field"
								:
							Element:span
								"tag"
								,
							Element:span
								"key"
								:
							Element:span
								"banned"
								,
							Element:span
								"relation"
								:
							Element:span
								"!="
								,
							Element:span
								"value"
								:
							Element:span
								"true"
								} ]
						Node:
						(type) c
						(layer)2
							Element:p
							Element:a
								See below for example code
						Node:
						(type) h2
						(layer)2
							Element:h2
								Send to Specific Devices
							Element:a
						Node:
						(type) c
						(layer)2
							Element:p
								Finally, you may also target specific devices with the create notification method. Targeting devices is typically used in two ways:
						Node:
						(type) c
						(layer)2
							Element:ol
							Element:li
							Element:p
								For notifications that target individual users, such as if they've received a message from someone.
							Element:li
							Element:p
								For apps that wish to manage their own segments, such as tracking a user's followers and sending notifications to them when that user posts.
						Node:
						(type) c
						(layer)2
							Element:p
								When targeting specific devices, you may use any of the following parameters together:
								Parameter Type Description
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								include_player_ids
						Node:
						(type) c
						(layer)2
							Element:p
								array_string
						Node:
						(type) c
						(layer)2
							Element:p
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								Recommended
								- Specific players to send your notification to.
							Element:em
								Does not require API Auth Key.
						Node:
						(type) c
						(layer)2
							Element:p
						Node:
						(type) c
						(layer)2
							Element:p
								Do not combine with other targeting parameters. Not compatible with any other targeting parameters. Example:
							Element:code
								["1dd608f2-c6a1-11e3-851d-000c2940e62c"]
							Element:br
							Element:em
								Limit of 2,000 entries per REST API call
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								include_ios_tokens
						Node:
						(type) c
						(layer)2
							Element:p
								array_string
						Node:
						(type) c
						(layer)2
							Element:p
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								Not Recommended
								- Please consider using
							Element:code
								include_player_ids
								instead.
						Node:
						(type) c
						(layer)2
							Element:br
						Node:
						(type) c
						(layer)2
							Element:p
								Target using iOS device tokens.
							Element:strong
								Warning:
								Only works with
							Element:em
								Production
								tokens.
						Node:
						(type) c
						(layer)2
							Element:br
						Node:
						(type) c
						(layer)2
							Element:p
								All non-alphanumeric characters must be removed from each token. If a token does not correspond to an existing user, a new user will be created. Example:
							Element:code
								ce777617da7f548fe7a9ab6febb56cf39fba6d38203...
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								include_wp_urls
						Node:
						(type) c
						(layer)2
							Element:p
								array_string
						Node:
						(type) c
						(layer)2
							Element:p
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								Not Recommended
								Please consider using
							Element:code
								include_player_ids
								instead.
						Node:
						(type) c
						(layer)2
							Element:br
						Node:
						(type) c
						(layer)2
							Element:p
								Target using Windows Phone 8.0 URIs. If a token does not correspond to an existing user, a new user will be created. Example:
							Element:code
								http://s.notify.live.net/u/1/bn1/HmQAAACPaLDr-...
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								include_wp_wns_uris
						Node:
						(type) c
						(layer)2
							Element:p
								array_string
						Node:
						(type) c
						(layer)2
							Element:p
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								Not Recommended
								Please consider using
							Element:code
								include_player_ids
								instead.
						Node:
						(type) c
						(layer)2
							Element:br
						Node:
						(type) c
						(layer)2
							Element:p
								Target using Windows Phone 8.1 URIs. If a token does not correspond to an existing user, a new user will be created. Example:
							Element:code
								http://s.notify.live.net/u/1/bn1/HmQAAACPaLDr-...
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								include_amazon_reg_ids
						Node:
						(type) c
						(layer)2
							Element:p
								array_string
						Node:
						(type) c
						(layer)2
							Element:p
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								Not Recommended
								Please consider using
							Element:code
								include_player_ids
								instead.
						Node:
						(type) c
						(layer)2
							Element:br
						Node:
						(type) c
						(layer)2
							Element:p
								Target using Amazon ADM registration IDs. If a token does not correspond to an existing user, a new user will be created. Example:
							Element:code
								amzn1.adm-registration.v1.XpvSSUk0Rc3hTVVV...
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								include_chrome_reg_ids
						Node:
						(type) c
						(layer)2
							Element:p
								array_string
						Node:
						(type) c
						(layer)2
							Element:p
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								Not Recommended
								Please consider using
							Element:code
								include_player_ids
								instead.
						Node:
						(type) c
						(layer)2
							Element:br
						Node:
						(type) c
						(layer)2
							Element:p
								Target using Chrome App registration IDs. If a token does not correspond to an existing user, a new user will be created. Example:
							Element:code
								APA91bEeiUeSukAAUdnw3O2RB45FWlSpgJ7Ji_...
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								include_chrome_web_reg_ids
						Node:
						(type) c
						(layer)2
							Element:p
								array_string
						Node:
						(type) c
						(layer)2
							Element:p
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								Not Recommended
								Please consider using
							Element:code
								include_player_ids
								instead, as web push registration IDs can vary over time where OneSignal player IDs remain constant.
						Node:
						(type) c
						(layer)2
							Element:br
						Node:
						(type) c
						(layer)2
							Element:p
								Target using Chrome Web Push registration IDs. If a token does not correspond to an existing user, a new user will be created. Example:
							Element:code
								APA91bEeiUeSukAAUdnw3O2RB45FWlSpgJ7Ji_...
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								include_android_reg_ids
						Node:
						(type) c
						(layer)2
							Element:p
								array_string
						Node:
						(type) c
						(layer)2
							Element:p
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								Not Recommended
								Please consider using
							Element:code
								include_player_ids
								instead, as android tokens occasionally change, which causes devices to become invalid and limits your audience.
						Node:
						(type) c
						(layer)2
							Element:br
						Node:
						(type) c
						(layer)2
							Element:p
								Target using Android device registration IDs. If a token does not correspond to an existing user, a new user will be created. Example:
							Element:code
								APA91bEeiUeSukAAUdnw3O2RB45FWlSpgJ7Ji_...
						Node:
						(type) c
						(layer)2
							Element:h3
								Specific Devices Usage
							Element:a
						Node:
						(type) c
						(layer)2
							Element:h3
							Element:i
								Requires Authentication Key
						Node:
						(type) c
						(layer)2
							Element:p
								This method requires an application 'REST API Key' when using
							Element:code
								include_segments
								or
							Element:code
								filters
								, which is available in
							Element:a
								Keys & IDs
								.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:strong
								NEVER
								use your 'REST API key' in client code, it is intended for use on your system or server only. Add the REST API Key to the HTTP 'Authorization' header as basic authentication. Check out the examples above (except the JSON example) for some tips.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:a
								See below for example code
						Node:
						(type) h2
						(layer)2
							Element:h2
								Common Parameters
							Element:a
						Node:
						(type) c
						(layer)2
							Element:p
								The following are parameters in Create Notifications common to all methods of targeting users.
						Node:
						(type) c
						(layer)2
							Element:h3
								App
								Parameter Type Platform
							Element:a
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								app_id
						Node:
						(type) c
						(layer)2
							Element:p
								string
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								All
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								Required
								Your OneSignal application ID, which can be found in
							Element:a
								Keys & IDs
								. It is a UUID and looks similar to
							Element:code
								8250eaf6-1a58-489e-b136-7c74a864b434
								.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								app_ids
						Node:
						(type) c
						(layer)2
							Element:p
								array of strings
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								Android
								,
							Element:span
								iOS
						Node:
						(type) c
						(layer)2
							Element:p
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								Required
								Your User Auth Key, which can be found in
							Element:a
								Account
								.
						Node:
						(type) c
						(layer)2
							Element:p
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								app_ids
								contains an array of OneSignal app IDs. All users within these apps will receive at most one notification.
						Node:
						(type) c
						(layer)2
							Element:p
						Node:
						(type) c
						(layer)2
							Element:p
								Example:
							Element:code
								["2dd608f2-a6a1-11e3-251d-400c2940e62b", "2dd608f2-a6a1-11e3-251d-500f2950e61c"]
						Node:
						(type) c
						(layer)2
							Element:br
						Node:
						(type) c
						(layer)2
							Element:span
								Important Node:
								No targeting parameters may be used when using the
						Node:
						(type) c
						(layer)2
							Element:code
								app_ids
								parameter. All subscribed users will receive the notification
						Node:
						(type) c
						(layer)2
							Element:h3
								Content & Language
							Element:a
						Node:
						(type) c
						(layer)2
							Element:p
								The content you want to send in notifications.
								Parameter Type Platform Description
							Element:a
								Read more: supported languages.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								contents
						Node:
						(type) c
						(layer)2
							Element:p
								object
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								All
						Node:
						(type) c
						(layer)2
							Element:p
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								Required
								unless
							Element:code
								content_available=true
								or
							Element:code
								template_id
								is set.
						Node:
						(type) c
						(layer)2
							Element:br
						Node:
						(type) c
						(layer)2
							Element:p
								The notification's content (excluding the title), a map of language codes to text for each language.
						Node:
						(type) c
						(layer)2
							Element:br
						Node:
						(type) c
						(layer)2
							Element:p
								Each hash must have a language code string for a key, mapped to the localized text you would like users to receive for that language.
							Element:br
							Element:strong
								This field supports
							Element:a
								inline substitutions
								.
							Element:br
							Element:strong
								English must be included in the hash
								.
						Node:
						(type) c
						(layer)2
							Element:br
						Node:
						(type) c
						(layer)2
							Element:p
								Example:
							Element:code
								{"en": "English Message", "es": "Spanish Message"}
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								headings
						Node:
						(type) c
						(layer)2
							Element:p
								object
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								All
						Node:
						(type) c
						(layer)2
							Element:p
						Node:
						(type) c
						(layer)2
							Element:p
								The notification's title, a map of language codes to text for each language. Each hash must have a language code string for a key, mapped to the localized text you would like users to receive for that language. A default title may be displayed if a title is not provided.
							Element:br
							Element:strong
								This field supports
							Element:a
								inline substitutions
								.
						Node:
						(type) c
						(layer)2
							Element:br
						Node:
						(type) c
						(layer)2
							Element:p
								Example:
							Element:code
								{"en": "English Title", "es": "Spanish Title"}
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								subtitle
						Node:
						(type) c
						(layer)2
							Element:p
								object
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								iOS 10+
						Node:
						(type) c
						(layer)2
							Element:p
						Node:
						(type) c
						(layer)2
							Element:p
								The notification's subtitle, a map of language codes to text for each language. Each hash must have a language code string for a key, mapped to the localized text you would like users to receive for that language. A default title may be displayed if a title is not provided.
							Element:br
							Element:strong
								This field supports
							Element:a
								inline substitutions
								.
						Node:
						(type) c
						(layer)2
							Element:br
						Node:
						(type) c
						(layer)2
							Element:p
								Example:
							Element:code
								{"en": "English Subtitle", "es": "Spanish Subtitle"}
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								template_id
						Node:
						(type) c
						(layer)2
							Element:p
								string
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								All
						Node:
						(type) c
						(layer)2
							Element:p
						Node:
						(type) c
						(layer)2
							Element:p
								Use a template you setup on our dashboard. You can override the template values by sending other parameters with the request. The template_id is the UUID found in the URL when viewing a template on our dashboard.
						Node:
						(type) c
						(layer)2
							Element:br
						Node:
						(type) c
						(layer)2
							Element:p
								Example:
							Element:code
								be4a8044-bbd6-11e4-a581-000c2940e62c
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								content_available
						Node:
						(type) c
						(layer)2
							Element:p
								boolean
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								iOS
						Node:
						(type) c
						(layer)2
							Element:p
								Sending
							Element:code
								true
								wakes your app from background to run custom native code (Apple interprets this as
							Element:code
								content-available=1
								).
							Element:em
								Note: Not applicable if the app is in the "force-quit" state (i.e app was swiped away).
								Omit the
							Element:code
								contents
								field to prevent displaying a visible notification.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								mutable_content
						Node:
						(type) c
						(layer)2
							Element:p
								boolean
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								iOS 10+
						Node:
						(type) c
						(layer)2
							Element:p
								Sending
							Element:code
								true
								allows you to change the notification content in your app before it is displayed. Triggers
							Element:code
								didReceive(_:withContentHandler:)
								on your
							Element:a
								UNNotificationServiceExtension
								.
						Node:
						(type) c
						(layer)2
							Element:h3
								Attachments
							Element:a
						Node:
						(type) c
						(layer)2
							Element:p
								These are additional content attached to notifications, primarily images.
								Parameter Type Platform Description
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								data
						Node:
						(type) c
						(layer)2
							Element:p
								object
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								All
						Node:
						(type) c
						(layer)2
							Element:p
						Node:
						(type) c
						(layer)2
							Element:p
								A custom map of data that is passed back to your app.
						Node:
						(type) c
						(layer)2
							Element:br
						Node:
						(type) c
						(layer)2
							Element:p
								Example:
							Element:code
								{"abc": "123", "foo": "bar"}
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								url
						Node:
						(type) c
						(layer)2
							Element:p
								string
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								All
						Node:
						(type) c
						(layer)2
							Element:p
						Node:
						(type) c
						(layer)2
							Element:p
								The URL to open in the browser when a user clicks on the notification.
						Node:
						(type) c
						(layer)2
							Element:p
								Example:
							Element:code
								http://www.google.com
						Node:
						(type) c
						(layer)2
							Element:br
						Node:
						(type) c
						(layer)2
							Element:p
								Note: iOS needs https or updated NSAppTransportSecurity in plist
						Node:
						(type) c
						(layer)2
							Element:br
						Node:
						(type) c
						(layer)2
							Element:p
							Element:strong
								This field supports
							Element:a
								inline substitutions
								.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								ios_attachments
						Node:
						(type) c
						(layer)2
							Element:p
								object
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								iOS 10+
						Node:
						(type) c
						(layer)2
							Element:p
						Node:
						(type) c
						(layer)2
							Element:p
								Adds media attachments to notifications. Set as JSON object, key as a media id of your choice and the value as a valid local filename or URL. User must press and hold on the notification to view.
						Node:
						(type) c
						(layer)2
							Element:br
						Node:
						(type) c
						(layer)2
							Element:p
								Do not set
							Element:code
								mutable_content
								to download attachments. The OneSignal SDK does this automatically
						Node:
						(type) c
						(layer)2
							Element:br
						Node:
						(type) c
						(layer)2
							Element:p
								Example:
							Element:code
								{"id1": "https://domain.com/image.jpg"}
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								big_picture
						Node:
						(type) c
						(layer)2
							Element:p
								string
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								Android
						Node:
						(type) c
						(layer)2
							Element:p
								Picture to display in the expanded view. Can be a drawable resource name or a URL.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								adm_big_picture
						Node:
						(type) c
						(layer)2
							Element:p
								string
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								Amazon
						Node:
						(type) c
						(layer)2
							Element:p
								Picture to display in the expanded view. Can be a drawable resource name or a URL.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								chrome_big_picture
						Node:
						(type) c
						(layer)2
							Element:p
								string
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								ChromeApp
						Node:
						(type) c
						(layer)2
							Element:p
								Large picture to display below the notification text. Must be a local URL.
						Node:
						(type) c
						(layer)2
							Element:h3
								Action Buttons
							Element:a
						Node:
						(type) c
						(layer)2
							Element:p
								These add buttons to notifications, allowing the user to take more than one action on a notification.
								Parameter Type Platform Description
							Element:a
								Learn more about Action Buttons
								.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								buttons
						Node:
						(type) c
						(layer)2
							Element:p
								array_object
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								iOS 8.0+
								,
							Element:span
								Android 4.1+
								(and derivatives like
							Element:span
								Amazon
								)
						Node:
						(type) c
						(layer)2
							Element:p
						Node:
						(type) c
						(layer)2
							Element:p
								Buttons to add to the notification. Icon only works for Android.
						Node:
						(type) c
						(layer)2
							Element:br
						Node:
						(type) c
						(layer)2
							Element:p
								Example:
							Element:code
								[{"id": "id1", "text": "button1", "icon": "ic_menu_share"}, {"id": "id2", "text": "button2", "icon": "ic_menu_send"}]
						Node:
						(type) c
						(layer)2
							Element:p
						Node:
						(type) c
						(layer)2
							Element:p
								Swift Example:
							Element:code
								[["id": "id1", "text": "button1"], ["id": "id2", "text": "button2"]]
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								web_buttons
						Node:
						(type) c
						(layer)2
							Element:p
								array_object
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								Chrome 48+
						Node:
						(type) c
						(layer)2
							Element:p
								Add action buttons to the notification. The
							Element:code
								id
								field is required.
						Node:
						(type) c
						(layer)2
							Element:p
						Node:
						(type) c
						(layer)2
							Element:p
								Example:
							Element:code
								[{"id": "like-button", "text": "Like", "icon": "http://i.imgur.com/N8SN8ZS.png", "url": "https://yoursite.com"}, {"id": "read-more-button", "text": "Read more", "icon": "http://i.imgur.com/MIxJp1L.png", "url": "https://yoursite.com"}]
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								ios_category
						Node:
						(type) c
						(layer)2
							Element:p
								string
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								iOS
						Node:
						(type) c
						(layer)2
							Element:p
							Element:a
								Category APS
								payload, use with
							Element:code
								registerUserNotificationSettings:categories
								in your Objective-C / Swift code.
						Node:
						(type) c
						(layer)2
							Element:p
						Node:
						(type) c
						(layer)2
							Element:p
								Example:
							Element:code
								calendar
								category which contains actions like
							Element:code
								accept
								and
							Element:code
								decline
						Node:
						(type) c
						(layer)2
							Element:p
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								iOS 10+
								This will trigger your
							Element:a
								UNNotificationContentExtension
								whose ID matches this category.
						Node:
						(type) c
						(layer)2
							Element:h3
								Appearance
							Element:a
						Node:
						(type) c
						(layer)2
							Element:p
								These parameters let you adjust notification icons, sounds, badges, and other appearance changes to your notifications.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:strong
								Icons
								- Different platforms handle icons differently.
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
								Android - Our SDK shows a bell icon by default. See our
							Element:a
								Android Notification Icons
								guide to change this.
							Element:li
								iOS - The icon will always be your app icon. Apple does not allow this to be configured.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:strong
								Sounds
								- By default, the device notification sound plays when a new notification arrives. You may alter this by specifying a different sound asset.
						Node:
						(type) c
						(layer)2
							Element:p
								Parameter Type Platform Description
							Element:strong
								Badges
								- shows the number of notifications outstanding. Note: Android badges are automatically handled by OneSignal.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								android_background_layout
						Node:
						(type) c
						(layer)2
							Element:p
								object
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								Android
						Node:
						(type) c
						(layer)2
							Element:p
						Node:
						(type) c
						(layer)2
							Element:p
								Allowing setting a background image for the notification. This is a JSON object containing the following keys. See our
							Element:a
								Background Image
								documentation for image sizes.
						Node:
						(type) c
						(layer)2
							Element:p
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								image
								- Asset file, android resource name, or URL to remote image.
						Node:
						(type) c
						(layer)2
							Element:p
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								headings_color
								- Title text color ARGB Hex format. Example(Blue):
							Element:code
								"FF0000FF"
								.
						Node:
						(type) c
						(layer)2
							Element:p
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								contents_color
								- Body text color ARGB Hex format. Example(Red):
							Element:code
								"FFFF0000"
						Node:
						(type) c
						(layer)2
							Element:p
						Node:
						(type) c
						(layer)2
							Element:p
								Example:
							Element:code
								{"image": "https://domain.com/background_image.jpg", "headings_color": "FFFF0000", "contents_color": "FF00FF00"}
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								small_icon
						Node:
						(type) c
						(layer)2
							Element:p
								string
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								Android
						Node:
						(type) c
						(layer)2
							Element:p
								If not set a bell icon will be used or
							Element:code
								ic_stat_onesignal_default
								if you have set this resource name.
							Element:br
								See:
							Element:a
								How to create small icons
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								large_icon
						Node:
						(type) c
						(layer)2
							Element:p
								string
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								Android
						Node:
						(type) c
						(layer)2
							Element:p
								If blank the
							Element:code
								small_icon
								is used. Can be a drawable resource name or a URL.
							Element:br
								See:
							Element:a
								How to create large icons
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								adm_small_icon
						Node:
						(type) c
						(layer)2
							Element:p
								string
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								Amazon
						Node:
						(type) c
						(layer)2
							Element:p
								If not set a bell icon will be used or
							Element:code
								ic_stat_onesignal_default
								if you have set this resource name.
							Element:br
								See:
							Element:a
								How to create small icons
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								adm_large_icon
						Node:
						(type) c
						(layer)2
							Element:p
								string
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								Amazon
						Node:
						(type) c
						(layer)2
							Element:p
								If blank the
							Element:code
								small_icon
								is used. Can be a drawable resource name or a URL.
							Element:br
								See:
							Element:a
								How to create large icons
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								chrome_web_icon
						Node:
						(type) c
						(layer)2
							Element:p
								string
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								Chrome
						Node:
						(type) c
						(layer)2
							Element:p
								Sets the web push notification's icon. An image URL linking to a valid image. Common image types are supported; GIF will not animate. We recommend 256x256 (at least 80x80) to display well on high DPI devices. Firefox will also use this icon, unless you specify
							Element:code
								firefox_icon
								.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								chrome_web_image
						Node:
						(type) c
						(layer)2
							Element:p
								string
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								Chrome 56+ Only
						Node:
						(type) c
						(layer)2
							Element:p
								Sets the web push notification's large image to be shown below the notification's title and text. Please see
							Element:a
								Web Push Notification Icons
								.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								firefox_icon
						Node:
						(type) c
						(layer)2
							Element:p
								string
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								Firefox
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								Not recommended
								Few people need to set Firefox-specific icons. We recommend setting
							Element:code
								chrome_web_icon
								instead, which Firefox will also use.
						Node:
						(type) c
						(layer)2
							Element:p
								Sets the web push notification's icon for Firefox. An image URL linking to a valid image. Common image types are supported; GIF will not animate. We recommend 256x256 (at least 80x80) to display well on high DPI devices.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								chrome_icon
						Node:
						(type) c
						(layer)2
							Element:p
								string
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								ChromeApp
						Node:
						(type) c
						(layer)2
							Element:p
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								This flag is not used for web push
								For web push, please see
							Element:code
								chrome_web_icon
								instead.
						Node:
						(type) c
						(layer)2
							Element:br
						Node:
						(type) c
						(layer)2
							Element:p
								The local URL to an icon to use. If blank, the app icon will be used.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								ios_sound
						Node:
						(type) c
						(layer)2
							Element:p
								string
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								iOS
						Node:
						(type) c
						(layer)2
							Element:p
						Node:
						(type) c
						(layer)2
							Element:p
								Sound file that is included in your app to play instead of the default device notification sound. Pass "nil" to disable vibration and sound for the notification.
						Node:
						(type) c
						(layer)2
							Element:br
						Node:
						(type) c
						(layer)2
							Element:p
								Example:
							Element:code
								"notification.wav"
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								android_sound
						Node:
						(type) c
						(layer)2
							Element:p
								string
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								Android
						Node:
						(type) c
						(layer)2
							Element:p
						Node:
						(type) c
						(layer)2
							Element:p
								Sound file that is included in your app to play instead of the default device notification sound. NOTE: Leave off file extension for Android.
						Node:
						(type) c
						(layer)2
							Element:p
						Node:
						(type) c
						(layer)2
							Element:p
								Example:
							Element:code
								"notification"
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								adm_sound
						Node:
						(type) c
						(layer)2
							Element:p
								string
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								Amazon
						Node:
						(type) c
						(layer)2
							Element:p
						Node:
						(type) c
						(layer)2
							Element:p
								Sound file that is included in your app to play instead of the default device notification sound.
						Node:
						(type) c
						(layer)2
							Element:p
								NOTE: Leave off file extension for Android.
						Node:
						(type) c
						(layer)2
							Element:br
						Node:
						(type) c
						(layer)2
							Element:p
								Example:
							Element:code
								"notification"
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								wp_sound
						Node:
						(type) c
						(layer)2
							Element:p
								string
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								Windows 8.0
						Node:
						(type) c
						(layer)2
							Element:p
						Node:
						(type) c
						(layer)2
							Element:p
								Sound file that is included in your app to play instead of the default device notification sound.
						Node:
						(type) c
						(layer)2
							Element:p
								Example:
							Element:code
								"notification.wav"
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								wp_wns_sound
						Node:
						(type) c
						(layer)2
							Element:p
								string
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								Windows 8.1
						Node:
						(type) c
						(layer)2
							Element:p
						Node:
						(type) c
						(layer)2
							Element:p
								Sound file that is included in your app to play instead of the default device notification sound.
						Node:
						(type) c
						(layer)2
							Element:p
								Example:
							Element:code
								"notification.wav"
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								android_led_color
						Node:
						(type) c
						(layer)2
							Element:p
								string
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								Android
						Node:
						(type) c
						(layer)2
							Element:p
						Node:
						(type) c
						(layer)2
							Element:p
								Sets the devices LED notification light if the device has one. ARGB Hex format.
						Node:
						(type) c
						(layer)2
							Element:p
								Example(Blue):
							Element:code
								"FF0000FF"
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								android_accent_color
						Node:
						(type) c
						(layer)2
							Element:p
								string
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								Android
						Node:
						(type) c
						(layer)2
							Element:p
						Node:
						(type) c
						(layer)2
							Element:p
								Sets the background color of the notification circle to the left of the notification text. Only applies to apps targeting Android API level 21+ on Android 5.0+ devices.
						Node:
						(type) c
						(layer)2
							Element:p
								Example(Red):
							Element:code
								"FFFF0000"
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								android_visibility
						Node:
						(type) c
						(layer)2
							Element:p
								int
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								Android 5.0+
						Node:
						(type) c
						(layer)2
							Element:p
						Node:
						(type) c
						(layer)2
							Element:p
								Sets the lock screen visibility for apps targeting Android API level 21+ running on Android 5.0+ devices.
						Node:
						(type) c
						(layer)2
							Element:br
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								1
								= Public (
							Element:em
								default
								) (Shows the full message on the lock screen unless the user has disabled all notifications from showing on the lock screen. Please consider the user and mark private if the contents are.)
						Node:
						(type) c
						(layer)2
							Element:br
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								0
								= Private (Hides message contents on lock screen if the user set "Hide sensitive notification content" in the system settings)
						Node:
						(type) c
						(layer)2
							Element:br
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								-1
								= Secret (Notification does not show on the lock screen at all)
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								ios_badgeType
						Node:
						(type) c
						(layer)2
							Element:p
								string
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								iOS
						Node:
						(type) c
						(layer)2
							Element:p
						Node:
						(type) c
						(layer)2
							Element:p
								Describes whether to
							Element:em
								set
								or
							Element:em
								increase/decrease
								your app's iOS badge count by the
							Element:code
								ios_badgeCount
								specified count. Can specify
							Element:code
								None
								,
							Element:code
								SetTo
								, or
							Element:code
								Increase
								.
						Node:
						(type) c
						(layer)2
							Element:p
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								None
								leaves the count unaffected.
						Node:
						(type) c
						(layer)2
							Element:p
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								SetTo
								directly sets the badge count to the number specified in
							Element:code
								ios_badgeCount
								.
						Node:
						(type) c
						(layer)2
							Element:p
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								Increase
								adds the number specified in
							Element:code
								ios_badgeCount
								to the total. Use a negative number to decrease the badge count.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								ios_badgeCount
						Node:
						(type) c
						(layer)2
							Element:p
								integer
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								iOS
						Node:
						(type) c
						(layer)2
							Element:p
						Node:
						(type) c
						(layer)2
							Element:p
								Used with
							Element:code
								ios_badgeType
								, describes the value to
							Element:em
								set
								or amount to
							Element:em
								increase/decrease
								your app's iOS badge count by.
						Node:
						(type) c
						(layer)2
							Element:p
								You can use a negative number to decrease the badge count when used with an
							Element:code
								ios_badgeType
								of
							Element:code
								Increase
								.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								collapse_id
						Node:
						(type) c
						(layer)2
							Element:p
								string
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								iOS 10+
							Element:span
								Android
						Node:
						(type) c
						(layer)2
							Element:p
								Only one notification with the same id will be shown on the device. Use the same id to update an existing notification instead of showing a new one.
							Element:br
							Element:em
								This is known as
							Element:code
								apns-collapse-id
								on iOS and
							Element:code
								collapse_key
								on Android.
						Node:
						(type) c
						(layer)2
							Element:h3
								Delivery
								Parameter Type Platform Description
							Element:a
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								send_after
						Node:
						(type) c
						(layer)2
							Element:p
								string
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								All
						Node:
						(type) c
						(layer)2
							Element:p
						Node:
						(type) c
						(layer)2
							Element:p
								Schedule notification for future delivery.
						Node:
						(type) c
						(layer)2
							Element:p
								Examples:
							Element:em
								All examples are the exact same date & time.
						Node:
						(type) c
						(layer)2
							Element:br
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								"Thu Sep 24 2015 14:00:00 GMT-0700 (PDT)"
						Node:
						(type) c
						(layer)2
							Element:br
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								"September 24th 2015, 2:00:00 pm UTC-07:00"
						Node:
						(type) c
						(layer)2
							Element:br
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								"2015-09-24 14:00:00 GMT-0700"
						Node:
						(type) c
						(layer)2
							Element:br
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								"Sept 24 2015 14:00:00 GMT-0700"
						Node:
						(type) c
						(layer)2
							Element:br
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								"Thu Sep 24 2015 14:00:00 GMT-0700 (Pacific Daylight Time)"
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								delayed_option
						Node:
						(type) c
						(layer)2
							Element:p
								string
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								All
						Node:
						(type) c
						(layer)2
							Element:p
						Node:
						(type) c
						(layer)2
							Element:p
								Possible values are:
						Node:
						(type) c
						(layer)2
							Element:br
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								timezone
								(Deliver at a specific time-of-day in each users own timezone)
						Node:
						(type) c
						(layer)2
							Element:br
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								last-active
								(Deliver at the same time of day as each user last used your app).
						Node:
						(type) c
						(layer)2
							Element:br
						Node:
						(type) c
						(layer)2
							Element:p
								If
							Element:code
								send_after
								is used, this takes effect after the
							Element:code
								send_after
								time has elapsed.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								delivery_time_of_day
						Node:
						(type) c
						(layer)2
							Element:p
								string
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								All
						Node:
						(type) c
						(layer)2
							Element:p
						Node:
						(type) c
						(layer)2
							Element:p
								Use with
							Element:code
								delayed_option=timezone
								.
						Node:
						(type) c
						(layer)2
							Element:br
						Node:
						(type) c
						(layer)2
							Element:p
								Example:
							Element:code
								"9:00AM"
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								ttl
						Node:
						(type) c
						(layer)2
							Element:p
								integer
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								iOS
								,
							Element:span
								Android
								,
							Element:span
								Chrome
								,
							Element:span
								ChromeWeb
						Node:
						(type) c
						(layer)2
							Element:p
								Time To Live - In seconds. The notification will be expired if the device does not come back online within this time. The default is 259,200 seconds (3 days).
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								priority
						Node:
						(type) c
						(layer)2
							Element:p
								integer
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								iOS
								,
							Element:span
								Android
								,
							Element:span
								Chrome
								,
							Element:span
								ChromeWeb
						Node:
						(type) c
						(layer)2
							Element:p
								Delivery priority through the push server (example GCM/FCM). Pass
							Element:code
								10
								for high priority. Defaults to normal priority for Android and high for iOS. For Android 6.0+ devices setting priority to high will wake the device out of doze mode.
						Node:
						(type) c
						(layer)2
							Element:h3
								Grouping & Collapsing
							Element:a
						Node:
						(type) c
						(layer)2
							Element:p
								Grouping lets you combine multiple notifications into a single notification to improve the user experience. Collapsing lets you dismiss old notifications in favor of newer ones.
								Parameter Type Platform Description
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								android_group
						Node:
						(type) c
						(layer)2
							Element:p
								string
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								Android
						Node:
						(type) c
						(layer)2
							Element:p
								All notifications with the same group will be stacked together using Android's
							Element:a
								Notification Stacking
								feature.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								android_group_message
						Node:
						(type) c
						(layer)2
							Element:p
								object
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								Android
						Node:
						(type) c
						(layer)2
							Element:p
						Node:
						(type) c
						(layer)2
							Element:p
								Summary message to display when 2+ notifications are stacked together. Default is "# new messages". Include
							Element:code
								$[notif_count]
								in your message and it will be replaced with the current number.
						Node:
						(type) c
						(layer)2
							Element:br
						Node:
						(type) c
						(layer)2
							Element:p
							Element:strong
								Languages
								- The value of each key is the message that will be sent to users for that language.
							Element:code
								"en"
								(English) is required. The key of each hash is either a a 2 character language code or one of zh-Hans/zh-Hant for Simplified or Traditional Chinese.
							Element:a
								Read more: supported languages.
						Node:
						(type) c
						(layer)2
							Element:br
						Node:
						(type) c
						(layer)2
							Element:p
								Example:
							Element:code
								{"en": "You have $[notif_count] new messages"}
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								adm_group
						Node:
						(type) c
						(layer)2
							Element:p
								string
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								Amazon
						Node:
						(type) c
						(layer)2
							Element:p
								All notifications with the same group will be stacked together using Android's
							Element:a
								Notification Stacking
								feature.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								adm_group_message
						Node:
						(type) c
						(layer)2
							Element:p
								object
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								Amazon
						Node:
						(type) c
						(layer)2
							Element:p
						Node:
						(type) c
						(layer)2
							Element:p
								Summary message to display when 2+ notifications are stacked together. Default is "# new messages". Include $[notif_count] in your message and it will be replaced with the current number. "en" (English) is required. The key of each hash is either a a 2 character language code or one of zh-Hans/zh-Hant for Simplified or Traditional Chinese. The value of each key is the message that will be sent to users for that language.
						Node:
						(type) c
						(layer)2
							Element:br
						Node:
						(type) c
						(layer)2
							Element:p
								Example:
							Element:code
								{"en": "You have $[notif_count] new messages"}
						Node:
						(type) c
						(layer)2
							Element:h3
								Platform to Deliver To
							Element:a
						Node:
						(type) c
						(layer)2
							Element:p
								By default, OneSignal will send to every platform (each of these is
							Element:code
								true
								).
						Node:
						(type) c
						(layer)2
							Element:p
								To only send to specific platforms, you may pass in
								Parameter Type Platform Description
							Element:code
								true
								on one or more of these parameters corresponding to the platform you wish to send to. If you do so, all other platforms will be set to
							Element:code
								false
								and will not be delivered to.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								isIos
						Node:
						(type) c
						(layer)2
							Element:p
								boolean
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								iOS
						Node:
						(type) c
						(layer)2
							Element:p
								Indicates whether to send to all devices registered under your app's Apple iOS platform.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								isAndroid
						Node:
						(type) c
						(layer)2
							Element:p
								boolean
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								Android
						Node:
						(type) c
						(layer)2
							Element:p
								Indicates whether to send to all devices registered under your app's Google Android platform.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								isAnyWeb
						Node:
						(type) c
						(layer)2
							Element:p
								boolean
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								Web
						Node:
						(type) c
						(layer)2
							Element:p
						Node:
						(type) c
						(layer)2
							Element:p
								Indicates whether to send to all subscribed web browser users, including Chrome, Firefox, and Safari.
						Node:
						(type) c
						(layer)2
							Element:p
						Node:
						(type) c
						(layer)2
							Element:p
								You may use this instead as a combined flag instead of separately enabling
							Element:code
								isChromeWeb
								,
							Element:code
								isFirefox
								, and
							Element:code
								isSafari
								, though the three options are equivalent to this one.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								isChromeWeb
						Node:
						(type) c
						(layer)2
							Element:p
								boolean
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								Web
						Node:
						(type) c
						(layer)2
							Element:p
								Indicates whether to send to all Google Chrome, Chrome on Android, and Mozilla Firefox users registered under your Chrome & Firefox web push platform.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								isFirefox
						Node:
						(type) c
						(layer)2
							Element:p
								boolean
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								Web
						Node:
						(type) c
						(layer)2
							Element:p
								Indicates whether to send to all Mozilla Firefox desktop users registered under your Firefox web push platform.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								isSafari
						Node:
						(type) c
						(layer)2
							Element:p
								boolean
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								Web
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								Does not support iOS Safari
								Indicates whether to send to all Apple's Safari desktop users registered under your Safari web push platform.
							Element:a
								Read more: iOS Safari
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								isWP
						Node:
						(type) c
						(layer)2
							Element:p
								boolean
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								Windows Phone 8.0
						Node:
						(type) c
						(layer)2
							Element:p
								Indicates whether to send to all devices registered under your app's Windows Phone 8.0 platform.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								isWP_WNS
						Node:
						(type) c
						(layer)2
							Element:p
								boolean
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								Windows Phone 8.1
						Node:
						(type) c
						(layer)2
							Element:p
								Indicates whether to send to all devices registered under your app's Windows Phone 8.1+ platform.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								isAdm
						Node:
						(type) c
						(layer)2
							Element:p
								boolean
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								Amazon
						Node:
						(type) c
						(layer)2
							Element:p
								Indicates whether to send to all devices registered under your app's Amazon Fire platform.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								isChrome
						Node:
						(type) c
						(layer)2
							Element:p
								boolean
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								ChromeApp
						Node:
						(type) c
						(layer)2
							Element:p
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								This flag is not used for web push
								Please see
							Element:code
								isChromeWeb
								for sending to web push users. This flag only applies to Google Chrome Apps & Extensions.
						Node:
						(type) c
						(layer)2
							Element:br
						Node:
						(type) c
						(layer)2
							Element:p
								Indicates whether to send to all devices registered under your app's Google Chrome Apps & Extension platform.
						Node:
						(type) h2
						(layer)2
							Element:h2
								Example Code - Create notification
							Element:a
						Node:
						(type) c
						(layer)2
							Element:h3
								Send to all subscribers - Create notification
							Element:a
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:a
								Shell
							Element:li
							Element:a
								JSON
							Element:li
							Element:a
								PHP
							Element:li
							Element:a
								C# (.NET standard)
							Element:li
							Element:a
								C# (ASP.NET)
							Element:li
							Element:a
								Ruby (Rails)
							Element:li
							Element:a
								Python
							Element:li
							Element:a
								NodeJS
							Element:li
							Element:a
								Perl
							Element:li
							Element:a
								Parse Cloud
							Element:li
							Element:a
								GameSparks
							Element:li
							Element:a
								Java
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
							Element:span
								curl
							Element:span
								--include
								\
							Element:span
								--request
								POST \
							Element:span
								--header
							Element:span
								"Content-Type: application/json; charset=utf-8"
								\
							Element:span
								--header
							Element:span
								"Authorization: Basic NGEwMGZmMjItY2NkNy0xMWUzLTk5ZDUtMDAwYzI5NDBlNjJj"
								\
							Element:span
								--data-binary
							Element:span
								"{\"app_id\": \"5eb5a37e-b458-11e3-ac11-000c2940e62c\",
								\"contents\": {\"en\": \"English Message\"}, \"included_segments\": [\"All\"]}
							Element:span
								" \
							Element:span
								https://onesignal.com/api/v1/notifications
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
								{
							Element:span
								"app_id"
								:
							Element:span
								"5eb5a37e-b458-11e3-ac11-000c2940e62c"
								,
							Element:span
								"included_segments"
								: [
							Element:span
								"All"
								],
							Element:span
								"data"
								: {
							Element:span
								"foo"
								:
							Element:span
								"bar"
								},
							Element:span
								"contents"
								: {
							Element:span
								"en"
								:
							Element:span
								"English Message"
								} }
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
							Element:span
								<?
							Element:span
								PHP
							Element:span
								function
							Element:span
								sendMessage
								(){
							Element:span
								$content
							Element:span
								=
							Element:span
								array
								(
							Element:span
								"en"
							Element:span
								=>
							Element:span
								'English Message'
								);
							Element:span
								$fields
							Element:span
								=
							Element:span
								array
								(
							Element:span
								'app_id'
							Element:span
								=>
							Element:span
								"5eb5a37e-b458-11e3-ac11-000c2940e62c"
								,
							Element:span
								'included_segments'
							Element:span
								=>
							Element:span
								array
								(
							Element:span
								'All'
								),
							Element:span
								'data'
							Element:span
								=>
							Element:span
								array
								(
							Element:span
								"foo"
							Element:span
								=>
							Element:span
								"bar"
								),
							Element:span
								'contents'
							Element:span
								=>
							Element:span
								$content
								);
							Element:span
								$fields
							Element:span
								=
							Element:span
								json_encode
								(
							Element:span
								$fields
								);
							Element:span
								print
								(
							Element:span
								"\nJSON sent:\n"
								);
							Element:span
								print
								(
							Element:span
								$fields
								);
							Element:span
								$ch
							Element:span
								=
							Element:span
								curl_init
								();
							Element:span
								curl_setopt
								(
							Element:span
								$ch
								,
							Element:span
								CURLOPT_URL
								,
							Element:span
								"https://onesignal.com/api/v1/notifications"
								);
							Element:span
								curl_setopt
								(
							Element:span
								$ch
								,
							Element:span
								CURLOPT_HTTPHEADER
								,
							Element:span
								array
								(
							Element:span
								'Content-Type: application/json; charset=utf-8'
								,
							Element:span
								'Authorization: Basic NGEwMGZmMjItY2NkNy0xMWUzLTk5ZDUtMDAwYzI5NDBlNjJj'
								));
							Element:span
								curl_setopt
								(
							Element:span
								$ch
								,
							Element:span
								CURLOPT_RETURNTRANSFER
								,
							Element:span
								TRUE
								);
							Element:span
								curl_setopt
								(
							Element:span
								$ch
								,
							Element:span
								CURLOPT_HEADER
								,
							Element:span
								FALSE
								);
							Element:span
								curl_setopt
								(
							Element:span
								$ch
								,
							Element:span
								CURLOPT_POST
								,
							Element:span
								TRUE
								);
							Element:span
								curl_setopt
								(
							Element:span
								$ch
								,
							Element:span
								CURLOPT_POSTFIELDS
								,
							Element:span
								$fields
								);
							Element:span
								curl_setopt
								(
							Element:span
								$ch
								,
							Element:span
								CURLOPT_SSL_VERIFYPEER
								,
							Element:span
								FALSE
								);
							Element:span
								$response
							Element:span
								=
							Element:span
								curl_exec
								(
							Element:span
								$ch
								);
							Element:span
								curl_close
								(
							Element:span
								$ch
								);
							Element:span
								return
							Element:span
								$response
								; }
							Element:span
								$response
							Element:span
								=
							Element:span
								sendMessage
								();
							Element:span
								$return
								[
							Element:span
								"allresponses"
								]
							Element:span
								=
							Element:span
								$response
								;
							Element:span
								$return
							Element:span
								=
							Element:span
								json_encode
								(
							Element:span
								$return
								);
							Element:span
								print
								(
							Element:span
								"\n\nJSON received:\n"
								);
							Element:span
								print
								(
							Element:span
								$return
								);
							Element:span
								print
								(
							Element:span
								"\n"
								);
							Element:span
								?>
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
							Element:span
								using
							Element:span
								System
								.
							Element:span
								IO
								;
							Element:span
								using
							Element:span
								System
								.
							Element:span
								Net
								;
							Element:span
								using
							Element:span
								System
								.
							Element:span
								Text
								;
							Element:span
								var
							Element:span
								request
							Element:span
								=
							Element:span
								WebRequest
								.
							Element:span
								Create
								(
							Element:span
								"https://onesignal.com/api/v1/notifications"
								)
							Element:span
								as
							Element:span
								HttpWebRequest
								;
							Element:span
								request
								.
							Element:span
								KeepAlive
							Element:span
								=
							Element:span
								true
								;
							Element:span
								request
								.
							Element:span
								Method
							Element:span
								=
							Element:span
								"POST"
								;
							Element:span
								request
								.
							Element:span
								ContentType
							Element:span
								=
							Element:span
								"application/json; charset=utf-8"
								;
							Element:span
								request
								.
							Element:span
								Headers
								.
							Element:span
								Add
								(
							Element:span
								"authorization"
								,
							Element:span
								"Basic NGEwMGZmMjItY2NkNy0xMWUzLTk5ZDUtMDAwYzI5NDBlNjJj"
								);
							Element:span
								byte
								[]
							Element:span
								byteArray
							Element:span
								=
							Element:span
								Encoding
								.
							Element:span
								UTF8
								.
							Element:span
								GetBytes
								(
							Element:span
								"{"
							Element:span
								+
							Element:span
								"\"app_id\": \"5eb5a37e-b458-11e3-ac11-000c2940e62c\","
							Element:span
								+
							Element:span
								"\"contents\": {\"en\": \"English Message\"},"
							Element:span
								+
							Element:span
								"\"included_segments\": [\"All\"]}"
								);
							Element:span
								string
							Element:span
								responseContent
							Element:span
								=
							Element:span
								null
								;
							Element:span
								try
								{
							Element:span
								using
								(
							Element:span
								var
							Element:span
								writer
							Element:span
								=
							Element:span
								request
								.
							Element:span
								GetRequestStream
								()) {
							Element:span
								writer
								.
							Element:span
								Write
								(
							Element:span
								byteArray
								,
							Element:span
								0
								,
							Element:span
								byteArray
								.
							Element:span
								Length
								); }
							Element:span
								using
								(
							Element:span
								var
							Element:span
								response
							Element:span
								=
							Element:span
								request
								.
							Element:span
								GetResponse
								()
							Element:span
								as
							Element:span
								HttpWebResponse
								) {
							Element:span
								using
								(
							Element:span
								var
							Element:span
								reader
							Element:span
								=
							Element:span
								new
							Element:span
								StreamReader
								(
							Element:span
								response
								.
							Element:span
								GetResponseStream
								())) {
							Element:span
								responseContent
							Element:span
								=
							Element:span
								reader
								.
							Element:span
								ReadToEnd
								(); } } }
							Element:span
								catch
								(
							Element:span
								WebException
							Element:span
								ex
								) {
							Element:span
								System
								.
							Element:span
								Diagnostics
								.
							Element:span
								Debug
								.
							Element:span
								WriteLine
								(
							Element:span
								ex
								.
							Element:span
								Message
								);
							Element:span
								System
								.
							Element:span
								Diagnostics
								.
							Element:span
								Debug
								.
							Element:span
								WriteLine
								(
							Element:span
								new
							Element:span
								StreamReader
								(
							Element:span
								ex
								.
							Element:span
								Response
								.
							Element:span
								GetResponseStream
								()).
							Element:span
								ReadToEnd
								()); }
							Element:span
								System
								.
							Element:span
								Diagnostics
								.
							Element:span
								Debug
								.
							Element:span
								WriteLine
								(
							Element:span
								responseContent
								);
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
							Element:span
								using
							Element:span
								System
								.
							Element:span
								IO
								;
							Element:span
								using
							Element:span
								System
								.
							Element:span
								Net
								;
							Element:span
								using
							Element:span
								System
								.
							Element:span
								Text
								;
							Element:span
								var
							Element:span
								request
							Element:span
								=
							Element:span
								WebRequest
								.
							Element:span
								Create
								(
							Element:span
								"https://onesignal.com/api/v1/notifications"
								)
							Element:span
								as
							Element:span
								HttpWebRequest
								;
							Element:span
								request
								.
							Element:span
								KeepAlive
							Element:span
								=
							Element:span
								true
								;
							Element:span
								request
								.
							Element:span
								Method
							Element:span
								=
							Element:span
								"POST"
								;
							Element:span
								request
								.
							Element:span
								ContentType
							Element:span
								=
							Element:span
								"application/json; charset=utf-8"
								;
							Element:span
								request
								.
							Element:span
								Headers
								.
							Element:span
								Add
								(
							Element:span
								"authorization"
								,
							Element:span
								"Basic NGEwMGZmMjItY2NkNy0xMWUzLTk5ZDUtMDAwYzI5NDBlNjJj"
								);
							Element:span
								var
							Element:span
								serializer
							Element:span
								=
							Element:span
								new
							Element:span
								JavaScriptSerializer
								();
							Element:span
								var
							Element:span
								obj
							Element:span
								=
							Element:span
								new
								{
							Element:span
								app_id
							Element:span
								=
							Element:span
								"5eb5a37e-b458-11e3-ac11-000c2940e62c"
								,
							Element:span
								contents
							Element:span
								=
							Element:span
								new
								{
							Element:span
								en
							Element:span
								=
							Element:span
								"English Message"
								},
							Element:span
								included_segments
							Element:span
								=
							Element:span
								new
							Element:span
								string
								[] {
							Element:span
								"All"
								} };
							Element:span
								var
							Element:span
								param
							Element:span
								=
							Element:span
								serializer
								.
							Element:span
								Serialize
								(
							Element:span
								obj
								);
							Element:span
								byte
								[]
							Element:span
								byteArray
							Element:span
								=
							Element:span
								Encoding
								.
							Element:span
								UTF8
								.
							Element:span
								GetBytes
								(
							Element:span
								param
								);
							Element:span
								string
							Element:span
								responseContent
							Element:span
								=
							Element:span
								null
								;
							Element:span
								try
								{
							Element:span
								using
								(
							Element:span
								var
							Element:span
								writer
							Element:span
								=
							Element:span
								request
								.
							Element:span
								GetRequestStream
								()) {
							Element:span
								writer
								.
							Element:span
								Write
								(
							Element:span
								byteArray
								,
							Element:span
								0
								,
							Element:span
								byteArray
								.
							Element:span
								Length
								); }
							Element:span
								using
								(
							Element:span
								var
							Element:span
								response
							Element:span
								=
							Element:span
								request
								.
							Element:span
								GetResponse
								()
							Element:span
								as
							Element:span
								HttpWebResponse
								) {
							Element:span
								using
								(
							Element:span
								var
							Element:span
								reader
							Element:span
								=
							Element:span
								new
							Element:span
								StreamReader
								(
							Element:span
								response
								.
							Element:span
								GetResponseStream
								())) {
							Element:span
								responseContent
							Element:span
								=
							Element:span
								reader
								.
							Element:span
								ReadToEnd
								(); } } }
							Element:span
								catch
								(
							Element:span
								WebException
							Element:span
								ex
								) {
							Element:span
								System
								.
							Element:span
								Diagnostics
								.
							Element:span
								Debug
								.
							Element:span
								WriteLine
								(
							Element:span
								ex
								.
							Element:span
								Message
								);
							Element:span
								System
								.
							Element:span
								Diagnostics
								.
							Element:span
								Debug
								.
							Element:span
								WriteLine
								(
							Element:span
								new
							Element:span
								StreamReader
								(
							Element:span
								ex
								.
							Element:span
								Response
								.
							Element:span
								GetResponseStream
								()).
							Element:span
								ReadToEnd
								()); }
							Element:span
								System
								.
							Element:span
								Diagnostics
								.
							Element:span
								Debug
								.
							Element:span
								WriteLine
								(
							Element:span
								responseContent
								);
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
							Element:span
								params
							Element:span
								=
								{
							Element:span
								"app_id"
							Element:span
								=>
							Element:span
								"5eb5a37e-b458-11e3-ac11-000c2940e62c"
								,
							Element:span
								"contents"
							Element:span
								=>
								{
							Element:span
								"en"
							Element:span
								=>
							Element:span
								"English Message"
								},
							Element:span
								"included_segments"
							Element:span
								=>
								[
							Element:span
								"All"
								]}
							Element:span
								uri
							Element:span
								=
							Element:span
								URI
							Element:span
								.
							Element:span
								parse
								(
							Element:span
								'https://onesignal.com/api/v1/notifications'
								)
							Element:span
								http
							Element:span
								=
							Element:span
								Net::HTTP
							Element:span
								.
							Element:span
								new
								(
							Element:span
								uri
							Element:span
								.
							Element:span
								host
								,
							Element:span
								uri
							Element:span
								.
							Element:span
								port
								)
							Element:span
								http
							Element:span
								.
							Element:span
								use_ssl
							Element:span
								=
							Element:span
								true
							Element:span
								request
							Element:span
								=
							Element:span
								Net::HTTP::
							Element:span
								Post
							Element:span
								.
							Element:span
								new
								(
							Element:span
								uri
							Element:span
								.
							Element:span
								path
								,
							Element:span
								'Content-Type'
							Element:span
								=>
							Element:span
								'application/json;charset=utf-8'
								,
							Element:span
								'Authorization'
							Element:span
								=>
							Element:span
								"Basic NGEwMGZmMjItY2NkNy0xMWUzLTk5ZDUtMDAwYzI5NDBlNjJj"
								)
							Element:span
								request
							Element:span
								.
							Element:span
								body
							Element:span
								=
							Element:span
								params
							Element:span
								.
							Element:span
								as_json
							Element:span
								.
							Element:span
								to_json
							Element:span
								response
							Element:span
								=
							Element:span
								http
							Element:span
								.
							Element:span
								request
								(
							Element:span
								request
								)
							Element:span
								puts
							Element:span
								response
							Element:span
								.
							Element:span
								body
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
							Element:span
								import
							Element:span
								requests
							Element:span
								import
							Element:span
								json
							Element:span
								header
								= {
							Element:span
								"Content-Type"
								:
							Element:span
								"application/json; charset=utf-8"
								,
							Element:span
								"Authorization"
								:
							Element:span
								"Basic NGEwMGZmMjItY2NkNy0xMWUzLTk5ZDUtMDAwYzI5NDBlNjJj"
								}
							Element:span
								payload
								= {
							Element:span
								"app_id"
								:
							Element:span
								"5eb5a37e-b458-11e3-ac11-000c2940e62c"
								,
							Element:span
								"included_segments"
								: [
							Element:span
								"All"
								],
							Element:span
								"contents"
								: {
							Element:span
								"en"
								:
							Element:span
								"English Message"
								}
							Element:span
								}
							Element:span
								req
								=
							Element:span
								requests
								.
							Element:span
								post
								(
							Element:span
								"https://onesignal.com/api/v1/notifications"
								,
							Element:span
								headers
								=
							Element:span
								header
								,
							Element:span
								data
								=
							Element:span
								json
								.
							Element:span
								dumps
								(
							Element:span
								payload
								))
							Element:span
								print
								(
							Element:span
								req
								.
							Element:span
								status_code
								,
							Element:span
								req
								.
							Element:span
								reason
								)
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
							Element:span
								var
							Element:span
								sendNotification
							Element:span
								=
							Element:span
								function
								(
							Element:span
								data
								) {
							Element:span
								var
							Element:span
								headers
							Element:span
								=
								{
							Element:span
								"Content-Type"
								:
							Element:span
								"application/json; charset=utf-8"
								,
							Element:span
								"Authorization"
								:
							Element:span
								"Basic NGEwMGZmMjItY2NkNy0xMWUzLTk5ZDUtMDAwYzI5NDBlNjJj"
								};
							Element:span
								var
							Element:span
								options
							Element:span
								=
								{
							Element:span
								host
								:
							Element:span
								"onesignal.com"
								,
							Element:span
								port
								:
							Element:span
								443
								,
							Element:span
								path
								:
							Element:span
								"/api/v1/notifications"
								,
							Element:span
								method
								:
							Element:span
								"POST"
								,
							Element:span
								headers
								:
							Element:span
								headers
								};
							Element:span
								var
							Element:span
								https
							Element:span
								=
							Element:span
								require
								(
							Element:span
								'https'
								);
							Element:span
								var
							Element:span
								req
							Element:span
								=
							Element:span
								https
								.
							Element:span
								request
								(
							Element:span
								options
								,
							Element:span
								function
								(
							Element:span
								res
								) {
							Element:span
								res
								.
							Element:span
								on
								(
							Element:span
								'data'
								,
							Element:span
								function
								(
							Element:span
								data
								) {
							Element:span
								console
								.
							Element:span
								log
								(
							Element:span
								"Response:"
								);
							Element:span
								console
								.
							Element:span
								log
								(
							Element:span
								JSON
								.
							Element:span
								parse
								(
							Element:span
								data
								)); }); });
							Element:span
								req
								.
							Element:span
								on
								(
							Element:span
								'error'
								,
							Element:span
								function
								(
							Element:span
								e
								) {
							Element:span
								console
								.
							Element:span
								log
								(
							Element:span
								"ERROR:"
								);
							Element:span
								console
								.
							Element:span
								log
								(
							Element:span
								e
								); });
							Element:span
								req
								.
							Element:span
								write
								(
							Element:span
								JSON
								.
							Element:span
								stringify
								(
							Element:span
								data
								));
							Element:span
								req
								.
							Element:span
								end
								(); };
							Element:span
								var
							Element:span
								message
							Element:span
								=
								{
							Element:span
								app_id
								:
							Element:span
								"5eb5a37e-b458-11e3-ac11-000c2940e62c"
								,
							Element:span
								contents
								: {
							Element:span
								"en"
								:
							Element:span
								"English Message"
								},
							Element:span
								included_segments
								: [
							Element:span
								"All"
								] };
							Element:span
								sendNotification
								(
							Element:span
								message
								);
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
							Element:span
								#!/usr/bin/perl -w
							Element:span
								use
							Element:span
								strict
								;
							Element:span
								use
							Element:span
								warnings
								;
							Element:span
								use
							Element:span
								Net
							Element:span
								::
							Element:span
								Curl
							Element:span
								::
							Element:span
								Easy
							Element:span
								qw(/^CURLOPT_.*/)
								;;
							Element:span
								use
							Element:span
								JSON
								;
							Element:span
								use
							Element:span
								Data
							Element:span
								::
							Element:span
								Dumper
								;
							Element:span
								sub
							Element:span
								SendNotification
								{
							Element:span
								my
								(
							Element:span
								$url
								,
							Element:span
								$authorisation
								,
							Element:span
								$app_id
								,
							Element:span
								$contents
								)
							Element:span
								=
							Element:span
								@_
								;
							Element:span
								my
							Element:span
								$curl
							Element:span
								=
							Element:span
								Net
							Element:span
								::
							Element:span
								Curl
							Element:span
								::
							Element:span
								Easy
							Element:span
								->
							Element:span
								new
								;
							Element:span
								my
							Element:span
								$json
							Element:span
								=
							Element:span
								JSON
							Element:span
								->
							Element:span
								new
								();
							Element:span
								my
							Element:span
								$response_body
								;
							Element:span
								my
							Element:span
								$json_string
							Element:span
								=
							Element:span
								$json
							Element:span
								->
							Element:span
								encode
								({
							Element:span
								app_id
							Element:span
								=>
							Element:span
								$app_id
								,
							Element:span
								included_segments
							Element:span
								=>
								[
							Element:span
								"All"
								] ,
							Element:span
								data
							Element:span
								=>
								{
							Element:span
								"key1"
							Element:span
								=>
							Element:span
								"Value 1"
								} ,
							Element:span
								ios_badgeType
							Element:span
								=>
							Element:span
								"Increase"
								,
							Element:span
								ios_badgeCount
							Element:span
								=>
							Element:span
								1
								,
							Element:span
								contents
							Element:span
								=>
								{
							Element:span
								en
							Element:span
								=>
							Element:span
								$contents
								} });
							Element:span
								$curl
							Element:span
								->
							Element:span
								setopt
								(
							Element:span
								CURLOPT_URL
								,
							Element:span
								$url
								);
							Element:span
								$curl
							Element:span
								->
							Element:span
								setopt
								(
							Element:span
								CURLOPT_SSL_VERIFYHOST
								,
							Element:span
								0
								);
							Element:span
								$curl
							Element:span
								->
							Element:span
								setopt
								(
							Element:span
								CURLOPT_SSL_VERIFYPEER
								,
							Element:span
								0
								);
							Element:span
								$curl
							Element:span
								->
							Element:span
								setopt
								(
							Element:span
								CURLOPT_HTTPHEADER
								, [
							Element:span
								'Content-Type: application/json; charset=utf-8'
								,
							Element:span
								"Authorization: Basic $authorisation"
								]);
							Element:span
								$curl
							Element:span
								->
							Element:span
								setopt
								(
							Element:span
								CURLOPT_POST
								,
							Element:span
								1
								);
							Element:span
								$curl
							Element:span
								->
							Element:span
								setopt
								(
							Element:span
								CURLOPT_POSTFIELDS
								,
							Element:span
								$json_string
								);
							Element:span
								$curl
							Element:span
								->
							Element:span
								setopt
								(
							Element:span
								CURLOPT_WRITEDATA
								, \
							Element:span
								$response_body
								);
							Element:span
								$curl
							Element:span
								->
							Element:span
								perform
								;
							Element:span
								print
							Element:span
								Dumper
								(
							Element:span
								$response_body
								); }
							Element:span
								SendNotification
								(
							Element:span
								"https://onesignal.com/api/v1/notifications"
								,
							Element:span
								"<< PUT YOUR REST API KEY HERE>>"
								,
							Element:span
								"<< PUT YOUR APP ID KEY HERE >>"
								,
							Element:span
								"Hello World"
								);
							Element:span
								exit
								(
							Element:span
								0
								);
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
							Element:span
								send
							Element:span
								=
							Element:span
								function
								(
							Element:span
								params
								) {
							Element:span
								var
							Element:span
								promise
							Element:span
								=
							Element:span
								new
							Element:span
								Parse
								.
							Element:span
								Promise
								();
							Element:span
								var
							Element:span
								jsonBody
							Element:span
								=
								{
							Element:span
								app_id
								:
							Element:span
								"5eb5a37e-b458-11e3-ac11-000c2940e62c"
								,
							Element:span
								included_segments
								: [
							Element:span
								"All"
								],
							Element:span
								contents
								: {
							Element:span
								en
								:
							Element:span
								"English Message"
								},
							Element:span
								data
								: {
							Element:span
								foo
								:
							Element:span
								"bar"
								} };
							Element:span
								Parse
								.
							Element:span
								Cloud
								.
							Element:span
								httpRequest
								({
							Element:span
								method
								:
							Element:span
								"POST"
								,
							Element:span
								url
								:
							Element:span
								"https://onesignal.com/api/v1/notifications"
								,
							Element:span
								headers
								: {
							Element:span
								"Content-Type"
								:
							Element:span
								"application/json;charset=utf-8"
								,
							Element:span
								"Authorization"
								:
							Element:span
								"Basic NGEwMGZmMjItY2NkNy0xMWUzLTk5ZDUtMDAwYzI5NDBlNjJj"
								},
							Element:span
								body
								:
							Element:span
								JSON
								.
							Element:span
								stringify
								(
							Element:span
								jsonBody
								) }).
							Element:span
								then
								(
							Element:span
								function
								(
							Element:span
								httpResponse
								) {
							Element:span
								promise
								.
							Element:span
								resolve
								(
							Element:span
								httpResponse
								) },
							Element:span
								function
								(
							Element:span
								httpResponse
								) {
							Element:span
								promise
								.
							Element:span
								reject
								(
							Element:span
								httpResponse
								); });
							Element:span
								return
							Element:span
								promise
								; };
							Element:span
								exports
								.
							Element:span
								send
							Element:span
								=
							Element:span
								send
								;
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
							Element:span
								function
							Element:span
								SendNewNotification
								() {
							Element:span
								var
							Element:span
								jsonBody
							Element:span
								=
								{
							Element:span
								app_id
								:
							Element:span
								"5eb5a37e-b458-11e3-ac11-000c2940e62c"
								,
							Element:span
								included_segments
								: [
							Element:span
								"All"
								],
							Element:span
								contents
								: {
							Element:span
								en
								:
							Element:span
								"English Message"
								}, };
							Element:span
								var
							Element:span
								promise
							Element:span
								=
							Element:span
								Spark
								.
							Element:span
								getHttp
								(
							Element:span
								"https://onesignal.com/api/v1/notifications"
								).
							Element:span
								setHeaders
								({
							Element:span
								"Content-Type"
								:
							Element:span
								"application/json;charset=utf-8"
								,
							Element:span
								"Authorization"
								:
							Element:span
								"Basic NGEwMGZmMjItY2NkNy0xMWUzLTk5ZDUtMDAwYzI5NDBlNjJj"
								}).
							Element:span
								postJson
								(
							Element:span
								jsonBody
								);
							Element:span
								return
							Element:span
								promise
								; }
							Element:span
								var
							Element:span
								response
							Element:span
								=
							Element:span
								SendNewNotification
								().
							Element:span
								getResponseJson
								();
							Element:span
								Spark
								.
							Element:span
								setScriptData
								(
							Element:span
								"response"
								,
							Element:span
								response
								)
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
							Element:span
								try
								{
							Element:span
								String
							Element:span
								jsonResponse
								;
							Element:span
								URL
							Element:span
								url
							Element:span
								=
							Element:span
								new
							Element:span
								URL
								(
							Element:span
								"https://onesignal.com/api/v1/notifications"
								);
							Element:span
								HttpURLConnection
							Element:span
								con
							Element:span
								=
								(
							Element:span
								HttpURLConnection
								)
							Element:span
								url
								.
							Element:span
								openConnection
								();
							Element:span
								con
								.
							Element:span
								setUseCaches
								(
							Element:span
								false
								);
							Element:span
								con
								.
							Element:span
								setDoOutput
								(
							Element:span
								true
								);
							Element:span
								con
								.
							Element:span
								setDoInput
								(
							Element:span
								true
								);
							Element:span
								con
								.
							Element:span
								setRequestProperty
								(
							Element:span
								"Content-Type"
								,
							Element:span
								"application/json; charset=UTF-8"
								);
							Element:span
								con
								.
							Element:span
								setRequestProperty
								(
							Element:span
								"Authorization"
								,
							Element:span
								"Basic NGEwMGZmMjItY2NkNy0xMWUzLTk5ZDUtMDAwYzI5NDBlNjJj"
								);
							Element:span
								con
								.
							Element:span
								setRequestMethod
								(
							Element:span
								"POST"
								);
							Element:span
								String
							Element:span
								strJsonBody
							Element:span
								=
							Element:span
								"{"
							Element:span
								+
							Element:span
								"\"app_id\": \"5eb5a37e-b458-11e3-ac11-000c2940e62c\","
							Element:span
								+
							Element:span
								"\"included_segments\": [\"All\"],"
							Element:span
								+
							Element:span
								"\"data\": {\"foo\": \"bar\"},"
							Element:span
								+
							Element:span
								"\"contents\": {\"en\": \"English Message\"}"
							Element:span
								+
							Element:span
								"}"
								;
							Element:span
								System
								.
							Element:span
								out
								.
							Element:span
								println
								(
							Element:span
								"strJsonBody:\n"
							Element:span
								+
							Element:span
								strJsonBody
								);
							Element:span
								byte
								[]
							Element:span
								sendBytes
							Element:span
								=
							Element:span
								strJsonBody
								.
							Element:span
								getBytes
								(
							Element:span
								"UTF-8"
								);
							Element:span
								con
								.
							Element:span
								setFixedLengthStreamingMode
								(
							Element:span
								sendBytes
								.
							Element:span
								length
								);
							Element:span
								OutputStream
							Element:span
								outputStream
							Element:span
								=
							Element:span
								con
								.
							Element:span
								getOutputStream
								();
							Element:span
								outputStream
								.
							Element:span
								write
								(
							Element:span
								sendBytes
								);
							Element:span
								int
							Element:span
								httpResponse
							Element:span
								=
							Element:span
								con
								.
							Element:span
								getResponseCode
								();
							Element:span
								System
								.
							Element:span
								out
								.
							Element:span
								println
								(
							Element:span
								"httpResponse: "
							Element:span
								+
							Element:span
								httpResponse
								);
							Element:span
								if
								(
							Element:span
								httpResponse
							Element:span
								>=
							Element:span
								HttpURLConnection
								.
							Element:span
								HTTP_OK
							Element:span
								&&
							Element:span
								httpResponse
							Element:span
								<
							Element:span
								HttpURLConnection
								.
							Element:span
								HTTP_BAD_REQUEST
								) {
							Element:span
								Scanner
							Element:span
								scanner
							Element:span
								=
							Element:span
								new
							Element:span
								Scanner
								(
							Element:span
								con
								.
							Element:span
								getInputStream
								(),
							Element:span
								"UTF-8"
								);
							Element:span
								jsonResponse
							Element:span
								=
							Element:span
								scanner
								.
							Element:span
								useDelimiter
								(
							Element:span
								"\\A"
								).
							Element:span
								hasNext
								()
							Element:span
								?
							Element:span
								scanner
								.
							Element:span
								next
								() :
							Element:span
								""
								;
							Element:span
								scanner
								.
							Element:span
								close
								(); }
							Element:span
								else
								{
							Element:span
								Scanner
							Element:span
								scanner
							Element:span
								=
							Element:span
								new
							Element:span
								Scanner
								(
							Element:span
								con
								.
							Element:span
								getErrorStream
								(),
							Element:span
								"UTF-8"
								);
							Element:span
								jsonResponse
							Element:span
								=
							Element:span
								scanner
								.
							Element:span
								useDelimiter
								(
							Element:span
								"\\A"
								).
							Element:span
								hasNext
								()
							Element:span
								?
							Element:span
								scanner
								.
							Element:span
								next
								() :
							Element:span
								""
								;
							Element:span
								scanner
								.
							Element:span
								close
								(); }
							Element:span
								System
								.
							Element:span
								out
								.
							Element:span
								println
								(
							Element:span
								"jsonResponse:\n"
							Element:span
								+
							Element:span
								jsonResponse
								); }
							Element:span
								catch
								(
							Element:span
								Throwable
							Element:span
								t
								) {
							Element:span
								t
								.
							Element:span
								printStackTrace
								(); }
						Node:
						(type) c
						(layer)2
							Element:h3
								Send to a specific segment - Create notification
							Element:a
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:a
								Shell
							Element:li
							Element:a
								JSON
							Element:li
							Element:a
								PHP
							Element:li
							Element:a
								C# (.NET standard)
							Element:li
							Element:a
								C# (ASP.NET)
							Element:li
							Element:a
								Ruby (Rails)
							Element:li
							Element:a
								Python
							Element:li
							Element:a
								NodeJS
							Element:li
							Element:a
								Perl
							Element:li
							Element:a
								Parse Cloud
							Element:li
							Element:a
								GameSparks
							Element:li
							Element:a
								Java
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
							Element:span
								curl
							Element:span
								--include
								\
							Element:span
								--request
								POST \
							Element:span
								--header
							Element:span
								"Content-Type: application/json; charset=utf-8"
								\
							Element:span
								--header
							Element:span
								"Authorization: Basic NGEwMGZmMjItY2NkNy0xMWUzLTk5ZDUtMDAwYzI5NDBlNjJj"
								\
							Element:span
								--data-binary
							Element:span
								"{\"app_id\": \"5eb5a37e-b458-11e3-ac11-000c2940e62c\",
								\"contents\": {\"en\": \"English Message\"}, \"included_segments\": [\"Active Users\"]}
							Element:span
								" \
							Element:span
								https://onesignal.com/api/v1/notifications
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
								{
							Element:span
								"app_id"
								:
							Element:span
								"5eb5a37e-b458-11e3-ac11-000c2940e62c"
								,
							Element:span
								"included_segments"
								: [
							Element:span
								"Active Users"
								],
							Element:span
								"data"
								: {
							Element:span
								"foo"
								:
							Element:span
								"bar"
								},
							Element:span
								"contents"
								: {
							Element:span
								"en"
								:
							Element:span
								"English Message"
								} }
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
							Element:span
								<?
							Element:span
								PHP
							Element:span
								function
							Element:span
								sendMessage
								(){
							Element:span
								$content
							Element:span
								=
							Element:span
								array
								(
							Element:span
								"en"
							Element:span
								=>
							Element:span
								'English Message'
								);
							Element:span
								$fields
							Element:span
								=
							Element:span
								array
								(
							Element:span
								'app_id'
							Element:span
								=>
							Element:span
								"5eb5a37e-b458-11e3-ac11-000c2940e62c"
								,
							Element:span
								'included_segments'
							Element:span
								=>
							Element:span
								array
								(
							Element:span
								'Active Users'
								),
							Element:span
								'data'
							Element:span
								=>
							Element:span
								array
								(
							Element:span
								"foo"
							Element:span
								=>
							Element:span
								"bar"
								),
							Element:span
								'contents'
							Element:span
								=>
							Element:span
								$content
								);
							Element:span
								$fields
							Element:span
								=
							Element:span
								json_encode
								(
							Element:span
								$fields
								);
							Element:span
								print
								(
							Element:span
								"\nJSON sent:\n"
								);
							Element:span
								print
								(
							Element:span
								$fields
								);
							Element:span
								$ch
							Element:span
								=
							Element:span
								curl_init
								();
							Element:span
								curl_setopt
								(
							Element:span
								$ch
								,
							Element:span
								CURLOPT_URL
								,
							Element:span
								"https://onesignal.com/api/v1/notifications"
								);
							Element:span
								curl_setopt
								(
							Element:span
								$ch
								,
							Element:span
								CURLOPT_HTTPHEADER
								,
							Element:span
								array
								(
							Element:span
								'Content-Type: application/json; charset=utf-8'
								,
							Element:span
								'Authorization: Basic NGEwMGZmMjItY2NkNy0xMWUzLTk5ZDUtMDAwYzI5NDBlNjJj'
								));
							Element:span
								curl_setopt
								(
							Element:span
								$ch
								,
							Element:span
								CURLOPT_RETURNTRANSFER
								,
							Element:span
								TRUE
								);
							Element:span
								curl_setopt
								(
							Element:span
								$ch
								,
							Element:span
								CURLOPT_HEADER
								,
							Element:span
								FALSE
								);
							Element:span
								curl_setopt
								(
							Element:span
								$ch
								,
							Element:span
								CURLOPT_POST
								,
							Element:span
								TRUE
								);
							Element:span
								curl_setopt
								(
							Element:span
								$ch
								,
							Element:span
								CURLOPT_POSTFIELDS
								,
							Element:span
								$fields
								);
							Element:span
								curl_setopt
								(
							Element:span
								$ch
								,
							Element:span
								CURLOPT_SSL_VERIFYPEER
								,
							Element:span
								FALSE
								);
							Element:span
								$response
							Element:span
								=
							Element:span
								curl_exec
								(
							Element:span
								$ch
								);
							Element:span
								curl_close
								(
							Element:span
								$ch
								);
							Element:span
								return
							Element:span
								$response
								; }
							Element:span
								$response
							Element:span
								=
							Element:span
								sendMessage
								();
							Element:span
								$return
								[
							Element:span
								"allresponses"
								]
							Element:span
								=
							Element:span
								$response
								;
							Element:span
								$return
							Element:span
								=
							Element:span
								json_encode
								(
							Element:span
								$return
								);
							Element:span
								print
								(
							Element:span
								"\n\nJSON received:\n"
								);
							Element:span
								print
								(
							Element:span
								$return
								);
							Element:span
								print
								(
							Element:span
								"\n"
								);
							Element:span
								?>
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
							Element:span
								using
							Element:span
								System
								.
							Element:span
								IO
								;
							Element:span
								using
							Element:span
								System
								.
							Element:span
								Net
								;
							Element:span
								using
							Element:span
								System
								.
							Element:span
								Text
								;
							Element:span
								var
							Element:span
								request
							Element:span
								=
							Element:span
								WebRequest
								.
							Element:span
								Create
								(
							Element:span
								"https://onesignal.com/api/v1/notifications"
								)
							Element:span
								as
							Element:span
								HttpWebRequest
								;
							Element:span
								request
								.
							Element:span
								KeepAlive
							Element:span
								=
							Element:span
								true
								;
							Element:span
								request
								.
							Element:span
								Method
							Element:span
								=
							Element:span
								"POST"
								;
							Element:span
								request
								.
							Element:span
								ContentType
							Element:span
								=
							Element:span
								"application/json; charset=utf-8"
								;
							Element:span
								request
								.
							Element:span
								Headers
								.
							Element:span
								Add
								(
							Element:span
								"authorization"
								,
							Element:span
								"Basic NGEwMGZmMjItY2NkNy0xMWUzLTk5ZDUtMDAwYzI5NDBlNjJj"
								);
							Element:span
								byte
								[]
							Element:span
								byteArray
							Element:span
								=
							Element:span
								Encoding
								.
							Element:span
								UTF8
								.
							Element:span
								GetBytes
								(
							Element:span
								"{"
							Element:span
								+
							Element:span
								"\"app_id\": \"5eb5a37e-b458-11e3-ac11-000c2940e62c\","
							Element:span
								+
							Element:span
								"\"contents\": {\"en\": \"English Message\"},"
							Element:span
								+
							Element:span
								"\"included_segments\": [\"Active Users\"]}"
								);
							Element:span
								string
							Element:span
								responseContent
							Element:span
								=
							Element:span
								null
								;
							Element:span
								try
								{
							Element:span
								using
								(
							Element:span
								var
							Element:span
								writer
							Element:span
								=
							Element:span
								request
								.
							Element:span
								GetRequestStream
								()) {
							Element:span
								writer
								.
							Element:span
								Write
								(
							Element:span
								byteArray
								,
							Element:span
								0
								,
							Element:span
								byteArray
								.
							Element:span
								Length
								); }
							Element:span
								using
								(
							Element:span
								var
							Element:span
								response
							Element:span
								=
							Element:span
								request
								.
							Element:span
								GetResponse
								()
							Element:span
								as
							Element:span
								HttpWebResponse
								) {
							Element:span
								using
								(
							Element:span
								var
							Element:span
								reader
							Element:span
								=
							Element:span
								new
							Element:span
								StreamReader
								(
							Element:span
								response
								.
							Element:span
								GetResponseStream
								())) {
							Element:span
								responseContent
							Element:span
								=
							Element:span
								reader
								.
							Element:span
								ReadToEnd
								(); } } }
							Element:span
								catch
								(
							Element:span
								WebException
							Element:span
								ex
								) {
							Element:span
								System
								.
							Element:span
								Diagnostics
								.
							Element:span
								Debug
								.
							Element:span
								WriteLine
								(
							Element:span
								ex
								.
							Element:span
								Message
								);
							Element:span
								System
								.
							Element:span
								Diagnostics
								.
							Element:span
								Debug
								.
							Element:span
								WriteLine
								(
							Element:span
								new
							Element:span
								StreamReader
								(
							Element:span
								ex
								.
							Element:span
								Response
								.
							Element:span
								GetResponseStream
								()).
							Element:span
								ReadToEnd
								()); }
							Element:span
								System
								.
							Element:span
								Diagnostics
								.
							Element:span
								Debug
								.
							Element:span
								WriteLine
								(
							Element:span
								responseContent
								);
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
							Element:span
								using
							Element:span
								System
								.
							Element:span
								IO
								;
							Element:span
								using
							Element:span
								System
								.
							Element:span
								Net
								;
							Element:span
								using
							Element:span
								System
								.
							Element:span
								Text
								;
							Element:span
								var
							Element:span
								request
							Element:span
								=
							Element:span
								WebRequest
								.
							Element:span
								Create
								(
							Element:span
								"https://onesignal.com/api/v1/notifications"
								)
							Element:span
								as
							Element:span
								HttpWebRequest
								;
							Element:span
								request
								.
							Element:span
								KeepAlive
							Element:span
								=
							Element:span
								true
								;
							Element:span
								request
								.
							Element:span
								Method
							Element:span
								=
							Element:span
								"POST"
								;
							Element:span
								request
								.
							Element:span
								ContentType
							Element:span
								=
							Element:span
								"application/json; charset=utf-8"
								;
							Element:span
								request
								.
							Element:span
								Headers
								.
							Element:span
								Add
								(
							Element:span
								"authorization"
								,
							Element:span
								"Basic NGEwMGZmMjItY2NkNy0xMWUzLTk5ZDUtMDAwYzI5NDBlNjJj"
								);
							Element:span
								var
							Element:span
								serializer
							Element:span
								=
							Element:span
								new
							Element:span
								JavaScriptSerializer
								();
							Element:span
								var
							Element:span
								obj
							Element:span
								=
							Element:span
								new
								{
							Element:span
								app_id
							Element:span
								=
							Element:span
								"5eb5a37e-b458-11e3-ac11-000c2940e62c"
								,
							Element:span
								contents
							Element:span
								=
							Element:span
								new
								{
							Element:span
								en
							Element:span
								=
							Element:span
								"English Message"
								},
							Element:span
								included_segments
							Element:span
								=
							Element:span
								new
							Element:span
								string
								[] {
							Element:span
								"Active Users"
								} };
							Element:span
								var
							Element:span
								param
							Element:span
								=
							Element:span
								serializer
								.
							Element:span
								Serialize
								(
							Element:span
								obj
								);
							Element:span
								byte
								[]
							Element:span
								byteArray
							Element:span
								=
							Element:span
								Encoding
								.
							Element:span
								UTF8
								.
							Element:span
								GetBytes
								(
							Element:span
								param
								);
							Element:span
								string
							Element:span
								responseContent
							Element:span
								=
							Element:span
								null
								;
							Element:span
								try
								{
							Element:span
								using
								(
							Element:span
								var
							Element:span
								writer
							Element:span
								=
							Element:span
								request
								.
							Element:span
								GetRequestStream
								()) {
							Element:span
								writer
								.
							Element:span
								Write
								(
							Element:span
								byteArray
								,
							Element:span
								0
								,
							Element:span
								byteArray
								.
							Element:span
								Length
								); }
							Element:span
								using
								(
							Element:span
								var
							Element:span
								response
							Element:span
								=
							Element:span
								request
								.
							Element:span
								GetResponse
								()
							Element:span
								as
							Element:span
								HttpWebResponse
								) {
							Element:span
								using
								(
							Element:span
								var
							Element:span
								reader
							Element:span
								=
							Element:span
								new
							Element:span
								StreamReader
								(
							Element:span
								response
								.
							Element:span
								GetResponseStream
								())) {
							Element:span
								responseContent
							Element:span
								=
							Element:span
								reader
								.
							Element:span
								ReadToEnd
								(); } } }
							Element:span
								catch
								(
							Element:span
								WebException
							Element:span
								ex
								) {
							Element:span
								System
								.
							Element:span
								Diagnostics
								.
							Element:span
								Debug
								.
							Element:span
								WriteLine
								(
							Element:span
								ex
								.
							Element:span
								Message
								);
							Element:span
								System
								.
							Element:span
								Diagnostics
								.
							Element:span
								Debug
								.
							Element:span
								WriteLine
								(
							Element:span
								new
							Element:span
								StreamReader
								(
							Element:span
								ex
								.
							Element:span
								Response
								.
							Element:span
								GetResponseStream
								()).
							Element:span
								ReadToEnd
								()); }
							Element:span
								System
								.
							Element:span
								Diagnostics
								.
							Element:span
								Debug
								.
							Element:span
								WriteLine
								(
							Element:span
								responseContent
								);
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
							Element:span
								params
							Element:span
								=
								{
							Element:span
								"app_id"
							Element:span
								=>
							Element:span
								"5eb5a37e-b458-11e3-ac11-000c2940e62c"
								,
							Element:span
								"contents"
							Element:span
								=>
								{
							Element:span
								"en"
							Element:span
								=>
							Element:span
								"English Message"
								},
							Element:span
								"included_segments"
							Element:span
								=>
								[
							Element:span
								"Active Users"
								]}
							Element:span
								uri
							Element:span
								=
							Element:span
								URI
							Element:span
								.
							Element:span
								parse
								(
							Element:span
								'https://onesignal.com/api/v1/notifications'
								)
							Element:span
								http
							Element:span
								=
							Element:span
								Net::HTTP
							Element:span
								.
							Element:span
								new
								(
							Element:span
								uri
							Element:span
								.
							Element:span
								host
								,
							Element:span
								uri
							Element:span
								.
							Element:span
								port
								)
							Element:span
								http
							Element:span
								.
							Element:span
								use_ssl
							Element:span
								=
							Element:span
								true
							Element:span
								request
							Element:span
								=
							Element:span
								Net::HTTP::
							Element:span
								Post
							Element:span
								.
							Element:span
								new
								(
							Element:span
								uri
							Element:span
								.
							Element:span
								path
								,
							Element:span
								'Content-Type'
							Element:span
								=>
							Element:span
								'application/json;charset=utf-8'
								,
							Element:span
								'Authorization'
							Element:span
								=>
							Element:span
								"Basic NGEwMGZmMjItY2NkNy0xMWUzLTk5ZDUtMDAwYzI5NDBlNjJj"
								)
							Element:span
								request
							Element:span
								.
							Element:span
								body
							Element:span
								=
							Element:span
								params
							Element:span
								.
							Element:span
								as_json
							Element:span
								.
							Element:span
								to_json
							Element:span
								response
							Element:span
								=
							Element:span
								http
							Element:span
								.
							Element:span
								request
								(
							Element:span
								request
								)
							Element:span
								puts
							Element:span
								response
							Element:span
								.
							Element:span
								body
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
							Element:span
								import
							Element:span
								requests
							Element:span
								import
							Element:span
								json
							Element:span
								header
								= {
							Element:span
								"Content-Type"
								:
							Element:span
								"application/json; charset=utf-8"
								,
							Element:span
								"Authorization"
								:
							Element:span
								"Basic NGEwMGZmMjItY2NkNy0xMWUzLTk5ZDUtMDAwYzI5NDBlNjJj"
								}
							Element:span
								payload
								= {
							Element:span
								"app_id"
								:
							Element:span
								"5eb5a37e-b458-11e3-ac11-000c2940e62c"
								,
							Element:span
								"included_segments"
								: [
							Element:span
								"Active Users"
								],
							Element:span
								"contents"
								: {
							Element:span
								"en"
								:
							Element:span
								"English Message"
								}
							Element:span
								}
							Element:span
								req
								=
							Element:span
								requests
								.
							Element:span
								post
								(
							Element:span
								"https://onesignal.com/api/v1/notifications"
								,
							Element:span
								headers
								=
							Element:span
								header
								,
							Element:span
								data
								=
							Element:span
								json
								.
							Element:span
								dumps
								(
							Element:span
								payload
								))
							Element:span
								print
								(
							Element:span
								req
								.
							Element:span
								status_code
								,
							Element:span
								req
								.
							Element:span
								reason
								)
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
							Element:span
								var
							Element:span
								sendNotification
							Element:span
								=
							Element:span
								function
								(
							Element:span
								data
								) {
							Element:span
								var
							Element:span
								headers
							Element:span
								=
								{
							Element:span
								"Content-Type"
								:
							Element:span
								"application/json; charset=utf-8"
								,
							Element:span
								"Authorization"
								:
							Element:span
								"Basic NGEwMGZmMjItY2NkNy0xMWUzLTk5ZDUtMDAwYzI5NDBlNjJj"
								};
							Element:span
								var
							Element:span
								options
							Element:span
								=
								{
							Element:span
								host
								:
							Element:span
								"onesignal.com"
								,
							Element:span
								port
								:
							Element:span
								443
								,
							Element:span
								path
								:
							Element:span
								"/api/v1/notifications"
								,
							Element:span
								method
								:
							Element:span
								"POST"
								,
							Element:span
								headers
								:
							Element:span
								headers
								};
							Element:span
								var
							Element:span
								https
							Element:span
								=
							Element:span
								require
								(
							Element:span
								'https'
								);
							Element:span
								var
							Element:span
								req
							Element:span
								=
							Element:span
								https
								.
							Element:span
								request
								(
							Element:span
								options
								,
							Element:span
								function
								(
							Element:span
								res
								) {
							Element:span
								res
								.
							Element:span
								on
								(
							Element:span
								'data'
								,
							Element:span
								function
								(
							Element:span
								data
								) {
							Element:span
								console
								.
							Element:span
								log
								(
							Element:span
								"Response:"
								);
							Element:span
								console
								.
							Element:span
								log
								(
							Element:span
								JSON
								.
							Element:span
								parse
								(
							Element:span
								data
								)); }); });
							Element:span
								req
								.
							Element:span
								on
								(
							Element:span
								'error'
								,
							Element:span
								function
								(
							Element:span
								e
								) {
							Element:span
								console
								.
							Element:span
								log
								(
							Element:span
								"ERROR:"
								);
							Element:span
								console
								.
							Element:span
								log
								(
							Element:span
								e
								); });
							Element:span
								req
								.
							Element:span
								write
								(
							Element:span
								JSON
								.
							Element:span
								stringify
								(
							Element:span
								data
								));
							Element:span
								req
								.
							Element:span
								end
								(); };
							Element:span
								var
							Element:span
								message
							Element:span
								=
								{
							Element:span
								app_id
								:
							Element:span
								"5eb5a37e-b458-11e3-ac11-000c2940e62c"
								,
							Element:span
								contents
								: {
							Element:span
								"en"
								:
							Element:span
								"English Message"
								},
							Element:span
								included_segments
								: [
							Element:span
								"Active Users"
								] };
							Element:span
								sendNotification
								(
							Element:span
								message
								);
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
							Element:span
								#!/usr/bin/perl -w
							Element:span
								use
							Element:span
								strict
								;
							Element:span
								use
							Element:span
								warnings
								;
							Element:span
								use
							Element:span
								Net
							Element:span
								::
							Element:span
								Curl
							Element:span
								::
							Element:span
								Easy
							Element:span
								qw(/^CURLOPT_.*/)
								;;
							Element:span
								use
							Element:span
								JSON
								;
							Element:span
								use
							Element:span
								Data
							Element:span
								::
							Element:span
								Dumper
								;
							Element:span
								sub
							Element:span
								SendNotification
								{
							Element:span
								my
								(
							Element:span
								$url
								,
							Element:span
								$authorisation
								,
							Element:span
								$app_id
								,
							Element:span
								$contents
								)
							Element:span
								=
							Element:span
								@_
								;
							Element:span
								my
							Element:span
								$curl
							Element:span
								=
							Element:span
								Net
							Element:span
								::
							Element:span
								Curl
							Element:span
								::
							Element:span
								Easy
							Element:span
								->
							Element:span
								new
								;
							Element:span
								my
							Element:span
								$json
							Element:span
								=
							Element:span
								JSON
							Element:span
								->
							Element:span
								new
								();
							Element:span
								my
							Element:span
								$response_body
								;
							Element:span
								my
							Element:span
								$json_string
							Element:span
								=
							Element:span
								$json
							Element:span
								->
							Element:span
								encode
								({
							Element:span
								app_id
							Element:span
								=>
							Element:span
								$app_id
								,
							Element:span
								included_segments
							Element:span
								=>
								[
							Element:span
								"Active Users"
								] ,
							Element:span
								contents
							Element:span
								=>
								{
							Element:span
								en
							Element:span
								=>
							Element:span
								$contents
								} });
							Element:span
								$curl
							Element:span
								->
							Element:span
								setopt
								(
							Element:span
								CURLOPT_URL
								,
							Element:span
								$url
								);
							Element:span
								$curl
							Element:span
								->
							Element:span
								setopt
								(
							Element:span
								CURLOPT_SSL_VERIFYHOST
								,
							Element:span
								0
								);
							Element:span
								$curl
							Element:span
								->
							Element:span
								setopt
								(
							Element:span
								CURLOPT_SSL_VERIFYPEER
								,
							Element:span
								0
								);
							Element:span
								$curl
							Element:span
								->
							Element:span
								setopt
								(
							Element:span
								CURLOPT_HTTPHEADER
								, [
							Element:span
								'Content-Type: application/json; charset=utf-8'
								,
							Element:span
								"Authorization: Basic $authorisation"
								]);
							Element:span
								$curl
							Element:span
								->
							Element:span
								setopt
								(
							Element:span
								CURLOPT_POST
								,
							Element:span
								1
								);
							Element:span
								$curl
							Element:span
								->
							Element:span
								setopt
								(
							Element:span
								CURLOPT_POSTFIELDS
								,
							Element:span
								$json_string
								);
							Element:span
								$curl
							Element:span
								->
							Element:span
								setopt
								(
							Element:span
								CURLOPT_WRITEDATA
								, \
							Element:span
								$response_body
								);
							Element:span
								$curl
							Element:span
								->
							Element:span
								perform
								;
							Element:span
								print
							Element:span
								Dumper
								(
							Element:span
								$response_body
								); }
							Element:span
								SendNotification
								(
							Element:span
								"https://onesignal.com/api/v1/notifications"
								,
							Element:span
								"<< PUT YOUR REST API KEY HERE>>"
								,
							Element:span
								"<< PUT YOUR APP ID KEY HERE >>"
								,
							Element:span
								"Hello World"
								);
							Element:span
								exit
								(
							Element:span
								0
								);
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
							Element:span
								send
							Element:span
								=
							Element:span
								function
								(
							Element:span
								params
								) {
							Element:span
								var
							Element:span
								promise
							Element:span
								=
							Element:span
								new
							Element:span
								Parse
								.
							Element:span
								Promise
								();
							Element:span
								var
							Element:span
								jsonBody
							Element:span
								=
								{
							Element:span
								app_id
								:
							Element:span
								"5eb5a37e-b458-11e3-ac11-000c2940e62c"
								,
							Element:span
								included_segments
								: [
							Element:span
								"Active Users"
								],
							Element:span
								contents
								: {
							Element:span
								en
								:
							Element:span
								"English Message"
								},
							Element:span
								data
								: {
							Element:span
								foo
								:
							Element:span
								"bar"
								} };
							Element:span
								Parse
								.
							Element:span
								Cloud
								.
							Element:span
								httpRequest
								({
							Element:span
								method
								:
							Element:span
								"POST"
								,
							Element:span
								url
								:
							Element:span
								"https://onesignal.com/api/v1/notifications"
								,
							Element:span
								headers
								: {
							Element:span
								"Content-Type"
								:
							Element:span
								"application/json;charset=utf-8"
								,
							Element:span
								"Authorization"
								:
							Element:span
								"Basic NGEwMGZmMjItY2NkNy0xMWUzLTk5ZDUtMDAwYzI5NDBlNjJj"
								},
							Element:span
								body
								:
							Element:span
								JSON
								.
							Element:span
								stringify
								(
							Element:span
								jsonBody
								) }).
							Element:span
								then
								(
							Element:span
								function
								(
							Element:span
								httpResponse
								) {
							Element:span
								promise
								.
							Element:span
								resolve
								(
							Element:span
								httpResponse
								) },
							Element:span
								function
								(
							Element:span
								httpResponse
								) {
							Element:span
								promise
								.
							Element:span
								reject
								(
							Element:span
								httpResponse
								); });
							Element:span
								return
							Element:span
								promise
								; };
							Element:span
								exports
								.
							Element:span
								send
							Element:span
								=
							Element:span
								send
								;
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
							Element:span
								function
							Element:span
								SendNewNotification
								() {
							Element:span
								var
							Element:span
								jsonBody
							Element:span
								=
								{
							Element:span
								app_id
								:
							Element:span
								"5eb5a37e-b458-11e3-ac11-000c2940e62c"
								,
							Element:span
								included_segments
								: [
							Element:span
								"Active Users"
								],
							Element:span
								contents
								: {
							Element:span
								en
								:
							Element:span
								"English Message"
								}, };
							Element:span
								var
							Element:span
								promise
							Element:span
								=
							Element:span
								Spark
								.
							Element:span
								getHttp
								(
							Element:span
								"https://onesignal.com/api/v1/notifications"
								).
							Element:span
								setHeaders
								({
							Element:span
								"Content-Type"
								:
							Element:span
								"application/json;charset=utf-8"
								,
							Element:span
								"Authorization"
								:
							Element:span
								"Basic NGEwMGZmMjItY2NkNy0xMWUzLTk5ZDUtMDAwYzI5NDBlNjJj"
								}).
							Element:span
								postJson
								(
							Element:span
								jsonBody
								);
							Element:span
								return
							Element:span
								promise
								; }
							Element:span
								var
							Element:span
								response
							Element:span
								=
							Element:span
								SendNewNotification
								().
							Element:span
								getResponseJson
								();
							Element:span
								Spark
								.
							Element:span
								setScriptData
								(
							Element:span
								"response"
								,
							Element:span
								response
								)
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
							Element:span
								try
								{
							Element:span
								String
							Element:span
								jsonResponse
								;
							Element:span
								URL
							Element:span
								url
							Element:span
								=
							Element:span
								new
							Element:span
								URL
								(
							Element:span
								"https://onesignal.com/api/v1/notifications"
								);
							Element:span
								HttpURLConnection
							Element:span
								con
							Element:span
								=
								(
							Element:span
								HttpURLConnection
								)
							Element:span
								url
								.
							Element:span
								openConnection
								();
							Element:span
								con
								.
							Element:span
								setUseCaches
								(
							Element:span
								false
								);
							Element:span
								con
								.
							Element:span
								setDoOutput
								(
							Element:span
								true
								);
							Element:span
								con
								.
							Element:span
								setDoInput
								(
							Element:span
								true
								);
							Element:span
								con
								.
							Element:span
								setRequestProperty
								(
							Element:span
								"Content-Type"
								,
							Element:span
								"application/json; charset=UTF-8"
								);
							Element:span
								con
								.
							Element:span
								setRequestProperty
								(
							Element:span
								"Authorization"
								,
							Element:span
								"Basic NGEwMGZmMjItY2NkNy0xMWUzLTk5ZDUtMDAwYzI5NDBlNjJj"
								);
							Element:span
								con
								.
							Element:span
								setRequestMethod
								(
							Element:span
								"POST"
								);
							Element:span
								String
							Element:span
								strJsonBody
							Element:span
								=
							Element:span
								"{"
							Element:span
								+
							Element:span
								"\"app_id\": \"5eb5a37e-b458-11e3-ac11-000c2940e62c\","
							Element:span
								+
							Element:span
								"\"included_segments\": [\"Active Users\"],"
							Element:span
								+
							Element:span
								"\"data\": {\"foo\": \"bar\"},"
							Element:span
								+
							Element:span
								"\"contents\": {\"en\": \"English Message\"}"
							Element:span
								+
							Element:span
								"}"
								;
							Element:span
								System
								.
							Element:span
								out
								.
							Element:span
								println
								(
							Element:span
								"strJsonBody:\n"
							Element:span
								+
							Element:span
								strJsonBody
								);
							Element:span
								byte
								[]
							Element:span
								sendBytes
							Element:span
								=
							Element:span
								strJsonBody
								.
							Element:span
								getBytes
								(
							Element:span
								"UTF-8"
								);
							Element:span
								con
								.
							Element:span
								setFixedLengthStreamingMode
								(
							Element:span
								sendBytes
								.
							Element:span
								length
								);
							Element:span
								OutputStream
							Element:span
								outputStream
							Element:span
								=
							Element:span
								con
								.
							Element:span
								getOutputStream
								();
							Element:span
								outputStream
								.
							Element:span
								write
								(
							Element:span
								sendBytes
								);
							Element:span
								int
							Element:span
								httpResponse
							Element:span
								=
							Element:span
								con
								.
							Element:span
								getResponseCode
								();
							Element:span
								System
								.
							Element:span
								out
								.
							Element:span
								println
								(
							Element:span
								"httpResponse: "
							Element:span
								+
							Element:span
								httpResponse
								);
							Element:span
								if
								(
							Element:span
								httpResponse
							Element:span
								>=
							Element:span
								HttpURLConnection
								.
							Element:span
								HTTP_OK
							Element:span
								&&
							Element:span
								httpResponse
							Element:span
								<
							Element:span
								HttpURLConnection
								.
							Element:span
								HTTP_BAD_REQUEST
								) {
							Element:span
								Scanner
							Element:span
								scanner
							Element:span
								=
							Element:span
								new
							Element:span
								Scanner
								(
							Element:span
								con
								.
							Element:span
								getInputStream
								(),
							Element:span
								"UTF-8"
								);
							Element:span
								jsonResponse
							Element:span
								=
							Element:span
								scanner
								.
							Element:span
								useDelimiter
								(
							Element:span
								"\\A"
								).
							Element:span
								hasNext
								()
							Element:span
								?
							Element:span
								scanner
								.
							Element:span
								next
								() :
							Element:span
								""
								;
							Element:span
								scanner
								.
							Element:span
								close
								(); }
							Element:span
								else
								{
							Element:span
								Scanner
							Element:span
								scanner
							Element:span
								=
							Element:span
								new
							Element:span
								Scanner
								(
							Element:span
								con
								.
							Element:span
								getErrorStream
								(),
							Element:span
								"UTF-8"
								);
							Element:span
								jsonResponse
							Element:span
								=
							Element:span
								scanner
								.
							Element:span
								useDelimiter
								(
							Element:span
								"\\A"
								).
							Element:span
								hasNext
								()
							Element:span
								?
							Element:span
								scanner
								.
							Element:span
								next
								() :
							Element:span
								""
								;
							Element:span
								scanner
								.
							Element:span
								close
								(); }
							Element:span
								System
								.
							Element:span
								out
								.
							Element:span
								println
								(
							Element:span
								"jsonResponse:\n"
							Element:span
								+
							Element:span
								jsonResponse
								); }
							Element:span
								catch
								(
							Element:span
								Throwable
							Element:span
								t
								) {
							Element:span
								t
								.
							Element:span
								printStackTrace
								(); }
						Node:
						(type) c
						(layer)2
							Element:h3
								Send based on filters/tags - Create notification
							Element:a
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:a
								Shell
							Element:li
							Element:a
								JSON
							Element:li
							Element:a
								PHP
							Element:li
							Element:a
								C# (.NET standard)
							Element:li
							Element:a
								C# (ASP.NET)
							Element:li
							Element:a
								Ruby (Rails)
							Element:li
							Element:a
								Python
							Element:li
							Element:a
								NodeJS
							Element:li
							Element:a
								Perl
							Element:li
							Element:a
								Parse Cloud
							Element:li
							Element:a
								GameSparks
							Element:li
							Element:a
								Java
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
							Element:span
								curl
							Element:span
								--include
								\
							Element:span
								--request
								POST \
							Element:span
								--header
							Element:span
								"Content-Type: application/json; charset=utf-8"
								\
							Element:span
								--header
							Element:span
								"Authorization: Basic NGEwMGZmMjItY2NkNy0xMWUzLTk5ZDUtMDAwYzI5NDBlNjJj"
								\
							Element:span
								--data-binary
							Element:span
								"{\"app_id\": \"5eb5a37e-b458-11e3-ac11-000c2940e62c\",
								\"contents\": {\"en\": \"English Message\"}, \"filters\": [{\"field\":
							Element:span
								"\tag\", \"key\": \"level\", \"relation\": \">\", \"value\": \"10\"},{\"operator\": \"OR\"},{\"field\": \"amount_spent\", \"relation\": \">\",\"value\": \"0\"}]}"
								\ https://onesignal.com/api/v1/notifications
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
								{
							Element:span
								"app_id"
								:
							Element:span
								"5eb5a37e-b458-11e3-ac11-000c2940e62c"
								,
							Element:span
								"filters"
								: [ {
							Element:span
								"field"
								:
							Element:span
								"tag"
								,
							Element:span
								"key"
								:
							Element:span
								"level"
								,
							Element:span
								"relation"
								:
							Element:span
								"="
								,
							Element:span
								"value"
								:
							Element:span
								"10"
								}, {
							Element:span
								"operator"
								:
							Element:span
								"OR"
								}, {
							Element:span
								"field"
								:
							Element:span
								"amount_spent"
								,
							Element:span
								"relation"
								:
							Element:span
								">"
								,
							Element:span
								"value"
								:
							Element:span
								"0"
								} ],
							Element:span
								"data"
								: {
							Element:span
								"foo"
								:
							Element:span
								"bar"
								},
							Element:span
								"contents"
								: {
							Element:span
								"en"
								:
							Element:span
								"English Message"
								} }
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
							Element:span
								<?
							Element:span
								PHP
							Element:span
								function
							Element:span
								sendMessage
								(){
							Element:span
								$content
							Element:span
								=
							Element:span
								array
								(
							Element:span
								"en"
							Element:span
								=>
							Element:span
								'English Message'
								);
							Element:span
								$fields
							Element:span
								=
							Element:span
								array
								(
							Element:span
								'app_id'
							Element:span
								=>
							Element:span
								"5eb5a37e-b458-11e3-ac11-000c2940e62c"
								,
							Element:span
								'filters'
							Element:span
								=>
							Element:span
								array
								(
							Element:span
								array
								(
							Element:span
								"field"
							Element:span
								=>
							Element:span
								"tag"
								,
							Element:span
								"key"
							Element:span
								=>
							Element:span
								"level"
								,
							Element:span
								"relation"
							Element:span
								=>
							Element:span
								"="
								,
							Element:span
								"value"
							Element:span
								=>
							Element:span
								"10"
								),
							Element:span
								array
								(
							Element:span
								"operator"
							Element:span
								=>
							Element:span
								"OR"
								),
							Element:span
								array
								(
							Element:span
								"field"
							Element:span
								=>
							Element:span
								"amount_spent"
								,
							Element:span
								"relation"
							Element:span
								=>
							Element:span
								"="
								,
							Element:span
								"value"
							Element:span
								=>
							Element:span
								"0"
								)),
							Element:span
								'data'
							Element:span
								=>
							Element:span
								array
								(
							Element:span
								"foo"
							Element:span
								=>
							Element:span
								"bar"
								),
							Element:span
								'contents'
							Element:span
								=>
							Element:span
								$content
								);
							Element:span
								$fields
							Element:span
								=
							Element:span
								json_encode
								(
							Element:span
								$fields
								);
							Element:span
								print
								(
							Element:span
								"\nJSON sent:\n"
								);
							Element:span
								print
								(
							Element:span
								$fields
								);
							Element:span
								$ch
							Element:span
								=
							Element:span
								curl_init
								();
							Element:span
								curl_setopt
								(
							Element:span
								$ch
								,
							Element:span
								CURLOPT_URL
								,
							Element:span
								"https://onesignal.com/api/v1/notifications"
								);
							Element:span
								curl_setopt
								(
							Element:span
								$ch
								,
							Element:span
								CURLOPT_HTTPHEADER
								,
							Element:span
								array
								(
							Element:span
								'Content-Type: application/json; charset=utf-8'
								,
							Element:span
								'Authorization: Basic NGEwMGZmMjItY2NkNy0xMWUzLTk5ZDUtMDAwYzI5NDBlNjJj'
								));
							Element:span
								curl_setopt
								(
							Element:span
								$ch
								,
							Element:span
								CURLOPT_RETURNTRANSFER
								,
							Element:span
								TRUE
								);
							Element:span
								curl_setopt
								(
							Element:span
								$ch
								,
							Element:span
								CURLOPT_HEADER
								,
							Element:span
								FALSE
								);
							Element:span
								curl_setopt
								(
							Element:span
								$ch
								,
							Element:span
								CURLOPT_POST
								,
							Element:span
								TRUE
								);
							Element:span
								curl_setopt
								(
							Element:span
								$ch
								,
							Element:span
								CURLOPT_POSTFIELDS
								,
							Element:span
								$fields
								);
							Element:span
								curl_setopt
								(
							Element:span
								$ch
								,
							Element:span
								CURLOPT_SSL_VERIFYPEER
								,
							Element:span
								FALSE
								);
							Element:span
								$response
							Element:span
								=
							Element:span
								curl_exec
								(
							Element:span
								$ch
								);
							Element:span
								curl_close
								(
							Element:span
								$ch
								);
							Element:span
								return
							Element:span
								$response
								; }
							Element:span
								$response
							Element:span
								=
							Element:span
								sendMessage
								();
							Element:span
								$return
								[
							Element:span
								"allresponses"
								]
							Element:span
								=
							Element:span
								$response
								;
							Element:span
								$return
							Element:span
								=
							Element:span
								json_encode
								(
							Element:span
								$return
								);
							Element:span
								print
								(
							Element:span
								"\n\nJSON received:\n"
								);
							Element:span
								print
								(
							Element:span
								$return
								);
							Element:span
								print
								(
							Element:span
								"\n"
								);
							Element:span
								?>
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
							Element:span
								using
							Element:span
								System
								.
							Element:span
								IO
								;
							Element:span
								using
							Element:span
								System
								.
							Element:span
								Net
								;
							Element:span
								using
							Element:span
								System
								.
							Element:span
								Text
								;
							Element:span
								var
							Element:span
								request
							Element:span
								=
							Element:span
								WebRequest
								.
							Element:span
								Create
								(
							Element:span
								"https://onesignal.com/api/v1/notifications"
								)
							Element:span
								as
							Element:span
								HttpWebRequest
								;
							Element:span
								request
								.
							Element:span
								KeepAlive
							Element:span
								=
							Element:span
								true
								;
							Element:span
								request
								.
							Element:span
								Method
							Element:span
								=
							Element:span
								"POST"
								;
							Element:span
								request
								.
							Element:span
								ContentType
							Element:span
								=
							Element:span
								"application/json; charset=utf-8"
								;
							Element:span
								request
								.
							Element:span
								Headers
								.
							Element:span
								Add
								(
							Element:span
								"authorization"
								,
							Element:span
								"Basic NGEwMGZmMjItY2NkNy0xMWUzLTk5ZDUtMDAwYzI5NDBlNjJj"
								);
							Element:span
								byte
								[]
							Element:span
								byteArray
							Element:span
								=
							Element:span
								Encoding
								.
							Element:span
								UTF8
								.
							Element:span
								GetBytes
								(
							Element:span
								"{"
							Element:span
								+
							Element:span
								"\"app_id\": \"5eb5a37e-b458-11e3-ac11-000c2940e62c\","
							Element:span
								+
							Element:span
								"\"contents\": {\"en\": \"English Message\"},"
							Element:span
								+
							Element:span
								"\"filters\": [{\"field\": \"tag\", \"key\": \"level\", \"relation\": \">\", \"value\": \"10\"},{\"operator\": \"OR\"},{\"field\": \"amount_spent\", \"relation\": \">\",\"value\": \"0\"}]}"
								);
							Element:span
								string
							Element:span
								responseContent
							Element:span
								=
							Element:span
								null
								;
							Element:span
								try
								{
							Element:span
								using
								(
							Element:span
								var
							Element:span
								writer
							Element:span
								=
							Element:span
								request
								.
							Element:span
								GetRequestStream
								()) {
							Element:span
								writer
								.
							Element:span
								Write
								(
							Element:span
								byteArray
								,
							Element:span
								0
								,
							Element:span
								byteArray
								.
							Element:span
								Length
								); }
							Element:span
								using
								(
							Element:span
								var
							Element:span
								response
							Element:span
								=
							Element:span
								request
								.
							Element:span
								GetResponse
								()
							Element:span
								as
							Element:span
								HttpWebResponse
								) {
							Element:span
								using
								(
							Element:span
								var
							Element:span
								reader
							Element:span
								=
							Element:span
								new
							Element:span
								StreamReader
								(
							Element:span
								response
								.
							Element:span
								GetResponseStream
								())) {
							Element:span
								responseContent
							Element:span
								=
							Element:span
								reader
								.
							Element:span
								ReadToEnd
								(); } } }
							Element:span
								catch
								(
							Element:span
								WebException
							Element:span
								ex
								) {
							Element:span
								System
								.
							Element:span
								Diagnostics
								.
							Element:span
								Debug
								.
							Element:span
								WriteLine
								(
							Element:span
								ex
								.
							Element:span
								Message
								);
							Element:span
								System
								.
							Element:span
								Diagnostics
								.
							Element:span
								Debug
								.
							Element:span
								WriteLine
								(
							Element:span
								new
							Element:span
								StreamReader
								(
							Element:span
								ex
								.
							Element:span
								Response
								.
							Element:span
								GetResponseStream
								()).
							Element:span
								ReadToEnd
								()); }
							Element:span
								System
								.
							Element:span
								Diagnostics
								.
							Element:span
								Debug
								.
							Element:span
								WriteLine
								(
							Element:span
								responseContent
								);
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
							Element:span
								using
							Element:span
								System
								.
							Element:span
								IO
								;
							Element:span
								using
							Element:span
								System
								.
							Element:span
								Net
								;
							Element:span
								using
							Element:span
								System
								.
							Element:span
								Text
								;
							Element:span
								var
							Element:span
								request
							Element:span
								=
							Element:span
								WebRequest
								.
							Element:span
								Create
								(
							Element:span
								"https://onesignal.com/api/v1/notifications"
								)
							Element:span
								as
							Element:span
								HttpWebRequest
								;
							Element:span
								request
								.
							Element:span
								KeepAlive
							Element:span
								=
							Element:span
								true
								;
							Element:span
								request
								.
							Element:span
								Method
							Element:span
								=
							Element:span
								"POST"
								;
							Element:span
								request
								.
							Element:span
								ContentType
							Element:span
								=
							Element:span
								"application/json; charset=utf-8"
								;
							Element:span
								request
								.
							Element:span
								Headers
								.
							Element:span
								Add
								(
							Element:span
								"authorization"
								,
							Element:span
								"Basic NGEwMGZmMjItY2NkNy0xMWUzLTk5ZDUtMDAwYzI5NDBlNjJj"
								);
							Element:span
								var
							Element:span
								serializer
							Element:span
								=
							Element:span
								new
							Element:span
								JavaScriptSerializer
								();
							Element:span
								var
							Element:span
								obj
							Element:span
								=
							Element:span
								new
								{
							Element:span
								app_id
							Element:span
								=
							Element:span
								"5eb5a37e-b458-11e3-ac11-000c2940e62c"
								,
							Element:span
								contents
							Element:span
								=
							Element:span
								new
								{
							Element:span
								en
							Element:span
								=
							Element:span
								"English Message"
								},
							Element:span
								filters
							Element:span
								=
							Element:span
								new
							Element:span
								object
								[] {
							Element:span
								new
								{
							Element:span
								field
							Element:span
								=
							Element:span
								"tag"
								,
							Element:span
								key
							Element:span
								=
							Element:span
								"level"
								,
							Element:span
								value
							Element:span
								=
							Element:span
								"10"
								},
							Element:span
								new
								{
							Element:span
								@operator
							Element:span
								=
							Element:span
								"OR"
								},
							Element:span
								new
								{
							Element:span
								field
							Element:span
								=
							Element:span
								"amount_spent"
								,
							Element:span
								relation
							Element:span
								=
							Element:span
								">"
								,
							Element:span
								value
							Element:span
								=
							Element:span
								"0"
								} } };
							Element:span
								var
							Element:span
								param
							Element:span
								=
							Element:span
								serializer
								.
							Element:span
								Serialize
								(
							Element:span
								obj
								);
							Element:span
								byte
								[]
							Element:span
								byteArray
							Element:span
								=
							Element:span
								Encoding
								.
							Element:span
								UTF8
								.
							Element:span
								GetBytes
								(
							Element:span
								param
								);
							Element:span
								string
							Element:span
								responseContent
							Element:span
								=
							Element:span
								null
								;
							Element:span
								try
								{
							Element:span
								using
								(
							Element:span
								var
							Element:span
								writer
							Element:span
								=
							Element:span
								request
								.
							Element:span
								GetRequestStream
								()) {
							Element:span
								writer
								.
							Element:span
								Write
								(
							Element:span
								byteArray
								,
							Element:span
								0
								,
							Element:span
								byteArray
								.
							Element:span
								Length
								); }
							Element:span
								using
								(
							Element:span
								var
							Element:span
								response
							Element:span
								=
							Element:span
								request
								.
							Element:span
								GetResponse
								()
							Element:span
								as
							Element:span
								HttpWebResponse
								) {
							Element:span
								using
								(
							Element:span
								var
							Element:span
								reader
							Element:span
								=
							Element:span
								new
							Element:span
								StreamReader
								(
							Element:span
								response
								.
							Element:span
								GetResponseStream
								())) {
							Element:span
								responseContent
							Element:span
								=
							Element:span
								reader
								.
							Element:span
								ReadToEnd
								(); } } }
							Element:span
								catch
								(
							Element:span
								WebException
							Element:span
								ex
								) {
							Element:span
								System
								.
							Element:span
								Diagnostics
								.
							Element:span
								Debug
								.
							Element:span
								WriteLine
								(
							Element:span
								ex
								.
							Element:span
								Message
								);
							Element:span
								System
								.
							Element:span
								Diagnostics
								.
							Element:span
								Debug
								.
							Element:span
								WriteLine
								(
							Element:span
								new
							Element:span
								StreamReader
								(
							Element:span
								ex
								.
							Element:span
								Response
								.
							Element:span
								GetResponseStream
								()).
							Element:span
								ReadToEnd
								()); }
							Element:span
								System
								.
							Element:span
								Diagnostics
								.
							Element:span
								Debug
								.
							Element:span
								WriteLine
								(
							Element:span
								responseContent
								);
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
							Element:span
								params
							Element:span
								=
								{
							Element:span
								"app_id"
							Element:span
								=>
							Element:span
								"5eb5a37e-b458-11e3-ac11-000c2940e62c"
								,
							Element:span
								"contents"
							Element:span
								=>
								{
							Element:span
								"en"
							Element:span
								=>
							Element:span
								"English Message"
								},
							Element:span
								"filters"
							Element:span
								=>
								[ {
							Element:span
								"field"
							Element:span
								:
							Element:span
								"tag"
								,
							Element:span
								"key"
							Element:span
								:
							Element:span
								"level"
								,
							Element:span
								"relation"
							Element:span
								:
							Element:span
								"="
								,
							Element:span
								"value"
							Element:span
								:
							Element:span
								"10"
								}, {
							Element:span
								"operator"
							Element:span
								:
							Element:span
								"OR"
								}, {
							Element:span
								"field"
							Element:span
								:
							Element:span
								"amount_spent"
								,
							Element:span
								"relation"
							Element:span
								:
							Element:span
								">"
								,
							Element:span
								"value"
							Element:span
								:
							Element:span
								"0"
								} ] }
							Element:span
								uri
							Element:span
								=
							Element:span
								URI
							Element:span
								.
							Element:span
								parse
								(
							Element:span
								'https://onesignal.com/api/v1/notifications'
								)
							Element:span
								http
							Element:span
								=
							Element:span
								Net::HTTP
							Element:span
								.
							Element:span
								new
								(
							Element:span
								uri
							Element:span
								.
							Element:span
								host
								,
							Element:span
								uri
							Element:span
								.
							Element:span
								port
								)
							Element:span
								http
							Element:span
								.
							Element:span
								use_ssl
							Element:span
								=
							Element:span
								true
							Element:span
								request
							Element:span
								=
							Element:span
								Net::HTTP::
							Element:span
								Post
							Element:span
								.
							Element:span
								new
								(
							Element:span
								uri
							Element:span
								.
							Element:span
								path
								,
							Element:span
								'Content-Type'
							Element:span
								=>
							Element:span
								'application/json;charset=utf-8'
								,
							Element:span
								'Authorization'
							Element:span
								=>
							Element:span
								"Basic NGEwMGZmMjItY2NkNy0xMWUzLTk5ZDUtMDAwYzI5NDBlNjJj"
								)
							Element:span
								request
							Element:span
								.
							Element:span
								body
							Element:span
								=
							Element:span
								params
							Element:span
								.
							Element:span
								as_json
							Element:span
								.
							Element:span
								to_json
							Element:span
								response
							Element:span
								=
							Element:span
								http
							Element:span
								.
							Element:span
								request
								(
							Element:span
								request
								)
							Element:span
								puts
							Element:span
								response
							Element:span
								.
							Element:span
								body
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
							Element:span
								import
							Element:span
								requests
							Element:span
								import
							Element:span
								json
							Element:span
								header
								= {
							Element:span
								"Content-Type"
								:
							Element:span
								"application/json; charset=utf-8"
								,
							Element:span
								"Authorization"
								:
							Element:span
								"Basic NGEwMGZmMjItY2NkNy0xMWUzLTk5ZDUtMDAwYzI5NDBlNjJj"
								}
							Element:span
								payload
								= {
							Element:span
								"app_id"
								:
							Element:span
								"5eb5a37e-b458-11e3-ac11-000c2940e62c"
								,
							Element:span
								"filters"
								: [ {
							Element:span
								"field"
								:
							Element:span
								"tag"
								,
							Element:span
								"key"
								:
							Element:span
								"level"
								,
							Element:span
								"relation"
								:
							Element:span
								"="
								,
							Element:span
								"value"
								:
							Element:span
								"10"
								}, {
							Element:span
								"operator"
								:
							Element:span
								"OR"
								}, {
							Element:span
								"field"
								:
							Element:span
								"amount_spent"
								,
							Element:span
								"relation"
								:
							Element:span
								">"
								,
							Element:span
								"value"
								:
							Element:span
								"0"
								} ],
							Element:span
								"contents"
								: {
							Element:span
								"en"
								:
							Element:span
								"English Message"
								}
							Element:span
								}
							Element:span
								req
								=
							Element:span
								requests
								.
							Element:span
								post
								(
							Element:span
								"https://onesignal.com/api/v1/notifications"
								,
							Element:span
								headers
								=
							Element:span
								header
								,
							Element:span
								data
								=
							Element:span
								json
								.
							Element:span
								dumps
								(
							Element:span
								payload
								))
							Element:span
								print
								(
							Element:span
								req
								.
							Element:span
								status_code
								,
							Element:span
								req
								.
							Element:span
								reason
								)
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
							Element:span
								var
							Element:span
								sendNotification
							Element:span
								=
							Element:span
								function
								(
							Element:span
								data
								) {
							Element:span
								var
							Element:span
								headers
							Element:span
								=
								{
							Element:span
								"Content-Type"
								:
							Element:span
								"application/json; charset=utf-8"
								,
							Element:span
								"Authorization"
								:
							Element:span
								"Basic NGEwMGZmMjItY2NkNy0xMWUzLTk5ZDUtMDAwYzI5NDBlNjJj"
								};
							Element:span
								var
							Element:span
								options
							Element:span
								=
								{
							Element:span
								host
								:
							Element:span
								"onesignal.com"
								,
							Element:span
								port
								:
							Element:span
								443
								,
							Element:span
								path
								:
							Element:span
								"/api/v1/notifications"
								,
							Element:span
								method
								:
							Element:span
								"POST"
								,
							Element:span
								headers
								:
							Element:span
								headers
								};
							Element:span
								var
							Element:span
								https
							Element:span
								=
							Element:span
								require
								(
							Element:span
								'https'
								);
							Element:span
								var
							Element:span
								req
							Element:span
								=
							Element:span
								https
								.
							Element:span
								request
								(
							Element:span
								options
								,
							Element:span
								function
								(
							Element:span
								res
								) {
							Element:span
								res
								.
							Element:span
								on
								(
							Element:span
								'data'
								,
							Element:span
								function
								(
							Element:span
								data
								) {
							Element:span
								console
								.
							Element:span
								log
								(
							Element:span
								"Response:"
								);
							Element:span
								console
								.
							Element:span
								log
								(
							Element:span
								JSON
								.
							Element:span
								parse
								(
							Element:span
								data
								)); }); });
							Element:span
								req
								.
							Element:span
								on
								(
							Element:span
								'error'
								,
							Element:span
								function
								(
							Element:span
								e
								) {
							Element:span
								console
								.
							Element:span
								log
								(
							Element:span
								"ERROR:"
								);
							Element:span
								console
								.
							Element:span
								log
								(
							Element:span
								e
								); });
							Element:span
								req
								.
							Element:span
								write
								(
							Element:span
								JSON
								.
							Element:span
								stringify
								(
							Element:span
								data
								));
							Element:span
								req
								.
							Element:span
								end
								(); };
							Element:span
								var
							Element:span
								message
							Element:span
								=
								{
							Element:span
								app_id
								:
							Element:span
								"5eb5a37e-b458-11e3-ac11-000c2940e62c"
								,
							Element:span
								contents
								: {
							Element:span
								"en"
								:
							Element:span
								"English Message"
								},
							Element:span
								filters
								: [ {
							Element:span
								"field"
								:
							Element:span
								"tag"
								,
							Element:span
								"key"
								:
							Element:span
								"level"
								,
							Element:span
								"relation"
								:
							Element:span
								"="
								,
							Element:span
								"value"
								:
							Element:span
								"10"
								}, {
							Element:span
								"operator"
								:
							Element:span
								"OR"
								}, {
							Element:span
								"field"
								:
							Element:span
								"amount_spent"
								,
							Element:span
								"relation"
								:
							Element:span
								">"
								,
							Element:span
								"value"
								:
							Element:span
								"0"
								} ] };
							Element:span
								sendNotification
								(
							Element:span
								message
								);
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
							Element:span
								#!/usr/bin/perl -w
							Element:span
								use
							Element:span
								strict
								;
							Element:span
								use
							Element:span
								warnings
								;
							Element:span
								use
							Element:span
								Net
							Element:span
								::
							Element:span
								Curl
							Element:span
								::
							Element:span
								Easy
							Element:span
								qw(/^CURLOPT_.*/)
								;;
							Element:span
								use
							Element:span
								JSON
								;
							Element:span
								use
							Element:span
								Data
							Element:span
								::
							Element:span
								Dumper
								;
							Element:span
								sub
							Element:span
								SendNotification
								{
							Element:span
								my
								(
							Element:span
								$url
								,
							Element:span
								$authorisation
								,
							Element:span
								$app_id
								,
							Element:span
								$contents
								)
							Element:span
								=
							Element:span
								@_
								;
							Element:span
								my
							Element:span
								$curl
							Element:span
								=
							Element:span
								Net
							Element:span
								::
							Element:span
								Curl
							Element:span
								::
							Element:span
								Easy
							Element:span
								->
							Element:span
								new
								;
							Element:span
								my
							Element:span
								$json
							Element:span
								=
							Element:span
								JSON
							Element:span
								->
							Element:span
								new
								();
							Element:span
								my
							Element:span
								$response_body
								;
							Element:span
								my
							Element:span
								$json_string
							Element:span
								=
							Element:span
								$json
							Element:span
								->
							Element:span
								encode
								({
							Element:span
								app_id
							Element:span
								=>
							Element:span
								$app_id
								,
							Element:span
								filters
							Element:span
								=>
								[ {
							Element:span
								"field"
							Element:span
								:
							Element:span
								"tag"
								,
							Element:span
								"key"
							Element:span
								:
							Element:span
								"level"
								,
							Element:span
								"relation"
							Element:span
								:
							Element:span
								"="
								,
							Element:span
								"value"
							Element:span
								:
							Element:span
								"10"
								}, {
							Element:span
								"operator"
							Element:span
								:
							Element:span
								"OR"
								}, {
							Element:span
								"field"
							Element:span
								:
							Element:span
								"amount_spent"
								,
							Element:span
								"relation"
							Element:span
								:
							Element:span
								">"
								,
							Element:span
								"value"
							Element:span
								:
							Element:span
								"0"
								} ],
							Element:span
								contents
							Element:span
								=>
								{
							Element:span
								en
							Element:span
								=>
							Element:span
								$contents
								} });
							Element:span
								$curl
							Element:span
								->
							Element:span
								setopt
								(
							Element:span
								CURLOPT_URL
								,
							Element:span
								$url
								);
							Element:span
								$curl
							Element:span
								->
							Element:span
								setopt
								(
							Element:span
								CURLOPT_SSL_VERIFYHOST
								,
							Element:span
								0
								);
							Element:span
								$curl
							Element:span
								->
							Element:span
								setopt
								(
							Element:span
								CURLOPT_SSL_VERIFYPEER
								,
							Element:span
								0
								);
							Element:span
								$curl
							Element:span
								->
							Element:span
								setopt
								(
							Element:span
								CURLOPT_HTTPHEADER
								, [
							Element:span
								'Content-Type: application/json; charset=utf-8'
								,
							Element:span
								"Authorization: Basic $authorisation"
								]);
							Element:span
								$curl
							Element:span
								->
							Element:span
								setopt
								(
							Element:span
								CURLOPT_POST
								,
							Element:span
								1
								);
							Element:span
								$curl
							Element:span
								->
							Element:span
								setopt
								(
							Element:span
								CURLOPT_POSTFIELDS
								,
							Element:span
								$json_string
								);
							Element:span
								$curl
							Element:span
								->
							Element:span
								setopt
								(
							Element:span
								CURLOPT_WRITEDATA
								, \
							Element:span
								$response_body
								);
							Element:span
								$curl
							Element:span
								->
							Element:span
								perform
								;
							Element:span
								print
							Element:span
								Dumper
								(
							Element:span
								$response_body
								); }
							Element:span
								SendNotification
								(
							Element:span
								"https://onesignal.com/api/v1/notifications"
								,
							Element:span
								"<< PUT YOUR REST API KEY HERE>>"
								,
							Element:span
								"<< PUT YOUR APP ID KEY HERE >>"
								,
							Element:span
								"Hello World"
								);
							Element:span
								exit
								(
							Element:span
								0
								);
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
							Element:span
								send
							Element:span
								=
							Element:span
								function
								(
							Element:span
								params
								) {
							Element:span
								var
							Element:span
								promise
							Element:span
								=
							Element:span
								new
							Element:span
								Parse
								.
							Element:span
								Promise
								();
							Element:span
								var
							Element:span
								jsonBody
							Element:span
								=
								{
							Element:span
								app_id
								:
							Element:span
								"5eb5a37e-b458-11e3-ac11-000c2940e62c"
								,
							Element:span
								filters
								: [ {
							Element:span
								"field"
								:
							Element:span
								"tag"
								,
							Element:span
								"key"
								:
							Element:span
								"level"
								,
							Element:span
								"relation"
								:
							Element:span
								"="
								,
							Element:span
								"value"
								:
							Element:span
								"10"
								}, {
							Element:span
								"operator"
								:
							Element:span
								"OR"
								}, {
							Element:span
								"field"
								:
							Element:span
								"amount_spent"
								,
							Element:span
								"relation"
								:
							Element:span
								">"
								,
							Element:span
								"value"
								:
							Element:span
								"0"
								} ],
							Element:span
								contents
								: {
							Element:span
								en
								:
							Element:span
								"English Message"
								},
							Element:span
								data
								: {
							Element:span
								foo
								:
							Element:span
								"bar"
								} };
							Element:span
								Parse
								.
							Element:span
								Cloud
								.
							Element:span
								httpRequest
								({
							Element:span
								method
								:
							Element:span
								"POST"
								,
							Element:span
								url
								:
							Element:span
								"https://onesignal.com/api/v1/notifications"
								,
							Element:span
								headers
								: {
							Element:span
								"Content-Type"
								:
							Element:span
								"application/json;charset=utf-8"
								,
							Element:span
								"Authorization"
								:
							Element:span
								"Basic NGEwMGZmMjItY2NkNy0xMWUzLTk5ZDUtMDAwYzI5NDBlNjJj"
								},
							Element:span
								body
								:
							Element:span
								JSON
								.
							Element:span
								stringify
								(
							Element:span
								jsonBody
								) }).
							Element:span
								then
								(
							Element:span
								function
								(
							Element:span
								httpResponse
								) {
							Element:span
								promise
								.
							Element:span
								resolve
								(
							Element:span
								httpResponse
								) },
							Element:span
								function
								(
							Element:span
								httpResponse
								) {
							Element:span
								promise
								.
							Element:span
								reject
								(
							Element:span
								httpResponse
								); });
							Element:span
								return
							Element:span
								promise
								; };
							Element:span
								exports
								.
							Element:span
								send
							Element:span
								=
							Element:span
								send
								;
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
							Element:span
								function
							Element:span
								SendNewNotification
								() {
							Element:span
								var
							Element:span
								jsonBody
							Element:span
								=
								{
							Element:span
								app_id
								:
							Element:span
								"5eb5a37e-b458-11e3-ac11-000c2940e62c"
								,
							Element:span
								filters
								: [ {
							Element:span
								"field"
								:
							Element:span
								"tag"
								,
							Element:span
								"key"
								:
							Element:span
								"level"
								,
							Element:span
								"relation"
								:
							Element:span
								"="
								,
							Element:span
								"value"
								:
							Element:span
								"10"
								}, {
							Element:span
								"operator"
								:
							Element:span
								"OR"
								}, {
							Element:span
								"field"
								:
							Element:span
								"amount_spent"
								,
							Element:span
								"relation"
								:
							Element:span
								">"
								,
							Element:span
								"value"
								:
							Element:span
								"0"
								} ],
							Element:span
								contents
								: {
							Element:span
								en
								:
							Element:span
								"English Message"
								}, };
							Element:span
								var
							Element:span
								promise
							Element:span
								=
							Element:span
								Spark
								.
							Element:span
								getHttp
								(
							Element:span
								"https://onesignal.com/api/v1/notifications"
								).
							Element:span
								setHeaders
								({
							Element:span
								"Content-Type"
								:
							Element:span
								"application/json;charset=utf-8"
								,
							Element:span
								"Authorization"
								:
							Element:span
								"Basic NGEwMGZmMjItY2NkNy0xMWUzLTk5ZDUtMDAwYzI5NDBlNjJj"
								}).
							Element:span
								postJson
								(
							Element:span
								jsonBody
								);
							Element:span
								return
							Element:span
								promise
								; }
							Element:span
								var
							Element:span
								response
							Element:span
								=
							Element:span
								SendNewNotification
								().
							Element:span
								getResponseJson
								();
							Element:span
								Spark
								.
							Element:span
								setScriptData
								(
							Element:span
								"response"
								,
							Element:span
								response
								)
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
							Element:span
								try
								{
							Element:span
								String
							Element:span
								jsonResponse
								;
							Element:span
								URL
							Element:span
								url
							Element:span
								=
							Element:span
								new
							Element:span
								URL
								(
							Element:span
								"https://onesignal.com/api/v1/notifications"
								);
							Element:span
								HttpURLConnection
							Element:span
								con
							Element:span
								=
								(
							Element:span
								HttpURLConnection
								)
							Element:span
								url
								.
							Element:span
								openConnection
								();
							Element:span
								con
								.
							Element:span
								setUseCaches
								(
							Element:span
								false
								);
							Element:span
								con
								.
							Element:span
								setDoOutput
								(
							Element:span
								true
								);
							Element:span
								con
								.
							Element:span
								setDoInput
								(
							Element:span
								true
								);
							Element:span
								con
								.
							Element:span
								setRequestProperty
								(
							Element:span
								"Content-Type"
								,
							Element:span
								"application/json; charset=UTF-8"
								);
							Element:span
								con
								.
							Element:span
								setRequestProperty
								(
							Element:span
								"Authorization"
								,
							Element:span
								"Basic NGEwMGZmMjItY2NkNy0xMWUzLTk5ZDUtMDAwYzI5NDBlNjJj"
								);
							Element:span
								con
								.
							Element:span
								setRequestMethod
								(
							Element:span
								"POST"
								);
							Element:span
								String
							Element:span
								strJsonBody
							Element:span
								=
							Element:span
								"{"
							Element:span
								+
							Element:span
								"\"app_id\": \"5eb5a37e-b458-11e3-ac11-000c2940e62c\","
							Element:span
								+
							Element:span
								"\"filters\": [{\"field\": \"tag\", \"key\": \"level\", \"relation\": \">\", \"value\": \"10\"},{\"operator\": \"OR\"},{\"field\": \"amount_spent\", \"relation\": \">\",\"value\": \"0\"}],"
							Element:span
								+
							Element:span
								"\"data\": {\"foo\": \"bar\"},"
							Element:span
								+
							Element:span
								"\"contents\": {\"en\": \"English Message\"}"
							Element:span
								+
							Element:span
								"}"
								;
							Element:span
								System
								.
							Element:span
								out
								.
							Element:span
								println
								(
							Element:span
								"strJsonBody:\n"
							Element:span
								+
							Element:span
								strJsonBody
								);
							Element:span
								byte
								[]
							Element:span
								sendBytes
							Element:span
								=
							Element:span
								strJsonBody
								.
							Element:span
								getBytes
								(
							Element:span
								"UTF-8"
								);
							Element:span
								con
								.
							Element:span
								setFixedLengthStreamingMode
								(
							Element:span
								sendBytes
								.
							Element:span
								length
								);
							Element:span
								OutputStream
							Element:span
								outputStream
							Element:span
								=
							Element:span
								con
								.
							Element:span
								getOutputStream
								();
							Element:span
								outputStream
								.
							Element:span
								write
								(
							Element:span
								sendBytes
								);
							Element:span
								int
							Element:span
								httpResponse
							Element:span
								=
							Element:span
								con
								.
							Element:span
								getResponseCode
								();
							Element:span
								System
								.
							Element:span
								out
								.
							Element:span
								println
								(
							Element:span
								"httpResponse: "
							Element:span
								+
							Element:span
								httpResponse
								);
							Element:span
								if
								(
							Element:span
								httpResponse
							Element:span
								>=
							Element:span
								HttpURLConnection
								.
							Element:span
								HTTP_OK
							Element:span
								&&
							Element:span
								httpResponse
							Element:span
								<
							Element:span
								HttpURLConnection
								.
							Element:span
								HTTP_BAD_REQUEST
								) {
							Element:span
								Scanner
							Element:span
								scanner
							Element:span
								=
							Element:span
								new
							Element:span
								Scanner
								(
							Element:span
								con
								.
							Element:span
								getInputStream
								(),
							Element:span
								"UTF-8"
								);
							Element:span
								jsonResponse
							Element:span
								=
							Element:span
								scanner
								.
							Element:span
								useDelimiter
								(
							Element:span
								"\\A"
								).
							Element:span
								hasNext
								()
							Element:span
								?
							Element:span
								scanner
								.
							Element:span
								next
								() :
							Element:span
								""
								;
							Element:span
								scanner
								.
							Element:span
								close
								(); }
							Element:span
								else
								{
							Element:span
								Scanner
							Element:span
								scanner
							Element:span
								=
							Element:span
								new
							Element:span
								Scanner
								(
							Element:span
								con
								.
							Element:span
								getErrorStream
								(),
							Element:span
								"UTF-8"
								);
							Element:span
								jsonResponse
							Element:span
								=
							Element:span
								scanner
								.
							Element:span
								useDelimiter
								(
							Element:span
								"\\A"
								).
							Element:span
								hasNext
								()
							Element:span
								?
							Element:span
								scanner
								.
							Element:span
								next
								() :
							Element:span
								""
								;
							Element:span
								scanner
								.
							Element:span
								close
								(); }
							Element:span
								System
								.
							Element:span
								out
								.
							Element:span
								println
								(
							Element:span
								"jsonResponse:\n"
							Element:span
								+
							Element:span
								jsonResponse
								); }
							Element:span
								catch
								(
							Element:span
								Throwable
							Element:span
								t
								) {
							Element:span
								t
								.
							Element:span
								printStackTrace
								(); }
						Node:
						(type) c
						(layer)2
							Element:h3
								Send based on OneSignal PlayerIds - Create notification
							Element:a
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:a
								Shell
							Element:li
							Element:a
								JSON
							Element:li
							Element:a
								PHP
							Element:li
							Element:a
								C# (.NET standard)
							Element:li
							Element:a
								C# (ASP.NET)
							Element:li
							Element:a
								Ruby (Rails)
							Element:li
							Element:a
								Python
							Element:li
							Element:a
								NodeJS
							Element:li
							Element:a
								Perl
							Element:li
							Element:a
								Parse Cloud
							Element:li
							Element:a
								GameSparks
							Element:li
							Element:a
								Java
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
							Element:span
								curl
							Element:span
								--include
								\
							Element:span
								--request
								POST \
							Element:span
								--header
							Element:span
								"Content-Type: application/json; charset=utf-8"
								\
							Element:span
								--header
							Element:span
								"Authorization: Basic NGEwMGZmMjItY2NkNy0xMWUzLTk5ZDUtMDAwYzI5NDBlNjJj"
								\
							Element:span
								--data-binary
							Element:span
								"{\"app_id\": \"5eb5a37e-b458-11e3-ac11-000c2940e62c\",
								\"contents\": {\"en\": \"English Message\"}, \"include_player_ids\": [\"6392d91a-b206-4b7b-a620-cd68e32c3a76\",\"76ece62b-bcfe-468c-8a78-839aeaa8c5fa\",\"8e0f21fa-9a5a-4ae7-a9a6-ca1f24294b86\"]}
							Element:span
								" \
							Element:span
								https://onesignal.com/api/v1/notifications
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
								{
							Element:span
								"app_id"
								:
							Element:span
								"5eb5a37e-b458-11e3-ac11-000c2940e62c"
								,
							Element:span
								"include_player_ids"
								: [
							Element:span
								"6392d91a-b206-4b7b-a620-cd68e32c3a76"
								,
							Element:span
								"76ece62b-bcfe-468c-8a78-839aeaa8c5fa"
								,
							Element:span
								"8e0f21fa-9a5a-4ae7-a9a6-ca1f24294b86"
								],
							Element:span
								"data"
								: {
							Element:span
								"foo"
								:
							Element:span
								"bar"
								},
							Element:span
								"contents"
								: {
							Element:span
								"en"
								:
							Element:span
								"English Message"
								} }
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
							Element:span
								<?
							Element:span
								PHP
							Element:span
								function
							Element:span
								sendMessage
								(){
							Element:span
								$content
							Element:span
								=
							Element:span
								array
								(
							Element:span
								"en"
							Element:span
								=>
							Element:span
								'English Message'
								);
							Element:span
								$fields
							Element:span
								=
							Element:span
								array
								(
							Element:span
								'app_id'
							Element:span
								=>
							Element:span
								"5eb5a37e-b458-11e3-ac11-000c2940e62c"
								,
							Element:span
								'include_player_ids'
							Element:span
								=>
							Element:span
								array
								(
							Element:span
								"6392d91a-b206-4b7b-a620-cd68e32c3a76"
								,
							Element:span
								"76ece62b-bcfe-468c-8a78-839aeaa8c5fa"
								,
							Element:span
								"8e0f21fa-9a5a-4ae7-a9a6-ca1f24294b86"
								),
							Element:span
								'data'
							Element:span
								=>
							Element:span
								array
								(
							Element:span
								"foo"
							Element:span
								=>
							Element:span
								"bar"
								),
							Element:span
								'contents'
							Element:span
								=>
							Element:span
								$content
								);
							Element:span
								$fields
							Element:span
								=
							Element:span
								json_encode
								(
							Element:span
								$fields
								);
							Element:span
								print
								(
							Element:span
								"\nJSON sent:\n"
								);
							Element:span
								print
								(
							Element:span
								$fields
								);
							Element:span
								$ch
							Element:span
								=
							Element:span
								curl_init
								();
							Element:span
								curl_setopt
								(
							Element:span
								$ch
								,
							Element:span
								CURLOPT_URL
								,
							Element:span
								"https://onesignal.com/api/v1/notifications"
								);
							Element:span
								curl_setopt
								(
							Element:span
								$ch
								,
							Element:span
								CURLOPT_HTTPHEADER
								,
							Element:span
								array
								(
							Element:span
								'Content-Type: application/json; charset=utf-8'
								,
							Element:span
								'Authorization: Basic NGEwMGZmMjItY2NkNy0xMWUzLTk5ZDUtMDAwYzI5NDBlNjJj'
								));
							Element:span
								curl_setopt
								(
							Element:span
								$ch
								,
							Element:span
								CURLOPT_RETURNTRANSFER
								,
							Element:span
								TRUE
								);
							Element:span
								curl_setopt
								(
							Element:span
								$ch
								,
							Element:span
								CURLOPT_HEADER
								,
							Element:span
								FALSE
								);
							Element:span
								curl_setopt
								(
							Element:span
								$ch
								,
							Element:span
								CURLOPT_POST
								,
							Element:span
								TRUE
								);
							Element:span
								curl_setopt
								(
							Element:span
								$ch
								,
							Element:span
								CURLOPT_POSTFIELDS
								,
							Element:span
								$fields
								);
							Element:span
								curl_setopt
								(
							Element:span
								$ch
								,
							Element:span
								CURLOPT_SSL_VERIFYPEER
								,
							Element:span
								FALSE
								);
							Element:span
								$response
							Element:span
								=
							Element:span
								curl_exec
								(
							Element:span
								$ch
								);
							Element:span
								curl_close
								(
							Element:span
								$ch
								);
							Element:span
								return
							Element:span
								$response
								; }
							Element:span
								$response
							Element:span
								=
							Element:span
								sendMessage
								();
							Element:span
								$return
								[
							Element:span
								"allresponses"
								]
							Element:span
								=
							Element:span
								$response
								;
							Element:span
								$return
							Element:span
								=
							Element:span
								json_encode
								(
							Element:span
								$return
								);
							Element:span
								print
								(
							Element:span
								"\n\nJSON received:\n"
								);
							Element:span
								print
								(
							Element:span
								$return
								);
							Element:span
								print
								(
							Element:span
								"\n"
								);
							Element:span
								?>
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
							Element:span
								using
							Element:span
								System
								.
							Element:span
								IO
								;
							Element:span
								using
							Element:span
								System
								.
							Element:span
								Net
								;
							Element:span
								using
							Element:span
								System
								.
							Element:span
								Text
								;
							Element:span
								var
							Element:span
								request
							Element:span
								=
							Element:span
								WebRequest
								.
							Element:span
								Create
								(
							Element:span
								"https://onesignal.com/api/v1/notifications"
								)
							Element:span
								as
							Element:span
								HttpWebRequest
								;
							Element:span
								request
								.
							Element:span
								KeepAlive
							Element:span
								=
							Element:span
								true
								;
							Element:span
								request
								.
							Element:span
								Method
							Element:span
								=
							Element:span
								"POST"
								;
							Element:span
								request
								.
							Element:span
								ContentType
							Element:span
								=
							Element:span
								"application/json; charset=utf-8"
								;
							Element:span
								request
								.
							Element:span
								Headers
								.
							Element:span
								Add
								(
							Element:span
								"authorization"
								,
							Element:span
								"Basic NGEwMGZmMjItY2NkNy0xMWUzLTk5ZDUtMDAwYzI5NDBlNjJj"
								);
							Element:span
								byte
								[]
							Element:span
								byteArray
							Element:span
								=
							Element:span
								Encoding
								.
							Element:span
								UTF8
								.
							Element:span
								GetBytes
								(
							Element:span
								"{"
							Element:span
								+
							Element:span
								"\"app_id\": \"5eb5a37e-b458-11e3-ac11-000c2940e62c\","
							Element:span
								+
							Element:span
								"\"contents\": {\"en\": \"English Message\"},"
							Element:span
								+
							Element:span
								"\"include_player_ids\": [\"6392d91a-b206-4b7b-a620-cd68e32c3a76\",\"76ece62b-bcfe-468c-8a78-839aeaa8c5fa\",\"8e0f21fa-9a5a-4ae7-a9a6-ca1f24294b86\"]}"
								);
							Element:span
								string
							Element:span
								responseContent
							Element:span
								=
							Element:span
								null
								;
							Element:span
								try
								{
							Element:span
								using
								(
							Element:span
								var
							Element:span
								writer
							Element:span
								=
							Element:span
								request
								.
							Element:span
								GetRequestStream
								()) {
							Element:span
								writer
								.
							Element:span
								Write
								(
							Element:span
								byteArray
								,
							Element:span
								0
								,
							Element:span
								byteArray
								.
							Element:span
								Length
								); }
							Element:span
								using
								(
							Element:span
								var
							Element:span
								response
							Element:span
								=
							Element:span
								request
								.
							Element:span
								GetResponse
								()
							Element:span
								as
							Element:span
								HttpWebResponse
								) {
							Element:span
								using
								(
							Element:span
								var
							Element:span
								reader
							Element:span
								=
							Element:span
								new
							Element:span
								StreamReader
								(
							Element:span
								response
								.
							Element:span
								GetResponseStream
								())) {
							Element:span
								responseContent
							Element:span
								=
							Element:span
								reader
								.
							Element:span
								ReadToEnd
								(); } } }
							Element:span
								catch
								(
							Element:span
								WebException
							Element:span
								ex
								) {
							Element:span
								System
								.
							Element:span
								Diagnostics
								.
							Element:span
								Debug
								.
							Element:span
								WriteLine
								(
							Element:span
								ex
								.
							Element:span
								Message
								);
							Element:span
								System
								.
							Element:span
								Diagnostics
								.
							Element:span
								Debug
								.
							Element:span
								WriteLine
								(
							Element:span
								new
							Element:span
								StreamReader
								(
							Element:span
								ex
								.
							Element:span
								Response
								.
							Element:span
								GetResponseStream
								()).
							Element:span
								ReadToEnd
								()); }
							Element:span
								System
								.
							Element:span
								Diagnostics
								.
							Element:span
								Debug
								.
							Element:span
								WriteLine
								(
							Element:span
								responseContent
								);
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
							Element:span
								using
							Element:span
								System
								.
							Element:span
								IO
								;
							Element:span
								using
							Element:span
								System
								.
							Element:span
								Net
								;
							Element:span
								using
							Element:span
								System
								.
							Element:span
								Text
								;
							Element:span
								var
							Element:span
								request
							Element:span
								=
							Element:span
								WebRequest
								.
							Element:span
								Create
								(
							Element:span
								"https://onesignal.com/api/v1/notifications"
								)
							Element:span
								as
							Element:span
								HttpWebRequest
								;
							Element:span
								request
								.
							Element:span
								KeepAlive
							Element:span
								=
							Element:span
								true
								;
							Element:span
								request
								.
							Element:span
								Method
							Element:span
								=
							Element:span
								"POST"
								;
							Element:span
								request
								.
							Element:span
								ContentType
							Element:span
								=
							Element:span
								"application/json; charset=utf-8"
								;
							Element:span
								request
								.
							Element:span
								Headers
								.
							Element:span
								Add
								(
							Element:span
								"authorization"
								,
							Element:span
								"Basic NGEwMGZmMjItY2NkNy0xMWUzLTk5ZDUtMDAwYzI5NDBlNjJj"
								);
							Element:span
								var
							Element:span
								serializer
							Element:span
								=
							Element:span
								new
							Element:span
								JavaScriptSerializer
								();
							Element:span
								var
							Element:span
								obj
							Element:span
								=
							Element:span
								new
								{
							Element:span
								app_id
							Element:span
								=
							Element:span
								"5eb5a37e-b458-11e3-ac11-000c2940e62c"
								,
							Element:span
								contents
							Element:span
								=
							Element:span
								new
								{
							Element:span
								en
							Element:span
								=
							Element:span
								"English Message"
								},
							Element:span
								include_player_ids
							Element:span
								=
							Element:span
								new
							Element:span
								string
								[] {
							Element:span
								"6392d91a-b206-4b7b-a620-cd68e32c3a76"
								,
							Element:span
								"76ece62b-bcfe-468c-8a78-839aeaa8c5fa"
								,
							Element:span
								"8e0f21fa-9a5a-4ae7-a9a6-ca1f24294b86"
								} };
							Element:span
								var
							Element:span
								param
							Element:span
								=
							Element:span
								serializer
								.
							Element:span
								Serialize
								(
							Element:span
								obj
								);
							Element:span
								byte
								[]
							Element:span
								byteArray
							Element:span
								=
							Element:span
								Encoding
								.
							Element:span
								UTF8
								.
							Element:span
								GetBytes
								(
							Element:span
								param
								);
							Element:span
								string
							Element:span
								responseContent
							Element:span
								=
							Element:span
								null
								;
							Element:span
								try
								{
							Element:span
								using
								(
							Element:span
								var
							Element:span
								writer
							Element:span
								=
							Element:span
								request
								.
							Element:span
								GetRequestStream
								()) {
							Element:span
								writer
								.
							Element:span
								Write
								(
							Element:span
								byteArray
								,
							Element:span
								0
								,
							Element:span
								byteArray
								.
							Element:span
								Length
								); }
							Element:span
								using
								(
							Element:span
								var
							Element:span
								response
							Element:span
								=
							Element:span
								request
								.
							Element:span
								GetResponse
								()
							Element:span
								as
							Element:span
								HttpWebResponse
								) {
							Element:span
								using
								(
							Element:span
								var
							Element:span
								reader
							Element:span
								=
							Element:span
								new
							Element:span
								StreamReader
								(
							Element:span
								response
								.
							Element:span
								GetResponseStream
								())) {
							Element:span
								responseContent
							Element:span
								=
							Element:span
								reader
								.
							Element:span
								ReadToEnd
								(); } } }
							Element:span
								catch
								(
							Element:span
								WebException
							Element:span
								ex
								) {
							Element:span
								System
								.
							Element:span
								Diagnostics
								.
							Element:span
								Debug
								.
							Element:span
								WriteLine
								(
							Element:span
								ex
								.
							Element:span
								Message
								);
							Element:span
								System
								.
							Element:span
								Diagnostics
								.
							Element:span
								Debug
								.
							Element:span
								WriteLine
								(
							Element:span
								new
							Element:span
								StreamReader
								(
							Element:span
								ex
								.
							Element:span
								Response
								.
							Element:span
								GetResponseStream
								()).
							Element:span
								ReadToEnd
								()); }
							Element:span
								System
								.
							Element:span
								Diagnostics
								.
							Element:span
								Debug
								.
							Element:span
								WriteLine
								(
							Element:span
								responseContent
								);
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
							Element:span
								params
							Element:span
								=
								{
							Element:span
								"app_id"
							Element:span
								=>
							Element:span
								"5eb5a37e-b458-11e3-ac11-000c2940e62c"
								,
							Element:span
								"contents"
							Element:span
								=>
								{
							Element:span
								"en"
							Element:span
								=>
							Element:span
								"English Message"
								},
							Element:span
								"include_player_ids"
							Element:span
								=>
								[
							Element:span
								"6392d91a-b206-4b7b-a620-cd68e32c3a76"
								,
							Element:span
								"76ece62b-bcfe-468c-8a78-839aeaa8c5fa"
								,
							Element:span
								"8e0f21fa-9a5a-4ae7-a9a6-ca1f24294b86"
								] }
							Element:span
								uri
							Element:span
								=
							Element:span
								URI
							Element:span
								.
							Element:span
								parse
								(
							Element:span
								'https://onesignal.com/api/v1/notifications'
								)
							Element:span
								http
							Element:span
								=
							Element:span
								Net::HTTP
							Element:span
								.
							Element:span
								new
								(
							Element:span
								uri
							Element:span
								.
							Element:span
								host
								,
							Element:span
								uri
							Element:span
								.
							Element:span
								port
								)
							Element:span
								http
							Element:span
								.
							Element:span
								use_ssl
							Element:span
								=
							Element:span
								true
							Element:span
								request
							Element:span
								=
							Element:span
								Net::HTTP::
							Element:span
								Post
							Element:span
								.
							Element:span
								new
								(
							Element:span
								uri
							Element:span
								.
							Element:span
								path
								,
							Element:span
								'Content-Type'
							Element:span
								=>
							Element:span
								'application/json;charset=utf-8'
								,
							Element:span
								'Authorization'
							Element:span
								=>
							Element:span
								"Basic NGEwMGZmMjItY2NkNy0xMWUzLTk5ZDUtMDAwYzI5NDBlNjJj"
								)
							Element:span
								request
							Element:span
								.
							Element:span
								body
							Element:span
								=
							Element:span
								params
							Element:span
								.
							Element:span
								as_json
							Element:span
								.
							Element:span
								to_json
							Element:span
								response
							Element:span
								=
							Element:span
								http
							Element:span
								.
							Element:span
								request
								(
							Element:span
								request
								)
							Element:span
								puts
							Element:span
								response
							Element:span
								.
							Element:span
								body
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
							Element:span
								import
							Element:span
								requests
							Element:span
								import
							Element:span
								json
							Element:span
								header
								= {
							Element:span
								"Content-Type"
								:
							Element:span
								"application/json; charset=utf-8"
								,
							Element:span
								"Authorization"
								:
							Element:span
								"Basic NGEwMGZmMjItY2NkNy0xMWUzLTk5ZDUtMDAwYzI5NDBlNjJj"
								}
							Element:span
								payload
								= {
							Element:span
								"app_id"
								:
							Element:span
								"5eb5a37e-b458-11e3-ac11-000c2940e62c"
								,
							Element:span
								"include_player_ids"
								: [
							Element:span
								"6392d91a-b206-4b7b-a620-cd68e32c3a76"
								,
							Element:span
								"76ece62b-bcfe-468c-8a78-839aeaa8c5fa"
								,
							Element:span
								"8e0f21fa-9a5a-4ae7-a9a6-ca1f24294b86"
								],
							Element:span
								"contents"
								: {
							Element:span
								"en"
								:
							Element:span
								"English Message"
								}
							Element:span
								}
							Element:span
								req
								=
							Element:span
								requests
								.
							Element:span
								post
								(
							Element:span
								"https://onesignal.com/api/v1/notifications"
								,
							Element:span
								headers
								=
							Element:span
								header
								,
							Element:span
								data
								=
							Element:span
								json
								.
							Element:span
								dumps
								(
							Element:span
								payload
								))
							Element:span
								print
								(
							Element:span
								req
								.
							Element:span
								status_code
								,
							Element:span
								req
								.
							Element:span
								reason
								)
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
							Element:span
								var
							Element:span
								sendNotification
							Element:span
								=
							Element:span
								function
								(
							Element:span
								data
								) {
							Element:span
								var
							Element:span
								headers
							Element:span
								=
								{
							Element:span
								"Content-Type"
								:
							Element:span
								"application/json; charset=utf-8"
								,
							Element:span
								"Authorization"
								:
							Element:span
								"Basic NGEwMGZmMjItY2NkNy0xMWUzLTk5ZDUtMDAwYzI5NDBlNjJj"
								};
							Element:span
								var
							Element:span
								options
							Element:span
								=
								{
							Element:span
								host
								:
							Element:span
								"onesignal.com"
								,
							Element:span
								port
								:
							Element:span
								443
								,
							Element:span
								path
								:
							Element:span
								"/api/v1/notifications"
								,
							Element:span
								method
								:
							Element:span
								"POST"
								,
							Element:span
								headers
								:
							Element:span
								headers
								};
							Element:span
								var
							Element:span
								https
							Element:span
								=
							Element:span
								require
								(
							Element:span
								'https'
								);
							Element:span
								var
							Element:span
								req
							Element:span
								=
							Element:span
								https
								.
							Element:span
								request
								(
							Element:span
								options
								,
							Element:span
								function
								(
							Element:span
								res
								) {
							Element:span
								res
								.
							Element:span
								on
								(
							Element:span
								'data'
								,
							Element:span
								function
								(
							Element:span
								data
								) {
							Element:span
								console
								.
							Element:span
								log
								(
							Element:span
								"Response:"
								);
							Element:span
								console
								.
							Element:span
								log
								(
							Element:span
								JSON
								.
							Element:span
								parse
								(
							Element:span
								data
								)); }); });
							Element:span
								req
								.
							Element:span
								on
								(
							Element:span
								'error'
								,
							Element:span
								function
								(
							Element:span
								e
								) {
							Element:span
								console
								.
							Element:span
								log
								(
							Element:span
								"ERROR:"
								);
							Element:span
								console
								.
							Element:span
								log
								(
							Element:span
								e
								); });
							Element:span
								req
								.
							Element:span
								write
								(
							Element:span
								JSON
								.
							Element:span
								stringify
								(
							Element:span
								data
								));
							Element:span
								req
								.
							Element:span
								end
								(); };
							Element:span
								var
							Element:span
								message
							Element:span
								=
								{
							Element:span
								app_id
								:
							Element:span
								"5eb5a37e-b458-11e3-ac11-000c2940e62c"
								,
							Element:span
								contents
								: {
							Element:span
								"en"
								:
							Element:span
								"English Message"
								},
							Element:span
								include_player_ids
								: [
							Element:span
								"6392d91a-b206-4b7b-a620-cd68e32c3a76"
								,
							Element:span
								"76ece62b-bcfe-468c-8a78-839aeaa8c5fa"
								,
							Element:span
								"8e0f21fa-9a5a-4ae7-a9a6-ca1f24294b86"
								] };
							Element:span
								sendNotification
								(
							Element:span
								message
								);
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
							Element:span
								#!/usr/bin/perl -w
							Element:span
								use
							Element:span
								strict
								;
							Element:span
								use
							Element:span
								warnings
								;
							Element:span
								use
							Element:span
								Net
							Element:span
								::
							Element:span
								Curl
							Element:span
								::
							Element:span
								Easy
							Element:span
								qw(/^CURLOPT_.*/)
								;;
							Element:span
								use
							Element:span
								JSON
								;
							Element:span
								use
							Element:span
								Data
							Element:span
								::
							Element:span
								Dumper
								;
							Element:span
								sub
							Element:span
								SendNotification
								{
							Element:span
								my
								(
							Element:span
								$url
								,
							Element:span
								$authorisation
								,
							Element:span
								$app_id
								,
							Element:span
								$contents
								)
							Element:span
								=
							Element:span
								@_
								;
							Element:span
								my
							Element:span
								$curl
							Element:span
								=
							Element:span
								Net
							Element:span
								::
							Element:span
								Curl
							Element:span
								::
							Element:span
								Easy
							Element:span
								->
							Element:span
								new
								;
							Element:span
								my
							Element:span
								$json
							Element:span
								=
							Element:span
								JSON
							Element:span
								->
							Element:span
								new
								();
							Element:span
								my
							Element:span
								$response_body
								;
							Element:span
								my
							Element:span
								$json_string
							Element:span
								=
							Element:span
								$json
							Element:span
								->
							Element:span
								encode
								({
							Element:span
								app_id
							Element:span
								=>
							Element:span
								$app_id
								,
							Element:span
								include_player_ids
							Element:span
								=>
								[
							Element:span
								"6392d91a-b206-4b7b-a620-cd68e32c3a76"
								,
							Element:span
								"76ece62b-bcfe-468c-8a78-839aeaa8c5fa"
								,
							Element:span
								"8e0f21fa-9a5a-4ae7-a9a6-ca1f24294b86"
								],
							Element:span
								contents
							Element:span
								=>
								{
							Element:span
								en
							Element:span
								=>
							Element:span
								$contents
								} });
							Element:span
								$curl
							Element:span
								->
							Element:span
								setopt
								(
							Element:span
								CURLOPT_URL
								,
							Element:span
								$url
								);
							Element:span
								$curl
							Element:span
								->
							Element:span
								setopt
								(
							Element:span
								CURLOPT_SSL_VERIFYHOST
								,
							Element:span
								0
								);
							Element:span
								$curl
							Element:span
								->
							Element:span
								setopt
								(
							Element:span
								CURLOPT_SSL_VERIFYPEER
								,
							Element:span
								0
								);
							Element:span
								$curl
							Element:span
								->
							Element:span
								setopt
								(
							Element:span
								CURLOPT_HTTPHEADER
								, [
							Element:span
								'Content-Type: application/json; charset=utf-8'
								,
							Element:span
								"Authorization: Basic $authorisation"
								]);
							Element:span
								$curl
							Element:span
								->
							Element:span
								setopt
								(
							Element:span
								CURLOPT_POST
								,
							Element:span
								1
								);
							Element:span
								$curl
							Element:span
								->
							Element:span
								setopt
								(
							Element:span
								CURLOPT_POSTFIELDS
								,
							Element:span
								$json_string
								);
							Element:span
								$curl
							Element:span
								->
							Element:span
								setopt
								(
							Element:span
								CURLOPT_WRITEDATA
								, \
							Element:span
								$response_body
								);
							Element:span
								$curl
							Element:span
								->
							Element:span
								perform
								;
							Element:span
								print
							Element:span
								Dumper
								(
							Element:span
								$response_body
								); }
							Element:span
								SendNotification
								(
							Element:span
								"https://onesignal.com/api/v1/notifications"
								,
							Element:span
								"<< PUT YOUR REST API KEY HERE>>"
								,
							Element:span
								"<< PUT YOUR APP ID KEY HERE >>"
								,
							Element:span
								"Hello World"
								);
							Element:span
								exit
								(
							Element:span
								0
								);
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
							Element:span
								send
							Element:span
								=
							Element:span
								function
								(
							Element:span
								params
								) {
							Element:span
								var
							Element:span
								promise
							Element:span
								=
							Element:span
								new
							Element:span
								Parse
								.
							Element:span
								Promise
								();
							Element:span
								var
							Element:span
								jsonBody
							Element:span
								=
								{
							Element:span
								app_id
								:
							Element:span
								"5eb5a37e-b458-11e3-ac11-000c2940e62c"
								,
							Element:span
								include_player_ids
								: [
							Element:span
								"6392d91a-b206-4b7b-a620-cd68e32c3a76"
								,
							Element:span
								"76ece62b-bcfe-468c-8a78-839aeaa8c5fa"
								,
							Element:span
								"8e0f21fa-9a5a-4ae7-a9a6-ca1f24294b86"
								],
							Element:span
								contents
								: {
							Element:span
								en
								:
							Element:span
								"English Message"
								},
							Element:span
								data
								: {
							Element:span
								foo
								:
							Element:span
								"bar"
								} };
							Element:span
								Parse
								.
							Element:span
								Cloud
								.
							Element:span
								httpRequest
								({
							Element:span
								method
								:
							Element:span
								"POST"
								,
							Element:span
								url
								:
							Element:span
								"https://onesignal.com/api/v1/notifications"
								,
							Element:span
								headers
								: {
							Element:span
								"Content-Type"
								:
							Element:span
								"application/json;charset=utf-8"
								,
							Element:span
								"Authorization"
								:
							Element:span
								"Basic NGEwMGZmMjItY2NkNy0xMWUzLTk5ZDUtMDAwYzI5NDBlNjJj"
								},
							Element:span
								body
								:
							Element:span
								JSON
								.
							Element:span
								stringify
								(
							Element:span
								jsonBody
								) }).
							Element:span
								then
								(
							Element:span
								function
								(
							Element:span
								httpResponse
								) {
							Element:span
								promise
								.
							Element:span
								resolve
								(
							Element:span
								httpResponse
								) },
							Element:span
								function
								(
							Element:span
								httpResponse
								) {
							Element:span
								promise
								.
							Element:span
								reject
								(
							Element:span
								httpResponse
								); });
							Element:span
								return
							Element:span
								promise
								; };
							Element:span
								exports
								.
							Element:span
								send
							Element:span
								=
							Element:span
								send
								;
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
							Element:span
								function
							Element:span
								SendNewNotification
								() {
							Element:span
								var
							Element:span
								jsonBody
							Element:span
								=
								{
							Element:span
								app_id
								:
							Element:span
								"5eb5a37e-b458-11e3-ac11-000c2940e62c"
								,
							Element:span
								include_player_ids
								: [
							Element:span
								"6392d91a-b206-4b7b-a620-cd68e32c3a76"
								,
							Element:span
								"76ece62b-bcfe-468c-8a78-839aeaa8c5fa"
								,
							Element:span
								"8e0f21fa-9a5a-4ae7-a9a6-ca1f24294b86"
								],
							Element:span
								contents
								: {
							Element:span
								en
								:
							Element:span
								"English Message"
								}, };
							Element:span
								var
							Element:span
								promise
							Element:span
								=
							Element:span
								Spark
								.
							Element:span
								getHttp
								(
							Element:span
								"https://onesignal.com/api/v1/notifications"
								).
							Element:span
								setHeaders
								({
							Element:span
								"Content-Type"
								:
							Element:span
								"application/json;charset=utf-8"
								,
							Element:span
								"Authorization"
								:
							Element:span
								"Basic NGEwMGZmMjItY2NkNy0xMWUzLTk5ZDUtMDAwYzI5NDBlNjJj"
								}).
							Element:span
								postJson
								(
							Element:span
								jsonBody
								);
							Element:span
								return
							Element:span
								promise
								; }
							Element:span
								var
							Element:span
								response
							Element:span
								=
							Element:span
								SendNewNotification
								().
							Element:span
								getResponseJson
								();
							Element:span
								Spark
								.
							Element:span
								setScriptData
								(
							Element:span
								"response"
								,
							Element:span
								response
								)
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
							Element:span
								try
								{
							Element:span
								String
							Element:span
								jsonResponse
								;
							Element:span
								URL
							Element:span
								url
							Element:span
								=
							Element:span
								new
							Element:span
								URL
								(
							Element:span
								"https://onesignal.com/api/v1/notifications"
								);
							Element:span
								HttpURLConnection
							Element:span
								con
							Element:span
								=
								(
							Element:span
								HttpURLConnection
								)
							Element:span
								url
								.
							Element:span
								openConnection
								();
							Element:span
								con
								.
							Element:span
								setUseCaches
								(
							Element:span
								false
								);
							Element:span
								con
								.
							Element:span
								setDoOutput
								(
							Element:span
								true
								);
							Element:span
								con
								.
							Element:span
								setDoInput
								(
							Element:span
								true
								);
							Element:span
								con
								.
							Element:span
								setRequestProperty
								(
							Element:span
								"Content-Type"
								,
							Element:span
								"application/json; charset=UTF-8"
								);
							Element:span
								con
								.
							Element:span
								setRequestProperty
								(
							Element:span
								"Authorization"
								,
							Element:span
								"Basic NGEwMGZmMjItY2NkNy0xMWUzLTk5ZDUtMDAwYzI5NDBlNjJj"
								);
							Element:span
								con
								.
							Element:span
								setRequestMethod
								(
							Element:span
								"POST"
								);
							Element:span
								String
							Element:span
								strJsonBody
							Element:span
								=
							Element:span
								"{"
							Element:span
								+
							Element:span
								"\"app_id\": \"5eb5a37e-b458-11e3-ac11-000c2940e62c\","
							Element:span
								+
							Element:span
								"\"include_player_ids\": [\"6392d91a-b206-4b7b-a620-cd68e32c3a76\",\"76ece62b-bcfe-468c-8a78-839aeaa8c5fa\",\"8e0f21fa-9a5a-4ae7-a9a6-ca1f24294b86\"],"
							Element:span
								+
							Element:span
								"\"data\": {\"foo\": \"bar\"},"
							Element:span
								+
							Element:span
								"\"contents\": {\"en\": \"English Message\"}"
							Element:span
								+
							Element:span
								"}"
								;
							Element:span
								System
								.
							Element:span
								out
								.
							Element:span
								println
								(
							Element:span
								"strJsonBody:\n"
							Element:span
								+
							Element:span
								strJsonBody
								);
							Element:span
								byte
								[]
							Element:span
								sendBytes
							Element:span
								=
							Element:span
								strJsonBody
								.
							Element:span
								getBytes
								(
							Element:span
								"UTF-8"
								);
							Element:span
								con
								.
							Element:span
								setFixedLengthStreamingMode
								(
							Element:span
								sendBytes
								.
							Element:span
								length
								);
							Element:span
								OutputStream
							Element:span
								outputStream
							Element:span
								=
							Element:span
								con
								.
							Element:span
								getOutputStream
								();
							Element:span
								outputStream
								.
							Element:span
								write
								(
							Element:span
								sendBytes
								);
							Element:span
								int
							Element:span
								httpResponse
							Element:span
								=
							Element:span
								con
								.
							Element:span
								getResponseCode
								();
							Element:span
								System
								.
							Element:span
								out
								.
							Element:span
								println
								(
							Element:span
								"httpResponse: "
							Element:span
								+
							Element:span
								httpResponse
								);
							Element:span
								if
								(
							Element:span
								httpResponse
							Element:span
								>=
							Element:span
								HttpURLConnection
								.
							Element:span
								HTTP_OK
							Element:span
								&&
							Element:span
								httpResponse
							Element:span
								<
							Element:span
								HttpURLConnection
								.
							Element:span
								HTTP_BAD_REQUEST
								) {
							Element:span
								Scanner
							Element:span
								scanner
							Element:span
								=
							Element:span
								new
							Element:span
								Scanner
								(
							Element:span
								con
								.
							Element:span
								getInputStream
								(),
							Element:span
								"UTF-8"
								);
							Element:span
								jsonResponse
							Element:span
								=
							Element:span
								scanner
								.
							Element:span
								useDelimiter
								(
							Element:span
								"\\A"
								).
							Element:span
								hasNext
								()
							Element:span
								?
							Element:span
								scanner
								.
							Element:span
								next
								() :
							Element:span
								""
								;
							Element:span
								scanner
								.
							Element:span
								close
								(); }
							Element:span
								else
								{
							Element:span
								Scanner
							Element:span
								scanner
							Element:span
								=
							Element:span
								new
							Element:span
								Scanner
								(
							Element:span
								con
								.
							Element:span
								getErrorStream
								(),
							Element:span
								"UTF-8"
								);
							Element:span
								jsonResponse
							Element:span
								=
							Element:span
								scanner
								.
							Element:span
								useDelimiter
								(
							Element:span
								"\\A"
								).
							Element:span
								hasNext
								()
							Element:span
								?
							Element:span
								scanner
								.
							Element:span
								next
								() :
							Element:span
								""
								;
							Element:span
								scanner
								.
							Element:span
								close
								(); }
							Element:span
								System
								.
							Element:span
								out
								.
							Element:span
								println
								(
							Element:span
								"jsonResponse:\n"
							Element:span
								+
							Element:span
								jsonResponse
								); }
							Element:span
								catch
								(
							Element:span
								Throwable
							Element:span
								t
								) {
							Element:span
								t
								.
							Element:span
								printStackTrace
								(); }
						Node:
						(type) h2
						(layer)2
							Element:h2
								Results - Create notification
							Element:a
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:a
								200 OK
							Element:li
							Element:a
								400 Bad Request
							Element:li
							Element:a
								200 invalid_player_ids
							Element:li
							Element:a
								200 No Subscribed Players
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
								{
							Element:span
								"id"
								:
							Element:span
								"458dcec4-cf53-11e3-add2-000c2940e62c"
								,
							Element:span
								"recipients"
								:
							Element:span
								3
								}
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
								{
							Element:span
								"errors"
								: [
							Element:span
								"Notification content must not be null for any languages."
								] }
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
							Element:span
								// Returned if using include_player_ids and some were valid and others were not.
							Element:span
								// Please process theses on your server and removing them from your database if your tracking them.
								{
							Element:span
								"errors"
								: {
							Element:span
								"invalid_player_ids"
								: [
							Element:span
								"5fdc92b2-3b2a-11e5-ac13-8fdccfe4d986"
								,
							Element:span
								"00cb73f8-5815-11e5-ba69-f75522da5528"
								] } }
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
								{
							Element:span
								"id"
								:
							Element:span
								""
								,
							Element:span
								"recipients"
								:
							Element:span
								0
								,
							Element:span
								"errors"
								: [
							Element:span
								"All included players are not subscribed"
								]}
						Node:
						(type) c
						(layer)2
							Element:p
							Element:a
								Go here for Postman examples
						Node:
						(type) c
						(layer)2
							Element:a
						Node:
						(type) h2
						(layer)2
							Element:h2
								Cancel notification
						Node:
						(type) c
						(layer)2
							Element:p
								Stop a scheduled or currently outgoing notification
						Node:
						(type) c
						(layer)2
							Element:span
								delete
								https://
						Node:
						(type) c
						(layer)2
							Element:span
							Element:span
								onesignal.com/api/v1
							Element:span
								/notifications/
							Element:span
								id
							Element:span
								?app_id=
							Element:span
								app_id
						Node:
						(type) c
						(layer)2
							Element:p
								Used to stop a scheduled or currently outgoing notification.
						Node:
						(type) c
						(layer)2
							Element:h3
							Element:i
								Requires Authentication Key
						Node:
						(type) c
						(layer)2
							Element:p
								Requires your OneSignal App Auth Key, available in
							Element:a
								Keys & IDs
								,
							Element:em
								unless the notification was created using
							Element:code
								include_player_ids
								and targeting only one user.
						Node:
						(type) h2
						(layer)2
							Element:h2
								Path Parameters
								Parameter Type Description
							Element:a
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								id
						Node:
						(type) c
						(layer)2
							Element:p
								String
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								Required
								Notification id
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								app_id
						Node:
						(type) c
						(layer)2
							Element:p
								String
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								Required
								App id
						Node:
						(type) h2
						(layer)2
							Element:h2
								Example Code - Cancel notification
							Element:a
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:a
								cURL
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
							Element:span
								curl
							Element:span
								--include
								\
							Element:span
								--request
								DELETE \
							Element:span
								--header
							Element:span
								"Authorization: Basic NGEwMGZmMjItY2NkNy0xMWUzLTk5ZDUtMDAwYzI5NDBlNjJj"
								\ https://onesignal.com/api/v1/notifications/{notificationId}
							Element:span
								?app_id
							Element:span
								=
								{appId}
						Node:
						(type) h2
						(layer)2
							Element:h2
								Result Format - Cancel notification
							Element:a
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:a
								200 OK
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
								{
							Element:span
								'success'
								:
							Element:span
								"true"
								}
						Node:
						(type) c
						(layer)2
							Element:a
						Node:
						(type) h2
						(layer)2
							Element:h2
								View apps
						Node:
						(type) c
						(layer)2
							Element:p
								View the details of all of your current OneSignal apps
						Node:
						(type) c
						(layer)2
							Element:span
								get
								https://
						Node:
						(type) c
						(layer)2
							Element:span
							Element:span
								onesignal.com/api/v1
							Element:span
								/apps
						Node:
						(type) c
						(layer)2
							Element:h3
							Element:i
								Requires Authentication Key
						Node:
						(type) c
						(layer)2
							Element:p
								Requires your OneSignal User Auth Key, available in
							Element:a
								Keys & IDs
								.
						Node:
						(type) c
						(layer)2
							Element:p
								Example Code - View apps
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:a
								Shell
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
							Element:span
								curl
							Element:span
								--include
								\
							Element:span
								--header
							Element:span
								"Authorization: Basic NGEwMGZmMjItY2NkNy0xMWUzLTk5ZDUtMDAwYzI5NDBlNjJj"
								\ https://onesignal.com/api/v1/apps
						Node:
						(type) h2
						(layer)2
							Element:h2
								Result Format - View apps
							Element:a
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:a
								200 OK
							Element:li
							Element:a
								400 Bad Request
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
								[ {
							Element:span
								id
								:
							Element:span
								"92911750-242d-4260-9e00-9d9034f139ce"
								,
							Element:span
								name
								:
							Element:span
								"Your app 1"
								,
							Element:span
								players
								:
							Element:span
								150
								,
							Element:span
								messagable_players
								:
							Element:span
								143
								,
							Element:span
								updated_at
								:
							Element:span
								"2014-04-01T04:20:02.003Z"
								,
							Element:span
								created_at
								:
							Element:span
								"2014-04-01T04:20:02.003Z"
								,
							Element:span
								gcm_key
								:
							Element:span
								"a gcm push key"
								,
							Element:span
								chrome_key
								:
							Element:span
								"A Chrome Web Push GCM key"
								,
							Element:span
								chrome_web_origin
								:
							Element:span
								"Chrome Web Push Site URL"
								,
							Element:span
								chrome_web_gcm_sender_id
								:
							Element:span
								"Chrome Web Push GCM Sender ID"
								,
							Element:span
								chrome_web_default_notification_icon
								:
							Element:span
								"http://yoursite.com/chrome_notification_icon"
								,
							Element:span
								chrome_web_sub_domain
								:
							Element:span
								"your_site_name"
								,
							Element:span
								apns_env
								:
							Element:span
								"sandbox"
								,
							Element:span
								apns_certificates
								:
							Element:span
								"Your apns certificate"
								,
							Element:span
								safari_apns_cetificate
								:
							Element:span
								"Your Safari APNS certificate"
								,
							Element:span
								safari_site_origin
								:
							Element:span
								"The homename for your website for Safari Push, including http or https"
								,
							Element:span
								safari_push_id
								:
							Element:span
								"The certificate bundle ID for Safari Web Push"
								,
							Element:span
								safari_icon_16_16
								:
							Element:span
								"http://onesignal.com/safari_packages/92911750-242d-4260-9e00-9d9034f139ce/16x16.png"
								,
							Element:span
								safari_icon_32_32
								:
							Element:span
								"http://onesignal.com/safari_packages/92911750-242d-4260-9e00-9d9034f139ce/16x16@2.png"
								,
							Element:span
								safari_icon_64_64
								:
							Element:span
								"http://onesignal.com/safari_packages/92911750-242d-4260-9e00-9d9034f139ce/32x32@2x.png"
								,
							Element:span
								safari_icon_128_128
								:
							Element:span
								"http://onesignal.com/safari_packages/92911750-242d-4260-9e00-9d9034f139ce/128x128.png"
								,
							Element:span
								safari_icon_256_256
								:
							Element:span
								"http://onesignal.com/safari_packages/92911750-242d-4260-9e00-9d9034f139ce/128x128@2x.png"
								,
							Element:span
								site_name
								:
							Element:span
								"The URL to your website for Web Push"
								,
							Element:span
								basic_auth_key
								:
							Element:span
								"NGEwMGZmMjItY2NkNy0xMWUzLTk5ZDUtMDAwYzI5NDBlNjJj"
								}, {
							Element:span
								id
								:
							Element:span
								"e4e87830-b954-11e3-811d-f3b376925f15"
								,
							Element:span
								name
								:
							Element:span
								"Your app 2"
								,
							Element:span
								players
								:
							Element:span
								100
								,
							Element:span
								messagable_players
								:
							Element:span
								80
								,
							Element:span
								updated_at
								:
							Element:span
								"2014-04-01T04:20:02.003Z"
								,
							Element:span
								created_at
								:
							Element:span
								"2014-04-01T04:20:02.003Z"
								,
							Element:span
								gcm_key
								:
							Element:span
								"a gcm push key"
								,
							Element:span
								chrome_key
								:
							Element:span
								"A Chrome Web Push GCM key"
								,
							Element:span
								chrome_web_origin
								:
							Element:span
								"Chrome Web Push Site URL"
								,
							Element:span
								chrome_web_gcm_sender_id
								:
							Element:span
								"Chrome Web Push GCM Sender ID"
								,
							Element:span
								chrome_web_default_notification_icon
								:
							Element:span
								"http://yoursite.com/chrome_notification_icon"
								,
							Element:span
								chrome_web_sub_domain
								:
							Element:span
								"your_site_name"
								,
							Element:span
								apns_env
								:
							Element:span
								"sandbox"
								,
							Element:span
								apns_certificates
								:
							Element:span
								"Your apns certificate"
								,
							Element:span
								safari_apns_cetificate
								:
							Element:span
								"Your Safari APNS certificate"
								,
							Element:span
								safari_site_origin
								:
							Element:span
								"The homename for your website for Safari Push, including http or https"
								,
							Element:span
								safari_push_id
								:
							Element:span
								"The certificate bundle ID for Safari Web Push"
								,
							Element:span
								safari_icon_16_16
								:
							Element:span
								"http://onesignal.com/safari_packages/e4e87830-b954-11e3-811d-f3b376925f15/16x16.png"
								,
							Element:span
								safari_icon_32_32
								:
							Element:span
								"http://onesignal.com/safari_packages/e4e87830-b954-11e3-811d-f3b376925f15/16x16@2.png"
								,
							Element:span
								safari_icon_64_64
								:
							Element:span
								"http://onesignal.com/safari_packages/e4e87830-b954-11e3-811d-f3b376925f15/32x32@2x.png"
								,
							Element:span
								safari_icon_128_128
								:
							Element:span
								"http://onesignal.com/safari_packages/e4e87830-b954-11e3-811d-f3b376925f15/128x128.png"
								,
							Element:span
								safari_icon_256_256
								:
							Element:span
								"http://onesignal.com/safari_packages/e4e87830-b954-11e3-811d-f3b376925f15/128x128@2x.png"
								,
							Element:span
								site_name
								:
							Element:span
								"The URL to your website for Web Push"
								,
							Element:span
								basic_auth_key
								:
							Element:span
								"NGEwMGZmMjItY2NkNy0xMWUzLTk5ZDUtMDAwYzI5NDBlNjJj"
								} ]
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
								{}
						Node:
						(type) c
						(layer)2
							Element:a
						Node:
						(type) h2
						(layer)2
							Element:h2
								View an app
						Node:
						(type) c
						(layer)2
							Element:p
								View the details of a single OneSignal app
						Node:
						(type) c
						(layer)2
							Element:span
								get
								https://
						Node:
						(type) c
						(layer)2
							Element:span
							Element:span
								onesignal.com/api/v1
							Element:span
								/apps/
							Element:span
								id
						Node:
						(type) c
						(layer)2
							Element:h3
							Element:i
								Requires Authentication Key
						Node:
						(type) c
						(layer)2
							Element:p
								Requires your OneSignal User Auth Key, available in
							Element:a
								Keys & IDs
								.
						Node:
						(type) h2
						(layer)2
							Element:h2
								Path Parameters
								Parameter Type Description
							Element:a
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								id
						Node:
						(type) c
						(layer)2
							Element:p
								String
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								Required
								An app id
						Node:
						(type) c
						(layer)2
							Element:p
								Example Code - View an app
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:a
								cURL
							Element:li
							Element:a
								PHP
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
							Element:span
								curl
							Element:span
								--include
								\
							Element:span
								--header
							Element:span
								"Content-Type: application/json"
								\
							Element:span
								--header
							Element:span
								"Authorization: Basic NGEwMGZmMjItY2NkNy0xMWUzLTk5ZDUtMDAwYzI5NDBlNjJj"
								\ https://onesignal.com/api/v1/apps/e4e87830-b954-11e3-811d-f3b376925f15
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
								$ch = curl_init(); curl_setopt($ch, CURLOPT_URL, "https://onesignal.com/api/v1/apps/YOUR_APP_ID"); curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: application/json', 'Authorization: Basic YOUR_USER_AUTH_KEY')); curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE); curl_setopt($ch, CURLOPT_HEADER, FALSE); curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE); $response = curl_exec($ch); $response = json_decode($response, true); curl_close($ch);
						Node:
						(type) h2
						(layer)2
							Element:h2
								Result Format - View an app
							Element:a
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:a
								200 OK
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
								{
							Element:span
								id
								:
							Element:span
								"92911750-242d-4260-9e00-9d9034f139ce"
								,
							Element:span
								name
								:
							Element:span
								"Your app 1"
								,
							Element:span
								players
								:
							Element:span
								150
								,
							Element:span
								messageable_players
								:
							Element:span
								143
								,
							Element:span
								updated_at
								:
							Element:span
								"2014-04-01T04:20:02.003Z"
								,
							Element:span
								created_at
								:
							Element:span
								"2014-04-01T04:20:02.003Z"
								,
							Element:span
								gcm_key
								:
							Element:span
								"a gcm push key"
								,
							Element:span
								chrome_key
								:
							Element:span
								"A Chrome Web Push GCM key"
								,
							Element:span
								chrome_web_origin
								:
							Element:span
								"Chrome Web Push Site URL"
								,
							Element:span
								chrome_web_gcm_sender_id
								:
							Element:span
								"Chrome Web Push GCM Sender ID"
								,
							Element:span
								chrome_web_default_notification_icon
								:
							Element:span
								"http://yoursite.com/chrome_notification_icon"
								,
							Element:span
								chrome_web_sub_domain
								:
							Element:span
								"your_site_name"
								,
							Element:span
								apns_env
								:
							Element:span
								"production"
								,
							Element:span
								apns_certificates
								:
							Element:span
								"Your apns certificate"
								,
							Element:span
								safari_apns_cetificate
								:
							Element:span
								"Your Safari APNS certificate"
								,
							Element:span
								safari_site_origin
								:
							Element:span
								"The homename for your website for Safari Push, including http or https"
								,
							Element:span
								safari_push_id
								:
							Element:span
								"The certificate bundle ID for Safari Web Push"
								,
							Element:span
								safari_icon_16_16
								:
							Element:span
								"http://onesignal.com/safari_packages/92911750-242d-4260-9e00-9d9034f139ce/16x16.png"
								,
							Element:span
								safari_icon_32_32
								:
							Element:span
								"http://onesignal.com/safari_packages/92911750-242d-4260-9e00-9d9034f139ce/16x16@2.png"
								,
							Element:span
								safari_icon_64_64
								:
							Element:span
								"http://onesignal.com/safari_packages/92911750-242d-4260-9e00-9d9034f139ce/32x32@2x.png"
								,
							Element:span
								safari_icon_128_128
								:
							Element:span
								"http://onesignal.com/safari_packages/92911750-242d-4260-9e00-9d9034f139ce/128x128.png"
								,
							Element:span
								safari_icon_256_256
								:
							Element:span
								"http://onesignal.com/safari_packages/92911750-242d-4260-9e00-9d9034f139ce/128x128@2x.png"
								,
							Element:span
								site_name
								:
							Element:span
								"The URL to your website for Web Push"
								,
							Element:span
								basic_auth_key
								:
							Element:span
								"NGEwMGZmMjItY2NkNy0xMWUzLTk5ZDUtMDAwYzI5NDBlNjJj"
								}
						Node:
						(type) c
						(layer)2
							Element:a
						Node:
						(type) h2
						(layer)2
							Element:h2
								Create an app
						Node:
						(type) c
						(layer)2
							Element:p
								Creates a new OneSignal app
						Node:
						(type) c
						(layer)2
							Element:span
								post
								https://
						Node:
						(type) c
						(layer)2
							Element:span
							Element:span
								onesignal.com/api/v1
							Element:span
								/apps
						Node:
						(type) c
						(layer)2
							Element:h3
							Element:i
								Requires Authentication Key
						Node:
						(type) c
						(layer)2
							Element:p
								Requires your OneSignal User Auth Key, available in
							Element:a
								Keys & IDs
								.
						Node:
						(type) h2
						(layer)2
							Element:h2
								Body Parameters
								Parameter Type Description
							Element:a
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								name
						Node:
						(type) c
						(layer)2
							Element:p
								String
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								Required
								The name of your new app, as displayed on your apps list on the dashboard. This can be renamed later.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								apns_env
						Node:
						(type) c
						(layer)2
							Element:p
								String
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								iOS
								- Either
							Element:code
								sandbox
								or
							Element:code
								production
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								apns_p12
						Node:
						(type) c
						(layer)2
							Element:p
								String
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								iOS
								- Your apple push notification p12 certificate file, converted to a string and Base64 encoded.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								apns_p12_password
						Node:
						(type) c
						(layer)2
							Element:p
								String
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								iOS
								- Password for the apns_p12 file
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								gcm_key
						Node:
						(type) c
						(layer)2
							Element:p
								String
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								Android
								- Your Google Push Messaging Auth Key
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								android_gcm_sender_id
						Node:
						(type) c
						(layer)2
							Element:p
								String
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								Android
								- Your Google Project number. Also know as Sender ID.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								chrome_web_origin
						Node:
						(type) c
						(layer)2
							Element:p
								String
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								Chrome
								,
							Element:span
								Firefox
								- The URL to your website. This field is required if you wish to enable web push and specify other web push parameters.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								chrome_web_default_notification_icon
						Node:
						(type) c
						(layer)2
							Element:p
								String
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								Chrome
								- Your default notification icon. Should be 80x80 pixels.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								chrome_web_sub_domain
						Node:
						(type) c
						(layer)2
							Element:p
								String
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								Chrome
								- A subdomain of your choice in order to support Chrome Web Push on non-HTTPS websites. This field must be set in order for the
							Element:code
								chrome_web_gcm_sender_id
								property to be processed.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								safari_apns_p12
						Node:
						(type) c
						(layer)2
							Element:p
								String
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								Safari
								- Your apple push notification p12 certificate file for Safari Push Notifications, converted to a string and Base64 encoded.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								safari_apns_p12_password
						Node:
						(type) c
						(layer)2
							Element:p
								String
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								Safari
								- Password for
							Element:code
								safari_apns_p12
								file
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								site_name
						Node:
						(type) c
						(layer)2
							Element:p
								String
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								Safari
								- The URL to your website
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								safari_site_origin
						Node:
						(type) c
						(layer)2
							Element:p
								String
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								Safari
								- The hostname to your website including
							Element:code
								http(s)://
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								safari_icon_256_256
						Node:
						(type) c
						(layer)2
							Element:p
								String
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								Safari
								- A url for a 256x256 png notification icon. This is the only Safari icon URL you need to provide.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								chrome_key
						Node:
						(type) c
						(layer)2
							Element:p
								String
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								Not for web push
							Element:br
								Your Google Push Messaging Auth Key if you use Chrome Apps / Extensions.
						Node:
						(type) h2
						(layer)2
							Element:h2
								Example Code - Create an app
							Element:a
						Node:
						(type) c
						(layer)2
							Element:p
								This method is used to create new apps in your OneSignal account. It allows you to specify your APNS and GCM auth tokens as well.
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:a
								Shell
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
							Element:span
								curl
							Element:span
								--include
								\
							Element:span
								--request
								POST \
							Element:span
								--header
							Element:span
								"Content-Type: application/json"
								\
							Element:span
								--header
							Element:span
								"Authorization: Basic NGEwMGZmMjItY2NkNy0xMWUzLTk5ZDUtMDAwYzI5NDBlNjJj"
								\
							Element:span
								--data-binary
							Element:span
								"{\"name\" : \"Your app 1\",
								\"apns_env\": \"production\", \"apns_p12\": \"asdsadcvawe223cwef...\", \"apns_p12_password\": \"FooBar\", \"gcm_key\": \"a gcm push key\"}
							Element:span
								" \
							Element:span
								https://onesignal.com/api/v1/apps
						Node:
						(type) h2
						(layer)2
							Element:h2
								Result Format - Create an app
							Element:a
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:a
								200 OK
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
								{
							Element:span
								id
								:
							Element:span
								"e4e87830-b954-11e3-811d-f3b376925f15"
								,
							Element:span
								name
								:
							Element:span
								"Your app 1"
								,
							Element:span
								players
								:
							Element:span
								0
								,
							Element:span
								messagable_players
								:
							Element:span
								0
								,
							Element:span
								updated_at
								:
							Element:span
								"2014-04-01T04:20:02.003Z"
								,
							Element:span
								created_at
								:
							Element:span
								"2014-04-01T04:20:02.003Z"
								,
							Element:span
								gcm_key
								:
							Element:span
								"a gcm push key"
								,
							Element:span
								chrome_web_origin
								:
							Element:span
								"Chrome Web Push Site URL"
								,
							Element:span
								chrome_web_default_notification_icon
								:
							Element:span
								"http://yoursite.com/chrome_notification_icon"
								,
							Element:span
								chrome_web_sub_domain
								:
							Element:span
								"your_site_name"
								,
							Element:span
								apns_env
								:
							Element:span
								"production"
								,
							Element:span
								apns_certificates
								:
							Element:span
								"Your apns certificate"
								,
							Element:span
								safari_apns_cetificate
								:
							Element:span
								"Your Safari APNS certificate"
								,
							Element:span
								safari_site_origin
								:
							Element:span
								"The homename for your website for Safari Push, including http or https"
								,
							Element:span
								safari_push_id
								:
							Element:span
								"The certificate bundle ID for Safari Web Push"
								,
							Element:span
								safari_icon_16_16
								:
							Element:span
								"http://onesignal.com/safari_packages/e4e87830-b954-11e3-811d-f3b376925f15/16x16.png"
								,
							Element:span
								safari_icon_32_32
								:
							Element:span
								"http://onesignal.com/safari_packages/e4e87830-b954-11e3-811d-f3b376925f15/16x16@2.png"
								,
							Element:span
								safari_icon_64_64
								:
							Element:span
								"http://onesignal.com/safari_packages/e4e87830-b954-11e3-811d-f3b376925f15/32x32@2x.png"
								,
							Element:span
								safari_icon_128_128
								:
							Element:span
								"http://onesignal.com/safari_packages/e4e87830-b954-11e3-811d-f3b376925f15/128x128.png"
								,
							Element:span
								safari_icon_256_256
								:
							Element:span
								"http://onesignal.com/safari_packages/e4e87830-b954-11e3-811d-f3b376925f15/128x128@2x.png"
								,
							Element:span
								site_name
								:
							Element:span
								"The URL to your website for Web Push"
								,
							Element:span
								basic_auth_key
								:
							Element:span
								"NGEwMGZmMjItY2NkNy0xMWUzLTk5ZDUtMDAwYzI5NDBlNjJj"
								}
						Node:
						(type) c
						(layer)2
							Element:a
						Node:
						(type) h2
						(layer)2
							Element:h2
								Update an app
						Node:
						(type) c
						(layer)2
							Element:p
								Updates the name or configuration settings of an existing OneSignal app
						Node:
						(type) c
						(layer)2
							Element:span
								put
								https://
						Node:
						(type) c
						(layer)2
							Element:span
							Element:span
								onesignal.com/api/v1
							Element:span
								/apps/
							Element:span
								id
						Node:
						(type) c
						(layer)2
							Element:p
								This method can be used to update the name or configuration settings of one of your existing apps.
						Node:
						(type) c
						(layer)2
							Element:h3
							Element:i
								Same as POST /apps
						Node:
						(type) c
						(layer)2
							Element:p
								The supported parameters are the same as the
							Element:a
								parameters for creating an application
								.
						Node:
						(type) c
						(layer)2
							Element:h3
							Element:i
								Updating Some Platforms Requires All Attributes To Be Set
						Node:
						(type) c
						(layer)2
							Element:p
								Updating some platforms like Safari web push requires all parameters to be set (even if they are unchanged) in order for the update to be processed.
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
								To update only your app name, you can pass in only a new app name parameter.
							Element:li
								To update Android, be sure to pass in
							Element:code
								gcm_key
								.
							Element:li
								To update Chrome Apps & Extensions, be sure to pass in
							Element:code
								chrome_key
								.
							Element:li
								To update Chrome web push, be sure to pass in
							Element:code
								chrome_web_origin
								.
							Element:li
								To update Safari web push, you must pass in all of these parameters:
							Element:code
								safari_apns_p12
								,
							Element:code
								safari_apns_p12_password
								,
							Element:code
								site_name
								, and
							Element:code
								safari_site_origin
								. Most users use our auto-generated Safari web ID. If you use our auto-generated Safari web ID, please set
							Element:code
								safari_apns_p12
								to
							Element:code
								""
								and
							Element:code
								safari_apns_p12_password
								to
							Element:code
								""
								.
							Element:li
								To update iOS, you must pass in
							Element:code
								apns_env
								and
							Element:code
								apns_p12
								.
						Node:
						(type) c
						(layer)2
							Element:h3
							Element:i
								Requires Authentication Key
						Node:
						(type) c
						(layer)2
							Element:p
								Requires your OneSignal User Auth Key, available in
							Element:a
								Keys & IDs
								.
						Node:
						(type) c
						(layer)2
							Element:p
								Example Code - Update an app
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:a
								Shell
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
							Element:span
								curl
							Element:span
								--include
								\
							Element:span
								--request
								PUT \
							Element:span
								--header
							Element:span
								"Content-Type: application/json"
								\
							Element:span
								--header
							Element:span
								"Authorization: Basic NGEwMGZmMjItY2NkNy0xMWUzLTk5ZDUtMDAwYzI5NDBlNjJj"
								\
							Element:span
								--data-binary
							Element:span
								"{\"name\" : \"Your app 1\",
								\"apns_env\": \"production\", \"apns_p12\": \"asdsadcvawe223cwef...\", \"apns_p12_password\": \"FooBar\", \"gcm_key\": \"a gcm push key\"}
							Element:span
								" \
							Element:span
								https://onesignal.com/api/v1/apps/e4e87830-b954-11e3-811d-f3b376925f15
						Node:
						(type) h2
						(layer)2
							Element:h2
								Result Format - Update an app
							Element:a
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:a
								200 OK
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
								{
							Element:span
								id
								:
							Element:span
								"e4e87830-b954-11e3-811d-f3b376925f15"
								,
							Element:span
								name
								:
							Element:span
								"Your app 1"
								,
							Element:span
								players
								:
							Element:span
								0
								,
							Element:span
								messagable_players
								:
							Element:span
								0
								,
							Element:span
								updated_at
								:
							Element:span
								"2014-04-01T04:20:02.003Z"
								,
							Element:span
								created_at
								:
							Element:span
								"2014-04-01T04:20:02.003Z"
								,
							Element:span
								gcm_key
								:
							Element:span
								"a gcm push key"
								,
							Element:span
								chrome_key
								:
							Element:span
								"A Chrome Web Push GCM key"
								,
							Element:span
								chrome_web_origin
								:
							Element:span
								"Chrome Web Push Site URL"
								,
							Element:span
								chrome_web_default_notification_icon
								:
							Element:span
								"http://yoursite.com/chrome_notification_icon"
								,
							Element:span
								chrome_web_sub_domain
								:
							Element:span
								"your_site_name"
								,
							Element:span
								apns_env
								:
							Element:span
								"production"
								,
							Element:span
								apns_certificates
								:
							Element:span
								"Your apns certificate"
								,
							Element:span
								safari_apns_cetificate
								:
							Element:span
								"Your Safari APNS certificate"
								,
							Element:span
								safari_site_origin
								:
							Element:span
								"The homename for your website for Safari Push, including http or https"
								,
							Element:span
								safari_push_id
								:
							Element:span
								"The certificate bundle ID for Safari Web Push"
								,
							Element:span
								safari_icon_16_16
								:
							Element:span
								"http://onesignal.com/safari_packages/e4e87830-b954-11e3-811d-f3b376925f15/16x16.png"
								,
							Element:span
								safari_icon_32_32
								:
							Element:span
								"http://onesignal.com/safari_packages/e4e87830-b954-11e3-811d-f3b376925f15/16x16@2.png"
								,
							Element:span
								safari_icon_64_64
								:
							Element:span
								"http://onesignal.com/safari_packages/e4e87830-b954-11e3-811d-f3b376925f15/32x32@2x.png"
								,
							Element:span
								safari_icon_128_128
								:
							Element:span
								"http://onesignal.com/safari_packages/e4e87830-b954-11e3-811d-f3b376925f15/128x128.png"
								,
							Element:span
								safari_icon_256_256
								:
							Element:span
								"http://onesignal.com/safari_packages/e4e87830-b954-11e3-811d-f3b376925f15/128x128@2x.png"
								,
							Element:span
								site_name
								:
							Element:span
								"The URL to your website for Web Push"
								,
							Element:span
								basic_auth_key
								:
							Element:span
								"NGEwMGZmMjItY2NkNy0xMWUzLTk5ZDUtMDAwYzI5NDBlNjJj"
								}
						Node:
						(type) c
						(layer)2
							Element:a
						Node:
						(type) h2
						(layer)2
							Element:h2
								View devices
						Node:
						(type) c
						(layer)2
							Element:p
								View the details of multiple devices in one of your OneSignal apps
						Node:
						(type) c
						(layer)2
							Element:span
								get
								https://
						Node:
						(type) c
						(layer)2
							Element:span
							Element:span
								onesignal.com/api/v1
							Element:span
								/players?app_id=
							Element:span
								app_id
							Element:span
								&limit=
							Element:span
								limit
							Element:span
								&offset=
							Element:span
								offset
						Node:
						(type) c
						(layer)2
							Element:h3
							Element:i
								Requires Authentication Key
						Node:
						(type) c
						(layer)2
							Element:p
								Requires your OneSignal App Auth Key, available in
							Element:a
								Keys & IDs
								.
						Node:
						(type) c
						(layer)2
							Element:h3
							Element:i
								Unavailable for Apps > 100,000 users
						Node:
						(type) c
						(layer)2
							Element:p
								For performance reasons, this method is not available for larger apps. Larger apps should use the
							Element:a
								CSV export
								API endpoint, which is much more performant.
						Node:
						(type) h2
						(layer)2
							Element:h2
								Query Parameters
								Parameter Type Description
							Element:a
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								app_id
						Node:
						(type) c
						(layer)2
							Element:p
								String
						Node:
						(type) c
						(layer)2
							Element:p
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								Required
								The app ID that you want to view devices from
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								limit
						Node:
						(type) c
						(layer)2
							Element:p
								String
						Node:
						(type) c
						(layer)2
							Element:p
								How many devices to return. Max is 300. Default is 300
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								offset
						Node:
						(type) c
						(layer)2
							Element:p
								String
						Node:
						(type) c
						(layer)2
							Element:p
								Result offset. Default is 0. Results are sorted by id;
						Node:
						(type) h2
						(layer)2
							Element:h2
								Response Parameters
								Parameter Type Description
							Element:a
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								invalid_identifier
						Node:
						(type) c
						(layer)2
							Element:p
								boolean
						Node:
						(type) c
						(layer)2
							Element:p
								If
							Element:code
								true
								, this is the equivalent of a user being
							Element:em
								Unsubscribed
								(as seen in
							Element:a
								All Users
								).
						Node:
						(type) h2
						(layer)2
							Element:h2
								Example Code - View devices
							Element:a
						Node:
						(type) c
						(layer)2
							Element:p
								See our
							Element:a
								PUT player call
								for a description of the fields listed below in the example.
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:a
								cURL
							Element:li
							Element:a
								PHP
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
							Element:span
								curl
							Element:span
								--include
								\
							Element:span
								--header
							Element:span
								"Authorization: Basic NGEwMGZmMjItY2NkNy0xMWUzLTk5ZDUtMDAwYzI5NDBlNjJj"
								\
							Element:span
								"https://onesignal.com/api/v1/players?app_id={appId}&limit=300&offset=0"
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
							Element:span
								<?php
							Element:span
								// NOTE: Only fetches the first 300 devices.
							Element:span
								// Will need to add looping with offset to get all devices.
							Element:span
								function
							Element:span
								getDevices
								(){
							Element:span
								$app_id
							Element:span
								=
							Element:span
								"YOUR_ONESIGNAL_APP_ID_HERE"
								;
							Element:span
								$ch
							Element:span
								=
							Element:span
								curl_init
								();
							Element:span
								curl_setopt
								(
							Element:span
								$ch
								,
							Element:span
								CURLOPT_URL
								,
							Element:span
								"https://onesignal.com/api/v1/players?app_id="
								.
							Element:span
								$app_id
								);
							Element:span
								curl_setopt
								(
							Element:span
								$ch
								,
							Element:span
								CURLOPT_HTTPHEADER
								,
							Element:span
								array
								(
							Element:span
								'Content-Type: application/json'
								,
							Element:span
								'Authorization: Basic YOUR_ONESIGNAL_APP_AUTH_KEY_HERE'
								));
							Element:span
								curl_setopt
								(
							Element:span
								$ch
								,
							Element:span
								CURLOPT_RETURNTRANSFER
								,
							Element:span
								TRUE
								);
							Element:span
								curl_setopt
								(
							Element:span
								$ch
								,
							Element:span
								CURLOPT_HEADER
								,
							Element:span
								FALSE
								);
							Element:span
								curl_setopt
								(
							Element:span
								$ch
								,
							Element:span
								CURLOPT_SSL_VERIFYPEER
								,
							Element:span
								FALSE
								);
							Element:span
								$response
							Element:span
								=
							Element:span
								curl_exec
								(
							Element:span
								$ch
								);
							Element:span
								curl_close
								(
							Element:span
								$ch
								);
							Element:span
								return
							Element:span
								$response
								; }
							Element:span
								$response
							Element:span
								=
							Element:span
								getDevices
								();
							Element:span
								$return
								[
							Element:span
								"allresponses"
								]
							Element:span
								=
							Element:span
								$response
								;
							Element:span
								$return
							Element:span
								=
							Element:span
								json_encode
								(
							Element:span
								$return
								);
							Element:span
								print
								(
							Element:span
								"\n\nJSON received:\n"
								);
							Element:span
								print
								(
							Element:span
								$return
								);
							Element:span
								print
								(
							Element:span
								"\n"
								)
							Element:span
								?>
						Node:
						(type) h2
						(layer)2
							Element:h2
								Result Format - View devices
							Element:a
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:a
								200 OK
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
								{
							Element:span
								"total_count"
								:
							Element:span
								3
								,
							Element:span
								"offset"
								:
							Element:span
								2
								,
							Element:span
								"limit"
								:
							Element:span
								2
								,
							Element:span
								"players"
								: [ {
							Element:span
								"identifier"
								:
							Element:span
								"ce777617da7f548fe7a9ab6febb56cf39fba6d382000c0395666288d961ee566"
								,
							Element:span
								"session_count"
								:
							Element:span
								1
								,
							Element:span
								"language"
								:
							Element:span
								"en"
								,
							Element:span
								"timezone"
								:
							Element:span
								-
							Element:span
								28800
								,
							Element:span
								"game_version"
								:
							Element:span
								"1.0"
								,
							Element:span
								"device_os"
								:
							Element:span
								"7.0.4"
								,
							Element:span
								"device_type"
								:
							Element:span
								0
								,
							Element:span
								"device_model"
								:
							Element:span
								"iPhone"
								,
							Element:span
								"ad_id"
								:
							Element:span
								null
								,
							Element:span
								"tags"
								:{
							Element:span
								"a"
								:
							Element:span
								"1"
								,
							Element:span
								"foo"
								:
							Element:span
								"bar"
								},
							Element:span
								"last_active"
								:
							Element:span
								1395096859
								,
							Element:span
								"amount_spent"
								:
							Element:span
								0.0
								,
							Element:span
								"created_at"
								:
							Element:span
								1395096859
								,
							Element:span
								"invalid_identifier"
								:
							Element:span
								false
								,
							Element:span
								"badge_count"
								:
							Element:span
								0
								} ] }
						Node:
						(type) c
						(layer)2
							Element:a
						Node:
						(type) h2
						(layer)2
							Element:h2
								View device
						Node:
						(type) c
						(layer)2
							Element:p
								View the details of an existing device in one of your OneSignal apps
						Node:
						(type) c
						(layer)2
							Element:span
								get
								https://
						Node:
						(type) c
						(layer)2
							Element:span
							Element:span
								onesignal.com/api/v1
							Element:span
								/players/
							Element:span
								id
						Node:
						(type) c
						(layer)2
							Element:p
								See our
							Element:a
								Add a device
								documentation for descriptions of the fields.
						Node:
						(type) h2
						(layer)2
							Element:h2
								Path Parameters
								Parameter Type Description
							Element:a
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								id
						Node:
						(type) c
						(layer)2
							Element:p
								String
						Node:
						(type) c
						(layer)2
							Element:p
								Player's OneSignal ID
						Node:
						(type) h2
						(layer)2
							Element:h2
								Query Parameters
								Parameter Type Description
							Element:a
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								app_id
						Node:
						(type) c
						(layer)2
							Element:p
								String
						Node:
						(type) c
						(layer)2
							Element:p
								Your app_id for this device
						Node:
						(type) h2
						(layer)2
							Element:h2
								Example Code - View device
							Element:a
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:a
								cURL
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
							Element:span
								curl
							Element:span
								--include
								\ https://onesignal.com/api/v1/players/ffffb794-ba37-11e3-8077-031d62f86ebf
							Element:span
								?app_id
							Element:span
								=
								f69739a6-3ef1-4aaf-90d9-fec35b7c9c13
						Node:
						(type) h2
						(layer)2
							Element:h2
								Result Format - View device
							Element:a
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:a
								200 OK
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
								{
							Element:span
								"identifier"
								:
							Element:span
								"ce777617da7f548fe7a9ab6febb56cf39fba6d382000c0395666288d961ee566"
								,
							Element:span
								"session_count"
								:
							Element:span
								1
								,
							Element:span
								"language"
								:
							Element:span
								"en"
								,
							Element:span
								"timezone"
								:
							Element:span
								-
							Element:span
								28800
								,
							Element:span
								"game_version"
								:
							Element:span
								"1.0"
								,
							Element:span
								"device_os"
								:
							Element:span
								"7.0.4"
								,
							Element:span
								"device_type"
								:
							Element:span
								0
								,
							Element:span
								"device_model"
								:
							Element:span
								"iPhone"
								,
							Element:span
								"ad_id"
								:
							Element:span
								null
								,
							Element:span
								"tags"
								:{
							Element:span
								"a"
								:
							Element:span
								"1"
								,
							Element:span
								"foo"
								:
							Element:span
								"bar"
								},
							Element:span
								"last_active"
								:
							Element:span
								1395096859
								,
							Element:span
								"amount_spent"
								:
							Element:span
								0.0
								,
							Element:span
								"created_at"
								:
							Element:span
								1395096859
								,
							Element:span
								"invalid_identifier"
								:
							Element:span
								false
								,
							Element:span
								"badge_count"
								:
							Element:span
								0
								}
						Node:
						(type) c
						(layer)2
							Element:a
						Node:
						(type) h2
						(layer)2
							Element:h2
								Add a device
						Node:
						(type) c
						(layer)2
							Element:p
								Register a new device to one of your OneSignal apps
						Node:
						(type) c
						(layer)2
							Element:span
								post
								https://
						Node:
						(type) c
						(layer)2
							Element:span
							Element:span
								onesignal.com/api/v1
							Element:span
								/players
						Node:
						(type) c
						(layer)2
							Element:h3
							Element:i
								Don't use this
						Node:
						(type) c
						(layer)2
							Element:p
								This API endpoint is designed to be used from our open source Mobile and Web Push SDKs. It is not designed for developers to use it directly, unless instructed to do so by OneSignal support.
						Node:
						(type) c
						(layer)2
							Element:p
								If you use this method instead of our SDKs, many OneSignal features such as conversion tracking, timezone tracking, language detection, and rich-push won't work out of the box. It will also make it harder to identify possible setup issues.
						Node:
						(type) c
						(layer)2
							Element:p
								This method is used to register a new device with OneSignal.
						Node:
						(type) c
						(layer)2
							Element:p
								If a device is already registered with the specified identifier, then this will update the existing device record instead of creating a new one.
						Node:
						(type) c
						(layer)2
							Element:p
								The returned player is a player / user ID. Use the returned ID to send push notifications to this specific user later, or to include this player when sending to a set of users.
						Node:
						(type) c
						(layer)2
							Element:h3
							Element:i
								iOS
						Node:
						(type) c
						(layer)2
							Element:p
								Must set
							Element:code
								test_type
								to
							Element:code
								1
								when building your iOS app as development. Omit this field in your production app builds.
						Node:
						(type) h2
						(layer)2
							Element:h2
								Body Parameters
								Parameter Type Description
							Element:a
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								app_id
						Node:
						(type) c
						(layer)2
							Element:p
								String
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								Required
								Your OneSignal App Id found in
							Element:a
								Keys & IDs
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								device_type
						Node:
						(type) c
						(layer)2
							Element:p
								Int
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								Required
								The device's platform:
							Element:br
							Element:code
								0
								=
							Element:span
								iOS
							Element:br
							Element:code
								1
								=
							Element:span
								Android
							Element:br
							Element:code
								2
								=
							Element:span
								Amazon
							Element:br
							Element:code
								3
								=
							Element:span
								WindowsPhone
								(MPNS)
							Element:br
							Element:code
								4
								=
							Element:span
								Chrome Apps / Extensions
							Element:br
							Element:code
								5
								=
							Element:span
								Chrome Web Push
							Element:br
							Element:code
								6
								=
							Element:span
								WindowsPhone
								(WNS)
							Element:br
							Element:code
								7
								=
							Element:span
								Safari
							Element:br
							Element:code
								8
								=
							Element:span
								Firefox
							Element:br
							Element:code
								9
								=
							Element:span
								MacOS
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								identifier
						Node:
						(type) c
						(layer)2
							Element:p
								String
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								Recommended
								Push notification identifier from Google or Apple. For Apple push identifiers, you must strip all non alphanumeric characters. Example:
							Element:code
								ce777617da7f548fe7a9ab6febb56
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								language
						Node:
						(type) c
						(layer)2
							Element:p
								String
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								Recommended
								Language code. Typically lower case two letters, except for Chinese where it must be one of
							Element:code
								zh-Hans
								or
							Element:code
								zh-Hant
								. Example:
							Element:code
								en
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								timezone
						Node:
						(type) c
						(layer)2
							Element:p
								Int
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								Recommended
								Number of seconds away from UTC. Example:
							Element:code
								-28800
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								game_version
						Node:
						(type) c
						(layer)2
							Element:p
								String
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								Recommended
								Version of your app. Example:
							Element:code
								1.1
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								device_model
						Node:
						(type) c
						(layer)2
							Element:p
								String
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								Recommended
								Device make and model. Example:
							Element:code
								iPhone5,1
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								device_os
						Node:
						(type) c
						(layer)2
							Element:p
								String
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								Recommended
								Device operating system version. Example:
							Element:code
								7.0.4
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								ad_id
						Node:
						(type) c
						(layer)2
							Element:p
								String
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								Recommended
								The ad id for the device's platform:
							Element:br
							Element:span
								Android
								=
							Element:code
								Advertising Id
							Element:br
							Element:span
								iOS
								=
							Element:code
								identifierForVendor
							Element:br
							Element:span
								WP8.0
								=
							Element:code
								DeviceUniqueId
							Element:br
							Element:span
								WP8.1
								=
							Element:code
								AdvertisingId
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								sdk
						Node:
						(type) c
						(layer)2
							Element:p
								String
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								Recommended
								Name and version of the plugin that's calling this API method (if any)
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								session_count
						Node:
						(type) c
						(layer)2
							Element:p
								Int
						Node:
						(type) c
						(layer)2
							Element:p
								Number of times the user has played the game, defaults to 1
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								tags
						Node:
						(type) c
						(layer)2
							Element:p
								Hash
						Node:
						(type) c
						(layer)2
							Element:p
								Custom tags for the player. Only support string key value pairs. Does not support arrays or other nested objects. Example:
							Element:code
								{"foo":"bar","this":"that"}
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								amount_spent
						Node:
						(type) c
						(layer)2
							Element:p
								String
						Node:
						(type) c
						(layer)2
							Element:p
								Amount the user has spent in USD, up to two decimal places
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								created_at
						Node:
						(type) c
						(layer)2
							Element:p
								Int
						Node:
						(type) c
						(layer)2
							Element:p
								Unixtime when the player joined the game
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								playtime
						Node:
						(type) c
						(layer)2
							Element:p
								Int
						Node:
						(type) c
						(layer)2
							Element:p
								Seconds player was running your app.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								badge_count
						Node:
						(type) c
						(layer)2
							Element:p
								Int
						Node:
						(type) c
						(layer)2
							Element:p
								Current iOS badge count displayed on the app icon
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								last_active
						Node:
						(type) c
						(layer)2
							Element:p
								Int
						Node:
						(type) c
						(layer)2
							Element:p
								Unixtime when the player was last active
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								notification_types
						Node:
						(type) c
						(layer)2
							Element:p
								Int
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								1
								= subscribed
							Element:br
							Element:code
								-2
								= unsubscribed
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								iOS
								- These values are set each time the user opens the app from the SDK. Use the SDK function set Subscription instead.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								Android
								- You may set this but you can no longer use the SDK method setSubscription later in your app as it will create synchronization issues.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								test_type
						Node:
						(type) c
						(layer)2
							Element:p
								Int
						Node:
						(type) c
						(layer)2
							Element:p
								This is used in deciding whether to use your iOS Sandbox or Production push certificate when sending a push when both have been uploaded. Set to the iOS provisioning profile that was used to build your app.
							Element:br
							Element:code
								1
								= Development
							Element:br
							Element:code
								2
								= Ad-Hoc
							Element:br
								Omit this field for App Store builds.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								long
						Node:
						(type) c
						(layer)2
							Element:p
								Double
						Node:
						(type) c
						(layer)2
							Element:p
								Longitude of the device, used for geotagging to segment on.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								lat
						Node:
						(type) c
						(layer)2
							Element:p
								Double
						Node:
						(type) c
						(layer)2
							Element:p
								Latitude of the device, used for geotagging to segment on.
						Node:
						(type) h2
						(layer)2
							Element:h2
								Example Code - Add a device
							Element:a
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:a
								Shell
							Element:li
							Element:a
								PHP
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
							Element:span
								curl
							Element:span
								--include
								\
							Element:span
								--request
								POST \
							Element:span
								--header
							Element:span
								"Content-Type: application/json"
								\
							Element:span
								--data-binary
							Element:span
								"{\"app_id\" : \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\",
								\"identifier\":\"ce777617da7f548fe7a9ab6febb56cf39fba6d382000c0395666288d961ee566\", \"language\":\"en\", \"timezone\":-28800, \"game_version\":\"
							Element:span
								1
								.0\", \"device_os\":\"
							Element:span
								7
								.0.4\", \"device_type\":0, \"device_model\":\"iPhone
							Element:span
								8
								,2\", \"tags\":{\"a\":\"
							Element:span
								1
								\",\"foo\":\"bar\"}
							Element:span
								}
							Element:span
								" \
							Element:span
								https://onesignal.com/api/v1/players
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
							Element:span
								<?PHP
							Element:span
								$fields
							Element:span
								=
							Element:span
								array
								(
							Element:span
								'app_id'
							Element:span
								=>
							Element:span
								"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
								,
							Element:span
								'identifier'
							Element:span
								=>
							Element:span
								"ce777617da7f548fe7a9ab6febb56cf39fba6d382000c0395666288d961ee566"
								,
							Element:span
								'language'
							Element:span
								=>
							Element:span
								"en"
								,
							Element:span
								'timezone'
							Element:span
								=>
							Element:span
								"-28800"
								,
							Element:span
								'game_version'
							Element:span
								=>
							Element:span
								"1.0"
								,
							Element:span
								'device_os'
							Element:span
								=>
							Element:span
								"9.1.3"
								,
							Element:span
								'device_type'
							Element:span
								=>
							Element:span
								"0"
								,
							Element:span
								'device_model'
							Element:span
								=>
							Element:span
								"iPhone 8,2"
								,
							Element:span
								'tags'
							Element:span
								=>
							Element:span
								array
								(
							Element:span
								"foo"
							Element:span
								=>
							Element:span
								"bar"
								) );
							Element:span
								$fields
							Element:span
								=
							Element:span
								json_encode
								(
							Element:span
								$fields
								);
							Element:span
								print
								(
							Element:span
								"\nJSON sent:\n"
								);
							Element:span
								print
								(
							Element:span
								$fields
								);
							Element:span
								$ch
							Element:span
								=
							Element:span
								curl_init
								();
							Element:span
								curl_setopt
								(
							Element:span
								$ch
								,
							Element:span
								CURLOPT_URL
								,
							Element:span
								"https://onesignal.com/api/v1/players"
								);
							Element:span
								curl_setopt
								(
							Element:span
								$ch
								,
							Element:span
								CURLOPT_HTTPHEADER
								,
							Element:span
								array
								(
							Element:span
								'Content-Type: application/json'
								));
							Element:span
								curl_setopt
								(
							Element:span
								$ch
								,
							Element:span
								CURLOPT_RETURNTRANSFER
								,
							Element:span
								TRUE
								);
							Element:span
								curl_setopt
								(
							Element:span
								$ch
								,
							Element:span
								CURLOPT_HEADER
								,
							Element:span
								FALSE
								);
							Element:span
								curl_setopt
								(
							Element:span
								$ch
								,
							Element:span
								CURLOPT_POST
								,
							Element:span
								TRUE
								);
							Element:span
								curl_setopt
								(
							Element:span
								$ch
								,
							Element:span
								CURLOPT_POSTFIELDS
								,
							Element:span
								$fields
								);
							Element:span
								curl_setopt
								(
							Element:span
								$ch
								,
							Element:span
								CURLOPT_SSL_VERIFYPEER
								,
							Element:span
								FALSE
								);
							Element:span
								$response
							Element:span
								=
							Element:span
								curl_exec
								(
							Element:span
								$ch
								);
							Element:span
								curl_close
								(
							Element:span
								$ch
								);
							Element:span
								$return
								[
							Element:span
								"allresponses"
								]
							Element:span
								=
							Element:span
								$response
								;
							Element:span
								$return
							Element:span
								=
							Element:span
								json_encode
								(
							Element:span
								$return
								);
							Element:span
								print
								(
							Element:span
								"\n\nJSON received:\n"
								);
							Element:span
								print
								(
							Element:span
								$return
								);
							Element:span
								print
								(
							Element:span
								"\n"
								);
							Element:span
								?>
						Node:
						(type) h2
						(layer)2
							Element:h2
								Result Format - Add a device
							Element:a
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:a
								200 OK
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
								{
							Element:span
								"success"
								:
							Element:span
								true
								,
							Element:span
								"id"
								:
							Element:span
								"ffffb794-ba37-11e3-8077-031d62f86ebf"
								}
						Node:
						(type) c
						(layer)2
							Element:a
						Node:
						(type) h2
						(layer)2
							Element:h2
								Edit device
						Node:
						(type) c
						(layer)2
							Element:p
								Update an existing device in one of your OneSignal apps
						Node:
						(type) c
						(layer)2
							Element:span
								put
								https://
						Node:
						(type) c
						(layer)2
							Element:span
							Element:span
								onesignal.com/api/v1
							Element:span
								/players/
							Element:span
								id
						Node:
						(type) c
						(layer)2
							Element:h3
							Element:i
								Warning - Web / Mobile SDK
						Node:
						(type) c
						(layer)2
							Element:p
								Instead of using this REST API call we recommend using our
							Element:a
								Mobile / Web SDK methods
								. Changes values with this REST API call may create synchronization issues with the SDK.
						Node:
						(type) h2
						(layer)2
							Element:h2
								Path Parameters
								Parameter Type Description
							Element:a
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								id
						Node:
						(type) c
						(layer)2
							Element:p
								String
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								Required
								The device's OneSignal ID
						Node:
						(type) h2
						(layer)2
							Element:h2
								Body Parameters
								Parameter Type Description
							Element:a
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								app_id
						Node:
						(type) c
						(layer)2
							Element:p
								String
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								Required
								Your OneSignal App Id found in
							Element:a
								Keys & IDs
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								identifier
						Node:
						(type) c
						(layer)2
							Element:p
								String
						Node:
						(type) c
						(layer)2
							Element:p
								Push notification identifier from Google or Apple. For Apple push identifiers, you must strip all non alphanumeric characters. Example:
							Element:code
								ce777617da7f548fe7a9ab6febb56
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								language
						Node:
						(type) c
						(layer)2
							Element:p
								String
						Node:
						(type) c
						(layer)2
							Element:p
								Language code. Typically lower case two letters, except for Chinese where it must be one of
							Element:code
								zh-Hans
								or
							Element:code
								zh-Hant
								. Example:
							Element:code
								en
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								timezone
						Node:
						(type) c
						(layer)2
							Element:p
								Int
						Node:
						(type) c
						(layer)2
							Element:p
								Number of seconds away from UTC. Example:
							Element:code
								-28800
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								game_version
						Node:
						(type) c
						(layer)2
							Element:p
								String
						Node:
						(type) c
						(layer)2
							Element:p
								Version of your app. Example:
							Element:code
								1.1
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								device_model
						Node:
						(type) c
						(layer)2
							Element:p
								String
						Node:
						(type) c
						(layer)2
							Element:p
								Device make and model. Example:
							Element:code
								iPhone5,1
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								device_os
						Node:
						(type) c
						(layer)2
							Element:p
								String
						Node:
						(type) c
						(layer)2
							Element:p
								Device operating system version. Example:
							Element:code
								7.0.4
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								ad_id
						Node:
						(type) c
						(layer)2
							Element:p
								String
						Node:
						(type) c
						(layer)2
							Element:p
								The ad id for the device's platform:
							Element:br
								Android =
							Element:code
								Advertising Id
							Element:br
								iOS =
							Element:code
								identifierForVendor
							Element:br
								WP8.0 =
							Element:code
								DeviceUniqueId
							Element:br
								WP8.1 =
							Element:code
								AdvertisingId
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								sdk
						Node:
						(type) c
						(layer)2
							Element:p
								String
						Node:
						(type) c
						(layer)2
							Element:p
								Name and version of the sdk/plugin that's calling this API method (if any)
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								session_count
						Node:
						(type) c
						(layer)2
							Element:p
								Int
						Node:
						(type) c
						(layer)2
							Element:p
								Number of times the user has played the game, defaults to 1
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								tags
						Node:
						(type) c
						(layer)2
							Element:p
								Hash
						Node:
						(type) c
						(layer)2
							Element:p
								Custom tags for the player. Only support string key value pairs. Does not support arrays or other nested objects. Example:
							Element:code
								{"foo":"bar","this":"that"}
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								amount_spent
						Node:
						(type) c
						(layer)2
							Element:p
								String
						Node:
						(type) c
						(layer)2
							Element:p
								Amount the user has spent in USD, up to two decimal places
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								created_at
						Node:
						(type) c
						(layer)2
							Element:p
								Int
						Node:
						(type) c
						(layer)2
							Element:p
								Unixtime when the player joined the game
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								playtime
						Node:
						(type) c
						(layer)2
							Element:p
								Int
						Node:
						(type) c
						(layer)2
							Element:p
								Seconds player was running your app.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								badge_count
						Node:
						(type) c
						(layer)2
							Element:p
								Int
						Node:
						(type) c
						(layer)2
							Element:p
								Current iOS badge count displayed on the app icon
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								last_active
						Node:
						(type) c
						(layer)2
							Element:p
								Int
						Node:
						(type) c
						(layer)2
							Element:p
								Unixtime when the player was last active
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								notification_types
						Node:
						(type) c
						(layer)2
							Element:p
								Int
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								1
								= subscribed
							Element:br
							Element:code
								-2
								= unsubscribed
						Node:
						(type) c
						(layer)2
							Element:p
								iOS - These values are set each time the user opens the app from the SDK. Use the SDK function set Subscription instead.
						Node:
						(type) c
						(layer)2
							Element:p
								Android - You may set this but you can no longer use the SDK method setSubscription later in your app as it will create synchronization issues.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								test_type
						Node:
						(type) c
						(layer)2
							Element:p
								Int
						Node:
						(type) c
						(layer)2
							Element:p
								This is used in deciding whether to use your iOS Sandbox or Production push certificate when sending a push when both have been uploaded. Set to the iOS provisioning profile that was used to build your app.
							Element:br
							Element:code
								1
								= Development
							Element:br
							Element:code
								2
								= Ad-Hoc
							Element:br
								Omit this field for App Store builds.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								long
						Node:
						(type) c
						(layer)2
							Element:p
								Double
						Node:
						(type) c
						(layer)2
							Element:p
								Longitude of the device, used for geotagging to segment on.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								lat
						Node:
						(type) c
						(layer)2
							Element:p
								Double
						Node:
						(type) c
						(layer)2
							Element:p
								Latitude of the device, used for geotagging to segment on.
						Node:
						(type) c
						(layer)2
							Element:h3
							Element:i
								Deleting Tags
						Node:
						(type) c
						(layer)2
							Element:p
								To delete a tag,
							Element:em
								include
								its key and
							Element:em
								set its value to blank
								. Omitting a key/value will not delete it.
						Node:
						(type) c
						(layer)2
							Element:p
								For example, if I wanted to delete two existing tanks
							Element:code
								rank
								and
							Element:code
								category
								while simultaneously adding a new tag
							Element:code
								class
								, the
							Element:code
								tags
								JSON would look like the following:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								"tags": { "rank": "", "category": "", "class": "my_new_value" }
						Node:
						(type) h2
						(layer)2
							Element:h2
								Example Code - Edit device
							Element:a
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:a
								Shell
							Element:li
							Element:a
								PHP
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
							Element:span
								curl
							Element:span
								--include
								\
							Element:span
								--request
								PUT \
							Element:span
								--header
							Element:span
								"Content-Type: application/json"
								\
							Element:span
								--data-binary
							Element:span
								"{\"app_id\" : \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\",
								\"language\":\"es\", \"timezone\":-28800, \"game_version\":\"
							Element:span
								1
								.0\", \"device_os\":\"
							Element:span
								7
								.0.4\", \"device_type\":0, \"device_model\":\"iPhone\", \"tags\":{\"a\":\"
							Element:span
								1
								\",\"foo\":\"\"}
							Element:span
								}
							Element:span
								" \
							Element:span
								https://onesignal.com/api/v1/players/:id
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
							Element:span
								<?PHP
							Element:span
								$playerID
							Element:span
								=
							Element:span
								'8dee0e23-410d-4a9a-b8ce-bfe4c5257ccc'
								;
							Element:span
								$fields
							Element:span
								=
							Element:span
								array
								(
							Element:span
								'app_id'
							Element:span
								=>
							Element:span
								'02b297e7-abb5-4e7e-9c2a-9ce7e2c82ff5'
								,
							Element:span
								'tags'
							Element:span
								=>
							Element:span
								array
								(
							Element:span
								'OneSignal_Example_Tag'
							Element:span
								=>
							Element:span
								'YES'
								) );
							Element:span
								$fields
							Element:span
								=
							Element:span
								json_encode
								(
							Element:span
								$fields
								);
							Element:span
								$ch
							Element:span
								=
							Element:span
								curl_init
								();
							Element:span
								curl_setopt
								(
							Element:span
								$ch
								,
							Element:span
								CURLOPT_URL
								,
							Element:span
								'https://onesignal.com/api/v1/players/'
								.
							Element:span
								$playerID
								);
							Element:span
								curl_setopt
								(
							Element:span
								$ch
								,
							Element:span
								CURLOPT_HTTPHEADER
								,
							Element:span
								array
								(
							Element:span
								'Content-Type: application/json'
								));
							Element:span
								curl_setopt
								(
							Element:span
								$ch
								,
							Element:span
								CURLOPT_RETURNTRANSFER
								,
							Element:span
								true
								);
							Element:span
								curl_setopt
								(
							Element:span
								$ch
								,
							Element:span
								CURLOPT_HEADER
								,
							Element:span
								false
								);
							Element:span
								curl_setopt
								(
							Element:span
								$ch
								,
							Element:span
								CURLOPT_CUSTOMREQUEST
								,
							Element:span
								"PUT"
								);
							Element:span
								curl_setopt
								(
							Element:span
								$ch
								,
							Element:span
								CURLOPT_POSTFIELDS
								,
							Element:span
								$fields
								);
							Element:span
								curl_setopt
								(
							Element:span
								$ch
								,
							Element:span
								CURLOPT_SSL_VERIFYPEER
								,
							Element:span
								false
								);
							Element:span
								$response
							Element:span
								=
							Element:span
								curl_exec
								(
							Element:span
								$ch
								);
							Element:span
								curl_close
								(
							Element:span
								$ch
								);
							Element:span
								$resultData
							Element:span
								=
							Element:span
								json_decode
								(
							Element:span
								$response
								,
							Element:span
								true
								);
							Element:span
								echo
							Element:span
								$resultData
								;
							Element:span
								?>
						Node:
						(type) h2
						(layer)2
							Element:h2
								Result Format - Edit device
							Element:a
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:a
								200 OK
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
								{
							Element:span
								"success"
								:
							Element:span
								true
								}
						Node:
						(type) c
						(layer)2
							Element:a
						Node:
						(type) h2
						(layer)2
							Element:h2
								New session
						Node:
						(type) c
						(layer)2
							Element:p
								Update a device's session information
						Node:
						(type) c
						(layer)2
							Element:span
								post
								https://
						Node:
						(type) c
						(layer)2
							Element:span
							Element:span
								onesignal.com/api/v1
							Element:span
								/players/
							Element:span
								id
							Element:span
								/on_session
						Node:
						(type) c
						(layer)2
							Element:p
								This method should be called when a device opens your app after they are already registered. This method will automatically increment the player's
							Element:code
								session_count
								, and should also be used to update any fields that may have changed (such as language or timezone).
						Node:
						(type) c
						(layer)2
							Element:h3
							Element:i
								Requires Authentication Key
						Node:
						(type) c
						(layer)2
							Element:p
								Requires your OneSignal User Auth Key, available in
							Element:a
								Keys & IDs
								.
						Node:
						(type) h2
						(layer)2
							Element:h2
								Body Parameters
								Parameter Type Description
							Element:a
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								identifier
						Node:
						(type) c
						(layer)2
							Element:p
								String
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								Recommended
								Push notification identifier from Google or Apple. For Apple push identifiers, you must strip all non alphanumeric characters. Example:
							Element:code
								ce777617da7f548fe7a9ab6febb56
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								language
						Node:
						(type) c
						(layer)2
							Element:p
								String
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								Recommended
								Language code. Typically lower case two letters, except for Chinese where it must be one of
							Element:code
								zh-Hans
								or
							Element:code
								zh-Hant
								. Example:
							Element:code
								en
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								timezone
						Node:
						(type) c
						(layer)2
							Element:p
								Int
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								Recommended
								Number of seconds away from UTC. Example:
							Element:code
								-28800
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								game_version
						Node:
						(type) c
						(layer)2
							Element:p
								String
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								Recommended
								Version of your app. Example:
							Element:code
								1.1
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								device_os
						Node:
						(type) c
						(layer)2
							Element:p
								String
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								Recommended
								Device operating system version. Example:
							Element:code
								7.0.4
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								ad_id
						Node:
						(type) c
						(layer)2
							Element:p
								String
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								Recommended
								The ad id for the device's platform:
							Element:br
								Android =
							Element:code
								Advertising Id
							Element:br
								iOS =
							Element:code
								identifierForVendor
							Element:br
								WP8.0 =
							Element:code
								DeviceUniqueId
							Element:br
								WP8.1 =
							Element:code
								AdvertisingId
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								sdk
						Node:
						(type) c
						(layer)2
							Element:p
								String
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								Recommended
								Name and version of sdk/plugin that's calling this method.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								tags
						Node:
						(type) c
						(layer)2
							Element:p
								Object
						Node:
						(type) c
						(layer)2
							Element:p
								Custom tags for the player. Only support string key value pairs. Does not support arrays or other nested objects. Example:
							Element:code
								{"foo":"bar","this":"that"}
						Node:
						(type) h2
						(layer)2
							Element:h2
								Example Code - New session
							Element:a
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:a
								Shell
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
							Element:span
								curl
							Element:span
								--include
								\
							Element:span
								--request
								POST \
							Element:span
								--header
							Element:span
								"Content-Type: application/json"
								\
							Element:span
								--data-binary
							Element:span
								"{\"language\":\"es\",
								\"timezone\":-28800, \"game_version\":\"
							Element:span
								1
								.0\", \"device_os\":\"
							Element:span
								7
								.0.4\"}
							Element:span
								" \
							Element:span
								https://onesignal.com/api/v1/players/:id/on_session
						Node:
						(type) h2
						(layer)2
							Element:h2
								Result Format - New session
							Element:a
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:a
								200 OK
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
								{
							Element:span
								"success"
								:
							Element:span
								true
								}
						Node:
						(type) c
						(layer)2
							Element:a
						Node:
						(type) h2
						(layer)2
							Element:h2
								New purchase
						Node:
						(type) c
						(layer)2
							Element:p
								Track a new purchase in your app
						Node:
						(type) c
						(layer)2
							Element:span
								post
								https://
						Node:
						(type) c
						(layer)2
							Element:span
							Element:span
								onesignal.com/api/v1
							Element:span
								/players/
							Element:span
								id
							Element:span
								/on_purchase
						Node:
						(type) c
						(layer)2
							Element:p
								This will increment the player's
							Element:code
								amount_spent
								.
						Node:
						(type) h2
						(layer)2
							Element:h2
								Body Parameters
								Parameter Type Description
							Element:a
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								purchases
						Node:
						(type) c
						(layer)2
							Element:p
								Array
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								Required
								An array of purchases, each with the properties listed below.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								purchases[sku]
						Node:
						(type) c
						(layer)2
							Element:p
								String
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								Required
								The unique identifier of the purchased item.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								purchases[amount]
						Node:
						(type) c
						(layer)2
							Element:p
								Double
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								Required
								The amount, in USD, spent purchasing the item.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								purchases[iso]
						Node:
						(type) c
						(layer)2
							Element:p
								String
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								Required
								The 3-letter
							Element:a
								ISO 4217
								currency code. Required for correct storage and conversion of amount.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								existing
						Node:
						(type) c
						(layer)2
							Element:p
								Boolean
						Node:
						(type) c
						(layer)2
							Element:p
								Pass true on the first run of your app if you're tracking existing non-consumable purchases. This prevents tracking the same purchases more than once if the user re-installs your app.
						Node:
						(type) h2
						(layer)2
							Element:h2
								Example Code - New purchase
							Element:a
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:a
								cURL
							Element:li
							Element:a
								Purchase Format
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
							Element:span
								curl
							Element:span
								--include
								\
							Element:span
								--request
								POST \
							Element:span
								--header
							Element:span
								"Content-Type: application/json"
								\
							Element:span
								--data-binary
							Element:span
								"{\"purchases\": [{\"sku\": \"SKU123\", \"iso\": \"USD\", \"amount\": \"0.99\"}]}"
								\ https://onesignal.com/api/v1/players/:id/on_purchase
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
								{
							Element:span
								"purchases"
								: [{
							Element:span
								"sku"
								:
							Element:span
								"SKU123"
								,
							Element:span
								"iso"
								:
							Element:span
								"USD"
								,
							Element:span
								"amount"
								:
							Element:span
								"0.99"
								}] }
						Node:
						(type) h2
						(layer)2
							Element:h2
								Result Format - New purchase
							Element:a
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:a
								200 OK
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
								{
							Element:span
								"success"
								:
							Element:span
								true
								}
						Node:
						(type) c
						(layer)2
							Element:a
						Node:
						(type) h2
						(layer)2
							Element:h2
								Increment session length
						Node:
						(type) c
						(layer)2
							Element:p
								Update a device's session length upon app resuming
						Node:
						(type) c
						(layer)2
							Element:span
								post
								https://
						Node:
						(type) c
						(layer)2
							Element:span
							Element:span
								onesignal.com/api/v1
							Element:span
								/players/
							Element:span
								id
							Element:span
								/on_focus
						Node:
						(type) c
						(layer)2
							Element:p
								Call this method when the app is resumed or placed into from standby.
						Node:
						(type) c
						(layer)2
							Element:p
								The active_time field should be set to the duration between the last on_focus call since the app was opened. If no previous on_focus was called, then the duration should be either the time since POST
							Element:code
								/players/:id/on_session
								or POST
							Element:code
								/players
								were called.
						Node:
						(type) h2
						(layer)2
							Element:h2
								Body Parameters
								Parameter Type Description
							Element:a
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								state
						Node:
						(type) c
						(layer)2
							Element:p
								String
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								Required
								Set to "ping"
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								active_time
						Node:
						(type) c
						(layer)2
							Element:p
								Int
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								Required
								The lesser of: The number of seconds since either: 1. on_focus was last called OR 2. on_session or the device first registered (POST /players)
						Node:
						(type) h2
						(layer)2
							Element:h2
								Example Code - Increment session length
							Element:a
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:a
								Shell
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
							Element:span
								curl
							Element:span
								--include
								\
							Element:span
								--request
								POST \
							Element:span
								--header
							Element:span
								"Content-Type: application/json"
								\
							Element:span
								--data-binary
							Element:span
								"{\"state\": \"ping\",
								\"active_time\":
							Element:span
								60
								}
							Element:span
								" \
							Element:span
								https://onesignal.com/api/v1/players/:id/on_focus
						Node:
						(type) h2
						(layer)2
							Element:h2
								Result Format - Increment session length
							Element:a
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:a
								200 OK
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
								{
							Element:span
								"success"
								:
							Element:span
								true
								}
						Node:
						(type) c
						(layer)2
							Element:a
						Node:
						(type) h2
						(layer)2
							Element:h2
								CSV export
						Node:
						(type) c
						(layer)2
							Element:p
								Generate a compressed CSV export of all of your current user data
						Node:
						(type) c
						(layer)2
							Element:span
								post
								https://
						Node:
						(type) c
						(layer)2
							Element:span
							Element:span
								onesignal.com/api/v1
							Element:span
								/players/csv_export?app_id=
							Element:span
								app_id
						Node:
						(type) c
						(layer)2
							Element:p
								This method can be used to generate a compressed CSV export of all of your current user data. It is a much faster alternative than retrieving this data using the ./players API endpoint.
						Node:
						(type) c
						(layer)2
							Element:p
								You can test if it is complete by making a GET request to the csv_file_url value. If the file is not ready, a 404 error will be returned. Otherwise the file itself will be returned.
						Node:
						(type) c
						(layer)2
							Element:p
								The file will be compressed using GZip.
						Node:
						(type) c
						(layer)2
							Element:p
								The file may take several minutes to generate depending on the number of users in your app.
						Node:
						(type) c
						(layer)2
							Element:h3
							Element:i
								Requires Authentication Key
						Node:
						(type) c
						(layer)2
							Element:p
								Requires your OneSignal App Auth Key, available in
							Element:a
								Keys & IDs
								.
						Node:
						(type) h2
						(layer)2
							Element:h2
								Query Parameters
								Parameter Type Description
							Element:a
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								app_id
						Node:
						(type) c
						(layer)2
							Element:p
								String
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								Required
								The app ID that you want to export devices from
						Node:
						(type) h2
						(layer)2
							Element:h2
								Body Parameters
							Element:a
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								extra_fields
						Node:
						(type) c
						(layer)2
							Element:p
								Array of Strings
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								iOS
							Element:span
								Android
							Element:br
								Additional fields that you wish to include. Currently supports
							Element:code
								location
								,
							Element:code
								country
								, and
							Element:code
								rooted
								.
						Node:
						(type) h2
						(layer)2
							Element:h2
								Example Code - CSV export
							Element:a
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:a
								cURL
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
							Element:span
								curl
							Element:span
								-X
								POST
							Element:span
								-H
							Element:span
								"Authorization: Basic <YOUR-APP-REST-API-KEY>"
							Element:span
								-H
							Element:span
								"Content-Type: application/json"
							Element:span
								-d
							Element:span
								'{
							Element:span
								"extra_fields"
								: [
							Element:span
								"location"
								,
							Element:span
								"rooted"
								] }
							Element:span
								' "https://onesignal.com/api/v1/players/csv_export?app_id=<YOUR-APP-ID>"
						Node:
						(type) h2
						(layer)2
							Element:h2
								Result Format - CSV export
							Element:a
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:a
								200 OK
							Element:li
							Element:a
								400 Bad Request
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
								{
							Element:span
								"csv_file_url"
								:
							Element:span
								"https://onesignal.com/csv_exports/b2f7f966-d8cc-11e4-bed1-df8f05be55ba/users_184948440ec0e334728e87228011ff41_2015-11-10.csv.gz"
								}
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
								{}
						Node:
						(type) c
						(layer)2
							Element:a
						Node:
						(type) h2
						(layer)2
							Element:h2
								View notification
						Node:
						(type) c
						(layer)2
							Element:p
								View the details of a single notification
						Node:
						(type) c
						(layer)2
							Element:span
								get
								https://
						Node:
						(type) c
						(layer)2
							Element:span
							Element:span
								onesignal.com/api/v1
							Element:span
								/notifications/
							Element:span
								id
							Element:span
								?app_id=
							Element:span
								app_id
						Node:
						(type) c
						(layer)2
							Element:h3
							Element:i
								Requires Authentication Key
						Node:
						(type) c
						(layer)2
							Element:p
								Requires your OneSignal User Auth Key, available in
							Element:a
								Keys & IDs
								.
						Node:
						(type) h2
						(layer)2
							Element:h2
								Path Parameters
								Parameter Type Description
							Element:a
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								id
						Node:
						(type) c
						(layer)2
							Element:p
								String
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								Required
								Notification ID
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								app_id
						Node:
						(type) c
						(layer)2
							Element:p
								String
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								Required
								App ID
						Node:
						(type) h2
						(layer)2
							Element:h2
								Example Code - View notification
							Element:a
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:a
								Shell
							Element:li
							Element:a
								PHP
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
							Element:span
								curl
							Element:span
								--include
								\
							Element:span
								--header
							Element:span
								"Authorization: Basic NGEwMGZmMjItY2NkNy0xMWUzLTk5ZDUtMDAwYzI5NDBlNjJj"
								\ https://onesignal.com/api/v1/notifications/{notificationId}
							Element:span
								?app_id
							Element:span
								=
								{appId}
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
							Element:span
								<?PHP
							Element:span
								$ch
							Element:span
								=
							Element:span
								curl_init
								();
							Element:span
								curl_setopt
								(
							Element:span
								$ch
								,
							Element:span
								CURLOPT_URL
								,
							Element:span
								"https://onesignal.com/api/v1/notifications/YOUR_NOTIFICATION_ID?app_id=YOUR_APP_ID"
								);
							Element:span
								curl_setopt
								(
							Element:span
								$ch
								,
							Element:span
								CURLOPT_HTTPHEADER
								,
							Element:span
								array
								(
							Element:span
								'Content-Type: application/json'
								,
							Element:span
								'Authorization: Basic AUTH_KEY'
								));
							Element:span
								curl_setopt
								(
							Element:span
								$ch
								,
							Element:span
								CURLOPT_RETURNTRANSFER
								,
							Element:span
								TRUE
								);
							Element:span
								curl_setopt
								(
							Element:span
								$ch
								,
							Element:span
								CURLOPT_HEADER
								,
							Element:span
								FALSE
								);
							Element:span
								curl_setopt
								(
							Element:span
								$ch
								,
							Element:span
								CURLOPT_SSL_VERIFYPEER
								,
							Element:span
								FALSE
								);
							Element:span
								$response
							Element:span
								=
							Element:span
								curl_exec
								(
							Element:span
								$ch
								);
							Element:span
								curl_close
								(
							Element:span
								$ch
								);
							Element:span
								$return
								[
							Element:span
								"allresponses"
								]
							Element:span
								=
							Element:span
								$response
								;
							Element:span
								$return
							Element:span
								=
							Element:span
								json_encode
								(
							Element:span
								$return
								);
							Element:span
								print
								(
							Element:span
								"\n\nJSON received:\n"
								);
							Element:span
								print
								(
							Element:span
								$return
								);
							Element:span
								print
								(
							Element:span
								"\n"
								);
							Element:span
								?>
						Node:
						(type) c
						(layer)2
							Element:h3
								Returned Fields
							Element:a
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:code
								remaining
								- Number of notifications that have not been sent out yet. This can mean either our system is still processing the notification or you have delayed options set.
							Element:li
							Element:code
								failed
								- Number of notifications that could not be delivered due to an error. You can find more information by viewing the notification in the dashboard.
							Element:li
							Element:code
								converted
								- Number of users who have clicked / tapped on your notification.
						Node:
						(type) h2
						(layer)2
							Element:h2
								Result Format - View notification
							Element:a
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:a
								200 OK
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
								{
							Element:span
								"id"
								:
							Element:span
								"481a2734-6b7d-11e4-a6ea-4b53294fa671"
								,
							Element:span
								"successful"
								:
							Element:span
								15
								,
							Element:span
								"failed"
								:
							Element:span
								1
								,
							Element:span
								"converted"
								:
							Element:span
								3
								,
							Element:span
								"remaining"
								:
							Element:span
								0
								,
							Element:span
								"queued_at"
								:
							Element:span
								1415914655
								,
							Element:span
								"send_after"
								:
							Element:span
								1415914655
								,
							Element:span
								"url"
								:
							Element:span
								"https://yourWebsiteToOpen.com"
								,
							Element:span
								"data"
								:{
							Element:span
								"foo"
								:
							Element:span
								"bar"
								,
							Element:span
								"your"
								:
							Element:span
								"custom metadata"
								},
							Element:span
								"canceled"
								:
							Element:span
								false
								,
							Element:span
								"headings"
								:{
							Element:span
								"en"
								:
							Element:span
								"English and default langauge heading"
								,
							Element:span
								"es"
								:
							Element:span
								"Spanish language heading"
								},
							Element:span
								"contents"
								:{
							Element:span
								"en"
								:
							Element:span
								"English language content"
								,
							Element:span
								"es"
								:
							Element:span
								"Hola"
								} }
						Node:
						(type) c
						(layer)2
							Element:a
						Node:
						(type) h2
						(layer)2
							Element:h2
								View notifications
						Node:
						(type) c
						(layer)2
							Element:p
								View the details of multiple notifications
						Node:
						(type) c
						(layer)2
							Element:span
								get
								https://
						Node:
						(type) c
						(layer)2
							Element:span
							Element:span
								onesignal.com/api/v1
							Element:span
								/notifications?app_id=
							Element:span
								app_id
							Element:span
								&limit=
							Element:span
								limit
							Element:span
								&offset=
							Element:span
								offset
						Node:
						(type) c
						(layer)2
							Element:h3
							Element:i
								Requires Authentication Key
						Node:
						(type) c
						(layer)2
							Element:p
								Requires your OneSignal App Auth Key, available in
							Element:a
								Keys & IDs
								.
						Node:
						(type) h2
						(layer)2
							Element:h2
								Path Parameters
								Parameter Type Description
							Element:a
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								app_id
						Node:
						(type) c
						(layer)2
							Element:p
								String
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								Required
								The app ID that you want to view notifications from
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								limit
						Node:
						(type) c
						(layer)2
							Element:p
								String
						Node:
						(type) c
						(layer)2
							Element:p
								How many notifications to return. Max is 50. Default is 50
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								offset
						Node:
						(type) c
						(layer)2
							Element:p
								String
						Node:
						(type) c
						(layer)2
							Element:p
								Result offset. Default is 0. Results are sorted by queued_at in descending order. queued_at is the unixtime representation of the time that the notification was queued.
						Node:
						(type) h2
						(layer)2
							Element:h2
								Example Code - View notifications
							Element:a
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:a
								cURL
							Element:li
							Element:a
								PHP
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
							Element:span
								curl
							Element:span
								--include
								\
							Element:span
								--header
							Element:span
								"Authorization: Basic NGEwMGZmMjItY2NkNy0xMWUzLTk5ZDUtMDAwYzI5NDBlNjJj"
								\ https://onesignal.com/api/v1/notifications
							Element:span
								?app_id
							Element:span
								=
								{appId}
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
							Element:span
								<?PHP
							Element:span
								$curl
							Element:span
								=
							Element:span
								curl_init
								();
							Element:span
								curl_setopt_array
								(
							Element:span
								$curl
								,
							Element:span
								array
								(
							Element:span
								CURLOPT_URL
							Element:span
								=>
							Element:span
								"https://onesignal.com/api/v1/notifications?app_id=3cb5beaa-e6ca-5932-aad9-fdabaa3b83ce&limit=50&offset=0"
								,
							Element:span
								CURLOPT_RETURNTRANSFER
							Element:span
								=>
							Element:span
								true
								,
							Element:span
								CURLOPT_ENCODING
							Element:span
								=>
							Element:span
								""
								,
							Element:span
								CURLOPT_MAXREDIRS
							Element:span
								=>
							Element:span
								10
								,
							Element:span
								CURLOPT_TIMEOUT
							Element:span
								=>
							Element:span
								30
								,
							Element:span
								CURLOPT_HTTP_VERSION
							Element:span
								=>
							Element:span
								CURL_HTTP_VERSION_1_1
								,
							Element:span
								CURLOPT_CUSTOMREQUEST
							Element:span
								=>
							Element:span
								"GET"
								,
							Element:span
								CURLOPT_HTTPHEADER
							Element:span
								=>
							Element:span
								array
								(
							Element:span
								"authorization: Basic ONESIGNAL_APP_REST_API_KEY_HERE"
								, ), ));
							Element:span
								$response
							Element:span
								=
							Element:span
								curl_exec
								(
							Element:span
								$curl
								);
							Element:span
								$err
							Element:span
								=
							Element:span
								curl_error
								(
							Element:span
								$curl
								);
							Element:span
								curl_close
								(
							Element:span
								$curl
								);
							Element:span
								echo
							Element:span
								$response
								;
							Element:span
								?>
						Node:
						(type) h2
						(layer)2
							Element:h2
								Result Format - View notifications
							Element:a
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:a
								200 OK
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
								{
							Element:span
								"total_count"
								:
							Element:span
								3
								,
							Element:span
								"offset"
								:
							Element:span
								2
								,
							Element:span
								"limit"
								:
							Element:span
								2
								,
							Element:span
								"notifications"
								: [ {
							Element:span
								"id"
								:
							Element:span
								"481a2734-6b7d-11e4-a6ea-4b53294fa671"
								,
							Element:span
								"successful"
								:
							Element:span
								15
								,
							Element:span
								"failed"
								:
							Element:span
								1
								,
							Element:span
								"converted"
								:
							Element:span
								3
								,
							Element:span
								"remaining"
								:
							Element:span
								0
								,
							Element:span
								"queued_at"
								:
							Element:span
								1415914655
								,
							Element:span
								"send_after"
								:
							Element:span
								1415914655
								,
							Element:span
								"canceled"
								:
							Element:span
								false
								,
							Element:span
								"url"
								:
							Element:span
								"https://yourWebsiteToOpen.com"
								,
							Element:span
								"data"
								:
							Element:span
								null
								,
							Element:span
								"headings"
								:{
							Element:span
								"en"
								:
							Element:span
								"English and default langauge heading"
								,
							Element:span
								"es"
								:
							Element:span
								"Spanish language heading"
								},
							Element:span
								"contents"
								:{
							Element:span
								"en"
								:
							Element:span
								"English and default content"
								,
							Element:span
								"es"
								:
							Element:span
								"Hola"
								} }, {
							Element:span
								"id"
								:
							Element:span
								"b6b326a8-40aa-13e5-b91b-bf8bc3fa26f7"
								,
							Element:span
								"successful"
								:
							Element:span
								5
								,
							Element:span
								"failed"
								:
							Element:span
								2
								,
							Element:span
								"converted"
								:
							Element:span
								0
								,
							Element:span
								"remaining"
								:
							Element:span
								0
								,
							Element:span
								"queued_at"
								:
							Element:span
								1415915123
								,
							Element:span
								"send_after"
								:
							Element:span
								1415915123
								,
							Element:span
								"canceled"
								:
							Element:span
								false
								,
							Element:span
								"url"
								:
							Element:span
								nil
								,
							Element:span
								"data"
								:{
							Element:span
								"foo"
								:
							Element:span
								"bar"
								,
							Element:span
								"your"
								:
							Element:span
								"custom metadata"
								},
							Element:span
								"headings"
								:{
							Element:span
								"en"
								:
							Element:span
								"English and default langauge heading"
								,
							Element:span
								"es"
								:
							Element:span
								"Spanish language heading"
								},
							Element:span
								"contents"
								:{
							Element:span
								"en"
								:
							Element:span
								"English and default content"
								,
							Element:span
								"es"
								:
							Element:span
								"Hola"
								} } ] }
						Node:
						(type) c
						(layer)2
							Element:a
						Node:
						(type) h2
						(layer)2
							Element:h2
								Track open
						Node:
						(type) c
						(layer)2
							Element:p
								Track when users open a notification
						Node:
						(type) c
						(layer)2
							Element:span
								put
								https://
						Node:
						(type) c
						(layer)2
							Element:span
							Element:span
								onesignal.com/api/v1
							Element:span
								/notifications/
							Element:span
								id
						Node:
						(type) h2
						(layer)2
							Element:h2
								Path Parameters
								Parameter Type Description
							Element:a
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								id
						Node:
						(type) c
						(layer)2
							Element:p
								String
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								Required
								Notification id
						Node:
						(type) h2
						(layer)2
							Element:h2
								Body Parameters
								Parameter Type Description
							Element:a
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								app_id
						Node:
						(type) c
						(layer)2
							Element:p
								String
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								Required
								OneSignal app id, available in
							Element:a
								Keys & IDs
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								opened
						Node:
						(type) c
						(layer)2
							Element:p
								boolean
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								Required
								Set to
							Element:code
								true
						Node:
						(type) h2
						(layer)2
							Element:h2
								Example Code - Track open
							Element:a
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:a
								cURL
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
							Element:span
								curl
							Element:span
								--include
								\
							Element:span
								--request
								PUT \
							Element:span
								--header
							Element:span
								"Content-Type: application/json"
								\
							Element:span
								--data-binary
							Element:span
								"{\"opened\":true, \"app_id\":"
								YOUR APP ID
							Element:span
								"}"
								\ https://onesignal.com/api/v1/notifications/{notificationId}
						Node:
						(type) h2
						(layer)2
							Element:h2
								Result Format - Track open
							Element:a
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:a
								200 OK
							Element:li
							Element:a
								400 Bad Request
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
								{
							Element:span
								"success"
								:
							Element:span
								true
								}
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
								{}
