Node:
(type) c
(layer)0
	Element:article
						Node:
						(type) h2
						(layer)2
							Element:h2
								Messages endpoints
							Element:a
								¶
						Node:
						(type) c
						(layer)2
							Element:table
							Element:thead
							Element:tr
							Element:th
								Method
							Element:th
								HTTP request
							Element:th
								Description
							Element:tbody
							Element:tr
							Element:td
							Element:a
								Get all messages
							Element:td
							Element:code
								GET /conversations/:conversation_uuid/messages
							Element:td
								Get the most recent messages in a conversation
							Element:tr
							Element:td
							Element:a
								Get a message
							Element:td
							Element:code
								GET /messages/:message_uuid
							Element:td
								Get details of a single message
							Element:tr
							Element:td
							Element:a
								Send a message
							Element:td
							Element:code
								POST /conversations/:conversation_uuid/messages
							Element:td
								Send a message into the given conversation
							Element:tr
							Element:td
							Element:a
								Delete a message
							Element:td
							Element:code
								DELETE /messages/:message_uuid
							Element:td
								Delete a message
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Get all messages
										Element:a
											¶
									Node:
									(type) c
									(layer)3
										Element:p
										Element:strong
											Parameters:
									Node:
									(type) c
									(layer)3
										Element:table
										Element:thead
										Element:tr
										Element:th
											Name
										Element:th
											Type
										Element:th
											Description
										Element:tbody
										Element:tr
										Element:td
										Element:code
											page_size
										Element:td
											integer
										Element:td
										Element:em
											(optional)
											Number of messages to return; max and default of 100
										Element:tr
										Element:td
										Element:code
											from_id
										Element:td
											string
										Element:td
										Element:em
											(optional)
											Get the Messages logically sorted
										Element:em
											after
											this ID (by default, this corresponds to Messages chronologically before this ID). Can be passed as a Layer URI
										Element:q
											layer:///messages/uuid
											or simply a UUID
									Node:
									(type) c
									(layer)3
										Element:p
										Element:strong
											HTTP request:
									Node:
									(type) c
									(layer)3
										Element:span
											GET
									Node:
									(type) c
									(layer)3
										Element:b
											/conversations/:conversation_uuid/messages
									Node:
									(type) c
									(layer)3
										Element:p
										Element:strong
											Example:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											curl -X GET \ -H 'Accept: application/vnd.layer+json; version=2.0' \ -H 'Authorization: Layer session-token="<TOKEN>"'' \ -H 'Content-Type: application/json' \ https://api.layer.com/conversations/<conversation_uuid>/messages
									Node:
									(type) c
									(layer)3
										Element:p
										Element:strong
											Possible responses:
									Node:
									(type) c
									(layer)3
										Element:p
										Element:strong
											Got messages successfully
											| Status: 200 (OK)
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											[
										Element:span
											,
										Element:a
											Message
										Element:span
											]
										Element:a
											Message
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Discussion
										Element:a
											¶
									Node:
									(type) c
									(layer)3
										Element:p
											The response will include a header indicating the total number of results available to page through:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											Layer-Count: 4023
						Node:
						(type) h2
						(layer)2
							Element:h2
								The
							Element:code
								Layer-Conversation-Is-Syncing
								header
							Element:a
								¶
						Node:
						(type) c
						(layer)2
							Element:p
								If a user has just been added to a Conversation that already contains many Messages, and the application immediately requests messages for that Conversation, it is likely that no Messages or an incomplete set of Messages will be loaded from the server. The server needs to copy in the Messages of the newly added Conversation into that user’s account, and as long as that server process is running, the
							Element:code
								Layer-Conversation-Is-Syncing: true
								header will be returned in the results to indicate that more results are arriving. If you did not receive enough results, check back in a few seconds.
						Node:
						(type) c
						(layer)2
							Element:p
								When sync has been completed:
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
								The
							Element:code
								LayerCount
								header will be updated to show the actual number of Messages in the Conversation (until then, this header value may be misleading)
							Element:li
								The
							Element:code
								GET /messages
								request will not return a complete list, and may return an empty list
							Element:li
								The
							Element:code
								Layer-Conversation-Is-Syncing
								header returned by the server on all
							Element:code
								GET /messages
								requests for this Conversation will be true.
						Node:
						(type) c
						(layer)2
							Element:h3
								Get a message
							Element:a
								¶
						Node:
						(type) c
						(layer)2
							Element:p
							Element:strong
								Parameters:
						Node:
						(type) c
						(layer)2
							Element:p
								This method takes no parameters.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:strong
								HTTP request:
						Node:
						(type) c
						(layer)2
							Element:span
								GET
						Node:
						(type) c
						(layer)2
							Element:b
								/messages/:message_uuid
						Node:
						(type) c
						(layer)2
							Element:p
							Element:strong
								Example:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								curl -X GET \ -H 'Accept: application/vnd.layer+json; version=2.0' \ -H 'Authorization: Layer session-token="<TOKEN>"'' \ -H 'Content-Type: application/json' \ https://api.layer.com/messages/<message_uuid>
						Node:
						(type) c
						(layer)2
							Element:p
							Element:strong
								Possible responses:
						Node:
						(type) c
						(layer)2
							Element:p
							Element:strong
								Got message successfully
								| Status: 200 (OK)
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
							Element:a
								Message
						Node:
						(type) c
						(layer)2
							Element:h3
								Send a message
							Element:a
								¶
						Node:
						(type) c
						(layer)2
							Element:p
							Element:strong
								Parameters:
						Node:
						(type) c
						(layer)2
							Element:table
							Element:thead
							Element:tr
							Element:th
								Name
							Element:th
								Type
							Element:th
								Description
							Element:tbody
							Element:tr
							Element:td
							Element:code
								parts
							Element:td
							Element:a
								MessagePart[]
							Element:td
								Array of
							Element:a
								message parts
							Element:tr
							Element:td
							Element:code
								parts.body
							Element:td
								string
							Element:td
								Text or base64-encoded data, up to 2KB in size
							Element:tr
							Element:td
							Element:code
								parts.mime_type
							Element:td
								string
							Element:td
							Element:q
								“text/plain”
								,
							Element:q
								“image/png”
								, or other MIME type describing the message part
							Element:tr
							Element:td
							Element:code
								parts.encoding
							Element:td
								string
							Element:td
							Element:em
								(optional)
								If sending base64-encoded data, specify
							Element:q
								“base64”
								. Otherwise, omit this field
							Element:tr
							Element:td
							Element:code
								parts.content
							Element:td
							Element:a
								Content
							Element:td
							Element:em
								(optional)
								If sending
							Element:a
								Rich Content
								, use the Content object
							Element:tr
							Element:td
							Element:code
								parts.notification
							Element:td
								object
							Element:td
							Element:em
								(optional)
								See
							Element:a
								Push Notifications
								for details
							Element:tr
							Element:td
							Element:code
								id
							Element:td
								string
							Element:td
							Element:em
								(optional)
								UUID or Layer ID, used for deduplication
						Node:
						(type) c
						(layer)2
							Element:p
							Element:strong
								HTTP request:
						Node:
						(type) c
						(layer)2
							Element:span
								POST
						Node:
						(type) c
						(layer)2
							Element:b
								/conversations/:conversation_uuid/messages
						Node:
						(type) c
						(layer)2
							Element:p
							Element:strong
								Example:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								{
							Element:span
								"parts"
								: [ {
							Element:span
								"body"
								:
							Element:span
								"Hello, World!"
								,
							Element:span
								"mime_type"
								:
							Element:span
								"text/plain"
								}, {
							Element:span
								"body"
								:
							Element:span
								"YW55IGNhcm5hbCBwbGVhc3VyZQ=="
								,
							Element:span
								"mime_type"
								:
							Element:span
								"image/jpeg"
								,
							Element:span
								"encoding"
								:
							Element:span
								"base64"
								} ],
							Element:span
								"notification"
								: {
							Element:span
								"title"
								:
							Element:span
								"New Message from The Beyond"
								,
							Element:span
								"text"
								:
							Element:span
								"This is the alert text to include with the Push Notification."
								,
							Element:span
								"sound"
								:
							Element:span
								"chime.aiff"
								} }
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								curl -X POST \ -H 'Accept: application/vnd.layer+json; version=2.0' \ -H 'Authorization: Layer session-token="<TOKEN>"'' \ -H 'Content-Type: application/json' \ https://api.layer.com/conversations/<conversation_uuid>/messages\ -d '{"parts":[{"body":"Hello, World!","mime_type":"text/plain"},{"body":"YW55IGNhcm5hbCBwbGVhc3VyZQ==","mime_type":"image/jpeg","encoding":"base64"}],"notification":{"title":"New Message from The Beyond","text":"This is the alert text to include with the Push Notification.","sound":"chime.aiff"}}'
						Node:
						(type) c
						(layer)2
							Element:p
							Element:strong
								Possible responses:
						Node:
						(type) c
						(layer)2
							Element:p
							Element:strong
								Message sent successfully
								| Status: 201 (Created)
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
							Element:a
								Message
						Node:
						(type) c
						(layer)2
							Element:p
							Element:strong
								Message conflict
								| Status: 409 (Conflict)
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								{
							Element:span
								"id"
								:
							Element:span
								"id_in_use"
								,
							Element:span
								"code"
								:
							Element:span
								111
								,
							Element:span
								"message"
								:
							Element:span
								"The requested Message already exists"
								,
							Element:span
								"url"
								:
							Element:span
								"http://docs.layer.com/reference/client_api#send-a-message"
								,
							Element:span
								"data"
								:
							Element:span
								}
							Element:a
								Message
						Node:
						(type) c
						(layer)2
							Element:p
							Element:strong
								Websocket request:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								{
							Element:span
								"type"
								:
							Element:span
								"request"
								,
							Element:span
								"body"
								: {
							Element:span
								"method"
								:
							Element:span
								"Message.create"
								,
							Element:span
								"request_id"
								:
							Element:span
								"fred.flinstone.3"
								,
							Element:span
								"object_id"
								:
							Element:span
								"layer:///conversations/e67b5da2-95ca-40c4-bfc5-a2a8baaeb50f"
								,
							Element:span
								"data"
								: {
							Element:span
								"parts"
								: [ {
							Element:span
								"mime_type"
								:
							Element:span
								"text/plain"
								,
							Element:span
								"body"
								:
							Element:span
								"This is the message."
								}, {
							Element:span
								"mime_type"
								:
							Element:span
								"image/png"
								,
							Element:span
								"content"
								: {
							Element:span
								"id"
								:
							Element:span
								"layer:///content/7a0aefb8-3c97-11e4-baad-164230d1df67"
								,
							Element:span
								"size"
								:
							Element:span
								172114124
								} } ],
							Element:span
								"notification"
								: {
							Element:span
								"title"
								:
							Element:span
								"The Uprising"
								,
							Element:span
								"text"
								:
							Element:span
								"All rise, its a Message!"
								,
							Element:span
								"sound"
								:
							Element:span
								"salute.aiff"
								} } } }
						Node:
						(type) c
						(layer)2
							Element:p
							Element:strong
								Success
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								{
							Element:span
								"name"
								:
							Element:span
								"Success"
								,
							Element:span
								"body"
								: {
							Element:span
								"type"
								:
							Element:span
								"response"
								,
							Element:span
								"counter"
								:
							Element:span
								16
								,
							Element:span
								"timestamp"
								:
							Element:span
								"2015-01-19T09:15:43+00:00"
								,
							Element:span
								"body"
								: {
							Element:span
								"request_id"
								:
							Element:span
								"fred.flinstone.3"
								,
							Element:span
								"method"
								:
							Element:span
								"Message.create"
								,
							Element:span
								"success"
								:
							Element:span
								true
								,
							Element:span
								"data"
								:
							Element:span
								} } }
							Element:a
								Message
						Node:
						(type) c
						(layer)2
							Element:p
							Element:strong
								Error
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								{
							Element:span
								"name"
								:
							Element:span
								"Error"
								,
							Element:span
								"body"
								: {
							Element:span
								"type"
								:
							Element:span
								"response"
								,
							Element:span
								"counter"
								:
							Element:span
								18
								,
							Element:span
								"timestamp"
								:
							Element:span
								"2015-01-19T09:15:43+00:00"
								,
							Element:span
								"body"
								: {
							Element:span
								"request_id"
								:
							Element:span
								"fred.flinstone.3"
								,
							Element:span
								"method"
								:
							Element:span
								"Message.create"
								,
							Element:span
								"success"
								:
							Element:span
								false
								,
							Element:span
								"data"
								: {
							Element:span
								"code"
								:
							Element:span
								102
								,
							Element:span
								"id"
								:
							Element:span
								"not_found"
								,
							Element:span
								"message"
								:
							Element:span
								"The Conversation could not be found."
								,
							Element:span
								"url"
								:
							Element:span
								"https://developer.layer.com/"
								} } } }
						Node:
						(type) c
						(layer)2
							Element:p
							Element:strong
								Deduplication error
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								{
							Element:span
								"name"
								:
							Element:span
								"Deduplication error"
								,
							Element:span
								"body"
								: {
							Element:span
								"type"
								:
							Element:span
								"response"
								,
							Element:span
								"counter"
								:
							Element:span
								18
								,
							Element:span
								"timestamp"
								:
							Element:span
								"2015-01-19T09:15:43+00:00"
								,
							Element:span
								"body"
								: {
							Element:span
								"request_id"
								:
							Element:span
								"fred.flinstone.3"
								,
							Element:span
								"method"
								:
							Element:span
								"Message.create"
								,
							Element:span
								"success"
								:
							Element:span
								false
								,
							Element:span
								"data"
								: {
							Element:span
								"id"
								:
							Element:span
								"id_in_use"
								,
							Element:span
								"code"
								:
							Element:span
								111
								,
							Element:span
								"message"
								:
							Element:span
								"The requested Message already exists"
								,
							Element:span
								"url"
								:
							Element:span
								"http://docs.layer.com/reference/client_api#send-a-message"
								,
							Element:span
								"data"
								:
							Element:span
								} } } }
							Element:a
								Message
						Node:
						(type) c
						(layer)2
							Element:h3
								Discussion
							Element:a
								¶
						Node:
						(type) c
						(layer)2
							Element:blockquote
							Element:p
							Element:strong
								Note
							Element:ol
							Element:li
							Element:a
								MessagePart
								objects whose bodies cannot be encoded as a JSON string need to be encoded as Base64, and the part’s encoding property should be
							Element:q
								“base64”
								.
							Element:li
								The total length of a MessagePart
							Element:code
								body
								cannot exceed 2KB.
						Node:
						(type) c
						(layer)2
							Element:h3
								Push notifications
							Element:a
								¶
						Node:
						(type) c
						(layer)2
							Element:p
								Layer provides extensive support for Push Notifications on both iOS (APNS) and Android (GCM). Pushes are delivered to devices when Messages are sent using the
							Element:code
								notification
								parameter. The possible values for the
							Element:code
								notification
								object are described below:
						Node:
						(type) c
						(layer)2
							Element:table
							Element:thead
							Element:tr
							Element:th
								Name
							Element:th
								Type
							Element:th
								Description
							Element:tbody
							Element:tr
							Element:td
							Element:code
								text
							Element:td
								string
							Element:td
								The text to be displayed on the notification alert. On iOS, displayed on the lock screen or banner. On GCM, delivered in the push intent as advisory information
							Element:tr
							Element:td
							Element:code
								sound
							Element:td
								string
							Element:td
								The name of a sound to be played. On iOS, must exist in the main application bundle. On GCM, delivered in the push intent as advisory information
							Element:tr
							Element:td
							Element:code
								title
							Element:td
								string
							Element:td
								Text to be displayed on the lock screen or notification banner
						Node:
						(type) c
						(layer)2
							Element:p
								Note that values for iOS badge counts cannot be provided because we compute the correct badge count on a per-recipient basis.
						Node:
						(type) c
						(layer)2
							Element:p
								Push Notifications are an optional feature and the
							Element:code
								notification
								parameter can be omitted entirely, in which case notifications will not be sent.
						Node:
						(type) c
						(layer)2
							Element:h3
								Delete a message
							Element:a
								¶
						Node:
						(type) c
						(layer)2
							Element:p
							Element:strong
								Parameters:
						Node:
						(type) c
						(layer)2
							Element:table
							Element:thead
							Element:tr
							Element:th
								Name
							Element:th
								Type
							Element:th
								Description
							Element:tbody
							Element:tr
							Element:td
							Element:code
								mode
							Element:td
								string
							Element:td
								Possible values are
							Element:q
								“all_participants”
								or
							Element:q
								“my_devices”
						Node:
						(type) c
						(layer)2
							Element:p
							Element:strong
								HTTP request:
						Node:
						(type) c
						(layer)2
							Element:span
								DELETE
						Node:
						(type) c
						(layer)2
							Element:b
								/messages/:message_uuid
						Node:
						(type) c
						(layer)2
							Element:p
							Element:strong
								Example:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								curl -X DELETE \ -H 'Accept: application/vnd.layer+json; version=2.0' \ -H 'Authorization: Layer session-token="<TOKEN>"'' \ -H 'Content-Type: application/json' \ https://api.layer.com/messages/<message_uuid>?mode=all_participants
						Node:
						(type) c
						(layer)2
							Element:p
							Element:strong
								Possible responses:
						Node:
						(type) c
						(layer)2
							Element:p
							Element:strong
								Message deleted successfully
							Element:br
							Element:q
								Status: 204 (No Content)
							Element:br
								(Empty body)
						Node:
						(type) c
						(layer)2
							Element:h3
								Discussion
							Element:a
								¶
						Node:
						(type) c
						(layer)2
							Element:p
								There are two possible values for
							Element:code
								mode
								:
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:code
								mode=all_participants
								: The Message will be deleted for all participants in the conversation
							Element:li
							Element:code
								mode=my_devices
								: The Message will be hidden for the current user on all their devices
						Node:
						(type) c
						(layer)2
							Element:p
								There is no undelete, automatic or otherwise, regardless of the deletion mode.
						Node:
						(type) c
						(layer)2
							Element:a
								Conversations
						Node:
						(type) c
						(layer)2
							Element:a
								Rich Content
