Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					API Basics
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Introduction
							Element:a
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
								The Etsy API provides a simple
							Element:a
								RESTful
								interface with lightweight
							Element:a
								JSON
								-formatted responses to use many of Etsy's website features, including public profiles, shops, listings, tags, favorites, and sales data, using
							Element:a
								OAuth
								to allow both read and write access to users' public and private data. This document provides information to developers on how to integrate with the Etsy API.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Accessing the API
							Element:a
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
								The Etsy API accessed under the
							Element:code
								openapi
								subdomain. A sample unauthenticated request might look like:
						Node:
						(type) c
						(layer)2
							Element:pre
								GET https://openapi.etsy.com/v2/listings/active?api_key={YOUR_API_KEY}
						Node:
						(type) c
						(layer)2
							Element:p
								To retrieve the most recent active listings on Etsy.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:strong
								API requests must use HTTPS, HTTP requests will result in 400 Bad Request responses.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Authentication
							Element:a
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
								The Etsy API requires an application key that is provided during
							Element:a
								app registration
								. The key identifies your application to the Etsy web service, and is used to track overall call usage. It's passed using the standard
							Element:code
								api_key
								parameter.
						Node:
						(type) c
						(layer)2
							Element:p
								For write access and for accessing private user data, an OAuth access token is required. Your application key is required to start the OAuth authentication process.
						Node:
						(type) c
						(layer)2
							Element:p
								New users register an application and receive a
							Element:a
								provisional API key
								upon signup. These keys have full access to resources in the Etsy API, however they are restricted to allow authentication only for the user who registered the application.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Rate Limiting
							Element:a
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
								Using public (api key-based) authentication, clients are allowed 10,000 requests per 24-hour period, with a limit of 10 queries per second. We use a progressive rate limit structure, where a 24 hour period is chunked into 12 two-hour blocks. Rate limits are calculated by summing the number of requests made per two-hour block over the past 24 hours. This is to maximize your use of the API - for example, if you hit a rate limit, you'll only need to wait for at most two more hours in order to get a few more allowed requests (the exact amount will depend on the number of requests you made in the two-hour block of 24 hours prior). Using private (OAuth) authentication, clients are given the same limits
							Element:strong
								per OAuth access token
								.
						Node:
						(type) c
						(layer)2
							Element:p
								If your application needs more than the allotted number of calls, contact us at
							Element:a
								developer@etsy.com
								with a description of the application and an estimate on needed call usage. You might also want to investigate the use of caching to keep the number of calls to a minimum, and make your application more responsive.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:strong
								Headers:
								Every API response bears rate limit headers, as described below:
							Element:br
						Node:
						(type) c
						(layer)2
							Element:pre
								X-RateLimit-Limit: 10000 X-RateLimit-Remaining: 9924
						Node:
						(type) c
						(layer)2
							Element:p
								These default rate limits are subject to change at any time, without notice.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								API Requests
							Element:a
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
								The Etsy API uses a RESTful calling style that works with standard
							Element:a
								calls. Any web programming language (PHP, Ruby, Perl, Python, Java, Objective C, C#...) should be able to make and receive
							Element:code
								HTTP
							Element:code
								HTTP
								networking calls; consult the documentation for your language of choice.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Request URLs
							Element:a
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
								In a RESTful API, each resource or collection of resources is identified by a unique URL, such as:
						Node:
						(type) c
						(layer)2
							Element:pre
								https://openapi.etsy.com/v2/listings/:listing_id
								The prefix
						Node:
						(type) c
						(layer)2
							Element:code
								v2
								is the version specifier and must be present. When significant changes are made to the API (changes that would break compatibility with existing applications) this value will change.
						Node:
						(type) c
						(layer)2
							Element:p
								URL paths contain the unique IDs of resources. These are identified by a leading colon, as with
							Element:code
								:listing_id
								above. Before making a call, you must substitute a valid ID value for these placeholders. ID parameters must appear in the URL and cannot be substituted for GET parameters. All ID parameters listed in the URL pattern must be present.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Output Formats
							Element:a
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
								The Etsy API handles multiple output formats. Currently, the only supported formats are
							Element:code
								JSON
								and
							Element:code
								JSONP
								(see
							Element:a
								JSONP and JavaScript
								.) Output formats are selected with a specifier that is appended to the URL, like a filename extension:
						Node:
						(type) c
						(layer)2
							Element:table
							Element:tbody
							Element:tr
							Element:th
								Format
							Element:th
								Specifier
							Element:th
								Description
							Element:tr
							Element:td
							Element:code
								JSON
							Element:td
							Element:code
								.json
							Element:td
								JavaScript Object Notation
							Element:tr
							Element:td
							Element:code
								JSONP
							Element:td
							Element:code
								.js
							Element:td
								JSON with Padding
						Node:
						(type) c
						(layer)2
							Element:p
								JSON is the default, and will be used if nothing is specified. Using the alternate
							Element:code
								JSONP
								format, the example from the previous section would look like this:
						Node:
						(type) c
						(layer)2
							Element:pre
								https://openapi.etsy.com/v2/listings/:listing_id.js
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								HTTP Methods
							Element:a
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
								RESTful APIs use standard HTTP methods to denote actions against a resource:
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:code
								GET
								- Reads a resource. Returns
							Element:code
								HTTP 200
								on success.
							Element:li
							Element:code
								POST
								- Creates a new resource. Returns
							Element:code
								HTTP 201
								on success.
							Element:li
							Element:code
								PUT
								- Updates a resource. Returns
							Element:code
								HTTP 200
								on success.
							Element:li
							Element:code
								DELETE
								- Deletes a resource. Returns
							Element:code
								HTTP 200
								on success.
						Node:
						(type) c
						(layer)2
							Element:p
								Because some toolkits lack support for
							Element:code
								PUT
								and
							Element:code
								DELETE
								(most notably JavaScript) you can use method overloading to fake an HTTP method. Use a
							Element:code
								GET
								or
							Element:code
								POST
								call and append the standard
							Element:code
								method
								parameter:
						Node:
						(type) c
						(layer)2
							Element:pre
								https://openapi.etsy.com/v2/users/__SELF__/favorites/listings/12345?method=DELETE
						Node:
						(type) c
						(layer)2
							Element:p
								The standard token
							Element:code
								__SELF__
								in the above calls maps to the user ID of user using your application under OAuth. It can be used in any URL in place of
							Element:code
								:user_id
								under the private entry points. When used under the public entry points, it will cause an error.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Parameter Types
							Element:a
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
								Many API methods take one or more parameters, either as query parameters of the URL itself, or as POST parameters. The documentation for each method references these standard types:
						Node:
						(type) c
						(layer)2
							Element:table
							Element:tbody
							Element:tr
							Element:th
								Param Type
							Element:th
								Meaning
							Element:tr
							Element:td
							Element:code
								string
							Element:td
								Any string (up to 255 characters).
							Element:tr
							Element:td
							Element:code
								int
							Element:td
								A whole number value.
							Element:tr
							Element:td
							Element:code
								epoch
							Element:td
								A whole number value representing
							Element:a
								UNIX epoch time
								, or any string accepted by PHP's
							Element:a
								function.
							Element:code
								strtotime()
							Element:tr
							Element:td
							Element:code
								float
							Element:td
								A number with or without a decimal point. Represented in output as a string, to avoid precision errors.
							Element:tr
							Element:td
							Element:code
								boolean
							Element:td
								A logical true or false value. May be passed to API requests as the strings "true" or "false" or "1" and "0". In JSON output, symbolic constants are used.
							Element:tr
							Element:td
							Element:code
								user_id_or_name
							Element:td
								Either a user's numeric ID or login name.
							Element:tr
							Element:td
							Element:code
								shop_id_or_name
							Element:td
								Either a shop's numeric ID or login name. (Note: shop IDs are not interchangeable with user IDs.)
							Element:tr
							Element:td
							Element:code
								team_id_or_name
							Element:td
								Either a teams's numeric ID or full name, including spaces and punctuation. (Note: Team captains may change the name of a team.)
							Element:tr
							Element:td
							Element:code
								treasury_description
							Element:td
								A string 255 characters long or less
							Element:tr
							Element:td
							Element:code
								treasury_id
							Element:td
								A string that uniquely identifies a treasury.
							Element:tr
							Element:td
							Element:code
								treasury_search_string
							Element:td
								In the general case, this can be any string. However, there are four special prefixes that can be used. "shop:" will look for lists where one of the shop's listings is included. "curator:" will find all the lists created by the person specified. "title:" will find lists with a specific title. "tags:", "listing_title:", "listing_tags:" follow the same pattern. Because the colon ":" is used as a special character to separate the special prefixes, you may only have 1 colon in your search string, and the text that comes before the colon must match one of the prefixes stated above.
							Element:tr
							Element:td
							Element:code
								treasury_title
							Element:td
								A string 127 characters long or less
							Element:tr
							Element:td
							Element:code
								enum(values)
							Element:td
								A predefined list of string values, for example true and false. Any value not in the list will result in an error.
							Element:tr
							Element:td
							Element:code
								array(type)
							Element:td
								A list of values, separated by commas ("
							Element:code
								,
								"). Do not include parentheses or brackets. Each value must be a valid instance of
							Element:code
								type
								.
							Element:tr
							Element:td
							Element:code
								map(keyType,valueType)
							Element:td
								A JSON dictionary of key/value pairs. Each key and value must be a valid instance of
							Element:code
								keyType
								and
							Element:code
								valueType
								. E.g.
							Element:code
								{"key":"value"}
							Element:tr
							Element:td
							Element:code
								color_triplet
							Element:td
								Either an
							Element:a
								HSV
								color specified as an array in the range
							Element:code
								0;0;0
								-
							Element:code
								360;100;100
								, or an
							Element:a
								RGB
								color specified in hexadecimal notation in the range
							Element:code
								#000000
								-
							Element:code
								#FFFFFF
								. (RGB colors are converted to HSV internally, which may result in small rounding errors. They may omit the leading "#", or use the three-digit form.)
							Element:tr
							Element:td
							Element:code
								color_wiggle
							Element:td
								Specify the degree of tolerance for color matching where 0 is the most accurate, and 30 is the least.
							Element:tr
							Element:td
							Element:code
								latitude
							Element:td
								A valid numeric latitude, between -90.0 and 90.0
							Element:tr
							Element:td
							Element:code
								longitude
							Element:td
								A valid numeric longitude, between -180.0 and 180.0
							Element:tr
							Element:td
							Element:code
								image
							Element:td
								An image file; see
							Element:a
								Uploading Images
							Element:tr
							Element:td
							Element:code
								region
							Element:td
								An ISO 3166-1 alpha 2 country code. Currently supported values: US, CA, AU, GB, DE, FR, NL, IT, ES, RU, PT, GR, IE, JP, NZ
							Element:tr
							Element:td
							Element:code
								currency
							Element:td
								A 3-letter ISO 4217 code.
							Element:tr
							Element:td
							Element:code
								language
							Element:td
								An IETF language code. Currently supported values: de, en, es, fr, it, ja, nl, pt, ru
							Element:tr
							Element:td
							Element:code
								category
							Element:td
								A string ID that uniquely identifies a category path (e.g.
							Element:code
								Clothing/Men/Pants
								)
							Element:tr
							Element:td
							Element:code
								taxonomy
							Element:td
								An entire taxonomy node, serialized in JSON.
							Element:tr
							Element:td
							Element:code
								listing_variation
							Element:td
								A JSON object. See
							Element:a
								Working with Variations
								.
							Element:tr
							Element:td
							Element:code
								featured_rank
							Element:td
								An int that determines the order of listings in the user's
							Element:a
								Featured Listings
								. Lower numbers are towards the front of the queue. 0 or
							Element:code
								__OFF__
								removes the listing from the queue, and
							Element:code
								__LAST__
								places the listing at the end of the queue. Note that featured ranks are reordered and normalized on the back end, so the listing's final rank may be different from the value passed in, but will be correct relative to the rest of the queue.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Standard Parameters
							Element:a
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
								Here is a list of standard parameters that are accepted by many or all API methods:
						Node:
						(type) c
						(layer)2
							Element:table
							Element:tbody
							Element:tr
							Element:th
								Parameter
							Element:th
								Type
							Element:th
								Meaning
							Element:tr
							Element:td
							Element:code
								api_key
							Element:td
							Element:code
								string
							Element:td
								Your API key. Required for all public entry point calls
							Element:tr
							Element:td
							Element:code
								method
							Element:td
							Element:code
								string
							Element:td
								Used to specify a custom
							Element:code
								HTTP
								method for method overloading.
							Element:tr
							Element:td
							Element:code
								limit
							Element:td
							Element:code
								int
							Element:td
								Specifies the maximum number of records to return.
							Element:tr
							Element:td
							Element:code
								offset
							Element:td
							Element:code
								int
							Element:td
								Skips the first N records before returning results. Combine with
							Element:code
								limit
								for pagination.
							Element:tr
							Element:td
							Element:code
								fields
							Element:td
							Element:code
								array(string)
							Element:td
								Used to limit the fields in a response object; fields not listed will not be returned. Separate multiple fields with commas.
							Element:tr
							Element:td
							Element:code
								includes
							Element:td
							Element:code
								array(string)
							Element:td
								Used to include associated objects in a response. See Working with Resources section.
							Element:tr
							Element:td
							Element:code
								callback
							Element:td
							Element:code
								string
							Element:td
								Used in conjunction with the
							Element:code
								JSONP
								output format to specify a callback function name.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								JSON Data
							Element:a
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
								Data is returned using
							Element:a
								JSON
								, a lightweight serialization language that is
							Element:a
								compatible with many different languages
								. JSON is also syntactically correct JavaScript code, which means that it can be parsed with JavaScript's own
							Element:code
								eval()
								function.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Standard Response Format
							Element:a
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
								Each API response is wrapped in a standard structure that holds the results of the API call, plus metadata about the request:
						Node:
						(type) c
						(layer)2
							Element:pre
								{ "count":integer, "results": [ { result object } ], "params": { parameters }, "type":result type }
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								specifies the total number of results available for this call, which may be more than the number of results returned in this request. For example, if
							Element:strong
								count
							Element:code
								count
								is 1000, you can page through the results in blocks of 100 by specifying
							Element:code
								limit=100&offset=0
								, where
							Element:code
								offset
								is a multiple of 100 up to 900. See
							Element:a
								Pagination
								below.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								is an array of results. For consistency's sake, it is always an array, even if only one result is expected.
							Element:strong
								results
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								echoes the parameters that were passed in the request.
							Element:strong
								params
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								specifies the type of the objects in the results array. (See the individual pages under "API Reference".)
							Element:strong
								type
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Pagination
							Element:a
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
								The default records returned per call is 25, and the maximum number that can be returned is 100. We provide
							Element:code
								limit
								and
							Element:code
								offset
								parameters to allow navigation through larger data sets. Responses include a
							Element:code
								count
								field, which specifies the total number of records available via pagination. For performance reasons, the
							Element:code
								offset
								parameter is limited to a maximum value of
							Element:code
								50000
								.
						Node:
						(type) c
						(layer)2
							Element:p
								Here's an example of sequential requests to paginate through the most recent 300 listings, 50 at a time:
						Node:
						(type) c
						(layer)2
							Element:pre
								https://openapi.etsy.com/v2/listings/active?limit=50&offset=0 https://openapi.etsy.com/v2/listings/active?limit=50&offset=50 https://openapi.etsy.com/v2/listings/active?limit=50&offset=100 https://openapi.etsy.com/v2/listings/active?limit=50&offset=150 https://openapi.etsy.com/v2/listings/active?limit=50&offset=200 https://openapi.etsy.com/v2/listings/active?limit=50&offset=250
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Standard Response Codes
							Element:a
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
								The Etsy API uses standard HTTP status codes to indicate success or failure of API calls (Consult the documentation for your programming language to learn how the read the status code of an HTTP call)
						Node:
						(type) c
						(layer)2
							Element:table
							Element:tbody
							Element:tr
							Element:th
								HTTP Code
							Element:th
								Message
							Element:th
								Meaning
							Element:th
								Response Body
							Element:tr
							Element:th
							Element:code
								200
							Element:td
							Element:code
								OK
							Element:td
								Success!
							Element:td
								A JSON response (see below.)
							Element:tr
							Element:th
							Element:code
								201
							Element:td
							Element:code
								Created
							Element:td
								A new resource was successfully created.
							Element:td
								A JSON response containing the new resource's data.
							Element:tr
							Element:th
							Element:code
								400
							Element:td
							Element:code
								Bad Request
							Element:td
								You've made an error in your request (such as passing a string for a parameter that expects a number).
							Element:td
								An error message
							Element:tr
							Element:th
							Element:code
								403
							Element:td
							Element:code
								Forbidden
							Element:td
								You've exceeded the rate limits for your account, or the data you're trying to access is private.
							Element:td
								An error message
							Element:tr
							Element:th
							Element:code
								404
							Element:td
							Element:code
								Not Found
							Element:td
								The requested resource could not be found,
							Element:em
								or
								the URI doesn't correspond to any known command.
							Element:td
								An error message
							Element:tr
							Element:th
							Element:code
								500
							Element:td
							Element:code
								Server Error
							Element:td
								An internal error on our side. If this problem persists, submit a bug report in the bug section of our
							Element:a
								forums
								.
							Element:td
								An error message
							Element:tr
							Element:th
							Element:code
								503
							Element:td
							Element:code
								Service Unavailable
							Element:td
								The Etsy API is down for scheduled maintenance; please try again later (this should be rare!)
							Element:td
								An error message
						Node:
						(type) c
						(layer)2
							Element:p
								The
							Element:code
								X-Error-Detail
							Element:code
								HTTP
								header will contain a detailed description of many errors.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:strong
								Tip:
								What's the difference between a
							Element:code
								404 Not Found
								and a
							Element:code
								200 OK
								with empty results? If you're searching for a specific record, say listing #1234567890, and it doesn't exist, that's a
							Element:code
								404 Not Found
								. The record wasn't found; it doesn't exist; it probably never did. However, if you're searching for a set of records and no listings match your search, that's a
							Element:code
								200 OK
								. There's nothing wrong with your request, but it doesn't match anything, and your result set is empty.
						Node:
						(type) c
						(layer)2
							Element:p
								This might seem a little arbitrary, but it makes practical sense: search engines typically don't display an error page if your search comes up empty. On the other hand, trying to access a URL that doesn't exist will turn up a standard 404 error page. Your application will probably have similar behavior.
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:a
								Developers Home
							Element:li
							Element:a
								Documentation
							Element:li
							Element:a
								Discussion
							Element:li
							Element:a
								API Terms of Use
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Your Developer Account
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:a
								Register as a developer
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Looking for Etsy Apps?
						Node:
						(type) c
						(layer)2
							Element:p
								Check out our new
							Element:br
							Element:a
								App Gallery
								!
						Node:
						(type) c
						(layer)2
							Element:p
								It's the best way to find cool and useful tools built upon Etsy's API.
						Node:
						(type) c
						(layer)2
							Element:img
