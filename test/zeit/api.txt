Node:
(type) c
(layer)0
	Element:body
						Node:
						(type) h2
						(layer)2
							Element:h2
								API
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:a
								Introduction
							Element:li
							Element:a
								API Basics
							Element:li
							Element:a
								Endpoints
							Element:li
							Element:a
								FAQ
						Node:
						(type) h2
						(layer)2
							Element:h2
							Element:span
							Element:a
								Introduction
							Element:span
							Element:svg
						Node:
						(type) c
						(layer)2
							Element:p
								The
							Element:a
								API enables you to dynamically and elastically orchestrate Node deployments in the cloud. The entire power of our command-line deployment tool is available for you to remix!
							Element:span
							Element:span
								now
							Element:svg
						Node:
						(type) h2
						(layer)2
							Element:h2
							Element:span
							Element:a
								API Basics
							Element:span
							Element:svg
						Node:
						(type) c
						(layer)2
							Element:p
								Our API is exposed as an HTTP/1 and HTTP/2 service over SSL.
							Element:br
								All endpoints live under the URL
							Element:code
								https://api.zeit.co/now
								and then generally follow the REST architecture.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:span
										Element:a
											Content Type
										Element:span
										Element:svg
									Node:
									(type) c
									(layer)3
										Element:p
											All requests must be encoded as JSON with the
										Element:code
											Content-Type: application/json
											header.
										Element:br
											Most responses, including errors, are encoded exclusively as JSON as well.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:span
										Element:a
											Authentication
										Element:span
										Element:svg
									Node:
									(type) c
									(layer)3
										Element:p
											Provide your API token as part of the
										Element:code
											Authorization
											header.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											Authorization: Bearer token
									Node:
									(type) c
									(layer)3
										Element:p
										Element:span
											NOTE:
											When
										Element:a
											logged in
											,the examples in the API will contain your secret token. Don't share them! For example, to get a
										Element:a
											list of deployments
											try the following:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											â–² curl -H "Authorization: Bearer token" https://api.zeit.co/now/deployments
									Node:
									(type) c
									(layer)3
										Element:p
											If the authentication is unsuccessful, the status code
										Element:span
											403
											is returned.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:span
										Element:a
											Errors
										Element:span
										Element:svg
									Node:
									(type) c
									(layer)3
										Element:p
											All errors have the following format:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											{ "error": { "code": "error_code", "message": "An english description of the error that just occurred", "url": "https://zeit.co/errors/endpoint/error_code" } }
									Node:
									(type) c
									(layer)3
										Element:p
											The possible
										Element:code
											error_code
											values are documented on a per-endpoint basis.
									Node:
									(type) c
									(layer)3
										Element:p
											Since the
										Element:code
											message
											is bound to change over time, we recommend you do not pass it along directly to end-users of your application.
									Node:
									(type) c
									(layer)3
										Element:p
											Finally, we provide a help link that will give you information about the specific error you just received to make debugging easier! This link is generic and not exclusive to your application or data.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:span
										Element:a
											Generic error codes
										Element:span
										Element:svg
									Node:
									(type) c
									(layer)3
										Element:p
											Some error codes are consistent for all endpoints:
									Node:
									(type) c
									(layer)3
										Element:table
										Element:thead
										Element:tr
										Element:th
											Header
										Element:th
											Description
										Element:tbody
										Element:tr
										Element:td
										Element:b
											authentication_error
										Element:td
											Authentication failed.
										Element:tr
										Element:td
										Element:b
											rate_limited
										Element:td
											You exceeded the maximum alloted requests.
										Element:tr
										Element:td
										Element:b
											bad_request
										Element:td
											Some required parameters were not present or were invalid.
										Element:tr
										Element:td
										Element:b
											internal_server_error
										Element:td
											An unexpected server error occurred.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:span
										Element:a
											Rate limits
										Element:span
										Element:svg
									Node:
									(type) c
									(layer)3
										Element:p
											We limit the number of calls you can make over a certain period of time.
										Element:br
											Rate limits vary and are specified by the following header in all responses:
									Node:
									(type) c
									(layer)3
										Element:table
										Element:thead
										Element:tr
										Element:th
											Header
										Element:th
											Description
										Element:tbody
										Element:tr
										Element:td
										Element:b
											X-Rate-Limit-Limit
										Element:td
											The maximum number of requests that the consumer is permitted to make per minute.
										Element:tr
										Element:td
										Element:b
											X-Rate-Limit-Remaining
										Element:td
											The number of requests remaining in the current rate limit window.
										Element:tr
										Element:td
										Element:b
											X-Rate-Limit-Reset
										Element:td
											The time at which the current rate limit window resets in UTC epoch seconds.
									Node:
									(type) c
									(layer)3
										Element:p
											When the rate limit is
										Element:b
											*exceeded*
											an error is returned with the status
										Element:b
											429 Too Many Requests
											:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											{ "error": { "code": "rate_limited", "message": "An english description of the error that just occurred", "url": "https://zeit.co/errors/rate_limited" } }
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:span
										Element:a
											Versioning
										Element:span
										Element:svg
									Node:
									(type) c
									(layer)3
										Element:p
											We try to avoid breaking backwards-compatibility as much as possible.
									Node:
									(type) c
									(layer)3
										Element:p
											In the rare event that we would need to change an endpoint in a very substantial way, we simply will introduce an alternative way of accessing the resource, under a different path.
									Node:
									(type) c
									(layer)3
										Element:p
											Some API endpoints, however, are flagged as
										Element:b
											EXPERIMENTAL
											. If this is the case, we might deprecate or change the shape of the response over time by appending a version prefix. For example,
										Element:code
											/create
											might evolve into
										Element:code
											/v2/create
											. When the experimental status is removed, so is the prefix.
						Node:
						(type) h2
						(layer)2
							Element:h2
							Element:span
							Element:a
								Endpoints
							Element:span
							Element:svg
						Node:
						(type) c
						(layer)2
							Element:p
								This section describes all available endpoints.
						Node:
						(type) c
						(layer)2
							Element:h3
							Element:span
							Element:a
								GET /now/deployments
							Element:span
							Element:svg
						Node:
						(type) c
						(layer)2
							Element:p
								List all the deployments under the account corresponding to the API token.
						Node:
						(type) c
						(layer)2
							Element:p
								Example successful (
							Element:b
								200
								) response:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								{ "deployments": [ { "uid": "7Npest0z1zW5QVFfNDBId4BW", "name": "project-a", "url": "project-bfzfxvjaewj.now.sh", "created": "1460801613968" }, { "uid": "dOgCUIoovYiYmXbrLX0h9qDk", "name": "project-b", "url": "project-b-iipihlfrpa.now.sh", "created": "1462738579605" } ] }
						Node:
						(type) c
						(layer)2
							Element:h3
							Element:span
							Element:a
								GET /now/deployments/:id
							Element:span
							Element:svg
						Node:
						(type) c
						(layer)2
							Element:p
								This API allows you to retrieve a deployment by suppying its
							Element:b
								:id
								in the URL.
							Element:br
								You can obtain this, for example, by listing all deployments.
						Node:
						(type) c
						(layer)2
							Element:p
								Example successful (
							Element:b
								200
								) response:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								{ "uid": "7Npest0z1zW5QVFfNDBId4BW", "host": "project-a-fzfxvjaewj.now.sh", "state": "READY", "stateTs": "2017-02-20T08:16:28.547Z" }
						Node:
						(type) c
						(layer)2
							Element:p
								The state field represents the current global state of the deployment. The state diagram below presents the possible state transitions for a deployment in now. A deployment remains in
							Element:code
								DEPLOYING
								state until all the required files are synced to the cloud.
							Element:code
								DEPLOYMENT_ERROR
								is observed if the deployment kept crashing after multiple restarts due to any reason; Or in an unlikely event of an internal system error. A deployment in
							Element:code
								READY
								or
							Element:code
								FROZEN
								state is set to receive traffic from the internet, while a deployment in
							Element:code
								FROZEN
								state isn't actually running it will never lose new connections as it's restarted on-demand.
						Node:
						(type) c
						(layer)2
							Element:img
						Node:
						(type) c
						(layer)2
							Element:h3
							Element:span
							Element:a
								DELETE /now/deployments/:id
							Element:span
							Element:svg
						Node:
						(type) c
						(layer)2
							Element:p
								This API allows you to delete a deployment by suppying its
							Element:b
								:id
								in the URL.
							Element:br
								You can obtain the ID, for example, by listing all deployments.
						Node:
						(type) c
						(layer)2
							Element:h3
							Element:span
							Element:a
								POST /now/deployments
							Element:span
							Element:svg
						Node:
						(type) c
						(layer)2
							Element:p
								Create a new deployment on the fly by supplying an
							Element:b
								:id
								in the URL and the necessary file data in the body.
						Node:
						(type) c
						(layer)2
							Element:p
								The body contains a special key
							Element:code
								package
								that has the
							Element:code
								package.json
								JSON structure. Other keys will represent a file path, with their respective values containing the file contents.
						Node:
						(type) c
						(layer)2
							Element:p
								Example request with a successful (
							Element:b
								200
								) response:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								{ "uid": "7Npest0z1zW5QVFfNDBId4BW", "host": "project-a-fzfxvjaewj.now.sh", "state": "BOOTING" }
						Node:
						(type) c
						(layer)2
							Element:h3
							Element:span
							Element:a
								GET /now/deployments/:id/files
							Element:span
							Element:svg
						Node:
						(type) c
						(layer)2
							Element:p
								This API allows you to retrieve the file structure of a deployment by suppying its
							Element:b
								:id
								in the URL.
							Element:br
								The body will contain entries for each child and directory, coupled with an ID of the file for content download.
						Node:
						(type) c
						(layer)2
							Element:p
								Example successful (
							Element:b
								200
								) response:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								[ { "type": "directory", "name": "myfolder", "children": [ { "type": "file", "name": "other.js", "uid": "074f89b7cec922f11815a9437b9f9e4ba6df598f" } ] }, { "type": "file", "name": "start.js", "uid": "23507a2f215bf389a1bf25f9f8f1e782f50a890e" }, { "type": "file", "name": "package.json", "uid": "9ea8930976aad4ebd005f8d6c03825be136cc4a9" } ]
						Node:
						(type) c
						(layer)2
							Element:h3
							Element:span
							Element:a
								GET /now/deployments/:id/files/:file_id
							Element:span
							Element:svg
						Node:
						(type) c
						(layer)2
							Element:p
								This API allows you to retrieve the file data of a file associated with a deployment by suppying its
							Element:b
								:id
								and
							Element:b
								:file_id
								in the URL.
							Element:br
								The body will contain the raw content of the file
						Node:
						(type) c
						(layer)2
							Element:p
								Example successful (
							Element:b
								200
								) response:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								{ "name": "project-a", "version": "0.0.1", "description": "", "scripts": { "start": "node start.js" }, "dependencies": { "express": "4.13.4" } }
						Node:
						(type) c
						(layer)2
							Element:h3
							Element:span
							Element:a
								GET /domains
							Element:span
							Element:svg
						Node:
						(type) c
						(layer)2
							Element:p
								Retrieves a list of domains registered for the authenticating user. Each domain entry contains an
							Element:code
								aliases
								array listing every alias associated with the domain. The field
							Element:code
								isExternal
								is a boolean value telling wheter an external nameserver is used to manage DNS records for the domain.
						Node:
						(type) c
						(layer)2
							Element:p
								Example successful (
							Element:b
								200
								) response:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								{ "domains": [{ "uid": "V0fra8eEgQwEpFhYG2vTzC3K", "created": "2016-09-23T11:53:38.600Z", "isExternal": false, "name": "zeit.rocks", "aliases": [ "sqrBE5u452LPy3Ce0tLbazoY", "gqM3ZEM98W9oqAnq7sG2cMzQ" ] }] }
						Node:
						(type) c
						(layer)2
							Element:h3
							Element:span
							Element:a
								POST /domains
							Element:span
							Element:svg
						Node:
						(type) c
						(layer)2
							Element:p
								Register a new domain name with
							Element:a
								for the authenticating user. If the field
							Element:span
							Element:span
								now
							Element:svg
							Element:code
								isExternal
								is false a zeit.world DNS is configured for the domain; Otherwise an external nameserver is expected to point
							Element:code
								CNAME/ALIAS
								towards
							Element:code
								alias.zeit.co
						Node:
						(type) c
						(layer)2
							Element:p
								If an external nameserver is used the user must verify the domain name by creating a TXT record for
							Element:code
								_now
								subdomain containing a verification token provided as a POST result. After the record has been created, the user may retry the same POST and the endpoint shall return
							Element:code
								verified: true
								, if the domain was verified succesfully.
						Node:
						(type) c
						(layer)2
							Element:p
								Example: Adding a zeit.world domain:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								{ name: "zeit.rocks", isExternal: false }
						Node:
						(type) c
						(layer)2
							Element:p
								Successful (
							Element:b
								200
								) response:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								{ uid: "V0fra8eEgQwEpFhYG2vTzC3K", verified: true, created: "2016-09-23T11:53:38.600Z" }
						Node:
						(type) c
						(layer)2
							Element:p
								Example: Unverified external domain:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								{ name: "awesome-now.us", isExternal: true }
						Node:
						(type) c
						(layer)2
							Element:p
								Successful (
							Element:b
								200
								) response:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								{ uid: "V0fra8eEgQwEpFhYG2vTzC3K", verified: false, verifyToken: "3f786850e387550fdab836ed7e6dc881de23001b", created: "2016-09-23T11:53:38.600Z" }
						Node:
						(type) c
						(layer)2
							Element:h3
							Element:span
							Element:a
								DELETE /domains/:name
							Element:span
							Element:svg
						Node:
						(type) c
						(layer)2
							Element:p
								Delete a previously registered domain name from
							Element:a
								. Deleting a domain will automatically remove any associated aliases.
							Element:span
							Element:span
								now
							Element:svg
						Node:
						(type) c
						(layer)2
							Element:p
								Example successful (
							Element:b
								200
								) response:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								{ uid: id }
						Node:
						(type) c
						(layer)2
							Element:h3
							Element:span
							Element:a
								GET /domains/:domain/records
							Element:span
							Element:svg
						Node:
						(type) c
						(layer)2
							Element:p
								Get a list of DNS records created for a domain name specified in the URL.
						Node:
						(type) c
						(layer)2
							Element:p
								Example successful (
							Element:b
								200
								) response:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								{ "records": [ { "id": "rec_38OtX1f51szRA03atCybBuZ3", "slug": "zeit.rocks.-address", "type": "ALIAS", "name": "", "value": "alias.zeit.co", "created": "1474631621542", "updated": null }, { "id": "rec_Pxo2HEfutmlIYECtTE4SpDzY", "slug": "*.zeit.rocks.-address", "type": "CNAME", "name": "*", "value": "alias.zeit.co", "created": "1474631619960", "updated": null } ] }
						Node:
						(type) c
						(layer)2
							Element:h3
							Element:span
							Element:a
								POST /domains/:domain/records
							Element:span
							Element:svg
						Node:
						(type) c
						(layer)2
							Element:p
								Create a DNS record for a domain specified in the URL. `mxPriority` field should be set for MX records and left out otherwise.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								{ "data": { "name": "subdomain", "type": "MX", "value": "mail.zeit.rocks", "mxPriority": 10 } }
						Node:
						(type) c
						(layer)2
							Element:p
								Example successful (
							Element:b
								200
								) response:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								{ uid: "rec_V0fra8eEgQwEpFhYG2vTzC3K" }
						Node:
						(type) c
						(layer)2
							Element:h3
							Element:span
							Element:a
								DELETE /domains/:domain/records/:recId
							Element:span
							Element:svg
						Node:
						(type) c
						(layer)2
							Element:p
								Delete a DNS record created for a domain name, where both the domain and the record ID are specified in the URL. If the record was removed succesfully the endpoint returns with code 200 and an empty body.
						Node:
						(type) c
						(layer)2
							Element:h3
							Element:span
							Element:a
								GET /now/certs/[:cn]
							Element:span
							Element:svg
						Node:
						(type) c
						(layer)2
							Element:p
								Retrieves a list of certificates issued for the authenticating user or information about the certificate issued for the common name specified in the URL.
						Node:
						(type) c
						(layer)2
							Element:p
								Example successful (
							Element:b
								200
								) response:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								{ "certs": [ { "cn": "testing.zeit.co", "uid": "oAjf6y9pxZgCJyQfrclN", "created": "2016-08-23T18:13:09.773Z", "expiration": "2016-12-16T16:00:00.000Z", "autoRenew": true } ] }
						Node:
						(type) c
						(layer)2
							Element:h3
							Element:span
							Element:a
								POST /now/certs
							Element:span
							Element:svg
						Node:
						(type) c
						(layer)2
							Element:p
								Issue a new certificate for the common names given in body. The body should contain
							Element:code
								domains
								array and it may contain
							Element:code
								renew
								field to renew an existing certificate. For example:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								{ "domains": ["testing.zeit.co"], "renew": true }
						Node:
						(type) c
						(layer)2
							Element:p
								Example successful (
							Element:b
								200
								) response:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								{ "uid": "zWsFytQUFlkUWaR7nWdwS7xR" "created_at": 2016-06-01T21:03:10.420Z" }
						Node:
						(type) c
						(layer)2
							Element:h3
							Element:span
							Element:a
								PUT /now/certs
							Element:span
							Element:svg
						Node:
						(type) c
						(layer)2
							Element:p
								Replace an existing or create a new certificate entry with a user-supplied certificate. The body should contain
							Element:code
								domains
								field containing all the domains the new certificate will be used for, and
							Element:code
								cert
								, private
							Element:code
								key
								, and
							Element:code
								ca
								chain fields in PEM format. For example:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								{ "domains": ["testing.zeit.co"], "ca": "PEM formatted CA chain", "cert": "PEM formatted certificate", "key": "PEM formatted private key" }
						Node:
						(type) c
						(layer)2
							Element:p
								Example successful (
							Element:b
								200
								) response:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								{ "created_at": 2016-06-01T21:03:10.420Z" }
						Node:
						(type) c
						(layer)2
							Element:h3
							Element:span
							Element:a
								DELETE /now/certs/:cn
							Element:span
							Element:svg
						Node:
						(type) c
						(layer)2
							Element:p
								Delete an existing certificate entry. If the certificate entry was removed successfully the endpoint will return with code
							Element:b
								200
								and an empty body; Otherwise an error object is returned.
						Node:
						(type) c
						(layer)2
							Element:h3
							Element:span
							Element:a
								GET /now/aliases
							Element:span
							Element:svg
						Node:
						(type) c
						(layer)2
							Element:p
								Retrieves all of the active now aliases for the authenticating user.
							Element:br
								The body will contain an entry for each alias.
						Node:
						(type) c
						(layer)2
							Element:p
								Example successful (
							Element:b
								200
								) response:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								{ "aliases": [ { "uid": "2WjyKQmM8ZnGcJsPWMrHRHrE", "alias": "my-alias", "created": "2016-06-02T21:01:40.950Z", "deploymentId": "c9MrOWGzdJSfPxqyTDYhdEGN" }, { "uid": "CR3bdJZkiaAuh9yr0OHXJJPG", "alias": "my-alias-2", "created": "2016-06-01T21:03:10.420Z", "deploymentId": "eD7FrslROGaXchymDD6ODw3v" } ] }
						Node:
						(type) c
						(layer)2
							Element:h3
							Element:span
							Element:a
								DELETE /now/aliases/:id
							Element:span
							Element:svg
						Node:
						(type) c
						(layer)2
							Element:p
								The API allows you to delete an alias by supplying the alias
							Element:code
								:id
								in the url. You can obtain this id from the list of aliases.
						Node:
						(type) c
						(layer)2
							Element:p
								Example successful (
							Element:b
								200
								) response:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								{"status": "SUCCESS"}
						Node:
						(type) c
						(layer)2
							Element:h3
							Element:span
							Element:a
								GET /now/deployments/:id/aliases
							Element:span
							Element:svg
						Node:
						(type) c
						(layer)2
							Element:p
								Retrieves all of the aliases for the deployment with the given
							Element:code
								:id
								. The authenticating user must own this deployment.
							Element:br
								The body will contain an entry for each alias.
						Node:
						(type) c
						(layer)2
							Element:p
								Example successful (
							Element:b
								200
								) response:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								{ "aliases": [ { "uid": "2WjyKQmM8ZnGcJsPWMrHRHrE", "alias": "my-alias", "created": "2016-06-02T21:01:40.950Z", } ] }
						Node:
						(type) c
						(layer)2
							Element:h3
							Element:span
							Element:a
								POST /now/deployments/:id/aliases
							Element:span
							Element:svg
						Node:
						(type) c
						(layer)2
							Element:p
								Creates a new alias for the deployment with the given
							Element:code
								:id
								. The authenticating user must own this deployment.
							Element:br
								The JSON body of the POST should contain an
							Element:code
								alias
								key with the desired alias (hostname or custom url).
						Node:
						(type) c
						(layer)2
							Element:p
								Example successful (
							Element:b
								200
								) response for new alias:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								{ "uid": "2WjyKQmM8ZnGcJsPWMrHRHrE", "created": "2016-06-02T21:01:40.950Z" }
						Node:
						(type) c
						(layer)2
							Element:p
								Example successful (
							Element:b
								200
								) response for alias with existing deployment (
							Element:code
								oldId
								is the id of the previous deployment):
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								{ "oldId": "c9MrOWGzdJSfPxqyTDYhdEGN", "uid": "2WjyKQmM8ZnGcJsPWMrHRHrE", "created": "2016-06-02T21:01:40.950Z" }
						Node:
						(type) c
						(layer)2
							Element:h3
							Element:span
							Element:a
								GET /now/secrets
							Element:span
							Element:svg
						Node:
						(type) c
						(layer)2
							Element:p
								Retrieves all of the active now secrets for the authenticating user.
							Element:br
								The body will contain an entry for each secret.
						Node:
						(type) c
						(layer)2
							Element:p
								Example successful (
							Element:b
								200
								) response:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								{ "secrets": [ { "uid": "sec_T70JHBhR1gqaxXVrLTsHr6B9", "name": "guillermo", "created": '2016-09-02T01:03:50.000Z' } ] }
						Node:
						(type) c
						(layer)2
							Element:h3
							Element:span
							Element:a
								POST /now/secrets
							Element:span
							Element:svg
						Node:
						(type) c
						(layer)2
							Element:p
								Creates a new secret. The body should contain
							Element:code
								name
								and
							Element:code
								value
								strings. For example:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								[ { "name": "my-api-key", "value": "my-value" } ]
						Node:
						(type) c
						(layer)2
							Element:p
								Example successful (
							Element:b
								200
								) response:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								{ "uid": "sec_zWsFytQUFlkUWaR7nWdwS7xR" }
						Node:
						(type) c
						(layer)2
							Element:h3
							Element:span
							Element:a
								PATCH /now/secrets/:uidOrName
							Element:span
							Element:svg
						Node:
						(type) c
						(layer)2
							Element:p
								This endpoint provides an opportunity to edit the
							Element:code
								name
								of a user's secret. The name has to be unique to that user's secrets.
						Node:
						(type) c
						(layer)2
							Element:p
								The body must contain a field
							Element:code
								name
								with the new name to use.
						Node:
						(type) c
						(layer)2
							Element:p
								Example successful (
							Element:b
								200
								) response:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								{ "uid": "sec_zWsFytQUFlkUWaR7nWdwS7xR", "oldName": "my-api-key" }
						Node:
						(type) c
						(layer)2
							Element:p
								The
							Element:code
								uid
								returned is that of the matched secret.
						Node:
						(type) c
						(layer)2
							Element:h3
							Element:span
							Element:a
								DELETE /now/secrets/:uidOrName
							Element:span
							Element:svg
						Node:
						(type) c
						(layer)2
							Element:p
								This deletes a user's secret.
						Node:
						(type) c
						(layer)2
							Element:p
								Example successful (
							Element:b
								200
								) response:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								{ "uid": "sec_zWsFytQUFlkUWaR7nWdwS7xR" }
						Node:
						(type) c
						(layer)2
							Element:p
								The
							Element:code
								uid
								returned is that of the matched secret.
						Node:
						(type) h2
						(layer)2
							Element:h2
							Element:span
							Element:a
								FAQ
							Element:span
							Element:svg
						Node:
						(type) c
						(layer)2
							Element:h3
							Element:span
							Element:a
								Do you have clients for different languages?
							Element:span
							Element:svg
						Node:
						(type) c
						(layer)2
							Element:p
							Element:a
								JavaScript
								(official)
						Node:
						(type) c
						(layer)2
							Element:p
								At the moment we're focused on our HTTP API endpoints. As time goes by we'll be featuring here some more of our open-source clients for different languages and frameworks, as well as those contributed by the community.
						Node:
						(type) c
						(layer)2
							Element:p
								If you have written one yourself, please
							Element:a
								let us know
								!
						Node:
						(type) c
						(layer)2
							Element:h3
							Element:span
							Element:a
								Can I launch tasks that don't listen on a port?
							Element:span
							Element:svg
						Node:
						(type) c
						(layer)2
							Element:p
								Absolutely! Your deployments can be used to run tasks, builds, tests. Exposing a HTTP server is optional.
						Node:
						(type) c
						(layer)2
							Element:h3
							Element:span
							Element:a
								What are my deployment limits?
							Element:span
							Element:svg
						Node:
						(type) c
						(layer)2
							Element:p
								The deployment limits are the same as your account. For special needs, please
							Element:a
								get in touch
								.
