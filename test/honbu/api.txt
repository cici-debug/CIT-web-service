Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					Be a do'er. Build the future
			Node:
			(type) c
			(layer)1
				Element:p
					Use Honbu's simple RESTful interface to improve the knowledge within your company
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Honbu REST Web Service Interface
						Node:
						(type) c
						(layer)2
							Element:p
								Since the API is based on REST principles, it's very easy to write and test applications. You can use your browser to access URLs, and you can use pretty much any HTTP client in any programming language to interact with the API.
						Node:
						(type) c
						(layer)2
							Element:p
								All API calls to Honbu must be secured over HTTPS. The baseurl to use would be https://app.honbu.io/...
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:a
							Element:h2
								Register a User
						Node:
						(type) c
						(layer)2
							Element:p
								Creates a new user account.
								url:api/users.json Request Type:Post Request:
						Node:
						(type) c
						(layer)2
							Element:pre
								Response:
							Element:code
								{ user: { email: "[string]", password: "[string]", forename: "[string]", surname: "[string]" } }
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								{ success: true, auth_token: "[string]", email: "[string]" }
						Node:
						(type) c
						(layer)2
							Element:br
						Node:
						(type) c
						(layer)2
							Element:br
						Node:
						(type) c
						(layer)2
							Element:p
								Creates a new user account (with api_key).
								url:api/users.json Request Type:Post Request:
						Node:
						(type) c
						(layer)2
							Element:pre
								Response:
							Element:code
								{ key: "[string]", user: { email: "[string]", forename: "[string]", surname: "[string]" } }
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								{ success: true, auth_token: "[string]", email: "[string]" }
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:a
							Element:h2
								Sign in a User
						Node:
						(type) c
						(layer)2
							Element:p
								Creates a new user session
								url:api/users/sign_in.json Request Type:Post Request:
						Node:
						(type) c
						(layer)2
							Element:pre
								Response:
							Element:code
								{ user: { email: "[string]", password: "[string]", remember_me: [integer] } }
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								{ success: true, auth_token: "[string]", email: "[string]" }
						Node:
						(type) c
						(layer)2
							Element:br
						Node:
						(type) c
						(layer)2
							Element:br
						Node:
						(type) c
						(layer)2
							Element:p
								Creates a new user session (with api_key).
								url:api/users/sign_in.json Request Type:Post Request:
						Node:
						(type) c
						(layer)2
							Element:pre
								Response:
							Element:code
								{ key: "[string]", user: { email: "[string]", remember_me: [integer] } }
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								{ success: true, auth_token: "[string]", email: "[string]" }
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:a
							Element:h2
								Sign out a User
						Node:
						(type) c
						(layer)2
							Element:p
								Destroys the users session
								url:api/users/sign_out.json Request Type:Post Request:
						Node:
						(type) c
						(layer)2
							Element:pre
								Response:
							Element:code
								{ user: { email: "[string]", auth_token: "[string]" } }
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								{ success: true }
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:a
							Element:h2
								Find a User
						Node:
						(type) c
						(layer)2
							Element:p
								Returns a single user account
								url:api/users/find Request Type:POST Request:
						Node:
						(type) c
						(layer)2
							Element:pre
								Response:
							Element:code
								{ auth_token: "[string]", email: "[string]" }
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								[ { id: [integer], forename: "[string]", surname: "[string]", job_title: "[string]", email: "[string]", avatar_file_name: "[string]", avatar_file_size: "[string]", avatar_content_type: "[string]" } ]
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:a
							Element:h2
								Update a User
						Node:
						(type) c
						(layer)2
							Element:p
								Update a users profile
								url:api/users/[user_id] Request Type:PUT Request:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								{ auth_token: "[string]", user: { forename: "[string]", surname: "[string]", job_title: [string], avatar_file_name: "[string]" } }
						Node:
						(type) c
						(layer)2
							Element:p
								Response:
							Element:strong
								Note
								- "avatar_file_name" must be a valid url of an avatar image (.png, .jpg or .gif). Honbu will automatically grab a copy of the image and set it to the users account.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								[ { id: [integer], forename: "[string]", surname: "[string]", job_title: "[string]", email: "[string]", avatar_file_name: "[string]", avatar_file_size: "[string]", avatar_content_type: "[string]" } ]
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:a
							Element:h2
								View Public Streams
						Node:
						(type) c
						(layer)2
							Element:p
								Returns a list of all the public streams
								url:api/streams.json Request Type:Get Request:
						Node:
						(type) c
						(layer)2
							Element:pre
								Response:
							Element:code
								BLANK
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								[ { id: [integer], name: "[string]", description: "[string]", user_id: [integer], created_at: "[datetime]", updated_at: "[datetime]" } ]
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:a
							Element:h2
								Create a Stream
						Node:
						(type) c
						(layer)2
							Element:p
								Creates a new stream on behalf of the authenticated user.
						Node:
						(type) c
						(layer)2
							Element:p
								Note* The user who creates the new stream will be auto-joined as a member of that stream.
								url:api/streams.json Request Type:Post Request:
						Node:
						(type) c
						(layer)2
							Element:pre
								Response:
							Element:code
								{ auth_token: "[string]", stream: { name: "[string]", description: "[string]", private: [integer], unique_url: "[string]" } }
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								{ id: [integer], name: "[string]", description: "[string]", unique_url: "[string]", user_id: [integer], created_at:"[datetime]", updated_at: "[string]" }
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:a
							Element:h2
								Update a Stream
						Node:
						(type) c
						(layer)2
							Element:p
								Update a stream
								url:api/streams/[stream_id] Request Type:PUT Request:
						Node:
						(type) c
						(layer)2
							Element:pre
								Response:
							Element:code
								{ auth_token: "[string]", stream: { name: "[string]", description: "[string]", private: [integer], unique_url: "[string]" } }
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								{ id: [integer], name: "[string]", description: "[string]", unique_url: "[string]", user_id: [integer], created_at:"[datetime]", updated_at: "[string]" }
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:a
							Element:h2
								Delete a Stream
						Node:
						(type) c
						(layer)2
							Element:p
								Deletes a stream which has been created by the authenticated user only.
								url:api/streams.json Request Type:Post Request:
						Node:
						(type) c
						(layer)2
							Element:pre
								Response:
							Element:code
								{ auth_token: "[string]", stream: { id: [integer] }, _method : "delete" }
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								{ success: true, stream_id: [integer] }
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:a
							Element:h2
								Add Member to Stream
						Node:
						(type) c
						(layer)2
							Element:p
								Adds the authenticated user to a stream.
								url:api/streams/:id/members.json Request Type:Post Request:
						Node:
						(type) c
						(layer)2
							Element:pre
								Response:
							Element:code
								{ auth_token: "[string]", member: { id: [integer], can_manage_users: [true/false] } }
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								{ embed_token: "[string]", }
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:a
							Element:h2
								Remove Members from Stream
						Node:
						(type) c
						(layer)2
							Element:p
								Removes the authenticated user from a stream
								url:api/streams/:id/members.json Request Type:Post Request:
						Node:
						(type) c
						(layer)2
							Element:pre
								Response:
							Element:code
								{ auth_token: "[string]", member: { id: [integer/] //user_id }, _method : "delete" }
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								{ success: true }
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:a
							Element:h2
								View Streams a Member has
						Node:
						(type) c
						(layer)2
							Element:p
								Returns a list of all the streams that the authenticated user is a member of.
								url:api/users/:id/streams.json Request Type:Get Request:
						Node:
						(type) c
						(layer)2
							Element:pre
								Response:
							Element:code
								BLANK
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								[ { id: [integer], name: "[string]", description: "[string]", user_id: [integer], created_at: "[datetime]", updated_at: "[datetime]" } ]
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:a
							Element:h2
								View all Members within a Stream
						Node:
						(type) c
						(layer)2
							Element:p
								Returns a list of all the members belonging to a stream. The authenticated user must already be a member of the requested stream.
								url:api/streams/:id/members.json Request Type:Get Request:
						Node:
						(type) c
						(layer)2
							Element:pre
								Response:
							Element:code
								BLANK
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								[ { id: [integer], workspace_id: [integer], user_id: [integer], can_manage_users: [integer], updated_at: "[datetime]", created_at: "[datetime]" } ]
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:a
							Element:h2
								View Posts belonging to a User
						Node:
						(type) c
						(layer)2
							Element:p
								Returns a list of posts created by the user. Only the authenticated user will return posts created in private streams.
								url:api/users/:id/posts.json Request Type:Get Request:
						Node:
						(type) c
						(layer)2
							Element:pre
								Response:
							Element:code
								BLANK
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								[ { id: [integer], content: "[text]", workspace_id: [integer], user_id: [integer], share_link_active: [true/false], share_secure_link: "[string]", comments: {...}, assets: {...}, enrichments: {...}, created_at: "[datetime]", updated_at: "[datetime]" } ]
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:a
							Element:h2
								View Posts belonging to a Stream
						Node:
						(type) c
						(layer)2
							Element:p
								Returns a list of posts belonging to a given stream. Private stream posts will only be returned for the authenticated user.
								url:api/streams/:id/posts.json Request Type:Get Request:
						Node:
						(type) c
						(layer)2
							Element:pre
								Response:
							Element:code
								BLANK
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								[ { id: [integer], content: "[text]", workspace_id: [integer], user_id: [integer], share_link_active: [true/false], share_secure_link: "[string]", comments: {...}, assets: {...}, enrichments: {...}, created_at: "[datetime]", updated_at: "[datetime]" } ]
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:a
							Element:h2
								View a Users favourite posts
						Node:
						(type) c
						(layer)2
							Element:p
								Returns a list of posts that the authenticated user has favourited.
								url:api/users/:id/favourites.json Request Type:Get Request:
						Node:
						(type) c
						(layer)2
							Element:pre
								Response:
							Element:code
								BLANK
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								[ { id: [integer], content: "[text]", workspace_id: [integer], user_id: [integer], share_link_active: [true/false], share_secure_link: "[string]", created_at: "[datetime]", updated_at: "[datetime]" } ]
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:a
							Element:h2
								Create New Post
						Node:
						(type) c
						(layer)2
							Element:p
								Create a new post within a given stream.
								url:api/posts Request Type:POST Request:
						Node:
						(type) c
						(layer)2
							Element:pre
								Response:
							Element:code
								{ post { content: "[text]", workspace_id: [integer] } }
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								{ id: [integer], content: "[text]", workspace_id: [integer], user_id: [integer], created_at: "[DateTime]", updated_at: "[DateTime]", user: { ... }, workspace: { ... }, comments:[], enrichments: [] }
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:a
							Element:h2
								View a Comment
						Node:
						(type) c
						(layer)2
							Element:p
								View a comment
								url:api/comments/[comment_id] Request Type:GET Request:
						Node:
						(type) c
						(layer)2
							Element:pre
								Response:
							Element:code
								BLANK
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								{ id: [integer], content: "[text]", post_id: [integer], user_id: [integer], user: { ... }, created_at: "[DateTime]", updated_at: "[DateTime]" }
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:a
							Element:h2
								Create New Comment
						Node:
						(type) c
						(layer)2
							Element:p
								Create a new comment
								url:api/comments Request Type:POST Request:
						Node:
						(type) c
						(layer)2
							Element:pre
								Response:
							Element:code
								{ comment { content: "[text]", post_id: [integer] } }
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								{ id: [integer], content: "[text]", post_id: [integer], user_id: [integer], user: { ... }, created_at: "[DateTime]", updated_at: "[DateTime]" }
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:a
							Element:h2
								Generate token to embed Honbu
						Node:
						(type) c
						(layer)2
							Element:p
								Generates and return a unique token used to authenticate a user accessing Honbu within an embedded iFrame.
								url:api/users/generateToken.json Request Type:Get Request:
						Node:
						(type) c
						(layer)2
							Element:pre
								Response:
							Element:code
								BLANK
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								{ embed_token: "[string]" }
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:a
							Element:h2
								Embed Honbu into your Application
						Node:
						(type) c
						(layer)2
							Element:p
								Embedding Honbu into an iFrame inside your own application or website is a breeze.
						Node:
						(type) c
						(layer)2
							Element:p
								All you need to do is make a api call to
							Element:a
								Sign in a user
								and then make another api call to
							Element:a
								Generate a token
								. You can then use the token to build the page as follows.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:strong
								Note
								- [stream_id] is optional. When provided Honbu will show this stream as the active stream. Otherwise the users feed will be shown as the default.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:strong
								Optional
								- It's possible to customise the look n' feel of Honbu's interface. See the example below on how this can be achieved.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								<!DOCTYPE html> <html> <head> <script src="//ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"></script> <script type="text/javascript" src="http://honbu.io/api-endpoint.js"></script> <script type="text/javascript"> $(function() { var h = new Honbu( options: { color: '[HEX Code]', backgroundColor: '[HEX Code]', backgroundUrl: '[URL]' } ); h.initialise(); }); </script> </head> <body> <div data-honbu-channel="[stream_id]" data-honbu-token="[embed_token]"></div> </body> </html>
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:a
							Element:h2
								Authenticating Requests
						Node:
						(type) c
						(layer)2
							Element:p
								The REST API uses the standard HTTP Authorization header to pass the "auth_token" (recieved from the response of the
							Element:a
								Sign in a User
								call). In the syntax of:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								Authorization Basic [auth_token]:X
						Node:
						(type) c
						(layer)2
							Element:p
								The [auth_token]:X must be wrapped around a Base64 encoding call. The 'X' is just a dummy value for the password which will be ignored. However, it must be include nonetheless.
						Node:
						(type) c
						(layer)2
							Element:p
								An example below outlines how to apply authentication to all JavaScript jQuery ajax request. Hopefully, this gives you enough information to apply the same concept to your language of choice.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								$.ajaxSetup({ beforeSend: function(xhr) { xhr.setRequestHeader('Authorization', 'Basic ' + btoa([auth_token] + ":X")); } });
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Available API Calls
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
													Element:h4
														Users
													Element:ul
													Element:li
													Element:p
													Element:a
														Register a User
													Element:li
													Element:p
													Element:a
														Sign in a User
													Element:li
													Element:p
													Element:a
														Sign out a User
													Element:li
													Element:p
													Element:a
														Find a User
													Element:li
													Element:p
													Element:a
														Update a User
													Element:li
													Element:h4
														Streams
													Element:ul
													Element:li
													Element:p
													Element:a
														View Public Streams
													Element:li
													Element:p
													Element:a
														Create a Stream
													Element:li
													Element:p
													Element:a
														Update a Stream
													Element:li
													Element:p
													Element:a
														Delete a stream
													Element:li
													Element:h4
														Stream Members
													Element:ul
													Element:li
													Element:p
													Element:a
														Add Member to Stream
													Element:li
													Element:p
													Element:a
														Remove Members from Stream
													Element:li
													Element:p
													Element:a
														View Streams a Member has
													Element:li
													Element:p
													Element:a
														View all Members within a Stream
													Element:li
													Element:h4
														Posts
													Element:ul
													Element:li
													Element:p
													Element:a
														View Posts belonging to a User
													Element:li
													Element:p
													Element:a
														View Posts belonging to a Stream
													Element:li
													Element:p
													Element:a
														View a Users favourite posts
													Element:li
													Element:p
													Element:a
														Create New Post
													Element:li
													Element:h4
														Comments
													Element:ul
													Element:li
													Element:p
													Element:a
														View a Comment
													Element:li
													Element:p
													Element:a
														Create New Comment
													Element:li
													Element:h4
														Embed Honbu Application
													Element:ul
													Element:li
													Element:p
													Element:a
														Generate token to embed Honbu
													Element:li
													Element:p
													Element:a
														Embed Honbu into your Application
													Element:li
													Element:h4
														Authorisation
													Element:ul
													Element:li
													Element:p
													Element:a
														Authenticating Requests
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:footer
													Element:ul
													Element:li
													Element:h4
														Product
													Element:li
													Element:p
													Element:a
														Home
													Element:li
													Element:p
													Element:a
														Features
													Element:li
													Element:p
													Element:a
														Pricing
													Element:li
													Element:p
													Element:a
														Sign up
													Element:ul
													Element:li
													Element:h4
														Resources
													Element:li
													Element:p
													Element:a
														Sign in
													Element:li
													Element:p
													Element:a
														About Us
													Element:li
													Element:p
													Element:a
														Developer API
													Element:ul
													Element:li
													Element:h4
														Community
													Element:li
													Element:p
													Element:a
														Our blog
													Element:li
													Element:p
													Element:a
														Contact Us
													Element:li
													Element:p
													Element:a
														Follow us on Twitter
													Element:ul
													Element:li
													Element:h4
														Honbu
													Element:p
														Everything, in one place &dash; The best online collaboration software that's free for your business.
													Element:p
														© 2014 honbu.io - All rights reserved.
													Element:a
														Terms & Privacy
												Node:
												(type) c
												(layer)4
													Element:noscript
													Element:img
													Element:img
