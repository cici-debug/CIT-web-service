Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					API reference
			Node:
			(type) c
			(layer)1
				Element:article
			Node:
			(type) h1
			(layer)1
				Element:h1
					API reference
			Node:
			(type) c
			(layer)1
				Element:p
					The Blinksale Application Programming Interface is simply another way to access your Blinksale data—one that makes it easy for third-party and custom tools to programatically access and interact with the service. The API follows the
				Element:a
					REST
					style, and this guide should provide everything you need to implement software that works with Blinksale.
			Node:
			(type) c
			(layer)1
				Element:p
					The
				Element:a
					Terms of Service
					covers the acceptable use of the API (along with the rest of the site). Beyond the legalities, please design your programs to use Blinksale considerately—cache as much as possible, limit the frequency of your requests, and include a
				Element:a
					User-Agent header
					in your requests. If you find a problem with the API, please give us a chance to correct it before going public. If you have any questions or issues, feel free to contact
				Element:a
					support@blinksale.com
					. And let us know how you’re using it—we’d love to hear about it, and help you spread the word about your project.
			Node:
			(type) c
			(layer)1
				Element:p
				Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Client Libraries
						Node:
						(type) c
						(layer)2
							Element:p
								Although the Blinksale API is simple to use, a client library can make it even easier by wrapping the API in your preferred language. Currently, there is only a client library for the
							Element:a
								Ruby
								language. If you develop one for another language, let us know and we’ll link to it here.
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:strong
								— our in-house Ruby client library
							Element:a
								Blinksale.rb
						Node:
						(type) c
						(layer)2
							Element:p
							Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Resources & URIs
						Node:
						(type) c
						(layer)2
							Element:p
								If you’ve used Blinksale, the URIs in the Blinksale API will look familiar. That’s because both views of the application use the same URIs. In REST parlance, URIs are considered identifiers for
							Element:em
								resources
								, and each resource can have several
							Element:em
								representations
								—such as the standard HTML view, an XML version, an Atom version, etc. Generally, each type of data has one
							Element:em
								collection
								resource (e.g.,
							Element:strong
								https://
								) and each collection has several
							Element:em
								example
								.blinksale.com/clients
							Element:em
								member
								resources (e.g.,
							Element:strong
								https://
								). Here are some of the URIs used in the API:
							Element:em
								example
								.blinksale.com/clients/
							Element:em
								client_id
						Node:
						(type) c
						(layer)2
							Element:ol
							Element:li
							Element:strong
								https://
							Element:em
								example
								.blinksale.com/
							Element:li
							Element:strong
								https://
							Element:em
								example
								.blinksale.com/clients
							Element:li
							Element:strong
								https://
							Element:em
								example
								.blinksale.com/clients/
							Element:em
								client_id
							Element:li
							Element:strong
								https://
							Element:em
								example
								.blinksale.com/clients/
							Element:em
								client_id
								/people
							Element:li
							Element:strong
								https://
							Element:em
								example
								.blinksale.com/clients/
							Element:em
								client_id
								/people/
							Element:em
								person_id
							Element:li
							Element:strong
								https://
							Element:em
								example
								.blinksale.com/invoices
							Element:li
							Element:strong
								https://
							Element:em
								example
								.blinksale.com/invoices/
							Element:em
								invoice_id
							Element:li
							Element:strong
								https://
							Element:em
								example
								.blinksale.com/invoices/
							Element:em
								invoice_id
								/deliveries
							Element:li
							Element:strong
								https://
							Element:em
								example
								.blinksale.com/invoices/
							Element:em
								invoice_id
								/deliveries/
							Element:em
								delivery_id
							Element:li
							Element:strong
								https://
							Element:em
								example
								.blinksale.com/invoices/
							Element:em
								invoice_id
								/payments
							Element:li
							Element:strong
								https://
							Element:em
								example
								.blinksale.com/invoices/
							Element:em
								invoice_id
								/payments/
							Element:em
								payment_id
						Node:
						(type) c
						(layer)2
							Element:p
							Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Authentication & Encryption
						Node:
						(type) c
						(layer)2
							Element:p
								All API requests should have your Blinksale ID in the host (like
							Element:strong
								), just like when you access the site through a browser. Login is done with
							Element:em
								example
								.blinksale.com
							Element:a
								HTTP Basic Authentication
								. For example, using the
							Element:a
								cURL
								command line program:
						Node:
						(type) c
						(layer)2
							Element:p
								curl -u
							Element:em
								userid
								:
							Element:em
								password
								https://
							Element:em
								example
								.blinksale.com/
						Node:
						(type) c
						(layer)2
							Element:p
								Most HTTP libraries will handle Basic Authentication details automatically. To do it manually, include an
							Element:strong
								Authorization
								header with a value like
							Element:strong
								Basic
								, in every request. The
							Element:em
								credentials
							Element:em
								credentials
								string should be the Base64-encoded version of the string
							Element:strong
								. For example:
							Element:em
								userid
								:
							Element:em
								password
						Node:
						(type) c
						(layer)2
							Element:p
								Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==
						Node:
						(type) c
						(layer)2
							Element:p
								Because all Blinksale accounts can have unlimited users, you might want to create a user specifically for the API, or for a program that uses the API.
						Node:
						(type) c
						(layer)2
							Element:p
								Free accounts can only access the site with HTTP (unencrypted); paid accounts can use either HTTP or HTTPS (encrypted). To turn on or off HTTPS with your paid account, click “Settings”, then “Invoice Details”, and change the SSL checkbox near the bottom of the page. Note that authentication information is sent with every API request— so
							Element:strong
								if you’re using HTTP, your password will be vulnerable to eavesdropping.
								When using HTTPS, everything (including your password) will be encrypted.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Representation Formats
						Node:
						(type) c
						(layer)2
							Element:p
								The API uses XML for requests and responses, and the expected media type is
							Element:strong
								application/vnd.blinksale+xml
								. That media type should always be specified in two request headers:
							Element:strong
								Content-Type
								(the format of the data you’re sending) and
							Element:strong
								Accept
								(the format of the response you want). For example, again using cURL:
						Node:
						(type) c
						(layer)2
							Element:p
								curl -H ‘Accept: application/vnd.blinksale+xml’ -H ‘Content-Type: application/vnd.blinksale+xml’
							Element:br
								-u
							Element:em
								userid
								:
							Element:em
								password
								https://
							Element:em
								example
								.blinksale.com/
						Node:
						(type) c
						(layer)2
							Element:p
								All XML documents sent to and returned from the service should be
							Element:a
								XML 1.0
								, encoded as
							Element:a
								UTF-8
								, and include the XML namespace
							Element:strong
								https://www.blinksale.com/api
								Within the XML, booleans are represented by the strings
							Element:strong
								true
								and
							Element:strong
								false
								. Dates and times are represented in
							Element:a
								ISO-8601
								, e.g.
							Element:tt
								2006-05-30T03:38:24Z
								.
						Node:
						(type) c
						(layer)2
							Element:p
								In general, data within elements is open to modification, but data within attributes is read-only. For example:
						Node:
						(type) c
						(layer)2
							Element:pre
								<?xml version="1.0" encoding="UTF-8"?> <invoice total="19.00"
							Element:em
								(...)
								> <terms due_date="2006-07-12">15</terms> <tax amount="0.00">8.75</tax_rate>
							Element:em
								(...)
								</invoice>
						Node:
						(type) c
						(layer)2
							Element:p
								In this example, the invoice total, due date, and tax amount are
							Element:em
								not
								editable via the API; they’re derived from other values in the system, so they can be left out of POST and PUT requests. On the other hand, the invoice terms and tax rate are editable.
						Node:
						(type) c
						(layer)2
							Element:p
								In some cases, you may want to request another format, such as the HTML version of an invoice, or the Atom version of a list of invoices—just change the
							Element:strong
								Accept
								header as needed.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Resource Methods
						Node:
						(type) c
						(layer)2
							Element:p
								The Blinksale API uses four standard HTTP methods:
							Element:strong
								GET
								,
							Element:strong
								POST
								,
							Element:strong
								PUT
								, and
							Element:strong
								DELETE
								.
						Node:
						(type) c
						(layer)2
							Element:p
								To retrieve a representation, use the
							Element:strong
								GET
								method. For example (using cURL’s -X option to specify the request method):
						Node:
						(type) c
						(layer)2
							Element:p
								curl -H ‘Accept: application/vnd.blinksale+xml’ -H ‘Content-Type: application/vnd.blinksale+xml’
							Element:br
								-u
							Element:em
								userid
								:
							Element:em
								password
								-X GET https://
							Element:em
								example
								.blinksale.com/clients
						Node:
						(type) c
						(layer)2
							Element:p
								To create a new member resource, use the
							Element:strong
								POST
								method on a collection. The body of the request should be an XML document in the same format as one of the member resources. For example, (using cURL’s -d option to provide a request body):
						Node:
						(type) c
						(layer)2
							Element:p
								curl -H ‘Accept: application/vnd.blinksale+xml’ -H ‘Content-Type: application/vnd.blinksale+xml’
							Element:br
								-u
							Element:em
								userid
								:
							Element:em
								password
								-d ‘<?xml version=”1.0″ encoding=”UTF-8″?>
							Element:br
								<client xmlns=”https://www.blinksale.com/api”>
							Element:br
								<name>Acme Inc.</name>
							Element:br
								</client>’ -X POST https://
							Element:em
								example
								.blinksale.com/clients
						Node:
						(type) c
						(layer)2
							Element:p
								The
							Element:strong
								PUT
								method changes existing member resources. The body of the request should be an XML document in the same format as the member resource. For example:
						Node:
						(type) c
						(layer)2
							Element:p
								curl -H ‘Accept: application/vnd.blinksale+xml’ -H ‘Content-Type: application/vnd.blinksale+xml’
							Element:br
								-u
							Element:em
								userid
								:
							Element:em
								password
								-d ‘<?xml version=”1.0″ encoding=”UTF-8″?>
							Element:br
								<client xmlns=”https://www.blinksale.com/api”>
							Element:br
								<name>Acme Incorporated</name>
							Element:br
								</client>’ -X PUT https://
							Element:em
								example
								.blinksale.com/clients/
							Element:em
								client_id
						Node:
						(type) c
						(layer)2
							Element:p
								The
							Element:strong
								DELETE
								method permanently removes a member resource. For example:
						Node:
						(type) c
						(layer)2
							Element:p
								curl -H ‘Accept: application/vnd.blinksale+xml’ -H ‘Content-Type: application/vnd.blinksale+xml’
							Element:br
								-u
							Element:em
								userid
								:
							Element:em
								password
								-X DELETE https://
							Element:em
								example
								.blinksale.com/clients/
							Element:em
								client_id
						Node:
						(type) c
						(layer)2
							Element:p
								Note that in some cases, deleting a resource will cascade to related resources. For example, deleting a client will also delete the client’s invoices and people.
						Node:
						(type) c
						(layer)2
							Element:p
								Because not all HTTP libraries support the PUT and DELETE methods, they can be tunneled through POST by including a
							Element:strong
								_method
								query parameter in the request, with a value of either
							Element:strong
								PUT
								or
							Element:strong
								DELETE
								.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Responses & Errors
						Node:
						(type) c
						(layer)2
							Element:p
								All response codes are included in the HTTP
							Element:strong
								Status
								response header. Possible status codes include:
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:strong
								200
								: Success (upon a successful GET, PUT, or DELETE request)
							Element:li
							Element:strong
								201
								: Created (upon a successful POST request)
							Element:li
							Element:strong
								400
								: Resource Invalid (improperly formatted request)
							Element:li
							Element:strong
								401
								: Unauthorized (incorrect or missing authentication credentials)
							Element:li
							Element:strong
								404
								: Resource Not Found
							Element:li
							Element:strong
								405
								: Method Not Allowed
							Element:li
							Element:strong
								406
								: Not Acceptable
							Element:li
							Element:strong
								500
								: Application Error
						Node:
						(type) c
						(layer)2
							Element:p
								Successful POST requests (e.g., to create a new invoice) will return a status code of 201, include a
							Element:strong
								Location
								header with the URI of the newly-created resource, and include the XML representation of the resource in the body of the response.
						Node:
						(type) c
						(layer)2
							Element:p
								Successful PUT requests (e.g., to update an existing invoice) will return a status code of 200, and include the XML representation of the resource in the body of the response.
						Node:
						(type) c
						(layer)2
							Element:p
								Successful DELETE requests (e.g., to delete an existing invoice) will return a status code of 200, and no body.
						Node:
						(type) c
						(layer)2
							Element:p
						Node:
						(type) c
						(layer)2
							Element:p
							Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Clients
						Node:
						(type) c
						(layer)2
							Element:p
								The
							Element:strong
								/clients
								resource contains a list of clients with partial detail. The XML representation is formatted like this:
						Node:
						(type) c
						(layer)2
							Element:pre
								<?xml version="1.0" encoding="UTF-8"?> <clients xmlns="https://www.blinksale.com/api" uri="https://example.blinksale.com/clients"> <client uri="https://example.blinksale.com/clients/2"> <name>Haute Haute Heat</name> </client> </clients>
						Node:
						(type) c
						(layer)2
							Element:p
								The client list contains abbreviated information for each client, and a link to the full detail. Those URIs look like
							Element:strong
								/clients/
								, and the XML representation looks like this:
							Element:em
								client_id
						Node:
						(type) c
						(layer)2
							Element:pre
								<?xml version="1.0" encoding="UTF-8"?> <client xmlns="https://www.blinksale.com/api" uri="https://example.blinksale.com/clients/2" updated_at="2006-09-18T16:06:19Z" created_at="2006-05-30T03:38:24Z"> <name>Haute Haute Heat</name> <address1>1234 Main Street</address1> <address2>Suite 123</address2> <city>Anytown</city> <state>TX</state> <zip>70123</zip> <country>US</country> <url>https://www.example.com/</url> <phone>123-555-1212</phone> <fax>123-555-1212</fax> <people uri="https://example.blinksale.com/clients/2/people"> <person uri="https://example.blinksale.com/clients/2/people/2"> <first_name>Bob</first_name> <last_name>Jones</last_name> </person> </people> <invoices uri=""> <invoice uri="https://example.blinksale.com/invoices/1" /> </invoices> </client>
						Node:
						(type) c
						(layer)2
							Element:p
								Creating a new resource doesn’t require every element shown above. For example, to create a client, you could POST to
							Element:strong
								/clients
								with a minimal request body like this:
						Node:
						(type) c
						(layer)2
							Element:pre
								<?xml version="1.0" encoding="UTF-8"?> <client xmlns="https://www.blinksale.com/api"> <name>Haute Haute Heat</name> </client>
						Node:
						(type) c
						(layer)2
							Element:p
								Updating a resource doesn’t require every element either. For example, to change a client’s phone number, you could PUT to
							Element:strong
								/clients/
								with a minimal request body like this:
							Element:em
								client_id
						Node:
						(type) c
						(layer)2
							Element:pre
								<?xml version="1.0" encoding="UTF-8"?> <client xmlns="https://www.blinksale.com/api"> <phone>123-555-1212</phone> </client>
						Node:
						(type) c
						(layer)2
							Element:p
							Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								People
						Node:
						(type) c
						(layer)2
							Element:p
								The
							Element:strong
								/clients/
								resource contains a list of people associated with a client in partial detail. The XML representation is formatted like this:
							Element:em
								client_id
								/people
						Node:
						(type) c
						(layer)2
							Element:pre
								<?xml version="1.0" encoding="UTF-8"?> <people xmlns="https://www.blinksale.com/api" uri="https://example.blinksale.com/clients/2/people"> <person uri="https://example.blinksale.com/clients/2/people/2"> <first_name>Bob</first_name> <last_name>Jones</last_name> <email>bob@example.com</email> </person> </people>
						Node:
						(type) c
						(layer)2
							Element:p
								The person list contains abbreviated information for each person, and a link to the full detail. Those URIs look like
							Element:strong
								/clients/
								, and the XML representation looks like this:
							Element:em
								client_id
								/people/
							Element:em
								person_id
						Node:
						(type) c
						(layer)2
							Element:pre
								<?xml version="1.0" encoding="UTF-8"?> <person xmlns="https://www.blinksale.com/api" uri="https://example.blinksale.com/clients/2/people/2" updated_at="2006-07-26T05:13:52Z" created_at="2006-07-26T04:58:31Z"> <first_name>Bob</first_name> <last_name>Jones</last_name> <email>bob@example.com</email> <phone_office>123-555-1212</phone_office> <phone_mobile>123-555-1212</phone_mobile> </person>
						Node:
						(type) c
						(layer)2
							Element:p
								Creating a new resource doesn’t require every element shown above. For example, to create a person, you could POST to
							Element:strong
								/clients/
								with a minimal request body like this:
							Element:em
								client_id
								/people
						Node:
						(type) c
						(layer)2
							Element:pre
								<?xml version="1.0" encoding="UTF-8"?> <person xmlns="https://www.blinksale.com/api"> <first_name>Bob</first_name> <last_name>Jones</last_name> <email>bob@example.com</email> </person>
						Node:
						(type) c
						(layer)2
							Element:p
								Updating a resource doesn’t require every element either. For example, to change a person’s email address, you could PUT to
							Element:strong
								/clients/
								with a minimal request body like this:
							Element:em
								client_id
								/people/
							Element:em
								person_id
						Node:
						(type) c
						(layer)2
							Element:pre
								<?xml version="1.0" encoding="UTF-8"?> <person xmlns="https://www.blinksale.com/api"> <email>jones@example.com</email> </person>
						Node:
						(type) c
						(layer)2
							Element:p
							Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Invoices
						Node:
						(type) c
						(layer)2
							Element:p
								The
							Element:em
								/invoices
								resource contains a list of invoices with partial detail. The results can be limited by including parameters in the query string, which can be combined in any order:
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:em
								/invoices?start=2006-01-01
								excludes invoices before the given date. Defaults to
							Element:strong
								January 1
								of the current year.
							Element:li
							Element:em
								/invoices?end=2006-12-31
								excludes invoices after the given date. Defaults to
							Element:strong
								December 31
								of the current year.
							Element:li
							Element:em
								/invoices?status=draft
								will only return invoices with the given status (
							Element:strong
								draft
								,
							Element:strong
								open
								,
							Element:strong
								past_due
								,
							Element:strong
								closed
								, or
							Element:strong
								all
								). Defaults to
							Element:strong
								all
								.
							Element:li
							Element:em
								/invoices?tags=foo
								will only return invoices with the given tag.
						Node:
						(type) c
						(layer)2
							Element:p
								The XML representation is formatted like this:
						Node:
						(type) c
						(layer)2
							Element:pre
								<?xml version="1.0" encoding="UTF-8"?> <invoices xmlns="https://www.blinksale.com/api"> <invoice status="open" uri="https://example.blinksale.com/invoices/1" total="37.56" total_due="37.56"> <client name="Acme">https://example.blinksale.com/clients/2</client> <number>100001</number> <date>2006-09-19</date> <terms due_date="2006-10-04">15</terms> <currency>USD</currency> <tags>brian, consulting</tags> </invoice>
							Element:em
								(...)
								</invoices>
						Node:
						(type) c
						(layer)2
							Element:p
								To get invoice lists in other formats, just change your
							Element:strong
								Accept
								header. For
							Element:a
								Atom
								, use
							Element:strong
								application/atom+xml
								. For
							Element:a
								iCalendar
								, use
							Element:strong
								text/calendar
								.
						Node:
						(type) c
						(layer)2
							Element:p
								The invoice list contains abbreviated information for each invoice, and a link to the full detail. Those URIs look like
							Element:em
								/invoices/1
								, and the representation looks like this:
						Node:
						(type) c
						(layer)2
							Element:pre
								<?xml version="1.0" encoding="UTF-8"?> <invoice xmlns="https://www.blinksale.com/api" uri="https://example.blinksale.com/invoices/1" status="pastdue" subtotal="19.00" total="19.00" paid="2.00" total_due="17.00" surplus="0.00" updated_at="2006-09-20T17:27:48Z" created_at="2006-06-27T22:43:13Z"> <client name="Acme">https://example.blinksale.com/clients/2</client> <number>100001</number> <po_number>123456</po_number> <date>2006-06-27</date> <terms due_date="2006-07-12">15</terms> <currency>USD</currency> <tax amount="0.00">8.75%</tax> <freight>0.00</freight> <late_fee amount="0.00">0%</late_fee> <tags>bob, scott</tags> <lines total="882.00"> <line> <name>French Hens</name> <quantity>3.0</quantity> <units>Product</units> <unit_price>19.00</unit_price> <taxed>false</taxed> </line> <line> <name>Piper-Piping</name> <quantity>11.0</quantity> <units>Service</units> <unit_price>75.00</unit_price> <taxed>false</taxed> </line> </lines> <deliveries uri="https://example.blinksale.com/invoices/1/deliveries"> <delivery uri="https://example.blinksale.com/invoices/1/deliveries/3" created_at="2006-09-22T23:51:42Z"> <body>Here's the invoice for the latest work - thanks!</body> <recipient name="John Doe" email="john@acme.com">https://example.blinksale.com/clients/2/people/2</recipient> <recipient name="Bob Smith" email="bob@example.com">https://example.blinksale.com/users/1</recipient> </delivery> </deliveries> <payments uri="https://example.blinksale.com/invoices/1/payments" total="10.00"> <payment uri="https://example.blinksale.com/invoices/1/payments/5" created_at="2006-09-25T18:01:33Z"> <amount>10.00</amount> <date>2006-09-25</date> <payment_method>Check</method> <number>10001</number> </payment> </payments> <notes>Please reference this invoice number in your check memo.</notes> <include_payment_link>true</include_payment_link> </invoice>
						Node:
						(type) c
						(layer)2
							Element:p
								The
							Element:strong
								currency
								element is a property of an invoice, and automatically inherited by its payments, lines, etc.
						Node:
						(type) c
						(layer)2
							Element:p
								The
							Element:strong
								status
								attribute of the
							Element:strong
								invoice
								element can be one of four values:
							Element:strong
								closed
								,
							Element:strong
								pastdue
								,
							Element:strong
								draft
								, or
							Element:strong
								open
								.
						Node:
						(type) c
						(layer)2
							Element:p
								The
							Element:strong
								tags
								element contains a list of tag strings, separated by spaces; space characters are not allowed within tags.
						Node:
						(type) c
						(layer)2
							Element:p
								The
							Element:strong
								units
								element can be one of four values:
							Element:strong
								Service
								,
							Element:strong
								Hours
								,
							Element:strong
								Days
								, or
							Element:strong
								Product
								. The value is purely for presentation—it doesn’t affect how line values are calculated.
						Node:
						(type) c
						(layer)2
							Element:p
								The
							Element:strong
								late_fee
								element can be one of four percentage values (0%, 1%, 1.5%, or 2%) which will accumulate per 30 days past due, or an absolute fee (e.g., 100.00) that will be applied one time only. The
							Element:strong
								amount
								attribute of the
							Element:strong
								late_fee
								element will show the absolute amount of the current late fee. In other words, if a $100 invoice has a late fee of 1%, the
							Element:strong
								amount
								attribute on the
							Element:strong
								late_fee
								element will be 0.00 for the first 30 days, 1.00 when 30 days past due, 2.00 when 60 days past due, etc.
						Node:
						(type) c
						(layer)2
							Element:p
								The
							Element:strong
								notes
								element should be plain text.
						Node:
						(type) c
						(layer)2
							Element:p
								Creating a new resource doesn’t require every element shown above. For example, to create an invoice, you could POST to
							Element:strong
								/invoices
								with a minimal request body like this:
						Node:
						(type) c
						(layer)2
							Element:pre
								<?xml version="1.0" encoding="UTF-8"?> <invoice> <client>https://example.blinksale.com/clients/38732</client> <number>100001</number> <date>2006-09-27</date> <terms>30</terms> <currency>USD</currency> <lines> <line> <name>Consulting</name> <quantity>1.0</quantity> <units>Hours</units> <unit_price>100.00</unit_price> <taxed>false</taxed> </line> </lines> </invoice>
						Node:
						(type) c
						(layer)2
							Element:p
								Updating a resource doesn’t require every element either. For example, to change an invoice’s tags, you could PUT to
							Element:strong
								/invoices/
								with a minimal request body like this:
							Element:em
								invoice_id
						Node:
						(type) c
						(layer)2
							Element:pre
								<?xml version="1.0" encoding="UTF-8"?> <invoice xmlns="https://www.blinksale.com/api"> <tags>foo, bar</tags> </invoice>
						Node:
						(type) c
						(layer)2
							Element:p
							Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Deliveries
						Node:
						(type) c
						(layer)2
							Element:p
								The
							Element:strong
								/invoices/
								resource contains a list of deliveries for an invoice—in other words, a record of every time the invoice has been sent. The XML representation is formatted like this:
							Element:em
								invoice_id
								/deliveries
						Node:
						(type) c
						(layer)2
							Element:pre
								<?xml version="1.0" encoding="UTF-8"?> <deliveries uri="https://example.blinksale.com/invoices/1/deliveries" xmlns="https://www.blinksale.com/api"> <delivery uri="https://example.blinksale.com/invoices/1/deliveries/3" created_at="2006-09-22T23:51:42Z"> <body>Here's the invoice for the latest work - thanks!</body> <recipient name="John Doe" email="john@acme.com">https://example.blinksale.com/clients/2/people/2</recipient> <recipient name="Bob Smith" email="bob@example.com">https://example.blinksale.com/users/1</recipient> </delivery> </deliveries>
						Node:
						(type) c
						(layer)2
							Element:p
								The member resource URIs look like
							Element:strong
								/invoices/
								, and their XML representation looks like this:
							Element:em
								invoice_id
								/deliveries/
							Element:em
								delivery_id
						Node:
						(type) c
						(layer)2
							Element:pre
								<?xml version="1.0" encoding="UTF-8"?> <delivery uri="https://example.blinksale.com/invoices/1/deliveries/3" xmlns="https://www.blinksale.com/api" created_at="2006-09-22T23:51:42Z"> <body>Here's the invoice for the latest work - thanks!</body> <recipient name="John Doe" email="john@acme.com">https://example.blinksale.com/clients/2/people/2</recipient> <recipient name="Bob Smith" email="bob@example.com">https://example.blinksale.com/users/1</recipient> </delivery>
						Node:
						(type) c
						(layer)2
							Element:p
								The
							Element:strong
								delivery
								element can contain any number of
							Element:strong
								recipient
								elements, each of which should contain a URI for a person.
						Node:
						(type) c
						(layer)2
							Element:p
								Creating a new resource doesn’t require every element shown above. For example, to send an invoice, you could POST to
							Element:strong
								/invoices/
								with a minimal request body like this:
							Element:em
								invoice_id
								/deliveries
						Node:
						(type) c
						(layer)2
							Element:pre
								<?xml version="1.0" encoding="UTF-8"?> <delivery xmlns="https://www.blinksale.com/api"> <recipient>https://
							Element:em
								example
								.blinksale.com/clients/
							Element:em
								client_id
								/people/
							Element:em
								person_id
								</recipient> </delivery>
						Node:
						(type) c
						(layer)2
							Element:p
							Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Payments
						Node:
						(type) c
						(layer)2
							Element:p
								The
							Element:strong
								/invoices/
								resource contains a list of payments for an invoice. The XML representation is formatted like this:
							Element:em
								invoice_id
								/payments
						Node:
						(type) c
						(layer)2
							Element:pre
								<?xml version="1.0" encoding="UTF-8"?> <payments xmlns="https://www.blinksale.com/api" uri="https://example.blinksale.com/invoices/1/payments" total="10.00"> <payment uri="https://example.blinksale.com/invoices/1/payments/5" created_at="2006-09-25T18:01:33Z"> <amount>10.00</amount> <date>2006-09-25</date> <payment_method>Check</method> <number>10001</number> </payment> </payments>
						Node:
						(type) c
						(layer)2
							Element:p
								The member resource URIs look like
							Element:strong
								/invoices/
								, and the XML representation looks like this:
							Element:em
								invoice_id
								/payments/
							Element:em
								payment_id
						Node:
						(type) c
						(layer)2
							Element:pre
								<?xml version="1.0" encoding="UTF-8"?> <payment xmlns="https://www.blinksale.com/api" uri="https://example.blinksale.com/invoices/1/payments/5" created_at="2006-09-25T18:01:33Z"> <amount>10.00</amount> <date>2006-09-25</date> <payment_method>Check</method> <number>10001</number> </payment>
						Node:
						(type) c
						(layer)2
							Element:p
								Creating a new resource doesn’t require every element shown above. For example, to record a payment, you could POST to
							Element:strong
								/invoices/
								with a minimal request body like this:
							Element:em
								invoice_id
								/payments
						Node:
						(type) c
						(layer)2
							Element:pre
								<?xml version="1.0" encoding="UTF-8"?> <payment xmlns="https://www.blinksale.com/api"> <amount>1000.00</amount> <date>2006-09-27</date> </payment>
						Node:
						(type) c
						(layer)2
							Element:p
							Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Questions?
						Node:
						(type) c
						(layer)2
							Element:p
								If you have any questions or issues, feel free to contact
							Element:a
								support@blinksale.com
								.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Document History
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:strong
											2007-03-19
											: Adding the (optional)
										Element:strong
											notes
											and
										Element:strong
											include_payment_link
											elements to the invoices representation. Backwards compatible.
										Element:li
										Element:strong
											2006-10-02
											: Release 1.0
										Element:li
										Element:strong
											2006-09-20
											: Prerelease
										Element:aside
										Element:ul
										Element:li
										Element:h3
											Categories
										Element:ul
										Element:li
										Element:a
											Help
										Element:li
										Element:a
											News & Updates
										Element:li
										Element:a
											Business Chatter
										Element:li
										Element:a
											Praise & Props
										Element:li
										Element:a
											Tips & Tricks
										Element:li
										Element:a
											Other Stuff
										Element:li
										Element:a
											Subscriptions and Billing
										Element:li
										Element:a
											Blinkbits
										Element:a
										Element:span
											Subscribe
										Element:i
										Element:i
										Element:footer
										Element:h2
										Element:a
											DoubleWide
										Element:p
											Blinksale is run by the fine folks at Doublewide Partners, from Dallas, Texas. We're committed to keeping Blinksale the easiest, most productive way for creative professionals and small businesses to send invoices on the Web. So you can get paid and get right back to doing what you love.
										Element:ul
										Element:li
											Email:
										Element:a
											support@blinksale.com
										Element:li
										Element:span
											Phone:
										Element:a
											214-580-2003
										Element:li
										Element:ul
										Element:li
										Element:a
											Privacy Policy
										Element:li
										Element:a
											Terms of Service
										Element:li
										Element:a
											Security
										Element:li
										Element:a
											Contact Us
										Element:ul
										Element:li
										Element:a
											Facebook
										Element:li
										Element:a
											Twitter
										Element:p
											© 2017
										Element:span
											Blinksale.
											All rights reserved.
