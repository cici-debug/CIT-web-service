Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					Group Management API
			Node:
			(type) c
			(layer)1
				Element:p
					The Group Management API allows you to list the groups in your domain, show the details of an individual group, manage group membership, create new groups, rename groups, and delete groups. This API is designed to comply with
				Element:a
					SCIM 1.1
			Node:
			(type) c
			(layer)1
				Element:p
					Note that the user and group endpoints are v2, unlike the other endpoints within the Egnyte API.
			Node:
			(type) c
			(layer)1
				Element:p
				Element:a
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:span
											List Groups
									Node:
									(type) c
									(layer)3
										Element:p
											This endpoint is used to list all the groups in your domain.
									Node:
									(type) c
									(layer)3
										Element:span
											GET
											/pubapi/v2/groups
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Request Examples
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
													Element:a
														HTTP
													Element:li
													Element:a
														cURL
													Element:li
													Element:a
														Ruby
												Node:
												(type) c
												(layer)4
													Element:pre
														GET /pubapi/v2/groups HTTP/1.1 Host: apidemo.egnyte.com Authorization: Bearer 68zc95e3xv954u6k3hbnma3q
												Node:
												(type) c
												(layer)4
													Element:pre
														curl -v -H "Authorization: Bearer 68zc95e3xv954u6k3hbnma3q" \ https://apidemo.egnyte.com/pubapi/v2/groups
												Node:
												(type) c
												(layer)4
													Element:pre
														require 'egnyte' session = Egnyte::Session.new({domain:'apidemo', access_token:'68zc95e3xv954u6k3hbnma3q'}, :password) client = Egnyte::Client.new(session) # Call the endpoint and save result to a variable groups = client.groups # Or, if you want to call the endpoint without a client. # groups = Egnyte::Group.all(session)
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Sample Response Body
												Node:
												(type) c
												(layer)4
													Element:pre
														{ "schemas":["urn:scim:schemas:core:1.0"], "totalResults":3, "itemsPerPage":3, "startIndex":1, "resources":[{ "id":"8b9dd5aa-40ab-4a43-9b76-f55a412c8a6a", "displayName":"IT" },{ "id":"d5ea2e76-63e4-4b47-92af-0d7ba6972e3c", "displayName":"Finance" },{ "id":"a1004249-5e29-438f-ad72-b4e90af14ee7", "displayName":"Sales" }] }
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Request Parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tbody
													Element:tr
													Element:th
														Parameter
													Element:th
														Description
													Element:th
														Required
													Element:tr
													Element:td
													Element:span
														startIndex
													Element:td
														The 1-based index of the initial record being requested (Integer â‰¥ 1).
													Element:td
														No
													Element:tr
													Element:td
													Element:span
														count
													Element:td
														The number of entries per page (min 1, max 100)
													Element:td
														No
													Element:tr
													Element:td
													Element:span
														filter
													Element:td
													Element:p
														Allows you to request a subset of groups. These terms are not case sensitive. For example, the following commands could be used to find a group named Accounting:
													Element:ul
													Element:li
														filter=displayName eq "accounting" (for equals "accounting")
													Element:li
														filter=displayname co "ccou" (for contains the letters "ccou")
													Element:li
														filter=displayname sw "acc" (for starts with "acc")
													Element:p
														Note: if you have trouble with these filters, please make sure you are URL encoding the spaces.
													Element:td
														No
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Response Parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tbody
													Element:tr
													Element:th
														Element
													Element:th
														Description
													Element:tr
													Element:td
													Element:span
														itemsPerPage
													Element:td
														The number of results returned.
													Element:tr
													Element:td
													Element:span
														totalResults
													Element:td
														The total number of results matching the query.
													Element:tr
													Element:td
													Element:span
														startIndex
													Element:td
														The 1-based index of the first result in the current set of results.
													Element:tr
													Element:td
													Element:span
														schemas
													Element:td
														The SCIM schema version of the response.
													Element:tr
													Element:td
													Element:span
														resources
													Element:td
														A JSON array that holds all of the group objects.
													Element:tr
													Element:td
													Element:span
														id
													Element:td
														The globally unique group ID.
													Element:tr
													Element:td
													Element:span
														displayName
													Element:td
														The name of the group.
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Method-specific Response Codes
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tbody
													Element:tr
													Element:th
														Error Code
													Element:th
														Error Message
													Element:th
														HTTP Code
													Element:th
														Troubleshooting
													Element:tr
													Element:td
													Element:span
														STARTINDEX_WRONG_VALUE
													Element:td
														Start index parameter is less than 1
													Element:td
														400
													Element:td
														Make sure you are using an integer value of 1 or more.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:span
											Show Single Group
									Node:
									(type) c
									(layer)3
										Element:p
											This endpoint is used to see which users are in the group and view group attributes.
									Node:
									(type) c
									(layer)3
										Element:span
											GET
											/pubapi/v2/groups/{group_id}
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Request Examples
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
													Element:a
														HTTP
													Element:li
													Element:a
														cURL
													Element:li
													Element:a
														Ruby
												Node:
												(type) c
												(layer)4
													Element:pre
														GET /pubapi/v2/groups/e085cf02-0625-459b-b6f9-fa4dd92d908d HTTP/1.1 Host: apidemo.egnyte.com Authorization: Bearer 68zc95e3xv954u6k3hbnma3q
												Node:
												(type) c
												(layer)4
													Element:pre
														curl -v -H "Authorization: Bearer 68zc95e3xv954u6k3hbnma3q" \ https://apidemo.egnyte.com/pubapi/v2/groups/e085cf02-0625-459b-b6f9-fa4dd92d908d
												Node:
												(type) c
												(layer)4
													Element:pre
														require 'egnyte' session = Egnyte::Session.new({domain:'apidemo', access_token:'68zc95e3xv954u6k3hbnma3q'}, :password) client = Egnyte::Client.new(session) # Call the endpoint and save result to a variable my_group = client.group("a1004249-5e29-438f-ad72-b4e90af14ee7") # Or, if you want to call the endpoint without a client. # my_group = Egnyte::Group.find(session, "a1004249-5e29-438f-ad72-b4e90af14ee7")
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Sample Response Body
												Node:
												(type) c
												(layer)4
													Element:pre
														{ "schemas":["urn:scim:schemas:core:1.0"], "id":"e3ba9d90-ebc7-483e-abaa-a84e92480c86", "displayName":"Finance", "members":[ { "username":"test", "value":9967960066, "display":"Test User" },{ "username":"jdoe", "value":9967960068, "display":"John Doe" },{ "username":"jadoe", "value":9967960069, "display":"Jane Doe" } ] }
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Response Parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tbody
													Element:tr
													Element:th
														Element
													Element:th
														Description
													Element:tr
													Element:td
													Element:span
														schemas
													Element:td
														The SCIM schema version of the response.
													Element:tr
													Element:td
													Element:span
														id
													Element:td
														The globally unique group ID.
													Element:tr
													Element:td
													Element:span
														displayName
													Element:td
														The name of the group.
													Element:tr
													Element:td
													Element:span
														members
													Element:td
														A JSON array containing all users in the group.
													Element:tr
													Element:td
													Element:span
														username
													Element:td
														The username of a group member.
													Element:tr
													Element:td
													Element:span
														value
													Element:td
														The globally unique id of a group member.
													Element:tr
													Element:td
													Element:span
														display
													Element:td
														The display name of a group member.
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Method-specific Response Codes
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tbody
													Element:tr
													Element:th
														Error Code
													Element:th
														Error Message
													Element:th
														HTTP Code
													Element:th
														Troubleshooting
													Element:tr
													Element:td
													Element:span
														GROUP_NOT_FOUND
													Element:td
														group with resource id (SPECIFIED_GROUP_ID) not found
													Element:td
														404
													Element:td
														You may have used an invalid group ID or that group may have already been deleted.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:span
											Create a Group
									Node:
									(type) c
									(layer)3
										Element:span
											POST
											/pubapi/v2/groups
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:a
											HTTP
										Element:li
										Element:a
											cURL
										Element:li
										Element:a
											Ruby
									Node:
									(type) c
									(layer)3
										Element:pre
											POST /pubapi/v2/groups HTTP/1.1 Host: apidemo.egnyte.com Authorization: Bearer 68zc95e3xv954u6k3hbnma3q Content-Type: application/json Content-Length: 85 { "displayName":"API Test", "members":[ {"value":9967960068}, {"value":9967960069} ] }
									Node:
									(type) c
									(layer)3
										Element:pre
											curl -v --request POST -H "Authorization: Bearer 68zc95e3xv954u6k3hbnma3q" \ -H "Content-Type: application/json" \ --data '{"displayName":"API Test", "members":[{"value":9967960068},{"value":9967960069}]}' \ https://apidemo.egnyte.com/pubapi/v2/groups
									Node:
									(type) c
									(layer)3
										Element:pre
											require 'egnyte' session = Egnyte::Session.new({domain:'apidemo', access_token:'68zc95e3xv954u6k3hbnma3q'}, :password) client = Egnyte::Client.new(session) # Call the endpoint and save result to a variable my_group = client.create_group({displayName: "Test with members",members: [9967960066, 9967960068]}) # Or, if you want to call the endpoint without a client. # my_group = Egnyte::Group.create(session, {displayName: "Test with members",members: [9967960066, 9967960068]})
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Request Parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tbody
													Element:tr
													Element:th
														Parameter
													Element:th
														Description
													Element:th
														Required
													Element:tr
													Element:td
													Element:span
														displayName
													Element:td
														The name of the group.
													Element:td
													Element:span
														Yes
													Element:tr
													Element:td
													Element:span
														members
													Element:td
														A JSON array containing all users in the group.
													Element:td
														No
													Element:tr
													Element:td
													Element:span
														value
													Element:td
														The globally unique id of a group member.
													Element:td
														No
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Sample Response Body
												Node:
												(type) c
												(layer)4
													Element:pre
														{ "schemas":["urn:scim:schemas:core:1.0"], "id":"f9366462-7070-4adb-b866-9a953527507b", "displayName":"API Test", "members":[ { "username":"jdoe", "value":9967960068, "display":"John Doe" },{ "username":"jadoe", "value":9967960069, "display":"Jane Doe" }] }
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Method-specific Response Codes
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tbody
													Element:tr
													Element:th
														Error Code
													Element:th
														Error Message
													Element:th
														HTTP Code
													Element:th
														Troubleshooting
													Element:tr
													Element:td
													Element:span
														ERROR_DUPLICATE_GROUP_NAME
													Element:td
														Group already exists.
													Element:td
														409
													Element:td
														A group with same name already exists. You can find that group in the
													Element:a
														group listing
														endpoint or create a group with a different name.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:span
											Full Update to a Group
									Node:
									(type) c
									(layer)3
										Element:p
											This endpoint is used to overwrite all of the attributes of a group. This is especially useful for making a change to settings that ensures all prior settings are removed.
									Node:
									(type) c
									(layer)3
										Element:span
											PUT
											/pubapi/v2/groups/{group_id}
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:a
											HTTP
										Element:li
										Element:a
											cURL
										Element:li
										Element:a
											Ruby
									Node:
									(type) c
									(layer)3
										Element:pre
											PUT /pubapi/v2/groups/a1004249-5e29-438f-ad72-b4e90af14ee7 HTTP/1.1 Host: apidemo.egnyte.com Authorization: Bearer 68zc95e3xv954u6k3hbnma3q Content-Type: application/json Content-Length: 87 { "displayName":"Engineering", "members":[ {"value":9967960068}, {"value":9967960069} ] }
									Node:
									(type) c
									(layer)3
										Element:pre
											curl -v --request PUT -H "Authorization: Bearer 68zc95e3xv954u6k3hbnma3q" \ -H "Content-Type: application/json" --data '{"displayName":"Engineering", \ "members":[{"value":9967960068},{"value":9967960069}]}' \ https://apidemo.egnyte.com/pubapi/v2/groups/a1004249-5e29-438f-ad72-b4e90af14ee7
									Node:
									(type) c
									(layer)3
										Element:pre
											require 'egnyte' session = Egnyte::Session.new({domain:'apidemo', access_token:'68zc95e3xv954u6k3hbnma3q'}, :password) client = Egnyte::Client.new(session) # The Ruby API Client always does a full update of a group based on the object's parameters. # In this example, I get an arbitrary group and change its name to "Example" and change group membership. my_group = client.groups.first my_group.name = "Example" my_group.members = [client.users.first.id] my_group.save
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Request Parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tbody
													Element:tr
													Element:th
														Parameter
													Element:th
														Description
													Element:th
														Required
													Element:tr
													Element:td
													Element:span
														displayName
													Element:td
														The name of the group.
													Element:td
													Element:span
														Yes
													Element:tr
													Element:td
													Element:span
														members
													Element:td
														A JSON array containing all users in the group.
													Element:td
														No
													Element:tr
													Element:td
													Element:span
														value
													Element:td
														The globally unique id of a group member.
													Element:td
														No
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Sample Response Body
												Node:
												(type) c
												(layer)4
													Element:pre
														{ "schemas":["urn:scim:schemas:core:1.0"], "id":"a1004249-5e29-438f-ad72-b4e90af14ee7", "displayName":"Engineering", "members":[{ "username":"jdoe", "value":9967960068, "display":"John Doe" }, { "username":"jadoe", "value":9967960069, "display":"Jane Doe" }] }
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Method-specific Response Codes
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tbody
													Element:tr
													Element:th
														Error Code
													Element:th
														Error Message
													Element:th
														HTTP Code
													Element:th
														Troubleshooting
													Element:tr
													Element:td
														USER_NOT_FOUND
													Element:span
														USER_NOT_FOUND
													Element:td
														User (#) does not exist
													Element:td
														400
													Element:td
														You may have used an invalid user ID or that user may have already been deleted.
													Element:tr
													Element:td
														GROUP_NOT_FOUND
													Element:span
														GROUP_NOT_FOUND
													Element:td
														group with resource id (SPECIFIED_GROUP_ID) not found
													Element:td
														404
													Element:td
														You may have used an invalid group ID or that group may have already been deleted.
													Element:tr
													Element:td
														ERROR_DUPLICATE_GROUP_NAME
													Element:span
														ERROR_DUPLICATE_GROUP_NAME
													Element:td
														Group already exists.
													Element:td
														409
													Element:td
														A group with same name already exists. You can find that group in the
													Element:a
														group listing
														endpoint or create a group with a different name.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:span
											Partial Update to a Group
									Node:
									(type) c
									(layer)3
										Element:p
											This endpoint is used to update specific attributes of a group. This is especially useful for making incremental modifications to a folder.
									Node:
									(type) c
									(layer)3
										Element:span
											PATCH
											/pubapi/v2/groups/{group_id}
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Rename the group
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
													Element:a
														HTTP
													Element:li
													Element:a
														cURL
													Element:li
													Element:a
														Ruby
												Node:
												(type) c
												(layer)4
													Element:pre
														PATCH /pubapi/v2/groups/a1004249-5e29-438f-ad72-b4e90af14ee7 HTTP/1.1 Host: apidemo.egnyte.com Authorization: Bearer 68zc95e3xv954u6k3hbnma3q Content-Type: application/json Content-Length: 23 {"displayName":"Sales"}
												Node:
												(type) c
												(layer)4
													Element:pre
														curl -v --request PATCH -H "Authorization: Bearer 68zc95e3xv954u6k3hbnma3q" \ -H "Content-Type: application/json" --data '{"displayName": "Sales"}' \ https://apidemo.egnyte.com/pubapi/v2/groups/a1004249-5e29-438f-ad72-b4e90af14ee7
												Node:
												(type) c
												(layer)4
													Element:pre
														require 'egnyte' session = Egnyte::Session.new({domain:'apidemo', access_token:'68zc95e3xv954u6k3hbnma3q'}, :password) client = Egnyte::Client.new(session) # The Ruby API Client always does a full update of a group based on the object's parameters. # In this example, I get an arbitrary group and change its name to "Example." my_group = client.groups.first my_group.name = "Example" my_group.save
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Add a user to the group
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
													Element:a
														HTTP
													Element:li
													Element:a
														cURL
													Element:li
													Element:a
														Ruby
												Node:
												(type) c
												(layer)4
													Element:pre
														PATCH /pubapi/v2/groups HTTP/1.1 Host: apidemo.egnyte.com Authorization: Bearer 68zc95e3xv954u6k3hbnma3q Content-Type: application/json Content-Length: 34 { "members":[ {"value":9967960066} ] }
												Node:
												(type) c
												(layer)4
													Element:pre
														curl -v --request PATCH -H "Authorization: Bearer 68zc95e3xv954u6k3hbnma3q" \ -H "Content-Type: application/json" --data '{"members":[{"value":9967960066}]}' \ https://apidemo.egnyte.com/pubapi/v2/groups/a1004249-5e29-438f-ad72-b4e90af14ee7
												Node:
												(type) c
												(layer)4
													Element:pre
														require 'egnyte' session = Egnyte::Session.new({domain:'apidemo', access_token:'68zc95e3xv954u6k3hbnma3q'}, :password) client = Egnyte::Client.new(session) # The Ruby API Client always does a full update of a group based on the object's parameters. # In this example, I get an arbitrary group and an arbitrary user to it. my_group = client.groups.first my_group.members = [client.users.first.id] my_group.save
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Remove a user from the group
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
													Element:a
														HTTP
													Element:li
													Element:a
														cURL
												Node:
												(type) c
												(layer)4
													Element:pre
														PATCH /pubapi/v2/groups HTTP/1.1 Host: apidemo.egnyte.com Authorization: Bearer 68zc95e3xv954u6k3hbnma3q Content-Type: application/json Content-Length: 34 { "members":[ { "operation":"delete", "value":9967960066 } ] }
												Node:
												(type) c
												(layer)4
													Element:pre
														curl -v --request PATCH -H "Authorization: Bearer 68zc95e3xv954u6k3hbnma3q" \ -H "Content-Type: application/json" \ --data '{"members":[{"operation":"delete","value":9967960066}]}' \ https://apidemo.egnyte.com/pubapi/v2/groups/a1004249-5e29-438f-ad72-b4e90af14ee7
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tbody
													Element:tr
													Element:th
														Element
													Element:th
														Description
													Element:tr
													Element:td
													Element:span
														displayName
													Element:td
														The name of the group.
													Element:tr
													Element:td
													Element:span
														members
													Element:td
														A JSON array containing all users in the group.
													Element:tr
													Element:td
													Element:span
														value
													Element:td
														The globally unique id of a group member.
													Element:tr
													Element:td
													Element:span
														members
													Element:td
														A JSON array containing all users being modified.
													Element:tr
													Element:td
													Element:span
														operation
													Element:td
														The action you wish to perform on a group. The only supported value is the "delete" action.
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Sample Response Body
												Node:
												(type) c
												(layer)4
													Element:pre
														{ "schemas":["urn:scim:schemas:core:1.0"], "id":"a1004249-5e29-438f-ad72-b4e90af14ee7", "displayName":"Example", "members":[ { "username":"jdoe", "value":9967960068, "display":"John Doe" }, { "username":"jadoe", "value":9967960069, "display":"Jane Doe" } ] }
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Method-specific Response Codes
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tbody
													Element:tr
													Element:th
														Error Code
													Element:th
														Error Message
													Element:th
														HTTP Code
													Element:th
														Troubleshooting
													Element:tr
													Element:td
													Element:span
														USER_NOT_FOUND
													Element:td
														User (#) does not exist
													Element:td
														400
													Element:td
														You may have used an invalid user ID or that user may have already been deleted.
													Element:tr
													Element:td
													Element:span
														GROUP_NOT_FOUND
													Element:td
														group with resource id (SPECIFIED_GROUP_ID) not found
													Element:td
														404
													Element:td
														You may have used an invalid group ID or that group may have already been deleted.
													Element:tr
													Element:td
													Element:span
														ERROR_DUPLICATE_GROUP_NAME
													Element:td
														Group already exists.
													Element:td
														409
													Element:td
														A group with same name already exists. You can find that group in the
													Element:a
														group listing
														endpoint or create a group with a different name.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:span
											Delete a Group
									Node:
									(type) c
									(layer)3
										Element:span
											DELETE
											/pubapi/v2/groups/{group_id}
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Request Examples
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
													Element:a
														HTTP
													Element:li
													Element:a
														cURL
													Element:li
													Element:a
														Ruby
												Node:
												(type) c
												(layer)4
													Element:pre
														DELETE /pubapi/v2/groups/e085cf02-0625-459b-b6f9-fa4dd92d908d HTTP/1.1 Host: apidemo.egnyte.com Authorization: Bearer 68zc95e3xv954u6k3hbnma3q
												Node:
												(type) c
												(layer)4
													Element:pre
														curl -v --request DELETE -H "Authorization: Bearer 68zc95e3xv954u6k3hbnma3q" \ https://apidemo.egnyte.com/pubapi/v2/groups/e085cf02-0625-459b-b6f9-fa4dd92d908d
												Node:
												(type) c
												(layer)4
													Element:pre
														require 'egnyte' session = Egnyte::Session.new({domain:'apidemo', access_token:'68zc95e3xv954u6k3hbnma3q'}, :password) client = Egnyte::Client.new(session) # In this example, I get an arbitrary group and delete it. client.groups.first.delete
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Method-specific Response Codes
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tbody
													Element:tr
													Element:th
														Error Code
													Element:th
														Error Message
													Element:th
														HTTP Code
													Element:th
														Troubleshooting
													Element:tr
													Element:td
													Element:span
														GROUP_NOT_FOUND
													Element:td
														group with resource id (SPECIFIED_GROUP_ID) not found
													Element:td
														404
													Element:td
														You may have used an invalid group ID or that group may have already been deleted.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														version 18
													Element:span
														as of
													Element:abbr
														2 years ago
													Element:span
														by
													Element:span
													Element:a
														David Pfeffer
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
													Element:span
														Previous:
													Element:a
														User Management API
													Element:li
													Element:span
														Up:
													Element:a
														Overview
													Element:li
													Element:span
														Next:
													Element:a
														Audit Reporting API
												Node:
												(type) c
												(layer)4
						Node:
						(type) c
						(layer)2
							Element:h2
								Docs Navigation
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:a
								Overview
							Element:li
							Element:a
								Getting Started
							Element:li
							Element:a
								Authentication
							Element:li
							Element:a
								File System API
							Element:li
							Element:a
								Permissions API
							Element:li
							Element:a
								Events API
							Element:li
							Element:a
								Search API
							Element:li
							Element:a
								Links API
							Element:li
							Element:a
								User Management API
							Element:li
							Element:a
								Group Management API
							Element:li
							Element:a
								Audit Reporting API
							Element:li
							Element:a
								UI Integration Framework
							Element:li
							Element:a
								Trash API
							Element:li
							Element:a
								Comments API
							Element:li
							Element:a
								Metadata API
							Element:li
							Element:a
								Embedded UI API
							Element:li
							Element:a
								Bookmarks API
							Element:li
							Element:a
								Folder Options API
							Element:li
							Element:a
								Best Practices
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:a
								Get API Key
							Element:li
							Element:a
								API Docs
							Element:li
							Element:a
								Getting Started
							Element:li
							Element:a
								Explore APIs
							Element:li
							Element:a
								Explore SDKs
						Node:
						(type) c
						(layer)2
							Element:noscript
							Element:img
