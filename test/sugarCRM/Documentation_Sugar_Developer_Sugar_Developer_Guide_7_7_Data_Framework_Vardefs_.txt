Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					Vardefs
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Overview
						Node:
						(type) c
						(layer)2
							Element:p
								Vardefs (Variable Definitions) provide the Sugar application with information about
							Element:a
								SugarBeans
								. Vardefs specify information on the individual fields, relationships between beans, and the indexes for a given bean.
						Node:
						(type) c
						(layer)2
							Element:p
								Each module that contains a SugarBean file has a
							Element:code
								vardefs.php
								file located in it, which specifies the fields for that SugarBean. For example, the vardefs for the Contact bean are located in
							Element:code
								./modules/Contacts/vardefs.php
								.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Dictionary Array
									Node:
									(type) c
									(layer)3
										Element:p
											Vardef files create an array called
										Element:code
											$dictionary
											, which contains several entries including tables, fields, indices, and relationships.
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:strong
											table
											: The name of the database table (usually, the name of the module) for this bean that contains the fields
										Element:li
										Element:strong
											audited
											: Specifies whether the module has field-level auditing enabled
										Element:li
										Element:strong
											duplicate_check
											: Determines if
										Element:a
											duplicate checking
											is enabled on the module, and what duplicate check strategy will be used if enabled.
										Element:li
										Element:strong
											fields
											: A list of fields and their
										Element:a
											attributes
										Element:li
										Element:strong
											indices
											: A list of
										Element:a
											indexes
											that should be created in the database
										Element:li
										Element:strong
											optimistic_locking
											: Determines whether the module has optimistic locking enabled
										Element:ul
										Element:li
											Optimistic locking prevents loss of data by using the bean's modified date to ensure that it is not being modified simultaneously by more than one person or process.
										Element:li
										Element:strong
											unified_search
											: Determines whether the module can be searched via Global Search
										Element:br
										Element:ul
										Element:li
											This setting defaults to false and has no effect if all of the fields in the fields array have the 'unified_search' field attribute set to false.
										Element:li
										Element:strong
											unified_search_default_enabled
											: Determines whether the module should be searched by default for new users via Global Search
										Element:ul
										Element:li
											This setting defaults to true but has no effect if unified_search is set to false.
										Element:li
										Element:strong
											visibility
											: A list of
										Element:a
											visibility
											classes enabled on the module
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Duplicate Check Array
									Node:
									(type) c
									(layer)3
										Element:p
											The duplicate_check array contains two properties, that control if duplicate checking is enabled on the module, and which duplicate check strategy will be used to check for duplicates.
									Node:
									(type) c
									(layer)3
										Element:p
											The two properties for the array are as follows:
									Node:
									(type) c
									(layer)3
										Element:table
										Element:tbody
										Element:tr
										Element:td
										Element:strong
											Name
										Element:td
										Element:strong
											Type
										Element:td
										Element:strong
											Description
										Element:tr
										Element:td
											enabled
										Element:td
											Boolean
										Element:td
											Specifies whether or not the Bean is utilizing the duplicate check framework
										Element:tr
										Element:td
											<class_name>
										Element:td
											Array
										Element:td
											<class_name> is the name of the duplicate check strategy class that is handling the duplicate checking. It is set to an array of Metadata, specific to the strategy defined in the key. Review the
										Element:a
											Duplicate Check Framework
											for further information.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Fields Array
									Node:
									(type) c
									(layer)3
										Element:p
											The fields array contains one array for each field in the SugarBean. At the top level of this array, the key is the name of the field, and the value is an array of attributes about that field.
									Node:
									(type) c
									(layer)3
										Element:p
											The list of possible attributes are as follows:
									Node:
									(type) c
									(layer)3
										Element:ul
											The following example illustrates a standard ID field for a bean:
										Element:li
										Element:strong
											name
											: The name of the field
										Element:li
										Element:strong
											vname
											: The language pack ID for the label of this field
										Element:li
										Element:strong
											type
											: The type of the attribute
										Element:ul
										Element:li
										Element:strong
											assigned_user_name
											: A linked user name
										Element:li
										Element:strong
											bool
											: A boolean value
										Element:li
										Element:strong
											char
											: A character array
										Element:li
										Element:strong
											date
											: A date value with no time
										Element:li
										Element:strong
											datetime
											: A date and time
										Element:li
										Element:strong
											email
											: An email address field
										Element:li
										Element:strong
											enum
											: An enumeration (dropdown list from the language pack)
										Element:li
										Element:strong
											id :
											A database GUID
										Element:li
										Element:strong
											image
											: A photo-type field
										Element:li
										Element:strong
											link
											: A link through an explicit relationship. This attributeshould only be used when working with related fields. It does not make the field render as a link.
										Element:li
										Element:strong
											name
											: A non-database field type that concatenates other field values
										Element:li
										Element:strong
											phone
											: A phone number field to utilize with callto:// links
										Element:li
										Element:strong
											relate
											: Related bean
										Element:li
										Element:strong
											team_list
											: A team-based ID
										Element:li
										Element:strong
											text :
											A text area field
										Element:li
										Element:strong
											url
											: A hyperlinked field on the detail view
										Element:li
										Element:strong
											varchar
											: A variable-sized string
										Element:li
										Element:strong
											table
											: The database table the field comes from.
										Element:ul
										Element:li
											The table attribute is only needed to join fields from another table outside of the module in focus.
										Element:li
										Element:strong
											isnull
											: Whether the field can contain a null value
										Element:li
										Element:strong
											len
											: The length of the field (number of characters if a string)
										Element:li
										Element:strong
											options
											: The name of the enumeration (dropdown list) in the language pack for the field
										Element:li
										Element:strong
											dbtype
											: The database type of the field (if different than the type)
										Element:li
										Element:strong
											reportable
											: Determines whether the field will be available in the Reports and Workflow modules (for commercial editions)
										Element:li
										Element:strong
											default :
											The default value for this field
										Element:li
										Element:strong
											massupdate
											: Determines whether the field will show up in the mass-update panel on its module's list view
										Element:ul
										Element:li
											Some field types are restricted from mass update regardless of this setting.
										Element:li
										Element:strong
											rname
											: For relate-type fields, the field from the related variable that contains the text
										Element:li
										Element:strong
											id_name
											: For relate-type fields, the field from the bean that stores the ID for the related bean
										Element:li
										Element:strong
											source
											: Set to 'non-db' if the field value does not come from the database
										Element:ul
										Element:li
											The source attribute can be used for calculated values or values retrieved in some other way.
										Element:li
										Element:strong
											sort_on
											: The field to sort by if multiple fields are used in the presentation of field's information
										Element:li
										Element:strong
											fields
											: For concatenated values, an array containing the fields that are concatenated
										Element:li
										Element:strong
											db_concat_fields
											: For concatenated values, an array containing the fields to concatenate in the database
										Element:li
										Element:strong
											unified_search
											: Determines whether the field can be searched via Global Search
										Element:ul
										Element:li
											This has no effect if the
										Element:a
											dictionary array
											setting 'unified_search' is not set to true.
										Element:li
										Element:strong
											enable_range_search
											: For date, datetime, and numeric fields, determines if this field should be searchable by range in module searches
										Element:li
										Element:strong
											dependency
											: Allows a field to have a predefined formula to control the field's visibility
										Element:li
										Element:strong
											studio
											: Controls the visibility of the field in the Studio editor
										Element:ul
										Element:li
											If set to false, then the field will not appear in any studio screens for the module. Otherwise, you may specify an Array of view keys from which the field's visibility should be removed (e.g.
										Element:code
											array('listview'=>false)
											will hide the field in the listview layout screen).
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											'id' => array ( 'name' => 'id', 'vname' => 'LBL_ID', 'type' => 'id', 'required' => true, ),
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Indices Array
									Node:
									(type) c
									(layer)3
										Element:p
											This array contains a list of arrays that are used to create indices in the database. The fields in this array are:
									Node:
									(type) c
									(layer)3
										Element:ul
											The following example creates a primary index called 'userspk' on the 'id' column:
										Element:li
										Element:strong
											name
											: The unique name of the index
										Element:li
										Element:strong
											type
											: The type of index (primary, unique, or index)
										Element:li
										Element:strong
											fields
											: An ordered array of the fields to index
										Element:li
										Element:strong
											source
											: Set to 'non-db' if you are creating an index for added application functionality such as duplication checking on imports
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											array( 'name' => 'userspk', 'type' => 'primary', 'fields'=> array('id') ),
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Relationships Array
									Node:
									(type) c
									(layer)3
										Element:p
											The relationships array specifies relationships between beans. Like the indices array entries, it is a list of names with array values.
									Node:
									(type) c
									(layer)3
										Element:ul
											The following example creates a relationship between a contact and the contact that they report to. The reports_to_id field maps to the id of the record that belongs to the higher-ranked contact. This is a one-to-many relationship in that a contact may only report to one person, but many people may report to the same contact.
										Element:li
										Element:strong
											lhs_module
											: The module on the left-hand side of the relationship
										Element:li
										Element:strong
											lhs_table
											: The table on the left-hand side of the relationship
										Element:li
										Element:strong
											lhs_key
											: The primary key column of the left-hand side of the relationship
										Element:li
										Element:strong
											rhs_module
											: The module on the right-hand side of the relationship
										Element:li
										Element:strong
											rhs_table
											: The table on the right-hand side of the relationship
										Element:li
										Element:strong
											rhs_key
											: The primary key column of the right-hand side of the relationship
										Element:li
										Element:strong
											relationship_type
											: The type of relationship (e.g. one-to-many, many-to-many)
										Element:li
										Element:strong
											relationship_role_column
											: The type of relationship role
										Element:li
										Element:strong
											relationship_role_column_value
											: Defines the unique identifier for the relationship role
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											'contact_direct_reports' => array( 'lhs_module' => 'Contacts', 'lhs_table' => 'contacts', 'lhs_key' => 'id', 'rhs_module' => 'Contacts', 'rhs_table' => 'contacts', 'rhs_key' => 'reports_to_id', 'relationship_type' => 'one-to-many' ),
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Visibility Array
									Node:
									(type) c
									(layer)3
										Element:p
											The visibility array specifies the row level visibility classes that are enabled on the bean. Each entry in the array, is a key-value pair, where the key is the name of the Visibility class and the value is set to boolean True. More information on configuring custom Visibility strategies can be found in the Architecture section under
										Element:a
											Visibility Framework
											.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Extending Vardefs
						Node:
						(type) c
						(layer)2
							Element:p
								More information about extending and overriding vardefs can be found in the Extensions Framework documentation under
							Element:a
								Vardefs
								.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Topics
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:a
								Manually Creating Custom Fields
							Element:p
								The most common way to create custom fields in Sugar is via Studio inside the application. This page describes how to use the ModuleInstaller class or vardef extensions as alternative methods of creating custom fields.
							Element:li
							Element:a
								Working With Indexes
							Element:p
								Sugar provides a simple method for creating custom indexes through the vardef framework. Indexes can be built on one or more fields within a module. Indexes can be saved down to the database level or made available only in the application for functions such as Import Duplicate Checking.
						Node:
						(type) c
						(layer)2
							Element:p
								Last modified: 07/06/2016 11:33am
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
														How helpful is this page?
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
														Provide Feedback About This Page
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:footer
													Element:ul
													Element:li
													Element:h4
														CRM Products & Solutions
													Element:li
													Element:a
														Products
													Element:li
													Element:a
														Editions & Pricing
													Element:li
													Element:a
														CRM Solutions
													Element:li
													Element:a
														SugarCRM Mobile
													Element:li
													Element:a
														Store
													Element:li
													Element:a
														SugarExchange
													Element:ul
													Element:li
													Element:h4
														Resources
													Element:li
													Element:a
														CRM Resources
													Element:li
													Element:a
														Case Studies
													Element:li
													Element:a
														Whitepapers
													Element:li
													Element:a
														Webcasts
													Element:li
													Element:a
														Demos
													Element:ul
													Element:li
													Element:h4
														Support & Community
													Element:li
													Element:a
														Support
													Element:li
													Element:a
														Training & Certification
													Element:li
													Element:a
														Partner Directory
													Element:li
													Element:a
														Developers
													Element:li
													Element:a
														Community Forums
													Element:li
													Element:a
														Partner Portal Login
													Element:ul
													Element:li
													Element:h4
														News
													Element:li
													Element:a
														Press Releases
													Element:li
													Element:a
														News
													Element:li
													Element:a
														Events
													Element:li
													Element:a
														Awards
													Element:li
													Element:a
														CRM Blog
													Element:li
													Element:a
														Partner News
													Element:ul
													Element:li
													Element:h4
														About
													Element:li
													Element:a
														Company Overview
													Element:li
													Element:a
														Careers
													Element:li
													Element:a
														Privacy Policy
													Element:li
													Element:a
														Security Policy
													Element:li
													Element:a
														Terms & Conditions
													Element:li
													Element:a
														Environmental Policy
													Element:li
													Element:a
														Impressum
													Element:h4
														Sugar Worldwide:
													Element:a
													Element:span
														Select Region
													Element:ul
													Element:li
													Element:a
														English (Americas)
													Element:li
													Element:a
														English (ANZ)
													Element:li
													Element:a
														English (UK)
													Element:li
													Element:a
														Deutsch (Germany)
													Element:li
													Element:a
														Français (France)
													Element:li
													Element:a
														Español (Europe)
													Element:li
													Element:a
														Español (Latin America)
													Element:li
													Element:a
														Português (Brazil)
													Element:li
													Element:a
														Italian (Italy)
													Element:h4
														Stay Connected:
												Node:
												(type) c
												(layer)4
													Element:a
													Element:span
														Back to top
												Node:
												(type) c
												(layer)4
													Element:a
													Element:span
														Contents
