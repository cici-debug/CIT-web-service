Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					Accessing an External API with a Sugar Logic Action
			Node:
			(type) c
			(layer)1
				Element:p
					Let us say we were building a new Action called "SetZipCodeAction" that uses the yahoo geocode API to get the zip code for a given street + city + state address.
			Node:
			(type) c
			(layer)1
				Element:p
					Since the Yahoo Geocode API requires JSON requests and returns XML data, we will have to write both php and javascript code to make and interpret the requests. Because accessing external APIs in a browser is considered cross site scripting, a local proxy will have to be used. We will also allow the street, city, state parameters to be passed in as formulas so the action could be used in more complex Dependencies.
			Node:
			(type) c
			(layer)1
				Element:p
					First, we should add a new action that acts as the proxy for retrieving data from the Yahoo API. The easiest place to add that would be a custom action in the "Home" module. The file that will act as the proxy will be "custom/modules/Home/geocode.php". It will take in the parameters via a REST call, make the call to the Yahoo API, and return the result in JSON format.
			Node:
			(type) c
			(layer)1
				Element:p
					geocode.php contents:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					<?php function getZipCode($street, $city, $state) { $appID = "6ruuUKjV34Fydi4TE.ca.I02rWh.9LTMPqQnSQo4QsCnjF5wIvyYRSXPIzqlDbI.jfE-"; $street = urlencode($street); $city = urlencode($city); $state = urlencode($state); $base_url = "http://local.yahooapis.com/MapsService/V1/geocode?"; $params = "appid={$appID}&street={$street}&city={$city}&state={$state}"; //use file_get_contents to easily make the request $response = file_get_contents($base_url . $params); //The PHP XML parser is going to be overkill in this case, so just pull the zipcode with a regex. preg_match('/\([\d-]*)\/', $response, $matches); return $matches[1]; } if (!empty($_REQUEST['execute'])) { if (empty($_REQUEST['street']) || empty($_REQUEST['city']) || empty($_REQUEST['state'])) { echo("Bad Request"); } else { echo json_encode(array('zip' => getZipCode($_REQUEST['street'], $_REQUEST['city'], $_REQUEST['state']))); } } ?>
			Node:
			(type) c
			(layer)1
				Element:p
					Next we will need to map the geocode action to the geocode.php file. This is done by adding an action map to the Home Module. We need to create the file ./custom/modules/Home/action_file_map.php and add the following line of code:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					<?php $action_file_map['geocode'] = 'custom/modules/Home/geocode.php';
			Node:
			(type) c
			(layer)1
				Element:p
					We are now ready to write our Action. Start by creating the file ./custom/include/Expressions/Actions/SetZipCodeAction.php. This file will use the proxy function directly from the php side and make an asynchronous call on the javascript side to the proxy.
			Node:
			(type) c
			(layer)1
				Element:p
					SetZipCodeAction.php contents:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					<?php require_once("include/Expressions/Actions/AbstractAction.php"); class SetZipCodeAction extends AbstractAction { protected $target = ""; protected $streetExp = ""; protected $cityExp = ""; protected $stateExp = ""; function SetZipCodeAction($params) { $this->target = empty($params['target']) ? " " : $params['target']; $this->streetExp = empty($params['street']) ? " " : $params['street']; $this->cityExp = empty($params['city']) ? " " : $params['city']; $this->stateExp = empty($params['state']) ? " " : $params['state']; } static function getJavascriptClass() { return "'($this->target}', '{$this->streetExp}', '{$this->cityExp}', '{$this->stateExp}')"; } function fire(&$bean) { require_once("custom/modules/Home/geocode.php"); $vars = array( 'street' => 'streetExp', 'city' => 'cityExp', 'state' => 'stateExp' ); foreach($vars as $var => $exp) { $toEval = Parser::replaceVariables($this->$exp, $bean); $$var = Parser::evaluate($toEval)->evaluate(); } $target = $this->target; $bean->$target = getZipCode($street, $city, $state); } function getDefinition() { return array( "action" => $this->getActionName(), "target" => $this->target, ); } static function getActionName() { return "SetZipCode"; } } ?>
			Node:
			(type) c
			(layer)1
				Element:p
					Once you have the action written, you need to call it somewhere in the code. Currently this must be done as shown above using custom views, logic hooks, or custom modules. This will change in the future and creating custom dependencies and taking advantage of custom actions should become a simpler process requiring little to no custom code.
			Node:
			(type) c
			(layer)1
				Element:p
					Last modified: 02/01/2016 11:06pm
			Node:
			(type) c
			(layer)1
												Node:
												(type) c
												(layer)4
													Element:h4
														How helpful is this page?
			Node:
			(type) c
			(layer)1
												Node:
												(type) c
												(layer)4
													Element:h4
														Provide Feedback About This Page
			Node:
			(type) c
			(layer)1
												Node:
												(type) c
												(layer)4
													Element:footer
													Element:ul
													Element:li
													Element:h4
														CRM Products & Solutions
													Element:li
													Element:a
														Products
													Element:li
													Element:a
														Editions & Pricing
													Element:li
													Element:a
														CRM Solutions
													Element:li
													Element:a
														SugarCRM Mobile
													Element:li
													Element:a
														Store
													Element:li
													Element:a
														SugarExchange
													Element:ul
													Element:li
													Element:h4
														Resources
													Element:li
													Element:a
														CRM Resources
													Element:li
													Element:a
														Case Studies
													Element:li
													Element:a
														Whitepapers
													Element:li
													Element:a
														Webcasts
													Element:li
													Element:a
														Demos
													Element:ul
													Element:li
													Element:h4
														Support & Community
													Element:li
													Element:a
														Support
													Element:li
													Element:a
														Training & Certification
													Element:li
													Element:a
														Partner Directory
													Element:li
													Element:a
														Developers
													Element:li
													Element:a
														Community Forums
													Element:li
													Element:a
														Partner Portal Login
													Element:ul
													Element:li
													Element:h4
														News
													Element:li
													Element:a
														Press Releases
													Element:li
													Element:a
														News
													Element:li
													Element:a
														Events
													Element:li
													Element:a
														Awards
													Element:li
													Element:a
														CRM Blog
													Element:li
													Element:a
														Partner News
													Element:ul
													Element:li
													Element:h4
														About
													Element:li
													Element:a
														Company Overview
													Element:li
													Element:a
														Careers
													Element:li
													Element:a
														Privacy Policy
													Element:li
													Element:a
														Security Policy
													Element:li
													Element:a
														Terms & Conditions
													Element:li
													Element:a
														Environmental Policy
													Element:li
													Element:a
														Impressum
													Element:h4
														Sugar Worldwide:
													Element:a
													Element:span
														Select Region
													Element:ul
													Element:li
													Element:a
														English (Americas)
													Element:li
													Element:a
														English (ANZ)
													Element:li
													Element:a
														English (UK)
													Element:li
													Element:a
														Deutsch (Germany)
													Element:li
													Element:a
														Français (France)
													Element:li
													Element:a
														Español (Europe)
													Element:li
													Element:a
														Español (Latin America)
													Element:li
													Element:a
														Português (Brazil)
													Element:li
													Element:a
														Italian (Italy)
													Element:h4
														Stay Connected:
												Node:
												(type) c
												(layer)4
													Element:a
													Element:span
														Back to top
												Node:
												(type) c
												(layer)4
													Element:a
													Element:span
														Contents
