Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					LogicHooks
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Overview
						Node:
						(type) c
						(layer)2
							Element:p
								The
							Element:code
								LogicHooks
								extension adds actions to specific events such as, for example, before saving a bean. For more information on logic hooks in Sugar, please refer to the
							Element:a
								Logic Hooks
								documentation.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Properties
						Node:
						(type) c
						(layer)2
							Element:p
								The following extension properties are available. For more information, please refer to the
							Element:a
								Extension Property
								documentation.
						Node:
						(type) c
						(layer)2
							Element:table
							Element:tbody
							Element:tr
							Element:td
							Element:strong
								Property
							Element:td
							Element:strong
								Value
							Element:tr
							Element:td
								Extension Scope
							Element:td
								All - Application & Module
							Element:tr
							Element:td
								Sugar Variable
							Element:td
								$hook_array
							Element:tr
							Element:td
								Extension Directory
							Element:td
							Element:p
								Application - ./custom/Extension/application/Ext/LogicHooks/
							Element:p
								Module - ./custom/Extension/modules/<module>/Ext/LogicHooks/
							Element:tr
							Element:td
								Compiled Extension File
							Element:td
							Element:p
								Application - ./custom/Extension/application/Ext/LogicHooks/
							Element:p
								Module - ./custom/Extension/modules/<module>/Ext/LogicHooks/
							Element:tr
							Element:td
								Manifest Installdef
							Element:td
								$installdefs['hookdefs']
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Implementation
						Node:
						(type) c
						(layer)2
							Element:p
								The following sections illustrate the various ways to implement a customization to a Sugar instance.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											File System
									Node:
									(type) c
									(layer)3
										Element:p
											When working directly with the filesystem, you can create a file in
										Element:code
											./custom/Extension/application/Ext/LogicHooks/
											to add a new logic hook to the application. The following example will create a new
										Element:code
											before_save
											logic hook that executes for all modules:
									Node:
									(type) c
									(layer)3
										Element:p
											./custom/Extension/application/Ext/LogicHooks/<file>.php
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											<?php $hook_array['before_save'][] = Array( 1, 'Custom Logic', 'custom/application_hook.php', 'ApplicationHookConsumer', 'before_method' );
									Node:
									(type) c
									(layer)3
										Element:p
											Next, create the hook class:
									Node:
									(type) c
									(layer)3
										Element:p
											./custom/application_hook.php
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											<?php if (!defined('sugarEntry') || !sugarEntry) die('Not A Valid Entry Point'); class ApplicationHookConsumer { function before_method($bean, $event, $arguments) { //logic } } ?>
									Node:
									(type) c
									(layer)3
										Element:p
											Finally, navigate to Admin > Repair > Quick Repair and Rebuild. The system will then rebuild the extensions and the customizations will be compiled into
										Element:code
											./custom/application/Ext/LogicHooks/logichooks.ext.php
											. Your logic hook will run before saving records in any module.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Module Loadable Package
									Node:
									(type) c
									(layer)3
										Element:p
											When building a module loadable package, you can use the
										Element:code
											$installdefs['hookdefs']
											index to install the extension file.
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Installdef Properties
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tbody
													Element:tr
													Element:td
													Element:strong
														Name
													Element:td
													Element:strong
														Type
													Element:td
													Element:strong
														Description
													Element:tr
													Element:td
														from
													Element:td
														String
													Element:td
														The basepath of the file to be installed.
													Element:tr
													Element:td
														to_module
													Element:td
														String
													Element:td
														The key of the module the file is to be installed to.
												Node:
												(type) c
												(layer)4
													Element:p
														The example below demonstrates the proper install definition that should be used in the
													Element:code
														./manifest.php
														file in order to add the Action View Map file to a specific module. You should note that when using this approach, you still need to use the
													Element:code
														$installdefs['copy']
														index for the hook class file, however Sugar will automatically execute Rebuild Extensions to reflect the new logic hook in the system.
												Node:
												(type) c
												(layer)4
													Element:p
														./manifest.php
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														<?php $manifest = array( ... ); $installdefs = array( 'id' => 'actionView_example', 'hookdefs' => array( array( 'from' => '<basepath>/Files/custom/Extension/application/Ext/LogicHooks/<file>.php', 'to_module' => 'application', ) ), 'copy' => array( array( 'from' => '<basepath>/Files/custom/application_hook.php', 'to' => 'custom/application_hook.php', ), ) );
												Node:
												(type) c
												(layer)4
													Element:p
														Alternatively, you may use the
													Element:code
														$installdefs['copy']
														index to copy the file. When using this approach, you may need to manually run repair actions such as a Quick Repair and Rebuild. For more information on the
													Element:code
														$installdefs['copy']
														index and module-loadable packages, please refer to the
													Element:a
														Introduction to the Manifest
														page.
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Alternative Installdef
												Node:
												(type) c
												(layer)4
													Element:p
														Although not recommended, you could utilize the
													Element:code
														$installdefs['logic_hooks']
														index to deploy a logic hook to the system. Please note that there are a couple caveats to this installation method:
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														The
													Element:code
														$installdefs['logic_hooks']
														index method only works for module-based logic hooks.
													Element:li
														The
													Element:code
														$installdefs['logic_hooks']
														index method installs to
													Element:code
														./custom/modules/<module>/logic_hooks.php
														, which is not part of the Extension framework.
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Properties
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tbody
													Element:tr
													Element:td
													Element:strong
														Name
													Element:td
													Element:strong
														Type
													Element:td
													Element:strong
														Description
													Element:tr
													Element:td
														module
													Element:td
														String
													Element:td
														The key of the module for the logic hook to be installed to.
													Element:tr
													Element:td
														hook
													Element:td
														String
													Element:td
														The type of logic hook to be installed.
													Element:tr
													Element:td
														order
													Element:td
														Integer
													Element:td
														The number in which the logic hook should run.
													Element:tr
													Element:td
														description
													Element:td
														String
													Element:td
														A description of the logic hook to be installed.
													Element:tr
													Element:td
														file
													Element:td
														String
													Element:td
														The file path which contains the logic hook class.
													Element:tr
													Element:td
														class
													Element:td
														String
													Element:td
														The class which houses the logic hook functionality.
													Element:tr
													Element:td
														function
													Element:td
														String
													Element:td
														The function the logic hook will execute.
												Node:
												(type) c
												(layer)4
													Element:p
														The example below will demonstrate the
													Element:code
														$installdefs['logic_hooks']
														index in the
													Element:code
														./manifest.php
														file, in order to add an after save logic hook to a specific module. You should note that when using this approach, you still need to use the
													Element:code
														$installdefs['copy']
														index for the hook class file.
												Node:
												(type) c
												(layer)4
													Element:p
														./manifest.php
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														<?php $manifest = array( ... ); $installdefs = array( 'id' => 'actionView_example', 'logic_hooks' => array( array( 'module' => '<module>', 'hook' => 'after_save', 'order' => 1, 'description' => 'Example After Save LogicHook', 'file' => 'custom/modules/<module>/module_hook.php', 'class' => '<module>HookConsumer' 'function' => 'after' ) ), 'copy' => array( array( 'from' => '<basepath>/Files/custom/modules/<module>/module_hook.php', 'to' => 'custom/modules/<module>/module_hook.php', ), ) );
												Node:
												(type) c
												(layer)4
													Element:p
														Last modified: 01/04/2017 10:26am
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														How helpful is this page?
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Provide Feedback About This Page
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:footer
													Element:ul
													Element:li
													Element:h4
														CRM Products & Solutions
													Element:li
													Element:a
														Products
													Element:li
													Element:a
														Editions & Pricing
													Element:li
													Element:a
														CRM Solutions
													Element:li
													Element:a
														SugarCRM Mobile
													Element:li
													Element:a
														Store
													Element:li
													Element:a
														SugarExchange
													Element:ul
													Element:li
													Element:h4
														Resources
													Element:li
													Element:a
														CRM Resources
													Element:li
													Element:a
														Case Studies
													Element:li
													Element:a
														Whitepapers
													Element:li
													Element:a
														Webcasts
													Element:li
													Element:a
														Demos
													Element:ul
													Element:li
													Element:h4
														Support & Community
													Element:li
													Element:a
														Support
													Element:li
													Element:a
														Training & Certification
													Element:li
													Element:a
														Partner Directory
													Element:li
													Element:a
														Developers
													Element:li
													Element:a
														Community Forums
													Element:li
													Element:a
														Partner Portal Login
													Element:ul
													Element:li
													Element:h4
														News
													Element:li
													Element:a
														Press Releases
													Element:li
													Element:a
														News
													Element:li
													Element:a
														Events
													Element:li
													Element:a
														Awards
													Element:li
													Element:a
														CRM Blog
													Element:li
													Element:a
														Partner News
													Element:ul
													Element:li
													Element:h4
														About
													Element:li
													Element:a
														Company Overview
													Element:li
													Element:a
														Careers
													Element:li
													Element:a
														Privacy Policy
													Element:li
													Element:a
														Security Policy
													Element:li
													Element:a
														Terms & Conditions
													Element:li
													Element:a
														Environmental Policy
													Element:li
													Element:a
														Impressum
													Element:h4
														Sugar Worldwide:
													Element:a
													Element:span
														Select Region
													Element:ul
													Element:li
													Element:a
														English (Americas)
													Element:li
													Element:a
														English (ANZ)
													Element:li
													Element:a
														English (UK)
													Element:li
													Element:a
														Deutsch (Germany)
													Element:li
													Element:a
														Français (France)
													Element:li
													Element:a
														Español (Europe)
													Element:li
													Element:a
														Español (Latin America)
													Element:li
													Element:a
														Português (Brazil)
													Element:li
													Element:a
														Italian (Italy)
													Element:h4
														Stay Connected:
												Node:
												(type) c
												(layer)4
													Element:a
													Element:span
														Back to top
												Node:
												(type) c
												(layer)4
													Element:a
													Element:span
														Contents
