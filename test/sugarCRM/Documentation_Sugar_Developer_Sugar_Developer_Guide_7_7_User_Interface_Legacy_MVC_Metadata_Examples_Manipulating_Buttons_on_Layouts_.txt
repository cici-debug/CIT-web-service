Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					Manipulating Buttons on Legacy MVC Layouts
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Overview
						Node:
						(type) c
						(layer)2
							Element:p
								How to add custom buttons to the EditView and DetailView layouts.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:strong
								Note:
								This customization is only applicable for modules in backward compatibility mode.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Metadata
						Node:
						(type) c
						(layer)2
							Element:p
								Before adding buttons to your layouts, you will need to understand how the metadata framework is used. Detailed information on the metadata framework can be found in the
							Element:a
								Legacy Metadata
								section.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Custom Layouts
						Node:
						(type) c
						(layer)2
							Element:p
								Before you can add a button to your layout, you will first need to make sure you have a custom layout present. The stock layouts are located in
							Element:code
								./modules/<module>/metadata/
								and must be recreated in ./custom/modules/<module>/metadata/.
						Node:
						(type) c
						(layer)2
							Element:p
								There are two ways to recreate a layout in the custom directory if it does not already exist. The first is to navigate to:
						Node:
						(type) c
						(layer)2
							Element:pre
								Studio > {Module} > Layouts > {View}
						Node:
						(type) c
						(layer)2
							Element:p
								Once there, you can click the "Save & Deploy" button. This will create the layoutdef for you. Alternatively, you can also manually copy the layoutdef from the stock folder to the custom folder.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Editing Layouts
						Node:
						(type) c
						(layer)2
							Element:p
								When editing layouts you have three options in having your changes reflected in the UI.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Developer Mode
									Node:
									(type) c
									(layer)3
										Element:p
											You can turn on Developer Mode:
									Node:
									(type) c
									(layer)3
										Element:pre
											Admin > System Settings
									Node:
									(type) c
									(layer)3
										Element:p
											Developer Mode will remove the caching of the metadata framework. This will cause your changes to be reflected when the page is refreshed. Make sure this setting is deactivated when you are finished with your customization.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Quick Repair and Rebuild
									Node:
									(type) c
									(layer)3
										Element:p
											You can run a Quick Repair and Rebuild:
									Node:
									(type) c
									(layer)3
										Element:pre
											Admin > Repair > Quick Repair and Rebuild
									Node:
									(type) c
									(layer)3
										Element:p
											Doing this will rebuild the cache for the metadata.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Saving & Deploying the Layout in Studio
									Node:
									(type) c
									(layer)3
										Element:p
											You may also choose to load the layout in studio and then save & deploy it:
									Node:
									(type) c
									(layer)3
										Element:pre
											Admin > Studio > {Module} > Layouts > {View}
									Node:
									(type) c
									(layer)3
										Element:p
											This process can be a bit confusing, however, once a layout is changed, you can then choose to load the layout in studio and then click "Save & Deploy" . This will rebuild the cache for that specific layout. Please note that any time you change the layout, you will have to reload the Studio layout view before deploying in order for this to work correctly.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Adding Custom Buttons
						Node:
						(type) c
						(layer)2
							Element:p
								When adding buttons, there are several things to consider when determining how the button should be rendered. The following sections will outline these scenarios when working with the accounts editviewdefs located in
							Element:code
								./custom/modules/Accounts/metadata/
								editviewdefs
							Element:code
								.php
								.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											JavaScript Actions
									Node:
									(type) c
									(layer)3
										Element:p
											If you are adding a button solely to execute JavaScript (no form submissions), you can do so by adding the button HTML to:
									Node:
									(type) c
									(layer)3
										Element:pre
											$viewdefs['<Module>']['<View>']['templateMeta']['form']['buttons']
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Example
												Node:
												(type) c
												(layer)4
													Element:pre
														<?php $viewdefs['Accounts'] = array ( 'DetailView' => array ( 'templateMeta' => array ( 'form' => array ( 'buttons' => array ( 0 => 'EDIT', 1 => 'DUPLICATE', 2 => 'DELETE', 3 => 'FIND_DUPLICATES', 4 => 'CONNECTOR', 5 => array ( 'customCode' => '<input id="JavaScriptButton" title="JavaScript Button" class="button" type="button" name="JavaScriptButton" value="JavaScript Button" onclick="alert(\'Button JavaScript\')">', ), ), ),
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Submitting the Stock View Form
									Node:
									(type) c
									(layer)3
										Element:p
											If you intend to submit the stock layout form ('formDetailView' or 'formEditView') to a new action, you can do so by adding a the button HTML with an
										Element:code
											onclick
											event as shown below to:
									Node:
									(type) c
									(layer)3
										Element:pre
											$viewdefs['<Module>']['<View>']['templateMeta']['form']['buttons']
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Example
												Node:
												(type) c
												(layer)4
													Element:pre
														<?php $viewdefs['Accounts'] = array ( 'DetailView' => array ( 'templateMeta' => array ( 'form' => array ( 'hidden' => array ( 0 => '<input type="hidden" id="customFormField" name="customFormField" value="">', ), 'buttons' => array ( 0 => 'EDIT', 1 => 'DUPLICATE', 2 => 'DELETE', 3 => 'FIND_DUPLICATES', 4 => 'CONNECTOR', 5 => array ( 'customCode' => '<input id="SubmitStockFormButton" title="Submit Stock Form Button" class="button" type="button" name="SubmitStockFormButton" value="Submit Stock Form Button" onclick="var _form = document.getElementById(\'formDetailView\'); _form.customFormField.value = \'CustomValue\'; _form.action.value = \'CustomAction\'; SUGAR.ajaxUI.submitForm(_form);">', ), ), ),
												Node:
												(type) c
												(layer)4
													Element:p
														You should note in this example that there is also a 'hidden' index. This is where you should add any custom hidden inputs:
												Node:
												(type) c
												(layer)4
													Element:pre
														$viewdefs['<Module>'][ '<View>'][ 'templateMeta'][ 'form'][ 'hidden']
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Submitting Custom Forms
									Node:
									(type) c
									(layer)3
										Element:p
											If you intend to submit a custom form, you will first need to set 'closeFormBeforeCustomButtons' to true. This will close out the current views form and allow you to create your own.
									Node:
									(type) c
									(layer)3
										Element:pre
											$viewdefs['<Module>']['<View>']['templateMeta']['form']['closeFormBeforeCustomButtons']
									Node:
									(type) c
									(layer)3
										Element:p
											Next, you will add the form and button HTML as shown below to:
									Node:
									(type) c
									(layer)3
										Element:pre
											$viewdefs['<Module>']['<View>']['templateMeta']['form']['buttons']
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Example
												Node:
												(type) c
												(layer)4
													Element:pre
														<?php $viewdefs['Accounts'] = array ( 'DetailView' => array ( 'templateMeta' => array ( 'form' => array ( 'closeFormBeforeCustomButtons' => true, 'buttons' => array ( 0 => 'EDIT', 1 => 'DUPLICATE', 2 => 'DELETE', 3 => 'FIND_DUPLICATES', 4 => 'CONNECTOR', 5 => array ( 'customCode' => '<form action="index.php" method="POST" name="CustomForm" id="form"><input type="hidden" name="customFormField" name="customFormField" value="CustomValue"><input id="SubmitCustomFormButton" title="Submit Custom Form Button" class="button" type="submit" name="SubmitCustomFormButton" value="Submit Custom Form Button"></form>', ), ), ),
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Removing Buttons
						Node:
						(type) c
						(layer)2
							Element:p
								To remove a button from the detail view will require modifying the
							Element:code
								./modules/<module>/metadata/
								detailviewdefs
							Element:code
								.php
								.
						Node:
						(type) c
						(layer)2
							Element:p
								The code is originally defined as:
						Node:
						(type) c
						(layer)2
							Element:pre
								$viewdefs[$module_name] = array ( 'DetailView' => array ( 'templateMeta' => array ( 'form' => array ( 'buttons' => array ( 'EDIT', 'DUPLICATE', 'DELETE', 'FIND_DUPLICATES' ), ),
						Node:
						(type) c
						(layer)2
							Element:p
								To remove one or more buttons, simply remove the 'buttons' attribute(s) that you do not want on the view.
						Node:
						(type) c
						(layer)2
							Element:pre
								$viewdefs[$module_name] = array ( 'DetailView' => array ( 'templateMeta' => array ( 'form' => array ( 'buttons' => array ( 'DELETE', ), ),
						Node:
						(type) c
						(layer)2
							Element:p
						Node:
						(type) c
						(layer)2
							Element:p
								Last modified: 03/29/2016 04:45pm
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
														How helpful is this page?
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
														Provide Feedback About This Page
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:footer
													Element:ul
													Element:li
													Element:h4
														CRM Products & Solutions
													Element:li
													Element:a
														Products
													Element:li
													Element:a
														Editions & Pricing
													Element:li
													Element:a
														CRM Solutions
													Element:li
													Element:a
														SugarCRM Mobile
													Element:li
													Element:a
														Store
													Element:li
													Element:a
														SugarExchange
													Element:ul
													Element:li
													Element:h4
														Resources
													Element:li
													Element:a
														CRM Resources
													Element:li
													Element:a
														Case Studies
													Element:li
													Element:a
														Whitepapers
													Element:li
													Element:a
														Webcasts
													Element:li
													Element:a
														Demos
													Element:ul
													Element:li
													Element:h4
														Support & Community
													Element:li
													Element:a
														Support
													Element:li
													Element:a
														Training & Certification
													Element:li
													Element:a
														Partner Directory
													Element:li
													Element:a
														Developers
													Element:li
													Element:a
														Community Forums
													Element:li
													Element:a
														Partner Portal Login
													Element:ul
													Element:li
													Element:h4
														News
													Element:li
													Element:a
														Press Releases
													Element:li
													Element:a
														News
													Element:li
													Element:a
														Events
													Element:li
													Element:a
														Awards
													Element:li
													Element:a
														CRM Blog
													Element:li
													Element:a
														Partner News
													Element:ul
													Element:li
													Element:h4
														About
													Element:li
													Element:a
														Company Overview
													Element:li
													Element:a
														Careers
													Element:li
													Element:a
														Privacy Policy
													Element:li
													Element:a
														Security Policy
													Element:li
													Element:a
														Terms & Conditions
													Element:li
													Element:a
														Environmental Policy
													Element:li
													Element:a
														Impressum
													Element:h4
														Sugar Worldwide:
													Element:a
													Element:span
														Select Region
													Element:ul
													Element:li
													Element:a
														English (Americas)
													Element:li
													Element:a
														English (ANZ)
													Element:li
													Element:a
														English (UK)
													Element:li
													Element:a
														Deutsch (Germany)
													Element:li
													Element:a
														Français (France)
													Element:li
													Element:a
														Español (Europe)
													Element:li
													Element:a
														Español (Latin America)
													Element:li
													Element:a
														Português (Brazil)
													Element:li
													Element:a
														Italian (Italy)
													Element:h4
														Stay Connected:
												Node:
												(type) c
												(layer)4
													Element:a
													Element:span
														Back to top
												Node:
												(type) c
												(layer)4
													Element:a
													Element:span
														Contents
