Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					File Check API
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Overview
						Node:
						(type) c
						(layer)2
							Element:p
								File check methods for use with the AutoLoader API.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								existing(...)
						Node:
						(type) c
						(layer)2
							Element:p
								Returns an array of filenames that exist in the file map. Accepts any number of arguments of which can be filename or array of filenames. If no files exist, empty array is returned.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								$files = SugarAutoloader::existing('include/utils.php', 'include/TimeDate.php');
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								existingCustom(...)
						Node:
						(type) c
						(layer)2
							Element:p
								This method accepts any number of arguments, each of which can be filename or array of filenames. It will return an array of filenames that exist in the file map, adding also files that exist when custom/ is prepended to them. If the original filename already had custom/ prefix, it is not prepended again. custom/ files are added to the list after the root directory files so that if included in order, they will override the data of the root file. If no files exist, empty array is returned.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								$files = SugarAutoloader::existingCustom('include/utils.php', 'include/TimeDate.php');
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								existingCustomOne(...)
						Node:
						(type) c
						(layer)2
							Element:p
								Returns the last file of the result returned by existingCustom(), or null if none exist. Accepts any number of arguments of which can be filename or array of filenames. Since customized files are placed after the root files, it will return customized file if exists, otherwise root file.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								$files = SugarAutoloader::existingCustomOne('include/utils.php');
						Node:
						(type) c
						(layer)2
							Element:p
								You should note that the existingCustomOne() method can be used for loading inline PHP files. An example is shown below:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								foreach(SugarAutoLoader::existingCustomOne('custom/myFile.php') as $file) { include $file; }
						Node:
						(type) c
						(layer)2
							Element:p
								Alternative to including inline PHP files, loading class files should be done using
							Element:a
								requireWithCustom()
								.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								fileExists($filename)
						Node:
						(type) c
						(layer)2
							Element:p
								Checks if a file exists in the file map. You should note that ".." is
							Element:strong
								not
								supported by this function and any paths including ".." will return false. The path components should be separated by
							Element:strong
								/
								. You should also note that multiple slashes are compressed and treated as single slash.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								$file = 'include/utils.php'; if (SugarAutoloader::fileExists($file)) { require_once($file); }
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								getDirFiles($dir, $get_dirs = false, $extension = null)
						Node:
						(type) c
						(layer)2
							Element:p
								Retrieves the list of files existing in the file map under the specified directory. If no files are found, the method will return an empty array. By default, the method will return file paths, however, If $get_dirs is set to true, the method will return only directories. If $extension is set, it would return only files having that specific extension.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								$files = SugarAutoloader::getDirFiles('include');
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								getFilesCustom($dir, $get_dirs = false, $extension = null)
						Node:
						(type) c
						(layer)2
							Element:p
								Retrieves the list of files existing in the file map under the specified directory and under it's custom/ path. If no files are found it will return empty array. By default, the method will return file paths, however, If $get_dirs is set to true, the method will return only directories. If $extension is set, it would return only files having that specific extension.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								$files = SugarAutoloader::getFilesCustom('include');
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								lookupFile($paths, $file)
								Looks up a file in the list of given paths, including with and without custom/ prefix, and return the first match found. The custom/ directory is checked before root files. If no file is found, the method will return false.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								$paths = array( 'include', 'modules', ); $files = SugarAutoloader::lookupFile($paths, 'utils.php');
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								requireWithCustom($file, $both = false)
						Node:
						(type) c
						(layer)2
							Element:p
								If a custom/ override of the file or the file exist, require_once it and return true, otherwise return false. If $both is set to true, both files are required with the root file being first and custom/ file being second. Unlike other functions, this function will actually include the file.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								$file = SugarAutoloader::requireWithCustom('include/utils.php');
						Node:
						(type) c
						(layer)2
							Element:p
								You should note that the requireWithCustom() method should be used for loading class files and not inline PHP files. Inline PHP files should be loaded using the
							Element:a
								existingCustomOne()
								method.
						Node:
						(type) c
						(layer)2
							Element:p
								Last modified: 01/14/2016 11:12pm
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
														How helpful is this page?
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
														Provide Feedback About This Page
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:footer
													Element:ul
													Element:li
													Element:h4
														CRM Products & Solutions
													Element:li
													Element:a
														Products
													Element:li
													Element:a
														Editions & Pricing
													Element:li
													Element:a
														CRM Solutions
													Element:li
													Element:a
														SugarCRM Mobile
													Element:li
													Element:a
														Store
													Element:li
													Element:a
														SugarExchange
													Element:ul
													Element:li
													Element:h4
														Resources
													Element:li
													Element:a
														CRM Resources
													Element:li
													Element:a
														Case Studies
													Element:li
													Element:a
														Whitepapers
													Element:li
													Element:a
														Webcasts
													Element:li
													Element:a
														Demos
													Element:ul
													Element:li
													Element:h4
														Support & Community
													Element:li
													Element:a
														Support
													Element:li
													Element:a
														Training & Certification
													Element:li
													Element:a
														Partner Directory
													Element:li
													Element:a
														Developers
													Element:li
													Element:a
														Community Forums
													Element:li
													Element:a
														Partner Portal Login
													Element:ul
													Element:li
													Element:h4
														News
													Element:li
													Element:a
														Press Releases
													Element:li
													Element:a
														News
													Element:li
													Element:a
														Events
													Element:li
													Element:a
														Awards
													Element:li
													Element:a
														CRM Blog
													Element:li
													Element:a
														Partner News
													Element:ul
													Element:li
													Element:h4
														About
													Element:li
													Element:a
														Company Overview
													Element:li
													Element:a
														Careers
													Element:li
													Element:a
														Privacy Policy
													Element:li
													Element:a
														Security Policy
													Element:li
													Element:a
														Terms & Conditions
													Element:li
													Element:a
														Environmental Policy
													Element:li
													Element:a
														Impressum
													Element:h4
														Sugar Worldwide:
													Element:a
													Element:span
														Select Region
													Element:ul
													Element:li
													Element:a
														English (Americas)
													Element:li
													Element:a
														English (ANZ)
													Element:li
													Element:a
														English (UK)
													Element:li
													Element:a
														Deutsch (Germany)
													Element:li
													Element:a
														Français (France)
													Element:li
													Element:a
														Español (Europe)
													Element:li
													Element:a
														Español (Latin America)
													Element:li
													Element:a
														Português (Brazil)
													Element:li
													Element:a
														Italian (Italy)
													Element:h4
														Stay Connected:
												Node:
												(type) c
												(layer)4
													Element:a
													Element:span
														Back to top
												Node:
												(type) c
												(layer)4
													Element:a
													Element:span
														Contents
