Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					SugarQuery Conditions
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Overview
						Node:
						(type) c
						(layer)2
							Element:p
								Learn about the various methods that can be utilized with SugarQuery to add conditional statements to a query.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Where Clause
						Node:
						(type) c
						(layer)2
							Element:p
								Manipulating the WHERE clause of a SugarQuery object is crucial for getting the correct results. To create a WHERE clause on the query, use the
							Element:code
								where()
								method on the SugarQuery object, as outlined in the
							Element:a
								SugarQuery documentation
								. Once you have the Where Object, you can utilize the following methods on the Where Object to add conditional statements.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											equals() | notEquals()
									Node:
									(type) c
									(layer)3
										Element:p
											Used to equate a field to a given value. Wildcards will not work with this function, as it is looking for an exact match.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											//add equals $SugarQuery->where()->equals('name','Test'); //add Not Equals $SugarQuery->where()->notEquals('name','Tester');
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Arguments
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tbody
													Element:tr
													Element:td
													Element:strong
														Name
													Element:td
													Element:strong
														Type
													Element:td
													Element:strong
														Required
													Element:td
													Element:strong
														Description
													Element:tr
													Element:td
														$field
													Element:td
													Element:em
														String
													Element:td
														true
													Element:td
														The field you are checking against
													Element:tr
													Element:td
														$value
													Element:td
													Element:em
														String
													Element:td
														true
													Element:td
														The value the field should be equal to
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Returns
												Node:
												(type) c
												(layer)4
													Element:p
													Element:em
														SugarQuery_Builder_Where Object
												Node:
												(type) c
												(layer)4
													Element:p
														Allows for method chaining on the Where Object to add additional conditions.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											equalsField() | notEqualsField()
									Node:
									(type) c
									(layer)3
										Element:p
											Used to equate a field to another field in the result set.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											//add an Equals Field statement $SugarQuery->where()->equalsField('industry','account_type'); //add a Not Equals Field statement $SugarQuery->where()->notEqualsField('name','account_type');
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Arguments
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tbody
													Element:tr
													Element:td
													Element:strong
														Name
													Element:td
													Element:strong
														Type
													Element:td
													Element:strong
														Required
													Element:td
													Element:strong
														Description
													Element:tr
													Element:td
														$field
													Element:td
													Element:em
														String
													Element:td
														true
													Element:td
														The field you are checking against
													Element:tr
													Element:td
														$field
													Element:td
													Element:em
														String
													Element:td
														true
													Element:td
														The other field you want the first field to be equal to
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Returns
												Node:
												(type) c
												(layer)4
													Element:p
													Element:em
														SugarQuery_Builder_Where Object
												Node:
												(type) c
												(layer)4
													Element:p
														Allows for method chaining on the Where Object to add additional conditions.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											isEmpty() | isNotEmpty()
									Node:
									(type) c
									(layer)3
										Element:p
											Used to check if a field is or isn't empty.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											//add an isEmpty statement $SugarQuery->where()->isEmpty('industry'); //add an isNotEmpty statement $SugarQuery->where()->isNotEmpty('name');
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Arguments
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tbody
													Element:tr
													Element:td
													Element:strong
														Name
													Element:td
													Element:strong
														Type
													Element:td
													Element:strong
														Required
													Element:td
													Element:strong
														Description
													Element:tr
													Element:td
														$field
													Element:td
													Element:em
														String
													Element:td
														true
													Element:td
														The field you are checking against
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Returns
												Node:
												(type) c
												(layer)4
													Element:p
													Element:em
														SugarQuery_Builder_Where Object
												Node:
												(type) c
												(layer)4
													Element:p
														Allows for method chaining on the Where Object to add additional conditions.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											isNull() | notNull()
									Node:
									(type) c
									(layer)3
										Element:p
											Used to check if a field is or isn't equal to NULL.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											//add an isNull statement $SugarQuery->where()->isNull('industry'); //add a notNull statement $SugarQuery->where()->notNull('name');
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Arguments
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tbody
													Element:tr
													Element:td
													Element:strong
														Name
													Element:td
													Element:strong
														Type
													Element:td
													Element:strong
														Required
													Element:td
													Element:strong
														Description
													Element:tr
													Element:td
														$field
													Element:td
													Element:em
														String
													Element:td
														true
													Element:td
														The field you are checking against
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Returns
												Node:
												(type) c
												(layer)4
													Element:p
													Element:em
														SugarQuery_Builder_Where Object
												Node:
												(type) c
												(layer)4
													Element:p
														Allows for method chaining on the Where Object to add additional conditions.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											contains() | notContains()
									Node:
									(type) c
									(layer)3
										Element:p
											Used to check if a field has or doesn't have a specified string in it's value. Utilizes the LIKE statement, and wildcards on both sides of the provided string.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											//add an isNull statement $SugarQuery->where()->contains('name','Test'); //add a notNull statement $SugarQuery->where()->notContains('industry','Test');
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Arguments
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tbody
													Element:tr
													Element:td
													Element:strong
														Name
													Element:td
													Element:strong
														Type
													Element:td
													Element:strong
														Required
													Element:td
													Element:strong
														Description
													Element:tr
													Element:td
														$field
													Element:td
													Element:em
														String
													Element:td
														true
													Element:td
														The field you are checking against
													Element:tr
													Element:td
														$value
													Element:td
													Element:em
														String
													Element:td
														true
													Element:td
														The string being searched for in the value of the field
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Returns
												Node:
												(type) c
												(layer)4
													Element:p
													Element:em
														SugarQuery_Builder_Where Object
												Node:
												(type) c
												(layer)4
													Element:p
														Allows for method chaining on the Where Object to add additional conditions.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											starts() | ends()
									Node:
									(type) c
									(layer)3
										Element:p
											Similar to the above
										Element:code
											contains()
											method, these methods use the LIKE statement in the SQL query and wildcards for searching for a specified string in the field's value. However the
										Element:code
											starts()
											and
										Element:code
											ends()
											methods only wildcard the right side and the left side, respectively. The following example code, would be searching for records where the Name field starts with A, and ends with E.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											//add an starts and ends statement $SugarQuery->where()->starts('name','A')->ends('name','e');
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Arguments
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tbody
													Element:tr
													Element:td
													Element:strong
														Name
													Element:td
													Element:strong
														Type
													Element:td
													Element:strong
														Required
													Element:td
													Element:strong
														Description
													Element:tr
													Element:td
														$field
													Element:td
													Element:em
														String
													Element:td
														true
													Element:td
														The field you are checking against
													Element:tr
													Element:td
														$value
													Element:td
													Element:em
														String
													Element:td
														true
													Element:td
														The string being searched for in the value of the field
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Returns
												Node:
												(type) c
												(layer)4
													Element:p
													Element:em
														SugarQuery_Builder_Where Object
												Node:
												(type) c
												(layer)4
													Element:p
														Allows for method chaining on the Where Object to add additional conditions.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											in() | notIn()
									Node:
									(type) c
									(layer)3
										Element:p
											Used to check if a field's value is or isn't one of a set of specified values. The following examples looks for records where the industry field is in a list of values, and not in a separate list of values.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											$values = array( 'Support', 'Sales', 'Engineering' ); //add in statement $SugarQuery->where()->in('industry',$values); $values = array( 'Marketing', 'Accounting' ); //add NotIn Statement $SugarQuery->where()->notIn('industry',$values);
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Arguments
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tbody
													Element:tr
													Element:td
													Element:strong
														Name
													Element:td
													Element:strong
														Type
													Element:td
													Element:strong
														Required
													Element:td
													Element:strong
														Description
													Element:tr
													Element:td
														$field
													Element:td
													Element:em
														String
													Element:td
														true
													Element:td
														The field you are checking
													Element:tr
													Element:td
														$values
													Element:td
													Element:em
														Array
													Element:td
														true
													Element:td
														The array of values which the field is being checked against
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Returns
												Node:
												(type) c
												(layer)4
													Element:p
													Element:em
														SugarQuery_Builder_Where Object
												Node:
												(type) c
												(layer)4
													Element:p
														Allows for method chaining on the Where Object to add additional conditions.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											between()
									Node:
									(type) c
									(layer)3
										Element:p
											Used primarily for numeric type fields, to check if the value is greater than the minimum number specified and less than the maximum number specified. The following code would check for records where the employees field is between 50 and 1000.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											//add Between statement $SugarQuery->where()->between('employees',50,1000);
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Arguments
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tbody
													Element:tr
													Element:td
													Element:strong
														Name
													Element:td
													Element:strong
														Type
													Element:td
													Element:strong
														Required
													Element:td
													Element:strong
														Description
													Element:tr
													Element:td
														$field
													Element:td
													Element:em
														String
													Element:td
														true
													Element:td
														The field you are checking against
													Element:tr
													Element:td
														$min
													Element:td
													Element:em
														Number
													Element:td
														true
													Element:td
														The lowest number the field's value should be
													Element:tr
													Element:td
														$max
													Element:td
													Element:em
														Number
													Element:td
														true
													Element:td
														The highest number the field's value should be
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Returns
												Node:
												(type) c
												(layer)4
													Element:p
													Element:em
														SugarQuery_Builder_Where Object
												Node:
												(type) c
												(layer)4
													Element:p
														Allows for method chaining on the Where Object to add additional conditions.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											lt() | lte() | gt() | gte()
									Node:
									(type) c
									(layer)3
										Element:p
											These methods are primarily for numeric fields, to check if a field's value is less than (<), less than or equal (<=), greater than (>), or greater than or equal (>=) to a specified value.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											//Add Less Than Statement $SugarQuery->where()->lt('gross_revenue',1000000); //Add Less Than or Equal to Statement $SugarQuery->where()->lte('net_revenue','500000'); //Add Greater Than Statement $SugarQuery->where()->gt('gross_revenue',500000); //Add Greater Than or Equal to Statement $SugarQuery->where()->gte('net_revenue',100000);
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Arguments
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tbody
													Element:tr
													Element:td
													Element:strong
														Name
													Element:td
													Element:strong
														Type
													Element:td
													Element:strong
														Required
													Element:td
													Element:strong
														Description
													Element:tr
													Element:td
														$field
													Element:td
													Element:em
														String
													Element:td
														true
													Element:td
														The field you are checking against
													Element:tr
													Element:td
														$value
													Element:td
													Element:em
														Number
													Element:td
														true
													Element:td
														The numeric value for comparison
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Returns
												Node:
												(type) c
												(layer)4
													Element:p
													Element:em
														SugarQuery_Builder_Where Object
												Node:
												(type) c
												(layer)4
													Element:p
														Allows for method chaining on the Where Object to add additional conditions.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											dateRange()
									Node:
									(type) c
									(layer)3
										Element:p
											Used to check if a field's value is between a preset date range from the current time. See the
										Element:a
											TimeDate documentation
											on the available date range keys.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											//add DateRange statement $SugarQuery->where()->dateRange('date_modified','last_30_days');
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Arguments
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tbody
													Element:tr
													Element:td
													Element:strong
														Name
													Element:td
													Element:strong
														Type
													Element:td
													Element:strong
														Required
													Element:td
													Element:strong
														Description
													Element:tr
													Element:td
														$field
													Element:td
													Element:em
														String
													Element:td
														true
													Element:td
														The field you are checking against
													Element:tr
													Element:td
														$value
													Element:td
													Element:em
														String
													Element:td
														true
													Element:td
														The string specifying the date range key that will be used for comparison. Example 'next_7_days'
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Returns
												Node:
												(type) c
												(layer)4
													Element:p
													Element:em
														SugarQuery_Builder_Where Object
												Node:
												(type) c
												(layer)4
													Element:p
														Allows for method chaining on the Where Object to add additional conditions.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											dateBetween()
									Node:
									(type) c
									(layer)3
										Element:p
											To group the query on a field, you can use the corresponding
										Element:code
											groupBy()
											method. This method can be called multiple times, to add multiple fields to the grouping of the query.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											//add group by $SugarQuery->where()->dateBetween('date_created',array('2016-01-01','2016-03-01'));
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Arguments
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tbody
													Element:tr
													Element:td
													Element:strong
														Name
													Element:td
													Element:strong
														Type
													Element:td
													Element:strong
														Required
													Element:td
													Element:strong
														Description
													Element:tr
													Element:td
														$field
													Element:td
													Element:em
														String
													Element:td
														true
													Element:td
														The field you are checking against
													Element:tr
													Element:td
														$value
													Element:td
													Element:em
														Array
													Element:td
														true
													Element:td
														An array containing the minimum date in the first key, and the maximum date in the second.
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Returns
												Node:
												(type) c
												(layer)4
													Element:p
													Element:em
														SugarQuery_Builder_Where Object
												Node:
												(type) c
												(layer)4
													Element:p
														Allows for method chaining on the Where Object to add additional conditions.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Combinations
						Node:
						(type) c
						(layer)2
							Element:p
								Now that you have reviewed all of the available conditional statements for SugarQuery, you may want to combine them using AND and OR all within the same query. By default when the
							Element:code
								where()
								method is called, chained conditional methods will be added with AND to the where clause. You can specify an OR where clause on the main SugarQuery object by using the
							Element:code
								orWhere()
								method, which works the same as the
							Element:code
								where()
								method, just adds conditional statements with OR instead. The following methods allow for adding internal AND and OR logic to conditional statements on the Where Object.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											queryAnd()
									Node:
									(type) c
									(layer)3
										Element:p
											To start a group of conditional statements that should all evaluate to True, use the queryAnd() method. For example, if you want to query for Accounts, where the name contains 'Test' AND description contains 'Test', you might use the following code:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											$SugarQuery = new SugarQuery(); $SugarQuery->select(array('name')); $SugarQuery->from(BeanFactory::newBean('Accounts')); //Using queryAnd $SugarQuery->where()->queryAnd()->contains('name','Test')->contains('description','Test');
									Node:
									(type) c
									(layer)3
										Element:p
											The above use of
										Element:code
											queryAnd()
											method isn't entirely needed, as the main Where Object would be using AND for all conditions anyway, but it does group the two conditions inside of their own parenthesis in the compiled query, as shown below, to demonstrate how it can be used for altering query logic.
									Node:
									(type) c
									(layer)3
										Element:pre
											SELECT accounts.name name FROM accounts WHERE accounts.deleted = 0 AND (accounts.name LIKE '%Test%' AND accounts.description LIKE '%Test%')
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											queryOr()
									Node:
									(type) c
									(layer)3
										Element:p
											To start a group of conditional statements that should evaluate to true, if any condition is true, you can use the queryOr() method. For example, if you want to query for Accounts, where the name contains 'Test' or where the description contains 'Test', you might use the following code:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											$SugarQuery = new SugarQuery(); $SugarQuery->select(array('name')); $SugarQuery->from(BeanFactory::newBean('Accounts')); //Using queryOr $SugarQuery->where()->queryOr()->contains('name','Test')->contains('description','Test');
									Node:
									(type) c
									(layer)3
										Element:p
											This will group the two conditions inside of their own parenthesis in the compiled query, as shown below, so that if either of the conditions are True, it will return a record.
									Node:
									(type) c
									(layer)3
										Element:pre
											SELECT accounts.name name FROM accounts WHERE accounts.deleted = 0 AND (accounts.name LIKE '%Test%' OR accounts.description LIKE '%Test%')
									Node:
									(type) c
									(layer)3
										Element:p
											Last modified: 04/15/2016 06:24pm
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														How helpful is this page?
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Provide Feedback About This Page
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:footer
													Element:ul
													Element:li
													Element:h4
														CRM Products & Solutions
													Element:li
													Element:a
														Products
													Element:li
													Element:a
														Editions & Pricing
													Element:li
													Element:a
														CRM Solutions
													Element:li
													Element:a
														SugarCRM Mobile
													Element:li
													Element:a
														Store
													Element:li
													Element:a
														SugarExchange
													Element:ul
													Element:li
													Element:h4
														Resources
													Element:li
													Element:a
														CRM Resources
													Element:li
													Element:a
														Case Studies
													Element:li
													Element:a
														Whitepapers
													Element:li
													Element:a
														Webcasts
													Element:li
													Element:a
														Demos
													Element:ul
													Element:li
													Element:h4
														Support & Community
													Element:li
													Element:a
														Support
													Element:li
													Element:a
														Training & Certification
													Element:li
													Element:a
														Partner Directory
													Element:li
													Element:a
														Developers
													Element:li
													Element:a
														Community Forums
													Element:li
													Element:a
														Partner Portal Login
													Element:ul
													Element:li
													Element:h4
														News
													Element:li
													Element:a
														Press Releases
													Element:li
													Element:a
														News
													Element:li
													Element:a
														Events
													Element:li
													Element:a
														Awards
													Element:li
													Element:a
														CRM Blog
													Element:li
													Element:a
														Partner News
													Element:ul
													Element:li
													Element:h4
														About
													Element:li
													Element:a
														Company Overview
													Element:li
													Element:a
														Careers
													Element:li
													Element:a
														Privacy Policy
													Element:li
													Element:a
														Security Policy
													Element:li
													Element:a
														Terms & Conditions
													Element:li
													Element:a
														Environmental Policy
													Element:li
													Element:a
														Impressum
													Element:h4
														Sugar Worldwide:
													Element:a
													Element:span
														Select Region
													Element:ul
													Element:li
													Element:a
														English (Americas)
													Element:li
													Element:a
														English (ANZ)
													Element:li
													Element:a
														English (UK)
													Element:li
													Element:a
														Deutsch (Germany)
													Element:li
													Element:a
														Français (France)
													Element:li
													Element:a
														Español (Europe)
													Element:li
													Element:a
														Español (Latin America)
													Element:li
													Element:a
														Português (Brazil)
													Element:li
													Element:a
														Italian (Italy)
													Element:h4
														Stay Connected:
												Node:
												(type) c
												(layer)4
													Element:a
													Element:span
														Back to top
												Node:
												(type) c
												(layer)4
													Element:a
													Element:span
														Contents
