Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					CLI
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Overview
						Node:
						(type) c
						(layer)2
							Element:p
								As of Sugar 7.7.1, Sugar includes a beta command line interface tool built using the
							Element:a
								Symfony Console Framework
								. Sugar's CLI is intended to be an administrator or developer level power tool to execute PHP code in the context of Sugar's code base. These commands are version specific and can be executed on a preinstalled Sugar instance or on an installed Sugar instance. Sugar's CLI is not intended to be used as a tool to interact remotely with an instance nor is it designed to interact with multiple instances.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Commands
						Node:
						(type) c
						(layer)2
							Element:p
								Sugar Commands are an implementation of
							Element:a
								Console Commands
								. They extend the base console classes to execute Sugar specific actions. Each instance of Sugar is shipped with a list of predefined commands. The current list of commands is shown below.
						Node:
						(type) c
						(layer)2
							Element:table
							Element:tbody
							Element:tr
							Element:td
							Element:strong
								Command
							Element:td
							Element:strong
								Description
							Element:tr
							Element:td
								help
							Element:td
								Displays help for a command
							Element:tr
							Element:td
								list
							Element:td
								Lists commands
							Element:tr
							Element:td
								elastic:indices
							Element:td
								Show Elasticsearch index statistics
							Element:tr
							Element:td
								elastic:queue
							Element:td
								Show Elasticsearch queue statistics
							Element:tr
							Element:td
								elastic:routing
							Element:td
								Show Elasticsearch index routing
							Element:tr
							Element:td
								search:fields
							Element:td
								Show search engine enabled fields
							Element:tr
							Element:td
								search:reindex
							Element:td
								Schedule SearchEngine reindex
							Element:tr
							Element:td
								search:status
							Element:td
								Show search engine availability and enabled modules
						Node:
						(type) c
						(layer)2
							Element:p
							Element:strong
								Note
								: For advanced users, a bash autocompletion script for CLI is located at
							Element:code
								./src/Console/Resources/sugarcrm-bash-completion
								for inclusion in
							Element:code
								~/.bashrc
								. More details on using the script can be found in the file's header comments.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Usage
									Node:
									(type) c
									(layer)3
										Element:p
											The command executable, located at
										Element:code
											./bin/sugarcrm
											, is executed from the root of the Sugar instance. The command signature is shown below:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											php bin/sugarcrm <command> [options] [arguments]
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Help
												Node:
												(type) c
												(layer)4
													Element:p
														The command console has built-in help documentation. If you pass in a command that isn't found, you will be shown the default help documentation.
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														SugarCRM Console version <version> Usage: command [options] [arguments] Options: -h, --help Display this help message -q, --quiet Do not output any message -V, --version Display this application version --ansi Force ANSI output --no-ansi Disable ANSI output -n, --no-interaction Do not ask any interactive question --profile Display timing and memory usage information -v|vv|vvv, --verbose Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug Available commands: help Displays help for a command list Lists commands elastic elastic:indices Show Elasticsearch index statistics elastic:queue Show Elasticsearch queue statistics elastic:routing Show Elasticsearch index routing search search:fields Show search engine enabled fields search:reindex Schedule SearchEngine reindex search:status Show search engine availability and enabled modules
												Node:
												(type) c
												(layer)4
													Element:p
														Additional help documentation is also available for individual commands. Some examples of accessing the help are shown below.
												Node:
												(type) c
												(layer)4
													Element:p
														Passing the word "help" before a command name:
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														php bin/sugarcrm help <command>
												Node:
												(type) c
												(layer)4
													Element:p
														Passing the "-h" option:
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														php bin/sugarcrm <command> -h
												Node:
												(type) c
												(layer)4
													Element:p
														An example of the
													Element:code
														list
														help documentation is shown below.
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														Usage: list [options] [--] [] Arguments: namespace The namespace name Options: --xml To output list as XML --raw To output raw command list --format=FORMAT The output format (txt, xml, json, or md) [default: "txt"] Help: The list command lists all commands: php bin/sugarcrm list You can also display the commands for a specific namespace: php bin/sugarcrm list test You can also output the information in other formats by using the --format option: php bin/sugarcrm list --format=xml It's also possible to get raw list of commands (useful for embedding command runner): php bin/sugarcrm list --raw
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Custom Commands
						Node:
						(type) c
						(layer)2
							Element:p
								Sugar allows developers the ability to create custom commands. These commands are registered using the
							Element:a
								Extension Framework
								. Each custom command will extend the stock
							Element:code
								Command
								class and implement a specific mode interface. The file system location of the command code can exist anywhere in the instance's file system including a separate composer loaded repository.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Best Practices
									Node:
									(type) c
									(layer)3
										Element:p
											The following are some common best practices developers should keep in mind when adding new commands :
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
											Do not extend from existing commands
										Element:li
											Do not duplicate an already existing command
										Element:li
											Pick the correct mode for the command
										Element:li
											Limit the logic in the command
										Element:li
											Do not put reusable components in the command itself
									Node:
									(type) c
									(layer)3
										Element:p
											Each command requires specific sections of code in order to properly create the command. These requirements are listed in the sections below.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Command Namespace
									Node:
									(type) c
									(layer)3
										Element:p
											It is recommended to name any custom commands using a proper "command namespace". These namespaces are different than PHP namespaces and reduce the chances of collisions occurring between vendors. An example of this would be to prefix any commands with a namespace format of vendor:category:command E.g.
										Element:code
											MyDevShop:repairs:fixMyModule
									Node:
									(type) c
									(layer)3
										Element:p
										Element:strong
											Note
											: The CLI framework does not allow overriding of existing commands.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											PHP Namespace
									Node:
									(type) c
									(layer)3
										Element:p
											The header of the PHP command file will need to define the following namespace:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											namespace Sugarcrm\Sugarcrm\custom\Console\Command;
									Node:
									(type) c
									(layer)3
										Element:p
											In addition to the namespace, the following
										Element:code
											use
											commands are required for different operations :
									Node:
									(type) c
									(layer)3
										Element:table
										Element:tbody
										Element:tr
										Element:td
										Element:strong
											Name
										Element:td
										Element:strong
											Description
										Element:td
										Element:strong
											Example
										Element:tr
										Element:td
											Command
										Element:td
											Every command will extend the
										Element:code
											Command
											class
										Element:td
											use Symfony\Component\Console\Command\Command;
										Element:tr
										Element:td
										Element:a
											Mode
										Element:td
											Whether the command is an Instance or Standalone Mode command
										Element:td
										Element:p
											use Sugarcrm\Sugarcrm\Console\CommandRegistry\Mode\InstanceModeInterface;
										Element:p
											use Sugarcrm\Sugarcrm\Console\CommandRegistry\Mode\StandaloneModeInterface;
										Element:tr
										Element:td
											Input
										Element:td
											Accepts Input from the command
										Element:td
											use Symfony\Component\Console\Input\InputInterface;
										Element:tr
										Element:td
											Output
										Element:td
											Sends Output from the command
										Element:td
											use Symfony\Component\Console\Output\OutputInterface;
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Mode
									Node:
									(type) c
									(layer)3
										Element:p
											When creating Sugar commands, developers will need to specify the mode or set of modes for the command. These modes help prepare the appropriate resources for execution of the command.
									Node:
									(type) c
									(layer)3
										Element:table
										Element:tbody
										Element:tr
										Element:td
										Element:strong
											Mode
										Element:td
										Element:strong
											Description
										Element:tr
										Element:td
											Instance Mode
										Element:td
											Commands that require an installed Sugar instance.
										Element:tr
										Element:td
											Standalone Mode
										Element:td
											Commands that do not require an installed Sugar instance.
									Node:
									(type) c
									(layer)3
										Element:p
										Element:strong
											Note
											: Multiple modes can be selected.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Class Definition
									Node:
									(type) c
									(layer)3
										Element:p
											The custom command class definition should extend the stock command class as well as implement a
										Element:a
											mode's interface
											.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											// Instance Mode Class Definition class <classname> extends Command implements InstanceModeInterface { //protected methods } // Standalone Mode Class Definition class <classname> extends Command implements StandaloneModeInterface { //protected methods } // Implementing both Modes class <classname> extends Command implements InstanceModeInterface, StandaloneModeInterface { //protected methods }
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Methods
									Node:
									(type) c
									(layer)3
										Element:p
											Each command class implements two protected methods :
									Node:
									(type) c
									(layer)3
										Element:table
										Element:tbody
										Element:tr
										Element:td
										Element:strong
											Method
										Element:td
										Element:strong
											Description
										Element:tr
										Element:td
											configure()
										Element:td
											Runs on the creation of the command. Useful to set the name, description, and help on the command.
										Element:tr
										Element:td
											execute(InputInterface $input, OutputInterface $output)
										Element:td
											The code to run for executing the command. Accepts an input and output parameter.
									Node:
									(type) c
									(layer)3
										Element:p
											An example of implementing the protected methods is shown below:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											protected function configure() { $this->setName('sugardev:helloworld') ->setDescription('Hello World') ->setHelp('This command accepts no paramters and returns "Hello World".') ; } protected function execute(InputInterface $input, OutputInterface $output) { $output->writeln("Hello world -> " . $this->getApplication()->getMode()); }
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Registering Command
									Node:
									(type) c
									(layer)3
										Element:p
											After creating the custom command file, register it with the
										Element:a
											Extension Framework
											. This file will be located in ./custom/Extension/application/Ext/Console/. An example of registering a command is below:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											<?php Sugarcrm\Sugarcrm\Console\CommandRegistry\CommandRegistry::getInstance() ->addCommand(new Sugarcrm\Sugarcrm\custom\Console\Command\<Command Class Name>());
									Node:
									(type) c
									(layer)3
										Element:p
											Next, navigate to Admin > Repair > Quick Repair and Rebuild. The custom command will now be available.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Example
									Node:
									(type) c
									(layer)3
										Element:p
											The following sections demonstrate how to create a "Hello World" example. This command does not alter the Sugar system and will only output display text. First, create the command class under the appropriate namespace.
									Node:
									(type) c
									(layer)3
										Element:p
											./custom/src/Console/Command/HelloWorldCommand.php
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											<?php namespace Sugarcrm\Sugarcrm\custom\Console\Command; use Sugarcrm\Sugarcrm\Console\CommandRegistry\Mode\InstanceModeInterface; use Symfony\Component\Console\Command\Command; use Symfony\Component\Console\Input\InputInterface; use Symfony\Component\Console\Output\OutputInterface; /** * * Hello World Example * */ class HelloWorldCommand extends Command implements InstanceModeInterface { protected function configure() { $this ->setName('sugardev:helloworld') ->setDescription('Hello World') ->setHelp('This command accepts no paramters and returns "Hello World".') ; } protected function execute(InputInterface $input, OutputInterface $output) { $output->writeln("Hello world -> " . $this->getApplication()->getMode()); } }
									Node:
									(type) c
									(layer)3
										Element:p
											Next, register the new command:
									Node:
									(type) c
									(layer)3
										Element:p
											./custom/Extension/application/Ext/Console/RegisterHelloWorldCommand.php
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											<?php // Register HelloWorldCommand Sugarcrm\Sugarcrm\Console\CommandRegistry\CommandRegistry::getInstance() ->addCommand(new Sugarcrm\Sugarcrm\custom\Console\Command\HelloWorldCommand());
									Node:
									(type) c
									(layer)3
										Element:p
											Navigate to Admin > Repair > Quick Repair and Rebuild. The new command will be executable from the root of the Sugar instance. It can be executed by running the following command:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											php bin/sugarcrm sugardev:helloworld
									Node:
									(type) c
									(layer)3
										Element:p
											Result:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											Hello world -> InstanceMode
									Node:
									(type) c
									(layer)3
										Element:p
											Help text can be displayed by executing the following command:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											php bin/sugarcrm help sugardev:helloworld
									Node:
									(type) c
									(layer)3
										Element:p
											Result:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											Usage: sugardev:helloworld Options: -h, --help Display this help message -q, --quiet Do not output any message -V, --version Display this application version --ansi Force ANSI output --no-ansi Disable ANSI output -n, --no-interaction Do not ask any interactive question --profile Display timing and memory usage information -v|vv|vvv, --verbose Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug Help: This command accepts no paramters and returns "Hello World".
									Node:
									(type) c
									(layer)3
										Element:p
											Download the module loadable example package
										Element:a
											here
											.
									Node:
									(type) c
									(layer)3
										Element:p
											Last modified: 08/09/2016 04:00pm
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														How helpful is this page?
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Provide Feedback About This Page
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:footer
													Element:ul
													Element:li
													Element:h4
														CRM Products & Solutions
													Element:li
													Element:a
														Products
													Element:li
													Element:a
														Editions & Pricing
													Element:li
													Element:a
														CRM Solutions
													Element:li
													Element:a
														SugarCRM Mobile
													Element:li
													Element:a
														Store
													Element:li
													Element:a
														SugarExchange
													Element:ul
													Element:li
													Element:h4
														Resources
													Element:li
													Element:a
														CRM Resources
													Element:li
													Element:a
														Case Studies
													Element:li
													Element:a
														Whitepapers
													Element:li
													Element:a
														Webcasts
													Element:li
													Element:a
														Demos
													Element:ul
													Element:li
													Element:h4
														Support & Community
													Element:li
													Element:a
														Support
													Element:li
													Element:a
														Training & Certification
													Element:li
													Element:a
														Partner Directory
													Element:li
													Element:a
														Developers
													Element:li
													Element:a
														Community Forums
													Element:li
													Element:a
														Partner Portal Login
													Element:ul
													Element:li
													Element:h4
														News
													Element:li
													Element:a
														Press Releases
													Element:li
													Element:a
														News
													Element:li
													Element:a
														Events
													Element:li
													Element:a
														Awards
													Element:li
													Element:a
														CRM Blog
													Element:li
													Element:a
														Partner News
													Element:ul
													Element:li
													Element:h4
														About
													Element:li
													Element:a
														Company Overview
													Element:li
													Element:a
														Careers
													Element:li
													Element:a
														Privacy Policy
													Element:li
													Element:a
														Security Policy
													Element:li
													Element:a
														Terms & Conditions
													Element:li
													Element:a
														Environmental Policy
													Element:li
													Element:a
														Impressum
													Element:h4
														Sugar Worldwide:
													Element:a
													Element:span
														Select Region
													Element:ul
													Element:li
													Element:a
														English (Americas)
													Element:li
													Element:a
														English (ANZ)
													Element:li
													Element:a
														English (UK)
													Element:li
													Element:a
														Deutsch (Germany)
													Element:li
													Element:a
														Français (France)
													Element:li
													Element:a
														Español (Europe)
													Element:li
													Element:a
														Español (Latin America)
													Element:li
													Element:a
														Português (Brazil)
													Element:li
													Element:a
														Italian (Italy)
													Element:h4
														Stay Connected:
												Node:
												(type) c
												(layer)4
													Element:a
													Element:span
														Back to top
												Node:
												(type) c
												(layer)4
													Element:a
													Element:span
														Contents
