Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					Filters
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Overview
						Node:
						(type) c
						(layer)2
							Element:p
								Filters are a way to predefine searches on views that render a list of records such as list views, pop-up searches, and lookups. This page explains how to implement the various types of filters for record list views.
						Node:
						(type) c
						(layer)2
							Element:p
								Filters contain the following properties:
						Node:
						(type) c
						(layer)2
							Element:table
							Element:tbody
							Element:tr
							Element:td
							Element:strong
								Property
							Element:td
							Element:strong
								Type
							Element:td
							Element:strong
								Description
							Element:tr
							Element:td
								id
							Element:td
								String
							Element:td
								A unique identifier for the filter
							Element:tr
							Element:td
								name
							Element:td
								String
							Element:td
								The label key for the display label of the filter
							Element:tr
							Element:td
								filter_definition
							Element:td
								Array
							Element:td
								The filter definition to apply to the results
							Element:tr
							Element:td
								editable
							Element:td
								Boolean
							Element:td
								Determines whether the user can edit the filter.
							Element:br
							Element:strong
								Note
								: If you are creating a predefined filter for a user, this should be set to false
							Element:tr
							Element:td
								is_template
							Element:td
								Boolean
							Element:td
								Used with initial pop-up filters to determine if the filter is available as a template
						Node:
						(type) c
						(layer)2
							Element:p
							Element:strong
								Note
								: If a filter contains custom fields, those fields must be search-enabled in Studio > {Module Name} > Layouts > Search.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Operators
						Node:
						(type) c
						(layer)2
							Element:p
								Operators, defined in
							Element:code
								./clients/base/filters/operators/operators.php
								, are expressions used by a filter to represent query operators. They are constructed in the
							Element:code
								filter_definition
								to help generate the appropriate query syntax that is sent to the database for a specific field type. Operators can be defined on a global or module level. The accepted paths are listed below:
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
								./clients/base/filters/operators/operators.php
							Element:li
								./custom/clients/base/filters/operators/operators.php
							Element:li
								./modules/<module>/clients/base/filters/operators.php
							Element:li
								./custom/modules/<module>/clients/base/filters/operators.php
						Node:
						(type) c
						(layer)2
							Element:p
								The list of stock operators is shown below:
						Node:
						(type) c
						(layer)2
							Element:table
							Element:tr
							Element:td
							Element:strong
								Operator
							Element:td
							Element:strong
								Label / Key
							Element:td
							Element:strong
								Field Types
							Element:td
							Element:strong
								Description
							Element:tr
							Element:td
								$contains
							Element:td
								is any of
							Element:br
							Element:small
								LBL_OPERATOR_CONTAINS
							Element:td
								multienum
							Element:td
								Matches anything that contains the value.
							Element:tr
							Element:td
								$not_contains
							Element:td
								is not any of
							Element:br
							Element:small
								LBL_OPERATOR_NOT_CONTAINS
							Element:td
								multienum
							Element:td
								Matches anything that does not contain the specified value.
							Element:tr
							Element:td
								$in
							Element:td
								is any of
							Element:br
							Element:small
								LBL_OPERATOR_CONTAINS
							Element:td
								enum, int, relate, and tag
							Element:td
								Finds anything where field matches one of the values as specified as an array.
							Element:tr
							Element:td
								$not_in
							Element:td
								is not any of
							Element:br
							Element:small
								LBL_OPERATOR_NOT_CONTAINS
							Element:td
								enum, relate, and tag
							Element:td
								Finds anything where the field does not match any of the values in the specified array of values.
							Element:tr
							Element:td
								$empty
							Element:td
								is empty
							Element:br
							Element:small
								LBL_OPERATOR_EMPTY
							Element:td
								enum and tag
							Element:td
								Matches on empty values.
							Element:tr
							Element:td
								$not_empty
							Element:td
								is not empty
							Element:br
							Element:small
								LBL_OPERATOR_NOT_EMPTY
							Element:td
								enum and tag
							Element:td
								Matches on non-empty values.
							Element:tr
							Element:td
								$equals
							Element:td
								is
							Element:br
							Element:small
								LBL_OPERATOR_IS
							Element:td
								varchar, name, email, text, textarea, currency, int, double, float, decimal, date, bool, teamset, phone, radioenum, and parent
							Element:td
								Performs an exact match on that field.
							Element:tr
							Element:td
								$starts
							Element:td
								starts with
							Element:br
							Element:small
								LBL_OPERATOR_STARTS_WITH
							Element:td
								varchar, name, email, text, textarea, datetime, datetimecombo, and phone
							Element:td
								Matches on anything that starts with the value.
							Element:tr
							Element:td
								$not_equals
							Element:td
								is not
							Element:br
							Element:small
								LBL_OPERATOR_IS_NOT
							Element:td
								currency, int, double, float, decimal, teamset, and radioenum
							Element:td
								Matches on non-matching values.
							Element:tr
							Element:td
								$gt
							Element:td
								after
							Element:br
							Element:small
								LBL_OPERATOR_AFTER
							Element:td
								currency, int, double, float, decimal, and date
							Element:td
								Matches when the field is greater than the value.
							Element:tr
							Element:td
								$lt
							Element:td
								before
							Element:br
							Element:small
								LBL_OPERATOR_BEFORE
							Element:td
								currency, int, double, float, decimal, and date
							Element:td
								Matches when the field is less than the value.
							Element:tr
							Element:td
								$gte
							Element:td
								after
							Element:br
							Element:small
								LBL_OPERATOR_AFTER
							Element:td
								currency, int, double, float, decimal, datetime, and datetimecombo
							Element:td
								Matches when the field is greater than or equal to the value
							Element:tr
							Element:td
								$lte
							Element:td
								before
							Element:br
							Element:small
								LBL_OPERATOR_BEFORE
							Element:td
								currency, int, double, float, decimal, datetime, and datetimecombo
							Element:td
								Matches when the field is less than or equal to the value.
							Element:tr
							Element:td
								$between
							Element:td
								is between
							Element:br
							Element:small
								LBL_OPERATOR_BETWEEN
							Element:td
								currency, int, double, float, and decimal
							Element:td
								Matches when a numerical value is between two other numerical values.
							Element:tr
							Element:td
								yesterday
							Element:td
								yesterday
							Element:br
							Element:small
								LBL_OPERATOR_YESTERDAY
							Element:td
								date, datetime, and datetimecombo
							Element:td
								Matches dates on yesterday relative to the current date.
							Element:tr
							Element:td
								today
							Element:td
								today
							Element:br
							Element:small
								LBL_OPERATOR_TODAY
							Element:td
								date, datetime, and datetimecombo
							Element:td
								Matches dates in the current date.
							Element:tr
							Element:td
								tomorrow
							Element:td
								tomorrow
							Element:br
							Element:small
								LBL_OPERATOR_TOMORROW
							Element:td
								date, datetime, and datetimecombo
							Element:td
								Matches dates on tomorrow relative to the current date.
							Element:tr
							Element:td
								last_7_days
							Element:td
								last 7 days
							Element:br
							Element:small
								LBL_OPERATOR_LAST_7_DAYS
							Element:td
								date, datetime, and datetimecombo
							Element:td
								Matches date in the last 7 days relative to the current date.
							Element:tr
							Element:td
								next_7_days
							Element:td
								next 7 days
							Element:br
							Element:small
								LBL_OPERATOR_NEXT_7_DAYS
							Element:td
								date, datetime, and datetimecombo
							Element:td
								Matches dates in the next 7 days relative to the current date.
							Element:tr
							Element:td
								last_30_days
							Element:td
								last 30 days
							Element:br
							Element:small
								LBL_OPERATOR_LAST_30_DAYS
							Element:td
								date, datetime, and datetimecombo
							Element:td
								Matches dates in the last 30 days relative to the current date.
							Element:tr
							Element:td
								next_30_days
							Element:td
								next 30 days
							Element:br
							Element:small
								LBL_OPERATOR_NEXT_30_DAYS
							Element:td
								date, datetime, and datetimecombo
							Element:td
								Matches dates in the next 30 days relative to the current date.
							Element:tr
							Element:td
								last_month
							Element:td
								last month
							Element:br
							Element:small
								LBL_OPERATOR_LAST_MONTH
							Element:td
								date, datetime, and datetimecombo
							Element:td
								Matches dates in the previous month relative to the current month.
							Element:tr
							Element:td
								this_month
							Element:td
								this month
							Element:br
							Element:small
								LBL_OPERATOR_THIS_MONTH
							Element:td
								date, datetime, and datetimecombo
							Element:td
								Matches dates in the current month.
							Element:tr
							Element:td
								next_month
							Element:td
								next month
							Element:br
							Element:small
								LBL_OPERATOR_NEXT_MONTH
							Element:td
								date, datetime, and datetimecombo
							Element:td
								Matches dates in the next month relative to the current month.
							Element:tr
							Element:td
								last_year
							Element:td
								last year
							Element:br
							Element:small
								LBL_OPERATOR_LAST_YEAR
							Element:td
								date, datetime, and datetimecombo
							Element:td
								Matches dates in the last year relative to the current year.
							Element:tr
							Element:td
								this_year
							Element:td
								this year
							Element:br
							Element:small
								LBL_OPERATOR_THIS_YEAR
							Element:td
								date, datetime, and datetimecombo
							Element:td
								Matches dates in the current year.
							Element:tr
							Element:td
								next_year
							Element:td
								next year
							Element:br
							Element:small
								LBL_OPERATOR_NEXT_YEAR
							Element:td
								date, datetime, and datetimecombo
							Element:td
								Matches dates in the next year relative to the current year.
							Element:tr
							Element:td
								$dateBetween
							Element:td
								is between
							Element:br
							Element:small
								LBL_OPERATOR_BETWEEN
							Element:td
								date, datetime, and datetimecombo
							Element:td
								Matches dates between two given dates.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Example
									Node:
									(type) c
									(layer)3
										Element:p
											The example below defines a filter where the
										Element:code
											type
											field must contain the value
										Element:code
											Customer
											and the
										Element:code
											name
											field must start with the letter
										Element:code
											A
											.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											$filters = array( array( 'type' => array( '$in' => array( 'Customer', ), ), ), array( 'name' => array( '$starts' => 'A', ), ), );
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Sub-Expressions
						Node:
						(type) c
						(layer)2
							Element:p
								Sub-expressions group filter expressions into groupings. By default, all expressions are bound by an
							Element:code
								$and
								expression grouping.
						Node:
						(type) c
						(layer)2
							Element:table
							Element:tbody
							Element:tr
							Element:td
							Element:strong
								Sub-Expression
							Element:td
							Element:strong
								Description
							Element:tr
							Element:td
								$and
							Element:td
								Joins the filters in an "and" expression
							Element:tr
							Element:td
								$or
							Element:td
								Joins the filters in an "or" expression
						Node:
						(type) c
						(layer)2
							Element:p
							Element:strong
								Note:
								Sub-Expressions are only applicable to predefined filters and cannot be used for initial filters.
						Node:
						(type) c
						(layer)2
							Element:p
								The example below defines a filter where the
							Element:code
								name
								field must being with the letters
							Element:code
								A
								or
							Element:code
								C
								.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								$filters = array( '$or' => array ( array( 'name' => array( '$starts' => 'A', ), ), array( 'name' => array( '$starts' => 'C', ), ), ) );
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Module Expressions
						Node:
						(type) c
						(layer)2
							Element:p
								Module expressions operate on modules instead of specific fields. The current module can be specified by either using the module name
							Element:code
								_this
								or by leaving the module name as a blank string.
						Node:
						(type) c
						(layer)2
							Element:table
							Element:tbody
							Element:tr
							Element:td
							Element:strong
								Module Expression
							Element:td
							Element:strong
								Description
							Element:tr
							Element:td
								$favorite
							Element:td
								Filters the records by the current users favorited items.
							Element:tr
							Element:td
								$owner
							Element:td
								Filters the records by the assigned user.
						Node:
						(type) c
						(layer)2
							Element:p
								The example below defines a filter where records must be favorited items.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								$filters = array( array( '$favorite' => '_this' ), );
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Filter Examples
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Adding Predefined Filters to the List View Filter List
									Node:
									(type) c
									(layer)3
										Element:p
											To add a predefined filter to the module's list view, create a new filter definition extension, which will append the filter to the module's viewdefs.
									Node:
									(type) c
									(layer)3
										Element:p
										Element:img
									Node:
									(type) c
									(layer)3
										Element:p
											The following example will demonstrate how to add a predefined filter on the Accounts module to return all records with an account type of "Customer" and industry of "Other".
									Node:
									(type) c
									(layer)3
										Element:p
											To create a predefined filter, create a display label extension in
										Element:code
											./custom/Extension/modules/<module>/Ext/Language/
											. For this example, we will create:
									Node:
									(type) c
									(layer)3
										Element:p
											./custom/Extension/modules/Accounts/Ext/Language/en_us.filterAccountByTypeAndIndustry.php
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											<?php $mod_strings['LBL_FILTER_ACCOUNT_BY_TYPE_AND_INDUSTRY'] = 'Customer/Other Accounts';
									Node:
									(type) c
									(layer)3
										Element:p
											Next, create a custom filter extension in
										Element:code
											./custom/Extension/modules/<module>/Ext/clients/base/filters/basic/
											.
									Node:
									(type) c
									(layer)3
										Element:p
											For this example, we will create:
									Node:
									(type) c
									(layer)3
										Element:p
											./custom/Extension/modules/Accounts/Ext/clients/base/filters/basic/filterAccountByTypeAndIndustry.php
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											<?php $viewdefs['Accounts']['base']['filter']['basic']['filters'][] = array( 'id' => 'filterAccountByTypeAndIndustry', 'name' => 'LBL_FILTER_ACCOUNT_BY_TYPE_AND_INDUSTRY', 'filter_definition' => array( array( 'account_type' => array( '$in' => array( 'Customer', ), ), ), array( 'industry' => array( '$in' => array( 'Other', ), ), ), ), 'editable' => false, 'is_template' => false, );
									Node:
									(type) c
									(layer)3
										Element:p
											You should notice that the editable and is_template options have been set to "false". If editable is not set to "false", the filter will not be displayed in the list view filter's list.
									Node:
									(type) c
									(layer)3
										Element:p
											Finally, navigate to Admin > Repair and click "Quick Repair and Rebuild" to rebuild the extensions and make the predefined filter available for users.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Adding Initial Filters to Lookup Searches
									Node:
									(type) c
									(layer)3
										Element:p
											To add initial filters to record lookups and type-ahead searches, define a filter template. This will allow you to filter results for users when looking up a parent related record. The following example will demonstrate how to add an initial filter for the Account lookup on the Contacts module. This initial filter will limit records to having an account type of "Customer" and a dynamically assigned user value determined by the contact's assigned user.
									Node:
									(type) c
									(layer)3
										Element:p
											To add an initial filter to the Contacts record view, create a display label for the filter in
										Element:code
											./custom/Extension/modules/<module>/Ext/Language/
											. For this example , we will create:
									Node:
									(type) c
									(layer)3
										Element:p
											./custom/Extension/modules/Accounts/Ext/Language/en_us.filterAccountTemplate.php
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											<?php $mod_strings['LBL_FILTER_ACCOUNT_TEMPLATE'] = 'Customer Accounts By A Dynamic User';
									Node:
									(type) c
									(layer)3
										Element:p
											Next, create a custom template filter extension in
										Element:code
											./custom/Extension/modules/<module>/Ext/clients/base/filters/basic/
											. For this example, create:
									Node:
									(type) c
									(layer)3
										Element:p
											./custom/Extension/modules/Accounts/Ext/clients/base/filters/basic/filterAccountTemplate.php
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											<?php $viewdefs['Accounts']['base']['filter']['basic']['filters'][] = array( 'id' => 'filterAccountTemplate', 'name' => 'LBL_FILTER_ACCOUNT_TEMPLATE', 'filter_definition' => array( array( 'account_type' => array( '$in' => array(), ), ), array( 'assigned_user_id' => '' ) ), 'editable' => true, 'is_template' => true, );
									Node:
									(type) c
									(layer)3
										Element:p
											As you can see, the filter_definition contains arrays for account_type and assigned_user_id. These filter definitions will receive their values from the contact record view's metadata. You should also note that this filter has is_template and editable set to "true". This is required for initial filters.
									Node:
									(type) c
									(layer)3
										Element:p
											Once the filter template is in place, modify the contact record view's metadata. To accomplish this, edit
										Element:code
											./custom/modules/Contacts/clients/base/views/record/record.php
											to adjust the account_name field. If this file does not exist in your local Sugar installation, navigate to Admin > Studio > Contacts > Layouts > Record View and click "Save & Deploy" to generate it. In this file, identify the panel_body array as shown below:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											1 => array ( 'name' => 'panel_body', 'label' => 'LBL_RECORD_BODY', 'columns' => 2, 'labelsOnTop' => true, 'placeholders' => true, 'newTab' => false, 'panelDefault' => 'expanded', 'fields' => array ( 0 => 'title', 1 => 'phone_mobile', 2 => 'department', 3 => 'do_not_call', 4 => 'account_name', 5 => 'email', ), ),
									Node:
									(type) c
									(layer)3
										Element:p
											Next, modify the account_name field to contain the initial filter parameters.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											1 => array ( 'name' => 'panel_body', 'label' => 'LBL_RECORD_BODY', 'columns' => 2, 'labelsOnTop' => true, 'placeholders' => true, 'newTab' => false, 'panelDefault' => 'expanded', 'fields' => array ( 0 => 'title', 1 => 'phone_mobile', 2 => 'department', 3 => 'do_not_call', 4 => array ( //field name 'name' => 'account_name', //the name of the filter template 'initial_filter' => 'filterAccountTemplate', //the display label for users 'initial_filter_label' => 'LBL_FILTER_ACCOUNT_TEMPLATE', //the hardcoded filters to pass to the templates filter definition 'filter_populate' => array( 'account_type' => array('Customer') ), //the dynamic filters to pass to the templates filter definition //please note the index of the array will be for the field the data is being pulled from 'filter_relate' => array( //'field_to_pull_data_from' => 'field_to_populate_data_to' 'assigned_user_id' => 'assigned_user_id', ) ), 5 => 'email', ), ),
									Node:
									(type) c
									(layer)3
										Element:p
											Finally, navigate to Admin > Repair and click "Quick Repair and Rebuild". This will rebuild the extensions and make the initial filter available for users when selecting a parent account for a contact.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Adding Initial Filters to Drawers from a Controller
									Node:
									(type) c
									(layer)3
										Element:p
											When creating your own views, you may need to filter a drawer called from within your custom controller. Using an initial filter, as described in the
										Element:a
											Adding Initial Filters to Lookup Searches
											section, we can filter a drawer with predefined values by creating a filter object and populating the
										Element:code
											config.filter_populate
											property as shown below:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											//create filter var filterOptions = new app.utils.FilterOptions() .config({ 'initial_filter': 'filterAccountTemplate', 'initial_filter_label': 'LBL_FILTER_ACCOUNT_TEMPLATE', 'filter_populate': { 'account_type': ['Customer'], 'assigned_user_id': 'seed_sally_id' } }) .format(); //open drawer app.drawer.open({ layout: 'selection-list', context: { module: 'Accounts', filterOptions: filterOptions, parent: this.context } });
									Node:
									(type) c
									(layer)3
										Element:p
											To create a filtered drawer with dynamic values, create a filter object and populate the
										Element:code
											config.filter_relate
											property using the
										Element:code
											populateRelate
											method as shown below:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											//record to filter related fields by var contact = app.data.createBean('Contacts', { 'first_name': 'John', 'last_name': 'Smith', 'assigned_user_id': 'seed_sally_id' }); //create filter var filterOptions = new app.utils.FilterOptions() .config({ 'initial_filter': 'filterAccountTemplate', 'initial_filter_label': 'LBL_FILTER_ACCOUNT_TEMPLATE', 'filter_populate': { 'account_type': ['Customer'], }, 'filter_relate': { 'assigned_user_id': 'assigned_user_id' } }) .populateRelate(contact) .format(); //open drawer app.drawer.open({ layout: 'selection-list', context: { module: 'Accounts', filterOptions: filterOptions, parent: this.context } });
									Node:
									(type) c
									(layer)3
										Element:p
											Last modified: 07/22/2016 02:11pm
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														How helpful is this page?
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Provide Feedback About This Page
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:footer
													Element:ul
													Element:li
													Element:h4
														CRM Products & Solutions
													Element:li
													Element:a
														Products
													Element:li
													Element:a
														Editions & Pricing
													Element:li
													Element:a
														CRM Solutions
													Element:li
													Element:a
														SugarCRM Mobile
													Element:li
													Element:a
														Store
													Element:li
													Element:a
														SugarExchange
													Element:ul
													Element:li
													Element:h4
														Resources
													Element:li
													Element:a
														CRM Resources
													Element:li
													Element:a
														Case Studies
													Element:li
													Element:a
														Whitepapers
													Element:li
													Element:a
														Webcasts
													Element:li
													Element:a
														Demos
													Element:ul
													Element:li
													Element:h4
														Support & Community
													Element:li
													Element:a
														Support
													Element:li
													Element:a
														Training & Certification
													Element:li
													Element:a
														Partner Directory
													Element:li
													Element:a
														Developers
													Element:li
													Element:a
														Community Forums
													Element:li
													Element:a
														Partner Portal Login
													Element:ul
													Element:li
													Element:h4
														News
													Element:li
													Element:a
														Press Releases
													Element:li
													Element:a
														News
													Element:li
													Element:a
														Events
													Element:li
													Element:a
														Awards
													Element:li
													Element:a
														CRM Blog
													Element:li
													Element:a
														Partner News
													Element:ul
													Element:li
													Element:h4
														About
													Element:li
													Element:a
														Company Overview
													Element:li
													Element:a
														Careers
													Element:li
													Element:a
														Privacy Policy
													Element:li
													Element:a
														Security Policy
													Element:li
													Element:a
														Terms & Conditions
													Element:li
													Element:a
														Environmental Policy
													Element:li
													Element:a
														Impressum
													Element:h4
														Sugar Worldwide:
													Element:a
													Element:span
														Select Region
													Element:ul
													Element:li
													Element:a
														English (Americas)
													Element:li
													Element:a
														English (ANZ)
													Element:li
													Element:a
														English (UK)
													Element:li
													Element:a
														Deutsch (Germany)
													Element:li
													Element:a
														Français (France)
													Element:li
													Element:a
														Español (Europe)
													Element:li
													Element:a
														Español (Latin America)
													Element:li
													Element:a
														Português (Brazil)
													Element:li
													Element:a
														Italian (Italy)
													Element:h4
														Stay Connected:
												Node:
												(type) c
												(layer)4
													Element:a
													Element:span
														Back to top
												Node:
												(type) c
												(layer)4
													Element:a
													Element:span
														Contents
