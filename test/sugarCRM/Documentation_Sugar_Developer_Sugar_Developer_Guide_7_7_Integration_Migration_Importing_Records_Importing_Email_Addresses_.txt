Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					Importing Email Addresses
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Overview
						Node:
						(type) c
						(layer)2
							Element:p
								Recommended approaches when Importing email addresses.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Importing via API
						Node:
						(type) c
						(layer)2
							Element:p
								Sugar comes out of the box with an API that can be called from custom applications utilizing the REST interface. The API can be used to mass create and update records in Sugar with external data. For more information on the REST API in Sugar, please refer to the
							Element:a
								Web Services
								documentation.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Importing New Records
									Node:
									(type) c
									(layer)3
										Element:p
											When importing new records into Sugar through the API, modules with relationships to email addresses can utilize the email1 field or the email link field to specify email addresses for a record.
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Email1 Field
												Node:
												(type) c
												(layer)4
													Element:p
														When using the email1 field, the default functionality is to import the email address specified as the primary address. Assuming the email address does not already exist in the database, the email address is then flagged as being valid and is not opted out. Using the
													Element:strong
														/<module> POST
														endpoint, you can send the following JSON payload to create a contact record with a primary email address using the email1 field:
													Element:br
														POST URL: http://<site url>/rest/v10/Contacts
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														{ "first_name":"Rob", "last_name":"Robertson", "email1":"rob.robertson@sugar.crm" }
												Node:
												(type) c
												(layer)4
													Element:p
													Element:strong
														Note
														: For importing multiple email addresses, you will need to use the email link field described below.
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Email Link Field
												Node:
												(type) c
												(layer)4
													Element:p
														When using the email link field, you can specify multiple email addresses to assign to the record. You may specify the following additional information regarding each email address being added:
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
													Element:strong
														invalid_email
														: Specify this email address as being invalid
													Element:li
													Element:strong
														opt_out
														: Specify this email address as being opted out
													Element:li
													Element:strong
														primary_address
														: Specify this email address as the primary
												Node:
												(type) c
												(layer)4
													Element:p
														Using the
													Element:strong
														/<module> POST
														endpoint, you can send the following JSON payload to create a contact record with multiple email addresses using the email link field:
													Element:br
														POST URL: http://<site url>/rest/v10/Contacts
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														{ "first_name":"Rob", "last_name":"Robertson", "email":[ { "email_address":"rob.robertson@sugar.crm", "primary_address":"1", "invalid_email":"0", "opt_out":"0" }, { "email_address":"rob@sugar.crm", "primary_address":"0", "invalid_email":"0", "opt_out":"1" } ] }
												Node:
												(type) c
												(layer)4
													Element:p
														For more information on the
													Element:strong
														/<module>/:record POST
														endpoint, you can refer to your instance's help documentation found at:
												Node:
												(type) c
												(layer)4
													Element:pre
														http://<site url>/rest/v10/help
												Node:
												(type) c
												(layer)4
													Element:p
														Or you can reference the
													Element:a
														<module> POST
														PHP example.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Updating Existing Records
									Node:
									(type) c
									(layer)3
										Element:p
											When updating existing records in Sugar through the API, modules with relationships to email addresses can also utilize the email1 field or the email link field to specify email addresses for a record.
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Email1 Field
												Node:
												(type) c
												(layer)4
													Element:p
														When using the email1 field, the default functionality is to replace the existing email primary address. Assuming the email does not already exist in the database, the new email address is flagged as being valid and is not opted out. Using the
													Element:strong
														/<module>/:record PUT
														endpoint, you can send the following JSON payload to update a contact records primary email address:
												Node:
												(type) c
												(layer)4
													Element:p
														PUT URL: http://<site url>/rest/v10/Contacts/<record id>
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														{ "email1":"rob.robertson@sugar.crm" }
												Node:
												(type) c
												(layer)4
													Element:p
													Element:strong
														Note
														: This will replace the current email address on the record with the new data. The old email address will no longer be associated with the record.
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Email Link Field
												Node:
												(type) c
												(layer)4
													Element:p
														When using the email link field, you can specify multiple email addresses to update the record with. You may specify the following additional information regarding each email address being added:
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
													Element:strong
														invalid_email
														: Specify this email address as being invalid
													Element:li
													Element:strong
														opt_out
														: Specify this email address as being opted out
													Element:li
													Element:strong
														primary_address
														: Specify this email address as the primary
												Node:
												(type) c
												(layer)4
													Element:p
														Using the
													Element:strong
														/<module>/:record PUT
														endpoint, you can send the following JSON payload to update a contact record with multiple email addresses:
													Element:br
														PUT URL: http://<site url>/rest/v10/Contacts/<record id>
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														{ "email":[ { "email_address":"rob.robertson@sugar.crm", "primary_address":"1", "invalid_email":"0", "opt_out":"0" }, { "email_address":"rob@sugar.crm", "primary_address":"0", "invalid_email":"0", "opt_out":"1" } ] }
												Node:
												(type) c
												(layer)4
													Element:p
														For more information on the
													Element:strong
														/<module>/:record PUT
														endpoint, you can refer to your instance's help documentation found at:
												Node:
												(type) c
												(layer)4
													Element:pre
														http://<site url>/rest/v10/help
												Node:
												(type) c
												(layer)4
													Element:p
														Or you can reference the
													Element:a
														<module>/:record PUT
														PHP example.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Importing via Database
						Node:
						(type) c
						(layer)2
							Element:p
								When importing records into Sugar directly via the database, it is important that you understand the data structure involved before loading data. Email addresses are not stored directly on the table for the module being imported in, but are related via the email_addr_bean_rel table.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
								The table structure for email addresses can be seen from the database via the following SQL statement:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								SELECT email_addr_bean_rel.bean_id, email_addr_bean_rel.bean_module, email_addresses.email_address FROM email_addr_bean_rel INNER JOIN email_addresses ON email_addresses.id = email_addr_bean_rel.email_address_id AND email_addr_bean_rel.deleted = 0 WHERE email_addresses.deleted = 0;
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Checking for Duplicates
									Node:
									(type) c
									(layer)3
										Element:p
											Email addresses can become duplicated in Sugar from a variety of sources including API calls, imports, and from data entry. There are a few ways to have the system check for duplicate contact records, but not many of those methods work for checking email addresses for duplicates. The following section will demonstrate how to find and clean up duplicate email addresses using SQL.
										Element:br
											The following SQL query can be used to locate if any email addresses are being used against more than one bean record within Sugar:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											SELECT email_addresses.email_address, COUNT(*) AS email_address_count FROM email_addr_bean_rel INNER JOIN email_addresses ON email_addresses.id = email_addr_bean_rel.email_address_id AND email_addr_bean_rel.deleted = 0 WHERE email_addresses.deleted = 0 GROUP BY email_addresses.email_address HAVING COUNT(*) > 1;
									Node:
									(type) c
									(layer)3
										Element:p
										Element:strong
											Note
											: If you convert a Lead record to a Contact record, both the Lead and the Contact will be related to the same Email Address and will return as having duplicates in this query. You can add the following line to the WHERE clause to filter the duplicate check down to only one bean type:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											AND email_addr_bean_rel.bean_module = 'Contacts'
									Node:
									(type) c
									(layer)3
										Element:p
											Email addresses can not only be duplicated in the system but can occasionally be missing critical data. Each bean record with an email address assigned to it should have an email address designated the primary. The following query will locate any bean records that have at least one email address, where there is not an email address designated as the primary:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											SELECT email_addr_bean_rel.bean_module, email_addr_bean_rel.bean_id, COUNT(*) AS email_count, COUNT(primary_email_addr_bean_rel.id) AS primary_email_count FROM email_addr_bean_rel LEFT JOIN email_addr_bean_rel primary_email_addr_bean_rel ON primary_email_addr_bean_rel.bean_module = email_addr_bean_rel.bean_module AND primary_email_addr_bean_rel.bean_id = email_addr_bean_rel.bean_id AND primary_email_addr_bean_rel.primary_address = '1' AND primary_email_addr_bean_rel.deleted = '0' WHERE email_addr_bean_rel.deleted = '0' GROUP BY email_addr_bean_rel.bean_module, email_addr_bean_rel.bean_id HAVING primary_email_count < 1;
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Removing Duplicates
									Node:
									(type) c
									(layer)3
										Element:p
											If it is determined you have duplicate email addresses being used in your system, you can use the following query to cleanup the records:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											START TRANSACTION; CREATE TABLE email_addr_bean_rel_tmp SELECT * FROM email_addr_bean_rel WHERE deleted = '0' GROUP BY email_address_id, bean_module, bean_id ORDER BY primary_address DESC; TRUNCATE TABLE email_addr_bean_rel; INSERT INTO email_addr_bean_rel SELECT * FROM email_addr_bean_rel_tmp; SELECT COUNT(*) AS repetitions, date_modified, bean_id, bean_module FROM email_addr_bean_rel WHERE deleted = '0' GROUP BY bean_id, bean_module, email_address_id HAVING repetitions > 1; COMMIT;
									Node:
									(type) c
									(layer)3
										Element:p
											Last modified: 11/30/2016 01:49pm
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														How helpful is this page?
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Provide Feedback About This Page
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:footer
													Element:ul
													Element:li
													Element:h4
														CRM Products & Solutions
													Element:li
													Element:a
														Products
													Element:li
													Element:a
														Editions & Pricing
													Element:li
													Element:a
														CRM Solutions
													Element:li
													Element:a
														SugarCRM Mobile
													Element:li
													Element:a
														Store
													Element:li
													Element:a
														SugarExchange
													Element:ul
													Element:li
													Element:h4
														Resources
													Element:li
													Element:a
														CRM Resources
													Element:li
													Element:a
														Case Studies
													Element:li
													Element:a
														Whitepapers
													Element:li
													Element:a
														Webcasts
													Element:li
													Element:a
														Demos
													Element:ul
													Element:li
													Element:h4
														Support & Community
													Element:li
													Element:a
														Support
													Element:li
													Element:a
														Training & Certification
													Element:li
													Element:a
														Partner Directory
													Element:li
													Element:a
														Developers
													Element:li
													Element:a
														Community Forums
													Element:li
													Element:a
														Partner Portal Login
													Element:ul
													Element:li
													Element:h4
														News
													Element:li
													Element:a
														Press Releases
													Element:li
													Element:a
														News
													Element:li
													Element:a
														Events
													Element:li
													Element:a
														Awards
													Element:li
													Element:a
														CRM Blog
													Element:li
													Element:a
														Partner News
													Element:ul
													Element:li
													Element:h4
														About
													Element:li
													Element:a
														Company Overview
													Element:li
													Element:a
														Careers
													Element:li
													Element:a
														Privacy Policy
													Element:li
													Element:a
														Security Policy
													Element:li
													Element:a
														Terms & Conditions
													Element:li
													Element:a
														Environmental Policy
													Element:li
													Element:a
														Impressum
													Element:h4
														Sugar Worldwide:
													Element:a
													Element:span
														Select Region
													Element:ul
													Element:li
													Element:a
														English (Americas)
													Element:li
													Element:a
														English (ANZ)
													Element:li
													Element:a
														English (UK)
													Element:li
													Element:a
														Deutsch (Germany)
													Element:li
													Element:a
														Français (France)
													Element:li
													Element:a
														Español (Europe)
													Element:li
													Element:a
														Español (Latin America)
													Element:li
													Element:a
														Português (Brazil)
													Element:li
													Element:a
														Italian (Italy)
													Element:h4
														Stay Connected:
												Node:
												(type) c
												(layer)4
													Element:a
													Element:span
														Back to top
												Node:
												(type) c
												(layer)4
													Element:a
													Element:span
														Contents
