Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					Sugar Exchange Package Guidelines
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Overview
						Node:
						(type) c
						(layer)2
							Element:p
								The SugarÂ® platform is open and flexible. Developers can customize any feature or integrate any system with Sugar using a
							Element:a
								Sugar Module Loadable Package
								. This flexibility requires guidelines so that
							Element:a
								SugarExchange
								customers can rest assured that all package offerings adhere to consistent quality standards and will not interfere with existing customizations or prevent software upgrades.
						Node:
						(type) c
						(layer)2
							Element:p
								This guide outlines the minimum standards we expect from any Sugar Developer writing code for the Sugar platform. From the development of Sugar packages to security, user interface, encapsulation, and performance considerations, SugarCRM takes the safety and integrity of the Sugar application and its community very seriously.
							Element:strong
								Compliance with these guidelines is a requirement for any package installed into Sugar On-Demand. Failure to follow these guidelines is grounds for having your package removed from Sugar On-Demand and de-listed from SugarExchange.
						Node:
						(type) c
						(layer)2
							Element:p
								SugarCRM reserves the right to change these guidelines at any time. Please send any questions or feedback on these guidelines to
							Element:a
								developers@sugarcrm.com
								.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Best Practices
						Node:
						(type) c
						(layer)2
							Element:p
								These best practice guidelines have been curated based on years of collective experience working with Sugar Packages that get used by Sugar customers every day.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Use a consistent coding style
									Node:
									(type) c
									(layer)3
										Element:p
											For all PHP code, the style standard that SugarCRM uses is
										Element:a
											PSR-2
											. For JavaScript code, we use the applicable PSR-2 conventions as well. For JavaScript code, we emphasize readability which means we make use of utilities like Underscore.js and avoid nested callbacks. All functions, methods, classes in our code are required to have
										Element:a
											PHPDoc
											and
										Element:a
											JSDoc
											. While not all the code in the Sugar code base currently complies with these standards, we do enforce it as the standard on new code. Using a consistent code style increases the readability and maintainability of application code for those that come after you.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Invest in unit testing during development
									Node:
									(type) c
									(layer)3
										Element:p
											For all JavaScript and PHP code, we strongly recommend the creation of unit tests. For PHP, we use PHPUnit and have developed a framework (to be shared) for testing Sugar server-side code using this framework. For JavaScript code, we use Jasmine and have also developed a framework (to be shared) there to bootstrap
										Element:a
											Sidecar metadata
											so that Jasmine tests can run without dependency on a Sugar server.
									Node:
									(type) c
									(layer)3
										Element:p
											We recommend running unit tests frequently during the development process. We suggest developers run tests before each commit and as part of an automated continuous integration process. Running tests often means you catch failures sooner which makes them easier and cheaper to fix.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Use Sugar REST APIs
									Node:
									(type) c
									(layer)3
										Element:p
											The easiest way to integrate with a Sugar instance is not to install anything into Sugar at all. For Sugar 7, we have a full client
										Element:a
											REST API
											that is used to drive our web interface, our mobile client, and our plug-ins. If you can do it from our user interface, you can use our REST API separately to do it as well. If the REST API doesn't do everything you need it to do, it is very easily extensible. You can easily write code that adds your
										Element:a
											custom API endpoints
											in a minimally invasive way.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Use Module Builder when possible
									Node:
									(type) c
									(layer)3
										Element:p
											Many integrations can be accomplished with the help of Module Builder and the Sugar REST API. Module Builder allows you to quickly design new modules for Sugar that match concepts that you want to add to a Sugar instance. These custom modules can then be installed and populated via the REST API, making it a powerful integration mechanism that doesn't require writing a line of Sugar code. Using custom modules will prevent conflicts with other customizations, as well. For more information, please refer to the
										Element:a
											Module Builder
											documentation.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Use Extension framework and Dashlets for Sugar code customizations
									Node:
									(type) c
									(layer)3
										Element:p
											The
										Element:a
											Extension framework
											is the way to add server-side changes to a Sugar instance in a loosely coupled way.
										Element:a
											Dashlets
											are the best way to add new, custom user interface components to a Sugar instance that gives users maximum flexibility in how they use your app. These mechanisms also avoid conflicts with other customizations since Extensions are additive and do not replace core files.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Security Guidelines
						Node:
						(type) c
						(layer)2
							Element:p
								Protecting and controlling access to CRM data is of paramount importance. It is important that Sugar Packages are good stewards of CRM data and access control.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Use TLS/SSL for web services calls
									Node:
									(type) c
									(layer)3
										Element:p
											Just as we don't recommend running Sugar in production without
										Element:a
											TLS/SSL
											, all web-services calls that are initiated from a Sugar Package should also use SSL. The concern is the exposure of user credentials, OAuth/session tokens, or sensitive CRM data via plaintext transmission that would otherwise be handled securely.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Do not hardcode sensitive information
									Node:
									(type) c
									(layer)3
										Element:p
											You also should not hardcode any credentials, API keys, tokens, etc, within a Sugar Package. Sugar Packages and Sugar application code is never encrypted so there is always a risk that an attacker could discover these things and abuse them. Usernames and passwords, OAuth tokens, and similar credentials for accessing 3rd party systems should be stored in the database (for example, on the config table). The Sugar platform also provides encryption utilities that allow information to be stored in an encrypted form. These settings could then be changeable by the Administrator via the
										Element:a
											Administration panel
											or some other end-user input.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								User Interface Guidelines
						Node:
						(type) c
						(layer)2
							Element:p
								Sugar packages can be used to add new user interface components or front-end customizations to Sugar. It is important to consider the impact that these changes have on the user experience and the look and feel of the Sugar application.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Use the Sugar 7 Styleguide
									Node:
									(type) c
									(layer)3
										Element:p
											In Sugar 7, we have doubled down on our emphasis on creating the best possible user experience. While other applications may use different usage patterns than the ones used in Sugar 7, it is important to think about how new functionality or integrations that you build in Sugar 7 fits within the overall Sugar 7 user experience. Users do not tolerate an inconsistent experience within a given tool - it makes it harder to learn to use, which lowers adoption of Sugar as well as your application.
									Node:
									(type) c
									(layer)3
										Element:p
											We want to make it easier for you to build applications within Sugar that use a consistent theme and user experience patterns, so we have included a
										Element:a
											styleguide
											for the Sugar application. You can find a link to the styleguide from the Sugar Administration page. There you can find all the information you need to leverage Sugar 7's styling including our CSS framework.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Don't use incompatible UI frameworks or external CSS libraries
									Node:
									(type) c
									(layer)3
										Element:p
											Mixing outside user interface frameworks into the Sugar application via a Sugar Package can easily break many different parts of the application. Please only include as much CSS as you need and make sure that it is properly formed so that it doesn't affect other parts of the Sugar application. At the very least, using different frameworks or themes within your application will create a disjointed experience for the end user. While your package may be installed into Sugar, the user experience will not be seamless.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Encapsulation Guidelines
						Node:
						(type) c
						(layer)2
							Element:p
								An important aspect of the quality of a Sugar Package is how well encapsulated and loosely coupled it is. A well encapsulated and loosely coupled package will encounter the fewest issues during upgrades, fewer breakages due to core code changes or due to interactions with other installed packages, as well minimizing bugs or problems that end users encounter.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Use Extensions framework and Custom Modules as much as possible
									Node:
									(type) c
									(layer)3
										Element:p
											A well-encapsulated package prefers the use of
										Element:a
											Custom Modules
											over customizing and repurposing existing Sugar Modules. A loosely coupled package uses
										Element:a
											Extensions framework
											for customizing and connecting with the core Sugar application. Only override the behavior of core Sugar application files as a last resort.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Avoid customizations to core Sugar application files
									Node:
									(type) c
									(layer)3
										Element:p
											Developers are strongly discouraged from overriding core Sugar Modules or Sugar framework code. In many cases, a cleaner approach for accomplishing the same goal exists. For example, using a logic hook to extend the behavior of a SugarBean instead of overriding the SugarBean itself. Every core customization is a barrier to successful upgrades that creates recurring development costs over time. This is exacerbated in heavily customized Sugar instances as other customizations may exist on these files. Anytime there is a conflict then manual intervention by a Sugar Developer is required which is not only inconvenient but costly for everyone involved. If you do make core Sugar customizations then keeping track of such changes is very important to get in front of potential conflicts with other packages and upgrades.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Use Package Scanner to ensure your Sugar Package is ready for Sugar On-Demand
									Node:
									(type) c
									(layer)3
										Element:p
											Sugar Packages should be designed with Sugar On-Demand in mind, as many Sugar customers choose this hosting option over hosting on-site or through a Sugar partner. Code that gets loaded into Sugar On-Demand must pass the
										Element:a
											Package Scanner
											utility and must not adversely impact the SugarCRM infrastructure. This stipulation is outlined in the
										Element:a
											On-Demand MSA agreement
											under Exhibit A in sections 3 and 5. Package Scanner can be enabled on any Sugar instance via the Sugar Administration panel which allows this to be tested easily. You should also educate yourself in
										Element:a
											some alternatives to blacklisted functions
											.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Performance Guidelines
						Node:
						(type) c
						(layer)2
							Element:p
								Sugar is primarily a database application however with the introduction of Sugar 7, more and more business logic is executed within the user's web browser. It is best to avoid pre-optimization and use tools to properly identify the root causes of performance issues that users could encounter.
						Node:
						(type) c
						(layer)2
							Element:p
								Sugar 7 has instrumentation built into it for
							Element:a
								New Relic APM
								, which can monitor browser and server performance simultaneously, as well as
							Element:a
								XHprof
								for Sugar PHP profiling. Slow query logging can also be enabled via the Sugar Administration panel under System Settings. For more information, refer to the
							Element:a
								System
								documentation. The Sugar Engineering team typically uses
							Element:a
								Chrome DevTools
								for JavaScript profiling.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Index for large frequently used queries
									Node:
									(type) c
									(layer)3
										Element:p
											The most common performance bottleneck for Sugar is the database. Using slow query logging makes it possible to identify bottlenecks and correct them. One way to address query bottlenecks is to
										Element:a
											extend vardefs
											to add
										Element:a
											indices
											during package install to improve the performance of those queries.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Add scheduled jobs to prune large database tables
									Node:
									(type) c
									(layer)3
										Element:p
											If your Package adds database tables that can tend to grow very large over time, it is a best practice to include scheduled jobs in your package that can be used to prune the size of this database over time. For Sugar, these background tasks can be created and managed using the
										Element:a
											Job Queue
											framework. At the very least, you'll want to create a
										Element:a
											Custom Job
											that Sugar Administrators can then run as needed. This will allow the package to remain in tip-top shape for your users over time. Especially if they are running on Sugar On-Demand because direct access to the underlying SQL database to do manual tuning and cleanup is not permitted.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Ensure your application does not block user interface during long running processes
									Node:
									(type) c
									(layer)3
										Element:p
											If your application prevents the user from getting feedback or using the interface while it is running a long process, this will impact the perceived performance of the application. Users typically expect some UI feedback within half a second. If you have transactions that will take longer than that, it is best to use the
										Element:a
											Job Queue
											framework to defer them for later or move them into a
										Element:a
											scheduled Custom Job
											.
									Node:
									(type) c
									(layer)3
										Element:p
											Last modified: 10/11/2016 04:28pm
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														How helpful is this page?
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Provide Feedback About This Page
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:footer
													Element:ul
													Element:li
													Element:h4
														CRM Products & Solutions
													Element:li
													Element:a
														Products
													Element:li
													Element:a
														Editions & Pricing
													Element:li
													Element:a
														CRM Solutions
													Element:li
													Element:a
														SugarCRM Mobile
													Element:li
													Element:a
														Store
													Element:li
													Element:a
														SugarExchange
													Element:ul
													Element:li
													Element:h4
														Resources
													Element:li
													Element:a
														CRM Resources
													Element:li
													Element:a
														Case Studies
													Element:li
													Element:a
														Whitepapers
													Element:li
													Element:a
														Webcasts
													Element:li
													Element:a
														Demos
													Element:ul
													Element:li
													Element:h4
														Support & Community
													Element:li
													Element:a
														Support
													Element:li
													Element:a
														Training & Certification
													Element:li
													Element:a
														Partner Directory
													Element:li
													Element:a
														Developers
													Element:li
													Element:a
														Community Forums
													Element:li
													Element:a
														Partner Portal Login
													Element:ul
													Element:li
													Element:h4
														News
													Element:li
													Element:a
														Press Releases
													Element:li
													Element:a
														News
													Element:li
													Element:a
														Events
													Element:li
													Element:a
														Awards
													Element:li
													Element:a
														CRM Blog
													Element:li
													Element:a
														Partner News
													Element:ul
													Element:li
													Element:h4
														About
													Element:li
													Element:a
														Company Overview
													Element:li
													Element:a
														Careers
													Element:li
													Element:a
														Privacy Policy
													Element:li
													Element:a
														Security Policy
													Element:li
													Element:a
														Terms & Conditions
													Element:li
													Element:a
														Environmental Policy
													Element:li
													Element:a
														Impressum
													Element:h4
														Sugar Worldwide:
													Element:a
													Element:span
														Select Region
													Element:ul
													Element:li
													Element:a
														English (Americas)
													Element:li
													Element:a
														English (ANZ)
													Element:li
													Element:a
														English (UK)
													Element:li
													Element:a
														Deutsch (Germany)
													Element:li
													Element:a
														FranÃ§ais (France)
													Element:li
													Element:a
														EspaÃ±ol (Europe)
													Element:li
													Element:a
														EspaÃ±ol (Latin America)
													Element:li
													Element:a
														PortuguÃªs (Brazil)
													Element:li
													Element:a
														Italian (Italy)
													Element:h4
														Stay Connected:
												Node:
												(type) c
												(layer)4
													Element:a
													Element:span
														Back to top
												Node:
												(type) c
												(layer)4
													Element:a
													Element:span
														Contents
