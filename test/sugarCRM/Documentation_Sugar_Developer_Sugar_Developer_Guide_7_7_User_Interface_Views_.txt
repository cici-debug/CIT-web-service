Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					Views
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Overview
						Node:
						(type) c
						(layer)2
							Element:p
								Views are component plugins that render data from a context. View components may contain field components and are typically made up of a
							Element:a
								controller
								JavaScript file (.js) and at least one
							Element:a
								Handlebars
								template (.hbt).
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Load Order Hierarchy Diagram
									Node:
									(type) c
									(layer)3
										Element:p
											The view components are loaded in the following manner:
									Node:
									(type) c
									(layer)3
										Element:p
										Element:img
									Node:
									(type) c
									(layer)3
										Element:p
										Element:strong
											Note:
											The Sugar application's client type is "base". For more information on the various client types, please refer to the
										Element:a
											User Interface
											page.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Components
						Node:
						(type) c
						(layer)2
							Element:p
								Views are made up of a controller and a Handlebar template.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Controller
									Node:
									(type) c
									(layer)3
										Element:p
											The view's controller is what controls the view in how data is loaded, formatted, and manipulated. The controller is the JavaScript file named after the view. A controller file can be found in any of the directories shown in the
										Element:a
											hierarchy diagram
											above. In the example of the record view, the main controller file is located in
										Element:code
											./clients/base/views/record/record.js
											and any modules extending this controller will have a file located in
										Element:code
											./modules/<module>/clients/base/views/record/record.js
											.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Handlebar Template
									Node:
									(type) c
									(layer)3
										Element:p
											The views template is built on Handlebars and is what adds the display markup for the data. The template is typically named after the view or an action in the view. In the example of the record view, the main template us located in
										Element:code
											./clients/base/views/record/record.hbs
											. This template will take the data fetched from the REST API to render the display for the user. More information on templates can be found in the
										Element:a
											Handlebars
											section.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Extending Views
						Node:
						(type) c
						(layer)2
							Element:p
								When working with module views, it is important to understand the difference between overriding and extending a view. Overriding is essentially creating or copying a view to be used by your application that is not extending its parent. By default, some module views already extend the core ./clients/base/views/record/record.js controller. An example of this is the accounts RecordView
						Node:
						(type) c
						(layer)2
							Element:p
								./modules/Accounts/clients/base/views/record/record.js
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								({ extendsFrom: 'RecordView', /** * @inheritdoc */ initialize: function(options) { this.plugins = _.union(this.plugins || [], ['HistoricalSummary']); this._super('initialize', [options]); } })
						Node:
						(type) c
						(layer)2
							Element:p
								As you can see, this view has the property:
							Element:code
								extendsFrom: 'RecordView'
								. This property tells Sidecar that the view is going to extend its parent RecordView. In addition to this, you can see that the initialize method is also calling
							Element:code
								this._super('initialize', [options]);
								. Calling
							Element:code
								this._super
								tells Sidecar to execute the parent function. The major benefit of doing this is that any updates to
							Element:code
								./clients/base/views/record/record.js
								will be reflected for the module without any modifications being made to
							Element:code
								./modules/Accounts/clients/base/views/record/record.js
								. You should note that when using
							Element:code
								extendsFrom
								, the parent views are called similarly to the load hierarchy:
						Node:
						(type) c
						(layer)2
							Element:p
							Element:img
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Basic View Example
						Node:
						(type) c
						(layer)2
							Element:p
								A simple view for beginners is the access-denied view. The view is located in
							Element:code
								./clients/base/views/access-denied/
								and is what handles the display for restricted access. The sections below will outline the various files that render this view.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Controller
									Node:
									(type) c
									(layer)3
										Element:p
											The
										Element:code
											access-denied.js
											, shown below, controls the manipulation actions of the view.
									Node:
									(type) c
									(layer)3
										Element:p
											./clients/base/views/access-denied/access-denied.js
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											({ className: 'access-denied tcenter', cubeOptions: {spin: false}, events: { 'click .sugar-cube': 'spinCube' }, spinCube: function() { this.cubeOptions.spin = !this.cubeOptions.spin; this.render(); } })
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Attributes
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tbody
													Element:tr
													Element:td
													Element:strong
														Attribute
													Element:td
													Element:strong
														Description
													Element:tr
													Element:td
														className
													Element:td
														The CSS class to apply to the view.
													Element:tr
													Element:td
														cubeOptions
													Element:td
														A set of options that are passed to the spinCube function when called.
													Element:tr
													Element:td
														events
													Element:td
														A list of the view events. This view executes the spinCube function when the sugar cube is clicked.
													Element:tr
													Element:td
														spinCube
													Element:td
														Function to control the start and stop of the cube spinning.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Handlebar Template
									Node:
									(type) c
									(layer)3
										Element:p
											The
										Element:code
											access-denied.hbs
											file defines the format of the views content. As this view is used for restricting access, it displays a message to the user describing the restriction.
									Node:
									(type) c
									(layer)3
										Element:p
											./clients/base/views/access-denied/access-denied.hbs
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											<div class="error-message"> <h1>{{str 'ERR_NO_VIEW_ACCESS_TITLE'}}</h1> <p>{{str 'ERR_NO_VIEW_ACCESS_REASON'}}</p> <p>{{str 'ERR_NO_VIEW_ACCESS_ACTION'}}</p> </div> {{{subFieldTemplate 'sugar-cube' 'detail' cubeOptions}}}
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Helpers
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tbody
													Element:tr
													Element:td
													Element:b
														Name
													Element:td
													Element:strong
														Description
													Element:tr
													Element:td
														str
													Element:td
														Handlebars helper to render the label string
													Element:tr
													Element:td
														subFieldTemplate
													Element:td
														Handlebars helper to render the cube content
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Topics
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:a
								Metadata
							Element:p
								This page is an overview of the metadata framework for Sidecar modules.
							Element:li
							Element:a
								Removing the Account Requirement on Opportunities
							Element:p
								This will article covers how to remove the Account field from being required on the Opportunities module.
							Element:li
							Element:a
								Adding Buttons to the Record View
							Element:p
								This example explains how to create additional buttons on the record view and add events. We will extend and override the stock Accounts record view to add a custom button. The custom button will be called "Validate Postal Code" and ping the Zippopotamus REST service to validate the records billing state and postal code.
							Element:li
							Element:a
								Adding Field Validation to the Record View
							Element:p
								This page explains how to add additional field validation to the record view. In the following examples, we will extend and override the stock Accounts record view to add custom validation. The custom validation will require the Office Phone field when the account type is set to "Customer" and also require the user to enter at least one email address.
							Element:li
							Element:a
								Passing Data to Templates
							Element:p
								This page explains how to create a custom view component that passes data to the Handlebars template.
							Element:li
							Element:a
								Refreshing Subpanels on the RecordView
							Element:p
								How to refresh specific subpanels on the Record View.
						Node:
						(type) c
						(layer)2
							Element:p
								Last modified: 03/30/2016 04:38pm
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
														How helpful is this page?
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
														Provide Feedback About This Page
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:footer
													Element:ul
													Element:li
													Element:h4
														CRM Products & Solutions
													Element:li
													Element:a
														Products
													Element:li
													Element:a
														Editions & Pricing
													Element:li
													Element:a
														CRM Solutions
													Element:li
													Element:a
														SugarCRM Mobile
													Element:li
													Element:a
														Store
													Element:li
													Element:a
														SugarExchange
													Element:ul
													Element:li
													Element:h4
														Resources
													Element:li
													Element:a
														CRM Resources
													Element:li
													Element:a
														Case Studies
													Element:li
													Element:a
														Whitepapers
													Element:li
													Element:a
														Webcasts
													Element:li
													Element:a
														Demos
													Element:ul
													Element:li
													Element:h4
														Support & Community
													Element:li
													Element:a
														Support
													Element:li
													Element:a
														Training & Certification
													Element:li
													Element:a
														Partner Directory
													Element:li
													Element:a
														Developers
													Element:li
													Element:a
														Community Forums
													Element:li
													Element:a
														Partner Portal Login
													Element:ul
													Element:li
													Element:h4
														News
													Element:li
													Element:a
														Press Releases
													Element:li
													Element:a
														News
													Element:li
													Element:a
														Events
													Element:li
													Element:a
														Awards
													Element:li
													Element:a
														CRM Blog
													Element:li
													Element:a
														Partner News
													Element:ul
													Element:li
													Element:h4
														About
													Element:li
													Element:a
														Company Overview
													Element:li
													Element:a
														Careers
													Element:li
													Element:a
														Privacy Policy
													Element:li
													Element:a
														Security Policy
													Element:li
													Element:a
														Terms & Conditions
													Element:li
													Element:a
														Environmental Policy
													Element:li
													Element:a
														Impressum
													Element:h4
														Sugar Worldwide:
													Element:a
													Element:span
														Select Region
													Element:ul
													Element:li
													Element:a
														English (Americas)
													Element:li
													Element:a
														English (ANZ)
													Element:li
													Element:a
														English (UK)
													Element:li
													Element:a
														Deutsch (Germany)
													Element:li
													Element:a
														Français (France)
													Element:li
													Element:a
														Español (Europe)
													Element:li
													Element:a
														Español (Latin America)
													Element:li
													Element:a
														Português (Brazil)
													Element:li
													Element:a
														Italian (Italy)
													Element:h4
														Stay Connected:
												Node:
												(type) c
												(layer)4
													Element:a
													Element:span
														Back to top
												Node:
												(type) c
												(layer)4
													Element:a
													Element:span
														Contents
