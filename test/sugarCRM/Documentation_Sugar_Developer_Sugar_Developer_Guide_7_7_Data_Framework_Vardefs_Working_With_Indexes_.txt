Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					Working With Indexes
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Overview
						Node:
						(type) c
						(layer)2
							Element:p
								Sugar provides a simple method for creating custom indexes through the vardef framework. Indexes can be built on one or more fields within a module. Indexes can be saved down to the database level or made available only in the application for functions such as
							Element:a
								Import Duplicate Checking
								.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Index Metadata
						Node:
						(type) c
						(layer)2
							Element:p
								Indexes have the following metadata options that can be configured per index:
						Node:
						(type) c
						(layer)2
							Element:table
							Element:tbody
							Element:tr
							Element:td
							Element:strong
								Key
							Element:td
							Element:strong
								Value
							Element:td
							Element:strong
								Description
							Element:tr
							Element:td
								name
							Element:td
								string
							Element:td
							Element:p
								A Unique identifier to define the index. Best practices recommend indexes start with idx and contain the suffix cstm to avoid conflicting with a stock index.
							Element:p
							Element:strong
								Note
								: Some databases have restrictions on the length of index names. Please check with your database vendor to avoid any issues.
							Element:tr
							Element:td
								type
							Element:td
								string
							Element:td
								All indexes should use the type of "index"
							Element:tr
							Element:td
								fields
							Element:td
								array
							Element:td
								A PHP array of the fields for the index to utilize
							Element:tr
							Element:td
								source
							Element:td
								string
							Element:td
								Specify as "non-db" to avoid creating the index in the database
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Creating Indexes
						Node:
						(type) c
						(layer)2
							Element:p
								Stock indexes are initially defined in the module's vardefs file under the indices array. For reference, you can find them using the vardef path of your module. The path will be
							Element:code
								./modules/<module>/vardefs.php
								.
						Node:
						(type) c
						(layer)2
							Element:p
								Custom indexes should be created using the Extension Framework. First, create a PHP file in the extension directory of your desired module. The path should similar to
							Element:code
								./custom/Extension/modules/<module>/Ext/Vardefs/<name>.php
								.
						Node:
						(type) c
						(layer)2
							Element:p
								In the new file, add the appropriate $dictionary reference to define the custom index:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								<?php $dictionary['<module>']['indices'][] = array( 'name' => '<index name>', 'type' => 'index', 'fields' => array( 'field1', 'field2', ) );
						Node:
						(type) c
						(layer)2
							Element:p
							Element:strong
								Note
								: For performance reasons, it is not recommended to create an index on a single field unless the source is set to non-db.
						Node:
						(type) c
						(layer)2
							Element:p
								Once installed,you will need to navigate to Admin > Repair > Quick Repair and Rebuild to enable the custom index. You will need to execute any scripts generated by the rebuild process.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Removing Indexes
						Node:
						(type) c
						(layer)2
							Element:p
								Stock indexes are initially defined in the module's vardefs file under the indices array. For reference, you can find them using the vardef path of your module. The path will be
							Element:code
								./modules/<module>/vardefs.php
								.
						Node:
						(type) c
						(layer)2
							Element:p
								Stock indexes should be removed using the Extension Framework. First, create a PHP file in the extension directory of your desired module. The path should similar to
							Element:code
								./custom/Extension/modules/<module>/Ext/Vardefs/<name>.php
								.
						Node:
						(type) c
						(layer)2
							Element:p
								In the new file, loop through the existing 'indices' sub-array of the $dictionary to locate the stock index to remove, and use unset() to remove it from the array.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Example
									Node:
									(type) c
									(layer)3
										Element:p
											The following is an example to remove the idx_calls_date_start index from the Call module's vardefs.
									Node:
									(type) c
									(layer)3
										Element:p
											First, create
										Element:code
											./custom/Extension/modules/Calls/Ext/Vardefs/remove_idx_calls_date_start.php
											from the root directory of your Sugar installation on the web server. When creating the file, keep in mind the following requirements:
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
											The name of the file is not important, as long as it ends with a .php extension.
										Element:li
											The rest of the directory path is case sensitive so be sure to create the directories as shown.
										Element:li
											If you are removing the index for a module other than Calls, then substitute the corresponding directory name with that module.
										Element:li
											Ensure that the entire directory path and file have the correct ownership and sufficient permissions for the web server to access the file.
									Node:
									(type) c
									(layer)3
										Element:p
											The contents of the file should look similar to the following code:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											<?php $call_indexes = $dictionary['Call']['indices']; $remove_index = "idx_calls_date_start"; foreach($call_indexes as $index_key => $index_item) { if( $index_item['name'] == $remove_index ) { unset($dictionary['Call']['indices'][$index_key]); } }
									Node:
									(type) c
									(layer)3
										Element:p
										Element:strong
											Note
											: Removing the reference to the index from the module's indices array does not actually remove the index from the module's database table. Removing the reference from the indices array ensures that the index is not added back to the module's database table when performing any future Quick Repair and Rebuilds. The database index must be removed directly at the database level. On MySQL, with the current example, this could be done with a query like:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											ALTER TABLE calls DROP INDEX idx_calls_date_start;
									Node:
									(type) c
									(layer)3
										Element:p
											Once installed,you will need to navigate to Admin > Repair > Quick Repair and Rebuild to remove the index from the $dictionary array. You will need to execute any scripts generated by the rebuild process.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Creating Indexes for Import Duplicate Checking
						Node:
						(type) c
						(layer)2
							Element:p
								When importing records to Sugar via the Import Wizard, users can select which of the mapped fields they would like to use to perform a duplicate check and thereby avoid creating duplicate records. The following instructions explain how to enable an additional field or set of fields for selection in this step.
							Element:br
							Element:img
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Example
									Node:
									(type) c
									(layer)3
										Element:p
											The following is an example to add the home phone field to the Contact module's duplicate check.
									Node:
									(type) c
									(layer)3
										Element:p
											First, create
										Element:code
											./custom/Extension/modules/Contacts/Ext/Vardefs/custom_import_index.php
											from the root directory of your Sugar installation on the web server. When creating the file, keep in mind the following requirements:
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
											The name of the file is not important, as long as it ends with a .php extension.
										Element:li
											The rest of the directory path is case sensitive so be sure to create the directories as shown.
										Element:li
											If you are creating the import index for a module other than Contacts, then substitute the corresponding directory name with that module.
										Element:li
											Ensure that the entire directory path and file have the correct ownership and sufficient permissions for the web server to access the file.
									Node:
									(type) c
									(layer)3
										Element:p
											The contents of the file should look similar to the following code:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											<?php $dictionary['Contact']['indices'][] = array( 'name' => 'idx_home_phone_cstm', 'type' => 'index', 'fields' => array( 0 => 'phone_home', ), 'source' => 'non-db', );
									Node:
									(type) c
									(layer)3
										Element:p
											Please note that the module name in line 2 of the code is singular (i.e. Contact, not Contacts). If you are unsure of what to enter for the module name, you can verify the name by opening the
										Element:code
											./cache/modules/<module_name>/<module_name>vardefs.php
											file. The second line of that file will have text like the following:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											$GLOBALS["dictionary"]["Contact"] = array (...);
									Node:
									(type) c
									(layer)3
										Element:p
											The parameter following "dictionary" is the same parameter you should use in the file defining the custom index. To verify duplicates against a combination of fields (i.e. duplicates will only be flagged if the values of multiple fields match those of an existing record), then simply add the desired fields to the 'fields' array in the code example.
									Node:
									(type) c
									(layer)3
										Element:p
											Finally, navigate to Admin > Repair > Quick Repair and Rebuild to enable the custom index for duplicate verification when importing records in the module.
									Node:
									(type) c
									(layer)3
										Element:p
											Last modified: 03/20/2017 04:59pm
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														How helpful is this page?
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Provide Feedback About This Page
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:footer
													Element:ul
													Element:li
													Element:h4
														CRM Products & Solutions
													Element:li
													Element:a
														Products
													Element:li
													Element:a
														Editions & Pricing
													Element:li
													Element:a
														CRM Solutions
													Element:li
													Element:a
														SugarCRM Mobile
													Element:li
													Element:a
														Store
													Element:li
													Element:a
														SugarExchange
													Element:ul
													Element:li
													Element:h4
														Resources
													Element:li
													Element:a
														CRM Resources
													Element:li
													Element:a
														Case Studies
													Element:li
													Element:a
														Whitepapers
													Element:li
													Element:a
														Webcasts
													Element:li
													Element:a
														Demos
													Element:ul
													Element:li
													Element:h4
														Support & Community
													Element:li
													Element:a
														Support
													Element:li
													Element:a
														Training & Certification
													Element:li
													Element:a
														Partner Directory
													Element:li
													Element:a
														Developers
													Element:li
													Element:a
														Community Forums
													Element:li
													Element:a
														Partner Portal Login
													Element:ul
													Element:li
													Element:h4
														News
													Element:li
													Element:a
														Press Releases
													Element:li
													Element:a
														News
													Element:li
													Element:a
														Events
													Element:li
													Element:a
														Awards
													Element:li
													Element:a
														CRM Blog
													Element:li
													Element:a
														Partner News
													Element:ul
													Element:li
													Element:h4
														About
													Element:li
													Element:a
														Company Overview
													Element:li
													Element:a
														Careers
													Element:li
													Element:a
														Privacy Policy
													Element:li
													Element:a
														Security Policy
													Element:li
													Element:a
														Terms & Conditions
													Element:li
													Element:a
														Environmental Policy
													Element:li
													Element:a
														Impressum
													Element:h4
														Sugar Worldwide:
													Element:a
													Element:span
														Select Region
													Element:ul
													Element:li
													Element:a
														English (Americas)
													Element:li
													Element:a
														English (ANZ)
													Element:li
													Element:a
														English (UK)
													Element:li
													Element:a
														Deutsch (Germany)
													Element:li
													Element:a
														Français (France)
													Element:li
													Element:a
														Español (Europe)
													Element:li
													Element:a
														Español (Latin America)
													Element:li
													Element:a
														Português (Brazil)
													Element:li
													Element:a
														Italian (Italy)
													Element:h4
														Stay Connected:
												Node:
												(type) c
												(layer)4
													Element:a
													Element:span
														Back to top
												Node:
												(type) c
												(layer)4
													Element:a
													Element:span
														Contents
