Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					JSGroupings
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Overview
						Node:
						(type) c
						(layer)2
							Element:p
								The
							Element:code
								JSGroupings
								extension allows for additional JavaScript grouping files to be created or added to existing groupings within the system.
						Node:
						(type) c
						(layer)2
							Element:p
								JSGroupings are file packages containing one or more minified JavaScript libraries. The groupings enhance system performance by reducing the number of JavaScript files that need to be downloaded for a given page. Some examples of JSGroupings in Sugar are
							Element:code
								sugar_sidecar.min.js
								, which contains the Sidecar JavaScript files, and
							Element:code
								sugar_grp1.js
								, which contains the base JavaScript files.
						Node:
						(type) c
						(layer)2
							Element:p
								You can find all of the groups listed in
							Element:code
								./jssource/JSGroupings.php
								. Each group is loaded only when needed by a direct call (e.g., from a TPL file). For example,
							Element:code
								sugar_grp1.js
								is loaded for almost all Sugar functions, while
							Element:code
								sugar_grp_yui_widgets.js
								will usually be loaded for just record views.
						Node:
						(type) c
						(layer)2
							Element:p
								To load a JSGroupings file for a custom module, simply add a new JSGrouping and then include the JavaScript file for your custom handlebars template. You can also
							Element:a
								append to an existing grouping
								, such as
							Element:code
								./include/javascript/sugar_grp7.min.js
								, to include the code globally.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Properties
						Node:
						(type) c
						(layer)2
							Element:p
								The following extension properties are available. For more information, please refer to the
							Element:a
								Extension Property
								documentation.
						Node:
						(type) c
						(layer)2
							Element:table
							Element:tbody
							Element:tr
							Element:td
							Element:strong
								Property
							Element:td
							Element:strong
								Value
							Element:tr
							Element:td
								Extension Scope
							Element:td
								Application
							Element:tr
							Element:td
								Sugar Variable
							Element:td
								$js_groupings
							Element:tr
							Element:td
								Extension Directory
							Element:td
								./custom/Extension/application/Ext/JSGroupings/
							Element:tr
							Element:td
								Compiled Extension File
							Element:td
								./custom/application/Ext/JSGroupings/jsgroups.ext.php
							Element:tr
							Element:td
								Manifest Installdef
							Element:td
								$installdefs['jsgroups']
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Implementation
						Node:
						(type) c
						(layer)2
							Element:p
								The following sections illustrate the various ways to implement a customization to a Sugar instance.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											File System
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Creating New JSGroupings
												Node:
												(type) c
												(layer)4
													Element:p
														When working directly with the filesystem, you can create a file in
													Element:code
														./custom/Extension/application/Ext/JSGroupings/
														to add or append Javascript to JSGroupings in the system. The following example will add a new JSGrouping file to the system:
												Node:
												(type) c
												(layer)4
													Element:p
														./custom/Extension/application/Ext/JSGroupings/<file>.php
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														<?php //creates the file cache/include/javascript/newGrouping.js $js_groupings[] = $newGrouping = array( 'custom/file1.js' => 'include/javascript/newGrouping.js', 'custom/file2.js' => 'include/javascript/newGrouping.js', );
												Node:
												(type) c
												(layer)4
													Element:p
														Next, create the Javascript files that will be grouped as specified in the JSGrouping definition above:
												Node:
												(type) c
												(layer)4
													Element:p
														./custom/file1.js
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														function one(){ //logic }
												Node:
												(type) c
												(layer)4
													Element:p
														./custom/file2.js
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														function two(){ //logic }
												Node:
												(type) c
												(layer)4
													Element:p
														Next, navigate to Admin > Repair > Quick Repair and Rebuild. The system will then rebuild the extensions and compile your customization into
													Element:code
														./custom/application/Ext/JSGroupings/jsgroups.ext.php
														.
												Node:
												(type) c
												(layer)4
													Element:p
														Finally, navigate to Admin > Repair > Rebuild JS Grouping Files. This will create the grouping file in the cache directory as specified:
												Node:
												(type) c
												(layer)4
													Element:p
														./cache/include/javascript/newGrouping.js
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														function one(){}/* End of File custom/file1.js */function two(){}/* End of File custom/file2.js */
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Appending to Existing JSGroupings
												Node:
												(type) c
												(layer)4
													Element:p
														In some situations, you may find that you need to append your own JavaScript to a core Sugar JSGrouping. Similar to creating a new JSGrouping, to append to a core JSGrouping you can create a file in
													Element:code
														./custom/Extension/application/Ext/JSGroupings/
														. The example below demonstrates how to add the file
													Element:code
														./custom/file1.js
														to
													Element:code
														./cache/include/javascript/sugar_grp7.min.js
														.
												Node:
												(type) c
												(layer)4
													Element:p
														./custom/Extension/application/Ext/JSGroupings/<file>.php
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														<?php //Loop through the groupings to find grouping file you want to append to foreach ($js_groupings as $key => $groupings) { foreach ($groupings as $file => $target) { //if the target grouping is found if ($target == 'include/javascript/sugar_grp7.min.js') { //append the custom JavaScript file $js_groupings[$key]['custom/file1.js'] = 'include/javascript/sugar_grp7.min.js'; } break; } }
												Node:
												(type) c
												(layer)4
													Element:p
														Next, navigate to Admin > Repair > Quick Repair and Rebuild. The system will then rebuild the extensions and compile your customization into
													Element:code
														./custom/application/Ext/JSGroupings/jsgroups.ext.php
														.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Module Loadable Package
									Node:
									(type) c
									(layer)3
										Element:p
											When building a module loadable package, you can use the
										Element:code
											$installdefs['jsgroups']
											index to install the extension file.
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Installdef Properties
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tbody
													Element:tr
													Element:td
													Element:strong
														Name
													Element:td
													Element:strong
														Type
													Element:td
													Element:strong
														Description
													Element:tr
													Element:td
														from
													Element:td
														String
													Element:td
														The basepath of the file to be installed
													Element:tr
													Element:td
														to_module
													Element:td
														String
													Element:td
														The key for the module where the file will be installed
												Node:
												(type) c
												(layer)4
													Element:p
														The example below demonstrates the proper install definition that should be used in the
													Element:code
														./manifest.php
														file to add the JSGrouping Extension file to the system. When using this approach, you still need to use the
													Element:code
														$installdefs['copy']
														index for the custom JavaScript files you are adding to JSGroupings. Sugar will automatically execute Rebuild Extensions to reflect the new JSGrouping, however, you will still need to navigate to Admin > Repair > Rebuild JS Grouping Files, to create the grouping file in the cache directory.
												Node:
												(type) c
												(layer)4
													Element:p
														./manifest.php
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														<?php $manifest = array( ... ); $installdefs = array( 'id' => 'jsGroupings_Example', 'jsgroups' => array( array( 'from' => '<basepath>/Files/custom/Extension/application/Ext/JSGroupings/<file>.php', 'to_module' => 'application', ) ), 'copy' => array( array( 'from' => '<basepath>/Files/custom/file1.js', 'to' => 'custom/file1.js' ), array( 'from' => '<basepath>/Files/custom/file2.js', 'to' => 'custom/file2.js' ) ) );
												Node:
												(type) c
												(layer)4
													Element:p
														Alternatively, you may use the
													Element:code
														$installdefs['copy']
														index for the JSGrouping Extension file. When using this approach, you may need to manually run repair actions such as a Quick Repair and Rebuild. For more information on the
													Element:code
														$installdefs['copy']
														index and module-loadable packages, please refer to the
													Element:a
														Introduction to the Manifest
														page.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Considerations
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
								The grouping path you specify will be created in the cache directory.
							Element:li
								If you wish to add a grouping that contains a file that is part of another group already, add a '.' after <file>.js to make the element key unique.
						Node:
						(type) c
						(layer)2
							Element:p
								Last modified: 01/08/2017 01:34am
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
														How helpful is this page?
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
														Provide Feedback About This Page
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:footer
													Element:ul
													Element:li
													Element:h4
														CRM Products & Solutions
													Element:li
													Element:a
														Products
													Element:li
													Element:a
														Editions & Pricing
													Element:li
													Element:a
														CRM Solutions
													Element:li
													Element:a
														SugarCRM Mobile
													Element:li
													Element:a
														Store
													Element:li
													Element:a
														SugarExchange
													Element:ul
													Element:li
													Element:h4
														Resources
													Element:li
													Element:a
														CRM Resources
													Element:li
													Element:a
														Case Studies
													Element:li
													Element:a
														Whitepapers
													Element:li
													Element:a
														Webcasts
													Element:li
													Element:a
														Demos
													Element:ul
													Element:li
													Element:h4
														Support & Community
													Element:li
													Element:a
														Support
													Element:li
													Element:a
														Training & Certification
													Element:li
													Element:a
														Partner Directory
													Element:li
													Element:a
														Developers
													Element:li
													Element:a
														Community Forums
													Element:li
													Element:a
														Partner Portal Login
													Element:ul
													Element:li
													Element:h4
														News
													Element:li
													Element:a
														Press Releases
													Element:li
													Element:a
														News
													Element:li
													Element:a
														Events
													Element:li
													Element:a
														Awards
													Element:li
													Element:a
														CRM Blog
													Element:li
													Element:a
														Partner News
													Element:ul
													Element:li
													Element:h4
														About
													Element:li
													Element:a
														Company Overview
													Element:li
													Element:a
														Careers
													Element:li
													Element:a
														Privacy Policy
													Element:li
													Element:a
														Security Policy
													Element:li
													Element:a
														Terms & Conditions
													Element:li
													Element:a
														Environmental Policy
													Element:li
													Element:a
														Impressum
													Element:h4
														Sugar Worldwide:
													Element:a
													Element:span
														Select Region
													Element:ul
													Element:li
													Element:a
														English (Americas)
													Element:li
													Element:a
														English (ANZ)
													Element:li
													Element:a
														English (UK)
													Element:li
													Element:a
														Deutsch (Germany)
													Element:li
													Element:a
														Français (France)
													Element:li
													Element:a
														Español (Europe)
													Element:li
													Element:a
														Español (Latin America)
													Element:li
													Element:a
														Português (Brazil)
													Element:li
													Element:a
														Italian (Italy)
													Element:h4
														Stay Connected:
												Node:
												(type) c
												(layer)4
													Element:a
													Element:span
														Back to top
												Node:
												(type) c
												(layer)4
													Element:a
													Element:span
														Contents
