Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					SugarQuery
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Overview
						Node:
						(type) c
						(layer)2
							Element:p
								SugarQuery provides an object-oriented approach to working with the database. This allows developers to generate the applicable SQL for a Sugar system without having to know which database backend the instance is using. SugarQuery supports all databases supported by Sugar.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:strong
								Note
								: SugarQuery only supports Reading data from the database at this time (i.e. SELECT statements).
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Setup
						Node:
						(type) c
						(layer)2
							Element:p
								To use SugarQuery, simply include the SugarQuery files, and create a new SugarQuery object.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								require_once('include/SugarQuery/SugarQuery.php'); $sugarQuery = new SugarQuery();
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Basic Usage
						Node:
						(type) c
						(layer)2
							Element:p
								Using the SugarQuery object to retrieve records or generate SQL queries is very simple. At a minimum you need to set the Module you are working with, using the
							Element:code
								from()
								method, however, there are helper methods for just about any operation you would need in a SQL query. The methods listed below will outline the major methods you should consider utilizing on the SugarQuery object in order to achieve your development goals.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											from()
									Node:
									(type) c
									(layer)3
										Element:p
											The
										Element:code
											from()
											method is used to set the primary module the SugarQuery object will be querying from. It is also used to set some crucial options for the query, such as whether Team Security should be used or if only non-deleted records should be queried. The following example will set the SugarQuery object to query from the Accounts module.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											$sugarQuery->from(BeanFactory::newBean('Accounts'));
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Arguments
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tbody
													Element:tr
													Element:td
													Element:strong
														Name
													Element:td
													Element:strong
														Type
													Element:td
													Element:strong
														Required
													Element:td
													Element:strong
														Description
													Element:tr
													Element:td
														$bean
													Element:td
														SugarBean Object
													Element:td
														true
													Element:td
														The SugarBean object for a specified module. The SugarBean object does not have to be a blank or new Bean as seen in the example above, but can be a previously instantiated SugarBean object.
													Element:tr
													Element:td
														$options
													Element:td
														Array
													Element:td
														false
													Element:td
													Element:p
														An associative array that can specify any of the following options:
													Element:ul
													Element:li
													Element:strong
														alias
														-
													Element:em
														string -
														The alias for the module table in the generated SQL query
													Element:li
													Element:strong
														team_security
														-
													Element:em
														boolean
														- Whether or not Team Security should be added to the generated SQL query
													Element:li
													Element:strong
														add_deleted
														-
													Element:em
														boolean
														- Whether or not
													Element:code
														'deleted' = 0
														should be added to Where clause of generated SQL query
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Returns
												Node:
												(type) c
												(layer)4
													Element:p
													Element:em
														SugarQuery Object
												Node:
												(type) c
												(layer)4
													Element:p
														Allows for method chaining on the SugarQuery object.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											select()
									Node:
									(type) c
									(layer)3
										Element:p
											The example above demonstrates the most basic example of retrieving records from a module. The
										Element:code
											select()
											method can be used on the SugarQuery object to specify the specific fields you wish to retrieve from the query.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											//Alter the Selected Fields $sugarQuery->select(array('id','name'));
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Arguments
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tbody
													Element:tr
													Element:td
													Element:strong
														Name
													Element:td
													Element:strong
														Type
													Element:td
													Element:strong
														Required
													Element:td
													Element:strong
														Description
													Element:tr
													Element:td
														$fields
													Element:td
														Array
													Element:td
														false
													Element:td
														Sets the fields that should be added to the SELECT portion of the SQL query
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Returns
												Node:
												(type) c
												(layer)4
													Element:p
													Element:em
														SugarQuery_Builder_Select Object
												Node:
												(type) c
												(layer)4
													Element:p
														You cannot chain SugarQuery methods off of the
													Element:code
														select()
														method, however, you can use the returned Select object to modify the SELECT portion of the statement. Review the SugarQuery_Builder_Select object in
													Element:code
														./include/SugarQuery/Builder/Select.php
														for additional information on usage.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											where()
									Node:
									(type) c
									(layer)3
										Element:p
											To add a WHERE clause to the query, use the
										Element:code
											where()
											method to generate the Where Object, and then use method chaining with the various helper methods to add conditions. To add a WHERE clause for records with the
										Element:code
											name
											field containing the letter "I", you could add the following code.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											//add the where clause $sugarQuery->where()->contains('name', 'I');
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Arguments
												Node:
												(type) c
												(layer)4
													Element:p
													Element:em
														None
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Returns
												Node:
												(type) c
												(layer)4
													Element:p
													Element:em
														SugarQuery_Builder_Where Object
												Node:
												(type) c
												(layer)4
													Element:p
														Allows for method chaining on the Where Object as shown above. Review the
													Element:a
														SugarQuery Conditions
														documentation for full spectrum of
													Element:code
														where()
														method usage.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Relationships
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											join()
									Node:
									(type) c
									(layer)3
										Element:p
											To add data from a related module to the SugarQuery, use the
										Element:code
											join()
											method. Adding to the same SugarQuery code example in this page, the following code would add the JOIN from Accounts module tables to Contacts table:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											//add join $sugarQuery->join('contacts');
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Arguments
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tbody
													Element:tr
													Element:td
													Element:strong
														Name
													Element:td
													Element:strong
														Type
													Element:td
													Element:strong
														Required
													Element:td
													Element:strong
														Description
													Element:tr
													Element:td
														$link_name
													Element:td
														String
													Element:td
														true
													Element:td
														The name of the relationship
													Element:tr
													Element:td
														$options
													Element:td
														Array
													Element:td
														false
													Element:td
													Element:p
														An associative array that can specify any of the following options:
													Element:ul
													Element:li
													Element:strong
														alias
														-
													Element:em
														string -
														The alias for the module table in the generated SQL query
													Element:li
													Element:strong
														relatedJoin
														-
													Element:em
														string
														- If joining to a secondary table (related to a related module), such as joining on Opportunities related to Contacts, when querying from Accounts, you can specify either the name of the relationship or the alias you specified for that relationship table.
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Returns
												Node:
												(type) c
												(layer)4
													Element:p
													Element:em
														SugarQuery_Builder_Join Object
												Node:
												(type) c
												(layer)4
													Element:p
														Allows for method chaining on the SugarQuery_Builder_Join Object, to add additional conditions to the WHERE clause of the SQL condition.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Altering Results
						Node:
						(type) c
						(layer)2
							Element:p
								Altering the result set of a query can help performance of the queries, as well as be crucial to finding the correct data. The following methods provide ways to limit the result set and change the order.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											distinct()
									Node:
									(type) c
									(layer)3
										Element:p
											To group the query on a field, you can use the corresponding
										Element:code
											distinct()
											method.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											//add group by $sugarQuery->distinct(true);
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Arguments
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tbody
													Element:tr
													Element:td
													Element:strong
														Name
													Element:td
													Element:strong
														Type
													Element:td
													Element:strong
														Required
													Element:td
													Element:strong
														Description
													Element:tr
													Element:td
														$value
													Element:td
														Boolean
													Element:td
														true
													Element:td
														Set whether or not the DISTINCT statement should be added to the query
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Returns
												Node:
												(type) c
												(layer)4
													Element:p
														Current
													Element:em
														SugarQuery Object
												Node:
												(type) c
												(layer)4
													Element:p
														Allows for method chaining on the SugarQuery Object.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											limit()
									Node:
									(type) c
									(layer)3
										Element:p
											To limit the results of the query, you can use the
										Element:code
											limit()
											method.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											//set the limit $sugarQuery->limit(10);
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Arguments
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tbody
													Element:tr
													Element:td
													Element:strong
														Name
													Element:td
													Element:strong
														Type
													Element:td
													Element:strong
														Required
													Element:td
													Element:strong
														Description
													Element:tr
													Element:td
														$number
													Element:td
														Integer
													Element:td
														true
													Element:td
														The max amount of rows that should be returned by the query
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Returns
												Node:
												(type) c
												(layer)4
													Element:p
														Current
													Element:em
														SugarQuery Object
												Node:
												(type) c
												(layer)4
													Element:p
														Allows for method chaining on the SugarQuery Object.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											offset()
									Node:
									(type) c
									(layer)3
										Element:p
											Adding a limit to the query limits the rows returned, however when doing so, you may need to alter the offset of the query to account for pagination or access other portions of the result set. To set an offset, you can use the
										Element:code
											offset()
											method.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											//set the offset $sugarQuery->offset(5);
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Arguments
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tbody
													Element:tr
													Element:td
													Element:strong
														Name
													Element:td
													Element:strong
														Type
													Element:td
													Element:strong
														Required
													Element:td
													Element:strong
														Description
													Element:tr
													Element:td
														$number
													Element:td
														Integer
													Element:td
														true
													Element:td
														The offset amount of rows, or starting point, of the result
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Returns
												Node:
												(type) c
												(layer)4
													Element:p
														Current
													Element:em
														SugarQuery Object
												Node:
												(type) c
												(layer)4
													Element:p
														Allows for method chaining on the SugarQuery Object.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											orderBy()
									Node:
									(type) c
									(layer)3
										Element:p
											To order the query on a field, you can use the corresponding
										Element:code
											orderBy()
											method. This method can be called multiple times, to add multiple fields to the order by clause of the query.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											//add group by $sugarQuery->orderBy('account_type');
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Arguments
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tbody
													Element:tr
													Element:td
													Element:strong
														Name
													Element:td
													Element:strong
														Type
													Element:td
													Element:strong
														Required
													Element:td
													Element:strong
														Description
													Element:tr
													Element:td
														$column
													Element:td
														String
													Element:td
														true
													Element:td
														The field you want the query to be grouped on
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Returns
												Node:
												(type) c
												(layer)4
													Element:p
														Current
													Element:em
														SugarQuery Object
												Node:
												(type) c
												(layer)4
													Element:p
														Allows for method chaining on the SugarQuery Object.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Execution
						Node:
						(type) c
						(layer)2
							Element:p
								Once you have the SugarQuery object setup and configured for your statement, you will want to retrieve the results of the query, or simply get the generated query for the object. The following methods are used for executing the SugarQuery object.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											execute()
									Node:
									(type) c
									(layer)3
										Element:p
											To query the database for a result set, you will use the
										Element:code
											execute()
											method. The
										Element:code
											execute()
											method will retrieve the results and return them as a
										Element:code
											raw
											string,
										Element:code
											db
											object,
										Element:code
											json
											, or an
										Element:code
											array
											depending on the
										Element:code
											$type
											parameter. By default, results are returned as an array. An example of fetching records from an account is below:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											//fetch the result $result = $sugarQuery->execute();
									Node:
									(type) c
									(layer)3
										Element:p
											The
										Element:code
											execute()
											function will return an array of results that you can iterate through as shown below:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											Array ( [0] => Array ( [id] => f39593da-3f88-3059-4f18-524b4d23d07b [name] => International Art Inc ) )
									Node:
									(type) c
									(layer)3
										Element:p
										Element:strong
											Note:
											An empty resultset will return an empty array.
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Arguments
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tbody
													Element:tr
													Element:td
													Element:strong
														Name
													Element:td
													Element:strong
														Type
													Element:td
													Element:strong
														Required
													Element:td
													Element:strong
														Description
													Element:tr
													Element:td
														$type
													Element:td
														String
													Element:td
														false
													Element:td
													Element:p
														How you want the results of the Query returned. Can be one of the following options:
													Element:ul
													Element:li
													Element:strong
														raw
														- Returns the compiled SQL statement. Does not run the query. See
													Element:code
														compileSql()
														method below
													Element:li
													Element:strong
														db
														- Returns the result directly from the DatabaseManager resource
													Element:li
													Element:strong
														array
														-
													Element:em
														Default
														- Returns the results as a formatted array
													Element:li
													Element:strong
														json
														- Returns the results encoded as JSON
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Returns
												Node:
												(type) c
												(layer)4
													Element:p
														Default:
													Element:em
														Array.
														See above argument details for details on other Return options.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											compileSql()
									Node:
									(type) c
									(layer)3
										Element:p
											If you want to log the query being generated or want to output the query without running it during development, the
										Element:code
											compileSql()
											method is what should be used.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											//get the compiled SQL query $query = $sugarQuery->compileSql();
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Arguments
												Node:
												(type) c
												(layer)4
													Element:p
													Element:em
														No arguments
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Returns
												Node:
												(type) c
												(layer)4
													Element:p
													Element:em
														String
												Node:
												(type) c
												(layer)4
													Element:p
														The compiled SQL Query built by the SugarQuery object.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Topics
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:a
								SugarQuery Conditions
							Element:p
								Learn about the various methods that can be utilized with SugarQuery to add conditional statements to a query.
							Element:li
							Element:a
								Advanced Techniques
							Element:p
								Learn about some of the advanced methods that SugarQuery has to offer, that are not as commonly used.
						Node:
						(type) c
						(layer)2
							Element:p
								Last modified: 01/20/2017 09:20am
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
														How helpful is this page?
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
														Provide Feedback About This Page
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:footer
													Element:ul
													Element:li
													Element:h4
														CRM Products & Solutions
													Element:li
													Element:a
														Products
													Element:li
													Element:a
														Editions & Pricing
													Element:li
													Element:a
														CRM Solutions
													Element:li
													Element:a
														SugarCRM Mobile
													Element:li
													Element:a
														Store
													Element:li
													Element:a
														SugarExchange
													Element:ul
													Element:li
													Element:h4
														Resources
													Element:li
													Element:a
														CRM Resources
													Element:li
													Element:a
														Case Studies
													Element:li
													Element:a
														Whitepapers
													Element:li
													Element:a
														Webcasts
													Element:li
													Element:a
														Demos
													Element:ul
													Element:li
													Element:h4
														Support & Community
													Element:li
													Element:a
														Support
													Element:li
													Element:a
														Training & Certification
													Element:li
													Element:a
														Partner Directory
													Element:li
													Element:a
														Developers
													Element:li
													Element:a
														Community Forums
													Element:li
													Element:a
														Partner Portal Login
													Element:ul
													Element:li
													Element:h4
														News
													Element:li
													Element:a
														Press Releases
													Element:li
													Element:a
														News
													Element:li
													Element:a
														Events
													Element:li
													Element:a
														Awards
													Element:li
													Element:a
														CRM Blog
													Element:li
													Element:a
														Partner News
													Element:ul
													Element:li
													Element:h4
														About
													Element:li
													Element:a
														Company Overview
													Element:li
													Element:a
														Careers
													Element:li
													Element:a
														Privacy Policy
													Element:li
													Element:a
														Security Policy
													Element:li
													Element:a
														Terms & Conditions
													Element:li
													Element:a
														Environmental Policy
													Element:li
													Element:a
														Impressum
													Element:h4
														Sugar Worldwide:
													Element:a
													Element:span
														Select Region
													Element:ul
													Element:li
													Element:a
														English (Americas)
													Element:li
													Element:a
														English (ANZ)
													Element:li
													Element:a
														English (UK)
													Element:li
													Element:a
														Deutsch (Germany)
													Element:li
													Element:a
														Français (France)
													Element:li
													Element:a
														Español (Europe)
													Element:li
													Element:a
														Español (Latin America)
													Element:li
													Element:a
														Português (Brazil)
													Element:li
													Element:a
														Italian (Italy)
													Element:h4
														Stay Connected:
												Node:
												(type) c
												(layer)4
													Element:a
													Element:span
														Back to top
												Node:
												(type) c
												(layer)4
													Element:a
													Element:span
														Contents
