Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					Preventing Infinite Loops with Logic Hooks
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Overview
						Node:
						(type) c
						(layer)2
							Element:p
								Infinite loops often happen when a logic hook calls save on a bean in a scenario that triggers the same hook again. This example shows how to add a check to a logic hook to eliminate perpetual looping.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Saving in an After Save Hook
						Node:
						(type) c
						(layer)2
							Element:p
								Infinite loops can sometimes happen when you have a need to update a record after it has been run through the workflow process in the
							Element:code
								after_save
								hook. Here is an example of a looping hook:
						Node:
						(type) c
						(layer)2
							Element:p
								./custom/modules/Accounts/logic_hooks.php
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								<?php $hook_version = 1; $hook_array = Array(); $hook_array['after_save'] = Array(); $hook_array['after_save'][] = Array( 1, 'Update Account Record', 'custom/modules/Accounts/Accounts_Hook.php', 'Accounts_Hook', 'update_self' );
						Node:
						(type) c
						(layer)2
							Element:p
								./custom/modules/Accounts/Accounts_Hook.php
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								<?php if (!defined('sugarEntry') || !sugarEntry) die('Not A Valid Entry Point'); class Accounts_Hook { function update_self($bean, $event, $arguments) { //generic condition if ($bean->type == 'Analyst') { //update $bean->industry = 'Banking'; $bean->save(); } } }
						Node:
						(type) c
						(layer)2
							Element:p
								In the example above, there is a generic condition that, when met, will trigger the update of a field on the record. This will cause an infinite loop because calling the
							Element:code
								save()
								method will trigger once during the
							Element:code
								before_save
								hook and then again during the
							Element:code
								after_save
								hook. The solution to this problem is to add a new property on the bean to ignore any unneeded saves. For this example, we will name the property "ignore_update_c" and add a check to the logic hook to eliminate the perpetual loop. An example of this is shown below:
						Node:
						(type) c
						(layer)2
							Element:p
								./custom/modules/Accounts/Accounts_Hook.php
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								<?php if (!defined('sugarEntry') || !sugarEntry) die('Not A Valid Entry Point'); class Accounts_Hook { function update_self($bean, $event, $arguments) { //loop prevention check if (!isset($bean->ignore_update_c) || $bean->ignore_update_c === false) { //generic condition if ($bean->type == 'Analyst') { //update $bean->ignore_update_c = true; $bean->industry = 'Banking'; $bean->save(); } } } }
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Related Record Save Loops
						Node:
						(type) c
						(layer)2
							Element:p
								Sometimes logic hooks on two separate but related modules can cause an infinite loop. The problem arises when the two modules have logic hooks that update one another. This is often done when wanting to keep a field in sync between two modules. The example below will demonstrate this behavior on the accounts:contacts relationship:
						Node:
						(type) c
						(layer)2
							Element:p
								./custom/modules/Accounts/logic_hooks.php
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								<?php $hook_version = 1; $hook_array = Array(); $hook_array['before_save'] = Array(); $hook_array['before_save'][] = Array( 1, 'Handling associated Contacts records', 'custom/modules/Accounts/Accounts_Hook.php', 'Accounts_Hook', 'update_contacts' );
						Node:
						(type) c
						(layer)2
							Element:p
								./custom/modules/Accounts/Accounts_Hook.php
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								<?php if (!defined('sugarEntry') || !sugarEntry) die('Not A Valid Entry Point'); class Accounts_Hook { function update_contacts($bean, $event, $arguments) { //if relationship is loaded if ($bean->load_relationship('contacts')) { //fetch related beans $relatedContacts = $bean->contacts->getBeans(); foreach ($relatedContacts as $relatedContact) { //perform any other contact logic $relatedContact->save(); } } } }
						Node:
						(type) c
						(layer)2
							Element:p
								The above example will loop through all contacts related to the account and save them. At this point, the save will then trigger our contacts logic hook shown below:
						Node:
						(type) c
						(layer)2
							Element:p
								./custom/modules/Contacts/logic_hooks.php
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								<?php $hook_version = 1; $hook_array = Array(); $hook_array['before_save'] = Array(); $hook_array['before_save'][] = Array( 1, 'Handling associated Accounts records', 'custom/modules/Contacts/Contacts_Hook.php', 'Contacts_Hook', 'update_account' );
						Node:
						(type) c
						(layer)2
							Element:p
								./custom/modules/Contacts/Contacts_Hook.php
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								<?php if (!defined('sugarEntry') || !sugarEntry) die('Not A Valid Entry Point'); class Contacts_Hook { function update_account($bean, $event, $arguments) { //if relationship is loaded if ($bean->load_relationship('accounts')) { //fetch related beans $relatedAccounts = $bean->accounts->getBeans(); $parentAccount = false; if (!empty($relatedAccounts)) { //order the results reset($relatedAccounts); //first record in the list is the parent $parentAccount = current($relatedAccounts); } if ($parentAccount !== false && is_object($parentAccount)) { //perform any other account logic $parentAccount->save(); } } } }
						Node:
						(type) c
						(layer)2
							Element:p
								These two logic hooks will continuously trigger one another in this scenario until you run into a max_execution or memory_limit error. The solution to this problem is to add a a new property on the bean to ignore any unneeded saves. In our example we will name this property "ignore_update_c" and add a check to our logic hook to eliminate the perpetual loop. The following code snippets are copies of the two classes with the ignore_update_c property added.
						Node:
						(type) c
						(layer)2
							Element:p
								./custom/modules/Accounts/Accounts_Hook.php
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								<?php if (!defined('sugarEntry') || !sugarEntry) die('Not A Valid Entry Point'); class Accounts_Hook { function update_contacts($bean, $event, $arguments) { //if relationship is loaded if ($bean->load_relationship('contacts')) { //fetch related beans $relatedContacts = $bean->contacts->getBeans(); foreach ($relatedContacts as $relatedContact) { //check if the bean's ignore_update_c attribute is not set if (!isset($bean->ignore_update_c) || $bean->ignore_update_c === false) { //set the ignore update attribute $relatedContact->ignore_update_c = true; //perform any other contact logic $relatedContact->save(); } } } } }
						Node:
						(type) c
						(layer)2
							Element:p
								./custom/modules/Contacts/Contacts_Hook.php
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								<?php if (!defined('sugarEntry') || !sugarEntry) die('Not A Valid Entry Point'); class Contacts_Hook { function update_account($bean, $event, $arguments) { //if relationship is loaded if ($bean->load_relationship('accounts')) { //fetch related beans $relatedAccounts = $bean->accounts->getBeans(); $parentAccount = false; if (!empty($relatedAccounts)) { //order the results reset($relatedAccounts); //first record in the list is the parent $parentAccount = current($relatedAccounts); } if ($parentAccount !== false && is_object($parentAccount)) { //check if the bean's ignore_update_c element is set if (!isset($bean->ignore_update_c) || $bean->ignore_update_c === false) { //set the ignore update attribute $parentAccount->ignore_update_c = true; //perform any other account logic $parentAccount->save(); } } } } }
						Node:
						(type) c
						(layer)2
							Element:p
								Last modified: 03/31/2016 11:07am
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
														How helpful is this page?
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
														Provide Feedback About This Page
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:footer
													Element:ul
													Element:li
													Element:h4
														CRM Products & Solutions
													Element:li
													Element:a
														Products
													Element:li
													Element:a
														Editions & Pricing
													Element:li
													Element:a
														CRM Solutions
													Element:li
													Element:a
														SugarCRM Mobile
													Element:li
													Element:a
														Store
													Element:li
													Element:a
														SugarExchange
													Element:ul
													Element:li
													Element:h4
														Resources
													Element:li
													Element:a
														CRM Resources
													Element:li
													Element:a
														Case Studies
													Element:li
													Element:a
														Whitepapers
													Element:li
													Element:a
														Webcasts
													Element:li
													Element:a
														Demos
													Element:ul
													Element:li
													Element:h4
														Support & Community
													Element:li
													Element:a
														Support
													Element:li
													Element:a
														Training & Certification
													Element:li
													Element:a
														Partner Directory
													Element:li
													Element:a
														Developers
													Element:li
													Element:a
														Community Forums
													Element:li
													Element:a
														Partner Portal Login
													Element:ul
													Element:li
													Element:h4
														News
													Element:li
													Element:a
														Press Releases
													Element:li
													Element:a
														News
													Element:li
													Element:a
														Events
													Element:li
													Element:a
														Awards
													Element:li
													Element:a
														CRM Blog
													Element:li
													Element:a
														Partner News
													Element:ul
													Element:li
													Element:h4
														About
													Element:li
													Element:a
														Company Overview
													Element:li
													Element:a
														Careers
													Element:li
													Element:a
														Privacy Policy
													Element:li
													Element:a
														Security Policy
													Element:li
													Element:a
														Terms & Conditions
													Element:li
													Element:a
														Environmental Policy
													Element:li
													Element:a
														Impressum
													Element:h4
														Sugar Worldwide:
													Element:a
													Element:span
														Select Region
													Element:ul
													Element:li
													Element:a
														English (Americas)
													Element:li
													Element:a
														English (ANZ)
													Element:li
													Element:a
														English (UK)
													Element:li
													Element:a
														Deutsch (Germany)
													Element:li
													Element:a
														Français (France)
													Element:li
													Element:a
														Español (Europe)
													Element:li
													Element:a
														Español (Latin America)
													Element:li
													Element:a
														Português (Brazil)
													Element:li
													Element:a
														Italian (Italy)
													Element:h4
														Stay Connected:
												Node:
												(type) c
												(layer)4
													Element:a
													Element:span
														Back to top
												Node:
												(type) c
												(layer)4
													Element:a
													Element:span
														Contents
