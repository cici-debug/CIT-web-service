Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					Shortcuts
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Overview
						Node:
						(type) c
						(layer)2
							Element:p
								Shortcuts is a framework to add shortcut keys to the application. When shortcut keys are registered, they are registered to a particular shortcut session. Shortcut sessions group shortcut keys, and they can be activated, deactivated, saved, and restored. Global shortcut keys can be registered, but they are not tied to a particular shortcut session. They are rather applied everywhere in the application and can only be applied once.
						Node:
						(type) c
						(layer)2
							Element:p
								The Shortcut framework is implemented on top of
							Element:a
								Mousetrap library
								.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Shortcut Sessions
						Node:
						(type) c
						(layer)2
							Element:p
								In order to register a shortcut in Sugar, a shortcut session must first be created by adding
							Element:code
								ShortcutSession
								plugin to the top-level layout JavaScript controller.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								plugins: ['ShortcutSession']
						Node:
						(type) c
						(layer)2
							Element:p
								Then, the top-level layout needs to list which shortcuts are allowed in the shortcut session. Shortcuts can be listed in the top-level layout JavaScript controller :
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								./custom/clients/layout/my-layout/my-layout.js
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								shortcuts: [ 'Sidebar:Toggle', 'Record:Save', 'Record:Cancel', 'Record:Action:More' ]
						Node:
						(type) c
						(layer)2
							Element:p
								Shortcuts can also be listed in the metadata :
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								./custom/clients/layout/my-layout/my-layout.php
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								'shortcuts' => array( 'Sidebar:Toggle', 'Record:Save', 'Record:Cancel', 'Record:Action:More' ),
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Register
						Node:
						(type) c
						(layer)2
							Element:p
								Once a shortcut session is created, shortcut keys can be registered by adding the following in your JavaScript code :
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								app.shortcuts.register('<unique shortcut ID>', '<shortcut keys>', <callback function>, <current component>, <call on focus?>);
						Node:
						(type) c
						(layer)2
							Element:p
								Since shortcut keys should only be registered once in your component, they should be registered inside
							Element:code
								initialize()
								or someplace where re-rendering the component would not register more than once.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Shortcut IDs
									Node:
									(type) c
									(layer)3
										Element:p
											Shortcut IDs should be unique across the application. They should be namespaced by convention, for example
										Element:code
											Record:Next
											,
										Element:code
											Sidebar:Toggle
											,
										Element:code
											List:Edit
											. If the namespace starts with
										Element:code
											Global:
											, it assumes that the shortcut is global.
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Global shortcuts
												Node:
												(type) c
												(layer)4
													Element:p
														Global shortcuts are shortcut keys that are applied once and are available everywhere in the application.
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														app.shortcuts.register(app.shortcuts.GLOBAL + 'Footer:Help', '?', function() {}, this, false);
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Shortcut Keys
									Node:
									(type) c
									(layer)3
										Element:p
											There are only certain keys that are supported under the Shortcut framework. The following keyboard keys can be used :
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
											All alphanumeric characters and symbols
										Element:li
											shift, ctrl, alt, option, meta, command
										Element:li
											backspace, tab, enter, return, capslock, esc, escape, space, pageup, pagedown, end, home, ins, del
										Element:li
											left, up, right, down
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Additional Features
												Node:
												(type) c
												(layer)4
													Element:p
														In addition to standard keys, the Shortcut framework also supports some additional features :
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
													Element:strong
														Key combinations
														: 'ctrl+s'
													Element:li
													Element:strong
														Multiple keys
														: ['ctrl+a', 'command+a']
													Element:li
													Element:strong
														Key sequences
														: 'f a'
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Input Focus
									Node:
									(type) c
									(layer)3
										Element:p
											The fifth parameter in the register method specifies whether or not the shortcut key should be fired when the user is focused in an input field. It is false by default.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											app.shortcuts.register('Record:Save', ['ctrl+s','command+s'], function() {}, this, true);
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Limitations
									Node:
									(type) c
									(layer)3
										Element:p
											Shortcut keys do not work on sidepanels, like dashboards and previews.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Shortcuts Help
						Node:
						(type) c
						(layer)2
							Element:p
								Anytime a new shortcut is created, a help text should be provided in ./clients/base/layouts/shortcuts/shortcuts.php with a shortcut ID and a language string.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								'List:Favorite' => 'LBL_SHORTCUT_FAVORITE_RECORD',
						Node:
						(type) c
						(layer)2
							Element:p
								Shortcuts help is displayed when Shortcuts button is clicked.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Advanced Features
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Enable/disable dynamically
									Node:
									(type) c
									(layer)3
										Element:p
											Shortcuts feature can be enabled and disabled dynamically via code by calling app.shortcuts.enable() and app.shortcuts.disable().
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Dynamically saving, creating new, and restoring sessions
									Node:
									(type) c
									(layer)3
										Element:p
											A new shortcut session is created when a user visits a top-level layout with ShortcutSession plugin. A new session can be created dynamically:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											app.shortcuts.createSession(<array of shorcut IDs>, <component>);
									Node:
									(type) c
									(layer)3
										Element:p
											But before creating a new session, the current session should be saved first.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											app.shortcuts.saveSession(); app.shortcuts.createSession(<array of shorcut IDs>, <component>);
									Node:
									(type) c
									(layer)3
										Element:p
											Once a new session is created, shortcut keys can be registered to it. When the need for the session is done, the previous shortcut session can be restored.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											app.shortcuts.restoreSession();
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Example
						Node:
						(type) c
						(layer)2
							Element:p
								The following example will be to add some custom shortcuts onto a custom layout. For more information on how to create a custom layout, please refer to the
							Element:a
								Creating Layouts
								documentation.
						Node:
						(type) c
						(layer)2
							Element:p
								First, on our custom JavaScript controller for our layout, we must enable the
							Element:code
								ShortcutSession
								plugin as well as list the shortcuts we will be enabling :
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								./custom/clients/base/layouts/my-layout/my-layout.js
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								({ plugins: ['ShortcutSession'], shortcuts: [ 'Global:MyLayout:MyCallback', ], })
						Node:
						(type) c
						(layer)2
							Element:p
								Next, on the custom view being rendered on our layout, we will register the new shortcuts as well as define a callback method :
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								./custom/clients/base/views/my-view/my-view.js
						Node:
						(type) c
						(layer)2
							Element:pre
								... initialize: function(options){ this._super('initialize', [options]); // call myCallback method when command + a is pressed app.shortcuts.register(app.shortcuts.GLOBAL + 'MyLayout:MyCallback', 'command+a', this.myCallback, this, false); app.shortcuts.saveSession(); app.shortcuts.createSession([ 'MyLayout:InlineCall' ], this); // call inline code when control + m or command + m is pressed app.shortcuts.register('MyLayout:InlineCall', ['ctrl+m','command+m'], function() { console.log("Ctrl or Command m has been pressed"); }, this, false); }, myCallback: function(){ console.log("MyCallback called from Command a"); }, ...
						Node:
						(type) c
						(layer)2
							Element:p
								The last step will be to create a new label for our shortcut help text and register the help so it displays when "Shortcuts" is click in the footer of the page :
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								./custom/Extension/application/Ext/Language/en_us.LBL_MYLAYOUT_SHORTCUT_HELP.php
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								<?php $app_strings['LBL_MYLAYOUT_MYCALLBACK_HELP'] = "Activates my Callback Method"; $app_strings['LBL_MYLAYOUT_MYINLINECALL_HELP'] = "Activates Inline Code";
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								./custom/Extension/application/Ext/clients/base/layouts/shortcuts/shortcuts.php
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								<?php $viewdefs['base']['layout']['shortcuts']['help']['Global:MyLayout:MyCallback'] = 'LBL_MYLAYOUT_MYCALLBACK_HELP'; $viewdefs['base']['layout']['shortcuts']['help']['MyLayout:InlineCall'] = 'LBL_MYLAYOUT_MYINLINECALL_HELP';
						Node:
						(type) c
						(layer)2
							Element:p
								Navigate to Admin > Repair > Quick Repair and Rebuild. The system will then rebuild the extensions and the shortcuts should be available from the custom layout.
						Node:
						(type) c
						(layer)2
							Element:p
								Last modified: 04/13/2016 10:48pm
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
														How helpful is this page?
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
														Provide Feedback About This Page
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:footer
													Element:ul
													Element:li
													Element:h4
														CRM Products & Solutions
													Element:li
													Element:a
														Products
													Element:li
													Element:a
														Editions & Pricing
													Element:li
													Element:a
														CRM Solutions
													Element:li
													Element:a
														SugarCRM Mobile
													Element:li
													Element:a
														Store
													Element:li
													Element:a
														SugarExchange
													Element:ul
													Element:li
													Element:h4
														Resources
													Element:li
													Element:a
														CRM Resources
													Element:li
													Element:a
														Case Studies
													Element:li
													Element:a
														Whitepapers
													Element:li
													Element:a
														Webcasts
													Element:li
													Element:a
														Demos
													Element:ul
													Element:li
													Element:h4
														Support & Community
													Element:li
													Element:a
														Support
													Element:li
													Element:a
														Training & Certification
													Element:li
													Element:a
														Partner Directory
													Element:li
													Element:a
														Developers
													Element:li
													Element:a
														Community Forums
													Element:li
													Element:a
														Partner Portal Login
													Element:ul
													Element:li
													Element:h4
														News
													Element:li
													Element:a
														Press Releases
													Element:li
													Element:a
														News
													Element:li
													Element:a
														Events
													Element:li
													Element:a
														Awards
													Element:li
													Element:a
														CRM Blog
													Element:li
													Element:a
														Partner News
													Element:ul
													Element:li
													Element:h4
														About
													Element:li
													Element:a
														Company Overview
													Element:li
													Element:a
														Careers
													Element:li
													Element:a
														Privacy Policy
													Element:li
													Element:a
														Security Policy
													Element:li
													Element:a
														Terms & Conditions
													Element:li
													Element:a
														Environmental Policy
													Element:li
													Element:a
														Impressum
													Element:h4
														Sugar Worldwide:
													Element:a
													Element:span
														Select Region
													Element:ul
													Element:li
													Element:a
														English (Americas)
													Element:li
													Element:a
														English (ANZ)
													Element:li
													Element:a
														English (UK)
													Element:li
													Element:a
														Deutsch (Germany)
													Element:li
													Element:a
														Français (France)
													Element:li
													Element:a
														Español (Europe)
													Element:li
													Element:a
														Español (Latin America)
													Element:li
													Element:a
														Português (Brazil)
													Element:li
													Element:a
														Italian (Italy)
													Element:h4
														Stay Connected:
												Node:
												(type) c
												(layer)4
													Element:a
													Element:span
														Back to top
												Node:
												(type) c
												(layer)4
													Element:a
													Element:span
														Contents
