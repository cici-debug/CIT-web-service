Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					Logging
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Overview
						Node:
						(type) c
						(layer)2
							Element:p
						Node:
						(type) c
						(layer)2
							Element:p
								The
							Element:code
								SugarLogger
								class, located in
							Element:code
								./include/SugarLogger/SugarLogger.php
								, allows for developers and system administrators to log system events to a log file. Sugar then determines which events to write to the log based on the system's Log Level, set in Admin > System Settings.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Log Levels
									Node:
									(type) c
									(layer)3
										Element:p
											The logging levels in order of most verbose to least are as follows:
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:strong
											Debug
											: Logs events that help in debugging the application
										Element:li
										Element:strong
											Info
											: Logs informational messages and database queries
										Element:li
										Element:strong
											Warn
											: Logs potentially harmful events
										Element:li
										Element:strong
											Error
											: Logs error events in the application
										Element:li
										Element:strong
											Fatal
											: (Default) Logs severe error events that may cause the application to abort
										Element:li
										Element:strong
											Security
											: Logs events that may compromise the security of the application
										Element:li
										Element:strong
											Off
											: The logger will not log any events
									Node:
									(type) c
									(layer)3
										Element:p
											When you specify a logging level, the system will record messages for the specified level as well as all higher levels. For example, if you specify "Error", the system records all Error, Fatal, and Security messages.
									Node:
									(type) c
									(layer)3
										Element:p
										Element:strong
											Note:
											The verbosity of higher levels of logging can impact the performance of your Sugar instance. We do not recommend leaving the log level any higher than the default Fatal level unless actively troubleshooting an issue.
									Node:
									(type) c
									(layer)3
										Element:p
											When you are not troubleshooting Sugar, the log level should be set to Fatal to ensure that your environment is not wasting unnecessary resources to write to the Sugar log.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Logging Messages
									Node:
									(type) c
									(layer)3
										Element:p
											When developing customizations, you may want to log custom messages to the Sugar log to help administrators identify issues. To go this, you can access the SugarLogger class by using the globally defined variable
										Element:code
											$GLOBALS['log']
											. Examples of the various ways to log a message are shown below:
									Node:
									(type) c
									(layer)3
										Element:p
											Debugging Events
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											$GLOBALS['log']->debug('Debugging message');
									Node:
									(type) c
									(layer)3
										Element:p
											Informational Events
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											$GLOBALS['log']->info('Informational message');
									Node:
									(type) c
									(layer)3
										Element:p
											Warning Events
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											$GLOBALS['log']->warn('Warning message');
									Node:
									(type) c
									(layer)3
										Element:p
											Deprecated Events
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											$GLOBALS['log']->deprecated('Deprecated message');
									Node:
									(type) c
									(layer)3
										Element:p
											Error Events
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											$GLOBALS['log']->error('Error message');
									Node:
									(type) c
									(layer)3
										Element:p
											Fatal Events
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											$GLOBALS['log']->fatal('Fatal message');
									Node:
									(type) c
									(layer)3
										Element:p
											Security Events
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											$GLOBALS['log']->security('Security message');
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Debugging Messages
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														_ppl
												Node:
												(type) c
												(layer)4
													Element:p
														When developing, it may be beneficial for a developer to use
													Element:code
														_ppl()
														to log a message to the Sugar log.
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														_ppl('Debugging message');
												Node:
												(type) c
												(layer)4
													Element:p
														This will write a message to the Sugar log that defines the message and file location. An example is shown below:
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														------------------------------ _ppLogger() output start ----------------------------- Debugging message ------------------------------ _ppLogger() output end ----------------------------- ------------------------------ _ppLogger() file: myFile.php line#: 5-----------------------------
												Node:
												(type) c
												(layer)4
													Element:p
													Element:strong
														Note:
														It is important that you remove
													Element:code
														_ppl()
														from your code for production use as it will affect system performance.
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														setLevel
												Node:
												(type) c
												(layer)4
													Element:p
														You may find that you want to define the log level while testing your code without modifying the configuration. This can be done by using
													Element:code
														$GLOBALS['log']->setLevel()
														. An example of this is shown below:
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														$GLOBALS['log']->setLevel('debug');
												Node:
												(type) c
												(layer)4
													Element:p
													Element:strong
														Note:
														The use of setLevel should be removed from your code for production and it is important to note that it is restricted by package scanner as defined by the
													Element:a
														Module Loader Restrictions
														.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Log Rotation
									Node:
									(type) c
									(layer)3
										Element:p
											The Sugar Logger will automatically rotate the logs when the 'maxSize' setting has been met or exceeded. When this happens, the Sugar log will be renamed with an integer. For example, if the Sugar log was named "sugarcrm.log", it will then be renamed "sugarcrm_1.log". The next log rotation after that would create "sugarcrm_2.log". This will occur until the
										Element:code
											maxLogs
											setting has been met. Once met, the log rollover will start over.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Topics
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:a
								Creating Custom Loggers
							Element:p
								Custom loggers can be used to write log entries to a centralized application management tool, or to write messages to a developer tool such as FirePHP.
						Node:
						(type) c
						(layer)2
							Element:p
								Last modified: 04/07/2016 07:28pm
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
														How helpful is this page?
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
														Provide Feedback About This Page
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:footer
													Element:ul
													Element:li
													Element:h4
														CRM Products & Solutions
													Element:li
													Element:a
														Products
													Element:li
													Element:a
														Editions & Pricing
													Element:li
													Element:a
														CRM Solutions
													Element:li
													Element:a
														SugarCRM Mobile
													Element:li
													Element:a
														Store
													Element:li
													Element:a
														SugarExchange
													Element:ul
													Element:li
													Element:h4
														Resources
													Element:li
													Element:a
														CRM Resources
													Element:li
													Element:a
														Case Studies
													Element:li
													Element:a
														Whitepapers
													Element:li
													Element:a
														Webcasts
													Element:li
													Element:a
														Demos
													Element:ul
													Element:li
													Element:h4
														Support & Community
													Element:li
													Element:a
														Support
													Element:li
													Element:a
														Training & Certification
													Element:li
													Element:a
														Partner Directory
													Element:li
													Element:a
														Developers
													Element:li
													Element:a
														Community Forums
													Element:li
													Element:a
														Partner Portal Login
													Element:ul
													Element:li
													Element:h4
														News
													Element:li
													Element:a
														Press Releases
													Element:li
													Element:a
														News
													Element:li
													Element:a
														Events
													Element:li
													Element:a
														Awards
													Element:li
													Element:a
														CRM Blog
													Element:li
													Element:a
														Partner News
													Element:ul
													Element:li
													Element:h4
														About
													Element:li
													Element:a
														Company Overview
													Element:li
													Element:a
														Careers
													Element:li
													Element:a
														Privacy Policy
													Element:li
													Element:a
														Security Policy
													Element:li
													Element:a
														Terms & Conditions
													Element:li
													Element:a
														Environmental Policy
													Element:li
													Element:a
														Impressum
													Element:h4
														Sugar Worldwide:
													Element:a
													Element:span
														Select Region
													Element:ul
													Element:li
													Element:a
														English (Americas)
													Element:li
													Element:a
														English (ANZ)
													Element:li
													Element:a
														English (UK)
													Element:li
													Element:a
														Deutsch (Germany)
													Element:li
													Element:a
														Français (France)
													Element:li
													Element:a
														Español (Europe)
													Element:li
													Element:a
														Español (Latin America)
													Element:li
													Element:a
														Português (Brazil)
													Element:li
													Element:a
														Italian (Italy)
													Element:h4
														Stay Connected:
												Node:
												(type) c
												(layer)4
													Element:a
													Element:span
														Back to top
												Node:
												(type) c
												(layer)4
													Element:a
													Element:span
														Contents
