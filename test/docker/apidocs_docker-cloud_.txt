Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					Introduction
			Node:
			(type) c
			(layer)1
				Element:p
					Docker Cloud currently offers a
				Element:strong
					HTTP REST API
					and a
				Element:strong
					Websocket Stream API
					which are used by both the
				Element:a
					Web UI
					and the
				Element:a
					CLI
					. This API documentation contains all API operations currently supported in the platform and provides examples of how to execute them using our Command Line Interface (CLI),
				Element:a
					Python SDK
					and
				Element:a
					Go SDK
					.
			Node:
			(type) h1
			(layer)1
				Element:h1
					Authentication
			Node:
			(type) c
			(layer)1
				Element:p
					In order to be able to make requests to the Docker Cloud API, you should first obtain an ApiKey for your account. For this, log into Docker Cloud, click on the menu on the upper right corner of the screen, select
				Element:strong
					Account info
					and then select
				Element:strong
					API keys
					.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								REST API
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
								import
							Element:span
								dockercloud
							Element:span
								dockercloud
							Element:span
								.
							Element:span
								user
							Element:span
								=
							Element:span
								"username"
							Element:span
								dockercloud
							Element:span
								.
							Element:span
								apikey
							Element:span
								=
							Element:span
								"apikey"
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
								import
							Element:span
							Element:span
								"github.com/docker/go-dockercloud/dockercloud"
							Element:span
							Element:span
								dockercloud
							Element:span
								.
							Element:span
								User
							Element:span
							Element:span
								=
							Element:span
							Element:span
								"username"
							Element:span
							Element:span
								dockercloud
							Element:span
								.
							Element:span
								ApiKey
							Element:span
							Element:span
								=
							Element:span
							Element:span
								"apikey"
							Element:span
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
								GET
							Element:span
								/api/app/v1/service/
							Element:span
								HTTP
							Element:span
								/
							Element:span
								1.1
							Element:span
								Host
							Element:span
								:
							Element:span
								cloud.docker.com
							Element:span
								Authorization
							Element:span
								:
							Element:span
								Basic dXNlcm5hbWU6YXBpa2V5
							Element:span
								Accept
							Element:span
								:
							Element:span
								application/json
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
								export
							Element:span
								DOCKERCLOUD_USER
							Element:span
								=
								username
							Element:span
								export
							Element:span
								DOCKERCLOUD_APIKEY
							Element:span
								=
								apikey
						Node:
						(type) c
						(layer)2
							Element:blockquote
							Element:p
								Make sure to replace
							Element:code
								username
								with your username and
							Element:code
								apikey
								with your API key.
						Node:
						(type) c
						(layer)2
							Element:p
								The Docker Cloud REST API is reachable through the following hostname:
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								https://cloud.docker.com/
						Node:
						(type) c
						(layer)2
							Element:p
								All requests should be sent to this endpoint using
							Element:code
								Basic
								authentication using your API key as password:
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								Authorization: Basic dXNlcm5hbWU6YXBpa2V5
						Node:
						(type) c
						(layer)2
							Element:p
								HTTP responses are given in JSON format, so the following
							Element:code
								Accept
								header is required for every API call:
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								Accept: application/json
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Namespaced endpoints
									Node:
									(type) c
									(layer)3
										Element:p
											Endpoints that are labeled as “namespaced” allow the users to operate over different namespaces, for example over an individual user namespace, or the namespace of an organization the user is a member of. A namespace identifies the owner of the resource.
									Node:
									(type) c
									(layer)3
										Element:p
											The namespace is optional. If left blank, it defaults to the authenticated user in the request. The namespace is set before the resource in the URL schema:
										Element:code
											https://cloud.docker.com/api/<subsystem>/<version>/(optional_namespace/)<resource>/
									Node:
									(type) c
									(layer)3
										Element:p
											Examples:
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
											The user
										Element:code
											exampleuser
											wants to operate on the node cluster list endpoint in their own namespace. They can use either of the following urls:
										Element:ul
										Element:li
											https://cloud.docker.com/api/infra/v1/nodecluster/ (namespace omitted, so will use the user authenticated in the request)
										Element:li
											https://cloud.docker.com/api/infra/v1/exampleuser/nodecluster/
										Element:li
											The user wants to operate on the node cluster list endpoint in an organization called
										Element:code
											exampleorg
											(which they have permission to see):
										Element:ul
										Element:li
											https://cloud.docker.com/api/infra/v1/exampleorg/nodecluster/
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Namespaced endpoints in the docker-cloud CLI
									Node:
									(type) c
									(layer)3
										Element:p
											If you are using namespaces with the
										Element:code
											docker-cloud
											CLI, set them by changing the value of the
										Element:code
											DOCKERCLOUD_NAMESPACE
											environment variable. You can either set this globally, or specify it before each CLI command. To learn more, see the
										Element:a
											Docker Cloud CLI README
											.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Stream API
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
								import
							Element:span
								websocket
							Element:span
								import
							Element:span
								base64
							Element:span
								header
							Element:span
								=
							Element:span
								"Authorization: Basic
							Element:span
								%
							Element:span
								s"
							Element:span
								%
							Element:span
								base64
							Element:span
								.
							Element:span
								b64encode
							Element:span
								(
							Element:span
								"
							Element:span
								%
							Element:span
								s:
							Element:span
								%
							Element:span
								s"
							Element:span
								%
							Element:span
								(
							Element:span
								username
							Element:span
								,
							Element:span
								password
							Element:span
								))
							Element:span
								ws
							Element:span
								=
							Element:span
								websocket
							Element:span
								.
							Element:span
								WebSocketApp
							Element:span
								(
							Element:span
								'wss://ws.cloud.docker.com/v1/events'
							Element:span
								,
							Element:span
								header
							Element:span
								=
							Element:span
								[
							Element:span
								header
							Element:span
								])
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
								import
							Element:span
							Element:span
								"github.com/gorilla/websocket"
							Element:span
							Element:span
								import
							Element:span
							Element:span
								"encoding/base64"
							Element:span
							Element:span
								var
							Element:span
							Element:span
								StreamUrl
							Element:span
							Element:span
								=
							Element:span
							Element:span
								"wss://ws.cloud.docker.com:443/v1/events"
							Element:span
							Element:span
								sEnc
							Element:span
							Element:span
								:=
							Element:span
							Element:span
								base64
							Element:span
								.
							Element:span
								StdEncoding
							Element:span
								.
							Element:span
								EncodeToString
							Element:span
								([]
							Element:span
								byte
							Element:span
								(
							Element:span
								User
							Element:span
							Element:span
								+
							Element:span
							Element:span
								":"
							Element:span
							Element:span
								+
							Element:span
							Element:span
								ApiKey
							Element:span
								))
							Element:span
							Element:span
								header
							Element:span
							Element:span
								:=
							Element:span
							Element:span
								http
							Element:span
								.
							Element:span
								Header
							Element:span
								{}
							Element:span
							Element:span
								header
							Element:span
								.
							Element:span
								Add
							Element:span
								(
							Element:span
								"Authorization"
							Element:span
								,
							Element:span
							Element:span
								fmt
							Element:span
								.
							Element:span
								Sprintf
							Element:span
								(
							Element:span
								"Basic %s"
							Element:span
								,
							Element:span
							Element:span
								sEnc
							Element:span
								))
							Element:span
							Element:span
								var
							Element:span
							Element:span
								Dialer
							Element:span
							Element:span
								websocket
							Element:span
								.
							Element:span
								Dialer
							Element:span
							Element:span
								ws
							Element:span
								,
							Element:span
							Element:span
								_
							Element:span
								,
							Element:span
							Element:span
								err
							Element:span
							Element:span
								:=
							Element:span
							Element:span
								Dialer
							Element:span
								.
							Element:span
								Dial
							Element:span
								(
							Element:span
								url
							Element:span
								,
							Element:span
							Element:span
								header
							Element:span
								)
							Element:span
							Element:span
								if
							Element:span
							Element:span
								err
							Element:span
							Element:span
								!=
							Element:span
							Element:span
								nil
							Element:span
							Element:span
								{
							Element:span
							Element:span
								log
							Element:span
								.
							Element:span
								Println
							Element:span
								(
							Element:span
								err
							Element:span
								)
							Element:span
							Element:span
								}
							Element:span
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
								GET
							Element:span
								/api/audit/v1/events
							Element:span
								HTTP
							Element:span
								/
							Element:span
								1.1
							Element:span
								Host
							Element:span
								:
							Element:span
								ws.cloud.docker.com
							Element:span
								Authorization
							Element:span
								:
							Element:span
								Basic dXNlcm5hbWU6YXBpa2V5
							Element:span
								Connection
							Element:span
								:
							Element:span
								Upgrade
							Element:span
								Upgrade
							Element:span
								:
							Element:span
								websocket
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
								export
							Element:span
								DOCKERCLOUD_USER
							Element:span
								=
								username
							Element:span
								export
							Element:span
								DOCKERCLOUD_APIKEY
							Element:span
								=
								apikey
						Node:
						(type) c
						(layer)2
							Element:blockquote
							Element:p
								Make sure to replace
							Element:code
								username
								with your username and
							Element:code
								apikey
								with your API key.
						Node:
						(type) c
						(layer)2
							Element:p
								The Docker Cloud Stream API is reachable through the following hostname:
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								wss://ws.cloud.docker.com/
						Node:
						(type) c
						(layer)2
							Element:p
								The Stream API requires the same authentication mechanism as the REST API:
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								Authorization: Basic dXNlcm5hbWU6YXBpa2V5
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								API roles
						Node:
						(type) c
						(layer)2
							Element:blockquote
							Element:p
								The CLI and the SDKs will detect this environment variable and automatically use it
						Node:
						(type) c
						(layer)2
							Element:p
								If you give an
							Element:a
								API role
								to a container, the environment variable
							Element:code
								DOCKERCLOUD_AUTH
								inside the container will have the contents of the
							Element:code
								Authorization
								header that you can use to authenticate against the REST or Stream APIs:
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								curl -H "Authorization: $DOCKERCLOUD_AUTH" https://cloud.docker.com/api/app/v1/service/
			Node:
			(type) h1
			(layer)1
				Element:h1
					Actions
			Node:
			(type) c
			(layer)1
				Element:h2
					Action
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"action"
				Element:span
					:
				Element:span
				Element:span
					"Cluster Create"
				Element:span
					,
				Element:span
				Element:span
					"end_date"
				Element:span
					:
				Element:span
				Element:span
					"Wed, 17 Sep 2014 08:26:22 +0000"
				Element:span
					,
				Element:span
				Element:span
					"ip"
				Element:span
					:
				Element:span
				Element:span
					"56.78.90.12"
				Element:span
					,
				Element:span
				Element:span
					"is_user_action"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"can_be_canceled"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"location"
				Element:span
					:
				Element:span
				Element:span
					"New York, USA"
				Element:span
					,
				Element:span
				Element:span
					"method"
				Element:span
					:
				Element:span
				Element:span
					"POST"
				Element:span
					,
				Element:span
				Element:span
					"object"
				Element:span
					:
				Element:span
				Element:span
					"/api/infra/v1/user_namespace/cluster/eea638f4-b77a-4183-b241-22dbd7866f22/"
				Element:span
					,
				Element:span
				Element:span
					"path"
				Element:span
					:
				Element:span
				Element:span
					"/api/infra/v1/user_namespace/cluster/"
				Element:span
					,
				Element:span
				Element:span
					"resource_uri"
				Element:span
					:
				Element:span
				Element:span
					"/api/audit/v1/action/6246c558-976c-4df6-ba60-eb1a344a17af/"
				Element:span
					,
				Element:span
				Element:span
					"start_date"
				Element:span
					:
				Element:span
				Element:span
					"Wed, 17 Sep 2014 08:26:22 +0000"
				Element:span
					,
				Element:span
				Element:span
					"state"
				Element:span
					:
				Element:span
				Element:span
					"Success"
				Element:span
					,
				Element:span
				Element:span
					"user"
				Element:span
					:
				Element:span
				Element:span
					"user_namespace"
				Element:span
					,
				Element:span
				Element:span
					"user_agent"
				Element:span
					:
				Element:span
				Element:span
					"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_4) AppleWebKit/537.78.2 (KHTML, like Gecko) Version/7.0.6 Safari/537.78.2"
				Element:span
					,
				Element:span
				Element:span
					"uuid"
				Element:span
					:
				Element:span
				Element:span
					"6246c558-976c-4df6-ba60-eb1a344a17af"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					An action represents an API call by a user. Details of the API call such as timestamp, origin IP address, and user agent are logged in the action object.
			Node:
			(type) c
			(layer)1
				Element:p
					Simple API calls that do not require asynchronous execution will return immediately with the appropiate HTTP error code and an action object will be created either in
				Element:code
					Success
					or
				Element:code
					Failed
					states. API calls that do require asynchronous execution will return HTTP code
				Element:code
					202 Accepted
					immediately and create an action object in
				Element:code
					In progress
					state, which will change to
				Element:code
					Success
					or
				Element:code
					Failed
					state depending on the outcome of the operation being performed. In both cases the response will include a
				Element:code
					X-DockerCloud-Action-URI
					header with the resource URI of the created action.
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
											Attributes
									Node:
									(type) c
									(layer)3
										Element:table
										Element:thead
										Element:tr
										Element:th
											Attribute
										Element:th
											Description
										Element:tbody
										Element:tr
										Element:td
											resource_uri
										Element:td
											A unique API endpoint that represents the action
										Element:tr
										Element:td
											uuid
										Element:td
											A unique identifier for the action generated automatically on creation
										Element:tr
										Element:td
											object
										Element:td
											The API object (resource URI) to which the action applies to
										Element:tr
										Element:td
											action
										Element:td
											Name of the operation performed/being performed
										Element:tr
										Element:td
											method
										Element:td
											HTTP method used to access the API
										Element:tr
										Element:td
											path
										Element:td
											HTTP path of the API accessed
										Element:tr
										Element:td
											user
										Element:td
											The user authenticated in the request that created the action
										Element:tr
										Element:td
											user_agent
										Element:td
											The user agent provided by the client when accessing the API endpoint
										Element:tr
										Element:td
											start_date
										Element:td
											Date and time when the API call was performed and the operation started processing
										Element:tr
										Element:td
											end_date
										Element:td
											Date and time when the API call finished processing
										Element:tr
										Element:td
											state
										Element:td
											State of the operation (see table below)
										Element:tr
										Element:td
											ip
										Element:td
											IP address of the user that performed the API call
										Element:tr
										Element:td
											location
										Element:td
											Geographic location of the IP address of the user that performed the API call
										Element:tr
										Element:td
											is_user_action
										Element:td
											If the action has been triggered by the user
										Element:tr
										Element:td
											can_be_canceled
										Element:td
											If the action can be canceled by the user in the middle of its execution
										Element:tr
										Element:td
											can_be_retried
										Element:td
											If the action can be retried by the user
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
											Action states
									Node:
									(type) c
									(layer)3
										Element:table
										Element:thead
										Element:tr
										Element:th
											State
										Element:th
											Description
										Element:tbody
										Element:tr
										Element:td
											Pending
										Element:td
											The action needed asynchronous execution and it is waiting for an in progress action
										Element:tr
										Element:td
											In progress
										Element:td
											The action needed asynchronous execution and is being performed
										Element:tr
										Element:td
											Canceling
										Element:td
											The action is being canceled by user request
										Element:tr
										Element:td
											Canceled
										Element:td
											The action has been canceled
										Element:tr
										Element:td
											Success
										Element:td
											The action was executed successfully
										Element:tr
										Element:td
											Failed
										Element:td
											There was an issue when the action was being performed. Check the logs for more information.
									Node:
									(type) c
									(layer)3
										Element:h2
											List all actions
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
										Element:span
											import
										Element:span
											dockercloud
										Element:span
											actions
										Element:span
											=
										Element:span
											dockercloud
										Element:span
											.
										Element:span
											Action
										Element:span
											.
										Element:span
											list
										Element:span
											()
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
										Element:span
											import
										Element:span
										Element:span
											"github.com/docker/go-dockercloud/dockercloud"
										Element:span
										Element:span
											actionList
										Element:span
											,
										Element:span
										Element:span
											err
										Element:span
										Element:span
											:=
										Element:span
										Element:span
											dockercloud
										Element:span
											.
										Element:span
											ListActions
										Element:span
											()
										Element:span
										Element:span
											if
										Element:span
										Element:span
											err
										Element:span
										Element:span
											!=
										Element:span
										Element:span
											nil
										Element:span
										Element:span
											{
										Element:span
										Element:span
											log
										Element:span
											.
										Element:span
											Println
										Element:span
											(
										Element:span
											err
										Element:span
											)
										Element:span
										Element:span
											}
										Element:span
										Element:span
											log
										Element:span
											.
										Element:span
											Println
										Element:span
											(
										Element:span
											actionList
										Element:span
											)
										Element:span
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
										Element:span
											GET
										Element:span
											/api/audit/v1/action/
										Element:span
											HTTP
										Element:span
											/
										Element:span
											1.1
										Element:span
											Host
										Element:span
											:
										Element:span
											cloud.docker.com
										Element:span
											Authorization
										Element:span
											:
										Element:span
											Basic dXNlcm5hbWU6YXBpa2V5
										Element:span
											Accept
										Element:span
											:
										Element:span
											application/json
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											docker-cloud action ls
									Node:
									(type) c
									(layer)3
										Element:p
											Lists all actions in chronological order. Returns a list of
										Element:code
											Action
											objects.
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
											Endpoint Type
									Node:
									(type) c
									(layer)3
										Element:p
											Available in Docker Cloud’s
										Element:strong
											REST API
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
											HTTP Request
									Node:
									(type) c
									(layer)3
										Element:p
										Element:code
											GET /api/audit/v1/action/
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
											Query Parameters
									Node:
									(type) c
									(layer)3
										Element:table
										Element:thead
										Element:tr
										Element:th
											Parameter
										Element:th
											Description
										Element:tbody
										Element:tr
										Element:td
											uuid
										Element:td
											Filter by UUID.
										Element:tr
										Element:td
											state
										Element:td
											Filter by state. Possible values:
										Element:code
											In progress
											,
										Element:code
											Success
											,
										Element:code
											Failed
										Element:tr
										Element:td
											start_date
										Element:td
											Filter by start date. Valid filtering values are
										Element:code
											start_date__gte
											(after or on the date supplied) and
										Element:code
											start_date__lte
											(before or on the date supplied)
										Element:tr
										Element:td
											end_date
										Element:td
											Filter by end date. Valid filtering values are
										Element:code
											end_date__gte
											(after or on the date supplied) and
										Element:code
											end_date__lte
											(before or on the date supplied)
										Element:tr
										Element:td
											object
										Element:td
											Filter by resource URI of the related object. This filter can only be combined with ‘include_related’ filter
										Element:tr
										Element:td
											include_related
										Element:td
											There is a parent-child relationship between Docker Cloud objects, described in table
										Element:code
											Relationships between Docker Cloud objects
											. If set to 'true’, will include the actions of the related objects to the object specified in “object” filter parameter. Possible values: 'true’ or 'false’
									Node:
									(type) c
									(layer)3
										Element:h2
											Relationships between Docker Cloud objects
									Node:
									(type) c
									(layer)3
										Element:table
										Element:thead
										Element:tr
										Element:th
											Object
										Element:th
											Relationships
										Element:tbody
										Element:tr
										Element:td
											Container
										Element:td
											Container, service, stack (if any)
										Element:tr
										Element:td
											Service
										Element:td
											All containers in the service, service, stack (if any)
										Element:tr
										Element:td
											Stack
										Element:td
											All services in the stack, all containers in every service in the stack, stack
										Element:tr
										Element:td
											Node
										Element:td
											Node, node cluster (if any)
										Element:tr
										Element:td
											Node cluster
										Element:td
											All nodes in the cluster, node cluster
									Node:
									(type) c
									(layer)3
										Element:h2
											Get an action by UUID
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
										Element:span
											import
										Element:span
											dockercloud
										Element:span
											action
										Element:span
											=
										Element:span
											dockercloud
										Element:span
											.
										Element:span
											Action
										Element:span
											.
										Element:span
											fetch
										Element:span
											(
										Element:span
											"7eaf7fff-882c-4f3d-9a8f-a22317ac00ce"
										Element:span
											)
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
										Element:span
											import
										Element:span
										Element:span
											"github.com/docker/go-dockercloud/dockercloud"
										Element:span
										Element:span
											action
										Element:span
											,
										Element:span
										Element:span
											err
										Element:span
										Element:span
											:=
										Element:span
										Element:span
											dockercloud
										Element:span
											.
										Element:span
											GetAction
										Element:span
											(
										Element:span
											"7eaf7fff-882c-4f3d-9a8f-a22317ac00ce"
										Element:span
											)
										Element:span
										Element:span
											if
										Element:span
										Element:span
											err
										Element:span
										Element:span
											!=
										Element:span
										Element:span
											nil
										Element:span
										Element:span
											{
										Element:span
										Element:span
											log
										Element:span
											.
										Element:span
											Println
										Element:span
											(
										Element:span
											err
										Element:span
											)
										Element:span
										Element:span
											}
										Element:span
										Element:span
											log
										Element:span
											.
										Element:span
											Println
										Element:span
											(
										Element:span
											action
										Element:span
											)
										Element:span
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
										Element:span
											GET
										Element:span
											/api/audit/v1/action/7eaf7fff-882c-4f3d-9a8f-a22317ac00ce/
										Element:span
											HTTP
										Element:span
											/
										Element:span
											1.1
										Element:span
											Host
										Element:span
											:
										Element:span
											cloud.docker.com
										Element:span
											Authorization
										Element:span
											:
										Element:span
											Basic dXNlcm5hbWU6YXBpa2V5
										Element:span
											Accept
										Element:span
											:
										Element:span
											application/json
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											docker-cloud action inspect 7eaf7fff
									Node:
									(type) c
									(layer)3
										Element:p
											Get all the details of an specific action
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
											Endpoint Type
									Node:
									(type) c
									(layer)3
										Element:p
											Available in Docker Cloud’s
										Element:strong
											REST API
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
											HTTP Request
									Node:
									(type) c
									(layer)3
										Element:p
										Element:code
											GET /api/audit/v1/action/(uuid)/
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
											Path Parameters
									Node:
									(type) c
									(layer)3
										Element:table
										Element:thead
										Element:tr
										Element:th
											Parameter
										Element:th
											Description
										Element:tbody
										Element:tr
										Element:td
											uuid
										Element:td
											The UUID of the action to retrieve
									Node:
									(type) c
									(layer)3
										Element:h2
											Get the logs of an action
									Node:
									(type) c
									(layer)3
										Element:blockquote
										Element:p
											Example log line
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
										Element:span
											{
										Element:span
										Element:span
											"type"
										Element:span
											:
										Element:span
										Element:span
											"log"
										Element:span
											,
										Element:span
										Element:span
											"log"
										Element:span
											:
										Element:span
										Element:span
											"Log line from the action"
										Element:span
											,
										Element:span
										Element:span
											"timestamp"
										Element:span
											:
										Element:span
										Element:span
											1433779324
										Element:span
										Element:span
											}
										Element:span
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
										Element:span
											import
										Element:span
											dockercloud
										Element:span
											def
										Element:span
											log_handler
										Element:span
											(
										Element:span
											message
										Element:span
											):
										Element:span
											print
										Element:span
											message
										Element:span
											action
										Element:span
											=
										Element:span
											dockercloud
										Element:span
											.
										Element:span
											Action
										Element:span
											.
										Element:span
											fetch
										Element:span
											(
										Element:span
											"7eaf7fff-882c-4f3d-9a8f-a22317ac00ce"
										Element:span
											)
										Element:span
											action
										Element:span
											.
										Element:span
											logs
										Element:span
											(
										Element:span
											tail
										Element:span
											=
										Element:span
											300
										Element:span
											,
										Element:span
											follow
										Element:span
											=
										Element:span
											True
										Element:span
											,
										Element:span
											log_handler
										Element:span
											=
										Element:span
											log_handler
										Element:span
											)
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
										Element:span
											import
										Element:span
										Element:span
											"github.com/docker/go-dockercloud/dockercloud"
										Element:span
										Element:span
											c
										Element:span
										Element:span
											:=
										Element:span
										Element:span
											make
										Element:span
											(
										Element:span
											chan
										Element:span
										Element:span
											dockercloud
										Element:span
											.
										Element:span
											Logs
										Element:span
											)
										Element:span
										Element:span
											action
										Element:span
											,
										Element:span
										Element:span
											err
										Element:span
										Element:span
											:=
										Element:span
										Element:span
											dockercloud
										Element:span
											.
										Element:span
											GetAction
										Element:span
											(
										Element:span
											"7eaf7fff-882c-4f3d-9a8f-a22317ac00ce"
										Element:span
											)
										Element:span
										Element:span
											if
										Element:span
										Element:span
											err
										Element:span
										Element:span
											!=
										Element:span
										Element:span
											nil
										Element:span
										Element:span
											{
										Element:span
										Element:span
											log
										Element:span
											.
										Element:span
											Println
										Element:span
											(
										Element:span
											err
										Element:span
											)
										Element:span
										Element:span
											}
										Element:span
										Element:span
											go
										Element:span
										Element:span
											action
										Element:span
											.
										Element:span
											GetLogs
										Element:span
											(
										Element:span
											c
										Element:span
											)
										Element:span
										Element:span
											for
										Element:span
										Element:span
											{
										Element:span
										Element:span
											log
										Element:span
											.
										Element:span
											Println
										Element:span
											(
										Element:span
											<-
										Element:span
											c
										Element:span
											)
										Element:span
										Element:span
											}
										Element:span
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
										Element:span
											GET
										Element:span
											/api/audit/v1/action/7eaf7fff-882c-4f3d-9a8f-a22317ac00ce/logs/
										Element:span
											HTTP
										Element:span
											/
										Element:span
											1.1
										Element:span
											Host
										Element:span
											:
										Element:span
											ws.cloud.docker.com
										Element:span
											Authorization
										Element:span
											:
										Element:span
											Basic dXNlcm5hbWU6YXBpa2V5
										Element:span
											Connection
										Element:span
											:
										Element:span
											Upgrade
										Element:span
											Upgrade
										Element:span
											:
										Element:span
											websocket
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											docker-cloud action logs 7eaf7fff-882c-4f3d-9a8f-a22317ac00ce
									Node:
									(type) c
									(layer)3
										Element:p
											Get the logs of the specified action.
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
											Endpoint Type
									Node:
									(type) c
									(layer)3
										Element:p
											Available in Docker Cloud’s
										Element:strong
											STREAM API
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
											HTTP Request
									Node:
									(type) c
									(layer)3
										Element:p
										Element:code
											GET /api/audit/v1/action/(uuid)/logs/
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
											Path Parameters
									Node:
									(type) c
									(layer)3
										Element:table
										Element:thead
										Element:tr
										Element:th
											Parameter
										Element:th
											Description
										Element:tbody
										Element:tr
										Element:td
											uuid
										Element:td
											The UUID of the action to retrieve logs
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
											Query Parameters
									Node:
									(type) c
									(layer)3
										Element:table
										Element:thead
										Element:tr
										Element:th
											Parameter
										Element:th
											Description
										Element:tbody
										Element:tr
										Element:td
											tail
										Element:td
											Number of lines to show from the end of the logs (default:
										Element:code
											300
											)
										Element:tr
										Element:td
											follow
										Element:td
											Whether to stream logs or close the connection immediately (default: true)
									Node:
									(type) c
									(layer)3
										Element:h2
											Cancel an action
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
										Element:span
											POST
										Element:span
											/api/audit/v1/action/7eaf7fff-882c-4f3d-9a8f-a22317ac00ce/cancel/
										Element:span
											HTTP
										Element:span
											/
										Element:span
											1.1
										Element:span
											Host
										Element:span
											:
										Element:span
											cloud.docker.com
										Element:span
											Authorization
										Element:span
											:
										Element:span
											Basic dXNlcm5hbWU6YXBpa2V5
										Element:span
											Accept
										Element:span
											:
										Element:span
											application/json
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
										Element:span
											import
										Element:span
										Element:span
											"github.com/docker/go-dockercloud/dockercloud"
										Element:span
										Element:span
											action
										Element:span
											,
										Element:span
										Element:span
											err
										Element:span
										Element:span
											:=
										Element:span
										Element:span
											dockercloud
										Element:span
											.
										Element:span
											GetAction
										Element:span
											(
										Element:span
											"7eaf7fff-882c-4f3d-9a8f-a22317ac00ce"
										Element:span
											)
										Element:span
										Element:span
											if
										Element:span
										Element:span
											err
										Element:span
										Element:span
											!=
										Element:span
										Element:span
											nil
										Element:span
										Element:span
											{
										Element:span
										Element:span
											log
										Element:span
											.
										Element:span
											Println
										Element:span
											(
										Element:span
											err
										Element:span
											)
										Element:span
										Element:span
											}
										Element:span
										Element:span
											action
										Element:span
											,
										Element:span
										Element:span
											err
										Element:span
										Element:span
											=
										Element:span
										Element:span
											action
										Element:span
											.
										Element:span
											Cancel
										Element:span
											()
										Element:span
										Element:span
											if
										Element:span
										Element:span
											err
										Element:span
										Element:span
											!=
										Element:span
										Element:span
											nil
										Element:span
										Element:span
											{
										Element:span
										Element:span
											log
										Element:span
											.
										Element:span
											Println
										Element:span
											(
										Element:span
											err
										Element:span
											)
										Element:span
										Element:span
											}
										Element:span
										Element:span
											log
										Element:span
											.
										Element:span
											Println
										Element:span
											(
										Element:span
											action
										Element:span
											)
										Element:span
									Node:
									(type) c
									(layer)3
										Element:p
											Cancels an action in Pending or In progress state.
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
											Endpoint Type
									Node:
									(type) c
									(layer)3
										Element:p
											Available in Docker Cloud’s
										Element:strong
											REST API
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
											HTTP Request
									Node:
									(type) c
									(layer)3
										Element:p
										Element:code
											POST /api/audit/v1/action/(uuid)/cancel/
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
											Path Parameters
									Node:
									(type) c
									(layer)3
										Element:table
										Element:thead
										Element:tr
										Element:th
											Parameter
										Element:th
											Description
										Element:tbody
										Element:tr
										Element:td
											uuid
										Element:td
											The UUID of the action to cancel
									Node:
									(type) c
									(layer)3
										Element:h2
											Retry an action
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
										Element:span
											import
										Element:span
											dockercloud
										Element:span
											def
										Element:span
											log_handler
										Element:span
											(
										Element:span
											message
										Element:span
											):
										Element:span
											print
										Element:span
											message
										Element:span
											action
										Element:span
											=
										Element:span
											dockercloud
										Element:span
											.
										Element:span
											Action
										Element:span
											.
										Element:span
											fetch
										Element:span
											(
										Element:span
											"7eaf7fff-882c-4f3d-9a8f-a22317ac00ce"
										Element:span
											)
										Element:span
											action
										Element:span
											.
										Element:span
											logs
										Element:span
											(
										Element:span
											tail
										Element:span
											=
										Element:span
											300
										Element:span
											,
										Element:span
											follow
										Element:span
											=
										Element:span
											True
										Element:span
											,
										Element:span
											log_handler
										Element:span
											=
										Element:span
											log_handler
										Element:span
											)
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
										Element:span
											POST
										Element:span
											/api/audit/v1/action/7eaf7fff-882c-4f3d-9a8f-a22317ac00ce/retry/
										Element:span
											HTTP
										Element:span
											/
										Element:span
											1.1
										Element:span
											Host
										Element:span
											:
										Element:span
											cloud.docker.com
										Element:span
											Authorization
										Element:span
											:
										Element:span
											Basic dXNlcm5hbWU6YXBpa2V5
										Element:span
											Accept
										Element:span
											:
										Element:span
											application/json
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
										Element:span
											import
										Element:span
										Element:span
											"github.com/docker/go-dockercloud/dockercloud"
										Element:span
										Element:span
											action
										Element:span
											,
										Element:span
										Element:span
											err
										Element:span
										Element:span
											:=
										Element:span
										Element:span
											dockercloud
										Element:span
											.
										Element:span
											GetAction
										Element:span
											(
										Element:span
											"7eaf7fff-882c-4f3d-9a8f-a22317ac00ce"
										Element:span
											)
										Element:span
										Element:span
											if
										Element:span
										Element:span
											err
										Element:span
										Element:span
											!=
										Element:span
										Element:span
											nil
										Element:span
										Element:span
											{
										Element:span
										Element:span
											log
										Element:span
											.
										Element:span
											Println
										Element:span
											(
										Element:span
											err
										Element:span
											)
										Element:span
										Element:span
											}
										Element:span
										Element:span
											action
										Element:span
											,
										Element:span
										Element:span
											err
										Element:span
										Element:span
											=
										Element:span
										Element:span
											action
										Element:span
											.
										Element:span
											Retry
										Element:span
											()
										Element:span
										Element:span
											if
										Element:span
										Element:span
											err
										Element:span
										Element:span
											!=
										Element:span
										Element:span
											nil
										Element:span
										Element:span
											{
										Element:span
										Element:span
											log
										Element:span
											.
										Element:span
											Println
										Element:span
											(
										Element:span
											err
										Element:span
											)
										Element:span
										Element:span
											}
										Element:span
										Element:span
											log
										Element:span
											.
										Element:span
											Println
										Element:span
											(
										Element:span
											action
										Element:span
											)
										Element:span
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											docker-cloud action logs 7eaf7fff-882c-4f3d-9a8f-a22317ac00ce
									Node:
									(type) c
									(layer)3
										Element:p
											Retries an action in Success, Failed or Canceled state.
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
											Endpoint Type
									Node:
									(type) c
									(layer)3
										Element:p
											Available in Docker Cloud’s
										Element:strong
											REST API
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
											HTTP Request
									Node:
									(type) c
									(layer)3
										Element:p
										Element:code
											POST /api/audit/v1/action/(uuid)/retry/
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
											Path Parameters
									Node:
									(type) c
									(layer)3
										Element:table
										Element:thead
										Element:tr
										Element:th
											Parameter
										Element:th
											Description
										Element:tbody
										Element:tr
										Element:td
											uuid
										Element:td
											The UUID of the action to retry
			Node:
			(type) h1
			(layer)1
				Element:h1
					Providers
			Node:
			(type) c
			(layer)1
				Element:h2
					Provider
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"available"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"label"
				Element:span
					:
				Element:span
				Element:span
					"Digital Ocean"
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"digitalocean"
				Element:span
					,
				Element:span
				Element:span
					"regions"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					"/api/infra/v1/region/digitalocean/ams1/"
				Element:span
					,
				Element:span
				Element:span
					"/api/infra/v1/region/digitalocean/ams2/"
				Element:span
					,
				Element:span
				Element:span
					"/api/infra/v1/region/digitalocean/ams3/"
				Element:span
					,
				Element:span
				Element:span
					"/api/infra/v1/region/digitalocean/lon1/"
				Element:span
					,
				Element:span
				Element:span
					"/api/infra/v1/region/digitalocean/nyc1/"
				Element:span
					,
				Element:span
				Element:span
					"/api/infra/v1/region/digitalocean/nyc2/"
				Element:span
					,
				Element:span
				Element:span
					"/api/infra/v1/region/digitalocean/nyc3/"
				Element:span
					,
				Element:span
				Element:span
					"/api/infra/v1/region/digitalocean/sfo1/"
				Element:span
					,
				Element:span
				Element:span
					"/api/infra/v1/region/digitalocean/sgp1/"
				Element:span
				Element:span
					],
				Element:span
				Element:span
					"resource_uri"
				Element:span
					:
				Element:span
				Element:span
					"/api/infra/v1/provider/digitalocean/"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					A provider is a representation of a cloud provider supported by Docker Cloud. Providers have one or more regions where nodes are deployed.
			Node:
			(type) c
			(layer)1
				Element:h3
					Attributes
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Attribute
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					resource_uri
				Element:td
					A unique API endpoint that represents the provider
				Element:tr
				Element:td
					name
				Element:td
					A unique identifier for the provider
				Element:tr
				Element:td
					label
				Element:td
					A user-friendly name for the provider
				Element:tr
				Element:td
					regions
				Element:td
					A list of resource URIs of the regions available in this provider
				Element:tr
				Element:td
					available
				Element:td
					Whether the provider is currently available for new node deployments
			Node:
			(type) c
			(layer)1
				Element:h2
					List all providers
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
					dockercloud
				Element:span
					providers
				Element:span
					=
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					Provider
				Element:span
					.
				Element:span
					list
				Element:span
					()
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					GET
				Element:span
					/api/infra/v1/provider/
				Element:span
					HTTP
				Element:span
					/
				Element:span
					1.1
				Element:span
					Host
				Element:span
					:
				Element:span
					cloud.docker.com
				Element:span
					Authorization
				Element:span
					:
				Element:span
					Basic dXNlcm5hbWU6YXBpa2V5
				Element:span
					Accept
				Element:span
					:
				Element:span
					application/json
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
				Element:span
					"github.com/docker/go-dockercloud/dockercloud"
				Element:span
				Element:span
					providerList
				Element:span
					,
				Element:span
				Element:span
					err
				Element:span
				Element:span
					:=
				Element:span
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					ListProviders
				Element:span
					()
				Element:span
				Element:span
					if
				Element:span
				Element:span
					err
				Element:span
				Element:span
					!=
				Element:span
				Element:span
					nil
				Element:span
				Element:span
					{
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Println
				Element:span
					(
				Element:span
					err
				Element:span
					)
				Element:span
				Element:span
					}
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Println
				Element:span
					(
				Element:span
					providerList
				Element:span
					)
				Element:span
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					docker-cloud nodecluster provider
			Node:
			(type) c
			(layer)1
				Element:p
					Lists all supported cloud providers. Returns a list of
				Element:code
					Provider
					objects.
			Node:
			(type) c
			(layer)1
				Element:h3
					Endpoint Type
			Node:
			(type) c
			(layer)1
				Element:p
					Available in Docker Cloud’s
				Element:strong
					REST API
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET /api/infra/v1/provider/
			Node:
			(type) c
			(layer)1
				Element:h3
					Query Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					name
				Element:td
					Filter by provider name
			Node:
			(type) c
			(layer)1
				Element:h2
					Get an individual provider
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
					dockercloud
				Element:span
					provider
				Element:span
					=
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					Provider
				Element:span
					.
				Element:span
					fetch
				Element:span
					(
				Element:span
					"digitalocean"
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
				Element:span
					"github.com/docker/go-dockercloud/dockercloud"
				Element:span
				Element:span
					provider
				Element:span
					,
				Element:span
				Element:span
					err
				Element:span
				Element:span
					:=
				Element:span
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					GetProvider
				Element:span
					(
				Element:span
					"digitalocean"
				Element:span
					)
				Element:span
				Element:span
					if
				Element:span
				Element:span
					err
				Element:span
				Element:span
					!=
				Element:span
				Element:span
					nil
				Element:span
				Element:span
					{
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Println
				Element:span
					(
				Element:span
					err
				Element:span
					)
				Element:span
				Element:span
					}
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Println
				Element:span
					(
				Element:span
					provider
				Element:span
					)
				Element:span
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					GET
				Element:span
					/api/infra/v1/provider/digitalocean/
				Element:span
					HTTP
				Element:span
					/
				Element:span
					1.1
				Element:span
					Host
				Element:span
					:
				Element:span
					cloud.docker.com
				Element:span
					Authorization
				Element:span
					:
				Element:span
					Basic dXNlcm5hbWU6YXBpa2V5
				Element:span
					Accept
				Element:span
					:
				Element:span
					application/json
			Node:
			(type) c
			(layer)1
				Element:p
					Get all the details of a specific provider
			Node:
			(type) c
			(layer)1
				Element:h3
					Endpoint Type
			Node:
			(type) c
			(layer)1
				Element:p
					Available in Docker Cloud’s
				Element:strong
					REST API
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET /api/infra/v1/provider/(name)/
			Node:
			(type) c
			(layer)1
				Element:h3
					Path Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					name
				Element:td
					The name of the provider to retrieve
			Node:
			(type) h1
			(layer)1
				Element:h1
					Regions
			Node:
			(type) c
			(layer)1
				Element:h2
					Region
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"availability_zones"
				Element:span
					:
				Element:span
				Element:span
					[],
				Element:span
				Element:span
					"available"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"label"
				Element:span
					:
				Element:span
				Element:span
					"Amsterdam 2"
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"ams2"
				Element:span
					,
				Element:span
				Element:span
					"node_types"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					"/api/infra/v1/nodetype/digitalocean/1gb/"
				Element:span
					,
				Element:span
				Element:span
					"/api/infra/v1/nodetype/digitalocean/2gb/"
				Element:span
					,
				Element:span
				Element:span
					"/api/infra/v1/nodetype/digitalocean/4gb/"
				Element:span
					,
				Element:span
				Element:span
					"/api/infra/v1/nodetype/digitalocean/8gb/"
				Element:span
					,
				Element:span
				Element:span
					"/api/infra/v1/nodetype/digitalocean/16gb/"
				Element:span
					,
				Element:span
				Element:span
					"/api/infra/v1/nodetype/digitalocean/32gb/"
				Element:span
					,
				Element:span
				Element:span
					"/api/infra/v1/nodetype/digitalocean/48gb/"
				Element:span
					,
				Element:span
				Element:span
					"/api/infra/v1/nodetype/digitalocean/64gb/"
				Element:span
				Element:span
					],
				Element:span
				Element:span
					"provider"
				Element:span
					:
				Element:span
				Element:span
					"/api/infra/v1/provider/digitalocean/"
				Element:span
					,
				Element:span
				Element:span
					"resource_uri"
				Element:span
					:
				Element:span
				Element:span
					"/api/infra/v1/region/digitalocean/ams2/"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					A region is a representation of an entire or a subset of a data center of a cloud provider. It can contain availability zones (depending on the provider) and one or more node types.
			Node:
			(type) c
			(layer)1
				Element:h3
					Attributes
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Attribute
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					resource_uri
				Element:td
					A unique API endpoint that represents the region
				Element:tr
				Element:td
					name
				Element:td
					An identifier for the region
				Element:tr
				Element:td
					label
				Element:td
					A user-friendly name for the region
				Element:tr
				Element:td
					node_types
				Element:td
					A list of resource URIs of the node types available in the region
				Element:tr
				Element:td
					availability_zones
				Element:td
					A list of resource URIs of the availability zones available in the region
				Element:tr
				Element:td
					provider
				Element:td
					The resource URI of the provider of the region
				Element:tr
				Element:td
					available
				Element:td
					Whether the region is currently available for new node deployments
			Node:
			(type) c
			(layer)1
				Element:h2
					List all regions
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
					dockercloud
				Element:span
					regions
				Element:span
					=
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					Region
				Element:span
					.
				Element:span
					list
				Element:span
					()
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					GET
				Element:span
					/api/infra/v1/region/
				Element:span
					HTTP
				Element:span
					/
				Element:span
					1.1
				Element:span
					Host
				Element:span
					:
				Element:span
					cloud.docker.com
				Element:span
					Authorization
				Element:span
					:
				Element:span
					Basic dXNlcm5hbWU6YXBpa2V5
				Element:span
					Accept
				Element:span
					:
				Element:span
					application/json
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
				Element:span
					"github.com/docker/go-dockercloud/dockercloud"
				Element:span
				Element:span
					regionList
				Element:span
					,
				Element:span
				Element:span
					err
				Element:span
				Element:span
					:=
				Element:span
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					ListRegions
				Element:span
					()
				Element:span
				Element:span
					if
				Element:span
				Element:span
					err
				Element:span
				Element:span
					!=
				Element:span
				Element:span
					nil
				Element:span
				Element:span
					{
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Println
				Element:span
					(
				Element:span
					err
				Element:span
					)
				Element:span
				Element:span
					}
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Println
				Element:span
					(
				Element:span
					regionList
				Element:span
					)
				Element:span
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					docker-cloud nodecluster region
			Node:
			(type) c
			(layer)1
				Element:p
					Lists all regions of all supported cloud providers. Returns a list of
				Element:code
					Region
					objects.
			Node:
			(type) c
			(layer)1
				Element:h3
					Endpoint Type
			Node:
			(type) c
			(layer)1
				Element:p
					Available in Docker Cloud’s
				Element:strong
					REST API
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET /api/infra/v1/region/
			Node:
			(type) c
			(layer)1
				Element:h3
					Query Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					name
				Element:td
					Filter by region name
				Element:tr
				Element:td
					provider
				Element:td
					Filter by resource URI of the target provider
			Node:
			(type) c
			(layer)1
				Element:h2
					Get an individual region
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
					dockercloud
				Element:span
					region
				Element:span
					=
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					Region
				Element:span
					.
				Element:span
					fetch
				Element:span
					(
				Element:span
					"digitalocean/lon1"
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
				Element:span
					"github.com/docker/go-dockercloud/dockercloud"
				Element:span
				Element:span
					region
				Element:span
					,
				Element:span
				Element:span
					err
				Element:span
				Element:span
					:=
				Element:span
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					GetRegion
				Element:span
					(
				Element:span
					"digitalocean"
				Element:span
					,
				Element:span
					"lon1"
				Element:span
					)
				Element:span
				Element:span
					if
				Element:span
				Element:span
					err
				Element:span
				Element:span
					!=
				Element:span
				Element:span
					nil
				Element:span
				Element:span
					{
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Println
				Element:span
					(
				Element:span
					err
				Element:span
					)
				Element:span
				Element:span
					}
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Println
				Element:span
					(
				Element:span
					region
				Element:span
					)
				Element:span
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					GET
				Element:span
					/api/infra/v1/region/digitalocean/lon1/
				Element:span
					HTTP
				Element:span
					/
				Element:span
					1.1
				Element:span
					Host
				Element:span
					:
				Element:span
					cloud.docker.com
				Element:span
					Authorization
				Element:span
					:
				Element:span
					Basic dXNlcm5hbWU6YXBpa2V5
				Element:span
					Accept
				Element:span
					:
				Element:span
					application/json
			Node:
			(type) c
			(layer)1
				Element:p
					Get all the details of a specific region
			Node:
			(type) c
			(layer)1
				Element:h3
					Endpoint Type
			Node:
			(type) c
			(layer)1
				Element:p
					Available in Docker Cloud’s
				Element:strong
					REST API
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET /api/infra/v1/region/(provider.name)/(name)/
			Node:
			(type) c
			(layer)1
				Element:h3
					Path Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					name
				Element:td
					The name of the region to retrieve
				Element:tr
				Element:td
					provider.name
				Element:td
					The name of the provider of the region
			Node:
			(type) h1
			(layer)1
				Element:h1
					Availability Zones
			Node:
			(type) c
			(layer)1
				Element:h2
					Availability Zone
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"available"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"ap-northeast-1a"
				Element:span
					,
				Element:span
				Element:span
					"region"
				Element:span
					:
				Element:span
				Element:span
					"/api/infra/v1/region/az/ap-northeast-1/"
				Element:span
					,
				Element:span
				Element:span
					"resource_uri"
				Element:span
					:
				Element:span
				Element:span
					"/api/infra/v1/az/aws/ap-northeast-1/ap-northeast-1a/"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					An Availability Zone is an isolated location inside a region. Providers that support availability zones: AWS
			Node:
			(type) c
			(layer)1
				Element:h3
					Attributes
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Attribute
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					available
				Element:td
					Whether the availability zone is currently available for new node deployments
				Element:tr
				Element:td
					name
				Element:td
					An identifier for the availability zone
				Element:tr
				Element:td
					region
				Element:td
					The resource URI of the region where the availability zone is allocated
				Element:tr
				Element:td
					resource_uri
				Element:td
					A unique API endpoint that represents the zone
			Node:
			(type) c
			(layer)1
				Element:h2
					List all availability zones
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
					dockercloud
				Element:span
					az
				Element:span
					=
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					AZ
				Element:span
					.
				Element:span
					list
				Element:span
					()
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					GET
				Element:span
					/api/infra/v1/az/
				Element:span
					HTTP
				Element:span
					/
				Element:span
					1.1
				Element:span
					Host
				Element:span
					:
				Element:span
					cloud.docker.com
				Element:span
					Authorization
				Element:span
					:
				Element:span
					Basic dXNlcm5hbWU6YXBpa2V5
				Element:span
					Accept
				Element:span
					:
				Element:span
					application/json
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
				Element:span
					"github.com/docker/go-dockercloud/dockercloud"
				Element:span
				Element:span
					az
				Element:span
					,
				Element:span
				Element:span
					err
				Element:span
				Element:span
					:=
				Element:span
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					ListAZ
				Element:span
					()
				Element:span
				Element:span
					if
				Element:span
				Element:span
					err
				Element:span
				Element:span
					!=
				Element:span
				Element:span
					nil
				Element:span
				Element:span
					{
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Println
				Element:span
					(
				Element:span
					err
				Element:span
					)
				Element:span
				Element:span
					}
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Println
				Element:span
					(
				Element:span
					az
				Element:span
					)
				Element:span
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					docker-cloud nodecluster az
			Node:
			(type) c
			(layer)1
				Element:p
					Lists all availability zones from all regions of all supported cloud providers. Returns a list of
				Element:code
					Availability Zone
					objects.
			Node:
			(type) c
			(layer)1
				Element:h3
					Endpoint Type
			Node:
			(type) c
			(layer)1
				Element:p
					Available in Docker Cloud’s
				Element:strong
					REST API
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET /api/infra/v1/az/
			Node:
			(type) c
			(layer)1
				Element:h3
					Query Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					name
				Element:td
					Filter by availability zone name
				Element:tr
				Element:td
					region
				Element:td
					Filter by resource URI of the target region
			Node:
			(type) c
			(layer)1
				Element:h2
					Get an individual availability zone
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
					dockercloud
				Element:span
					az
				Element:span
					=
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					AZ
				Element:span
					.
				Element:span
					fetch
				Element:span
					(
				Element:span
					"aws/sa-east-1/sa-east-1a"
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
				Element:span
					"github.com/docker/go-dockercloud/dockercloud"
				Element:span
				Element:span
					az
				Element:span
					,
				Element:span
				Element:span
					err
				Element:span
				Element:span
					:=
				Element:span
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					GetAZ
				Element:span
					(
				Element:span
					"aws/sa-east-1/sa-east-1a"
				Element:span
					)
				Element:span
				Element:span
					if
				Element:span
				Element:span
					err
				Element:span
				Element:span
					!=
				Element:span
				Element:span
					nil
				Element:span
				Element:span
					{
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Println
				Element:span
					(
				Element:span
					err
				Element:span
					)
				Element:span
				Element:span
					}
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Println
				Element:span
					(
				Element:span
					az
				Element:span
					)
				Element:span
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					GET
				Element:span
					/api/infra/v1/az/aws/sa-east-1/sa-east-1a/
				Element:span
					HTTP
				Element:span
					/
				Element:span
					1.1
				Element:span
					Host
				Element:span
					:
				Element:span
					cloud.docker.com
				Element:span
					Authorization
				Element:span
					:
				Element:span
					Basic dXNlcm5hbWU6YXBpa2V5
				Element:span
					Accept
				Element:span
					:
				Element:span
					application/json
			Node:
			(type) c
			(layer)1
				Element:p
					Get all the details of a specific availability zone
			Node:
			(type) c
			(layer)1
				Element:h3
					Endpoint Type
			Node:
			(type) c
			(layer)1
				Element:p
					Available in Docker Cloud’s
				Element:strong
					REST API
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET /api/infra/v1/az/(provider.name)/(region.name)/(name)/
			Node:
			(type) c
			(layer)1
				Element:h3
					Path Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					name
				Element:td
					The name of the availability zone to retrieve
				Element:tr
				Element:td
					provider
				Element:td
					The name of the provider
				Element:tr
				Element:td
					region
				Element:td
					The name of the region
			Node:
			(type) h1
			(layer)1
				Element:h1
					Node Types
			Node:
			(type) c
			(layer)1
				Element:h2
					Node Type
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"availability_zones"
				Element:span
					:
				Element:span
				Element:span
					[],
				Element:span
				Element:span
					"available"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"label"
				Element:span
					:
				Element:span
				Element:span
					"1GB"
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"1gb"
				Element:span
					,
				Element:span
				Element:span
					"provider"
				Element:span
					:
				Element:span
				Element:span
					"/api/infra/v1/provider/digitalocean/"
				Element:span
					,
				Element:span
				Element:span
					"regions"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					"/api/infra/v1/region/digitalocean/ams1/"
				Element:span
					,
				Element:span
				Element:span
					"/api/infra/v1/region/digitalocean/sfo1/"
				Element:span
					,
				Element:span
				Element:span
					"/api/infra/v1/region/digitalocean/nyc2/"
				Element:span
					,
				Element:span
				Element:span
					"/api/infra/v1/region/digitalocean/ams2/"
				Element:span
					,
				Element:span
				Element:span
					"/api/infra/v1/region/digitalocean/sgp1/"
				Element:span
					,
				Element:span
				Element:span
					"/api/infra/v1/region/digitalocean/lon1/"
				Element:span
					,
				Element:span
				Element:span
					"/api/infra/v1/region/digitalocean/nyc3/"
				Element:span
					,
				Element:span
				Element:span
					"/api/infra/v1/region/digitalocean/nyc1/"
				Element:span
				Element:span
					],
				Element:span
				Element:span
					"resource_uri"
				Element:span
					:
				Element:span
				Element:span
					"/api/infra/v1/nodetype/digitalocean/1gb/"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					A node type is a representation of an instance size supported by a certain cloud provider in a certain region and/or availability zone.
			Node:
			(type) c
			(layer)1
				Element:h3
					Attributes
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Attribute
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					resource_uri
				Element:td
					A unique API endpoint that represents the node type
				Element:tr
				Element:td
					name
				Element:td
					An identifier for the node type
				Element:tr
				Element:td
					label
				Element:td
					A user-friendly name for the node type
				Element:tr
				Element:td
					regions
				Element:td
					A list of resource URIs of the regions to which this node type can be deployed to
				Element:tr
				Element:td
					availability_zones
				Element:td
					A list of resource URIs of the availability zones to which this node type can be deployed to
				Element:tr
				Element:td
					provider
				Element:td
					The resource URI of the provider of the node type
				Element:tr
				Element:td
					available
				Element:td
					Whether the node type is currently available for new node deployments
			Node:
			(type) c
			(layer)1
				Element:h2
					List all node types
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
					dockercloud
				Element:span
					nodetypes
				Element:span
					=
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					NodeType
				Element:span
					.
				Element:span
					list
				Element:span
					()
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
				Element:span
					"github.com/docker/go-dockercloud/dockercloud"
				Element:span
				Element:span
					nodetypeList
				Element:span
					,
				Element:span
				Element:span
					err
				Element:span
				Element:span
					:=
				Element:span
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					ListNodeTypes
				Element:span
					()
				Element:span
				Element:span
					if
				Element:span
				Element:span
					err
				Element:span
				Element:span
					!=
				Element:span
				Element:span
					nil
				Element:span
				Element:span
					{
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Println
				Element:span
					(
				Element:span
					err
				Element:span
					)
				Element:span
				Element:span
					}
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Println
				Element:span
					(
				Element:span
					nodetypeList
				Element:span
					)
				Element:span
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					GET
				Element:span
					/api/infra/v1/nodetype/
				Element:span
					HTTP
				Element:span
					/
				Element:span
					1.1
				Element:span
					Host
				Element:span
					:
				Element:span
					cloud.docker.com
				Element:span
					Authorization
				Element:span
					:
				Element:span
					Basic dXNlcm5hbWU6YXBpa2V5
				Element:span
					Accept
				Element:span
					:
				Element:span
					application/json
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					docker-cloud nodecluster nodetype
			Node:
			(type) c
			(layer)1
				Element:p
					Lists all node types of all supported cloud providers. Returns a list of
				Element:code
					NodeType
					objects.
			Node:
			(type) c
			(layer)1
				Element:h3
					Endpoint Type
			Node:
			(type) c
			(layer)1
				Element:p
					Available in Docker Cloud’s
				Element:strong
					REST API
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET /api/infra/v1/nodetype/
			Node:
			(type) c
			(layer)1
				Element:h3
					Query Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					name
				Element:td
					Filter by node type name
				Element:tr
				Element:td
					regions
				Element:td
					Filter by resource URI of the target regions
				Element:tr
				Element:td
					availability_zones
				Element:td
					Filter by resource URI of the target availability zones
			Node:
			(type) c
			(layer)1
				Element:h2
					Get an individual node type
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
					dockercloud
				Element:span
					nodetype
				Element:span
					=
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					NodeType
				Element:span
					.
				Element:span
					fetch
				Element:span
					(
				Element:span
					"digitalocean/1gb"
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
				Element:span
					"github.com/docker/go-dockercloud/dockercloud"
				Element:span
				Element:span
					nodetype
				Element:span
					,
				Element:span
				Element:span
					err
				Element:span
				Element:span
					:=
				Element:span
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					GetNodeType
				Element:span
					(
				Element:span
					"digitalocean"
				Element:span
					,
				Element:span
					"1gb"
				Element:span
					)
				Element:span
				Element:span
					if
				Element:span
				Element:span
					err
				Element:span
				Element:span
					!=
				Element:span
				Element:span
					nil
				Element:span
				Element:span
					{
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Println
				Element:span
					(
				Element:span
					err
				Element:span
					)
				Element:span
				Element:span
					}
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Println
				Element:span
					(
				Element:span
					nodetype
				Element:span
					)
				Element:span
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					GET
				Element:span
					/api/infra/v1/nodetype/digitalocean/1gb/
				Element:span
					HTTP
				Element:span
					/
				Element:span
					1.1
				Element:span
					Host
				Element:span
					:
				Element:span
					cloud.docker.com
				Element:span
					Authorization
				Element:span
					:
				Element:span
					Basic dXNlcm5hbWU6YXBpa2V5
				Element:span
					Accept
				Element:span
					:
				Element:span
					application/json
			Node:
			(type) c
			(layer)1
				Element:p
					Get all the details of a specific node type
			Node:
			(type) c
			(layer)1
				Element:h3
					Endpoint Type
			Node:
			(type) c
			(layer)1
				Element:p
					Available in Docker Cloud’s
				Element:strong
					REST API
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET /api/infra/v1/nodetype/(provider.name)/(name)/
			Node:
			(type) c
			(layer)1
				Element:h3
					Path Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					name
				Element:td
					The name of the node type to retrieve
				Element:tr
				Element:td
					provider.name
				Element:td
					The name of the provider of the node type
			Node:
			(type) h1
			(layer)1
				Element:h1
					Node Clusters
			Node:
			(type) c
			(layer)1
				Element:h2
					Node Cluster
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"current_num_nodes"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"deployed_datetime"
				Element:span
					:
				Element:span
				Element:span
					"Tue, 16 Sep 2014 17:01:15 +0000"
				Element:span
					,
				Element:span
				Element:span
					"destroyed_datetime"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"disk"
				Element:span
					:
				Element:span
				Element:span
					60
				Element:span
					,
				Element:span
				Element:span
					"nickname"
				Element:span
					:
				Element:span
				Element:span
					"my test cluster"
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"TestCluster"
				Element:span
					,
				Element:span
				Element:span
					"node_type"
				Element:span
					:
				Element:span
				Element:span
					"/api/infra/v1/nodetype/aws/t2.micro/"
				Element:span
					,
				Element:span
				Element:span
					"nodes"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					"/api/infra/v1/user_namespace/node/75d20367-0948-4f10-8ba4-ffb4d16ed3c6/"
				Element:span
				Element:span
					],
				Element:span
				Element:span
					"region"
				Element:span
					:
				Element:span
				Element:span
					"/api/infra/v1/region/aws/us-east-1/"
				Element:span
					,
				Element:span
				Element:span
					"resource_uri"
				Element:span
					:
				Element:span
				Element:span
					"/api/infra/v1/user_namespace/nodecluster/5516df0b-721e-4470-b350-741ff22e63a0/"
				Element:span
					,
				Element:span
				Element:span
					"state"
				Element:span
					:
				Element:span
				Element:span
					"Deployed"
				Element:span
					,
				Element:span
				Element:span
					"tags"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"tag_one"
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"tag-two"
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"tagthree3"
				Element:span
					}
				Element:span
				Element:span
					],
				Element:span
				Element:span
					"target_num_nodes"
				Element:span
					:
				Element:span
				Element:span
					2
				Element:span
					,
				Element:span
				Element:span
					"uuid"
				Element:span
					:
				Element:span
				Element:span
					"5516df0b-721e-4470-b350-741ff22e63a0"
				Element:span
					,
				Element:span
				Element:span
					"provider_options"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"vpc"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"vpc-aa1c70d4"
				Element:span
					,
				Element:span
				Element:span
					"subnets"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
					"subnet-aaa7d94f"
				Element:span
					,
				Element:span
				Element:span
					"subnet-aa15fa64"
				Element:span
					],
				Element:span
				Element:span
					"security_groups"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
					"sg-aa1c70d4"
				Element:span
					]
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"iam"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"instance_profile_name"
				Element:span
					:
				Element:span
				Element:span
					"my_instance_profile"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					A node cluster is a group of nodes that share the same provider, region and/or availability zone, and node type. They are on the same private network.
			Node:
			(type) c
			(layer)1
				Element:p
					This is a
				Element:a
					namespaced endpoint
					.
			Node:
			(type) c
			(layer)1
				Element:h3
					Attributes
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Attribute
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					uuid
				Element:td
					A unique identifier for the node cluster generated automatically on creation
				Element:tr
				Element:td
					resource_uri
				Element:td
					A unique API endpoint that represents the node cluster
				Element:tr
				Element:td
					name
				Element:td
					A user provided name for the node cluster
				Element:tr
				Element:td
					state
				Element:td
					The state of the node cluster. See the below table for a list of possible states.
				Element:tr
				Element:td
					node_type
				Element:td
					The resource URI of the node type used for the node cluster
				Element:tr
				Element:td
					disk
				Element:td
					The size of the disk where images and containers are stored (in GB)
				Element:tr
				Element:td
					nodes
				Element:td
					A list of resource URIs of the
				Element:code
					Node
					objects on the node cluster
				Element:tr
				Element:td
					region
				Element:td
					The resource URI of the
				Element:code
					Region
					object where the node cluster is deployed
				Element:tr
				Element:td
					target_num_nodes
				Element:td
					The desired number of nodes for the node cluster
				Element:tr
				Element:td
					current_num_nodes
				Element:td
					The actual number of nodes in the node cluster. This may differ from
				Element:code
					target_num_nodes
					if the node cluster is being deployed or scaled
				Element:tr
				Element:td
					deployed_datetime
				Element:td
					The date and time when this node cluster was deployed
				Element:tr
				Element:td
					destroyed_datetime
				Element:td
					The date and time when this node cluster was terminated (if applicable)
				Element:tr
				Element:td
					tags
				Element:td
					List of tags to identify the node cluster nodes when deploying services (see
				Element:a
					Tags
					for more information)
				Element:tr
				Element:td
					provider_options
				Element:td
					Provider-specific extra options for the deployment of the node (see
				Element:code
					Provider options
					table below for more information)
				Element:tr
				Element:td
					nickname
				Element:td
					A user-friendly name for the node cluster (
				Element:code
					name
					by default)
			Node:
			(type) c
			(layer)1
				Element:h3
					Node Cluster states
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					State
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					Init
				Element:td
					The node cluster has been created and has no deployed containers yet. Possible actions in this state:
				Element:code
					deploy
					,
				Element:code
					terminate
					.
				Element:tr
				Element:td
					Deploying
				Element:td
					All nodes in the cluster are either deployed or being deployed. No actions allowed in this state.
				Element:tr
				Element:td
					Deployed
				Element:td
					All nodes in the cluster are deployed and provisioned. Possible actions in this state:
				Element:code
					terminate
					.
				Element:tr
				Element:td
					Partly deployed
				Element:td
					One or more nodes of the cluster are deployed and running. Possible actions in this state:
				Element:code
					terminate
					.
				Element:tr
				Element:td
					Scaling
				Element:td
					The cluster is either deploying new nodes or terminating existing ones responding to a scaling request. No actions allowed in this state.
				Element:tr
				Element:td
					Terminating
				Element:td
					All nodes in the cluster are either being terminated or already terminated. No actions allowed in this state.
				Element:tr
				Element:td
					Terminated
				Element:td
					The node cluster and all its nodes have been terminated. No actions allowed in this state.
				Element:tr
				Element:td
					Empty cluster
				Element:td
					There are no nodes deployed in this cluster. Possible actions in this state:
				Element:code
					terminate
					.
			Node:
			(type) c
			(layer)1
				Element:h3
					Provider options
			Node:
			(type) c
			(layer)1
				Element:p
					You can specify the following options when using the Amazon Web Services provider:
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:code
					vpc
					: VPC-related options (optional)
				Element:ul
				Element:li
				Element:code
					id
					: AWS VPC identifier of the target VPC where the nodes of the cluster will be deployed (required)
				Element:li
				Element:code
					subnets
					: a list of target subnet indentifiers inside selected VPC. If you specify more than one subnet, Docker Cloud will balance among all of them following a high-availability schema (optional)
				Element:li
				Element:code
					security_groups
					: the security group that will be applied to every node of the cluster (optional)
				Element:li
				Element:code
					iam
					: IAM-related options (optional)
				Element:ul
				Element:li
				Element:code
					instance_profile_name
					: name of the instance profile (container for instance an IAM role) to attach to every node of the cluster (required)
			Node:
			(type) c
			(layer)1
				Element:h2
					List all node clusters
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
					dockercloud
				Element:span
					nodeclusters
				Element:span
					=
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					NodeCluster
				Element:span
					.
				Element:span
					list
				Element:span
					()
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
				Element:span
					"github.com/docker/go-dockercloud/dockercloud"
				Element:span
				Element:span
					nodeclusters
				Element:span
					,
				Element:span
				Element:span
					err
				Element:span
				Element:span
					:=
				Element:span
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					ListNodeClusters
				Element:span
					()
				Element:span
				Element:span
					if
				Element:span
				Element:span
					err
				Element:span
				Element:span
					!=
				Element:span
				Element:span
					nil
				Element:span
				Element:span
					{
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Println
				Element:span
					(
				Element:span
					err
				Element:span
					)
				Element:span
				Element:span
					}
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Println
				Element:span
					(
				Element:span
					nodeclusters
				Element:span
					)
				Element:span
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					GET
				Element:span
					/api/infra/v1/nodecluster/
				Element:span
					HTTP
				Element:span
					/
				Element:span
					1.1
				Element:span
					Host
				Element:span
					:
				Element:span
					cloud.docker.com
				Element:span
					Authorization
				Element:span
					:
				Element:span
					Basic dXNlcm5hbWU6YXBpa2V5
				Element:span
					Accept
				Element:span
					:
				Element:span
					application/json
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					docker-cloud nodecluster ls
			Node:
			(type) c
			(layer)1
				Element:p
					Lists all current and recently terminated node clusters. Returns a list of
				Element:code
					NodeCluster
					objects.
			Node:
			(type) c
			(layer)1
				Element:h3
					Endpoint Type
			Node:
			(type) c
			(layer)1
				Element:p
					Available in Docker Cloud’s
				Element:strong
					REST API
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET /api/infra/v1/[optional_namespace/]nodecluster/
			Node:
			(type) c
			(layer)1
				Element:h3
					Query Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					uuid
				Element:td
					Filter by UUID
				Element:tr
				Element:td
					state
				Element:td
					Filter by state. Possible values:
				Element:code
					Init
					,
				Element:code
					Deploying
					,
				Element:code
					Deployed
					,
				Element:code
					Partly deployed
					,
				Element:code
					Scaling
					,
				Element:code
					Terminating
					,
				Element:code
					Terminated
					,
				Element:code
					Empty cluster
				Element:tr
				Element:td
					name
				Element:td
					Filter by node cluster name
				Element:tr
				Element:td
					region
				Element:td
					Filter by resource URI of the target region
				Element:tr
				Element:td
					node_type
				Element:td
					Filter by resource URI of the target node type
			Node:
			(type) c
			(layer)1
				Element:h2
					Create a new node cluster
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
					dockercloud
				Element:span
					region
				Element:span
					=
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					Region
				Element:span
					.
				Element:span
					fetch
				Element:span
					(
				Element:span
					"digitalocean/lon1"
				Element:span
					)
				Element:span
					node_type
				Element:span
					=
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					NodeType
				Element:span
					.
				Element:span
					fetch
				Element:span
					(
				Element:span
					"digitalocean/1gb"
				Element:span
					)
				Element:span
					nodecluster
				Element:span
					=
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					NodeCluster
				Element:span
					.
				Element:span
					create
				Element:span
					(
				Element:span
					name
				Element:span
					=
				Element:span
					"my_cluster"
				Element:span
					,
				Element:span
					node_type
				Element:span
					=
				Element:span
					node_type
				Element:span
					,
				Element:span
					region
				Element:span
					=
				Element:span
					region
				Element:span
					,
				Element:span
					disk
				Element:span
					=
				Element:span
					60
				Element:span
					)
				Element:span
					nodecluster
				Element:span
					.
				Element:span
					save
				Element:span
					()
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
				Element:span
					"github.com/docker/go-dockercloud/dockercloud"
				Element:span
				Element:span
					nodecluster
				Element:span
					,
				Element:span
				Element:span
					err
				Element:span
				Element:span
					:=
				Element:span
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					CreateNodeCluster
				Element:span
					(
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					NodeCreateRequest
				Element:span
					{
				Element:span
					Name
				Element:span
					:
				Element:span
				Element:span
					"my_cluster"
				Element:span
					,
				Element:span
				Element:span
					Region
				Element:span
					:
				Element:span
				Element:span
					"/api/infra/v1/region/digitalocean/lon1/"
				Element:span
					,
				Element:span
				Element:span
					NodeType
				Element:span
					:
				Element:span
				Element:span
					"/api/infra/v1/nodetype/digitalocean/1gb/"
				Element:span
					,
				Element:span
				Element:span
					Target_num_nodes
				Element:span
					:
				Element:span
				Element:span
					2
				Element:span
					})
				Element:span
				Element:span
					if
				Element:span
				Element:span
					err
				Element:span
				Element:span
					!=
				Element:span
				Element:span
					nil
				Element:span
				Element:span
					{
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Println
				Element:span
					(
				Element:span
					err
				Element:span
					)
				Element:span
				Element:span
					}
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Println
				Element:span
					(
				Element:span
					nodecluster
				Element:span
					)
				Element:span
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					POST
				Element:span
					/api/infra/v1/nodecluster/
				Element:span
					HTTP
				Element:span
					/
				Element:span
					1.1
				Element:span
					Host
				Element:span
					:
				Element:span
					cloud.docker.com
				Element:span
					Authorization
				Element:span
					:
				Element:span
					Basic dXNlcm5hbWU6YXBpa2V5
				Element:span
					Accept
				Element:span
					:
				Element:span
					application/json
				Element:span
					Content-Type
				Element:span
					:
				Element:span
					application/json
				Element:span
					{
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"my_cluster"
				Element:span
					,
				Element:span
				Element:span
					"region"
				Element:span
					:
				Element:span
				Element:span
					"/api/infra/v1/region/digitalocean/lon1/"
				Element:span
					,
				Element:span
				Element:span
					"node_type"
				Element:span
					:
				Element:span
				Element:span
					"/api/infra/v1/nodetype/digitalocean/1gb/"
				Element:span
					,
				Element:span
				Element:span
					"disk"
				Element:span
					:
				Element:span
				Element:span
					60
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					docker-cloud nodecluster create my_cluster digitalocean lon1 1gb
			Node:
			(type) c
			(layer)1
				Element:p
					Creates a new node cluster without deploying it.
			Node:
			(type) c
			(layer)1
				Element:h3
					Endpoint Type
			Node:
			(type) c
			(layer)1
				Element:p
					Available in Docker Cloud’s
				Element:strong
					REST API
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					POST /api/infra/v1/[optional_namespace/]nodecluster/
			Node:
			(type) c
			(layer)1
				Element:h3
					JSON Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					name
				Element:td
					(required) A user provided name for the node cluster
				Element:tr
				Element:td
					node_type
				Element:td
					(required) The resource URI of the node type to be used for the node cluster
				Element:tr
				Element:td
					region
				Element:td
					(required) The resource URI of the region where the node cluster is to be deployed
				Element:tr
				Element:td
					disk
				Element:td
					(optional) The size of the volume to create where images and containers will be stored, in GB (default:
				Element:code
					60
					). Not available for Digital Ocean. To create Softlayer nodes you must select one of the following sizes (in GBs): 10, 20, 25, 30, 40, 50, 75, 100, 125, 150, 175, 200, 250, 300, 350, 400, 500, 750, 1000, 1500 or 2000
				Element:tr
				Element:td
					nickname
				Element:td
					(optional) A user-friendly name for the node cluster (
				Element:code
					name
					by default)
				Element:tr
				Element:td
					target_num_nodes
				Element:td
					(optional) The desired number of nodes for the node cluster (default:
				Element:code
					1
					)
				Element:tr
				Element:td
					tags
				Element:td
					(optional) List of tags of the node cluster to be used when deploying services see
				Element:a
					Tags
					for more information) (default:
				Element:code
					[]
					)
				Element:tr
				Element:td
					provider_options
				Element:td
					Provider-specific extra options for the deployment of the node (see table
				Element:code
					Provider options
					above for more information)
			Node:
			(type) c
			(layer)1
				Element:h2
					Get an existing node cluster
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
					dockercloud
				Element:span
					service
				Element:span
					=
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					NodeCluster
				Element:span
					.
				Element:span
					fetch
				Element:span
					(
				Element:span
					"7eaf7fff-882c-4f3d-9a8f-a22317ac00ce"
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
				Element:span
					"github.com/docker/go-dockercloud/dockercloud"
				Element:span
				Element:span
					nodecluster
				Element:span
					,
				Element:span
				Element:span
					err
				Element:span
				Element:span
					:=
				Element:span
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					GetNodeCluster
				Element:span
					(
				Element:span
					"7eaf7fff-882c-4f3d-9a8f-a22317ac00ce"
				Element:span
					)
				Element:span
				Element:span
					if
				Element:span
				Element:span
					err
				Element:span
				Element:span
					!=
				Element:span
				Element:span
					nil
				Element:span
				Element:span
					{
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Println
				Element:span
					(
				Element:span
					err
				Element:span
					)
				Element:span
				Element:span
					}
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Println
				Element:span
					(
				Element:span
					nodecluster
				Element:span
					)
				Element:span
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					GET
				Element:span
					/api/infra/v1/nodecluster/7eaf7fff-882c-4f3d-9a8f-a22317ac00ce/
				Element:span
					HTTP
				Element:span
					/
				Element:span
					1.1
				Element:span
					Host
				Element:span
					:
				Element:span
					cloud.docker.com
				Element:span
					Authorization
				Element:span
					:
				Element:span
					Basic dXNlcm5hbWU6YXBpa2V5
				Element:span
					Accept
				Element:span
					:
				Element:span
					application/json
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					docker-cloud nodecluster inspect 7eaf7fff
			Node:
			(type) c
			(layer)1
				Element:p
					Get all the details of an specific node cluster
			Node:
			(type) c
			(layer)1
				Element:h3
					Endpoint Type
			Node:
			(type) c
			(layer)1
				Element:p
					Available in Docker Cloud’s
				Element:strong
					REST API
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET /api/infra/v1/[optional_namespace/]nodecluster/(uuid)/
			Node:
			(type) c
			(layer)1
				Element:h3
					Path Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					uuid
				Element:td
					The UUID of the node cluster to retrieve
			Node:
			(type) c
			(layer)1
				Element:h2
					Deploy a node cluster
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
					dockercloud
				Element:span
					nodecluster
				Element:span
					=
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					NodeCluster
				Element:span
					.
				Element:span
					fetch
				Element:span
					(
				Element:span
					"7eaf7fff-882c-4f3d-9a8f-a22317ac00ce"
				Element:span
					)
				Element:span
					nodecluster
				Element:span
					.
				Element:span
					deploy
				Element:span
					()
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
				Element:span
					"github.com/docker/go-dockercloud/dockercloud"
				Element:span
				Element:span
					nodecluster
				Element:span
					,
				Element:span
				Element:span
					err
				Element:span
				Element:span
					:=
				Element:span
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					GetNodeCluster
				Element:span
					(
				Element:span
					"7eaf7fff-882c-4f3d-9a8f-a22317ac00ce"
				Element:span
					)
				Element:span
				Element:span
					if
				Element:span
				Element:span
					err
				Element:span
				Element:span
					!=
				Element:span
				Element:span
					nil
				Element:span
				Element:span
					{
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Println
				Element:span
					(
				Element:span
					err
				Element:span
					)
				Element:span
				Element:span
					}
				Element:span
				Element:span
					if
				Element:span
				Element:span
					err
				Element:span
				Element:span
					=
				Element:span
				Element:span
					nodecluster
				Element:span
					.
				Element:span
					Deploy
				Element:span
					();
				Element:span
				Element:span
					err
				Element:span
				Element:span
					!=
				Element:span
				Element:span
					nil
				Element:span
				Element:span
					{
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Println
				Element:span
					(
				Element:span
					err
				Element:span
					)
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					POST
				Element:span
					/api/infra/v1/nodecluster/7eaf7fff-882c-4f3d-9a8f-a22317ac00ce/deploy/
				Element:span
					HTTP
				Element:span
					/
				Element:span
					1.1
				Element:span
					Host
				Element:span
					:
				Element:span
					cloud.docker.com
				Element:span
					Authorization
				Element:span
					:
				Element:span
					Basic dXNlcm5hbWU6YXBpa2V5
				Element:span
					Accept
				Element:span
					:
				Element:span
					application/json
			Node:
			(type) c
			(layer)1
				Element:p
					Deploys and provisions a recently created node cluster in the specified region and cloud provider.
			Node:
			(type) c
			(layer)1
				Element:h3
					Endpoint Type
			Node:
			(type) c
			(layer)1
				Element:p
					Available in Docker Cloud’s
				Element:strong
					REST API
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					POST /api/infra/v1/[optional_namespace/]nodecluster/(uuid)/deploy/
			Node:
			(type) c
			(layer)1
				Element:h3
					Path Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					uuid
				Element:td
					The UUID of the node cluster to deploy
			Node:
			(type) c
			(layer)1
				Element:h2
					Update an existing node cluster
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
					dockercloud
				Element:span
					nodecluster
				Element:span
					=
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					NodeCluster
				Element:span
					.
				Element:span
					fetch
				Element:span
					(
				Element:span
					"7eaf7fff-882c-4f3d-9a8f-a22317ac00ce"
				Element:span
					)
				Element:span
					nodecluster
				Element:span
					.
				Element:span
					target_num_nodes
				Element:span
					=
				Element:span
					3
				Element:span
					nodecluster
				Element:span
					.
				Element:span
					tags
				Element:span
					.
				Element:span
					add
				Element:span
					(
				Element:span
					"tag-1"
				Element:span
					)
				Element:span
					nodecluster
				Element:span
					.
				Element:span
					save
				Element:span
					()
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
				Element:span
					"github.com/docker/go-dockercloud/dockercloud"
				Element:span
				Element:span
					nodecluster
				Element:span
					,
				Element:span
				Element:span
					err
				Element:span
				Element:span
					:=
				Element:span
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					GetNodeCluster
				Element:span
					(
				Element:span
					"7eaf7fff-882c-4f3d-9a8f-a22317ac00ce"
				Element:span
					)
				Element:span
				Element:span
					if
				Element:span
				Element:span
					err
				Element:span
				Element:span
					!=
				Element:span
				Element:span
					nil
				Element:span
				Element:span
					{
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Println
				Element:span
					(
				Element:span
					err
				Element:span
					)
				Element:span
				Element:span
					}
				Element:span
				Element:span
					if
				Element:span
				Element:span
					err
				Element:span
				Element:span
					=
				Element:span
				Element:span
					nodecluster
				Element:span
					.
				Element:span
					Update
				Element:span
					(
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					NodeCreateRequest
				Element:span
					{
				Element:span
					Target_num_nodes
				Element:span
					:
				Element:span
				Element:span
					4
				Element:span
					});
				Element:span
				Element:span
					err
				Element:span
				Element:span
					!=
				Element:span
				Element:span
					nil
				Element:span
				Element:span
					{
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Println
				Element:span
					(
				Element:span
					err
				Element:span
					)
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					PATCH
				Element:span
					/api/infra/v1/nodecluster/7eaf7fff-882c-4f3d-9a8f-a22317ac00ce/
				Element:span
					HTTP
				Element:span
					/
				Element:span
					1.1
				Element:span
					Host
				Element:span
					:
				Element:span
					cloud.docker.com
				Element:span
					Authorization
				Element:span
					:
				Element:span
					Basic dXNlcm5hbWU6YXBpa2V5
				Element:span
					Accept
				Element:span
					:
				Element:span
					application/json
				Element:span
					Content-Type
				Element:span
					:
				Element:span
					application/json
				Element:span
					{
				Element:span
					"target_num_nodes"
				Element:span
					:
				Element:span
				Element:span
					3
				Element:span
					,
				Element:span
				Element:span
					"tags"
				Element:span
					:
				Element:span
				Element:span
					[{
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"tag-1"
				Element:span
					}]}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					docker-cloud nodecluster scale 7eaf7fff 3 docker-cloud tag add -t tag-1 7eaf7fff docker-cloud tag
				Element:span
					set
					-t tag-2 7eaf7fff
			Node:
			(type) c
			(layer)1
				Element:p
					Updates the node cluster details and applies the changes automatically.
			Node:
			(type) c
			(layer)1
				Element:h3
					Endpoint Type
			Node:
			(type) c
			(layer)1
				Element:p
					Available in Docker Cloud’s
				Element:strong
					REST API
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					PATCH /api/infra/v1/[optional_namespace/]nodecluster/(uuid)/
			Node:
			(type) c
			(layer)1
				Element:h3
					Path Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					uuid
				Element:td
					The UUID of the node cluster to update
			Node:
			(type) c
			(layer)1
				Element:h3
					JSON Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					target_num_nodes
				Element:td
					(optional) The number of nodes to scale this node cluster to
				Element:tr
				Element:td
					tags
				Element:td
					(optional) List of tags the node cluster (and nodes within the node cluster) will have. This operation replaces the user tag list.
			Node:
			(type) c
			(layer)1
				Element:h2
					Terminate a node cluster
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
					dockercloud
				Element:span
					nodecluster
				Element:span
					=
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					NodeCluster
				Element:span
					.
				Element:span
					fetch
				Element:span
					(
				Element:span
					"7eaf7fff-882c-4f3d-9a8f-a22317ac00ce"
				Element:span
					)
				Element:span
					nodecluster
				Element:span
					.
				Element:span
					delete
				Element:span
					()
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
				Element:span
					"github.com/docker/go-dockercloud/dockercloud"
				Element:span
				Element:span
					nodecluster
				Element:span
					,
				Element:span
				Element:span
					err
				Element:span
				Element:span
					:=
				Element:span
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					GetNodeCluster
				Element:span
					(
				Element:span
					"7eaf7fff-882c-4f3d-9a8f-a22317ac00ce"
				Element:span
					)
				Element:span
				Element:span
					if
				Element:span
				Element:span
					err
				Element:span
				Element:span
					!=
				Element:span
				Element:span
					nil
				Element:span
				Element:span
					{
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Println
				Element:span
					(
				Element:span
					err
				Element:span
					)
				Element:span
				Element:span
					}
				Element:span
				Element:span
					if
				Element:span
				Element:span
					err
				Element:span
				Element:span
					=
				Element:span
				Element:span
					nodecluster
				Element:span
					.
				Element:span
					Terminate
				Element:span
					();
				Element:span
				Element:span
					err
				Element:span
				Element:span
					!=
				Element:span
				Element:span
					nil
				Element:span
				Element:span
					{
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Println
				Element:span
					(
				Element:span
					err
				Element:span
					)
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					DELETE
				Element:span
					/api/infra/v1/nodecluster/7eaf7fff-882c-4f3d-9a8f-a22317ac00ce/
				Element:span
					HTTP
				Element:span
					/
				Element:span
					1.1
				Element:span
					Host
				Element:span
					:
				Element:span
					cloud.docker.com
				Element:span
					Authorization
				Element:span
					:
				Element:span
					Basic dXNlcm5hbWU6YXBpa2V5
				Element:span
					Accept
				Element:span
					:
				Element:span
					application/json
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					dockercloud nodecluster rm 7eaf7fff
			Node:
			(type) c
			(layer)1
				Element:p
					Terminates all the nodes in a node cluster and the node cluster itself. This is not reversible.
			Node:
			(type) c
			(layer)1
				Element:h3
					Endpoint Type
			Node:
			(type) c
			(layer)1
				Element:p
					Available in Docker Cloud’s
				Element:strong
					REST API
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					DELETE /api/infra/v1/[optional_namespace/]nodecluster/(uuid)/
			Node:
			(type) c
			(layer)1
				Element:h3
					Path Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					uuid
				Element:td
					The UUID of the node cluster to terminate
			Node:
			(type) h1
			(layer)1
				Element:h1
					Nodes
			Node:
			(type) c
			(layer)1
				Element:h2
					Node
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"availability_zone"
				Element:span
					:
				Element:span
				Element:span
					"/api/infra/v1/az/testing-provider/testing-region/testing-az/"
				Element:span
					,
				Element:span
				Element:span
					"cpu"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"current_num_containers"
				Element:span
					:
				Element:span
				Element:span
					4
				Element:span
					,
				Element:span
				Element:span
					"deployed_datetime"
				Element:span
					:
				Element:span
				Element:span
					"Tue, 16 Sep 2014 17:01:15 +0000"
				Element:span
					,
				Element:span
				Element:span
					"destroyed_datetime"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"disk"
				Element:span
					:
				Element:span
				Element:span
					60
				Element:span
					,
				Element:span
				Element:span
					"docker_execdriver"
				Element:span
					:
				Element:span
				Element:span
					"native-0.2"
				Element:span
					,
				Element:span
				Element:span
					"docker_graphdriver"
				Element:span
					:
				Element:span
				Element:span
					"aufs"
				Element:span
					,
				Element:span
				Element:span
					"docker_version"
				Element:span
					:
				Element:span
				Element:span
					"1.5.0"
				Element:span
					,
				Element:span
				Element:span
					"external_fqdn"
				Element:span
					:
				Element:span
				Element:span
					"fc1a5bb9-user.node.dockerapp.io"
				Element:span
					,
				Element:span
				Element:span
					"last_seen"
				Element:span
					:
				Element:span
				Element:span
					"Thu, 25 Sep 2014 13:14:44 +0000"
				Element:span
					,
				Element:span
				Element:span
					"memory"
				Element:span
					:
				Element:span
				Element:span
					1792
				Element:span
					,
				Element:span
				Element:span
					"nickname"
				Element:span
					:
				Element:span
				Element:span
					"fc1a5bb9-user.node.dockerapp.io"
				Element:span
					,
				Element:span
				Element:span
					"node_cluster"
				Element:span
					:
				Element:span
				Element:span
					"/api/infra/v1/user_namespace/nodecluster/d787a4b7-d525-4061-97a0-f423e8f1d229/"
				Element:span
					,
				Element:span
				Element:span
					"node_type"
				Element:span
					:
				Element:span
				Element:span
					"/api/infra/v1/user_namespace/nodetype/testing-provider/testing-type/"
				Element:span
					,
				Element:span
				Element:span
					"public_ip"
				Element:span
					:
				Element:span
				Element:span
					"10.45.2.11"
				Element:span
					,
				Element:span
				Element:span
					"region"
				Element:span
					:
				Element:span
				Element:span
					"/api/infra/v1/region/testing-provider/testing-region/"
				Element:span
					,
				Element:span
				Element:span
					"resource_uri"
				Element:span
					:
				Element:span
				Element:span
					"/api/infra/v1/user_namespace/node/fc1a5bb9-17f5-4819-b667-8c7cd819e949/"
				Element:span
					,
				Element:span
				Element:span
					"state"
				Element:span
					:
				Element:span
				Element:span
					"Deployed"
				Element:span
					,
				Element:span
				Element:span
					"tags"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"tag_one"
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"tag-two"
				Element:span
					}
				Element:span
				Element:span
					],
				Element:span
				Element:span
					"tunnel"
				Element:span
					:
				Element:span
				Element:span
					"https://tunnel01.cloud.docker.com:12345"
				Element:span
					,
				Element:span
				Element:span
					"uuid"
				Element:span
					:
				Element:span
				Element:span
					"fc1a5bb9-17f5-4819-b667-8c7cd819e949"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					A node is a virtual machine provided by a cloud provider where containers can be deployed.
			Node:
			(type) c
			(layer)1
				Element:p
					This is a
				Element:a
					namespaced endpoint
					.
			Node:
			(type) c
			(layer)1
				Element:h3
					Attributes
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Attribute
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					availability_zone
				Element:td
					The resource URI of the availability zone where the node is deployed, if any
				Element:tr
				Element:td
					uuid
				Element:td
					A unique identifier for the node generated automatically on creation
				Element:tr
				Element:td
					resource_uri
				Element:td
					A unique API endpoint that represents the node
				Element:tr
				Element:td
					external_fqdn
				Element:td
					An automatically generated FQDN for the node. Containers deployed on this node will inherit this FQDN.
				Element:tr
				Element:td
					state
				Element:td
					The state of the node. See the below table for a list of possible states.
				Element:tr
				Element:td
					node_cluster
				Element:td
					The resource URI of the node cluster to which this node belongs to (if applicable)
				Element:tr
				Element:td
					node_type
				Element:td
					The resource URI of the node type used for the node
				Element:tr
				Element:td
					region
				Element:td
					The resource URI of the region where the node is deployed
				Element:tr
				Element:td
					docker_execdriver
				Element:td
					Docker’s execution driver used in the node
				Element:tr
				Element:td
					docker_graphdriver
				Element:td
					Docker’s storage driver used in the node
				Element:tr
				Element:td
					docker_version
				Element:td
					Docker’s version used in the node
				Element:tr
				Element:td
					cpu
				Element:td
					Node number of CPUs
				Element:tr
				Element:td
					disk
				Element:td
					Node storage size in GB
				Element:tr
				Element:td
					memory
				Element:td
					Node memory in MB
				Element:tr
				Element:td
					current_num_containers
				Element:td
					The actual number of containers deployed in this node
				Element:tr
				Element:td
					last_seen
				Element:td
					Date and time of the last time the node was contacted by Docker Cloud
				Element:tr
				Element:td
					public_ip
				Element:td
					The public IP allocated to the node
				Element:tr
				Element:td
					tunnel
				Element:td
					If the node does not accept incoming connections to port 2375, the address of the reverse tunnel to access the docker daemon, or
				Element:code
					null
					otherwise
				Element:tr
				Element:td
					deployed_datetime
				Element:td
					The date and time when this node cluster was deployed
				Element:tr
				Element:td
					destroyed_datetime
				Element:td
					The date and time when this node cluster was terminated (if applicable)
				Element:tr
				Element:td
					tags
				Element:td
					List of tags to identify the node when deploying services (see
				Element:a
					Tags
					for more information)
				Element:tr
				Element:td
					nickname
				Element:td
					A user-friendly name for the node (
				Element:code
					external_fqdn
					by default)
			Node:
			(type) c
			(layer)1
				Element:h3
					Node states
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					State
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					Deploying
				Element:td
					The node is being deployed in the cloud provider. No actions allowed in this state.
				Element:tr
				Element:td
					Deployed
				Element:td
					The node is deployed and provisioned and is ready to deploy containers. Possible actions in this state:
				Element:code
					terminate
					,
				Element:code
					docker-upgrade
					.
				Element:tr
				Element:td
					Unreachable
				Element:td
					The node is deployed but Docker Cloud cannot connect to the docker daemon. Possible actions in this state:
				Element:code
					health-check
					and
				Element:code
					terminate
					.
				Element:tr
				Element:td
					Upgrading
				Element:td
					The node docker daemon is being upgraded. No actions allowed in this state.
				Element:tr
				Element:td
					Terminating
				Element:td
					The node is being terminated in the cloud provider. No actions allowed in this state.
				Element:tr
				Element:td
					Terminated
				Element:td
					The node has been terminated and is no longer present in the cloud provider. No actions allowed in this state.
			Node:
			(type) c
			(layer)1
				Element:h2
					List all nodes
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
					dockercloud
				Element:span
					nodes
				Element:span
					=
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					Node
				Element:span
					.
				Element:span
					list
				Element:span
					()
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
				Element:span
					"github.com/docker/go-dockercloud/dockercloud"
				Element:span
				Element:span
					nodeList
				Element:span
					,
				Element:span
				Element:span
					err
				Element:span
				Element:span
					:=
				Element:span
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					ListNodes
				Element:span
					()
				Element:span
				Element:span
					if
				Element:span
				Element:span
					err
				Element:span
				Element:span
					!=
				Element:span
				Element:span
					nil
				Element:span
				Element:span
					{
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Println
				Element:span
					(
				Element:span
					err
				Element:span
					)
				Element:span
				Element:span
					}
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Println
				Element:span
					(
				Element:span
					nodeList
				Element:span
					)
				Element:span
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					GET
				Element:span
					/api/infra/v1/node/
				Element:span
					HTTP
				Element:span
					/
				Element:span
					1.1
				Element:span
					Host
				Element:span
					:
				Element:span
					cloud.docker.com
				Element:span
					Authorization
				Element:span
					:
				Element:span
					Basic dXNlcm5hbWU6YXBpa2V5
				Element:span
					Accept
				Element:span
					:
				Element:span
					application/json
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					docker-cloud node ls
			Node:
			(type) c
			(layer)1
				Element:p
					Lists all current and recently terminated nodes. Returns a list of
				Element:code
					Node
					objects.
			Node:
			(type) c
			(layer)1
				Element:h3
					Endpoint Type
			Node:
			(type) c
			(layer)1
				Element:p
					Available in Docker Cloud’s
				Element:strong
					REST API
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET /api/infra/v1/[optional_namespace/]node/
			Node:
			(type) c
			(layer)1
				Element:h3
					Query Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					uuid
				Element:td
					Filter by UUID
				Element:tr
				Element:td
					state
				Element:td
					Filter by state. Possible values:
				Element:code
					Deploying
					,
				Element:code
					Deployed
					,
				Element:code
					Unreachable
					,
				Element:code
					Upgrading
					,
				Element:code
					Terminating
					,
				Element:code
					Terminated
				Element:tr
				Element:td
					node_cluster
				Element:td
					Filter by resource URI of the target node cluster
				Element:tr
				Element:td
					node_type
				Element:td
					Filter by resource URI of the target node type
				Element:tr
				Element:td
					region
				Element:td
					Filter by resource URI of the target region
				Element:tr
				Element:td
					docker_version
				Element:td
					Filter by Docker engine version running in the nodes
			Node:
			(type) c
			(layer)1
				Element:h2
					Get an existing node
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
					dockercloud
				Element:span
					node
				Element:span
					=
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					Node
				Element:span
					.
				Element:span
					fetch
				Element:span
					(
				Element:span
					"7eaf7fff-882c-4f3d-9a8f-a22317ac00ce"
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
				Element:span
					"github.com/docker/go-dockercloud/dockercloud"
				Element:span
				Element:span
					node
				Element:span
					,
				Element:span
				Element:span
					err
				Element:span
				Element:span
					:=
				Element:span
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					GetNode
				Element:span
					(
				Element:span
					"7eaf7fff-882c-4f3d-9a8f-a22317ac00ce"
				Element:span
					)
				Element:span
				Element:span
					if
				Element:span
				Element:span
					err
				Element:span
				Element:span
					!=
				Element:span
				Element:span
					nil
				Element:span
				Element:span
					{
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Println
				Element:span
					(
				Element:span
					err
				Element:span
					)
				Element:span
				Element:span
					}
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Println
				Element:span
					(
				Element:span
					node
				Element:span
					)
				Element:span
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					GET
				Element:span
					/api/infra/v1/node/7eaf7fff-882c-4f3d-9a8f-a22317ac00ce/
				Element:span
					HTTP
				Element:span
					/
				Element:span
					1.1
				Element:span
					Host
				Element:span
					:
				Element:span
					cloud.docker.com
				Element:span
					Authorization
				Element:span
					:
				Element:span
					Basic dXNlcm5hbWU6YXBpa2V5
				Element:span
					Accept
				Element:span
					:
				Element:span
					application/json
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					docker-cloud node inspect 7eaf7fff
			Node:
			(type) c
			(layer)1
				Element:p
					Get all the details of an specific node
			Node:
			(type) c
			(layer)1
				Element:h3
					Endpoint Type
			Node:
			(type) c
			(layer)1
				Element:p
					Available in Docker Cloud’s
				Element:strong
					REST API
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET /api/infra/v1/[optional_namespace/]node/(uuid)/
			Node:
			(type) c
			(layer)1
				Element:h3
					Path Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					uuid
				Element:td
					The UUID of the node to retrieve
			Node:
			(type) c
			(layer)1
				Element:h2
					Update a node
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
					dockercloud
				Element:span
					node
				Element:span
					=
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					Node
				Element:span
					.
				Element:span
					fetch
				Element:span
					(
				Element:span
					"7eaf7fff-882c-4f3d-9a8f-a22317ac00ce"
				Element:span
					)
				Element:span
					node
				Element:span
					.
				Element:span
					tags
				Element:span
					.
				Element:span
					add
				Element:span
					([
				Element:span
					"tag-1"
				Element:span
					])
				Element:span
					node
				Element:span
					.
				Element:span
					save
				Element:span
					()
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
				Element:span
					"github.com/docker/go-dockercloud/dockercloud"
				Element:span
				Element:span
					node
				Element:span
					,
				Element:span
				Element:span
					err
				Element:span
				Element:span
					:=
				Element:span
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					GetNode
				Element:span
					(
				Element:span
					"7eaf7fff-882c-4f3d-9a8f-a22317ac00ce"
				Element:span
					)
				Element:span
				Element:span
					if
				Element:span
				Element:span
					err
				Element:span
				Element:span
					!=
				Element:span
				Element:span
					nil
				Element:span
				Element:span
					{
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Println
				Element:span
					(
				Element:span
					err
				Element:span
					)
				Element:span
				Element:span
					}
				Element:span
				Element:span
					if
				Element:span
				Element:span
					err
				Element:span
				Element:span
					=
				Element:span
				Element:span
					node
				Element:span
					.
				Element:span
					Update
				Element:span
					(
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					Node
				Element:span
					{
				Element:span
					Tags
				Element:span
					:
				Element:span
				Element:span
					[]
				Element:span
					string
				Element:span
					{{
				Element:span
					Name
				Element:span
					:
				Element:span
				Element:span
					"tag-1"
				Element:span
					}}});
				Element:span
				Element:span
					err
				Element:span
				Element:span
					!=
				Element:span
				Element:span
					nil
				Element:span
				Element:span
					{
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Println
				Element:span
					(
				Element:span
					err
				Element:span
					)
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					PATCH
				Element:span
					/api/infra/v1/node/7eaf7fff-882c-4f3d-9a8f-a22317ac00ce/
				Element:span
					HTTP
				Element:span
					/
				Element:span
					1.1
				Element:span
					Host
				Element:span
					:
				Element:span
					cloud.docker.com
				Element:span
					Authorization
				Element:span
					:
				Element:span
					Basic dXNlcm5hbWU6YXBpa2V5
				Element:span
					Accept
				Element:span
					:
				Element:span
					application/json
					{"tags": [{"name": "tag-1"}], "nickname": "dev node"}
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					docker-cloud tag add -t tag-1 7eaf7fff docker-cloud tag
				Element:span
					set
					-t tag-2 7eaf7fff
			Node:
			(type) c
			(layer)1
				Element:p
					Names the node with a user-friendly name and/or replaces the old tags for the new list provided.
			Node:
			(type) c
			(layer)1
				Element:h3
					Endpoint Type
			Node:
			(type) c
			(layer)1
				Element:p
					Available in Docker Cloud’s
				Element:strong
					REST API
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					PATCH /api/infra/v1/[optional_namespace/]node/(uuid)/
			Node:
			(type) c
			(layer)1
				Element:h3
					Path Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					uuid
				Element:td
					The UUID of the node to retrieve
			Node:
			(type) c
			(layer)1
				Element:h3
					JSON Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					nickname
				Element:td
					(optional) A user-friendly name for the node (
				Element:code
					external_fqdn
					by default)
				Element:tr
				Element:td
					tags
				Element:td
					(optional) List of tags the node will have. This operation replaces the user tag list.
			Node:
			(type) c
			(layer)1
				Element:h2
					Upgrade Docker Daemon
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
					dockercloud
				Element:span
					node
				Element:span
					=
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					Node
				Element:span
					.
				Element:span
					fetch
				Element:span
					(
				Element:span
					"7eaf7fff-882c-4f3d-9a8f-a22317ac00ce"
				Element:span
					)
				Element:span
					node
				Element:span
					.
				Element:span
					upgrade_docker
				Element:span
					()
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
				Element:span
					"github.com/docker/go-dockercloud/dockercloud"
				Element:span
				Element:span
					node
				Element:span
					,
				Element:span
				Element:span
					err
				Element:span
				Element:span
					:=
				Element:span
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					GetNode
				Element:span
					(
				Element:span
					"7eaf7fff-882c-4f3d-9a8f-a22317ac00ce"
				Element:span
					)
				Element:span
				Element:span
					if
				Element:span
				Element:span
					err
				Element:span
				Element:span
					!=
				Element:span
				Element:span
					nil
				Element:span
				Element:span
					{
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Println
				Element:span
					(
				Element:span
					err
				Element:span
					)
				Element:span
				Element:span
					}
				Element:span
				Element:span
					if
				Element:span
				Element:span
					err
				Element:span
				Element:span
					=
				Element:span
				Element:span
					node
				Element:span
					.
				Element:span
					Upgrade
				Element:span
					();
				Element:span
				Element:span
					err
				Element:span
				Element:span
					!=
				Element:span
				Element:span
					nil
				Element:span
				Element:span
					{
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Println
				Element:span
					(
				Element:span
					err
				Element:span
					)
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					POST
				Element:span
					/api/infra/v1/node/7eaf7fff-882c-4f3d-9a8f-a22317ac00ce/docker-upgrade/
				Element:span
					HTTP
				Element:span
					/
				Element:span
					1.1
				Element:span
					Host
				Element:span
					:
				Element:span
					cloud.docker.com
				Element:span
					Authorization
				Element:span
					:
				Element:span
					Basic dXNlcm5hbWU6YXBpa2V5
				Element:span
					Accept
				Element:span
					:
				Element:span
					application/json
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					docker-cloud node upgrade 7eaf7fff
			Node:
			(type) c
			(layer)1
				Element:p
					Upgrades the docker daemon of the node. This will restart your containers on that node. See
				Element:a
					Docker upgrade
					for more information.
			Node:
			(type) c
			(layer)1
				Element:h3
					Endpoint Type
			Node:
			(type) c
			(layer)1
				Element:p
					Available in Docker Cloud’s
				Element:strong
					REST API
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					POST /api/infra/v1/[optional_namespace/]node/(uuid)/docker-upgrade/
			Node:
			(type) c
			(layer)1
				Element:h3
					Path Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					uuid
				Element:td
					The UUID of the node to upgrade
			Node:
			(type) c
			(layer)1
				Element:h2
					Perform a health check of a node
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					POST
				Element:span
					/api/infra/v1/node/7eaf7fff-882c-4f3d-9a8f-a22317ac00ce/health-check/
				Element:span
					HTTP
				Element:span
					/
				Element:span
					1.1
				Element:span
					Host
				Element:span
					:
				Element:span
					cloud.docker.com
				Element:span
					Authorization
				Element:span
					:
				Element:span
					Basic dXNlcm5hbWU6YXBpa2V5
				Element:span
					Accept
				Element:span
					:
				Element:span
					application/json
			Node:
			(type) c
			(layer)1
				Element:p
					Tests connectivity between Docker Cloud and the node. Updates the node status to
				Element:code
					Deployed
					if the check was successful, or to
				Element:code
					Unreachable
					otherwise.
			Node:
			(type) c
			(layer)1
				Element:h3
					Endpoint Type
			Node:
			(type) c
			(layer)1
				Element:p
					Available in Docker Cloud’s
				Element:strong
					REST API
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					POST /api/infra/v1/[optional_namespace/]node/(uuid)/health-check/
			Node:
			(type) c
			(layer)1
				Element:h3
					Path Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					uuid
				Element:td
					The UUID of the node to perform the health check to
			Node:
			(type) c
			(layer)1
				Element:h2
					Terminate a node
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
					dockercloud
				Element:span
					node
				Element:span
					=
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					Node
				Element:span
					.
				Element:span
					fetch
				Element:span
					(
				Element:span
					"7eaf7fff-882c-4f3d-9a8f-a22317ac00ce"
				Element:span
					)
				Element:span
					node
				Element:span
					.
				Element:span
					delete
				Element:span
					()
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					DELETE
				Element:span
					/api/infra/v1/node/7eaf7fff-882c-4f3d-9a8f-a22317ac00ce/
				Element:span
					HTTP
				Element:span
					/
				Element:span
					1.1
				Element:span
					Host
				Element:span
					:
				Element:span
					cloud.docker.com
				Element:span
					Authorization
				Element:span
					:
				Element:span
					Basic dXNlcm5hbWU6YXBpa2V5
				Element:span
					Accept
				Element:span
					:
				Element:span
					application/json
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
				Element:span
					"github.com/docker/go-dockercloud/dockercloud"
				Element:span
				Element:span
					node
				Element:span
					,
				Element:span
				Element:span
					err
				Element:span
				Element:span
					:=
				Element:span
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					GetNode
				Element:span
					(
				Element:span
					"7eaf7fff-882c-4f3d-9a8f-a22317ac00ce"
				Element:span
					)
				Element:span
				Element:span
					if
				Element:span
				Element:span
					err
				Element:span
				Element:span
					!=
				Element:span
				Element:span
					nil
				Element:span
				Element:span
					{
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Println
				Element:span
					(
				Element:span
					err
				Element:span
					)
				Element:span
				Element:span
					}
				Element:span
				Element:span
					if
				Element:span
				Element:span
					err
				Element:span
				Element:span
					=
				Element:span
				Element:span
					node
				Element:span
					.
				Element:span
					Terminate
				Element:span
					();
				Element:span
				Element:span
					err
				Element:span
				Element:span
					!=
				Element:span
				Element:span
					nil
				Element:span
				Element:span
					{
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Println
				Element:span
					(
				Element:span
					err
				Element:span
					)
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					docker-cloud node rm 7eaf7fff
			Node:
			(type) c
			(layer)1
				Element:p
					Terminates the specified node.
			Node:
			(type) c
			(layer)1
				Element:h3
					Endpoint Type
			Node:
			(type) c
			(layer)1
				Element:p
					Available in Docker Cloud’s
				Element:strong
					REST API
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					DELETE /api/infra/v1/[optional_namespace/]node/(uuid)/
			Node:
			(type) c
			(layer)1
				Element:h3
					Path Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					uuid
				Element:td
					The UUID of the node to terminate
			Node:
			(type) h1
			(layer)1
				Element:h1
					Registries
			Node:
			(type) c
			(layer)1
				Element:h2
					Registry
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"host"
				Element:span
					:
				Element:span
				Element:span
					"registry-1.docker.io"
				Element:span
					,
				Element:span
				Element:span
					"is_docker_registry"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"is_ssl"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Docker Hub"
				Element:span
					,
				Element:span
				Element:span
					"port"
				Element:span
					:
				Element:span
				Element:span
					443
				Element:span
					,
				Element:span
				Element:span
					"resource_uri"
				Element:span
					:
				Element:span
				Element:span
					"/api/repo/v1/user_namespace/registry/registry-1.docker.io/"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Represents a registry where repositories are hosted.
			Node:
			(type) c
			(layer)1
				Element:p
					This is a
				Element:a
					namespaced endpoint
					.
			Node:
			(type) c
			(layer)1
				Element:h3
					Attributes
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Attribute
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					resource_uri
				Element:td
					A unique API endpoint that represents the registry
				Element:tr
				Element:td
					name
				Element:td
					Human-readable name of the registry
				Element:tr
				Element:td
					host
				Element:td
					FQDN of the registry, i.e.
				Element:code
					registry-1.docker.io
				Element:tr
				Element:td
					is_docker_registry
				Element:td
					Whether this registry is run by Docker
				Element:tr
				Element:td
					is_ssl
				Element:td
					Whether this registry has SSL activated or not
				Element:tr
				Element:td
					port
				Element:td
					The port number where the registry is listening to
			Node:
			(type) c
			(layer)1
				Element:h2
					List all registries
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					GET
				Element:span
					/api/repo/v1/registry/
				Element:span
					HTTP
				Element:span
					/
				Element:span
					1.1
				Element:span
					Host
				Element:span
					:
				Element:span
					cloud.docker.com
				Element:span
					Authorization
				Element:span
					:
				Element:span
					Basic dXNlcm5hbWU6YXBpa2V5
				Element:span
					Accept
				Element:span
					:
				Element:span
					application/json
			Node:
			(type) c
			(layer)1
				Element:p
					Lists all current registries. Returns a list of
				Element:code
					Registry
					objects.
			Node:
			(type) c
			(layer)1
				Element:h3
					Endpoint Type
			Node:
			(type) c
			(layer)1
				Element:p
					Available in Docker Cloud’s
				Element:strong
					REST API
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET /api/repo/v1/[optional_namespace/]registry/
			Node:
			(type) c
			(layer)1
				Element:h3
					Query Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					uuid
				Element:td
					Filter by UUID
				Element:tr
				Element:td
					name
				Element:td
					Filter by registry name
				Element:tr
				Element:td
					host
				Element:td
					Filter by registry host
				Element:tr
				Element:td
					is_docker_registry
				Element:td
					Filter by whether the registry is run by Docker or not. Possible values: ‘true’ or 'false’
			Node:
			(type) c
			(layer)1
				Element:h2
					Get an existing registry
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					GET
				Element:span
					/api/repo/v1/registry/registry-1.docker.io/
				Element:span
					HTTP
				Element:span
					/
				Element:span
					1.1
				Element:span
					Host
				Element:span
					:
				Element:span
					cloud.docker.com
				Element:span
					Authorization
				Element:span
					:
				Element:span
					Basic dXNlcm5hbWU6YXBpa2V5
				Element:span
					Accept
				Element:span
					:
				Element:span
					application/json
			Node:
			(type) c
			(layer)1
				Element:p
					Gets all the details of an specific registry
			Node:
			(type) c
			(layer)1
				Element:h3
					Endpoint Type
			Node:
			(type) c
			(layer)1
				Element:p
					Available in Docker Cloud’s
				Element:strong
					REST API
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET /api/v1/[optional_namespace/]registry/(host)/
			Node:
			(type) c
			(layer)1
				Element:h3
					Path Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					host
				Element:td
					The host of the registry to retrieve
			Node:
			(type) h1
			(layer)1
				Element:h1
					External Repositories
			Node:
			(type) c
			(layer)1
				Element:h2
					External Repository
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"in_use"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"my.registry.com/myrepo"
				Element:span
					,
				Element:span
				Element:span
					"registry"
				Element:span
					:
				Element:span
				Element:span
					"/api/repo/v1/user_namespace/registry/my.registry.com/"
				Element:span
					,
				Element:span
				Element:span
					"resource_uri"
				Element:span
					:
				Element:span
				Element:span
					"/api/repo/v1/user_namespace/repository/my.registry.com/myrepo/"
				Element:span
					,
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					The
				Element:code
					repository
					endpoint is used to add and remove existing repositories on third party registries to be used in deployments and builds.
			Node:
			(type) c
			(layer)1
				Element:p
					This is a
				Element:a
					namespaced endpoint
					.
			Node:
			(type) c
			(layer)1
				Element:h3
					Attributes
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Attribute
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					resource_uri
				Element:td
					A unique API endpoint that represents the repository
				Element:tr
				Element:td
					name
				Element:td
					Name of the repository, i.e.
				Element:code
					my.registry.com/myrepo
				Element:tr
				Element:td
					in_use
				Element:td
					If the image is being used by any of your services
				Element:tr
				Element:td
					registry
				Element:td
					Resource URI of the registry where this image is hosted
			Node:
			(type) c
			(layer)1
				Element:h2
					List all external repositories
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
					dockercloud
				Element:span
					repositories
				Element:span
					=
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					Repository
				Element:span
					.
				Element:span
					list
				Element:span
					()
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					GET
				Element:span
					/api/repo/v1/repository/
				Element:span
					HTTP
				Element:span
					/
				Element:span
					1.1
				Element:span
					Host
				Element:span
					:
				Element:span
					cloud.docker.com
				Element:span
					Authorization
				Element:span
					:
				Element:span
					Basic dXNlcm5hbWU6YXBpa2V5
				Element:span
					Accept
				Element:span
					:
				Element:span
					application/json
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
				Element:span
					"github.com/docker/go-dockercloud/dockercloud"
				Element:span
				Element:span
					repositoriesList
				Element:span
					,
				Element:span
				Element:span
					err
				Element:span
				Element:span
					:=
				Element:span
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					ListRepositories
				Element:span
					()
				Element:span
				Element:span
					if
				Element:span
				Element:span
					err
				Element:span
				Element:span
					!=
				Element:span
				Element:span
					nil
				Element:span
				Element:span
					{
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Println
				Element:span
					(
				Element:span
					err
				Element:span
					)
				Element:span
				Element:span
					}
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Pringln
				Element:span
					(
				Element:span
					repositoriesList
				Element:span
					)
				Element:span
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					docker-cloud repository ls
			Node:
			(type) c
			(layer)1
				Element:p
					Lists all added repositories from third party registries. Returns a list of
				Element:code
					Repository
					objects.
			Node:
			(type) c
			(layer)1
				Element:h3
					Endpoint Type
			Node:
			(type) c
			(layer)1
				Element:p
					Available in Docker Cloud’s
				Element:strong
					REST API
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET /api/repo/v1/[optional_namespace/]repository/
			Node:
			(type) c
			(layer)1
				Element:h3
					Query Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					name
				Element:td
					Filter by image name
				Element:tr
				Element:td
					registry
				Element:td
					Filter by resource URI of the target repository registry
			Node:
			(type) c
			(layer)1
				Element:h2
					Add a new external repository
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
					dockercloud
				Element:span
					repository
				Element:span
					=
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					Repository
				Element:span
					.
				Element:span
					create
				Element:span
					(
				Element:span
					name
				Element:span
					=
				Element:span
					"registry.local/user1/image1"
				Element:span
					,
				Element:span
					username
				Element:span
					=
				Element:span
					username
				Element:span
					,
				Element:span
					password
				Element:span
					=
				Element:span
					password
				Element:span
					)
				Element:span
					repository
				Element:span
					.
				Element:span
					save
				Element:span
					()
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					POST
				Element:span
					/api/repo/v1/repository/
				Element:span
					HTTP
				Element:span
					/
				Element:span
					1.1
				Element:span
					Host
				Element:span
					:
				Element:span
					cloud.docker.com
				Element:span
					Authorization
				Element:span
					:
				Element:span
					Basic dXNlcm5hbWU6YXBpa2V5
				Element:span
					Accept
				Element:span
					:
				Element:span
					application/json
				Element:span
					Content-Type
				Element:span
					:
				Element:span
					application/json
				Element:span
					{
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"registry.local/user1/image1"
				Element:span
					,
				Element:span
				Element:span
					"username"
				Element:span
					:
				Element:span
				Element:span
					"username"
				Element:span
					,
				Element:span
				Element:span
					"password"
				Element:span
					:
				Element:span
				Element:span
					"password"
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
				Element:span
					"github.com/docker/go-dockercloud/dockercloud"
				Element:span
				Element:span
					image
				Element:span
					,
				Element:span
				Element:span
					err
				Element:span
				Element:span
					:=
				Element:span
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					CreateImage
				Element:span
					(
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					ImageCreateRequest
				Element:span
					{
				Element:span
				Element:span
					Name
				Element:span
					:
				Element:span
				Element:span
					"registry.local/user1/image1"
				Element:span
					,
				Element:span
				Element:span
					Username
				Element:span
					:
				Element:span
				Element:span
					"username"
				Element:span
					,
				Element:span
				Element:span
					Password
				Element:span
					:
				Element:span
				Element:span
					"password"
				Element:span
				Element:span
					})
				Element:span
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					docker-cloud repository register -u username -p password registry.local/user1/image1
			Node:
			(type) c
			(layer)1
				Element:p
					Adds an existing repository on a third party registry.
			Node:
			(type) c
			(layer)1
				Element:h3
					Endpoint Type
			Node:
			(type) c
			(layer)1
				Element:p
					Available in Docker Cloud’s
				Element:strong
					REST API
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					POST /api/repo/v1/[optional_namespace/]repository/
			Node:
			(type) c
			(layer)1
				Element:h3
					JSON Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					name
				Element:td
					Name of the repository, i.e. ‘my.registry.com/myrepo’
				Element:tr
				Element:td
					username
				Element:td
					Username to authenticate with the third party registry
				Element:tr
				Element:td
					password
				Element:td
					Password to authenticate with the third party registry
			Node:
			(type) c
			(layer)1
				Element:h2
					Get an external repository details
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
					dockercloud
				Element:span
					repository
				Element:span
					=
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					Repository
				Element:span
					.
				Element:span
					fetch
				Element:span
					(
				Element:span
					"registry.local/user1/image1"
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					GET
				Element:span
					/api/repo/v1/repository/registry.local/user1/image1/
				Element:span
					HTTP
				Element:span
					/
				Element:span
					1.1
				Element:span
					Host
				Element:span
					:
				Element:span
					cloud.docker.com
				Element:span
					Authorization
				Element:span
					:
				Element:span
					Basic dXNlcm5hbWU6YXBpa2V5
				Element:span
					Accept
				Element:span
					:
				Element:span
					application/json
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
				Element:span
					"github.com/docker/go-dockercloud/dockercloud"
				Element:span
				Element:span
					repository
				Element:span
					,
				Element:span
				Element:span
					err
				Element:span
				Element:span
					=
				Element:span
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					GetRepository
				Element:span
					(
				Element:span
					"registry.local/user1/image1"
				Element:span
					)
				Element:span
				Element:span
					if
				Element:span
				Element:span
					err
				Element:span
				Element:span
					!=
				Element:span
				Element:span
					nil
				Element:span
				Element:span
					{
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Println
				Element:span
					(
				Element:span
					err
				Element:span
					)
				Element:span
				Element:span
					}
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Println
				Element:span
					(
				Element:span
					repository
				Element:span
					)
				Element:span
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					docker-cloud repository inspect registry.local/user1/image1
			Node:
			(type) c
			(layer)1
				Element:p
					Gets all the details of an specific repository
			Node:
			(type) c
			(layer)1
				Element:h3
					Endpoint Type
			Node:
			(type) c
			(layer)1
				Element:p
					Available in Docker Cloud’s
				Element:strong
					REST API
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET /api/repo/v1/[optional_namespace/]repository/(name)/
			Node:
			(type) c
			(layer)1
				Element:h3
					Path Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					name
				Element:td
					The name of the repository to retrieve
			Node:
			(type) c
			(layer)1
				Element:h2
					Update credentials of an external repository
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
					dockercloud
				Element:span
					repository
				Element:span
					=
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					Repository
				Element:span
					.
				Element:span
					fetch
				Element:span
					(
				Element:span
					"registry.local/user1/image1"
				Element:span
					)
				Element:span
					repository
				Element:span
					.
				Element:span
					username
				Element:span
					=
				Element:span
					"new username"
				Element:span
					repository
				Element:span
					.
				Element:span
					password
				Element:span
					=
				Element:span
					"new password"
				Element:span
					repository
				Element:span
					.
				Element:span
					save
				Element:span
					()
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					PATCH
				Element:span
					/api/repo/v1/repository/registry.local/user1/image1/
				Element:span
					HTTP
				Element:span
					/
				Element:span
					1.1
				Element:span
					Host
				Element:span
					:
				Element:span
					cloud.docker.com
				Element:span
					Authorization
				Element:span
					:
				Element:span
					Basic dXNlcm5hbWU6YXBpa2V5
				Element:span
					Accept
				Element:span
					:
				Element:span
					application/json
				Element:span
					Content-Type
				Element:span
					:
				Element:span
					application/json
				Element:span
					{
				Element:span
					"username"
				Element:span
					:
				Element:span
				Element:span
					"username"
				Element:span
					,
				Element:span
				Element:span
					"password"
				Element:span
					:
				Element:span
				Element:span
					"password"
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					docker-cloud repository update -n
				Element:span
					"new username"
					-p
				Element:span
					"new password"
					registry.local/user1/image1
			Node:
			(type) c
			(layer)1
				Element:p
					Updates the external repository credentials.
			Node:
			(type) c
			(layer)1
				Element:h3
					Endpoint Type
			Node:
			(type) c
			(layer)1
				Element:p
					Available in Docker Cloud’s
				Element:strong
					REST API
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					PATCH /api/repo/v1/[optional_namespace/]repository/(name)/
			Node:
			(type) c
			(layer)1
				Element:h3
					Path Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					name
				Element:td
					The name of the repository to update
			Node:
			(type) c
			(layer)1
				Element:h3
					JSON Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					username
				Element:td
					Username to authenticate with the private registry
				Element:tr
				Element:td
					password
				Element:td
					Password to authenticate with the private registry
			Node:
			(type) c
			(layer)1
				Element:h2
					Remove an external repository
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
					dockercloud
				Element:span
					repository
				Element:span
					=
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					Repository
				Element:span
					.
				Element:span
					fetch
				Element:span
					(
				Element:span
					"registry.local/user1/image1"
				Element:span
					)
				Element:span
					repository
				Element:span
					.
				Element:span
					delete
				Element:span
					()
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					DELETE
				Element:span
					/api/repo/v1/repository/registry.local/user1/image1/
				Element:span
					HTTP
				Element:span
					/
				Element:span
					1.1
				Element:span
					Host
				Element:span
					:
				Element:span
					cloud.docker.com
				Element:span
					Authorization
				Element:span
					:
				Element:span
					Basic dXNlcm5hbWU6YXBpa2V5
				Element:span
					Accept
				Element:span
					:
				Element:span
					application/json
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
				Element:span
					"github.com/docker/go-dockercloud/dockercloud"
				Element:span
				Element:span
					repository
				Element:span
					,
				Element:span
				Element:span
					err
				Element:span
				Element:span
					=
				Element:span
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					GetRepository
				Element:span
					(
				Element:span
					"registry.local/user1/image1"
				Element:span
					)
				Element:span
				Element:span
					if
				Element:span
				Element:span
					err
				Element:span
				Element:span
					!=
				Element:span
				Element:span
					nil
				Element:span
				Element:span
					{
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Println
				Element:span
					(
				Element:span
					err
				Element:span
					)
				Element:span
				Element:span
					}
				Element:span
				Element:span
					repository
				Element:span
					.
				Element:span
					Remove
				Element:span
					()
				Element:span
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					docker-cloud repository rm registry.local/user1/image1
			Node:
			(type) c
			(layer)1
				Element:p
					Removes the external repository from Docker Cloud. It won’t remove the repository from the third party registry where it’s stored.
			Node:
			(type) c
			(layer)1
				Element:h3
					Endpoint Type
			Node:
			(type) c
			(layer)1
				Element:p
					Available in Docker Cloud’s
				Element:strong
					REST API
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					DELETE /api/repo/v1/[optional_namespace/]repository/
			Node:
			(type) c
			(layer)1
				Element:h3
					Path Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					name
				Element:td
					The name of the external repository to remove
			Node:
			(type) h1
			(layer)1
				Element:h1
					Stacks
			Node:
			(type) c
			(layer)1
				Element:h2
					Stack
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"deployed_datetime"
				Element:span
					:
				Element:span
				Element:span
					"Mon, 13 Oct 2014 11:01:43 +0000"
				Element:span
					,
				Element:span
				Element:span
					"destroyed_datetime"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"nickname"
				Element:span
					:
				Element:span
				Element:span
					"deployment stack"
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"dockercloud-app"
				Element:span
					,
				Element:span
				Element:span
					"resource_uri"
				Element:span
					:
				Element:span
				Element:span
					"/api/app/v1/user_namespace/stack/7fe7ec85-58be-4904-81da-de2219098d7c/"
				Element:span
					,
				Element:span
				Element:span
					"services"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					"/api/app/v1/user_namespace/service/09cbcf8d-a727-40d9-b420-c8e18b7fa55b/"
				Element:span
				Element:span
					],
				Element:span
				Element:span
					"state"
				Element:span
					:
				Element:span
				Element:span
					"Running"
				Element:span
					,
				Element:span
				Element:span
					"synchronized"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"uuid"
				Element:span
					:
				Element:span
				Element:span
					"09cbcf8d-a727-40d9-b420-c8e18b7fa55b"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					A stack is a logical grouping of closely related services, that may be linked with one another.
			Node:
			(type) c
			(layer)1
				Element:p
					This is a
				Element:a
					namespaced endpoint
					.
			Node:
			(type) c
			(layer)1
				Element:h3
					Attributes
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Attribute
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					uuid
				Element:td
					A unique identifier for the stack generated automatically on creation
				Element:tr
				Element:td
					resource_uri
				Element:td
					A unique API endpoint that represents the stack
				Element:tr
				Element:td
					name
				Element:td
					A user provided name for the stack.
				Element:tr
				Element:td
					state
				Element:td
					The state of the stack (see table
				Element:code
					Stack states
					below)
				Element:tr
				Element:td
					synchronized
				Element:td
					Flag indicating if the current stack definition is synchronized with their services.
				Element:tr
				Element:td
					services
				Element:td
					List of service resource URIs belonging to the stack
				Element:tr
				Element:td
					deployed_datetime
				Element:td
					The date and time of the last deployment of the stack (if applicable,
				Element:code
					null
					otherwise)
				Element:tr
				Element:td
					destroyed_datetime
				Element:td
					The date and time of the
				Element:code
					terminate
					operation on the stack (if applicable,
				Element:code
					null
					otherwise)
				Element:tr
				Element:td
					nickname
				Element:td
					A user-friendly name for the stack (
				Element:code
					name
					by default)
			Node:
			(type) c
			(layer)1
				Element:h3
					Stack states
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					State
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					Not Running
				Element:td
					The stack has been created and has no deployed services yet. Possible actions in this state:
				Element:code
					start
					,
				Element:code
					terminate
					.
				Element:tr
				Element:td
					Starting
				Element:td
					All services for the stack are either starting or already running. No actions allowed in this state.
				Element:tr
				Element:td
					Running
				Element:td
					All services for the service are deployed and running. Possible actions in this state:
				Element:code
					redeploy
					,
				Element:code
					terminate
					.
				Element:tr
				Element:td
					Partly running
				Element:td
					One or more services of the stack are deployed and running. Possible actions in this state:
				Element:code
					redeploy
					,
				Element:code
					terminate
					.
				Element:tr
				Element:td
					Stopping
				Element:td
					All services for the stack are either stopping or already stopped. No actions allowed in this state.
				Element:tr
				Element:td
					Stopped
				Element:td
					All services for the service are stopped. Possible actions in this state:
				Element:code
					start
					,
				Element:code
					redeploy
					,
				Element:code
					terminate
					.
				Element:tr
				Element:td
					Redeploying
				Element:td
					The stack is redeploying all its services with the updated configuration. No actions allowed in this state.
				Element:tr
				Element:td
					Terminating
				Element:td
					All services for the stack are either being terminated or already terminated. No actions allowed in this state.
				Element:tr
				Element:td
					Terminated
				Element:td
					The stack and all its services have been terminated. No actions allowed in this state.
			Node:
			(type) c
			(layer)1
				Element:h2
					List all stacks
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
					dockercloud
				Element:span
					stacks
				Element:span
					=
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					Stack
				Element:span
					.
				Element:span
					list
				Element:span
					()
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
				Element:span
					"github.com/docker/go-dockercloud/dockercloud"
				Element:span
				Element:span
					stackList
				Element:span
					,
				Element:span
				Element:span
					err
				Element:span
				Element:span
					:=
				Element:span
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					ListStacks
				Element:span
					()
				Element:span
				Element:span
					if
				Element:span
				Element:span
					err
				Element:span
				Element:span
					!=
				Element:span
				Element:span
					nil
				Element:span
				Element:span
					{
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Println
				Element:span
					(
				Element:span
					err
				Element:span
					)
				Element:span
				Element:span
					}
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Println
				Element:span
					(
				Element:span
					stackList
				Element:span
					)
				Element:span
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					GET
				Element:span
					/api/app/v1/stack/
				Element:span
					HTTP
				Element:span
					/
				Element:span
					1.1
				Element:span
					Host
				Element:span
					:
				Element:span
					cloud.docker.com
				Element:span
					Authorization
				Element:span
					:
				Element:span
					Basic dXNlcm5hbWU6YXBpa2V5
				Element:span
					Accept
				Element:span
					:
				Element:span
					application/json
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					docker-cloud stack ls
			Node:
			(type) c
			(layer)1
				Element:p
					Lists all current and recently terminated stacks. Returns a list of
				Element:code
					Stack
					objects.
			Node:
			(type) c
			(layer)1
				Element:h3
					Endpoint Type
			Node:
			(type) c
			(layer)1
				Element:p
					Available in Docker Cloud’s
				Element:strong
					REST API
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET /api/app/v1/[optional_namespace/]stack/
			Node:
			(type) c
			(layer)1
				Element:h3
					Query Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					uuid
				Element:td
					Filter by UUID
				Element:tr
				Element:td
					name
				Element:td
					Filter by stack name
			Node:
			(type) c
			(layer)1
				Element:h2
					Create a new stack
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
					dockercloud
				Element:span
					stack
				Element:span
					=
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					Stack
				Element:span
					.
				Element:span
					create
				Element:span
					(
				Element:span
					name
				Element:span
					=
				Element:span
					"my-new-stack"
				Element:span
					,
				Element:span
					services
				Element:span
					=
				Element:span
					[{
				Element:span
					"name"
				Element:span
					:
				Element:span
					"hello-word"
				Element:span
					,
				Element:span
					"image"
				Element:span
					:
				Element:span
					"tutum/hello-world"
				Element:span
					,
				Element:span
					"target_num_containers"
				Element:span
					:
				Element:span
					2
				Element:span
					}])
				Element:span
					stack
				Element:span
					.
				Element:span
					save
				Element:span
					()
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
				Element:span
					"github.com/docker/go-dockercloud/dockercloud"
				Element:span
				Element:span
					stack
				Element:span
					,
				Element:span
				Element:span
					err
				Element:span
				Element:span
					:=
				Element:span
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					CreateStack
				Element:span
					(
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					StackCreateRequest
				Element:span
					{
				Element:span
					Name
				Element:span
					:
				Element:span
				Element:span
					"my-new-stack"
				Element:span
					,
				Element:span
				Element:span
					Services
				Element:span
					:
				Element:span
				Element:span
					[]
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					ServiceCreateRequest
				Element:span
					{{
				Element:span
					Image
				Element:span
					:
				Element:span
				Element:span
					"tutum/hello-world"
				Element:span
					,
				Element:span
				Element:span
					Name
				Element:span
					:
				Element:span
				Element:span
					"test"
				Element:span
					,
				Element:span
				Element:span
					Target_num_containers
				Element:span
					:
				Element:span
				Element:span
					2
				Element:span
					}}})
				Element:span
				Element:span
					if
				Element:span
				Element:span
					err
				Element:span
				Element:span
					!=
				Element:span
				Element:span
					nil
				Element:span
				Element:span
					{
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Println
				Element:span
					(
				Element:span
					err
				Element:span
					)
				Element:span
				Element:span
					}
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Println
				Element:span
					(
				Element:span
					stack
				Element:span
					)
				Element:span
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					POST
				Element:span
					/api/app/v1/stack/
				Element:span
					HTTP
				Element:span
					/
				Element:span
					1.1
				Element:span
					Host
				Element:span
					:
				Element:span
					cloud.docker.com
				Element:span
					Authorization
				Element:span
					:
				Element:span
					Basic dXNlcm5hbWU6YXBpa2V5
				Element:span
					Accept
				Element:span
					:
				Element:span
					application/json
				Element:span
					Content-Type
				Element:span
					:
				Element:span
					application/json
				Element:span
					{
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"my-new-stack"
				Element:span
					,
				Element:span
				Element:span
					"services"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"hello-word"
				Element:span
					,
				Element:span
				Element:span
					"image"
				Element:span
					:
				Element:span
				Element:span
					"tutum/hello-world"
				Element:span
					,
				Element:span
				Element:span
					"target_num_containers"
				Element:span
					:
				Element:span
				Element:span
					2
				Element:span
					,
				Element:span
				Element:span
					"linked_to_service"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"to_service"
				Element:span
					:
				Element:span
				Element:span
					"database"
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"DB"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					]
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"database"
				Element:span
					,
				Element:span
				Element:span
					"image"
				Element:span
					:
				Element:span
				Element:span
					"tutum/mysql"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					]
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					docker-cloud stack create --name hello-world -f docker-compose.yml
			Node:
			(type) c
			(layer)1
				Element:p
					Creates a new stack without starting it. Note that the JSON syntax is abstracted by both, the Docker Cloud CLI and our UI, in order to use
				Element:a
					Stack YAML files
					.
			Node:
			(type) c
			(layer)1
				Element:h3
					Endpoint Type
			Node:
			(type) c
			(layer)1
				Element:p
					Available in Docker Cloud’s
				Element:strong
					REST API
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					POST /api/app/v1/[optional_namespace/]stack/
			Node:
			(type) c
			(layer)1
				Element:h3
					JSON Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					name
				Element:td
					(required) A human-readable name for the stack, i.e.
				Element:code
					my-hello-world-stack
				Element:tr
				Element:td
					nickname
				Element:td
					(optional) A user-friendly name for the stack (
				Element:code
					name
					by default)
				Element:tr
				Element:td
					services
				Element:td
					(optional) List of services belonging to the stack. Each service accepts the same parameters as a
				Element:a
					Create new service
					operation (default:
				Element:code
					[]
					) plus the ability to refer “links” and “volumes-from” by the name of another service in the stack (see example).
			Node:
			(type) c
			(layer)1
				Element:h2
					Export an existing stack
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
					dockercloud
				Element:span
					stack
				Element:span
					=
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					Stack
				Element:span
					.
				Element:span
					fetch
				Element:span
					(
				Element:span
					"46aca402-2109-4a70-a378-760cfed43816"
				Element:span
					)
				Element:span
					stack
				Element:span
					.
				Element:span
					export
				Element:span
					()
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
				Element:span
					"github.com/docker/go-dockercloud/dockercloud"
				Element:span
				Element:span
					stack
				Element:span
					,
				Element:span
				Element:span
					err
				Element:span
				Element:span
					:=
				Element:span
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					GetStack
				Element:span
					(
				Element:span
					"46aca402-2109-4a70-a378-760cfed43816"
				Element:span
					)
				Element:span
				Element:span
					if
				Element:span
				Element:span
					err
				Element:span
				Element:span
					!=
				Element:span
				Element:span
					nil
				Element:span
				Element:span
					{
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Println
				Element:span
					(
				Element:span
					err
				Element:span
					)
				Element:span
				Element:span
					}
				Element:span
				Element:span
					if
				Element:span
				Element:span
					err
				Element:span
				Element:span
					=
				Element:span
				Element:span
					stack
				Element:span
					.
				Element:span
					Export
				Element:span
					();
				Element:span
				Element:span
					err
				Element:span
				Element:span
					!=
				Element:span
				Element:span
					nil
				Element:span
				Element:span
					{
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Println
				Element:span
					(
				Element:span
					err
				Element:span
					)
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					GET
				Element:span
					/api/app/v1/stack/46aca402-2109-4a70-a378-760cfed43816/export/
				Element:span
					HTTP
				Element:span
					/
				Element:span
					1.1
				Element:span
					Host
				Element:span
					:
				Element:span
					cloud.docker.com
				Element:span
					Authorization
				Element:span
					:
				Element:span
					Basic dXNlcm5hbWU6YXBpa2V5
				Element:span
					Accept
				Element:span
					:
				Element:span
					application/json
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					docker-cloud stack
				Element:span
					export
					46aca402
			Node:
			(type) c
			(layer)1
				Element:p
					Get a JSON representation of the stack following the
				Element:a
					Stack YAML representation
					.
			Node:
			(type) c
			(layer)1
				Element:h3
					Endpoint Type
			Node:
			(type) c
			(layer)1
				Element:p
					Available in Docker Cloud’s
				Element:strong
					REST API
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET /api/app/v1/[optional_namespace/]stack/(uuid)/export/
			Node:
			(type) c
			(layer)1
				Element:h3
					Path Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					uuid
				Element:td
					The UUID of the stack to retrieve
			Node:
			(type) c
			(layer)1
				Element:h2
					Get an existing stack
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
					dockercloud
				Element:span
					stack
				Element:span
					=
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					Stack
				Element:span
					.
				Element:span
					fetch
				Element:span
					(
				Element:span
					"46aca402-2109-4a70-a378-760cfed43816"
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
				Element:span
					"github.com/docker/go-dockercloud/dockercloud"
				Element:span
				Element:span
					stack
				Element:span
					,
				Element:span
				Element:span
					err
				Element:span
				Element:span
					:=
				Element:span
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					GetStack
				Element:span
					(
				Element:span
					"46aca402-2109-4a70-a378-760cfed43816"
				Element:span
					)
				Element:span
				Element:span
					if
				Element:span
				Element:span
					err
				Element:span
				Element:span
					!=
				Element:span
				Element:span
					nil
				Element:span
				Element:span
					{
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Println
				Element:span
					(
				Element:span
					err
				Element:span
					)
				Element:span
				Element:span
					}
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Println
				Element:span
					(
				Element:span
					stack
				Element:span
					)
				Element:span
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					GET
				Element:span
					/api/app/v1/stack/46aca402-2109-4a70-a378-760cfed43816/
				Element:span
					HTTP
				Element:span
					/
				Element:span
					1.1
				Element:span
					Host
				Element:span
					:
				Element:span
					cloud.docker.com
				Element:span
					Authorization
				Element:span
					:
				Element:span
					Basic dXNlcm5hbWU6YXBpa2V5
				Element:span
					Accept
				Element:span
					:
				Element:span
					application/json
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					docker-cloud stack inspect 46aca402-2109-4a70-a378-760cfed43816
			Node:
			(type) c
			(layer)1
				Element:p
					Get all the details of an specific stack
			Node:
			(type) c
			(layer)1
				Element:h3
					Endpoint Type
			Node:
			(type) c
			(layer)1
				Element:p
					Available in Docker Cloud’s
				Element:strong
					REST API
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET /api/app/v1/[optional_namespace/]stack/(uuid)/
			Node:
			(type) c
			(layer)1
				Element:h3
					Path Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					uuid
				Element:td
					The UUID of the stack to retrieve
			Node:
			(type) c
			(layer)1
				Element:h2
					Update an existing stack
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
					dockercloud
				Element:span
					stack
				Element:span
					=
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					Stack
				Element:span
					.
				Element:span
					fetch
				Element:span
					(
				Element:span
					"46aca402-2109-4a70-a378-760cfed43816"
				Element:span
					)
				Element:span
					stack
				Element:span
					.
				Element:span
					services
				Element:span
					=
				Element:span
					{
				Element:span
					"services"
				Element:span
					:
				Element:span
					[{
				Element:span
					"name"
				Element:span
					:
				Element:span
					"hello-word"
				Element:span
					,
				Element:span
					"image"
				Element:span
					:
				Element:span
					"tutum/hello-world"
				Element:span
					,
				Element:span
					"target_num_containers"
				Element:span
					:
				Element:span
					2
				Element:span
					}]}
				Element:span
					stack
				Element:span
					.
				Element:span
					save
				Element:span
					()
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
				Element:span
					"github.com/docker/go-dockercloud/dockercloud"
				Element:span
				Element:span
					stack
				Element:span
					,
				Element:span
				Element:span
					err
				Element:span
				Element:span
					:=
				Element:span
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					GetStack
				Element:span
					(
				Element:span
					"46aca402-2109-4a70-a378-760cfed43816"
				Element:span
					)
				Element:span
				Element:span
					if
				Element:span
				Element:span
					err
				Element:span
				Element:span
					!=
				Element:span
				Element:span
					nil
				Element:span
				Element:span
					{
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Println
				Element:span
					(
				Element:span
					err
				Element:span
					)
				Element:span
				Element:span
					}
				Element:span
				Element:span
					if
				Element:span
				Element:span
					err
				Element:span
				Element:span
					=
				Element:span
				Element:span
					stack
				Element:span
					.
				Element:span
					Update
				Element:span
					(
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					StackCreateRequest
				Element:span
					{
				Element:span
					Services
				Element:span
					:
				Element:span
				Element:span
					[]
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					ServiceCreateRequest
				Element:span
					{{
				Element:span
					Name
				Element:span
					:
				Element:span
				Element:span
					"hello-world"
				Element:span
					,
				Element:span
				Element:span
					Image
				Element:span
					:
				Element:span
				Element:span
					"tutum/hello-world"
				Element:span
					,
				Element:span
				Element:span
					Target_num_containers
				Element:span
					:
				Element:span
				Element:span
					2
				Element:span
					}}});
				Element:span
				Element:span
					err
				Element:span
				Element:span
					!=
				Element:span
				Element:span
					nil
				Element:span
				Element:span
					{
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Println
				Element:span
					(
				Element:span
					err
				Element:span
					)
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					PATCH
				Element:span
					/api/app/v1/stack/46aca402-2109-4a70-a378-760cfed43816/
				Element:span
					HTTP
				Element:span
					/
				Element:span
					1.1
				Element:span
					Host
				Element:span
					:
				Element:span
					cloud.docker.com
				Element:span
					Authorization
				Element:span
					:
				Element:span
					Basic dXNlcm5hbWU6YXBpa2V5
				Element:span
					Accept
				Element:span
					:
				Element:span
					application/json
				Element:span
					Content-Type
				Element:span
					:
				Element:span
					application/json
				Element:span
					{
				Element:span
				Element:span
					"services"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"hello-word"
				Element:span
					,
				Element:span
				Element:span
					"image"
				Element:span
					:
				Element:span
				Element:span
					"tutum/hello-world"
				Element:span
					,
				Element:span
				Element:span
					"target_num_containers"
				Element:span
					:
				Element:span
				Element:span
					3
				Element:span
					,
				Element:span
				Element:span
					"linked_to_service"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"to_service"
				Element:span
					:
				Element:span
				Element:span
					"database"
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"DB"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					]
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"database"
				Element:span
					,
				Element:span
				Element:span
					"image"
				Element:span
					:
				Element:span
				Element:span
					"tutum/mysql"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					]
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					docker-cloud stack update -f docker-compose.yml 46aca402
			Node:
			(type) c
			(layer)1
				Element:p
					Updates the details of every service in the stack.
			Node:
			(type) c
			(layer)1
				Element:h3
					Endpoint Type
			Node:
			(type) c
			(layer)1
				Element:p
					Available in Docker Cloud’s
				Element:strong
					REST API
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					PATCH /api/app/v1/[optional_namespace/]stack/(uuid)/
			Node:
			(type) c
			(layer)1
				Element:h3
					Path Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					uuid
				Element:td
					The UUID of the stack to update
			Node:
			(type) c
			(layer)1
				Element:h3
					JSON Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					services
				Element:td
					(optional) List of services belonging to the stack. Each service accepts the same parameters as a
				Element:a
					Update an existing service
					operation (default:
				Element:code
					[]
					) plus the ability to refer “links” and “volumes-from” by the name of another service in the stack (see example).
			Node:
			(type) c
			(layer)1
				Element:h2
					Stop a stack
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
					dockercloud
				Element:span
					stack
				Element:span
					=
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					Stack
				Element:span
					.
				Element:span
					fetch
				Element:span
					(
				Element:span
					"46aca402-2109-4a70-a378-760cfed43816"
				Element:span
					)
				Element:span
					stack
				Element:span
					.
				Element:span
					stop
				Element:span
					()
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
				Element:span
					"github.com/docker/go-dockercloud/dockercloud"
				Element:span
				Element:span
					stack
				Element:span
					,
				Element:span
				Element:span
					err
				Element:span
				Element:span
					:=
				Element:span
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					GetStack
				Element:span
					(
				Element:span
					"46aca402-2109-4a70-a378-760cfed43816"
				Element:span
					)
				Element:span
				Element:span
					if
				Element:span
				Element:span
					err
				Element:span
				Element:span
					!=
				Element:span
				Element:span
					nil
				Element:span
				Element:span
					{
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Println
				Element:span
					(
				Element:span
					err
				Element:span
					)
				Element:span
				Element:span
					}
				Element:span
				Element:span
					if
				Element:span
				Element:span
					err
				Element:span
				Element:span
					=
				Element:span
				Element:span
					stack
				Element:span
					.
				Element:span
					Stop
				Element:span
					();
				Element:span
				Element:span
					err
				Element:span
				Element:span
					!=
				Element:span
				Element:span
					nil
				Element:span
				Element:span
					{
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Println
				Element:span
					(
				Element:span
					err
				Element:span
					)
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					POST
				Element:span
					/api/app/v1/stack/46aca402-2109-4a70-a378-760cfed43816/stop/
				Element:span
					HTTP
				Element:span
					/
				Element:span
					1.1
				Element:span
					Host
				Element:span
					:
				Element:span
					cloud.docker.com
				Element:span
					Authorization
				Element:span
					:
				Element:span
					Basic dXNlcm5hbWU6YXBpa2V5
				Element:span
					Accept
				Element:span
					:
				Element:span
					application/json
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					docker-cloud stack stop 46aca402-2109-4a70-a378-760cfed43816
			Node:
			(type) c
			(layer)1
				Element:p
					Stops the services in the stack.
			Node:
			(type) c
			(layer)1
				Element:h3
					Endpoint Type
			Node:
			(type) c
			(layer)1
				Element:p
					Available in Docker Cloud’s
				Element:strong
					REST API
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					POST /api/app/v1/[optional_namespace/]stack/(uuid)/stop/
			Node:
			(type) c
			(layer)1
				Element:h3
					Path Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					uuid
				Element:td
					The UUID of the stack to stop
			Node:
			(type) c
			(layer)1
				Element:h2
					Start a stack
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
					dockercloud
				Element:span
					stack
				Element:span
					=
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					Stack
				Element:span
					.
				Element:span
					fetch
				Element:span
					()
				Element:span
					stack
				Element:span
					.
				Element:span
					start
				Element:span
					()
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
				Element:span
					"github.com/docker/go-dockercloud/dockercloud"
				Element:span
				Element:span
					stack
				Element:span
					,
				Element:span
				Element:span
					err
				Element:span
				Element:span
					:=
				Element:span
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					GetStack
				Element:span
					(
				Element:span
					"46aca402-2109-4a70-a378-760cfed43816"
				Element:span
					)
				Element:span
				Element:span
					if
				Element:span
				Element:span
					err
				Element:span
				Element:span
					!=
				Element:span
				Element:span
					nil
				Element:span
				Element:span
					{
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Println
				Element:span
					(
				Element:span
					err
				Element:span
					)
				Element:span
				Element:span
					}
				Element:span
				Element:span
					if
				Element:span
				Element:span
					err
				Element:span
				Element:span
					=
				Element:span
				Element:span
					stack
				Element:span
					.
				Element:span
					Start
				Element:span
					();
				Element:span
				Element:span
					err
				Element:span
				Element:span
					!=
				Element:span
				Element:span
					nil
				Element:span
				Element:span
					{
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Println
				Element:span
					(
				Element:span
					err
				Element:span
					)
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					POST
				Element:span
					/api/app/v1/stack/46aca402-2109-4a70-a378-760cfed43816/start/
				Element:span
					HTTP
				Element:span
					/
				Element:span
					1.1
				Element:span
					Host
				Element:span
					:
				Element:span
					cloud.docker.com
				Element:span
					Authorization
				Element:span
					:
				Element:span
					Basic dXNlcm5hbWU6YXBpa2V5
				Element:span
					Accept
				Element:span
					:
				Element:span
					application/json
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					docker-cloud stack start 46aca402
			Node:
			(type) c
			(layer)1
				Element:p
					Starts the services in the stack.
			Node:
			(type) c
			(layer)1
				Element:h3
					Endpoint Type
			Node:
			(type) c
			(layer)1
				Element:p
					Available in Docker Cloud’s
				Element:strong
					REST API
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					POST /api/app/v1/[optional_namespace/]stack/(uuid)/start/
			Node:
			(type) c
			(layer)1
				Element:h3
					Path Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					uuid
				Element:td
					The UUID of the stack to start
			Node:
			(type) c
			(layer)1
				Element:h2
					Redeploy a stack
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
					dockercloud
				Element:span
					stack
				Element:span
					=
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					Stack
				Element:span
					.
				Element:span
					fetch
				Element:span
					(
				Element:span
					"46aca402-2109-4a70-a378-760cfed43816"
				Element:span
					)
				Element:span
					stack
				Element:span
					.
				Element:span
					redeploy
				Element:span
					()
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
				Element:span
					"github.com/docker/go-dockercloud/dockercloud"
				Element:span
				Element:span
					stack
				Element:span
					,
				Element:span
				Element:span
					err
				Element:span
				Element:span
					:=
				Element:span
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					GetStack
				Element:span
					(
				Element:span
					"46aca402-2109-4a70-a378-760cfed43816"
				Element:span
					)
				Element:span
				Element:span
					if
				Element:span
				Element:span
					err
				Element:span
				Element:span
					!=
				Element:span
				Element:span
					nil
				Element:span
				Element:span
					{
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Println
				Element:span
					(
				Element:span
					err
				Element:span
					)
				Element:span
				Element:span
					}
				Element:span
				Element:span
					//Redeploy(dockercloud.ReuseVolumesOption{Reuse: true}) to reuse the existing volumes
				Element:span
				Element:span
					//Redeploy(dockercloud.ReuseVolumesOption{Reuse: false}) to not reuse the existing volumes
				Element:span
				Element:span
					if
				Element:span
				Element:span
					err
				Element:span
				Element:span
					=
				Element:span
				Element:span
					stack
				Element:span
					.
				Element:span
					Redeploy
				Element:span
					(
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					ReuseVolumesOption
				Element:span
					{
				Element:span
					Reuse
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					});
				Element:span
				Element:span
					err
				Element:span
				Element:span
					!=
				Element:span
				Element:span
					nil
				Element:span
				Element:span
					{
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Println
				Element:span
					(
				Element:span
					err
				Element:span
					)
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					POST
				Element:span
					/api/app/v1/stack/46aca402-2109-4a70-a378-760cfed43816/redeploy/
				Element:span
					HTTP
				Element:span
					/
				Element:span
					1.1
				Element:span
					Host
				Element:span
					:
				Element:span
					cloud.docker.com
				Element:span
					Authorization
				Element:span
					:
				Element:span
					Basic dXNlcm5hbWU6YXBpa2V5
				Element:span
					Accept
				Element:span
					:
				Element:span
					application/json
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					docker-cloud stack redeploy 46aca402
			Node:
			(type) c
			(layer)1
				Element:p
					Redeploys all the services in the stack.
			Node:
			(type) c
			(layer)1
				Element:h3
					Endpoint Type
			Node:
			(type) c
			(layer)1
				Element:p
					Available in Docker Cloud’s
				Element:strong
					REST API
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					POST /api/app/v1/[optional_namespace/]stack/(uuid)/redeploy/
			Node:
			(type) c
			(layer)1
				Element:h3
					Path Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					uuid
				Element:td
					The UUID of the stack to redeploy
			Node:
			(type) c
			(layer)1
				Element:h3
					Query Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					reuse_volumes
				Element:td
					Wheather to reuse container volumes for this redeploy operation or not (default:
				Element:code
					true
					).
			Node:
			(type) c
			(layer)1
				Element:h2
					Terminate a stack
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
					dockercloud
				Element:span
					stack
				Element:span
					=
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					Stack
				Element:span
					.
				Element:span
					fetch
				Element:span
					(
				Element:span
					"46aca402-2109-4a70-a378-760cfed43816"
				Element:span
					)
				Element:span
					stack
				Element:span
					.
				Element:span
					delete
				Element:span
					()
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
				Element:span
					"github.com/docker/go-dockercloud/dockercloud"
				Element:span
				Element:span
					stack
				Element:span
					,
				Element:span
				Element:span
					err
				Element:span
				Element:span
					:=
				Element:span
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					GetStack
				Element:span
					(
				Element:span
					"46aca402-2109-4a70-a378-760cfed43816"
				Element:span
					)
				Element:span
				Element:span
					if
				Element:span
				Element:span
					err
				Element:span
				Element:span
					!=
				Element:span
				Element:span
					nil
				Element:span
				Element:span
					{
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Println
				Element:span
					(
				Element:span
					err
				Element:span
					)
				Element:span
				Element:span
					}
				Element:span
				Element:span
					if
				Element:span
				Element:span
					err
				Element:span
				Element:span
					=
				Element:span
				Element:span
					stack
				Element:span
					.
				Element:span
					Terminate
				Element:span
					();
				Element:span
				Element:span
					err
				Element:span
				Element:span
					!=
				Element:span
				Element:span
					nil
				Element:span
				Element:span
					{
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Println
				Element:span
					(
				Element:span
					err
				Element:span
					)
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					DELETE
				Element:span
					/api/app/v1/stack/46aca402-2109-4a70-a378-760cfed43816/
				Element:span
					HTTP
				Element:span
					/
				Element:span
					1.1
				Element:span
					Host
				Element:span
					:
				Element:span
					cloud.docker.com
				Element:span
					Authorization
				Element:span
					:
				Element:span
					Basic dXNlcm5hbWU6YXBpa2V5
				Element:span
					Accept
				Element:span
					:
				Element:span
					application/json
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					docker-cloud stack terminate 46aca402
			Node:
			(type) c
			(layer)1
				Element:p
					Terminate all the services in a the stack and the stack itself.
			Node:
			(type) c
			(layer)1
				Element:h3
					Endpoint Type
			Node:
			(type) c
			(layer)1
				Element:p
					Available in Docker Cloud’s
				Element:strong
					REST API
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					DELETE /api/app/v1/[optional_namespace/]stack/(uuid)/
			Node:
			(type) c
			(layer)1
				Element:h3
					Path Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					uuid
				Element:td
					The UUID of the stack to terminate
			Node:
			(type) h1
			(layer)1
				Element:h1
					Services
			Node:
			(type) c
			(layer)1
				Element:h2
					Service
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"autodestroy"
				Element:span
					:
				Element:span
				Element:span
					"OFF"
				Element:span
					,
				Element:span
				Element:span
					"autoredeploy"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"autorestart"
				Element:span
					:
				Element:span
				Element:span
					"ON_FAILURE"
				Element:span
					,
				Element:span
				Element:span
					"bindings"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"host_path"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"container_path"
				Element:span
					:
				Element:span
				Element:span
					"/tmp"
				Element:span
					,
				Element:span
				Element:span
					"rewritable"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"volumes_from"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"host_path"
				Element:span
					:
				Element:span
				Element:span
					"/etc"
				Element:span
					,
				Element:span
				Element:span
					"container_path"
				Element:span
					:
				Element:span
				Element:span
					"/etc"
				Element:span
					,
				Element:span
				Element:span
					"rewritable"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"volumes_from"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"host_path"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"container_path"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"rewritable"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"volumes_from"
				Element:span
					:
				Element:span
				Element:span
					"/api/app/v1/user_namespace/service/2f4f54e5-9d3b-4ac1-85ad-a2d4ff25a179/"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					],
				Element:span
				Element:span
					"cap_add"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					"ALL"
				Element:span
				Element:span
					],
				Element:span
				Element:span
					"cap_drop"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					"NET_ADMIN"
				Element:span
					,
				Element:span
				Element:span
					"SYS_ADMIN"
				Element:span
				Element:span
					],
				Element:span
				Element:span
					"container_envvars"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"key"
				Element:span
					:
				Element:span
				Element:span
					"DB_PASS"
				Element:span
					,
				Element:span
				Element:span
					"value"
				Element:span
					:
				Element:span
				Element:span
					"test"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					],
				Element:span
				Element:span
					"container_ports"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"endpoint_uri"
				Element:span
					:
				Element:span
				Element:span
					"http://wordpress-stackable.admin.srv.dockerapp.io:80/"
				Element:span
					,
				Element:span
				Element:span
					"inner_port"
				Element:span
					:
				Element:span
				Element:span
					80
				Element:span
					,
				Element:span
				Element:span
					"outer_port"
				Element:span
					:
				Element:span
				Element:span
					80
				Element:span
					,
				Element:span
				Element:span
					"port_name"
				Element:span
					:
				Element:span
				Element:span
					"http"
				Element:span
					,
				Element:span
				Element:span
					"protocol"
				Element:span
					:
				Element:span
				Element:span
					"tcp"
				Element:span
					,
				Element:span
				Element:span
					"published"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
				Element:span
					}
				Element:span
				Element:span
					],
				Element:span
				Element:span
					"containers"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					"/api/app/v1/user_namespace/container/6f8ee454-9dc3-4387-80c3-57aac1be3cc6/"
				Element:span
					,
				Element:span
				Element:span
					"/api/app/v1/user_namespace/container/fdf9c116-7c08-4a60-b0ce-c54ca72c2f25/"
				Element:span
				Element:span
					],
				Element:span
				Element:span
					"cpu_shares"
				Element:span
					:
				Element:span
				Element:span
					100
				Element:span
					,
				Element:span
				Element:span
					"cpuset"
				Element:span
					:
				Element:span
				Element:span
					"0,1"
				Element:span
					,
				Element:span
				Element:span
					"cgroup_parent"
				Element:span
					:
				Element:span
				Element:span
					"m-executor-abcd"
				Element:span
					,
				Element:span
				Element:span
					"current_num_containers"
				Element:span
					:
				Element:span
				Element:span
					2
				Element:span
					,
				Element:span
				Element:span
					"deployed_datetime"
				Element:span
					:
				Element:span
				Element:span
					"Mon, 13 Oct 2014 11:01:43 +0000"
				Element:span
					,
				Element:span
				Element:span
					"deployment_strategy"
				Element:span
					:
				Element:span
				Element:span
					"EMPTIEST_NODE"
				Element:span
					,
				Element:span
				Element:span
					"destroyed_datetime"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"devices"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					"/dev/ttyUSB0:/dev/ttyUSB0"
				Element:span
				Element:span
					],
				Element:span
				Element:span
					"dns"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					"8.8.8.8"
				Element:span
				Element:span
					],
				Element:span
				Element:span
					"dns_search"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					"example.com"
				Element:span
				Element:span
					],
				Element:span
				Element:span
					"domainname"
				Element:span
					:
				Element:span
				Element:span
					"domainname"
				Element:span
					,
				Element:span
				Element:span
					"entrypoint"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"extra_hosts"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					"onehost:50.31.209.229"
				Element:span
				Element:span
					],
				Element:span
				Element:span
					"hostname"
				Element:span
					:
				Element:span
				Element:span
					"hostname"
				Element:span
					,
				Element:span
				Element:span
					"image_name"
				Element:span
					:
				Element:span
				Element:span
					"tutum/wordpress-stackable:latest"
				Element:span
					,
				Element:span
				Element:span
					"nickname"
				Element:span
					:
				Element:span
				Element:span
					"wordpress-stackable"
				Element:span
					,
				Element:span
				Element:span
					"labels"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"com.example.description"
				Element:span
					:
				Element:span
				Element:span
					"Accounting webapp"
				Element:span
					,
				Element:span
				Element:span
					"com.example.department"
				Element:span
					:
				Element:span
				Element:span
					"Finance"
				Element:span
					,
				Element:span
				Element:span
					"com.example.label-with-empty-value"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"link_variables"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"WORDPRESS_STACKABLE_1_ENV_DB_HOST"
				Element:span
					:
				Element:span
				Element:span
					"**LinkMe**"
				Element:span
					,
				Element:span
				Element:span
					"WORDPRESS_STACKABLE_1_ENV_DB_NAME"
				Element:span
					:
				Element:span
				Element:span
					"wordpress"
				Element:span
					,
				Element:span
				Element:span
					"WORDPRESS_STACKABLE_1_ENV_DB_PASS"
				Element:span
					:
				Element:span
				Element:span
					"szVaPz925B7I"
				Element:span
					,
				Element:span
				Element:span
					"WORDPRESS_STACKABLE_1_ENV_DB_PORT"
				Element:span
					:
				Element:span
				Element:span
					"**LinkMe**"
				Element:span
					,
				Element:span
				Element:span
					"WORDPRESS_STACKABLE_1_ENV_DB_USER"
				Element:span
					:
				Element:span
				Element:span
					"admin"
				Element:span
					,
				Element:span
				Element:span
					"WORDPRESS_STACKABLE_1_ENV_DEBIAN_FRONTEND"
				Element:span
					:
				Element:span
				Element:span
					"noninteractive"
				Element:span
					,
				Element:span
				Element:span
					"WORDPRESS_STACKABLE_1_ENV_HOME"
				Element:span
					:
				Element:span
				Element:span
					"/"
				Element:span
					,
				Element:span
				Element:span
					"WORDPRESS_STACKABLE_1_ENV_PATH"
				Element:span
					:
				Element:span
				Element:span
					"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
				Element:span
					,
				Element:span
				Element:span
					"WORDPRESS_STACKABLE_1_PORT"
				Element:span
					:
				Element:span
				Element:span
					"tcp://wordpress-stackable-1.admin.cont.dockerapp.io:49153"
				Element:span
					,
				Element:span
				Element:span
					"WORDPRESS_STACKABLE_1_PORT_80_TCP"
				Element:span
					:
				Element:span
				Element:span
					"tcp://wordpress-stackable-1.admin.cont.dockerapp.io:49153"
				Element:span
					,
				Element:span
				Element:span
					"WORDPRESS_STACKABLE_1_PORT_80_TCP_ADDR"
				Element:span
					:
				Element:span
				Element:span
					"wordpress-stackable-1.admin.cont.dockerapp.io"
				Element:span
					,
				Element:span
				Element:span
					"WORDPRESS_STACKABLE_1_PORT_80_TCP_PORT"
				Element:span
					:
				Element:span
				Element:span
					"49153"
				Element:span
					,
				Element:span
				Element:span
					"WORDPRESS_STACKABLE_1_PORT_80_TCP_PROTO"
				Element:span
					:
				Element:span
				Element:span
					"tcp"
				Element:span
					,
				Element:span
				Element:span
					"WORDPRESS_STACKABLE_2_ENV_DB_HOST"
				Element:span
					:
				Element:span
				Element:span
					"**LinkMe**"
				Element:span
					,
				Element:span
				Element:span
					"WORDPRESS_STACKABLE_2_ENV_DB_NAME"
				Element:span
					:
				Element:span
				Element:span
					"wordpress"
				Element:span
					,
				Element:span
				Element:span
					"WORDPRESS_STACKABLE_2_ENV_DB_PASS"
				Element:span
					:
				Element:span
				Element:span
					"szVaPz925B7I"
				Element:span
					,
				Element:span
				Element:span
					"WORDPRESS_STACKABLE_2_ENV_DB_PORT"
				Element:span
					:
				Element:span
				Element:span
					"**LinkMe**"
				Element:span
					,
				Element:span
				Element:span
					"WORDPRESS_STACKABLE_2_ENV_DB_USER"
				Element:span
					:
				Element:span
				Element:span
					"admin"
				Element:span
					,
				Element:span
				Element:span
					"WORDPRESS_STACKABLE_2_ENV_DEBIAN_FRONTEND"
				Element:span
					:
				Element:span
				Element:span
					"noninteractive"
				Element:span
					,
				Element:span
				Element:span
					"WORDPRESS_STACKABLE_2_ENV_HOME"
				Element:span
					:
				Element:span
				Element:span
					"/"
				Element:span
					,
				Element:span
				Element:span
					"WORDPRESS_STACKABLE_2_ENV_PATH"
				Element:span
					:
				Element:span
				Element:span
					"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
				Element:span
					,
				Element:span
				Element:span
					"WORDPRESS_STACKABLE_2_PORT"
				Element:span
					:
				Element:span
				Element:span
					"tcp://wordpress-stackable-2.admin.cont.dockerapp.io:49154"
				Element:span
					,
				Element:span
				Element:span
					"WORDPRESS_STACKABLE_2_PORT_80_TCP"
				Element:span
					:
				Element:span
				Element:span
					"tcp://wordpress-stackable-2.admin.cont.dockerapp.io:49154"
				Element:span
					,
				Element:span
				Element:span
					"WORDPRESS_STACKABLE_2_PORT_80_TCP_ADDR"
				Element:span
					:
				Element:span
				Element:span
					"wordpress-stackable-2.admin.cont.dockerapp.io"
				Element:span
					,
				Element:span
				Element:span
					"WORDPRESS_STACKABLE_2_PORT_80_TCP_PORT"
				Element:span
					:
				Element:span
				Element:span
					"49154"
				Element:span
					,
				Element:span
				Element:span
					"WORDPRESS_STACKABLE_2_PORT_80_TCP_PROTO"
				Element:span
					:
				Element:span
				Element:span
					"tcp"
				Element:span
					,
				Element:span
				Element:span
					"WORDPRESS_STACKABLE_ENV_DB_HOST"
				Element:span
					:
				Element:span
				Element:span
					"**LinkMe**"
				Element:span
					,
				Element:span
				Element:span
					"WORDPRESS_STACKABLE_ENV_DB_NAME"
				Element:span
					:
				Element:span
				Element:span
					"wordpress"
				Element:span
					,
				Element:span
				Element:span
					"WORDPRESS_STACKABLE_ENV_DB_PASS"
				Element:span
					:
				Element:span
				Element:span
					"szVaPz925B7I"
				Element:span
					,
				Element:span
				Element:span
					"WORDPRESS_STACKABLE_ENV_DB_PORT"
				Element:span
					:
				Element:span
				Element:span
					"**LinkMe**"
				Element:span
					,
				Element:span
				Element:span
					"WORDPRESS_STACKABLE_ENV_DB_USER"
				Element:span
					:
				Element:span
				Element:span
					"admin"
				Element:span
					,
				Element:span
				Element:span
					"WORDPRESS_STACKABLE_ENV_DEBIAN_FRONTEND"
				Element:span
					:
				Element:span
				Element:span
					"noninteractive"
				Element:span
					,
				Element:span
				Element:span
					"WORDPRESS_STACKABLE_ENV_HOME"
				Element:span
					:
				Element:span
				Element:span
					"/"
				Element:span
					,
				Element:span
				Element:span
					"WORDPRESS_STACKABLE_ENV_PATH"
				Element:span
					:
				Element:span
				Element:span
					"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
				Element:span
					,
				Element:span
				Element:span
					"WORDPRESS_STACKABLE_PORT"
				Element:span
					:
				Element:span
				Element:span
					"tcp://wordpress-stackable-1.admin.cont.dockerapp.io:49153"
				Element:span
					,
				Element:span
				Element:span
					"WORDPRESS_STACKABLE_PORT_80_TCP"
				Element:span
					:
				Element:span
				Element:span
					"tcp://wordpress-stackable-1.admin.cont.dockerapp.io:49153"
				Element:span
					,
				Element:span
				Element:span
					"WORDPRESS_STACKABLE_PORT_80_TCP_ADDR"
				Element:span
					:
				Element:span
				Element:span
					"wordpress-stackable-1.admin.cont.dockerapp.io"
				Element:span
					,
				Element:span
				Element:span
					"WORDPRESS_STACKABLE_PORT_80_TCP_PORT"
				Element:span
					:
				Element:span
				Element:span
					"49153"
				Element:span
					,
				Element:span
				Element:span
					"WORDPRESS_STACKABLE_PORT_80_TCP_PROTO"
				Element:span
					:
				Element:span
				Element:span
					"tcp"
				Element:span
					,
				Element:span
				Element:span
					"WORDPRESS_STACKABLE_DOCKERCLOUD_API_URL"
				Element:span
					:
				Element:span
				Element:span
					"https://cloud.docker.com/api/app/v1/user_namespace/service/adeebc1b-1b81-4af0-b8f2-cefffc69d7fb/"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"linked_from_service"
				Element:span
					:
				Element:span
				Element:span
					[],
				Element:span
				Element:span
					"linked_to_service"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"from_service"
				Element:span
					:
				Element:span
				Element:span
					"/api/app/v1/user_namespace/service/09cbcf8d-a727-40d9-b420-c8e18b7fa55b/"
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"DB"
				Element:span
					,
				Element:span
				Element:span
					"to_service"
				Element:span
					:
				Element:span
				Element:span
					"/api/app/v1/user_namespace/service/72f175bd-390b-46e3-9463-830aca32ce3e/"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					],
				Element:span
				Element:span
					"mac_address"
				Element:span
					:
				Element:span
				Element:span
					"02:42:ac:11:65:43"
				Element:span
					,
				Element:span
				Element:span
					"memory"
				Element:span
					:
				Element:span
				Element:span
					2048
				Element:span
					,
				Element:span
				Element:span
					"memory_swap"
				Element:span
					:
				Element:span
				Element:span
					8192
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"wordpress-stackable"
				Element:span
					,
				Element:span
				Element:span
					"net"
				Element:span
					:
				Element:span
				Element:span
					"bridge"
				Element:span
					,
				Element:span
				Element:span
					"privileged"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"public_dns"
				Element:span
					:
				Element:span
				Element:span
					"wordpress-stackable.admin.svc.dockerapp.io"
				Element:span
					,
				Element:span
				Element:span
					"read_only"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"resource_uri"
				Element:span
					:
				Element:span
				Element:span
					"/api/app/v1/user_namespace/service/09cbcf8d-a727-40d9-b420-c8e18b7fa55b/"
				Element:span
					,
				Element:span
				Element:span
					"roles"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
					"global"
				Element:span
					],
				Element:span
				Element:span
					"run_command"
				Element:span
					:
				Element:span
				Element:span
					"/run-wordpress.sh"
				Element:span
					,
				Element:span
				Element:span
					"running_num_containers"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"security_opt"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					],
				Element:span
				Element:span
					"sequential_deployment"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"started_datetime"
				Element:span
					:
				Element:span
				Element:span
					"Mon, 13 Oct 2014 11:01:43 +0000"
				Element:span
					,
				Element:span
				Element:span
					"state"
				Element:span
					:
				Element:span
				Element:span
					"Partly running"
				Element:span
					,
				Element:span
				Element:span
					"stack"
				Element:span
					:
				Element:span
				Element:span
					"/api/app/v1/user_namespace/stack/46aca402-2109-4a70-a378-760cfed43816/"
				Element:span
					,
				Element:span
				Element:span
					"stdin_open"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"stopped_datetime"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"stopped_num_containers"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"synchronized"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"tags"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"tag_one"
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"tag-two"
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"tagthree3"
				Element:span
					}
				Element:span
				Element:span
					],
				Element:span
				Element:span
					"target_num_containers"
				Element:span
					:
				Element:span
				Element:span
					2
				Element:span
					,
				Element:span
				Element:span
					"tty"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"user"
				Element:span
					:
				Element:span
				Element:span
					"root"
				Element:span
					,
				Element:span
				Element:span
					"uuid"
				Element:span
					:
				Element:span
				Element:span
					"09cbcf8d-a727-40d9-b420-c8e18b7fa55b"
				Element:span
					,
				Element:span
				Element:span
					"working_dir"
				Element:span
					:
				Element:span
				Element:span
					"/app"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					A service is a template used to deploy one or more containers.
			Node:
			(type) c
			(layer)1
				Element:p
					This is a
				Element:a
					namespaced endpoint
					.
			Node:
			(type) c
			(layer)1
				Element:h3
					Attributes
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Attribute
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					uuid
				Element:td
					A unique identifier for the service generated automatically on creation
				Element:tr
				Element:td
					resource_uri
				Element:td
					A unique API endpoint that represents the service
				Element:tr
				Element:td
					image_name
				Element:td
					The Docker image name and tag used for the service containers
				Element:tr
				Element:td
					name
				Element:td
					A user provided name for the service. This name will be inherited by the service containers and will be used in endpoint URLs, environment variable names, etc.
				Element:tr
				Element:td
					public_dns
				Element:td
					An external FQDN that resolves to all IPs of the nodes where the service containers are running on (as an
				Element:code
					A
					record with multiple IP entries which will be used by clients in a
				Element:a
					round-robin fashion
					). If the service is not publishing any ports, this FQDN will fail to resolve.
				Element:tr
				Element:td
					state
				Element:td
					The state of the service (see table
				Element:code
					Service states
					below)
				Element:tr
				Element:td
					net
				Element:td
					Network mode to set on the containers (see table
				Element:code
					Network Modes
					below, more information /docker-cloud/apps/service-links/)
				Element:tr
				Element:td
					pid
				Element:td
					Set the PID (Process) Namespace mode for the containers (
				Element:a
					more information
					)
				Element:tr
				Element:td
					synchronized
				Element:td
					Flag indicating if the current service definition is synchronized with the current containers.
				Element:tr
				Element:td
					deployed_datetime
				Element:td
					The date and time of the last deployment of the service (if applicable,
				Element:code
					null
					otherwise)
				Element:tr
				Element:td
					started_datetime
				Element:td
					The date and time of the last
				Element:code
					start
					operation on the service (if applicable,
				Element:code
					null
					otherwise)
				Element:tr
				Element:td
					stopped_datetime
				Element:td
					The date and time of the last
				Element:code
					stop
					operation on the service (if applicable,
				Element:code
					null
					otherwise)
				Element:tr
				Element:td
					destroyed_datetime
				Element:td
					The date and time of the
				Element:code
					terminate
					operation on the service (if applicable,
				Element:code
					null
					otherwise)
				Element:tr
				Element:td
					target_num_containers
				Element:td
					The requested number of containers to deploy for the service
				Element:tr
				Element:td
					current_num_containers
				Element:td
					The actual number of containers deployed for the service
				Element:tr
				Element:td
					running_num_containers
				Element:td
					The actual number of containers deployed for the service in
				Element:code
					Running
					state
				Element:tr
				Element:td
					stopped_num_containers
				Element:td
					The actual number of containers deployed for the service in
				Element:code
					Stopped
					state
				Element:tr
				Element:td
					stack
				Element:td
					Resource URIs of the stack that the service belongs to
				Element:tr
				Element:td
					containers
				Element:td
					List of resource URIs of the containers launched as part of the service
				Element:tr
				Element:td
					container_ports
				Element:td
					List of ports to be published on the containers of this service (see table
				Element:code
					Service Port attributes
					below)
				Element:tr
				Element:td
					container_envvars
				Element:td
					List of user-defined environment variables to set on the containers of the service, which will override the image environment variables (see table
				Element:code
					Service Environment Variable attributes
					below)
				Element:tr
				Element:td
					labels
				Element:td
					Metadata in form of dictionary used for every container of this service
				Element:tr
				Element:td
					working_dir
				Element:td
					Working directory for running binaries within a container of this service
				Element:tr
				Element:td
					user
				Element:td
					Set the user used on containers of this service (
				Element:code
					root
					by default)
				Element:tr
				Element:td
					hostname
				Element:td
					Set the hostname used on containers of this service
				Element:tr
				Element:td
					domainname
				Element:td
					Set the domainname used on containers of this service
				Element:tr
				Element:td
					mac_address
				Element:td
					Ethernet device’s MAC address used on containers of this service
				Element:tr
				Element:td
					cgroup_name
				Element:td
					Optional parent cgroup used on containers of this service.
				Element:tr
				Element:td
					tty
				Element:td
					If the containers of this service have the tty enable (
				Element:code
					false
					by default)
				Element:tr
				Element:td
					stdin_open
				Element:td
					If the containers of this service have stdin opened (
				Element:code
					false
					by default)
				Element:tr
				Element:td
					dns
				Element:td
					Custom DNS servers for containers of this service
				Element:tr
				Element:td
					dns_search
				Element:td
					Custom DNS search domain for containers of this service
				Element:tr
				Element:td
					cap_add
				Element:td
					Added capabilities for containers of this service
				Element:tr
				Element:td
					cap_drop
				Element:td
					Dropped capabilities for containers of this service
				Element:tr
				Element:td
					devices
				Element:td
					List of device mappings for containers of this service
				Element:tr
				Element:td
					extra_hosts
				Element:td
					List of hostname mappings for containers of this service
				Element:tr
				Element:td
					secuirty_opt
				Element:td
					Labeling scheme for containers of this service
				Element:tr
				Element:td
					entrypoint
				Element:td
					Entrypoint to be set on the containers launched as part of the service, which will override the image entrypoint
				Element:tr
				Element:td
					run_command
				Element:td
					Run command to be set on the containers launched as part of the service, which will override the image run command
				Element:tr
				Element:td
					sequential_deployment
				Element:td
					Whether the containers for this service should be deployed in sequence, linking each of them to the previous containers (see
				Element:a
					Service scaling
					for more information)
				Element:tr
				Element:td
					cpu_shares
				Element:td
					The relative CPU priority of the containers of the service (see
				Element:a
					Runtime Constraints on CPU and Memory
					for more information)
				Element:tr
				Element:td
					cpuset
				Element:td
					CPUs in which to allow execution
				Element:tr
				Element:td
					memory
				Element:td
					The memory limit of the containers of the service in MB (see
				Element:a
					Runtime Constraints on CPU and Memory
					for more information)
				Element:tr
				Element:td
					memory_swap
				Element:td
					Total memory limit (memory + swap) of the containers of the service in MB
				Element:tr
				Element:td
					linked_from_service
				Element:td
					A list of services that are linked to this one (see table
				Element:code
					Related services attributes
					below)
				Element:tr
				Element:td
					linked_to_service
				Element:td
					A list of services that the service is linked to (see table
				Element:code
					Related services attributes
					below)
				Element:tr
				Element:td
					bindings
				Element:td
					A list of volume bindings that the service has mounted (see table
				Element:code
					Service binding attributes
					below)
				Element:tr
				Element:td
					autorestart
				Element:td
					Whether to restart the containers of the service automatically if they stop (see
				Element:a
					Crash recovery
					for more information)
				Element:tr
				Element:td
					autodestroy
				Element:td
					Whether to terminate the containers of the service automatically if they stop (see
				Element:a
					Autodestroy
					for more information)
				Element:tr
				Element:td
					roles
				Element:td
					List of Docker Cloud roles assigned to this service (see
				Element:a
					Service links
					for more information)
				Element:tr
				Element:td
					link_variables
				Element:td
					List of environment variables that would be exposed in the containers if they are linked to this service
				Element:tr
				Element:td
					privileged
				Element:td
					Whether to start the containers with Docker’s
				Element:code
					privileged
					flag set or not, which allows containers to access all devices on the host among other things (see
				Element:a
					Runtime privilege
					for more information)
				Element:tr
				Element:td
					read_only
				Element:td
					Whether the filesystem of every service container is read-only or not (
				Element:code
					false
					by default)
				Element:tr
				Element:td
					deployment_strategy
				Element:td
					Container distribution among nodes (see table
				Element:code
					Deployment strategies
					below and
				Element:a
					Deployment strategies
					for more information)
				Element:tr
				Element:td
					tags
				Element:td
					List of tags to be used to deploy the service (see
				Element:a
					Tags
					for more information)
				Element:tr
				Element:td
					autoredeploy
				Element:td
					Whether to redeploy the containers of the service when its image is updated in Docker Cloud registry (see
				Element:a
					Docker Cloud’s private registry
					for more information)
				Element:tr
				Element:td
					nickname
				Element:td
					A user-friendly name for the service (
				Element:code
					name
					by default)
			Node:
			(type) c
			(layer)1
				Element:h3
					Service binding attributes
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Attribute
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					host_path
				Element:td
					The host path of the volume
				Element:tr
				Element:td
					container_path
				Element:td
					The container path where the volume is mounted
				Element:tr
				Element:td
					rewritable
				Element:td
				Element:code
					true
					is the volume has writable permissions
				Element:tr
				Element:td
					volumes_from
				Element:td
					The resource URI of the service
			Node:
			(type) c
			(layer)1
				Element:h3
					Service Port attributes
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Attribute
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					protocol
				Element:td
					The protocol of the port, either
				Element:code
					tcp
					or
				Element:code
					udp
				Element:tr
				Element:td
					inner_port
				Element:td
					The published port number inside the container
				Element:tr
				Element:td
					outer_port
				Element:td
					The published port number in the node public network interface
				Element:tr
				Element:td
					port_name
				Element:td
					Name of the service associated to this port
				Element:tr
				Element:td
					endpoint_uri
				Element:td
					The URI of the service endpoint for this port
				Element:tr
				Element:td
					published
				Element:td
					Whether the port has been published in the host public network interface or not. Non-published ports can only be accessed via links.
			Node:
			(type) c
			(layer)1
				Element:h3
					Service Environment Variable attributes
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Attribute
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					key
				Element:td
					The name of the environment variable
				Element:tr
				Element:td
					value
				Element:td
					The value of the environment variable
			Node:
			(type) c
			(layer)1
				Element:h3
					Related services attributes
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Attribute
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					name
				Element:td
					The link name
				Element:tr
				Element:td
					from_service
				Element:td
					The resource URI of the origin of the link
				Element:tr
				Element:td
					to_service
				Element:td
					The resource URI of the target of the link
			Node:
			(type) c
			(layer)1
				Element:h3
					Service states
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					State
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					Not running
				Element:td
					The service has been created and has no deployed containers yet. Possible actions in this state:
				Element:code
					start
					,
				Element:code
					terminate
					.
				Element:tr
				Element:td
					Starting
				Element:td
					All containers for the service are either starting or already running. No actions allowed in this state.
				Element:tr
				Element:td
					Running
				Element:td
					All containers for the service are deployed and running. Possible actions in this state:
				Element:code
					stop
					,
				Element:code
					redeploy
					,
				Element:code
					terminate
					.
				Element:tr
				Element:td
					Partly running
				Element:td
					One or more containers of the service are deployed and running. Possible actions in this state:
				Element:code
					stop
					,
				Element:code
					redeploy
					,
				Element:code
					terminate
					.
				Element:tr
				Element:td
					Scaling
				Element:td
					The service is either deploying new containers or destroying existing ones responding to a scaling request. No actions allowed in this state.
				Element:tr
				Element:td
					Redeploying
				Element:td
					The service is redeploying all its containers with the updated configuration. No actions allowed in this state.
				Element:tr
				Element:td
					Stopping
				Element:td
					All containers for the service are either stopping or already stopped. No actions allowed in this state.
				Element:tr
				Element:td
					Stopped
				Element:td
					All containers for the service are stopped. Possible actions in this state:
				Element:code
					start
					,
				Element:code
					redeploy
					,
				Element:code
					terminate
					.
				Element:tr
				Element:td
					Terminating
				Element:td
					All containers for the service are either being terminated or already terminated. No actions allowed in this state.
				Element:tr
				Element:td
					Terminated
				Element:td
					The service and all its containers have been terminated. No actions allowed in this state.
			Node:
			(type) c
			(layer)1
				Element:h3
					Deployment strategies
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Strategy
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					EMPTIEST_NODE
				Element:td
					It will deploy containers to the node with the lower total amount of running containers (default).
				Element:tr
				Element:td
					HIGH_AVAILABILITY
				Element:td
					It will deploy containers to the node with the lower amount of running containers of the same service.
				Element:tr
				Element:td
					EVERY_NODE
				Element:td
					It will deploy one container on every node. The service won’t be able to scale manually. New containers will be deployed to new nodes automatically.
			Node:
			(type) c
			(layer)1
				Element:h3
					Network Modes
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Strategy
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					bridge
				Element:td
					Creates a new network stack for the container on the docker bridge.
				Element:tr
				Element:td
					host
				Element:td
					Uses the host network stack inside the container.
			Node:
			(type) c
			(layer)1
				Element:h2
					List all services
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
					dockercloud
				Element:span
					services
				Element:span
					=
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					Service
				Element:span
					.
				Element:span
					list
				Element:span
					()
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
				Element:span
					"github.com/docker/go-dockercloud/dockercloud"
				Element:span
				Element:span
					serviceList
				Element:span
					,
				Element:span
				Element:span
					err
				Element:span
				Element:span
					:=
				Element:span
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					ListServices
				Element:span
					()
				Element:span
				Element:span
					if
				Element:span
				Element:span
					err
				Element:span
				Element:span
					!=
				Element:span
				Element:span
					nil
				Element:span
				Element:span
					{
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Println
				Element:span
					(
				Element:span
					err
				Element:span
					)
				Element:span
				Element:span
					}
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Println
				Element:span
					(
				Element:span
					serviceList
				Element:span
					)
				Element:span
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					GET
				Element:span
					/api/app/v1/service/
				Element:span
					HTTP
				Element:span
					/
				Element:span
					1.1
				Element:span
					Host
				Element:span
					:
				Element:span
					cloud.docker.com
				Element:span
					Authorization
				Element:span
					:
				Element:span
					Basic dXNlcm5hbWU6YXBpa2V5
				Element:span
					Accept
				Element:span
					:
				Element:span
					application/json
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					docker-cloud service ps
			Node:
			(type) c
			(layer)1
				Element:p
					Lists all current and recently terminated services. Returns a list of
				Element:code
					Service
					objects.
			Node:
			(type) c
			(layer)1
				Element:h3
					Endpoint Type
			Node:
			(type) c
			(layer)1
				Element:p
					Available in Docker Cloud’s
				Element:strong
					REST API
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET /api/app/v1/[optional_namespace/]service/
			Node:
			(type) c
			(layer)1
				Element:h3
					Query Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					uuid
				Element:td
					Filter by UUID
				Element:tr
				Element:td
					state
				Element:td
					Filter by state. Possible values:
				Element:code
					Not running
					,
				Element:code
					Starting
					,
				Element:code
					Running
					,
				Element:code
					Partly running
					,
				Element:code
					Scaling
					,
				Element:code
					Redeploying
					,
				Element:code
					Stopping
					,
				Element:code
					Stopped
					,
				Element:code
					Terminating
					,
				Element:code
					Terminated
				Element:tr
				Element:td
					name
				Element:td
					Filter by service name
				Element:tr
				Element:td
					stack
				Element:td
					Filter by resource URI of the target stack.
			Node:
			(type) c
			(layer)1
				Element:h2
					Create a new service
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
					dockercloud
				Element:span
					service
				Element:span
					=
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					Service
				Element:span
					.
				Element:span
					create
				Element:span
					(
				Element:span
					image
				Element:span
					=
				Element:span
					"tutum/hello-world"
				Element:span
					,
				Element:span
					name
				Element:span
					=
				Element:span
					"my-new-app"
				Element:span
					,
				Element:span
					target_num_containers
				Element:span
					=
				Element:span
					2
				Element:span
					)
				Element:span
					service
				Element:span
					.
				Element:span
					save
				Element:span
					()
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
				Element:span
					"github.com/docker/go-dockercloud/dockercloud"
				Element:span
				Element:span
					service
				Element:span
					,
				Element:span
				Element:span
					err
				Element:span
				Element:span
					:=
				Element:span
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					CreateService
				Element:span
					(
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					ServiceCreateRequest
				Element:span
					{
				Element:span
					Image
				Element:span
					:
				Element:span
				Element:span
					"tutum/hello-world"
				Element:span
					,
				Element:span
				Element:span
					Name
				Element:span
					:
				Element:span
				Element:span
					"my-new-app"
				Element:span
					,
				Element:span
				Element:span
					Target_num_containers
				Element:span
					:
				Element:span
				Element:span
					2
				Element:span
					})
				Element:span
				Element:span
					if
				Element:span
				Element:span
					err
				Element:span
				Element:span
					!=
				Element:span
				Element:span
					nil
				Element:span
				Element:span
					{
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Println
				Element:span
					(
				Element:span
					err
				Element:span
					)
				Element:span
				Element:span
					}
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Println
				Element:span
					(
				Element:span
					service
				Element:span
					)
				Element:span
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					POST
				Element:span
					/api/app/v1/service/
				Element:span
					HTTP
				Element:span
					/
				Element:span
					1.1
				Element:span
					Host
				Element:span
					:
				Element:span
					cloud.docker.com
				Element:span
					Authorization
				Element:span
					:
				Element:span
					Basic dXNlcm5hbWU6YXBpa2V5
				Element:span
					Accept
				Element:span
					:
				Element:span
					application/json
				Element:span
					Content-Type
				Element:span
					:
				Element:span
					application/json
				Element:span
					{
				Element:span
					"image"
				Element:span
					:
				Element:span
				Element:span
					"tutum/hello-world"
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"my-new-app"
				Element:span
					,
				Element:span
				Element:span
					"target_num_containers"
				Element:span
					:
				Element:span
				Element:span
					2
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					docker-cloud service create -t 2 --name my-new-app tutum/hello-world
			Node:
			(type) c
			(layer)1
				Element:p
					Creates a new service without starting it.
			Node:
			(type) c
			(layer)1
				Element:h3
					Endpoint Type
			Node:
			(type) c
			(layer)1
				Element:p
					Available in Docker Cloud’s
				Element:strong
					REST API
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					POST /api/app/v1/[optional_namespace/]service/
			Node:
			(type) c
			(layer)1
				Element:h3
					JSON Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					image
				Element:td
					(required) The image used to deploy this service in docker format, i.e.
				Element:code
					tutum/hello-world
				Element:tr
				Element:td
					name
				Element:td
					(optional) A human-readable name for the service, i.e.
				Element:code
					my-hello-world-app
					(default:
				Element:code
					image
					without namespace)
				Element:tr
				Element:td
					target_num_containers
				Element:td
					(optional) The number of containers to run for this service initially (default: 1)
				Element:tr
				Element:td
					run_command
				Element:td
					(optional) The command used to start the containers of this service, overriding the value specified in the image, i.e.
				Element:code
					/run.sh
					(default:
				Element:code
					null
					)
				Element:tr
				Element:td
					entrypoint
				Element:td
					(optional) The command prefix used to start the containers of this service, overriding the value specified in the image, i.e.
				Element:code
					/usr/sbin/sshd
					(default:
				Element:code
					null
					)
				Element:tr
				Element:td
					container_ports
				Element:td
					(optional) An array of objects with port information to be published in the containers for this service, which will be added to the image port information, i.e.
				Element:code
					[{"protocol": "tcp", "inner_port": 80, "outer_port": 80}]
					(default:
				Element:code
					[]
					) (See table
				Element:code
					Service Port attributes
					below)
				Element:tr
				Element:td
					container_envvars
				Element:td
					(optional) An array of objects with environment variables to be added in the service containers on launch (overriding any image-defined environment variables), i.e.
				Element:code
					[{"key": "DB_PASSWORD", "value": "mypass"}]
					(default:
				Element:code
					[]
					) (See table
				Element:code
					Service Environment Variable attributes
					below)
				Element:tr
				Element:td
					linked_to_service
				Element:td
					(optional) An array of service resource URIs to link this service to, including the link name, i.e.
				Element:code
					[{"to_service": "/api/app/v1/service/80ff1635-2d56-478d-a97f-9b59c720e513/", "name": "db"}]
					(default:
				Element:code
					[]
					) (See table
				Element:code
					Related services attributes
					below)
				Element:tr
				Element:td
					bindings
				Element:td
					(optional) An array of bindings this service has to mount, i.e.
				Element:code
					[{"volumes_from": "/api/app/v1/service/80ff1635-2d56-478d-a97f-9b59c720e513/", "rewritable": true}]
					(default:
				Element:code
					[]
					) (See table
				Element:code
					Related bindings attributes
					below)
				Element:tr
				Element:td
					autorestart
				Element:td
					(optional) Whether the containers for this service should be restarted if they stop, i.e.
				Element:code
					ALWAYS
					(default:
				Element:code
					OFF
					, possible values:
				Element:code
					OFF
					,
				Element:code
					ON_FAILURE
					,
				Element:code
					ALWAYS
					) (see
				Element:a
					Crash recovery
					for more information)
				Element:tr
				Element:td
					autodestroy
				Element:td
					(optional) Whether the containers should be terminated if they stop, i.e.
				Element:code
					OFF
					(default:
				Element:code
					OFF
					, possible values:
				Element:code
					OFF
					,
				Element:code
					ON_SUCCESS
					,
				Element:code
					ALWAYS
					) (see
				Element:a
					Autodestroy
					for more information)
				Element:tr
				Element:td
					sequential_deployment
				Element:td
					(optional) Whether the containers should be launched and scaled in sequence, i.e.
				Element:code
					true
					(default:
				Element:code
					false
					) (see
				Element:a
					Service scaling
					for more information)
				Element:tr
				Element:td
					roles
				Element:td
					(optional) A list of Docker Cloud API roles to grant the service, i.e.
				Element:code
					["global"]
					(default:
				Element:code
					[]
					, possible values:
				Element:code
					global
					) (see
				Element:a
					Service links
					for more information)
				Element:tr
				Element:td
					privileged
				Element:td
					(optional) Whether to start the containers with Docker’s
				Element:code
					privileged
					flag set or not, i.e.
				Element:code
					false
					(default:
				Element:code
					false
					) (see
				Element:a
					Runtime privilege
					for more information)
				Element:tr
				Element:td
					deployment_strategy
				Element:td
					(optional) Container distribution among nodes (default:
				Element:code
					EMPTIEST_NODE
					, see table
				Element:code
					Deployment strategies
					above and
				Element:a
					Deployment strategies
					for more information)
				Element:tr
				Element:td
					tags
				Element:td
					(optional) A list of tags to be used to deploy the service (see
				Element:a
					Tags
					for more information) (default:
				Element:code
					[]
					)
				Element:tr
				Element:td
					autoredeploy
				Element:td
					(optional) Whether to redeploy the containers of the service when its image is updated in Docker Cloud registry (default:
				Element:code
					false
					) (see
				Element:a
					Docker Cloud’s private registry
					for more information)
				Element:tr
				Element:td
					net
				Element:td
					(optional) Set the network mode to the containers (default:
				Element:code
					bridge
					, possible values:
				Element:code
					bridge
					,
				Element:code
					host
					)
				Element:tr
				Element:td
					pid
				Element:td
					(optional) Set the PID (Process) Namespace mode for the containers (default:
				Element:code
					none
					value, possible values:
				Element:code
					none
					,
				Element:code
					host
					)
				Element:tr
				Element:td
					working_dir
				Element:td
					(optional) Working directory for running binaries within a container of this service (default:
				Element:code
					/
					)
				Element:tr
				Element:td
					nickname
				Element:td
					(optional) A user-friendly name for the service (
				Element:code
					name
					by default)
			Node:
			(type) c
			(layer)1
				Element:h3
					Related bindings attributes
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Attribute
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					host_path
				Element:td
					(optional) The host path of the volume
				Element:tr
				Element:td
					container_path
				Element:td
					(required if
				Element:code
					volumes_from
					is omitted) The container path where the volume is mounted
				Element:tr
				Element:td
					rewritable
				Element:td
					(optional)
				Element:code
					true
					is the volume has writable permissions (default:
				Element:code
					true
					)
				Element:tr
				Element:td
					volumes_from
				Element:td
					(required if
				Element:code
					container_path
					is omitted) The resource URI of the service
			Node:
			(type) c
			(layer)1
				Element:h3
					Service Port attributes
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Attribute
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					protocol
				Element:td
					(required) The protocol of the port, either
				Element:code
					tcp
					or
				Element:code
					udp
				Element:tr
				Element:td
					inner_port
				Element:td
					(required) The port number inside the container to be published
				Element:tr
				Element:td
					outer_port
				Element:td
					(optional) The port number in the node public network interface to be published (default: dynamic allocation if
				Element:code
					published
					is
				Element:code
					true
					)
				Element:tr
				Element:td
					published
				Element:td
					(optional) Whether to publish the port in the host public network interface or not. Non-published ports can only be accessed via links. (default:
				Element:code
					false
					)
			Node:
			(type) c
			(layer)1
				Element:h3
					Service Environment Variable attributes
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Attribute
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					key
				Element:td
					(required) The name of the environment variable
				Element:tr
				Element:td
					value
				Element:td
					(required) The value of the environment variable
			Node:
			(type) c
			(layer)1
				Element:h3
					Related services attributes
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Attribute
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					to_service
				Element:td
					(required) The resource URI of the target of the link
				Element:tr
				Element:td
					name
				Element:td
					(optional) The link name
			Node:
			(type) c
			(layer)1
				Element:h2
					Get an existing service
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
					dockercloud
				Element:span
					service
				Element:span
					=
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					Service
				Element:span
					.
				Element:span
					fetch
				Element:span
					(
				Element:span
					"7eaf7fff-882c-4f3d-9a8f-a22317ac00ce"
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
				Element:span
					"github.com/docker/go-dockercloud/dockercloud"
				Element:span
				Element:span
					service
				Element:span
					,
				Element:span
				Element:span
					err
				Element:span
				Element:span
					:=
				Element:span
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					GetService
				Element:span
					(
				Element:span
					"7eaf7fff-882c-4f3d-9a8f-a22317ac00ce"
				Element:span
					)
				Element:span
				Element:span
					if
				Element:span
				Element:span
					err
				Element:span
				Element:span
					!=
				Element:span
				Element:span
					nil
				Element:span
				Element:span
					{
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Println
				Element:span
					(
				Element:span
					err
				Element:span
					)
				Element:span
				Element:span
					}
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Println
				Element:span
					(
				Element:span
					service
				Element:span
					)
				Element:span
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					GET
				Element:span
					/api/app/v1/service/7eaf7fff-882c-4f3d-9a8f-a22317ac00ce/
				Element:span
					HTTP
				Element:span
					/
				Element:span
					1.1
				Element:span
					Host
				Element:span
					:
				Element:span
					cloud.docker.com
				Element:span
					Authorization
				Element:span
					:
				Element:span
					Basic dXNlcm5hbWU6YXBpa2V5
				Element:span
					Accept
				Element:span
					:
				Element:span
					application/json
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					docker-cloud service inspect 7eaf7fff
			Node:
			(type) c
			(layer)1
				Element:p
					Get all the details of an specific service
			Node:
			(type) c
			(layer)1
				Element:h3
					Endpoint Type
			Node:
			(type) c
			(layer)1
				Element:p
					Available in Docker Cloud’s
				Element:strong
					REST API
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET /api/app/v1/[optional_namespace/]service/(uuid)/
			Node:
			(type) c
			(layer)1
				Element:h3
					Path Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					uuid
				Element:td
					The UUID of the service to retrieve
			Node:
			(type) c
			(layer)1
				Element:h2
					Get the logs of a service
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example log line
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"log"
				Element:span
					,
				Element:span
				Element:span
					"source"
				Element:span
					:
				Element:span
				Element:span
					"wordpress-stackable-1"
				Element:span
					,
				Element:span
				Element:span
					"log"
				Element:span
					:
				Element:span
				Element:span
					"Log line from the container indicated by 'source'"
				Element:span
					,
				Element:span
				Element:span
					"streamType"
				Element:span
					:
				Element:span
				Element:span
					"stdout"
				Element:span
					,
				Element:span
				Element:span
					"timestamp"
				Element:span
					:
				Element:span
				Element:span
					1433779324
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
					dockercloud
				Element:span
					def
				Element:span
					log_handler
				Element:span
					(
				Element:span
					message
				Element:span
					):
				Element:span
					print
				Element:span
					message
				Element:span
					service
				Element:span
					=
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					Service
				Element:span
					.
				Element:span
					fetch
				Element:span
					(
				Element:span
					"7eaf7fff-882c-4f3d-9a8f-a22317ac00ce"
				Element:span
					)
				Element:span
					service
				Element:span
					.
				Element:span
					logs
				Element:span
					(
				Element:span
					tail
				Element:span
					=
				Element:span
					300
				Element:span
					,
				Element:span
					follow
				Element:span
					=
				Element:span
					True
				Element:span
					,
				Element:span
					log_handler
				Element:span
					=
				Element:span
					log_handler
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
				Element:span
					"github.com/docker/go-dockercloud/dockercloud"
				Element:span
				Element:span
					service
				Element:span
					,
				Element:span
				Element:span
					err
				Element:span
				Element:span
					:=
				Element:span
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					GetService
				Element:span
					(
				Element:span
					"7eaf7fff-882c-4f3d-9a8f-a22317ac00ce"
				Element:span
					)
				Element:span
				Element:span
					if
				Element:span
				Element:span
					err
				Element:span
				Element:span
					!=
				Element:span
				Element:span
					nil
				Element:span
				Element:span
					{
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Println
				Element:span
					(
				Element:span
					err
				Element:span
					)
				Element:span
				Element:span
					}
				Element:span
				Element:span
					c
				Element:span
				Element:span
					:=
				Element:span
				Element:span
					make
				Element:span
					(
				Element:span
					chan
				Element:span
				Element:span
					Logs
				Element:span
					)
				Element:span
				Element:span
					go
				Element:span
				Element:span
					service
				Element:span
					.
				Element:span
					Logs
				Element:span
					(
				Element:span
					c
				Element:span
					)
				Element:span
				Element:span
					for
				Element:span
				Element:span
					{
				Element:span
				Element:span
					s
				Element:span
				Element:span
					:=
				Element:span
				Element:span
					<-
				Element:span
					c
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Println
				Element:span
					(
				Element:span
					s
				Element:span
					)
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					GET
				Element:span
					/api/app/v1/service/7eaf7fff-882c-4f3d-9a8f-a22317ac00ce/logs/
				Element:span
					HTTP
				Element:span
					/
				Element:span
					1.1
				Element:span
					Host
				Element:span
					:
				Element:span
					ws.cloud.docker.com
				Element:span
					Authorization
				Element:span
					:
				Element:span
					Basic dXNlcm5hbWU6YXBpa2V5
				Element:span
					Connection
				Element:span
					:
				Element:span
					Upgrade
				Element:span
					Upgrade
				Element:span
					:
				Element:span
					websocket
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					docker-cloud service logs 7eaf7fff
			Node:
			(type) c
			(layer)1
				Element:p
					Get the aggregated logs of all the containers of the service.
			Node:
			(type) c
			(layer)1
				Element:h3
					Endpoint Type
			Node:
			(type) c
			(layer)1
				Element:p
					Available in Docker Cloud’s
				Element:strong
					STREAM API
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET /api/app/v1/[optional_namespace/]service/(uuid)/logs/
			Node:
			(type) c
			(layer)1
				Element:h3
					Path Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					uuid
				Element:td
					The UUID of the service to retrieve logs
			Node:
			(type) c
			(layer)1
				Element:h3
					Query Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					tail
				Element:td
					Number of lines to show from the end of the logs (default:
				Element:code
					300
					)
				Element:tr
				Element:td
					follow
				Element:td
					Whether to stream logs or close the connection immediately (default: true)
			Node:
			(type) c
			(layer)1
				Element:h2
					Update an existing service
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
					dockercloud
				Element:span
					service
				Element:span
					=
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					Service
				Element:span
					.
				Element:span
					fetch
				Element:span
					(
				Element:span
					"7eaf7fff-882c-4f3d-9a8f-a22317ac00ce"
				Element:span
					)
				Element:span
					service
				Element:span
					.
				Element:span
					target_num_containers
				Element:span
					=
				Element:span
					3
				Element:span
					service
				Element:span
					.
				Element:span
					tags
				Element:span
					.
				Element:span
					append
				Element:span
					({
				Element:span
					"name"
				Element:span
					:
				Element:span
					"tag-1"
				Element:span
					})
				Element:span
					service
				Element:span
					.
				Element:span
					save
				Element:span
					()
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
				Element:span
					"github.com/docker/go-dockercloud/dockercloud"
				Element:span
				Element:span
					service
				Element:span
					,
				Element:span
				Element:span
					err
				Element:span
				Element:span
					:=
				Element:span
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					GetService
				Element:span
					(
				Element:span
					"7eaf7fff-882c-4f3d-9a8f-a22317ac00ce"
				Element:span
					)
				Element:span
				Element:span
					if
				Element:span
				Element:span
					err
				Element:span
				Element:span
					!=
				Element:span
				Element:span
					nil
				Element:span
				Element:span
					{
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Println
				Element:span
					(
				Element:span
					err
				Element:span
					)
				Element:span
				Element:span
					}
				Element:span
				Element:span
					if
				Element:span
				Element:span
					err
				Element:span
				Element:span
					=
				Element:span
				Element:span
					service
				Element:span
					.
				Element:span
					Update
				Element:span
					(
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					ServiceCreateRequest
				Element:span
					{
				Element:span
					Target_num_containers
				Element:span
					:
				Element:span
				Element:span
					3
				Element:span
					});
				Element:span
				Element:span
					err
				Element:span
				Element:span
					!=
				Element:span
				Element:span
					nil
				Element:span
				Element:span
					{
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Println
				Element:span
					(
				Element:span
					err
				Element:span
					)
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					PATCH
				Element:span
					/api/app/v1/service/7eaf7fff-882c-4f3d-9a8f-a22317ac00ce/
				Element:span
					HTTP
				Element:span
					/
				Element:span
					1.1
				Element:span
					Host
				Element:span
					:
				Element:span
					cloud.docker.com
				Element:span
					Authorization
				Element:span
					:
				Element:span
					Basic dXNlcm5hbWU6YXBpa2V5
				Element:span
					Accept
				Element:span
					:
				Element:span
					application/json
				Element:span
					Content-Type
				Element:span
					:
				Element:span
					application/json
				Element:span
					{
				Element:span
					"autorestart"
				Element:span
					:
				Element:span
				Element:span
					"ON_FAILURE"
				Element:span
					,
				Element:span
				Element:span
					"autodestroy"
				Element:span
					:
				Element:span
				Element:span
					"OFF"
				Element:span
					,
				Element:span
				Element:span
					"container_envvars"
				Element:span
					:
				Element:span
				Element:span
					[{
				Element:span
					"key"
				Element:span
					:
				Element:span
				Element:span
					"DB_PASSWORD"
				Element:span
					,
				Element:span
				Element:span
					"value"
				Element:span
					:
				Element:span
				Element:span
					"mypass"
				Element:span
					}],
				Element:span
				Element:span
					"container_ports"
				Element:span
					:
				Element:span
				Element:span
					[{
				Element:span
					"protocol"
				Element:span
					:
				Element:span
				Element:span
					"tcp"
				Element:span
					,
				Element:span
				Element:span
					"inner_port"
				Element:span
					:
				Element:span
				Element:span
					80
				Element:span
					,
				Element:span
				Element:span
					"outer_port"
				Element:span
					:
				Element:span
				Element:span
					80
				Element:span
					}],
				Element:span
				Element:span
					"cpu_shares"
				Element:span
					:
				Element:span
				Element:span
					512
				Element:span
					,
				Element:span
				Element:span
					"entrypoint"
				Element:span
					:
				Element:span
				Element:span
					"/usr/sbin/sshd"
				Element:span
					,
				Element:span
				Element:span
					"image"
				Element:span
					:
				Element:span
				Element:span
					"tutum/hello-world"
				Element:span
					,
				Element:span
				Element:span
					"linked_to_service"
				Element:span
					:
				Element:span
				Element:span
					[{
				Element:span
					"to_service"
				Element:span
					:
				Element:span
				Element:span
					"/api/app/v1/service/80ff1635-2d56-478d-a97f-9b59c720e513/"
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"db"
				Element:span
					}],
				Element:span
				Element:span
					"memory"
				Element:span
					:
				Element:span
				Element:span
					2048
				Element:span
					,
				Element:span
				Element:span
					"privileged"
				Element:span
					:
				Element:span
				Element:span
					True
				Element:span
					,
				Element:span
				Element:span
					"roles"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
					"global"
				Element:span
					],
				Element:span
				Element:span
					"run_command"
				Element:span
					:
				Element:span
				Element:span
					"/run.sh"
				Element:span
					,
				Element:span
				Element:span
					"sequential_deployment"
				Element:span
					:
				Element:span
				Element:span
					False
				Element:span
					,
				Element:span
				Element:span
					"tags"
				Element:span
					:
				Element:span
				Element:span
					[{
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"tag-1"
				Element:span
					}],
				Element:span
				Element:span
					"target_num_containers"
				Element:span
					:
				Element:span
				Element:span
					3
				Element:span
					,
				Element:span
				Element:span
					"autoredeploy"
				Element:span
					:
				Element:span
				Element:span
					False
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					docker-cloud service scale 7eaf7fff 3 docker-cloud tag add -t tag-1 7eaf7fff docker-cloud tag
				Element:span
					set
					-t tag-2 7eaf7fff
			Node:
			(type) c
			(layer)1
				Element:p
					Updates the service details.
			Node:
			(type) c
			(layer)1
				Element:h3
					Endpoint Type
			Node:
			(type) c
			(layer)1
				Element:p
					Available in Docker Cloud’s
				Element:strong
					REST API
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					PATCH /api/app/v1/[optional_namespace/]service/(uuid)/
			Node:
			(type) c
			(layer)1
				Element:h3
					Path Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					uuid
				Element:td
					The UUID of the service to update
			Node:
			(type) c
			(layer)1
				Element:h3
					JSON Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					autorestart
				Element:td
					(optional) Whether the containers for this service should be restarted if they stop, i.e.
				Element:code
					ALWAYS
					(possible values:
				Element:code
					OFF
					,
				Element:code
					ON_FAILURE
					,
				Element:code
					ALWAYS
					) (see
				Element:a
					Crash recovery
					for more information)
				Element:tr
				Element:td
					autodestroy
				Element:td
					(optional) Whether the containers should be terminated if they stop, i.e.
				Element:code
					OFF
					(possible values:
				Element:code
					OFF
					,
				Element:code
					ON_SUCCESS
					,
				Element:code
					ALWAYS
					) (see
				Element:a
					Autodestroy
					for more information)
				Element:tr
				Element:td
					container_envvars
				Element:td
					(optional) An array of objects with environment variables to be added in the service containers on launch (overriding any image-defined environment variables), i.e.
				Element:code
					[{"key": "DB_PASSWORD", "value": "mypass"}]
					(See table
				Element:code
					Service Environment Variable attributes
					)
				Element:tr
				Element:td
					container_ports
				Element:td
					(optional) An array of objects with port information to be published in the containers for this service, which will be added to the image port information, i.e.
				Element:code
					[{"protocol": "tcp", "inner_port": 80, "outer_port": 80}]
					(See table
				Element:code
					Service Port attributes
					)
				Element:tr
				Element:td
					cpu_shares
				Element:td
					(optional) The relative CPU priority of the containers the service describes (see
				Element:a
					Runtime Constraints on CPU and Memory
					for more information)
				Element:tr
				Element:td
					entrypoint
				Element:td
					(optional) The command prefix used to start the containers of this service, overriding the value specified in the image, i.e.
				Element:code
					/usr/sbin/sshd
				Element:tr
				Element:td
					image
				Element:td
					(optional) The image used to deploy this service in docker format, i.e.
				Element:code
					tutum/hello-world
					,
				Element:code
					tutum/ubuntu:5.6
					. If no tag is indicated, it will be set to
				Element:code
					latest
					by default
				Element:tr
				Element:td
					linked_to_service
				Element:td
					(optional) An array of service resource URIs to link this service to, including the link name, i.e.
				Element:code
					[{"to_service": "/api/app/v1/service/80ff1635-2d56-478d-a97f-9b59c720e513/", "name": "db"}]
					(See table
				Element:code
					Related services attributes
					below)
				Element:tr
				Element:td
					memory
				Element:td
					(optional) The memory limit of the containers of the service in MB (see
				Element:a
					Runtime Constraints on CPU and Memory
					for more information)
				Element:tr
				Element:td
					privileged
				Element:td
					(optional) Whether to start the containers with Docker’s
				Element:code
					privileged
					flag set or not, i.e.
				Element:code
					false
					(see
				Element:a
					Runtime privilege
					for more information)
				Element:tr
				Element:td
					roles
				Element:td
					(optional) A list of Docker Cloud API roles to grant the service, i.e.
				Element:code
					["global"]
					(possible values:
				Element:code
					global
					) (see
				Element:a
					Service links
					for more information)
				Element:tr
				Element:td
					run_command
				Element:td
					(optional) The command used to start the containers of this service, overriding the value specified in the image, i.e.
				Element:code
					/run.sh
				Element:tr
				Element:td
					sequential_deployment
				Element:td
					(optional) Whether the containers should be launched and scaled in sequence, i.e.
				Element:code
					true
					(see
				Element:a
					Service scaling
					for more information)
				Element:tr
				Element:td
					tags
				Element:td
					(optional) List of new tags the service will have. This operation replaces the tag list
				Element:tr
				Element:td
					target_num_containers
				Element:td
					(optional) The number of containers to scale this service to
				Element:tr
				Element:td
					deployment_strategy
				Element:td
					(optional) Container distribution among nodes. A service cannot be updated to or from a deployment strategy of
				Element:code
					EVERY_NODE
					. (See table
				Element:code
					Deployment strategies
					above and
				Element:a
					Deployment strategies
					for more information)
				Element:tr
				Element:td
					autoredeploy
				Element:td
					Whether to redeploy the containers of the service when its image is updated in Docker Cloud registry (see
				Element:a
					Docker Cloud’s private registry
					for more information)
				Element:tr
				Element:td
					net
				Element:td
					(optional) Set the network mode to the containers (default:
				Element:code
					bridge
					, possible values:
				Element:code
					bridge
					,
				Element:code
					host
					)
				Element:tr
				Element:td
					pid
				Element:td
					(optional) Set the PID (Process) Namespace mode for the containers (default:
				Element:code
					none
					value, possible values:
				Element:code
					none
					,
				Element:code
					host
					)
				Element:tr
				Element:td
					working_dir
				Element:td
					(optional) Working directory for running binaries within a container of this service (default:
				Element:code
					/
					)
				Element:tr
				Element:td
					nickname
				Element:td
					(optional) A user-friendly name for the service (
				Element:code
					name
					by default)
			Node:
			(type) c
			(layer)1
				Element:h2
					Start a service
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
					dockercloud
				Element:span
					service
				Element:span
					=
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					Service
				Element:span
					.
				Element:span
					fetch
				Element:span
					(
				Element:span
					"7eaf7fff-882c-4f3d-9a8f-a22317ac00ce"
				Element:span
					)
				Element:span
					service
				Element:span
					.
				Element:span
					start
				Element:span
					()
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
				Element:span
					"github.com/docker/go-dockercloud/dockercloud"
				Element:span
				Element:span
					service
				Element:span
					,
				Element:span
				Element:span
					err
				Element:span
				Element:span
					:=
				Element:span
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					GetService
				Element:span
					(
				Element:span
					"7eaf7fff-882c-4f3d-9a8f-a22317ac00ce"
				Element:span
					)
				Element:span
				Element:span
					if
				Element:span
				Element:span
					err
				Element:span
				Element:span
					!=
				Element:span
				Element:span
					nil
				Element:span
				Element:span
					{
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Println
				Element:span
					(
				Element:span
					err
				Element:span
					)
				Element:span
				Element:span
					}
				Element:span
				Element:span
					if
				Element:span
				Element:span
					err
				Element:span
				Element:span
					=
				Element:span
				Element:span
					service
				Element:span
					.
				Element:span
					Start
				Element:span
					();
				Element:span
				Element:span
					err
				Element:span
				Element:span
					!=
				Element:span
				Element:span
					nil
				Element:span
				Element:span
					{
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Println
				Element:span
					(
				Element:span
					err
				Element:span
					)
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					POST
				Element:span
					/api/app/v1/service/7eaf7fff-882c-4f3d-9a8f-a22317ac00ce/start/
				Element:span
					HTTP
				Element:span
					/
				Element:span
					1.1
				Element:span
					Host
				Element:span
					:
				Element:span
					cloud.docker.com
				Element:span
					Authorization
				Element:span
					:
				Element:span
					Basic dXNlcm5hbWU6YXBpa2V5
				Element:span
					Accept
				Element:span
					:
				Element:span
					application/json
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					docker-cloud service start 7eaf7fff
			Node:
			(type) c
			(layer)1
				Element:p
					Starts all containers in a stopped or partly running service.
			Node:
			(type) c
			(layer)1
				Element:h3
					Endpoint Type
			Node:
			(type) c
			(layer)1
				Element:p
					Available in Docker Cloud’s
				Element:strong
					REST API
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					POST /api/app/v1/[optional_namespace/]service/(uuid)/start/
			Node:
			(type) c
			(layer)1
				Element:h3
					Path Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					uuid
				Element:td
					The UUID of the service to start
			Node:
			(type) c
			(layer)1
				Element:h2
					Stop a service
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
					dockercloud
				Element:span
					service
				Element:span
					=
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					Service
				Element:span
					.
				Element:span
					fetch
				Element:span
					(
				Element:span
					"7eaf7fff-882c-4f3d-9a8f-a22317ac00ce"
				Element:span
					)
				Element:span
					service
				Element:span
					.
				Element:span
					stop
				Element:span
					()
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
				Element:span
					"github.com/docker/go-dockercloud/dockercloud"
				Element:span
				Element:span
					service
				Element:span
					,
				Element:span
				Element:span
					err
				Element:span
				Element:span
					:=
				Element:span
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					GetService
				Element:span
					(
				Element:span
					"7eaf7fff-882c-4f3d-9a8f-a22317ac00ce"
				Element:span
					)
				Element:span
				Element:span
					if
				Element:span
				Element:span
					err
				Element:span
				Element:span
					!=
				Element:span
				Element:span
					nil
				Element:span
				Element:span
					{
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Println
				Element:span
					(
				Element:span
					err
				Element:span
					)
				Element:span
				Element:span
					}
				Element:span
				Element:span
					if
				Element:span
				Element:span
					err
				Element:span
				Element:span
					=
				Element:span
				Element:span
					service
				Element:span
					.
				Element:span
					Stop
				Element:span
					();
				Element:span
				Element:span
					err
				Element:span
				Element:span
					!=
				Element:span
				Element:span
					nil
				Element:span
				Element:span
					{
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Println
				Element:span
					(
				Element:span
					err
				Element:span
					)
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					POST
				Element:span
					/api/app/v1/service/7eaf7fff-882c-4f3d-9a8f-a22317ac00ce/stop/
				Element:span
					HTTP
				Element:span
					/
				Element:span
					1.1
				Element:span
					Host
				Element:span
					:
				Element:span
					cloud.docker.com
				Element:span
					Authorization
				Element:span
					:
				Element:span
					Basic dXNlcm5hbWU6YXBpa2V5
				Element:span
					Accept
				Element:span
					:
				Element:span
					application/json
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					docker-cloud service stop 7eaf7fff
			Node:
			(type) c
			(layer)1
				Element:p
					Stops all containers in a running or partly running service.
			Node:
			(type) c
			(layer)1
				Element:h3
					Endpoint Type
			Node:
			(type) c
			(layer)1
				Element:p
					Available in Docker Cloud’s
				Element:strong
					REST API
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					POST /api/app/v1/[optional_namespace/]service/(uuid)/stop/
			Node:
			(type) c
			(layer)1
				Element:h3
					Path Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					uuid
				Element:td
					The UUID of the service to stop
			Node:
			(type) c
			(layer)1
				Element:h2
					Scale a service
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
					dockercloud
				Element:span
					service
				Element:span
					=
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					Service
				Element:span
					.
				Element:span
					fetch
				Element:span
					(
				Element:span
					"7eaf7fff-882c-4f3d-9a8f-a22317ac00ce"
				Element:span
					)
				Element:span
					service
				Element:span
					.
				Element:span
					target_num_containers
				Element:span
					=
				Element:span
					3
				Element:span
					service
				Element:span
					.
				Element:span
					save
				Element:span
					()
				Element:span
					service
				Element:span
					.
				Element:span
					scale
				Element:span
					()
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					POST
				Element:span
					/api/app/v1/service/7eaf7fff-882c-4f3d-9a8f-a22317ac00ce/scale/
				Element:span
					HTTP
				Element:span
					/
				Element:span
					1.1
				Element:span
					Host
				Element:span
					:
				Element:span
					cloud.docker.com
				Element:span
					Authorization
				Element:span
					:
				Element:span
					Basic dXNlcm5hbWU6YXBpa2V5
				Element:span
					Accept
				Element:span
					:
				Element:span
					application/json
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					docker-cloud service scale 7eaf7fff-882c-4f3d-9a8f-a22317ac00ce 3
			Node:
			(type) c
			(layer)1
				Element:p
					Scales the service to its current
				Element:code
					target_num_containers
					field.
			Node:
			(type) c
			(layer)1
				Element:h3
					Endpoint Type
			Node:
			(type) c
			(layer)1
				Element:p
					Available in Docker Cloud’s
				Element:strong
					REST API
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					POST /api/app/v1/[optional_namespace/]service/(uuid)/scale/
			Node:
			(type) c
			(layer)1
				Element:h3
					Path Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					uuid
				Element:td
					The UUID of the service to scale
			Node:
			(type) c
			(layer)1
				Element:h2
					Redeploy a service
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
					dockercloud
				Element:span
					service
				Element:span
					=
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					Service
				Element:span
					.
				Element:span
					fetch
				Element:span
					(
				Element:span
					"7eaf7fff-882c-4f3d-9a8f-a22317ac00ce"
				Element:span
					)
				Element:span
					service
				Element:span
					.
				Element:span
					redeploy
				Element:span
					()
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
				Element:span
					"github.com/docker/go-dockercloud/dockercloud"
				Element:span
				Element:span
					service
				Element:span
					,
				Element:span
				Element:span
					err
				Element:span
				Element:span
					:=
				Element:span
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					GetService
				Element:span
					(
				Element:span
					"7eaf7fff-882c-4f3d-9a8f-a22317ac00ce"
				Element:span
					)
				Element:span
				Element:span
					if
				Element:span
				Element:span
					err
				Element:span
				Element:span
					!=
				Element:span
				Element:span
					nil
				Element:span
				Element:span
					{
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Println
				Element:span
					(
				Element:span
					err
				Element:span
					)
				Element:span
				Element:span
					}
				Element:span
				Element:span
					//Redeploy(dockercloud.ReuseVolumesOption{Reuse: true}) to reuse the existing volumes
				Element:span
				Element:span
					//Redeploy(dockercloud.ReuseVolumesOption{Reuse: false}) to not reuse the existing volumes
				Element:span
				Element:span
					if
				Element:span
				Element:span
					err
				Element:span
				Element:span
					=
				Element:span
				Element:span
					service
				Element:span
					.
				Element:span
					Redeploy
				Element:span
					(
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					ReuseVolumesOption
				Element:span
					{
				Element:span
					Reuse
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					});
				Element:span
				Element:span
					err
				Element:span
				Element:span
					!=
				Element:span
				Element:span
					nil
				Element:span
				Element:span
					{
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Println
				Element:span
					(
				Element:span
					err
				Element:span
					)
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					POST
				Element:span
					/api/app/v1/service/7eaf7fff-882c-4f3d-9a8f-a22317ac00ce/redeploy/
				Element:span
					HTTP
				Element:span
					/
				Element:span
					1.1
				Element:span
					Host
				Element:span
					:
				Element:span
					cloud.docker.com
				Element:span
					Authorization
				Element:span
					:
				Element:span
					Basic dXNlcm5hbWU6YXBpa2V5
				Element:span
					Accept
				Element:span
					:
				Element:span
					application/json
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					docker-cloud service redeploy 7eaf7fff
			Node:
			(type) c
			(layer)1
				Element:p
					Redeploys all containers in the service with the current service configuration.
			Node:
			(type) c
			(layer)1
				Element:h3
					Endpoint Type
			Node:
			(type) c
			(layer)1
				Element:p
					Available in Docker Cloud’s
				Element:strong
					REST API
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					POST /api/app/v1/[optional_namespace/]service/(uuid)/redeploy/
			Node:
			(type) c
			(layer)1
				Element:h3
					Path Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					uuid
				Element:td
					The UUID of the service to redeploy
			Node:
			(type) c
			(layer)1
				Element:h3
					Query Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					reuse_volumes
				Element:td
					Wheather to reuse container volumes for this redeploy operation or not (default:
				Element:code
					true
					).
			Node:
			(type) c
			(layer)1
				Element:h2
					Terminate a service
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
					dockercloud
				Element:span
					service
				Element:span
					=
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					Service
				Element:span
					.
				Element:span
					fetch
				Element:span
					(
				Element:span
					"7eaf7fff-882c-4f3d-9a8f-a22317ac00ce"
				Element:span
					)
				Element:span
					service
				Element:span
					.
				Element:span
					delete
				Element:span
					()
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
				Element:span
					"github.com/docker/go-dockercloud/dockercloud"
				Element:span
				Element:span
					service
				Element:span
					,
				Element:span
				Element:span
					err
				Element:span
				Element:span
					:=
				Element:span
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					GetService
				Element:span
					(
				Element:span
					"7eaf7fff-882c-4f3d-9a8f-a22317ac00ce"
				Element:span
					)
				Element:span
				Element:span
					if
				Element:span
				Element:span
					err
				Element:span
				Element:span
					!=
				Element:span
				Element:span
					nil
				Element:span
				Element:span
					{
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Println
				Element:span
					(
				Element:span
					err
				Element:span
					)
				Element:span
				Element:span
					}
				Element:span
				Element:span
					if
				Element:span
				Element:span
					err
				Element:span
				Element:span
					=
				Element:span
				Element:span
					service
				Element:span
					.
				Element:span
					Terminate
				Element:span
					();
				Element:span
				Element:span
					err
				Element:span
				Element:span
					!=
				Element:span
				Element:span
					nil
				Element:span
				Element:span
					{
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Println
				Element:span
					(
				Element:span
					err
				Element:span
					)
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					DELETE
				Element:span
					/api/app/v1/service/7eaf7fff-882c-4f3d-9a8f-a22317ac00ce/
				Element:span
					HTTP
				Element:span
					/
				Element:span
					1.1
				Element:span
					Host
				Element:span
					:
				Element:span
					cloud.docker.com
				Element:span
					Authorization
				Element:span
					:
				Element:span
					Basic dXNlcm5hbWU6YXBpa2V5
				Element:span
					Accept
				Element:span
					:
				Element:span
					application/json
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					docker-cloud service terminate 7eaf7fff
			Node:
			(type) c
			(layer)1
				Element:p
					Terminate all the containers in a service and the service itself. This is not reversible. All the data stored in all containers of the service will be permanently deleted.
			Node:
			(type) c
			(layer)1
				Element:h3
					Endpoint Type
			Node:
			(type) c
			(layer)1
				Element:p
					Available in Docker Cloud’s
				Element:strong
					REST API
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					DELETE /api/app/v1/[optional_namespace/]service/(uuid)/
			Node:
			(type) c
			(layer)1
				Element:h3
					Path Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					uuid
				Element:td
					The UUID of the service to terminate
			Node:
			(type) h1
			(layer)1
				Element:h1
					Containers
			Node:
			(type) c
			(layer)1
				Element:h2
					Container
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"autodestroy"
				Element:span
					:
				Element:span
				Element:span
					"OFF"
				Element:span
					,
				Element:span
				Element:span
					"autorestart"
				Element:span
					:
				Element:span
				Element:span
					"OFF"
				Element:span
					,
				Element:span
				Element:span
					"bindings"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"volume"
				Element:span
					:
				Element:span
				Element:span
					"/api/infra/v1/user_namespace/volume/1863e34d-6a7d-4945-aefc-8f27a4ab1a9e/"
				Element:span
					,
				Element:span
				Element:span
					"host_path"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"container_path"
				Element:span
					:
				Element:span
				Element:span
					"/data"
				Element:span
					,
				Element:span
				Element:span
					"rewritable"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"volume"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"host_path"
				Element:span
					:
				Element:span
				Element:span
					"/etc"
				Element:span
					,
				Element:span
				Element:span
					"container_path"
				Element:span
					:
				Element:span
				Element:span
					"/etc"
				Element:span
					,
				Element:span
				Element:span
					"rewritable"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
				Element:span
					}
				Element:span
				Element:span
					],
				Element:span
				Element:span
					"cap_add"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					"ALL"
				Element:span
				Element:span
					],
				Element:span
				Element:span
					"cap_drop"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					"NET_ADMIN"
				Element:span
					,
				Element:span
				Element:span
					"SYS_ADMIN"
				Element:span
				Element:span
					],
				Element:span
				Element:span
					"container_envvars"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"key"
				Element:span
					:
				Element:span
				Element:span
					"DB_1_ENV_DEBIAN_FRONTEND"
				Element:span
					,
				Element:span
				Element:span
					"value"
				Element:span
					:
				Element:span
				Element:span
					"noninteractive"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"key"
				Element:span
					:
				Element:span
				Element:span
					"DB_1_ENV_MYSQL_PASS"
				Element:span
					,
				Element:span
				Element:span
					"value"
				Element:span
					:
				Element:span
				Element:span
					"**Random**"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"key"
				Element:span
					:
				Element:span
				Element:span
					"DB_1_ENV_MYSQL_USER"
				Element:span
					,
				Element:span
				Element:span
					"value"
				Element:span
					:
				Element:span
				Element:span
					"admin"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"key"
				Element:span
					:
				Element:span
				Element:span
					"DB_1_ENV_PATH"
				Element:span
					,
				Element:span
				Element:span
					"value"
				Element:span
					:
				Element:span
				Element:span
					"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"key"
				Element:span
					:
				Element:span
				Element:span
					"DB_1_ENV_REPLICATION_MASTER"
				Element:span
					,
				Element:span
				Element:span
					"value"
				Element:span
					:
				Element:span
				Element:span
					"**False**"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"key"
				Element:span
					:
				Element:span
				Element:span
					"DB_1_ENV_REPLICATION_PASS"
				Element:span
					,
				Element:span
				Element:span
					"value"
				Element:span
					:
				Element:span
				Element:span
					"replica"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"key"
				Element:span
					:
				Element:span
				Element:span
					"DB_1_ENV_REPLICATION_SLAVE"
				Element:span
					,
				Element:span
				Element:span
					"value"
				Element:span
					:
				Element:span
				Element:span
					"**False**"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"key"
				Element:span
					:
				Element:span
				Element:span
					"DB_1_ENV_REPLICATION_USER"
				Element:span
					,
				Element:span
				Element:span
					"value"
				Element:span
					:
				Element:span
				Element:span
					"replica"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"key"
				Element:span
					:
				Element:span
				Element:span
					"DB_1_PORT"
				Element:span
					,
				Element:span
				Element:span
					"value"
				Element:span
					:
				Element:span
				Element:span
					"tcp://172.16.0.3:3306"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"key"
				Element:span
					:
				Element:span
				Element:span
					"DB_1_PORT_3306_TCP"
				Element:span
					,
				Element:span
				Element:span
					"value"
				Element:span
					:
				Element:span
				Element:span
					"tcp://172.16.0.3:3306"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"key"
				Element:span
					:
				Element:span
				Element:span
					"DB_1_PORT_3306_TCP_ADDR"
				Element:span
					,
				Element:span
				Element:span
					"value"
				Element:span
					:
				Element:span
				Element:span
					"172.16.0.3"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"key"
				Element:span
					:
				Element:span
				Element:span
					"DB_1_PORT_3306_TCP_PORT"
				Element:span
					,
				Element:span
				Element:span
					"value"
				Element:span
					:
				Element:span
				Element:span
					"3306"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"key"
				Element:span
					:
				Element:span
				Element:span
					"DB_1_PORT_3306_TCP_PROTO"
				Element:span
					,
				Element:span
				Element:span
					"value"
				Element:span
					:
				Element:span
				Element:span
					"tcp"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"key"
				Element:span
					:
				Element:span
				Element:span
					"DB_ENV_DEBIAN_FRONTEND"
				Element:span
					,
				Element:span
				Element:span
					"value"
				Element:span
					:
				Element:span
				Element:span
					"noninteractive"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"key"
				Element:span
					:
				Element:span
				Element:span
					"DB_ENV_MYSQL_PASS"
				Element:span
					,
				Element:span
				Element:span
					"value"
				Element:span
					:
				Element:span
				Element:span
					"**Random**"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"key"
				Element:span
					:
				Element:span
				Element:span
					"DB_ENV_MYSQL_USER"
				Element:span
					,
				Element:span
				Element:span
					"value"
				Element:span
					:
				Element:span
				Element:span
					"admin"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"key"
				Element:span
					:
				Element:span
				Element:span
					"DB_ENV_PATH"
				Element:span
					,
				Element:span
				Element:span
					"value"
				Element:span
					:
				Element:span
				Element:span
					"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"key"
				Element:span
					:
				Element:span
				Element:span
					"DB_ENV_REPLICATION_MASTER"
				Element:span
					,
				Element:span
				Element:span
					"value"
				Element:span
					:
				Element:span
				Element:span
					"**False**"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"key"
				Element:span
					:
				Element:span
				Element:span
					"DB_ENV_REPLICATION_PASS"
				Element:span
					,
				Element:span
				Element:span
					"value"
				Element:span
					:
				Element:span
				Element:span
					"replica"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"key"
				Element:span
					:
				Element:span
				Element:span
					"DB_ENV_REPLICATION_SLAVE"
				Element:span
					,
				Element:span
				Element:span
					"value"
				Element:span
					:
				Element:span
				Element:span
					"**False**"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"key"
				Element:span
					:
				Element:span
				Element:span
					"DB_ENV_REPLICATION_USER"
				Element:span
					,
				Element:span
				Element:span
					"value"
				Element:span
					:
				Element:span
				Element:span
					"replica"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"key"
				Element:span
					:
				Element:span
				Element:span
					"DB_PASS"
				Element:span
					,
				Element:span
				Element:span
					"value"
				Element:span
					:
				Element:span
				Element:span
					"szVaPz925B7I"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"key"
				Element:span
					:
				Element:span
				Element:span
					"DB_PORT"
				Element:span
					,
				Element:span
				Element:span
					"value"
				Element:span
					:
				Element:span
				Element:span
					"tcp://172.16.0.3:3306"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"key"
				Element:span
					:
				Element:span
				Element:span
					"DB_PORT_3306_TCP"
				Element:span
					,
				Element:span
				Element:span
					"value"
				Element:span
					:
				Element:span
				Element:span
					"tcp://172.16.0.3:3306"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"key"
				Element:span
					:
				Element:span
				Element:span
					"DB_PORT_3306_TCP_ADDR"
				Element:span
					,
				Element:span
				Element:span
					"value"
				Element:span
					:
				Element:span
				Element:span
					"172.16.0.3"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"key"
				Element:span
					:
				Element:span
				Element:span
					"DB_PORT_3306_TCP_PORT"
				Element:span
					,
				Element:span
				Element:span
					"value"
				Element:span
					:
				Element:span
				Element:span
					"3306"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"key"
				Element:span
					:
				Element:span
				Element:span
					"DB_PORT_3306_TCP_PROTO"
				Element:span
					,
				Element:span
				Element:span
					"value"
				Element:span
					:
				Element:span
				Element:span
					"tcp"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"key"
				Element:span
					:
				Element:span
				Element:span
					"DB_DOCKERCLOUD_API_URL"
				Element:span
					,
				Element:span
				Element:span
					"value"
				Element:span
					:
				Element:span
				Element:span
					"https://cloud.docker.com/api/app/v1/user_namespace/service/c0fed1dc-c528-40c9-aa4c-dc00672ebcbf/"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					],
				Element:span
				Element:span
					"container_ports"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"endpoint_uri"
				Element:span
					:
				Element:span
				Element:span
					"http://wordpress-stackable-1.admin.cont.dockerapp.io:49153/"
				Element:span
					,
				Element:span
				Element:span
					"inner_port"
				Element:span
					:
				Element:span
				Element:span
					80
				Element:span
					,
				Element:span
				Element:span
					"outer_port"
				Element:span
					:
				Element:span
				Element:span
					49153
				Element:span
					,
				Element:span
				Element:span
					"port_name"
				Element:span
					:
				Element:span
				Element:span
					"http"
				Element:span
					,
				Element:span
				Element:span
					"protocol"
				Element:span
					:
				Element:span
				Element:span
					"tcp"
				Element:span
					,
				Element:span
				Element:span
					"published"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"uri_protocol"
				Element:span
					:
				Element:span
				Element:span
					"http"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					],
				Element:span
				Element:span
					"cpu_shares"
				Element:span
					:
				Element:span
				Element:span
					100
				Element:span
					,
				Element:span
				Element:span
					"cpuset"
				Element:span
					:
				Element:span
				Element:span
					"0,1"
				Element:span
					,
				Element:span
				Element:span
					"cgroup_parent"
				Element:span
					:
				Element:span
				Element:span
					"m-executor-abcd"
				Element:span
					,
				Element:span
				Element:span
					"deployed_datetime"
				Element:span
					:
				Element:span
				Element:span
					"Thu, 16 Oct 2014 12:04:08 +0000"
				Element:span
					,
				Element:span
				Element:span
					"destroyed_datetime"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"devices"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					"/dev/ttyUSB0:/dev/ttyUSB0"
				Element:span
				Element:span
					],
				Element:span
				Element:span
					"dns"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					"8.8.8.8"
				Element:span
				Element:span
					],
				Element:span
				Element:span
					"dns_search"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					"example.com"
				Element:span
					,
				Element:span
				Element:span
					"c1dd4e1e-1356-411c-8613-e15146633640.local.dockerapp.io"
				Element:span
				Element:span
					],
				Element:span
				Element:span
					"domainname"
				Element:span
					:
				Element:span
				Element:span
					"domainname"
				Element:span
					,
				Element:span
				Element:span
					"entrypoint"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"exit_code"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"exit_code_msg"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"extra_hosts"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					"onehost:50.31.209.229"
				Element:span
				Element:span
					],
				Element:span
				Element:span
					"hostname"
				Element:span
					:
				Element:span
				Element:span
					"hostname"
				Element:span
					,
				Element:span
				Element:span
					"image_name"
				Element:span
					:
				Element:span
				Element:span
					"tutum/wordpress-stackable:latest"
				Element:span
					,
				Element:span
				Element:span
					"labels"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"com.example.description"
				Element:span
					:
				Element:span
				Element:span
					"Accounting webapp"
				Element:span
					,
				Element:span
				Element:span
					"com.example.department"
				Element:span
					:
				Element:span
				Element:span
					"Finance"
				Element:span
					,
				Element:span
				Element:span
					"com.example.label-with-empty-value"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"linked_to_container"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"endpoints"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"3306/tcp"
				Element:span
					:
				Element:span
				Element:span
					"tcp://172.16.0.3:3306"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"from_container"
				Element:span
					:
				Element:span
				Element:span
					"/api/app/v1/user_namespace/container/c1dd4e1e-1356-411c-8613-e15146633640/"
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"DB_1"
				Element:span
					,
				Element:span
				Element:span
					"to_container"
				Element:span
					:
				Element:span
				Element:span
					"/api/app/v1/user_namespace/container/ba434e1e-1234-411c-8613-e15146633640/"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					],
				Element:span
				Element:span
					"link_variables"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"WORDPRESS_STACKABLE_1_ENV_DB_HOST"
				Element:span
					:
				Element:span
				Element:span
					"**LinkMe**"
				Element:span
					,
				Element:span
				Element:span
					"WORDPRESS_STACKABLE_1_ENV_DB_NAME"
				Element:span
					:
				Element:span
				Element:span
					"wordpress"
				Element:span
					,
				Element:span
				Element:span
					"WORDPRESS_STACKABLE_1_ENV_DB_PASS"
				Element:span
					:
				Element:span
				Element:span
					"szVaPz925B7I"
				Element:span
					,
				Element:span
				Element:span
					"WORDPRESS_STACKABLE_1_ENV_DB_PORT"
				Element:span
					:
				Element:span
				Element:span
					"**LinkMe**"
				Element:span
					,
				Element:span
				Element:span
					"WORDPRESS_STACKABLE_1_ENV_DB_USER"
				Element:span
					:
				Element:span
				Element:span
					"admin"
				Element:span
					,
				Element:span
				Element:span
					"WORDPRESS_STACKABLE_1_ENV_DEBIAN_FRONTEND"
				Element:span
					:
				Element:span
				Element:span
					"noninteractive"
				Element:span
					,
				Element:span
				Element:span
					"WORDPRESS_STACKABLE_1_ENV_HOME"
				Element:span
					:
				Element:span
				Element:span
					"/"
				Element:span
					,
				Element:span
				Element:span
					"WORDPRESS_STACKABLE_1_ENV_PATH"
				Element:span
					:
				Element:span
				Element:span
					"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
				Element:span
					,
				Element:span
				Element:span
					"WORDPRESS_STACKABLE_1_PORT"
				Element:span
					:
				Element:span
				Element:span
					"tcp://172.16.0.2:80"
				Element:span
					,
				Element:span
				Element:span
					"WORDPRESS_STACKABLE_1_PORT_80_TCP"
				Element:span
					:
				Element:span
				Element:span
					"tcp://172.16.0.2:80"
				Element:span
					,
				Element:span
				Element:span
					"WORDPRESS_STACKABLE_1_PORT_80_TCP_ADDR"
				Element:span
					:
				Element:span
				Element:span
					"172.16.0.2"
				Element:span
					,
				Element:span
				Element:span
					"WORDPRESS_STACKABLE_1_PORT_80_TCP_PORT"
				Element:span
					:
				Element:span
				Element:span
					"80"
				Element:span
					,
				Element:span
				Element:span
					"WORDPRESS_STACKABLE_1_PORT_80_TCP_PROTO"
				Element:span
					:
				Element:span
				Element:span
					"tcp"
				Element:span
					,
				Element:span
				Element:span
					"WORDPRESS_STACKABLE_ENV_DB_HOST"
				Element:span
					:
				Element:span
				Element:span
					"**LinkMe**"
				Element:span
					,
				Element:span
				Element:span
					"WORDPRESS_STACKABLE_ENV_DB_NAME"
				Element:span
					:
				Element:span
				Element:span
					"wordpress"
				Element:span
					,
				Element:span
				Element:span
					"WORDPRESS_STACKABLE_ENV_DB_PASS"
				Element:span
					:
				Element:span
				Element:span
					"szVaPz925B7I"
				Element:span
					,
				Element:span
				Element:span
					"WORDPRESS_STACKABLE_ENV_DB_PORT"
				Element:span
					:
				Element:span
				Element:span
					"**LinkMe**"
				Element:span
					,
				Element:span
				Element:span
					"WORDPRESS_STACKABLE_ENV_DB_USER"
				Element:span
					:
				Element:span
				Element:span
					"admin"
				Element:span
					,
				Element:span
				Element:span
					"WORDPRESS_STACKABLE_ENV_DEBIAN_FRONTEND"
				Element:span
					:
				Element:span
				Element:span
					"noninteractive"
				Element:span
					,
				Element:span
				Element:span
					"WORDPRESS_STACKABLE_ENV_HOME"
				Element:span
					:
				Element:span
				Element:span
					"/"
				Element:span
					,
				Element:span
				Element:span
					"WORDPRESS_STACKABLE_ENV_PATH"
				Element:span
					:
				Element:span
				Element:span
					"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
				Element:span
					,
				Element:span
				Element:span
					"WORDPRESS_STACKABLE_PORT"
				Element:span
					:
				Element:span
				Element:span
					"tcp://172.16.0.2:80"
				Element:span
					,
				Element:span
				Element:span
					"WORDPRESS_STACKABLE_PORT_80_TCP"
				Element:span
					:
				Element:span
				Element:span
					"tcp://172.16.0.2:80"
				Element:span
					,
				Element:span
				Element:span
					"WORDPRESS_STACKABLE_PORT_80_TCP_ADDR"
				Element:span
					:
				Element:span
				Element:span
					"172.16.0.2"
				Element:span
					,
				Element:span
				Element:span
					"WORDPRESS_STACKABLE_PORT_80_TCP_PORT"
				Element:span
					:
				Element:span
				Element:span
					"80"
				Element:span
					,
				Element:span
				Element:span
					"WORDPRESS_STACKABLE_PORT_80_TCP_PROTO"
				Element:span
					:
				Element:span
				Element:span
					"tcp"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"mac_address"
				Element:span
					:
				Element:span
				Element:span
					"02:42:ac:11:65:43"
				Element:span
					,
				Element:span
				Element:span
					"memory"
				Element:span
					:
				Element:span
				Element:span
					1024
				Element:span
					,
				Element:span
				Element:span
					"memory_swap"
				Element:span
					:
				Element:span
				Element:span
					4096
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"wordpress-stackable"
				Element:span
					,
				Element:span
				Element:span
					"net"
				Element:span
					:
				Element:span
				Element:span
					"bridge"
				Element:span
					,
				Element:span
				Element:span
					"node"
				Element:span
					:
				Element:span
				Element:span
					"/api/infra/v1/user_namespace/node/9691c44e-3155-4ca2-958d-c9571aac0a14/"
				Element:span
					,
				Element:span
				Element:span
					"pid"
				Element:span
					:
				Element:span
				Element:span
					"none"
				Element:span
					,
				Element:span
				Element:span
					"private_ip"
				Element:span
					:
				Element:span
				Element:span
					"10.7.0.1"
				Element:span
					,
				Element:span
				Element:span
					"privileged"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"public_dns"
				Element:span
					:
				Element:span
				Element:span
					"wordpress-stackable-1.admin.cont.dockerapp.io"
				Element:span
					,
				Element:span
				Element:span
					"read_only"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"resource_uri"
				Element:span
					:
				Element:span
				Element:span
					"/api/app/v1/user_namespace/container/c1dd4e1e-1356-411c-8613-e15146633640/"
				Element:span
					,
				Element:span
				Element:span
					"roles"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
					"global"
				Element:span
					],
				Element:span
				Element:span
					"run_command"
				Element:span
					:
				Element:span
				Element:span
					"/run-wordpress.sh"
				Element:span
					,
				Element:span
				Element:span
					"security_opt"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					"label:user:USER"
				Element:span
					,
				Element:span
				Element:span
					"label:role:ROLE"
				Element:span
				Element:span
					],
				Element:span
				Element:span
					"service"
				Element:span
					:
				Element:span
				Element:span
					"/api/app/v1/user_namespace/service/adeebc1b-1b81-4af0-b8f2-cefffc69d7fb/"
				Element:span
					,
				Element:span
				Element:span
					"started_datetime"
				Element:span
					:
				Element:span
				Element:span
					"Thu, 16 Oct 2014 12:04:08 +0000"
				Element:span
					,
				Element:span
				Element:span
					"state"
				Element:span
					:
				Element:span
				Element:span
					"Running"
				Element:span
					,
				Element:span
				Element:span
					"stdin_open"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"stopped_datetime"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"synchronized"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"tty"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"user"
				Element:span
					:
				Element:span
				Element:span
					"root"
				Element:span
					,
				Element:span
				Element:span
					"uuid"
				Element:span
					:
				Element:span
				Element:span
					"c1dd4e1e-1356-411c-8613-e15146633640"
				Element:span
					,
				Element:span
				Element:span
					"working_dir"
				Element:span
					:
				Element:span
				Element:span
					"/app"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					A container is a representation of a Docker container in a node.
			Node:
			(type) c
			(layer)1
				Element:p
					This is a
				Element:a
					namespaced endpoint
					.
			Node:
			(type) c
			(layer)1
				Element:h3
					Attributes
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Attribute
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					uuid
				Element:td
					A unique identifier for the container generated automatically on creation
				Element:tr
				Element:td
					resource_uri
				Element:td
					A unique API endpoint that represents the container
				Element:tr
				Element:td
					image_name
				Element:td
					The Docker image name and tag of the container
				Element:tr
				Element:td
					bindings
				Element:td
					A list of volume bindings that the container has mounted (see table
				Element:code
					Container Binding attributes
					below)
				Element:tr
				Element:td
					name
				Element:td
					A user provided name for the container (inherited from the service)
				Element:tr
				Element:td
					node
				Element:td
					The resource URI of the node where this container is running
				Element:tr
				Element:td
					service
				Element:td
					The resource URI of the service which this container is part of
				Element:tr
				Element:td
					public_dns
				Element:td
					The external FQDN of the container
				Element:tr
				Element:td
					state
				Element:td
					The state of the container (see table
				Element:code
					Container states
					below)
				Element:tr
				Element:td
					synchronized
				Element:td
					Flag indicating if the container is synchronized with the current service definition.
				Element:tr
				Element:td
					exit_code
				Element:td
					The numeric exit code of the container (if applicable,
				Element:code
					null
					otherwise)
				Element:tr
				Element:td
					exit_code_msg
				Element:td
					A string representation of the exit code of the container (if applicable,
				Element:code
					null
					otherwise)
				Element:tr
				Element:td
					deployed_datetime
				Element:td
					The date and time of the last deployment of the container (if applicable,
				Element:code
					null
					otherwise)
				Element:tr
				Element:td
					started_datetime
				Element:td
					The date and time of the last
				Element:code
					start
					operation on the container (if applicable,
				Element:code
					null
					otherwise)
				Element:tr
				Element:td
					stopped_datetime
				Element:td
					The date and time of the last
				Element:code
					stop
					operation on the container (if applicable,
				Element:code
					null
					otherwise)
				Element:tr
				Element:td
					destroyed_datetime
				Element:td
					The date and time of the
				Element:code
					terminate
					operation on the container (if applicable,
				Element:code
					null
					otherwise)
				Element:tr
				Element:td
					container_ports
				Element:td
					List of published ports of this container (see table
				Element:code
					Container Port attributes
					below)
				Element:tr
				Element:td
					container_envvars
				Element:td
					List of user-defined environment variables set on the containers of the service, which will override the container environment variables (see table
				Element:code
					Container Environment Variable attributes
					below)
				Element:tr
				Element:td
					labels
				Element:td
					Container metadata in form of dictionary
				Element:tr
				Element:td
					working_dir
				Element:td
					Working directory for running binaries within a container
				Element:tr
				Element:td
					user
				Element:td
					User used on the container on launch
				Element:tr
				Element:td
					hostname
				Element:td
					Hostname used on the container on launch
				Element:tr
				Element:td
					domainname
				Element:td
					Domainname used on the container on launch
				Element:tr
				Element:td
					mac_address
				Element:td
					Ethernet device’s MAC address used on the container on launch
				Element:tr
				Element:td
					cgroup_name
				Element:td
					Optional parent cgroup for the container.
				Element:tr
				Element:td
					tty
				Element:td
					If the container has the tty enable
				Element:tr
				Element:td
					stdin_open
				Element:td
					If the container has stdin opened
				Element:tr
				Element:td
					dns
				Element:td
					Container custom DNS servers
				Element:tr
				Element:td
					dns_search
				Element:td
					Container custom DNS search domain
				Element:tr
				Element:td
					cap_add
				Element:td
					Container added capabilities
				Element:tr
				Element:td
					cap_drop
				Element:td
					Container dropped capabilities
				Element:tr
				Element:td
					devices
				Element:td
					List of container device mappings
				Element:tr
				Element:td
					extra_hosts
				Element:td
					List of container hostname mappings
				Element:tr
				Element:td
					secuirty_opt
				Element:td
					Labeling scheme of this container
				Element:tr
				Element:td
					entrypoint
				Element:td
					Entrypoint used on the container on launch
				Element:tr
				Element:td
					run_command
				Element:td
					Run command used on the container on launch
				Element:tr
				Element:td
					cpu_shares
				Element:td
					The relative CPU priority of the container (see
				Element:a
					Runtime Constraints on CPU and Memory
					for more information)
				Element:tr
				Element:td
					cpuset
				Element:td
					CPUs in which execution is allowed
				Element:tr
				Element:td
					memory
				Element:td
					The memory limit of the container in MB (see
				Element:a
					Runtime Constraints on CPU and Memory
					for more information)
				Element:tr
				Element:td
					memory_swap
				Element:td
					Total memory limit (memory + swap) of the container in MB
				Element:tr
				Element:td
					autorestart
				Element:td
					Whether to restart the container automatically if it stops (see
				Element:a
					Crash recovery
					for more information)
				Element:tr
				Element:td
					autodestroy
				Element:td
					Whether to terminate the container automatically if it stops (see
				Element:a
					Autodestroy
					for more information)
				Element:tr
				Element:td
					roles
				Element:td
					List of Docker Cloud roles asigned to this container (see
				Element:a
					API roles
					for more information))
				Element:tr
				Element:td
					linked_to_container
				Element:td
					List of IP addresses of the linked containers (see table
				Element:code
					Container Link attributes
					below and
				Element:a
					Service links
					for more information)
				Element:tr
				Element:td
					link_variables
				Element:td
					List of environment variables that would be exposed in any container that is linked to this one
				Element:tr
				Element:td
					privileged
				Element:td
					Whether the container has Docker’s
				Element:code
					privileged
					flag set or not (see
				Element:a
					Runtime privilege
					for more information)
				Element:tr
				Element:td
					read_only
				Element:td
					Whether the container filesystem is read-only or not
				Element:tr
				Element:td
					private_ip
				Element:td
					IP address of the container on the overlay network. This IP will be reachable from any other container.
				Element:tr
				Element:td
					net
				Element:td
					Network mode set on the container (see table
				Element:code
					Network Modes
					below,
				Element:a
					more information
					)
				Element:tr
				Element:td
					pid
				Element:td
					PID (Process) Namespace mode for the container (
				Element:a
					more information
					)
			Node:
			(type) c
			(layer)1
				Element:h3
					Container Binding attributes
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Attribute
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					host_path
				Element:td
					The host path of the volume
				Element:tr
				Element:td
					container_path
				Element:td
					The container path where the volume is mounted
				Element:tr
				Element:td
					rewritable
				Element:td
				Element:code
					true
					is the volume has writable permissions
				Element:tr
				Element:td
					volume
				Element:td
					The resource URI of the volume
			Node:
			(type) c
			(layer)1
				Element:h3
					Container Port attributes
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Attribute
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					protocol
				Element:td
					The protocol of the port, either
				Element:code
					tcp
					or
				Element:code
					udp
				Element:tr
				Element:td
					inner_port
				Element:td
					The published port number inside the container
				Element:tr
				Element:td
					outer_port
				Element:td
					The published port number in the node public network interface
				Element:tr
				Element:td
					port_name
				Element:td
					Name of the service associated to this port
				Element:tr
				Element:td
					uri_protocol
				Element:td
					The protocol to be used in the endpoint for this port (i.e.
				Element:code
					http
					)
				Element:tr
				Element:td
					endpoint_uri
				Element:td
					The URI of the endpoint for this port
				Element:tr
				Element:td
					published
				Element:td
					Whether the port has been published in the host public network interface or not. Non-published ports can only be accessed via links.
			Node:
			(type) c
			(layer)1
				Element:h3
					Container Environment Variable attributes
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Attribute
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					key
				Element:td
					The name of the environment variable
				Element:tr
				Element:td
					value
				Element:td
					The value of the environment variable
			Node:
			(type) c
			(layer)1
				Element:h3
					Container States
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					State
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					Starting
				Element:td
					The container is being deployed or started (from Stopped). No actions allowed in this state.
				Element:tr
				Element:td
					Running
				Element:td
					The container is deployed and running. Possible actions in this state:
				Element:code
					stop
					,
				Element:code
					terminate
					.
				Element:tr
				Element:td
					Stopping
				Element:td
					The container is being stopped. No actions allowed in this state.
				Element:tr
				Element:td
					Stopped
				Element:td
					The container is stopped. Possible actions in this state:
				Element:code
					start
					,
				Element:code
					terminate
					.
				Element:tr
				Element:td
					Terminating
				Element:td
					The container is being deleted. No actions allowed in this state.
				Element:tr
				Element:td
					Terminated
				Element:td
					The container has been deleted. No actions allowed in this state.
			Node:
			(type) c
			(layer)1
				Element:h3
					Network Modes
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Strategy
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					bridge
				Element:td
					Creates a new network stack for the container on the docker bridge.
				Element:tr
				Element:td
					host
				Element:td
					Uses the host network stack inside the container.
			Node:
			(type) c
			(layer)1
				Element:h3
					Container Link attributes
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Attribute
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					name
				Element:td
					The name given to the link
				Element:tr
				Element:td
					from_container
				Element:td
					The resource URI of the “client” container
				Element:tr
				Element:td
					to_container
				Element:td
					The resource URI of the “server” container being linked
				Element:tr
				Element:td
					endpoints
				Element:td
					A dictionary with the endpoints (protocol, IP and port) to be used to reach each of the “server” container exposed ports
			Node:
			(type) c
			(layer)1
				Element:h2
					List all containers
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
					dockercloud
				Element:span
					containers
				Element:span
					=
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					Container
				Element:span
					.
				Element:span
					list
				Element:span
					()
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
				Element:span
					"github.com/docker/go-dockercloud/dockercloud"
				Element:span
				Element:span
					containerList
				Element:span
					,
				Element:span
				Element:span
					err
				Element:span
				Element:span
					:=
				Element:span
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					ListContainers
				Element:span
					()
				Element:span
				Element:span
					if
				Element:span
				Element:span
					err
				Element:span
				Element:span
					!=
				Element:span
				Element:span
					nil
				Element:span
				Element:span
					{
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Println
				Element:span
					(
				Element:span
					err
				Element:span
					)
				Element:span
				Element:span
					}
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Println
				Element:span
					(
				Element:span
					containerList
				Element:span
					)
				Element:span
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					GET
				Element:span
					/api/app/v1/container/
				Element:span
					HTTP
				Element:span
					/
				Element:span
					1.1
				Element:span
					Host
				Element:span
					:
				Element:span
					cloud.docker.com
				Element:span
					Authorization
				Element:span
					:
				Element:span
					Basic dXNlcm5hbWU6YXBpa2V5
				Element:span
					Accept
				Element:span
					:
				Element:span
					application/json
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					docker-cloud container ps
			Node:
			(type) c
			(layer)1
				Element:p
					Lists all current and recently terminated containers. Returns a list of
				Element:code
					Container
					objects.
			Node:
			(type) c
			(layer)1
				Element:h3
					Endpoint Type
			Node:
			(type) c
			(layer)1
				Element:p
					Available in Docker Cloud’s
				Element:strong
					REST API
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET /api/app/v1/[optional_namespace/]container/
			Node:
			(type) c
			(layer)1
				Element:h3
					Query Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					uuid
				Element:td
					Filter by UUID
				Element:tr
				Element:td
					state
				Element:td
					Filter by state. Possible values:
				Element:code
					Starting
					,
				Element:code
					Running
					,
				Element:code
					Stopping
					,
				Element:code
					Stopped
					,
				Element:code
					Terminating
					,
				Element:code
					Terminated
				Element:tr
				Element:td
					name
				Element:td
					Filter by container name
				Element:tr
				Element:td
					service
				Element:td
					Filter by resource URI of the target service.
				Element:tr
				Element:td
					node
				Element:td
					Filter by resource URI of the target node.
			Node:
			(type) c
			(layer)1
				Element:h2
					Get an existing container
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
					dockercloud
				Element:span
					container
				Element:span
					=
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					Container
				Element:span
					.
				Element:span
					fetch
				Element:span
					(
				Element:span
					"7eaf7fff-882c-4f3d-9a8f-a22317ac00ce"
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
				Element:span
					"github.com/docker/go-dockercloud/dockercloud"
				Element:span
				Element:span
					container
				Element:span
					,
				Element:span
				Element:span
					err
				Element:span
				Element:span
					:=
				Element:span
				Element:span
					dockerckoud
				Element:span
					.
				Element:span
					GetContainer
				Element:span
					(
				Element:span
					"7eaf7fff-882c-4f3d-9a8f-a22317ac00ce"
				Element:span
					)
				Element:span
				Element:span
					if
				Element:span
				Element:span
					err
				Element:span
				Element:span
					!=
				Element:span
				Element:span
					nil
				Element:span
				Element:span
					{
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Println
				Element:span
					(
				Element:span
					err
				Element:span
					)
				Element:span
				Element:span
					}
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Println
				Element:span
					(
				Element:span
					container
				Element:span
					)
				Element:span
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					GET
				Element:span
					/api/app/v1/container/7eaf7fff-882c-4f3d-9a8f-a22317ac00ce/
				Element:span
					HTTP
				Element:span
					/
				Element:span
					1.1
				Element:span
					Host
				Element:span
					:
				Element:span
					cloud.docker.com
				Element:span
					Authorization
				Element:span
					:
				Element:span
					Basic dXNlcm5hbWU6YXBpa2V5
				Element:span
					Accept
				Element:span
					:
				Element:span
					application/json
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					docker-cloud container inspect 7eaf7fff
			Node:
			(type) c
			(layer)1
				Element:p
					Get all the details of an specific container
			Node:
			(type) c
			(layer)1
				Element:h3
					Endpoint Type
			Node:
			(type) c
			(layer)1
				Element:p
					Available in Docker Cloud’s
				Element:strong
					REST API
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET /api/app/v1/[optional_namespace/]container/(uuid)/
			Node:
			(type) c
			(layer)1
				Element:h3
					Path Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					uuid
				Element:td
					The UUID of the container to retrieve
			Node:
			(type) c
			(layer)1
				Element:h2
					Get the logs of a container
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example log line
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"log"
				Element:span
					,
				Element:span
				Element:span
					"log"
				Element:span
					:
				Element:span
				Element:span
					"Log line from the container"
				Element:span
					,
				Element:span
				Element:span
					"streamType"
				Element:span
					:
				Element:span
				Element:span
					"stdout"
				Element:span
					,
				Element:span
				Element:span
					"timestamp"
				Element:span
					:
				Element:span
				Element:span
					1433779324
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
					dockercloud
				Element:span
					def
				Element:span
					log_handler
				Element:span
					(
				Element:span
					message
				Element:span
					):
				Element:span
					print
				Element:span
					message
				Element:span
					container
				Element:span
					=
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					Container
				Element:span
					.
				Element:span
					fetch
				Element:span
					(
				Element:span
					"7eaf7fff-882c-4f3d-9a8f-a22317ac00ce"
				Element:span
					)
				Element:span
					container
				Element:span
					.
				Element:span
					logs
				Element:span
					(
				Element:span
					tail
				Element:span
					=
				Element:span
					300
				Element:span
					,
				Element:span
					follow
				Element:span
					=
				Element:span
					True
				Element:span
					,
				Element:span
					log_handler
				Element:span
					=
				Element:span
					log_handler
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
				Element:span
					"github.com/docker/go-dockercloud/dockercloud"
				Element:span
				Element:span
					container
				Element:span
					,
				Element:span
				Element:span
					err
				Element:span
				Element:span
					:=
				Element:span
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					GetContainer
				Element:span
					(
				Element:span
					"447ecddc-2890-4ea2-849b-99392e0dd7a6"
				Element:span
					)
				Element:span
				Element:span
					if
				Element:span
				Element:span
					err
				Element:span
				Element:span
					!=
				Element:span
				Element:span
					nil
				Element:span
				Element:span
					{
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Fatal
				Element:span
					(
				Element:span
					err
				Element:span
					)
				Element:span
				Element:span
					}
				Element:span
				Element:span
					c
				Element:span
				Element:span
					:=
				Element:span
				Element:span
					make
				Element:span
					(
				Element:span
					chan
				Element:span
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					Logs
				Element:span
					)
				Element:span
				Element:span
					go
				Element:span
				Element:span
					container
				Element:span
					.
				Element:span
					Logs
				Element:span
					(
				Element:span
					c
				Element:span
					)
				Element:span
				Element:span
					for
				Element:span
				Element:span
					{
				Element:span
				Element:span
					s
				Element:span
				Element:span
					:=
				Element:span
				Element:span
					<-
				Element:span
					c
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Println
				Element:span
					(
				Element:span
					s
				Element:span
					)
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					GET
				Element:span
					/api/app/v1/container/7eaf7fff-882c-4f3d-9a8f-a22317ac00ce/logs/
				Element:span
					HTTP
				Element:span
					/
				Element:span
					1.1
				Element:span
					Host
				Element:span
					:
				Element:span
					ws.cloud.docker.com
				Element:span
					Authorization
				Element:span
					:
				Element:span
					Basic dXNlcm5hbWU6YXBpa2V5
				Element:span
					Connection
				Element:span
					:
				Element:span
					Upgrade
				Element:span
					Upgrade
				Element:span
					:
				Element:span
					websocket
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					docker-cloud container logs 7eaf7fff
			Node:
			(type) c
			(layer)1
				Element:p
					Get the logs of the specified container.
			Node:
			(type) c
			(layer)1
				Element:h3
					Endpoint Type
			Node:
			(type) c
			(layer)1
				Element:p
					Available in Docker Cloud’s
				Element:strong
					STREAM API
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET /api/app/v1/[optional_namespace/]container/(uuid)/logs/
			Node:
			(type) c
			(layer)1
				Element:h3
					Path Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					uuid
				Element:td
					The UUID of the container to retrieve logs
			Node:
			(type) c
			(layer)1
				Element:h3
					Query Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					tail
				Element:td
					Number of lines to show from the end of the logs (default:
				Element:code
					300
					)
				Element:tr
				Element:td
					follow
				Element:td
					Whether to stream logs or close the connection immediately (default: true)
				Element:tr
				Element:td
					service
				Element:td
					Filter by service (resource URI)
			Node:
			(type) c
			(layer)1
				Element:h2
					Start a container
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
					dockercloud
				Element:span
					container
				Element:span
					=
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					Container
				Element:span
					.
				Element:span
					fetch
				Element:span
					(
				Element:span
					"7eaf7fff-882c-4f3d-9a8f-a22317ac00ce"
				Element:span
					)
				Element:span
					container
				Element:span
					.
				Element:span
					start
				Element:span
					()
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
				Element:span
					"github.com/docker/go-dockercloud/dockercloud"
				Element:span
				Element:span
					container
				Element:span
					,
				Element:span
				Element:span
					err
				Element:span
				Element:span
					:=
				Element:span
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					GetContainer
				Element:span
					(
				Element:span
					"7eaf7fff-882c-4f3d-9a8f-a22317ac00ce"
				Element:span
					)
				Element:span
				Element:span
					if
				Element:span
				Element:span
					err
				Element:span
				Element:span
					!=
				Element:span
				Element:span
					nil
				Element:span
				Element:span
					{
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Println
				Element:span
					(
				Element:span
					err
				Element:span
					)
				Element:span
				Element:span
					}
				Element:span
				Element:span
					if
				Element:span
				Element:span
					err
				Element:span
				Element:span
					=
				Element:span
				Element:span
					container
				Element:span
					.
				Element:span
					Start
				Element:span
					();
				Element:span
				Element:span
					err
				Element:span
				Element:span
					!=
				Element:span
				Element:span
					nil
				Element:span
				Element:span
					{
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Println
				Element:span
					(
				Element:span
					err
				Element:span
					)
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					POST
				Element:span
					/api/app/v1/container/7eaf7fff-882c-4f3d-9a8f-a22317ac00ce/start/
				Element:span
					HTTP
				Element:span
					/
				Element:span
					1.1
				Element:span
					Host
				Element:span
					:
				Element:span
					cloud.docker.com
				Element:span
					Authorization
				Element:span
					:
				Element:span
					Basic dXNlcm5hbWU6YXBpa2V5
				Element:span
					Accept
				Element:span
					:
				Element:span
					application/json
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					docker-cloud container start 7eaf7fff
			Node:
			(type) c
			(layer)1
				Element:p
					Starts a stopped container.
			Node:
			(type) c
			(layer)1
				Element:h3
					Endpoint Type
			Node:
			(type) c
			(layer)1
				Element:p
					Available in Docker Cloud’s
				Element:strong
					REST API
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					POST /api/app/v1/[optional_namespace/]container/(uuid)/start/
			Node:
			(type) c
			(layer)1
				Element:h3
					Path Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					uuid
				Element:td
					The UUID of the container to start
			Node:
			(type) c
			(layer)1
				Element:h2
					Stop a container
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
					dockercloud
				Element:span
					container
				Element:span
					=
				Element:span
					dockerlcoud
				Element:span
					.
				Element:span
					Container
				Element:span
					.
				Element:span
					fetch
				Element:span
					(
				Element:span
					"7eaf7fff-882c-4f3d-9a8f-a22317ac00ce"
				Element:span
					)
				Element:span
					container
				Element:span
					.
				Element:span
					stop
				Element:span
					()
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
				Element:span
					"github.com/docker/go-dockercloud/dockercloud"
				Element:span
				Element:span
					container
				Element:span
					,
				Element:span
				Element:span
					err
				Element:span
				Element:span
					:=
				Element:span
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					GetContainer
				Element:span
					(
				Element:span
					"7eaf7fff-882c-4f3d-9a8f-a22317ac00ce"
				Element:span
					)
				Element:span
				Element:span
					if
				Element:span
				Element:span
					err
				Element:span
				Element:span
					!=
				Element:span
				Element:span
					nil
				Element:span
				Element:span
					{
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Println
				Element:span
					(
				Element:span
					err
				Element:span
					)
				Element:span
				Element:span
					}
				Element:span
				Element:span
					if
				Element:span
				Element:span
					err
				Element:span
				Element:span
					=
				Element:span
				Element:span
					container
				Element:span
					.
				Element:span
					Stop
				Element:span
					();
				Element:span
				Element:span
					err
				Element:span
				Element:span
					!=
				Element:span
				Element:span
					nil
				Element:span
				Element:span
					{
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Println
				Element:span
					(
				Element:span
					err
				Element:span
					)
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					POST
				Element:span
					/api/app/v1/container/7eaf7fff-882c-4f3d-9a8f-a22317ac00ce/stop/
				Element:span
					HTTP
				Element:span
					/
				Element:span
					1.1
				Element:span
					Host
				Element:span
					:
				Element:span
					cloud.docker.com
				Element:span
					Authorization
				Element:span
					:
				Element:span
					Basic dXNlcm5hbWU6YXBpa2V5
				Element:span
					Accept
				Element:span
					:
				Element:span
					application/json
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					docker-cloud container stop 7eaf7fff
			Node:
			(type) c
			(layer)1
				Element:p
					Stops a running container.
			Node:
			(type) c
			(layer)1
				Element:h3
					Endpoint Type
			Node:
			(type) c
			(layer)1
				Element:p
					Available in Docker Cloud’s
				Element:strong
					REST API
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					POST /api/app/v1/[optional_namespace/]container/(uuid)/stop/
			Node:
			(type) c
			(layer)1
				Element:h3
					Path Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					uuid
				Element:td
					The UUID of the container to stop
			Node:
			(type) c
			(layer)1
				Element:h2
					Redeploy a container
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
					dockercloud
				Element:span
					container
				Element:span
					=
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					Container
				Element:span
					.
				Element:span
					fetch
				Element:span
					(
				Element:span
					"7eaf7fff-882c-4f3d-9a8f-a22317ac00ce"
				Element:span
					)
				Element:span
					container
				Element:span
					.
				Element:span
					redeploy
				Element:span
					()
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
				Element:span
					"github.com/docker/go-dockercloud/dockercloud"
				Element:span
				Element:span
					container
				Element:span
					,
				Element:span
				Element:span
					err
				Element:span
				Element:span
					:=
				Element:span
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					GetContainer
				Element:span
					(
				Element:span
					"7eaf7fff-882c-4f3d-9a8f-a22317ac00ce"
				Element:span
					)
				Element:span
				Element:span
					if
				Element:span
				Element:span
					err
				Element:span
				Element:span
					!=
				Element:span
				Element:span
					nil
				Element:span
				Element:span
					{
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Println
				Element:span
					(
				Element:span
					err
				Element:span
					)
				Element:span
				Element:span
					}
				Element:span
				Element:span
					//Redeploy(dockercloud.ReuseVolumesOption{Reuse: true) to reuse the existing volumes
				Element:span
				Element:span
					//Redeploy(dockercloud.ReuseVolumesOption{Reuse: false}) to not reuse the existing volumes
				Element:span
				Element:span
					if
				Element:span
				Element:span
					err
				Element:span
				Element:span
					=
				Element:span
				Element:span
					container
				Element:span
					.
				Element:span
					Redeploy
				Element:span
					(
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					ReuseVolumesOption
				Element:span
					{
				Element:span
					Reuse
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					});
				Element:span
				Element:span
					err
				Element:span
				Element:span
					!=
				Element:span
				Element:span
					nil
				Element:span
				Element:span
					{
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Println
				Element:span
					(
				Element:span
					err
				Element:span
					)
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					POST
				Element:span
					/api/app/v1/container/7eaf7fff-882c-4f3d-9a8f-a22317ac00ce/start/
				Element:span
					HTTP
				Element:span
					/
				Element:span
					1.1
				Element:span
					Host
				Element:span
					:
				Element:span
					cloud.docker.com
				Element:span
					Authorization
				Element:span
					:
				Element:span
					Basic dXNlcm5hbWU6YXBpa2V5
				Element:span
					Accept
				Element:span
					:
				Element:span
					application/json
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					docker-cloud container redeploy 7eaf7fff
			Node:
			(type) c
			(layer)1
				Element:p
					Redeploys a container.
			Node:
			(type) c
			(layer)1
				Element:h3
					Endpoint Type
			Node:
			(type) c
			(layer)1
				Element:p
					Available in Docker Cloud’s
				Element:strong
					REST API
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					POST /api/app/v1/[optional_namespace/]container/(uuid)/redeploy/
			Node:
			(type) c
			(layer)1
				Element:h3
					Path Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					uuid
				Element:td
					The UUID of the container to redeploy
			Node:
			(type) c
			(layer)1
				Element:h3
					Query Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					reuse_volumes
				Element:td
					Wheather to reuse container volumes for this redeploy operation or not (default:
				Element:code
					true
					).
			Node:
			(type) c
			(layer)1
				Element:h2
					Terminate a container
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
					dockercloud
				Element:span
					container
				Element:span
					=
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					Container
				Element:span
					.
				Element:span
					fetch
				Element:span
					(
				Element:span
					"7eaf7fff-882c-4f3d-9a8f-a22317ac00ce"
				Element:span
					)
				Element:span
					container
				Element:span
					.
				Element:span
					delete
				Element:span
					()
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
				Element:span
					"github.com/docker/go-dockercloud/dockercloud"
				Element:span
				Element:span
					container
				Element:span
					,
				Element:span
				Element:span
					err
				Element:span
				Element:span
					:=
				Element:span
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					GetContainer
				Element:span
					(
				Element:span
					"7eaf7fff-882c-4f3d-9a8f-a22317ac00ce"
				Element:span
					)
				Element:span
				Element:span
					if
				Element:span
				Element:span
					err
				Element:span
				Element:span
					!=
				Element:span
				Element:span
					nil
				Element:span
				Element:span
					{
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Println
				Element:span
					(
				Element:span
					err
				Element:span
					)
				Element:span
				Element:span
					}
				Element:span
				Element:span
					if
				Element:span
				Element:span
					err
				Element:span
				Element:span
					=
				Element:span
				Element:span
					container
				Element:span
					.
				Element:span
					Terminate
				Element:span
					();
				Element:span
				Element:span
					err
				Element:span
				Element:span
					!=
				Element:span
				Element:span
					nil
				Element:span
				Element:span
					{
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Println
				Element:span
					(
				Element:span
					err
				Element:span
					)
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					DELETE
				Element:span
					/api/app/v1/container/7eaf7fff-882c-4f3d-9a8f-a22317ac00ce/
				Element:span
					HTTP
				Element:span
					/
				Element:span
					1.1
				Element:span
					Host
				Element:span
					:
				Element:span
					cloud.docker.com
				Element:span
					Authorization
				Element:span
					:
				Element:span
					Basic dXNlcm5hbWU6YXBpa2V5
				Element:span
					Accept
				Element:span
					:
				Element:span
					application/json
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					docker-cloud container terminate 7eaf7fff
			Node:
			(type) c
			(layer)1
				Element:p
					Terminates the specified container. This is not reversible. All data stored in the container will be permanently deleted.
			Node:
			(type) c
			(layer)1
				Element:h3
					Endpoint Type
			Node:
			(type) c
			(layer)1
				Element:p
					Available in Docker Cloud’s
				Element:strong
					REST API
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					DELETE /api/app/v1/[optional_namespace/]container/(uuid)/
			Node:
			(type) c
			(layer)1
				Element:h3
					Path Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					uuid
				Element:td
					The UUID of the container to terminate
			Node:
			(type) c
			(layer)1
				Element:h2
					Execute command inside a container
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					import dockercloud def msg_handler(message): print message container = dockercloud.Container.fetch("7eaf7fff-882c-4f3d-9a8f-a22317ac00ce") container.execute("ls", handler=msg_handler)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
				Element:span
					"github.com/docker/go-dockercloud/dockercloud"
				Element:span
				Element:span
					container
				Element:span
					,
				Element:span
				Element:span
					err
				Element:span
				Element:span
					:=
				Element:span
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					GetContainer
				Element:span
					(
				Element:span
					"7eaf7fff-882c-4f3d-9a8f-a22317ac00ce"
				Element:span
					)
				Element:span
				Element:span
					if
				Element:span
				Element:span
					err
				Element:span
				Element:span
					!=
				Element:span
				Element:span
					nil
				Element:span
				Element:span
					{
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Println
				Element:span
					(
				Element:span
					err
				Element:span
					)
				Element:span
				Element:span
					}
				Element:span
				Element:span
					c
				Element:span
				Element:span
					:=
				Element:span
				Element:span
					make
				Element:span
					(
				Element:span
					chan
				Element:span
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					Exec
				Element:span
					)
				Element:span
				Element:span
					container
				Element:span
					.
				Element:span
					Exec
				Element:span
					(
				Element:span
					"ls"
				Element:span
					,
				Element:span
				Element:span
					c
				Element:span
					)
				Element:span
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					GET
				Element:span
					/api/app/v1/container/(uuid)/exec/
				Element:span
					HTTP
				Element:span
					/
				Element:span
					1.1
				Element:span
					Host
				Element:span
					:
				Element:span
					ws.cloud.docker.com
				Element:span
					Authorization
				Element:span
					:
				Element:span
					Basic dXNlcm5hbWU6YXBpa2V5
				Element:span
					Connection
				Element:span
					:
				Element:span
					Upgrade
				Element:span
					Upgrade
				Element:span
					:
				Element:span
					websocket
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					docker-cloud exec 7eaf7fff ls
			Node:
			(type) c
			(layer)1
				Element:p
					Executes a command inside the specified running container, creating a bi-directional stream for the process’ standard input and output. This endpoint can be connected to using a bi-directional Secure Web Socket
				Element:code
					wss://ws.cloud.docker.com/api/app/v1/container/(uuid)/exec/
			Node:
			(type) c
			(layer)1
				Element:h3
					Endpoint Type
			Node:
			(type) c
			(layer)1
				Element:p
					Available in Docker Cloud’s
				Element:strong
					STREAM API
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET /api/app/v1/[optional_namespace/]container/(uuid)/exec/
			Node:
			(type) c
			(layer)1
				Element:h3
					Path Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					uuid
				Element:td
					The UUID of the container where the command will be executed
			Node:
			(type) c
			(layer)1
				Element:h3
					Query Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					command
				Element:td
					Command to be executed (default:
				Element:code
					sh
					)
			Node:
			(type) h1
			(layer)1
				Element:h1
					Triggers
			Node:
			(type) c
			(layer)1
				Element:h2
					Service triggers
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
				Element:span
					"/api/app/v1/user_namespace/service/82d4a246-52d8-468d-903d-9da9ef05ff28/trigger/0224815a-c156-44e4-92d7-997c69354438/call/"
				Element:span
					,
				Element:span
				Element:span
					"operation"
				Element:span
					:
				Element:span
				Element:span
					"REDEPLOY"
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"docker_trigger"
				Element:span
					,
				Element:span
				Element:span
					"resource_uri"
				Element:span
					:
				Element:span
				Element:span
					"/api/app/v1/user_namespace/service/82d4a246-52d8-468d-903d-9da9ef05ff28/trigger/0224815a-c156-44e4-92d7-997c69354438/"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Triggers are URLs that will start a redeploy of the service whenever a
				Element:code
					POST
					request is sent to them. They require no authorization headers, so they should be treated as access tokens. Triggers can be revoked if they are leaked or no longer used for security purposes. See
				Element:a
					Triggers
					for more information.
			Node:
			(type) c
			(layer)1
				Element:p
					This is a
				Element:a
					namespaced endpoint
					.
			Node:
			(type) c
			(layer)1
				Element:h3
					Attributes
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Attribute
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					url
				Element:td
					Address to be used to call the trigger with a
				Element:code
					POST
					request
				Element:tr
				Element:td
					name
				Element:td
					A user provided name for the trigger
				Element:tr
				Element:td
					operation
				Element:td
					The operation that the trigger call performs (see table
				Element:code
					Operations
					below)
				Element:tr
				Element:td
					resource_uri
				Element:td
					A unique API endpoint that represents the trigger
			Node:
			(type) c
			(layer)1
				Element:h3
					Operations
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Operation
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					REDEPLOY
				Element:td
					Performs a
				Element:code
					redeploy
					service operation.
				Element:tr
				Element:td
					SCALEUP
				Element:td
					Performs a
				Element:code
					scale up
					service operation.
			Node:
			(type) c
			(layer)1
				Element:h2
					List all triggers
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
					dockercloud
				Element:span
					service
				Element:span
					=
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					Service
				Element:span
					.
				Element:span
					fetch
				Element:span
					(
				Element:span
					'61a29874-9134-48f9-b460-f37d4bec4826'
				Element:span
					)
				Element:span
					trigger
				Element:span
					=
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					Trigger
				Element:span
					.
				Element:span
					fetch
				Element:span
					(
				Element:span
					service
				Element:span
					)
				Element:span
					trigger
				Element:span
					.
				Element:span
					list
				Element:span
					()
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					GET
				Element:span
					/api/app/v1/service/61a29874-9134-48f9-b460-f37d4bec4826/trigger/
				Element:span
					HTTP
				Element:span
					/
				Element:span
					1.1
				Element:span
					Host
				Element:span
					:
				Element:span
					cloud.docker.com
				Element:span
					Authorization
				Element:span
					:
				Element:span
					Basic dXNlcm5hbWU6YXBpa2V5
				Element:span
					Accept
				Element:span
					:
				Element:span
					application/json
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
				Element:span
					"github.com/docker/go-dockercloud/dockercloud"
				Element:span
				Element:span
					service
				Element:span
					,
				Element:span
				Element:span
					err
				Element:span
				Element:span
					:=
				Element:span
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					GetService
				Element:span
					(
				Element:span
					"61a29874-9134-48f9-b460-f37d4bec4826"
				Element:span
					)
				Element:span
				Element:span
					if
				Element:span
				Element:span
					err
				Element:span
				Element:span
					!=
				Element:span
				Element:span
					nil
				Element:span
				Element:span
					{
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Println
				Element:span
					(
				Element:span
					err
				Element:span
					)
				Element:span
				Element:span
					}
				Element:span
				Element:span
					trigger
				Element:span
					,
				Element:span
				Element:span
					err
				Element:span
				Element:span
					:=
				Element:span
				Element:span
					service
				Element:span
					.
				Element:span
					ListTriggers
				Element:span
					()
				Element:span
				Element:span
					if
				Element:span
				Element:span
					err
				Element:span
				Element:span
					!=
				Element:span
				Element:span
					nil
				Element:span
				Element:span
					{
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Println
				Element:span
					(
				Element:span
					err
				Element:span
					)
				Element:span
				Element:span
					}
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Println
				Element:span
					(
				Element:span
					trigger
				Element:span
					)
				Element:span
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					docker-cloud trigger list 61a29874-9134-48f9-b460-f37d4bec4826
			Node:
			(type) c
			(layer)1
				Element:p
					Lists all current triggers the service has associated to. Returns a list of
				Element:code
					Service Trigger
					objects.
			Node:
			(type) c
			(layer)1
				Element:h3
					Endpoint Type
			Node:
			(type) c
			(layer)1
				Element:p
					Available in Docker Cloud’s
				Element:strong
					REST API
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET /api/app/v1/[optional_namespace/]service/(uuid)/trigger/
			Node:
			(type) c
			(layer)1
				Element:h3
					Path Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					uuid
				Element:td
					The UUID of the service the triggers are associated to
			Node:
			(type) c
			(layer)1
				Element:h2
					Create a new trigger
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
					dockercloud
				Element:span
					service
				Element:span
					=
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					Service
				Element:span
					.
				Element:span
					fetch
				Element:span
					(
				Element:span
					'61a29874-9134-48f9-b460-f37d4bec4826'
				Element:span
					)
				Element:span
					trigger
				Element:span
					=
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					Trigger
				Element:span
					.
				Element:span
					fetch
				Element:span
					(
				Element:span
					service
				Element:span
					)
				Element:span
					trigger
				Element:span
					.
				Element:span
					add
				Element:span
					(
				Element:span
					name
				Element:span
					=
				Element:span
					"mytrigger_name"
				Element:span
					,
				Element:span
					operation
				Element:span
					=
				Element:span
					"REDEPLOY"
				Element:span
					)
				Element:span
					trigger
				Element:span
					.
				Element:span
					save
				Element:span
					()
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
				Element:span
					"github.com/docker/go-dockercloud/dockercloud"
				Element:span
				Element:span
					service
				Element:span
					,
				Element:span
				Element:span
					err
				Element:span
				Element:span
					:=
				Element:span
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					GetService
				Element:span
					(
				Element:span
					"61a29874-9134-48f9-b460-f37d4bec4826"
				Element:span
					)
				Element:span
				Element:span
					if
				Element:span
				Element:span
					err
				Element:span
				Element:span
					!=
				Element:span
				Element:span
					nil
				Element:span
				Element:span
					{
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Println
				Element:span
					(
				Element:span
					err
				Element:span
					)
				Element:span
				Element:span
					}
				Element:span
				Element:span
					trigger
				Element:span
					,
				Element:span
				Element:span
					err
				Element:span
				Element:span
					:=
				Element:span
				Element:span
					service
				Element:span
					.
				Element:span
					CreateTrigger
				Element:span
					(
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					TriggerCreateRequest
				Element:span
					{
				Element:span
					Name
				Element:span
					:
				Element:span
				Element:span
					"test-trigger"
				Element:span
					,
				Element:span
				Element:span
					Operation
				Element:span
					:
				Element:span
				Element:span
					"REDEPLOY"
				Element:span
					})
				Element:span
				Element:span
					if
				Element:span
				Element:span
					err
				Element:span
				Element:span
					!=
				Element:span
				Element:span
					nil
				Element:span
				Element:span
					{
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Println
				Element:span
					(
				Element:span
					err
				Element:span
					)
				Element:span
				Element:span
					}
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Println
				Element:span
					(
				Element:span
					trigger
				Element:span
					)
				Element:span
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					POST
				Element:span
					/api/app/v1/service/61a29874-9134-48f9-b460-f37d4bec4826/trigger/
				Element:span
					HTTP
				Element:span
					/
				Element:span
					1.1
				Element:span
					Host
				Element:span
					:
				Element:span
					cloud.docker.com
				Element:span
					Authorization
				Element:span
					:
				Element:span
					Basic dXNlcm5hbWU6YXBpa2V5
				Element:span
					Accept
				Element:span
					:
				Element:span
					application/json
				Element:span
					Content-Type
				Element:span
					:
				Element:span
					application/json
				Element:span
					{
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"mytrigger_name"
				Element:span
					,
				Element:span
				Element:span
					"operation"
				Element:span
					:
				Element:span
				Element:span
					"REDEPLOY"
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					docker-cloud trigger create --name mytrigger_name --operation REDEPLOY 61a29874-9134-48f9-b460-f37d4bec4826
			Node:
			(type) c
			(layer)1
				Element:p
					Creates a new service trigger.
			Node:
			(type) c
			(layer)1
				Element:h3
					Endpoint Type
			Node:
			(type) c
			(layer)1
				Element:p
					Available in Docker Cloud’s
				Element:strong
					REST API
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					POST /api/app/v1/[optional_namespace/]service/(uuid)/trigger/
			Node:
			(type) c
			(layer)1
				Element:h3
					JSON Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					name
				Element:td
					(optional) A user provided name for the trigger
				Element:tr
				Element:td
					operation
				Element:td
					(optional) The operation to be performed by the trigger (default: “REDEPLOY”)
			Node:
			(type) c
			(layer)1
				Element:h2
					Get an existing trigger
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
					dockercloud
				Element:span
					service
				Element:span
					=
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					Service
				Element:span
					.
				Element:span
					fetch
				Element:span
					(
				Element:span
					'61a29874-9134-48f9-b460-f37d4bec4826'
				Element:span
					)
				Element:span
					trigger
				Element:span
					=
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					Trigger
				Element:span
					.
				Element:span
					fetch
				Element:span
					(
				Element:span
					service
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
				Element:span
					"github.com/docker/go-dockercloud/dockercloud"
				Element:span
				Element:span
					service
				Element:span
					,
				Element:span
				Element:span
					err
				Element:span
				Element:span
					:=
				Element:span
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					GetService
				Element:span
					(
				Element:span
					"61a29874-9134-48f9-b460-f37d4bec4826"
				Element:span
					)
				Element:span
				Element:span
					if
				Element:span
				Element:span
					err
				Element:span
				Element:span
					!=
				Element:span
				Element:span
					nil
				Element:span
				Element:span
					{
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Println
				Element:span
					(
				Element:span
					err
				Element:span
					)
				Element:span
				Element:span
					}
				Element:span
				Element:span
					trigger
				Element:span
					,
				Element:span
				Element:span
					err
				Element:span
				Element:span
					:=
				Element:span
				Element:span
					service
				Element:span
					.
				Element:span
					GetTrigger
				Element:span
					(
				Element:span
					"7eaf7fff-882c-4f3d-9a8f-a22317ac00ce"
				Element:span
					)
				Element:span
				Element:span
					if
				Element:span
				Element:span
					err
				Element:span
				Element:span
					!=
				Element:span
				Element:span
					nil
				Element:span
				Element:span
					{
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Println
				Element:span
					(
				Element:span
					err
				Element:span
					)
				Element:span
				Element:span
					}
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Println
				Element:span
					(
				Element:span
					trigger
				Element:span
					)
				Element:span
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					GET
				Element:span
					/api/app/v1/service/61a29874-9134-48f9-b460-f37d4bec4826/trigger/7eaf7fff-882c-4f3d-9a8f-a22317ac00ce/
				Element:span
					HTTP
				Element:span
					/
				Element:span
					1.1
				Element:span
					Host
				Element:span
					:
				Element:span
					cloud.docker.com
				Element:span
					Authorization
				Element:span
					:
				Element:span
					Basic dXNlcm5hbWU6YXBpa2V5
				Element:span
					Accept
				Element:span
					:
				Element:span
					application/json
			Node:
			(type) c
			(layer)1
				Element:p
					Get all the details of an specific trigger
			Node:
			(type) c
			(layer)1
				Element:h3
					Endpoint Type
			Node:
			(type) c
			(layer)1
				Element:p
					Available in Docker Cloud’s
				Element:strong
					REST API
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET /api/app/v1/[optional_namespace/]service/(uuid)/trigger/(trigger_uuid)/
			Node:
			(type) c
			(layer)1
				Element:h3
					Path Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					uuid
				Element:td
					The UUID of the service the triggers are associated to
				Element:tr
				Element:td
					trigger_uuid
				Element:td
					The UUID of the trigger to retrieve
			Node:
			(type) c
			(layer)1
				Element:h2
					Delete a trigger
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
					dockercloud
				Element:span
					service
				Element:span
					=
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					Service
				Element:span
					.
				Element:span
					fetch
				Element:span
					(
				Element:span
					'61a29874-9134-48f9-b460-f37d4bec4826'
				Element:span
					)
				Element:span
					trigger
				Element:span
					=
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					Trigger
				Element:span
					.
				Element:span
					fetch
				Element:span
					(
				Element:span
					service
				Element:span
					)
				Element:span
					trigger
				Element:span
					.
				Element:span
					delete
				Element:span
					(
				Element:span
					"7eaf7fff-882c-4f3d-9a8f-a22317ac00ce"
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
				Element:span
					"github.com/docker/go-dockercloud/dockercloud"
				Element:span
				Element:span
					service
				Element:span
					,
				Element:span
				Element:span
					err
				Element:span
				Element:span
					:=
				Element:span
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					GetService
				Element:span
					(
				Element:span
					"61a29874-9134-48f9-b460-f37d4bec4826"
				Element:span
					)
				Element:span
				Element:span
					if
				Element:span
				Element:span
					err
				Element:span
				Element:span
					!=
				Element:span
				Element:span
					nil
				Element:span
				Element:span
					{
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Println
				Element:span
					(
				Element:span
					err
				Element:span
					)
				Element:span
				Element:span
					}
				Element:span
				Element:span
					service
				Element:span
					.
				Element:span
					DeleteTrigger
				Element:span
					(
				Element:span
					"7eaf7fff-882c-4f3d-9a8f-a22317ac00ce"
				Element:span
					)
				Element:span
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					DELETE
				Element:span
					/api/app/v1/service/61a29874-9134-48f9-b460-f37d4bec4826/trigger/7eaf7fff-882c-4f3d-9a8f-a22317ac00ce/
				Element:span
					HTTP
				Element:span
					/
				Element:span
					1.1
				Element:span
					Host
				Element:span
					:
				Element:span
					cloud.docker.com
				Element:span
					Authorization
				Element:span
					:
				Element:span
					Basic dXNlcm5hbWU6YXBpa2V5
				Element:span
					Accept
				Element:span
					:
				Element:span
					application/json
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					docker-cloud trigger rm 61a29874-9134-48f9-b460-f37d4bec4826 7eaf7fff-882c-4f3d-9a8f-a22317ac00ce
			Node:
			(type) c
			(layer)1
				Element:p
					Deletes specific trigger. It will be no longer available to be called.
			Node:
			(type) c
			(layer)1
				Element:h3
					Endpoint Type
			Node:
			(type) c
			(layer)1
				Element:p
					Available in Docker Cloud’s
				Element:strong
					REST API
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					DELETE /api/app/v1/[optional_namespace/]service/(uuid)/trigger/(trigger_uuid)/
			Node:
			(type) c
			(layer)1
				Element:h3
					Path Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					uuid
				Element:td
					The UUID of the associated service
				Element:tr
				Element:td
					trigger_uuid
				Element:td
					The UUID of the trigger to delete
			Node:
			(type) c
			(layer)1
				Element:h2
					Call a trigger
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
					dockercloud
				Element:span
					service
				Element:span
					=
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					Service
				Element:span
					.
				Element:span
					fetch
				Element:span
					(
				Element:span
					'61a29874-9134-48f9-b460-f37d4bec4826'
				Element:span
					)
				Element:span
					trigger
				Element:span
					=
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					Trigger
				Element:span
					.
				Element:span
					fetch
				Element:span
					(
				Element:span
					service
				Element:span
					)
				Element:span
					trigger
				Element:span
					.
				Element:span
					call
				Element:span
					(
				Element:span
					"7eaf7fff-882c-4f3d-9a8f-a22317ac00ce"
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
				Element:span
					"github.com/docker/go-dockercloud/dockercloud"
				Element:span
				Element:span
					service
				Element:span
					,
				Element:span
				Element:span
					err
				Element:span
				Element:span
					:=
				Element:span
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					GetService
				Element:span
					(
				Element:span
					"61a29874-9134-48f9-b460-f37d4bec4826"
				Element:span
					)
				Element:span
				Element:span
					if
				Element:span
				Element:span
					err
				Element:span
				Element:span
					!=
				Element:span
				Element:span
					nil
				Element:span
				Element:span
					{
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Println
				Element:span
					(
				Element:span
					err
				Element:span
					)
				Element:span
				Element:span
					}
				Element:span
				Element:span
					service
				Element:span
					.
				Element:span
					CallTrigger
				Element:span
					(
				Element:span
					"7eaf7fff-882c-4f3d-9a8f-a22317ac00ce"
				Element:span
					)
				Element:span
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					POST
				Element:span
					/api/app/v1/service/61a29874-9134-48f9-b460-f37d4bec4826/trigger/7eaf7fff-882c-4f3d-9a8f-a22317ac00ce/call/
				Element:span
					HTTP
				Element:span
					/
				Element:span
					1.1
				Element:span
					Host
				Element:span
					:
				Element:span
					cloud.docker.com
				Element:span
					Accept
				Element:span
					:
				Element:span
					application/json
			Node:
			(type) c
			(layer)1
				Element:p
					Executes the trigger. For
				Element:code
					SCALEUP
					triggers, the number of containers to scale up can be passed at the end of the trigger call url, for example
				Element:code
					/api/app/v1/service/61a29874-9134-48f9-b460-f37d4bec4826/trigger/7eaf7fff-882c-4f3d-9a8f-a22317ac00ce/call/3/
					.
			Node:
			(type) c
			(layer)1
				Element:h3
					Endpoint Type
			Node:
			(type) c
			(layer)1
				Element:p
					Available in Docker Cloud’s
				Element:strong
					REST API
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					POST /api/app/v1/[optional_namespace/]service/(uuid)/trigger/(trigger_uuid)/call/
			Node:
			(type) c
			(layer)1
				Element:h3
					Path Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					uuid
				Element:td
					The UUID of the associated service
				Element:tr
				Element:td
					trigger_uuid
				Element:td
					The UUID of the trigger to call
			Node:
			(type) h1
			(layer)1
				Element:h1
					Docker Cloud Events
			Node:
			(type) c
			(layer)1
				Element:h2
					Docker Cloud Event
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"action"
				Element:span
					,
				Element:span
				Element:span
					"action"
				Element:span
					:
				Element:span
				Element:span
					"update"
				Element:span
					,
				Element:span
				Element:span
					"parents"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					"/api/app/v1/user_namespace/container/0b0e3538-88df-4f07-9aed-3a3cc4175076/"
				Element:span
				Element:span
					],
				Element:span
				Element:span
					"resource_uri"
				Element:span
					:
				Element:span
				Element:span
					"/api/app/v1/user_namespace/action/49f0efe8-a704-4a10-b02f-f96344fabadd/"
				Element:span
					,
				Element:span
				Element:span
					"state"
				Element:span
					:
				Element:span
				Element:span
					"Success"
				Element:span
					,
				Element:span
				Element:span
					"uuid"
				Element:span
					:
				Element:span
				Element:span
					"093ba3bb-08dd-48f0-8f12-4d3b85ef85b3"
				Element:span
					,
				Element:span
				Element:span
					"datetime"
				Element:span
					:
				Element:span
				Element:span
					"2016-02-01T16:47:28Z"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Docker Cloud events are generated every time any of the following objects is created or changes state:
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					Stack
				Element:li
					Service
				Element:li
					Container
				Element:li
					Node Cluster
				Element:li
					Node
				Element:li
					Action
			Node:
			(type) c
			(layer)1
				Element:p
					This is a
				Element:a
					namespaced endpoint
					.
			Node:
			(type) c
			(layer)1
				Element:h3
					Attributes
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Attribute
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					type
				Element:td
					Type of object that was created or updated. For possible values, check the
				Element:a
					events types
					table below.
				Element:tr
				Element:td
					action
				Element:td
					Type of action that was executed on the object. Posible values:
				Element:code
					create
					,
				Element:code
					update
					or
				Element:code
					delete
				Element:tr
				Element:td
					parents
				Element:td
					List of resource URIs (REST API) of the parents of the object, according to the “Parent-child hierarchy” table below
				Element:tr
				Element:td
					resource_uri
				Element:td
					Resource URI (REST API) of the object that was created or updated. You can do a
				Element:code
					GET
					operation on this URL to fetch its details
				Element:tr
				Element:td
					state
				Element:td
					The current state of the object
				Element:tr
				Element:td
					uuid
				Element:td
					Unique identifier for the event
				Element:tr
				Element:td
					datetime
				Element:td
					Date and time of the event in ISO 8601 format
			Node:
			(type) c
			(layer)1
				Element:h3
					Event types
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					stack
				Element:td
					Whenever a
				Element:code
					Stack
					is created or updated
				Element:tr
				Element:td
					service
				Element:td
					Whenever a
				Element:code
					Service
					is created or updated
				Element:tr
				Element:td
					container
				Element:td
					Whenever a
				Element:code
					Container
					is created or updated
				Element:tr
				Element:td
					nodecluster
				Element:td
					Whenever a
				Element:code
					Node Cluster
					is created or updated
				Element:tr
				Element:td
					node
				Element:td
					Whenever a
				Element:code
					Node
					is created or updated
				Element:tr
				Element:td
					action
				Element:td
					Whenever a
				Element:code
					Action
					is created or updated
				Element:tr
				Element:td
					error
				Element:td
					Sent when an error occurs on the websocket connection or as part of the authentication process
			Node:
			(type) c
			(layer)1
				Element:h3
					Parent-child hierarchy
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Object type
				Element:th
					Parent types
				Element:tbody
				Element:tr
				Element:td
					Stack
				Element:td
					(None)
				Element:tr
				Element:td
					Service
				Element:td
					Stack
				Element:tr
				Element:td
					Container
				Element:td
					Service, Stack, Node, Node Cluster
				Element:tr
				Element:td
					Node Cluster
				Element:td
					(None)
				Element:tr
				Element:td
					Node
				Element:td
					Node Cluster
				Element:tr
				Element:td
					Action
				Element:td
					(object to which the action applies to)
			Node:
			(type) c
			(layer)1
				Element:h2
					Listen to new Docker Cloud Events
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
					dockercloud
				Element:span
					def
				Element:span
					process_event
				Element:span
					(
				Element:span
					event
				Element:span
					):
				Element:span
					print
				Element:span
					event
				Element:span
					events
				Element:span
					=
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					Events
				Element:span
					()
				Element:span
					events
				Element:span
					.
				Element:span
					on_message
				Element:span
					(
				Element:span
					process_event
				Element:span
					)
				Element:span
					events
				Element:span
					.
				Element:span
					run_forever
				Element:span
					()
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
				Element:span
					"github.com/docker/go-dockercloud/dockercloud"
				Element:span
				Element:span
					// Listens for container events only
				Element:span
				Element:span
					myFilter
				Element:span
				Element:span
					:=
				Element:span
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					NewStreamFilter
				Element:span
					(
				Element:span
					&
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					EventFilter
				Element:span
					{
				Element:span
					Type
				Element:span
					:
				Element:span
				Element:span
					"container"
				Element:span
					})
				Element:span
				Element:span
					stream
				Element:span
				Element:span
					:=
				Element:span
				Element:span
					dockercloud
				Element:span
					.
				Element:span
					NewStream
				Element:span
					(
				Element:span
					myFilter
				Element:span
					)
				Element:span
				Element:span
					if
				Element:span
				Element:span
					err
				Element:span
				Element:span
					:=
				Element:span
				Element:span
					stream
				Element:span
					.
				Element:span
					Connect
				Element:span
					();
				Element:span
				Element:span
					err
				Element:span
				Element:span
					==
				Element:span
				Element:span
					nil
				Element:span
				Element:span
					{
				Element:span
				Element:span
					go
				Element:span
				Element:span
					stream
				Element:span
					.
				Element:span
					RunForever
				Element:span
					()
				Element:span
				Element:span
					}
				Element:span
				Element:span
					else
				Element:span
				Element:span
					{
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Print
				Element:span
					(
				Element:span
					"Connect err: "
				Element:span
				Element:span
					+
				Element:span
				Element:span
					err
				Element:span
					.
				Element:span
					Error
				Element:span
					())
				Element:span
				Element:span
					}
				Element:span
				Element:span
					for
				Element:span
				Element:span
					{
				Element:span
				Element:span
					select
				Element:span
				Element:span
					{
				Element:span
				Element:span
					case
				Element:span
				Element:span
					event
				Element:span
				Element:span
					:=
				Element:span
				Element:span
					<-
				Element:span
					stream
				Element:span
					.
				Element:span
					MessageChan
				Element:span
					:
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Println
				Element:span
					(
				Element:span
					event
				Element:span
					)
				Element:span
				Element:span
					case
				Element:span
				Element:span
					err
				Element:span
				Element:span
					:=
				Element:span
				Element:span
					<-
				Element:span
					stream
				Element:span
					.
				Element:span
					ErrorChan
				Element:span
					:
				Element:span
				Element:span
					log
				Element:span
					.
				Element:span
					Println
				Element:span
					(
				Element:span
					err
				Element:span
					)
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					GET
				Element:span
					/api/audit/v1/events/
				Element:span
					HTTP
				Element:span
					/
				Element:span
					1.1
				Element:span
					Host
				Element:span
					:
				Element:span
					ws.cloud.docker.com
				Element:span
					Authorization
				Element:span
					:
				Element:span
					Basic dXNlcm5hbWU6YXBpa2V5
				Element:span
					Connection
				Element:span
					:
				Element:span
					Upgrade
				Element:span
					Upgrade
				Element:span
					:
				Element:span
					websocket
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					docker-cloud event
			Node:
			(type) c
			(layer)1
				Element:p
					Listens for new Docker Cloud Events
			Node:
			(type) c
			(layer)1
				Element:h3
					Endpoint Type
			Node:
			(type) c
			(layer)1
				Element:p
					Available in Docker Cloud’s
				Element:strong
					STREAM API
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET /api/audit/v1/[optional_namespace/]events/
			Node:
			(type) c
			(layer)1
				Element:h3
					Query Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					type
				Element:td
					Filter by type
				Element:tr
				Element:td
					object
				Element:td
					Filter by object resource URI
				Element:tr
				Element:td
					parent
				Element:td
					Filter by object parents
			Node:
			(type) h1
			(layer)1
				Element:h1
					Errors
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					API response structure
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"Descriptive error message"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					The Docker Cloud API uses the following error codes:
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Error Code
				Element:th
					Meaning
				Element:tbody
				Element:tr
				Element:td
					400
				Element:td
					Bad Request – There’s a problem in the content of your request. Retrying the same request will fail.
				Element:tr
				Element:td
					401
				Element:td
					Unauthorized – Your API key is wrong or your account has been deactivated.
				Element:tr
				Element:td
					402
				Element:td
					Payment Required – You need to provide billing information to perform this request.
				Element:tr
				Element:td
					403
				Element:td
					Forbidden – Quota limit exceeded. Please contact support to request a quota increase.
				Element:tr
				Element:td
					404
				Element:td
					Not Found – The requested object cannot be found.
				Element:tr
				Element:td
					405
				Element:td
					Method Not Allowed – The endpoint requested does not implement the method sent.
				Element:tr
				Element:td
					409
				Element:td
					Conflict – The object cannot be created or updated because another object exists with the same unique fields
				Element:tr
				Element:td
					415
				Element:td
					Unsupported Media Type – Make sure you are using
				Element:code
					Accept
					and
				Element:code
					Content-Type
					headers as
				Element:code
					application/json
					and that the data your are
				Element:code
					POST
					-ing or
				Element:code
					PATCH
					-ing is in valid JSON format.
				Element:tr
				Element:td
					429
				Element:td
					Too Many Requests – You are being throttled because of too many requests in a short period of time.
				Element:tr
				Element:td
					500
				Element:td
					Internal Server Error – There was a server error while processing your request. Try again later, or contact support.
				Element:tr
				Element:td
					503
				Element:td
					Service Unavailable – We’re temporarily offline for maintenance. Please try again later.
				Element:tr
				Element:td
					504
				Element:td
					Gateway Timeout – Our API servers are at full capacity. Please try again later.
			Node:
			(type) c
			(layer)1
				Element:a
					http
			Node:
			(type) c
			(layer)1
				Element:a
					go
			Node:
			(type) c
			(layer)1
				Element:a
					python
			Node:
			(type) c
			(layer)1
				Element:a
					CLI
