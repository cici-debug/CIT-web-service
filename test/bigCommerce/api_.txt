Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
				Element:span
					API Documentation
			Node:
			(type) c
			(layer)1
				Element:p
					The Bigcommerce Stores API features a RESTful architecture, allowing you to code in the language of your choice. This API supports the
				Element:a
					JSON media type
					, and uses UTF-8 character encoding.
			Node:
			(type) c
			(layer)1
				Element:p
					With clever use of this API, you can automate various commerce, business, and publishing tasks, and can integrate all kinds of apps with our platform.
			Node:
			(type) c
			(layer)1
				Element:p
					All connections require authentication, and are secured by TLS encryption. As of June 30, 2016, all requests must support Server Name Indication (SNI). We currently support two generations of our API:
			Node:
			(type) c
			(layer)1
				Element:p
				Element:span
				Element:a
					API v3 Documentation
			Node:
			(type) c
			(layer)1
				Element:p
					New Catalog/Customers/Orders API, with more-efficient variant/modifier model. OAuth-only, but fully backward-compatible with v2.
			Node:
			(type) c
			(layer)1
				Element:p
				Element:span
				Element:a
					View V3 Docs
				Element:br
			Node:
			(type) c
			(layer)1
				Element:p
				Element:span
				Element:a
					API v2 Documentation
			Node:
			(type) c
			(layer)1
				Element:p
					Core API. Supports all currently exposed resources via OAuth; supports compatible resources via Basic Auth.
			Node:
			(type) c
			(layer)1
				Element:p
				Element:span
				Element:a
					View V2 Docs
				Element:br
			Node:
			(type) h1
			(layer)1
				Element:h1
				Element:span
					API/Apps First Steps
			Node:
			(type) c
			(layer)1
				Element:p
					The following sections offer initial steps for two different development scenarios:
			Node:
			(type) c
			(layer)1
				Element:p
				Element:span
				Element:a
					Develop Private Apps
			Node:
			(type) c
			(layer)1
				Element:p
					To develop private apps for a particular BigCommerce store, you can follow the
				Element:a
					Apps Quick Start
					procedure, which has no administrative requirements.
			Node:
			(type) c
			(layer)1
				Element:p
				Element:span
				Element:a
					View Apps Quick Start
				Element:br
			Node:
			(type) c
			(layer)1
				Element:p
				Element:span
				Element:a
					Develop Marketplace Apps
			Node:
			(type) c
			(layer)1
				Element:p
					To develop
				Element:a
					Single-Click Apps
					for sale to, or installation on, any BigCommerce store: Jump to the
				Element:a
					Joining the App Marketplace
					procedure, which requires applying to become a BigCommerce partner.
			Node:
			(type) c
			(layer)1
				Element:p
				Element:span
				Element:a
					View Marketplace Steps
				Element:br
			Node:
			(type) c
			(layer)1
				Element:p
					These two scenarios are not mutually exclusive – some developers will work under both scenarios. But some of their setup instructions are redundant. Therefore, we suggest that you start with the section that best matches your immediate scenario.
			Node:
			(type) h1
			(layer)1
				Element:h1
				Element:span
					Apps Quick Start
			Node:
			(type) c
			(layer)1
				Element:aside
				Element:span
					Private or Saleable Apps?
				Element:br
				Element:br
					This section is intended for developers who want to immediately start developing and testing private apps for a particular store.
				Element:br
					If your ultimate goal is to distribute apps on the BigCommerce Apps Marketplace, you can avoid repeated steps (like creating trial/sandbox stores for app testing) by jumping directly to the instructions under
				Element:a
					Joining the BigCommerce App Marketplace
					.
			Node:
			(type) c
			(layer)1
				Element:p
					To obtain Basic or OAuth credentials to use this API, you will first need to create a trial store. (If you already have a store, skip ahead to
				Element:a
					Logging In
					.)
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
							Element:span
								Creating a Trial Store
						Node:
						(type) c
						(layer)2
							Element:ol
							Element:li
							Element:p
								Go to the
							Element:a
								BigCommerce home page
								.
							Element:li
							Element:p
								Select either
							Element:strong
								GET STARTED
								or
							Element:strong
								START YOUR FREE TRIAL
								.
							Element:li
							Element:p
								Enter an email address where prompted, and select
							Element:strong
								START YOUR TRIAL
								.
							Element:li
							Element:p
								In the trial store form, enter a store name, password, and other details. Then select
							Element:strong
								CREATE YOUR STORE
								.
							Element:li
							Element:p
								Wait for the store-creation animation to stop, then select either
							Element:strong
								FINISH
								or
							Element:strong
								Ask Me Later
								.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
							Element:span
								Logging In
						Node:
						(type) c
						(layer)2
							Element:p
								If you have just created your trial store, you will already be logged into the store’s control panel. Skip ahead to
							Element:a
								Creating Basic Auth Credentials
								.
						Node:
						(type) c
						(layer)2
							Element:p
								Otherwise, you might need to log into your store:
						Node:
						(type) c
						(layer)2
							Element:ol
							Element:li
							Element:p
								Return to the
							Element:a
								BigCommerce home page
								.
							Element:li
							Element:p
								Select
							Element:strong
								LOG IN
								at the upper right.
							Element:li
							Element:p
								If prompted to
							Element:strong
								Log in to your store
								, enter the email address and password you set when you created your trial, then select
							Element:strong
								LOG IN
								.
							Element:p
								This will reopen your store’s control panel.
						Node:
						(type) c
						(layer)2
							Element:p
								Next, you will need to
							Element:a
								obtain API credentials
								, as explained just below.
			Node:
			(type) h1
			(layer)1
				Element:h1
				Element:span
					Managing API Credentials
			Node:
			(type) c
			(layer)1
				Element:p
					You have two options for obtaining and managing tokens to connect your app with your BigCommerce store:
			Node:
			(type) c
			(layer)1
				Element:p
				Element:span
				Element:a
					Authenticating with OAuth
			Node:
			(type) c
			(layer)1
				Element:p
					We recommend OAuth, because this authentication method is compatible with all current and planned BigCommerce APIs. Also, OAuth is required for apps intended to be sold on the
				Element:a
					BigCommerce App Marketplace
					. You can find details about building OAuth apps
				Element:a
					here
					.
			Node:
			(type) c
			(layer)1
				Element:p
				Element:span
				Element:a
					View OAuth Tokens Steps
				Element:br
			Node:
			(type) c
			(layer)1
				Element:p
				Element:span
				Element:a
					Creating Basic-Auth Credentials
			Node:
			(type) c
			(layer)1
				Element:p
					Basic Auth is still supported as a legacy option for connecting with most of our v2 API. However, Basic Auth is not compatible with
				Element:a
					webhooks
					, and is not compatible with our
				Element:a
					v3 API
					. You can find details about building Basic-Auth apps
				Element:a
					here
					.
			Node:
			(type) c
			(layer)1
				Element:p
				Element:span
				Element:a
					View Basic-Auth Tokens Steps
				Element:br
			Node:
			(type) h1
			(layer)1
				Element:h1
				Element:span
					Authenticating with OAuth
			Node:
			(type) c
			(layer)1
				Element:p
					The following sections outline how to create and manage OAuth tokens in the BigCommerce control panel.
			Node:
			(type) c
			(layer)1
				Element:aside
				Element:span
					Future-Proof with OAuth
				Element:br
				Element:br
					We strongly recommend that you build all BigCommerce apps using OAuth. OAuth is compatible with all current and planned BigCommerce APIs, including v2 Webhooks and our v3 API. Also, any apps intended for sale on the BigCommerce App Marketplace must use OAuth. BigCommerce is gradually deprecating its legacy support for
				Element:a
					Basic Authentication
					.
			Node:
			(type) c
			(layer)1
				Element:h2
				Element:span
					Obtaining OAuth Tokens
			Node:
			(type) c
			(layer)1
				Element:p
					You can create and manage OAuth tokens in the BigCommerce control panel by creating an API account, as described below. (Only the
				Element:a
					store owner
					can create API accounts; accounts are limited to 50 per store.)
			Node:
			(type) c
			(layer)1
				Element:p
				Element:img
			Node:
			(type) c
			(layer)1
				Element:p
					To create your API account and its corresponding token, use the following steps:
			Node:
			(type) c
			(layer)1
				Element:ol
				Element:li
					Log into the store, using the store owner’s username/password.
				Element:li
					Select
				Element:strong
					Advanced Settings
					.
				Element:li
					Select
				Element:strong
					API Accounts
					. This will display the
				Element:strong
					Store API Accounts
					page.
				Element:li
					Select
				Element:strong
					Create API Account
					. This will display the
				Element:strong
					Create API Account
					page shown above.
				Element:li
					In the
				Element:strong
					Name
					field, summarize the purpose for which you will use these credentials. (This name is for internal use only, so assign any name that you will recognize.)
				Element:li
					Copy the
				Element:strong
					API Path
					field’s contents and save it to a file. You will need this path to interact with the API. (If you need to later re-create this string, it is made up of:
				Element:code
					https://api.bigcommerce.com/stores/
					+
				Element:code
					<your store hash>
					+ either
				Element:code
					/v3/
					or
				Element:code
					/v2/
					, depending on the API version you are targeting.)
				Element:li
					In the
				Element:strong
					OAuth Scopes
					section, select at least the minimal scopes your app will require (as explained
				Element:a
					here
					).
				Element:li
					Select
				Element:strong
					Save
					at the page’s lower right-hand corner.
			Node:
			(type) c
			(layer)1
				Element:p
					A successful save will display the pop-up shown below, containing the API credentials that your app will need for OAuth access – your
				Element:strong
					Client ID
					,
				Element:strong
					Client Secret
					, and
				Element:strong
					Access Token
					. Also, a .txt file containing the same credentials will (on most browsers) download to your computer.
			Node:
			(type) c
			(layer)1
				Element:p
				Element:img
			Node:
			(type) c
			(layer)1
				Element:aside
				Element:span
					Keep Your Credentials
				Element:br
				Element:br
					There is no way to re-display this pop-up after you select
				Element:b
					Done
					to dismiss it.
				Element:br
				Element:br
					So make sure you store your credentials – either by copying/pasting the contents of each field out of the pop-up, or by keeping the downloaded .txt file. (To that same .txt file, we suggest adding the **API Path** field value that your stored earlier.) Otherwise, you will need to repeat all the above steps to generate new credentials.
			Node:
			(type) c
			(layer)1
				Element:h2
				Element:span
					Revoking an OAuth Token
			Node:
			(type) c
			(layer)1
				Element:p
					To revoke an OAuth token, use the following steps to delete the associated API account:
			Node:
			(type) c
			(layer)1
				Element:ol
				Element:li
					Log into the store, using the store owner’s username/password.
				Element:li
					Select
				Element:strong
					Advanced Settings
					.
				Element:li
					Select
				Element:strong
					API Accounts
					. This will display the
				Element:strong
					Store API Accounts
					page, shown below.
				Element:li
					In the
				Element:strong
					Actions
					column at right, select the trash-can button next to the account you want to delete.
			Node:
			(type) c
			(layer)1
				Element:aside
				Element:span
					Delete Carefully
				Element:br
				Element:br
					There is no undo, so be sure before you delete an account. You can also use the check boxes on the left side to delete multiple accounts at once – but be especially careful when using this option.
			Node:
			(type) c
			(layer)1
				Element:p
				Element:img
			Node:
			(type) c
			(layer)1
				Element:h2
				Element:span
					OAuth API Requests
			Node:
			(type) c
			(layer)1
				Element:p
					To see how to quickly make initial OAuth requests using the
				Element:a
					Postman app
					, please see our
				Element:a
					Postman/OAuth Quickstart Guide
					.
			Node:
			(type) h1
			(layer)1
				Element:h1
				Element:span
					Creating Basic-Auth Credentials
			Node:
			(type) c
			(layer)1
				Element:p
					The following sections outline how to create and manage Basic Auth tokens in the BigCommerce control panel.
			Node:
			(type) c
			(layer)1
				Element:aside
				Element:span
					Limited Support for Basic Auth
				Element:br
				Element:br
					BigCommerce is gradually deprecating Basic Authentication. Apps must use
				Element:a
					OAuth
					to access our v3 API. Even within the v2 API, apps relying on Basic Authentication cannot access some features. (For example, the Webhooks resource requires OAuth.) Also, apps intended for sale on the BigCommerce App Marketplace must use OAuth.
			Node:
			(type) c
			(layer)1
				Element:h2
				Element:span
					Obtaining an API Token
			Node:
			(type) c
			(layer)1
				Element:p
					To get an API token, use the following steps:
			Node:
			(type) c
			(layer)1
				Element:ol
				Element:li
					Log into your store’s control panel.
				Element:li
					Select
				Element:strong
					Advanced Settings
					.
				Element:li
					Select
				Element:strong
					Legacy API Accounts
					.
				Element:li
					Select
				Element:strong
					Create a Legacy API Account
					.
				Element:li
					Enter a
				Element:strong
					Username
					. Reusing the app’s name is a good way to keep track of which account corresponds to which app. After saving, you can use the API credentials listed on this page.
				Element:li
					Copy the
				Element:strong
					API Path
					field’s value and paste it into a text editor. You will need this value to authenticate your app.
				Element:li
					Copy the
				Element:strong
					API Token
					field’s value and paste it into a text editor. You will need this value to authenticate your app.
				Element:li
					Select
				Element:strong
					Save
					if you’re creating or changing the API account.
			Node:
			(type) c
			(layer)1
				Element:h2
				Element:span
					Revoking App Access
			Node:
			(type) c
			(layer)1
				Element:p
					To revoke app access to a store, use the following steps:
			Node:
			(type) c
			(layer)1
				Element:ol
				Element:li
					Log into your store’s control panel.
				Element:li
					Select
				Element:strong
					Advanced Settings
					.
				Element:li
					Select
				Element:strong
					Legacy API Accounts
					.
				Element:li
					Select the gears icon in the
				Element:strong
					Action
					column, then select
				Element:strong
					Edit
					.
				Element:li
					Select the
				Element:strong
					Generate New Token
					button.
				Element:li
					Select the
				Element:strong
					Save
					button.
				Element:li
					Select the check box next to the user.
				Element:li
					Select the trash-can button.
				Element:li
					Select
				Element:strong
					OK
					in the confirmation prompt.
			Node:
			(type) c
			(layer)1
				Element:h2
				Element:span
					Regenerating an API Token
			Node:
			(type) c
			(layer)1
				Element:p
					To change the API token that an app is using to access a store, use the following steps:
			Node:
			(type) c
			(layer)1
				Element:ol
				Element:li
					Log into your store’s control panel.
				Element:li
					Select
				Element:strong
					Advanced Settings
					.
				Element:li
					Select
				Element:strong
					Legacy API Accounts
					.
				Element:li
					Select the gears icon in the
				Element:strong
					Action
					column, then select
				Element:strong
					Edit
					.
				Element:li
					Select the
				Element:strong
					Generate New Token
					button.
				Element:li
					Select the
				Element:strong
					Save
					button.
			Node:
			(type) c
			(layer)1
				Element:h2
				Element:span
					Basic-Auth API Requests
			Node:
			(type) c
			(layer)1
				Element:p
					Many tools are available to interact with APIs. For example, to see how to quickly make initial requests using
				Element:a
					cURL
					commands, please see our
				Element:a
					cURL Quickstart Guide
					.
			Node:
			(type) h1
			(layer)1
				Element:h1
				Element:span
					Joining the App Marketplace
			Node:
			(type) c
			(layer)1
				Element:p
					The following sections outline the steps required to become a vendor of
				Element:a
					Single-Click Apps
					on the BigCommerce platform. Doing so requires a partnership application, but acceptance will authorize you to provide best-of-breed solutions to the fast-growing online businesses we host.
			Node:
			(type) c
			(layer)1
				Element:aside
				Element:span
					Want a Quicker Start?
				Element:br
				Element:br
					If you only want to develop private apps for a particular BigCommerce store, you can get started faster by jumping to the streamlined instructions under
				Element:a
					Apps Quick Start
					.
			Node:
			(type) c
			(layer)1
				Element:h2
				Element:span
					Apply to the Technology Partner Program
			Node:
			(type) c
			(layer)1
				Element:p
					Before you can submit an app to the BigCommerce Marketplace, you must become an official Partner. BigCommerce offers app developers free sandbox stores through its Technology Partner Program. You can
				Element:a
					apply for a technology partnership here
					. To be approved as a partner, you will need:
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					A website.
				Element:li
					Intent to offer your app publicly.
				Element:li
					Ability to support users of your app.
				Element:li
					Evidence of expertise in app development.
			Node:
			(type) c
			(layer)1
				Element:aside
				Element:span
					Notes
				Element:br
				Element:ul
				Element:li
					If you are an existing BigCommerce partner, you do
				Element:em
					not
					need to re-apply for the Technology Partner Program.
				Element:li
					The email address you use in the partnership application form must be the same email address as you use to log into your sandbox store, and to log into
				Element:a
					My Apps
					.
			Node:
			(type) c
			(layer)1
				Element:p
					Once approved, you will receive one or more emails listing your partner credentials and next steps. Your Partner username and ID will be required to submit your app for App Store consideration.
			Node:
			(type) c
			(layer)1
				Element:aside
				Element:span
					Note
				Element:br
				Element:ul
				Element:li
					If you do not receive these credentials by email, please contact
				Element:a
					appstore@bigcommerce.com
					.
			Node:
			(type) c
			(layer)1
				Element:h2
				Element:span
					Create a Sandbox Store
			Node:
			(type) c
			(layer)1
				Element:p
					To open your sandbox store:
			Node:
			(type) c
			(layer)1
				Element:ol
				Element:li
				Element:p
					Navigate to the
				Element:a
					BigCommerce Pricing page
					.
				Element:li
				Element:p
					Select
				Element:strong
					START YOUR FREE TRIAL
					.
				Element:li
				Element:p
					Where prompted for an email address, enter the same email that you used when applying to become a Technology Partner.
				Element:br
					Then select
				Element:strong
					START YOUR TRIAL
					.
				Element:li
				Element:p
					In the trial-store setup form, enter a store name, password, and other details. Then select
				Element:strong
					CREATE YOUR STORE
					.
				Element:li
				Element:p
					When you log into your new store, use the same email that you used at step 3 above.
			Node:
			(type) c
			(layer)1
				Element:aside
				Element:span
					Trial Stores Don’t Expire
				Element:br
				Element:br
					Although the
				Element:strong
					Create a Trial Store
					option’s name indicates that the store might be temporary, your store is actually permanent.
			Node:
			(type) c
			(layer)1
				Element:h2
				Element:span
					Create Your Draft App
			Node:
			(type) c
			(layer)1
				Element:p
					Once you’re ready to start on your app, navigate to the Developer Portal home page, select the
				Element:strong
					My Apps
					link, and log in using the same email address you’ve used for your sandbox store.
			Node:
			(type) c
			(layer)1
				Element:p
					The
				Element:strong
					My Apps
					page is where you will add, edit, and manage any of your BigCommerce Single-Click Apps. Start by clicking
				Element:strong
					Create an app
					, and initiating
				Element:a
					registration of your app
					. (You can always come back to edit your draft app’s name and other details later.)
			Node:
			(type) c
			(layer)1
				Element:p
					Once your draft app is created, you will be able to install and test it privately in your sandbox store.
			Node:
			(type) c
			(layer)1
				Element:aside
				Element:span
					Note
				Element:br
				Element:br
					To access your draft app in the store, make sure the email address you enter for your sandbox store’s
				Element:strong
					Owner
					is identical to the email address you use for the BigCommerce Developer Portal.
			Node:
			(type) c
			(layer)1
				Element:h2
				Element:span
					App Guidelines and Client Libraries
			Node:
			(type) c
			(layer)1
				Element:p
					For details on designing and building your app, please see
				Element:a
					Building Apps with OAuth
					.
			Node:
			(type) c
			(layer)1
				Element:p
					To facilitate app development on the BigCommerce platform, we provide
				Element:a
					client libraries
					in a variety of popular programming languages.
			Node:
			(type) c
			(layer)1
				Element:h2
				Element:span
					Submit Your App
			Node:
			(type) c
			(layer)1
				Element:p
					Once your app is fully functional, and meets all of BigCommerce’s
				Element:a
					approval requirements
					, submit the app from
				Element:strong
					My Apps
					. We will get back to you as soon as we have reviewed your submission.
			Node:
			(type) h1
			(layer)1
				Element:h1
				Element:span
					Client Libraries
			Node:
			(type) c
			(layer)1
				Element:h2
				Element:span
					Official BigCommerce SDKs
			Node:
			(type) c
			(layer)1
				Element:p
					BigCommerce provides and maintains the following full-featured SDKs in a variety of languages.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
				Element:a
					PHP
				Element:th
				Element:a
					Ruby
				Element:tbody
				Element:tr
				Element:td
					The official BigCommerce PHP client, with minimal external dependencies. Uses either OAuth or Basic Authentication.
				Element:td
					The official BigCommerce Ruby client. Uses either OAuth or Basic Authentication.
				Element:tr
				Element:td
				Element:a
					Python
				Element:td
				Element:tr
				Element:td
					The official BigCommerce Python client, available as a PyPi package. Uses either OAuth or Basic Authentication.
				Element:td
			Node:
			(type) c
			(layer)1
				Element:h2
				Element:span
					Official BigCommerce OAuth Hello World Apps
			Node:
			(type) c
			(layer)1
				Element:p
					BigCommerce provides and maintains the following hello world apps in a variety of languages. These allow you to get a quick start with your OAuth app development.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
				Element:a
					Silex
				Element:th
				Element:a
					Sinatra
				Element:tbody
				Element:tr
				Element:td
				Element:code
					PHP
				Element:td
				Element:code
					RUBY
				Element:tr
				Element:td
					A sample app written in PHP, using
				Element:a
					Silex
					and
				Element:a
					Guzzle
					.
				Element:td
					A sample app written in Ruby, using
				Element:a
					Sinatra
					with
				Element:br
				Element:a
					DataMapper
					and
				Element:a
					RestClient
					.
			Node:
			(type) c
			(layer)1
				Element:p
				Element:br
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
				Element:a
					Flask
				Element:th
				Element:a
					OmniAuth
				Element:tbody
				Element:tr
				Element:td
				Element:code
					Python
				Element:td
				Element:code
					Ruby
				Element:tr
				Element:td
					A sample app written in Python, using
				Element:a
					Flask
					.
				Element:td
					A Ruby gem that allows you to authenticate using
				Element:br
				Element:a
					OmniAuth
					.
			Node:
			(type) c
			(layer)1
				Element:h2
				Element:span
					Community-Contributed Libraries
			Node:
			(type) c
			(layer)1
				Element:p
					The following libraries and tools have been contributed by our community. They’re not officially supported, but we think they’re great.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					PHP
				Element:th
					Python
				Element:tbody
				Element:tr
				Element:td
				Element:a
					PHP-cURL-lib-for-Bigcommerce-API
				Element:td
				Element:a
					python-bigcommerce-api
				Element:tr
				Element:td
				Element:a
					laravel-bigcommerce
				Element:td
				Element:a
					bigcommerce-api-elixir
			Node:
			(type) c
			(layer)1
				Element:p
				Element:br
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Ruby
				Element:th
					C#
				Element:tbody
				Element:tr
				Element:td
				Element:a
					bigcommerce_api
				Element:td
				Element:a
					bigcommercerestapi
			Node:
			(type) c
			(layer)1
				Element:p
				Element:br
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Node.js
				Element:th
					.NET
				Element:tbody
				Element:tr
				Element:td
				Element:a
					node-bigcommerce
				Element:td
				Element:a
					BigCommerce4Net
			Node:
			(type) c
			(layer)1
				Element:p
				Element:br
			Node:
			(type) h1
			(layer)1
				Element:h1
				Element:span
				Element:a
					Building Apps with OAuth
			Node:
			(type) c
			(layer)1
				Element:p
					OAuth apps (also known as public apps or
				Element:a
					Single-Click Apps
					) can be listed in the App Store for easy installation in all BigCommerce stores. They use OAuth to obtain an access token and to communicate with the central BigCommerce API endpoint.
			Node:
			(type) c
			(layer)1
				Element:h2
				Element:span
					About Single-Click Apps
			Node:
			(type) c
			(layer)1
				Element:p
					Building an OAuth app is the recommended approach in almost all cases. BigCommerce plans to deprecate the alternative Basic Auth mechanism that currently supports
				Element:a
					private apps
					for individual stores.
			Node:
			(type) c
			(layer)1
				Element:p
					Before you start building an app for the App Store, we suggest reviewing the
				Element:a
					App Store acceptance requirements
					. To start making API requests, you’ll need a
				Element:a
					Client ID and Client Secret
					, and an
				Element:a
					OAuth token
					.
			Node:
			(type) c
			(layer)1
				Element:aside
				Element:span
					Draft App Option
				Element:br
				Element:br
					You can also create a “Draft” version of a Single-Click App, for use only in your store. You don’t need to submit this Draft app for publishing in the App Store.
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:span
											API Endpoint
									Node:
									(type) c
									(layer)3
										Element:p
											Public API requests are protected by TLS, and use the following base URI:
										Element:code
											https://api.bigcommerce.com
											. The exact paths are noted in the Reference section for each resource.
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:span
											Request Headers
									Node:
									(type) c
									(layer)3
										Element:p
											Public API requests are authenticated by the following HTTP headers:
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:code
											X-Auth-Client
											: the
										Element:strong
											Client ID
											. To get your
										Element:strong
											Client ID
											, you must complete
										Element:a
											App Registration
											.
										Element:li
										Element:code
											X-Auth-Token
											: the OAuth token. To get your OAuth token, you must complete
										Element:a
											App Installation
											.
									Node:
									(type) c
									(layer)3
										Element:p
											In addition, while not all resources require the
										Element:code
											Accept
											and
										Element:code
											Content-Type
											headers, many do. To ensure that your calls succeed, always include these headers.
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:span
											Managing Users’ Session Timeouts
									Node:
									(type) c
									(layer)3
										Element:p
											We recommend that you add BigCommerce’s JavaScript SDK to your Single-Click Apps, to protect your apps’ users from getting logged out of the BigCommerce control panel after a period of idleness. To include our SDK, add this script tag to your Single-Click App:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
										Element:span
											<script
										Element:span
											src=
										Element:span
											"//cdn.bigcommerce.com/jssdk/bc-sdk.js"
										Element:span
											>
										Element:span
									Node:
									(type) c
									(layer)3
										Element:p
											Optionally, you can pass a logout callback function within the initialization call:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
										Element:span
											Bigcommerce
										Element:span
											.
										Element:span
											init
										Element:span
											({
										Element:span
											onLogout
										Element:span
											:
										Element:span
											callback
										Element:span
											});
									Node:
									(type) c
									(layer)3
										Element:p
											This callback function will run when the user explicitly logs out of the BigCommerce control panel, or is automatically logged out. The callback will allow your app to respond to this logout.
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:span
											Monetizing Your App
									Node:
									(type) c
									(layer)3
										Element:p
											If you want to charge merchants for your app, please note that BigCommerce expects you to handle the billing aspects of the transaction. Your app needs to take care of collecting the fee from the merchant.
									Node:
									(type) c
									(layer)3
										Element:p
											Under the standard contract, within 30 days of collecting this revenue, you must send BigCommerce 20% and retain the remaining 80% for yourself. Once your app is published, a mandatory revenue-share reporting form will be sent to the primary contact on your partner account, at the beginning of each month.
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:span
											Private Apps with OAuth?
									Node:
									(type) c
									(layer)3
										Element:p
											Some private apps use OAuth. Please note that:
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:p
											Such apps will normally be accessible only to stores belonging to the user who created the app in the Developer Portal.
										Element:li
										Element:p
											To be shareable with other stores, these apps must be approved and published in the App Store.
									Node:
									(type) c
									(layer)3
										Element:h2
										Element:span
										Element:a
											App Registration
									Node:
									(type) c
									(layer)3
										Element:p
											Once you have a
										Element:a
											sandbox store
											, you must register your app to get your
										Element:strong
											Client ID
											and
										Element:strong
											Client Secret
											.
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:p
											The
										Element:strong
											Client ID
											value uniquely identifies your app and you will need to pass it in the header of all your requests to the Stores API.
										Element:li
										Element:p
											The
										Element:strong
											Client Secret
											value is a secret that your app and BigCommerce share. You do need to pass the
										Element:strong
											Client Secret
											value once during the
										Element:a
											app installation
											sequence. Thereafter, BigCommerce uses it to sign payloads in
										Element:a
											load, uninstall, and remove user requests
											, and your app uses it to verify the signature to ensure that the request is coming from BigCommerce.
									Node:
									(type) c
									(layer)3
										Element:p
											The app registration wizard requests a number of details that you may not know just yet. You can come back and fill in the additional information later (discussed in
										Element:a
											App Submission
											).
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:span
											Technical Prerequisites
									Node:
									(type) c
									(layer)3
										Element:p
											Before you register your app, consider the required and optional steps below.
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:span
														Auth Callback and Load Callback URIs
												Node:
												(type) c
												(layer)4
													Element:p
														You must have an
													Element:a
														Auth Callback URI
														and a
													Element:a
														Load Callback URI
														to register your app.
												Node:
												(type) c
												(layer)4
													Element:aside
													Element:span
														Public URIs Required before Submission
													Element:br
													Element:br
														Because the
													Element:b
														Auth Callback URI
														and
													Element:b
														Load Callback URI
														requests originate from the browser and not from BigCommerce, you can use non–publicly-available URIs and a self-signed certificate for a quick start. However, you must switch to – and test your app with – a publicly available
													Element:b
														Auth Callback URI
														and
													Element:b
														Load Callback URI
														before submitting your app for consideration in the App Store.
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:span
														Uninstall Callback (Optional)
												Node:
												(type) c
												(layer)4
													Element:p
														If you want to receive a callback when the store owner uninstalls your app, you can provide an
													Element:a
														Uninstall Callback URI
														.
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:span
														Multi-User Support (Optional)
												Node:
												(type) c
												(layer)4
													Element:p
														By default, your app will only be accessible to the store owner (ie. the user who created the store). Optionally, you can allow your app to be accessible to other store users. Consider the following before enabling
													Element:a
														multi-user support
														.
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														Once you enable multi-user support, a store admin will additionally need to grant access to users from within the store control panel. For each user account, there are settings to grant access to specific apps.
													Element:li
														Your app should be aware that when it receives the
													Element:a
														Load Callback
														, the user information passed in,
													Element:a
														may not be the store owner
														. You’ll need to determine how to respond if you see a different user. For example, you may want to provision a new user account in order to personalize the experience.
													Element:li
														You can optionally specify a
													Element:a
														Remove User Callback URI
														to receive a callback when a store admin revokes a user’s access.
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:span
														Requesting OAuth Scopes
												Node:
												(type) c
												(layer)4
													Element:p
														If you know the
													Element:a
														OAuth scopes
														that your app requires, you should select these. If you do not yet know the scopes that you need, you can just request minimal permissions (such as
													Element:code
														Information: Read-Only
														) to get started. However, once you determine the scopes you need, you must:
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														Modify the scopes of your app in My Apps and save the changes.
													Element:li
														Obtain the new OAuth token during the
													Element:a
														App Installation or Update
														flow.
													Element:li
														Retest your app to make sure it still functions properly with the new token.
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:span
											Registering Your App
									Node:
									(type) c
									(layer)3
										Element:p
											The following procedure takes you through the minimum number of steps to successfully register your app and get your
										Element:strong
											Client Secret
											and
										Element:strong
											Client ID
											.
									Node:
									(type) c
									(layer)3
										Element:ol
										Element:li
											Log in at Developer Portal’s top right.
										Element:li
										Element:p
											In the resulting login page, provide your sandbox store credentials.
										Element:aside
										Element:span
											NOTE:
											These must be the credentials of the owner of the store where you plan to install your draft app.
										Element:li
										Element:p
											Click
										Element:code
											My Apps
											.
										Element:li
										Element:p
											Click
										Element:code
											Create an app
											.
										Element:li
										Element:p
											In the
										Element:code
											Create an App
											dialog, type a name for your app.
										Element:li
										Element:p
											Click
										Element:code
											Next
											.
										Element:li
										Element:p
											Click
										Element:code
											Next
											again.
										Element:li
										Element:p
											Click
										Element:code
											Next
											one more time.
										Element:li
										Element:p
											In the
										Element:code
											Auth Callback URL
											box, type your
										Element:code
											Auth Callback URI
											.
										Element:li
										Element:p
											In the
										Element:code
											Load Callback URL
											box, type your
										Element:code
											Load Callback URI
											.
										Element:li
										Element:p
											In the
										Element:code
											Uninstall Callback URI
											box, provide your
										Element:code
											Uninstall Callback URI
											if you have one.
										Element:li
										Element:p
											If you want to support multiple users: In the
										Element:code
											Supported Features
											area, select
										Element:code
											Multiple Users
											; and in the
										Element:code
											Remove User Callback URI
											box, provide a
										Element:code
											Remove User Callback URI
											.
										Element:li
										Element:p
											Select the OAuth scopes that your app requires. If you do not yet know, select minimal scopes, such as
										Element:code
											Information: Read-Only
											.
										Element:li
										Element:p
											Click
										Element:code
											Update & Close
											.
										Element:li
										Element:p
											Back in
										Element:code
											My Apps
											, hover over your app.
										Element:li
										Element:p
											Click
										Element:code
											View Client ID
											.
										Element:li
										Element:p
											Copy the
										Element:code
											Client ID
											and
										Element:code
											Client Secret
											values from the dialog, and paste them into a safe and secure place.
									Node:
									(type) c
									(layer)3
										Element:h2
										Element:span
										Element:a
											App Installation and Update Sequence
									Node:
									(type) c
									(layer)3
										Element:p
											A user at a store’s control panel kicks off the installation or update sequence by clicking to install your app, or by clicking an installed app to update its scopes. BigCommerce redirects the user to the
										Element:strong
											Auth Callback URI
											provided during
										Element:a
											app registration
											. The
										Element:strong
											Auth Callback URI
											must be publicly available, fully qualified, and served over TLS.
									Node:
									(type) c
									(layer)3
										Element:aside
										Element:span
											Handling Requests Securely
										Element:br
										Element:br
											The request comes from the client browser, rather than directly from BigCommerce. This allows you to use a non-publicly-available
										Element:b
											Auth Callback URI
											while testing your app.
										Element:br
										Element:br
											For security, Auth and Load callback should be handled server-side. If you are building a client-side application (such as an AngularJS Single Page App), you should handle Auth and Load callbacks outside that application. Use a separate service that accepts the Auth and Load callback requests, generates tokens, validates requests, and then redirects the user to your client-side app’s entry point.
									Node:
									(type) c
									(layer)3
										Element:p
											The following diagram illustrates the entire sequence.
									Node:
									(type) c
									(layer)3
										Element:p
										Element:img
									Node:
									(type) c
									(layer)3
										Element:p
											The remainder of this section discusses each action your app needs to take during the sequence.
									Node:
									(type) c
									(layer)3
										Element:ol
										Element:li
										Element:a
											Receiving the
										Element:code
											GET
											Request
										Element:li
										Element:a
											Responding to the
										Element:code
											GET
											Request
										Element:li
										Element:a
											Making the
										Element:code
											POST
											Request
										Element:li
										Element:a
											Receiving the
										Element:code
											POST
											Response
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:span
										Element:a
											Receiving the GET Request
									Node:
									(type) c
									(layer)3
										Element:p
											The
										Element:code
											GET
											request to your
										Element:strong
											Auth Callback URI
											contains a temporary code that you can exchange for a permanent OAuth token. It also includes a unique value that identifies the store installing or updating your app, as well as other values.
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:span
														Parameters
												Node:
												(type) c
												(layer)4
													Element:p
														The following table details the full list of parameters and values included in the
													Element:code
														GET
														request from BigCommerce to your
													Element:strong
														Auth Callback URI
														. BigCommerce passes these within the URI itself as query parameters.
												Node:
												(type) c
												(layer)4
													Element:table
													Element:thead
													Element:tr
													Element:th
														Parameter
													Element:th
														Description
													Element:tbody
													Element:tr
													Element:td
														code
													Element:td
														Temporary code to exchange for a permanent OAuth token. See
													Element:a
														Making the POST request
														below for more information about this exchange.
													Element:tr
													Element:td
														scope
													Element:td
														List of scopes authorized by the user. As a best practice, your app should validate this list to ensure that it matches the app’s needs, and fail if it does not. However, at this time, the user does not have any opportunity to pick and choose between scopes. The dialog presented to the user requires the user to approve all scopes or none.
													Element:tr
													Element:td
														context
													Element:td
														The store hash: a unique value that identifies the store on which a logged-in user has clicked to install or your app. BigCommerce passes this along with a context path, as follows:
													Element:code
														stores/{store_hash}
														. Save the store hash value, because you will need to pass it in all your requests to the Stores API.
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:span
														Example – Initial Installation
												Node:
												(type) c
												(layer)4
													Element:p
														This example initiates the token exchange, with a requested scope of
													Element:code
														store_v2_orders
														:
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														GET /auth?code=qr6h3thvbvag2ffq&scope=store_v2_orders&context=stores/g5cd38 HTTP/1.1 Host: app.example.com
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:span
														Example – Updating Scopes
												Node:
												(type) c
												(layer)4
													Element:p
														The following example requests a scope of
													Element:code
														store_v2_products
														, in addition to the initially requested scope of
													Element:code
														store_v2_orders
														:
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														GET /auth?code=qr6h3thvbvag2ffq&scope=store_v2_orders+store_v2_products&context=stores/g5cd38 HTTP/1.1 Host: app.example.com
												Node:
												(type) c
												(layer)4
													Element:p
														(Note that when your app receives a new token, any previously issued token is invalidated.)
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:span
										Element:a
											Responding to the GET Request
									Node:
									(type) c
									(layer)3
										Element:p
											Upon receiving the
										Element:code
											GET
											request at your
										Element:strong
											Auth Callback URI
											, your app should return some HTML to the merchant browser. BigCommerce renders this in an iframe inside of the control panel. It could be a form that collects further information from the user, or you could redirect the user to your app’s main page. If you do not pass back some HTML, the user will be left looking at a blank screen. Such an app would not be accepted into the App Store.
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:span
										Element:a
											Making the POST Request
									Node:
									(type) c
									(layer)3
										Element:p
											The
										Element:code
											POST
											request’s primary purpose is to exchange the temporary access code for a permanent OAuth token. However, your app must pass a number of additional values to accomplish the exchange. Pass the parameters and their values inside the request body, using query parameters and URL-encoding. To achieve this, you must include the following HTTP header:
										Element:br
										Element:code
											Content-Type: application/x-www-form-urlencoded
									Node:
									(type) c
									(layer)3
										Element:p
											Make the
										Element:code
											POST
											request to the following address:
										Element:code
											https://login.bigcommerce.com/oauth2/token
											.
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:span
														Initial Installation
												Node:
												(type) c
												(layer)4
													Element:p
														During initial installation, upon receiving the
													Element:code
														POST
														, BigCommerce marks the status of your app as “Installed,” removes the progress-indicator overlay, and places your app icon in the control panel’s left-hand navigation. With the progress-indicator overlay removed, the user can interact with the HTML that you returned in your
													Element:code
														GET
														response.
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:span
														Updates
												Node:
												(type) c
												(layer)4
													Element:p
														During app updates, upon receiving the
													Element:code
														POST
														, BigCommerce removes the update prompt from the control panel.
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:span
														Parameters
												Node:
												(type) c
												(layer)4
													Element:p
														Include values for each of the following parameters.
												Node:
												(type) c
												(layer)4
													Element:table
													Element:thead
													Element:tr
													Element:th
														Parameter
													Element:th
														Description
													Element:tbody
													Element:tr
													Element:td
														client_id
													Element:td
														The Client ID for your app, obtained during
													Element:a
														registration
														.
													Element:tr
													Element:td
														client_secret
													Element:td
														The Client Secret for your app, obtained during
													Element:a
														registration
														.
													Element:tr
													Element:td
														code
													Element:td
														Temporary access code received in the
													Element:a
														GET request
														discussed above.
													Element:tr
													Element:td
														scope
													Element:td
														List of OAuth scopes received in the
													Element:a
														GET request
														discussed above.
													Element:tr
													Element:td
														grant_type
													Element:td
														Always use the following: authorization_code.
													Element:tr
													Element:td
														redirect_uri
													Element:td
														Must be identical to your registered Auth Callback URI.
													Element:tr
													Element:td
														context
													Element:td
														The store hash received in the
													Element:a
														GET request
														, in the format:
													Element:code
														stores/{_store_hash_}
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:span
														Examples – Initial Installation
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
													Element:a
														HTTP
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														POST /oauth2/token HTTP/1.1 Host: login.bigcommerce.com Content-Type: application/x-www-form-urlencoded Content-Length: 186
													Element:span
														client_id
													Element:span
														={
														CLIENT_ID
													Element:span
														}
														&client_secret
													Element:span
														={
														CLIENT_SECRET
													Element:span
														}
														&code
													Element:span
														=
														qr6h3thvbvag2ffq&scope
													Element:span
														=
														store_v2_orders&grant_type
													Element:span
														=
														authorization_code&redirect_uri
													Element:span
														=
														https://app.example.com/oauth&context
													Element:span
														=
														stores/
													Element:span
														{
														STORE_HASH
													Element:span
														}
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
													Element:a
														PHP
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
													Element:span
														use
													Element:span
														Bigcommerce\Api\Connection
													Element:span
														;
													Element:span
														$tokenUrl
													Element:span
														=
													Element:span
														"https://login.bigcommerce.com/oauth2/token"
													Element:span
														;
													Element:span
														$connection
													Element:span
														=
													Element:span
														new
													Element:span
														Connection
													Element:span
														();
													Element:span
														$connection
													Element:span
														->
													Element:span
														useUrlencoded
													Element:span
														();
													Element:span
														$response
													Element:span
														=
													Element:span
														$connection
													Element:span
														->
													Element:span
														post
													Element:span
														(
													Element:span
														$tokenUrl
													Element:span
														,
													Element:span
														array
													Element:span
														(
													Element:span
														"client_id"
													Element:span
														=>
													Element:span
														"CLIENT_ID"
													Element:span
														,
													Element:span
														"client_secret"
													Element:span
														=>
													Element:span
														"CLIENT_SECRET"
													Element:span
														,
													Element:span
														"redirect_uri"
													Element:span
														=>
													Element:span
														"https://app.example.com/oauth"
													Element:span
														,
													Element:span
														"grant_type"
													Element:span
														=>
													Element:span
														"authorization_code"
													Element:span
														,
													Element:span
														"code"
													Element:span
														=>
													Element:span
														$request
													Element:span
														->
													Element:span
														get
													Element:span
														(
													Element:span
														"code"
													Element:span
														),
													Element:span
														"scope"
													Element:span
														=>
													Element:span
														$request
													Element:span
														->
													Element:span
														get
													Element:span
														(
													Element:span
														"scope"
													Element:span
														),
													Element:span
														"context"
													Element:span
														=>
													Element:span
														$request
													Element:span
														->
													Element:span
														get
													Element:span
														(
													Element:span
														"context"
													Element:span
														),
													Element:span
														));
													Element:span
														$token
													Element:span
														=
													Element:span
														$response
													Element:span
														->
													Element:span
														access_token
													Element:span
														;
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:span
														Examples – Updating Scopes
												Node:
												(type) c
												(layer)4
													Element:p
														The following example requests a scope of
													Element:code
														store_v2_products
														, in addition to the initially requested scope of
													Element:code
														store_v2_orders
														:
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
													Element:a
														HTTP
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														POST /oauth2/token HTTP/1.1 Host: login.bigcommerce.com Content-Type: application/x-www-form-urlencoded Content-Length: 186
													Element:span
														client_id
													Element:span
														={
														CLIENT_ID
													Element:span
														}
														&client_secret
													Element:span
														={
														CLIENT_SECRET
													Element:span
														}
														&scope
													Element:span
														=
														store_v2_orders+store_v2_products&grant_type
													Element:span
														=
														authorization_code&redirect_uri
													Element:span
														=
														https://app.example.com/oauth&context
													Element:span
														=
														stores/
													Element:span
														{
														STORE_HASH
													Element:span
														}
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
													Element:a
														PHP
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
													Element:span
														use
													Element:span
														Bigcommerce\Api\Connection
													Element:span
														;
													Element:span
														$tokenUrl
													Element:span
														=
													Element:span
														"https://login.bigcommerce.com/oauth2/token"
													Element:span
														;
													Element:span
														$connection
													Element:span
														=
													Element:span
														new
													Element:span
														Connection
													Element:span
														();
													Element:span
														$connection
													Element:span
														->
													Element:span
														useUrlencoded
													Element:span
														();
													Element:span
														$response
													Element:span
														=
													Element:span
														$connection
													Element:span
														->
													Element:span
														post
													Element:span
														(
													Element:span
														$tokenUrl
													Element:span
														,
													Element:span
														array
													Element:span
														(
													Element:span
														"client_id"
													Element:span
														=>
													Element:span
														"CLIENT_ID"
													Element:span
														,
													Element:span
														"client_secret"
													Element:span
														=>
													Element:span
														"CLIENT_SECRET"
													Element:span
														,
													Element:span
														"redirect_uri"
													Element:span
														=>
													Element:span
														"https://app.example.com/oauth"
													Element:span
														,
													Element:span
														"grant_type"
													Element:span
														=>
													Element:span
														"authorization_code"
													Element:span
														,
													Element:span
														"code"
													Element:span
														=>
													Element:span
														$request
													Element:span
														->
													Element:span
														get
													Element:span
														(
													Element:span
														"code"
													Element:span
														),
													Element:span
														"scope"
													Element:span
														=>
													Element:span
														$request
													Element:span
														->
													Element:span
														get
													Element:span
														(
													Element:span
														"scope"
													Element:span
														),
													Element:span
														"context"
													Element:span
														=>
													Element:span
														$request
													Element:span
														->
													Element:span
														get
													Element:span
														(
													Element:span
														"context"
													Element:span
														),
													Element:span
														));
													Element:span
														$token
													Element:span
														=
													Element:span
														$response
													Element:span
														->
													Element:span
														access_token
													Element:span
														;
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:span
										Element:a
											Receiving the POST Response
									Node:
									(type) c
									(layer)3
										Element:p
											The
										Element:code
											POST
											response will include a JSON object containing the permanent OAuth token, user information, and other values. Upon receiving the permanent OAuth token, store it securely. You should also store the user and store hash values, to identify the user and store at load and uninstall. The following sections detail the contents of the JSON body.
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:span
														JSON Values
												Node:
												(type) c
												(layer)4
													Element:table
													Element:thead
													Element:tr
													Element:th
														Name
													Element:th
														Data Type
													Element:th
														Value Description
													Element:tbody
													Element:tr
													Element:td
														access_token
													Element:td
														string
													Element:td
														The permanent OAuth token that your app can use to make requests to the Stores API on behalf of the user. Store this value securely.
													Element:tr
													Element:td
														scope
													Element:td
														string
													Element:td
														List of authorization scopes.
													Element:tr
													Element:td
														id
													Element:td
														integer
													Element:td
														Unique identifier for the user. Store this value to identify the user at load and uninstall.
													Element:tr
													Element:td
														email
													Element:td
														string
													Element:td
														The user’s email address. Store this value to identify the user at load and uninstall.
													Element:tr
													Element:td
														context
													Element:td
														string
													Element:td
														The store hash, as well as a base path:
													Element:code
														stores/{_store_hash_}
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:span
														JSON Example – Initial Installation
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
													Element:span
														{
													Element:span
													Element:span
														"access_token"
													Element:span
														:
													Element:span
													Element:span
														"ACCESS_TOKEN"
													Element:span
														,
													Element:span
													Element:span
														"scope"
													Element:span
														:
													Element:span
													Element:span
														"store_v2_orders"
													Element:span
														,
													Element:span
													Element:span
														"user"
													Element:span
														:
													Element:span
													Element:span
														{
													Element:span
													Element:span
														"id"
													Element:span
														:
													Element:span
													Element:span
														24654
													Element:span
														,
													Element:span
													Element:span
														"email"
													Element:span
														:
													Element:span
													Element:span
														"merchant@mybigcommerce.com"
													Element:span
													Element:span
														},
													Element:span
													Element:span
														"context"
													Element:span
														:
													Element:span
													Element:span
														"stores/STORE_HASH"
													Element:span
													Element:span
														}
													Element:span
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:span
														JSON Example – Updating Scopes
												Node:
												(type) c
												(layer)4
													Element:p
														Update requests will refresh the payload’s
													Element:code
														access_token
														and
													Element:code
														scope
														values. Here again, the following example requests a scope of
													Element:code
														store_v2_products
														, in addition to the initially requested scope of
													Element:code
														store_v2_orders
														:
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
													Element:span
														{
													Element:span
													Element:span
														"access_token"
													Element:span
														:
													Element:span
													Element:span
														"ACCESS_TOKEN"
													Element:span
														,
													Element:span
													Element:span
														"scope"
													Element:span
														:
													Element:span
													Element:span
														"store_v2_orders store_v2_products"
													Element:span
														,
													Element:span
													Element:span
														"user"
													Element:span
														:
													Element:span
													Element:span
														{
													Element:span
													Element:span
														"id"
													Element:span
														:
													Element:span
													Element:span
														24654
													Element:span
														,
													Element:span
													Element:span
														"email"
													Element:span
														:
													Element:span
													Element:span
														"merchant@mybigcommerce.com"
													Element:span
													Element:span
														},
													Element:span
													Element:span
														"context"
													Element:span
														:
													Element:span
													Element:span
														"stores/STORE_HASH"
													Element:span
													Element:span
														}
													Element:span
												Node:
												(type) c
												(layer)4
													Element:h2
													Element:span
													Element:a
														Load, Uninstall, and User Removal Requests
												Node:
												(type) c
												(layer)4
													Element:p
														In addition to the
													Element:strong
														Auth Callback URI
														, the
													Element:a
														App Registration
														wizard requests the following URIs.
												Node:
												(type) c
												(layer)4
													Element:table
													Element:thead
													Element:tr
													Element:th
														Name
													Element:th
														Required?
													Element:th
														Event Discussion
													Element:tbody
													Element:tr
													Element:td
														Load Callback URI
													Element:td
														Yes
													Element:td
														Called when the store owner or user clicks to load your app.
													Element:tr
													Element:td
														Uninstall Callback URI
													Element:td
														No
													Element:td
														Called when the store owner clicks to uninstall your app.
													Element:tr
													Element:td
														Remove User Callback URI
													Element:td
														No
													Element:td
														Called when the store admin revokes a user’s access to your app.
												Node:
												(type) c
												(layer)4
													Element:p
														Each BigCommerce request is a
													Element:code
														GET
														request and includes a signed payload that allows your app to:
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														Verify that the request came from BigCommerce.
													Element:li
														Identify the store.
													Element:li
														Identify the store owner or user.
												Node:
												(type) c
												(layer)4
													Element:p
														The remainder of this entry discusses:
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
													Element:a
														The load request and response
														.
													Element:li
													Element:a
														The Uninstall request
														.
													Element:li
													Element:a
														The Remove User request
														.
													Element:li
													Element:a
														The signed payload
														.
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:span
										Element:a
											Load Request and Response
									Node:
									(type) c
									(layer)3
										Element:p
											Once your app has been installed, the store owner or user can click its icon in the control panel to launch it. This causes BigCommerce to send a
										Element:code
											GET
											request to the
										Element:strong
											Load Callback URI
											that you provided. In a production environment, the
										Element:strong
											Load Callback URI
											must be publicly available, fully qualified, and served over TLS/SSL.
									Node:
									(type) c
									(layer)3
										Element:aside
										Element:span
											Handling Requests Securely
										Element:br
										Element:br
											The request comes from the client browser, rather than directly from BigCommerce. This allows you to use a non-publicly-available
										Element:b
											Auth Callback URI
											while testing your app.
										Element:br
										Element:br
											For security, Auth and Load callback should be handled server-side. If you are building a client-side application (such as an AngularJS Single Page App), you should handle Auth and Load callbacks outside that application. Use a separate service that accepts the Auth and Load callback requests, generates tokens, validates requests, and then redirects the user to your client-side app’s entry point.
									Node:
									(type) c
									(layer)3
										Element:p
											The
										Element:code
											GET
											request contains a signed payload, as shown below.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											GET /load?signed_payload=hw9fhkx2ureq.t73sk8y80jx9 HTTP/1.1 Host: app.example.com
									Node:
									(type) c
									(layer)3
										Element:p
											Upon receiving a
										Element:code
											GET
											request to the
										Element:strong
											Load Callback URI
											, your app needs to
										Element:a
											process the signed payload
											.
									Node:
									(type) c
									(layer)3
										Element:p
											After processing the payload, your app returns its user interface as HTML. BigCommerce renders this inside of an iframe. Please see
										Element:a
											User Interface Constraints
											for important information about your app’s user interface.
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:span
										Element:a
											Uninstall Request (Optional)
									Node:
									(type) c
									(layer)3
										Element:p
											Store owners have the option to uninstall any app at any time. When a store owner uninstalls an app, the app’s OAuth token is revoked and the app cannot make requests to the Stores API on the store’s behalf anymore.
									Node:
									(type) c
									(layer)3
										Element:p
											You do not need to provide an
										Element:strong
											Uninstall Callback URI
											. The lack of an
										Element:strong
											Uninstall Callback URI
											does not prevent uninstallation. Instead, the
										Element:strong
											Uninstall Callback URI
											allows you to track store owners who uninstall your app and to run cleanup operations, such as removing the store’s user accounts from your system.
									Node:
									(type) c
									(layer)3
										Element:p
											Should you choose to avail of this option and provide an
										Element:strong
											Uninstall Callback URI
											, please note that it must be publicly available, fully qualified, and served over TLS/SSL. If provided, BigCommerce will send a
										Element:code
											GET
											request to your
										Element:strong
											Uninstall Callback URI
											when a store owner clicks to uninstall your app. An example follows.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											GET /uninstall?signed_payload=hw9fhkx2ureq.t73sk8y80jx9 HTTP/1.1 Host: app.example.com
									Node:
									(type) c
									(layer)3
										Element:p
											Upon receiving the
										Element:code
											GET
											request, your app will need to
										Element:a
											process the signed payload
											.
									Node:
									(type) c
									(layer)3
										Element:aside
										Element:span
											NOTE:
											Any HTML that you return in your response will not be rendered.
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:span
										Element:a
											Remove User Request (Optional)
									Node:
									(type) c
									(layer)3
										Element:p
											If you have not enabled
										Element:a
											multi-user support
											, you will not provide a
										Element:strong
											Remove User Callback URI
											and can ignore this section. If you enable multi-user support, you can optionally specify a
										Element:strong
											Remove User Callback URI
											. It must be fully qualified, publicly available, and served over TLS/SSL. BigCommerce will send a
										Element:code
											GET
											request to your
										Element:strong
											Remove User Callback URI
											when a store admin revokes a user’s access to your app. An example follows.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											GET /remove-user?signed_payload=hw9fhkx2ureq.t73sk8y80jx9 HTTP/1.1 Host: app.example.com
									Node:
									(type) c
									(layer)3
										Element:p
											Upon receiving the
										Element:code
											GET
											request, your app will need to
										Element:a
											process the signed payload
											.
									Node:
									(type) c
									(layer)3
										Element:aside
										Element:span
											NOTE:
											Any HTML that you return in your response will not be rendered.
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:span
										Element:a
											Processing the Signed Payload
									Node:
									(type) c
									(layer)3
										Element:p
											Processing the signed payload involves splitting and decoding it verifying the HMAC signature, and processing the JSON object.
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:span
													Element:a
														Splitting and Decoding the Signed Payload
												Node:
												(type) c
												(layer)4
													Element:p
														The signed payload is a string containing a base64url-encoded JSON string and a base64url-encoded
													Element:a
														HMAC signature
														. The parts are delimited by the
													Element:code
														.
														character:
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														encoded_json_string.encoded_hmac_signature
												Node:
												(type) c
												(layer)4
													Element:p
														To decode the signed payload, complete the following steps:
												Node:
												(type) c
												(layer)4
													Element:ol
													Element:li
														Split
													Element:code
														signed_payload
														into its two parts at the
													Element:code
														.
														delimiter.
													Element:li
														Decode
													Element:code
														encoded_json_string
														using base64url.
													Element:li
														Convert the decoded JSON string into an object. See
													Element:a
														Processing the JSON object
														for more about this object.
													Element:li
														Decode
													Element:code
														encoded_hmac_signature
														using base64url.
													Element:li
														Use your client secret to verify the signature. See the next section for more details.
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:span
														Verifying the HMAC Signature
												Node:
												(type) c
												(layer)4
													Element:p
														To verify the payload, you need to sign the payload using your client secret, and confirm that it matches the signature that was sent in the request.
												Node:
												(type) c
												(layer)4
													Element:aside
													Element:span
														Blocking Timing Attacks
													Element:br
													Element:br
														To limit the vulnerability of your app to
													Element:a
														timing attacks
														, we recommend using a constant time-string comparison function, rather than the equality operator, to check that the signatures match.
												Node:
												(type) c
												(layer)4
															Node:
															(type) c
															(layer)5
																Element:h5
																Element:span
																	Examples
															Node:
															(type) c
															(layer)5
																Element:ul
																Element:li
																Element:a
																	PHP
															Node:
															(type) c
															(layer)5
																Element:pre
																Element:code
																Element:span
																	function
																Element:span
																	verifySignedRequest
																Element:span
																	(
																Element:span
																	$signedRequest
																Element:span
																	)
																Element:span
																	{
																Element:span
																	list
																Element:span
																	(
																Element:span
																	$encodedData
																Element:span
																	,
																Element:span
																	$encodedSignature
																Element:span
																	)
																Element:span
																	=
																Element:span
																	explode
																Element:span
																	(
																Element:span
																	'.'
																Element:span
																	,
																Element:span
																	$signedRequest
																Element:span
																	,
																Element:span
																	2
																Element:span
																	);
																Element:span
																	// decode the data
																Element:span
																	$signature
																Element:span
																	=
																Element:span
																	base64_decode
																Element:span
																	(
																Element:span
																	$encodedSignature
																Element:span
																	);
																Element:span
																	$jsonStr
																Element:span
																	=
																Element:span
																	base64_decode
																Element:span
																	(
																Element:span
																	$encodedData
																Element:span
																	);
																Element:span
																	$data
																Element:span
																	=
																Element:span
																	json_decode
																Element:span
																	(
																Element:span
																	$jsonStr
																Element:span
																	,
																Element:span
																	true
																Element:span
																	);
																Element:span
																	// confirm the signature
																Element:span
																	$expectedSignature
																Element:span
																	=
																Element:span
																	hash_hmac
																Element:span
																	(
																Element:span
																	'sha256'
																Element:span
																	,
																Element:span
																	$jsonStr
																Element:span
																	,
																Element:span
																	$clientSecret
																Element:span
																	(),
																Element:span
																	$raw
																Element:span
																	=
																Element:span
																	false
																Element:span
																	);
																Element:span
																	if
																Element:span
																	(
																Element:span
																	!
																Element:span
																	hash_equals
																Element:span
																	(
																Element:span
																	$expectedSignature
																Element:span
																	,
																Element:span
																	$signature
																Element:span
																	))
																Element:span
																	{
																Element:span
																	error_log
																Element:span
																	(
																Element:span
																	'Bad signed request from BigCommerce!'
																Element:span
																	);
																Element:span
																	return
																Element:span
																	null
																Element:span
																	;
																Element:span
																	}
																Element:span
																	return
																Element:span
																	$data
																Element:span
																	;
																Element:span
																	}
															Node:
															(type) c
															(layer)5
																Element:aside
																Element:span
																	NOTE:
																Element:code
																	!hash_equals
																	is available in PHP 5.6 and later. If you are running an older version of PHP, pull in a compatibility library such as the following:
																Element:a
																	https://packagist.org/packages/realityking/hash_equals
																	. BigCommerce’s sample app
																Element:a
																	hello-world-app-php-silex app
																	does this automatically.
															Node:
															(type) c
															(layer)5
																Element:ul
																Element:li
																Element:a
																	Ruby
															Node:
															(type) c
															(layer)5
																Element:pre
																Element:code
																Element:span
																	require
																Element:span
																	"base64"
																Element:span
																	require
																Element:span
																	"openssl"
																Element:span
																	def
																Element:span
																	verify
																Element:span
																	(
																Element:span
																	signed_payload
																Element:span
																	,
																Element:span
																	client_secret
																Element:span
																	)
																Element:span
																	message_parts
																Element:span
																	=
																Element:span
																	signed_payload
																Element:span
																	.
																Element:span
																	split
																Element:span
																	(
																Element:span
																	"."
																Element:span
																	)
																Element:span
																	encoded_json_payload
																Element:span
																	=
																Element:span
																	message_parts
																Element:span
																	[
																Element:span
																	0
																Element:span
																	]
																Element:span
																	encoded_hmac_signature
																Element:span
																	=
																Element:span
																	message_parts
																Element:span
																	[
																Element:span
																	1
																Element:span
																	]
																Element:span
																	payload_object
																Element:span
																	=
																Element:span
																	Base64
																Element:span
																	.
																Element:span
																	strict_decode
																Element:span
																	(
																Element:span
																	encoded_json_payload
																Element:span
																	)
																Element:span
																	provided_signature
																Element:span
																	=
																Element:span
																	Base64
																Element:span
																	.
																Element:span
																	strict_decode
																Element:span
																	(
																Element:span
																	encoded_hmac_signature
																Element:span
																	)
																Element:span
																	expected_signature
																Element:span
																	=
																Element:span
																	OpenSSL
																Element:span
																	::
																Element:span
																	HMAC
																Element:span
																	::
																Element:span
																	hexdigest
																Element:span
																	(
																Element:span
																	"sha256"
																Element:span
																	,
																Element:span
																	client_secret
																Element:span
																	,
																Element:span
																	payload_object
																Element:span
																	)
																Element:span
																	return
																Element:span
																	false
																Element:span
																	unless
																Element:span
																	secure_compare
																Element:span
																	(
																Element:span
																	expected_signature
																Element:span
																	,
																Element:span
																	provided_signature
																Element:span
																	)
																Element:span
																	JSON
																Element:span
																	.
																Element:span
																	parse
																Element:span
																	(
																Element:span
																	payload_object
																Element:span
																	)
																Element:span
																	end
																Element:span
																	def
																Element:span
																	secure_compare
																Element:span
																	(
																Element:span
																	a
																Element:span
																	,
																Element:span
																	b
																Element:span
																	)
																Element:span
																	return
																Element:span
																	false
																Element:span
																	if
																Element:span
																	a
																Element:span
																	.
																Element:span
																	blank?
																Element:span
																	||
																Element:span
																	b
																Element:span
																	.
																Element:span
																	blank?
																Element:span
																	||
																Element:span
																	a
																Element:span
																	.
																Element:span
																	bytesize
																Element:span
																	!=
																Element:span
																	b
																Element:span
																	.
																Element:span
																	bytesize
																Element:span
																	l
																Element:span
																	=
																Element:span
																	a
																Element:span
																	.
																Element:span
																	unpack
																Element:span
																	"C
																Element:span
																	#{
																Element:span
																	a
																Element:span
																	.
																Element:span
																	bytesize
																Element:span
																	}
																Element:span
																	"
																Element:span
																	res
																Element:span
																	=
																Element:span
																	0
																Element:span
																	b
																Element:span
																	.
																Element:span
																	each_byte
																Element:span
																	{
																Element:span
																	|
																Element:span
																	byte
																Element:span
																	|
																Element:span
																	res
																Element:span
																	|=
																Element:span
																	byte
																Element:span
																	^
																Element:span
																	l
																Element:span
																	.
																Element:span
																	shift
																Element:span
																	}
																Element:span
																	res
																Element:span
																	==
																Element:span
																	0
																Element:span
																	end
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:span
											Processing the JSON Object
									Node:
									(type) c
									(layer)3
										Element:p
											The JSON object embedded in the
										Element:code
											signed_payload
											contains information about the BigCommerce store and the store owner or user.
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:span
														Identifying the Store
												Node:
												(type) c
												(layer)4
													Element:p
														You should use the store information to identify the store to which the request pertains.
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:span
														Interpreting the User Information
												Node:
												(type) c
												(layer)4
													Element:p
														Interpreting the user information varies as follows:
												Node:
												(type) c
												(layer)4
													Element:table
													Element:thead
													Element:tr
													Element:th
														Request type
													Element:th
														Multiple users enabled
													Element:th
														Multiple users not enabled
													Element:tbody
													Element:tr
													Element:td
														Load
													Element:td
														Compare the user information to see if it matches that of the store owner, received at the time of
													Element:a
														app installation
														or that of an existing user. If the user information does not match either of these, then it represents a new user that you should add to your database or other storage.
													Element:td
														The information should match that of the store owner, received at the time of
													Element:a
														app installation
														.
													Element:tr
													Element:td
														Uninstall
													Element:td
														The user information should match that of the store owner. Only the store owner can uninstall your app.
													Element:td
														Should match the store owner.
													Element:tr
													Element:td
														Remove user
													Element:td
														The user information should match one of the users that you have stored. After locating the stored user, delete it from your database or other storage.
													Element:td
														N/A
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:span
														JSON Values
												Node:
												(type) c
												(layer)4
													Element:table
													Element:thead
													Element:tr
													Element:th
														Name
													Element:th
														Data Type
													Element:th
														Value Description
													Element:tbody
													Element:tr
													Element:td
														user.id
													Element:td
														integer
													Element:td
														Unique identifier for the user who initiated the callback.
													Element:tr
													Element:td
														user.email
													Element:td
														string
													Element:td
														Email address of the user who initiated the callback.
													Element:tr
													Element:td
														owner.id
													Element:td
														integer
													Element:td
														Unique identifier for the user listed as the store owner.
													Element:tr
													Element:td
														owner.email
													Element:td
														string
													Element:td
														Email address of the user listed as the store owner.
													Element:tr
													Element:td
														context
													Element:td
														string
													Element:td
														The context value is part of the API path for this store and includes the store_hash.
													Element:tr
													Element:td
														store_hash
													Element:td
														string
													Element:td
														Unique identifier for the store.
													Element:tr
													Element:td
														timestamp
													Element:td
														float
													Element:td
														The time (in Unix time) when the callback was generated.
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:span
														JSON Example
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
													Element:span
														{
													Element:span
													Element:span
														"user"
													Element:span
														:
													Element:span
													Element:span
														{
													Element:span
													Element:span
														"id"
													Element:span
														:
													Element:span
														9128
													Element:span
														,
													Element:span
													Element:span
														"email"
													Element:span
														:
													Element:span
														"user@mybigcommerce.com"
													Element:span
													Element:span
														},
													Element:span
													Element:span
														"owner"
													Element:span
														:
													Element:span
													Element:span
														{
													Element:span
													Element:span
														"id"
													Element:span
														:
													Element:span
														9128
													Element:span
														,
													Element:span
													Element:span
														"email"
													Element:span
														:
													Element:span
														"user@mybigcommerce.com"
													Element:span
													Element:span
														},
													Element:span
													Element:span
														"context"
													Element:span
														:
													Element:span
														"stores/z4zn3wo"
													Element:span
														,
													Element:span
													Element:span
														"store_hash"
													Element:span
														:
													Element:span
														"z4zn3wo"
													Element:span
														,
													Element:span
													Element:span
														"timestamp"
													Element:span
														:
													Element:span
														1469823892.9123988
													Element:span
													Element:span
														}
													Element:span
												Node:
												(type) c
												(layer)4
													Element:h2
													Element:span
													Element:a
														Multi-User Support
												Node:
												(type) c
												(layer)4
													Element:p
														When you register your app with BigCommerce, if you
													Element:a
														enable multi-user support
														, this will allow store admins to manually authorize users – other than the store owner – to load the app. This feature is not available for
													Element:a
														basic-auth apps
														.
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:span
											Enable Multi-User Support
									Node:
									(type) c
									(layer)3
										Element:p
											As soon as you
										Element:a
											enable multi-user support
											, this affects the control panel of any store that has your app installed. If you already have an app published in the App Store, be aware that this setting takes effect immediately. Therefore, we recommend testing your multi-user support using a separate app that is in draft status.
									Node:
									(type) c
									(layer)3
										Element:blockquote
										Element:p
											NOTE: Let your customers know that you’ve enabled this feature! Otherwise, they won’t know that they can start granting access to users.
									Node:
									(type) c
									(layer)3
										Element:p
											To opt into multi-user support:
									Node:
									(type) c
									(layer)3
										Element:ol
										Element:li
											Log into
										Element:strong
											My Apps
											.
										Element:li
											In the
										Element:strong
											Technical
											panel >
										Element:strong
											Supported Features
											area, select
										Element:strong
											Multiple Users
											.
										Element:li
											In the
										Element:strong
											Remove User Callback URI
											box, provide a
										Element:strong
											Remove User Callback URI
											.
										Element:li
											Save and close your app.
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:span
											About the Control-Panel Experience
									Node:
									(type) c
									(layer)3
										Element:p
											Store admins will be able to adjust user permissions to grant/deny other store users’ access to your app.
									Node:
									(type) c
									(layer)3
										Element:p
											The next time the user logs in, they will see any apps for which they have been granted access. The user can then click on the app icon in the left navigation to load it.
									Node:
									(type) c
									(layer)3
										Element:p
											Use your draft app and your sandbox store to review this behavior.
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:span
											About the Load Request
									Node:
									(type) c
									(layer)3
										Element:p
											Apps with multiple users enabled can expect more than just the store owner’s email and ID in the JSON object sent in the load request. If a load request is sent with user information you haven’t seen yet, you should provision the user account and associate it with the store in your database.
									Node:
									(type) c
									(layer)3
										Element:p
											Because you know the store owner’s email and ID from the
										Element:a
											App Installation
											sequence, your app can distinguish store owners from other users. This allows you to provide different user experiences based on the information in the load request. Here is a summary of the two types of users:
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:strong
											Store owner
											: Can install, uninstall, and load apps.
										Element:li
										Element:strong
											Users
											: Cannot install or uninstall apps. Permitted only to load the apps that a store admin has authorized.
									Node:
									(type) c
									(layer)3
										Element:p
											For further details, please see
										Element:a
											Load Request and Response
											.
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:span
											About the Remove User Request
									Node:
									(type) c
									(layer)3
										Element:p
											In addition to their ability to add users, store admins can also remove users. This action generates a
										Element:code
											GET
											request to the
										Element:strong
											Remove User Callback URI
											that you provided in
										Element:strong
											My Apps
											. Your app should delete from its records the user identified in the request.
									Node:
									(type) c
									(layer)3
										Element:p
											For further information, please see
										Element:a
											Remove User Request
											.
									Node:
									(type) c
									(layer)3
										Element:h2
										Element:span
											UI Constraints
									Node:
									(type) c
									(layer)3
										Element:p
											OAuth apps benefit from a high level of integration with the BigCommerce platform. Users interacting with your app will enjoy a seamless experience. BigCommerce achieves this by rendering your app’s user interface inside of an iframe within the control panel. To ensure acceptance into the App Store, your app should be able to perform all of its functions inside of the iframe.
									Node:
									(type) c
									(layer)3
										Element:p
											While very usable and friendly, the iframe approach does require special attention from app developers. The remainder of this page discusses several functional areas to consider when designing and developing your app.
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:a
											Mixed content
										Element:li
										Element:a
											Same-origin policies
										Element:li
										Element:a
											P3P and cookies
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:span
											About Mixed Content
									Node:
									(type) c
									(layer)3
										Element:p
											The BigCommerce control panel is served over TLS/SSL. Your app must be hosted on a web server that accepts and sends TLS/SSL requests. In addition, all of the resources referenced in the HTML that you present to the end users must be served over TLS/SSL. You may find protocol-agnostic addressing helpful.
									Node:
									(type) c
									(layer)3
										Element:p
											If the user interface retrieves images, scripts, or other assets over a connection not encrypted with TLS/SSL, the user will experience errors and possibly an inability to interact with your app. Before submitting your app, use an
										Element:a
											online crawler
											to check for insecure content.
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:span
											About Same-Origin Policies
									Node:
									(type) c
									(layer)3
										Element:p
										Element:a
											Same-origin policies
											restrict apps running within iframes from performing certain activities, such as interacting with other services and making OAuth connections. While apps that operate within the BigCommerce iframe get strong preference during App Store considerations, we sometimes make exceptions for apps that need to interact with, and authenticate to, other services. If your app requires this, we advise you to open a new tab for actions that cannot occur within the iframe.
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:span
											About P3P and Cookies
									Node:
									(type) c
									(layer)3
										Element:p
											Internet Explorer is one of the browsers that BigCommerce
										Element:a
											supports
											, and our merchants do use it to access the control panel. If your app needs to set a cookie, you will need to craft a
										Element:a
											P3P policy
											. Otherwise, your app will experience issues on Internet Explorer. Please review the following pages for more information.
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:a
											Craft a P3P policy to make IE behave
										Element:li
										Element:a
											MSDN Intro to P3P Cookie Blocking
									Node:
									(type) c
									(layer)3
										Element:h2
										Element:span
										Element:a
											OAuth Scopes
									Node:
									(type) c
									(layer)3
										Element:p
											The following table identifies the name used for each OAuth scope in the My Apps and control panel GUIs, along with the corresponding resources and the strings that get passed to your app during apps’
										Element:a
											installation or scope updates
											.
									Node:
									(type) c
									(layer)3
										Element:p
											All OAuth scopes except
										Element:code
											default
											have
										Element:code
											read_only
											scopes that allow only
										Element:code
											GET
											and
										Element:code
											HEAD
											requests.
									Node:
									(type) c
									(layer)3
										Element:table
										Element:thead
										Element:tr
										Element:th
											Scope GUI Name
										Element:th
											Scope Strings
										Element:th
											Resources
										Element:tbody
										Element:tr
										Element:td
											Content
										Element:td
										Element:strong
											store_v2_content
										Element:td
										Element:a
											blog/posts
										Element:tr
										Element:td
										Element:td
										Element:strong
											store_v2_content_read_only
										Element:td
										Element:a
											blog/tags
										Element:tr
										Element:td
										Element:td
										Element:td
										Element:a
											redirects
										Element:tr
										Element:td
											Customers
										Element:td
										Element:strong
											store_v2_customers
										Element:td
										Element:a
											customers
										Element:tr
										Element:td
										Element:td
										Element:strong
											store_v2_customers_read_only
										Element:td
										Element:a
											customers/{id}/addresses
										Element:tr
										Element:td
										Element:td
										Element:td
										Element:a
											customer_groups
										Element:tr
										Element:td
											Customer Login
										Element:td
										Element:strong
											store_v2_customers_login
										Element:td
											[Grants access to
										Element:a
											Customer Login API
											)]
										Element:tr
										Element:td
											Default
										Element:td
										Element:strong
											default
										Element:td
										Element:a
											countries
										Element:tr
										Element:td
										Element:td
										Element:td
										Element:a
											countries/{id}/states
										Element:tr
										Element:td
										Element:td
										Element:td
										Element:a
											hooks
										Element:tr
										Element:td
										Element:td
										Element:td
										Element:a
											time
										Element:tr
										Element:td
											Information
										Element:td
										Element:strong
											store_v2_information
										Element:td
										Element:a
											payments/methods
										Element:tr
										Element:td
										Element:td
										Element:strong
											store_v2_information_read_only
										Element:td
										Element:a
											shipping/methods
										Element:tr
										Element:td
										Element:td
										Element:td
										Element:a
											store
										Element:tr
										Element:td
										Element:td
										Element:td
										Element:a
											tax_classes
										Element:tr
										Element:td
											Marketing
										Element:td
										Element:strong
											store_v2_marketing
										Element:td
										Element:a
											coupons
										Element:tr
										Element:td
										Element:td
										Element:strong
											store_v2_marketing_read_only
										Element:td
										Element:tr
										Element:td
										Element:td
										Element:td
										Element:a
											gift_certificates
										Element:tr
										Element:td
											Orders
										Element:td
										Element:strong
											store_v2_orders
										Element:td
										Element:a
											orders
										Element:tr
										Element:td
										Element:td
										Element:strong
											store_v2_orders_read_only
										Element:td
										Element:a
											orders/{id}/coupons
										Element:tr
										Element:td
										Element:td
										Element:td
										Element:a
											orders/{id}/messages
										Element:tr
										Element:td
										Element:td
										Element:td
										Element:a
											orders/{id}/products
										Element:tr
										Element:td
										Element:td
										Element:td
										Element:a
											orders/{id}/shipping_addresses
										Element:tr
										Element:td
										Element:td
										Element:td
										Element:a
											orders/{id}/order_statuses
										Element:tr
										Element:td
										Element:td
										Element:td
										Element:a
											orders/{id}/taxes
										Element:tr
										Element:td
										Element:td
										Element:td
										Element:a
											orders/{id}/shipments
										Element:tr
										Element:td
											Products
										Element:td
										Element:strong
											store_v2_products
										Element:td
										Element:a
											brands
										Element:tr
										Element:td
										Element:td
										Element:strong
											store_v2_products_read_only
										Element:td
										Element:a
											products/{id}/discount_rules
										Element:tr
										Element:td
										Element:td
										Element:td
										Element:a
											categories
										Element:tr
										Element:td
										Element:td
										Element:td
										Element:a
											products/{id}/configurable_fields
										Element:tr
										Element:td
										Element:td
										Element:td
										Element:a
											products/{id}/custom_fields
										Element:tr
										Element:td
										Element:td
										Element:td
										Element:a
											products/{id}/googleproductsearch
										Element:tr
										Element:td
										Element:td
										Element:td
										Element:a
											options
										Element:tr
										Element:td
										Element:td
										Element:td
										Element:a
											option_sets
										Element:tr
										Element:td
										Element:td
										Element:td
										Element:a
											option_sets/{id}/options
										Element:tr
										Element:td
										Element:td
										Element:td
										Element:a
											options/{id}/values
										Element:tr
										Element:td
										Element:td
										Element:td
										Element:a
											products
										Element:tr
										Element:td
										Element:td
										Element:td
										Element:a
											products/{id}/images
										Element:tr
										Element:td
										Element:td
										Element:td
										Element:a
											products/{id}/options
										Element:tr
										Element:td
										Element:td
										Element:td
										Element:a
											products/{id}/reviews
										Element:tr
										Element:td
										Element:td
										Element:td
										Element:a
											products/{id}/rules
										Element:tr
										Element:td
										Element:td
										Element:td
										Element:a
											products/{id}/videos
										Element:tr
										Element:td
										Element:td
										Element:td
										Element:a
											products/{id}/skus
									Node:
									(type) c
									(layer)3
										Element:h2
										Element:span
										Element:a
											Rate Limits – OAuth
									Node:
									(type) c
									(layer)3
										Element:p
											Apps that authenticate with OAuth are rate limited based on a quota that is refreshed every five seconds. The maximum quota for a store will vary depending on the store’s
										Element:a
											plan
											.
									Node:
									(type) c
									(layer)3
										Element:p
											Each request to the API consumes one available request from the quota. When an app hits the quota limit, subsequent requests are rejected until the quota is refreshed.
									Node:
									(type) c
									(layer)3
										Element:p
											The store’s overall quota is evenly distributed across all apps that are accessing that store. This provides fairness for multiple apps that are accessing the API simultaneously, preventing a single greedy app from consuming the store’s entire quota by itself.
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
											Playing Nicely with The Platform
									Node:
									(type) c
									(layer)3
										Element:p
											Honoring the rate limiter is very easy:
									Node:
									(type) c
									(layer)3
										Element:p
											If your request to the API triggers a
										Element:strong
											429 Too Many Requests
											response, then you know you’ve been limited.
									Node:
									(type) c
									(layer)3
										Element:p
											The rate-limited response will contain the
										Element:strong
											X-Retry-After
											header, specifying a time (in seconds) that your client must wait before its quota has refreshed.
									Node:
									(type) c
									(layer)3
										Element:p
											Retry the request after this time has elapsed, and your API service will resume as normal.
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Example
												Node:
												(type) c
												(layer)4
													Element:p
														When you see a response with a
													Element:code
														429
														status code, your client shouldn’t make any further requests until your quota has refreshed:
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														HTTP/1.1 429 Too Many Requests Date: Mon, 03 Feb 2014 20:36:00 GMT Content-Type: application/json X-Retry-After: 15
												Node:
												(type) c
												(layer)4
													Element:p
														Parse the
													Element:strong
														X-Retry-After
														header to determine how long you have to wait. In this case, it would be 15 seconds.
												Node:
												(type) c
												(layer)4
													Element:p
														Your client can sleep on the specified interval:
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														$seconds = $response->getHeader("X-Retry-After"); sleep($seconds);
												Node:
												(type) c
												(layer)4
													Element:p
														After waiting for the given number of seconds, you can go back to making API requests.
												Node:
												(type) c
												(layer)4
													Element:h2
													Element:span
														App Store Approval Requirements
												Node:
												(type) c
												(layer)4
													Element:p
														Our submission guidelines aim to protect the merchant experience, and to provide enough structure for you to develop apps efficiently and effectively.
												Node:
												(type) c
												(layer)4
													Element:p
														Before submitting your app, please be sure to carefully review it against the following requirements, to avoid having your app rejected and needing to re-submit it:
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:span
											App Approval Requirements
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:p
											Apps must perform as described.
										Element:li
										Element:p
											All information supplied in the app submission process must be genuine and accurate.
										Element:li
										Element:p
											Apps must provide pricing information – including pricing for starting a new service, and the cost of services after the free trial.
										Element:li
										Element:p
											All API requests must be made using OAuth authentication.
										Element:li
										Element:p
											Apps must be compatible with both the
										Element:a
											Blueprint theme framework
											and the
										Element:a
											Stencil theme framework
											, for any storefront components.
										Element:li
										Element:p
											Apps must include contact information should a merchant need support on the app. Any relevant reference docs or media should also be included or linked.
										Element:li
										Element:p
											Apps must be production-ready and free of defects.
										Element:aside
										Element:span
											Test before Submitting
										Element:br
											Install and test your app thoroughly prior to submission. Be sure to install and run your app inside of your sandbox store, as a draft area to conduct your tests.
										Element:li
										Element:p
											Apps must function properly on all
										Element:a
											supported browsers
											, and must conform to the
										Element:a
											user-interface constraints
											– including P3P policies as necessary, and no mixed content.
										Element:li
										Element:p
											The entire app should operate within the iframe that opens when the user clicks on your app icon in the control panel’s launch bar. Exceptions may be made for apps that need to authenticate to other services using OAuth – as long as they open a new tab to do so.
										Element:li
										Element:p
											Apps must be easy to use.
										Element:li
										Element:p
											Whenever possible, apps must use the API resources to auto-fill and obtain information, rather than prompting the user. BigCommerce will reject apps requesting information that can be auto-filled.
										Element:aside
										Element:span
											Auto-Filling API
										Element:br
											You can obtain the store name, phone number, and other information from the
										Element:a
											Store Information
											resource.
										Element:li
										Element:p
											The user ID and email address from the
										Element:a
											OAuth flow
											should allow you to automatically log the merchant into any additional systems. BigCommerce prefers apps that provide the merchant with a single-sign-on experience.
										Element:li
										Element:p
											Apps must
										Element:a
											return some HTML
											in response to GET requests to the
										Element:a
											Auth Callback URI
											.
										Element:li
										Element:p
											Must use a TLS/SSL certificate signed by a valid certificate authority. Self-signed certificates will generate browser warnings and are not acceptable.
										Element:li
										Element:p
											No competitor integrations or references should appear in the app or in marketing materials.
										Element:li
										Element:p
											Any instances of the BigCommerce brand name must match current branding, i.e., one word with an uppercase “C”.
										Element:li
										Element:p
											Apps must have all required information and files discussed in
										Element:a
											App Submission
											.
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:span
											Types of Apps We’re Accepting
									Node:
									(type) c
									(layer)3
										Element:table
										Element:thead
										Element:tr
										Element:th
											Accepting
										Element:th
											Not Accepting
										Element:tbody
										Element:tr
										Element:td
											Accounting
										Element:td
											Real-Time Tax
										Element:tr
										Element:td
											Advertising
										Element:td
											Customized Checkout
										Element:tr
										Element:td
											Analytics
										Element:td
											Real-time Shipping Rate updates
										Element:tr
										Element:td
											Cloud integration
										Element:td
											Payment Methods
										Element:tr
										Element:td
											Customer feedback
										Element:td
										Element:tr
										Element:td
											Drop shipping
										Element:td
										Element:tr
										Element:td
											Email marketing
										Element:td
										Element:tr
										Element:td
											Live chat
										Element:td
										Element:tr
										Element:td
											Marketing
										Element:td
										Element:tr
										Element:td
											Merchandising
										Element:td
										Element:tr
										Element:td
											Mobile
										Element:td
										Element:tr
										Element:td
											Multichannel listing
										Element:td
										Element:tr
										Element:td
											Order fulfillment
										Element:td
										Element:tr
										Element:td
											Order management
										Element:td
										Element:tr
										Element:td
											Point of sale
										Element:td
										Element:tr
										Element:td
											Product review
										Element:td
										Element:tr
										Element:td
											Shipping
										Element:td
										Element:tr
										Element:td
											Shopping comparison
										Element:td
										Element:tr
										Element:td
											Social media
										Element:td
										Element:tr
										Element:td
											Split testing
										Element:td
									Node:
									(type) c
									(layer)3
										Element:p
											Questions? Please contact
										Element:a
											appstore@bigcommerce.com
									Node:
									(type) c
									(layer)3
										Element:h2
										Element:span
											App Submission
									Node:
									(type) c
									(layer)3
										Element:p
											When you first get up and running with your app development, you will leave many fields in
										Element:code
											My Apps
											blank, as discussed in the
										Element:a
											App Registration
											section. Before submitting your app for consideration, you must come back through the
										Element:code
											My Apps
											wizard and fill in the missing information. This section discusses each page of the wizard, and identifies the information and files required for App Store approval.
									Node:
									(type) c
									(layer)3
										Element:aside
										Element:span
											Check for Complete Information
										Element:br
										Element:br
											The wizard validates for your Partner username and ID, as well as for correctly formatted URLs. However, additional information is required to get your app accepted into the App Store.
										Element:br
										Element:br
											If you submit your app without the required information and files identified in this section, it will be rejected.
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:span
											App Summary
									Node:
									(type) c
									(layer)3
										Element:p
											The required fields in the
										Element:code
											App Summary
											panel are identified and discussed below:
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:p
										Element:code
											Username
											: your Partner account user name.
										Element:li
										Element:p
										Element:code
											Partner ID
											: your Partner account ID.
										Element:li
										Element:p
										Element:code
											Logo
											: upload the image that you want to be displayed in the
										Element:a
											App Store
											. To ensure optimal quality, you should use your image processing software to size it to 340 by 160 pixels before uploading.
										Element:li
										Element:p
										Element:code
											Price
											: defaults to
										Element:code
											Free
											. If you do not want to receive any payment for your app, you can leave this in place. Otherwise, select the price that you want to charge merchants. NOTE: if you select
										Element:code
											Free Trial
											, make sure that you select a price to charge at the end of the trial period.
									Node:
									(type) c
									(layer)3
										Element:aside
										Element:span
											Free-Trial Templates
										Element:br
										Element:br
											The App Summary price setting offers several predefined formats that include an optional Free Trial. Where possible, we suggest using these, to offer merchants uniform formatting in the App Store.
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:p
										Element:code
											Summary
											: A brief description of your app (your value proposition) to show alongside the logo in the
										Element:a
											App Store
											. Maximum length is 140 characters.
										Element:li
										Element:p
										Element:code
											Category
											: Select a minimum of one, maximum of two.
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:span
											Details
									Node:
									(type) c
									(layer)3
										Element:p
											All of the fields in the
										Element:code
											Details
											panel are required. Each is discussed below:
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:p
										Element:code
											App Details
											: Provide a helpful description to promote your app (maximum 250 words). We recommend including an introduction video, bullet points, short paragraphs, and any restrictions (countries, browsers, payment methods, etc).
										Element:li
										Element:p
										Element:code
											App Screenshots
											: You must include at least one, and may include up to four. Each screenshot should be 860 by 560 pixels.
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:span
											Launch Bar
									Node:
									(type) c
									(layer)3
										Element:p
											You must provide an app icon. To ensure optimal quality, you should use your image processing software to size it to 100 by 100 pixels before uploading. Your app icon will appear in the merchant’s control panel once your app has been installed.
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:span
											Technical
									Node:
									(type) c
									(layer)3
										Element:p
											You will have already provided much of the information during the initial
										Element:a
											app registration
											. However, before submitting your app, please review the information that you initially provided, to make sure that all of the URIs are publicly available, fully qualified, and served over TLS/SSL. In addition, ensure that your app is requesting all of the scopes that it needs now, as well as the scopes that you anticipate needing in the future.
									Node:
									(type) c
									(layer)3
										Element:p
											Prior to submission, you must also provide detailed testing instructions, as well as test accounts.
									Node:
									(type) c
									(layer)3
										Element:aside
										Element:span
											Scope Changes
										Element:br
										Element:br
											Changing scopes once your app has been launched will require all of your current users to re-authorize the app before they can launch it again.
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:span
											Submitting your App
									Node:
									(type) c
									(layer)3
										Element:p
											You can submit your app from the last panel. A fee of $99 is required for each submission. If your app is rejected and you need to resubmit it,
										Element:em
											you will be charged again,
											so be sure that it’s ready for review before submitting. Updates to the app will not require an additional submission fee.
									Node:
									(type) c
									(layer)3
										Element:p
											After receiving the submission, BigCommerce will use the information that you have provided to interact with, evaluate, and test your app.
									Node:
									(type) c
									(layer)3
										Element:p
											Questions? Please contact
										Element:a
											appstore@bigcommerce.com
									Node:
									(type) c
									(layer)3
										Element:h2
											App Store Gallery
									Node:
									(type) c
									(layer)3
										Element:p
											For inspiration,
										Element:a
											take a look
											at some of the apps in our current App Store!
									Node:
									(type) c
									(layer)3
										Element:h2
											Sample Contract
									Node:
									(type) c
									(layer)3
										Element:p
											Before your app can be published in the App Store, you must sign a contract. To expedite this process, we provide our standard contract below.
									Node:
									(type) c
									(layer)3
										Element:p
											Questions? Please contact
										Element:a
											appstore@bigcommerce.com
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
											Contract Text
									Node:
									(type) c
									(layer)3
										Element:p
											BigCommerce provides a software and services platform to enable individuals and entities (“BigCommerce Clients”) to build their own online marketplace (collectively, such platform and products/services are referred to as the “BigCommerce Products”); andIn connection with the provision of BigCommerce Products, BigCommerce has created the BigCommerce Apps Marketplace pursuant to which certain companies may make available software applications (“Apps”) that are integrated to operate with the BigCommerce Products.
									Node:
									(type) c
									(layer)3
										Element:p
											Participant has developed an App or Apps that have been approved by BigCommerce and included in the BigCommerce Apps Marketplace, and in consideration of Participant’s participation in such marketplace, Participant agrees to the terms and conditions of this Agreement, including the revenue share commission payments payable to BigCommerce as outlined in Section 2.
									Node:
									(type) c
									(layer)3
										Element:p
											1. TERM AND TERMINATION; REMOVAL OF APP.
									Node:
									(type) c
									(layer)3
										Element:p
											1.1. This Agreement will commence on the Effective Date and continue in full force and effect for one year, unless earlier terminated or canceled as set forth herein (the “Initial Term”). Following the Initial Term, this Agreement shall be automatically renewed for additional one year terms unless either party provides the other with written notice, no later than 90 days prior to the end of the then- current term, that it does not wish to renew this Agreement (the Initial Term and all renewal terms shall be referred to herein as the “Term”).
									Node:
									(type) c
									(layer)3
										Element:p
											1.2. Either party may terminate this Agreement at any time if the other party breaches any of its obligations hereunder or there exists any failure of any warranty or representation made hereunder, and such breach or failure is not cured within thirty (30) days of written notice of such breach from the other party.
									Node:
									(type) c
									(layer)3
										Element:p
											1.3. All provisions of this Agreement that by their terms or nature should survive termination or expiration of this Agreement shall so survive. Upon termination of this Agreement for any reason, Participant will continue to make the commission payments under the Revenue Share Program as set forth in Section 2 below, and such obligation shall survive, indefinitely.
									Node:
									(type) c
									(layer)3
										Element:p
											1.4. Notwithstanding any other provision of this Agreement, BigCommerce may remove an App from the BigCommerce Apps Marketplace without notice at any time for any or no reason in its sole and complete discretion. In addition, BigCommerce may remove an App from the BigCommerce Apps Marketplace at any time for any of the following reasons: multiple complaints regarding an App from BigCommerce Clients, recurring bugs and/or support issues, Participant fails to promptly and comprehensively respond to and solve bugs or other support issues or any other performance issues with the App.
									Node:
									(type) c
									(layer)3
										Element:p
											2. FEES FOR PARTICIPATION IN BIGCOMMERCE APPS MARKETPLACE PARTNER PROGRAM.
									Node:
									(type) c
									(layer)3
										Element:p
											2.1. Revenue Share Program. Participant will pay BigCommerce a commission percentage equal to the Revenue Share Percentage as specified on the cover page hereto on Participant Sales (defined below) to BigCommerce Clients or other parties referred to Participant by BigCommerce through the BigCommerce website, platform or otherwise. “Participant Sales” means all amounts received by Participant and its affiliates from the sale of Apps, products or services, less (a) the amount of all refunds, allowances and discounts, (b) the amount of all return credits and refunds and © shipping and handling charges; provided that Participant has notified BigCommerce of any such amounts as set forth in subsections (a) through ©, in which case such amounts shall be credited in the next billing cycle.
									Node:
									(type) c
									(layer)3
										Element:p
											2.2. Reports; Payment Terms. Participant agrees to provide monthly commission payment statements to BigCommerce for any fees or commissions due and owing under this Section 2 within 10 days following the end of each month. Commission payment statements shall be sent by Participant to partnerpayments@bigcommerce.com and include the following information: (a) the name of the App(s), (b) the revenue per App (i.e. Participant Sales and calculation thereof), © the total revenue for all App(s) (i.e. the total Participant Sales for all Apps), and (d) the shared client count. Payments shall be made by Participant to BigCommerce within 30 days of the end of the month in which the fee was earned. Payments shall be made by Participant either via PayPal to accounts@interspire.com or via ACH (where available). The parties agree to use good faith efforts to resolve any discrepancy between their respective records, should any occur. Each party shall be solely responsible for payment of all taxes assessed against it as a result of this Agreement and/or sales to BigCommerce Clients, regardless of which party is required to collect and remit such taxes.
									Node:
									(type) c
									(layer)3
										Element:p
											3. AUDIT RIGHTS.
									Node:
									(type) c
									(layer)3
										Element:p
											3.1. At any time and from time to time, both during and after the Term, BigCommerce may review, audit and make copies of, and/or have its advisors, agents, accountants and/or attorneys on its behalf review, audit and make copies of, all books and records (including without limitation any digital or electronic records) kept or maintained by Participant or on its behalf relating to transactions with BigCommerce Clients or that otherwise results in a fee payable to BigCommerce hereunder (collectively, “Participant Records”).
									Node:
									(type) c
									(layer)3
										Element:p
											Participant shall maintain complete and accurate Participant Records during the Term and for a period of five years following termination or expiration of this Agreement. Participant Records not relating to transactions with BigCommerce Clients or fees payable to BigCommerce under this Agreement are not subject to audit rights set forth in this Section 3.1.
									Node:
									(type) c
									(layer)3
										Element:p
											4. INTELLECTUAL PROPERTY. For the avoidance of doubt, BigCommerce owns, and will continue to own, all right, title and interest in and to the BigCommerce Products, including all accompanying worldwide intellectual property rights. Participant receives no rights in the foregoing.
									Node:
									(type) c
									(layer)3
										Element:p
											5. REPRESENTATIONS, WARRANTIES AND COVENANTS.
									Node:
									(type) c
									(layer)3
										Element:p
											5.1. Each party represents and warrants to the other that it has the right to enter into this Agreement and to perform its obligations hereunder.
									Node:
									(type) c
									(layer)3
										Element:p
											5.2. Each party represents and warrants that (i) the execution, delivery and performance of this Agreement does not conflict in any material respect with or constitute a material breach or default of any organizational document, agreement or other writing to which it is a party, and (ii) it has all licenses, permissions and agreements necessary or appropriate to perform its obligations under this Agreement.
									Node:
									(type) c
									(layer)3
										Element:p
											5.3. Participant represents and warrants to BigCommerce that Participant’s Apps, products and services and other items provided to BigCommerce or any BigCommerce Clients do not and will not (i) infringe on any third party’s copyright, patent, trademark, trade secret or other proprietary rights or right of publicity or privacy; (ii) violate any applicable law, statute, ordinance or regulation; (iii) be defamatory or libelous; (iv) be lewd or obscene; (v) violate any laws regarding unfair competition, anti-discrimination or false advertising; (vi) promote violence or contain hate speech; or (vii) contain viruses, trojan horses, worms, time bombs, cancelbots or other similar harmful or deleterious programming routines.
									Node:
									(type) c
									(layer)3
										Element:p
											6. INDEMNIFICATION. Participant agrees, at its own expense, to indemnify, defend and hold harmless BigCommerce, its officers, directors, employees, affiliates, agents, contractors, and its attorneys from and against any claims, actions, liabilities, damages, costs or expenses, including attorneys’ fees and costs incurred in defending against third party claims based on or arising as a result of: (a) Participant’s breach of Section 5; (b) a BigCommerce Client’s dissatisfaction with Apps, goods or services provided by Participant, or as a result of any action or omission of Participant; © products liability claims related to Participant’s Apps, products or services, or (d) any action or omission of Participant constituting negligence, gross negligence, willful misconduct or fraud.
									Node:
									(type) c
									(layer)3
										Element:p
											7. LIMITATION OF LIABILITY. IN NO EVENT SHALL EITHER PARTY BE LIABLE TO THE OTHER PARTY FOR ANY LOST OR PROSPECTIVE PROFITS OR FOR ANY INDIRECT, SPECIAL, EXEMPLARY, PUNITIVE, CONSEQUENTIAL OR INCIDENTAL DAMAGES, WHETHER SUCH DAMAGES ARE ALLEGED IN TORT, CONTRACT OR ANY OTHER CAUSE OF ACTION. The foregoing limitations on liability shall not apply to Participant’s payment or indemnification obligations hereunder or a breach of Section 5.
									Node:
									(type) c
									(layer)3
										Element:p
											8. CONFIDENTIALITY.
									Node:
									(type) c
									(layer)3
										Element:p
											8.1. Each party agrees that it shall hold in confidence and shall not use or disclose (except as expressly allowed herein) any “Confidential Information” of the other party. For purposes of this Agreement, Confidential Information shall include all business, technical and financial information one party obtains from the other, specifically including (i) all information which is obtained from the other party and which is marked “confidential” or “proprietary”; (ii) the source code, object code, and algorithms, contained in the software and technology used by BigCommerce to provide the BigCommerce Products; and (iii) any lists of BigCommerce clients or data related thereto. However, neither party shall be obligated under this section with respect to information: (i) that is or has become generally available or known to the public through no fault of the recipient; (ii) that is developed independently by the recipient; (iii) that was rightfully received by the recipient without obligation of confidentiality from a third party; (iv) that was in the recipient’s possession prior to its disclosure by the other party; or (v) whose disclosure is required by law, provided that the recipient gives the disclosing party prompt notice of the request for disclosure, gives the disclosing party the opportunity to obtain a protective order or other remedy, and discloses only that portion of the confidential information which it is legally compelled to disclose. Neither party may disclose the terms of this Agreement to any third party other than its financial and legal advisors without the other party’s prior written consent.
									Node:
									(type) c
									(layer)3
										Element:p
											8.2. Neither party may create, publish or distribute any items that reference the other party without first obtaining the other party’s written consent, which consent may be granted or withheld in such other party’s sole and absolute discretion.
									Node:
									(type) c
									(layer)3
										Element:p
											9.1. BigCommerce will provide Participant with a method to contact BigCommerce for support and questions relating to the BigCommerce Products and other matters relating to this Agreement. Participants may also enter a support ticket for BigCommerce support help via their Professional Application Developer Store Account.
									Node:
									(type) c
									(layer)3
										Element:p
											9.2. Participant will provide competent and timely support for all Apps and will provide assistance to BigCommerce and BigCommerce Clients to promptly resolve any identified bugs or other issues relating to the Apps. Participant consents and agrees to BigCommerce publicly posting Participant’s support contact information to BigCommerce Clients, and Participant must provide written notice to BigCommerce at least ten days prior to any change in such support contact information.
									Node:
									(type) c
									(layer)3
										Element:p
											10. NON-SOLICITATION. Both parties agree not to solicit employees of the other party during the term of this Agreement and for 12 months after the effective date of the termination of this Agreement except pursuant to a general solicitation through the media or online.
									Node:
									(type) c
									(layer)3
										Element:p
											11. MISCELLANEOUS.
									Node:
									(type) c
									(layer)3
										Element:p
											11.1. Notices. All notices under this Agreement shall be in writing, and shall be deemed given when personally delivered, when sent by confirmed fax, when sent by confirmed e-mail, or three days after being sent by overnight courier, prepaid certified or registered U.S. mail to the address of the party set forth above, or such other address as such party last provided to the other by written notice.
									Node:
									(type) c
									(layer)3
										Element:p
											11.2. Status. For all purposes of this Agreement, each party shall be and act as an independent contractor and not as partner, joint venturer, or agent of the other and shall not bind nor attempt to bind the other to any contract.
									Node:
									(type) c
									(layer)3
										Element:p
											11.3. Assignment. Participant shall not have any right or ability to assign, transfer, or sublicense (whether by merger, operation of law or otherwise) any obligations or benefit under this Agreement without the written consent of BigCommerce (and any such attempt shall be void).
									Node:
									(type) c
									(layer)3
										Element:p
											11.4. Waiver. The failure of either party to enforce its rights under this Agreement at any time for any period shall not be construed as a waiver of such rights.
									Node:
									(type) c
									(layer)3
										Element:p
											11.5. Entire Agreement. This Agreement supersedes all proposals, oral or written, any letters of intent, all negotiations, conversations, or discussions between or among parties relating to the subject matter of this Agreement and all past dealing or industry custom. No changes, modifications, or waivers are to be made to this Agreement unless evidenced in writing and signed for and on behalf of both parties.
									Node:
									(type) c
									(layer)3
										Element:p
											11.6. Severability. In the event that any provision of this Agreement shall be determined to be illegal or unenforceable, that provision will be limited or eliminated to the minimum extent necessary so that this Agreement shall otherwise remain in full force and effect and enforceable.
									Node:
									(type) c
									(layer)3
										Element:p
											11.7. Governing Law. This Agreement shall be governed by and construed in accordance with the laws of the State of Texas, without regard to conflicts of law provisions thereof. Each party acknowledges that any breach of the provisions of this Agreement may cause the other party immediate and irreparable harm for which there are no adequate remedies at law and will entitle such party to seek immediate injunctive relief, in addition to any other remedies which may be available. Any litigation pertaining to the interpretation or enforcement of this Agreement shall be filed in and heard by the Federal and State courts located in Travis County, Texas.
			Node:
			(type) h1
			(layer)1
				Element:h1
				Element:span
					Building Apps with Basic Auth
			Node:
			(type) c
			(layer)1
				Element:p
					Basic-Auth (or “Private”) apps require the manual creation of an API token for each store. They are most useful for custom integrations for a single BigCommerce store. They generally use HTTP Basic Authentication (with the exception of
				Element:a
					Draft apps
					), and communicate directly with the store’s API endpoints.
			Node:
			(type) c
			(layer)1
				Element:aside
				Element:span
					Limited Support for Basic Auth
				Element:br
				Element:br
					BigCommerce is gradually deprecating Basic Authentication. Apps must use
				Element:a
					OAuth
					to access our v3 API. Even within the v2 API, apps relying on Basic Authentication cannot access some features. (For example, the Webhooks resource requires OAuth.) Also, apps intended for sale on the BigCommerce App Marketplace must use OAuth.
			Node:
			(type) c
			(layer)1
				Element:h2
				Element:span
					Obtaining Basic-Auth API Tokens
			Node:
			(type) c
			(layer)1
				Element:p
					To obtain tokens to connect your app to a BigCommerce store using Basic Auth, please see
				Element:a
					Creating Basic Auth Credentials
					.
			Node:
			(type) c
			(layer)1
				Element:h2
				Element:span
					Making Basic-Auth Requests
			Node:
			(type) c
			(layer)1
				Element:p
					To allow an app to connect to a store using Basic Authentication, the store owner must manually generate an API key and provide this to the app developer along with a base path and user name.
			Node:
			(type) c
			(layer)1
				Element:p
					To connect to a store using Basic Authentication, an app must:
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:p
					Include the user name and API key in the
				Element:code
					Authorization
					field of each HTTP request header, using the following syntax:
				Element:code
					Basic <username:API_key>
					, where
				Element:code
					<username:API_key>
					is base64-encoded. Here is a specific example:
				Element:code
					Authorization: Basic YWRtaW46ZTBhMDJiMDM5NzczNWI4NzNlZGQ5NWE1ZmQ1Y2I5YmI=
				Element:li
				Element:p
					Use the base path provided by the store owner.
				Element:li
				Element:p
					Use TLS encryption.
			Node:
			(type) c
			(layer)1
				Element:p
					If the user name and/or API token are invalid or missing, the app will get a
				Element:code
					401 Unauthorized
					response.
			Node:
			(type) c
			(layer)1
				Element:h2
				Element:span
					Rate Limits – Basic Auth
			Node:
			(type) c
			(layer)1
				Element:p
					Requests from apps using Basic Authentication to the Stores API are limited to 20,000 per hour, with a rolling window that updates every minute.
			Node:
			(type) c
			(layer)1
				Element:p
					These limits help to manage load on our servers, ensuring that high API request volumes don’t impact on overall store performance. They also help to protect stores from deliberate or accidental denial of service as a result of the API being flooded with requests.
			Node:
			(type) c
			(layer)1
				Element:p
					It is important for API client applications to be aware of these limits and handle them appropriately.
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					HTTP Headers and Response Codes
			Node:
			(type) c
			(layer)1
				Element:p
					Every response from the Stores API has an
				Element:code
					X-BC-ApiLimit-Remaining
					header, which provides information about how many requests are remaining in your client’s quota. This limit is based on total requests across the entire API.
			Node:
			(type) c
			(layer)1
				Element:p
					For example, the following response header signals that your client can make up to 900 additional requests within the current window:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					X-BC-ApiLimit-Remaining: 900
			Node:
			(type) c
			(layer)1
				Element:p
					When the limit remaining drops to zero, additional requests result in Bandwidth Limit Exceeded responses with the
				Element:code
					509
					status code:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					HTTP/1.1 509 Date: Wed, 04 Dec 2013 10:36:32 GMT Content-Type: application/json X-BC-ApiLimit-Remaining: 0 [ { "status": 509, "message": "The requests-per-hour limit has been reached." } ]
			Node:
			(type) c
			(layer)1
				Element:p
					If your client is rate limited, you won’t be able to make further requests until your quota resets.
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Working with Rate Limits
			Node:
			(type) c
			(layer)1
				Element:p
					Applications that make a large volume of parallel requests or frequently poll resources to detect changes are particularly susceptible to being limited.
			Node:
			(type) c
			(layer)1
				Element:p
					We recommend spreading API requests across the full one hour rolling window using the rate limit information returned to you from API responses, and minimizing the number of simultaneous API requests per store.
			Node:
			(type) c
			(layer)1
				Element:p
					If you’re writing a high volume application, the following strategies will help you get the most out of the API.
			Node:
			(type) c
			(layer)1
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:span
														Caching
												Node:
												(type) c
												(layer)4
													Element:p
														Cache everything and refer to local information in your app where possible, rather than making repetitive API calls.
			Node:
			(type) c
			(layer)1
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:span
														Throttling
												Node:
												(type) c
												(layer)4
													Element:p
														You can limit the rate at which you send requests to the API by using a queue to keep track of outgoing calls, and throttling back calls that are going faster than your predefined limit.
												Node:
												(type) c
												(layer)4
													Element:p
														For example, if you wanted to limit your outgoing API usage to four calls per second, you could use the following pattern:
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														Send first API call and record the timestamp
													Element:li
														Send second, third, and fourth API calls
													Element:li
														Check the timestamp before sending the fifth call
													Element:li
														If less than a second has passed, wait until the second has elapsed
													Element:li
														Send the next request
			Node:
			(type) c
			(layer)1
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:span
														Pause and Resume
												Node:
												(type) c
												(layer)4
													Element:p
														Simple applications running as background tasks can use the standard
													Element:code
														sleep
														function in their host environment to pause between outgoing requests.
												Node:
												(type) c
												(layer)4
													Element:h2
													Element:span
														Migrating to OAuth
												Node:
												(type) c
												(layer)4
													Element:p
														Apps in the App Store that use Basic Authentication are now deprecated, and will eventually be sunsetted. We will contact you directly to let you know the details and the timeline of this transition. This page discusses how to migrate your public app from Basic Authentication to OAuth.
												Node:
												(type) c
												(layer)4
													Element:aside
													Element:span
														Private Apps Exempted
													Element:br
													Element:br
														Private apps
													Element:em
														not
														in the App Store can continue to use Basic Authentication, and are not subject to a sunset. We do not currently provide a means of keeping OAuth apps private, other than creating them as Draft apps for your stores only.
												Node:
												(type) c
												(layer)4
													Element:p
														OAuth allows you to authenticate and access the Stores API on behalf of any merchant who authorizes your app. Merchants no longer have to bounce between multiple browser tabs or cut and paste API keys to install apps.
												Node:
												(type) c
												(layer)4
													Element:p
														Other benefits of updating include:
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
													Element:p
														Improved
													Element:a
														Rate Limits
														. For apps that access the API using OAuth, we’re able to offer quota-based limits and the possibility to increase the overall volume of requests for stores on higher plans.
													Element:li
													Element:p
														Ability to set and receive
													Element:a
														webhook
														callbacks.
													Element:li
													Element:p
														Privileged access to new capabilities, such as multi-user support and streamlined permissions updates.
												Node:
												(type) c
												(layer)4
													Element:h3
													Element:span
														How to Migrate
												Node:
												(type) c
												(layer)4
													Element:p
														To update your public Basic Authentication app to an OAuth app, you will need to make the following changes:
												Node:
												(type) c
												(layer)4
													Element:ol
													Element:li
														Get a
													Element:strong
														Client ID
														and a
													Element:strong
														Client Secret
														by
													Element:a
														registering your app
														.
													Element:li
														Get a permanent OAuth token as discussed in
													Element:a
														App Installation
														.
													Element:li
														Update your app so that it can process the
													Element:a
														signed payloads
														that BigCommerce sends when a merchant loads your app.
													Element:li
													Element:a
														Change your base paths
														.
													Element:li
														Update your app to observe the
													Element:a
														OAuth rate limits
														.
													Element:li
														Prepare your app’s UI to run within the BigCommerce iframe, once installed.
												Node:
												(type) c
												(layer)4
													Element:h3
													Element:span
														Change Your Base Paths
												Node:
												(type) c
												(layer)4
													Element:p
														Apps using Basic Authentication used a path that had the store’s hash as part of the domain. Store owners provide the store hash to the Basic Authentication app using a manual copy and paste procedure.
												Node:
												(type) c
												(layer)4
													Element:p
														Apps using OAuth place the store’s hash inside a context path. OAuth apps receive the store’s hash during the
													Element:a
														app installation sequence
														.
												Node:
												(type) c
												(layer)4
													Element:p
														The following table provides a quick comparison of the syntax and example paths.
												Node:
												(type) c
												(layer)4
													Element:table
													Element:thead
													Element:tr
													Element:th
														Basic Auth
													Element:th
														OAuth
													Element:tbody
													Element:tr
													Element:td
													Element:strong
														SYNTAX
													Element:td
														https://store-{
													Element:em
														store_hash
														}.mybigcommerce.com/api
													Element:tr
													Element:td
													Element:strong
														EXAMPLE
													Element:td
														https://store-g5cd38.mybigcommerce.com/api/v2/time
												Node:
												(type) c
												(layer)4
													Element:h3
													Element:span
														Rate Limiting after OAuth Migration
												Node:
												(type) c
												(layer)4
													Element:p
														Rate limiting affects only high-volume applications, but there are several changes that all consumers of the API should be aware of:
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
													Element:p
													Element:strong
														509 status codes are no longer returned
														: We’re now returning a
													Element:code
														429
														status code to represent “Too Many Requests”. This is consistent with
													Element:a
														RFC 6585
														.
													Element:li
													Element:p
													Element:strong
														Time to wait before retries
														: The old rate limiting scheme used a fixed hourly limit, regardless of who was accessing the API and how many requests were made per app or per user. This value was returned in the
													Element:code
														X-BC-ApiLimit-Remaining
														header. The
													Element:code
														X-BC-ApiLimit-Remaining
														header is not sent to OAuth apps. When an OAuth client is rate limited, the header
													Element:code
														X-Retry-After
														signals the number of seconds that a client should wait before retrying the request.
													Element:li
													Element:p
													Element:strong
														More information
														: Further information can be found on the
													Element:a
														OAuth rate limits page
														and the
													Element:a
														Response Headers page
														.
			Node:
			(type) h1
			(layer)1
				Element:h1
				Element:span
				Element:a
					Building Storefront Apps
			Node:
			(type) c
			(layer)1
				Element:p
					Storefront apps interact directly with the storefront. They use JWT (JSON Web Token) authentication, rather than OAuth or Basic Auth.
			Node:
			(type) c
			(layer)1
				Element:h2
				Element:span
					Customer Login API
			Node:
			(type) c
			(layer)1
				Element:p
					The Customer Login API enables single sign-on (SSO). It allows your apps to generate a token to programmatically log in a storefront customer, by using the login entry point at
				Element:code
					/login/token/{token}
					. Here,
				Element:code
					{token}
					must be a JSON Web Token (JWT) containing the parameters for the customer login request in its payload, and must be signed by your
				Element:a
					OAuth application
					’s
				Element:a
					client secret
					.
			Node:
			(type) c
			(layer)1
				Element:p
					For a full overview of the JWT standard, please see
				Element:a
					JWT.IO
					, where you will find links to client libraries (in many languages) that facilitate the generation and verification of JWT tokens. BigCommerce also supplies helper methods for generating login tokens in our API
				Element:a
					Client Libraries
					.
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Customer Login Token
			Node:
			(type) c
			(layer)1
				Element:p
					A valid JWT token is a string composed of three parts, separated by periods (“.”). Please refer to
				Element:a
					JWT.IO
					and
				Element:a
					RFC 7519
					for more details on the format.
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Example URL
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					https://storedomain.com/login/token/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9 .eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9 .TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"typ"
				Element:span
					:
				Element:span
				Element:span
					"JWT"
				Element:span
					,
				Element:span
				Element:span
					"alg"
				Element:span
					:
				Element:span
				Element:span
					"HS256"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Payload
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"iss"
				Element:span
					:
				Element:span
				Element:span
					"<application_client_id>"
				Element:span
					,
				Element:span
				Element:span
					"iat"
				Element:span
					:
				Element:span
				Element:span
					"<issued_at>"
				Element:span
					,
				Element:span
				Element:span
					"jti"
				Element:span
					:
				Element:span
				Element:span
					"<unique_string>"
				Element:span
					,
				Element:span
				Element:span
					"operation"
				Element:span
					:
				Element:span
				Element:span
					"customer_login"
				Element:span
					,
				Element:span
				Element:span
					"store_hash"
				Element:span
					:
				Element:span
				Element:span
					"<store_hash>"
				Element:span
					,
				Element:span
				Element:span
					"customer_id"
				Element:span
					:
				Element:span
				Element:span
					<customer_id>
				Element:span
					,
				Element:span
				Element:span
					"redirect_to"
				Element:span
					:
				Element:span
				Element:span
					"<relative_path (optional)>"
				Element:span
					,
				Element:span
				Element:span
					"request_ip"
				Element:span
					:
				Element:span
				Element:span
					"<ipv4_address (optional)>"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Fields
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Field Name
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					iss
				Element:td
					string
				Element:td
					Indicates the token’s issuer. This is your application’s client ID, which is obtained during application registration in Developer Portal.
				Element:tr
				Element:td
					iat
				Element:td
					integer
				Element:td
					Time when the token was generated. This is a numeric value indicating the number of seconds since the
				Element:a
					Unix epoch
					.
				Element:tr
				Element:td
					jti
				Element:td
					string
				Element:td
					Request ID string that must be unique across all requests made by your app. A UUID or other random string would be an appropriate value.
				Element:tr
				Element:td
					operation
				Element:td
					enum
				Element:td
					Must contain the string “customer_login”.
				Element:tr
				Element:td
					store_hash
				Element:td
					string
				Element:td
					Store hash identifying the store you are logging into.
				Element:tr
				Element:td
					customer_id
				Element:td
					integer
				Element:td
					ID of the customer you are logging in, as obtained through the Customer API.
				Element:tr
				Element:td
					redirect_to
				Element:td
					string
				Element:td
					Optional field containing a relative path for the shopper’s destination after login. Will default to
				Element:code
					/account.php
					.
				Element:tr
				Element:td
					request_ip
				Element:td
					string
				Element:td
					Optional field containing the expected IP address for the request.
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Signature
			Node:
			(type) c
			(layer)1
				Element:p
					The headers and payload must be signed using HS256 (HMAC-SHA256) and the application’s client secret.
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Sample Code
			Node:
			(type) c
			(layer)1
				Element:p
					Code to generate a valid JWT token for a storefront login request is provided in our API
				Element:a
					Client Libraries
					. (The headings below are linked to the live code, which might have been updated since publication:)
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:a
				Element:span
					PHP Sample
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					public
				Element:span
					static
				Element:span
					function
				Element:span
					getCustomerLoginToken
				Element:span
					(
				Element:span
					$id
				Element:span
					,
				Element:span
					$redirectUrl
				Element:span
					=
				Element:span
					''
				Element:span
					,
				Element:span
					$requestIp
				Element:span
					=
				Element:span
					''
				Element:span
					)
				Element:span
					{
				Element:span
					if
				Element:span
					(
				Element:span
					empty
				Element:span
					(
				Element:span
					self
				Element:span
					::
				Element:span
					$client_secret
				Element:span
					))
				Element:span
					{
				Element:span
					throw
				Element:span
					new
				Element:span
					Exception
				Element:span
					(
				Element:span
					'Cannot sign customer login tokens without a client secret'
				Element:span
					);
				Element:span
					}
				Element:span
					$payload
				Element:span
					=
				Element:span
					array
				Element:span
					(
				Element:span
					'iss'
				Element:span
					=>
				Element:span
					self
				Element:span
					::
				Element:span
					$client_id
				Element:span
					,
				Element:span
					'iat'
				Element:span
					=>
				Element:span
					time
				Element:span
					(),
				Element:span
					'jti'
				Element:span
					=>
				Element:span
					bin2hex
				Element:span
					(
				Element:span
					random_bytes
				Element:span
					(
				Element:span
					32
				Element:span
					)),
				Element:span
					'operation'
				Element:span
					=>
				Element:span
					'customer_login'
				Element:span
					,
				Element:span
					'store_hash'
				Element:span
					=>
				Element:span
					self
				Element:span
					::
				Element:span
					$store_hash
				Element:span
					,
				Element:span
					'customer_id'
				Element:span
					=>
				Element:span
					$id
				Element:span
					);
				Element:span
					if
				Element:span
					(
				Element:span
					!
				Element:span
					empty
				Element:span
					(
				Element:span
					$redirectUrl
				Element:span
					))
				Element:span
					{
				Element:span
					$payload
				Element:span
					[
				Element:span
					'redirect_to'
				Element:span
					]
				Element:span
					=
				Element:span
					$redirectUrl
				Element:span
					;
				Element:span
					}
				Element:span
					if
				Element:span
					(
				Element:span
					!
				Element:span
					empty
				Element:span
					(
				Element:span
					$requestIp
				Element:span
					))
				Element:span
					{
				Element:span
					$payload
				Element:span
					[
				Element:span
					'request_ip'
				Element:span
					]
				Element:span
					=
				Element:span
					$requestIp
				Element:span
					;
				Element:span
					}
				Element:span
					return
				Element:span
					JWT
				Element:span
					::
				Element:span
					encode
				Element:span
					(
				Element:span
					$payload
				Element:span
					,
				Element:span
					self
				Element:span
					::
				Element:span
					$client_secret
				Element:span
					,
				Element:span
					'HS256'
				Element:span
					);
				Element:span
					}
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
				Element:a
					Python Sample
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
					os
				Element:span
					import
				Element:span
					time
				Element:span
					import
				Element:span
					uuid
				Element:span
					import
				Element:span
					jwt
				Element:span
					class
				Element:span
					CustomerLoginTokens
				Element:span
					(
				Element:span
					object
				Element:span
					):
				Element:span
					@classmethod
				Element:span
					def
				Element:span
					create
				Element:span
					(
				Element:span
					cls
				Element:span
					,
				Element:span
					client
				Element:span
					,
				Element:span
					id
				Element:span
					,
				Element:span
					redirect_url
				Element:span
					=
				Element:span
					None
				Element:span
					,
				Element:span
					request_ip
				Element:span
					=
				Element:span
					None
				Element:span
					):
				Element:span
					# Get the client_secret needed to sign tokens from the environment
				Element:span
					# Intended to play nice with the Python Hello World sample app
				Element:span
					# https://github.com/bigcommerce/hello-world-app-python-flask
				Element:span
					client_secret
				Element:span
					=
				Element:span
					os
				Element:span
					.
				Element:span
					getenv
				Element:span
					(
				Element:span
					'APP_CLIENT_SECRET'
				Element:span
					)
				Element:span
					if
				Element:span
					not
				Element:span
					client_secret
				Element:span
					:
				Element:span
					raise
				Element:span
					AttributeError
				Element:span
					(
				Element:span
					'No OAuth client secret specified in the environment, '
				Element:span
					'please specify an APP_CLIENT_SECRET'
				Element:span
					)
				Element:span
					try
				Element:span
					:
				Element:span
					client_id
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					connection
				Element:span
					.
				Element:span
					client_id
				Element:span
					store_hash
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					connection
				Element:span
					.
				Element:span
					store_hash
				Element:span
					except
				Element:span
					AttributeError
				Element:span
					:
				Element:span
					raise
				Element:span
					AttributeError
				Element:span
					(
				Element:span
					'Store hash or client ID not found in the connection - '
				Element:span
					'make sure an OAuth API connection is configured. Basic auth is not supported.'
				Element:span
					)
				Element:span
					payload
				Element:span
					=
				Element:span
					dict
				Element:span
					(
				Element:span
					iss
				Element:span
					=
				Element:span
					client_id
				Element:span
					,
				Element:span
					iat
				Element:span
					=
				Element:span
					int
				Element:span
					(
				Element:span
					time
				Element:span
					.
				Element:span
					time
				Element:span
					()),
				Element:span
					jti
				Element:span
					=
				Element:span
					uuid
				Element:span
					.
				Element:span
					uuid4
				Element:span
					()
				Element:span
					.
				Element:span
					hex
				Element:span
					,
				Element:span
					operation
				Element:span
					=
				Element:span
					'customer_login'
				Element:span
					,
				Element:span
					store_hash
				Element:span
					=
				Element:span
					store_hash
				Element:span
					,
				Element:span
					customer_id
				Element:span
					=
				Element:span
					id
				Element:span
					)
				Element:span
					if
				Element:span
					redirect_url
				Element:span
					:
				Element:span
					payload
				Element:span
					[
				Element:span
					'redirect_url'
				Element:span
					]
				Element:span
					=
				Element:span
					redirect_url
				Element:span
					if
				Element:span
					request_ip
				Element:span
					:
				Element:span
					payload
				Element:span
					[
				Element:span
					'request_ip'
				Element:span
					]
				Element:span
					=
				Element:span
					request_ip
				Element:span
					token
				Element:span
					=
				Element:span
					jwt
				Element:span
					.
				Element:span
					encode
				Element:span
					(
				Element:span
					payload
				Element:span
					,
				Element:span
					client_secret
				Element:span
					,
				Element:span
					algorithm
				Element:span
					=
				Element:span
					'HS256'
				Element:span
					)
				Element:span
					return
				Element:span
					token
				Element:span
					.
				Element:span
					decode
				Element:span
					(
				Element:span
					'utf-8'
				Element:span
					)
				Element:span
					@classmethod
				Element:span
					def
				Element:span
					create_url
				Element:span
					(
				Element:span
					cls
				Element:span
					,
				Element:span
					client
				Element:span
					,
				Element:span
					id
				Element:span
					,
				Element:span
					redirect_url
				Element:span
					=
				Element:span
					None
				Element:span
					,
				Element:span
					request_ip
				Element:span
					=
				Element:span
					None
				Element:span
					):
				Element:span
					secure_url
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					Store
				Element:span
					.
				Element:span
					all
				Element:span
					()[
				Element:span
					'secure_url'
				Element:span
					]
				Element:span
					login_token
				Element:span
					=
				Element:span
					cls
				Element:span
					.
				Element:span
					create
				Element:span
					(
				Element:span
					client
				Element:span
					,
				Element:span
					id
				Element:span
					,
				Element:span
					redirect_url
				Element:span
					,
				Element:span
					request_ip
				Element:span
					)
				Element:span
					return
				Element:span
					'
				Element:span
					%
				Element:span
					s/login/token/
				Element:span
					%
				Element:span
					s'
				Element:span
					%
				Element:span
					(
				Element:span
					secure_url
				Element:span
					,
				Element:span
					login_token
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
				Element:a
					Ruby Sample
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'bigcommerce'
				Element:span
					Bigcommerce
				Element:span
					.
				Element:span
					configure
				Element:span
					do
				Element:span
					|
				Element:span
					config
				Element:span
					|
				Element:span
					config
				Element:span
					.
				Element:span
					store_hash
				Element:span
					=
				Element:span
					ENV
				Element:span
					[
				Element:span
					'BC_STORE_HASH'
				Element:span
					]
				Element:span
					config
				Element:span
					.
				Element:span
					client_id
				Element:span
					=
				Element:span
					ENV
				Element:span
					[
				Element:span
					'BC_CLIENT_ID'
				Element:span
					]
				Element:span
					config
				Element:span
					.
				Element:span
					client_secret
				Element:span
					=
				Element:span
					ENV
				Element:span
					[
				Element:span
					'BC_CLIENT_SECRET'
				Element:span
					]
				Element:span
					config
				Element:span
					.
				Element:span
					access_token
				Element:span
					=
				Element:span
					ENV
				Element:span
					[
				Element:span
					'BC_ACCESS_TOKEN'
				Element:span
					]
				Element:span
					end
				Element:span
					# Get a customer
				Element:span
					customer
				Element:span
					=
				Element:span
					Bigcommerce
				Element:span
					::
				Element:span
					Customer
				Element:span
					.
				Element:span
					all
				Element:span
					(
				Element:span
					page:
				Element:span
					1
				Element:span
					).
				Element:span
					first
				Element:span
					# Generate token login url
				Element:span
					puts
				Element:span
					customer
				Element:span
					.
				Element:span
					login_token
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					OAuth Scope
			Node:
			(type) c
			(layer)1
				Element:p
					In order to use this feature, your app must be installed in the store, and must have the
				Element:code
					store_v2_customers_login
					scope.
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Redirection
			Node:
			(type) c
			(layer)1
				Element:p
					For flexibility in navigation after login, we support an optional redirect parameter (
				Element:code
					redirect_to
					), which in turn supports relative URLs. If the parameter is not specified, the storefront customer will land on their My Account page at
				Element:code
					/account.php
					.
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Notes
			Node:
			(type) c
			(layer)1
				Element:p
					Tokens will be valid for a very short timeframe after they are first generated, so tokens should not be generated in advance. Instead, the application should generate the token and then immediately redirect the user’s browser to
				Element:code
					/login/token/{token}
					.
			Node:
			(type) c
			(layer)1
				Element:p
					Once a request has been made with a given
				Element:code
					jti
					, it cannot be made again. This parameter is used to prevent replay attacks by malicious actors intercepting the request or obtaining it after the fact.
			Node:
			(type) c
			(layer)1
				Element:p
					The
				Element:code
					request_ip
					field can be used as an additional security precaution, to prevent a malicious actor from intercepting the request and making it from another browser or system before you do. If you supply this value, BigCommerce will check the incoming request to ensure that it is being made from the stated IP address – and will otherwise fail the request. We strongly encourage setting this IP address value; but doing so is optional, to support those cases where this information is not available.
			Node:
			(type) c
			(layer)1
				Element:h2
				Element:span
					Identifying Logged-In Customers Securely
			Node:
			(type) c
			(layer)1
				Element:p
					If your application interacts dynamically with the BigCommerce storefront, and conveys information that is specific to a particular logged-in customer, you must confirm that customer’s identity within the insecure environment of the user’s browser.
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Current Customer API
			Node:
			(type) c
			(layer)1
				Element:p
					To address this need, BigCommerce provides a Current Customer endpoint, which your app can access via JavaScript on the storefront. This endpoint returns a
				Element:a
					JWT (JSON Web Token)
					with identifying details about the customer. The information is signed with your
				Element:a
					client secret
					.
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Example JavaScript
			Node:
			(type) c
			(layer)1
				Element:p
					Below is example JavaScript that will access this JWT. To test the JWT functionality, you can install this JavaScript on your sandbox BigCommerce store. Your application’s Client ID must be included in the request (to identify the requesting application):
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					<
				Element:span
					script
				Element:span
					type
				Element:span
					=
				Element:span
					"text/javascript"
				Element:span
					>
				Element:span
					function
				Element:span
					customerJWT
				Element:span
					()
				Element:span
					{
				Element:span
					var
				Element:span
					appClientId
				Element:span
					=
				Element:span
					"**BC_CLIENT_ID**"
				Element:span
					;
				Element:span
					// TODO: Fill this in with your app's client ID
				Element:span
					var
				Element:span
					xmlhttp
				Element:span
					=
				Element:span
					new
				Element:span
					XMLHttpRequest
				Element:span
					();
				Element:span
					xmlhttp
				Element:span
					.
				Element:span
					onreadystatechange
				Element:span
					=
				Element:span
					function
				Element:span
					()
				Element:span
					{
				Element:span
					if
				Element:span
					(
				Element:span
					xmlhttp
				Element:span
					.
				Element:span
					readyState
				Element:span
					==
				Element:span
					XMLHttpRequest
				Element:span
					.
				Element:span
					DONE
				Element:span
					)
				Element:span
					{
				Element:span
					if
				Element:span
					(
				Element:span
					xmlhttp
				Element:span
					.
				Element:span
					status
				Element:span
					==
				Element:span
					200
				Element:span
					)
				Element:span
					{
				Element:span
					alert
				Element:span
					(
				Element:span
					'Customer JWT:\n'
				Element:span
					+
				Element:span
					xmlhttp
				Element:span
					.
				Element:span
					responseText
				Element:span
					);
				Element:span
					}
				Element:span
					else
				Element:span
					if
				Element:span
					(
				Element:span
					xmlhttp
				Element:span
					.
				Element:span
					status
				Element:span
					==
				Element:span
					404
				Element:span
					)
				Element:span
					{
				Element:span
					alert
				Element:span
					(
				Element:span
					'Not logged in!'
				Element:span
					);
				Element:span
					}
				Element:span
					else
				Element:span
					{
				Element:span
					alert
				Element:span
					(
				Element:span
					'Something went wrong'
				Element:span
					);
				Element:span
					}
				Element:span
					}
				Element:span
					};
				Element:span
					xmlhttp
				Element:span
					.
				Element:span
					open
				Element:span
					(
				Element:span
					"GET"
				Element:span
					,
				Element:span
					"/customer/current.jwt?app_client_id="
				Element:span
					+
				Element:span
					appClientId
				Element:span
					,
				Element:span
					true
				Element:span
					);
				Element:span
					xmlhttp
				Element:span
					.
				Element:span
					send
				Element:span
					();
				Element:span
					}
				Element:span
					customerJWT
				Element:span
					();
				Element:span
					<
				Element:span
					/script
				Element:span
					>
			Node:
			(type) c
			(layer)1
				Element:p
					If you are logged into the storefront with a customer account, the above JavaScript should alert to the browser with a JWT token. If no customer is logged in, BigCommerce will return a 404 response, and you will see an error message.
			Node:
			(type) c
			(layer)1
				Element:p
					The JWT returned from this endpoint (example below) can be decoded on
				Element:a
					JWT.IO
					, or via any of
				Element:a
					these libraries
					.
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Example Output
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"customer"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					4927
				Element:span
					,
				Element:span
				Element:span
					"email"
				Element:span
					:
				Element:span
				Element:span
					"john.doe@gmail.com"
				Element:span
					,
				Element:span
				Element:span
					"group_id"
				Element:span
					:
				Element:span
				Element:span
					"6"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"iss"
				Element:span
					:
				Element:span
				Element:span
					"bc/apps"
				Element:span
					,
				Element:span
				Element:span
					"sub"
				Element:span
					:
				Element:span
				Element:span
					"abc123"
				Element:span
					,
				Element:span
				Element:span
					"iat"
				Element:span
					:
				Element:span
				Element:span
					1480831863
				Element:span
					,
				Element:span
				Element:span
					"exp"
				Element:span
					:
				Element:span
				Element:span
					1480832763
				Element:span
					,
				Element:span
				Element:span
					"version"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"aud"
				Element:span
					:
				Element:span
				Element:span
					"6sv16tfx3j5gsopm42ss5dd67g2srvq"
				Element:span
					,
				Element:span
				Element:span
					"application_id"
				Element:span
					:
				Element:span
				Element:span
					"6sv16tasdgr2b5hs5dd67g2srvq"
				Element:span
					,
				Element:span
				Element:span
					"store_hash"
				Element:span
					:
				Element:span
				Element:span
					"abc123"
				Element:span
					,
				Element:span
				Element:span
					"operation"
				Element:span
					:
				Element:span
				Element:span
					"current_customer"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					By design, your application should send this token to the application’s server, validate it against your client secret, and then use it as a trusted indication of the logged-in customer’s identity, before displaying confidential information to them.
			Node:
			(type) c
			(layer)1
				Element:p
					An end-to-end example, which displays a customer’s recently purchased products, is available in our
				Element:a
					Ruby
					and
				Element:a
					PHP
					sample apps. .
			Node:
			(type) c
			(layer)1
				Element:h2
				Element:span
					Add-to-Cart URLs
			Node:
			(type) c
			(layer)1
				Element:p
					Your apps can use a product’s or variant’s
				Element:a
					SKU
					to create custom product URLs in order to perform specific actions, like:
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					Pre-select a specific SKU’s product-option values when loading a product detail page.
				Element:li
					Add a specific SKU to the cart.
				Element:li
					Add a specific SKU to the cart and go directly to checkout.
				Element:li
					Add a specific SKU to the cart, go directly to checkout, and include a source parameter for analytics and conversion tracking.
			Node:
			(type) c
			(layer)1
				Element:aside
				Element:span
					Limitation: One Item per URL
				Element:br
				Element:br
					Each of the custom links described here can add only a single item (quantity 1) to the cart at a time.
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Select Specific SKU (Product/Variant) on Product Detail Page
			Node:
			(type) c
			(layer)1
				Element:p
					To link to a specific product variant, append
				Element:code
					?sku=INSERT-SKU-HERE
					to the product URL, as shown below. This will link to the product page, with the variant’s options already selected.
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Structure:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					site.com/sample-test-product-w-options/?sku=INSERT-SKU-HERE
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Example:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					myawesomestore.com/shirt/?sku=SHIRT-SM-RED
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Add Specific SKU to Cart
			Node:
			(type) c
			(layer)1
				Element:p
					To automatically add a product or variant to a shopper’s cart and take them directly to the cart page, append
				Element:br
				Element:code
					cart.php?action=add&sku=INSERT-SKU-HERE
					to the store’s domain.
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Structure:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					site.com/cart.php?action=add&sku=INSERT-SKU-HERE
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Example:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					myawesomestore.com/cart.php?action=add&sku=SHIRT-SM-RED
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Add Specific SKU to Cart and Go Directly to Checkout
			Node:
			(type) c
			(layer)1
				Element:p
					To automatically add a product or variant to a shopper’s cart and forward them directly to checkout, append
				Element:br
				Element:code
					cart.php?action=buy&sku=INSERT-SKU-HERE
					to the store’s domain.
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Structure:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					site.com/cart.php?action=buy&sku=INSERT-SKU-HERE
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Example:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					myawesomestore.com/cart.php?action=buy&sku=SHIRT-SM-RED
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Add Specific SKU, Go to Checkout, and Include Source
			Node:
			(type) c
			(layer)1
				Element:p
					To automatically add a product or variant to a shopper’s cart, forward them to checkout, and also include a source parameter for analytics/conversion tracking, append
				Element:code
					cart.php?action=buy&sku=INSERT-SKU-HERE&source=SOURCE-HERE
					to the store’s domain. (The source parameter can be any string.)
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Structure:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					site.com/cart.php?action=buy&sku=INSERT-SKU-HERE&source=SOURCE-HERE
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Example:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					myawesomestore.com/cart.php?action=buy&sku=SHIRT-SM-RED&source=JULY-EMAIL-NEWSLETTER
			Node:
			(type) h1
			(layer)1
				Element:h1
				Element:span
					API Environment
			Node:
			(type) c
			(layer)1
				Element:p
					The following sections describe the environment in which BigCommerce apps run.
			Node:
			(type) c
			(layer)1
				Element:h2
				Element:span
					Request Headers
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Header
				Element:th
					Allowed Values
				Element:th
					Description
				Element:th
					Example
				Element:tbody
				Element:tr
				Element:td
				Element:code
					Accept
				Element:td
				Element:code
					application/json
					(for .json requests)
				Element:code
					application/xml
					(for .xml requests)
				Element:td
					The MIME type for the format you want to receive a response in.
				Element:td
				Element:code
					application/xml
				Element:tr
				Element:td
				Element:code
					Authorization
				Element:td
				Element:code
					Basic
				Element:td
					The user credentials for accessing the API
				Element:td
				Element:code
					Basic YWRtaW46cGFzc3dvcmQ=
				Element:tr
				Element:td
				Element:code
					Content-Type
				Element:td
				Element:code
					application/json
					(for JSON requests)
				Element:code
					application/xml
					(for XML requests)
				Element:td
					The MIME type of the request body. Use to validate and parse the request to the API.
				Element:td
				Element:code
					application/json
				Element:tr
				Element:td
				Element:code
					User-Agent
				Element:td
					String
				Element:td
					While it is not required, we ask that you specify a user agent which identifies your integration/client with your requests.
				Element:td
				Element:tr
				Element:td
				Element:code
					X-Auth-Client
				Element:td
					String
				Element:td
					Client ID of the requesting app
				Element:td
				Element:tr
				Element:td
				Element:code
					X-Auth-Token
				Element:td
					String
				Element:td
					Access token authorizing the app to access resources on behalf of a user
				Element:td
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Deprecated Headers
			Node:
			(type) c
			(layer)1
				Element:p
					The following headers are deprecated and will eventually be removed from the API.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Header
				Element:th
					Description
				Element:th
					Use Instead
				Element:tbody
				Element:tr
				Element:td
				Element:code
					If-Modified-Since
				Element:td
					Uses an
				Element:a
					RFC 2822
					date. If supplied, then only resources modified since the specified date will be returned. If there are no modified objects, then a
				Element:code
					304 Not Modified
					response will be sent. Please refer to the individual resource pages for support for this header.
				Element:td
					Use
				Element:code
					min_date_modified
					and
				Element:code
					max_date_modified
					query parameters on resources that support them.
			Node:
			(type) c
			(layer)1
				Element:h2
				Element:span
					Response Headers
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Header
				Element:th
					Possible Values
				Element:th
					Description
				Element:th
					Example
				Element:tbody
				Element:tr
				Element:td
				Element:strong
					Date
				Element:td
					An
				Element:a
					RFC 2822
					date.
				Element:td
					The date the response was sent.
				Element:td
				Element:code
					Tue, 15 Nov 2011 12:45:26 GMT
				Element:tr
				Element:td
				Element:strong
					Last-Modified
				Element:td
					An
				Element:a
					RFC 2822
					date.
				Element:td
					The date the resource was last modified. Please refer to the individual resource pages for support for this header.
				Element:td
				Element:code
					Tue, 15 Nov 2011 12:45:26 GMT
				Element:tr
				Element:td
				Element:strong
					Content-Type
				Element:td
				Element:code
					application/json
					(for JSON requests)
				Element:code
					application/xml
					(for XML requests, or if no extension is supplied)
				Element:td
					The MIME type of the response, dependent on the extension of the endpoint that was requested.
				Element:td
				Element:code
					application/json
				Element:tr
				Element:td
				Element:strong
					Content-Location
				Element:td
					A URI.
				Element:td
					Sent if the request was redirected.
				Element:td
				Element:code
					/api/v2/orders/5.json
				Element:tr
				Element:td
				Element:strong
					WWW-Authenticate
				Element:td
				Element:code
					Basic
				Element:td
					Indicates the authentication scheme that should be used to access the API. Sent with a
				Element:code
					401 Unauthorized
					response if HTTP Basic Authentication credentials weren’t supplied.
				Element:td
				Element:code
					Basic
				Element:tr
				Element:td
				Element:strong
					Location
				Element:td
					A URI
				Element:td
					The URI of a newly created resource. Sent with a
				Element:code
					201 Created
					response.
				Element:td
				Element:code
					/api/v2/products/7
				Element:tr
				Element:td
				Element:strong
					X-Retry-After
				Element:td
					An integer
				Element:td
					Rate limited response, indicating the number of seconds before the quota refreshes. See the
				Element:a
					OAuth rate limits documentation
					for more information.
				Element:td
				Element:code
					15
				Element:tr
				Element:td
				Element:strong
					X-BC-ApiLimit-Remaining
				Element:td
					An integer
				Element:td
					The number of API requests remaining for the current period (rolling one hour). See the
				Element:a
					Basic Auth rate limits documentation
					for more information.
				Element:td
				Element:code
					987
				Element:tr
				Element:td
				Element:strong
					X-BC-Store-Version
				Element:td
					A version number
				Element:td
					The version of BigCommerce the store is running on. This header is available on versions 7.3.6+.
				Element:td
				Element:code
					7.3.6
			Node:
			(type) c
			(layer)1
				Element:h2
				Element:span
					Media Types
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Introduction to Media Types
			Node:
			(type) c
			(layer)1
				Element:p
					The BigCommerce API can accept requests, and respond, in either JSON or XML. You should encode requests using the UTF-8 character set. (Other character sets might have unpredictable results.)
			Node:
			(type) c
			(layer)1
				Element:aside
				Element:span
					Restricted XML Support
				Element:br
				Element:br
					The XML media type is deprecated. Our v2 webhooks support JSON only, and Stores API versions after v2 will support JSON only.
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Request Content Type
			Node:
			(type) c
			(layer)1
				Element:p
					When performing a request that contains a body (eg.
				Element:code
					POST
					or
				Element:code
					PUT
					), the type of content you are sending needs to be specified in the
				Element:code
					Content-Type
					header. The values for this header are specified in the data types below. For example, to send an XML body, the header would be:
				Element:code
					Content-Type: application/xml
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Response Content Type
			Node:
			(type) c
			(layer)1
				Element:p
					There are several ways in which you can specify the type of content you would like to receive. The first method is by specifying an
				Element:code
					Accept
					header, the second is by supplying an extension to the resource you are request. Extensions are useful for browser-based testing.
			Node:
			(type) c
			(layer)1
				Element:p
					The priority in which these methods are processed is outlined below:
			Node:
			(type) c
			(layer)1
				Element:ol
				Element:li
				Element:p
					Accept header high-priority types (eg.
				Element:code
					Accept: application/xml
					) extensions on the resource (e.g.:
				Element:code
					customers.xml
					).
				Element:li
				Element:p
					Accept header low priority types (priorities less than 1, e.g.:
				Element:code
					Accept: application/json;q=0.9
					).
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					JSON
			Node:
			(type) c
			(layer)1
				Element:p
					JSON has a content type of
				Element:code
					application/json
					.
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Request Structure
			Node:
			(type) c
			(layer)1
				Element:p
					The body of a JSON request is simply an object containing a set of key-value pairs. A simple representation of a product object is:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					5
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"iPod"
				Element:span
					,
				Element:span
				Element:span
					"description"
				Element:span
					:
				Element:span
				Element:span
					"A portable MP3 music player."
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response Structure
			Node:
			(type) c
			(layer)1
				Element:p
					Responses are structured similarly to requests. If a request returns a single object, then the response will contain a single object, containing the fields for that resource.
			Node:
			(type) c
			(layer)1
				Element:p
					The response will also contain links to any sub-resource – for example,
				Element:code
					images
					on the product below:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
					"[Sample Product] iPod Shuffle"
				Element:span
					,
				Element:span
				Element:span
					"sku"
				Element:span
					:
				Element:span
					"IPOD-SHUFFLE"
				Element:span
					,
				Element:span
				Element:span
					"description"
				Element:span
					:
				Element:span
					"The world’s smallest digital music player, ..."
				Element:span
					,
				Element:span
				Element:span
					"date created"
				Element:span
					:
				Element:span
					"Mon, 12 Jan 2009 10:22:39 +0000"
				Element:span
					,
				Element:span
				Element:span
					"categories"
				Element:span
					:[
				Element:span
				Element:span
					2
				Element:span
					,
				Element:span
				Element:span
					3
				Element:span
				Element:span
					],
				Element:span
				Element:span
					"date modified"
				Element:span
					:
				Element:span
					"Sun, 28 Aug 2011 23:08:56 +0000"
				Element:span
					,
				Element:span
				Element:span
					"custom url"
				Element:span
					:
				Element:span
					"\/products\/sample-product-ipod-shuffle.html"
				Element:span
					,
				Element:span
				Element:span
					"brand"
				Element:span
					:{
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
					"https:\/\/www.example.com\/api\/v2\/brands\/1.json"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
					"\/brands\/1"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"images"
				Element:span
					:{
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
					"https:\/\/www.example.com\/api\/v2\/products\/1\/images.json"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
					"\/products\/1\/images"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"discount rules"
				Element:span
					:{
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
					"https:\/\/www.example.com\/api\/v2\/products\/1\/discountrules.json"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
					"\/products\/1\/discountrules"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"configurable fields"
				Element:span
					:{
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
					"https:\/\/www.example.com\/api\/v2\/products\/1\/configurablefields.json"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
					"\/products\/1\/configurablefields"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"custom fields"
				Element:span
					:{
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
					"https:\/\/www.example.com\/api\/v2\/products\/1\/customfields.json"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
					"\/products\/1\/customfields"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"videos"
				Element:span
					:{
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
					"https:\/\/www.example.com\/api\/v2\/products\/1\/videos.json"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
					"\/products\/1\/videos"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"skus"
				Element:span
					:{
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
					"https:\/\/www.example.com\/api\/v2\/products\/1\/skus.json"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
					"\/products\/1\/skus"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"rules"
				Element:span
					:{
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
					"https:\/\/www.example.com\/api\/v2\/products\/1\/rules.json"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
					"\/products\/1\/rules"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"option_set"
				Element:span
					:{
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
					"https:\/\/www.example.com\/api\/v2\/optionsets\/15.json"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
					"\/optionsets\/15"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"options"
				Element:span
					:{
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
					"https:\/\/www.example.com\/api\/v2\/products\/1\/options.json"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
					"\/products\/1\/options"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"availability"
				Element:span
					:
				Element:span
					"available"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					If the request returns more than one result, then the response will consist of an array of objects for each result:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
					"[Sample Product] iPod Shuffle"
				Element:span
					,
				Element:span
				Element:span
					"sku"
				Element:span
					:
				Element:span
					"IPOD-SHUFFLE"
				Element:span
					,
				Element:span
				Element:span
					"description"
				Element:span
					:
				Element:span
					"The world’s smallest digital music player, ..."
				Element:span
					,
				Element:span
				Element:span
					"search_keywords"
				Element:span
					:
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"availability_description"
				Element:span
					:
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"is_price_hidden"
				Element:span
					:
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"price_hidden_label"
				Element:span
					:
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"categories"
				Element:span
					:[
				Element:span
				Element:span
					2
				Element:span
					,
				Element:span
				Element:span
					3
				Element:span
				Element:span
					],
				Element:span
				Element:span
					"date_modified"
				Element:span
					:
				Element:span
					"Sun, 28 Aug 2011 23:08:56 +0000"
				Element:span
					,
				Element:span
				Element:span
					"bin_picking_number"
				Element:span
					:
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"custom_url"
				Element:span
					:
				Element:span
					"\/products\/sample-product-ipod-shuffle.html"
				Element:span
					,
				Element:span
				Element:span
					"brand"
				Element:span
					:{
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
					"https:\/\/www.example.com\/api\/v2\/brands\/1.json"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
					"\/brands\/1"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"images"
				Element:span
					:{
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
					"https:\/\/www.example.com\/api\/v2\/products\/1\/images.json"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
					"\/products\/1\/images"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"discount_rules"
				Element:span
					:{
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
					"https:\/\/www.example.com\/api\/v2\/products\/1\/discountrules.json"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
					"\/products\/1\/discountrules"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"configurable_fields"
				Element:span
					:{
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
					"https:\/\/www.example.com\/api\/v2\/products\/1\/configurablefields.json"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
					"\/products\/1\/configurablefields"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"custom_fields"
				Element:span
					:{
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
					"https:\/\/www.example.com\/api\/v2\/products\/1\/customfields.json"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
					"\/products\/1\/customfields"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"videos"
				Element:span
					:{
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
					"https:\/\/www.example.com\/api\/v2\/products\/1\/videos.json"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
					"\/products\/1\/videos"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"skus"
				Element:span
					:{
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
					"https:\/\/www.example.com\/api\/v2\/products\/1\/skus.json"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
					"\/products\/1\/skus"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"rules"
				Element:span
					:{
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
					"https:\/\/www.example.com\/api\/v2\/products\/1\/rules.json"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
					"\/products\/1\/rules"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"option_set"
				Element:span
					:{
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
					"https:\/\/www.example.com\/api\/v2\/optionsets\/15.json"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
					"\/optionsets\/15"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"options"
				Element:span
					:{
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
					"https:\/\/www.example.com\/api\/v2\/products\/1\/options.json"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
					"\/products\/1\/options"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"availability"
				Element:span
					:
				Element:span
					"available"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
					2
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
					"[Sample Product] iPod Nano"
				Element:span
					,
				Element:span
				Element:span
					"sku"
				Element:span
					:
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"description"
				Element:span
					:
				Element:span
					"Color isn't the only brilliant new iPod Nano feature. ..."
				Element:span
					,
				Element:span
				Element:span
					"date_created"
				Element:span
					:
				Element:span
					"Mon, 12 Jan 2009 10:28:58 +0000"
				Element:span
					,
				Element:span
				Element:span
					"brand_id"
				Element:span
					:
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"view_count"
				Element:span
					:
				Element:span
					11
				Element:span
					,
				Element:span
				Element:span
					"page_title"
				Element:span
					:
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"meta_keywords"
				Element:span
					:
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"meta_description"
				Element:span
					:
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"layout"
				Element:span
					:
				Element:span
					"product.html"
				Element:span
					,
				Element:span
				Element:span
					"is_price_hidden"
				Element:span
					:
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"price_hidden_label"
				Element:span
					:
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"categories"
				Element:span
					:[
				Element:span
				Element:span
					3
				Element:span
				Element:span
					],
				Element:span
				Element:span
					"date_modified"
				Element:span
					:
				Element:span
					"Thu, 18 Aug 2011 05:42:15 +0000"
				Element:span
					,
				Element:span
				Element:span
					"bin_picking_number"
				Element:span
					:
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"custom_url"
				Element:span
					:
				Element:span
					"\/products\/sample-product-ipod-nano.html"
				Element:span
					,
				Element:span
				Element:span
					"brand"
				Element:span
					:{
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
					"https:\/\/www.example.com\/api\/v2\/brands\/1.json"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
					"\/brands\/1"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"images"
				Element:span
					:{
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
					"https:\/\/www.example.com\/api\/v2\/products\/2\/images.json"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
					"\/products\/2\/images"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"discount_rules"
				Element:span
					:{
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
					"https:\/\/www.example.com\/api\/v2\/products\/2\/discountrules.json"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
					"\/products\/2\/discountrules"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"configurable_fields"
				Element:span
					:{
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
					"https:\/\/www.example.com\/api\/v2\/products\/2\/configurablefields.json"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
					"\/products\/2\/configurablefields"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"custom_fields"
				Element:span
					:{
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
					"https:\/\/www.example.com\/api\/v2\/products\/2\/customfields.json"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
					"\/products\/2\/customfields"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"videos"
				Element:span
					:{
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
					"https:\/\/www.example.com\/api\/v2\/products\/2\/videos.json"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
					"\/products\/2\/videos"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"skus"
				Element:span
					:{
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
					"https:\/\/www.example.com\/api\/v2\/products\/2\/skus.json"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
					"\/products\/2\/skus"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"rules"
				Element:span
					:{
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
					"https:\/\/www.example.com\/api\/v2\/products\/2\/rules.json"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
					"\/products\/2\/rules"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"options"
				Element:span
					:{
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
					"https:\/\/www.example.com\/api\/v2\/products\/2\/options.json"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
					"\/products\/2\/options"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"availability"
				Element:span
					:
				Element:span
					"available"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					]
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					XML
			Node:
			(type) c
			(layer)1
				Element:p
					XML has a content type of
				Element:code
					application/xml
					. All XML transactions begin with the standard XML declaration:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					<?xml version="1.0" encoding="UTF-8"?>
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Request Structure
			Node:
			(type) c
			(layer)1
				Element:p
					The body of an XML request should first contain an element that is named according to the resource, in singular form, such as
				Element:code
					product
					for the
				Element:code
					products
					resource:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					<?xml version="1.0" encoding="UTF-8"?>
				Element:span
					<product>
				Element:span
					</product>
			Node:
			(type) c
			(layer)1
				Element:p
					The resource element should then contain a set of elements that match the fields described in that resource’s documentation:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					<?xml version="1.0" encoding="UTF-8"?>
				Element:span
					<product>
				Element:span
					<id>
					5
				Element:span
					</id>
				Element:span
					<name>
					iPod
				Element:span
					</name>
				Element:span
					<description>
					A portable MP3 music player.
				Element:span
					</description>
				Element:span
					</product>
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response Structure
			Node:
			(type) c
			(layer)1
				Element:p
					To receive an XML response, the request URI should include an .xml extension, as shown here:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					GET /customers/1.xml
			Node:
			(type) c
			(layer)1
				Element:p
					Here is a corresponding response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					<?xml version="1.0" encoding="UTF-8"?>
				Element:span
					<customer>
				Element:span
					<id>
					1
				Element:span
					</id>
				Element:span
					<company>
					BigCommerce
				Element:span
					<company>
				Element:span
					<first_name>
					Mister
				Element:span
					</first_name>
				Element:span
					<last_name>
					Big
				Element:span
					</last_name>
				Element:span
					<email>
					mister.big@bigcommerce.com
				Element:span
					</email>
				Element:span
					<phone></phone>
				Element:span
					<date_created>
					Tue, 16 Aug 2011 23:15:07 +0000
				Element:span
					</date_created>
				Element:span
					<date_modified>
					Tue, 16 Aug 2011 23:16:37 +0000
				Element:span
					</date_modified>
				Element:span
					<store_credit>
					0.0000
				Element:span
					</store_credit>
				Element:span
					<registration_ip_address>
					10.1.1.102
				Element:span
					</registration_ip_address>
				Element:span
					<customer_group_id>
					0
				Element:span
					</customer_group_id>
				Element:span
					<notes>
					NULL
				Element:span
					</notes>
				Element:span
					<addresses>
				Element:span
					<link
				Element:span
					rel=
				Element:span
					"resource"
				Element:span
					href=
				Element:span
					"https://www.example.com/api/v2/customers/1/addresses.xml"
				Element:span
					>
					/customers/1/addresses
				Element:span
					</link>
				Element:span
					</addresses>
				Element:span
					</customer>
			Node:
			(type) c
			(layer)1
				Element:p
					If the request returns more than one result, then the response will consist of an element named according to the resource, in plural form, which contains a set of objects for each result:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					<?xml version="1.0" encoding="UTF-8"?>
				Element:span
					<customers>
				Element:span
					<customer>
				Element:span
					<id>
					1
				Element:span
					</id>
				Element:span
					<company>
					BigCommerce
				Element:span
					</company>
				Element:span
					<first_name>
					Mister
				Element:span
					</first_name>
				Element:span
					<last_name>
					Big
				Element:span
					</last_name>
				Element:span
					<email>
					mister.big@bigcommerce.com
				Element:span
					</email>
				Element:span
					<phone></phone>
				Element:span
					<date_created>
					Tue, 16 Aug 2011 23:15:07 +0000
				Element:span
					</date_created>
				Element:span
					<date_modified>
					Tue, 16 Aug 2011 23:16:37 +0000
				Element:span
					</date_modified>
				Element:span
					<store_credit>
					0.0000
				Element:span
					</store_credit>
				Element:span
					<registration_ip_address>
					10.1.1.102
				Element:span
					</registration_ip_address>
				Element:span
					<customer_group_id>
					0
				Element:span
					</customer_group_id>
				Element:span
					<notes>
					NULL
				Element:span
					</notes>
				Element:span
					<addresses>
				Element:span
					<link
				Element:span
					rel=
				Element:span
					"resource"
				Element:span
					href=
				Element:span
					"https://www.example.com/api/v2/customers/1/addresses.xml"
				Element:span
					>
					/customers/1/addresses
				Element:span
					</link>
				Element:span
					</addresses>
				Element:span
					</customer>
				Element:span
					</customers>
			Node:
			(type) c
			(layer)1
				Element:h2
				Element:span
					API Status Codes
			Node:
			(type) c
			(layer)1
				Element:p
					The API responds to requests with different HTTP status codes depending on the result from the request. Error responses might also include an error message in the body to assist the client in resolving the problem.
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					2xx Success
			Node:
			(type) c
			(layer)1
				Element:p
					These codes are returned for requests that were understood and processed successfully.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Code
				Element:th
					Definition
				Element:th
					Purpose
				Element:tbody
				Element:tr
				Element:td
				Element:strong
					200
				Element:td
				Element:strong
					OK
				Element:td
					For successful
				Element:code
					GET
					and
				Element:code
					PUT
					requests.
				Element:tr
				Element:td
				Element:strong
					201
				Element:td
				Element:strong
					Created
				Element:td
					For a successful
				Element:code
					POST
					request.
				Element:tr
				Element:td
				Element:strong
					202
				Element:td
				Element:strong
					Accepted
				Element:td
					For a request that resulted in a scheduled task being created to perform the actual request.
				Element:tr
				Element:td
				Element:strong
					204
				Element:td
				Element:strong
					No Content
				Element:td
					For a successful request that produced no response (such as
				Element:code
					DELETE
					requests).
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					3xx Redirection
			Node:
			(type) c
			(layer)1
				Element:p
					These codes are returned for requests that have resulted in the client needing to take further action to complete the request.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Code
				Element:th
					Definition
				Element:th
					Purpose
				Element:tbody
				Element:tr
				Element:td
				Element:strong
					301
				Element:td
				Element:strong
					Moved Permanently
				Element:td
					When the API routes have changed (unlikely) or if the incoming request is not secure (http) then it will be redirect to the secure (https) version.
				Element:tr
				Element:td
				Element:strong
					302
				Element:td
				Element:strong
					Found
				Element:td
					When the resource was found at a different location. When a request to a deprecated version of the API is received, a
				Element:strong
					302 Found
					response will be issued to the current API version.
				Element:tr
				Element:td
				Element:strong
					304
				Element:td
				Element:strong
					Not Modified
				Element:td
					If an
				Element:strong
					If-Modified-Since
					header is sent in the request and the resource has not been modified since the specified date, then this response will be sent. See resource specific pages for support for the
				Element:strong
					If-Modified-Since
					header.
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					4xx Client Error
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Code
				Element:th
					Definition
				Element:th
					Purpose
				Element:tbody
				Element:tr
				Element:td
				Element:strong
					400
				Element:td
				Element:strong
					Bad Request
				Element:td
					Issued when a malformed request was sent. Examples are:
				Element:tr
				Element:td
				Element:td
				Element:td
					* Invalid syntax
				Element:tr
				Element:td
				Element:td
				Element:td
					* Missing required data
				Element:tr
				Element:td
				Element:td
				Element:td
					* Webhook requests missing
				Element:strong
					Content-Type
					in the HTTP header.
				Element:tr
				Element:td
				Element:td
				Element:td
				Element:tr
				Element:td
				Element:strong
					401
				Element:td
				Element:strong
					Unauthorized
				Element:td
					This response is sent when your client failed to provide credentials or its credentials were invalid.
				Element:tr
				Element:td
				Element:strong
					403
				Element:td
				Element:strong
					Forbidden
				Element:td
					Returned when permissions do not allow the operation or when the operation exceeds a limit.
				Element:tr
				Element:td
				Element:td
				Element:td
					* Check your app in
				Element:strong
					My Apps
					to review the OAuth scopes you requested, and whether they support the request that you made.
				Element:tr
				Element:td
				Element:td
				Element:td
					* Changes to the store owner’s account can cause this error, including a change to the email address. Roll back those changes to correct this issue.
				Element:tr
				Element:td
				Element:td
				Element:td
					* This error can also occur when your request exceeds a limit imposed on the resource in question. For example, a store cannot exceed 16,000 categories. For more information, see the documentation of the resource in question.
				Element:tr
				Element:td
				Element:td
				Element:td
				Element:tr
				Element:td
				Element:strong
					404
				Element:td
				Element:strong
					Not Found
				Element:td
					When a particular resource doesn’t exist or couldn’t be found.
				Element:tr
				Element:td
				Element:strong
					405
				Element:td
				Element:strong
					Method Not Allowed
				Element:td
					The resource was found, but doesn’t support the request method. Issued when either a specific method isn’t yet implemented on a resource, or the resource doesn’t support the method at all. For example, a
				Element:code
					PUT
					on
				Element:code
					/orders
					is invalid, but a
				Element:code
					PUT
					on
				Element:code
					/orders/{_id_}
					is valid.
				Element:tr
				Element:td
				Element:strong
					406
				Element:td
				Element:strong
					Not Acceptable
				Element:td
					When the client specifies a response content type in the
				Element:strong
					Accept
					header that is not supported.
				Element:tr
				Element:td
				Element:strong
					409
				Element:td
				Element:strong
					Conflict
				Element:td
					A change requested by the client is being rejected, due to a condition imposed by the server. The exact reasons for this response will vary from one resource to the next. An example might be attempting to delete a category whose deletion would cause products to be orphaned. Additional information about the conflict, and about how to resolve it, might be available in the response’s
				Element:code
					details
					section.
				Element:tr
				Element:td
				Element:strong
					413
				Element:td
				Element:strong
					Request Entity Too Large
				Element:td
					When the client requests too many objects. For example, the
				Element:code
					limit
					parameter exceeded the maximum.
				Element:tr
				Element:td
				Element:strong
					415
				Element:td
				Element:strong
					Unsupported Media Type
				Element:td
					Returned due to issues with the
				Element:strong
					Content-Type
					header. Examples are:
				Element:tr
				Element:td
				Element:td
				Element:td
					* The header specifies an unsupported content type.
				Element:tr
				Element:td
				Element:td
				Element:td
					* The header is missing (except with the webhooks resource, which returns a 400 in this case).
				Element:tr
				Element:td
				Element:td
				Element:td
				Element:tr
				Element:td
				Element:strong
					429
				Element:td
				Element:strong
					Too Many Requests
				Element:td
					When an OAuth client exceeds the rate limit for API requests to a store.
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					5xx Server Error
			Node:
			(type) c
			(layer)1
				Element:p
					These codes are returned for requests that could not be processed due to an internal error with the API or server.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Code
				Element:th
					Definition
				Element:th
					Purpose
				Element:tbody
				Element:tr
				Element:td
				Element:strong
					500
				Element:td
				Element:strong
					Internal Server Error
				Element:td
					When an error has occurred within the API.
				Element:tr
				Element:td
				Element:strong
					501
				Element:td
				Element:strong
					Not Implemented
				Element:td
					When a request method is sent that is not supported by the API (e.g.,
				Element:code
					TRACE
					,
				Element:code
					PATCH
					).
				Element:tr
				Element:td
				Element:strong
					503
				Element:td
				Element:strong
					Service Unavailable
				Element:td
					When the store is marked as “Down for Maintenance,” or the store is being upgraded to a new version.
				Element:tr
				Element:td
				Element:strong
					507
				Element:td
				Element:strong
					Insufficient Storage
				Element:td
					When the store has reached a limitation for the resource, according to their BigCommerce plan (e.g., 500-product limit).
				Element:tr
				Element:td
				Element:strong
					509
					(Deprecated)
				Element:td
				Element:strong
					Bandwidth Limit Exceeded
				Element:td
					Returned to apps using Basic Authentication that have exceeded their
				Element:a
					rate limits
					.
			Node:
			(type) c
			(layer)1
				Element:h2
				Element:span
					Data Types
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					int
			Node:
			(type) c
			(layer)1
				Element:p
					An integer number, with a maximum value of 2147483647. Negatives are disallowed, unless otherwise specified.
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					decimal(M, D)
			Node:
			(type) c
			(layer)1
				Element:p
					A decimal number of up to
				Element:code
					M
					digits in total, including
				Element:code
					D
					digits after the decimal point. Negatives are disallowed, unless otherwise specified.
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					string(M)
			Node:
			(type) c
			(layer)1
				Element:p
					A string of text up to
				Element:code
					M
					characters in length.
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					text
			Node:
			(type) c
			(layer)1
				Element:p
					A string of text, up to ~16,777,216 bytes in length.
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					boolean
			Node:
			(type) c
			(layer)1
				Element:p
					A boolean value:
				Element:code
					true
					or
				Element:code
					false
					. In JSON, it will be represented using the native
				Element:code
					boolean
					type. In XML, it will be the literal strings
				Element:code
					true
					or
				Element:code
					false
					.
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					date
			Node:
			(type) c
			(layer)1
				Element:p
					An
				Element:a
					RFC 2822
					date. All dates output by BigCommerce API responses are in GMT (+0000) time. However, you can use any time zone on inputs, as the offset information will be converted accordingly.
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					datetime
			Node:
			(type) c
			(layer)1
				Element:p
					An
				Element:a
					ISO 8601
				Element:code
					datetime
					value. This is currently supported only as an input parameter on filters. Date values in responses remain in the
				Element:a
					RFC 2822
					format.
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					enum
			Node:
			(type) c
			(layer)1
				Element:p
					An enumeration of string values. The only allowed values are those specified in the field’s description.
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					object
			Node:
			(type) c
			(layer)1
				Element:p
					An object with its own set of fields.
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					country code
			Node:
			(type) c
			(layer)1
				Element:p
					A two-character,
				Element:a
					ISO 3166-1
				Element:a
					alpha-2
					country code.
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					email address
			Node:
			(type) c
			(layer)1
				Element:p
					A valid email address. 250 characters maximum.
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					variable
			Node:
			(type) c
			(layer)1
				Element:p
					Variable data, depending on context. See the field definition for specifics.
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					array
			Node:
			(type) c
			(layer)1
				Element:p
					A simple list of values. In JSON, this will be an array. In XML, the field will contain a set of
				Element:code
					<value>
					elements.
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					resource
			Node:
			(type) c
			(layer)1
				Element:p
					A string representing a URI reference to another resource within the current version of the API.
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					null
			Node:
			(type) c
			(layer)1
				Element:p
					A null value. In JSON this is represented as the native
				Element:code
					null
					type. In XML, it is represented as the literal string
				Element:code
					NULL
					.
			Node:
			(type) c
			(layer)1
				Element:h2
				Element:span
					Supported Browsers
			Node:
			(type) c
			(layer)1
				Element:p
					Below are the browsers supported for the BigCommerce control panel. We drop support when a version falls below 2% of usage. The browsers are sorted by popularity, with the most popular browsers at the top.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Desktop
				Element:tbody
				Element:tr
				Element:td
					Chrome latest
				Element:tr
				Element:td
					Firefox latest
				Element:tr
				Element:td
					Internet Explorer 10 or later
				Element:tr
				Element:td
					Safari latest
			Node:
			(type) c
			(layer)1
				Element:p
					For a current list of target browsers (desktop and mobile) that BigCommerce supports for
				Element:em
					storefronts
					using our themes, please see
				Element:a
					this support page
					.
			Node:
			(type) h1
			(layer)1
				Element:h1
				Element:span
				Element:a
					Webhooks Overview
			Node:
			(type) c
			(layer)1
				Element:p
				Element:a
					Webhooks
					allow developers to build apps that receive information, in near–real time, about events that happen on BigCommerce stores. Webhooks require you to provide a callback URI where you want us to send information about the events that your app subscribes to. When the event happens we’ll send a
				Element:code
					POST
					request to your callback URI and then your app can perform some action based on that event.
			Node:
			(type) c
			(layer)1
				Element:p
					For example, you might build an app that needs to know when:
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					An order is placed.
				Element:li
					A product is added.
				Element:li
					A customer record is updated.
			Node:
			(type) c
			(layer)1
				Element:aside
				Element:span
					Webhooks Requirements and Limitations
				Element:br
				Element:br
					Webhooks differ from the rest of the Stores API as follows:
				Element:ul
				Element:li
					OAuth is required; basic authentication is not supported.
				Element:li
					Self-signed certificates are not supported.
				Element:li
					JSON is required; XML is not supported.
			Node:
			(type) c
			(layer)1
				Element:p
					All webhooks requests must include the following in their HTTP headers:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					Accept: application/json Content-Type: application/json X-Auth-Client: <the OAuth client id> X-Auth-Token: <the OAuth token>
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Prerequisites
			Node:
			(type) c
			(layer)1
				Element:p
					Before you can send any requests or receive any responses, you will need the following:
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:strong
					A store:
					You can get a sandbox store by joining the
				Element:a
					Partner Program
					.
				Element:li
				Element:strong
					OAuth Client ID:
					Obtained during
				Element:a
					App Registration
					.
				Element:li
				Element:strong
					OAuth token:
					Obtained during
				Element:a
					App Installation
					.
				Element:li
				Element:strong
					Valid TLS/SSL setup:
					Verify your setup at the following site:
				Element:a
					https://sslcheck.globalsign.com
					.
			Node:
			(type) c
			(layer)1
				Element:aside
				Element:span
					Connection Breakers
				Element:br
				Element:br
					Any one of the following will cause a connection failure:
				Element:ul
				Element:li
					Hostname/DNS mismatch.
				Element:li
					Self-signed certificate.
				Element:li
					Intermediate certificates not loaded.
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Creating Webhooks: Sending the POST Request
			Node:
			(type) c
			(layer)1
				Element:p
					To create a webhook, send a
				Element:code
					POST
					request to the
				Element:code
					hooks
					resource, including:
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					As the
				Element:code
					scope
					value, the event for which you would like to receive notification. See next section for the list of possibilities.
				Element:aside
					Wildcards are supported for
				Element:code
					scope
					.
				Element:li
				Element:p
					As the
				Element:code
					destination
					value, the callback’s fully qualified URI.
				Element:li
				Element:p
					A
				Element:code
					headers
					object containing one or more name-value pairs, both string values (optional). If you choose to include a
				Element:code
					headers
					object, BigCommerce will include the name-value pair(s) in the HTTP header of its
				Element:code
					POST
					requests to your callback URI at runtime. While this feature could be used for any purpose, one is to use it to set a secret authorization key and check it at runtime. This provides an additional level of assurance that the
				Element:code
					POST
					request came from BigCommerce instead of some other party, such as a malicious actor.
				Element:li
				Element:p
					By default, new webhooks will be set to be inactive and will have a blank value. If you want to create a webhook that should be active initially, you can also pass the following name-value pair:
				Element:code
					"is_active": true
					.
			Node:
			(type) c
			(layer)1
				Element:p
					An
				Element:code
					HTTP 201
					response indicates that the webhook was set successfully.
			Node:
			(type) c
			(layer)1
				Element:p
					Please see the
				Element:a
					hooks resource
					and
				Element:a
					webhook object
					sections for more details.
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					List of Webhook Events
			Node:
			(type) c
			(layer)1
				Element:p
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					store/order/*
				Element:ul
				Element:li
					store/order/created
				Element:li
					store/order/updated
				Element:li
					store/order/archived
				Element:li
					store/order/statusUpdated
				Element:li
					store/order/message/created
				Element:p
				Element:li
					store/product/*
				Element:ul
				Element:li
					store/product/created
				Element:li
					store/product/updated
				Element:li
					store/product/deleted
				Element:li
					store/product/inventory/updated
				Element:li
					store/product/inventory/order/updated
				Element:p
				Element:li
					store/product/inventory/*
				Element:ul
				Element:li
					store/product/inventory/updated
				Element:li
					store/product/inventory/order/updated
				Element:p
				Element:li
					store/category/*
				Element:ul
				Element:li
					store/category/created
				Element:li
					store/category/updated
				Element:li
					store/category/deleted
				Element:p
				Element:li
					store/sku/*
				Element:ul
				Element:li
					store/sku/created
				Element:li
					store/sku/updated
				Element:li
					store/sku/deleted
				Element:li
					store/sku/inventory/updated
				Element:li
					store/sku/inventory/order/updated
				Element:p
				Element:li
					store/sku/inventory/*
				Element:ul
				Element:li
					store/sku/inventory/updated
				Element:li
					store/sku/inventory/order/updated
				Element:p
				Element:li
					store/customer/*
				Element:ul
				Element:li
					store/customer/created
				Element:li
					store/customer/updated
				Element:li
					store/customer/deleted
				Element:p
				Element:li
					store/information/updated
				Element:p
				Element:li
					store/shipment/*
				Element:ul
				Element:li
					store/shipment/created
				Element:li
					store/shipment/updated
				Element:li
					store/shipment/deleted
				Element:p
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Receiving Webhook Callbacks
			Node:
			(type) c
			(layer)1
				Element:p
					You’ll need to build an application, and configure your server, to receive the callback that we send when events are triggered.
			Node:
			(type) c
			(layer)1
				Element:aside
				Element:span
					One-Minute Timeout
				Element:br
				Element:br
					Following the creation of a webhook, it can take up to one minute for BigCommerce to start sending
				Element:code
					POST
					requests to your callback URI.
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Lightweight Callback Payload
			Node:
			(type) c
			(layer)1
				Element:p
					In the callback, we send a light payload with only minimum details regarding the event that’s been triggered. This gives you maximum flexibility as to how you want to handle the notification in your application. For instance, if you subscribe to the
				Element:code
					store/product/update
					event, we’ll send you the product ID when it’s been updated, and you might want to handle it by fetching the product via a request to the
				Element:a
					Products resource
					.
			Node:
			(type) c
			(layer)1
				Element:p
					An example payload follows:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
					"store_id"
				Element:span
					:
				Element:span
					11111
				Element:span
					,
				Element:span
					"producer"
				Element:span
					:
				Element:span
					"stores/abcde"
				Element:span
					,
				Element:span
					"scope"
				Element:span
					:
				Element:span
					"store/order/statusUpdated"
				Element:span
					,
				Element:span
					"data"
				Element:span
					:{
				Element:span
					"type"
				Element:span
					:
				Element:span
					"order"
				Element:span
					,
				Element:span
					"id"
				Element:span
					:
				Element:span
					173331
				Element:span
					},
				Element:span
					"hash"
				Element:span
					:
				Element:span
					"3f9ea420af83450d7ef9f78b08c8af25b2213637"
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Multiple Events Are Triggered during Bulk Data Imports
			Node:
			(type) c
			(layer)1
				Element:p
					Bulk data imports will trigger the relevant events for every record affected. For example, if you have a hook on
				Element:code
					store/product/created
					, when the merchant imports 2,000 products, then we will send 2,000 individual callback events.
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Payloads Are Serialized
			Node:
			(type) c
			(layer)1
				Element:p
					Payloads are serialized per hook per store.
			Node:
			(type) c
			(layer)1
				Element:p
					In the future, we are looking at enabling a replay feature, allowing you to replay select events. What this means is, based on the serialized payload IDs, you can detect if you’ve missed certain callbacks and then, via a future update, you will be able call a replay method to get the missing events.
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Respond to Webhook Callbacks
			Node:
			(type) c
			(layer)1
				Element:p
					To acknowledge that you received the webhook without issue, your server should return a
				Element:code
					200 HTTP
					status code. Any other information you return in the request headers or request body will be ignored. Any response code outside the
				Element:code
					200
					range, including
				Element:code
					3_xx_
					codes, will indicate to us that you did not receive the webhook. When a webhook is not received (for whatever reason), we will attempt to callback as described just below.
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Callback Retry Mechanism
			Node:
			(type) c
			(layer)1
				Element:p
					Webhooks will do their best to deliver the events to your callback URI. The dispatcher will attempt several retries until the maximum retry limit is reached, as follows:
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					Whenever a webhook gives a non-
				Element:code
					2_xx_
					response, or times out, the app will be blocked for 60 seconds.
				Element:li
					Webhooks created during that 60-second block will be queued up to send on the next scheduled retry attempt after the block expires, so that webhooks are not lost.
			Node:
			(type) c
			(layer)1
				Element:p
					The dispatcher will then attempt several retries (at increasing intervals) until the maximum retry limit is reached, as follows:
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Retry Intervals
			Node:
			(type) c
			(layer)1
				Element:ol
				Element:li
					60 seconds after the most recent failure
				Element:li
					180 seconds after the most recent failure
				Element:li
					300 seconds after the most recent failure
				Element:li
					600 seconds after the most recent failure
				Element:li
					900 seconds after the most recent failure
				Element:li
					1800 seconds after the most recent failure
				Element:li
					3600 seconds after the most recent failure
				Element:li
					7200 seconds after the most recent failure
				Element:li
					21600 seconds after the most recent failure
				Element:li
					50400 seconds after the most recent failure
				Element:li
					86400 seconds (24 hours) after the most recent failure
			Node:
			(type) c
			(layer)1
				Element:p
					After the final retry attempt above (cumulatively, 48 hours after the first delivery attempt), the webhook will automatically be deactivated, and we will send an email to the developer’s email address registered on the subscribing app. Should you wish to reactivate the hook, you can set the
				Element:code
					is_active
					flag back to
				Element:code
					true
					via a
				Element:a
					PUT request
					to the
				Element:code
					hooks
					resource.
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Updating a Webhook
			Node:
			(type) c
			(layer)1
				Element:p
					Using your OAuth access token, send a
				Element:a
					PUT request
					to the
				Element:code
					hooks
					resource.
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Deleting a Webhook
			Node:
			(type) c
			(layer)1
				Element:p
					Using your OAuth access token, send a
				Element:a
					DELETE request
					to the
				Element:code
					hooks
					resource.
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Troubleshooting
			Node:
			(type) c
			(layer)1
				Element:p
					Below are remedies for certain errors commonly encountered with webhooks:
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Not Receiving the POST Requests to My Callback URI
			Node:
			(type) c
			(layer)1
				Element:p
					As noted above, if your app does not return an
				Element:code
					HTTP 2_xx_
					to BigCommerce upon receipt of the POST request to the callback URI, BigCommerce considers it a failure. BigCommerce will keep trying for a little over 48 hours. At the end of that time, BigCommerce sends an email to the email address set during app registration and flips the
				Element:code
					is_active
					flag to
				Element:code
					false
					.
			Node:
			(type) c
			(layer)1
				Element:p
					You can proactively check to make sure that everything is OK by periodically making a GET request and checking the
				Element:code
					is_active
					flag.
			Node:
			(type) c
			(layer)1
				Element:p
					If you receive an email or discover that the
				Element:code
					is_active
					flag has been flipped to
				Element:code
					false
					, try the following:
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					Check to see if your app is responding to the POST request with something other than
				Element:code
					HTTP 200
					.
				Element:li
					Check to make sure that your server has a valid TLS/SSL setup. One way to do this is by visiting the following website:
				Element:a
					https://sslcheck.globalsign.com
					. Any of the following will cause the TLS/SSL handshake to fail:
				Element:ul
				Element:li
					Self-signed certificate.
				Element:li
					Host name of the certificate does not match the server’s DNS.
				Element:li
					Your server’s key or trust store has not been loaded up with the intermediate certificates necessary to establish the chain of trust.
			Node:
			(type) c
			(layer)1
				Element:p
					Once you have resolved the issue preventing the connection, send a PUT request to flip the
				Element:code
					is_active
					flag back to
				Element:code
					true
					. This will cause BigCommerce to start trying to send the POST requests to your callback URI again.
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Not Receiving an HTTP 201 Response after Sending POST to Create Webhook
			Node:
			(type) c
			(layer)1
				Element:p
					After sending a POST request to create a webhook, you should get an HTTP 201 back. If you do not, check your TLS/SSL setup and the HTTP header in your request. The requirements for the HTTP header are discussed in the
				Element:a
					introduction
					above.
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Tools for Debugging and Testing Webhooks
			Node:
			(type) c
			(layer)1
				Element:p
					We recommend these diagnostic tools:
			Node:
			(type) c
			(layer)1
															Node:
															(type) c
															(layer)5
																Element:h5
																Element:span
																	RequestBin
															Node:
															(type) c
															(layer)5
																Element:p
																	While planning your integration,
																Element:a
																	RequestBin
																	is a very helpful tool for viewing the webhooks that we send, without much setup. In seconds, you can start seeing the webhooks we are firing, and their data.
			Node:
			(type) c
			(layer)1
															Node:
															(type) c
															(layer)5
																Element:h5
																Element:span
																	ngrok
															Node:
															(type) c
															(layer)5
																Element:p
																	As you are building your integration, you might want the abilty to test webhooks on your dev machines.
															Node:
															(type) c
															(layer)5
																Element:p
																	We suggest using
																Element:a
																	ngrok
																	, which you can use to easily set up tunnels between a server running on
																Element:code
																	localhost
																	and a public URL.
															Node:
															(type) c
															(layer)5
																Element:p
																	This will enable you to send our webhooks to your
																Element:code
																	localhost
																	environments via a public URL. No production push is required.
			Node:
			(type) h1
			(layer)1
				Element:h1
				Element:span
					Webhooks Reference
			Node:
			(type) c
			(layer)1
				Element:p
					The Webhooks object, and endpoints, register and manage webhooks that connect events from a store to external URLs.
			Node:
			(type) c
			(layer)1
				Element:h2
				Element:span
					Webhook Object – Properties
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Name
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
					int
				Element:td
					A read-only value that uniquely identifies a webhook object. Do not attempt to set this value in a
				Element:code
					PUT
					or
				Element:code
					POST
					.
				Element:tr
				Element:td
					client_id
				Element:td
					string
				Element:td
					The OAuth client ID that uniquely identifies your application. BigCommerce returns this name-value pair in the JSON body of its responses.
				Element:tr
				Element:td
					store_hash
				Element:td
					string
				Element:td
					The hash value that uniquely identifies the store. Your application does not need to set this value via the JSON object; instead, you pass it in the path of your API requests.
				Element:tr
				Element:td
					scope
				Element:td
					enum
				Element:td
					The events that the webhook listens on. The full list of possibilities is in
				Element:a
					this overview
					.
				Element:tr
				Element:td
					destination
				Element:td
					string
				Element:td
					The fully qualified URI that BigCommerce uses as a callback. At runtime, when there is an event that your webhook is listening on, BigCommerce will send a
				Element:code
					POST
					request to this URI. Must be HTTPS.
				Element:tr
				Element:td
					headers
				Element:td
					object
				Element:td
					Optional name-value pairs that you can set when you create the webhook. At runtime, BigCommerce will include the name-value pair(s) in the HTTP header of its
				Element:code
					POST
					request to your callback URI.
				Element:tr
				Element:td
					is_active
				Element:td
					boolean
				Element:td
					Can contain one of three values:
				Element:code
					true
					,
				Element:code
					false
					, or
				Element:code
					<blank>
					. Default is no value, i.e.,
				Element:code
					<blank>
					. If
				Element:code
					false
					, the webhook is inactive and will not send POST requests to the callback URI when an event occurs. If
				Element:code
					true
					, the webhook is active.
				Element:tr
				Element:td
					created_at
				Element:td
					int
				Element:td
					The time at which the webhook was created.
				Element:tr
				Element:td
					updated_at
				Element:td
					int
				Element:td
					The time at which the webhook was last updated.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
				Element:th
				Element:tbody
				Element:tr
				Element:td
				Element:strong
					Manages
				Element:td
				Element:tr
				Element:td
				Element:strong
					OAuth Scopes
				Element:td
				Element:code
					default
			Node:
			(type) c
			(layer)1
				Element:h2
				Element:span
					List Hooks
			Node:
			(type) c
			(layer)1
				Element:p
					Index of registered webhooks.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					GET /stores/{store_hash}/v2/hooks
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					101
				Element:span
					,
				Element:span
				Element:span
					"store_hash"
				Element:span
					:
				Element:span
				Element:span
					"5ueh97"
				Element:span
					,
				Element:span
				Element:span
					"client_id"
				Element:span
					:
				Element:span
				Element:span
					"40c672b9177b5d3a8dbfad24321be15d"
				Element:span
					,
				Element:span
				Element:span
					"scope"
				Element:span
					:
				Element:span
				Element:span
					"store/order/*"
				Element:span
					,
				Element:span
				Element:span
					"headers"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"X-Custom-Auth-Header"
				Element:span
					:
				Element:span
				Element:span
					"{secret_auth_password}"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"destination"
				Element:span
					:
				Element:span
				Element:span
					"https://app.example.com/orders"
				Element:span
					,
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2013-01-17T11:27:50+11:00"
				Element:span
					,
				Element:span
				Element:span
					"updated_at"
				Element:span
					:
				Element:span
				Element:span
					"2013-01-17T11:27:50+11:00"
				Element:span
					,
				Element:span
				Element:span
					"is_active"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					102
				Element:span
					,
				Element:span
				Element:span
					"store_hash"
				Element:span
					:
				Element:span
				Element:span
					"5ueh97"
				Element:span
					,
				Element:span
				Element:span
					"client_id"
				Element:span
					:
				Element:span
				Element:span
					"40c672b9177b5d3a8dbfad24321be15d"
				Element:span
					,
				Element:span
				Element:span
					"scope"
				Element:span
					:
				Element:span
				Element:span
					"store/product/created"
				Element:span
					,
				Element:span
				Element:span
					"headers"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"X-Custom-Auth-Header"
				Element:span
					:
				Element:span
				Element:span
					"{secret_auth_password}"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"destination"
				Element:span
					:
				Element:span
				Element:span
					"https://app.example.com/products"
				Element:span
					,
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2013-01-17T11:27:50+11:00"
				Element:span
					,
				Element:span
				Element:span
					"updated_at"
				Element:span
					:
				Element:span
				Element:span
					"2013-01-17T11:27:50+11:00"
				Element:span
					,
				Element:span
				Element:span
					"is_active"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
				Element:span
					}
				Element:span
				Element:span
					]
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h2
				Element:span
					Get a Hook
			Node:
			(type) c
			(layer)1
				Element:p
					Gets a registered webhook.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					GET /stores/{store_hash}/v2/hooks/{id}
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					101
				Element:span
					,
				Element:span
				Element:span
					"store_hash"
				Element:span
					:
				Element:span
				Element:span
					"5ueh97"
				Element:span
					,
				Element:span
				Element:span
					"client_id"
				Element:span
					:
				Element:span
				Element:span
					"40c672b9177b5d3a8dbfad24321be15d"
				Element:span
					,
				Element:span
				Element:span
					"scope"
				Element:span
					:
				Element:span
				Element:span
					"store/order/*"
				Element:span
					,
				Element:span
				Element:span
					"headers"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"X-Custom-Auth-Header"
				Element:span
					:
				Element:span
				Element:span
					"{secret_auth_password}"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"destination"
				Element:span
					:
				Element:span
				Element:span
					"https://app.example.com/orders"
				Element:span
					,
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2013-01-17T11:27:50+11:00"
				Element:span
					,
				Element:span
				Element:span
					"updated_at"
				Element:span
					:
				Element:span
				Element:span
					"2013-01-17T11:27:50+11:00"
				Element:span
					,
				Element:span
				Element:span
					"is_active"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h2
				Element:span
					Create a Hook
			Node:
			(type) c
			(layer)1
				Element:p
					Register a new webhook.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					POST /stores/{store_hash}/v2/hooks
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Requirements
			Node:
			(type) c
			(layer)1
				Element:p
					The following properties of the webhooks are required. The request won’t be fulfilled unless these properties are valid.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					scope
				Element:li
					destination
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Notes
			Node:
			(type) c
			(layer)1
				Element:p
					Scopes can be specified using wildcard syntax, or the full path to an event.
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Request
			Node:
			(type) c
			(layer)1
				Element:p
					Example request object:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"scope"
				Element:span
					:
				Element:span
				Element:span
					"store/order/*"
				Element:span
					,
				Element:span
				Element:span
					"headers"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"X-Custom-Auth-Header"
				Element:span
					:
				Element:span
				Element:span
					"{secret_auth_password}"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"destination"
				Element:span
					:
				Element:span
				Element:span
					"https://app.example.com/orders"
				Element:span
					,
				Element:span
				Element:span
					"is_active"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h2
				Element:span
					Update a Hook
			Node:
			(type) c
			(layer)1
				Element:p
					Edit the details of a registered webhook.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					PUT /stores/{store_hash}/v2/hooks/{id}
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Request
			Node:
			(type) c
			(layer)1
				Element:p
					Example request object:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"destination"
				Element:span
					:
				Element:span
				Element:span
					"https://app.example.com/orders_changed"
				Element:span
					,
				Element:span
				Element:span
					"is_active"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					101
				Element:span
					,
				Element:span
				Element:span
					"store_hash"
				Element:span
					:
				Element:span
				Element:span
					"5ueh97"
				Element:span
					,
				Element:span
				Element:span
					"client_id"
				Element:span
					:
				Element:span
				Element:span
					"40c672b9177b5d3a8dbfad24321be15d"
				Element:span
					,
				Element:span
				Element:span
					"scope"
				Element:span
					:
				Element:span
				Element:span
					"store/order/*"
				Element:span
					,
				Element:span
				Element:span
					"headers"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"X-Custom-Auth-Header"
				Element:span
					:
				Element:span
				Element:span
					"secret_hooks_auth_password"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"destination"
				Element:span
					:
				Element:span
				Element:span
					"https://app.example.com/orders_changed"
				Element:span
					,
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2013-01-17T11:27:50+11:00"
				Element:span
					,
				Element:span
				Element:span
					"updated_at"
				Element:span
					:
				Element:span
				Element:span
					"2013-01-18T11:27:50+11:00"
				Element:span
					,
				Element:span
				Element:span
					"is_active"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h2
				Element:span
					Delete a Hook
			Node:
			(type) c
			(layer)1
				Element:p
					Deletes a single webhook.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					DELETE /stores/{store_hash}/v2/hooks/{id}
			Node:
			(type) h1
			(layer)1
				Element:h1
				Element:span
					FAQ
			Node:
			(type) c
			(layer)1
				Element:h2
				Element:span
					What kind of apps can I submit?
			Node:
			(type) c
			(layer)1
				Element:p
					You can build any kind of app to test the capabilities of the platform. For inclusion in the App Store, we’re looking for apps that that make online retail better and help our merchants to sell more.
			Node:
			(type) c
			(layer)1
				Element:p
					Apps should target one or more of the following categories:
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					Accounting
				Element:li
					Advertising
				Element:li
					Analytics
				Element:li
					Cloud integration
				Element:li
					Customer feedback
				Element:li
					Drop shipping
				Element:li
					Email marketing
				Element:li
					Live chat
				Element:li
					Marketing
				Element:li
					Merchandising
				Element:li
					Mobile
				Element:li
					Multichannel listing
				Element:li
					Order fulfillment
				Element:li
					Order management
				Element:li
					Point of sale
				Element:li
					Product review
				Element:li
					Shipping
				Element:li
					Shopping comparison
				Element:li
					Social media
				Element:li
					Split testing
			Node:
			(type) c
			(layer)1
				Element:h2
				Element:span
					How does the approval process work?
			Node:
			(type) c
			(layer)1
				Element:p
					Upon receiving an
				Element:a
					app submission
					, we review it to make sure that it meets our
				Element:a
					requirements
					. We will contact you directly if we require further information. When the app is approved, it instantly becomes available in the
				Element:a
					App Store
					.
			Node:
			(type) c
			(layer)1
				Element:h2
				Element:span
					Is the API rate limit per-store or per-app?
			Node:
			(type) c
			(layer)1
				Element:p
					Basic Authentication requests are rate-limited
				Element:a
					per app
					.
			Node:
			(type) c
			(layer)1
				Element:p
					OAuth requests are rate-limited
				Element:a
					per store
					. A single store’s quota applies to all OAuth apps connecting to that store. Our OAuth rate limiting algorithm is designed to distribute quotas fairly across multiple apps, so that a single greedy app cannot consume the entire quota on its own.
			Node:
			(type) c
			(layer)1
				Element:h2
				Element:span
					Do apps need to make special considerations for certain browsers?
			Node:
			(type) c
			(layer)1
				Element:p
					Yes. Please review our list of
				Element:a
					supported browsers
					and the documentation on
				Element:a
					user interface constraints
					for details.
			Node:
			(type) c
			(layer)1
				Element:h2
				Element:span
					What if I need to update my app after App Store submission/acceptance?
			Node:
			(type) c
			(layer)1
				Element:p
					You can modify your app at any time within My Apps, free of charge. As soon as you click
				Element:strong
					Update & Close
					, your changes will be live. Therefore, we recommend creating a copy of your app and using this to test the changes first. Once you have made sure that they work properly, you can go ahead and modify your production app.
			Node:
			(type) c
			(layer)1
				Element:h2
				Element:span
					Will BigCommerce host my server-side code?
			Node:
			(type) c
			(layer)1
				Element:p
					No. BigCommerce does not support the upload of server-side code to a store. The server-side code must hosted elsewhere. The storefront can use JavaScript to access it.
