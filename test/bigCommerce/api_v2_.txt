Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					API v2 Documentation
			Node:
			(type) h1
			(layer)1
				Element:h1
				Element:span
					Orders Reference
			Node:
			(type) c
			(layer)1
				Element:p
					Orders APIs integrate with point-of-sale, shipping, distribution, and inventory-management systems. They include Orders, Order Coupons, Order Messages, Order Products, Order Shipping Addresses, Order Statuses, Order Taxes, and Shipments.
			Node:
			(type) c
			(layer)1
				Element:h2
				Element:span
					Orders
			Node:
			(type) c
			(layer)1
				Element:p
					The Order object contains a record of the purchase agreement between a shopper and a merchant.
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Order Object – Properties
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Name
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
					int
				Element:td
					The ID of the order, a read-only value. Do not pass in PUT or POST.
				Element:tr
				Element:td
					customer_id
				Element:td
					int
				Element:td
					The ID of the customer placing the order; or
				Element:code
					0
					if it was a guest order.
				Element:tr
				Element:td
					date_created
				Element:td
					date
				Element:td
					The date this order was created. If not specified, will default to the current time. The date should be in RFC format, e.g.:
				Element:code
					Tue, 20 Nov 2012 00:00:00 +0000
				Element:tr
				Element:td
					date_modified
				Element:td
					date
				Element:td
					A read-only value representing the last modification of the order. Do not attempt to modify or set this value in a POST or PUT operation.
				Element:tr
				Element:td
					date_shipped
				Element:td
					date
				Element:td
					A read-only value representing the date of shipment. Do not attempt to modify or set this value in a POST or PUT operation.
				Element:tr
				Element:td
					status_id
				Element:td
					int
				Element:td
					The status ID. See examples under
				Element:a
					Order Statuses
					.
				Element:tr
				Element:td
					status
				Element:td
					string
				Element:td
					The status will include one of the string values defined under
				Element:a
					Order Statuses
					. This value is read-only. Do not attempt to modify or set this value in a POST or PUT operation.
				Element:tr
				Element:td
					subtotal_ex_tax
				Element:td
					decimal
				Element:td
					Override value for subtotal excluding tax. If specified, the field
				Element:code
					subtotal_inc_tax
					is also required.
				Element:tr
				Element:td
					subtotal_inc_tax
				Element:td
					decimal
				Element:td
					Override value for subtotal including tax. If specified, the field
				Element:code
					subtotal_ex_tax
					is also required.
				Element:tr
				Element:td
					subtotal_tax
				Element:td
					decimal
				Element:td
					A read-only value. Do not attempt to set or modify this value in a POST or PUT operation.
				Element:tr
				Element:td
					base_shipping_cost
				Element:td
					decimal
				Element:td
					The value of the base shipping cost.
				Element:tr
				Element:td
					shipping_cost_ex_tax
				Element:td
					decimal
				Element:td
					The value of shipping cost, excluding tax.
				Element:tr
				Element:td
					shipping_cost_inc_tax
				Element:td
					decimal
				Element:td
					The value of shipping cost, including tax.
				Element:tr
				Element:td
					shipping_cost_tax
				Element:td
					decimal
				Element:td
					A read-only value. Do not attempt to modify or set this value in a POST or PUT operation.
				Element:tr
				Element:td
					shipping_cost_tax_class_id
				Element:td
					int
				Element:td
					Shipping-cost tax class. A read-only value. Do not attempt to modify or set this value in a POST or PUT operation. (NOTE: Value ignored if automatic tax is enabled on the store.)
				Element:tr
				Element:td
					base_handling_cost
				Element:td
					decimal
				Element:td
					The value of the base handling cost.
				Element:tr
				Element:td
					handling_cost_ex_tax
				Element:td
					decimal
				Element:td
					The value of the handling cost, excluding tax.
				Element:tr
				Element:td
					handling_cost_inc_tax
				Element:td
					decimal
				Element:td
					The value of the handling cost, including tax.
				Element:tr
				Element:td
					handling_cost_tax
				Element:td
					decimal
				Element:td
					A read-only value. Do not attempt to modify or set this value in a POST or PUT operation.
				Element:tr
				Element:td
					handling_cost_tax_class_id
				Element:td
					int
				Element:td
					A read-only value. Do not attempt to set or modify this value in a POST or PUT operation. (NOTE: Value ignored if automatic tax is enabled on the store.)
				Element:tr
				Element:td
					base_wrapping_cost
				Element:td
					decimal
				Element:td
					The value of the base wrapping cost.
				Element:tr
				Element:td
					wrapping_cost_ex_tax
				Element:td
					decimal
				Element:td
					The value of the wrapping cost, excluding tax.
				Element:tr
				Element:td
					wrapping_cost_inc_tax
				Element:td
					decimal
				Element:td
					The value of the wrapping cost, including tax.
				Element:tr
				Element:td
					wrapping_cost_tax
				Element:td
					decimal
				Element:td
					A read-only value. Do not attempt to modify or set this value in a POST or PUT operation.
				Element:tr
				Element:td
					wrapping_cost_tax_class_id
				Element:td
					int
				Element:td
					A read-only value. Do not attempt to set or modify this value in a POST or PUT operation. (NOTE: Value ignored if automatic tax is enabled on the store.)
				Element:tr
				Element:td
					total_ex_tax
				Element:td
					decimal
				Element:td
					Override value for the total, excluding tax. If specified, the field
				Element:code
					total_inc_tax
					is also required.
				Element:tr
				Element:td
					total_inc_tax
				Element:td
					decimal
				Element:td
					Override value for the total, including tax. If specified, the field
				Element:code
					total_ex_tax
					is also required.
				Element:tr
				Element:td
					total_tax
				Element:td
					decimal
				Element:td
					A read-only value. Do not attempt to set or modify this value in a POST or PUT operation.
				Element:tr
				Element:td
					items_total
				Element:td
					int
				Element:td
					The total number of items in the order.
				Element:tr
				Element:td
					items_shipped
				Element:td
					int
				Element:td
					The number of items that have been shipped.
				Element:tr
				Element:td
					payment_method
				Element:td
					string
				Element:td
					The payment method for this order. Can be one of the following:
				Element:code
					Manual
					,
				Element:code
					Credit Card
					,
				Element:code
					cash
					,
				Element:code
					Test Payment Gateway
					, etc.
				Element:tr
				Element:td
					payment_provider_id
				Element:td
					string
				Element:td
					The external Transaction ID/Payment ID within this order’s payment provider (if a payment provider was used).
				Element:tr
				Element:td
					payment_status
				Element:td
					enum
				Element:td
					A read-only value. Do not attempt to set or modify this value in a POST or PUT operation.
				Element:tr
				Element:td
					refunded_amount
				Element:td
					decimal
				Element:td
					The amount refunded from this transaction.
				Element:tr
				Element:td
					order_is_digital
				Element:td
					boolean
				Element:td
					Whether this is an order for digital products.
				Element:tr
				Element:td
					store_credit_amount
				Element:td
					decimal
				Element:td
					Represents the store credit that the shopper has redeemed on this individual order. This is a read-only value. Do not pass in a POST or PUT.
				Element:tr
				Element:td
					gift_certificate_amount
				Element:td
					decimal
				Element:td
					A read-only value. Do not pass in a POST or PUT.
				Element:tr
				Element:td
					ip_address
				Element:td
					string
				Element:td
					IP Address of the customer, if known.
				Element:tr
				Element:td
					geoip_country
				Element:td
					string
				Element:td
					The full name of the country where the customer made the purchase, based on the IP.
				Element:tr
				Element:td
					geoip_country_iso2
				Element:td
					string
				Element:td
					The country where the customer made the purchase, in ISO2 format, based on the IP.
				Element:tr
				Element:td
					currency_id
				Element:td
					int
				Element:td
					The ID of the currency being used in this transaction. A read-only value. Do not pass in a POST or PUT.
				Element:tr
				Element:td
					currency_code
				Element:td
					string
				Element:td
					The currency code of the currency being used in this transaction. A read-only value. Do not pass in a POST or PUT.
				Element:tr
				Element:td
					currency_exchange_rate
				Element:td
					decimal
				Element:td
					A read-only value. Do not pass in a POST or PUT.
				Element:tr
				Element:td
					default_currency_id
				Element:td
					int
				Element:td
					A read-only value. Do not pass in a POST or PUT.
				Element:tr
				Element:td
					default_currency_code
				Element:td
					string
				Element:td
					The currency code of the default currency for this type of transaction. A read-only value. Do not pass in a POST or PUT.
				Element:tr
				Element:td
					staff_notes
				Element:td
					text
				Element:td
					Any additional notes for staff.
				Element:tr
				Element:td
					customer_message
				Element:td
					text
				Element:td
					Message that the customer entered into the
				Element:code
					Order Comments
					box during checkout.
				Element:tr
				Element:td
					discount_amount
				Element:td
					decimal
				Element:td
					Amount of discount for this transaction.
				Element:tr
				Element:td
					coupon_discount
				Element:td
					decimal
				Element:td
					A read-only value. Do not pass in a POST or PUT.
				Element:tr
				Element:td
					shipping_address_count
				Element:td
					int
				Element:td
					The number of shipping addresses associated with this transaction. A read-only value. Do not pass in a POST or PUT.
				Element:tr
				Element:td
					is_deleted
				Element:td
					boolean
				Element:td
					Indicates whether the order was deleted (archived). A read-only value. Do not pass in a POST or PUT.
				Element:tr
				Element:td
					is_email_opt_in
				Element:td
					boolean
				Element:td
					Indicates whether the shopper has selected an opt-in check box (on the checkout page) to receive emails. A read-only value. Do not pass in a POST or PUT.
				Element:tr
				Element:td
					ebay_order_id
				Element:td
					string
				Element:td
					If the order was placed through eBay, the eBay order number will be included. Otherwise, the value will be
				Element:code
					0
					.
				Element:tr
				Element:td
					billing_address
				Element:td
					object
				Element:td
					Contains the billing address details for this transaction, specifically:
				Element:code
					first_name
					,
				Element:code
					last_name
					,
				Element:code
					company
					,
				Element:code
					street_1
					,
				Element:code
					street_2
					,
				Element:code
					city
					,
				Element:code
					state
					,
				Element:code
					zip
					,
				Element:code
					country
					,
				Element:code
					country_iso2
					,
				Element:code
					phone
					, and
				Element:code
					email
					. Ensure that state names are spelled out in full, e.g.:
				Element:code
					California
					. Required for POST operations.
				Element:tr
				Element:td
					order_source
				Element:td
					string
				Element:td
					Orders submitted via the store’s website will include a
				Element:code
					www
					value. Orders submitted via the API will be set to
				Element:code
					external
					. A read-only value. Do not pass in a POST or PUT.
				Element:tr
				Element:td
					external_source
				Element:td
					string
				Element:td
					For orders submitted or modified via the API, using a PUT or POST operation, you can optionally pass in a value identifying the system used to generate the order. For example:
				Element:code
					POS
					. Otherwise, the value will be null.
				Element:tr
				Element:td
					products
				Element:td
					array
				Element:td
					Array of
				Element:a
					product
					objects that make up the order.
				Element:tr
				Element:td
					shipping_addresses
				Element:td
					array
				Element:td
					This is an object array that has different syntax in different operations:
				Element:br
				Element:br
					In PUT or POST operations, you can optionally pass a
				Element:code
					shipping_addresses
					object array containing one or more shipping addresses. However, if you include more than one address, only the first address will be used, because the API does not currently support shipping to more than one address. If you do not pass a shipping address, the billing address will be used.
				Element:br
				Element:br
					For the full list of available name/value pairs, see the
				Element:a
					Order Shipping Addresses
					object. Not all fields are required. For a syntax example of syntax, see the
				Element:a
					Create an Order
					endpoint.
				Element:br
				Element:br
					In GET and other operations, the
				Element:code
					shipping_addresses
					object will consist of two addresses. The first is the URI of a JSON object containing the shipping address details. The second is a context path that provides an alternate means of retrieving the data (if, for example, you prefer XML). For syntax, refer to the
				Element:a
					List Orders
					endpoint.
				Element:tr
				Element:td
					coupons
				Element:td
					object
				Element:td
					This object is read-only. Do not attempt to pass in a PUT or POST. Contains two name/value pairs:
				Element:br
					The
				Element:code
					url
					property’s value is the fully qualified address of a JSON object array, containing details of any coupon(s) associated with this transaction.
				Element:br
					The
				Element:code
					resource
					property’s value is the context path to the
				Element:a
					Order Coupons
					resource, which provides an alternate means of retrieving the data (if, for example, you prefer XML).
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Order Webhook Events
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Order Created
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					store/order/created
			Node:
			(type) c
			(layer)1
				Element:p
					Occurs when an order is received from the checkout, or when a manual order is created in the control panel.
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Order Updated
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					store/order/updated
			Node:
			(type) c
			(layer)1
				Element:p
					Occurs when order details are updated through the control panel, or when an order status is changed from the control panel or the API.
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Order Archived
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					store/order/archived
			Node:
			(type) c
			(layer)1
				Element:p
					Occurs when an order is archived from the control panel.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
				Element:th
				Element:tbody
				Element:tr
				Element:td
				Element:strong
					Manages
				Element:td
				Element:tr
				Element:td
				Element:strong
					OAuth Scopes
				Element:td
					store_v2_orders
				Element:tr
				Element:td
				Element:td
					store_v2_orders_read_only
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					List Orders
			Node:
			(type) c
			(layer)1
				Element:p
					Gets the collection of orders. (The default sort is by order id, from lowest to highest.)
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					GET /stores/{store_hash}/v2/orders
				Element:li
					Basic Auth >
				Element:code
					GET /api/v2/orders
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Filters
			Node:
			(type) c
			(layer)1
				Element:p
					Filter parameters can be added to the URL query string to select specific orders in the collection.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Type
				Element:th
					Example
				Element:tbody
				Element:tr
				Element:td
					min_id
				Element:td
					int
				Element:td
					/api/v2/orders?min_id={value}
				Element:tr
				Element:td
					max_id
				Element:td
					int
				Element:td
					/api/v2/orders?max_id={value}
				Element:tr
				Element:td
					min_total
				Element:td
					decimal
				Element:td
					/api/v2/orders?min_total={value}
				Element:tr
				Element:td
					max_total
				Element:td
					decimal
				Element:td
					/api/v2/orders?max_total={value}
				Element:tr
				Element:td
					customer_id
				Element:td
					string
				Element:td
					/api/v2/orders?customer_id={value}
				Element:tr
				Element:td
					email
				Element:td
					string
				Element:td
					/api/v2/orders?email={value}
				Element:tr
				Element:td
					status_id
				Element:td
					string
				Element:td
					/api/v2/orders?status_id={value}
				Element:tr
				Element:td
					is_deleted
				Element:td
					string (‘true’ or 'false’)
				Element:td
					/api/v2/orders?is_deleted={value}
				Element:tr
				Element:td
					payment_method
				Element:td
					string
				Element:td
					/api/v2/orders?payment_method={value}
				Element:tr
				Element:td
					min_date_created
				Element:td
					dateTime or date
				Element:td
					/api/v2/orders?min_date_created={value}
				Element:tr
				Element:td
					max_date_created
				Element:td
					dateTime or date
				Element:td
					/api/v2/orders?max_date_created={value}
				Element:tr
				Element:td
					min_date_modified
				Element:td
					dateTime or date
				Element:td
					/api/v2/orders?min_date_modified={value}
				Element:tr
				Element:td
					max_date_modified
				Element:td
					dateTime or date
				Element:td
					/api/v2/orders?max_date_modified={value}
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Pagination
			Node:
			(type) c
			(layer)1
				Element:p
					Parameters can be added to the URL query string to paginate the collection. The maximum limit is 250. If a limit isn’t provided, up to 50 orders are returned by default.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Type
				Element:th
					Example
				Element:tbody
				Element:tr
				Element:td
					page
				Element:td
					int
				Element:td
					/api/v2/orders?page={number}
				Element:tr
				Element:td
					limit
				Element:td
					int
				Element:td
					/api/v2/orders?limit={count}
				Element:tr
				Element:td
					sort
				Element:td
					string
				Element:td
					/api/v2/orders?sort=date_created:desc
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					100
				Element:span
					,
				Element:span
				Element:span
					"customer_id"
				Element:span
					:
				Element:span
				Element:span
					10
				Element:span
					,
				Element:span
				Element:span
					"date_created"
				Element:span
					:
				Element:span
				Element:span
					"Wed, 14 Nov 2012 19:26:23 +0000"
				Element:span
					,
				Element:span
				Element:span
					"date_modified"
				Element:span
					:
				Element:span
				Element:span
					"Wed, 14 Nov 2012 19:26:23 +0000"
				Element:span
					,
				Element:span
				Element:span
					"date_shipped"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"status_id"
				Element:span
					:
				Element:span
				Element:span
					11
				Element:span
					,
				Element:span
				Element:span
					"status"
				Element:span
					:
				Element:span
				Element:span
					"Awaiting Fulfillment"
				Element:span
					,
				Element:span
				Element:span
					"subtotal_ex_tax"
				Element:span
					:
				Element:span
				Element:span
					"79.0000"
				Element:span
					,
				Element:span
				Element:span
					"subtotal_inc_tax"
				Element:span
					:
				Element:span
				Element:span
					"79.0000"
				Element:span
					,
				Element:span
				Element:span
					"subtotal_tax"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"base_shipping_cost"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"shipping_cost_ex_tax"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"shipping_cost_inc_tax"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"shipping_cost_tax"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"shipping_cost_tax_class_id"
				Element:span
					:
				Element:span
				Element:span
					2
				Element:span
					,
				Element:span
				Element:span
					"base_handling_cost"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"handling_cost_ex_tax"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"handling_cost_inc_tax"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"handling_cost_tax"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"handling_cost_tax_class_id"
				Element:span
					:
				Element:span
				Element:span
					2
				Element:span
					,
				Element:span
				Element:span
					"base_wrapping_cost"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"wrapping_cost_ex_tax"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"wrapping_cost_inc_tax"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"wrapping_cost_tax"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"wrapping_cost_tax_class_id"
				Element:span
					:
				Element:span
				Element:span
					3
				Element:span
					,
				Element:span
				Element:span
					"total_ex_tax"
				Element:span
					:
				Element:span
				Element:span
					"79.0000"
				Element:span
					,
				Element:span
				Element:span
					"total_inc_tax"
				Element:span
					:
				Element:span
				Element:span
					"79.0000"
				Element:span
					,
				Element:span
				Element:span
					"total_tax"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"items_total"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"items_shipped"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"payment_method"
				Element:span
					:
				Element:span
				Element:span
					"cash"
				Element:span
					,
				Element:span
				Element:span
					"payment_provider_id"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"payment_status"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"refunded_amount"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"order_is_digital"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"store_credit_amount"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"gift_certificate_amount"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"ip_address"
				Element:span
					:
				Element:span
				Element:span
					"50.58.18.2"
				Element:span
					,
				Element:span
				Element:span
					"geoip_country"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"geoip_country_iso2"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"currency_id"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"currency_code"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
					,
				Element:span
				Element:span
					"currency_exchange_rate"
				Element:span
					:
				Element:span
				Element:span
					"1.0000000000"
				Element:span
					,
				Element:span
				Element:span
					"default_currency_id"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"default_currency_code"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
					,
				Element:span
				Element:span
					"staff_notes"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"customer_message"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"discount_amount"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"coupon_discount"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"shipping_address_count"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"is_deleted"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"billing_address"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"first_name"
				Element:span
					:
				Element:span
				Element:span
					"Trisha"
				Element:span
					,
				Element:span
				Element:span
					"last_name"
				Element:span
					:
				Element:span
				Element:span
					"McLaughlin"
				Element:span
					,
				Element:span
				Element:span
					"company"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"street_1"
				Element:span
					:
				Element:span
				Element:span
					"12345 W Anderson Ln"
				Element:span
					,
				Element:span
				Element:span
					"street_2"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"city"
				Element:span
					:
				Element:span
				Element:span
					"Austin"
				Element:span
					,
				Element:span
				Element:span
					"state"
				Element:span
					:
				Element:span
				Element:span
					"Texas"
				Element:span
					,
				Element:span
				Element:span
					"zip"
				Element:span
					:
				Element:span
				Element:span
					"78757"
				Element:span
					,
				Element:span
				Element:span
					"country"
				Element:span
					:
				Element:span
				Element:span
					"United States"
				Element:span
					,
				Element:span
				Element:span
					"country_iso2"
				Element:span
					:
				Element:span
				Element:span
					"US"
				Element:span
					,
				Element:span
				Element:span
					"phone"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"email"
				Element:span
					:
				Element:span
				Element:span
					"elsie@example.com"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"products"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
				Element:span
					"https://store-bwvr466.mybigcommerce.com/api/v2/orders/100/products.json"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"/orders/100/products"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"shipping_addresses"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
				Element:span
					"https://store-bwvr466.mybigcommerce.com/api/v2/orders/100/shippingaddresses.json"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"/orders/100/shippingaddresses"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"coupons"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
				Element:span
					"https://store-bwvr466.mybigcommerce.com/api/v2/orders/100/coupons.json"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"/orders/100/coupons"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
				Element:span
					]
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Get an Order
			Node:
			(type) c
			(layer)1
				Element:p
					Gets an order.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					GET /stores/{store_hash}/v2/orders/{id}
				Element:li
					Basic Auth >
				Element:code
					GET /api/v2/orders/{id}
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					100
				Element:span
					,
				Element:span
				Element:span
					"customer_id"
				Element:span
					:
				Element:span
				Element:span
					10
				Element:span
					,
				Element:span
				Element:span
					"date_created"
				Element:span
					:
				Element:span
				Element:span
					"Wed, 14 Nov 2012 19:26:23 +0000"
				Element:span
					,
				Element:span
				Element:span
					"date_modified"
				Element:span
					:
				Element:span
				Element:span
					"Wed, 14 Nov 2012 19:26:23 +0000"
				Element:span
					,
				Element:span
				Element:span
					"date_shipped"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"status_id"
				Element:span
					:
				Element:span
				Element:span
					11
				Element:span
					,
				Element:span
				Element:span
					"status"
				Element:span
					:
				Element:span
				Element:span
					"Awaiting Fulfillment"
				Element:span
					,
				Element:span
				Element:span
					"subtotal_ex_tax"
				Element:span
					:
				Element:span
				Element:span
					"79.0000"
				Element:span
					,
				Element:span
				Element:span
					"subtotal_inc_tax"
				Element:span
					:
				Element:span
				Element:span
					"79.0000"
				Element:span
					,
				Element:span
				Element:span
					"subtotal_tax"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"base_shipping_cost"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"shipping_cost_ex_tax"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"shipping_cost_inc_tax"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"shipping_cost_tax"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"shipping_cost_tax_class_id"
				Element:span
					:
				Element:span
				Element:span
					2
				Element:span
					,
				Element:span
				Element:span
					"base_handling_cost"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"handling_cost_ex_tax"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"handling_cost_inc_tax"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"handling_cost_tax"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"handling_cost_tax_class_id"
				Element:span
					:
				Element:span
				Element:span
					2
				Element:span
					,
				Element:span
				Element:span
					"base_wrapping_cost"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"wrapping_cost_ex_tax"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"wrapping_cost_inc_tax"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"wrapping_cost_tax"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"wrapping_cost_tax_class_id"
				Element:span
					:
				Element:span
				Element:span
					3
				Element:span
					,
				Element:span
				Element:span
					"total_ex_tax"
				Element:span
					:
				Element:span
				Element:span
					"79.0000"
				Element:span
					,
				Element:span
				Element:span
					"total_inc_tax"
				Element:span
					:
				Element:span
				Element:span
					"79.0000"
				Element:span
					,
				Element:span
				Element:span
					"total_tax"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"items_total"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"items_shipped"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"payment_method"
				Element:span
					:
				Element:span
				Element:span
					"cash"
				Element:span
					,
				Element:span
				Element:span
					"payment_provider_id"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"payment_status"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"refunded_amount"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"order_is_digital"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"store_credit_amount"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"gift_certificate_amount"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"ip_address"
				Element:span
					:
				Element:span
				Element:span
					"50.58.18.2"
				Element:span
					,
				Element:span
				Element:span
					"geoip_country"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"geoip_country_iso2"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"currency_id"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"currency_code"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
					,
				Element:span
				Element:span
					"currency_exchange_rate"
				Element:span
					:
				Element:span
				Element:span
					"1.0000000000"
				Element:span
					,
				Element:span
				Element:span
					"default_currency_id"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"default_currency_code"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
					,
				Element:span
				Element:span
					"staff_notes"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"customer_message"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"discount_amount"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"coupon_discount"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"shipping_address_count"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"is_deleted"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"billing_address"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"first_name"
				Element:span
					:
				Element:span
				Element:span
					"Trisha"
				Element:span
					,
				Element:span
				Element:span
					"last_name"
				Element:span
					:
				Element:span
				Element:span
					"McLaughlin"
				Element:span
					,
				Element:span
				Element:span
					"company"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"street_1"
				Element:span
					:
				Element:span
				Element:span
					"12345 W Anderson Ln"
				Element:span
					,
				Element:span
				Element:span
					"street_2"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"city"
				Element:span
					:
				Element:span
				Element:span
					"Austin"
				Element:span
					,
				Element:span
				Element:span
					"state"
				Element:span
					:
				Element:span
				Element:span
					"Texas"
				Element:span
					,
				Element:span
				Element:span
					"zip"
				Element:span
					:
				Element:span
				Element:span
					"78757"
				Element:span
					,
				Element:span
				Element:span
					"country"
				Element:span
					:
				Element:span
				Element:span
					"United States"
				Element:span
					,
				Element:span
				Element:span
					"country_iso2"
				Element:span
					:
				Element:span
				Element:span
					"US"
				Element:span
					,
				Element:span
				Element:span
					"phone"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"email"
				Element:span
					:
				Element:span
				Element:span
					"elsie@example.com"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"products"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
				Element:span
					"https://store-bwvr466.mybigcommerce.com/api/v2/orders/100/products.json"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"/orders/100/products"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"shipping_addresses"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
				Element:span
					"https://store-bwvr466.mybigcommerce.com/api/v2/orders/100/shippingaddresses.json"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"/orders/100/shippingaddresses"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"coupons"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
				Element:span
					"https://store-bwvr466.mybigcommerce.com/api/v2/orders/100/coupons.json"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"/orders/100/coupons"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Get a Count of Orders
			Node:
			(type) c
			(layer)1
				Element:p
					Gets a count of the number of orders in the store.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					GET /stores/{store_hash}/v2/orders/count
				Element:li
					Basic Auth >
				Element:code
					GET /api/v2/orders/count
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"count"
				Element:span
					:
				Element:span
				Element:span
					9
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Create an Order
			Node:
			(type) c
			(layer)1
				Element:p
					Manually create and submit an order.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					POST /stores/{store_hash}/v2/orders
				Element:li
					Basic Auth
				Element:code
					POST /api/v2/orders
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Read-only Properties
			Node:
			(type) c
			(layer)1
				Element:p
					The following properties of the order are read-only. If one or more of these properties are included in the request, it will be rejected.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					id
				Element:li
					date_modified
				Element:li
					date_shipped
				Element:li
					status
				Element:li
					order_source
				Element:li
					subtotal_tax
				Element:li
					shipping_cost_tax
				Element:li
					shipping_cost_tax_class_id
				Element:li
					handling_cost_tax
				Element:li
					handling_cost_tax_class_id
				Element:li
					wrapping_cost_tax
				Element:li
					wrapping_cost_tax_class_id
				Element:li
					total_tax
				Element:li
					payment_status
				Element:li
					currency_id
				Element:li
					currency_code
				Element:li
					currency_exchange_rate
				Element:li
					default_currency_id
				Element:li
					default_currency_code
				Element:li
					coupon_discount
				Element:li
					store_credit_amount
				Element:li
					gift_certificate_amount
				Element:li
					shipping_address_count
				Element:li
					is_deleted
				Element:li
					coupons
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Requirements
			Node:
			(type) c
			(layer)1
				Element:p
					The following properties of the order are required. The request won’t be fulfilled unless these properties are valid.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					products
				Element:li
					billing_address
			Node:
			(type) c
			(layer)1
				Element:aside
				Element:span
					Tax Notes
				Element:br
				Element:br
				Element:ul
				Element:li
					If a store has automatic tax enabled, BigCommerce does not compute sales tax on orders created via the API.
				Element:li
					Abbreviated state names in shipping and billing addresses will prevent tax documents from being submitted to Avalara. To ensure successful Avalara tax-document submission, spell state names out in full. For example, supplying
				Element:code
					CA
					as a state name leads to no tax-document submission. Supplying
				Element:code
					California
					as a state name leads to a successful submission.
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Overriding Preset Values
			Node:
			(type) c
			(layer)1
				Element:p
					You can create overrides for calculated values such as product prices, subtotal and totals by sending a fixed value in the request. If values are not supplied for these properties, they will be automatically calculated based on the pre-set store values and tax rules.
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Order Products
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					Existing products can be added to the order with a reference to their
				Element:code
					product_id
					.
				Element:li
					Custom products can be added to the order using the
				Element:a
					.
				Element:code
					products
					array
				Element:li
					If price is not specified, it will automatically pick up the price from the store’s product catalog. However, you can override this via
				Element:code
					price_inc_tax
					and
				Element:code
					price_ex_tax
					.
				Element:li
					If
				Element:code
					price_inc_tax
					and
				Element:code
					price_ex_tax
					are specified, price and rulesets are ignored, and the
				Element:code
					price_inc_tax
					or
				Element:code
					price_ex_tax
					are written to
				Element:code
					base_price
					according to the store settings.
				Element:li
					When the store is subscribed to Avalara Premium, a value of
				Element:code
					API Tax Override
					is written to the Order Tax object’s
				Element:code
					name
					field.
				Element:li
					Tax will be calculated based on the tax rules specified in the store, except in the case of automatic taxes. However, in both cases, you can optionally override the tax values by specifying
				Element:code
					price_inc_tax
					and
				Element:code
					price_ex_tax
					.
				Element:li
					For products that are configured to track stock, the quantity specified on the order will reduce the stock on hand. When there is not enough inventory to fulfill the order, the order will be rejected with an “out of stock” error code.
				Element:li
					For products that have min and max quantities specified in their settings, the API will honor these, and will reject orders appropriately.
				Element:li
					For products where product options are required, the API will validate these requirements to ensure that the product options are specified.
				Element:li
					Product quantity must be specified.
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Calculation of Totals
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					When not specified, order subtotal and total are automatically calculated.
				Element:li
					You can override order subtotal and/or total. If you choose to override one, we strongly recommend that override both, because the system will not be able to accurately calculate the other.
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Order Properties
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					Billing address is mandatory.
				Element:li
					Shipping address is not mandatory, and can optionally be specified as composite records.
				Element:ul
				Element:li
					When the shipping address is not specified, the system will fall back to using the billing address as the shipping address.
				Element:li
					Multiple shipments are not supported, so the API will assume the first address in the collection.
				Element:li
					In the shipping and billing addresses, there is no requirement to specify
				Element:code
					country
					when
				Element:code
					country_ISO2
					is specified.
				Element:ul
				Element:li
					The value specified for
				Element:code
					country_ISO2
					will always override any value specified for
				Element:code
					country
					.
				Element:li
					Coupon redemption is not currently supported.
				Element:li
					To specify a guest checkout, set
				Element:code
					customer_id
					to
				Element:code
					0
					.
				Element:li
				Element:code
					order_source
					cannot be specified, and will be set to
				Element:code
					external
					.
				Element:ul
				Element:li
					You can optionally specify a value for
				Element:code
					external_source
					to specify which external source the order is coming from - e.g., POS system X, accounting system Y, etc.
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Changing the Order Status
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:p
					You can specify
				Element:code
					status_id
					, which will automatically set the corresponding
				Element:code
					status
					. When
				Element:code
					status_id
					is not specified, it will be automatically set to
				Element:code
					1
					, which will set
				Element:code
					status
					to
				Element:code
					Pending
					.
				Element:li
				Element:p
				Element:code
					POST
					or
				Element:code
					PUT
					orders on stores with Avalara Premium cause tax documents to be submitted. If a store has subscribed to Avalara Premium, BigCommerce automatically submits tax documents to Avalara when the order achieves a paid status. The following statuses are of the paid type:
				Element:ul
				Element:li
					Shipped
				Element:li
					Partially Shipped
				Element:li
					Awaiting Pickup
				Element:li
					Awaiting Shipment
				Element:li
					Completed
				Element:li
					Awaiting Fulfillment
				Element:li
				Element:p
					BigCommerce considers all statuses other than those above to be of the unpaid type, except
				Element:code
					Refunded
					, which is considered neither paid or unpaid. Orders that are created using the
				Element:code
					POST
					method, and that include a status of the paid type, cause the submission of tax documents to Avalara.
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Request
			Node:
			(type) c
			(layer)1
				Element:p
					Example request object:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"customer_id"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"status_id"
				Element:span
					:
				Element:span
				Element:span
					11
				Element:span
					,
				Element:span
				Element:span
					"date_created"
				Element:span
					:
				Element:span
				Element:span
					"Thu, 04 Oct 2012 03:24:40 +0000"
				Element:span
					,
				Element:span
				Element:span
					"subtotal_ex_tax"
				Element:span
					:
				Element:span
				Element:span
					1705
				Element:span
					,
				Element:span
				Element:span
					"subtotal_inc_tax"
				Element:span
					:
				Element:span
				Element:span
					1915
				Element:span
					,
				Element:span
				Element:span
					"base_shipping_cost"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"shipping_cost_ex_tax"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"shipping_cost_inc_tax"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"base_handling_cost"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"handling_cost_ex_tax"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"handling_cost_inc_tax"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"base_wrapping_cost"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"wrapping_cost_ex_tax"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"wrapping_cost_inc_tax"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"total_ex_tax"
				Element:span
					:
				Element:span
				Element:span
					1705
				Element:span
					,
				Element:span
				Element:span
					"total_inc_tax"
				Element:span
					:
				Element:span
				Element:span
					1915
				Element:span
					,
				Element:span
				Element:span
					"refunded_amount"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"order_is_digital"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"staff_notes"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"customer_message"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"discount_amount"
				Element:span
					:
				Element:span
				Element:span
					10
				Element:span
					,
				Element:span
				Element:span
					"billing_address"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"first_name"
				Element:span
					:
				Element:span
				Element:span
					"Trisha"
				Element:span
					,
				Element:span
				Element:span
					"last_name"
				Element:span
					:
				Element:span
				Element:span
					"McLaughlin"
				Element:span
					,
				Element:span
				Element:span
					"company"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"street_1"
				Element:span
					:
				Element:span
				Element:span
					"12345 W Anderson Ln"
				Element:span
					,
				Element:span
				Element:span
					"street_2"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"city"
				Element:span
					:
				Element:span
				Element:span
					"Austin"
				Element:span
					,
				Element:span
				Element:span
					"state"
				Element:span
					:
				Element:span
				Element:span
					"Texas"
				Element:span
					,
				Element:span
				Element:span
					"zip"
				Element:span
					:
				Element:span
				Element:span
					"78757"
				Element:span
					,
				Element:span
				Element:span
					"country"
				Element:span
					:
				Element:span
				Element:span
					"United States"
				Element:span
					,
				Element:span
				Element:span
					"country_iso2"
				Element:span
					:
				Element:span
				Element:span
					"US"
				Element:span
					,
				Element:span
				Element:span
					"phone"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"email"
				Element:span
					:
				Element:span
				Element:span
					"elsie@example.com"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"shipping_addresses"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"first_name"
				Element:span
					:
				Element:span
				Element:span
					"Trisha"
				Element:span
					,
				Element:span
				Element:span
					"last_name"
				Element:span
					:
				Element:span
				Element:span
					"McLaughlin"
				Element:span
					,
				Element:span
				Element:span
					"company"
				Element:span
					:
				Element:span
				Element:span
					"Acme Pty Ltd"
				Element:span
					,
				Element:span
				Element:span
					"street_1"
				Element:span
					:
				Element:span
				Element:span
					"566 Sussex St"
				Element:span
					,
				Element:span
				Element:span
					"street_2"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"city"
				Element:span
					:
				Element:span
				Element:span
					"Austin"
				Element:span
					,
				Element:span
				Element:span
					"state"
				Element:span
					:
				Element:span
				Element:span
					"Texas"
				Element:span
					,
				Element:span
				Element:span
					"zip"
				Element:span
					:
				Element:span
				Element:span
					"78757"
				Element:span
					,
				Element:span
				Element:span
					"country"
				Element:span
					:
				Element:span
				Element:span
					"United States"
				Element:span
					,
				Element:span
				Element:span
					"country_iso2"
				Element:span
					:
				Element:span
				Element:span
					"US"
				Element:span
					,
				Element:span
				Element:span
					"phone"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"email"
				Element:span
					:
				Element:span
				Element:span
					"elsie@example.com"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					],
				Element:span
				Element:span
					"products"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"product_id"
				Element:span
					:
				Element:span
				Element:span
					32
				Element:span
					,
				Element:span
				Element:span
					"quantity"
				Element:span
					:
				Element:span
				Element:span
					2
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"product_id"
				Element:span
					:
				Element:span
				Element:span
					33
				Element:span
					,
				Element:span
				Element:span
					"quantity"
				Element:span
					:
				Element:span
				Element:span
					2
				Element:span
					,
				Element:span
				Element:span
					"product_options"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					87
				Element:span
					,
				Element:span
				Element:span
					"value"
				Element:span
					:
				Element:span
				Element:span
					10
				Element:span
				Element:span
					}
				Element:span
				Element:span
					]
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"My custom product"
				Element:span
					,
				Element:span
				Element:span
					"quantity"
				Element:span
					:
				Element:span
				Element:span
					2
				Element:span
					,
				Element:span
				Element:span
					"price_inc_tax"
				Element:span
					:
				Element:span
				Element:span
					10.8
				Element:span
					,
				Element:span
				Element:span
					"price_ex_tax"
				Element:span
					:
				Element:span
				Element:span
					10
				Element:span
				Element:span
					}
				Element:span
				Element:span
					],
				Element:span
				Element:span
					"external_source"
				Element:span
					:
				Element:span
				Element:span
					"POS"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					100
				Element:span
					,
				Element:span
				Element:span
					"customer_id"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"date_created"
				Element:span
					:
				Element:span
				Element:span
					"Thu, 04 Oct 2012 03:24:40 +0000"
				Element:span
					,
				Element:span
				Element:span
					"date_modified"
				Element:span
					:
				Element:span
				Element:span
					"Thu, 30 May 2013 01:48:39 +0000"
				Element:span
					,
				Element:span
				Element:span
					"date_shipped"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"status_id"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"status"
				Element:span
					:
				Element:span
				Element:span
					"Pending"
				Element:span
					,
				Element:span
				Element:span
					"subtotal_ex_tax"
				Element:span
					:
				Element:span
				Element:span
					"1705.0000"
				Element:span
					,
				Element:span
				Element:span
					"subtotal_inc_tax"
				Element:span
					:
				Element:span
				Element:span
					"1915.0000"
				Element:span
					,
				Element:span
				Element:span
					"subtotal_tax"
				Element:span
					:
				Element:span
				Element:span
					"210.0000"
				Element:span
					,
				Element:span
				Element:span
					"base_shipping_cost"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"shipping_cost_ex_tax"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"shipping_cost_inc_tax"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"shipping_cost_tax"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"shipping_cost_tax_class_id"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"base_handling_cost"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"handling_cost_ex_tax"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"handling_cost_inc_tax"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"handling_cost_tax"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"handling_cost_tax_class_id"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"base_wrapping_cost"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"wrapping_cost_ex_tax"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"wrapping_cost_inc_tax"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"wrapping_cost_tax"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"wrapping_cost_tax_class_id"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"total_ex_tax"
				Element:span
					:
				Element:span
				Element:span
					"1705.0000"
				Element:span
					,
				Element:span
				Element:span
					"total_inc_tax"
				Element:span
					:
				Element:span
				Element:span
					"1915.0000"
				Element:span
					,
				Element:span
				Element:span
					"total_tax"
				Element:span
					:
				Element:span
				Element:span
					"210.0000"
				Element:span
					,
				Element:span
				Element:span
					"items_total"
				Element:span
					:
				Element:span
				Element:span
					4
				Element:span
					,
				Element:span
				Element:span
					"items_shipped"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"payment_method"
				Element:span
					:
				Element:span
				Element:span
					"Manual"
				Element:span
					,
				Element:span
				Element:span
					"payment_provider_id"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"payment_status"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"refunded_amount"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"order_is_digital"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"store_credit_amount"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"gift_certificate_amount"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"ip_address"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"geoip_country"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"geoip_country_iso2"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"currency_id"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"currency_code"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"currency_exchange_rate"
				Element:span
					:
				Element:span
				Element:span
					"0.0000000000"
				Element:span
					,
				Element:span
				Element:span
					"default_currency_id"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"default_currency_code"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"staff_notes"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"customer_message"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"discount_amount"
				Element:span
					:
				Element:span
				Element:span
					"10.0000"
				Element:span
					,
				Element:span
				Element:span
					"coupon_discount"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"shipping_address_count"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"is_deleted"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"billing_address"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"first_name"
				Element:span
					:
				Element:span
				Element:span
					"Trisha"
				Element:span
					,
				Element:span
				Element:span
					"last_name"
				Element:span
					:
				Element:span
				Element:span
					"McLaughlin"
				Element:span
					,
				Element:span
				Element:span
					"company"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"street_1"
				Element:span
					:
				Element:span
				Element:span
					"12345 W Anderson Ln"
				Element:span
					,
				Element:span
				Element:span
					"street_2"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"city"
				Element:span
					:
				Element:span
				Element:span
					"Austin"
				Element:span
					,
				Element:span
				Element:span
					"state"
				Element:span
					:
				Element:span
				Element:span
					"Texas"
				Element:span
					,
				Element:span
				Element:span
					"zip"
				Element:span
					:
				Element:span
				Element:span
					"78757"
				Element:span
					,
				Element:span
				Element:span
					"country"
				Element:span
					:
				Element:span
				Element:span
					"United States"
				Element:span
					,
				Element:span
				Element:span
					"country_iso2"
				Element:span
					:
				Element:span
				Element:span
					"US"
				Element:span
					,
				Element:span
				Element:span
					"phone"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"email"
				Element:span
					:
				Element:span
				Element:span
					"elsie@example.com"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"order_source"
				Element:span
					:
				Element:span
				Element:span
					"external"
				Element:span
					,
				Element:span
				Element:span
					"external_source"
				Element:span
					:
				Element:span
				Element:span
					"POS"
				Element:span
					,
				Element:span
				Element:span
					"products"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
				Element:span
					"https://store-bwvr466.mybigcommerce.com/api/v2/orders/100/products.json"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"/orders/100/products"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"shipping_addresses"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
				Element:span
					"https://store-bwvr466.mybigcommerce.com/api/v2/orders/100/shippingaddresses.json"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"/orders/100/shippingaddresses"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"coupons"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
				Element:span
					"https://store-bwvr466.mybigcommerce.com/api/v2/orders/100/coupons.json"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"/orders/100/coupons"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Update an Order
			Node:
			(type) c
			(layer)1
				Element:p
					Updates an existing order.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					PUT /stores/{store_hash}/v2/orders/{id}
				Element:li
					Basic Auth >
				Element:code
					PUT /api/v2/orders/{id}
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Read-only Properties
			Node:
			(type) c
			(layer)1
				Element:p
					The following properties of the order are read-only. If one or more of these properties are included in the request, it will be rejected.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					id
				Element:li
					date_modified
				Element:li
					date_shipped
				Element:li
					status
				Element:li
					order_source
				Element:li
					subtotal_tax
				Element:li
					shipping_cost_tax
				Element:li
					shipping_cost_tax_class_id
				Element:li
					handling_cost_tax
				Element:li
					handling_cost_tax_class_id
				Element:li
					wrapping_cost_tax
				Element:li
					wrapping_cost_tax_class_id
				Element:li
					total_tax
				Element:li
					payment_status
				Element:li
					currency_id
				Element:li
					currency_code
				Element:li
					currency_exchange_rate
				Element:li
					default_currency_id
				Element:li
					default_currency_code
				Element:li
					coupon_discount
				Element:li
					store_credit_amount
				Element:li
					gift_certificate_amount
				Element:li
					shipping_address_count
				Element:li
					coupons
			Node:
			(type) c
			(layer)1
				Element:aside
				Element:span
					Known Issue
				Element:br
				Element:br
					If a store has automatic tax enabled, BigCommerce does not compute sales tax on orders updated via the API.
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Changing the Order Status
			Node:
			(type) c
			(layer)1
				Element:p
					The
				Element:code
					status
					property cannot be edited directly, because it is generated based on the
				Element:code
					status_id
					.
			Node:
			(type) c
			(layer)1
				Element:p
					Use the
				Element:code
					status_id
					property to set the order to a specific state. The list of available statuses is provided by the
				Element:a
					Order Statuses
					resource. If the store has subscribed to Avalara Premium, tax documents are submitted when the
				Element:code
					status_id
					property changes. The following table details the behavior for
				Element:code
					PUT
					operations. See also the list of
				Element:a
					Paid Statuses
					.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Existing Status
				Element:th
					Status Passed
				Element:th
					Resultant Status
				Element:th
					Avalara Tax Document Submission
				Element:tbody
				Element:tr
				Element:td
					Any
				Element:td
					None
				Element:td
				Element:code
					Pending
				Element:td
					None
				Element:tr
				Element:td
					Paid or
				Element:code
					Refunded
				Element:td
					Paid
				Element:td
					Paid
				Element:td
					None
				Element:tr
				Element:td
					Unpaid or
				Element:code
					Refunded
				Element:td
					Unpaid
				Element:td
					Unpaid
				Element:td
					None
				Element:tr
				Element:td
					Paid or
				Element:code
					Refunded
				Element:td
					Unpaid
				Element:td
					Unpaid
				Element:td
					Tax document voided
				Element:tr
				Element:td
					Unpaid or
				Element:code
					Refunded
				Element:td
					Paid
				Element:td
					Paid
				Element:td
					Tax document submitted
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Calculated Fields
			Node:
			(type) c
			(layer)1
				Element:p
					Edits to the following properties will trigger a recalculation of the subtotal and total:
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					products
				Element:li
					discount_amount
				Element:li
					shipping_cost_ex_tax
				Element:li
					shipping_cost_inc_tax
				Element:li
					handling_cost_ex_tax
				Element:li
					handling_cost_inc_tax
				Element:li
					wrapping_cost_ex_tax
				Element:li
					wrapping_cost_inc_tax
				Element:li
					billing_address
				Element:li
					shipping_addresses
			Node:
			(type) c
			(layer)1
				Element:aside
				Element:span
					Limitation on Coupons/Discounts
				Element:br
				Element:br
					The Orders resource currently does not support coupon redemptions or discounts, apart from manual discount. You should modify the above fields only if you have created the order via the POST operation, or if you intend to manually override the subtotals and totals.
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Delete an Order
			Node:
			(type) c
			(layer)1
				Element:p
					Deletes an order.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					DELETE /stores/{store_hash}/v2/orders/{id}
				Element:li
					Basic Auth >
				Element:code
					DELETE /api/v2/orders/{id}
			Node:
			(type) c
			(layer)1
				Element:aside
				Element:span
					Deletion Blocked by Automatic Tax
				Element:br
				Element:br
					Any attempts to
				Element:code
					DELETE
					an order on a store with automatic tax enabled will fail, and will return
				Element:code
					405 Method not allowed
					.
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Delete All Orders
			Node:
			(type) c
			(layer)1
				Element:p
					Deletes all orders in the store.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					DELETE /stores/{store_hash}/v2/orders
				Element:li
					Basic Auth >
				Element:code
					DELETE /api/v2/orders
			Node:
			(type) c
			(layer)1
				Element:h2
				Element:span
					Order Coupons
			Node:
			(type) c
			(layer)1
				Element:p
					Coupon code applied to an order.
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Order Coupon Object – Properties
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Name
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
					int
				Element:td
				Element:tr
				Element:td
					coupon_id
				Element:td
					int
				Element:td
				Element:tr
				Element:td
					order_id
				Element:td
					int
				Element:td
				Element:tr
				Element:td
					code
				Element:td
					string
				Element:td
				Element:tr
				Element:td
					amount
				Element:td
					decimal
				Element:td
				Element:tr
				Element:td
					type
				Element:td
					enum
				Element:td
				Element:tr
				Element:td
					discount
				Element:td
					decimal
				Element:td
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
				Element:th
				Element:tbody
				Element:tr
				Element:td
				Element:strong
					Manages
				Element:td
				Element:tr
				Element:td
				Element:strong
					OAuth Scopes
				Element:td
					store_v2_orders
				Element:tr
				Element:td
				Element:td
					store_v2_orders_read_only
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					List Order Coupons
			Node:
			(type) c
			(layer)1
				Element:p
					Gets the coupon codes applied to an order. (Default sorting is by coupon id, from lowest to highest; however, only one coupon can be applied to each order.)
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					GET /stores/{store_hash}/v2/orders/{order_id}/coupons
				Element:li
					Basic Auth >
				Element:code
					GET /api/v2/orders/{order_id}/coupons
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Filters
			Node:
			(type) c
			(layer)1
				Element:p
					There are no filter parameters specific to
				Element:code
					order_coupons
					.
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Pagination
			Node:
			(type) c
			(layer)1
				Element:p
					Parameters can be added to the URL query string to paginate the collection. The maximum limit is 250. If a limit isn’t provided, up to 50 order_coupons are returned by default.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Type
				Element:th
					Example
				Element:tbody
				Element:tr
				Element:td
					Page
				Element:td
					int
				Element:td
					/api/v2/orders/{order_id}/coupons?page={number}
				Element:tr
				Element:td
					Limit
				Element:td
					int
				Element:td
					/api/v2/orders/{order_id}/coupons?limit={count}
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"coupon_id"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"order_id"
				Element:span
					:
				Element:span
				Element:span
					115
				Element:span
					,
				Element:span
				Element:span
					"code"
				Element:span
					:
				Element:span
				Element:span
					"557D2DEA0CCAFA1"
				Element:span
					,
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"5.0000"
				Element:span
					,
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"discount"
				Element:span
					:
				Element:span
				Element:span
					"4.6600"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					]
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Get an Order Coupon
			Node:
			(type) c
			(layer)1
				Element:p
					Gets a coupon code associated with an order.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					GET /stores/{store_hash}/v2/orders/{order_id}/coupons/{id}
				Element:li
					Basic Auth >
				Element:code
					GET /api/v2/orders/{order_id}/coupons/{id}
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"coupon_id"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"order_id"
				Element:span
					:
				Element:span
				Element:span
					115
				Element:span
					,
				Element:span
				Element:span
					"code"
				Element:span
					:
				Element:span
				Element:span
					"557D2DEA0CCAFA1"
				Element:span
					,
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"5.0000"
				Element:span
					,
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"discount"
				Element:span
					:
				Element:span
				Element:span
					"4.6600"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h2
				Element:span
					Order Messages
			Node:
			(type) c
			(layer)1
				Element:p
					Messages associated with an order.
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Order Message Object – Properties
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Name
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
					int
				Element:td
				Element:tr
				Element:td
					order_id
				Element:td
					int
				Element:td
				Element:tr
				Element:td
					staff_id
				Element:td
					int
				Element:td
				Element:tr
				Element:td
					customer_id
				Element:td
					int
				Element:td
				Element:tr
				Element:td
					type
				Element:td
					enum
				Element:td
				Element:tr
				Element:td
					subject
				Element:td
					string
				Element:td
				Element:tr
				Element:td
					message
				Element:td
					text
				Element:td
				Element:tr
				Element:td
					status
				Element:td
					enum
				Element:td
				Element:tr
				Element:td
					is_flagged
				Element:td
					boolean
				Element:td
				Element:tr
				Element:td
					date_created
				Element:td
					date
				Element:td
				Element:tr
				Element:td
					customer
				Element:td
					resource
				Element:td
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
				Element:th
				Element:tbody
				Element:tr
				Element:td
				Element:strong
					Manages
				Element:td
				Element:tr
				Element:td
				Element:strong
					OAuth Scopes
				Element:td
					store_v2_orders
				Element:tr
				Element:td
				Element:td
					store_v2_orders_read_only
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					List Order Messages
			Node:
			(type) c
			(layer)1
				Element:p
					Gets the messages associated with an order.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					GET /stores/{store_hash}/v2/orders/{order_id}/messages
				Element:li
					Basic Auth >
				Element:code
					GET /api/v2/orders/{order_id}/messages
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Filters
			Node:
			(type) c
			(layer)1
				Element:p
					Filter parameters can be added to the URL query string to select specific
				Element:code
					order_message
					in the collection.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Type
				Element:th
					Example
				Element:tbody
				Element:tr
				Element:td
					min_id
				Element:td
					int
				Element:td
					/api/v2/orders/{order_id}/messages?min_id={value}
				Element:tr
				Element:td
					max_id
				Element:td
					int
				Element:td
					/api/v2/orders/{order_id}/messages?max_id={value}
				Element:tr
				Element:td
					status
				Element:td
					string
				Element:td
					/api/v2/orders/{order_id}/messages?status={value}
				Element:tr
				Element:td
					customer_id
				Element:td
					string
				Element:td
					/api/v2/orders/{order_id}/messages?customer_id={value}
				Element:tr
				Element:td
					is_flagged
				Element:td
					string
				Element:td
					/api/v2/orders/{order_id}/messages?is_flagged={value}
				Element:tr
				Element:td
					min_date_created
				Element:td
					dateTime or date
				Element:td
					/api/v2/orders/{order_id}/messages?min_date_created={value}
				Element:tr
				Element:td
					max_date_created
				Element:td
					dateTime or date
				Element:td
					/api/v2/orders/{order_id}/messages?max_date_created={value}
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Pagination
			Node:
			(type) c
			(layer)1
				Element:p
					Parameters can be added to the URL query string to paginate the collection. The maximum limit is 250. If a limit isn’t provided, up to 50
				Element:code
					order_message
					s are returned by default.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Type
				Element:th
					Example
				Element:tbody
				Element:tr
				Element:td
					page
				Element:td
					int
				Element:td
					/api/v2/orders/{order_id}/messages?page={number}
				Element:tr
				Element:td
					limit
				Element:td
					int
				Element:td
					/api/v2/orders/{order_id}/messages?limit={count}
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Get Order Message
			Node:
			(type) c
			(layer)1
				Element:p
					Gets a message associated with an order.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					GET /stores/{store_hash}/v2/orders/{order_id}/messages/{id}
				Element:li
					Basic Auth >
				Element:code
					GET /api/v2/orders/{order_id}/messages/{id}
			Node:
			(type) c
			(layer)1
				Element:h2
				Element:span
					Order Products Array
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
				Element:th
				Element:tbody
				Element:tr
				Element:td
					Managed by
				Element:td
				Element:a
					Orders Resource
			Node:
			(type) c
			(layer)1
				Element:p
					Nested inside the
				Element:a
					object, the
				Element:code
					order
				Element:code
					products
					object/array allows you to achieve several goals:
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:p
					When retrieving order(s) using a
				Element:code
					GET
					, the
				Element:code
					products
					array provides JSON and XML summaries of the product(s) in the order. For an example of the syntax, see the sample code in
				Element:a
					List Orders
					.
				Element:li
				Element:p
					When sending order(s) using a
				Element:code
					POST
					or
				Element:code
					PUT
					, the
				Element:code
					products
					array allows you to add either a product that already exists in the store, or a product that does not exist in the store. For an example of the syntax, see the sample code in
				Element:a
					Create an Order
					.
			Node:
			(type) c
			(layer)1
				Element:aside
				Element:span
					Updates Are Additive
				Element:br
				Element:br
					Values passed for the
				Element:code
					products
					array to a
				Element:code
					PUT
					are appended to any existing values. You cannot use a
				Element:code
					PUT
					to overwrite existing
				Element:code
					products
					values.
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Retrieving Product Information using GET
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Name
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					url
				Element:td
					string
				Element:td
					The URI of a JSON object containing the product details.
				Element:tr
				Element:td
					resource
				Element:td
					string
				Element:td
					A context path that provides an alternate means of retrieving the data (for example, if you prefer XML).
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Adding an Existing Product (that Already Exists in the Store) to the Order
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Name
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					product_id
				Element:td
					int
				Element:td
					The ID of the product that you want to add to the order (required).
				Element:tr
				Element:td
					quantity
				Element:td
					int
				Element:td
					How many products of this type to add to the order (required).
				Element:tr
				Element:td
					product_options
				Element:td
					array
				Element:td
					These values might be required, depending on how the product’s options are set up. If the options are required, pass in the
				Element:a
					of the product option (not the option itself) and the
				Element:code
					id
				Element:a
					of the option (not the product).
				Element:code
					value
				Element:tr
				Element:td
					price_inc_tax
				Element:td
					int
				Element:td
					If you include a value here, it will overwrite the price (including tax) already specified for the product. This property is optional, but if you do include a value for
				Element:code
					price_inc_tax
					, you must also include a value for
				Element:code
					price_ex_tax
					.
				Element:tr
				Element:td
					price_ex_tax
				Element:td
					int
				Element:td
					If you include a value here, it will overwrite the price (excluding tax) already specified for the product. This property is optional, but if you do include a value for
				Element:code
					price_ex_tax
					, you must also include a value for
				Element:code
					price_inc_tax
					.
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Adding a New Product (that Does Not Already Exist in the Store) to the Order
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Name
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					name
				Element:td
					int
				Element:td
					The name of the custom product tax. (Required.)
				Element:tr
				Element:td
					quantity
				Element:td
					int
				Element:td
					The quantity of the purchase for this custom product tax. (Required. Can be positive or negative. Cannot be zero.)
				Element:tr
				Element:td
					price_inc_tax
				Element:td
					decimal
				Element:td
					The price of the custom product, including tax. (Required.)
				Element:tr
				Element:td
					price_ex_tax
				Element:td
					decimal
				Element:td
					The price of the custom product, excluding tax. (Required.)
				Element:tr
				Element:td
					sku
				Element:td
					text
				Element:td
					The SKU of the custom product. (Optional.)
			Node:
			(type) c
			(layer)1
				Element:h2
				Element:span
					Order Products
			Node:
			(type) c
			(layer)1
				Element:p
					Product line item belonging to an order.
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Order Product Object – Properties
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Name
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
					int
				Element:td
				Element:tr
				Element:td
					order_id
				Element:td
					int
				Element:td
				Element:tr
				Element:td
					product_id
				Element:td
					int
				Element:td
				Element:tr
				Element:td
					order_address_id
				Element:td
					int
				Element:td
				Element:tr
				Element:td
					name
				Element:td
					string
				Element:td
				Element:tr
				Element:td
					sku
				Element:td
					string
				Element:td
				Element:tr
				Element:td
					type
				Element:td
					enum
				Element:td
				Element:tr
				Element:td
					base_price
				Element:td
					decimal
				Element:td
				Element:tr
				Element:td
					price_ex_tax
				Element:td
					decimal
				Element:td
				Element:tr
				Element:td
					price_inc_tax
				Element:td
					decimal
				Element:td
				Element:tr
				Element:td
					price_tax
				Element:td
					decimal
				Element:td
				Element:tr
				Element:td
					base_total
				Element:td
					decimal
				Element:td
				Element:tr
				Element:td
					total_ex_tax
				Element:td
					decimal
				Element:td
				Element:tr
				Element:td
					total_inc_tax
				Element:td
					decimal
				Element:td
				Element:tr
				Element:td
					total_tax
				Element:td
					decimal
				Element:td
				Element:tr
				Element:td
					weight
				Element:td
					decimal
				Element:td
				Element:tr
				Element:td
					quantity
				Element:td
					int
				Element:td
				Element:tr
				Element:td
					base_cost_price
				Element:td
					decimal
				Element:td
				Element:tr
				Element:td
					cost_price_inc_tax
				Element:td
					decimal
				Element:td
				Element:tr
				Element:td
					cost_price_ex_tax
				Element:td
					decimal
				Element:td
				Element:tr
				Element:td
					cost_price_tax
				Element:td
					decimal
				Element:td
				Element:tr
				Element:td
					is_refunded
				Element:td
					boolean
				Element:td
				Element:tr
				Element:td
					refund_amount
				Element:td
					decimal
				Element:td
				Element:tr
				Element:td
					return_id
				Element:td
					int
				Element:td
				Element:tr
				Element:td
					wrapping_name
				Element:td
					string
				Element:td
				Element:tr
				Element:td
					base_wrapping_cost
				Element:td
					decimal
				Element:td
				Element:tr
				Element:td
					wrapping_cost_ex_tax
				Element:td
					decimal
				Element:td
				Element:tr
				Element:td
					wrapping_cost_inc_tax
				Element:td
					decimal
				Element:td
				Element:tr
				Element:td
					wrapping_cost_tax
				Element:td
					decimal
				Element:td
				Element:tr
				Element:td
					wrapping_message
				Element:td
					text
				Element:td
				Element:tr
				Element:td
					quantity_shipped
				Element:td
					int
				Element:td
				Element:tr
				Element:td
					event_name
				Element:td
					string
				Element:td
				Element:tr
				Element:td
					event_date
				Element:td
					date
				Element:td
				Element:tr
				Element:td
					fixed_shipping_cost
				Element:td
					decimal
				Element:td
				Element:tr
				Element:td
					ebay_item_id
				Element:td
					string
				Element:td
				Element:tr
				Element:td
					ebay_transaction_id
				Element:td
					string
				Element:td
				Element:tr
				Element:td
					option_set_id
				Element:td
					int
				Element:td
				Element:tr
				Element:td
					parent_order_product_id
				Element:td
					int
				Element:td
				Element:tr
				Element:td
					is_bundled_product
				Element:td
					boolean
				Element:td
				Element:tr
				Element:td
					bin_picking_number
				Element:td
					string
				Element:td
				Element:tr
				Element:td
					applied_discounts
				Element:td
					object
				Element:td
				Element:tr
				Element:td
					product_options
				Element:td
					object_array
				Element:td
				Element:tr
				Element:td
					configurable_fields
				Element:td
					object_array
				Element:td
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
				Element:th
				Element:tbody
				Element:tr
				Element:td
				Element:strong
					Manages
				Element:td
				Element:tr
				Element:td
				Element:strong
					OAuth Scopes
				Element:td
					store_v2_orders
				Element:tr
				Element:td
				Element:td
					store_v2_orders_read_only
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					List Order Products
			Node:
			(type) c
			(layer)1
				Element:p
					Gets the product line items associated with an order. (By default, items sort from lowest to highest according to a newly created id, separate from the order_id and the product_id.)
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					GET /stores/{store_hash}/v2/orders/{order_id}/products
				Element:li
					Basic Auth >
				Element:code
					GET /api/v2/orders/{order_id}/products
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Filters
			Node:
			(type) c
			(layer)1
				Element:p
					There are no filter parameters specific to
				Element:code
					order products
					.
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Pagination
			Node:
			(type) c
			(layer)1
				Element:p
					Parameters can be added to the URL query string to paginate the collection. The maximum limit is 250. If a limit isn’t provided, up to 50 order_products are returned by default.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Type
				Element:th
					Example
				Element:tbody
				Element:tr
				Element:td
					Page
				Element:td
					int
				Element:td
					/api/v2/orders/{order_id}/products?page={number}
				Element:tr
				Element:td
					Limit
				Element:td
					int
				Element:td
					/api/v2/orders/{order_id}/products?limit={count}
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					16
				Element:span
					,
				Element:span
				Element:span
					"order_id"
				Element:span
					:
				Element:span
				Element:span
					115
				Element:span
					,
				Element:span
				Element:span
					"product_id"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"order_address_id"
				Element:span
					:
				Element:span
				Element:span
					16
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Cynthia Gilbert Signature Collection"
				Element:span
					,
				Element:span
				Element:span
					"sku"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"physical"
				Element:span
					,
				Element:span
				Element:span
					"base_price"
				Element:span
					:
				Element:span
				Element:span
					"93.1800"
				Element:span
					,
				Element:span
				Element:span
					"price_ex_tax"
				Element:span
					:
				Element:span
				Element:span
					"93.1800"
				Element:span
					,
				Element:span
				Element:span
					"price_inc_tax"
				Element:span
					:
				Element:span
				Element:span
					"93.1800"
				Element:span
					,
				Element:span
				Element:span
					"price_tax"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"base_total"
				Element:span
					:
				Element:span
				Element:span
					"93.1800"
				Element:span
					,
				Element:span
				Element:span
					"total_ex_tax"
				Element:span
					:
				Element:span
				Element:span
					"93.1800"
				Element:span
					,
				Element:span
				Element:span
					"total_inc_tax"
				Element:span
					:
				Element:span
				Element:span
					"93.1800"
				Element:span
					,
				Element:span
				Element:span
					"total_tax"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"weight"
				Element:span
					:
				Element:span
				Element:span
					"0"
				Element:span
					,
				Element:span
				Element:span
					"quantity"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"base_cost_price"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"cost_price_inc_tax"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"cost_price_ex_tax"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"cost_price_tax"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"is_refunded"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"refund_amount"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"return_id"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"wrapping_name"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"base_wrapping_cost"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"wrapping_cost_ex_tax"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"wrapping_cost_inc_tax"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"wrapping_cost_tax"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"wrapping_message"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"quantity_shipped"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"event_name"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"event_date"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"fixed_shipping_cost"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"ebay_item_id"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"ebay_transaction_id"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"option_set_id"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"parent_order_product_id"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"is_bundled_product "
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"bin_picking_number"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"applied_discounts"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"coupon"
				Element:span
					,
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					4.66
				Element:span
				Element:span
					}
				Element:span
				Element:span
					],
				Element:span
				Element:span
					"product_options"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					],
				Element:span
				Element:span
					"configurable_fields"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					]
				Element:span
				Element:span
					}
				Element:span
				Element:span
					]
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Get an Order Product
			Node:
			(type) c
			(layer)1
				Element:p
					Gets a product line item associated with the order.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					GET /stores/{store_hash}/v2/orders/{order_id}/products/{id}
				Element:li
					Basic Auth >
				Element:code
					GET /api/v2/orders/{order_id}/products/{id}
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					15
				Element:span
					,
				Element:span
				Element:span
					"order_id"
				Element:span
					:
				Element:span
				Element:span
					114
				Element:span
					,
				Element:span
				Element:span
					"first_name"
				Element:span
					:
				Element:span
				Element:span
					"Julie"
				Element:span
					,
				Element:span
				Element:span
					"last_name"
				Element:span
					:
				Element:span
				Element:span
					"Bishop"
				Element:span
					,
				Element:span
				Element:span
					"company"
				Element:span
					:
				Element:span
				Element:span
					"Yamia"
				Element:span
					,
				Element:span
				Element:span
					"street_1"
				Element:span
					:
				Element:span
				Element:span
					"988 Comanche Circle"
				Element:span
					,
				Element:span
				Element:span
					"street_2"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"city"
				Element:span
					:
				Element:span
				Element:span
					"Cypress"
				Element:span
					,
				Element:span
				Element:span
					"zip"
				Element:span
					:
				Element:span
				Element:span
					"77426-2265"
				Element:span
					,
				Element:span
				Element:span
					"country"
				Element:span
					:
				Element:span
				Element:span
					"United States"
				Element:span
					,
				Element:span
				Element:span
					"country_iso2"
				Element:span
					:
				Element:span
				Element:span
					"US"
				Element:span
					,
				Element:span
				Element:span
					"state"
				Element:span
					:
				Element:span
				Element:span
					"Wyoming"
				Element:span
					,
				Element:span
				Element:span
					"email"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"phone"
				Element:span
					:
				Element:span
				Element:span
					"5-(248)906-2014"
				Element:span
					,
				Element:span
				Element:span
					"items_total"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"items_shipped"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"shipping_method"
				Element:span
					:
				Element:span
				Element:span
					"None"
				Element:span
					,
				Element:span
				Element:span
					"base_cost"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"cost_ex_tax"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"cost_inc_tax"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"cost_tax"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"cost_tax_class_id"
				Element:span
					:
				Element:span
				Element:span
					2
				Element:span
					,
				Element:span
				Element:span
					"base_handling_cost"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"handling_cost_ex_tax"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"handling_cost_inc_tax"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"handling_cost_tax"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"handling_cost_tax_class_id"
				Element:span
					:
				Element:span
				Element:span
					2
				Element:span
					,
				Element:span
				Element:span
					"shipping_zone_id"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"shipping_zone_name"
				Element:span
					:
				Element:span
				Element:span
					"Default Zone"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Get a Count of Order Products
			Node:
			(type) c
			(layer)1
				Element:p
					Gets a count of order product line items.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					GET /stores/{store_hash}/v2/orders/products/count
				Element:li
					Basic Auth >
				Element:code
					GET /api/v2/orders/products/count
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"count"
				Element:span
					:
				Element:span
				Element:span
					17
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h2
				Element:span
					Order Shipping Addresses
			Node:
			(type) c
			(layer)1
				Element:p
					Customer shipping address belonging to an order.
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Order Shipping Address Object – Properties
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Name
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
					int
				Element:td
				Element:tr
				Element:td
					order_id
				Element:td
					int
				Element:td
				Element:tr
				Element:td
					first_name
				Element:td
					string
				Element:td
				Element:tr
				Element:td
					last_name
				Element:td
					string
				Element:td
				Element:tr
				Element:td
					company
				Element:td
					string
				Element:td
				Element:tr
				Element:td
					street_1
				Element:td
					string
				Element:td
				Element:tr
				Element:td
					street_2
				Element:td
					string
				Element:td
				Element:tr
				Element:td
					city
				Element:td
					string
				Element:td
				Element:tr
				Element:td
					zip
				Element:td
					string
				Element:td
				Element:tr
				Element:td
					country
				Element:td
					string
				Element:td
				Element:tr
				Element:td
					country_iso2
				Element:td
					string
				Element:td
				Element:tr
				Element:td
					state
				Element:td
					string
				Element:td
					The name of the state. Should be spelled out in full, e.g.:
				Element:code
					California
					.
				Element:tr
				Element:td
					email
				Element:td
					string
				Element:td
				Element:tr
				Element:td
					phone
				Element:td
					string
				Element:td
				Element:tr
				Element:td
					items_total
				Element:td
					int
				Element:td
				Element:tr
				Element:td
					items_shipped
				Element:td
					int
				Element:td
				Element:tr
				Element:td
					shipping_method
				Element:td
					string
				Element:td
				Element:tr
				Element:td
					base_cost
				Element:td
					decimal
				Element:td
				Element:tr
				Element:td
					cost_ex_tax
				Element:td
					decimal
				Element:td
				Element:tr
				Element:td
					cost_inc_tax
				Element:td
					decimal
				Element:td
				Element:tr
				Element:td
					cost_tax
				Element:td
					decimal
				Element:td
				Element:tr
				Element:td
					cost_tax_class_id
				Element:td
					int
				Element:td
				Element:tr
				Element:td
					base_handling_cost
				Element:td
					decimal
				Element:td
				Element:tr
				Element:td
					handling_cost_ex_tax
				Element:td
					decimal
				Element:td
				Element:tr
				Element:td
					handling_cost_inc_tax
				Element:td
					decimal
				Element:td
				Element:tr
				Element:td
					handling_cost_tax
				Element:td
					decimal
				Element:td
				Element:tr
				Element:td
					handling_cost_tax_class_id
				Element:td
					int
				Element:td
				Element:tr
				Element:td
					shipping_zone_id
				Element:td
					int
				Element:td
				Element:tr
				Element:td
					shipping_zone_name
				Element:td
					string
				Element:td
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
				Element:th
				Element:tbody
				Element:tr
				Element:td
				Element:strong
					Manages
				Element:td
				Element:tr
				Element:td
				Element:strong
					OAuth Scopes
				Element:td
					store_v2_orders
				Element:tr
				Element:td
				Element:td
					store_v2_orders_read_only
			Node:
			(type) c
			(layer)1
				Element:h3
					List Order Shipping Addresses
			Node:
			(type) c
			(layer)1
				Element:p
					Gets the shipping addresses associated with an order.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					GET /stores/{store_hash}/v2/orders/{order_id}/shipping_addresses
				Element:li
					Basic Auth >
				Element:code
					GET /api/v2/orders/{order_id}/shipping_addresses
			Node:
			(type) c
			(layer)1
				Element:h4
					Filters
			Node:
			(type) c
			(layer)1
				Element:p
					There are no filter parameters specific to order shipping addresses.
			Node:
			(type) c
			(layer)1
				Element:h4
					Pagination
			Node:
			(type) c
			(layer)1
				Element:p
					Parameters can be added to the URL query string to paginate the collection. The maximum limit is 250. If a limit isn’t provided, up to 50 order_shipping_addresses are returned by default.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Type
				Element:th
					Example
				Element:tbody
				Element:tr
				Element:td
					page
				Element:td
					int
				Element:td
					/api/v2/orders/{order_id}/shipping_addresses?page={number}
				Element:tr
				Element:td
					limit
				Element:td
					int
				Element:td
					/api/v2/orders/{order_id}/shipping_addresses?limit={count}
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					15
				Element:span
					,
				Element:span
				Element:span
					"order_id"
				Element:span
					:
				Element:span
				Element:span
					114
				Element:span
					,
				Element:span
				Element:span
					"first_name"
				Element:span
					:
				Element:span
				Element:span
					"Julie"
				Element:span
					,
				Element:span
				Element:span
					"last_name"
				Element:span
					:
				Element:span
				Element:span
					"Bishop"
				Element:span
					,
				Element:span
				Element:span
					"company"
				Element:span
					:
				Element:span
				Element:span
					"Yamia"
				Element:span
					,
				Element:span
				Element:span
					"street_1"
				Element:span
					:
				Element:span
				Element:span
					"988 Comanche Circle"
				Element:span
					,
				Element:span
				Element:span
					"street_2"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"city"
				Element:span
					:
				Element:span
				Element:span
					"Cypress"
				Element:span
					,
				Element:span
				Element:span
					"zip"
				Element:span
					:
				Element:span
				Element:span
					"77426-2265"
				Element:span
					,
				Element:span
				Element:span
					"country"
				Element:span
					:
				Element:span
				Element:span
					"United States"
				Element:span
					,
				Element:span
				Element:span
					"country_iso2"
				Element:span
					:
				Element:span
				Element:span
					"US"
				Element:span
					,
				Element:span
				Element:span
					"state"
				Element:span
					:
				Element:span
				Element:span
					"Wyoming"
				Element:span
					,
				Element:span
				Element:span
					"email"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"phone"
				Element:span
					:
				Element:span
				Element:span
					"5-(248)906-2014"
				Element:span
					,
				Element:span
				Element:span
					"items_total"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"items_shipped"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"shipping_method"
				Element:span
					:
				Element:span
				Element:span
					"None"
				Element:span
					,
				Element:span
				Element:span
					"base_cost"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"cost_ex_tax"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"cost_inc_tax"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"cost_tax"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"cost_tax_class_id"
				Element:span
					:
				Element:span
				Element:span
					2
				Element:span
					,
				Element:span
				Element:span
					"base_handling_cost"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"handling_cost_ex_tax"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"handling_cost_inc_tax"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"handling_cost_tax"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"handling_cost_tax_class_id"
				Element:span
					:
				Element:span
				Element:span
					2
				Element:span
					,
				Element:span
				Element:span
					"shipping_zone_id"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"shipping_zone_name"
				Element:span
					:
				Element:span
				Element:span
					"Default Zone"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					]
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
					Get an Order Shipping Address
			Node:
			(type) c
			(layer)1
				Element:p
					Gets a shipping address associated with an order.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					GET /stores/{store_hash}/v2/orders/{order_id}/shipping_addresses/{id}
				Element:li
					Basic Auth >
				Element:code
					GET /api/v2/orders/{order_id}/shipping_addresses/{id}
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					15
				Element:span
					,
				Element:span
				Element:span
					"order_id"
				Element:span
					:
				Element:span
				Element:span
					114
				Element:span
					,
				Element:span
				Element:span
					"first_name"
				Element:span
					:
				Element:span
				Element:span
					"Julie"
				Element:span
					,
				Element:span
				Element:span
					"last_name"
				Element:span
					:
				Element:span
				Element:span
					"Bishop"
				Element:span
					,
				Element:span
				Element:span
					"company"
				Element:span
					:
				Element:span
				Element:span
					"Yamia"
				Element:span
					,
				Element:span
				Element:span
					"street_1"
				Element:span
					:
				Element:span
				Element:span
					"988 Comanche Circle"
				Element:span
					,
				Element:span
				Element:span
					"street_2"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"city"
				Element:span
					:
				Element:span
				Element:span
					"Cypress"
				Element:span
					,
				Element:span
				Element:span
					"zip"
				Element:span
					:
				Element:span
				Element:span
					"77426-2265"
				Element:span
					,
				Element:span
				Element:span
					"country"
				Element:span
					:
				Element:span
				Element:span
					"United States"
				Element:span
					,
				Element:span
				Element:span
					"country_iso2"
				Element:span
					:
				Element:span
				Element:span
					"US"
				Element:span
					,
				Element:span
				Element:span
					"state"
				Element:span
					:
				Element:span
				Element:span
					"Wyoming"
				Element:span
					,
				Element:span
				Element:span
					"email"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"phone"
				Element:span
					:
				Element:span
				Element:span
					"5-(248)906-2014"
				Element:span
					,
				Element:span
				Element:span
					"items_total"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"items_shipped"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"shipping_method"
				Element:span
					:
				Element:span
				Element:span
					"None"
				Element:span
					,
				Element:span
				Element:span
					"base_cost"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"cost_ex_tax"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"cost_inc_tax"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"cost_tax"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"cost_tax_class_id"
				Element:span
					:
				Element:span
				Element:span
					2
				Element:span
					,
				Element:span
				Element:span
					"base_handling_cost"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"handling_cost_ex_tax"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"handling_cost_inc_tax"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"handling_cost_tax"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"handling_cost_tax_class_id"
				Element:span
					:
				Element:span
				Element:span
					2
				Element:span
					,
				Element:span
				Element:span
					"shipping_zone_id"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"shipping_zone_name"
				Element:span
					:
				Element:span
				Element:span
					"Default Zone"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
					Get a Count of Shipping Addresses
			Node:
			(type) c
			(layer)1
				Element:p
					Gets a count of the number of shipping addresses on an order.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					GET /stores/{store_hash}/v2/orders/{order_id}/shipping_addresses/count
				Element:li
					Basic Auth >
				Element:code
					GET /api/v2/orders/{order_id}/shipping_addresses/count
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"count"
				Element:span
					:
				Element:span
				Element:span
					6
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h2
				Element:span
					Order Statuses
			Node:
			(type) c
			(layer)1
				Element:p
					Each order status represents a state in the order fulfillment workflow.
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Order Status Object – Properties
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Name
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
					int
				Element:td
				Element:tr
				Element:td
					name
				Element:td
					string
				Element:td
				Element:tr
				Element:td
					order
				Element:td
					int
				Element:td
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
				Element:th
				Element:tbody
				Element:tr
				Element:td
				Element:strong
					Manages
				Element:td
				Element:tr
				Element:td
				Element:strong
					OAuth Scopes
				Element:td
					store_v2_orders
				Element:tr
				Element:td
				Element:td
					store_v2_orders_read_only
			Node:
			(type) c
			(layer)1
				Element:h3
					List Order Statuses
			Node:
			(type) c
			(layer)1
				Element:p
					Gets the list of order statuses.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					GET /stores/{store_hash}/v2/order_statuses
				Element:li
					Basic Auth >
				Element:code
					GET /api/v2/order_statuses
			Node:
			(type) c
			(layer)1
				Element:h4
					Filters
			Node:
			(type) c
			(layer)1
				Element:p
					There are no filter parameters specific to
				Element:code
					order_statuses
					.
			Node:
			(type) c
			(layer)1
				Element:h4
					Pagination
			Node:
			(type) c
			(layer)1
				Element:p
					Parameters can be added to the URL query string to paginate the collection. The maximum limit is 250. If a limit isn’t provided, up to 50 order_statuses are returned by default.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Type
				Element:th
					Example
				Element:tbody
				Element:tr
				Element:td
					page
				Element:td
					int
				Element:td
					/api/v2/order_statuses?page={number}
				Element:tr
				Element:td
					limit
				Element:td
					int
				Element:td
					/api/v2/order_statuses?limit={count}
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Incomplete"
				Element:span
					,
				Element:span
				Element:span
					"order"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"1"
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Pending"
				Element:span
					,
				Element:span
				Element:span
					"order"
				Element:span
					:
				Element:span
				Element:span
					"1"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"2"
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Shipped"
				Element:span
					,
				Element:span
				Element:span
					"order"
				Element:span
					:
				Element:span
				Element:span
					"8"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"3"
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Partially Shipped"
				Element:span
					,
				Element:span
				Element:span
					"order"
				Element:span
					:
				Element:span
				Element:span
					"6"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"4"
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Refunded"
				Element:span
					,
				Element:span
				Element:span
					"order"
				Element:span
					:
				Element:span
				Element:span
					"11"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"5"
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Cancelled"
				Element:span
					,
				Element:span
				Element:span
					"order"
				Element:span
					:
				Element:span
				Element:span
					"9"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"6"
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Declined"
				Element:span
					,
				Element:span
				Element:span
					"order"
				Element:span
					:
				Element:span
				Element:span
					"10"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"7"
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Awaiting Payment"
				Element:span
					,
				Element:span
				Element:span
					"order"
				Element:span
					:
				Element:span
				Element:span
					"2"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"8"
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Awaiting Pickup"
				Element:span
					,
				Element:span
				Element:span
					"order"
				Element:span
					:
				Element:span
				Element:span
					"5"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"9"
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Awaiting Shipment"
				Element:span
					,
				Element:span
				Element:span
					"order"
				Element:span
					:
				Element:span
				Element:span
					"4"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"10"
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Completed"
				Element:span
					,
				Element:span
				Element:span
					"order"
				Element:span
					:
				Element:span
				Element:span
					"7"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"11"
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Awaiting Fulfillment"
				Element:span
					,
				Element:span
				Element:span
					"order"
				Element:span
					:
				Element:span
				Element:span
					"3"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"12"
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Manual Verification Required"
				Element:span
					,
				Element:span
				Element:span
					"order"
				Element:span
					:
				Element:span
				Element:span
					"13"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"13"
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Disputed"
				Element:span
					,
				Element:span
				Element:span
					"order"
				Element:span
					:
				Element:span
				Element:span
					"12"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					]
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
					Get an Order Status
			Node:
			(type) c
			(layer)1
				Element:p
					Gets a single order status.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					GET /stores/{store_hash}/v2/order_statuses/{id}
				Element:li
					Basic Auth >
				Element:code
					GET /api/v2/order_statuses/{id}
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"12"
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Manual Verification Required"
				Element:span
					,
				Element:span
				Element:span
					"order"
				Element:span
					:
				Element:span
				Element:span
					"12"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h2
				Element:span
					Order Taxes
			Node:
			(type) c
			(layer)1
				Element:p
					Each tax applied to an order. This information can be useful for reporting purposes. All values are read-only.
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Order Tax Object – Properties
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Name
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
					int
				Element:td
					The unique numeric identifier of the taxes object.
				Element:tr
				Element:td
					order_id
				Element:td
					int
				Element:td
					The unique numeric identifier of the order to which the tax was applied. NOTE: Not included if the store was using the automatic tax feature.
				Element:tr
				Element:td
					order_address_id
				Element:td
					int
				Element:td
					The unique numeric identifier of the order address object associated with the order. NOTE: Not included if the store was using the automatic tax feature.
				Element:tr
				Element:td
					tax_rate_id
				Element:td
					int
				Element:td
				Element:tr
				Element:td
					tax_class_id
				Element:td
					int
				Element:td
					The unique numeric identifier of the tax class object. NOTE: will be 0 if automatic tax was enabled or if the default tax class was used.
				Element:tr
				Element:td
					name
				Element:td
					string
				Element:td
					The name of the tax class object.
				Element:tr
				Element:td
					class
				Element:td
					string
				Element:td
					The name of the type of tax that was applied. NOTE: will be “Automatic Tax” if automatic tax was enabled.
				Element:tr
				Element:td
					rate
				Element:td
					decimal
				Element:td
					The tax rate in percentage form.
				Element:tr
				Element:td
					priority
				Element:td
					int
				Element:td
				Element:tr
				Element:td
					priority_amount
				Element:td
					decimal
				Element:td
				Element:tr
				Element:td
					line_amount
				Element:td
					decimal
				Element:td
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
				Element:th
				Element:tbody
				Element:tr
				Element:td
				Element:strong
					Manages
				Element:td
				Element:tr
				Element:td
				Element:strong
					OAuth Scopes
				Element:td
					store_v2_orders
				Element:tr
				Element:td
				Element:td
					store_v2_orders_read_only
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					List Order Taxes
			Node:
			(type) c
			(layer)1
				Element:p
					Gets the list of taxes applied to an order.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					GET /stores/{store_hash}/v2/orders/{order_id}/taxes
				Element:li
					Basic Auth >
				Element:code
					GET /api/v2/orders/{order_id}/taxes
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Filters
			Node:
			(type) c
			(layer)1
				Element:p
					There are no filter parameters specific to order tax.
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Pagination
			Node:
			(type) c
			(layer)1
				Element:p
					Parameters can be added to the URL query string to paginate the collection. The maximum limit is 250. If a limit isn’t provided, up to 50 order_taxes are returned by default.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Type
				Element:th
					Example
				Element:tbody
				Element:tr
				Element:td
				Element:code
					Page
				Element:td
					int
				Element:td
				Element:code
					/api/v2/orders/{order_id}/taxes?page={number}
				Element:tr
				Element:td
				Element:code
					Limit
				Element:td
					int
				Element:td
				Element:code
					/api/v2/orders/{order_id}/taxes?limit={count}
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Get an Order Tax
			Node:
			(type) c
			(layer)1
				Element:p
					Gets an order tax item.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					GET /stores/{store_hash}/v2/orders/{order_id}/taxes/{id}
				Element:li
					Basic Auth >
				Element:code
					GET /api/v2/orders/{order_id}/taxes/{id}
			Node:
			(type) c
			(layer)1
				Element:h2
				Element:span
					Shipments
			Node:
			(type) c
			(layer)1
				Element:p
					Tracks a package consignment from an order that is shipped from the seller to the buyer.
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Shipment Object – Properties
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Name
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
					int
				Element:td
					Shipment ID.
				Element:tr
				Element:td
					order_id
				Element:td
					int
				Element:td
					ID of the order associated with this shipment.
				Element:tr
				Element:td
					customer_id
				Element:td
					int
				Element:td
					ID of this order’s customer.
				Element:tr
				Element:td
					order_address_id
				Element:td
					int
				Element:td
					ID of the associated order address.
				Element:tr
				Element:td
					date_created
				Element:td
					date
				Element:td
					Creation date for the shipment.
				Element:tr
				Element:td
					tracking_number
				Element:td
					string
				Element:td
					Tracking number of the shipment.
				Element:tr
				Element:td
					shipping_method
				Element:td
					string
				Element:td
					Extra detail to describe the shipment, with values like:
				Element:code
					Standard
					,
				Element:br
				Element:code
					My Custom Shipping Method Name
					, etc. Can also be used for live quotes from some shipping providers.
				Element:tr
				Element:td
					shipping_provider
				Element:td
					string
				Element:td
					Enum of the BigCommerce shipping-carrier integration/module.
				Element:br
					(
				Element:strong
					Note:
					This property should be included in a POST request to create a shipment object. If it is omitted from the request, the property’s value will default to
				Element:code
					custom
					, and no tracking link will be generated in the email. To avoid this behavior, you can pass the property as an empty string.)
				Element:tr
				Element:td
					tracking_carrier
				Element:td
					string
				Element:td
					Enum of the delivery service fulfilling the shipment.
				Element:tr
				Element:td
					comments
				Element:td
					text
				Element:td
					Comments the shipper wishes to add.
				Element:tr
				Element:td
					billing_address
				Element:td
					object
				Element:td
					Billing address for this order’s customer.
				Element:tr
				Element:td
					shipping_address
				Element:td
					object
				Element:td
					Shipping address for this order’s customer.
				Element:tr
				Element:td
					items
				Element:td
					object_array
				Element:td
					The items in the shipment. This object has the following members, all integer:
				Element:code
					order_product_id
					(required),
				Element:code
					quantity
					(required),
				Element:code
					product_id
					(read-only). A sample
				Element:code
					items
					value might be:
				Element:code
					[ {"order_product_id":16,"product_id": 0,"quantity":2} ]
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
				Element:th
				Element:tbody
				Element:tr
				Element:td
				Element:strong
					Manages
				Element:td
				Element:tr
				Element:td
				Element:strong
					OAuth Scopes
				Element:td
					store_v2_orders
				Element:tr
				Element:td
				Element:td
					store_v2_orders_read_only
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					List Shipments
			Node:
			(type) c
			(layer)1
				Element:p
					Gets the shipments associated with an order.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					GET /stores/{store_hash}/v2/orders/{order_id}/shipments
				Element:li
					Basic Auth >
				Element:code
					GET /api/v2/orders/{order_id}/shipments
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Filters
			Node:
			(type) c
			(layer)1
				Element:p
					There are no filter parameters specific to
				Element:code
					shipments
					.
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Pagination
			Node:
			(type) c
			(layer)1
				Element:p
					Parameters can be added to the URL query string to paginate the collection. The maximum limit is 250. If a limit isn’t provided, up to 50 shipments are returned by default.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Type
				Element:th
					Example
				Element:tbody
				Element:tr
				Element:td
					page
				Element:td
					int
				Element:td
					/api/v2/orders/{order_id}/shipments?page={number}
				Element:tr
				Element:td
					limit
				Element:td
					int
				Element:td
					/api/v2/orders/{order_id}/shipments?limit={count}
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"order_id"
				Element:span
					:
				Element:span
				Element:span
					115
				Element:span
					,
				Element:span
				Element:span
					"customer_id"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"order_address_id"
				Element:span
					:
				Element:span
				Element:span
					16
				Element:span
					,
				Element:span
				Element:span
					"date_created"
				Element:span
					:
				Element:span
				Element:span
					"Wed, 19 Dec 2012 17:17:10 +0000"
				Element:span
					,
				Element:span
				Element:span
					"tracking_number"
				Element:span
					:
				Element:span
				Element:span
					"111222333444"
				Element:span
					,
				Element:span
				Element:span
					"shipping_method"
				Element:span
					:
				Element:span
				Element:span
					"None"
				Element:span
					,
				Element:span
				Element:span
					"shipping_provider"
				Element:span
					:
				Element:span
				Element:span
					"ups"
				Element:span
					,
				Element:span
				Element:span
					"tracking_carrier"
				Element:span
					:
				Element:span
				Element:span
					"ups"
				Element:span
					,
				Element:span
				Element:span
					"comments"
				Element:span
					:
				Element:span
				Element:span
					"A sample shipment for order 115"
				Element:span
					,
				Element:span
				Element:span
					"billing_address"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"first_name"
				Element:span
					:
				Element:span
				Element:span
					"Louise"
				Element:span
					,
				Element:span
				Element:span
					"last_name"
				Element:span
					:
				Element:span
				Element:span
					"Dean"
				Element:span
					,
				Element:span
				Element:span
					"company"
				Element:span
					:
				Element:span
				Element:span
					"Skiptube"
				Element:span
					,
				Element:span
				Element:span
					"street_1"
				Element:span
					:
				Element:span
				Element:span
					"147 Meadow Vale Way"
				Element:span
					,
				Element:span
				Element:span
					"street_2"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"city"
				Element:span
					:
				Element:span
				Element:span
					"Fullerton"
				Element:span
					,
				Element:span
				Element:span
					"state"
				Element:span
					:
				Element:span
				Element:span
					"Rhode Island"
				Element:span
					,
				Element:span
				Element:span
					"zip"
				Element:span
					:
				Element:span
				Element:span
					"74674"
				Element:span
					,
				Element:span
				Element:span
					"country"
				Element:span
					:
				Element:span
				Element:span
					"United States"
				Element:span
					,
				Element:span
				Element:span
					"country_iso2"
				Element:span
					:
				Element:span
				Element:span
					"US"
				Element:span
					,
				Element:span
				Element:span
					"phone"
				Element:span
					:
				Element:span
				Element:span
					"7-(086)085-9448"
				Element:span
					,
				Element:span
				Element:span
					"email"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"shipping_address"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"first_name"
				Element:span
					:
				Element:span
				Element:span
					"Louise"
				Element:span
					,
				Element:span
				Element:span
					"last_name"
				Element:span
					:
				Element:span
				Element:span
					"Dean"
				Element:span
					,
				Element:span
				Element:span
					"company"
				Element:span
					:
				Element:span
				Element:span
					"Skiptube"
				Element:span
					,
				Element:span
				Element:span
					"street_1"
				Element:span
					:
				Element:span
				Element:span
					"147 Meadow Vale Way"
				Element:span
					,
				Element:span
				Element:span
					"street_2"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"city"
				Element:span
					:
				Element:span
				Element:span
					"Fullerton"
				Element:span
					,
				Element:span
				Element:span
					"state"
				Element:span
					:
				Element:span
				Element:span
					"Rhode Island"
				Element:span
					,
				Element:span
				Element:span
					"zip"
				Element:span
					:
				Element:span
				Element:span
					"74674"
				Element:span
					,
				Element:span
				Element:span
					"country"
				Element:span
					:
				Element:span
				Element:span
					"United States"
				Element:span
					,
				Element:span
				Element:span
					"country_iso2"
				Element:span
					:
				Element:span
				Element:span
					"US"
				Element:span
					,
				Element:span
				Element:span
					"phone"
				Element:span
					:
				Element:span
				Element:span
					"7-(086)085-9448"
				Element:span
					,
				Element:span
				Element:span
					"email"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"items"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"order_product_id"
				Element:span
					:
				Element:span
				Element:span
					16
				Element:span
					,
				Element:span
				Element:span
					"product_id"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"quantity"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
				Element:span
					}
				Element:span
				Element:span
					]
				Element:span
				Element:span
					}
				Element:span
				Element:span
					]
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Get a Shipment
			Node:
			(type) c
			(layer)1
				Element:p
					Gets a shipment associated with an order.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					GET /stores/{store_hash}/v2/orders/{order_id}/shipments/{id}
				Element:li
					Basic Auth >
				Element:code
					GET /api/v2/orders/{order_id}/shipments/{id}
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					12
				Element:span
					,
				Element:span
				Element:span
					"order_id"
				Element:span
					:
				Element:span
				Element:span
					114
				Element:span
					,
				Element:span
				Element:span
					"customer_id"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"order_address_id"
				Element:span
					:
				Element:span
				Element:span
					15
				Element:span
					,
				Element:span
				Element:span
					"date_created"
				Element:span
					:
				Element:span
				Element:span
					"Wed, 19 Dec 2012 18:18:23 +0000"
				Element:span
					,
				Element:span
				Element:span
					"tracking_number"
				Element:span
					:
				Element:span
				Element:span
					"123-123-123"
				Element:span
					,
				Element:span
				Element:span
					"shipping_method"
				Element:span
					:
				Element:span
				Element:span
					"None"
				Element:span
					,
				Element:span
				Element:span
					"shipping_provider"
				Element:span
					:
				Element:span
				Element:span
					"usps"
				Element:span
					,
				Element:span
				Element:span
					"tracking_carrier"
				Element:span
					:
				Element:span
				Element:span
					"usps"
				Element:span
					,
				Element:span
				Element:span
					"comments"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"billing_address"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"first_name"
				Element:span
					:
				Element:span
				Element:span
					"Julie"
				Element:span
					,
				Element:span
				Element:span
					"last_name"
				Element:span
					:
				Element:span
				Element:span
					"Bishop"
				Element:span
					,
				Element:span
				Element:span
					"company"
				Element:span
					:
				Element:span
				Element:span
					"Yamia"
				Element:span
					,
				Element:span
				Element:span
					"street_1"
				Element:span
					:
				Element:span
				Element:span
					"988 Comanche Circle"
				Element:span
					,
				Element:span
				Element:span
					"street_2"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"city"
				Element:span
					:
				Element:span
				Element:span
					"Cypress"
				Element:span
					,
				Element:span
				Element:span
					"state"
				Element:span
					:
				Element:span
				Element:span
					"Wyoming"
				Element:span
					,
				Element:span
				Element:span
					"zip"
				Element:span
					:
				Element:span
				Element:span
					"77426-2265"
				Element:span
					,
				Element:span
				Element:span
					"country"
				Element:span
					:
				Element:span
				Element:span
					"United States"
				Element:span
					,
				Element:span
				Element:span
					"country_iso2"
				Element:span
					:
				Element:span
				Element:span
					"US"
				Element:span
					,
				Element:span
				Element:span
					"phone"
				Element:span
					:
				Element:span
				Element:span
					"5-(248)906-2014"
				Element:span
					,
				Element:span
				Element:span
					"email"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"shipping_address"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"first_name"
				Element:span
					:
				Element:span
				Element:span
					"Julie"
				Element:span
					,
				Element:span
				Element:span
					"last_name"
				Element:span
					:
				Element:span
				Element:span
					"Bishop"
				Element:span
					,
				Element:span
				Element:span
					"company"
				Element:span
					:
				Element:span
				Element:span
					"Yamia"
				Element:span
					,
				Element:span
				Element:span
					"street_1"
				Element:span
					:
				Element:span
				Element:span
					"988 Comanche Circle"
				Element:span
					,
				Element:span
				Element:span
					"street_2"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"city"
				Element:span
					:
				Element:span
				Element:span
					"Cypress"
				Element:span
					,
				Element:span
				Element:span
					"state"
				Element:span
					:
				Element:span
				Element:span
					"Wyoming"
				Element:span
					,
				Element:span
				Element:span
					"zip"
				Element:span
					:
				Element:span
				Element:span
					"77426-2265"
				Element:span
					,
				Element:span
				Element:span
					"country"
				Element:span
					:
				Element:span
				Element:span
					"United States"
				Element:span
					,
				Element:span
				Element:span
					"country_iso2"
				Element:span
					:
				Element:span
				Element:span
					"US"
				Element:span
					,
				Element:span
				Element:span
					"phone"
				Element:span
					:
				Element:span
				Element:span
					"5-(248)906-2014"
				Element:span
					,
				Element:span
				Element:span
					"email"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"items"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"order_product_id"
				Element:span
					:
				Element:span
				Element:span
					15
				Element:span
					,
				Element:span
				Element:span
					"product_id"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"quantity"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
				Element:span
					}
				Element:span
				Element:span
					]
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Get a Count of Shipments
			Node:
			(type) c
			(layer)1
				Element:p
					Gets a count of the number of orders that have shipped.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					GET /stores/{store_hash}/v2/orders/shipments/count
				Element:li
					Basic Auth >
				Element:code
					GET /api/v2/orders/shipments/count
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"count"
				Element:span
					:
				Element:span
				Element:span
					6
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Get a Count of Shipments per Order
			Node:
			(type) c
			(layer)1
				Element:p
					Gets a count of the number of shipments that have been made for a single order.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					GET /stores/{store_hash}/v2/orders/{order_id}/shipments/count
				Element:li
					Basic Auth >
				Element:code
					GET /api/v2/orders/{order_id}/shipments/count
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"count"
				Element:span
					:
				Element:span
				Element:span
					6
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Create a Shipment
			Node:
			(type) c
			(layer)1
				Element:p
					Creates a new shipment for an order.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					POST /stores/{store_hash}/v2/orders/{order_id}/shipments
				Element:li
					Basic Auth >
				Element:code
					POST /api/v2/orders/{order_id}/shipments
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Read-only Properties
			Node:
			(type) c
			(layer)1
				Element:p
					The following properties of the shipment are read-only. If one or more of these properties are included in the request, it will be rejected.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					id
				Element:li
					order_id
				Element:li
					date_created
				Element:li
					customer_id
				Element:li
					billing_address
				Element:li
					shipping_address
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Requirements
			Node:
			(type) c
			(layer)1
				Element:p
					The following properties of the shipment are required. The request won’t be fulfilled unless these properties are valid.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					order_address_id
				Element:li
					items
				Element:li
					shipping_provider
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Notes
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					For the
				Element:code
					shipping_provider
					property, acceptable values are an empty string (
				Element:code
					""
					), or one of these valid BigCommerce shipping-provider values:
				Element:code
					auspost
					,
				Element:code
					canadapost
					,
				Element:code
					endicia
					,
				Element:code
					usps
					,
				Element:code
					fedex
					,
				Element:code
					royalmail
					,
				Element:code
					ups
					,
				Element:code
					upsready
					,
				Element:code
					upsonline
					, or
				Element:code
					shipperhq
					.
				Element:li
					If your POST request does not include
				Element:code
					shipping_provider
					– at least as an empty string, as shown in the example request below – this property’s value will default to
				Element:code
					custom
					, and no tracking link will be generated in the email.
				Element:li
				Element:code
					tracking_carrier
					is optional, but if you include it, its value must refer/map to the same carrier service as the
				Element:code
					shipping_provider
					value. Acceptable values for
				Element:code
					tracking_carrier
					are an empty string (
				Element:code
					""
					), or one of the valid tracking-carrier values viewable
				Element:a
					here
					and downloadable as a .CSV file
				Element:a
					here
					.
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Request
			Node:
			(type) c
			(layer)1
				Element:p
					Example request object:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"tracking_number"
				Element:span
					:
				Element:span
				Element:span
					"EJ958083578US"
				Element:span
					,
				Element:span
				Element:span
					"comments"
				Element:span
					:
				Element:span
				Element:span
					"Ready to go..."
				Element:span
					,
				Element:span
				Element:span
					"order_address_id"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"shipping_provider"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"items"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"order_product_id"
				Element:span
					:
				Element:span
				Element:span
					15
				Element:span
					,
				Element:span
				Element:span
					"quantity"
				Element:span
					:
				Element:span
				Element:span
					2
				Element:span
				Element:span
					}
				Element:span
				Element:span
					]
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					18
				Element:span
					,
				Element:span
				Element:span
					"order_id"
				Element:span
					:
				Element:span
				Element:span
					113
				Element:span
					,
				Element:span
				Element:span
					"customer_id"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"order_address_id"
				Element:span
					:
				Element:span
				Element:span
					14
				Element:span
					,
				Element:span
				Element:span
					"date_created"
				Element:span
					:
				Element:span
				Element:span
					"Wed, 19 Dec 2012 19:49:15 +0000"
				Element:span
					,
				Element:span
				Element:span
					"tracking_number"
				Element:span
					:
				Element:span
				Element:span
					"EJ958083578US"
				Element:span
					,
				Element:span
				Element:span
					"shipping_method"
				Element:span
					:
				Element:span
				Element:span
					"None"
				Element:span
					,
				Element:span
				Element:span
					"shipping_provider"
				Element:span
					:
				Element:span
				Element:span
					"canadapost"
				Element:span
					,
				Element:span
				Element:span
					"tracking_carrier"
				Element:span
					:
				Element:span
				Element:span
					"canada-post"
				Element:span
					,
				Element:span
				Element:span
					"comments"
				Element:span
					:
				Element:span
				Element:span
					"Ready to go..."
				Element:span
					,
				Element:span
				Element:span
					"billing_address"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"first_name"
				Element:span
					:
				Element:span
				Element:span
					"Henry"
				Element:span
					,
				Element:span
				Element:span
					"last_name"
				Element:span
					:
				Element:span
				Element:span
					"Boyd"
				Element:span
					,
				Element:span
				Element:span
					"company"
				Element:span
					:
				Element:span
				Element:span
					"Kare"
				Element:span
					,
				Element:span
				Element:span
					"street_1"
				Element:span
					:
				Element:span
				Element:span
					"009 Corben Pass"
				Element:span
					,
				Element:span
				Element:span
					"street_2"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"city"
				Element:span
					:
				Element:span
				Element:span
					"Laguna Niguel"
				Element:span
					,
				Element:span
				Element:span
					"state"
				Element:span
					:
				Element:span
				Element:span
					"New Hampshire"
				Element:span
					,
				Element:span
				Element:span
					"zip"
				Element:span
					:
				Element:span
				Element:span
					"57762"
				Element:span
					,
				Element:span
				Element:span
					"country"
				Element:span
					:
				Element:span
				Element:span
					"United States"
				Element:span
					,
				Element:span
				Element:span
					"country_iso2"
				Element:span
					:
				Element:span
				Element:span
					"US"
				Element:span
					,
				Element:span
				Element:span
					"phone"
				Element:span
					:
				Element:span
				Element:span
					"0-(245)121-8702"
				Element:span
					,
				Element:span
				Element:span
					"email"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"shipping_address"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"first_name"
				Element:span
					:
				Element:span
				Element:span
					"Henry"
				Element:span
					,
				Element:span
				Element:span
					"last_name"
				Element:span
					:
				Element:span
				Element:span
					"Boyd"
				Element:span
					,
				Element:span
				Element:span
					"company"
				Element:span
					:
				Element:span
				Element:span
					"Kare"
				Element:span
					,
				Element:span
				Element:span
					"street_1"
				Element:span
					:
				Element:span
				Element:span
					"009 Corben Pass"
				Element:span
					,
				Element:span
				Element:span
					"street_2"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"city"
				Element:span
					:
				Element:span
				Element:span
					"Laguna Niguel"
				Element:span
					,
				Element:span
				Element:span
					"state"
				Element:span
					:
				Element:span
				Element:span
					"New Hampshire"
				Element:span
					,
				Element:span
				Element:span
					"zip"
				Element:span
					:
				Element:span
				Element:span
					"57762"
				Element:span
					,
				Element:span
				Element:span
					"country"
				Element:span
					:
				Element:span
				Element:span
					"United States"
				Element:span
					,
				Element:span
				Element:span
					"country_iso2"
				Element:span
					:
				Element:span
				Element:span
					"US"
				Element:span
					,
				Element:span
				Element:span
					"phone"
				Element:span
					:
				Element:span
				Element:span
					"0-(245)121-8702"
				Element:span
					,
				Element:span
				Element:span
					"email"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"items"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"order_product_id"
				Element:span
					:
				Element:span
				Element:span
					14
				Element:span
					,
				Element:span
				Element:span
					"product_id"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"quantity"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
				Element:span
					}
				Element:span
				Element:span
					]
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Update a Shipment
			Node:
			(type) c
			(layer)1
				Element:p
					Updates an existing shipment associated with an order.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					PUT /stores/{store_hash}/v2/orders/{order_id}/shipments/{id}
				Element:li
					Basic Auth >
				Element:code
					PUT /api/v2/orders/{order_id}/shipments/{id}
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Read-only Properties
			Node:
			(type) c
			(layer)1
				Element:p
					The following properties of the shipment are read-only. If one or more of these properties are included in the request, it will be rejected.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					id
				Element:li
					order_id
				Element:li
					date_created
				Element:li
					customer_id
				Element:li
					items
				Element:li
					billing_address
				Element:li
					shipping_address
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Request
			Node:
			(type) c
			(layer)1
				Element:p
					Example request object:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"tracking_number"
				Element:span
					:
				Element:span
				Element:span
					"fedex1245"
				Element:span
					,
				Element:span
				Element:span
					"comments"
				Element:span
					:
				Element:span
				Element:span
					"Notes about the shipment"
				Element:span
					,
				Element:span
				Element:span
					"order_address_id"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					12
				Element:span
					,
				Element:span
				Element:span
					"order_id"
				Element:span
					:
				Element:span
				Element:span
					114
				Element:span
					,
				Element:span
				Element:span
					"customer_id"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"order_address_id"
				Element:span
					:
				Element:span
				Element:span
					16
				Element:span
					,
				Element:span
				Element:span
					"date_created"
				Element:span
					:
				Element:span
				Element:span
					"Wed, 19 Dec 2012 18:18:23 +0000"
				Element:span
					,
				Element:span
				Element:span
					"tracking_number"
				Element:span
					:
				Element:span
				Element:span
					"fedex1245"
				Element:span
					,
				Element:span
				Element:span
					"shipping_method"
				Element:span
					:
				Element:span
				Element:span
					"None"
				Element:span
					,
				Element:span
				Element:span
					"shipping_provider"
				Element:span
					:
				Element:span
				Element:span
					"fedex"
				Element:span
					,
				Element:span
				Element:span
					"tracking_carrier"
				Element:span
					:
				Element:span
				Element:span
					"fedex"
				Element:span
					,
				Element:span
				Element:span
					"comments"
				Element:span
					:
				Element:span
				Element:span
					"Notes about the shipment"
				Element:span
					,
				Element:span
				Element:span
					"billing_address"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"first_name"
				Element:span
					:
				Element:span
				Element:span
					"Julie"
				Element:span
					,
				Element:span
				Element:span
					"last_name"
				Element:span
					:
				Element:span
				Element:span
					"Bishop"
				Element:span
					,
				Element:span
				Element:span
					"company"
				Element:span
					:
				Element:span
				Element:span
					"Yamia"
				Element:span
					,
				Element:span
				Element:span
					"street_1"
				Element:span
					:
				Element:span
				Element:span
					"988 Comanche Circle"
				Element:span
					,
				Element:span
				Element:span
					"street_2"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"city"
				Element:span
					:
				Element:span
				Element:span
					"Cypress"
				Element:span
					,
				Element:span
				Element:span
					"state"
				Element:span
					:
				Element:span
				Element:span
					"Wyoming"
				Element:span
					,
				Element:span
				Element:span
					"zip"
				Element:span
					:
				Element:span
				Element:span
					"77426-2265"
				Element:span
					,
				Element:span
				Element:span
					"country"
				Element:span
					:
				Element:span
				Element:span
					"United States"
				Element:span
					,
				Element:span
				Element:span
					"country_iso2"
				Element:span
					:
				Element:span
				Element:span
					"US"
				Element:span
					,
				Element:span
				Element:span
					"phone"
				Element:span
					:
				Element:span
				Element:span
					"5-(248)906-2014"
				Element:span
					,
				Element:span
				Element:span
					"email"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"shipping_address"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"first_name"
				Element:span
					:
				Element:span
				Element:span
					"Julie"
				Element:span
					,
				Element:span
				Element:span
					"last_name"
				Element:span
					:
				Element:span
				Element:span
					"Bishop"
				Element:span
					,
				Element:span
				Element:span
					"company"
				Element:span
					:
				Element:span
				Element:span
					"Yamia"
				Element:span
					,
				Element:span
				Element:span
					"street_1"
				Element:span
					:
				Element:span
				Element:span
					"988 Comanche Circle"
				Element:span
					,
				Element:span
				Element:span
					"street_2"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"city"
				Element:span
					:
				Element:span
				Element:span
					"Cypress"
				Element:span
					,
				Element:span
				Element:span
					"state"
				Element:span
					:
				Element:span
				Element:span
					"Wyoming"
				Element:span
					,
				Element:span
				Element:span
					"zip"
				Element:span
					:
				Element:span
				Element:span
					"77426-2265"
				Element:span
					,
				Element:span
				Element:span
					"country"
				Element:span
					:
				Element:span
				Element:span
					"United States"
				Element:span
					,
				Element:span
				Element:span
					"country_iso2"
				Element:span
					:
				Element:span
				Element:span
					"US"
				Element:span
					,
				Element:span
				Element:span
					"phone"
				Element:span
					:
				Element:span
				Element:span
					"5-(248)906-2014"
				Element:span
					,
				Element:span
				Element:span
					"email"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"items"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"order_product_id"
				Element:span
					:
				Element:span
				Element:span
					15
				Element:span
					,
				Element:span
				Element:span
					"product_id"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"quantity"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
				Element:span
					}
				Element:span
				Element:span
					]
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Notes
			Node:
			(type) c
			(layer)1
				Element:p
					The following properties of the shipments are optional, but if you provide both values, they must refer/map to the same carrier service:
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:code
					shipping_provider
					: Acceptable values are an empty string (
				Element:code
					""
					), or one of these valid BigCommerce shipping-provider values:
				Element:code
					auspost
					,
				Element:code
					canadapost
					,
				Element:code
					endicia
					,
				Element:code
					usps
					,
				Element:code
					fedex
					,
				Element:code
					royalmail
					,
				Element:code
					ups
					,
				Element:code
					upsready
					,
				Element:code
					upsonline
					, or
				Element:code
					shipperhq
					.
				Element:li
				Element:code
					tracking_carrier
					: Acceptable values are an empty string (
				Element:code
					""
					), or one of the valid tracking-carrier values viewable
				Element:a
					here
					and downloadable as a .CSV file
				Element:a
					here
					.
			Node:
			(type) c
			(layer)1
				Element:p
					If you provide only the
				Element:code
					shipping_provider
					property, then any existing saved
				Element:code
					tracking_carrier
					value must refer to same carrier; and vice-versa.
			Node:
			(type) c
			(layer)1
				Element:p
					Possible mappings of
				Element:code
					shipping_provider
					values to
				Element:code
					tracking_carrier
					values are:
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:code
					auspost
					–>
				Element:code
					australia-post
				Element:br
				Element:li
				Element:code
					canadapost
					–>
				Element:code
					canada-post
				Element:br
				Element:li
				Element:code
					endicia
					–>
				Element:code
					usps
				Element:br
				Element:li
				Element:code
					fedex
					–>
				Element:code
					fedex
				Element:br
				Element:li
				Element:code
					royalmail
					–>
				Element:code
					royalmail
				Element:br
				Element:li
				Element:code
					ups
					–>
				Element:code
					ups
				Element:br
				Element:li
				Element:code
					upsready
					–>
				Element:code
					ups
				Element:br
				Element:li
				Element:code
					upsonline
					–>
				Element:code
					ups
				Element:br
				Element:li
				Element:code
					shipperhq
					–>
				Element:code
					ups
					or
				Element:code
					dhl
					or
				Element:code
					fedex
					or
				Element:code
					usps
					or
				Element:code
					australia-post
					or
				Element:code
					start-track
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Delete a Shipment
			Node:
			(type) c
			(layer)1
				Element:p
					Deletes a shipment associated with an order.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					DELETE /stores/{store_hash}/v2/orders/{order_id}/shipments/{id}
				Element:li
					Basic Auth >
				Element:code
					DELETE /api/v2/orders/{order_id}/shipments/{id}
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Delete Multiple Shipments
			Node:
			(type) c
			(layer)1
				Element:p
					Deletes multiple shipments associated with an order.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					DELETE /stores/{store_hash}/v2/orders/{order_id}/shipments
				Element:li
					Basic Auth >
				Element:code
					DELETE /api/v2/orders/{order_id}/shipments
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Pagination
			Node:
			(type) c
			(layer)1
				Element:p
					Parameters can be added to the URL query string to paginate the collection. The maximum limit is 250. If a limit isn’t provided, up to 50 shipments are returned by default.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Type
				Element:th
					Example
				Element:tbody
				Element:tr
				Element:td
					page
				Element:td
					int
				Element:td
					/api/v2/orders/{order_id}/shipments?page={number}
				Element:tr
				Element:td
					limit
				Element:td
					int
				Element:td
					/api/v2/orders/{order_id}/shipments?limit={count}
			Node:
			(type) h1
			(layer)1
				Element:h1
				Element:span
					Products Reference
			Node:
			(type) c
			(layer)1
				Element:p
					Products APIs support managing, searching, and displaying product-catalog information. They include Brands, Bulk Pricing Rules, Categories, Configurable Fields, Custom Fields, Google Product Search Mappings, Options, Option Set, Option-Set Options, Option Values, Products, Product Images, Product Options, Product Reviews, Product Rules, Product Videos, and SKUs.
			Node:
			(type) c
			(layer)1
				Element:h2
				Element:span
					Products
			Node:
			(type) c
			(layer)1
				Element:p
					A product object represents a saleable item in the catalog.
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Product Object – Properties
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Name
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
					int
				Element:td
					The unique numerical ID of the product. Increments sequentially.
				Element:tr
				Element:td
					keyword_filter
				Element:td
					string
				Element:td
					(This property is deprecated.)
				Element:tr
				Element:td
					name
				Element:td
					string
				Element:td
					The product name.
				Element:tr
				Element:td
					type
				Element:td
					enum
				Element:td
					The product type. One of:
				Element:br
				Element:code
					physical
					– a physical stock unit.
				Element:br
				Element:code
					digital
					– a digital download.
				Element:tr
				Element:td
					sku
				Element:td
					string
				Element:td
					User-defined product code/stock keeping unit (SKU).
				Element:tr
				Element:td
					description
				Element:td
					text
				Element:td
					Product description, which can include HTML formatting.
				Element:tr
				Element:td
					search_keywords
				Element:td
					text
				Element:td
					A comma-separated list of keywords that can be used to locate the product when searching the store.
				Element:tr
				Element:td
					availability_description
				Element:td
					string
				Element:td
					Availability text, displayed on the checkout page under the product title, telling the customer how long it will normally take to ship this product. E.g.: “Usually ships in 24 hours”.
				Element:tr
				Element:td
					price
				Element:td
					decimal
				Element:td
					The product’s price. Should include, or exclude, tax based on the store settings.
				Element:tr
				Element:td
					cost_price
				Element:td
					decimal
				Element:td
					The product’s cost price. Stored for reference only; not used or displayed anywhere on the store.
				Element:tr
				Element:td
					retail_price
				Element:td
					decimal
				Element:td
					The product’s retail cost. If entered, this retail price will be shown on the product page.
				Element:tr
				Element:td
					sale_price
				Element:td
					decimal
				Element:td
					Sale price. If entered, this will be used instead of value in the price field when calculating the product’s cost.
				Element:tr
				Element:td
					calculated_price
				Element:td
					decimal
				Element:td
					Price as displayed to guests, adjusted for applicable sales and rules. (Cart price might incorporate further discounts for logged-in customers or customer groups.) Read-only.
				Element:tr
				Element:td
					sort_order
				Element:td
					int
				Element:td
					Priority to give this product when included in product lists on category pages and in search results. Lower integers will place the product closer to the top of the results.
				Element:tr
				Element:td
					is_visible
				Element:td
					boolean
				Element:td
					Flag to determine whether or not the product should be displayed to customers browsing. If
				Element:code
					true
					, the product will be displayed. If
				Element:code
					false
					, the product will be hidden from view.
				Element:tr
				Element:td
					is_featured
				Element:td
					boolean
				Element:td
					Flag to determine whether the product should be included in the “featured products” panel for shoppers viewing the store.
				Element:tr
				Element:td
					related_products
				Element:td
					string
				Element:td
					Defaults to
				Element:code
					-1
					, which causes the store to automatically generate a list of related products. To manually specify the list of related products, include their IDs, separated by commas. For example:
				Element:code
					3, 6, 7, 21
					.
				Element:tr
				Element:td
					inventory_level
				Element:td
					int
				Element:td
					Current inventory level of the product. Simple inventory tracking must be enabled (see the
				Element:code
					inventory_tracking
					field) for this to take effect.
				Element:tr
				Element:td
					inventory_warning_level
				Element:td
					int
				Element:td
					Inventory Warning level for the product. When the product’s inventory level drops below this warning level, the store owner will be sent a notification. Simple inventory tracking must be enabled (see the
				Element:code
					inventory_tracking
					field) for this to take effect.
				Element:tr
				Element:td
					warranty
				Element:td
					text
				Element:td
					Warranty information displayed on the product page. Can include HTML formatting.
				Element:tr
				Element:td
					weight
				Element:td
					decimal
				Element:td
					Weight of the product, which can be used when calculating shipping costs.
				Element:tr
				Element:td
					width
				Element:td
					decimal
				Element:td
					Width of the product, which can be used when calculating shipping costs.
				Element:tr
				Element:td
					height
				Element:td
					decimal
				Element:td
					Height of the product, which can be used when calculating shipping costs.
				Element:tr
				Element:td
					depth
				Element:td
					decimal
				Element:td
					Depth of the product, which can be used when calculating shipping costs.
				Element:tr
				Element:td
					fixed_cost_shipping_price
				Element:td
					decimal
				Element:td
					A fixed shipping cost for the product. If defined, this value will be used instead of normal shipping-cost calculation during checkout.
				Element:tr
				Element:td
					is_free_shipping
				Element:td
					boolean
				Element:td
					Flag used to indicate whether or not the product has free shipping. If
				Element:code
					true
					, the shipping cost for the product will be zero.
				Element:tr
				Element:td
					inventory_tracking
				Element:td
					enum
				Element:td
					The type of inventory tracking for the product. One of:
				Element:br
				Element:code
					none
					– inventory levels will not be tracked.
				Element:br
				Element:code
					simple
					– inventory levels will be tracked using the
				Element:code
					inventory_level
					and
				Element:code
					inventory_warning_level
					fields.
				Element:br
				Element:code
					sku
					– inventory levels will be tracked based on individual product options, which maintain their own warning levels and inventory levels.
				Element:tr
				Element:td
					rating_total
				Element:td
					int
				Element:td
					The total rating for the product.
				Element:tr
				Element:td
					rating_count
				Element:td
					int
				Element:td
					The total number of ratings the product has had.
				Element:tr
				Element:td
					total_sold
				Element:td
					int
				Element:td
					Total quantity of this product sold through transactions.
				Element:tr
				Element:td
					date_created
				Element:td
					date
				Element:td
					The date of which the product was created.
				Element:tr
				Element:td
					brand_id
				Element:td
					int
				Element:td
					The product’s brand
				Element:tr
				Element:td
					view_count
				Element:td
					int
				Element:td
					The number of times the product has been viewed.
				Element:tr
				Element:td
					page_title
				Element:td
					string
				Element:td
					Custom title for the product’s page. If not defined, the product name will be used as the page title.
				Element:tr
				Element:td
					meta_keywords
				Element:td
					text
				Element:td
					Custom meta keywords for the product page. If not defined, the store’s default keywords will be used.
				Element:tr
				Element:td
					meta_description
				Element:td
					text
				Element:td
					Custom meta description for the product page. If not defined, the store’s default meta description will be used.
				Element:tr
				Element:td
					layout_file
				Element:td
					string
				Element:td
					The layout template file used to render this product category.
				Element:tr
				Element:td
					is_price_hidden
				Element:td
					boolean
				Element:td
					The default
				Element:code
					false
					value indicates that this product’s price should be shown on the product page. If set to
				Element:code
					true
					, the price will be hidden hidden. (NOTE: To successfully set
				Element:code
					is_price_hidden
					to
				Element:code
					true
					, the
				Element:code
					availability
					value must be
				Element:code
					disabled
					.)
				Element:tr
				Element:td
					price_hidden_label
				Element:td
					string
				Element:td
					By default, an empty string. If
				Element:code
					is_price_hidden
					is
				Element:code
					true
					, the value of
				Element:code
					price_hidden_label
					will be displayed instead of the price. (NOTE: To successfully set a non-empty string value for
				Element:code
					price_hidden_label
					, the
				Element:code
					availability
					value must be
				Element:code
					disabled
					.)
				Element:tr
				Element:td
					categories
				Element:td
					array
				Element:td
					An array of IDs for the categories this product belongs to. When updating a product, if an array of categories is supplied, then all product categories will be overwritten. Does not accept more than 1,000 ID values.
				Element:tr
				Element:td
					date_modified
				Element:td
					date
				Element:td
					The date that the product was last modified.
				Element:tr
				Element:td
					event_date_field_name
				Element:td
					string
				Element:td
					Name of the field to be displayed on the product page when selecting the event/delivery date.
				Element:tr
				Element:td
					event_date_type
				Element:td
					enum
				Element:td
					One of the following values:
				Element:br
				Element:code
					none
					– Disables the event/delivery date requirement and field.
				Element:br
				Element:code
					after
					– The selected date must fall either on, or after, the date specified in the
				Element:code
					event_date_start
					field.
				Element:br
				Element:code
					before
					– The selected date must fall either before, or on, the date specified in the
				Element:code
					event_date_end
					field.
				Element:br
				Element:code
					range
					– The selected date must fall between the
				Element:code
					event_date_start
					and
				Element:code
					event_date_end
					dates.
				Element:tr
				Element:td
					event_date_start
				Element:td
					date
				Element:td
					When the product requires the customer to select an event/delivery date, this date is used as the “after” date.
				Element:tr
				Element:td
					event_date_end
				Element:td
					date
				Element:td
					When the product requires the customer to select an event/delivery date, this date is used as the “before” date.
				Element:tr
				Element:td
					myob_asset_account
				Element:td
					string
				Element:td
					MYOB Asset Account.
				Element:tr
				Element:td
					myob_income_account
				Element:td
					string
				Element:td
					MYOB Income Account.
				Element:tr
				Element:td
					myob_expense_account
				Element:td
					string
				Element:td
					MYOB Expense/COS Account.
				Element:tr
				Element:td
					peachtree_gl_account
				Element:td
					string
				Element:td
					Peachtree General Ledger Account.
				Element:tr
				Element:td
					condition
				Element:td
					enum
				Element:td
					The product’s condition. Will be shown on the product page if the value of the
				Element:code
					is_condition_shown
					field is true. Possible values:
				Element:code
					New
					,
				Element:code
					Used
					,
				Element:code
					Refurbished
					.
				Element:tr
				Element:td
					is_condition_shown
				Element:td
					boolean
				Element:td
					Flag used to determine whether the product’s condition will be shown to the customer on the product page.
				Element:tr
				Element:td
					preorder_release_date
				Element:td
					date
				Element:td
					Pre-order release date. See
				Element:code
					availability
					field for details on setting a product’s availability to accept pre-orders.
				Element:tr
				Element:td
					is_preorder_only
				Element:td
					boolean
				Element:td
					If set to
				Element:code
					false
					, the product will not change its
				Element:code
					availability
					from
				Element:code
					preorder
					to
				Element:code
					available
					on the release date. Otherwise, on the release date the product’s availability/status will change to
				Element:code
					available
					.
				Element:tr
				Element:td
					preorder_message
				Element:td
					string
				Element:td
					Custom expected-date message to display on the product page. If undefined, the message defaults to the storewide setting. Can contain the
				Element:code
					%%DATE%%
					placeholder, which will be replaced with the release date.
				Element:tr
				Element:td
					order_quantity_minimum
				Element:td
					int
				Element:td
					The minimum quantity an order must contain in order to purchase this product.
				Element:tr
				Element:td
					order_quantity_maximum
				Element:td
					int
				Element:td
					The maximum quantity an order can contain when purchasing the product.
				Element:tr
				Element:td
					open_graph_type
				Element:td
					enum
				Element:td
					Type of product. Acceptable values are:
				Element:code
					product
					,
				Element:code
					album
					,
				Element:code
					book
					,
				Element:code
					drink
					,
				Element:code
					food
					,
				Element:code
					game
					,
				Element:code
					movie
					,
				Element:code
					song
					,
				Element:code
					tv_show
				Element:tr
				Element:td
					open_graph_title
				Element:td
					string
				Element:td
					Title of the product. If not specified, the product’s name will be used instead.
				Element:tr
				Element:td
					open_graph_description
				Element:td
					text
				Element:td
					Description to use for the product. If not specified, the
				Element:code
					meta_description
					will be used instead.
				Element:tr
				Element:td
					is_open_graph_thumbnail
				Element:td
					boolean
				Element:td
					If set to
				Element:code
					true
					, the product thumbnail image will be used as the open graph image.
				Element:tr
				Element:td
					upc
				Element:td
					string
				Element:td
					The product UPC code, which is used in feeds for shopping comparison sites.
				Element:tr
				Element:td
					date_last_imported
				Element:td
					date
				Element:td
					The date on which the product was last imported using the bulk importer.
				Element:tr
				Element:td
					option_set_id
				Element:td
					int
				Element:td
					The ID of the
				Element:a
					option set
					applied to the product. (NOTE: To remove the option set from the product, set the value to
				Element:code
					null
					on update.)
				Element:tr
				Element:td
					tax_class_id
				Element:td
					int
				Element:td
					The ID of the tax class applied to the product. (NOTE: Value ignored if automatic tax is enabled.)
				Element:tr
				Element:td
					option_set_display
				Element:td
					enum
				Element:td
					The position on the product page where options from the option set will be displayed.
				Element:tr
				Element:td
					bin_picking_number
				Element:td
					string
				Element:td
					The BIN picking number for the product.
				Element:tr
				Element:td
					custom_url
				Element:td
					string
				Element:td
					Custom URL (if set) overriding the structure dictated in the store’s settings. If no custom URL is set, this will contain the default URL.
				Element:tr
				Element:td
					primary_image
				Element:td
					object
				Element:td
					An image object, corresponding to the image that is set as the product’s thumbnail. This object includes that image’s
				Element:code
					id
					, plus four URL values identifying where to pull the image at different sizes:
				Element:br
				Element:code
					standard_url
					is the image used in the product page’s image box.
				Element:br
				Element:code
					tiny_url
					is the thumbnail image displayed below the product page’s image box.
				Element:br
				Element:code
					thumbnail_url
					is used for product list-box images on category pages and in side panels.
				Element:br
				Element:code
					zoom_url
					is either the original image size provided to BigCommerce, or the merchant-selected
				Element:code
					Product Zoom Image
					/
				Element:code
					Zoomed image
					size – whichever is smaller. (You can always access the product’s original image via the
				Element:a
					Product Images resource
					.)
				Element:tr
				Element:td
					availability
				Element:td
					enum
				Element:td
					Availability of the product. Possible values:
				Element:br
				Element:code
					available
					– the product can be purchased on the storefront.
				Element:br
				Element:code
					disabled
					- the product is listed on the storefront, but cannot be purchased.
				Element:br
				Element:code
					preorder
					– the product is listed for pre-orders.
				Element:tr
				Element:td
					brand
				Element:td
					resource
				Element:td
					The product’s brand
				Element:tr
				Element:td
					downloads
				Element:td
					resource
				Element:td
					Total number of downloads for a downloadable product.
				Element:tr
				Element:td
					images
				Element:td
					resource
				Element:td
					See the
				Element:a
					Product Images resource
					for information.
				Element:tr
				Element:td
					discount_rules
				Element:td
					resource
				Element:td
					See the
				Element:a
					Bulk Pricing/Discount
					resource for information.
				Element:tr
				Element:td
					configurable_fields
				Element:td
					resource
				Element:td
					See the
				Element:a
					Configurable Fields
					resource for information.
				Element:tr
				Element:td
					custom_fields
				Element:td
					resource
				Element:td
					See the
				Element:a
					Custom Fields
					resource for information.
				Element:tr
				Element:td
					videos
				Element:td
					resource
				Element:td
					See the
				Element:a
					Videos resource
					for information.
				Element:tr
				Element:td
					skus
				Element:td
					resource
				Element:td
					Stock Keeping Units for the product. See the
				Element:a
					Product SKUs
					resource for the definition of a sku object.
				Element:tr
				Element:td
					rules
				Element:td
					resource
				Element:td
					Rules that apply only to this product, based on the product’s
				Element:a
					option set
					. See
				Element:a
					Product Rules
					resource for information.
				Element:tr
				Element:td
					option_set
				Element:td
					resource
				Element:td
					See the
				Element:a
					Product Option Sets
					resource for information.
				Element:tr
				Element:td
					options
				Element:td
					resource
				Element:td
					Options from the
				Element:a
					option set
					applied to the product. See the
				Element:a
					Product Options
					resource for information.
				Element:tr
				Element:td
					tax_class
				Element:td
					resource
				Element:td
					Assigned tax class, when using a manual tax setup. This can be a number matching one of the tax classes set up in your store.
				Element:tr
				Element:td
					avalara_product_tax_code
				Element:td
					resource
				Element:td
					Accepts AvaTax System Tax Codes, which identify products and services that fall into special sales-tax categories. By using these codes, merchants who subscribe to Avalara Premium can calculate sales taxes more accurately.
				Element:br
				Element:br
					Stores without Avalara Premium will ignore the code when calculating sales tax. Do not pass more than one code. The codes are case-sensitive.
				Element:br
				Element:br
					For details, please see Avalara’s
				Element:a
					overview
					and
				Element:a
					FAQ
					on AvaTax System Tax Codes. You can also
				Element:a
					download codes
					as a zipfile of spreadsheets, or
				Element:a
					search or browse codes
					in Avalara’s Tax Code Search Tool. (These external links are subject to change.)
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Product Webhook Events
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Product Created
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					store/product/created
			Node:
			(type) c
			(layer)1
				Element:p
					Occurs when a product is created from the control panel, via bulk import, or via the API.
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Product Updated
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					store/product/updated
			Node:
			(type) c
			(layer)1
				Element:p
					Occurs when a product is updated from the control panel or via the API.
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Product Deleted
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					store/product/deleted
			Node:
			(type) c
			(layer)1
				Element:p
					Occurs when a product is deleted from the control panel or via the API.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
				Element:th
				Element:tbody
				Element:tr
				Element:td
				Element:strong
					Manages
				Element:td
				Element:a
					Product Object
				Element:tr
				Element:td
				Element:strong
					OAuth Scopes
				Element:td
					store_v2_products
				Element:tr
				Element:td
				Element:td
					store_v2_products_read_only
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					List Products
			Node:
			(type) c
			(layer)1
				Element:p
					Gets the collection of products. (Default sorting is by product id, from lowest to highest.)
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					GET /stores/{store_hash}/v2/products
				Element:li
					Basic Auth >
				Element:code
					GET /api/v2/products
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Filters
			Node:
			(type) c
			(layer)1
				Element:p
					Filter parameters can be added to the URL query string to select specific products in the collection.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Type
				Element:th
					Example
				Element:tbody
				Element:tr
				Element:td
					min_id
				Element:td
					int
				Element:td
					/api/v2/products?min_id={value}
				Element:tr
				Element:td
					max_id
				Element:td
					int
				Element:td
					/api/v2/products?max_id={value}
				Element:tr
				Element:td
					name
				Element:td
					string
				Element:td
					/api/v2/products?name={value}
				Element:tr
				Element:td
					keyword_filter
				Element:td
					string
				Element:td
					/api/v2/products?keyword_filter={value}
				Element:tr
				Element:td
					description
				Element:td
					string
				Element:td
					/api/v2/products?description={value}
				Element:tr
				Element:td
					sku
				Element:td
					string
				Element:td
					/api/v2/products?sku={value}
				Element:tr
				Element:td
					condition
				Element:td
					string
				Element:td
					/api/v2/products?condition={value}
				Element:tr
				Element:td
					availability
				Element:td
					string
				Element:td
					/api/v2/products?availability={value}
				Element:tr
				Element:td
					brand_id
				Element:td
					string
				Element:td
					/api/v2/products?brand_id={value}
				Element:tr
				Element:td
					min_date_created
				Element:td
					dateTime or date
				Element:td
					/api/v2/products?min_date_created={value}
				Element:tr
				Element:td
					max_date_created
				Element:td
					dateTime or date
				Element:td
					/api/v2/products?max_date_created={value}
				Element:tr
				Element:td
					min_date_modified
				Element:td
					dateTime or date
				Element:td
					/api/v2/products?min_date_modified={value}
				Element:tr
				Element:td
					max_date_modified
				Element:td
					dateTime or date
				Element:td
					/api/v2/products?max_date_modified={value}
				Element:tr
				Element:td
					min_date_last_imported
				Element:td
					date
				Element:td
					/api/v2/products?min_date_last_imported={value}
				Element:tr
				Element:td
					max_date_last_imported
				Element:td
					date
				Element:td
					/api/v2/products?max_date_last_imported={value}
				Element:tr
				Element:td
					min_price
				Element:td
					decimal
				Element:td
					/api/v2/products?min_price={value}
				Element:tr
				Element:td
					max_price
				Element:td
					decimal
				Element:td
					/api/v2/products?max_price={value}
				Element:tr
				Element:td
					min_number_sold
				Element:td
					int
				Element:td
					/api/v2/products?min_number_sold={value}
				Element:tr
				Element:td
					max_number_sold
				Element:td
					int
				Element:td
					/api/v2/products?max_number_sold={value}
				Element:tr
				Element:td
					is_visible
				Element:td
					string
				Element:td
					/api/v2/products?is_visible={value}
				Element:tr
				Element:td
					is_featured
				Element:td
					string
				Element:td
					/api/v2/products?is_featured={value}
				Element:tr
				Element:td
					min_inventory_level
				Element:td
					int
				Element:td
					/api/v2/products?min_inventory_level={value}
				Element:tr
				Element:td
					max_inventory_level
				Element:td
					int
				Element:td
					/api/v2/products?max_inventory_level={value}
				Element:tr
				Element:td
					include_sku
				Element:td
					boolean
				Element:td
					/api/v2/products?include_sku={value}
				Element:tr
				Element:td
					category
				Element:td
					string
				Element:td
					/api/v2/products?category={value}
				Element:tr
				Element:td
					product_tax_code
				Element:td
					string
				Element:td
					/api/v2/products?product_tax_code={value}
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Pagination
			Node:
			(type) c
			(layer)1
				Element:p
					Parameters can be added to the URL query string to paginate the collection. The maximum limit is 250. If a limit isn’t provided, up to 50 products are returned by default.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Type
				Element:th
					Example
				Element:tbody
				Element:tr
				Element:td
					Page
				Element:td
					int
				Element:td
					/api/v2/products?page={number}
				Element:tr
				Element:td
					Limit
				Element:td
					int
				Element:td
					/api/v2/products?limit={count}
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Notes
			Node:
			(type) c
			(layer)1
				Element:p
					You can filter the retrieved fields by appending one of the following options to your request:
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					?include=
				Element:li
					?include=@summary
				Element:li
					?exclude=
			Node:
			(type) c
			(layer)1
				Element:p
					For details, syntax, and examples, please see the
				Element:a
					Get a Product
					operation.
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					32
				Element:span
					,
				Element:span
				Element:span
					"keyword_filter"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"[Sample] Tomorrow is today, Red printed scarf"
				Element:span
					,
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"physical"
				Element:span
					,
				Element:span
				Element:span
					"sku"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"description"
				Element:span
					:
				Element:span
				Element:span
					"Densely pack your descriptions with useful information and watch products fly off the shelf."
				Element:span
					,
				Element:span
				Element:span
					"search_keywords"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"availability_description"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"price"
				Element:span
					:
				Element:span
				Element:span
					"89.0000"
				Element:span
					,
				Element:span
				Element:span
					"cost_price"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"retail_price"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"sale_price"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"calculated_price"
				Element:span
					:
				Element:span
				Element:span
					"89.0000"
				Element:span
					,
				Element:span
				Element:span
					"sort_order"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"is_visible"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"is_featured"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"related_products"
				Element:span
					:
				Element:span
				Element:span
					"-1"
				Element:span
					,
				Element:span
				Element:span
					"inventory_level"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"inventory_warning_level"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"warranty"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"weight"
				Element:span
					:
				Element:span
				Element:span
					"0.3000"
				Element:span
					,
				Element:span
				Element:span
					"width"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"height"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"depth"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"fixed_cost_shipping_price"
				Element:span
					:
				Element:span
				Element:span
					"10.0000"
				Element:span
					,
				Element:span
				Element:span
					"is_free_shipping"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"inventory_tracking"
				Element:span
					:
				Element:span
				Element:span
					"none"
				Element:span
					,
				Element:span
				Element:span
					"rating_total"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"rating_count"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"total_sold"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"date_created"
				Element:span
					:
				Element:span
				Element:span
					"Fri, 21 Sep 2012 02:31:01 +0000"
				Element:span
					,
				Element:span
				Element:span
					"brand_id"
				Element:span
					:
				Element:span
				Element:span
					17
				Element:span
					,
				Element:span
				Element:span
					"view_count"
				Element:span
					:
				Element:span
				Element:span
					4
				Element:span
					,
				Element:span
				Element:span
					"page_title"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"meta_keywords"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"meta_description"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"layout_file"
				Element:span
					:
				Element:span
				Element:span
					"product.html"
				Element:span
					,
				Element:span
				Element:span
					"is_price_hidden"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"price_hidden_label"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"categories"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					14
				Element:span
				Element:span
					],
				Element:span
				Element:span
					"date_modified"
				Element:span
					:
				Element:span
				Element:span
					"Mon, 24 Sep 2012 01:34:57 +0000"
				Element:span
					,
				Element:span
				Element:span
					"event_date_field_name"
				Element:span
					:
				Element:span
				Element:span
					"Delivery Date"
				Element:span
					,
				Element:span
				Element:span
					"event_date_type"
				Element:span
					:
				Element:span
				Element:span
					"none"
				Element:span
					,
				Element:span
				Element:span
					"event_date_start"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"event_date_end"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"myob_asset_account"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"myob_income_account"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"myob_expense_account"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"peachtree_gl_account"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"condition"
				Element:span
					:
				Element:span
				Element:span
					"New"
				Element:span
					,
				Element:span
				Element:span
					"is_condition_shown"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"preorder_release_date"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"is_preorder_only"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"preorder_message"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"order_quantity_minimum"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"order_quantity_maximum"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"open_graph_type"
				Element:span
					:
				Element:span
				Element:span
					"product"
				Element:span
					,
				Element:span
				Element:span
					"open_graph_title"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"open_graph_description"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"is_open_graph_thumbnail"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"upc"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"avalara_product_tax_code"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"date_last_imported"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"option_set_id"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"tax_class_id"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"option_set_display"
				Element:span
					:
				Element:span
				Element:span
					"right"
				Element:span
					,
				Element:span
				Element:span
					"bin_picking_number"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"custom_url"
				Element:span
					:
				Element:span
				Element:span
					"/tomorrow-is-today-red-printed-scarf/"
				Element:span
					,
				Element:span
				Element:span
					"primary_image"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					247
				Element:span
					,
				Element:span
				Element:span
					"zoom_url"
				Element:span
					:
				Element:span
				Element:span
					"https://cdn.url.path/bcapp/et7xe3pz/products/32/images/247/in_123__14581.1393831046.1280.1280.jpg?c=1"
				Element:span
					,
				Element:span
				Element:span
					"thumbnail_url"
				Element:span
					:
				Element:span
				Element:span
					"https://cdn.url.path/bcapp/et7xe3pz/products/32/images/247/in_123__14581.1393831046.220.290.jpg?c=1"
				Element:span
					,
				Element:span
				Element:span
					"standard_url"
				Element:span
					:
				Element:span
				Element:span
					"https://cdn.url.path/bcapp/et7xe3pz/products/32/images/247/in_123__14581.1393831046.386.513.jpg?c=1"
				Element:span
					,
				Element:span
				Element:span
					"tiny_url"
				Element:span
					:
				Element:span
				Element:span
					"https://cdn.url.path/bcapp/et7xe3pz/products/32/images/247/in_123__14581.1393831046.44.58.jpg?c=1"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"availability"
				Element:span
					:
				Element:span
				Element:span
					"available"
				Element:span
					,
				Element:span
				Element:span
					"brand"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
				Element:span
					"https://store-et7xe3pz.mybigcommerce.com/api/v2/brands/17.json"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"/brands/17"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"images"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
				Element:span
					"https://store-et7xe3pz.mybigcommerce.com/api/v2/products/32/images.json"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"/products/32/images"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"discount_rules"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
				Element:span
					"https://store-et7xe3pz.mybigcommerce.com/api/v2/products/32/discountrules.json"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"/products/32/discountrules"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"configurable_fields"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
				Element:span
					"https://store-et7xe3pz.mybigcommerce.com/api/v2/products/32/configurablefields.json"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"/products/32/configurablefields"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"custom_fields"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
				Element:span
					"https://store-et7xe3pz.mybigcommerce.com/api/v2/products/32/customfields.json"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"/products/32/customfields"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"videos"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
				Element:span
					"https://store-et7xe3pz.mybigcommerce.com/api/v2/products/32/videos.json"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"/products/32/videos"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"skus"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
				Element:span
					"https://store-et7xe3pz.mybigcommerce.com/api/v2/products/32/skus.json"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"/products/32/skus"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"rules"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
				Element:span
					"https://store-et7xe3pz.mybigcommerce.com/api/v2/products/32/rules.json"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"/products/32/rules"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"option_set"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"options"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
				Element:span
					"https://store-et7xe3pz.mybigcommerce.com/api/v2/products/32/options.json"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"/products/32/options"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"tax_class"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
				Element:span
					"https://store-et7xe3pz.mybigcommerce.com/api/v2/taxclasses/0.json"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"/taxclasses/0"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					33
				Element:span
					,
				Element:span
				Element:span
					"keyword_filter"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"[Sample] Anna, multi-colored bangles"
				Element:span
					,
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"physical"
				Element:span
					,
				Element:span
				Element:span
					"sku"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"description"
				Element:span
					:
				Element:span
				Element:span
					"One of the best things you can do to make your store successful is invest some time in writing great product descriptions.</p>"
				Element:span
					,
				Element:span
				Element:span
					"search_keywords"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"availability_description"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"price"
				Element:span
					:
				Element:span
				Element:span
					"59.0000"
				Element:span
					,
				Element:span
				Element:span
					"cost_price"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"retail_price"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"sale_price"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"calculated_price"
				Element:span
					:
				Element:span
				Element:span
					"59.0000"
				Element:span
					,
				Element:span
				Element:span
					"sort_order"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"is_visible"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"is_featured"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"related_products"
				Element:span
					:
				Element:span
				Element:span
					"-1"
				Element:span
					,
				Element:span
				Element:span
					"inventory_level"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"inventory_warning_level"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"warranty"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"weight"
				Element:span
					:
				Element:span
				Element:span
					"0.5000"
				Element:span
					,
				Element:span
				Element:span
					"width"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"height"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"depth"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"fixed_cost_shipping_price"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"is_free_shipping"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"inventory_tracking"
				Element:span
					:
				Element:span
				Element:span
					"none"
				Element:span
					,
				Element:span
				Element:span
					"rating_total"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"rating_count"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"total_sold"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"date_created"
				Element:span
					:
				Element:span
				Element:span
					"Fri, 21 Sep 2012 02:46:41 +0000"
				Element:span
					,
				Element:span
				Element:span
					"brand_id"
				Element:span
					:
				Element:span
				Element:span
					18
				Element:span
					,
				Element:span
				Element:span
					"view_count"
				Element:span
					:
				Element:span
				Element:span
					12
				Element:span
					,
				Element:span
				Element:span
					"page_title"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"meta_keywords"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"meta_description"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"layout_file"
				Element:span
					:
				Element:span
				Element:span
					"product.html"
				Element:span
					,
				Element:span
				Element:span
					"is_price_hidden"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"price_hidden_label"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"categories"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					14
				Element:span
				Element:span
					],
				Element:span
				Element:span
					"date_modified"
				Element:span
					:
				Element:span
				Element:span
					"Mon, 24 Sep 2012 05:28:02 +0000"
				Element:span
					,
				Element:span
				Element:span
					"event_date_field_name"
				Element:span
					:
				Element:span
				Element:span
					"Delivery Date"
				Element:span
					,
				Element:span
				Element:span
					"event_date_type"
				Element:span
					:
				Element:span
				Element:span
					"none"
				Element:span
					,
				Element:span
				Element:span
					"event_date_start"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"event_date_end"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"myob_asset_account"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"myob_income_account"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"myob_expense_account"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"peachtree_gl_account"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"condition"
				Element:span
					:
				Element:span
				Element:span
					"New"
				Element:span
					,
				Element:span
				Element:span
					"is_condition_shown"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"preorder_release_date"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"is_preorder_only"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"preorder_message"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"order_quantity_minimum"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"order_quantity_maximum"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"open_graph_type"
				Element:span
					:
				Element:span
				Element:span
					"product"
				Element:span
					,
				Element:span
				Element:span
					"open_graph_title"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"open_graph_description"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"is_open_graph_thumbnail"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"upc"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"avalara_product_tax_code"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"date_last_imported"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"option_set_id"
				Element:span
					:
				Element:span
				Element:span
					13
				Element:span
					,
				Element:span
				Element:span
					"tax_class_id"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"option_set_display"
				Element:span
					:
				Element:span
				Element:span
					"right"
				Element:span
					,
				Element:span
				Element:span
					"bin_picking_number"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"custom_url"
				Element:span
					:
				Element:span
				Element:span
					"/anna-multi-colored-bangles/"
				Element:span
					,
				Element:span
				Element:span
					"primary_image"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					245
				Element:span
					,
				Element:span
				Element:span
					"zoom_url"
				Element:span
					:
				Element:span
				Element:span
					"https://cdn.url.path/bcapp/et7xe3pz/products/33/images/245/HERO_cocolee_anna_92865__20303.1393831046.1280.1280.jpg?c=1"
				Element:span
					,
				Element:span
				Element:span
					"thumbnail_url"
				Element:span
					:
				Element:span
				Element:span
					"https://cdn.url.path/bcapp/et7xe3pz/products/33/images/245/HERO_cocolee_anna_92865__20303.1393831046.220.290.jpg?c=1"
				Element:span
					,
				Element:span
				Element:span
					"standard_url"
				Element:span
					:
				Element:span
				Element:span
					"https://cdn.url.path/bcapp/et7xe3pz/products/33/images/245/HERO_cocolee_anna_92865__20303.1393831046.386.513.jpg?c=1"
				Element:span
					,
				Element:span
				Element:span
					"tiny_url"
				Element:span
					:
				Element:span
				Element:span
					"https://cdn.url.path/bcapp/et7xe3pz/products/33/images/245/HERO_cocolee_anna_92865__20303.1393831046.44.58.jpg?c=1"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"availability"
				Element:span
					:
				Element:span
				Element:span
					"available"
				Element:span
					,
				Element:span
				Element:span
					"brand"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
				Element:span
					"https://store-et7xe3pz.mybigcommerce.com/api/v2/brands/18.json"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"/brands/18"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"images"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
				Element:span
					"https://store-et7xe3pz.mybigcommerce.com/api/v2/products/33/images.json"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"/products/33/images"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"discount_rules"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
				Element:span
					"https://store-et7xe3pz.mybigcommerce.com/api/v2/products/33/discountrules.json"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"/products/33/discountrules"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"configurable_fields"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
				Element:span
					"https://store-et7xe3pz.mybigcommerce.com/api/v2/products/33/configurablefields.json"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"/products/33/configurablefields"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"custom_fields"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
				Element:span
					"https://store-et7xe3pz.mybigcommerce.com/api/v2/products/33/customfields.json"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"/products/33/customfields"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"videos"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
				Element:span
					"https://store-et7xe3pz.mybigcommerce.com/api/v2/products/33/videos.json"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"/products/33/videos"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"skus"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
				Element:span
					"https://store-et7xe3pz.mybigcommerce.com/api/v2/products/33/skus.json"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"/products/33/skus"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"rules"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
				Element:span
					"https://store-et7xe3pz.mybigcommerce.com/api/v2/products/33/rules.json"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"/products/33/rules"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"option_set"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
				Element:span
					"https://store-et7xe3pz.mybigcommerce.com/api/v2/optionsets/13.json"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"/optionsets/13"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"options"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
				Element:span
					"https://store-et7xe3pz.mybigcommerce.com/api/v2/products/33/options.json"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"/products/33/options"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"tax_class"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
				Element:span
					"https://store-et7xe3pz.mybigcommerce.com/api/v2/taxclasses/0.json"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"/taxclasses/0"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
				Element:span
					]
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Get a Product
			Node:
			(type) c
			(layer)1
				Element:p
					Gets a product.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					GET /stores/{store_hash}/v2/products/{id}
				Element:li
					Basic Auth >
				Element:code
					GET /api/v2/products/{id}
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Notes
			Node:
			(type) c
			(layer)1
				Element:p
					You can filter the retrieved fields by appending one of the following options to your request:
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:code
					?include=
				Element:li
				Element:code
					?include=@summary
				Element:li
				Element:code
					?exclude=
			Node:
			(type) c
			(layer)1
				Element:p
					In particular, you can reduce payload size, and improve performance, by excluding the
				Element:code
					description
					field.
			Node:
			(type) c
			(layer)1
				Element:h5
				Element:span
					Mandatory Fields
			Node:
			(type) c
			(layer)1
				Element:p
					However, the following fields are always present on product API requests, and cannot be excluded:
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:code
					id
				Element:li
				Element:code
					name
				Element:li
				Element:code
					date_modified
				Element:li
				Element:code
					primary_image
			Node:
			(type) c
			(layer)1
				Element:h5
				Element:span
					include
			Node:
			(type) c
			(layer)1
				Element:p
					The following sample request will retrieve
				Element:em
					only
					the specified
				Element:code
					date_created
					,
				Element:code
					price
					, and
				Element:code
					cost_price
					fields, plus the
				Element:a
					mandatory fields
					listed just above:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					https://store-et7xe3pz.mybigcommerce.com/api/v2/products/32?include=date_created,price,cost_price
			Node:
			(type) c
			(layer)1
				Element:p
					Here is a corresponding sample response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					32
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"[Sample] Tomorrow is today, Red printed scarf"
				Element:span
					,
				Element:span
				Element:span
					"price"
				Element:span
					:
				Element:span
				Element:span
					"89.0000"
				Element:span
					,
				Element:span
				Element:span
					"cost_price"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"date_created"
				Element:span
					:
				Element:span
				Element:span
					"Fri, 21 Sep 2012 02:31:01 +0000"
				Element:span
					,
				Element:span
				Element:span
					"date_modified"
				Element:span
					:
				Element:span
				Element:span
					"Thu, 10 Dec 2015 21:10:17 +0000"
				Element:span
					,
				Element:span
				Element:span
					"primary_image"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					247
				Element:span
					,
				Element:span
				Element:span
					"tiny_url"
				Element:span
					:
				Element:span
				Element:span
					"https://cdn.url.path/bcapp/k84uuwpy/products/32/images/247/in_123__14581.1348449270.60.90.jpg?c=1"
				Element:span
					,
				Element:span
				Element:span
					"standard_url"
				Element:span
					:
				Element:span
				Element:span
					"https://cdn.url.path/bcapp/k84uuwpy/products/32/images/247/in_123__14581.1348449270.500.750.jpg?c=1"
				Element:span
					,
				Element:span
				Element:span
					"thumbnail_url"
				Element:span
					:
				Element:span
				Element:span
					"https://cdn.url.path/bcapp/k84uuwpy/products/32/images/247/in_123__14581.1348449270.190.285.jpg?c=1"
				Element:span
					,
				Element:span
				Element:span
					"zoom_url"
				Element:span
					:
				Element:span
				Element:span
					"https://cdn.url.path/bcapp/k84uuwpy/products/32/images/247/in_123__14581.1348449270.1280.1280.jpg?c=1"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"metadata"
				Element:span
					:
				Element:span
				Element:span
					[]
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h5
				Element:span
					include=@summary
			Node:
			(type) c
			(layer)1
				Element:p
					The
				Element:code
					?include=@summary
					option retrieves the following predefined subset of fields, in addition to the
				Element:a
					mandatory fields
					listed above:
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:code
					availability
				Element:li
				Element:code
					calculated_price
				Element:li
				Element:code
					inventory_tracking
				Element:li
				Element:code
					sku
				Element:li
				Element:code
					inventory_level
				Element:li
				Element:code
					inventory_warning_level
				Element:li
				Element:code
					is_visible
				Element:li
				Element:code
					is_featured
			Node:
			(type) c
			(layer)1
				Element:p
					Here is a sample request with the
				Element:code
					?include=@summary
					option appended:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					https://store-et7xe3pz.mybigcommerce.com/api/v2/products/32?include=@summary
			Node:
			(type) c
			(layer)1
				Element:p
					Here is a corresponding sample response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					32
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"[Sample] Tomorrow is today, Red printed scarf"
				Element:span
					,
				Element:span
				Element:span
					"sku"
				Element:span
					:
				Element:span
				Element:span
					"TTRPS"
				Element:span
					,
				Element:span
				Element:span
					"calculated_price"
				Element:span
					:
				Element:span
				Element:span
					"89.0000"
				Element:span
					,
				Element:span
				Element:span
					"is_visible"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"is_featured"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"inventory_level"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"inventory_warning_level"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"inventory_tracking"
				Element:span
					:
				Element:span
				Element:span
					"none"
				Element:span
					,
				Element:span
				Element:span
					"date_modified"
				Element:span
					:
				Element:span
				Element:span
					"Thu, 10 Dec 2015 21:10:17 +0000"
				Element:span
					,
				Element:span
				Element:span
					"availability"
				Element:span
					:
				Element:span
				Element:span
					"available"
				Element:span
					,
				Element:span
				Element:span
					"primary_image"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					247
				Element:span
					,
				Element:span
				Element:span
					"tiny_url"
				Element:span
					:
				Element:span
				Element:span
					"https://cdn.url.path/bcapp/k84uuwpy/products/32/images/247/in_123__14581.1348449270.60.90.jpg?c=1"
				Element:span
					,
				Element:span
				Element:span
					"standard_url"
				Element:span
					:
				Element:span
				Element:span
					"https://cdn.url.path/bcapp/k84uuwpy/products/32/images/247/in_123__14581.1348449270.500.750.jpg?c=1"
				Element:span
					,
				Element:span
				Element:span
					"thumbnail_url"
				Element:span
					:
				Element:span
				Element:span
					"https://cdn.url.path/bcapp/k84uuwpy/products/32/images/247/in_123__14581.1348449270.190.285.jpg?c=1"
				Element:span
					,
				Element:span
				Element:span
					"zoom_url"
				Element:span
					:
				Element:span
				Element:span
					"https://cdn.url.path/bcapp/k84uuwpy/products/32/images/247/in_123__14581.1348449270.1280.1280.jpg?c=1"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"metadata"
				Element:span
					:
				Element:span
				Element:span
					[]
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h5
				Element:span
					exclude
			Node:
			(type) c
			(layer)1
				Element:p
					The
				Element:code
					?exclude=
					option excludes one or more specified fields. However, you cannot exclude the mandatory
				Element:code
					id
					,
				Element:code
					name
					,
				Element:code
					date_modified
					, or
				Element:code
					primary_image
					fields.
			Node:
			(type) c
			(layer)1
				Element:p
					Here is a sample request with the
				Element:code
					?exclude=
					option appended:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					https://store-et7xe3pz.mybigcommerce.com/api/v2/products/32?exclude=description
			Node:
			(type) c
			(layer)1
				Element:p
					We have omitted the corresponding sample response. However, the following section shows a complete sample response for a request submitted with no
				Element:code
					?include
					or
				Element:code
					?exclude
					option. (The effect of the
				Element:code
					?exclude=description
					option shown above would be to omit the
				Element:code
					"description":
					field shown as the sixth field below.)
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					32
				Element:span
					,
				Element:span
				Element:span
					"keyword_filter"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"[Sample] Tomorrow is today, Red printed scarf"
				Element:span
					,
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"physical"
				Element:span
					,
				Element:span
				Element:span
					"sku"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"description"
				Element:span
					:
				Element:span
				Element:span
					"Densely pack your descriptions with useful information and watch products fly off the shelf."
				Element:span
					,
				Element:span
				Element:span
					"search_keywords"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"availability_description"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"price"
				Element:span
					:
				Element:span
				Element:span
					"89.0000"
				Element:span
					,
				Element:span
				Element:span
					"cost_price"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"retail_price"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"sale_price"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"calculated_price"
				Element:span
					:
				Element:span
				Element:span
					"89.0000"
				Element:span
					,
				Element:span
				Element:span
					"sort_order"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"is_visible"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"is_featured"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"related_products"
				Element:span
					:
				Element:span
				Element:span
					"-1"
				Element:span
					,
				Element:span
				Element:span
					"inventory_level"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"inventory_warning_level"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"warranty"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"weight"
				Element:span
					:
				Element:span
				Element:span
					"0.3000"
				Element:span
					,
				Element:span
				Element:span
					"width"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"height"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"depth"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"fixed_cost_shipping_price"
				Element:span
					:
				Element:span
				Element:span
					"10.0000"
				Element:span
					,
				Element:span
				Element:span
					"is_free_shipping"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"inventory_tracking"
				Element:span
					:
				Element:span
				Element:span
					"none"
				Element:span
					,
				Element:span
				Element:span
					"rating_total"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"rating_count"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"total_sold"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"date_created"
				Element:span
					:
				Element:span
				Element:span
					"Fri, 21 Sep 2012 02:31:01 +0000"
				Element:span
					,
				Element:span
				Element:span
					"brand_id"
				Element:span
					:
				Element:span
				Element:span
					17
				Element:span
					,
				Element:span
				Element:span
					"view_count"
				Element:span
					:
				Element:span
				Element:span
					4
				Element:span
					,
				Element:span
				Element:span
					"page_title"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"meta_keywords"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"meta_description"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"layout_file"
				Element:span
					:
				Element:span
				Element:span
					"product.html"
				Element:span
					,
				Element:span
				Element:span
					"is_price_hidden"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"price_hidden_label"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"categories"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					14
				Element:span
				Element:span
					],
				Element:span
				Element:span
					"date_modified"
				Element:span
					:
				Element:span
				Element:span
					"Mon, 24 Sep 2012 01:34:57 +0000"
				Element:span
					,
				Element:span
				Element:span
					"event_date_field_name"
				Element:span
					:
				Element:span
				Element:span
					"Delivery Date"
				Element:span
					,
				Element:span
				Element:span
					"event_date_type"
				Element:span
					:
				Element:span
				Element:span
					"none"
				Element:span
					,
				Element:span
				Element:span
					"event_date_start"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"event_date_end"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"myob_asset_account"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"myob_income_account"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"myob_expense_account"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"peachtree_gl_account"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"condition"
				Element:span
					:
				Element:span
				Element:span
					"New"
				Element:span
					,
				Element:span
				Element:span
					"is_condition_shown"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"preorder_release_date"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"is_preorder_only"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"preorder_message"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"order_quantity_minimum"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"order_quantity_maximum"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"open_graph_type"
				Element:span
					:
				Element:span
				Element:span
					"product"
				Element:span
					,
				Element:span
				Element:span
					"open_graph_title"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"open_graph_description"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"is_open_graph_thumbnail"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"upc"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"avalara_product_tax_code"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"date_last_imported"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"option_set_id"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"tax_class_id"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"option_set_display"
				Element:span
					:
				Element:span
				Element:span
					"right"
				Element:span
					,
				Element:span
				Element:span
					"bin_picking_number"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"custom_url"
				Element:span
					:
				Element:span
				Element:span
					"/tomorrow-is-today-red-printed-scarf/"
				Element:span
					,
				Element:span
				Element:span
					"primary_image"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					247
				Element:span
					,
				Element:span
				Element:span
					"zoom_url"
				Element:span
					:
				Element:span
				Element:span
					"https://cdn.url.path/bcapp/et7xe3pz/products/32/images/247/in_123__14581.1393831046.1280.1280.jpg?c=1"
				Element:span
					,
				Element:span
				Element:span
					"thumbnail_url"
				Element:span
					:
				Element:span
				Element:span
					"https://cdn.url.path/bcapp/et7xe3pz/products/32/images/247/in_123__14581.1393831046.220.290.jpg?c=1"
				Element:span
					,
				Element:span
				Element:span
					"standard_url"
				Element:span
					:
				Element:span
				Element:span
					"https://cdn.url.path/bcapp/et7xe3pz/products/32/images/247/in_123__14581.1393831046.386.513.jpg?c=1"
				Element:span
					,
				Element:span
				Element:span
					"tiny_url"
				Element:span
					:
				Element:span
				Element:span
					"https://cdn.url.path/bcapp/et7xe3pz/products/32/images/247/in_123__14581.1393831046.44.58.jpg?c=1"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"availability"
				Element:span
					:
				Element:span
				Element:span
					"available"
				Element:span
					,
				Element:span
				Element:span
					"brand"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
				Element:span
					"https://store-et7xe3pz.mybigcommerce.com/api/v2/brands/17.json"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"/brands/17"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"images"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
				Element:span
					"https://store-et7xe3pz.mybigcommerce.com/api/v2/products/32/images.json"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"/products/32/images"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"discount_rules"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
				Element:span
					"https://store-et7xe3pz.mybigcommerce.com/api/v2/products/32/discountrules.json"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"/products/32/discountrules"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"configurable_fields"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
				Element:span
					"https://store-et7xe3pz.mybigcommerce.com/api/v2/products/32/configurablefields.json"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"/products/32/configurablefields"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"custom_fields"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
				Element:span
					"https://store-et7xe3pz.mybigcommerce.com/api/v2/products/32/customfields.json"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"/products/32/customfields"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"videos"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
				Element:span
					"https://store-et7xe3pz.mybigcommerce.com/api/v2/products/32/videos.json"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"/products/32/videos"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"skus"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
				Element:span
					"https://store-et7xe3pz.mybigcommerce.com/api/v2/products/32/skus.json"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"/products/32/skus"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"rules"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
				Element:span
					"https://store-et7xe3pz.mybigcommerce.com/api/v2/products/32/rules.json"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"/products/32/rules"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"option_set"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"options"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
				Element:span
					"https://store-et7xe3pz.mybigcommerce.com/api/v2/products/32/options.json"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"/products/32/options"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"tax_class"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
				Element:span
					"https://store-et7xe3pz.mybigcommerce.com/api/v2/taxclasses/0.json"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"/taxclasses/0"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Get a Product Count
			Node:
			(type) c
			(layer)1
				Element:p
					Gets a count of products.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					GET /stores/{store_hash}/v2/products/count
				Element:li
					Basic Auth >
				Element:code
					GET /api/v2/products/count
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Filters
			Node:
			(type) c
			(layer)1
				Element:p
					Filter parameters can be added to the URL query string to select specific products in the collection.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Type
				Element:th
					Example
				Element:tbody
				Element:tr
				Element:td
					min_id
				Element:td
					int
				Element:td
					/api/v2/products?min_id={value}
				Element:tr
				Element:td
					max_id
				Element:td
					int
				Element:td
					/api/v2/products?max_id={value}
				Element:tr
				Element:td
					name
				Element:td
					string
				Element:td
					/api/v2/products?name={value}
				Element:tr
				Element:td
					keyword_filter
				Element:td
					string
				Element:td
					/api/v2/products?keyword_filter={value}
				Element:tr
				Element:td
					description
				Element:td
					string
				Element:td
					/api/v2/products?description={value}
				Element:tr
				Element:td
					sku
				Element:td
					string
				Element:td
					/api/v2/products?sku={value}
				Element:tr
				Element:td
					condition
				Element:td
					string
				Element:td
					/api/v2/products?condition={value}
				Element:tr
				Element:td
					availability
				Element:td
					string
				Element:td
					/api/v2/products?availability={value}
				Element:tr
				Element:td
					brand_id
				Element:td
					string
				Element:td
					/api/v2/products?brand_id={value}
				Element:tr
				Element:td
					min_date_created
				Element:td
					date
				Element:td
					/api/v2/products?min_date_created={value}
				Element:tr
				Element:td
					max_date_created
				Element:td
					date
				Element:td
					/api/v2/products?max_date_created={value}
				Element:tr
				Element:td
					min_date_modified
				Element:td
					date
				Element:td
					/api/v2/products?min_date_modified={value}
				Element:tr
				Element:td
					max_date_modified
				Element:td
					date
				Element:td
					/api/v2/products?max_date_modified={value}
				Element:tr
				Element:td
					min_date_last_imported
				Element:td
					date
				Element:td
					/api/v2/products?min_date_last_imported={value}
				Element:tr
				Element:td
					max_date_last_imported
				Element:td
					date
				Element:td
					/api/v2/products?max_date_last_imported={value}
				Element:tr
				Element:td
					min_price
				Element:td
					decimal
				Element:td
					/api/v2/products?min_price={value}
				Element:tr
				Element:td
					max_price
				Element:td
					decimal
				Element:td
					/api/v2/products?max_price={value}
				Element:tr
				Element:td
					min_number_sold
				Element:td
					int
				Element:td
					/api/v2/products?min_number_sold={value}
				Element:tr
				Element:td
					max_number_sold
				Element:td
					int
				Element:td
					/api/v2/products?max_number_sold={value}
				Element:tr
				Element:td
					is_visible
				Element:td
					string
				Element:td
					/api/v2/products?is_visible={value}
				Element:tr
				Element:td
					is_featured
				Element:td
					string
				Element:td
					/api/v2/products?is_featured={value}
				Element:tr
				Element:td
					min_inventory_level
				Element:td
					int
				Element:td
					/api/v2/products?min_inventory_level={value}
				Element:tr
				Element:td
					max_inventory_level
				Element:td
					int
				Element:td
					/api/v2/products?max_inventory_level={value}
				Element:tr
				Element:td
					include_sku
				Element:td
					boolean
				Element:td
					/api/v2/products?include_sku={value}
				Element:tr
				Element:td
					category
				Element:td
					string
				Element:td
					/api/v2/products?category={value}
				Element:tr
				Element:td
					product_tax_code
				Element:td
					string
				Element:td
					/api/v2/products?product_tax_code={value}
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Notes
			Node:
			(type) c
			(layer)1
				Element:p
					If no filters are applied, the total number of products is returned.
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"count"
				Element:span
					:
				Element:span
				Element:span
					44
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Create a Product
			Node:
			(type) c
			(layer)1
				Element:p
					Creates a new product. The example request shows how to create a basic product by sending a
				Element:a
					product object
					with the minimum required properties.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					POST /stores/{store_hash}/v2/products
				Element:li
					Basic Auth >
				Element:code
					POST /api/v2/products
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Read-only Properties
			Node:
			(type) c
			(layer)1
				Element:p
					The following properties of the product are read-only. If one or more of these properties are included in the request, it will be rejected.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					id
				Element:li
					calculated_price
				Element:li
					brand
				Element:li
					images
				Element:li
					discount_rules
				Element:li
					configurable_fields
				Element:li
					custom_fields
				Element:li
					primary_image
				Element:li
					videos
				Element:li
					skus
				Element:li
					rules
				Element:li
					option_set
				Element:li
					options
				Element:li
					tax_class
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Requirements
			Node:
			(type) c
			(layer)1
				Element:p
					The following properties of the product are required. The request won’t be fulfilled unless these properties are valid.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					name
				Element:li
					price
				Element:li
					categories
				Element:li
					type
				Element:li
					availability
				Element:li
					weight
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Notes
			Node:
			(type) c
			(layer)1
				Element:p
					Create a request by sending a
				Element:a
					product object
					with the minimum required properties:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Plain T-Shirt"
				Element:span
					,
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"physical"
				Element:span
					,
				Element:span
				Element:span
					"description"
				Element:span
					:
				Element:span
				Element:span
					"This timeless fashion staple will never go out of style!"
				Element:span
					,
				Element:span
				Element:span
					"price"
				Element:span
					:
				Element:span
				Element:span
					"29.99"
				Element:span
					,
				Element:span
				Element:span
					"categories"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
					18
				Element:span
					],
				Element:span
				Element:span
					"availability"
				Element:span
					:
				Element:span
				Element:span
					"available"
				Element:span
					,
				Element:span
				Element:span
					"weight"
				Element:span
					:
				Element:span
				Element:span
					"0.5"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					When the
				Element:code
					is_visible
					property is not provided, the product’s visibility is
				Element:code
					false
					by default.
			Node:
			(type) c
			(layer)1
				Element:p
					To make newly created products immediately visible on the storefront, you must set
				Element:code
					is_visible
					to
				Element:code
					true
					when you create each product.
			Node:
			(type) c
			(layer)1
				Element:p
					To maximize system performance, BigCommerce caps the number of categories to which a product can belong. The maximum is 1,000. If your
				Element:code
					POST
					includes an array of more than 1,000
				Element:code
					categories
					ID values, BigCommerce will return a 403 error:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					403 Access Denied/Forbidden
			Node:
			(type) c
			(layer)1
				Element:p
					If automatic tax is enabled on the store, the value of
				Element:code
					tax_class_id
					will have no effect on the calculation of taxes.
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Update a Product
			Node:
			(type) c
			(layer)1
				Element:p
					Updates an existing product.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					PUT /stores/{store_hash}/v2/products/{id}
				Element:li
					Basic Auth >
				Element:code
					PUT /api/v2/products/{id}
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Read-only Properties
			Node:
			(type) c
			(layer)1
				Element:p
					The following properties of the product are read-only. If one or more of these properties are included in the request, it will be rejected.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					id
				Element:li
					rating_total
				Element:li
					rating_count
				Element:li
					number_sold
				Element:li
					date_created
				Element:li
					date_modified
				Element:li
					date_last_imported
				Element:li
					calculated_price
				Element:li
					brand
				Element:li
					images
				Element:li
					discount_rules
				Element:li
					configurable_fields
				Element:li
					custom_fields
				Element:li
					primary_image
				Element:li
					videos
				Element:li
					skus
				Element:li
					rules
				Element:li
					option_set
				Element:li
					options
				Element:li
					tax_class
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Requirements
			Node:
			(type) c
			(layer)1
				Element:p
					There are no required properties when updating a product.
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Notes
			Node:
			(type) c
			(layer)1
				Element:p
					To update a product, set one or more
				Element:a
					product properties
					in the
				Element:code
					PUT
					request:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"custom_url"
				Element:span
					:
				Element:span
				Element:span
					"/plain-tshirt/"
				Element:span
					,
				Element:span
				Element:span
					"is_visible"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					For example, you can use a
				Element:code
					PUT
					to link a product to an option set:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"option_set_id"
				Element:span
					:
				Element:span
				Element:span
					14
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Invalid property values will produce a
				Element:code
					400 Bad Request
					error response:
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Request
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"condition"
				Element:span
					:
				Element:span
				Element:span
					"Worn"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					400 Bad Request
			Node:
			(type) c
			(layer)1
				Element:p
					Trying to set read-only properties will also produce a
				Element:code
					400 Bad Request
					error response:
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Request
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"number_sold"
				Element:span
					:
				Element:span
				Element:span
					99
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					400 Bad Request
			Node:
			(type) c
			(layer)1
				Element:p
					To maximize system performance, BigCommerce caps the maximum number of categories to which a product can belong, at 1,000. If your
				Element:code
					PUT
					includes an array of more than 1,000
				Element:code
					categories
					ID values, BigCommerce will return a
				Element:code
					403
					error:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					403 Access Denied/Forbidden
			Node:
			(type) c
			(layer)1
				Element:p
					If automatic tax is enabled on the store, the value of
				Element:code
					tax_class_id
					will have no effect on the calculation of taxes.
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Delete a Product
			Node:
			(type) c
			(layer)1
				Element:p
					Deletes a product.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					DELETE /stores/{store_hash}/v2/products/{id}
				Element:li
					Basic Auth >
				Element:code
					DELETE /api/v2/products/{id}
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Notes
			Node:
			(type) c
			(layer)1
				Element:p
					Successful deletion of a product returns a
				Element:code
					204 No Content
					response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					204 No Content
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Delete All Products
			Node:
			(type) c
			(layer)1
				Element:p
					Deletes all products from the store.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					DELETE /stores/{store_hash}/v2/products
				Element:li
					Basic Auth >
				Element:code
					DELETE /api/v2/products
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Notes
			Node:
			(type) c
			(layer)1
				Element:p
					Successful deletion of all products returns a
				Element:code
					204 No Content
					response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					204 No Content
			Node:
			(type) c
			(layer)1
				Element:h2
				Element:span
					Brands
			Node:
			(type) c
			(layer)1
				Element:p
					Brand facets for identifying and categorizing products according to their manufacturer or company metonym.
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Brand Object – Properties
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Name
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
					int
				Element:td
				Element:tr
				Element:td
					name
				Element:td
					string
				Element:td
					The name of the brand. Must be unique.
				Element:tr
				Element:td
					page_title
				Element:td
					string
				Element:td
					The title shown in the browser while viewing the brand.
				Element:tr
				Element:td
					meta_keywords
				Element:td
					text
				Element:td
					Comma-separated list of meta keywords to include in the HTML.
				Element:tr
				Element:td
					meta_description
				Element:td
					text
				Element:td
					A meta description to include.
				Element:tr
				Element:td
					image_file
				Element:td
					string
				Element:td
					A valid image.
				Element:tr
				Element:td
					search_keywords
				Element:td
					string
				Element:td
					A comma-separated list of keywords that can be used to locate this brand.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
				Element:th
				Element:tbody
				Element:tr
				Element:td
				Element:strong
					Manages
				Element:td
				Element:tr
				Element:td
				Element:strong
					OAuth Scopes
				Element:td
					store_v2_products
				Element:tr
				Element:td
				Element:td
					store_v2_products_read_only
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					List Brands
			Node:
			(type) c
			(layer)1
				Element:p
					Gets the collection of brands. (Default sorting is by brand id, from lowest to highest.)
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					GET /stores/{store_hash}/v2/brands
				Element:li
					Basic Auth >
				Element:code
					GET /api/v2/brands
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Filters
			Node:
			(type) c
			(layer)1
				Element:p
					Filter parameters can be added to the URL query string to select specific brands in the collection.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Type
				Element:th
					Example
				Element:tbody
				Element:tr
				Element:td
					name
				Element:td
					string
				Element:td
					/api/v2/brands?name={value}
				Element:tr
				Element:td
					min_id
				Element:td
					int
				Element:td
					/api/v2/brands?min_id={value}
				Element:tr
				Element:td
					max_id
				Element:td
					int
				Element:td
					/api/v2/brands?max_id={value}
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Pagination
			Node:
			(type) c
			(layer)1
				Element:p
					Parameters can be added to the URL query string to paginate the collection. The maximum limit is 250. If a limit isn’t provided, BigCommerce returns up to 50 brands by default.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Type
				Element:th
					Example
				Element:tbody
				Element:tr
				Element:td
					Page
				Element:td
					int
				Element:td
					/api/v2/brands?page={number}
				Element:tr
				Element:td
					Limit
				Element:td
					int
				Element:td
					/api/v2/brands?limit={count}
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Apple"
				Element:span
					,
				Element:span
				Element:span
					"page_title"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"meta_keywords"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"meta_description"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"image_file"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"search_keywords"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					2
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Microsoft"
				Element:span
					,
				Element:span
				Element:span
					"page_title"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"meta_keywords"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"meta_description"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"image_file"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"search_keywords"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
				Element:span
					}
				Element:span
				Element:span
					]
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Get a Brand
			Node:
			(type) c
			(layer)1
				Element:p
					Gets a brand.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					GET /stores/{store_hash}/v2/brands/{id}
				Element:li
					Basic Auth >
				Element:code
					GET /api/v2/brands/{id}
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Apple"
				Element:span
					,
				Element:span
				Element:span
					"page_title"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"meta_keywords"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"meta_description"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"image_file"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"search_keywords"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Get a Count of Brands
			Node:
			(type) c
			(layer)1
				Element:p
					Returns the total number of brands in the store.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					GET /stores/{store_hash}/v2/brands/count
				Element:li
					Basic Auth >
				Element:code
					GET /api/v2/brands/count
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"count"
				Element:span
					:
				Element:span
				Element:span
					25
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Create a Brand
			Node:
			(type) c
			(layer)1
				Element:p
					Creates a new brand.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					POST /stores/{store_hash}/v2/brands
				Element:li
					Basic Auth >
				Element:code
					POST /api/v2/brands
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Read-only Properties
			Node:
			(type) c
			(layer)1
				Element:p
					The following properties of the brand are read-only. If one or more of these properties are included in the request, it will be rejected.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					id
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Requirements
			Node:
			(type) c
			(layer)1
				Element:p
					The following properties of the brand are required. The request won’t be fulfilled unless these properties are valid.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					name
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Notes
			Node:
			(type) c
			(layer)1
				Element:p
					To maximize system performance, BigCommerce caps the number of brands that can be added to a store at 30,000. If your POST causes the store to exceed the maximum of 30,000 brands, BigCommerce will return a 403 error.
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Request
			Node:
			(type) c
			(layer)1
				Element:p
					Example request object:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Xmen"
				Element:span
					,
				Element:span
				Element:span
					"page_title"
				Element:span
					:
				Element:span
				Element:span
					"X men brand"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					10
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Xmen"
				Element:span
					,
				Element:span
				Element:span
					"page_title"
				Element:span
					:
				Element:span
				Element:span
					"X men brand"
				Element:span
					,
				Element:span
				Element:span
					"meta_keywords"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"meta_description"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"image_file"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"search_keywords"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Update a Brand
			Node:
			(type) c
			(layer)1
				Element:p
					Updates an existing brand.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					PUT /stores/{store_hash}/v2/brands/{id}
				Element:li
					Basic Auth >
				Element:code
					PUT /api/v2/brands/{id}
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Read-only Properties
			Node:
			(type) c
			(layer)1
				Element:p
					The following properties of the brand are read-only. If one or more of these properties are included in the request, it will be rejected.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					id
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Requirements
			Node:
			(type) c
			(layer)1
				Element:p
					The following properties of the brand are required. The request won’t be fulfilled unless these properties are valid.
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					10
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Xmen"
				Element:span
					,
				Element:span
				Element:span
					"page_title"
				Element:span
					:
				Element:span
				Element:span
					"X men brand"
				Element:span
					,
				Element:span
				Element:span
					"meta_keywords"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"meta_description"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"image_file"
				Element:span
					:
				Element:span
				Element:span
					"t/apirmzk0a__43675.jpg"
				Element:span
					,
				Element:span
				Element:span
					"search_keywords"
				Element:span
					:
				Element:span
				Element:span
					"xmen, awesomeness"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Delete a Brand
			Node:
			(type) c
			(layer)1
				Element:p
					Deletes a brand.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth “>
				Element:code
					DELETE /stores/{store_hash}/v2/brands/{id}
				Element:li
					Basic Auth >
				Element:code
					DELETE /api/v2/brands/{id}
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Delete All Brands
			Node:
			(type) c
			(layer)1
				Element:p
					Deletes all brands belonging to a product.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					DELETE /stores/{store_hash}/v2/brands
				Element:li
					Basic Auth >
				Element:code
					DELETE /api/v2/brands
			Node:
			(type) c
			(layer)1
				Element:h2
				Element:span
					Bulk Pricing
			Node:
			(type) c
			(layer)1
				Element:p
					Bulk pricing rules applied to a product.
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Bulk Pricing Object – Properties
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Name
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
					string
				Element:td
					The ID of the bulk discount rule.
				Element:tr
				Element:td
					product_id
				Element:td
					int
				Element:td
					The ID of the product associated with this bulk discount rule.
				Element:tr
				Element:td
					min
				Element:td
					int
				Element:td
					The minimum inclusive quantity of a product to satisfy this rule. Must be greater than or equal to zero.
				Element:tr
				Element:td
					max
				Element:td
					int
				Element:td
					The maximum inclusive quantity of a product to satisfy this rule. Must be greater than the min value, unless this field has a value of 0 (zero), in which case there will be no maximum bound for this rule.
				Element:tr
				Element:td
					type
				Element:td
					enum
				Element:td
				Element:tr
				Element:td
					type_value
				Element:td
					decimal
				Element:td
					The value of the discount
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
				Element:th
				Element:tbody
				Element:tr
				Element:td
					Manages
				Element:td
				Element:tr
				Element:td
					OAuth Scopes
				Element:td
					store_v2_products
				Element:tr
				Element:td
				Element:td
					store_v2_products_read_only
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					List Bulk Pricing Rules
			Node:
			(type) c
			(layer)1
				Element:p
					Gets the collection of product bulk pricing rules.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					GET /stores/{store_hash}/v2/products/{product_id}/discount_rules
				Element:li
					Basic Auth >
				Element:code
					GET /api/v2/products/{product_id}/discount_rules
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Filters
			Node:
			(type) c
			(layer)1
				Element:p
					There are no filter parameters specific to
				Element:code
					discount_rules
					.
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Pagination
			Node:
			(type) c
			(layer)1
				Element:p
					Parameters can be added to the URL query string to paginate the collection. The maximum limit is 250. If a limit isn’t provided, up to 50 bulk_pricing_rules are returned by default.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Type
				Element:th
					Example
				Element:tbody
				Element:tr
				Element:td
					page
				Element:td
					int
				Element:td
					/api/v2/products/{product_id}/discount_rules?page={number}
				Element:tr
				Element:td
					limit
				Element:td
					int
				Element:td
					/api/v2/products/{product_id}/discount_rules?limit={count}
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"1"
				Element:span
					,
				Element:span
				Element:span
					"product_id"
				Element:span
					:
				Element:span
				Element:span
					30
				Element:span
					,
				Element:span
				Element:span
					"min"
				Element:span
					:
				Element:span
				Element:span
					100
				Element:span
					,
				Element:span
				Element:span
					"max"
				Element:span
					:
				Element:span
				Element:span
					500
				Element:span
					,
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"price"
				Element:span
					,
				Element:span
				Element:span
					"type_value"
				Element:span
					:
				Element:span
				Element:span
					2
				Element:span
				Element:span
					}
				Element:span
				Element:span
					]
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Get a Product Bulk Pricing Rule
			Node:
			(type) c
			(layer)1
				Element:p
					Gets a product bulk pricing rule.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					GET /stores/{store_hash}/v2/products/{product_id}/discount_rules/{id}
				Element:li
					Basic Auth >
				Element:code
					GET /api/v2/products/{product_id}/discount_rules/{id}
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"1"
				Element:span
					,
				Element:span
				Element:span
					"product_id"
				Element:span
					:
				Element:span
				Element:span
					30
				Element:span
					,
				Element:span
				Element:span
					"min"
				Element:span
					:
				Element:span
				Element:span
					100
				Element:span
					,
				Element:span
				Element:span
					"max"
				Element:span
					:
				Element:span
				Element:span
					500
				Element:span
					,
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"price"
				Element:span
					,
				Element:span
				Element:span
					"type_value"
				Element:span
					:
				Element:span
				Element:span
					2
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Get a Count of Bulk Pricing Rules
			Node:
			(type) c
			(layer)1
				Element:p
					Gets a count of the number of bulk pricing rules in the store.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					GET /stores/{store_hash}/v2/products/discount_rules/count
				Element:li
					Basic Auth >
				Element:code
					GET /api/v2/products/discount_rules/count
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"count"
				Element:span
					:
				Element:span
				Element:span
					9
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Create a Product Bulk Pricing Rule
			Node:
			(type) c
			(layer)1
				Element:p
					Creates a new product bulk pricing rule.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					POST /stores/{store_hash}/v2/products/{product_id}/discount_rules
				Element:li
					Basic Auth >
				Element:code
					POST /api/v2/products/{product_id}/discount_rules
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Read-only Properties
			Node:
			(type) c
			(layer)1
				Element:p
					The following properties of the discount rule are read-only. If one or more of these properties are included in the request, it will be rejected.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					product_id
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Requirements
			Node:
			(type) c
			(layer)1
				Element:p
					The following properties of the discount rule are required. The request won’t be fulfilled unless these properties are valid.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					type
				Element:li
					type_value
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Notes
			Node:
			(type) c
			(layer)1
				Element:p
					To specify that a
				Element:code
					min
					or
				Element:code
					max
					value is unbounded, these properties must be explicitly set with a value of
				Element:code
					0
					. If neither
				Element:code
					min
					nor
				Element:code
					max
					properties are included in the request, the existing value will remain unchanged.
			Node:
			(type) c
			(layer)1
				Element:p
					The range of the
				Element:code
					min
					and
				Element:code
					max
					values must not overlap an existing rule associated with the same product.
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Request
			Node:
			(type) c
			(layer)1
				Element:p
					Example request object:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"min"
				Element:span
					:
				Element:span
				Element:span
					100
				Element:span
					,
				Element:span
				Element:span
					"max"
				Element:span
					:
				Element:span
				Element:span
					500
				Element:span
					,
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"price"
				Element:span
					,
				Element:span
				Element:span
					"type_value"
				Element:span
					:
				Element:span
				Element:span
					2
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"1"
				Element:span
					,
				Element:span
				Element:span
					"product_id"
				Element:span
					:
				Element:span
				Element:span
					30
				Element:span
					,
				Element:span
				Element:span
					"min"
				Element:span
					:
				Element:span
				Element:span
					100
				Element:span
					,
				Element:span
				Element:span
					"max"
				Element:span
					:
				Element:span
				Element:span
					500
				Element:span
					,
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"price"
				Element:span
					,
				Element:span
				Element:span
					"type_value"
				Element:span
					:
				Element:span
				Element:span
					2
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Update a Product Bulk Pricing Rule
			Node:
			(type) c
			(layer)1
				Element:p
					Updates an existing product bulk pricing rule.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					PUT /stores/{store_hash}/v2/products/{product_id}/discount_rules/{id}
				Element:li
					Basic Auth >
				Element:code
					PUT /api/v2/products/{product_id}/discount_rules/{id}
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Read-only Properties
			Node:
			(type) c
			(layer)1
				Element:p
					The following properties of the discount rule are read-only. If one or more of these properties are included in the request, it will be rejected.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					product_id
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Requirements
			Node:
			(type) c
			(layer)1
				Element:p
					The following properties of the discount rule are required. The request won’t be fulfilled unless these properties are valid.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					type
				Element:li
					type_value
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Notes
			Node:
			(type) c
			(layer)1
				Element:p
					To specify that a
				Element:code
					min
					or
				Element:code
					max
					value is unbounded, these properties must be explicitly set with a value of
				Element:code
					0
					. If neither
				Element:code
					min
					nor
				Element:code
					max
					properties are included in the request, the existing value will remain unchanged.
			Node:
			(type) c
			(layer)1
				Element:p
					The range of the
				Element:code
					min
					and
				Element:code
					max
					values must not overlap an existing rule associated with the same product.
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Request
			Node:
			(type) c
			(layer)1
				Element:p
					Example request object:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"min"
				Element:span
					:
				Element:span
				Element:span
					200
				Element:span
					,
				Element:span
				Element:span
					"max"
				Element:span
					:
				Element:span
				Element:span
					300
				Element:span
					,
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"fixed"
				Element:span
					,
				Element:span
				Element:span
					"type_value"
				Element:span
					:
				Element:span
				Element:span
					10
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"1"
				Element:span
					,
				Element:span
				Element:span
					"product_id"
				Element:span
					:
				Element:span
				Element:span
					30
				Element:span
					,
				Element:span
				Element:span
					"min"
				Element:span
					:
				Element:span
				Element:span
					200
				Element:span
					,
				Element:span
				Element:span
					"max"
				Element:span
					:
				Element:span
				Element:span
					300
				Element:span
					,
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"fixed"
				Element:span
					,
				Element:span
				Element:span
					"type_value"
				Element:span
					:
				Element:span
				Element:span
					10
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Delete a Product Bulk Pricing Rule
			Node:
			(type) c
			(layer)1
				Element:p
					Deletes a product bulk pricing rule.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					DELETE /stores/{store_hash}/v2/products/{product_id}/discount_rules/{id}
				Element:li
					Basic Auth >
				Element:code
					DELETE /api/v2/products/{product_id}/discount_rules/{id}
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Delete Multiple Product Bulk Pricing Rules
			Node:
			(type) c
			(layer)1
				Element:p
					Deletes bulk pricing rules associated with a product.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					DELETE /stores/{store_hash}/v2/products/{product_id}/discount_rules
				Element:li
					Basic Auth >
				Element:code
					DELETE /api/v2/products/{product_id}/discount_rules
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Pagination
			Node:
			(type) c
			(layer)1
				Element:p
					Parameters can be added to the URL query string to paginate the collection. The maximum limit is 250. If a limit isn’t provided, up to 50
				Element:code
					bulk_pricing_rules
					are returned by default.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Type
				Element:th
					Example
				Element:tbody
				Element:tr
				Element:td
					page
				Element:td
					int
				Element:td
					/api/v2/products/{product_id}/discount_rules?page={number}
				Element:tr
				Element:td
					limit
				Element:td
					int
				Element:td
					/api/v2/products/{product_id}/discount_rules?limit={count}
			Node:
			(type) c
			(layer)1
				Element:h2
				Element:span
					Categories
			Node:
			(type) c
			(layer)1
				Element:p
					Index of hierarchical categories used to organize and group products.
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Category Object – Properties
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Name
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
					int
				Element:td
					A read-only field containing the unique numeric identifier of this category.
				Element:tr
				Element:td
					parent_id
				Element:td
					int
				Element:td
					The ID of the parent category to which this category belongs.
				Element:br
					(NOTE: the total number of parent categories cannot exceed seven.)
				Element:tr
				Element:td
					name
				Element:td
					string
				Element:td
					The name of the category. Must be unique.
				Element:tr
				Element:td
					description
				Element:td
					text
				Element:td
					A description for the category.
				Element:tr
				Element:td
					sort_order
				Element:td
					int
				Element:td
					The sort order of the category.
				Element:tr
				Element:td
					page_title
				Element:td
					string
				Element:td
					The page title for the category page.
				Element:tr
				Element:td
					meta_keywords
				Element:td
					text
				Element:td
					Comma-separated list of meta keywords to include in the HTML.
				Element:tr
				Element:td
					meta_description
				Element:td
					text
				Element:td
					A meta description to include.
				Element:tr
				Element:td
					layout_file
				Element:td
					string
				Element:td
					A valid layout file. (Please refer to
				Element:a
					this article
					on creating category files.)
				Element:tr
				Element:td
					parent_category_list
				Element:td
					array
				Element:td
					A read-only field containing the ID of this category and the ID of its parent category, if any.
				Element:tr
				Element:td
					image_file
				Element:td
					string
				Element:td
					A valid image.
				Element:tr
				Element:td
					is_visible
				Element:td
					boolean
				Element:td
					Is the category visible?
				Element:tr
				Element:td
					search_keywords
				Element:td
					string
				Element:td
					A comma-separated list of keywords that can be used to locate this brand.
				Element:tr
				Element:td
					url
				Element:td
					string
				Element:td
					The context path of this category.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
				Element:th
				Element:tbody
				Element:tr
				Element:td
				Element:strong
					Manages
				Element:td
				Element:tr
				Element:td
				Element:strong
					OAuth Scopes
				Element:td
					store_v2_products
				Element:tr
				Element:td
				Element:td
					store_v2_products_read_only
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					List Categories
			Node:
			(type) c
			(layer)1
				Element:p
					Gets the list of categories. (Default sorting is by category id, from lowest to highest.)
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					GET /stores/{store_hash}/v2/categories
				Element:li
					Basic Auth >
				Element:code
					GET /api/v2/categories
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Filters
			Node:
			(type) c
			(layer)1
				Element:p
					Filter parameters can be added to the URL query string to select specific categories in the collection.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Type
				Element:th
					Example
				Element:tbody
				Element:tr
				Element:td
					parent_id
				Element:td
					string
				Element:td
					/api/v2/categories?parent_id={value}
				Element:tr
				Element:td
					name
				Element:td
					string
				Element:td
					/api/v2/categories?name={value}
				Element:tr
				Element:td
					is_visible
				Element:td
					string
				Element:td
					/api/v2/categories?is_visible={value}
				Element:tr
				Element:td
					min_id
				Element:td
					int
				Element:td
					/api/v2/categories?min_id={value}
				Element:tr
				Element:td
					max_id
				Element:td
					int
				Element:td
					/api/v2/categories?max_id={value}
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Pagination
			Node:
			(type) c
			(layer)1
				Element:p
					Parameters can be added to the URL query string to paginate the collection. The maximum limit is 250. If a limit isn’t provided, up to 50 categories are returned by default.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Type
				Element:th
					Example
				Element:tbody
				Element:tr
				Element:td
					Page
				Element:td
					int
				Element:td
					/api/v2/categories?page={number}
				Element:tr
				Element:td
					Limit
				Element:td
					int
				Element:td
					/api/v2/categories?limit={count}
			Node:
			(type) c
			(layer)1
				Element:h4
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"parent_id"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Shop Mac"
				Element:span
					,
				Element:span
				Element:span
					"description"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"sort_order"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"page_title"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"meta_keywords"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"meta_description"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"layout_file"
				Element:span
					:
				Element:span
				Element:span
					"category.html"
				Element:span
					,
				Element:span
				Element:span
					"parent_category_list"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					1
				Element:span
				Element:span
					],
				Element:span
				Element:span
					"image_file"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"is_visible"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"search_keywords"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
				Element:span
					"/shop-mac/"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					]
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Get a Category
			Node:
			(type) c
			(layer)1
				Element:p
					Gets a single category.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					GET /stores/{store_hash}/v2/categories/{id}
				Element:li
					Basic Auth >
				Element:code
					GET /api/v2/categories/{id}
			Node:
			(type) c
			(layer)1
				Element:h4
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					10
				Element:span
					,
				Element:span
				Element:span
					"parent_id"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Xmen toys"
				Element:span
					,
				Element:span
				Element:span
					"description"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"sort_order"
				Element:span
					:
				Element:span
				Element:span
					2
				Element:span
					,
				Element:span
				Element:span
					"page_title"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"meta_keywords"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"meta_description"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"layout_file"
				Element:span
					:
				Element:span
				Element:span
					"category.html"
				Element:span
					,
				Element:span
				Element:span
					"parent_category_list"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					10
				Element:span
				Element:span
					],
				Element:span
				Element:span
					"image_file"
				Element:span
					:
				Element:span
				Element:span
					"d/apiy2uz6q__69888.jpg"
				Element:span
					,
				Element:span
				Element:span
					"is_visible"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"search_keywords"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
				Element:span
					"/xmen-toys/"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Get a Count of Categories
			Node:
			(type) c
			(layer)1
				Element:p
					Gets a count of the total number of categories in the store.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					GET /stores/{store_hash}/v2/categories/count
				Element:li
					Basic Auth >
				Element:code
					GET /api/v2/categories/count
			Node:
			(type) c
			(layer)1
				Element:h4
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"count"
				Element:span
					:
				Element:span
				Element:span
					10
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Create a Category
			Node:
			(type) c
			(layer)1
				Element:p
					Creates a new category.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					POST /stores/{store_hash}/v2/categories
				Element:li
					Basic Auth >
				Element:code
					POST /api/v2/categories
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Read-only Properties
			Node:
			(type) c
			(layer)1
				Element:p
					The following properties of the category are read-only. If one or more of these properties are included in the request, it will be rejected.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					id
				Element:li
					parent_category_list
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Requirements
			Node:
			(type) c
			(layer)1
				Element:p
					The following properties of the category are required. The request won’t be fulfilled unless these properties are valid.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					name
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Notes
			Node:
			(type) c
			(layer)1
				Element:p
					To maximize system performance, BigCommerce caps the number of categories that can be added to a store at 16,000. If your
				Element:code
					POST
					causes the store to exceed the maximum of 16,000 categories, BigCommerce will return a 403 error.
			Node:
			(type) c
			(layer)1
				Element:p
					In addition, BigCommerce caps the total number of parent categories at seven. If your
				Element:code
					POST
					includes the ID of a parent category in the
				Element:code
					parent_id
					field, BigCommerce will check that parent category and its parent and so on to determine the total number of parent categories. If your
				Element:code
					POST
					would cause the total number of parent categories to exceed seven, BigCommerce will return a 403 error.
			Node:
			(type) c
			(layer)1
				Element:h4
					Request
			Node:
			(type) c
			(layer)1
				Element:p
					Example request object:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Xmen toys"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h4
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					10
				Element:span
					,
				Element:span
				Element:span
					"parent_id"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Xmen toys"
				Element:span
					,
				Element:span
				Element:span
					"description"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"sort_order"
				Element:span
					:
				Element:span
				Element:span
					2
				Element:span
					,
				Element:span
				Element:span
					"page_title"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"meta_keywords"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"meta_description"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"layout_file"
				Element:span
					:
				Element:span
				Element:span
					"category.html"
				Element:span
					,
				Element:span
				Element:span
					"parent_category_list"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					10
				Element:span
				Element:span
					],
				Element:span
				Element:span
					"image_file"
				Element:span
					:
				Element:span
				Element:span
					"d/apiy2uz6q__69888.jpg"
				Element:span
					,
				Element:span
				Element:span
					"is_visible"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"search_keywords"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
				Element:span
					"/xmen-toys/"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Update a Category
			Node:
			(type) c
			(layer)1
				Element:p
					Updates an existing category.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					PUT /stores/{store_hash}/v2/categories/{id}
				Element:li
					Basic Auth >
				Element:code
					PUT /api/v2/categories/{id}
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Read-only Properties
			Node:
			(type) c
			(layer)1
				Element:p
					The following properties of the category are read-only. If one or more of these properties are included in the request, it will be rejected.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					id
				Element:li
					parent_category_list
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Requirements
			Node:
			(type) c
			(layer)1
				Element:p
					The following properties of the category are required. The request won’t be fulfilled unless these properties are valid.
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Notes
			Node:
			(type) c
			(layer)1
				Element:p
					To maximize system performance, BigCommerce caps the total number of parent categories at seven. If your
				Element:code
					PUT
					includes the ID of a parent category in the
				Element:code
					parent_id
					field, BigCommerce will check the parent and any children of the current category to determine the total number of parent categories. If your
				Element:code
					PUT
					would cause the total number of parent categories to exceed the maximum of seven, BigCommerce will return a 403 error.
			Node:
			(type) c
			(layer)1
				Element:h4
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					10
				Element:span
					,
				Element:span
				Element:span
					"parent_id"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Xmen toys"
				Element:span
					,
				Element:span
				Element:span
					"description"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"sort_order"
				Element:span
					:
				Element:span
				Element:span
					2
				Element:span
					,
				Element:span
				Element:span
					"page_title"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"meta_keywords"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"meta_description"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"layout_file"
				Element:span
					:
				Element:span
				Element:span
					"category.html"
				Element:span
					,
				Element:span
				Element:span
					"parent_category_list"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					10
				Element:span
				Element:span
					],
				Element:span
				Element:span
					"image_file"
				Element:span
					:
				Element:span
				Element:span
					"d/apiy2uz6q__69888.jpg"
				Element:span
					,
				Element:span
				Element:span
					"is_visible"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"search_keywords"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
				Element:span
					"/xmen-toys/"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Delete a Category
			Node:
			(type) c
			(layer)1
				Element:p
					Deletes a category.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					DELETE /stores/{store_hash}/v2/categories/{id}
				Element:li
					Basic Auth >
				Element:code
					DELETE /api/v2/categories/{id}
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Delete All Categories
			Node:
			(type) c
			(layer)1
				Element:p
					Deletes all the categories in the store.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					DELETE /stores/{store_hash}/v2/categories
				Element:li
					Basic Auth >
				Element:code
					DELETE /api/v2/categories
			Node:
			(type) c
			(layer)1
				Element:aside
				Element:span
					Delete Products before Categories
				Element:br
				Element:br
					The Delete All Categories operation will not succeed unless the store has zero products. If any products in the store belong to any categories, the entire operation will fail. Therefore, if you really want to delete all the categories of the store, you must first delete all of the products in the store.
			Node:
			(type) c
			(layer)1
				Element:h2
				Element:span
					Configurable Fields
			Node:
			(type) c
			(layer)1
				Element:p
					Configurable fields associated with a product.
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Configurable Fields – Properties
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Name
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
					int
				Element:td
				Element:tr
				Element:td
					product_id
				Element:td
					int
				Element:td
				Element:tr
				Element:td
					name
				Element:td
					string
				Element:td
				Element:tr
				Element:td
					type
				Element:td
					enum
				Element:td
				Element:tr
				Element:td
					allowed_file_types
				Element:td
					string
				Element:td
				Element:tr
				Element:td
					max_size
				Element:td
					int
				Element:td
				Element:tr
				Element:td
					select_options
				Element:td
					text
				Element:td
				Element:tr
				Element:td
					is_required
				Element:td
					boolean
				Element:td
				Element:tr
				Element:td
					sort_order
				Element:td
					int
				Element:td
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
				Element:th
				Element:tbody
				Element:tr
				Element:td
				Element:strong
					Manages
				Element:td
				Element:tr
				Element:td
				Element:strong
					OAuth Scopes
				Element:td
					store_v2_products
				Element:tr
				Element:td
				Element:td
					store_v2_products_read_only
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					List Configurable Fields
			Node:
			(type) c
			(layer)1
				Element:p
					Gets the collection of configurable fields associated with a product.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					GET /stores/{store_hash}/v2/products/{product_id}/configurable_fields
				Element:li
					Basic Auth >
				Element:code
					GET /api/v2/products/{product_id}/configurable_fields
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Filters
			Node:
			(type) c
			(layer)1
				Element:p
					There are no filter parameters specific to
				Element:code
					configurable_fields
					.
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Pagination
			Node:
			(type) c
			(layer)1
				Element:p
					Parameters can be added to the URL query string to paginate the collection. The maximum limit is 250. If a limit isn’t provided, up to 50 configurable_fields are returned by default.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Type
				Element:th
					Example
				Element:tbody
				Element:tr
				Element:td
					page
				Element:td
					int
				Element:td
					/api/v2/products/{product_id}/configurable_fields?page={number}
				Element:tr
				Element:td
					limit
				Element:td
					int
				Element:td
					/api/v2/products/{product_id}/configurable_fields?limit={count}
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"product_id"
				Element:span
					:
				Element:span
				Element:span
					30
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Manufacturing Country"
				Element:span
					,
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"T"
				Element:span
					,
				Element:span
				Element:span
					"allowed_file_types"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"max_size"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"select_options"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"is_required"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"sort_order"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
				Element:span
					}
				Element:span
				Element:span
					]
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Get a Configurable Field
			Node:
			(type) c
			(layer)1
				Element:p
					Gets a configurable field associated with a product.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					GET /stores/{store_hash}/v2/products/{product_id}/configurable_fields/{id}
				Element:li
					Basic Auth >
				Element:code
					GET /api/v2/products/{product_id}/configurable_fields/{id}
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"product_id"
				Element:span
					:
				Element:span
				Element:span
					30
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Manufacturing Country"
				Element:span
					,
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"T"
				Element:span
					,
				Element:span
				Element:span
					"allowed_file_types"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"max_size"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"select_options"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"is_required"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"sort_order"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Get a Count of Configurable Fields
			Node:
			(type) c
			(layer)1
				Element:p
					Gets a count of the number of configurable fields in the store.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					GET /stores/{store_hash}/v2/products/configurable_fields/count
				Element:li
					Basic Auth >
				Element:code
					GET /api/v2/products/configurable_fields/count
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"count"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Delete a Configurable Field
			Node:
			(type) c
			(layer)1
				Element:p
					Deletes a configurable field associated with a product.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					DELETE /stores/{store_hash}/v2/products/{product_id}/configurable_fields/{id}
				Element:li
					Basic Auth >
				Element:code
					DELETE /api/v2/products/{product_id}/configurable_fields/{id}
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Delete Multiple Configurable Fields
			Node:
			(type) c
			(layer)1
				Element:p
					Deletes multiple configurable fields associated with a product.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					DELETE /stores/{store_hash}/v2/products/{product_id}/configurable_fields
				Element:li
					Basic Auth >
				Element:code
					DELETE /api/v2/products/{product_id}/configurable_fields
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Pagination
			Node:
			(type) c
			(layer)1
				Element:p
					Parameters can be added to the URL query string to paginate the collection. The maximum limit is 250. If a limit isn’t provided, up to 50 configurable_fields are returned by default.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Type
				Element:th
					Example
				Element:tbody
				Element:tr
				Element:td
					page
				Element:td
					int
				Element:td
					/api/v2/products/{product_id}/configurable_fields?page={number}
				Element:tr
				Element:td
					limit
				Element:td
					int
				Element:td
					/api/v2/products/{product_id}/configurable_fields?limit={count}
			Node:
			(type) c
			(layer)1
				Element:h2
				Element:span
					Custom Fields
			Node:
			(type) c
			(layer)1
				Element:p
					Custom fields associated with a product.
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Custom Field Object – Properties
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Name
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
					int
				Element:td
				Element:tr
				Element:td
					product_id
				Element:td
					int
				Element:td
					ID of the associated product
				Element:tr
				Element:td
					name
				Element:td
					string
				Element:td
					key
				Element:tr
				Element:td
					text
				Element:td
					string
				Element:td
					value
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
				Element:th
				Element:tbody
				Element:tr
				Element:td
				Element:strong
					Manages
				Element:td
				Element:tr
				Element:td
				Element:strong
					OAuth Scopes
				Element:td
					store_v2_products
				Element:tr
				Element:td
				Element:td
					store_v2_products_read_only
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					List Custom Fields
			Node:
			(type) c
			(layer)1
				Element:p
					Gets custom fields associated with a product.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					GET /stores/{store_hash}/v2/products/{product_id}/custom_fields
				Element:li
					Basic Auth >
				Element:code
					GET /api/v2/products/{product_id}/custom_fields
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Filters
			Node:
			(type) c
			(layer)1
				Element:p
					There are no filter parameters specific to
				Element:code
					custom_fields
					.
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Pagination
			Node:
			(type) c
			(layer)1
				Element:p
					Parameters can be added to the URL query string to paginate the collection. The maximum limit is 250. If a limit isn’t provided, up to 50 custom_fields are returned by default.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Type
				Element:th
					Example
				Element:tbody
				Element:tr
				Element:td
					page
				Element:td
					int
				Element:td
					/api/v2/products/{product_id}/custom_fields?page={number}
				Element:tr
				Element:td
					limit
				Element:td
					int
				Element:td
					/api/v2/products/{product_id}/custom_fields?limit={count}
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"product_id"
				Element:span
					:
				Element:span
				Element:span
					30
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Toy manufactured in"
				Element:span
					,
				Element:span
				Element:span
					"text"
				Element:span
					:
				Element:span
				Element:span
					"USA"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					2
				Element:span
					,
				Element:span
				Element:span
					"product_id"
				Element:span
					:
				Element:span
				Element:span
					45
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Release Date"
				Element:span
					,
				Element:span
				Element:span
					"text"
				Element:span
					:
				Element:span
				Element:span
					"2013-12-25"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					]
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Get a Custom Field
			Node:
			(type) c
			(layer)1
				Element:p
					Gets a custom field associated with a product.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					GET /stores/{store_hash}/v2/products/{product_id}/custom_fields/{id}
				Element:li
					Basic Auth >
				Element:code
					GET /api/v2/products/{product_id}/custom_fields/{id}
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					2
				Element:span
					,
				Element:span
				Element:span
					"product_id"
				Element:span
					:
				Element:span
				Element:span
					30
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Toy manufactured in"
				Element:span
					,
				Element:span
				Element:span
					"text"
				Element:span
					:
				Element:span
				Element:span
					"USA"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Get a Count of Custom Fields
			Node:
			(type) c
			(layer)1
				Element:p
					Gets a count of the number of custom fields in the store.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					GET /stores/{store_hash}/v2/products/custom_fields/count
				Element:li
					Basic Auth >
				Element:code
					GET /api/v2/products/custom_fields/count
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"count"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Create a Custom Field
			Node:
			(type) c
			(layer)1
				Element:p
					Creates a new custom field associated with a product
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					POST /stores/{store_hash}/v2/products/{product_id}/custom_fields
				Element:li
					Basic Auth >
				Element:code
					POST /api/v2/products/{product_id}/custom_fields
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Read-only Properties
			Node:
			(type) c
			(layer)1
				Element:p
					The following properties of the custom field are read-only. If one or more of these properties are included in the request, it will be rejected.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					product_id
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Requirements
			Node:
			(type) c
			(layer)1
				Element:p
					The following properties of the custom field are required. The request won’t be fulfilled unless these properties are valid.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					name
				Element:li
					text
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Request
			Node:
			(type) c
			(layer)1
				Element:p
					Example request object:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Release Date"
				Element:span
					,
				Element:span
				Element:span
					"text"
				Element:span
					:
				Element:span
				Element:span
					"2013-12-25"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					5
				Element:span
					,
				Element:span
				Element:span
					"product_id"
				Element:span
					:
				Element:span
				Element:span
					45
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Release Date"
				Element:span
					,
				Element:span
				Element:span
					"text"
				Element:span
					:
				Element:span
				Element:span
					"2013-12-25"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Update a Custom Field
			Node:
			(type) c
			(layer)1
				Element:p
					Updates an existing custom field associated with a product.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					PUT /stores/{store_hash}/v2/products/{product_id}/custom_fields/{id}
				Element:li
					Basic Auth >
				Element:code
					PUT /api/v2/products/{product_id}/custom_fields/{id}
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Read-only Properties
			Node:
			(type) c
			(layer)1
				Element:p
					The following properties of the custom field are read-only. If one or more of these properties are included in the request, it will be rejected.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					product_id
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Requirements
			Node:
			(type) c
			(layer)1
				Element:p
					The following properties of the custom field are required. The request won’t be fulfilled unless these properties are valid.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					name
				Element:li
					text
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Request
			Node:
			(type) c
			(layer)1
				Element:p
					Example request object:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Release Date"
				Element:span
					,
				Element:span
				Element:span
					"text"
				Element:span
					:
				Element:span
				Element:span
					"2013-12-31"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					5
				Element:span
					,
				Element:span
				Element:span
					"product_id"
				Element:span
					:
				Element:span
				Element:span
					45
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Release Date"
				Element:span
					,
				Element:span
				Element:span
					"text"
				Element:span
					:
				Element:span
				Element:span
					"2013-12-31"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Delete a Custom Field
			Node:
			(type) c
			(layer)1
				Element:p
					Deletes a custom field associated with a product.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					DELETE /stores/{store_hash}/v2/products/{product_id}/custom_fields/{id}
				Element:li
					Basic Auth >
				Element:code
					DELETE /api/v2/products/{product_id}/custom_fields/{id}
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Delete Multiple Custom Fields
			Node:
			(type) c
			(layer)1
				Element:p
					Deletes multiple custom fields associated with a product.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					DELETE /stores/{store_hash}/v2/products/{product_id}/custom_fields
				Element:li
					Basic Auth >
				Element:code
					DELETE /api/v2/products/{product_id}/custom_fields
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Pagination
			Node:
			(type) c
			(layer)1
				Element:p
					Parameters can be added to the URL query string to paginate the collection. The maximum limit is 250. If a limit isn’t provided, up to 50 custom_fields are returned by default.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Type
				Element:th
					Example
				Element:tbody
				Element:tr
				Element:td
					page
				Element:td
					int
				Element:td
					/api/v2/products/{product_id}/custom_fields?page={number}
				Element:tr
				Element:td
					limit
				Element:td
					int
				Element:td
					/api/v2/products/{product_id}/custom_fields?limit={count}
			Node:
			(type) c
			(layer)1
				Element:h2
				Element:span
					Google Product Search Mappings
			Node:
			(type) c
			(layer)1
				Element:p
					Metadata to support promoting products via Google Shopping search advertising.
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Google Product Search Mapping Object – Properties
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Name
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					enabled
				Element:td
					boolean
				Element:td
					[Descriptions are pending – will be added here]
				Element:tr
				Element:td
					product_id
				Element:td
					int
				Element:td
				Element:tr
				Element:td
					category_id
				Element:td
					int
				Element:td
				Element:tr
				Element:td
					custom_item
				Element:td
					boolean
				Element:td
				Element:tr
				Element:td
					global_trade_item_number
				Element:td
					string
				Element:td
				Element:tr
				Element:td
					manufacturer_part_number
				Element:td
					string
				Element:td
				Element:tr
				Element:td
					gender
				Element:td
					string
				Element:td
				Element:tr
				Element:td
					age_group
				Element:td
					string
				Element:td
				Element:tr
				Element:td
					color
				Element:td
					string
				Element:td
				Element:tr
				Element:td
					size
				Element:td
					string
				Element:td
				Element:tr
				Element:td
					material
				Element:td
					string
				Element:td
				Element:tr
				Element:td
					pattern
				Element:td
					pattern
				Element:td
				Element:tr
				Element:td
					google_shopping_product_category_path
				Element:td
					string
				Element:td
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
				Element:th
				Element:tbody
				Element:tr
				Element:td
				Element:strong
					Manages
				Element:td
				Element:tr
				Element:td
				Element:strong
					OAuth Scopes
				Element:td
					store_v2_products
				Element:tr
				Element:td
				Element:td
					store_v2_products_read_only
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					List Google Product Search Mappings
			Node:
			(type) c
			(layer)1
				Element:p
					Gets the Google Product Search mappings for a product.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					GET /stores/{store_hash}/v2/products/{product_id}/googleproductsearch
				Element:li
					Basic Auth >
				Element:code
					GET /api/v2/products/{product_id}/googleproductsearch
			Node:
			(type) c
			(layer)1
				Element:h2
				Element:span
					Options
			Node:
			(type) c
			(layer)1
				Element:p
					Shared attributes that control value facets on a product.
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Options Object – Properties
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Name
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
					int
				Element:td
				Element:tr
				Element:td
					option_id
				Element:td
					int
				Element:td
				Element:tr
				Element:td
					display_name
				Element:td
					string
				Element:td
				Element:tr
				Element:td
					sort_order
				Element:td
					int
				Element:td
				Element:tr
				Element:td
					is_required
				Element:td
					boolean
				Element:td
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
				Element:th
				Element:tbody
				Element:tr
				Element:td
				Element:strong
					Manages
				Element:td
				Element:tr
				Element:td
				Element:strong
					OAuth Scopes
				Element:td
					store_v2_products
				Element:tr
				Element:td
				Element:td
					store_v2_products_read_only
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					List Options
			Node:
			(type) c
			(layer)1
				Element:p
					Gets the collection of options. (Default sorting is by option id, from lowest to highest.)
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					GET /stores/{store_hash}/v2/options
				Element:li
					Basic Auth >
				Element:code
					GET /api/v2/options
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Filters
			Node:
			(type) c
			(layer)1
				Element:p
					Filter parameters can be added to the URL query string to select specific options in the collection.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Type
				Element:th
					Example
				Element:tbody
				Element:tr
				Element:td
					name
				Element:td
					string
				Element:td
					/api/v2/options?name={value}
				Element:tr
				Element:td
					display_name
				Element:td
					string
				Element:td
					/api/v2/options?display_name={value}
				Element:tr
				Element:td
					type
				Element:td
					string
				Element:td
					/api/v2/options?type={value}
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Pagination
			Node:
			(type) c
			(layer)1
				Element:p
					Parameters can be added to the URL query string to paginate the collection. The maximum limit is 250. If a limit isn’t provided, up to 50 options are returned by default.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Type
				Element:th
					Example
				Element:tbody
				Element:tr
				Element:td
					Page
				Element:td
					int
				Element:td
					/api/v2/options?page={number}
				Element:tr
				Element:td
					Limit
				Element:td
					int
				Element:td
					/api/v2/options?limit={count}
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					3
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Colors"
				Element:span
					,
				Element:span
				Element:span
					"display_name"
				Element:span
					:
				Element:span
				Element:span
					"Color"
				Element:span
					,
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"CS"
				Element:span
					,
				Element:span
				Element:span
					"values"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
				Element:span
					"https://store-bwvr466.mybigcommerce.com/api/v2/options/3/values.json"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"/options/3/values"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					4
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Screen Sizes"
				Element:span
					,
				Element:span
				Element:span
					"display_name"
				Element:span
					:
				Element:span
				Element:span
					"Screen Sizes"
				Element:span
					,
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"RT"
				Element:span
					,
				Element:span
				Element:span
					"values"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
				Element:span
					"https://store-bwvr466.mybigcommerce.com/api/v2/options/4/values.json"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"/options/4/values"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
				Element:span
					]
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Get an Option
			Node:
			(type) c
			(layer)1
				Element:p
					Gets an option.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					GET /stores/{store_hash}/v2/options/{id}
				Element:li
					Basic Auth >
				Element:code
					GET /api/v2/options/{id}
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					3
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Colors"
				Element:span
					,
				Element:span
				Element:span
					"display_name"
				Element:span
					:
				Element:span
				Element:span
					"Color"
				Element:span
					,
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"CS"
				Element:span
					,
				Element:span
				Element:span
					"values"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
				Element:span
					"https://store-bwvr466.mybigcommerce.com/api/v2/options/3/values.json"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"/options/3/values"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Get a Count of Options
			Node:
			(type) c
			(layer)1
				Element:p
					Gets a count of the number of options in the store.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					GET /stores/{store_hash}/v2/options/count
				Element:li
					Basic Auth >
				Element:code
					GET /api/v2/options/count
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"count"
				Element:span
					:
				Element:span
				Element:span
					4
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Create an Option
			Node:
			(type) c
			(layer)1
				Element:p
					Creates a new option.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					POST /stores/{store_hash}/v2/options
				Element:li
					Basic Auth >
				Element:code
					POST /api/v2/options
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Read-only Properties
			Node:
			(type) c
			(layer)1
				Element:p
					The following properties of the option are read-only. If one or more of these properties are included in the request, it will be rejected.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					id
				Element:li
					values
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Requirements
			Node:
			(type) c
			(layer)1
				Element:p
					The following properties of the option are required. The request won’t be fulfilled unless these properties are valid.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					name
				Element:li
					type
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Request
			Node:
			(type) c
			(layer)1
				Element:p
					Example request object:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Color"
				Element:span
					,
				Element:span
				Element:span
					"display_name"
				Element:span
					:
				Element:span
				Element:span
					"Color"
				Element:span
					,
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"CS"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					10
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Color"
				Element:span
					,
				Element:span
				Element:span
					"display_name"
				Element:span
					:
				Element:span
				Element:span
					"Color"
				Element:span
					,
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"CS"
				Element:span
					,
				Element:span
				Element:span
					"values"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
				Element:span
					"https://store-bwvr466.mybigcommerce.com/api/v2/options/10/values.json"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"/options/10/values"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Update an Option
			Node:
			(type) c
			(layer)1
				Element:p
					Updates an existing option.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					PUT /stores/{store_hash}/v2/options/{id}
				Element:li
					Basic Auth >
				Element:code
					PUT /api/v2/options/{id}
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Read-only Properties
			Node:
			(type) c
			(layer)1
				Element:p
					The following properties of the option are read-only. If one or more of these properties are included in the request, it will be rejected.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:code
					id
				Element:li
				Element:code
					values
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Requirements
			Node:
			(type) c
			(layer)1
				Element:p
					The following properties of the option are required. The request won’t be fulfilled unless these properties are valid.
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Request
			Node:
			(type) c
			(layer)1
				Element:p
					Example request object:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Xmen toys"
				Element:span
					,
				Element:span
				Element:span
					"display_name"
				Element:span
					:
				Element:span
				Element:span
					"xmen extreme toys"
				Element:span
					,
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"T"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					18
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Xmen toys"
				Element:span
					,
				Element:span
				Element:span
					"display_name"
				Element:span
					:
				Element:span
				Element:span
					"xmen extreme toys"
				Element:span
					,
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"T"
				Element:span
					,
				Element:span
				Element:span
					"values"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
				Element:span
					"https://store-bwvr466.mybigcommerce.com/api/v2/options/18/values.json"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"/options/18/values"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Delete an Option
			Node:
			(type) c
			(layer)1
				Element:p
					Deletes an option.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					DELETE /stores/{store_hash}/v2/options/{id}
				Element:li
					Basic Auth >
				Element:code
					DELETE /api/v2/options/{id}
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Delete All Options
			Node:
			(type) c
			(layer)1
				Element:p
					Deletes all options from the store.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					DELETE /stores/{store_hash}/v2/options
				Element:li
					Basic Auth >
				Element:code
					DELETE /api/v2/options
			Node:
			(type) c
			(layer)1
				Element:h2
				Element:span
					Option Sets
			Node:
			(type) c
			(layer)1
				Element:p
					A reusable set of option facets that can be applied to products.
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Option Set Object – Properties
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Name
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
					int
				Element:td
				Element:tr
				Element:td
					name
				Element:td
					string
				Element:td
					The name of the optionset. Must be unique.
				Element:tr
				Element:td
					options
				Element:td
					resource
				Element:td
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
				Element:th
				Element:tbody
				Element:tr
				Element:td
				Element:strong
					Manages
				Element:td
				Element:tr
				Element:td
				Element:strong
					OAuth Scopes
				Element:td
					store_v2_products
				Element:tr
				Element:td
				Element:td
					store_v2_products_read_only
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					List Option Sets
			Node:
			(type) c
			(layer)1
				Element:p
					Gets the collection of option sets. (Default sorting is by option-set id, from lowest to highest.)
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					GET /stores/{store_hash}/v2/option_sets
				Element:li
					Basic Auth >
				Element:code
					GET /api/v2/option_sets
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Filters
			Node:
			(type) c
			(layer)1
				Element:p
					Filter parameters can be added to the URL query string to select specific option_sets in the collection.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Type
				Element:th
					Example
				Element:tbody
				Element:tr
				Element:td
					name
				Element:td
					string
				Element:td
					/api/v2/option_sets?name={value}
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Pagination
			Node:
			(type) c
			(layer)1
				Element:p
					Parameters can be added to the URL query string to paginate the collection. The maximum limit is 250. If a limit isn’t provided, up to 50 option_sets are returned by default.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Type
				Element:th
					Example
				Element:tbody
				Element:tr
				Element:td
					Page
				Element:td
					int
				Element:td
					/api/v2/option_sets?page={number}
				Element:tr
				Element:td
					Limit
				Element:td
					int
				Element:td
					/api/v2/option_sets?limit={count}
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"MacBook"
				Element:span
					,
				Element:span
				Element:span
					"options"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
				Element:span
					"https://store-bwvr466.mybigcommerce.com/api/v2/optionsets/1/options.json"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"/optionsets/1/options"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					2
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"PixelSkin Case"
				Element:span
					,
				Element:span
				Element:span
					"options"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
				Element:span
					"https://store-bwvr466.mybigcommerce.com/api/v2/optionsets/2/options.json"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"/optionsets/2/options"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
				Element:span
					]
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Get an Option Set
			Node:
			(type) c
			(layer)1
				Element:p
					Gets an option set.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					GET /stores/{store_hash}/v2/option_sets/{id}
				Element:li
					Basic Auth >
				Element:code
					GET /api/v2/option_sets/{id}
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					10
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"T-Shirt Facets"
				Element:span
					,
				Element:span
				Element:span
					"options"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
				Element:span
					"https://store-bwvr466.mybigcommerce.com/api/v2/optionsets/10/options.json"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"/optionsets/13/options"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Get a Count of Option Sets
			Node:
			(type) c
			(layer)1
				Element:p
					Gets a count of the number of option sets in the store.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					GET /stores/{store_hash}/v2/option_sets/count
				Element:li
					Basic Auth >
				Element:code
					GET /api/v2/option_sets/count
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"count"
				Element:span
					:
				Element:span
				Element:span
					4
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Create an Option Set
			Node:
			(type) c
			(layer)1
				Element:p
					Creates a new Option set.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					POST /stores/{store_hash}/v2/option_sets
				Element:li
					Basic Auth >
				Element:code
					POST /api/v2/option_sets
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Read-only Properties
			Node:
			(type) c
			(layer)1
				Element:p
					The following properties of the option set are read-only. If one or more of these properties are included in the request, it will be rejected.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					id
				Element:li
					options
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Requirements
			Node:
			(type) c
			(layer)1
				Element:p
					The following properties of the option set are required. The request won’t be fulfilled unless these properties are valid.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					name
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Request
			Node:
			(type) c
			(layer)1
				Element:p
					Example request object:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"T-Shirts"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					10
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"T-Shirts"
				Element:span
					,
				Element:span
				Element:span
					"options"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
				Element:span
					"https://store-bwvr466.mybigcommerce.com/api/v2/optionsets/10/options.json"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"/optionsets/10/options"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Update an Option Set
			Node:
			(type) c
			(layer)1
				Element:p
					Updates an existing option set.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					PUT /stores/{store_hash}/v2/option_sets/{id}
				Element:li
					Basic Auth >
				Element:code
					PUT /api/v2/option_sets/{id}
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Read-only Properties
			Node:
			(type) c
			(layer)1
				Element:p
					The following properties of the option set are read-only. If one or more of these properties are included in the request, it will be rejected.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					id
				Element:li
					options
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Requirements
			Node:
			(type) c
			(layer)1
				Element:p
					The following properties of the option set are required. The request won’t be fulfilled unless these properties are valid.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					name
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Request
			Node:
			(type) c
			(layer)1
				Element:p
					Example request object:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"T-shirt Facets"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					10
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"T-shirt Facets"
				Element:span
					,
				Element:span
				Element:span
					"options"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
				Element:span
					"https://store-bwvr466.mybigcommerce.com/api/v2/optionsets/10/options.json"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"/optionsets/13/options"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Delete an Option Set
			Node:
			(type) c
			(layer)1
				Element:p
					Deletes an option set.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					DELETE /stores/{store_hash}/v2/option_sets/{id}
				Element:li
					Basic Auth >
				Element:code
					DELETE /api/v2/option_sets/{id}
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Delete All Option Sets
			Node:
			(type) c
			(layer)1
				Element:p
					Deletes all option sets in the store.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					DELETE /stores/{store_hash}/v2/option_sets
				Element:li
					Basic Auth >
				Element:code
					DELETE /api/v2/option_sets
			Node:
			(type) c
			(layer)1
				Element:h2
				Element:span
					Option Set Options
			Node:
			(type) c
			(layer)1
				Element:p
					Options belonging to an option set.
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Option Set Option: Object – Properties
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Name
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
					int
				Element:td
				Element:tr
				Element:td
					option_id
				Element:td
					int
				Element:td
					The id of the option to which this optionset connects
				Element:tr
				Element:td
					option_set_id
				Element:td
					int
				Element:td
				Element:tr
				Element:td
					display_name
				Element:td
					string
				Element:td
					The friendly name used for this optionset
				Element:tr
				Element:td
					sort_order
				Element:td
					int
				Element:td
					The order in which the option is displayed on the product page
				Element:tr
				Element:td
					is_required
				Element:td
					boolean
				Element:td
					Specifies whether customer is required to enter a value for this option before they can add the product to their cart
				Element:tr
				Element:td
					option
				Element:td
					resource
				Element:td
				Element:tr
				Element:td
					values
				Element:td
					object_array
				Element:td
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
				Element:th
				Element:tbody
				Element:tr
				Element:td
				Element:strong
					Manages
				Element:td
				Element:tr
				Element:td
				Element:strong
					OAuth Scopes
				Element:td
					store_v2_products
				Element:tr
				Element:td
				Element:td
					store_v2_products_read_only
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					List Option Set Options
			Node:
			(type) c
			(layer)1
				Element:p
					Gets the options associated with an option set. (Default sorting is by option id, from lowest to highest.)
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					GET /stores/{store_hash}/v2/option_sets/{option_set_id}/options
				Element:li
					Basic Auth >
				Element:code
					GET /api/v2/option_sets/{option_set_id}/options
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Pagination
			Node:
			(type) c
			(layer)1
				Element:p
					Parameters can be added to the URL query string to paginate the collection. The maximum limit is 250. If a limit isn’t provided, up to 50 option_set_options are returned by default.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Type
				Element:th
					Example
				Element:tbody
				Element:tr
				Element:td
					Page
				Element:td
					int
				Element:td
					/api/v2/option_sets/{option_set_id}/options?page={number}
				Element:tr
				Element:td
					Limit
				Element:td
					int
				Element:td
					/api/v2/option_sets/{option_set_id}/options?limit={count}
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					43
				Element:span
					,
				Element:span
				Element:span
					"option_id"
				Element:span
					:
				Element:span
				Element:span
					18
				Element:span
					,
				Element:span
				Element:span
					"option_set_id"
				Element:span
					:
				Element:span
				Element:span
					14
				Element:span
					,
				Element:span
				Element:span
					"display_name"
				Element:span
					:
				Element:span
				Element:span
					"Size"
				Element:span
					,
				Element:span
				Element:span
					"sort_order"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"is_required"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"option"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
				Element:span
					"https://example.com/api/v2/options/18.json"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"/options/18"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"values"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"label"
				Element:span
					:
				Element:span
				Element:span
					"XS"
				Element:span
					,
				Element:span
				Element:span
					"sort_order"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"value"
				Element:span
					:
				Element:span
				Element:span
					"XS"
				Element:span
					,
				Element:span
				Element:span
					"option_value_id"
				Element:span
					:
				Element:span
				Element:span
					68
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"label"
				Element:span
					:
				Element:span
				Element:span
					"S"
				Element:span
					,
				Element:span
				Element:span
					"sort_order"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"value"
				Element:span
					:
				Element:span
				Element:span
					"S"
				Element:span
					,
				Element:span
				Element:span
					"option_value_id"
				Element:span
					:
				Element:span
				Element:span
					69
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"label"
				Element:span
					:
				Element:span
				Element:span
					"M"
				Element:span
					,
				Element:span
				Element:span
					"sort_order"
				Element:span
					:
				Element:span
				Element:span
					2
				Element:span
					,
				Element:span
				Element:span
					"value"
				Element:span
					:
				Element:span
				Element:span
					"M"
				Element:span
					,
				Element:span
				Element:span
					"option_value_id"
				Element:span
					:
				Element:span
				Element:span
					70
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"label"
				Element:span
					:
				Element:span
				Element:span
					"L"
				Element:span
					,
				Element:span
				Element:span
					"sort_order"
				Element:span
					:
				Element:span
				Element:span
					3
				Element:span
					,
				Element:span
				Element:span
					"value"
				Element:span
					:
				Element:span
				Element:span
					"L"
				Element:span
					,
				Element:span
				Element:span
					"option_value_id"
				Element:span
					:
				Element:span
				Element:span
					71
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"label"
				Element:span
					:
				Element:span
				Element:span
					"XL"
				Element:span
					,
				Element:span
				Element:span
					"sort_order"
				Element:span
					:
				Element:span
				Element:span
					4
				Element:span
					,
				Element:span
				Element:span
					"value"
				Element:span
					:
				Element:span
				Element:span
					"XL"
				Element:span
					,
				Element:span
				Element:span
					"option_value_id"
				Element:span
					:
				Element:span
				Element:span
					72
				Element:span
				Element:span
					}
				Element:span
				Element:span
					]
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					44
				Element:span
					,
				Element:span
				Element:span
					"option_id"
				Element:span
					:
				Element:span
				Element:span
					3
				Element:span
					,
				Element:span
				Element:span
					"option_set_id"
				Element:span
					:
				Element:span
				Element:span
					14
				Element:span
					,
				Element:span
				Element:span
					"display_name"
				Element:span
					:
				Element:span
				Element:span
					"Color"
				Element:span
					,
				Element:span
				Element:span
					"sort_order"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"is_required"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"option"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
				Element:span
					"https://example.com/api/v2/options/3.json"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"/options/3"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"values"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"label"
				Element:span
					:
				Element:span
				Element:span
					"Silver"
				Element:span
					,
				Element:span
				Element:span
					"sort_order"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"value"
				Element:span
					:
				Element:span
				Element:span
					"#cccccc"
				Element:span
					,
				Element:span
				Element:span
					"option_value_id"
				Element:span
					:
				Element:span
				Element:span
					7
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"label"
				Element:span
					:
				Element:span
				Element:span
					"Black"
				Element:span
					,
				Element:span
				Element:span
					"sort_order"
				Element:span
					:
				Element:span
				Element:span
					2
				Element:span
					,
				Element:span
				Element:span
					"value"
				Element:span
					:
				Element:span
				Element:span
					"#000000"
				Element:span
					,
				Element:span
				Element:span
					"option_value_id"
				Element:span
					:
				Element:span
				Element:span
					8
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"label"
				Element:span
					:
				Element:span
				Element:span
					"Purple"
				Element:span
					,
				Element:span
				Element:span
					"sort_order"
				Element:span
					:
				Element:span
				Element:span
					3
				Element:span
					,
				Element:span
				Element:span
					"value"
				Element:span
					:
				Element:span
				Element:span
					"#700170"
				Element:span
					,
				Element:span
				Element:span
					"option_value_id"
				Element:span
					:
				Element:span
				Element:span
					9
				Element:span
				Element:span
					}
				Element:span
				Element:span
					]
				Element:span
				Element:span
					}
				Element:span
				Element:span
					]
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Get an Option Set Option
			Node:
			(type) c
			(layer)1
				Element:p
					Gets an option set option.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					GET /stores/{store_hash}/v2/option_sets/{option_set_id}/options/{id}
				Element:li
					Basic Auth >
				Element:code
					GET /api/v2/option_sets/{option_set_id}/options/{id}
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					4
				Element:span
					,
				Element:span
				Element:span
					"option_id"
				Element:span
					:
				Element:span
				Element:span
					5
				Element:span
					,
				Element:span
				Element:span
					"option_set_id"
				Element:span
					:
				Element:span
				Element:span
					2
				Element:span
					,
				Element:span
				Element:span
					"display_name"
				Element:span
					:
				Element:span
				Element:span
					"Clock Speeds (CPU)"
				Element:span
					,
				Element:span
				Element:span
					"sort_order"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"is_required"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"option"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
				Element:span
					"https://example.com/api/v2/options/5.json"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"/options/5"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Create an Option Set Option
			Node:
			(type) c
			(layer)1
				Element:p
					Creates a new option associated with an option set.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					POST /stores/{store_hash}/v2/option_sets/{option_set_id}/options
				Element:li
					Basic Auth >
				Element:code
					POST /api/v2/option_sets/{option_set_id}/options
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Read-only Properties
			Node:
			(type) c
			(layer)1
				Element:p
					The following properties of the option set option are read-only. If one or more of these properties are included in the request, it will be rejected.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					id
				Element:li
					option_set_id
				Element:li
					values
				Element:li
					option
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Requirements
			Node:
			(type) c
			(layer)1
				Element:p
					The following properties of the option set option are required. The request won’t be fulfilled unless these properties are valid.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					option_id
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Request
			Node:
			(type) c
			(layer)1
				Element:p
					Example request object:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"option_id"
				Element:span
					:
				Element:span
				Element:span
					10
				Element:span
					,
				Element:span
				Element:span
					"display_name"
				Element:span
					:
				Element:span
				Element:span
					"Choose a color"
				Element:span
					,
				Element:span
				Element:span
					"sort_order"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"is_required"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					2
				Element:span
					,
				Element:span
				Element:span
					"option_id"
				Element:span
					:
				Element:span
				Element:span
					10
				Element:span
					,
				Element:span
				Element:span
					"option_set_id"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"display_name"
				Element:span
					:
				Element:span
				Element:span
					"Choose a color"
				Element:span
					,
				Element:span
				Element:span
					"sort_order"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"is_required"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"option"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
				Element:span
					"https://example.com/api/v2/options/10.json"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"/options/10"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Update an Option Set Option
			Node:
			(type) c
			(layer)1
				Element:p
					Updates an existing option set option.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					PUT /stores/{store_hash}/v2/option_sets/{option_set_id}/options/{id}
				Element:li
					Basic Auth >
				Element:code
					PUT /api/v2/option_sets/{option_set_id}/options/{id}
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Read-only Properties
			Node:
			(type) c
			(layer)1
				Element:p
					The following properties of the option set option are read-only. If one or more of these properties are included in the request, it will be rejected.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					id
				Element:li
					option_id
				Element:li
					option_set_id
				Element:li
					values
				Element:li
					option
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Requirements
			Node:
			(type) c
			(layer)1
				Element:p
					The following properties of the option set option are required. The request won’t be fulfilled unless these properties are valid.
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Request
			Node:
			(type) c
			(layer)1
				Element:p
					Example request object:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"display_name"
				Element:span
					:
				Element:span
				Element:span
					"Pick a color..."
				Element:span
					,
				Element:span
				Element:span
					"sort_order"
				Element:span
					:
				Element:span
				Element:span
					2
				Element:span
					,
				Element:span
				Element:span
					"is_required"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					2
				Element:span
					,
				Element:span
				Element:span
					"option_id"
				Element:span
					:
				Element:span
				Element:span
					10
				Element:span
					,
				Element:span
				Element:span
					"option_set_id"
				Element:span
					:
				Element:span
				Element:span
					2
				Element:span
					,
				Element:span
				Element:span
					"display_name"
				Element:span
					:
				Element:span
				Element:span
					"Pick a color..."
				Element:span
					,
				Element:span
				Element:span
					"sort_order"
				Element:span
					:
				Element:span
				Element:span
					2
				Element:span
					,
				Element:span
				Element:span
					"is_required"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"option"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
				Element:span
					"https://example.com/api/v2/options/10.json"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"/options/10"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Delete an Option Set Option
			Node:
			(type) c
			(layer)1
				Element:p
					Deletes an option belonging to an option set.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					DELETE /stores/{store_hash}/v2/option_sets/{option_set_id}/options/{id}
				Element:li
					Basic Auth >
				Element:code
					DELETE /api/v2/option_sets/{option_set_id}/options/{id}
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Delete Multiple Option Set Options
			Node:
			(type) c
			(layer)1
				Element:p
					Deletes multiple options associated with an option set.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					DELETE /stores/{store_hash}/v2/option_sets/{option_set_id}/options
				Element:li
					Basic Auth >
				Element:code
					DELETE /api/v2/option_sets/{option_set_id}/options
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Pagination
			Node:
			(type) c
			(layer)1
				Element:p
					Parameters can be added to the URL query string to paginate the collection. The maximum limit is 250. If a limit isn’t provided, up to 50 option_set_options are returned by default.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Type
				Element:th
					Example
				Element:tbody
				Element:tr
				Element:td
					Page
				Element:td
					int
				Element:td
					/api/v2/option_sets/{option_set_id}/options?page={number}
				Element:tr
				Element:td
					Limit
				Element:td
					int
				Element:td
					/api/v2/option_sets/{option_set_id}/options?limit={count}
			Node:
			(type) c
			(layer)1
				Element:h2
				Element:span
					Option Values
			Node:
			(type) c
			(layer)1
				Element:p
					Values that can be selected for an option.
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Option Value Object – Properties
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Name
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
					int
				Element:td
					A unique, read-only value that identifies this option value.
				Element:tr
				Element:td
					option_id
				Element:td
					int
				Element:td
					A read-only value identifying the option to which this option value is assigned.
				Element:tr
				Element:td
					label
				Element:td
					string
				Element:td
					The name of the label. Cannot be the same as the label of another value already assigned to the option.
				Element:tr
				Element:td
					sort_order
				Element:td
					int
				Element:td
				Element:tr
				Element:td
					value
				Element:td
					text
				Element:td
					Acceptable values generally depend on the option type, as defined in the option:
				Element:br
				Element:br
				Element:code
					RB
					: string to be displayed to the customer.
				Element:br
				Element:code
					RT
					: string to be displayed to the customer.
				Element:br
				Element:code
					S
					: string to be displayed to the customer.
				Element:br
				Element:code
					P
					: product ID;
				Element:br
				Element:code
					PI
					: product ID.
				Element:br
				Element:code
					CS
					: one of the following color values – a hexadecimal color code to create a color option (e.g.,
				Element:code
					#0f0000
					);
				Element:br
					a CSS 2.1 color name (e.g.,
				Element:code
					blue
					);
				Element:br
					up to three hexadecimal color codes and/or color names, separated by pipe symbols (e.g.,
				Element:code
					#FF0000|lime|#0000FF
					);
				Element:br
					a URI to an image to create a texture (e.g.,
				Element:code
					http://store.com/images/myimg.png
					);
				Element:br
					or the name of an image file in the store’s WebDAV
				Element:code
					import
					folder (e.g.,
				Element:code
					myimg.png
					).
				Element:tr
				Element:td
					is_default
				Element:td
					boolean
				Element:td
					Whether or not this value is selected by default. For each option, only one option value can be selected by default.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
				Element:th
				Element:tbody
				Element:tr
				Element:td
				Element:strong
					Manages
				Element:td
				Element:tr
				Element:td
				Element:strong
					OAuth Scopes
				Element:td
					store_v2_products
				Element:tr
				Element:td
				Element:td
					store_v2_products_read_only
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					List Option Values
			Node:
			(type) c
			(layer)1
				Element:p
					Gets the values belonging to an option. (Default sorting is by option-value id, from lowest to highest.)
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					GET /stores/{store_hash}/v2/options/{option_id}/values
				Element:li
					Basic Auth >
				Element:code
					GET /api/v2/options/{option_id}/values
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Pagination
			Node:
			(type) c
			(layer)1
				Element:p
					Parameters can be added to the URL query string to paginate the collection. The maximum limit is 250. If a limit isn’t provided, up to 50 option_values are returned by default.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Type
				Element:th
					Example
				Element:tbody
				Element:tr
				Element:td
					Page
				Element:td
					int
				Element:td
					/api/v2/options/{option_id}/values?page={number}
				Element:tr
				Element:td
					Limit
				Element:td
					int
				Element:td
					/api/v2/options/{option_id}/values?limit={count}
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"option_id"
				Element:span
					:
				Element:span
				Element:span
					3
				Element:span
					,
				Element:span
				Element:span
					"label"
				Element:span
					:
				Element:span
				Element:span
					"Silver"
				Element:span
					,
				Element:span
				Element:span
					"sort_order"
				Element:span
					:
				Element:span
				Element:span
					2
				Element:span
					,
				Element:span
				Element:span
					"value"
				Element:span
					:
				Element:span
				Element:span
					"#cccccc"
				Element:span
					,
				Element:span
				Element:span
					"is_default"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					2
				Element:span
					,
				Element:span
				Element:span
					"option_id"
				Element:span
					:
				Element:span
				Element:span
					3
				Element:span
					,
				Element:span
				Element:span
					"label"
				Element:span
					:
				Element:span
				Element:span
					"Black"
				Element:span
					,
				Element:span
				Element:span
					"sort_order"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"value"
				Element:span
					:
				Element:span
				Element:span
					"#000000"
				Element:span
					,
				Element:span
				Element:span
					"is_default"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
				Element:span
					}
				Element:span
				Element:span
					]
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Get an Option Value
			Node:
			(type) c
			(layer)1
				Element:p
					Gets an option value.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					GET /stores/{store_hash}/v2/options/{option_id}/values/{id}
				Element:li
					Basic Auth >
				Element:code
					GET /api/v2/options/{option_id}/values/{id}
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					9
				Element:span
					,
				Element:span
				Element:span
					"option_id"
				Element:span
					:
				Element:span
				Element:span
					3
				Element:span
					,
				Element:span
				Element:span
					"label"
				Element:span
					:
				Element:span
				Element:span
					"Purple"
				Element:span
					,
				Element:span
				Element:span
					"sort_order"
				Element:span
					:
				Element:span
				Element:span
					3
				Element:span
					,
				Element:span
				Element:span
					"value"
				Element:span
					:
				Element:span
				Element:span
					"#700170"
				Element:span
					,
				Element:span
				Element:span
					"is_default"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Create an Option Value
			Node:
			(type) c
			(layer)1
				Element:p
					Creates a new option value.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					POST /stores/{store_hash}/v2/options/{option_id}/values
				Element:li
					Basic Auth >
				Element:code
					POST /api/v2/options/{option_id}/values
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Read-only Properties
			Node:
			(type) c
			(layer)1
				Element:p
					The following properties of the option value are read-only. If one or more of these properties are included in the request, it will be rejected.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					id
				Element:li
					option_id
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Requirements
			Node:
			(type) c
			(layer)1
				Element:p
					The following properties of the option value are required. The request won’t be fulfilled unless these properties are valid.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					label
				Element:li
					value
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Notes
			Node:
			(type) c
			(layer)1
				Element:p
					To maximize system performance, BigCommerce caps the total number of values per option at 250. IF the option has 250 values and you try to create another one, BigCommerce will return a 403 error.
			Node:
			(type) c
			(layer)1
				Element:p
					When you POST an
				Element:code
					is_default
					property of
				Element:code
					true
					, all other option values on the parent option will have their
				Element:code
					is_default
					property set to
				Element:code
					false
					.
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Request
			Node:
			(type) c
			(layer)1
				Element:p
					Example request object:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"label"
				Element:span
					:
				Element:span
				Element:span
					"white"
				Element:span
					,
				Element:span
				Element:span
					"sort_order"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"value"
				Element:span
					:
				Element:span
				Element:span
					"#FFFFFF"
				Element:span
					,
				Element:span
				Element:span
					"is_default"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					68
				Element:span
					,
				Element:span
				Element:span
					"option_id"
				Element:span
					:
				Element:span
				Element:span
					3
				Element:span
					,
				Element:span
				Element:span
					"label"
				Element:span
					:
				Element:span
				Element:span
					"white"
				Element:span
					,
				Element:span
				Element:span
					"sort_order"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"value"
				Element:span
					:
				Element:span
				Element:span
					"#FFFFFF"
				Element:span
					,
				Element:span
				Element:span
					"is_default"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Update an Option Value
			Node:
			(type) c
			(layer)1
				Element:p
					Updates an existing option value.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					PUT /stores/{store_hash}/v2/options/{option_id}/values/{id}
				Element:li
					Basic Auth >
				Element:code
					PUT /api/v2/options/{option_id}/values/{id}
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Read-only Properties
			Node:
			(type) c
			(layer)1
				Element:p
					The following properties of the option value are read-only. If one or more of these properties are included in the request, it will be rejected.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					id
				Element:li
					option_id
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Requirements
			Node:
			(type) c
			(layer)1
				Element:p
					The following properties of the option value are required. The request won’t be fulfilled unless these properties are valid.
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Notes
			Node:
			(type) c
			(layer)1
				Element:p
					When you PUT an
				Element:code
					is_default
					property of
				Element:code
					true
					, all other option values on the parent option will have their
				Element:code
					is_default
					property set to
				Element:code
					false
					.
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Request
			Node:
			(type) c
			(layer)1
				Element:p
					Example request object:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"label"
				Element:span
					:
				Element:span
				Element:span
					"whitish"
				Element:span
					,
				Element:span
				Element:span
					"sort_order"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"value"
				Element:span
					:
				Element:span
				Element:span
					"#FFFFEF"
				Element:span
					,
				Element:span
				Element:span
					"is_default"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					68
				Element:span
					,
				Element:span
				Element:span
					"option_id"
				Element:span
					:
				Element:span
				Element:span
					3
				Element:span
					,
				Element:span
				Element:span
					"label"
				Element:span
					:
				Element:span
				Element:span
					"whitish"
				Element:span
					,
				Element:span
				Element:span
					"sort_order"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"value"
				Element:span
					:
				Element:span
				Element:span
					"#FFFFEF"
				Element:span
					,
				Element:span
				Element:span
					"is_default"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Delete an Option Value
			Node:
			(type) c
			(layer)1
				Element:p
					Deletes an option value.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					DELETE /stores/{store_hash}/v2/options/{option_id}/values/{id}
				Element:li
					Basic Auth >
				Element:code
					DELETE /api/v2/options/{option_id}/values/{id}
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Delete Multiple Option Values
			Node:
			(type) c
			(layer)1
				Element:p
					Deletes multiple values belonging to an option.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					DELETE /stores/{store_hash}/v2/options/{option_id}/values
				Element:li
					Basic Auth >
				Element:code
					DELETE /api/v2/options/{option_id}/values
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Pagination
			Node:
			(type) c
			(layer)1
				Element:p
					Parameters can be added to the URL query string to paginate the collection. The maximum limit is 250. If a limit isn’t provided, up to 50 option_values are returned by default.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Type
				Element:th
					Example
				Element:tbody
				Element:tr
				Element:td
					Page
				Element:td
					int
				Element:td
					/api/v2/options/{option_id}/values?page={number}
				Element:tr
				Element:td
					Limit
				Element:td
					int
				Element:td
					/api/v2/options/{option_id}/values?limit={count}
			Node:
			(type) c
			(layer)1
				Element:h2
				Element:span
					Product Images
			Node:
			(type) c
			(layer)1
				Element:p
					Images associated with a product.
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Product Image Object – Properties
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Name
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
					int
				Element:td
				Element:tr
				Element:td
					product_id
				Element:td
					int
				Element:td
					The ID of the product to which the image belongs.
				Element:tr
				Element:td
					image_file
				Element:td
					string
				Element:td
					When specifying a product image, the
				Element:code
					image_file
					should be specified as either: a path to an image already uploaded via WebDAV to the import directory (with the path relative to the import directory); or a URL to an image accessible on the internet.
				Element:tr
				Element:td
					is_thumbnail
				Element:td
					boolean
				Element:td
					If true, the image is used as the product’s thumbnail.
				Element:tr
				Element:td
					sort_order
				Element:td
					int
				Element:td
					The order in which the image will be displayed on the product page. Lower integers will give the image a higher priority. If the image is given a lower priority, then when updating, all images with a
				Element:code
					sort_order
					the same or greater than the image’s new
				Element:code
					sort_order
					value will have their
				Element:code
					sort_order
					reordered.
				Element:tr
				Element:td
					description
				Element:td
					text
				Element:td
					The description for the image
				Element:tr
				Element:td
					date_created
				Element:td
					date
				Element:td
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
				Element:th
				Element:tbody
				Element:tr
				Element:td
					Manages
				Element:td
					Product Image Object
				Element:tr
				Element:td
					OAuth Scopes
				Element:td
					store_v2_products
				Element:tr
				Element:td
				Element:td
					store_v2_products_read_only
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					List Product Images
			Node:
			(type) c
			(layer)1
				Element:p
					Gets the images associated with a product. (Default sorting is by image id, from lowest to highest.)
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >GET /stores/{store_hash}/v2/products/{product_id}/images
				Element:li
					Basic Auth >GET /api/v2/products/{product_id}/images
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Filters
			Node:
			(type) c
			(layer)1
				Element:p
					There are no filter parameters specific to product images.
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Pagination
			Node:
			(type) c
			(layer)1
				Element:p
					Parameters can be added to the URL query string to paginate the collection. The maximum limit is 250. If a limit isn’t provided, up to 50 product_images are returned by default.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Type
				Element:th
					Example
				Element:tbody
				Element:tr
				Element:td
					page
				Element:td
					int
				Element:td
					/api/v2/products/{product_id}/images?page={number}
				Element:tr
				Element:td
					limit
				Element:td
					int
				Element:td
					/api/v2/products/{product_id}/images?limit={count}
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					247
				Element:span
					,
				Element:span
				Element:span
					"product_id"
				Element:span
					:
				Element:span
				Element:span
					32
				Element:span
					,
				Element:span
				Element:span
					"image_file"
				Element:span
					:
				Element:span
				Element:span
					"sample_images/in_123__14581.jpg"
				Element:span
					,
				Element:span
				Element:span
					"zoom_url"
				Element:span
					:
				Element:span
				Element:span
					"https://cdn.url.path/bcapp/et7xe3pz/products/32/images/247/in_123__14581.1393831046.1280.1280.jpg?c=1"
				Element:span
					,
				Element:span
				Element:span
					"thumbnail_url"
				Element:span
					:
				Element:span
				Element:span
					"https://cdn.url.path/bcapp/et7xe3pz/products/32/images/247/in_123__14581.1393831046.386.513.jpg?c=1"
				Element:span
					,
				Element:span
				Element:span
					"standard_url"
				Element:span
					:
				Element:span
				Element:span
					"https://cdn.url.path/bcapp/et7xe3pz/products/32/images/247/in_123__14581.1393831046.220.290.jpg?c=1"
				Element:span
					,
				Element:span
				Element:span
					"tiny_url"
				Element:span
					:
				Element:span
				Element:span
					"https://cdn.url.path/bcapp/et7xe3pz/products/32/images/247/in_123__14581.1393831046.44.58.jpg?c=1"
				Element:span
					,
				Element:span
				Element:span
					"is_thumbnail"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"sort_order"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"description"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"date_created"
				Element:span
					:
				Element:span
				Element:span
					"Mon, 24 Sep 2012 01:14:30 +0000"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					248
				Element:span
					,
				Element:span
				Element:span
					"product_id"
				Element:span
					:
				Element:span
				Element:span
					32
				Element:span
					,
				Element:span
				Element:span
					"image_file"
				Element:span
					:
				Element:span
				Element:span
					"sample_images/in_122__93910.jpg"
				Element:span
					,
				Element:span
				Element:span
					"zoom_url"
				Element:span
					:
				Element:span
				Element:span
					"https://cdn.url.path/bcapp/et7xe3pz/products/32/images/248/in_122__93910.1393831046.1280.1280.jpg?c=1"
				Element:span
					,
				Element:span
				Element:span
					"thumbnail_url"
				Element:span
					:
				Element:span
				Element:span
					"https://cdn.url.path/bcapp/et7xe3pz/products/32/images/248/in_122__93910.1393831046.386.513.jpg?c=1"
				Element:span
					,
				Element:span
				Element:span
					"standard_url"
				Element:span
					:
				Element:span
				Element:span
					"https://cdn.url.path/bcapp/et7xe3pz/products/32/images/248/in_122__93910.1393831046.220.290.jpg?c=1"
				Element:span
					,
				Element:span
				Element:span
					"tiny_url"
				Element:span
					:
				Element:span
				Element:span
					"https://cdn.url.path/bcapp/et7xe3pz/products/32/images/248/in_122__93910.1393831046.44.58.jpg?c=1"
				Element:span
					,
				Element:span
				Element:span
					"is_thumbnail"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"sort_order"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"description"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"date_created"
				Element:span
					:
				Element:span
				Element:span
					"Mon, 24 Sep 2012 01:17:14 +0000"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					]
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Get a Product Image
			Node:
			(type) c
			(layer)1
				Element:p
					Gets a product image.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					GET /stores/{store_hash}/v2/products/{product_id}/images/{id}
				Element:li
					Basic Auth >
				Element:code
					GET /api/v2/products/{product_id}/images/{id}
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					248
				Element:span
					,
				Element:span
				Element:span
					"product_id"
				Element:span
					:
				Element:span
				Element:span
					32
				Element:span
					,
				Element:span
				Element:span
					"image_file"
				Element:span
					:
				Element:span
				Element:span
					"sample_images/in_122__93910.jpg"
				Element:span
					,
				Element:span
				Element:span
					"zoom_url"
				Element:span
					:
				Element:span
				Element:span
					"https://cdn.bcapp.dev/bcapp/et7xe3pz/products/32/images/248/in_122__93910.1393831046.1280.1280.jpg?c=1"
				Element:span
					,
				Element:span
				Element:span
					"thumbnail_url"
				Element:span
					:
				Element:span
				Element:span
					"https://cdn.bcapp.dev/bcapp/et7xe3pz/products/32/images/248/in_122__93910.1393831046.386.513.jpg?c=1"
				Element:span
					,
				Element:span
				Element:span
					"standard_url"
				Element:span
					:
				Element:span
				Element:span
					"https://cdn.bcapp.dev/bcapp/et7xe3pz/products/32/images/248/in_122__93910.1393831046.220.290.jpg?c=1"
				Element:span
					,
				Element:span
				Element:span
					"tiny_url"
				Element:span
					:
				Element:span
				Element:span
					"https://cdn.bcapp.dev/bcapp/et7xe3pz/products/32/images/248/in_122__93910.1393831046.44.58.jpg?c=1"
				Element:span
					,
				Element:span
				Element:span
					"is_thumbnail"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"sort_order"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"description"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"date_created"
				Element:span
					:
				Element:span
				Element:span
					"Mon, 24 Sep 2012 01:17:14 +0000"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Get a Count of Product Images
			Node:
			(type) c
			(layer)1
				Element:p
					Gets a count of the number of product images in the store.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					GET /stores/{store_hash}/v2/products/images/count
				Element:li
					Basic Auth >
				Element:code
					GET /api/v2/products/images/count
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"count"
				Element:span
					:
				Element:span
				Element:span
					105
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Create a Product Image
			Node:
			(type) c
			(layer)1
				Element:p
					Creates a new product image.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					POST /stores/{store_hash}/v2/products/{product_id}/images
				Element:li
					Basic Auth >
				Element:code
					POST /api/v2/products/{product_id}/images
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Read-only Properties
			Node:
			(type) c
			(layer)1
				Element:p
					The following properties of the product image are read-only. If one or more of these properties are included in the request, it will be rejected.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					id
				Element:li
					date_created
				Element:li
					product_id
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Requirements
			Node:
			(type) c
			(layer)1
				Element:p
					The following properties of the product image are required. The request won’t be fulfilled unless these properties are valid.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					image_file
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					116
				Element:span
					,
				Element:span
				Element:span
					"product_id"
				Element:span
					:
				Element:span
				Element:span
					29
				Element:span
					,
				Element:span
				Element:span
					"image_file"
				Element:span
					:
				Element:span
				Element:span
					"p/022/astonishing-x-men-1-100k__36562.jpg"
				Element:span
					,
				Element:span
				Element:span
					"is_thumbnail"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"sort_order"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"description"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"date_created"
				Element:span
					:
				Element:span
				Element:span
					"Fri, 21 Dec 2012 18:54:04 +0000"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Update a Product Image
			Node:
			(type) c
			(layer)1
				Element:p
					Updates an existing product image.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					PUT /stores/{store_hash}/v2/products/{product_id}/images/{id}
				Element:li
					Basic Auth >
				Element:code
					PUT /api/v2/products/{product_id}/images/{id}
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Read-only Properties
			Node:
			(type) c
			(layer)1
				Element:p
					The following properties of the product image are read-only. If one or more of these properties are included in the request, it will be rejected.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					id
				Element:li
					product_id
				Element:li
					date_created
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Requirements
			Node:
			(type) c
			(layer)1
				Element:p
					The following properties of the product image are required. The request won’t be fulfilled unless these properties are valid.
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					118
				Element:span
					,
				Element:span
				Element:span
					"product_id"
				Element:span
					:
				Element:span
				Element:span
					30
				Element:span
					,
				Element:span
				Element:span
					"image_file"
				Element:span
					:
				Element:span
				Element:span
					"k/392/ud2vk0n1l0zcfr7gtlqi__43888.png"
				Element:span
					,
				Element:span
				Element:span
					"is_thumbnail"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"sort_order"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"description"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"date_created"
				Element:span
					:
				Element:span
				Element:span
					"Fri, 21 Dec 2012 19:01:03 +0000"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Delete a Product Image
			Node:
			(type) c
			(layer)1
				Element:p
					Deletes a product image.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					DELETE /stores/{store_hash}/v2/products/{product_id}/images/{id}
				Element:li
					Basic Auth >
				Element:code
					DELETE /api/v2/products/{product_id}/images/{id}
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Delete Multiple Product Images
			Node:
			(type) c
			(layer)1
				Element:p
					Deletes multiple product images.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					DELETE /stores/{store_hash}/v2/products/{product_id}/images
				Element:li
					Basic Auth >
				Element:code
					DELETE /api/v2/products/{product_id}/images
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Pagination
			Node:
			(type) c
			(layer)1
				Element:p
					Parameters can be added to the URL query string to paginate the collection. The maximum limit is 250. If a limit isn’t provided, up to 50
				Element:code
					product_images
					are returned by default.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Type
				Element:th
					Example
				Element:tbody
				Element:tr
				Element:td
					Page
				Element:td
					int
				Element:td
					/api/v2/products/{product_id}/images?page={number}
				Element:tr
				Element:td
					Limit
				Element:td
					int
				Element:td
					/api/v2/products/{product_id}/images?limit={count}
			Node:
			(type) c
			(layer)1
				Element:h2
				Element:span
					Product Options
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
				Element:th
				Element:tbody
				Element:tr
				Element:td
					Managed by
				Element:td
				Element:a
					Product Options Resource
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Product Options Object – Properties
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Title
				Element:th
					Name
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
				Element:code
					id
				Element:td
				Element:code
					int
				Element:td
				Element:td
				Element:tr
				Element:td
				Element:code
					option_id
				Element:td
				Element:code
					int
				Element:td
				Element:td
				Element:tr
				Element:td
				Element:code
					display_name
				Element:td
				Element:code
					string
				Element:td
				Element:td
				Element:tr
				Element:td
				Element:code
					sort_order
				Element:td
				Element:code
					int
				Element:td
				Element:td
				Element:tr
				Element:td
				Element:code
					is_required
				Element:td
				Element:code
					boolean
				Element:td
				Element:td
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
				Element:th
				Element:tbody
				Element:tr
				Element:td
				Element:strong
					Manages
				Element:td
				Element:tr
				Element:td
				Element:strong
					OAuth Scopes
				Element:td
					store_v2_products
				Element:tr
				Element:td
				Element:td
					store_v2_products_read_only
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					List Product Options
			Node:
			(type) c
			(layer)1
				Element:p
					Gets the options associated with a product.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					GET /stores/{store_hash}/v2/products/{product_id}/options
				Element:li
					Basic Auth >
				Element:code
					GET /api/v2/products/{product_id}/options
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Filters
			Node:
			(type) c
			(layer)1
				Element:p
					There are no filter parameters specific to product options.
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Pagination
			Node:
			(type) c
			(layer)1
				Element:p
					Parameters can be added to the URL query string to paginate the collection. The maximum limit is 250. If a limit isn’t provided, up to 50 product_options are returned by default.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Type
				Element:th
					Example
				Element:tbody
				Element:tr
				Element:td
					page
				Element:td
					int
				Element:td
					/api/v2/products/{product_id}/options?page={number}
				Element:tr
				Element:td
					limit
				Element:td
					int
				Element:td
					/api/v2/products/{product_id}/options?limit={count}
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					13
				Element:span
					,
				Element:span
				Element:span
					"option_id"
				Element:span
					:
				Element:span
				Element:span
					8
				Element:span
					,
				Element:span
				Element:span
					"display_name"
				Element:span
					:
				Element:span
				Element:span
					"iPod Capacities"
				Element:span
					,
				Element:span
				Element:span
					"sort_order"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"is_required"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					14
				Element:span
					,
				Element:span
				Element:span
					"option_id"
				Element:span
					:
				Element:span
				Element:span
					9
				Element:span
					,
				Element:span
				Element:span
					"display_name"
				Element:span
					:
				Element:span
				Element:span
					"Accessories"
				Element:span
					,
				Element:span
				Element:span
					"sort_order"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"is_required"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
				Element:span
					}
				Element:span
				Element:span
					]
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Get a Product Option
			Node:
			(type) c
			(layer)1
				Element:p
					Gets an option associated with a product.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth “>
				Element:code
					GET /stores/{store_hash}/v2/products/{product_id}/options/{id}
				Element:li
					Basic Auth >
				Element:code
					GET /api/v2/products/{product_id}/options/{id}
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					14
				Element:span
					,
				Element:span
				Element:span
					"option_id"
				Element:span
					:
				Element:span
				Element:span
					9
				Element:span
					,
				Element:span
				Element:span
					"display_name"
				Element:span
					:
				Element:span
				Element:span
					"Accessories"
				Element:span
					,
				Element:span
				Element:span
					"sort_order"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"is_required"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h2
				Element:span
					Product Reviews
			Node:
			(type) c
			(layer)1
				Element:p
					Reviews associated with a product.
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Product Review Object – Properties
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Name
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
					int
				Element:td
					Unique database ID for this product review. Read-only.
				Element:tr
				Element:td
					product_id
				Element:td
					int
				Element:td
					The ID of the product to which this review belongs. Read-only.
				Element:tr
				Element:td
					author
				Element:td
					string
				Element:td
					The review’s author, displayed on the storefront.
				Element:tr
				Element:td
					date_created
				Element:td
					date
				Element:td
					RFC 2822 date that specifies the creation time of the review. (If not specified, will use the current time.)
				Element:tr
				Element:td
					rating
				Element:td
					int
				Element:td
					A whole number from 1–5, specifying the product’s rating in this review.
				Element:tr
				Element:td
					title
				Element:td
					string
				Element:td
					The review’s title, displayed on the storefront.
				Element:tr
				Element:td
					review
				Element:td
					text
				Element:td
					The full text of the review, displayed on the storefront.
				Element:tr
				Element:td
					status
				Element:td
					int
				Element:td
					A status indicator. 0=“Pending”, 1= “Approved”, 2=“Disapproved”.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
				Element:th
				Element:tbody
				Element:tr
				Element:td
				Element:strong
					Manages
				Element:td
					Product Review Object
				Element:tr
				Element:td
				Element:strong
					OAuth Scopes
				Element:td
					store_v2_products
				Element:tr
				Element:td
				Element:td
					store_v2_products_read_only
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					List Product Reviews
			Node:
			(type) c
			(layer)1
				Element:p
					Gets the reviews associated with a product. (Default sorting is by review id, from lowest to highest.)
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					GET /stores/{store_hash}/v2/products/{id}/reviews
				Element:li
					Basic Auth >
				Element:code
					GET /api/v2/products/{id}/reviews
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Filters
			Node:
			(type) c
			(layer)1
				Element:p
					There are no filter parameters specific to product reviews.
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Pagination
			Node:
			(type) c
			(layer)1
				Element:p
					Parameters can be added to the URL query string to paginate the collection. The maximum limit is 250. If a limit isn’t provided, up to 50 product_reviews are returned by default.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Type
				Element:th
					Example
				Element:tbody
				Element:tr
				Element:td
					page
				Element:td
					int
				Element:td
					/api/v2/products/{product_id}/reviews?page={number}
				Element:tr
				Element:td
					limit
				Element:td
					int
				Element:td
					/api/v2/products/{product_id}/reviews?limit={count}
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					190
				Element:span
					,
				Element:span
				Element:span
					"product_id"
				Element:span
					:
				Element:span
				Element:span
					5310
				Element:span
					,
				Element:span
				Element:span
					"author"
				Element:span
					:
				Element:span
				Element:span
					"John Doe"
				Element:span
					,
				Element:span
				Element:span
					"date_created"
				Element:span
					:
				Element:span
				Element:span
					"Wed, 12 Dec 2012 06:00:00 +0000"
				Element:span
					,
				Element:span
				Element:span
					"title"
				Element:span
					:
				Element:span
				Element:span
					"My experience with the widget"
				Element:span
					,
				Element:span
				Element:span
					"review"
				Element:span
					:
				Element:span
				Element:span
					"This widget worked for me, but might not work for everyone."
				Element:span
					,
				Element:span
				Element:span
					"rating"
				Element:span
					:
				Element:span
				Element:span
					4
				Element:span
					,
				Element:span
				Element:span
					"status"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					191
				Element:span
					,
				Element:span
				Element:span
					"product_id"
				Element:span
					:
				Element:span
				Element:span
					5310
				Element:span
					,
				Element:span
				Element:span
					"author"
				Element:span
					:
				Element:span
				Element:span
					"Jane Doe"
				Element:span
					,
				Element:span
				Element:span
					"date_created"
				Element:span
					:
				Element:span
				Element:span
					"Tue, 12 Nov 2013 06:00:00 +0000"
				Element:span
					,
				Element:span
				Element:span
					"title"
				Element:span
					:
				Element:span
				Element:span
					"Great product, slow shipping"
				Element:span
					,
				Element:span
				Element:span
					"review"
				Element:span
					:
				Element:span
				Element:span
					"Took two weeks to arrive"
				Element:span
					,
				Element:span
				Element:span
					"rating"
				Element:span
					:
				Element:span
				Element:span
					3
				Element:span
					,
				Element:span
				Element:span
					"status"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					192
				Element:span
					,
				Element:span
				Element:span
					"product_id"
				Element:span
					:
				Element:span
				Element:span
					5310
				Element:span
					,
				Element:span
				Element:span
					"author"
				Element:span
					:
				Element:span
				Element:span
					"Jimmy Doe"
				Element:span
					,
				Element:span
				Element:span
					"date_created"
				Element:span
					:
				Element:span
				Element:span
					"Fri, 14 Dec 2012 06:00:00 +0000"
				Element:span
					,
				Element:span
				Element:span
					"title"
				Element:span
					:
				Element:span
				Element:span
					"Worked for me!"
				Element:span
					,
				Element:span
				Element:span
					"review"
				Element:span
					:
				Element:span
				Element:span
					"I thought this product was pretty good"
				Element:span
					,
				Element:span
				Element:span
					"rating"
				Element:span
					:
				Element:span
				Element:span
					5
				Element:span
					,
				Element:span
				Element:span
					"status"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
				Element:span
					}
				Element:span
				Element:span
					]
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Get a Product Review
			Node:
			(type) c
			(layer)1
				Element:p
					Gets a product review.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					GET /stores/{store_hash}/v2/products/{product_id}/reviews/{id}
				Element:li
					Basic Auth >
				Element:code
					GET /api/v2/products/{product_id}/reviews/{id}
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					190
				Element:span
					,
				Element:span
				Element:span
					"product_id"
				Element:span
					:
				Element:span
				Element:span
					5310
				Element:span
					,
				Element:span
				Element:span
					"author"
				Element:span
					:
				Element:span
				Element:span
					"John Doe"
				Element:span
					,
				Element:span
				Element:span
					"date_created"
				Element:span
					:
				Element:span
				Element:span
					"Wed, 12 Dec 2012 06:00:00 +0000"
				Element:span
					,
				Element:span
				Element:span
					"title"
				Element:span
					:
				Element:span
				Element:span
					"My experience with the widget"
				Element:span
					,
				Element:span
				Element:span
					"review"
				Element:span
					:
				Element:span
				Element:span
					"This widget worked for me, but might not work for everyone."
				Element:span
					,
				Element:span
				Element:span
					"rating"
				Element:span
					:
				Element:span
				Element:span
					4
				Element:span
					,
				Element:span
				Element:span
					"status"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Create a Product Review
			Node:
			(type) c
			(layer)1
				Element:p
					Creates a new product review.
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Notes
			Node:
			(type) c
			(layer)1
				Element:p
					The
				Element:code
					review
					property is the review’s text. The
				Element:code
					rating
					property must be a whole number between 1–5. If the optional
				Element:code
					date_created
					property is not specified, it defaults to the current date/time. If the optional “status” property is not specified, it defaults to 0 [
				Element:code
					Pending
					]. Other allowable values are 1 [
				Element:code
					Approved
					] or 2 [
				Element:code
					Disapproved
					].)
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					POST /stores/{store_hash}/v2/products/{product_id}/reviews
				Element:li
					Basic Auth >
				Element:code
					POST /api/v2/products/{product_id}/reviews
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Read-only Properties
			Node:
			(type) c
			(layer)1
				Element:p
					The following properties of the product review are read-only. If one or more of these properties are included in the request, it will be rejected.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					id
				Element:li
					product_id
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Requirements
			Node:
			(type) c
			(layer)1
				Element:p
					The following properties of the product review are required. The request won’t be fulfilled unless these properties are valid.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					author
				Element:li
					title
				Element:li
					review
				Element:li
					rating
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					8
				Element:span
					,
				Element:span
				Element:span
					"product_id"
				Element:span
					:
				Element:span
				Element:span
					32
				Element:span
					,
				Element:span
				Element:span
					"author"
				Element:span
					:
				Element:span
				Element:span
					"Jimmy Doe"
				Element:span
					,
				Element:span
				Element:span
					"date_created"
				Element:span
					:
				Element:span
				Element:span
					"Tue, 05 Mar 2013 06:00:00 +0000"
				Element:span
					,
				Element:span
				Element:span
					"title"
				Element:span
					:
				Element:span
				Element:span
					"Worked for me!"
				Element:span
					,
				Element:span
				Element:span
					"review"
				Element:span
					:
				Element:span
				Element:span
					"I thought this product was pretty good"
				Element:span
					,
				Element:span
				Element:span
					"rating"
				Element:span
					:
				Element:span
				Element:span
					5
				Element:span
					,
				Element:span
				Element:span
					"status"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Update a Product Review
			Node:
			(type) c
			(layer)1
				Element:p
					Updates an existing product review. Your request may update any of the properties that are writeable for the Create (POST) operation.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					PUT /stores/{store_hash}/v2/products/{product_id}/reviews/{id}
				Element:li
					Basic Auth >
				Element:code
					PUT /api/v2/products/{product_id}/reviews/{id}
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Read-only Properties
			Node:
			(type) c
			(layer)1
				Element:p
					The following properties of the product review are read-only. If one or more of these properties are included in the request, it will be rejected.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					id
				Element:li
					product_id
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					8
				Element:span
					,
				Element:span
				Element:span
					"product_id"
				Element:span
					:
				Element:span
				Element:span
					32
				Element:span
					,
				Element:span
				Element:span
					"author"
				Element:span
					:
				Element:span
				Element:span
					"Jimmy Doe"
				Element:span
					,
				Element:span
				Element:span
					"date_created"
				Element:span
					:
				Element:span
				Element:span
					"Tue, 05 Mar 2013 06:00:00 +0000"
				Element:span
					,
				Element:span
				Element:span
					"title"
				Element:span
					:
				Element:span
				Element:span
					"Worked for me!"
				Element:span
					,
				Element:span
				Element:span
					"review"
				Element:span
					:
				Element:span
				Element:span
					"I thought this product was pretty good"
				Element:span
					,
				Element:span
				Element:span
					"rating"
				Element:span
					:
				Element:span
				Element:span
					5
				Element:span
					,
				Element:span
				Element:span
					"status"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Delete a Product Review
			Node:
			(type) c
			(layer)1
				Element:p
					Deletes a specified product review. (If successful, this will typically return a
				Element:code
					204 No Content
					.)
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					DELETE /stores/{store_hash}/v2/products/{product_id}/reviews/{id}
				Element:li
					Basic Auth >
				Element:code
					DELETE /api/v2/products/{product_id}/reviews/{id}
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Delete All Product Reviews
			Node:
			(type) c
			(layer)1
				Element:p
					Deletes all reviews for the specified product. (If successful, this will typically return a
				Element:code
					204 No Content
					.)
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					DELETE /stores/{store_hash}/v2/products/{product_id}/reviews
				Element:li
					Basic Auth >
				Element:code
					DELETE /api/v2/products/{product_id}/reviews
			Node:
			(type) c
			(layer)1
				Element:h2
				Element:span
					Product Rules
			Node:
			(type) c
			(layer)1
				Element:p
					Rules that modify the properties of a product, such as weight, price, and product image.
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Product Rule Object – Properties
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Name
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
					int
				Element:td
					The ID of the rule.
				Element:tr
				Element:td
					product_id
				Element:td
					int
				Element:td
					The ID of the product to which the rule belongs.
				Element:tr
				Element:td
					sort_order
				Element:td
					int
				Element:td
					The order in which the rule will be displayed on the product page. Lower integers will give the rule a higher priority. If the rule is given a lower priority, then when updating, all rules with a
				Element:code
					sort_order
					the same or greater than the rule’s new
				Element:code
					sort_order
					value will have their
				Element:code
					sort_order
					reordered.
				Element:tr
				Element:td
					is_enabled
				Element:td
					boolean
				Element:td
					If set to
				Element:code
					true
					, the rule will be evaluated when a customer configures a product’s options.
				Element:tr
				Element:td
					is_stop
				Element:td
					boolean
				Element:td
					If set to
				Element:code
					true
					and the rule evaluates to
				Element:code
					true
					, no more rules with a higher
				Element:code
					sort_order
					will be processed.
				Element:tr
				Element:td
					price_adjuster
				Element:td
					object
				Element:td
					If a product option rule specifies a change to the price based on an option, the
				Element:code
					price_adjuster
					object will consist of two name/value pairs. The first pair is named
				Element:code
					adjuster
					and contains one of the following values:
				Element:code
					relative
					,
				Element:code
					percentage
					, or
				Element:code
					absolute
					. The
				Element:code
					percentage
					value causes the price to vary based on either a positive or negative percentage. The
				Element:code
					relative
					value causes the price to vary by either a positive or negative monetary amount. The
				Element:code
					absolute
					value resets the price, so it should always be a positive number. The second pair is named
				Element:code
					adjuster_value
					and contains a decimal value representing one of the following: the amount to add or subtract from the price, the percentage by which the price should change, or the new price (as per the
				Element:code
					adjuster
					setting). If the product option rule does not specify a change to the price based on size or color,
				Element:code
					price_adjuster
					will be null.
				Element:tr
				Element:td
					weight_adjuster
				Element:td
					object
				Element:td
					If a product option rule specifies a change to the weight based on an option, the
				Element:code
					weight_adjuster
					object will consist of two name/value pairs. The first pair is named
				Element:code
					adjuster
					and contains one of the following values:
				Element:code
					relative
					or
				Element:code
					absolute
					. The
				Element:code
					relative
					value causes the weight to vary by either a positive or negative amount. The
				Element:code
					absolute
					value resets the weight, so it should always be a positive number. The second pair is named
				Element:code
					adjuster_value
					and contains a decimal value representing one of the following: the amount to add or subtract from the weight or the new weight (as per the
				Element:code
					adjuster
					setting). If the product option rule does not specify a change to the price based on size or color,
				Element:code
					weight_adjuster
					will be null.
				Element:tr
				Element:td
					is_purchasing_disabled
				Element:td
					boolean
				Element:td
					If true this rule prohibits purchasing the product with the configured option values.
				Element:tr
				Element:td
					purchasing_disabled_message
				Element:td
					string
				Element:td
					The message to display if the rule disabled purchasing the product.
				Element:tr
				Element:td
					is_purchasing_hidden
				Element:td
					boolean
				Element:td
					If true the rule hides the options on the product. Setting this to true has no effect if the rule is based on an SKU or has conditions from multiple product options.
				Element:tr
				Element:td
					image_file
				Element:td
					string
				Element:td
					When specifying a product rule, the image_file should be specified as either: A path to an rule already uploaded via FTP in the import directory and the path should be relative from the import directory. It can be a URL to an rule accessible on the internet.
				Element:tr
				Element:td
					conditions
				Element:td
					array
				Element:td
					The conditions array can contain one or more objects. Each object inside the array contains three name/value pairs, but at least one value will be missing at any given time. If a
				Element:code
					product_option_id
					value is present, then a
				Element:code
					option_value_id
					must also be present. If
				Element:code
					product_option_id
					and
				Element:code
					option_value_id
					values are present, then a
				Element:code
					sku_id
					value must not be present. This also holds true in the reverse, where if a
				Element:code
					sku_id
					value exists, values for the
				Element:code
					product_option_id
					and
				Element:code
					option_value_id
					cannot exist. NOTE: if you can use a SKU value, this is preferred for simplicity. Empty values are represented as
				Element:code
					null
					. If multiple objects are included in the array, the software runs through them using an AND/OR logic. Objects with identical
				Element:code
					product_option_id
					values will be linked with an OR. Objects with different
				Element:code
					product_option_id
					values will be linked with an AND. When one object contains a
				Element:code
					sku_id
					value and the other contains
				Element:code
					product_option_id
					and
				Element:code
					option_value_id
					values, they will be linked with an AND. Two objects which both contain
				Element:code
					sku_id
					values will be linked with an OR.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
				Element:th
				Element:tbody
				Element:tr
				Element:td
				Element:strong
					Manages
				Element:td
				Element:tr
				Element:td
				Element:strong
					OAuth Scopes
				Element:td
					store_v2_products
				Element:tr
				Element:td
				Element:td
					store_v2_products_read_only
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					List Product Rules
			Node:
			(type) c
			(layer)1
				Element:p
					Gets the collection of rules associated with a product. (Default sorting is by rule id, from lowest to highest.)
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					GET /stores/{store_hash}/v2/products/{product_id}/rules
				Element:li
					Basic Auth >
				Element:code
					GET /api/v2/products/{product_id}/rules
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Filters
			Node:
			(type) c
			(layer)1
				Element:p
					There are no filter parameters specific to product rules.
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Pagination
			Node:
			(type) c
			(layer)1
				Element:p
					Parameters can be added to the URL query string to paginate the collection. The maximum limit is 250. If a limit isn’t provided, up to 50 product_rules are returned by default.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Type
				Element:th
					Example
				Element:tbody
				Element:tr
				Element:td
					page
				Element:td
					int
				Element:td
					/api/v2/products/{product_id}/rules?page={number}
				Element:tr
				Element:td
					limit
				Element:td
					int
				Element:td
					/api/v2/products/{product_id}/rules?limit={count}
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"product_id"
				Element:span
					:
				Element:span
				Element:span
					3
				Element:span
					,
				Element:span
				Element:span
					"sort_order"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"is_enabled"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"is_stop"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"price_adjuster"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"weight_adjuster"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"is_purchasing_disabled"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"purchasing_disabled_message"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"is_purchasing_hidden"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"image_file"
				Element:span
					:
				Element:span
				Element:span
					"attribute_rule_images/1_source.jpg"
				Element:span
					,
				Element:span
				Element:span
					"conditions"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"product_option_id"
				Element:span
					:
				Element:span
				Element:span
					4
				Element:span
					,
				Element:span
				Element:span
					"option_value_id"
				Element:span
					:
				Element:span
				Element:span
					7
				Element:span
					,
				Element:span
				Element:span
					"sku_id"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
				Element:span
					}
				Element:span
				Element:span
					]
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					2
				Element:span
					,
				Element:span
				Element:span
					"product_id"
				Element:span
					:
				Element:span
				Element:span
					3
				Element:span
					,
				Element:span
				Element:span
					"sort_order"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"is_enabled"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"is_stop"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"price_adjuster"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"weight_adjuster"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"is_purchasing_disabled"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"purchasing_disabled_message"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"is_purchasing_hidden"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"image_file"
				Element:span
					:
				Element:span
				Element:span
					"attribute_rule_images/2_source.jpg"
				Element:span
					,
				Element:span
				Element:span
					"conditions"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"product_option_id"
				Element:span
					:
				Element:span
				Element:span
					4
				Element:span
					,
				Element:span
				Element:span
					"option_value_id"
				Element:span
					:
				Element:span
				Element:span
					8
				Element:span
					,
				Element:span
				Element:span
					"sku_id"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
				Element:span
					}
				Element:span
				Element:span
					]
				Element:span
				Element:span
					}
				Element:span
				Element:span
					]
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Get a Product Rule
			Node:
			(type) c
			(layer)1
				Element:p
					Gets a single product rule.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					GET /stores/{store_hash}/v2/products/{product_id}/rules/{id}
				Element:li
					Basic Auth >
				Element:code
					GET /api/v2/products/{product_id}/rules/{id}
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					2
				Element:span
					,
				Element:span
				Element:span
					"product_id"
				Element:span
					:
				Element:span
				Element:span
					3
				Element:span
					,
				Element:span
				Element:span
					"sort_order"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"is_enabled"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"is_stop"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"price_adjuster"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"weight_adjuster"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"is_purchasing_disabled"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"purchasing_disabled_message"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"is_purchasing_hidden"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"image_file"
				Element:span
					:
				Element:span
				Element:span
					"attribute_rule_images/2_source.jpg"
				Element:span
					,
				Element:span
				Element:span
					"conditions"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"product_option_id"
				Element:span
					:
				Element:span
				Element:span
					4
				Element:span
					,
				Element:span
				Element:span
					"option_value_id"
				Element:span
					:
				Element:span
				Element:span
					8
				Element:span
					,
				Element:span
				Element:span
					"sku_id"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
				Element:span
					}
				Element:span
				Element:span
					]
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Get a Count of Product Rules
			Node:
			(type) c
			(layer)1
				Element:p
					Gets a count of the number of product rules in the store.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					GET /stores/{store_hash}/v2/products/rules/count
				Element:li
					Basic Auth >
				Element:code
					GET /api/v2/products/rules/count
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"count"
				Element:span
					:
				Element:span
				Element:span
					3
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Create a Product Rule
			Node:
			(type) c
			(layer)1
				Element:p
					Creates a new product rule.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					POST /stores/{store_hash}/v2/products/{product_id}/rules
				Element:li
					Basic Auth >
				Element:code
					POST /api/v2/products/{product_id}/rules
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Read-only Properties
			Node:
			(type) c
			(layer)1
				Element:p
					The following properties of the product rule are read-only. If one or more of these properties are included in the request, it will be rejected.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					id
				Element:li
					product_id
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Requirements
			Node:
			(type) c
			(layer)1
				Element:p
					The following properties of the product rule are required. The request won’t be fulfilled unless these properties are valid.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					conditions
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					10
				Element:span
					,
				Element:span
				Element:span
					"product_id"
				Element:span
					:
				Element:span
				Element:span
					3
				Element:span
					,
				Element:span
				Element:span
					"sort_order"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"is_enabled"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"is_stop"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"price_adjuster"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"weight_adjuster"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"is_purchasing_disabled"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"purchasing_disabled_message"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"is_purchasing_hidden"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"image_file"
				Element:span
					:
				Element:span
				Element:span
					"attribute_rule_images/2_source.jpg"
				Element:span
					,
				Element:span
				Element:span
					"conditions"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"product_option_id"
				Element:span
					:
				Element:span
				Element:span
					4
				Element:span
					,
				Element:span
				Element:span
					"option_value_id"
				Element:span
					:
				Element:span
				Element:span
					8
				Element:span
					,
				Element:span
				Element:span
					"sku_id"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
				Element:span
					}
				Element:span
				Element:span
					]
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Update a Product Rule
			Node:
			(type) c
			(layer)1
				Element:p
					Updates an existing product rule.
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Notes
			Node:
			(type) c
			(layer)1
				Element:p
					If you include a conditions object array, its contents will be appended to any existing conditions. This operation does not overwrite existing conditions.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					PUT /stores/{store_hash}/v2/products/{product_id}/rules/{id}
				Element:li
					Basic Auth >
				Element:code
					PUT /api/v2/products/{product_id}/rules/{id}
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Read-only Properties
			Node:
			(type) c
			(layer)1
				Element:p
					The following properties of the product rule are read-only. If one or more of these properties are included in the request, it will be rejected.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					id
				Element:li
					product_id
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Requirements
			Node:
			(type) c
			(layer)1
				Element:p
					There are no property requirements for updating a product rule.
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					2
				Element:span
					,
				Element:span
				Element:span
					"product_id"
				Element:span
					:
				Element:span
				Element:span
					3
				Element:span
					,
				Element:span
				Element:span
					"sort_order"
				Element:span
					:
				Element:span
				Element:span
					2
				Element:span
					,
				Element:span
				Element:span
					"is_enabled"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"is_stop"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"price_adjuster"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"weight_adjuster"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"is_purchasing_disabled"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"purchasing_disabled_message"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"is_purchasing_hidden"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"image_file"
				Element:span
					:
				Element:span
				Element:span
					"attribute_rule_images/2_source.jpg"
				Element:span
					,
				Element:span
				Element:span
					"conditions"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"product_option_id"
				Element:span
					:
				Element:span
				Element:span
					4
				Element:span
					,
				Element:span
				Element:span
					"option_value_id"
				Element:span
					:
				Element:span
				Element:span
					8
				Element:span
					,
				Element:span
				Element:span
					"sku_id"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
				Element:span
					}
				Element:span
				Element:span
					]
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Delete a Product Rule
			Node:
			(type) c
			(layer)1
				Element:p
					Deletes a product rule.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					DELETE /stores/{store_hash}/v2/products/{product_id}/rules/{id}
				Element:li
					Basic Auth >
				Element:code
					DELETE /api/v2/products/{product_id}/rules/{id}
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Delete Multiple Product Rules
			Node:
			(type) c
			(layer)1
				Element:p
					Deletes multiple product rules.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					DELETE /stores/{store_hash}/v2/products/{product_id}/rules
				Element:li
					Basic Auth >
				Element:code
					DELETE /api/v2/products/{product_id}/rules
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Pagination
			Node:
			(type) c
			(layer)1
				Element:p
					Parameters can be added to the URL query string to paginate the collection. The maximum limit is 250. If a limit isn’t provided, up to 50
				Element:code
					product_rules
					are returned by default.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Type
				Element:th
					Example
				Element:tbody
				Element:tr
				Element:td
					page
				Element:td
					int
				Element:td
					/api/v2/products/{product_id}/rules?page={number}
				Element:tr
				Element:td
					limit
				Element:td
					int
				Element:td
					/api/v2/products/{product_id}/rules?limit={count}
			Node:
			(type) c
			(layer)1
				Element:h2
				Element:span
					Videos
			Node:
			(type) c
			(layer)1
				Element:p
					Embedded videos displayed on product listings.
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Videos Object – Properties
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Name
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
					string
				Element:td
				Element:tr
				Element:td
					product_id
				Element:td
					int
				Element:td
				Element:tr
				Element:td
					sort_order
				Element:td
					int
				Element:td
				Element:tr
				Element:td
					name
				Element:td
					string
				Element:td
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
				Element:th
				Element:tbody
				Element:tr
				Element:td
				Element:strong
					Manages
				Element:td
				Element:tr
				Element:td
				Element:strong
					OAuth Scopes
				Element:td
					store_v2_products
				Element:tr
				Element:td
				Element:td
					store_v2_products_read_only
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					List Product Videos
			Node:
			(type) c
			(layer)1
				Element:p
					Gets the videos associated with a product.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					GET /stores/{store_hash}/v2/products/{product_id}/videos
				Element:li
					Basic Auth >
				Element:code
					GET /api/v2/products/{product_id}/videos
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Pagination
			Node:
			(type) c
			(layer)1
				Element:p
					Parameters can be added to the URL query string to paginate the collection. The maximum limit is 250. If a limit isn’t provided, up to 50
				Element:code
					product_videos
					are returned by default.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Type
				Element:th
					Example
				Element:tbody
				Element:tr
				Element:td
					page
				Element:td
					int
				Element:td
					/api/v2/products/{product_id}/videos?page={number}
				Element:tr
				Element:td
					limit
				Element:td
					int
				Element:td
					/api/v2/products/{product_id}/videos?limit={count}
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"UmhvxsOwhqk"
				Element:span
					,
				Element:span
				Element:span
					"product_id"
				Element:span
					:
				Element:span
				Element:span
					30
				Element:span
					,
				Element:span
				Element:span
					"sort_order"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"X-Men Evolution: Season 1, Episode 1"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					]
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Get a Product Video
			Node:
			(type) c
			(layer)1
				Element:p
					Gets a product video.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					GET /stores/{store_hash}/v2/products/{product_id}/videos/{id}
				Element:li
					Basic Auth >
				Element:code
					GET /api/v2/products/{product_id}/videos/{id}
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Get a Count of Product Videos
			Node:
			(type) c
			(layer)1
				Element:p
					Gets a count of the number of product videos in the store.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					GET /stores/{store_hash}/v2/products/videos/count
				Element:li
					Basic Auth >
				Element:code
					GET /api/v2/products/videos/count
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"count"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Create a Product Video
			Node:
			(type) c
			(layer)1
				Element:p
					Adds a link to a YouTube video to a product.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					POST /stores/{store_hash}/v2/products/{product_id}/videos
				Element:li
					Basic Auth >
				Element:code
					POST /api/v2/products/{product_id}/videos
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Read-only Properties
			Node:
			(type) c
			(layer)1
				Element:p
					The following properties of the product video are read-only. If one or more of these properties are included in the request, it will be rejected.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					id
				Element:li
					product_id
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Requirements
			Node:
			(type) c
			(layer)1
				Element:p
					The following properties of the product video are required. The request won’t be fulfilled unless these properties are valid.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					url
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Notes
			Node:
			(type) c
			(layer)1
				Element:p
					Only YouTube videos are supported. To create a new video, pass the full
				Element:code
					url
					in the request body.
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Request
			Node:
			(type) c
			(layer)1
				Element:p
					Example request object:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
				Element:span
					"https://www.youtube.com/watch?v=4wZ3ZG_Wams"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Update Product Video Metadata
			Node:
			(type) c
			(layer)1
				Element:p
					Edit the metadata of a product video.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					PUT /stores/{store_hash}/v2/products/{product_id}/videos/{id}
				Element:li
					Basic Auth >
				Element:code
					PUT /api/v2/products/{product_id}/videos/{id}
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Read-only Properties
			Node:
			(type) c
			(layer)1
				Element:p
					The following properties of the product video are read-only. If one or more of these properties are included in the request, it will be rejected.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					id
				Element:li
					product_id
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Requirements
			Node:
			(type) c
			(layer)1
				Element:p
					There are no required properties when updating a product video.
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Notes
			Node:
			(type) c
			(layer)1
				Element:p
					The
				Element:code
					name
					,
				Element:code
					sort_order
					and
				Element:code
					url
					properties of the product video are editable.
			Node:
			(type) c
			(layer)1
				Element:p
					Posting a new
				Element:code
					url
					will update the
				Element:code
					id
					of the video to reference the new video.
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Request
			Node:
			(type) c
			(layer)1
				Element:p
					Example request object:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"New video title"
				Element:span
					,
				Element:span
				Element:span
					"sort_order"
				Element:span
					:
				Element:span
				Element:span
					2
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Delete a Product Video
			Node:
			(type) c
			(layer)1
				Element:p
					Delete a product video.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					DELETE /stores/{store_hash}/v2/products/{product_id}/videos/{id}
				Element:li
					Basic Auth >
				Element:code
					DELETE /api/v2/products/{product_id}/videos/{id}
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Delete All Product Videos
			Node:
			(type) c
			(layer)1
				Element:p
					Deletes all videos belonging to a product.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					DELETE /stores/{store_hash}/v2/products/{product_id}/videos
				Element:li
					Basic Auth >
				Element:code
					DELETE /api/v2/products/{product_id}/videos
			Node:
			(type) c
			(layer)1
				Element:h2
				Element:span
					SKUs
			Node:
			(type) c
			(layer)1
				Element:p
					Stock Keeping Unit identifiers associated with products or product options.
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					SKU Object – Properties
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Name
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
					int
				Element:td
				Element:tr
				Element:td
					product_id
				Element:td
					int
				Element:td
				Element:tr
				Element:td
					sku
				Element:td
					string
				Element:td
					The unique SKU (stock keeping unit).
				Element:tr
				Element:td
					price
				Element:td
					decimal
				Element:td
					This SKU’s base price on the storefront. If this value is null, the product’s default price (set in the Product resource’s
				Element:code
					price
					field) will be used as the base price.
				Element:tr
				Element:td
					adjusted_price
				Element:td
					decimal
				Element:td
					The SKU’s price on the storefront – after the product’s base price is inherited, and/or any option set or any product rules are applied. This property is READ-ONLY.
				Element:tr
				Element:td
					cost_price
				Element:td
					decimal
				Element:td
					The product’s cost price.
				Element:tr
				Element:td
					upc
				Element:td
					string
				Element:td
					The UPC (Universal Product Code) for this product combination.
				Element:tr
				Element:td
					inventory_level
				Element:td
					int
				Element:td
					The inventory level for the product.
				Element:tr
				Element:td
					inventory_warning_level
				Element:td
					int
				Element:td
					The inventory warning level for the product .
				Element:tr
				Element:td
					bin_picking_number
				Element:td
					string
				Element:td
					The BIN picking number.
				Element:tr
				Element:td
					weight
				Element:td
					decimal
				Element:td
					This SKU’s base weight on the storefront. If this value is null, the product’s default weight (set in the Product resource’s weight field) will be used as the base weight.
				Element:tr
				Element:td
					adjusted_weight
				Element:td
					decimal
				Element:td
					This SKU’s weight on the storefront – after the product’s base weight is inherited, and/or any option set or any product rules are applied. This property is READ-ONLY.
				Element:tr
				Element:td
					is_purchasing_disabled
				Element:td
					boolean
				Element:td
					if true, this prohibits purchasing of the SKU.
				Element:tr
				Element:td
					purchasing_disabled_message
				Element:td
					string
				Element:td
					The message to display if purchasing is disabled on this SKU.
				Element:tr
				Element:td
					image_file
				Element:td
					string
				Element:td
					The image that will be displayed when this SKU is selected on the storefront. When updating a SKU image, send the publicly accessible URL. Supported image formats are JPEG, PNG, and GIF.
				Element:tr
				Element:td
					options
				Element:td
					object_array
				Element:td
					This is an object {“product_option_id”: int, “option_value_id”:int}
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
				Element:th
				Element:tbody
				Element:tr
				Element:td
				Element:strong
					Manages
				Element:td
				Element:tr
				Element:td
				Element:strong
					OAuth Scopes
				Element:td
					store_v2_products
				Element:tr
				Element:td
				Element:td
					store_v2_products_read_only
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					List Product SKUs
			Node:
			(type) c
			(layer)1
				Element:p
					Gets the collection of SKUs associated with a product.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					GET /stores/{store_hash}/v2/products/{product_id}/skus
				Element:li
					Basic Auth >
				Element:code
					GET /api/v2/products/{product_id}/skus
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Notes
			Node:
			(type) c
			(layer)1
				Element:p
					BigCommerce has updated the SKU schema to include additional price, weight, image, and purchasable properties. We will eventually remove the ability to manage these properties via SKU rules. (Merchants are already constrained from creating SKU-only rules in the BigCommerce control panel.)
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Filters
			Node:
			(type) c
			(layer)1
				Element:p
					Filter parameters can be added to the URL query string to select specific skus in the collection.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Type
				Element:th
					Example
				Element:tbody
				Element:tr
				Element:td
					min_id
				Element:td
					int
				Element:td
					/api/v2/products/{product_id}/skus?min_id={value}
				Element:tr
				Element:td
					max_id
				Element:td
					int
				Element:td
					/api/v2/products/{product_id}/skus?max_id={value}
				Element:tr
				Element:td
					sku
				Element:td
					string
				Element:td
					/api/v2/products/{product_id}/skus?sku={value}
				Element:tr
				Element:td
					upc
				Element:td
					string
				Element:td
					/api/v2/products/{product_id}/skus?upc={value}
				Element:tr
				Element:td
					inventory_level
				Element:td
					string
				Element:td
					/api/v2/products/{product_id}/skus?inventory_level={value}
				Element:tr
				Element:td
					inventory_warning_level
				Element:td
					string
				Element:td
					/api/v2/products/{product_id}/skus?inventory_warning_level={value}
				Element:tr
				Element:td
					bin_picking_number
				Element:td
					string
				Element:td
					/api/v2/products/{product_id}/skus?bin_picking_number={value}
				Element:tr
				Element:td
					min_inventory_level
				Element:td
					int
				Element:td
					/api/v2/products/{product_id}/skus?min_inventory_level={value}
				Element:tr
				Element:td
					max_inventory_level
				Element:td
					int
				Element:td
					/api/v2/products/{product_id}/skus?max_inventory_level={value}
				Element:tr
				Element:td
					is_low_inventory
				Element:td
					boolean
				Element:td
					/api/v2/products/{product_id}/skus?is_low_inventory={value}
				Element:tr
				Element:td
					product_hash
				Element:td
					int
				Element:td
					/api/v2/products/{product_id}/skus?product_hash={value}
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Pagination
			Node:
			(type) c
			(layer)1
				Element:p
					Parameters can be added to the URL query string to paginate the collection. The maximum limit is 250. If a limit isn’t provided, up to 50 skus are returned by default.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Type
				Element:th
					Example
				Element:tbody
				Element:tr
				Element:td
					page
				Element:td
					int
				Element:td
					/api/v2/products/{product_id}/skus?page={number}
				Element:tr
				Element:td
					limit
				Element:td
					int
				Element:td
					/api/v2/products/{product_id}/skus?limit={count}
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"product_id"
				Element:span
					:
				Element:span
				Element:span
					5
				Element:span
					,
				Element:span
				Element:span
					"sku"
				Element:span
					:
				Element:span
				Element:span
					"MB-1"
				Element:span
					,
				Element:span
				Element:span
					"price"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"adjusted_price"
				Element:span
					:
				Element:span
				Element:span
					"1.5000"
				Element:span
					,
				Element:span
				Element:span
					"cost_price"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"upc"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"inventory_level"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"inventory_warning_level"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"bin_picking_number"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"weight"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"adjusted_weight"
				Element:span
					:
				Element:span
				Element:span
					"0.00"
				Element:span
					,
				Element:span
				Element:span
					"is_purchasing_disabled"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"purchasing_disabled_message"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"image_file"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"options"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"product_option_id"
				Element:span
					:
				Element:span
				Element:span
					15
				Element:span
					,
				Element:span
				Element:span
					"option_value_id"
				Element:span
					:
				Element:span
				Element:span
					17
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"product_option_id"
				Element:span
					:
				Element:span
				Element:span
					16
				Element:span
					,
				Element:span
				Element:span
					"option_value_id"
				Element:span
					:
				Element:span
				Element:span
					28
				Element:span
				Element:span
					}
				Element:span
				Element:span
					]
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					2
				Element:span
					,
				Element:span
				Element:span
					"product_id"
				Element:span
					:
				Element:span
				Element:span
					5
				Element:span
					,
				Element:span
				Element:span
					"sku"
				Element:span
					:
				Element:span
				Element:span
					"MB-2"
				Element:span
					,
				Element:span
				Element:span
					"price"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"adjusted_price"
				Element:span
					:
				Element:span
				Element:span
					"2.0000"
				Element:span
					,
				Element:span
				Element:span
					"cost_price"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"upc"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"inventory_level"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"inventory_warning_level"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"bin_picking_number"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"weight"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"adjusted_weight"
				Element:span
					:
				Element:span
				Element:span
					"0.00"
				Element:span
					,
				Element:span
				Element:span
					"is_purchasing_disabled"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"purchasing_disabled_message"
				Element:span
					:
				Element:span
				Element:span
					"We're sorry, this is unavailable."
				Element:span
					,
				Element:span
				Element:span
					"image_file"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"options"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"product_option_id"
				Element:span
					:
				Element:span
				Element:span
					15
				Element:span
					,
				Element:span
				Element:span
					"option_value_id"
				Element:span
					:
				Element:span
				Element:span
					18
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"product_option_id"
				Element:span
					:
				Element:span
				Element:span
					16
				Element:span
					,
				Element:span
				Element:span
					"option_value_id"
				Element:span
					:
				Element:span
				Element:span
					26
				Element:span
				Element:span
					}
				Element:span
				Element:span
					]
				Element:span
				Element:span
					}
				Element:span
				Element:span
					]
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Get a Product SKU
			Node:
			(type) c
			(layer)1
				Element:p
					Gets a single product SKU.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					GET /stores/{store_hash}/v2/products/{product_id}/skus/{id}
				Element:li
					Basic Auth >
				Element:code
					GET /api/v2/products/{product_id}/skus/{id}
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					5
				Element:span
					,
				Element:span
				Element:span
					"product_id"
				Element:span
					:
				Element:span
				Element:span
					7
				Element:span
					,
				Element:span
				Element:span
					"sku"
				Element:span
					:
				Element:span
				Element:span
					"MBA-1atest"
				Element:span
					,
				Element:span
				Element:span
					"price"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"adjusted_price"
				Element:span
					:
				Element:span
				Element:span
					"1.5000"
				Element:span
					,
				Element:span
				Element:span
					"cost_price"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"upc"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"inventory_level"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"inventory_warning_level"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"bin_picking_number"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"weight"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"adjusted_weight"
				Element:span
					:
				Element:span
				Element:span
					"0.00"
				Element:span
					,
				Element:span
				Element:span
					"is_purchasing_disabled"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"purchasing_disabled_message"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"image_file"
				Element:span
					:
				Element:span
				Element:span
					"https://thinglust.com/eyecandy.png"
				Element:span
					,
				Element:span
				Element:span
					"options"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"product_option_id"
				Element:span
					:
				Element:span
				Element:span
					20
				Element:span
					,
				Element:span
				Element:span
					"option_value_id"
				Element:span
					:
				Element:span
				Element:span
					51
				Element:span
				Element:span
					}
				Element:span
				Element:span
					]
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Get a Count of Product SKUs
			Node:
			(type) c
			(layer)1
				Element:p
					Gets a count of the number of product SKUs in the store.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					GET /stores/{store_hash}/v2/products/skus/count
				Element:li
					Basic Auth >
				Element:code
					GET /api/v2/products/skus/count
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"count"
				Element:span
					:
				Element:span
				Element:span
					1235
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Create a Product SKU
			Node:
			(type) c
			(layer)1
				Element:p
					Creates a new product SKU.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					POST /stores/{store_hash}/v2/products/{product_id}/skus
				Element:li
					Basic Auth >
				Element:code
					POST /api/v2/products/{product_id}/skus
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Read-only Properties
			Node:
			(type) c
			(layer)1
				Element:p
					The following properties of the sku are read-only. If one or more of these properties are included in the request, it will be rejected.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					id
				Element:li
					product_id
				Element:li
					adjusted_price
				Element:li
					adjusted_weight
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Requirements
			Node:
			(type) c
			(layer)1
				Element:p
					The following properties of the sku are required. The request won’t be fulfilled unless these properties are valid.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					sku
				Element:li
					options
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Notes
			Node:
			(type) c
			(layer)1
				Element:p
					To maximize system performance, BigCommerce caps the number of SKUs associated with a product at 500. If you attempt to add a SKU to a product that has 500 SKUs, BigCommerce will return a 403 error.
			Node:
			(type) c
			(layer)1
				Element:p
					BigCommerce has updated the SKU schema to include additional price, weight, image, and purchasable properties. We will eventually remove the ability to manage these properties via SKU rules. (Merchants are already constrained from creating SKU-only rules in the BigCommerce control panel.)
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					5
				Element:span
					,
				Element:span
				Element:span
					"product_id"
				Element:span
					:
				Element:span
				Element:span
					7
				Element:span
					,
				Element:span
				Element:span
					"sku"
				Element:span
					:
				Element:span
				Element:span
					"MBA-1atest"
				Element:span
					,
				Element:span
				Element:span
					"price"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"adjusted_price"
				Element:span
					:
				Element:span
				Element:span
					"1.5000"
				Element:span
					,
				Element:span
				Element:span
					"cost_price"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"upc"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"inventory_level"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"inventory_warning_level"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"bin_picking_number"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"weight"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"adjusted_weight"
				Element:span
					:
				Element:span
				Element:span
					"0.00"
				Element:span
					,
				Element:span
				Element:span
					"is_purchasing_disabled"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"purchasing_disabled_message"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"image_file"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"options"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"product_option_id"
				Element:span
					:
				Element:span
				Element:span
					20
				Element:span
					,
				Element:span
				Element:span
					"option_value_id"
				Element:span
					:
				Element:span
				Element:span
					51
				Element:span
				Element:span
					}
				Element:span
				Element:span
					]
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Update a Product SKU
			Node:
			(type) c
			(layer)1
				Element:p
					Updates an existing product SKU.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					PUT /stores/{store_hash}/v2/products/{product_id}/skus/{id}
				Element:li
					Basic Auth >
				Element:code
					PUT /api/v2/products/{product_id}/skus/{id}
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Read-only Properties
			Node:
			(type) c
			(layer)1
				Element:p
					The following properties of the sku are read-only. If one or more of these properties are included in the request, it will be rejected.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					id
				Element:li
					product_id
				Element:li
					adjusted_price
				Element:li
					adjusted_weight
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Requirements
			Node:
			(type) c
			(layer)1
				Element:p
					There are no required properties for updating a product SKU.
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					5
				Element:span
					,
				Element:span
				Element:span
					"product_id"
				Element:span
					:
				Element:span
				Element:span
					7
				Element:span
					,
				Element:span
				Element:span
					"sku"
				Element:span
					:
				Element:span
				Element:span
					"MBA-1atest"
				Element:span
					,
				Element:span
				Element:span
					"price"
				Element:span
					:
				Element:span
				Element:span
					"4.9900"
				Element:span
					,
				Element:span
				Element:span
					"adjusted_price"
				Element:span
					:
				Element:span
				Element:span
					"3.9900"
				Element:span
					,
				Element:span
				Element:span
					"cost_price"
				Element:span
					:
				Element:span
				Element:span
					"2.9900"
				Element:span
					,
				Element:span
				Element:span
					"upc"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"inventory_level"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"inventory_warning_level"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"bin_picking_number"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"weight"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"adjusted_weight"
				Element:span
					:
				Element:span
				Element:span
					"0.00"
				Element:span
					,
				Element:span
				Element:span
					"is_purchasing_disabled"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"purchasing_disabled_message"
				Element:span
					:
				Element:span
				Element:span
					"We're sorry, this is unavailable."
				Element:span
					,
				Element:span
				Element:span
					"image_file"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"options"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"product_option_id"
				Element:span
					:
				Element:span
				Element:span
					20
				Element:span
					,
				Element:span
				Element:span
					"option_value_id"
				Element:span
					:
				Element:span
				Element:span
					51
				Element:span
				Element:span
					}
				Element:span
				Element:span
					]
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Delete a Product SKU
			Node:
			(type) c
			(layer)1
				Element:p
					Deletes a product SKU.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					DELETE /stores/{store_hash}/v2/products/{product_id}/skus/{id}
				Element:li
					Basic Auth >
				Element:code
					DELETE /api/v2/products/{product_id}/skus/{id}
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Delete Multiple Product SKUs
			Node:
			(type) c
			(layer)1
				Element:p
					Deletes multiple product SKUs.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					DELETE /stores/{store_hash}/v2/products/{product_id}/skus
				Element:li
					Basic Auth >
				Element:code
					DELETE /api/v2/products/{product_id}/skus
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Filters
			Node:
			(type) c
			(layer)1
				Element:p
					Filter parameters can be added to the URL query string to select specific SKUs in the collection.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Type
				Element:th
					Example
				Element:tbody
				Element:tr
				Element:td
					min_id
				Element:td
					int
				Element:td
					/api/v2/products/{product_id}/skus?min_id={value}
				Element:tr
				Element:td
					max_id
				Element:td
					int
				Element:td
					/api/v2/products/{product_id}/skus?max_id={value}
				Element:tr
				Element:td
					sku
				Element:td
					string
				Element:td
					/api/v2/products/{product_id}/skus?sku={value}
				Element:tr
				Element:td
					upc
				Element:td
					string
				Element:td
					/api/v2/products/{product_id}/skus?upc={value}
				Element:tr
				Element:td
					inventory_level
				Element:td
					string
				Element:td
					/api/v2/products/{product_id}/skus?inventory_level={value}
				Element:tr
				Element:td
					inventory_warning_level
				Element:td
					string
				Element:td
					/api/v2/products/{product_id}/skus?inventory_warning_level={value}
				Element:tr
				Element:td
					bin_picking_number
				Element:td
					string
				Element:td
					/api/v2/products/{product_id}/skus?bin_picking_number={value}
				Element:tr
				Element:td
					min_inventory_level
				Element:td
					int
				Element:td
					/api/v2/products/{product_id}/skus?min_inventory_level={value}
				Element:tr
				Element:td
					max_inventory_level
				Element:td
					int
				Element:td
					/api/v2/products/{product_id}/skus?max_inventory_level={value}
				Element:tr
				Element:td
					is_low_inventory
				Element:td
					boolean
				Element:td
					/api/v2/products/{product_id}/skus?is_low_inventory={value}
				Element:tr
				Element:td
					product_hash
				Element:td
					int
				Element:td
					/api/v2/products/{product_id}/skus?product_hash={value}
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Pagination
			Node:
			(type) c
			(layer)1
				Element:p
					Parameters can be added to the URL query string to paginate the collection. The maximum limit is 250. If a limit isn’t provided, up to 50 skus are returned by default.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Type
				Element:th
					Example
				Element:tbody
				Element:tr
				Element:td
					page
				Element:td
					int
				Element:td
					/api/v2/products/{product_id}/skus?page={number}
				Element:tr
				Element:td
					limit
				Element:td
					int
				Element:td
					/api/v2/products/{product_id}/skus?limit={count}
			Node:
			(type) h1
			(layer)1
				Element:h1
				Element:span
					Store Content Reference
			Node:
			(type) c
			(layer)1
				Element:p
					Store Content APIs help merchants edit and publish blog posts and Web pages, improve SEO, and drive traffic to stores. They include Blog Posts, Blog Tags, Redirects, and Pages.
			Node:
			(type) c
			(layer)1
				Element:h2
				Element:span
					Blog Posts
			Node:
			(type) c
			(layer)1
				Element:p
					A content entry in the store’s blog.
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Blog Post Object – Properties
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Name
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
					int
				Element:td
				Element:tr
				Element:td
					title
				Element:td
					string
				Element:td
				Element:tr
				Element:td
					url
				Element:td
					string
				Element:td
				Element:tr
				Element:td
					preview_url
				Element:td
					string
				Element:td
				Element:tr
				Element:td
					body
				Element:td
					string
				Element:td
				Element:tr
				Element:td
					tags
				Element:td
					array of strings
				Element:td
				Element:tr
				Element:td
					summary
				Element:td
					string
				Element:td
				Element:tr
				Element:td
					is_published
				Element:td
					boolean
				Element:td
				Element:tr
				Element:td
					published_date
				Element:td
					date string, or object
				Element:td
					When including the blog post’s
				Element:code
					published_date
					in
				Element:code
					PUT
					or
				Element:code
					POST
					requests, supply it as a flat date string in valid
				Element:a
					RFC 2822
					or
				Element:a
					ISO 8601
					format.
				Element:br
				Element:br
					In GET requests, the
				Element:code
					published_date
					is returned as an object, whose members are:
				Element:code
					date
					(date string);
				Element:code
					timezone_type
					(integer); and
				Element:code
					timezone
					(string representing an hours:minutes offset, in the format
				Element:code
					"+hh:mm"
					or
				Element:code
					"-hh:mm"
					).
				Element:tr
				Element:td
					published_date_iso8601
				Element:td
					date string
				Element:td
					Published date in
				Element:a
					ISO 8601
					format.
				Element:tr
				Element:td
					meta_description
				Element:td
					string
				Element:td
				Element:tr
				Element:td
					meta_keywords
				Element:td
					string
				Element:td
				Element:tr
				Element:td
					author
				Element:td
					string
				Element:td
				Element:tr
				Element:td
					thumbnail_path
				Element:td
					string
				Element:td
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
				Element:th
				Element:tbody
				Element:tr
				Element:td
				Element:strong
					Manages
				Element:td
				Element:tr
				Element:td
				Element:strong
					OAuth Scopes
				Element:td
					store_v2_content
				Element:tr
				Element:td
				Element:td
					store_v2_content_read_only
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					List Blog Posts
			Node:
			(type) c
			(layer)1
				Element:p
					Gets the collection of blog posts. (Default sorting is by published_date, from most-recent to earliest.)
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth
				Element:code
					GET /stores/{store_hash}/v2/blog/posts
				Element:li
					Basic Auth
				Element:code
					GET /api/v2/blog/posts
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Filters
			Node:
			(type) c
			(layer)1
				Element:p
					Filter parameters can be added to the URL query string to select specific blog_posts in the collection.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Type
				Element:th
					Example
				Element:tbody
				Element:tr
				Element:td
					is_published
				Element:td
					string
				Element:td
					/stores/{store_hash}/v2/blog/posts?is_published={value}
				Element:tr
				Element:td
					url
				Element:td
					string
				Element:td
					/stores/{store_hash}/v2/blog/posts?url={value}
				Element:tr
				Element:td
					tag
				Element:td
					string
				Element:td
					/stores/{store_hash}/v2/blog/posts?tag={value}
				Element:tr
				Element:td
					published_date
				Element:td
					string
				Element:td
					/stores/{store_hash}/v2/blog/posts?published_date={value}
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Pagination
			Node:
			(type) c
			(layer)1
				Element:p
					Parameters can be added to the URL query string to paginate the collection. The maximum limit is 250. If a limit isn’t provided, up to 50 blog_posts are returned by default.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Type
				Element:th
					Example
				Element:tbody
				Element:tr
				Element:td
					Page
				Element:td
					int
				Element:td
					/stores/{store_hash}/v2/blog/posts?page={number}
				Element:tr
				Element:td
					Limit
				Element:td
					int
				Element:td
					/stores/{store_hash}/v2/blog/posts?limit={count}
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					2
				Element:span
					,
				Element:span
				Element:span
					"title"
				Element:span
					:
				Element:span
				Element:span
					"Ten Great New Products"
				Element:span
					,
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
				Element:span
					"/blog/ten-great-new-products/"
				Element:span
					,
				Element:span
				Element:span
					"preview_url"
				Element:span
					:
				Element:span
				Element:span
					"/blog/ten-great-new-products/?preview=53829a3bb47f4"
				Element:span
					,
				Element:span
				Element:span
					"body"
				Element:span
					:
				Element:span
				Element:span
					"<p>Here's ten new products that make great gifts...</p>"
				Element:span
					,
				Element:span
				Element:span
					"tags"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					"New"
				Element:span
					,
				Element:span
				Element:span
					"Products"
				Element:span
				Element:span
					],
				Element:span
				Element:span
					"summary"
				Element:span
					:
				Element:span
				Element:span
					"Here's ten new products that make great gifts..."
				Element:span
					,
				Element:span
				Element:span
					"is_published"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"published_date"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"date"
				Element:span
					:
				Element:span
				Element:span
					"2013-05-09 08:35:45.000000"
				Element:span
					,
				Element:span
				Element:span
					"timezone_type"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"timezone"
				Element:span
					:
				Element:span
				Element:span
					"+00:00"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"published_date_iso8601"
				Element:span
					:
				Element:span
				Element:span
					"2013-05-09T14:35:45+0000"
				Element:span
					,
				Element:span
				Element:span
					"meta_description"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"meta_keywords"
				Element:span
					:
				Element:span
				Element:span
					"New,Products"
				Element:span
					,
				Element:span
				Element:span
					"author"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"thumbnail_path"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"title"
				Element:span
					:
				Element:span
				Element:span
					"Your first blog post!"
				Element:span
					,
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
				Element:span
					"/your-first-blog-post/"
				Element:span
					,
				Element:span
				Element:span
					"preview_url"
				Element:span
					:
				Element:span
				Element:span
					"/your-first-blog-post/"
				Element:span
					,
				Element:span
				Element:span
					"body"
				Element:span
					:
				Element:span
				Element:span
					"<p> <strong>Welcome to your blog!</strong><br> A blog is a great place to share details on your products, business, and whatever else you think your shoppers might like to hear from you. You can include photos in your blog posts, and even videos. For ideas and inspiration on how to structure your blog, take a look at the BigCommerce <a href='http://blog.bigcommerce.com/' target='_blank'>ecommerce blog</a>.</p><p><strong>How can I delete this post?</strong><br>To delete this post and add your own, log in to your <a href='/admin' target='_blank'>admin area</a>, click the Content tab at the top of the screen, and choose Blog.</p><p><strong>Powered by BigCommerce</strong><br>Your website, online store, and blog are powered by BigCommerce <a href='http://www.bigcommerce.com/' target='_blank'>ecommerce software</a>. It includes everything you need to run a beautiful online store, including <a href='http://www.bigcommerce.com/templates/' target='_blank'>ecommerce website templates</a>, <a href='http://www.bigcommerce.com/features/hosting/' target='_blank'>ecommerce hosting</a>, an <a href='http://www.bigcommerce.com/features/setup/' target='_blank'>online shopping cart</a>, and more.</p>"
				Element:span
					,
				Element:span
				Element:span
					"tags"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					"Blog"
				Element:span
					,
				Element:span
				Element:span
					"SEO"
				Element:span
				Element:span
					],
				Element:span
				Element:span
					"summary"
				Element:span
					:
				Element:span
				Element:span
					" Welcome to your blog! A blog is a great place to share details on your products, business, and whatever else you think your shoppers might like to hear from you. You can include photos in your blog posts, and even videos. For ideas and inspiration on how to structure your blog, take a look [...]"
				Element:span
					,
				Element:span
				Element:span
					"is_published"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"published_date"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"date"
				Element:span
					:
				Element:span
				Element:span
					"2013-05-09 08:35:45.000000"
				Element:span
					,
				Element:span
				Element:span
					"timezone_type"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"timezone"
				Element:span
					:
				Element:span
				Element:span
					"+00:00"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"published_date_iso8601"
				Element:span
					:
				Element:span
				Element:span
					"2013-05-09T14:35:45+0000"
				Element:span
					,
				Element:span
				Element:span
					"meta_description"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"meta_keywords"
				Element:span
					:
				Element:span
				Element:span
					"Blog,SEO"
				Element:span
					,
				Element:span
				Element:span
					"author"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"thumbnail_path"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
				Element:span
					}
				Element:span
				Element:span
					]
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Get a Blog Post
			Node:
			(type) c
			(layer)1
				Element:p
					Gets a blog post.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth
				Element:code
					GET /stores/{store_hash}/v2/blog/posts/{id}
				Element:li
					Basic Auth
				Element:code
					GET /api/v2/blog/posts/{id}
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"title"
				Element:span
					:
				Element:span
				Element:span
					"Your first blog post!"
				Element:span
					,
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
				Element:span
					"/your-first-blog-post/"
				Element:span
					,
				Element:span
				Element:span
					"preview_url"
				Element:span
					:
				Element:span
				Element:span
					"/your-first-blog-post/"
				Element:span
					,
				Element:span
				Element:span
					"body"
				Element:span
					:
				Element:span
				Element:span
					"<p> <strong>Welcome to your blog!</strong><br> A blog is a great place to share details on your products, business, and whatever else you think your shoppers might like to hear from you. You can include photos in your blog posts, and even videos. For ideas and inspiration on how to structure your blog, take a look at the BigCommerce <a href='http://blog.bigcommerce.com/' target='_blank'>ecommerce blog</a>.</p><p><strong>How can I delete this post?</strong><br>To delete this post and add your own, log in to your <a href='/admin' target='_blank'>admin area</a>, click the Content tab at the top of the screen, and choose Blog.</p><p><strong>Powered by BigCommerce</strong><br>Your website, online store, and blog are powered by BigCommerce <a href='http://www.bigcommerce.com/' target='_blank'>ecommerce software</a>. It includes everything you need to run a beautiful online store, including <a href='http://www.bigcommerce.com/templates/' target='_blank'>ecommerce website templates</a>, <a href='http://www.bigcommerce.com/features/hosting/' target='_blank'>ecommerce hosting</a>, an <a href='http://www.bigcommerce.com/features/setup/' target='_blank'>online shopping cart</a>, and more.</p>"
				Element:span
					,
				Element:span
				Element:span
					"tags"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					"Blog"
				Element:span
					,
				Element:span
				Element:span
					"SEO"
				Element:span
				Element:span
					],
				Element:span
				Element:span
					"summary"
				Element:span
					:
				Element:span
				Element:span
					" Welcome to your blog! A blog is a great place to share details on your products, business, and whatever else you think your shoppers might like to hear from you. You can include photos in your blog posts, and even videos. For ideas and inspiration on how to structure your blog, take a look [...]"
				Element:span
					,
				Element:span
				Element:span
					"is_published"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"published_date"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"date"
				Element:span
					:
				Element:span
				Element:span
					"2013-05-09 08:35:45.000000"
				Element:span
					,
				Element:span
				Element:span
					"timezone_type"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"timezone"
				Element:span
					:
				Element:span
				Element:span
					"+00:00"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"published_date_iso8601"
				Element:span
					:
				Element:span
				Element:span
					"2013-05-09T14:35:45+0000"
				Element:span
					,
				Element:span
				Element:span
					"meta_description"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"meta_keywords"
				Element:span
					:
				Element:span
				Element:span
					"Blog,SEO"
				Element:span
					,
				Element:span
				Element:span
					"author"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"thumbnail_path"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Get a Count of Blog Posts
			Node:
			(type) c
			(layer)1
				Element:p
					Gets a count of blog posts.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth
				Element:code
					GET /stores/{store_hash}/v2/blog/posts/count
				Element:li
					Basic Auth
				Element:code
					GET /api/v2/blog/posts/count
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"count"
				Element:span
					:
				Element:span
				Element:span
					6
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Create a Blog Post
			Node:
			(type) c
			(layer)1
				Element:p
					Creates a new blog post.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth
				Element:code
					POST /stores/{store_hash}/v2/blog/posts
				Element:li
					Basic Auth
				Element:code
					POST /api/v2/blog/posts
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Read-only Properties
			Node:
			(type) c
			(layer)1
				Element:p
					The following properties of the blog post are read-only. If one or more of these properties are included in the request, it will be rejected.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					id
				Element:li
					preview_url
				Element:li
					summary
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Requirements
			Node:
			(type) c
			(layer)1
				Element:p
					The following properties of the blog post are required. The request won’t be fulfilled unless these properties are valid.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					title
				Element:li
					body
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Notes
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:p
					When including
				Element:code
					published_date
					in a request, supply it as a flat date string (not an object) in valid
				Element:a
					RFC 2822
					or
				Element:a
					ISO 8601
					format. The example request below includes a
				Element:code
					published_date
					in RFC 2822 format.
				Element:li
				Element:p
					Blog posts default to draft status. To publish blog posts to the storefront, set their
				Element:code
					is_published
					property to
				Element:code
					true
					.
				Element:li
				Element:p
					If a custom URL is not provided, the post’s URL will be generated based on the value of
				Element:code
					title
					.
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Request
			Node:
			(type) c
			(layer)1
				Element:p
					Example request object:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"title"
				Element:span
					:
				Element:span
				Element:span
					"A Sample Blog Post"
				Element:span
					,
				Element:span
				Element:span
					"body"
				Element:span
					:
				Element:span
				Element:span
					"<p>This is a blog post.</p>"
				Element:span
					,
				Element:span
				Element:span
					"author"
				Element:span
					:
				Element:span
				Element:span
					"Author Name"
				Element:span
					,
				Element:span
				Element:span
					"thumbnail_path"
				Element:span
					:
				Element:span
				Element:span
					"http://cdn.example.com/sample-post.jpg"
				Element:span
					,
				Element:span
				Element:span
					"published_date"
				Element:span
					:
				Element:span
				Element:span
					"Mon, 09 May 2015 16:20:04 +0400"
				Element:span
					,
				Element:span
				Element:span
					"is_published"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"tags"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					"Blog"
				Element:span
					,
				Element:span
				Element:span
					"Example"
				Element:span
				Element:span
					]
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Update a Blog Post
			Node:
			(type) c
			(layer)1
				Element:p
					Updates an existing blog post.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth
				Element:code
					PUT /stores/{store_hash}/v2/blog/posts/{id}
				Element:li
					Basic Auth
				Element:code
					PUT /api/v2/blog/posts/{id}
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Read-only Properties
			Node:
			(type) c
			(layer)1
				Element:p
					The following properties of the blog post are read-only. If one or more of these properties are included in the request, it will be rejected.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					id
				Element:li
					preview_url
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Notes
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					When including
				Element:code
					published_date
					in a request, supply it as a flat date string (not an object) in valid
				Element:a
					RFC 2822
					or
				Element:a
					ISO 8601
					format. The example request below includes a
				Element:code
					published_date
					in RFC 2822 format.
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Request
			Node:
			(type) c
			(layer)1
				Element:p
					Example request object:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"title"
				Element:span
					:
				Element:span
				Element:span
					"New: A Sample Blog Post"
				Element:span
					,
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
				Element:span
					"/blog/sample-post"
				Element:span
					,
				Element:span
				Element:span
					"published_date"
				Element:span
					:
				Element:span
				Element:span
					"Wed, 01 Jan 2017 15:33:33 +0400"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Delete a Blog Post
			Node:
			(type) c
			(layer)1
				Element:p
					Deletes a blog post.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth
				Element:code
					DELETE /stores/{store_hash}/v2/blog/posts/{id}
				Element:li
					Basic Auth
				Element:code
					DELETE /api/v2/blog/posts/{id}
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Delete Multiple Blog Posts
			Node:
			(type) c
			(layer)1
				Element:p
					Deletes multiple blog posts in the collection.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth
				Element:code
					DELETE /stores/{store_hash}/v2/blog/posts
				Element:li
					Basic Auth
				Element:code
					DELETE /api/v2/blog/posts
			Node:
			(type) c
			(layer)1
				Element:h4
					Pagination
			Node:
			(type) c
			(layer)1
				Element:p
					Parameters can be added to the URL query string to paginate the collection. The maximum limit is 250. If a limit isn’t provided, up to 50 blog posts are returned by default.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Type
				Element:th
					Example
				Element:tbody
				Element:tr
				Element:td
					Page
				Element:td
					int
				Element:td
					/api/v2/blog/posts?page={number}
				Element:tr
				Element:td
					Limit
				Element:td
					int
				Element:td
					/api/v2/blog/posts?limit={count}
			Node:
			(type) c
			(layer)1
				Element:h2
				Element:span
					Blog Tags
			Node:
			(type) c
			(layer)1
				Element:p
					Index of tags used on the store’s blog.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
				Element:th
				Element:tbody
				Element:tr
				Element:td
				Element:strong
					Manages
				Element:td
				Element:tr
				Element:td
				Element:strong
					OAuth Scopes
				Element:td
					store_v2_content
				Element:tr
				Element:td
				Element:td
					store_v2_content_read_only
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					List Tags
			Node:
			(type) c
			(layer)1
				Element:p
					List of tags with associated blog posts.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					GET /stores/{store_hash}/blog/tags
				Element:li
					Basic Auth >
				Element:code
					GET /api/blog/tags
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"tag"
				Element:span
					:
				Element:span
				Element:span
					"Blog"
				Element:span
					,
				Element:span
				Element:span
					"post_ids"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					1
				Element:span
				Element:span
					]
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"tag"
				Element:span
					:
				Element:span
				Element:span
					"New"
				Element:span
					,
				Element:span
				Element:span
					"post_ids"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					2
				Element:span
				Element:span
					]
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"tag"
				Element:span
					:
				Element:span
				Element:span
					"Products"
				Element:span
					,
				Element:span
				Element:span
					"post_ids"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					2
				Element:span
				Element:span
					]
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"tag"
				Element:span
					:
				Element:span
				Element:span
					"Seo"
				Element:span
					,
				Element:span
				Element:span
					"post_ids"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					1
				Element:span
				Element:span
					]
				Element:span
				Element:span
					}
				Element:span
				Element:span
					]
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h2
				Element:span
					Pages
			Node:
			(type) c
			(layer)1
				Element:p
					A static Web page on the storefront.
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Page Object – Properties
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Name
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
					int
				Element:td
					Unique ID of this Web page.
				Element:tr
				Element:td
					parent_id
				Element:td
					int
				Element:td
					ID of any parent Web page.
				Element:tr
				Element:td
					type
				Element:td
					enum
				Element:td
					Enum identifying this page’s type, with the following possible values:
				Element:br
				Element:code
					page
					: free-text page;
				Element:br
				Element:code
					link
					: link to another Web address;
				Element:br
				Element:code
					rss_feed
					: syndicated content from an RSS feed;
				Element:br
				Element:code
					contact_form
					: a contact form;
				Element:br
				Element:code
					raw
					: a page that allows for raw HTML to be entered into the body. (Note: No template is used when rendering the page.)
				Element:tr
				Element:td
					contact_fields
				Element:td
					object
				Element:td
					Where the page’s type is a contact form: object whose members are the fields enabled (in the control panel) for storefront display. Possible members are:
				Element:br
				Element:code
					fullname
					: full name of the customer submitting the form;
				Element:br
				Element:code
					phone
					: customer’s phone number, as submitted on the form;
				Element:br
				Element:code
					companyname
					: customer’s submitted company name;
				Element:br
				Element:code
					orderno
					: customer’s submitted order number;
				Element:br
				Element:code
					rma
					: customer’s submitted RMA (Return Merchandise Authorization) number.
				Element:tr
				Element:td
					email
				Element:td
					string
				Element:td
					Where the page’s type is a contact form: email address that receives messages sent via the form.
				Element:tr
				Element:td
					name
				Element:td
					string
				Element:td
					Page name, as displayed on the storefront.
				Element:tr
				Element:td
					url
				Element:td
					string
				Element:td
					Relative URL on the storefront for this page.
				Element:tr
				Element:td
					meta_description
				Element:td
					text
				Element:td
					Description contained within this page’s
				Element:code
					<meta>
					element.
				Element:tr
				Element:td
					body
				Element:td
					text
				Element:td
					HTML or variable that populates this page’s
				Element:code
					<body>
					element, in default/desktop view.
				Element:tr
				Element:td
					mobile_body
				Element:td
					text
				Element:td
					HTML or variable that populates this page’s
				Element:code
					<body>
					element, in mobile view.
				Element:tr
				Element:td
					has_mobile_version
				Element:td
					boolean
				Element:td
					If
				Element:code
					true
					, this page has a mobile version.
				Element:tr
				Element:td
					is_visible
				Element:td
					boolean
				Element:td
					If
				Element:code
					true
					, this page appears in the storefront’s navigation menu.
				Element:tr
				Element:td
					is_homepage
				Element:td
					boolean
				Element:td
					If
				Element:code
					true
					, this page is the storefront’s home page.
				Element:tr
				Element:td
					meta_title
				Element:td
					string
				Element:td
					Text specified for this page’s
				Element:code
					<title>
					element. (If empty, the value of the
				Element:code
					name
					property is used.)
				Element:tr
				Element:td
					layout_file
				Element:td
					string
				Element:td
					Layout template for this page.
				Element:tr
				Element:td
					sort_order
				Element:td
					int
				Element:td
					Order in which this page should display on the storefront. (Lower integers specify earlier display.)
				Element:tr
				Element:td
					meta_title
				Element:td
					string
				Element:td
					Text contained within this page’s
				Element:code
					<title>
					element.
				Element:tr
				Element:td
					search_keywords
				Element:td
					string
				Element:td
					Comma-separated list of keywords that shoppers can use to locate this page when searching the store.
				Element:tr
				Element:td
					meta_keywords
				Element:td
					string
				Element:td
					Comma-separated list of SEO-relevant keywords to include in the page’s
				Element:code
					<meta>
					element.
				Element:tr
				Element:td
					link
				Element:td
					string
				Element:td
					Where the page’s type is a link: this is the target link.
				Element:tr
				Element:td
					feed
				Element:td
					string
				Element:td
					Where the page’s type is an RSS feed: the feed to syndicate.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
				Element:th
				Element:tbody
				Element:tr
				Element:td
				Element:strong
					Manages
				Element:td
				Element:tr
				Element:td
				Element:strong
					OAuth Scopes
				Element:td
					store_v2_content
				Element:tr
				Element:td
				Element:td
					store_v2_content_read_only
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					List Pages
			Node:
			(type) c
			(layer)1
				Element:p
					Gets the collection of pages. (Default sorting is by auto-generated ID. This usually generates an order of oldest-to-newest)
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth
				Element:code
					GET /stores/{store_hash}/v2/pages/
				Element:li
					Basic Auth
				Element:code
					GET /api/v2/pages
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Pagination
			Node:
			(type) c
			(layer)1
				Element:p
					Parameters can be added to the URL query string to paginate the collection. If a limit isn’t provided, up to 50 pages are returned by default.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Type
				Element:th
					Example
				Element:tbody
				Element:tr
				Element:td
					Page
				Element:td
					int
				Element:td
					/stores/{store_hash}/v2/pages?page={number}
				Element:tr
				Element:td
					Limit
				Element:td
					int
				Element:td
					/stores/{store_hash}/v2/pages?limit={count}
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"RSS Syndication"
				Element:span
					,
				Element:span
				Element:span
					"meta_title"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"body"
				Element:span
					:
				Element:span
				Element:span
					"%%Syndicate%%"
				Element:span
					,
				Element:span
				Element:span
					"is_visible"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"parent_id"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"sort_order"
				Element:span
					:
				Element:span
				Element:span
					3
				Element:span
					,
				Element:span
				Element:span
					"meta_keywords"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"page"
				Element:span
					,
				Element:span
				Element:span
					"meta_description"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"is_homepage"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"layout_file"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"is_customers_only"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"search_keywords"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"has_mobile_version"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"mobile_body"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
				Element:span
					"/mens/"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					2
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Shipping & Returns"
				Element:span
					,
				Element:span
				Element:span
					"meta_title"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"body"
				Element:span
					:
				Element:span
				Element:span
					"To edit this page, simply log in to the control panel, click the <strong style=\"font-weight: 400\">Website Content</strong> tab, and choose the <strong style=\"font-weight: 400\"> View Web Pages</strong> option. Click <strong style=\"font-weight: 400\">Edit</strong> next to the <strong style=\"font-weight: 400\">Shipping & Returns</strong> page, and you can change this text. A sample returns policy is shown below, which you can edit as needed. <br/><br/> <em style=\"font-style: normal\"><strong>Returns Policy</strong></em><strong style=\"font-weight: 400\"></em></em><em style=\"font-style: normal\"><br/><br/></em>You may return most new, unopened items within 30 days of delivery for a full refund. We'll also pay the return shipping costs if the return is a result of our error (you received an incorrect or defective item, etc.).<br/><br/>You should expect to receive your refund within four weeks of giving your package to the return shipper, however, in many cases you will receive a refund more quickly. This time period includes the transit time for us to receive your return from the shipper (5 to 10 business days), the time it takes us to process your return once we receive it (3 to 5 business days), and the time it takes your bank to process our refund request (5 to 10 business days).<br/><br/>If you need to return an item, please <a href=\"/contact-us/\">Contact Us</a> with your order number and details about the product you would like to return. We will respond quickly with instructions for how to return items from your order.<br/><br/></strong><strong>Shipping</em></em></em></strong><strong style=\"font-weight: 400\"><em style=\"font-style: normal\"><br/><br/></em>We can ship to virtually any address in the world. Note that there are restrictions on some products, and some products cannot be shipped to international destinations.<br/><br/>When you place an order, we will estimate shipping and delivery dates for you based on the availability of your items and the shipping options you choose. Depending on the shipping provider you choose, shipping date estimates may appear on the shipping quotes page.<br/><br/>Please also note that the shipping rates for many items we sell are weight-based. The weight of any such item can be found on its detail page. To reflect the policies of the shipping companies we use, all weights will be rounded up to the next full pound.</strong><br/>"
				Element:span
					,
				Element:span
				Element:span
					"is_visible"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"parent_id"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"sort_order"
				Element:span
					:
				Element:span
				Element:span
					2
				Element:span
					,
				Element:span
				Element:span
					"meta_keywords"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"page"
				Element:span
					,
				Element:span
				Element:span
					"meta_description"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"is_homepage"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"layout_file"
				Element:span
					:
				Element:span
				Element:span
					"page.html"
				Element:span
					,
				Element:span
				Element:span
					"is_customers_only"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"search_keywords"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"has_mobile_version"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"mobile_body"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
				Element:span
					"/shoes/"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					3
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Blog"
				Element:span
					,
				Element:span
				Element:span
					"is_visible"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"parent_id"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"sort_order"
				Element:span
					:
				Element:span
				Element:span
					2
				Element:span
					,
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"blog_index"
				Element:span
					,
				Element:span
				Element:span
					"is_homepage"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"is_customers_only"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					4
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Contact Us"
				Element:span
					,
				Element:span
				Element:span
					"meta_title"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"email"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"body"
				Element:span
					:
				Element:span
				Element:span
					"We're happy to answer questions or help you with returns.<br/>Please fill out the form below if you need assistance."
				Element:span
					,
				Element:span
				Element:span
					"is_visible"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"parent_id"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"sort_order"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"meta_keywords"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"contact_form"
				Element:span
					,
				Element:span
				Element:span
					"contact_fields"
				Element:span
					:
				Element:span
				Element:span
					"fullname,phone,orderno"
				Element:span
					,
				Element:span
				Element:span
					"meta_description"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"is_homepage"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"layout_file"
				Element:span
					:
				Element:span
				Element:span
					"page.html"
				Element:span
					,
				Element:span
				Element:span
					"is_customers_only"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"search_keywords"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"has_mobile_version"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"mobile_body"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
				Element:span
					"/contact-us/"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					5
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Raw Test Page"
				Element:span
					,
				Element:span
				Element:span
					"body"
				Element:span
					:
				Element:span
				Element:span
					"<html><head><title>Raw Page</title></head><body>This page type can store raw HTML</body></html>"
				Element:span
					,
				Element:span
				Element:span
					"is_visible"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"parent_id"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"sort_order"
				Element:span
					:
				Element:span
				Element:span
					3
				Element:span
					,
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"raw"
				Element:span
					,
				Element:span
				Element:span
					"is_homepage"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"is_customers_only"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"search_keywords"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"has_mobile_version"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"mobile_body"
				Element:span
					:
				Element:span
				Element:span
					"<html><head><title>Page</title></head><body>Mobile Content can be raw as well</body></html>"
				Element:span
					,
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
				Element:span
					"/Raw-Body-Test-Page/"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					]
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Get a Page
			Node:
			(type) c
			(layer)1
				Element:p
					Gets a page.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth
				Element:code
					GET /stores/{store_hash}/v2/pages/{id}
				Element:li
					Basic Auth
				Element:code
					GET /api/v2/pages/{id}
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					3
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Blog"
				Element:span
					,
				Element:span
				Element:span
					"is_visible"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"parent_id"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"sort_order"
				Element:span
					:
				Element:span
				Element:span
					2
				Element:span
					,
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"blog_index"
				Element:span
					,
				Element:span
				Element:span
					"is_homepage"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"is_customers_only"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Create a Page
			Node:
			(type) c
			(layer)1
				Element:p
					Creates a new page.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth
				Element:code
					POST /stores/{store_hash}/v2/pages
				Element:li
					Basic Auth
				Element:code
					POST /api/v2/pages
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Read-only Properties
			Node:
			(type) c
			(layer)1
				Element:p
					The following property of the page is read-only. If it is included in the request, the request will be rejected:
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					id
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Requirements
			Node:
			(type) c
			(layer)1
				Element:p
					The following properties of the page are required. The request won’t be fulfilled unless these properties are valid:
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					type
				Element:li
					name
				Element:li
					link (for a page of
				Element:code
					type: link
					)
				Element:li
					feed (for a page of
				Element:code
					type: rss_feed
					)
				Element:li
					body (for a page of
				Element:code
					type: raw
					)
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Request
			Node:
			(type) c
			(layer)1
				Element:p
					Example request object:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"raw"
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"404 Page for Cats"
				Element:span
					,
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
				Element:span
					"/404-meow/"
				Element:span
					,
				Element:span
				Element:span
					"body"
				Element:span
					:
				Element:span
				Element:span
					"<html><head><title>Hairball! Not Found</title></head><body>Sorry! You can not haz cheeseburger.</body></html>"
				Element:span
					,
				Element:span
				Element:span
					"mobile_body"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"has_mobile_version"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"is_visible"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"is_homepage"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"is_customers_only"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"sort_order"
				Element:span
					:
				Element:span
				Element:span
					12
				Element:span
					,
				Element:span
				Element:span
					"search_keywords"
				Element:span
					:
				Element:span
				Element:span
					"dead, missing, broken"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					12
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"404 Page for Cats"
				Element:span
					,
				Element:span
				Element:span
					"body"
				Element:span
					:
				Element:span
				Element:span
					"<html><head><title>Hairball! Not Found</title></head><body>Sorry! You can not haz cheeseburger.</body></html>"
				Element:span
					,
				Element:span
				Element:span
					"is_visible"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"parent_id"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"sort_order"
				Element:span
					:
				Element:span
				Element:span
					12
				Element:span
					,
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"raw"
				Element:span
					,
				Element:span
				Element:span
					"is_homepage"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"is_customers_only"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"search_keywords"
				Element:span
					:
				Element:span
				Element:span
					"dead, missing, broken"
				Element:span
					,
				Element:span
				Element:span
					"has_mobile_version"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"mobile_body"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
				Element:span
					"/404-meow/"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Delete a Page
			Node:
			(type) c
			(layer)1
				Element:p
					Deletes a page.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth
				Element:code
					DELETE /stores/{store_hash}/v2/pages/{id}
				Element:li
					Basic Auth
				Element:code
					DELETE /api/v2/pages/{id}
			Node:
			(type) c
			(layer)1
				Element:h2
				Element:span
					Redirects
			Node:
			(type) c
			(layer)1
				Element:p
					A 301 redirect, mapping from a given URL path to another URL. Redirects are used to create custom URL paths that map to resources on the storefront (such as products, categories, brands, etc.), or to manually defined static URLs.
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Redirect Object – Properties
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Name
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
					int
				Element:td
				Element:tr
				Element:td
					path
				Element:td
					string
				Element:td
					The path that will be redirected from
				Element:tr
				Element:td
					forward
				Element:td
					forward
				Element:td
					The destination of the redirect
				Element:tr
				Element:td
					url
				Element:td
					string
				Element:td
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
				Element:th
				Element:tbody
				Element:tr
				Element:td
				Element:strong
					Manages
				Element:td
				Element:tr
				Element:td
				Element:strong
					OAuth Scopes
				Element:td
					store_v2_content
				Element:tr
				Element:td
				Element:td
					store_v2_content_read_only
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					List Redirects
			Node:
			(type) c
			(layer)1
				Element:p
					Gets the collection of URL redirects.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					GET /stores/{store_hash}/v2/redirects
				Element:li
					Basic Auth >
				Element:code
					GET /api/v2/redirects
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Pagination
			Node:
			(type) c
			(layer)1
				Element:p
					Parameters can be added to the URL query string to paginate the collection. The maximum limit is 250. If a limit isn’t provided, up to 50 redirects are returned by default.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Type
				Element:th
					Example
				Element:tbody
				Element:tr
				Element:td
					page
				Element:td
					int
				Element:td
					/api/v2/redirects?page={number}
				Element:tr
				Element:td
					limit
				Element:td
					int
				Element:td
					/api/v2/redirects?limit={count}
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"path"
				Element:span
					:
				Element:span
				Element:span
					"/redirect_path1"
				Element:span
					,
				Element:span
				Element:span
					"forward"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"manual"
				Element:span
					,
				Element:span
				Element:span
					"ref"
				Element:span
					:
				Element:span
				Element:span
					"http://www.bigcommerce.com"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
				Element:span
					"http://www.bigcommerce.com"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					2
				Element:span
					,
				Element:span
				Element:span
					"path"
				Element:span
					:
				Element:span
				Element:span
					"/redirect_path2"
				Element:span
					,
				Element:span
				Element:span
					"forward"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"product"
				Element:span
					,
				Element:span
				Element:span
					"ref"
				Element:span
					:
				Element:span
				Element:span
					35
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
				Element:span
					"http://store.example.com/product-no-35"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					]
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Get a Redirect
			Node:
			(type) c
			(layer)1
				Element:p
					Gets a single URL redirect.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					GET /stores/{store_hash}/v2/redirects/{id}
				Element:li
					Basic Auth >
				Element:code
					GET /api/v2/redirects/{id}
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"path"
				Element:span
					:
				Element:span
				Element:span
					"/redirect_path1"
				Element:span
					,
				Element:span
				Element:span
					"forward"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"manual"
				Element:span
					,
				Element:span
				Element:span
					"ref"
				Element:span
					:
				Element:span
				Element:span
					"http://www.bigcommerce.com"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
				Element:span
					"http://www.bigcommerce.com"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Get a Count of Redirects
			Node:
			(type) c
			(layer)1
				Element:p
					Gets a count of redirects.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					GET /stores/{store_hash}/v2/redirects/count
				Element:li
					Basic Auth >
				Element:code
					GET /api/v2/redirects/count
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"count"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Create a Redirect
			Node:
			(type) c
			(layer)1
				Element:p
					Creates a new URL redirect.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					POST /stores/{store_hash}/v2/redirects
				Element:li
					Basic Auth >
				Element:code
					POST /api/v2/redirects
			Node:
			(type) c
			(layer)1
				Element:h4
					Read-only Properties
			Node:
			(type) c
			(layer)1
				Element:p
					The following properties of the redirect are read-only. If one or more of these properties are included in the request, it will be rejected.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					url
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Requirements
			Node:
			(type) c
			(layer)1
				Element:p
					The following properties of the redirect are required. The request won’t be fulfilled unless these properties are valid.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					path
				Element:li
					forward
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Request
			Node:
			(type) c
			(layer)1
				Element:p
					Example request object:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"path"
				Element:span
					:
				Element:span
				Element:span
					"/mens_clothing"
				Element:span
					,
				Element:span
				Element:span
					"forward"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"category"
				Element:span
					,
				Element:span
				Element:span
					"ref"
				Element:span
					:
				Element:span
				Element:span
					3
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					3
				Element:span
					,
				Element:span
				Element:span
					"path"
				Element:span
					:
				Element:span
				Element:span
					"/mens_clothing"
				Element:span
					,
				Element:span
				Element:span
					"forward"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"category"
				Element:span
					,
				Element:span
				Element:span
					"ref"
				Element:span
					:
				Element:span
				Element:span
					3
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
				Element:span
					"http://store.example.com/mens"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Update a Redirect
			Node:
			(type) c
			(layer)1
				Element:p
					Updates an existing URL redirect.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					PUT /stores/{store_hash}/v2/redirects/{id}
				Element:li
					Basic Auth >
				Element:code
					PUT /api/v2/redirects/{id}
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Read-only Properties
			Node:
			(type) c
			(layer)1
				Element:p
					The following properties of the redirect are read-only. If one or more of these properties are included in the request, it will be rejected.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					url
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Requirements
			Node:
			(type) c
			(layer)1
				Element:p
					The following properties of the redirect are required. The request won’t be fulfilled unless these properties are valid.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					path
				Element:li
					forward
			Node:
			(type) c
			(layer)1
				Element:aside
				Element:span
					NOTES:
					The
				Element:code
					path
					,
				Element:code
					forward.type
					, and
				Element:code
					forward.ref
					fields of an existing redirect can be updated.
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Delete a Redirect
			Node:
			(type) c
			(layer)1
				Element:p
					Deletes a URL redirect.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					DELETE /stores/{store_hash}/v2/redirects/{id}
				Element:li
					Basic Auth >
				Element:code
					DELETE /api/v2/redirects/{id}
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Delete Multiple Redirects
			Node:
			(type) c
			(layer)1
				Element:p
					Deletes multiple URL redirects.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					DELETE /stores/{store_hash}/v2/redirects
				Element:li
					Basic Auth >
				Element:code
					DELETE /api/v2/redirects
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Pagination
			Node:
			(type) c
			(layer)1
				Element:p
					Parameters can be added to the URL query string to paginate the collection. The maximum limit is 250. If a limit isn’t provided, up to 50
				Element:code
					redirects
					are returned by default.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Type
				Element:th
					Example
				Element:tbody
				Element:tr
				Element:td
					page
				Element:td
					int
				Element:td
					/api/v2/redirects?page={number}
				Element:tr
				Element:td
					limit
				Element:td
					int
				Element:td
					/api/v2/redirects?limit={count}
			Node:
			(type) h1
			(layer)1
				Element:h1
				Element:span
					Currency Reference
			Node:
			(type) c
			(layer)1
				Element:p
					The Currency object and endpoints manage alternate currency display options on the storefront.
			Node:
			(type) c
			(layer)1
				Element:h2
				Element:span
					Currency Object – Properties
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Name
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
					int
				Element:td
					The ID of the currency. Read-only.
				Element:tr
				Element:td
					is_default
				Element:td
					boolean
				Element:td
					Specifies whether this is the store’s default currency display format. Read-only. (To change the store’s default currency via the BigCommerce control panel, please see
				Element:a
					this support article
					.)
				Element:tr
				Element:td
					date_created
				Element:td
					date
				Element:td
					Date on which this currency was created on the store.
				Element:tr
				Element:td
					date_modified
				Element:td
					date
				Element:td
					Date on which this currency was last modified on the store.
				Element:tr
				Element:td
					country_iso2
				Element:td
					string
				Element:td
					2-letter
				Element:a
					ISO Alpha-2
					code for this currency’s country.
				Element:tr
				Element:td
					currency_code
				Element:td
					string
				Element:td
					3-letter
				Element:a
					ISO 4217 code
					for this currency.
				Element:tr
				Element:td
					currency_exchange_rate
				Element:td
					float
				Element:td
					Amount of this currency that is equivalent to one U.S. dollar.
				Element:tr
				Element:td
					auto_update
				Element:td
					boolean
				Element:td
					Specifies whether to use the
				Element:a
					XE Currency Converter
					service to update the currency conversion. A value of
				Element:code
					false
					specifies a static conversion value.
				Element:tr
				Element:td
					location
				Element:td
					string
				Element:td
					Specifies whether this currency’s symbol appears to the “left” or “right” of the numeric amount.
				Element:tr
				Element:td
					token
				Element:td
					string
				Element:td
					Symbol for this currency.
				Element:tr
				Element:td
					decimal_token
				Element:td
					string
				Element:td
					Symbol used as the decimal separator in this currency.
				Element:tr
				Element:td
					thousands_token
				Element:td
					string
				Element:td
					Symbol used as the thousands separator in this currency.
				Element:tr
				Element:td
					decimal_places
				Element:td
					int
				Element:td
					Number of decimal places to show for this currency.
			Node:
			(type) c
			(layer)1
				Element:h2
				Element:span
					List Currencies
			Node:
			(type) c
			(layer)1
				Element:p
					Retrieves currency display options.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth
				Element:code
					GET /stores/{store_hash}/v2/currencies
				Element:br
				Element:li
					Basic Auth
				Element:code
					GET /api/v2/currencies
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"currencies"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					3
				Element:span
					,
				Element:span
				Element:span
					"is_default"
				Element:span
					:
				Element:span
				Element:span
					"false"
				Element:span
					,
				Element:span
				Element:span
					"date_created"
				Element:span
					:
				Element:span
				Element:span
					"Thu, 11 Sep 2014 17:10:12 +0000"
				Element:span
					,
				Element:span
				Element:span
					"date_modified"
				Element:span
					:
				Element:span
				Element:span
					"Thu, 08 Jan 2015 15:12:48 +0000"
				Element:span
					,
				Element:span
				Element:span
					"country_iso2"
				Element:span
					:
				Element:span
				Element:span
					"AU"
				Element:span
					,
				Element:span
				Element:span
					"currency_code"
				Element:span
					:
				Element:span
				Element:span
					"AUD"
				Element:span
					,
				Element:span
				Element:span
					"currency_exchange_rate"
				Element:span
					:
				Element:span
				Element:span
					"1.3885600000"
				Element:span
					,
				Element:span
				Element:span
					"auto_update"
				Element:span
					:
				Element:span
				Element:span
					"false"
				Element:span
					,
				Element:span
				Element:span
					"location"
				Element:span
					:
				Element:span
				Element:span
					"left"
				Element:span
					,
				Element:span
				Element:span
					"token"
				Element:span
					:
				Element:span
				Element:span
					"$"
				Element:span
					,
				Element:span
				Element:span
					"decimal_token"
				Element:span
					:
				Element:span
				Element:span
					"."
				Element:span
					,
				Element:span
				Element:span
					"thousands_token"
				Element:span
					:
				Element:span
				Element:span
					","
				Element:span
					,
				Element:span
				Element:span
					"decimal_places"
				Element:span
					:
				Element:span
				Element:span
					2
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					4
				Element:span
					,
				Element:span
				Element:span
					"is_default"
				Element:span
					:
				Element:span
				Element:span
					"false"
				Element:span
					,
				Element:span
				Element:span
					"date_created"
				Element:span
					:
				Element:span
				Element:span
					"Thu, 11 Sep 2014 17:10:12 +0000"
				Element:span
					,
				Element:span
				Element:span
					"date_modified"
				Element:span
					:
				Element:span
				Element:span
					"Thu, 08 Jan 2015 15:12:48 +0000"
				Element:span
					,
				Element:span
				Element:span
					"country_iso2"
				Element:span
					:
				Element:span
				Element:span
					"US"
				Element:span
					,
				Element:span
				Element:span
					"currency_code"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
					,
				Element:span
				Element:span
					"currency_exchange_rate"
				Element:span
					:
				Element:span
				Element:span
					"1.0000000000"
				Element:span
					,
				Element:span
				Element:span
					"auto_update"
				Element:span
					:
				Element:span
				Element:span
					"false"
				Element:span
					,
				Element:span
				Element:span
					"location"
				Element:span
					:
				Element:span
				Element:span
					"left"
				Element:span
					,
				Element:span
				Element:span
					"token"
				Element:span
					:
				Element:span
				Element:span
					"$"
				Element:span
					,
				Element:span
				Element:span
					"decimal_token"
				Element:span
					:
				Element:span
				Element:span
					"."
				Element:span
					,
				Element:span
				Element:span
					"thousands_token"
				Element:span
					:
				Element:span
				Element:span
					","
				Element:span
					,
				Element:span
				Element:span
					"decimal_places"
				Element:span
					:
				Element:span
				Element:span
					2
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					5
				Element:span
					,
				Element:span
				Element:span
					"is_default"
				Element:span
					:
				Element:span
				Element:span
					"false"
				Element:span
					,
				Element:span
				Element:span
					"date_created"
				Element:span
					:
				Element:span
				Element:span
					"Thu, 11 Sep 2014 17:10:12 +0000"
				Element:span
					,
				Element:span
				Element:span
					"date_modified"
				Element:span
					:
				Element:span
				Element:span
					"Thu, 08 Jan 2015 15:12:48 +0000"
				Element:span
					,
				Element:span
				Element:span
					"country_iso2"
				Element:span
					:
				Element:span
				Element:span
					"CA"
				Element:span
					,
				Element:span
				Element:span
					"currency_code"
				Element:span
					:
				Element:span
				Element:span
					"CAD"
				Element:span
					,
				Element:span
				Element:span
					"currency_exchange_rate"
				Element:span
					:
				Element:span
				Element:span
					"0.7500000000"
				Element:span
					,
				Element:span
				Element:span
					"auto_update"
				Element:span
					:
				Element:span
				Element:span
					"false"
				Element:span
					,
				Element:span
				Element:span
					"location"
				Element:span
					:
				Element:span
				Element:span
					"left"
				Element:span
					,
				Element:span
				Element:span
					"token"
				Element:span
					:
				Element:span
				Element:span
					"$"
				Element:span
					,
				Element:span
				Element:span
					"decimal_token"
				Element:span
					:
				Element:span
				Element:span
					"."
				Element:span
					,
				Element:span
				Element:span
					"thousands_token"
				Element:span
					:
				Element:span
				Element:span
					","
				Element:span
					,
				Element:span
				Element:span
					"decimal_places"
				Element:span
					:
				Element:span
				Element:span
					2
				Element:span
				Element:span
					}
				Element:span
				Element:span
					]
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h2
				Element:span
					Get a Currency
			Node:
			(type) c
			(layer)1
				Element:p
					Retrieves a specified currency.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth
				Element:code
					GET /stores/{store_hash}/v2/currencies/{id}
				Element:li
					Basic Auth
				Element:code
					GET /api/v2/currencies/{id}
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					3
				Element:span
					,
				Element:span
				Element:span
					"is_default"
				Element:span
					:
				Element:span
				Element:span
					"false"
				Element:span
					,
				Element:span
				Element:span
					"date_created"
				Element:span
					:
				Element:span
				Element:span
					"Thu, 11 Sep 2014 17:10:12 +0000"
				Element:span
					,
				Element:span
				Element:span
					"date_modified"
				Element:span
					:
				Element:span
				Element:span
					"Thu, 08 Jan 2015 15:12:48 +0000"
				Element:span
					,
				Element:span
				Element:span
					"country_iso2"
				Element:span
					:
				Element:span
				Element:span
					"AU"
				Element:span
					,
				Element:span
				Element:span
					"currency_code"
				Element:span
					:
				Element:span
				Element:span
					"AUD"
				Element:span
					,
				Element:span
				Element:span
					"currency_exchange_rate"
				Element:span
					:
				Element:span
				Element:span
					"1.3885600000"
				Element:span
					,
				Element:span
				Element:span
					"auto_update"
				Element:span
					:
				Element:span
				Element:span
					"false"
				Element:span
					,
				Element:span
				Element:span
					"location"
				Element:span
					:
				Element:span
				Element:span
					"left"
				Element:span
					,
				Element:span
				Element:span
					"token"
				Element:span
					:
				Element:span
				Element:span
					"$"
				Element:span
					,
				Element:span
				Element:span
					"decimal_token"
				Element:span
					:
				Element:span
				Element:span
					"."
				Element:span
					,
				Element:span
				Element:span
					"thousands_token"
				Element:span
					:
				Element:span
				Element:span
					","
				Element:span
					,
				Element:span
				Element:span
					"decimal_places"
				Element:span
					:
				Element:span
				Element:span
					2
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h2
				Element:span
					Create a Currency
			Node:
			(type) c
			(layer)1
				Element:p
					Creates a new currency.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth
				Element:code
					POST /stores/{store_hash}/v2/currencies
				Element:li
					Basic Auth
				Element:code
					POST /api/v2/currencies
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Read-only Properties
			Node:
			(type) c
			(layer)1
				Element:p
					The following properties of the currency are read-only. If one or more of these properties are included in the request, it will be rejected:
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					id
				Element:li
					is_default
				Element:li
					date_created
				Element:li
					date_modified
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Notes
			Node:
			(type) c
			(layer)1
				Element:p
					The
				Element:code
					is_default
					property cannot be set programmatically. To change the store’s default currency via the BigCommerce control panel, please see
				Element:a
					this support article
					.
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Requirements
			Node:
			(type) c
			(layer)1
				Element:p
					The following properties of the currency are required. The request won’t be fulfilled unless these properties are valid.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					country_iso2
				Element:li
					currency_code
				Element:li
					currency_exchange_rate
				Element:li
					auto_update
				Element:li
					location
				Element:li
					token
				Element:li
					decimal_token
				Element:li
					thousands_token
				Element:li
					decimal_places
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Request
			Node:
			(type) c
			(layer)1
				Element:p
					Example request object:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"country_iso2"
				Element:span
					:
				Element:span
				Element:span
					"AU"
				Element:span
					,
				Element:span
				Element:span
					"currency_code"
				Element:span
					:
				Element:span
				Element:span
					"AUD"
				Element:span
					,
				Element:span
				Element:span
					"currency_exchange_rate"
				Element:span
					:
				Element:span
				Element:span
					"1.3885600000"
				Element:span
					,
				Element:span
				Element:span
					"auto_update"
				Element:span
					:
				Element:span
				Element:span
					"false"
				Element:span
					,
				Element:span
				Element:span
					"location"
				Element:span
					:
				Element:span
				Element:span
					"left"
				Element:span
					,
				Element:span
				Element:span
					"token"
				Element:span
					:
				Element:span
				Element:span
					"$"
				Element:span
					,
				Element:span
				Element:span
					"decimal_token"
				Element:span
					:
				Element:span
				Element:span
					"."
				Element:span
					,
				Element:span
				Element:span
					"thousands_token"
				Element:span
					:
				Element:span
				Element:span
					","
				Element:span
					,
				Element:span
				Element:span
					"decimal_places"
				Element:span
					:
				Element:span
				Element:span
					2
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h2
				Element:span
					Update a Currency
			Node:
			(type) c
			(layer)1
				Element:p
					Updates an existing currency.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth
				Element:code
					PUT /stores/{store_hash}/v2/currencies/{ID}
				Element:li
					Basic Auth
				Element:code
					PUT /api/v2/currencies/{ID}
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Read-only Properties
			Node:
			(type) c
			(layer)1
				Element:p
					The following properties of the currency are read-only. If one or more of these properties are included in the request, it will be rejected:
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					id
				Element:li
					is_default
				Element:li
					date_created
				Element:li
					date_modified
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Request
			Node:
			(type) c
			(layer)1
				Element:p
					Example request object:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"country_iso2"
				Element:span
					:
				Element:span
				Element:span
					"AU"
				Element:span
					,
				Element:span
				Element:span
					"currency_code"
				Element:span
					:
				Element:span
				Element:span
					"AUD"
				Element:span
					,
				Element:span
				Element:span
					"currency_exchange_rate"
				Element:span
					:
				Element:span
				Element:span
					"1.3885600000"
				Element:span
					,
				Element:span
				Element:span
					"auto_update"
				Element:span
					:
				Element:span
				Element:span
					"false"
				Element:span
					,
				Element:span
				Element:span
					"location"
				Element:span
					:
				Element:span
				Element:span
					"left"
				Element:span
					,
				Element:span
				Element:span
					"token"
				Element:span
					:
				Element:span
				Element:span
					"$"
				Element:span
					,
				Element:span
				Element:span
					"decimal_token"
				Element:span
					:
				Element:span
				Element:span
					"."
				Element:span
					,
				Element:span
				Element:span
					"thousands_token"
				Element:span
					:
				Element:span
				Element:span
					","
				Element:span
					,
				Element:span
				Element:span
					"decimal_places"
				Element:span
					:
				Element:span
				Element:span
					2
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h2
				Element:span
					Delete a Currency
			Node:
			(type) c
			(layer)1
				Element:p
					Deletes a specified currency. (If successful, this will typically return a “204 No Content”.)
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth
				Element:code
					DELETE /stores/{store_hash}/v2/currencies/{id}
				Element:li
					Basic Auth
				Element:code
					DELETE /api/v2/currencies/{id}
			Node:
			(type) c
			(layer)1
				Element:h2
				Element:span
					Delete All Currencies
			Node:
			(type) c
			(layer)1
				Element:p
					Deletes all currencies associated with the store. (If successful, this will typically return a “204 No Content”.)
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth
				Element:code
					DELETE /stores/{store_hash}/v2/currencies
				Element:li
					Basic Auth
				Element:code
					DELETE /api/v2/currencies
			Node:
			(type) h1
			(layer)1
				Element:h1
				Element:span
					Customers Reference
			Node:
			(type) c
			(layer)1
				Element:p
					Customers APIs manage identity and account details for customers shopping on BigCommerce stores. They include Customers, Customer Addresses, Customer Groups, and Customer Login.
			Node:
			(type) c
			(layer)1
				Element:h2
				Element:span
					Customers
			Node:
			(type) c
			(layer)1
				Element:p
					Identity and account details for customers shopping on Bigcommerce stores.
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Customer Object – Properties
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Name
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
					int
				Element:td
				Element:tr
				Element:td
					_authentication
				Element:td
					object
				Element:td
					Not returned in any responses, but accepts up to two fields allowing you to set the customer’s password. If not supplied, a password is generated automatically. See the customers resource documentation for more information about the use of this object.
				Element:tr
				Element:td
					company
				Element:td
					string
				Element:td
					The name of the company that the customer works for.
				Element:tr
				Element:td
					first_name
				Element:td
					string
				Element:td
					First name of the customer
				Element:tr
				Element:td
					last_name
				Element:td
					string
				Element:td
					Last name of the customer
				Element:tr
				Element:td
					email
				Element:td
					string
				Element:td
					Email address of the customer
				Element:tr
				Element:td
					phone
				Element:td
					string
				Element:td
					Phone number of the customer
				Element:tr
				Element:td
					date_created
				Element:td
					date
				Element:td
				Element:tr
				Element:td
					date_modified
				Element:td
					date
				Element:td
				Element:tr
				Element:td
					store_credit
				Element:td
					decimal
				Element:td
					The amount of credit the customer has
				Element:tr
				Element:td
					registration_ip_address
				Element:td
					string
				Element:td
					The IP address of the customer when they signed up
				Element:tr
				Element:td
					customer_group_id
				Element:td
					int
				Element:td
					The group the customer belongs to
				Element:tr
				Element:td
					notes
				Element:td
					text
				Element:td
					Store owner notes on the customer
				Element:tr
				Element:td
					tax_exempt_category
				Element:td
					string
				Element:td
					Used to identify customers that fall into special sales tax categories, in particular, those who are fully or partially exempt from paying sales tax. Stores that subscribe to Avalara Premium will use this code to determine how/whether to apply sales tax. Doesn’t affect the sales tax calculations of stores that don’t subscribe to Avalara Premium. Either blank or contains/accepts a single AvaTax code. Should not contain more than one code. The codes are case-sensitive. Refer to the following page for further information and the full list of codes: http://developer.avalara.com/api-docs/designing-your-integration/handling-tax-exempt-customers
				Element:tr
				Element:td
					accepts_marketing
				Element:td
					boolean
				Element:td
					Records whether the customer would like to receive marketing content from this store. Read‑only.
				Element:tr
				Element:td
					addresses
				Element:td
					resource
				Element:td
				Element:tr
				Element:td
					form_fields
				Element:td
					object
				Element:td
					Array of custom fields.
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Customer Events
			Node:
			(type) c
			(layer)1
				Element:p
					The following customer events are available:
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Customer Created
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					store/customer/created
			Node:
			(type) c
			(layer)1
				Element:p
					Occurs when a customer registers from the storefront or is created in the control panel.
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Customer Updated
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					store/customer/updated
			Node:
			(type) c
			(layer)1
				Element:p
					Occurs when a customer updates their details in the storefront or is updated in the control panel.
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Customer Deleted
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					store/customer/deleted
			Node:
			(type) c
			(layer)1
				Element:p
					Occurs when a customer is deleted in the control panel.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
				Element:th
				Element:tbody
				Element:tr
				Element:td
				Element:strong
					Manages
				Element:td
				Element:tr
				Element:td
				Element:strong
					OAuth Scopes
				Element:td
					store_v2_customers
				Element:tr
				Element:td
				Element:td
					store_v2_customers_read_only
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					List Customers
			Node:
			(type) c
			(layer)1
				Element:p
					Gets the collection of customers. (Default sorting is by customer id, from lowest to highest.)
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					GET /stores/{store_hash}/v2/customers
				Element:li
					Basic Auth >
				Element:code
					GET /api/v2/customers
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Filters
			Node:
			(type) c
			(layer)1
				Element:p
					Filter parameters can be added to the URL query string to select specific customers in the collection.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Type
				Element:th
					Example
				Element:tbody
				Element:tr
				Element:td
					first_name
				Element:td
					string
				Element:td
					/api/v2/customers?first_name={value}
				Element:tr
				Element:td
					last_name
				Element:td
					string
				Element:td
					/api/v2/customers?last_name={value}
				Element:tr
				Element:td
					company
				Element:td
					string
				Element:td
					/api/v2/customers?company={value}
				Element:tr
				Element:td
					email
				Element:td
					string
				Element:td
					/api/v2/customers?email={value}
				Element:tr
				Element:td
					phone
				Element:td
					string
				Element:td
					/api/v2/customers?phone={value}
				Element:tr
				Element:td
					store_credit
				Element:td
					string
				Element:td
					/api/v2/customers?store_credit={value}
				Element:tr
				Element:td
					customer_group_id
				Element:td
					string
				Element:td
					/api/v2/customers?customer_group_id={value}
				Element:tr
				Element:td
					min_id
				Element:td
					int
				Element:td
					/api/v2/customers?min_id={value}
				Element:tr
				Element:td
					max_id
				Element:td
					int
				Element:td
					/api/v2/customers?max_id={value}
				Element:tr
				Element:td
					min_date_created
				Element:td
					dateTime or date
				Element:td
					/api/v2/customers?min_date_created={value}
				Element:tr
				Element:td
					max_date_created
				Element:td
					dateTime or date
				Element:td
					/api/v2/customers?max_date_created={value}
				Element:tr
				Element:td
					min_date_modified
				Element:td
					dateTime or date
				Element:td
					/api/v2/customers?min_date_modified={value}
				Element:tr
				Element:td
					max_date_modified
				Element:td
					dateTime or date
				Element:td
					/api/v2/customers?max_date_modified={value}
				Element:tr
				Element:td
					tax_exempt_category
				Element:td
					date
				Element:td
					/api/v2/customers?tax_exempt_category={value}
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Pagination
			Node:
			(type) c
			(layer)1
				Element:p
					Parameters can be added to the URL query string to paginate the collection. The maximum limit is 250. If a limit isn’t provided, up to 50 customers are returned by default.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Type
				Element:th
					Example
				Element:tbody
				Element:tr
				Element:td
					Page
				Element:td
					int
				Element:td
					/api/v2/customers?page={number}
				Element:tr
				Element:td
					Limit
				Element:td
					int
				Element:td
					/api/v2/customers?limit={count}
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"company"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"first_name"
				Element:span
					:
				Element:span
				Element:span
					"Random "
				Element:span
					,
				Element:span
				Element:span
					"last_name"
				Element:span
					:
				Element:span
				Element:span
					"Joe Bob"
				Element:span
					,
				Element:span
				Element:span
					"email"
				Element:span
					:
				Element:span
				Element:span
					"random.joebob@example.com"
				Element:span
					,
				Element:span
				Element:span
					"phone"
				Element:span
					:
				Element:span
				Element:span
					"252-101-2010"
				Element:span
					,
				Element:span
				Element:span
					"date_created"
				Element:span
					:
				Element:span
				Element:span
					"Tue, 13 Nov 2012 21:16:41 +0000"
				Element:span
					,
				Element:span
				Element:span
					"date_modified"
				Element:span
					:
				Element:span
				Element:span
					"Tue, 13 Nov 2012 21:16:41 +0000"
				Element:span
					,
				Element:span
				Element:span
					"store_credit"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"registration_ip_address"
				Element:span
					:
				Element:span
				Element:span
					"50.58.18.2"
				Element:span
					,
				Element:span
				Element:span
					"customer_group_id"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"notes"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"tax_exempt_category"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"accepts_marketing"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"addresses"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
				Element:span
					"https://store-bwvr466.mybigcommerce.com/api/v2/customers/1/addresses.json"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"/customers/1/addresses"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					2
				Element:span
					,
				Element:span
				Element:span
					"company"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"first_name"
				Element:span
					:
				Element:span
				Element:span
					"Test"
				Element:span
					,
				Element:span
				Element:span
					"last_name"
				Element:span
					:
				Element:span
				Element:span
					"Customer"
				Element:span
					,
				Element:span
				Element:span
					"email"
				Element:span
					:
				Element:span
				Element:span
					"foo@randomcustomer.com"
				Element:span
					,
				Element:span
				Element:span
					"phone"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"date_created"
				Element:span
					:
				Element:span
				Element:span
					"Wed, 14 Nov 2012 04:47:28 +0000"
				Element:span
					,
				Element:span
				Element:span
					"date_modified"
				Element:span
					:
				Element:span
				Element:span
					"Wed, 14 Nov 2012 04:47:28 +0000"
				Element:span
					,
				Element:span
				Element:span
					"store_credit"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"registration_ip_address"
				Element:span
					:
				Element:span
				Element:span
					"99.191.105.74"
				Element:span
					,
				Element:span
				Element:span
					"customer_group_id"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"notes"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"tax_exempt_category"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"accepts_marketing"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"addresses"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
				Element:span
					"https://store-bwvr466.mybigcommerce.com/api/v2/customers/2/addresses.json"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"/customers/2/addresses"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
				Element:span
					]
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Get a Customer
			Node:
			(type) c
			(layer)1
				Element:p
					Gets a customer.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					GET /stores/{store_hash}/v2/customers/{id}
				Element:li
					Basic Auth >
				Element:code
					GET /api/v2/customers/{id}
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"company"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"first_name"
				Element:span
					:
				Element:span
				Element:span
					"Random "
				Element:span
					,
				Element:span
				Element:span
					"last_name"
				Element:span
					:
				Element:span
				Element:span
					"Joe Bob"
				Element:span
					,
				Element:span
				Element:span
					"email"
				Element:span
					:
				Element:span
				Element:span
					"random.joebob@example.com"
				Element:span
					,
				Element:span
				Element:span
					"phone"
				Element:span
					:
				Element:span
				Element:span
					"252-101-2010"
				Element:span
					,
				Element:span
				Element:span
					"date_created"
				Element:span
					:
				Element:span
				Element:span
					"Tue, 13 Nov 2012 21:16:41 +0000"
				Element:span
					,
				Element:span
				Element:span
					"date_modified"
				Element:span
					:
				Element:span
				Element:span
					"Tue, 13 Nov 2012 21:16:41 +0000"
				Element:span
					,
				Element:span
				Element:span
					"store_credit"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"registration_ip_address"
				Element:span
					:
				Element:span
				Element:span
					"50.58.18.2"
				Element:span
					,
				Element:span
				Element:span
					"customer_group_id"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"notes"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"tax_exempt_category"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"accepts_marketing"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"addresses"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
				Element:span
					"https://store-bwvr466.mybigcommerce.com/api/v2/customers/1/addresses.json"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"/customers/1/addresses"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Get a Count of Customers
			Node:
			(type) c
			(layer)1
				Element:p
					Gets a count of customers.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					GET /stores/{store_hash}/v2/customers/count
				Element:li
					Basic Auth >
				Element:code
					GET /api/v2/customers/count
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"count"
				Element:span
					:
				Element:span
				Element:span
					3
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Create a Customer
			Node:
			(type) c
			(layer)1
				Element:p
					Creates a new customer.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					POST /stores/{store_hash}/v2/customers
				Element:li
					Basic Auth >
				Element:code
					POST /api/v2/customers
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Read-only Properties
			Node:
			(type) c
			(layer)1
				Element:p
					The following properties of the customer are read-only. If one or more of these properties are included in the request, it will be rejected.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					id
				Element:li
					date_created
				Element:li
					date_modified
				Element:li
					accepts_marketing
				Element:li
					addresses
				Element:li
					form_fields
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Requirements
			Node:
			(type) c
			(layer)1
				Element:p
					The following properties of the customer are required. The request won’t be fulfilled unless these properties are valid.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					first_name
				Element:li
					last_name
				Element:li
					email
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Notes
			Node:
			(type) c
			(layer)1
				Element:p
					The
				Element:code
					_authentication
					object exposes functionality associated with the customer’s ability to log in to the store. All properties of the
				Element:code
					_authentication
					object are optional.
			Node:
			(type) c
			(layer)1
				Element:p
					When the
				Element:code
					_authentication
					object is not supplied with an update request, then the existing customer password remains the same.
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Updating Passwords
			Node:
			(type) c
			(layer)1
				Element:p
					To manually update a customer password in the same way as the control panel, supply a value for the password field:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"_authentication"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"password"
				Element:span
					:
				Element:span
				Element:span
					"12w69Y217PYR96J"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Confirming Passwords
			Node:
			(type) c
			(layer)1
				Element:p
					An additional optional
				Element:code
					password_confirmation
					field can also be sent, providing password confirmation as a service:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"_authentication"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"password"
				Element:span
					:
				Element:span
				Element:span
					"12w69Y217PYR96J"
				Element:span
					,
				Element:span
				Element:span
					"password_confirmation"
				Element:span
					:
				Element:span
				Element:span
					"12w69Y217PYR96J"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Forcing Password Resets
			Node:
			(type) c
			(layer)1
				Element:p
					To force a customer to reset their password upon their next login attempt, give the
				Element:code
					force_reset
					field a value of true, as shown here:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"_authentication"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"force_reset"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Update a Customer
			Node:
			(type) c
			(layer)1
				Element:p
					Updates an existing customer.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					PUT /stores/{store_hash}/v2/customers/{id}
				Element:li
					Basic Auth >
				Element:code
					PUT /api/v2/customers/{id}
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Read-only Properties
			Node:
			(type) c
			(layer)1
				Element:p
					The following properties of the customer are read-only. If one or more of these properties are included in the request, it will be rejected.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					id
				Element:li
					date_created
				Element:li
					date_modified
				Element:li
					accepts_marketing
				Element:li
					addresses
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Requirements
			Node:
			(type) c
			(layer)1
				Element:p
					The following properties of the customer are required. The request won’t be fulfilled unless these properties are valid.
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Notes
			Node:
			(type) c
			(layer)1
				Element:p
					The
				Element:code
					_authentication
					object exposes functionality associated with the customer’s ability to log in to the store. All properties of the
				Element:code
					_authentication
					object are optional.
			Node:
			(type) c
			(layer)1
				Element:p
					When the
				Element:code
					_authentication
					object is not supplied with an update request, then the existing customer password remains the same.
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Updating Passwords
			Node:
			(type) c
			(layer)1
				Element:p
					To manually update a customer password in the same way as the control panel, supply a value for the
				Element:code
					password
					field:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"_authentication"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"password"
				Element:span
					:
				Element:span
				Element:span
					"12w69Y217PYR96J"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Confirming Passwords
			Node:
			(type) c
			(layer)1
				Element:p
					An additional optional
				Element:code
					password_confirmation
					field can also be sent, providing password confirmation as a service:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"_authentication"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"password"
				Element:span
					:
				Element:span
				Element:span
					"12w69Y217PYR96J"
				Element:span
				Element:span
					"password_confirmation"
				Element:span
					:
				Element:span
				Element:span
					"12w69Y217PYR96J"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Forcing Password Resets
			Node:
			(type) c
			(layer)1
				Element:p
					To force a customer to reset their password upon their next login attempt, give the
				Element:code
					force_reset
					field a value of true, as shown here:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"_authentication"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"force_reset"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Delete a Customer
			Node:
			(type) c
			(layer)1
				Element:p
					Deletes a customer.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					DELETE /stores/{store_hash}/v2/customers/{id}
				Element:li
					Basic Auth >
				Element:code
					DELETE /api/v2/customers/{id}
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Delete All Customers
			Node:
			(type) c
			(layer)1
				Element:p
					Deletes all customer objects from the store.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					DELETE /stores/{store_hash}/v2/customers
				Element:li
					Basic Auth >
				Element:code
					DELETE /api/v2/customers
			Node:
			(type) c
			(layer)1
				Element:h2
				Element:span
					Customer Addresses
			Node:
			(type) c
			(layer)1
				Element:p
					Postal address belonging to a customer.
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Customer Address Object – Properties
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Name
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
					int
				Element:td
				Element:tr
				Element:td
					customer_id
				Element:td
					int
				Element:td
				Element:tr
				Element:td
					first_name
				Element:td
					string
				Element:td
					The customer address first name.
				Element:tr
				Element:td
					last_name
				Element:td
					string
				Element:td
					The customer address last name.
				Element:tr
				Element:td
					company
				Element:td
					string
				Element:td
					The customer address company name.
				Element:tr
				Element:td
					street_1
				Element:td
					string
				Element:td
					The customer street address line 1.
				Element:tr
				Element:td
					street_2
				Element:td
					string
				Element:td
					The customer street address line 2.
				Element:tr
				Element:td
					city
				Element:td
					string
				Element:td
					The customer address city/suburb.
				Element:tr
				Element:td
					state
				Element:td
					string
				Element:td
					The customer address state/province. Do not abbreviate the state; spell out the entire word, e.g.: California. (Cannot be null. As a workaround for addresses that include no state/province string, pass a space as the “state” value.)
				Element:tr
				Element:td
					zip
				Element:td
					string
				Element:td
					The customer address zip/postcode.
				Element:tr
				Element:td
					country
				Element:td
					string
				Element:td
					The customer address country. Must be the full country name.
				Element:tr
				Element:td
					country_iso2
				Element:td
					string
				Element:td
				Element:tr
				Element:td
					phone
				Element:td
					string
				Element:td
					The customer address phone number.
				Element:tr
				Element:td
					address_type
				Element:td
					enum
				Element:td
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
				Element:th
				Element:tbody
				Element:tr
				Element:td
				Element:strong
					Manages
				Element:td
				Element:tr
				Element:td
				Element:strong
					OAuth Scopes
				Element:td
					store_v2_customers
				Element:tr
				Element:td
				Element:td
					store_v2_customers_read_only
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					List Customer Addresses
			Node:
			(type) c
			(layer)1
				Element:p
					Gets the addresses belonging to a customer. (Default sorting is by address id, from lowest to highest.)
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					GET /stores/{store_hash}/v2/customers/{customer_id}/addresses
				Element:li
					Basic Auth >
				Element:code
					GET /api/v2/customers/{customer_id}/addresses
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Pagination
			Node:
			(type) c
			(layer)1
				Element:p
					Parameters can be added to the URL query string to paginate the collection. The maximum limit is 250. If a limit isn’t provided, up to 50 customer_addresses are returned by default.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Type
				Element:th
					Example
				Element:tbody
				Element:tr
				Element:td
					Page
				Element:td
					int
				Element:td
					/api/v2/customers/{customer_id}/addresses?page={number}
				Element:tr
				Element:td
					Limit
				Element:td
					int
				Element:td
					/api/v2/customers/{customer_id}/addresses?limit={count}
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Read-only Properties
			Node:
			(type) c
			(layer)1
				Element:p
					The following property is read-only. If included in the request, it will be rejected.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					form_fields
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Notes
			Node:
			(type) c
			(layer)1
				Element:p
					Allowable values for the
				Element:code
					address_type
					property are
				Element:code
					residential
					or
				Element:code
					commercial
					.
			Node:
			(type) c
			(layer)1
				Element:p
					In the example Response below, within the
				Element:code
					form_fields
					array, the first custom field is a checkbox field that could return any number of answers. The second custom field is a date field.
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"customer_id"
				Element:span
					:
				Element:span
				Element:span
					10
				Element:span
					,
				Element:span
				Element:span
					"first_name"
				Element:span
					:
				Element:span
				Element:span
					"Trisha"
				Element:span
					,
				Element:span
				Element:span
					"last_name"
				Element:span
					:
				Element:span
				Element:span
					"McLaughlin"
				Element:span
					,
				Element:span
				Element:span
					"company"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"street_1"
				Element:span
					:
				Element:span
				Element:span
					"12345 W Anderson Ln"
				Element:span
					,
				Element:span
				Element:span
					"street_2"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"city"
				Element:span
					:
				Element:span
				Element:span
					"Austin"
				Element:span
					,
				Element:span
				Element:span
					"state"
				Element:span
					:
				Element:span
				Element:span
					"Texas"
				Element:span
					,
				Element:span
				Element:span
					"zip"
				Element:span
					:
				Element:span
				Element:span
					"78757"
				Element:span
					,
				Element:span
				Element:span
					"country"
				Element:span
					:
				Element:span
				Element:span
					"United States"
				Element:span
					,
				Element:span
				Element:span
					"country_iso2"
				Element:span
					:
				Element:span
				Element:span
					"US"
				Element:span
					,
				Element:span
				Element:span
					"phone"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
				Element:span
					}
				Element:span
				Element:span
					]
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Get a Customer Address
			Node:
			(type) c
			(layer)1
				Element:p
					Gets a customer address.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					GET /stores/{store_hash}/v2/customers/{customer_id}/addresses/{id}
				Element:li
					Basic Auth >
				Element:code
					GET /api/v2/customers/{customer_id}/addresses/{id}
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Read-only Properties
			Node:
			(type) c
			(layer)1
				Element:p
					The following property is read-only. If included in the request, it will be rejected.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					form_fields
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Notes
			Node:
			(type) c
			(layer)1
				Element:p
					Allowable values for the
				Element:code
					address_type
					property are
				Element:code
					residential
					or
				Element:code
					commercial
					.
			Node:
			(type) c
			(layer)1
				Element:p
					In the example Response below, within the
				Element:code
					form_fields
					array, the first custom field is a checkbox field that could return any number of answers. The second custom field is a date field.
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"customer_id"
				Element:span
					:
				Element:span
				Element:span
					10
				Element:span
					,
				Element:span
				Element:span
					"first_name"
				Element:span
					:
				Element:span
				Element:span
					"Trisha"
				Element:span
					,
				Element:span
				Element:span
					"last_name"
				Element:span
					:
				Element:span
				Element:span
					"McLaughlin"
				Element:span
					,
				Element:span
				Element:span
					"company"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"street_1"
				Element:span
					:
				Element:span
				Element:span
					"12345 W Anderson Ln"
				Element:span
					,
				Element:span
				Element:span
					"street_2"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"city"
				Element:span
					:
				Element:span
				Element:span
					"Austin"
				Element:span
					,
				Element:span
				Element:span
					"state"
				Element:span
					:
				Element:span
				Element:span
					"Texas"
				Element:span
					,
				Element:span
				Element:span
					"zip"
				Element:span
					:
				Element:span
				Element:span
					"78757"
				Element:span
					,
				Element:span
				Element:span
					"country"
				Element:span
					:
				Element:span
				Element:span
					"United States"
				Element:span
					,
				Element:span
				Element:span
					"country_iso2"
				Element:span
					:
				Element:span
				Element:span
					"US"
				Element:span
					,
				Element:span
				Element:span
					"phone"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Get a Count of Customer Addresses
			Node:
			(type) c
			(layer)1
				Element:p
					Gets a count of customer addresses.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					GET /stores/{store_hash}/v2/customers/{customer_id}/addresses/count
				Element:li
					Basic Auth >
				Element:code
					GET /api/v2/customers/{customer_id}/addresses/count
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"count"
				Element:span
					:
				Element:span
				Element:span
					4
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Create a Customer Address
			Node:
			(type) c
			(layer)1
				Element:p
					Creates a new customer address. (Note: The “state” property cannot be null. As a workaround for addresses that include no state/province string, pass a space as the “state” value.)
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					POST /stores/{store_hash}/v2/customers/{customer_id}/addresses
				Element:li
					Basic Auth >
				Element:code
					POST /api/v2/customers/{customer_id}/addresses
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Read-only Properties
			Node:
			(type) c
			(layer)1
				Element:p
					The following properties of the customer address are read-only. If one or more of these properties are included in the request, it will be rejected.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					id
				Element:li
					country_iso2
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Requirements
			Node:
			(type) c
			(layer)1
				Element:p
					The following properties of the customer address are required. The request won’t be fulfilled unless these properties are valid.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					first_name
				Element:li
					last_name
				Element:li
					phone
				Element:li
					street_1
				Element:li
					city
				Element:li
					state
				Element:li
					zip
				Element:li
					country
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Request
			Node:
			(type) c
			(layer)1
				Element:p
					Example request object:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"first_name"
				Element:span
					:
				Element:span
				Element:span
					"Trisha"
				Element:span
					,
				Element:span
				Element:span
					"last_name"
				Element:span
					:
				Element:span
				Element:span
					"McLaughlin"
				Element:span
					,
				Element:span
				Element:span
					"company"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"street_1"
				Element:span
					:
				Element:span
				Element:span
					"12345 W Anderson Ln"
				Element:span
					,
				Element:span
				Element:span
					"street_2"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"city"
				Element:span
					:
				Element:span
				Element:span
					"Austin"
				Element:span
					,
				Element:span
				Element:span
					"state"
				Element:span
					:
				Element:span
				Element:span
					"Texas"
				Element:span
					,
				Element:span
				Element:span
					"zip"
				Element:span
					:
				Element:span
				Element:span
					"78757"
				Element:span
					,
				Element:span
				Element:span
					"country"
				Element:span
					:
				Element:span
				Element:span
					"United States"
				Element:span
					,
				Element:span
				Element:span
					"phone"
				Element:span
					:
				Element:span
				Element:span
					"512-123-4567"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"customer_id"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"first_name"
				Element:span
					:
				Element:span
				Element:span
					"Trisha"
				Element:span
					,
				Element:span
				Element:span
					"last_name"
				Element:span
					:
				Element:span
				Element:span
					"McLaughlin"
				Element:span
					,
				Element:span
				Element:span
					"company"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"street_1"
				Element:span
					:
				Element:span
				Element:span
					"12345 W Anderson Ln"
				Element:span
					,
				Element:span
				Element:span
					"street_2"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"city"
				Element:span
					:
				Element:span
				Element:span
					"Austin"
				Element:span
					,
				Element:span
				Element:span
					"state"
				Element:span
					:
				Element:span
				Element:span
					"Texas"
				Element:span
					,
				Element:span
				Element:span
					"zip"
				Element:span
					:
				Element:span
				Element:span
					"78757"
				Element:span
					,
				Element:span
				Element:span
					"country"
				Element:span
					:
				Element:span
				Element:span
					"United States"
				Element:span
					,
				Element:span
				Element:span
					"country_iso2"
				Element:span
					:
				Element:span
				Element:span
					"US"
				Element:span
					,
				Element:span
				Element:span
					"phone"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Update a Customer Address
			Node:
			(type) c
			(layer)1
				Element:p
					Updates an existing customer address.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					PUT /stores/{store_hash}/v2/customers/{customer_id}/addresses/{id}
				Element:li
					Basic Auth
				Element:code
					PUT /api/v2/customers/{customer_id}/addresses/{id}
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Read-only Properties
			Node:
			(type) c
			(layer)1
				Element:p
					The following properties of the customer address are read-only. If one or more of these properties are included in the request, it will be rejected.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					id
				Element:li
					country_iso2
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Requirements
			Node:
			(type) c
			(layer)1
				Element:p
					The following properties of the customer address are required. The request won’t be fulfilled unless these properties are valid.
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Request
			Node:
			(type) c
			(layer)1
				Element:p
					Example request object:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"first_name"
				Element:span
					:
				Element:span
				Element:span
					"Trisha"
				Element:span
					,
				Element:span
				Element:span
					"last_name"
				Element:span
					:
				Element:span
				Element:span
					"McLaughlin"
				Element:span
					,
				Element:span
				Element:span
					"company"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"street_1"
				Element:span
					:
				Element:span
				Element:span
					"12345 W Anderson Ln"
				Element:span
					,
				Element:span
				Element:span
					"street_2"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"city"
				Element:span
					:
				Element:span
				Element:span
					"Austin"
				Element:span
					,
				Element:span
				Element:span
					"state"
				Element:span
					:
				Element:span
				Element:span
					"Texas"
				Element:span
					,
				Element:span
				Element:span
					"zip"
				Element:span
					:
				Element:span
				Element:span
					"78757"
				Element:span
					,
				Element:span
				Element:span
					"country"
				Element:span
					:
				Element:span
				Element:span
					"United States"
				Element:span
					,
				Element:span
				Element:span
					"phone"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"customer_id"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"first_name"
				Element:span
					:
				Element:span
				Element:span
					"Trisha"
				Element:span
					,
				Element:span
				Element:span
					"last_name"
				Element:span
					:
				Element:span
				Element:span
					"McLaughlin"
				Element:span
					,
				Element:span
				Element:span
					"company"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"street_1"
				Element:span
					:
				Element:span
				Element:span
					"12345 W Anderson Ln"
				Element:span
					,
				Element:span
				Element:span
					"street_2"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"city"
				Element:span
					:
				Element:span
				Element:span
					"Austin"
				Element:span
					,
				Element:span
				Element:span
					"state"
				Element:span
					:
				Element:span
				Element:span
					"Texas"
				Element:span
					,
				Element:span
				Element:span
					"zip"
				Element:span
					:
				Element:span
				Element:span
					"78757"
				Element:span
					,
				Element:span
				Element:span
					"country"
				Element:span
					:
				Element:span
				Element:span
					"United States"
				Element:span
					,
				Element:span
				Element:span
					"country_iso2"
				Element:span
					:
				Element:span
				Element:span
					"US"
				Element:span
					,
				Element:span
				Element:span
					"phone"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Delete a Customer Address
			Node:
			(type) c
			(layer)1
				Element:p
					Deletes a customer address.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					DELETE /stores/{store_hash}/v2/customers/{customer_id}/addresses/{id}
				Element:li
					Basic Auth >
				Element:code
					DELETE /api/v2/customers/{customer_id}/addresses/{id}
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Delete Multiple Customer Addresses
			Node:
			(type) c
			(layer)1
				Element:p
					Deletes multiple customer addresses.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					DELETE /stores/{store_hash}/v2/customers/{customer_id}/addresses
				Element:li
					Basic Auth >
				Element:code
					DELETE /api/v2/customers/{customer_id}/addresses
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Pagination
			Node:
			(type) c
			(layer)1
				Element:p
					Parameters can be added to the URL query string to paginate the collection. The maximum limit is 250. If a limit isn’t provided, up to 50 customer_addresses are returned by default.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Type
				Element:th
					Example
				Element:tbody
				Element:tr
				Element:td
					Page
				Element:td
					int
				Element:td
					/api/v2/customers/{customer_id}/addresses?page={number}
				Element:tr
				Element:td
					Limit
				Element:td
					int
				Element:td
					/api/v2/customers/{customer_id}/addresses?limit={count}
			Node:
			(type) c
			(layer)1
				Element:h2
				Element:span
					Customer Groups
			Node:
			(type) c
			(layer)1
				Element:p
					Groupings of customers who share the same level of access and discounts at a store.
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Customer Group – Properties
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Name
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
					int
				Element:td
				Element:tr
				Element:td
					name
				Element:td
					string
				Element:td
					Name of the group
				Element:tr
				Element:td
					is_default
				Element:td
					boolean
				Element:td
					Determines whether new customers are assigned to this group by default.
				Element:tr
				Element:td
					category_access
				Element:td
					object
				Element:td
					Determines the categories to which customers in this group have access to view and order products.
				Element:br
				Element:br
				Element:code
					type
					is an enum specifying the method of category access applied to customers in this group, with the following possible values:
				Element:br
				Element:code
					all
					: customers can access all categories;
				Element:br
				Element:code
					specific
					: customers can access a specific list of categories;
				Element:br
				Element:code
					none
					: customers are prevented from viewing any of the categories in this group.
				Element:br
				Element:br
				Element:code
					categories
					is an array of category IDs and should be supplied only if
				Element:code
					type
					is
				Element:code
					specific
					.
				Element:tr
				Element:td
					discount_rules
				Element:td
					object_array
				Element:td
					A collection of discount rules that are automatically applied to customers who are members of the group. All discount rules have the following properties:
				Element:br
				Element:br
				Element:code
					type
					is an enum specifying the type of discount rule, with the following possible values:
				Element:br
				Element:code
					all
					: a store-wide rule (applies to everything);
				Element:br
				Element:code
					product
					: a rule applying to a specific product;
				Element:br
				Element:code
					category
					: a rule applying to a specific category.
				Element:br
				Element:br
				Element:code
					method
					is an enum that specifies a price-modifying strategy, with the following possible values:
				Element:br
				Element:code
					price
					: modify the price by the given amount;
				Element:br
				Element:code
					percent
					: modify the price by the given percentage;
				Element:br
				Element:code
					fixed
					: modify the price by a fixed discount.
				Element:br
				Element:br
				Element:code
					amount
					is a decimal number that specifies the value applied to the price modifier.
				Element:br
				Element:br
					Product and category rules also require a
				Element:code
					product_id
					or
				Element:code
					category_id
					field, respectively.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
				Element:th
				Element:tbody
				Element:tr
				Element:td
				Element:strong
					Manages
				Element:td
				Element:tr
				Element:td
				Element:strong
					OAuth Scopes
				Element:td
					store_v2_customers
				Element:tr
				Element:td
				Element:td
					store_v2_customers_read_only
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					List Customer Groups
			Node:
			(type) c
			(layer)1
				Element:p
					Gets the collection of customer groups. (Default sorting is by customer-group
				Element:code
					id
					, from lowest to highest.)
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					GET /stores/{store_hash}/v2/customer_groups
				Element:li
					Basic Auth >
				Element:code
					GET /api/v2/customer_groups
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Filters
			Node:
			(type) c
			(layer)1
				Element:p
					Filter parameters can be added to the URL query string to select specific
				Element:code
					customer_group
					s in the collection.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Type
				Element:th
					Example
				Element:tbody
				Element:tr
				Element:td
					name
				Element:td
					string
				Element:td
					/api/v2/customer_groups?name={value}
				Element:tr
				Element:td
					is_default
				Element:td
					boolean
				Element:td
					/api/v2/customer_groups?is_default={value}
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Pagination
			Node:
			(type) c
			(layer)1
				Element:p
					Parameters can be added to the URL query string to paginate the collection. The maximum limit is 250. If a limit isn’t provided, up to 50
				Element:code
					customer_group
					s are returned by default.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Type
				Element:th
					Example
				Element:tbody
				Element:tr
				Element:td
					Page
				Element:td
					int
				Element:td
					/api/v2/customer_groups?page={number}
				Element:tr
				Element:td
					Limit
				Element:td
					int
				Element:td
					/api/v2/customer_groups?limit={count}
			Node:
			(type) c
			(layer)1
				Element:h4
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Retail Customers"
				Element:span
					,
				Element:span
				Element:span
					"is_default"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"category_access"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"all"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"discount_rules"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					]
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					2
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Wholesale Customers"
				Element:span
					,
				Element:span
				Element:span
					"is_default"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"category_access"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"all"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"discount_rules"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					]
				Element:span
				Element:span
					}
				Element:span
				Element:span
					]
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Get a Customer Group
			Node:
			(type) c
			(layer)1
				Element:p
					Gets a customer group.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					GET /stores/{store_hash}/v2/customer_groups/{id}
				Element:li
					Basic Auth >
				Element:code
					GET /api/v2/customer_groups/{id}
			Node:
			(type) c
			(layer)1
				Element:h4
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					3
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Student Discounts"
				Element:span
					,
				Element:span
				Element:span
					"is_default"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"category_access"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"all"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"discount_rules"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"percent"
				Element:span
					,
				Element:span
				Element:span
					"method"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"5.0000"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					]
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Get a Count of Customer Groups
			Node:
			(type) c
			(layer)1
				Element:p
					Gets a count of customer groups.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					GET /stores/{store_hash}/v2/customer_groups/count
				Element:li
					Basic Auth >
				Element:code
					GET /api/v2/customer_groups/count
			Node:
			(type) c
			(layer)1
				Element:h4
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"count"
				Element:span
					:
				Element:span
				Element:span
					3
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Create a Customer Group
			Node:
			(type) c
			(layer)1
				Element:p
					Creates a new customer group.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					POST /stores/{store_hash}/v2/customer_groups
				Element:li
					Basic Auth >
				Element:code
					POST /api/v2/customer_groups
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Requirements
			Node:
			(type) c
			(layer)1
				Element:p
					The following properties of the customer group are required. The request won’t be fulfilled unless these properties are valid.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					name
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Notes
			Node:
			(type) c
			(layer)1
				Element:p
					A minimal request requires only the customer group name:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Wholesale Customers"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					To assign all new customers to the group by default, set
				Element:code
					is default
					to true:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Retail Customers"
				Element:span
					,
				Element:span
				Element:span
					"is_default"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					To restrict customers in the group to only view and order products from a specific set of categories, provide a
				Element:code
					category access
					type:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Bulk Purchasers"
				Element:span
					,
				Element:span
				Element:span
					"category_access"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"specific"
				Element:span
					,
				Element:span
				Element:span
					"categories"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
					7
				Element:span
					,
				Element:span
				Element:span
					12
				Element:span
					,
				Element:span
				Element:span
					20
				Element:span
					]
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					To provide a 5% store-wide discount for customers in the group, use a
				Element:code
					discount rule
					of type
				Element:code
					all
					:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Student Discounts"
				Element:span
					,
				Element:span
				Element:span
					"discount_rules"
				Element:span
					:
				Element:span
				Element:span
					[{
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"all"
				Element:span
					,
				Element:span
				Element:span
					"method"
				Element:span
					:
				Element:span
				Element:span
					"percent"
				Element:span
					,
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					5.00
				Element:span
				Element:span
					}]
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Update a Customer Group
			Node:
			(type) c
			(layer)1
				Element:p
					Updates an existing customer group.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					PUT /stores/{store_hash}/v2/customer_groups/{id}
				Element:li
					Basic Auth >
				Element:code
					PUT /api/v2/customer_groups/{id}
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Notes
			Node:
			(type) c
			(layer)1
				Element:p
					Any combination of fields can be updated at once. Discount rules are treated in bulk. The entire set of rules is overwritten when a request is sent.
			Node:
			(type) c
			(layer)1
				Element:p
					The following request will remove any existing rules, and apply the new ones:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"discount_rules"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"all"
				Element:span
					,
				Element:span
				Element:span
					"method"
				Element:span
					:
				Element:span
				Element:span
					"percent"
				Element:span
					,
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					2.50
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"product"
				Element:span
					,
				Element:span
				Element:span
					"product_id"
				Element:span
					:
				Element:span
				Element:span
					33
				Element:span
					,
				Element:span
				Element:span
					"method"
				Element:span
					:
				Element:span
				Element:span
					"percent"
				Element:span
					,
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					5.00
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"category"
				Element:span
					,
				Element:span
				Element:span
					"category_id"
				Element:span
					:
				Element:span
				Element:span
					7
				Element:span
					,
				Element:span
				Element:span
					"method"
				Element:span
					:
				Element:span
				Element:span
					"price"
				Element:span
					,
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					12.00
				Element:span
				Element:span
					}
				Element:span
				Element:span
					]
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Delete a Customer Group
			Node:
			(type) c
			(layer)1
				Element:p
					Deletes a customer group.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					DELETE /stores/{store_hash}/v2/customer_groups/{id}
				Element:li
					Basic Auth >
				Element:code
					DELETE /api/v2/customer_groups/{id}
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Notes
			Node:
			(type) c
			(layer)1
				Element:p
					All existing customers are unassigned from the group when it is deleted.
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Delete All Customer Groups
			Node:
			(type) c
			(layer)1
				Element:p
					Deletes all customer groups in the store.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					DELETE /stores/{store_hash}/v2/customer_groups
				Element:li
					Basic Auth >
				Element:code
					DELETE /api/v2/customer_groups
			Node:
			(type) c
			(layer)1
				Element:h2
				Element:span
					Customer Login API
			Node:
			(type) c
			(layer)1
				Element:p
					The Customer Login API enables single sign-on (SSO). It allows your apps to generate a token to programmatically log in a storefront customer, by using the login entry point at
				Element:code
					/login/token/{token}
					. Here,
				Element:code
					{token}
					must be a JSON Web Token (JWT) containing the parameters for the customer login request in its payload, and must be signed by your
				Element:a
					OAuth application
					’s
				Element:a
					client secret
					.
			Node:
			(type) c
			(layer)1
				Element:p
					For a full overview of the JWT standard, please see
				Element:a
					JWT.IO
					, where you will find links to client libraries (in many languages) that facilitate the generation and verification of JWT tokens. BigCommerce also supplies helper methods for generating login tokens in our API
				Element:a
					Client Libraries
					.
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Customer Login Token
			Node:
			(type) c
			(layer)1
				Element:p
					A valid JWT token is a string composed of three parts, separated by periods (“.”). Please refer to
				Element:a
					JWT.IO
					and
				Element:a
					RFC 7519
					for more details on the format.
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Example URL
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					https://storedomain.com/login/token/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9 .eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9 .TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"typ"
				Element:span
					:
				Element:span
				Element:span
					"JWT"
				Element:span
					,
				Element:span
				Element:span
					"alg"
				Element:span
					:
				Element:span
				Element:span
					"HS256"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Payload
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"iss"
				Element:span
					:
				Element:span
				Element:span
					"<application_client_id>"
				Element:span
					,
				Element:span
				Element:span
					"iat"
				Element:span
					:
				Element:span
				Element:span
					"<issued_at>"
				Element:span
					,
				Element:span
				Element:span
					"jti"
				Element:span
					:
				Element:span
				Element:span
					"<unique_string>"
				Element:span
					,
				Element:span
				Element:span
					"operation"
				Element:span
					:
				Element:span
				Element:span
					"customer_login"
				Element:span
					,
				Element:span
				Element:span
					"store_hash"
				Element:span
					:
				Element:span
				Element:span
					"<store_hash>"
				Element:span
					,
				Element:span
				Element:span
					"customer_id"
				Element:span
					:
				Element:span
				Element:span
					<customer_id>
				Element:span
					,
				Element:span
				Element:span
					"redirect_to"
				Element:span
					:
				Element:span
				Element:span
					"<relative_path (optional)>"
				Element:span
					,
				Element:span
				Element:span
					"request_ip"
				Element:span
					:
				Element:span
				Element:span
					"<ipv4_address (optional)>"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Fields
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Field Name
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					iss
				Element:td
					string
				Element:td
					Indicates the token’s issuer. This is your application’s client ID, which is obtained during application registration in Developer Portal.
				Element:tr
				Element:td
					iat
				Element:td
					integer
				Element:td
					Time when the token was generated. This is a numeric value indicating the number of seconds since the
				Element:a
					Unix epoch
					.
				Element:tr
				Element:td
					jti
				Element:td
					string
				Element:td
					Request ID string that must be unique across all requests made by your app. A UUID or other random string would be an appropriate value.
				Element:tr
				Element:td
					operation
				Element:td
					enum
				Element:td
					Must contain the string “customer_login”.
				Element:tr
				Element:td
					store_hash
				Element:td
					string
				Element:td
					Store hash identifying the store you are logging into.
				Element:tr
				Element:td
					customer_id
				Element:td
					integer
				Element:td
					ID of the customer you are logging in, as obtained through the Customer API.
				Element:tr
				Element:td
					redirect_to
				Element:td
					string
				Element:td
					Optional field containing a relative path for the shopper’s destination after login. Will default to
				Element:code
					/account.php
					.
				Element:tr
				Element:td
					request_ip
				Element:td
					string
				Element:td
					Optional field containing the expected IP address for the request.
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Signature
			Node:
			(type) c
			(layer)1
				Element:p
					The headers and payload must be signed using HS256 (HMAC-SHA256) and the application’s client secret.
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Sample Code
			Node:
			(type) c
			(layer)1
				Element:p
					Code to generate a valid JWT token for a storefront login request is provided in our API
				Element:a
					Client Libraries
					. (The headings below are linked to the live code, which might have been updated since publication:)
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:a
				Element:span
					PHP Sample
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					public
				Element:span
					static
				Element:span
					function
				Element:span
					getCustomerLoginToken
				Element:span
					(
				Element:span
					$id
				Element:span
					,
				Element:span
					$redirectUrl
				Element:span
					=
				Element:span
					''
				Element:span
					,
				Element:span
					$requestIp
				Element:span
					=
				Element:span
					''
				Element:span
					)
				Element:span
					{
				Element:span
					if
				Element:span
					(
				Element:span
					empty
				Element:span
					(
				Element:span
					self
				Element:span
					::
				Element:span
					$client_secret
				Element:span
					))
				Element:span
					{
				Element:span
					throw
				Element:span
					new
				Element:span
					Exception
				Element:span
					(
				Element:span
					'Cannot sign customer login tokens without a client secret'
				Element:span
					);
				Element:span
					}
				Element:span
					$payload
				Element:span
					=
				Element:span
					array
				Element:span
					(
				Element:span
					'iss'
				Element:span
					=>
				Element:span
					self
				Element:span
					::
				Element:span
					$client_id
				Element:span
					,
				Element:span
					'iat'
				Element:span
					=>
				Element:span
					time
				Element:span
					(),
				Element:span
					'jti'
				Element:span
					=>
				Element:span
					bin2hex
				Element:span
					(
				Element:span
					random_bytes
				Element:span
					(
				Element:span
					32
				Element:span
					)),
				Element:span
					'operation'
				Element:span
					=>
				Element:span
					'customer_login'
				Element:span
					,
				Element:span
					'store_hash'
				Element:span
					=>
				Element:span
					self
				Element:span
					::
				Element:span
					$store_hash
				Element:span
					,
				Element:span
					'customer_id'
				Element:span
					=>
				Element:span
					$id
				Element:span
					);
				Element:span
					if
				Element:span
					(
				Element:span
					!
				Element:span
					empty
				Element:span
					(
				Element:span
					$redirectUrl
				Element:span
					))
				Element:span
					{
				Element:span
					$payload
				Element:span
					[
				Element:span
					'redirect_to'
				Element:span
					]
				Element:span
					=
				Element:span
					$redirectUrl
				Element:span
					;
				Element:span
					}
				Element:span
					if
				Element:span
					(
				Element:span
					!
				Element:span
					empty
				Element:span
					(
				Element:span
					$requestIp
				Element:span
					))
				Element:span
					{
				Element:span
					$payload
				Element:span
					[
				Element:span
					'request_ip'
				Element:span
					]
				Element:span
					=
				Element:span
					$requestIp
				Element:span
					;
				Element:span
					}
				Element:span
					return
				Element:span
					JWT
				Element:span
					::
				Element:span
					encode
				Element:span
					(
				Element:span
					$payload
				Element:span
					,
				Element:span
					self
				Element:span
					::
				Element:span
					$client_secret
				Element:span
					,
				Element:span
					'HS256'
				Element:span
					);
				Element:span
					}
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
				Element:a
					Python Sample
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					import
				Element:span
					os
				Element:span
					import
				Element:span
					time
				Element:span
					import
				Element:span
					uuid
				Element:span
					import
				Element:span
					jwt
				Element:span
					class
				Element:span
					CustomerLoginTokens
				Element:span
					(
				Element:span
					object
				Element:span
					):
				Element:span
					@classmethod
				Element:span
					def
				Element:span
					create
				Element:span
					(
				Element:span
					cls
				Element:span
					,
				Element:span
					client
				Element:span
					,
				Element:span
					id
				Element:span
					,
				Element:span
					redirect_url
				Element:span
					=
				Element:span
					None
				Element:span
					,
				Element:span
					request_ip
				Element:span
					=
				Element:span
					None
				Element:span
					):
				Element:span
					# Get the client_secret needed to sign tokens from the environment
				Element:span
					# Intended to play nice with the Python Hello World sample app
				Element:span
					# https://github.com/bigcommerce/hello-world-app-python-flask
				Element:span
					client_secret
				Element:span
					=
				Element:span
					os
				Element:span
					.
				Element:span
					getenv
				Element:span
					(
				Element:span
					'APP_CLIENT_SECRET'
				Element:span
					)
				Element:span
					if
				Element:span
					not
				Element:span
					client_secret
				Element:span
					:
				Element:span
					raise
				Element:span
					AttributeError
				Element:span
					(
				Element:span
					'No OAuth client secret specified in the environment, '
				Element:span
					'please specify an APP_CLIENT_SECRET'
				Element:span
					)
				Element:span
					try
				Element:span
					:
				Element:span
					client_id
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					connection
				Element:span
					.
				Element:span
					client_id
				Element:span
					store_hash
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					connection
				Element:span
					.
				Element:span
					store_hash
				Element:span
					except
				Element:span
					AttributeError
				Element:span
					:
				Element:span
					raise
				Element:span
					AttributeError
				Element:span
					(
				Element:span
					'Store hash or client ID not found in the connection - '
				Element:span
					'make sure an OAuth API connection is configured. Basic auth is not supported.'
				Element:span
					)
				Element:span
					payload
				Element:span
					=
				Element:span
					dict
				Element:span
					(
				Element:span
					iss
				Element:span
					=
				Element:span
					client_id
				Element:span
					,
				Element:span
					iat
				Element:span
					=
				Element:span
					int
				Element:span
					(
				Element:span
					time
				Element:span
					.
				Element:span
					time
				Element:span
					()),
				Element:span
					jti
				Element:span
					=
				Element:span
					uuid
				Element:span
					.
				Element:span
					uuid4
				Element:span
					()
				Element:span
					.
				Element:span
					hex
				Element:span
					,
				Element:span
					operation
				Element:span
					=
				Element:span
					'customer_login'
				Element:span
					,
				Element:span
					store_hash
				Element:span
					=
				Element:span
					store_hash
				Element:span
					,
				Element:span
					customer_id
				Element:span
					=
				Element:span
					id
				Element:span
					)
				Element:span
					if
				Element:span
					redirect_url
				Element:span
					:
				Element:span
					payload
				Element:span
					[
				Element:span
					'redirect_url'
				Element:span
					]
				Element:span
					=
				Element:span
					redirect_url
				Element:span
					if
				Element:span
					request_ip
				Element:span
					:
				Element:span
					payload
				Element:span
					[
				Element:span
					'request_ip'
				Element:span
					]
				Element:span
					=
				Element:span
					request_ip
				Element:span
					token
				Element:span
					=
				Element:span
					jwt
				Element:span
					.
				Element:span
					encode
				Element:span
					(
				Element:span
					payload
				Element:span
					,
				Element:span
					client_secret
				Element:span
					,
				Element:span
					algorithm
				Element:span
					=
				Element:span
					'HS256'
				Element:span
					)
				Element:span
					return
				Element:span
					token
				Element:span
					.
				Element:span
					decode
				Element:span
					(
				Element:span
					'utf-8'
				Element:span
					)
				Element:span
					@classmethod
				Element:span
					def
				Element:span
					create_url
				Element:span
					(
				Element:span
					cls
				Element:span
					,
				Element:span
					client
				Element:span
					,
				Element:span
					id
				Element:span
					,
				Element:span
					redirect_url
				Element:span
					=
				Element:span
					None
				Element:span
					,
				Element:span
					request_ip
				Element:span
					=
				Element:span
					None
				Element:span
					):
				Element:span
					secure_url
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					Store
				Element:span
					.
				Element:span
					all
				Element:span
					()[
				Element:span
					'secure_url'
				Element:span
					]
				Element:span
					login_token
				Element:span
					=
				Element:span
					cls
				Element:span
					.
				Element:span
					create
				Element:span
					(
				Element:span
					client
				Element:span
					,
				Element:span
					id
				Element:span
					,
				Element:span
					redirect_url
				Element:span
					,
				Element:span
					request_ip
				Element:span
					)
				Element:span
					return
				Element:span
					'
				Element:span
					%
				Element:span
					s/login/token/
				Element:span
					%
				Element:span
					s'
				Element:span
					%
				Element:span
					(
				Element:span
					secure_url
				Element:span
					,
				Element:span
					login_token
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
				Element:a
					Ruby Sample
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'bigcommerce'
				Element:span
					Bigcommerce
				Element:span
					.
				Element:span
					configure
				Element:span
					do
				Element:span
					|
				Element:span
					config
				Element:span
					|
				Element:span
					config
				Element:span
					.
				Element:span
					store_hash
				Element:span
					=
				Element:span
					ENV
				Element:span
					[
				Element:span
					'BC_STORE_HASH'
				Element:span
					]
				Element:span
					config
				Element:span
					.
				Element:span
					client_id
				Element:span
					=
				Element:span
					ENV
				Element:span
					[
				Element:span
					'BC_CLIENT_ID'
				Element:span
					]
				Element:span
					config
				Element:span
					.
				Element:span
					client_secret
				Element:span
					=
				Element:span
					ENV
				Element:span
					[
				Element:span
					'BC_CLIENT_SECRET'
				Element:span
					]
				Element:span
					config
				Element:span
					.
				Element:span
					access_token
				Element:span
					=
				Element:span
					ENV
				Element:span
					[
				Element:span
					'BC_ACCESS_TOKEN'
				Element:span
					]
				Element:span
					end
				Element:span
					# Get a customer
				Element:span
					customer
				Element:span
					=
				Element:span
					Bigcommerce
				Element:span
					::
				Element:span
					Customer
				Element:span
					.
				Element:span
					all
				Element:span
					(
				Element:span
					page:
				Element:span
					1
				Element:span
					).
				Element:span
					first
				Element:span
					# Generate token login url
				Element:span
					puts
				Element:span
					customer
				Element:span
					.
				Element:span
					login_token
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					OAuth Scope
			Node:
			(type) c
			(layer)1
				Element:p
					In order to use this feature, your app must be installed in the store, and must have the
				Element:code
					store_v2_customers_login
					scope.
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Redirection
			Node:
			(type) c
			(layer)1
				Element:p
					For flexibility in navigation after login, we support an optional redirect parameter (
				Element:code
					redirect_to
					), which in turn supports relative URLs. If the parameter is not specified, the storefront customer will land on their My Account page at
				Element:code
					/account.php
					.
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Notes
			Node:
			(type) c
			(layer)1
				Element:p
					Tokens will be valid for a very short timeframe after they are first generated, so tokens should not be generated in advance. Instead, the application should generate the token and then immediately redirect the user’s browser to
				Element:code
					/login/token/{token}
					.
			Node:
			(type) c
			(layer)1
				Element:p
					Once a request has been made with a given
				Element:code
					jti
					, it cannot be made again. This parameter is used to prevent replay attacks by malicious actors intercepting the request or obtaining it after the fact.
			Node:
			(type) c
			(layer)1
				Element:p
					The
				Element:code
					request_ip
					field can be used as an additional security precaution, to prevent a malicious actor from intercepting the request and making it from another browser or system before you do. If you supply this value, BigCommerce will check the incoming request to ensure that it is being made from the stated IP address – and will otherwise fail the request. We strongly encourage setting this IP address value; but doing so is optional, to support those cases where this information is not available.
			Node:
			(type) c
			(layer)1
				Element:h2
				Element:span
					Identifying Logged-In Customers Securely
			Node:
			(type) c
			(layer)1
				Element:p
					If your application interacts dynamically with the BigCommerce storefront, and conveys information that is specific to a particular logged-in customer, you must confirm that customer’s identity within the insecure environment of the user’s browser.
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Current Customer API
			Node:
			(type) c
			(layer)1
				Element:p
					To address this need, BigCommerce provides a Current Customer endpoint, which your app can access via JavaScript on the storefront. This endpoint returns a
				Element:a
					JWT (JSON Web Token)
					with identifying details about the customer. The information is signed with your
				Element:a
					client secret
					.
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Example JavaScript
			Node:
			(type) c
			(layer)1
				Element:p
					Below is example JavaScript that will access this JWT. To test the JWT functionality, you can install this JavaScript on your sandbox BigCommerce store. Your application’s Client ID must be included in the request (to identify the requesting application):
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					<
				Element:span
					script
				Element:span
					type
				Element:span
					=
				Element:span
					"text/javascript"
				Element:span
					>
				Element:span
					function
				Element:span
					customerJWT
				Element:span
					()
				Element:span
					{
				Element:span
					var
				Element:span
					appClientId
				Element:span
					=
				Element:span
					"**BC_CLIENT_ID**"
				Element:span
					;
				Element:span
					// TODO: Fill this in with your app's client ID
				Element:span
					var
				Element:span
					xmlhttp
				Element:span
					=
				Element:span
					new
				Element:span
					XMLHttpRequest
				Element:span
					();
				Element:span
					xmlhttp
				Element:span
					.
				Element:span
					onreadystatechange
				Element:span
					=
				Element:span
					function
				Element:span
					()
				Element:span
					{
				Element:span
					if
				Element:span
					(
				Element:span
					xmlhttp
				Element:span
					.
				Element:span
					readyState
				Element:span
					==
				Element:span
					XMLHttpRequest
				Element:span
					.
				Element:span
					DONE
				Element:span
					)
				Element:span
					{
				Element:span
					if
				Element:span
					(
				Element:span
					xmlhttp
				Element:span
					.
				Element:span
					status
				Element:span
					==
				Element:span
					200
				Element:span
					)
				Element:span
					{
				Element:span
					alert
				Element:span
					(
				Element:span
					'Customer JWT:\n'
				Element:span
					+
				Element:span
					xmlhttp
				Element:span
					.
				Element:span
					responseText
				Element:span
					);
				Element:span
					}
				Element:span
					else
				Element:span
					if
				Element:span
					(
				Element:span
					xmlhttp
				Element:span
					.
				Element:span
					status
				Element:span
					==
				Element:span
					404
				Element:span
					)
				Element:span
					{
				Element:span
					alert
				Element:span
					(
				Element:span
					'Not logged in!'
				Element:span
					);
				Element:span
					}
				Element:span
					else
				Element:span
					{
				Element:span
					alert
				Element:span
					(
				Element:span
					'Something went wrong'
				Element:span
					);
				Element:span
					}
				Element:span
					}
				Element:span
					};
				Element:span
					xmlhttp
				Element:span
					.
				Element:span
					open
				Element:span
					(
				Element:span
					"GET"
				Element:span
					,
				Element:span
					"/customer/current.jwt?app_client_id="
				Element:span
					+
				Element:span
					appClientId
				Element:span
					,
				Element:span
					true
				Element:span
					);
				Element:span
					xmlhttp
				Element:span
					.
				Element:span
					send
				Element:span
					();
				Element:span
					}
				Element:span
					customerJWT
				Element:span
					();
				Element:span
					<
				Element:span
					/script
				Element:span
					>
			Node:
			(type) c
			(layer)1
				Element:p
					If you are logged into the storefront with a customer account, the above JavaScript should alert to the browser with a JWT token. If no customer is logged in, BigCommerce will return a 404 response, and you will see an error message.
			Node:
			(type) c
			(layer)1
				Element:p
					The JWT returned from this endpoint (example below) can be decoded on
				Element:a
					JWT.IO
					, or via any of
				Element:a
					these libraries
					.
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Example Output
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"customer"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					4927
				Element:span
					,
				Element:span
				Element:span
					"email"
				Element:span
					:
				Element:span
				Element:span
					"john.doe@gmail.com"
				Element:span
					,
				Element:span
				Element:span
					"group_id"
				Element:span
					:
				Element:span
				Element:span
					"6"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"iss"
				Element:span
					:
				Element:span
				Element:span
					"bc/apps"
				Element:span
					,
				Element:span
				Element:span
					"sub"
				Element:span
					:
				Element:span
				Element:span
					"abc123"
				Element:span
					,
				Element:span
				Element:span
					"iat"
				Element:span
					:
				Element:span
				Element:span
					1480831863
				Element:span
					,
				Element:span
				Element:span
					"exp"
				Element:span
					:
				Element:span
				Element:span
					1480832763
				Element:span
					,
				Element:span
				Element:span
					"version"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"aud"
				Element:span
					:
				Element:span
				Element:span
					"6sv16tfx3j5gsopm42ss5dd67g2srvq"
				Element:span
					,
				Element:span
				Element:span
					"application_id"
				Element:span
					:
				Element:span
				Element:span
					"6sv16tasdgr2b5hs5dd67g2srvq"
				Element:span
					,
				Element:span
				Element:span
					"store_hash"
				Element:span
					:
				Element:span
				Element:span
					"abc123"
				Element:span
					,
				Element:span
				Element:span
					"operation"
				Element:span
					:
				Element:span
				Element:span
					"current_customer"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					By design, your application should send this token to the application’s server, validate it against your client secret, and then use it as a trusted indication of the logged-in customer’s identity, before displaying confidential information to them.
			Node:
			(type) c
			(layer)1
				Element:p
					An end-to-end example, which displays a customer’s recently purchased products, is available in our
				Element:a
					Ruby
					and
				Element:a
					PHP
					sample apps. .
			Node:
			(type) h1
			(layer)1
				Element:h1
				Element:span
					Geography Reference
			Node:
			(type) c
			(layer)1
				Element:p
					Geography APIs handle geographic information resources. They include Countries and States.
			Node:
			(type) c
			(layer)1
				Element:h2
				Element:span
					Countries
			Node:
			(type) c
			(layer)1
				Element:p
					A country or territory, identifiable by an ISO 3166 country code.
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Country Object – Properties
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Name
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
					int
				Element:td
				Element:tr
				Element:td
					country
				Element:td
					string
				Element:td
					Country name
				Element:tr
				Element:td
					country_iso2
				Element:td
					string
				Element:td
					2 letter countryt code
				Element:tr
				Element:td
					country_iso3
				Element:td
					string
				Element:td
					3 letter country code
				Element:tr
				Element:td
					states
				Element:td
					resource
				Element:td
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
				Element:th
				Element:tbody
				Element:tr
				Element:td
				Element:strong
					Manages
				Element:td
				Element:tr
				Element:td
				Element:strong
					OAuth Scopes
				Element:td
				Element:code
					default
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					List Countries
			Node:
			(type) c
			(layer)1
				Element:p
					Gets the list of countries.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					GET /stores/{store_hash}/v2/countries
				Element:li
					Basic Auth >
				Element:code
					GET /api/v2/countries
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Filters
			Node:
			(type) c
			(layer)1
				Element:p
					Filter parameters can be added to the URL query string to select specific countries in the collection.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Type
				Element:th
					Example
				Element:tbody
				Element:tr
				Element:td
					country
				Element:td
					string
				Element:td
					/api/v2/countries?country={value}
				Element:tr
				Element:td
					country_iso2
				Element:td
					string
				Element:td
					/api/v2/countries?country_iso2={value}
				Element:tr
				Element:td
					country_iso3
				Element:td
					string
				Element:td
					/api/v2/countries?country_iso3={value}
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Pagination
			Node:
			(type) c
			(layer)1
				Element:p
					Parameters can be added to the URL query string to paginate the collection. The maximum limit is 250. If a limit isn’t provided, up to 50 countries are returned by default.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Type
				Element:th
					Example
				Element:tbody
				Element:tr
				Element:td
					Page
				Element:td
					int
				Element:td
					/api/v2/countries?page={number}
				Element:tr
				Element:td
					Limit
				Element:td
					int
				Element:td
					/api/v2/countries?limit={count}
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"country"
				Element:span
					:
				Element:span
				Element:span
					"Afghanistan"
				Element:span
					,
				Element:span
				Element:span
					"country_iso2"
				Element:span
					:
				Element:span
				Element:span
					"AF"
				Element:span
					,
				Element:span
				Element:span
					"country_iso3"
				Element:span
					:
				Element:span
				Element:span
					"AFG"
				Element:span
					,
				Element:span
				Element:span
					"states"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
				Element:span
					"https://store-bwvr466.mybigcommerce.com/api/v2/countries/1/states.json"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"/countries/1/states"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					2
				Element:span
					,
				Element:span
				Element:span
					"country"
				Element:span
					:
				Element:span
				Element:span
					"Albania"
				Element:span
					,
				Element:span
				Element:span
					"country_iso2"
				Element:span
					:
				Element:span
				Element:span
					"AL"
				Element:span
					,
				Element:span
				Element:span
					"country_iso3"
				Element:span
					:
				Element:span
				Element:span
					"ALB"
				Element:span
					,
				Element:span
				Element:span
					"states"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
				Element:span
					"https://store-bwvr466.mybigcommerce.com/api/v2/countries/2/states.json"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"/countries/2/states"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
				Element:span
					]
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Get a Country
			Node:
			(type) c
			(layer)1
				Element:p
					Gets a country.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					GET /stores/{store_hash}/v2/countries/{id}
				Element:li
					Basic Auth >
				Element:code
					GET /api/v2/countries/{id}
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					226
				Element:span
					,
				Element:span
				Element:span
					"country"
				Element:span
					:
				Element:span
				Element:span
					"United States"
				Element:span
					,
				Element:span
				Element:span
					"country_iso2"
				Element:span
					:
				Element:span
				Element:span
					"US"
				Element:span
					,
				Element:span
				Element:span
					"country_iso3"
				Element:span
					:
				Element:span
				Element:span
					"USA"
				Element:span
					,
				Element:span
				Element:span
					"states"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
				Element:span
					"https://store-bwvr466.mybigcommerce.com/api/v2/countries/226/states.json"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"/countries/226/states"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Get a Count of Countries
			Node:
			(type) c
			(layer)1
				Element:p
					Gets a count of countries.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					GET /stores/{store_hash}/v2/countries/count
				Element:li
					Basic Auth >
				Element:code
					GET /api/v2/countries/count
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"count"
				Element:span
					:
				Element:span
				Element:span
					243
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h2
				Element:span
					States
			Node:
			(type) c
			(layer)1
				Element:p
					A state or province, identifiable by an ISO 3166 subdivision code
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					State Object – Properties
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Name
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
					int
				Element:td
				Element:tr
				Element:td
					state
				Element:td
					string
				Element:td
					state name
				Element:tr
				Element:td
					state_abbreviation
				Element:td
					string
				Element:td
					state abbreviation
				Element:tr
				Element:td
					country_id
				Element:td
					int
				Element:td
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
				Element:th
				Element:tbody
				Element:tr
				Element:td
				Element:strong
					Manages
				Element:td
				Element:tr
				Element:td
				Element:strong
					OAuth Scopes
				Element:td
				Element:code
					default
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					List States
			Node:
			(type) c
			(layer)1
				Element:p
					Gets the list of states belonging to a country.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					GET /stores/{store_hash}/v2/countries/{country_id}/states
				Element:li
					Basic Auth >
				Element:code
					GET /api/v2/countries/{country_id}/states
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Filters
			Node:
			(type) c
			(layer)1
				Element:p
					Filter parameters can be added to the URL query string to select specific states in the collection.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Type
				Element:th
					Example
				Element:tbody
				Element:tr
				Element:td
					state
				Element:td
					string
				Element:td
					/api/v2/countries/{country_id}/states?state={value}
				Element:tr
				Element:td
					state_abbreviation
				Element:td
					string
				Element:td
					/api/v2/countries/{country_id}/states?state_abbreviation={value}
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Pagination
			Node:
			(type) c
			(layer)1
				Element:p
					Parameters can be added to the URL query string to paginate the collection. The maximum limit is 250. If a limit isn’t provided, up to 50 states are returned by default.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Type
				Element:th
					Example
				Element:tbody
				Element:tr
				Element:td
					Page
				Element:td
					int
				Element:td
					/api/v2/countries/{country_id}/states?page={number}
				Element:tr
				Element:td
					Limit
				Element:td
					int
				Element:td
					/api/v2/countries/{country_id}/states?limit={count}
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"state"
				Element:span
					:
				Element:span
				Element:span
					"Alabama"
				Element:span
					,
				Element:span
				Element:span
					"state_abbreviation"
				Element:span
					:
				Element:span
				Element:span
					"AL"
				Element:span
					,
				Element:span
				Element:span
					"country_id"
				Element:span
					:
				Element:span
				Element:span
					226
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					2
				Element:span
					,
				Element:span
				Element:span
					"state"
				Element:span
					:
				Element:span
				Element:span
					"Alaska"
				Element:span
					,
				Element:span
				Element:span
					"state_abbreviation"
				Element:span
					:
				Element:span
				Element:span
					"AK"
				Element:span
					,
				Element:span
				Element:span
					"country_id"
				Element:span
					:
				Element:span
				Element:span
					226
				Element:span
				Element:span
					}
				Element:span
				Element:span
					]
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Get a State
			Node:
			(type) c
			(layer)1
				Element:p
					Gets a state belonging to a country.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					GET /stores/{store_hash}/v2/countries/{country_id}/states/{id}
				Element:li
					Basic Auth >
				Element:code
					GET /api/v2/countries/{country_id}/states/{id}
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"state"
				Element:span
					:
				Element:span
				Element:span
					"Alabama"
				Element:span
					,
				Element:span
				Element:span
					"state_abbreviation"
				Element:span
					:
				Element:span
				Element:span
					"AL"
				Element:span
					,
				Element:span
				Element:span
					"country_id"
				Element:span
					:
				Element:span
				Element:span
					226
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Get a Count of States
			Node:
			(type) c
			(layer)1
				Element:p
					Gets a count of the number of states within a specified country.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					GET /stores/{store_hash}/v2/countries/{country_id}/states/count
				Element:li
					Basic Auth >
				Element:code
					GET /api/v2/countries/{country_id}/states/count
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"count"
				Element:span
					:
				Element:span
				Element:span
					65
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) h1
			(layer)1
				Element:h1
				Element:span
					Marketing Reference
			Node:
			(type) c
			(layer)1
				Element:p
					Marketing APIs support demand generation and loyalty programs. They include Coupons, Banners, and Gift Certificates.
			Node:
			(type) c
			(layer)1
				Element:h2
				Element:span
					Coupons
			Node:
			(type) c
			(layer)1
				Element:p
					Category or product discounts that can be applied to orders for customers who enter a given code.
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Coupon Object – Properties
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Name
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
					int
				Element:td
					The coupon’s ID.
				Element:tr
				Element:td
					name
				Element:td
					string
				Element:td
					The name of the coupon.
				Element:tr
				Element:td
					type
				Element:td
					enum
				Element:td
					Acceptable values for this enumerated field are:
				Element:code
					per_item_discount
					,
				Element:code
					per_total_discount
					,
				Element:code
					shipping_discount
					,
				Element:code
					free_shipping
					, or
				Element:code
					percentage_discount
					.
				Element:tr
				Element:td
					amount
				Element:td
					decimal
				Element:td
					The discount to apply to an order, as either an amount or a percentage. This field’s usage is determined by the coupon
				Element:code
					type
					. For example, a
				Element:code
					type
					of
				Element:code
					percentage_discount
					would determine a percentage here.
				Element:tr
				Element:td
					min_purchase
				Element:td
					decimal
				Element:td
					Specifies a minimum value that an order must have before the coupon can be applied to it.
				Element:tr
				Element:td
					expires
				Element:td
					date
				Element:td
					Specifies when a coupon expires. Coupons need not have an expiry date – you can also control expiry via
				Element:code
					max_uses
					or
				Element:code
					max_uses_per_customer
					. If you do use this date field, the value must be in
				Element:a
					RFC 2822
					format.
				Element:tr
				Element:td
					enabled
				Element:td
					boolean
				Element:td
					If the coupon is enabled, this field’s value is
				Element:code
					true
					; otherwise,
				Element:code
					false
					.
				Element:tr
				Element:td
					code
				Element:td
					string
				Element:td
					The coupon code that customers will use to receive their discounts. Value must be unique.
				Element:tr
				Element:td
					applies_to
				Element:td
					object
				Element:td
					Allows you to restrict a coupon to an entity type (category or product), and to specific categories/products. A value of
				Element:code
					0
					represents all categories/products.
				Element:tr
				Element:td
					num_uses
				Element:td
					int
				Element:td
					Number of times this coupon has been used. This is a read-only field; do not set or modify its value in a POST or PUT request.
				Element:tr
				Element:td
					max_uses
				Element:td
					int
				Element:td
					Maximum number of times this coupon can be used.
				Element:tr
				Element:td
					max_uses_per_customer
				Element:td
					int
				Element:td
					Maximum number of times each customer can use this coupon.
				Element:tr
				Element:td
					restricted_to
				Element:td
					object
				Element:td
					Allows you to restrict coupon usage based on locations, as follows:
				Element:br
				Element:br
					To restrict a coupon by country, retrieve the list of ISO2 country codes supported by BigCommmerce as described below under
				Element:a
					Notes on Location Restrictions
					. Use the resulting ISO2 code as shown in this example:
				Element:br
				Element:code
					"restricted_to": { "countries": ["AU"] }
				Element:br
				Element:br
					To restrict a coupon by state/province, retrieve BigCommmerce’s list of supported state/province codes, indexed by ISO2 country codes, as described below under
				Element:a
					Notes on Location Restrictions
					. Use the resulting state/province code as shown in this example:
				Element:br
				Element:code
					"restricted_to": { "states": { "AU": ["Australian Capital Territory"] } }
				Element:br
				Element:br
					To restrict a coupon by ZIP/postal codes, use BigCommerce’s supported ZIP/postal-code patterns, which are indexed by ISO2 country codes. Please see
				Element:a
					this KB article
					for an overview, and
				Element:a
					this KB article
					for format details. Use the resulting code as shown in this example:
				Element:br
				Element:code
					"restricted_to": { "zips": { "AU": ["2000", "20??"] } }
				Element:tr
				Element:td
					shipping_methods
				Element:td
					array
				Element:td
					This is a list of shipping-method names. A shipping method must be enabled on the store to use it with a coupon. To check which shipping methods are enabled, please use the
				Element:a
					List Shipping Methods
					endpoint.
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Notes on Location Restrictions
			Node:
			(type) c
			(layer)1
				Element:p
					For the
				Element:code
					locations
					property listed above, you can look up all
				Element:code
					country_iso2
					codes supported by BigCommerce by using the
				Element:a
					List Countries
					endpoint, with a request of the following form:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					https://{store_hash}/api/v2/countries?limit=250
			Node:
			(type) c
			(layer)1
				Element:p
					To look up all
				Element:code
					state_iso2
					codes supported by BigCommerce, you can use the
				Element:a
					List States
					endpoint, with a request of the following form. (To supply its
				Element:code
					{country_id}
					parameter, query the
				Element:a
					List Countries
					endpoint as described just above.)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					https://{store_hash}/api/v2/countries/{country_id}/states
			Node:
			(type) c
			(layer)1
				Element:p
					For example, to look up codes for all U.S. states and territories, you would use a request of the following form:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					https://{store_hash}/api/v2/countries/226/states?limit=100
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
				Element:th
				Element:tbody
				Element:tr
				Element:td
				Element:strong
					Manages
				Element:td
				Element:tr
				Element:td
				Element:strong
					OAuth Scopes
				Element:td
					store_v2_marketing
				Element:tr
				Element:td
				Element:td
					store_v2_marketing_read_only
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					List Coupons
			Node:
			(type) c
			(layer)1
				Element:p
					Gets the collection of coupons. (Default sorting is by coupon/discount id, from lowest to highest.)
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					GET /stores/{store_hash}/v2/coupons
				Element:li
					Basic Auth >
				Element:code
					GET /api/v2/coupons
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Filters
			Node:
			(type) c
			(layer)1
				Element:p
					Filter parameters can be added to the URL query string to select specific coupons in the collection.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Type
				Element:th
					Example
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
					string
				Element:td
					/api/v2/coupons?id={value}
				Element:tr
				Element:td
					code
				Element:td
					string
				Element:td
					/api/v2/coupons?code={value}
				Element:tr
				Element:td
					name
				Element:td
					string
				Element:td
					/api/v2/coupons?name={value}
				Element:tr
				Element:td
					type
				Element:td
					string
				Element:td
					/api/v2/coupons?type={value}
				Element:tr
				Element:td
					min_id
				Element:td
					int
				Element:td
					/api/v2/coupons?min_id={value}
				Element:tr
				Element:td
					max_id
				Element:td
					int
				Element:td
					/api/v2/coupons?max_id={value}
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Pagination
			Node:
			(type) c
			(layer)1
				Element:p
					Parameters can be added to the URL query string to paginate the collection. The maximum limit is 250. If a limit isn’t provided, up to 50 coupons are returned by default.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Type
				Element:th
					Example
				Element:tbody
				Element:tr
				Element:td
					Page
				Element:td
					int
				Element:td
					/api/v2/coupons?page={number}
				Element:tr
				Element:td
					Limit
				Element:td
					int
				Element:td
					/api/v2/coupons?limit={count}
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"5% off order total"
				Element:span
					,
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"per_item_discount"
				Element:span
					,
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"5.0000"
				Element:span
					,
				Element:span
				Element:span
					"min_purchase"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"expires"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"enabled"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"code"
				Element:span
					:
				Element:span
				Element:span
					"4F75AF0C3802D39"
				Element:span
					,
				Element:span
				Element:span
					"applies_to"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"entity"
				Element:span
					:
				Element:span
				Element:span
					"categories"
				Element:span
					,
				Element:span
				Element:span
					"ids"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					0
				Element:span
				Element:span
					]
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"num_uses"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"max_uses"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"max_uses_per_customer"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"restricted_to"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"countries"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					"AU"
				Element:span
				Element:span
					]
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"shipping_methods"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					2
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"10% off order total"
				Element:span
					,
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"per_item_discount"
				Element:span
					,
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"10.0000"
				Element:span
					,
				Element:span
				Element:span
					"min_purchase"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"expires"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"enabled"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"code"
				Element:span
					:
				Element:span
				Element:span
					"CBD1455FDA13815"
				Element:span
					,
				Element:span
				Element:span
					"applies_to"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"entity"
				Element:span
					:
				Element:span
				Element:span
					"categories"
				Element:span
					,
				Element:span
				Element:span
					"ids"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					0
				Element:span
				Element:span
					]
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"num_uses"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"max_uses"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"max_uses_per_customer"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"restricted_to"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"states"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"AU"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					"Australian Capital Territory"
				Element:span
				Element:span
					]
				Element:span
				Element:span
					}
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"shipping_methods"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					3
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Free shipping"
				Element:span
					,
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"free_shipping"
				Element:span
					,
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"min_purchase"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"expires"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"enabled"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"code"
				Element:span
					:
				Element:span
				Element:span
					"7E97D5F3F75FA2D"
				Element:span
					,
				Element:span
				Element:span
					"applies_to"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"entity"
				Element:span
					:
				Element:span
				Element:span
					"categories"
				Element:span
					,
				Element:span
				Element:span
					"ids"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					0
				Element:span
				Element:span
					]
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"num_uses"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"max_uses"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"max_uses_per_customer"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"restricted_to"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"zips"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"AU"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					"2000"
				Element:span
					,
				Element:span
				Element:span
					"20??"
				Element:span
				Element:span
					]
				Element:span
				Element:span
					}
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"shipping_methods"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					4
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"$5 off shipping"
				Element:span
					,
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"shipping_discount"
				Element:span
					,
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"5.0000"
				Element:span
					,
				Element:span
				Element:span
					"min_purchase"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"expires"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"enabled"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"code"
				Element:span
					:
				Element:span
				Element:span
					"DC0C1CC8807DAC8"
				Element:span
					,
				Element:span
				Element:span
					"applies_to"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"entity"
				Element:span
					:
				Element:span
				Element:span
					"categories"
				Element:span
					,
				Element:span
				Element:span
					"ids"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					0
				Element:span
				Element:span
					]
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"num_uses"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"max_uses"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"max_uses_per_customer"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"restricted_to"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"shipping_methods"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					5
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"only for shipping_flatrate"
				Element:span
					,
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"0"
				Element:span
					,
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"min_purchase"
				Element:span
					:
				Element:span
				Element:span
					"100.0000"
				Element:span
					,
				Element:span
				Element:span
					"expires"
				Element:span
					:
				Element:span
				Element:span
					"Thu, 31 Jan 2013 00:00:00 +0000"
				Element:span
					,
				Element:span
				Element:span
					"enabled"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"code"
				Element:span
					:
				Element:span
				Element:span
					"shippingFlatrate-2"
				Element:span
					,
				Element:span
				Element:span
					"applies_to"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"entity"
				Element:span
					:
				Element:span
				Element:span
					"products"
				Element:span
					,
				Element:span
				Element:span
					"ids"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					32
				Element:span
				Element:span
					]
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"num_uses"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"max_uses"
				Element:span
					:
				Element:span
				Element:span
					10
				Element:span
					,
				Element:span
				Element:span
					"max_uses_per_customer"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"restricted_to"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"shipping_methods"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					"shipping_flatrate"
				Element:span
				Element:span
					]
				Element:span
				Element:span
					}
				Element:span
				Element:span
					]
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Get a Coupon
			Node:
			(type) c
			(layer)1
				Element:p
					Gets a coupon.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					GET /stores/{store_hash}/v2/coupons/{id}
				Element:li
					Basic Auth “>
				Element:code
					GET /api/v2/coupons/{id}
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"5% off order total"
				Element:span
					,
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"per_item_discount"
				Element:span
					,
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"5.0000"
				Element:span
					,
				Element:span
				Element:span
					"min_purchase"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"expires"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"enabled"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"code"
				Element:span
					:
				Element:span
				Element:span
					"4F75AF0C3802D39"
				Element:span
					,
				Element:span
				Element:span
					"applies_to"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"entity"
				Element:span
					:
				Element:span
				Element:span
					"categories"
				Element:span
					,
				Element:span
				Element:span
					"ids"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					0
				Element:span
				Element:span
					]
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"num_uses"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"max_uses"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"max_uses_per_customer"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"restricted_to"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"shipping_methods"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Get a Count of Coupons
			Node:
			(type) c
			(layer)1
				Element:p
					Gets a count of the number of coupons in the store.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					GET /stores/{store_hash}/v2/coupons/count
				Element:li
					Basic Auth >
				Element:code
					GET /api/v2/coupons/count
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"count"
				Element:span
					:
				Element:span
				Element:span
					65
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Create a Coupon
			Node:
			(type) c
			(layer)1
				Element:p
					Creates a new coupon.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					POST /stores/{store_hash}/v2/coupons
				Element:li
					Basic Auth >
				Element:code
					POST /api/v2/coupons
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Read-only Properties
			Node:
			(type) c
			(layer)1
				Element:p
					The following properties of the coupon are read-only. If one or more of these properties are included in the request, it will be rejected:
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					id
				Element:li
					num_uses
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Requirements
			Node:
			(type) c
			(layer)1
				Element:p
					The following properties of the coupon are required. The request won’t be fulfilled unless these properties are valid:
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					name
				Element:li
					code
				Element:li
					type
				Element:li
					amount
				Element:li
					applies_to
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Notes
			Node:
			(type) c
			(layer)1
				Element:p
					The coupon type can be one of the following:
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					per_item_discount
				Element:li
					per_total_discount
				Element:li
					shipping_discount
				Element:li
					free_shipping
				Element:li
					percentage_discount
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					{ "name": "5% off order total", "type": "per_item_discount", "code": "4F75AF0C3802D39", "enabled": true, "amount": "5", "applies_to": { "entity": "categories", "ids": [ 0 ] } }
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"5% off order total"
				Element:span
					,
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"per_item_discount"
				Element:span
					,
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"5.0000"
				Element:span
					,
				Element:span
				Element:span
					"min_purchase"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"expires"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"enabled"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"code"
				Element:span
					:
				Element:span
				Element:span
					"4F75AF0C3802D39"
				Element:span
					,
				Element:span
				Element:span
					"applies_to"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"entity"
				Element:span
					:
				Element:span
				Element:span
					"categories"
				Element:span
					,
				Element:span
				Element:span
					"ids"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					0
				Element:span
				Element:span
					]
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"num_uses"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"max_uses"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"max_uses_per_customer"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"restricted_to"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"shipping_methods"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Update a Coupon
			Node:
			(type) c
			(layer)1
				Element:p
					Updates an existing coupon.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					PUT /stores/{store_hash}/v2/coupons/{id}
				Element:li
					Basic Auth >
				Element:code
					PUT /api/v2/coupons/{id}
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Read-only Properties
			Node:
			(type) c
			(layer)1
				Element:p
					The following properties of the coupon are read-only. If one or more of these properties are included in the request, it will be rejected:
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					id
				Element:li
					num_uses
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Requirements
			Node:
			(type) c
			(layer)1
				Element:p
					The following property of the coupon is required. If it is not included in the
				Element:code
					PUT
					request, its existing value on the coupon will be cleared:
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					applies_to
			Node:
			(type) c
			(layer)1
				Element:p
					Note that if the
				Element:code
					applies_to
					value is cleared, you can restore it to the coupon by reapplying the
				Element:code
					applies_to
					value in a new PUT request.
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"5% off order total"
				Element:span
					,
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"per_item_discount"
				Element:span
					,
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"5.0000"
				Element:span
					,
				Element:span
				Element:span
					"min_purchase"
				Element:span
					:
				Element:span
				Element:span
					"0.0000"
				Element:span
					,
				Element:span
				Element:span
					"expires"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"enabled"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"code"
				Element:span
					:
				Element:span
				Element:span
					"4F75AF0C3802D39"
				Element:span
					,
				Element:span
				Element:span
					"applies_to"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"entity"
				Element:span
					:
				Element:span
				Element:span
					"categories"
				Element:span
					,
				Element:span
				Element:span
					"ids"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					0
				Element:span
				Element:span
					]
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"num_uses"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"max_uses"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"max_uses_per_customer"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"restricted_to"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"shipping_methods"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Delete a Coupon
			Node:
			(type) c
			(layer)1
				Element:p
					Deletes a coupon.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					DELETE /stores/{store_hash}/v2/coupons/{id}
				Element:li
					Basic Auth >
				Element:code
					DELETE /api/v2/coupons/{id}
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Delete All Coupons
			Node:
			(type) c
			(layer)1
				Element:p
					Deletes all coupons in the store.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					DELETE /stores/{store_hash}/v2/coupons
				Element:li
					Basic Auth >
				Element:code
					DELETE /api/v2/coupons
			Node:
			(type) c
			(layer)1
				Element:h2
				Element:span
					Banners
			Node:
			(type) c
			(layer)1
				Element:p
					Banners available to display on a store.
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Banner Object – Properties
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Name
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					name
				Element:td
					string
				Element:td
					Required field.
				Element:tr
				Element:td
					page
				Element:td
					enum
				Element:td
					‘home_page’, 'category_page’, 'brand_page’, 'search_page’. Required field.
				Element:tr
				Element:td
					dateto
				Element:td
					date
				Element:td
					If the datetype is set as 'custom’, this field specifies the date when the banner should stop being visible on the storefront.
				Element:tr
				Element:td
					content
				Element:td
					text
				Element:td
					Required field.
				Element:tr
				Element:td
					bannerid
				Element:td
					int
				Element:td
					Read-only.
				Element:tr
				Element:td
					datefrom
				Element:td
					date
				Element:td
					If the datetype is set as 'custom’, this field specifies the date when the banner should become visible on the storefront.
				Element:tr
				Element:td
					datetype
				Element:td
					enum
				Element:td
					Accepted values are 'always’ or 'custom’. This specifies whether the banner should be visible during a specific date range. Required field.
				Element:tr
				Element:td
					location
				Element:td
					enum
				Element:td
					'top’, 'bottom’. Required field.
				Element:tr
				Element:td
					datecreated
				Element:td
					date
				Element:td
					Date the banner was first created. This will default to today’s date.
				Element:tr
				Element:td
					catorbrandid
				Element:td
					int
				Element:td
					ID for the brand or category.
				Element:tr
				Element:td
					status/visible
				Element:td
					int
				Element:td
					Integer value denoting whether or not the banner is visible on the storefront: 1 = visible; 0 = not visible.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
				Element:th
				Element:tbody
				Element:tr
				Element:td
				Element:strong
					Manages
				Element:td
					Banner Object
				Element:tr
				Element:td
				Element:strong
					OAuth Scopes
				Element:td
					store_v2_marketing
				Element:tr
				Element:td
				Element:td
					store_v2_marketing_read_only
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					List Banners
			Node:
			(type) c
			(layer)1
				Element:p
					Gets the banners available. (Default sorting is by banner id, from lowest to highest.)
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					GET /stores/{store_hash}/v2/banners
				Element:li
					Basic Auth >
				Element:code
					GET /api/v2/banners
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Filters
			Node:
			(type) c
			(layer)1
				Element:p
					Filter parameters can be added to the URL query string to select specific banners in the collection.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Type
				Element:th
					Example
				Element:tbody
				Element:tr
				Element:td
					min_id
				Element:td
					int
				Element:td
					/api/v2/banners?min_id={value}
				Element:tr
				Element:td
					max_id
				Element:td
					int
				Element:td
					/api/v2/banners?max_id={value}
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Pagination
			Node:
			(type) c
			(layer)1
				Element:p
					Parameters can be added to the URL query string to paginate the collection. The maximum limit is 250. If a limit isn’t provided, up to 50 banners are returned by default.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Type
				Element:th
					Example
				Element:tbody
				Element:tr
				Element:td
					page
				Element:td
					int
				Element:td
					/api/v2/banners?page={number}
				Element:tr
				Element:td
					limit
				Element:td
					int
				Element:td
					/api/v2/banners?limit={count}
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"banners"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"banner"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"1"
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Grand Closing Sale"
				Element:span
					,
				Element:span
				Element:span
					"page"
				Element:span
					:
				Element:span
				Element:span
					"home_page"
				Element:span
					,
				Element:span
				Element:span
					"content"
				Element:span
					:
				Element:span
				Element:span
					"Thanks for shopping with us."
				Element:span
					,
				Element:span
				Element:span
					"date_to"
				Element:span
					:
				Element:span
				Element:span
					"1393218000"
				Element:span
					,
				Element:span
				Element:span
					"item_id"
				Element:span
					:
				Element:span
				Element:span
					"0"
				Element:span
					,
				Element:span
				Element:span
					"visible"
				Element:span
					:
				Element:span
				Element:span
					"0"
				Element:span
					,
				Element:span
				Element:span
					"location"
				Element:span
					:
				Element:span
				Element:span
					"top"
				Element:span
					,
				Element:span
				Element:span
					"date_from"
				Element:span
					:
				Element:span
				Element:span
					"1391576400"
				Element:span
					,
				Element:span
				Element:span
					"date_type"
				Element:span
					:
				Element:span
				Element:span
					"custom"
				Element:span
					,
				Element:span
				Element:span
					"date_created"
				Element:span
					:
				Element:span
				Element:span
					"1392073898"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"2"
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"New Year Nerd Bling"
				Element:span
					,
				Element:span
				Element:span
					"page"
				Element:span
					:
				Element:span
				Element:span
					"category_page"
				Element:span
					,
				Element:span
				Element:span
					"content"
				Element:span
					:
				Element:span
				Element:span
					"Discount on Apparel for Orders of $20 or more to Celebrate 2014. Use code NRDBLING14 at Checkout."
				Element:span
					,
				Element:span
				Element:span
					"date_to"
				Element:span
					:
				Element:span
				Element:span
					"1394427600"
				Element:span
					,
				Element:span
				Element:span
					"item_id"
				Element:span
					:
				Element:span
				Element:span
					"30"
				Element:span
					,
				Element:span
				Element:span
					"visible"
				Element:span
					:
				Element:span
				Element:span
					"0"
				Element:span
					,
				Element:span
				Element:span
					"location"
				Element:span
					:
				Element:span
				Element:span
					"top"
				Element:span
					,
				Element:span
				Element:span
					"date_from"
				Element:span
					:
				Element:span
				Element:span
					"1392008400"
				Element:span
					,
				Element:span
				Element:span
					"date_type"
				Element:span
					:
				Element:span
				Element:span
					"custom"
				Element:span
					,
				Element:span
				Element:span
					"date_created"
				Element:span
					:
				Element:span
				Element:span
					"1392073935"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"3"
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Test"
				Element:span
					,
				Element:span
				Element:span
					"page"
				Element:span
					:
				Element:span
				Element:span
					"home_page"
				Element:span
					,
				Element:span
				Element:span
					"content"
				Element:span
					:
				Element:span
				Element:span
					"The latest in popular board games. Game night fun for the whole family."
				Element:span
					,
				Element:span
				Element:span
					"date_to"
				Element:span
					:
				Element:span
				Element:span
					"0"
				Element:span
					,
				Element:span
				Element:span
					"item_id"
				Element:span
					:
				Element:span
				Element:span
					"0"
				Element:span
					,
				Element:span
				Element:span
					"visible"
				Element:span
					:
				Element:span
				Element:span
					"0"
				Element:span
					,
				Element:span
				Element:span
					"location"
				Element:span
					:
				Element:span
				Element:span
					"top"
				Element:span
					,
				Element:span
				Element:span
					"date_from"
				Element:span
					:
				Element:span
				Element:span
					"0"
				Element:span
					,
				Element:span
				Element:span
					"date_type"
				Element:span
					:
				Element:span
				Element:span
					"always"
				Element:span
					,
				Element:span
				Element:span
					"date_created"
				Element:span
					:
				Element:span
				Element:span
					"1429485000"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"4"
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Hi, Jason"
				Element:span
					,
				Element:span
				Element:span
					"page"
				Element:span
					:
				Element:span
				Element:span
					"home_page"
				Element:span
					,
				Element:span
				Element:span
					"content"
				Element:span
					:
				Element:span
				Element:span
					"Swanky"
				Element:span
					,
				Element:span
				Element:span
					"date_to"
				Element:span
					:
				Element:span
				Element:span
					"0"
				Element:span
					,
				Element:span
				Element:span
					"item_id"
				Element:span
					:
				Element:span
				Element:span
					"0"
				Element:span
					,
				Element:span
				Element:span
					"visible"
				Element:span
					:
				Element:span
				Element:span
					"0"
				Element:span
					,
				Element:span
				Element:span
					"location"
				Element:span
					:
				Element:span
				Element:span
					"top"
				Element:span
					,
				Element:span
				Element:span
					"date_from"
				Element:span
					:
				Element:span
				Element:span
					"0"
				Element:span
					,
				Element:span
				Element:span
					"date_type"
				Element:span
					:
				Element:span
				Element:span
					"always"
				Element:span
					,
				Element:span
				Element:span
					"date_created"
				Element:span
					:
				Element:span
				Element:span
					"1441858037"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					]
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Get a Banner
			Node:
			(type) c
			(layer)1
				Element:p
					Retrieves a specified banner.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					GET /stores/{store_hash}/v2/banners/{id}
				Element:li
					Basic Auth >
				Element:code
					GET /api/v2/banners/{id}
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"banner"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"4"
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Hi, Jason"
				Element:span
					,
				Element:span
				Element:span
					"page"
				Element:span
					:
				Element:span
				Element:span
					"home_page"
				Element:span
					,
				Element:span
				Element:span
					"content"
				Element:span
					:
				Element:span
				Element:span
					"Swanky"
				Element:span
					,
				Element:span
				Element:span
					"date_to"
				Element:span
					:
				Element:span
				Element:span
					"0"
				Element:span
					,
				Element:span
				Element:span
					"item_id"
				Element:span
					:
				Element:span
				Element:span
					"0"
				Element:span
					,
				Element:span
				Element:span
					"visible"
				Element:span
					:
				Element:span
				Element:span
					"0"
				Element:span
					,
				Element:span
				Element:span
					"location"
				Element:span
					:
				Element:span
				Element:span
					"top"
				Element:span
					,
				Element:span
				Element:span
					"date_from"
				Element:span
					:
				Element:span
				Element:span
					"0"
				Element:span
					,
				Element:span
				Element:span
					"date_type"
				Element:span
					:
				Element:span
				Element:span
					"always"
				Element:span
					,
				Element:span
				Element:span
					"date_created"
				Element:span
					:
				Element:span
				Element:span
					"1441858037"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Create a Banner
			Node:
			(type) c
			(layer)1
				Element:p
					Creates a new banner.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					POST /stores/{store_hash}/v2/banners
				Element:li
					Basic Auth >
				Element:code
					POST /api/v2/banners
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Read-only Properties
			Node:
			(type) c
			(layer)1
				Element:p
					The following properties of the banner are read-only. If one or more of these properties are included in the request, it will be rejected.
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Requirements
			Node:
			(type) c
			(layer)1
				Element:p
					The following properties of the banner are required. The request won’t be fulfilled unless these properties are valid.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					name
				Element:li
					content
				Element:li
					page
				Element:li
					location
				Element:li
					date_type
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"banner"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"5"
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"test"
				Element:span
					,
				Element:span
				Element:span
					"page"
				Element:span
					:
				Element:span
				Element:span
					"home_page"
				Element:span
					,
				Element:span
				Element:span
					"content"
				Element:span
					:
				Element:span
				Element:span
					"this is a test"
				Element:span
					,
				Element:span
				Element:span
					"date_to"
				Element:span
					:
				Element:span
				Element:span
					"0"
				Element:span
					,
				Element:span
				Element:span
					"item_id"
				Element:span
					:
				Element:span
				Element:span
					"0"
				Element:span
					,
				Element:span
				Element:span
					"visible"
				Element:span
					:
				Element:span
				Element:span
					"0"
				Element:span
					,
				Element:span
				Element:span
					"location"
				Element:span
					:
				Element:span
				Element:span
					"top"
				Element:span
					,
				Element:span
				Element:span
					"date_from"
				Element:span
					:
				Element:span
				Element:span
					"0"
				Element:span
					,
				Element:span
				Element:span
					"date_type"
				Element:span
					:
				Element:span
				Element:span
					"always"
				Element:span
					,
				Element:span
				Element:span
					"date_created"
				Element:span
					:
				Element:span
				Element:span
					"1449168936"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Update a Banner
			Node:
			(type) c
			(layer)1
				Element:p
					Updates an existing banner. Your request may update any of the properties that are writeable for the Create (POST) operation.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					PUT /stores/{store_hash}/v2/banners/{id}
				Element:li
					Basic Auth >
				Element:code
					PUT /api/v2/banners/{id}
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Read-only Properties
			Node:
			(type) c
			(layer)1
				Element:p
					The following properties of the banner are read-only. If one or more of these properties are included in the request, it will be rejected.
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"banner"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"4"
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Hi, Jason"
				Element:span
					,
				Element:span
				Element:span
					"page"
				Element:span
					:
				Element:span
				Element:span
					"home_page"
				Element:span
					,
				Element:span
				Element:span
					"content"
				Element:span
					:
				Element:span
				Element:span
					"Swanky"
				Element:span
					,
				Element:span
				Element:span
					"date_to"
				Element:span
					:
				Element:span
				Element:span
					"0"
				Element:span
					,
				Element:span
				Element:span
					"item_id"
				Element:span
					:
				Element:span
				Element:span
					"0"
				Element:span
					,
				Element:span
				Element:span
					"visible"
				Element:span
					:
				Element:span
				Element:span
					"0"
				Element:span
					,
				Element:span
				Element:span
					"location"
				Element:span
					:
				Element:span
				Element:span
					"top"
				Element:span
					,
				Element:span
				Element:span
					"date_from"
				Element:span
					:
				Element:span
				Element:span
					"0"
				Element:span
					,
				Element:span
				Element:span
					"date_type"
				Element:span
					:
				Element:span
				Element:span
					"always"
				Element:span
					,
				Element:span
				Element:span
					"date_created"
				Element:span
					:
				Element:span
				Element:span
					"1441858037"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Delete a Banner
			Node:
			(type) c
			(layer)1
				Element:p
					Deletes a specified banner. (If successful, this will typically return a “204 No Content”.)
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					DELETE /stores/{store_hash}/v2/banners/{id}
				Element:li
					Basic Auth >
				Element:code
					DELETE /api/v2/banners/{id}
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Delete All Banners
			Node:
			(type) c
			(layer)1
				Element:p
					Deletes all banners associated with the store. (If successful, this will typically return a “204 No Content”.)
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					DELETE /stores/{store_hash}/v2/banners/
				Element:li
					Basic Auth >
				Element:code
					DELETE /api/v2/banners/
			Node:
			(type) c
			(layer)1
				Element:h2
				Element:span
					Gift Certificates
			Node:
			(type) c
			(layer)1
				Element:p
					Gift certificates available to offer to a store’s customers.
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Gift Certificate Object – Properties
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Name
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
					int
				Element:td
					The ID of the gift certificate. Read-only.
				Element:tr
				Element:td
					code
				Element:td
					string
				Element:td
					A unique string that the customer can input to redeem the gift certificate. If this field is not set, a value will be generated.
				Element:tr
				Element:td
					amount
				Element:td
					decimal
				Element:td
					Value of the gift certificate. Required field.
				Element:tr
				Element:td
					status
				Element:td
					enum
				Element:td
					The gift certificate’s status. Affects the customer’s ability to apply the code to orders: Values can be ‘pending’, ’active’, ’disabled’, or ’expired’.
				Element:tr
				Element:td
					balance
				Element:td
					decimal
				Element:td
					Remaining value of the gift certificate. If not set, will default to the
				Element:code
					amount
					.
				Element:tr
				Element:td
					message
				Element:td
					string
				Element:td
					Text that will be sent to the recipient, such as ‘Congratulations’.
				Element:tr
				Element:td
					to_name
				Element:td
					string
				Element:td
					Name of the recipient. Required field.
				Element:tr
				Element:td
					order_id
				Element:td
					int
				Element:td
					The ID of the order. Read-only.
				Element:tr
				Element:td
					template
				Element:td
					string
				Element:td
					The email theme to use in the message sent to the recipient.
				Element:tr
				Element:td
					to_email
				Element:td
					string
				Element:td
					Email of the recipient. Required field.
				Element:tr
				Element:td
					from_name
				Element:td
					string
				Element:td
					Name of the customer who purchased the gift certificate. Required field.
				Element:tr
				Element:td
					from_email
				Element:td
					string
				Element:td
					Email of the customer who purchased the gift certificate. Required field.
				Element:tr
				Element:td
					customer_id
				Element:td
					int
				Element:td
					The ID of the customer placing the order.
				Element:tr
				Element:td
					expiry_date
				Element:td
					date
				Element:td
					Date on which the gift certificate is set to expire.
				Element:tr
				Element:td
					purchase_date
				Element:td
					date
				Element:td
					Date the gift certificate was purchased. If not assigned, this will be set to today’s date.
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					List Gift Certificates
			Node:
			(type) c
			(layer)1
				Element:p
					Retrieves the gift certificates available. (Default sorting is by gift-certificate id, from lowest to highest.)
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth
				Element:code
					GET /stores/{store_hash}/v2/gift_certificates
				Element:br
				Element:li
					Basic Auth
				Element:code
					GET /api/v2/gift_certificates
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Filters
			Node:
			(type) c
			(layer)1
				Element:p
					Filter parameters can be added to the URL query string to select specific gift_certificates in the collection.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Type
				Element:th
					Example
				Element:tbody
				Element:tr
				Element:td
					min_id
				Element:td
					int
				Element:td
					/api/v2/gift_certificates?min_id={value}
				Element:tr
				Element:td
					max_id
				Element:td
					int
				Element:td
					/api/v2/gift_certificates?max_id={value}
				Element:tr
				Element:td
					code
				Element:td
					string
				Element:td
					/api/v2/gift_certificates?code={value}
				Element:tr
				Element:td
					to_name
				Element:td
					string
				Element:td
					/api/v2/gift_certificates?to_name={value}
				Element:tr
				Element:td
					to_email
				Element:td
					string
				Element:td
					/api/v2/gift_certificates?to_email={value}
				Element:tr
				Element:td
					from_name
				Element:td
					string
				Element:td
					/api/v2/gift_certificates?from_name={value}
				Element:tr
				Element:td
					from_email
				Element:td
					string
				Element:td
					/api/v2/gift_certificates?from_email={value}
			Node:
			(type) c
			(layer)1
				Element:p
					Parameters can be added to the URL query string to paginate the collection. The maximum limit is 250. If a limit isn’t provided, up to 50 gift_certificates are returned by default.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Type
				Element:th
					Example
				Element:tbody
				Element:tr
				Element:td
					page
				Element:td
					int
				Element:td
					/api/v2/gift_certificates?page={number}
				Element:tr
				Element:td
					limit
				Element:td
					int
				Element:td
					/api/v2/gift_certificates?limit={count}
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"giftcertificates"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"giftcertificate"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"24"
				Element:span
					,
				Element:span
				Element:span
					"code"
				Element:span
					:
				Element:span
				Element:span
					"10R-5E2-BO4-RWT"
				Element:span
					,
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"1000.0000"
				Element:span
					,
				Element:span
				Element:span
					"status"
				Element:span
					:
				Element:span
				Element:span
					"active"
				Element:span
					,
				Element:span
				Element:span
					"balance"
				Element:span
					:
				Element:span
				Element:span
					"500.0000"
				Element:span
					,
				Element:span
				Element:span
					"to_name"
				Element:span
					:
				Element:span
				Element:span
					"Alyss"
				Element:span
					,
				Element:span
				Element:span
					"order_id"
				Element:span
					:
				Element:span
				Element:span
					"1281"
				Element:span
					,
				Element:span
				Element:span
					"template"
				Element:span
					:
				Element:span
				Element:span
					"false"
				Element:span
					,
				Element:span
				Element:span
					"to_email"
				Element:span
					:
				Element:span
				Element:span
					"test@test.com"
				Element:span
					,
				Element:span
				Element:span
					"from_name"
				Element:span
					:
				Element:span
				Element:span
					"Noland"
				Element:span
					,
				Element:span
				Element:span
					"from_email"
				Element:span
					:
				Element:span
				Element:span
					"test1@test.com"
				Element:span
					,
				Element:span
				Element:span
					"customer_id"
				Element:span
					:
				Element:span
				Element:span
					"0"
				Element:span
					,
				Element:span
				Element:span
					"expiry_date"
				Element:span
					:
				Element:span
				Element:span
					"0"
				Element:span
					,
				Element:span
				Element:span
					"purchase_date"
				Element:span
					:
				Element:span
				Element:span
					"1454432829"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"25"
				Element:span
					,
				Element:span
				Element:span
					"code"
				Element:span
					:
				Element:span
				Element:span
					"10R-6E3-AO4-RST"
				Element:span
					,
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"700.0000"
				Element:span
					,
				Element:span
				Element:span
					"status"
				Element:span
					:
				Element:span
				Element:span
					"active"
				Element:span
					,
				Element:span
				Element:span
					"balance"
				Element:span
					:
				Element:span
				Element:span
					"700.0000"
				Element:span
					,
				Element:span
				Element:span
					"to_name"
				Element:span
					:
				Element:span
				Element:span
					"Alyss"
				Element:span
					,
				Element:span
				Element:span
					"order_id"
				Element:span
					:
				Element:span
				Element:span
					"0"
				Element:span
					,
				Element:span
				Element:span
					"template"
				Element:span
					:
				Element:span
				Element:span
					"false"
				Element:span
					,
				Element:span
				Element:span
					"to_email"
				Element:span
					:
				Element:span
				Element:span
					"test@test.com"
				Element:span
					,
				Element:span
				Element:span
					"from_name"
				Element:span
					:
				Element:span
				Element:span
					"Noland"
				Element:span
					,
				Element:span
				Element:span
					"from_email"
				Element:span
					:
				Element:span
				Element:span
					"test1@test.com"
				Element:span
					,
				Element:span
				Element:span
					"customer_id"
				Element:span
					:
				Element:span
				Element:span
					"0"
				Element:span
					,
				Element:span
				Element:span
					"expiry_date"
				Element:span
					:
				Element:span
				Element:span
					"0"
				Element:span
					,
				Element:span
				Element:span
					"purchase_date"
				Element:span
					:
				Element:span
				Element:span
					"1454433240"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"27"
				Element:span
					,
				Element:span
				Element:span
					"code"
				Element:span
					:
				Element:span
				Element:span
					"15R-6E3-AO4-RST"
				Element:span
					,
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"50.0000"
				Element:span
					,
				Element:span
				Element:span
					"status"
				Element:span
					:
				Element:span
				Element:span
					"active"
				Element:span
					,
				Element:span
				Element:span
					"balance"
				Element:span
					:
				Element:span
				Element:span
					"50.0000"
				Element:span
					,
				Element:span
				Element:span
					"to_name"
				Element:span
					:
				Element:span
				Element:span
					"Lyss"
				Element:span
					,
				Element:span
				Element:span
					"order_id"
				Element:span
					:
				Element:span
				Element:span
					"0"
				Element:span
					,
				Element:span
				Element:span
					"template"
				Element:span
					:
				Element:span
				Element:span
					"false"
				Element:span
					,
				Element:span
				Element:span
					"to_email"
				Element:span
					:
				Element:span
				Element:span
					"test5@test.com"
				Element:span
					,
				Element:span
				Element:span
					"from_name"
				Element:span
					:
				Element:span
				Element:span
					"Somethingelse"
				Element:span
					,
				Element:span
				Element:span
					"from_email"
				Element:span
					:
				Element:span
				Element:span
					"test15@test.com"
				Element:span
					,
				Element:span
				Element:span
					"customer_id"
				Element:span
					:
				Element:span
				Element:span
					"0"
				Element:span
					,
				Element:span
				Element:span
					"expiry_date"
				Element:span
					:
				Element:span
				Element:span
					"0"
				Element:span
					,
				Element:span
				Element:span
					"purchase_date"
				Element:span
					:
				Element:span
				Element:span
					"1454433621"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					]
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Get a Gift Certificate
			Node:
			(type) c
			(layer)1
				Element:p
					Retrieves a specified gift certificate.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth
				Element:code
					GET /stores/{store_hash}/v2/gift_certificates/{id}
				Element:li
					Basic Auth
				Element:code
					GET /api/v2/gift_certificates/{id}
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"giftcertificate"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"24"
				Element:span
					,
				Element:span
				Element:span
					"code"
				Element:span
					:
				Element:span
				Element:span
					"10R-5E2-BO4-RWT"
				Element:span
					,
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"500.0000"
				Element:span
					,
				Element:span
				Element:span
					"status"
				Element:span
					:
				Element:span
				Element:span
					"active"
				Element:span
					,
				Element:span
				Element:span
					"balance"
				Element:span
					:
				Element:span
				Element:span
					"500.0000"
				Element:span
					,
				Element:span
				Element:span
					"to_name"
				Element:span
					:
				Element:span
				Element:span
					"Jane"
				Element:span
					,
				Element:span
				Element:span
					"order_id"
				Element:span
					:
				Element:span
				Element:span
					"1281"
				Element:span
					,
				Element:span
				Element:span
					"template"
				Element:span
					:
				Element:span
				Element:span
					"false"
				Element:span
					,
				Element:span
				Element:span
					"to_email"
				Element:span
					:
				Element:span
				Element:span
					"test@test.com"
				Element:span
					,
				Element:span
				Element:span
					"from_name"
				Element:span
					:
				Element:span
				Element:span
					"Tarzan"
				Element:span
					,
				Element:span
				Element:span
					"from_email"
				Element:span
					:
				Element:span
				Element:span
					"test1@test.com"
				Element:span
					,
				Element:span
				Element:span
					"customer_id"
				Element:span
					:
				Element:span
				Element:span
					"0"
				Element:span
					,
				Element:span
				Element:span
					"expiry_date"
				Element:span
					:
				Element:span
				Element:span
					"0"
				Element:span
					,
				Element:span
				Element:span
					"purchase_date"
				Element:span
					:
				Element:span
				Element:span
					"1454432829"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Create a Gift Certificate
			Node:
			(type) c
			(layer)1
				Element:p
					Creates a new gift certificate.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth
				Element:code
					POST /stores/{store_hash}/v2/gift_certificates
				Element:li
					Basic Auth
				Element:code
					POST /api/v2/gift_certificates
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Read-only Properties
			Node:
			(type) c
			(layer)1
				Element:p
					The following properties of the gift certificate are read-only. If one or more of these properties are included in the request, it will be rejected:
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					id
				Element:li
					order_id
				Element:li
					template
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Requirements
			Node:
			(type) c
			(layer)1
				Element:p
					The following properties of the gift certificate are required. The request won’t be fulfilled unless these properties are valid.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					to_name
				Element:li
					to_email
				Element:li
					from_name
				Element:li
					from_email
				Element:li
					amount
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Notes
			Node:
			(type) c
			(layer)1
				Element:p
					When a gift certificate is created through the API, no email notification is triggered to the specified recipient.
			Node:
			(type) c
			(layer)1
				Element:p
					The gift certificate’s status can be one of the following:
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					pending
				Element:li
					active
				Element:li
					disabled
				Element:li
					expired
			Node:
			(type) c
			(layer)1
				Element:p
					The gift certificate’s template can be one of the following:
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					Birthday
				Element:li
					Boy
				Element:li
					Celebration
				Element:li
					Christmas
				Element:li
					General
				Element:li
					Girl
				Element:li
					{blank}
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Request
			Node:
			(type) c
			(layer)1
				Element:p
					Example request object:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"code"
				Element:span
					:
				Element:span
				Element:span
					"10R-6E3-AO4-RST"
				Element:span
					,
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"700.0000"
				Element:span
					,
				Element:span
				Element:span
					"status"
				Element:span
					:
				Element:span
				Element:span
					"active"
				Element:span
					,
				Element:span
				Element:span
					"to_name"
				Element:span
					:
				Element:span
				Element:span
					"Jane"
				Element:span
					,
				Element:span
				Element:span
					"to_email"
				Element:span
					:
				Element:span
				Element:span
					"test@test.com"
				Element:span
					,
				Element:span
				Element:span
					"from_name"
				Element:span
					:
				Element:span
				Element:span
					"Tarzan"
				Element:span
					,
				Element:span
				Element:span
					"from_email"
				Element:span
					:
				Element:span
				Element:span
					"test1@test.com"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"giftcertificate"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"25"
				Element:span
					,
				Element:span
				Element:span
					"code"
				Element:span
					:
				Element:span
				Element:span
					"10R-6E3-AO4-RST"
				Element:span
					,
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"700.0000"
				Element:span
					,
				Element:span
				Element:span
					"status"
				Element:span
					:
				Element:span
				Element:span
					"active"
				Element:span
					,
				Element:span
				Element:span
					"balance"
				Element:span
					:
				Element:span
				Element:span
					"700.0000"
				Element:span
					,
				Element:span
				Element:span
					"to_name"
				Element:span
					:
				Element:span
				Element:span
					"Jane"
				Element:span
					,
				Element:span
				Element:span
					"order_id"
				Element:span
					:
				Element:span
				Element:span
					"0"
				Element:span
					,
				Element:span
				Element:span
					"template"
				Element:span
					:
				Element:span
				Element:span
					"false"
				Element:span
					,
				Element:span
				Element:span
					"to_email"
				Element:span
					:
				Element:span
				Element:span
					"test@test.com"
				Element:span
					,
				Element:span
				Element:span
					"from_name"
				Element:span
					:
				Element:span
				Element:span
					"Tarzan"
				Element:span
					,
				Element:span
				Element:span
					"from_email"
				Element:span
					:
				Element:span
				Element:span
					"test1@test.com"
				Element:span
					,
				Element:span
				Element:span
					"customer_id"
				Element:span
					:
				Element:span
				Element:span
					"0"
				Element:span
					,
				Element:span
				Element:span
					"expiry_date"
				Element:span
					:
				Element:span
				Element:span
					"0"
				Element:span
					,
				Element:span
				Element:span
					"purchase_date"
				Element:span
					:
				Element:span
				Element:span
					"1454433240"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Update a Gift Certificate
			Node:
			(type) c
			(layer)1
				Element:p
					Updates an existing gift certificate.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth
				Element:code
					PUT /stores/{store_hash}/v2/gift_certificates/{ID}
				Element:li
					Basic Auth
				Element:code
					PUT /api/v2/gift_certificates/{ID}
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Read-only Properties
			Node:
			(type) c
			(layer)1
				Element:p
					The following properties of the gift certificate are read-only. If one or more of these properties are included in the request, it will be rejected:
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					id
				Element:li
					order_id
				Element:li
					template
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Request
			Node:
			(type) c
			(layer)1
				Element:p
					Example request object:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"1000.0000"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"giftcertificate"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"24"
				Element:span
					,
				Element:span
				Element:span
					"code"
				Element:span
					:
				Element:span
				Element:span
					"10R-5E2-BO4-RWT"
				Element:span
					,
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"1000.0000"
				Element:span
					,
				Element:span
				Element:span
					"status"
				Element:span
					:
				Element:span
				Element:span
					"active"
				Element:span
					,
				Element:span
				Element:span
					"balance"
				Element:span
					:
				Element:span
				Element:span
					"500.0000"
				Element:span
					,
				Element:span
				Element:span
					"to_name"
				Element:span
					:
				Element:span
				Element:span
					"Jane"
				Element:span
					,
				Element:span
				Element:span
					"order_id"
				Element:span
					:
				Element:span
				Element:span
					"1281"
				Element:span
					,
				Element:span
				Element:span
					"template"
				Element:span
					:
				Element:span
				Element:span
					"false"
				Element:span
					,
				Element:span
				Element:span
					"to_email"
				Element:span
					:
				Element:span
				Element:span
					"test@test.com"
				Element:span
					,
				Element:span
				Element:span
					"from_name"
				Element:span
					:
				Element:span
				Element:span
					"Tarzan"
				Element:span
					,
				Element:span
				Element:span
					"from_email"
				Element:span
					:
				Element:span
				Element:span
					"test1@test.com"
				Element:span
					,
				Element:span
				Element:span
					"customer_id"
				Element:span
					:
				Element:span
				Element:span
					"0"
				Element:span
					,
				Element:span
				Element:span
					"expiry_date"
				Element:span
					:
				Element:span
				Element:span
					"0"
				Element:span
					,
				Element:span
				Element:span
					"purchase_date"
				Element:span
					:
				Element:span
				Element:span
					"1454432829"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Delete a Gift Certificate
			Node:
			(type) c
			(layer)1
				Element:p
					Deletes a specified gift certificate. (If successful, this will typically return a “204 No Content”.)
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth
				Element:code
					DELETE /stores/{store_hash}/v2/gift_certificates/{id}
				Element:li
					Basic Auth
				Element:code
					DELETE /api/v2/gift_certificates/{id}
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Delete All Gift Certificates
			Node:
			(type) c
			(layer)1
				Element:p
					Deletes all gift certificates associated with the store. (If successful, this will typically return a “204 No Content”.)
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth
				Element:code
					DELETE /stores/{store_hash}/v2/gift_certificates
				Element:li
					Basic Auth
				Element:code
					DELETE /api/v2/gift_certificates
			Node:
			(type) h1
			(layer)1
				Element:h1
				Element:span
					Payments Reference
			Node:
			(type) c
			(layer)1
				Element:p
					The Payment Methods object, and List Payment Methods endpoint, help stores receive money from transactions.
			Node:
			(type) c
			(layer)1
				Element:h2
				Element:span
					Payment Methods
			Node:
			(type) c
			(layer)1
				Element:p
					Enabled payment types or methods in a store.
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Payment Method Object – Properties
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Name
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					code
				Element:td
					string
				Element:td
					Unique platform-wide code identifying the payment method.
				Element:tr
				Element:td
					name
				Element:td
					string
				Element:td
					Descriptive name of the payment method.
				Element:tr
				Element:td
					test_mode
				Element:td
					boolean
				Element:td
					Determines whether the payment gateway is in test mode. Always false for offline payment methods.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
				Element:th
				Element:tbody
				Element:tr
				Element:td
				Element:strong
					Manages
				Element:td
				Element:tr
				Element:td
				Element:strong
					OAuth Scopes
				Element:td
					store_v2_information
				Element:tr
				Element:td
				Element:td
					store_v2_information_read_only
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					List Payment Methods
			Node:
			(type) c
			(layer)1
				Element:p
					Gets the list of enabled payment methods. (Default sorting is by payment method, alphabetically from A to Z.)
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					Oauth >
				Element:code
					GET /stores/{store_hash}/v2/payments/methods
				Element:li
					Basic Auth >
				Element:code
					GET /api/v2/payments/methods
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Filters
			Node:
			(type) c
			(layer)1
				Element:p
					There are no filter parameters specific to payment methods.
			Node:
			(type) c
			(layer)1
				Element:h4
				Element:span
					Pagination
			Node:
			(type) c
			(layer)1
				Element:p
					Parameters can be added to the URL query string to paginate the collection. The maximum limit is 250. If a limit isn’t provided, up to 50 payment_methods are returned by default.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Type
				Element:th
					Example
				Element:tbody
				Element:tr
				Element:td
					page
				Element:td
					int
				Element:td
					/api/v2/payments/methods?page={number}
				Element:tr
				Element:td
					limit
				Element:td
					int
				Element:td
					/api/v2/payments/methods?limit={count}
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"code"
				Element:span
					:
				Element:span
				Element:span
					"bankdeposit"
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Bank Deposit"
				Element:span
					,
				Element:span
				Element:span
					"test_mode"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"code"
				Element:span
					:
				Element:span
				Element:span
					"cod"
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Cash on Delivery"
				Element:span
					,
				Element:span
				Element:span
					"test_mode"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"code"
				Element:span
					:
				Element:span
				Element:span
					"paypalexpress"
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"PayPal Express Checkout"
				Element:span
					,
				Element:span
				Element:span
					"test_mode"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"code"
				Element:span
					:
				Element:span
				Element:span
					"stripe"
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Stripe"
				Element:span
					,
				Element:span
				Element:span
					"test_mode"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
				Element:span
					}
				Element:span
				Element:span
					]
				Element:span
			Node:
			(type) h1
			(layer)1
				Element:h1
				Element:span
					Shipping Methods Reference
			Node:
			(type) c
			(layer)1
				Element:p
					The Shipping Methods object and endpoints help manage the shipping of physical items from merchant to shopper.
			Node:
			(type) c
			(layer)1
				Element:h2
				Element:span
					Shipping Method Object – Properties
			Node:
			(type) c
			(layer)1
				Element:p
					A Shipping Method object represents a shipping method enabled within the store.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Name
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
					int
				Element:td
					shipping method id
				Element:tr
				Element:td
					name
				Element:td
					string
				Element:td
					display name for shipping method
				Element:tr
				Element:td
					method_name
				Element:td
					string
				Element:td
					shipping method name
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
				Element:th
				Element:tbody
				Element:tr
				Element:td
				Element:strong
					Manages
				Element:td
				Element:tr
				Element:td
				Element:strong
					OAuth Scopes
				Element:td
					store_v2_information
				Element:tr
				Element:td
				Element:td
					store_v2_information_read_only
			Node:
			(type) c
			(layer)1
				Element:h2
				Element:span
					List Shipping Methods
			Node:
			(type) c
			(layer)1
				Element:p
					Gets the list of shipping methods. (Default sorting is by shipping-method id, from lowest to highest.)
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					GET /stores/{store_hash}/v2/shipping/methods
				Element:li
					Basic Auth >
				Element:code
					GET /api/v2/shipping/methods
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Filters
			Node:
			(type) c
			(layer)1
				Element:p
					Filter parameters can be added to the URL query string to select specific shipping_methods in the collection.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Type
				Element:th
					Example
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
					string
				Element:td
					/api/v2/shipping/methods?id={value}
				Element:tr
				Element:td
					min_id
				Element:td
					int
				Element:td
					/api/v2/shipping/methods?min_id={value}
				Element:tr
				Element:td
					max_id
				Element:td
					int
				Element:td
					/api/v2/shipping/methods?max_id={value}
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Pagination
			Node:
			(type) c
			(layer)1
				Element:p
					Parameters can be added to the URL query string to paginate the collection. The maximum limit is 250. If a limit isn’t provided, up to 50 shipping_methods are returned by default.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Type
				Element:th
					Example
				Element:tbody
				Element:tr
				Element:td
					Page
				Element:td
					int
				Element:td
					/api/v2/shipping/methods?page={number}
				Element:tr
				Element:td
					Limit
				Element:td
					int
				Element:td
					/api/v2/shipping/methods?limit={count}
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Australia Post"
				Element:span
					,
				Element:span
				Element:span
					"method_name"
				Element:span
					:
				Element:span
				Element:span
					"shipping_auspost"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					2
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Canada Post"
				Element:span
					,
				Element:span
				Element:span
					"method_name"
				Element:span
					:
				Element:span
				Element:span
					"shipping_canpost"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					]
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h2
				Element:span
					Get a Shipping Method
			Node:
			(type) c
			(layer)1
				Element:p
					Gets a shipping method.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					GET /stores/{store_hash}/v2/shipping/methods/{id}
				Element:li
					Basic Auth >
				Element:code
					GET /api/v2/shipping/methods/{id}
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Australia Post"
				Element:span
					,
				Element:span
				Element:span
					"method_name"
				Element:span
					:
				Element:span
				Element:span
					"shipping_auspost"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) h1
			(layer)1
				Element:h1
				Element:span
					Store Information Reference
			Node:
			(type) c
			(layer)1
				Element:p
					The Store Information object, and Get Store Information endpoint, manage store profile settings.
			Node:
			(type) c
			(layer)1
				Element:h2
				Element:span
					Store Information Object – Properties
			Node:
			(type) c
			(layer)1
				Element:p
					A Store Information object represents an individual store’s profile and metadata.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Name
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
					string
				Element:td
					Unique store identifier.
				Element:tr
				Element:td
					domain
				Element:td
					string
				Element:td
					Primary domain name.
				Element:tr
				Element:td
					secure_URL
				Element:td
					string
				Element:td
					Store’s current HTTPS URL.
				Element:tr
				Element:td
					name
				Element:td
					string
				Element:td
					Store’s name.
				Element:tr
				Element:td
					first_name
				Element:td
					string
				Element:td
					Primary contact’s first name (as defined during the store sign-up process).
				Element:tr
				Element:td
					last_name
				Element:td
					string
				Element:td
					Primary contact’s last name (as defined during the store sign-up process).
				Element:tr
				Element:td
					address
				Element:td
					string
				Element:td
					Display address.
				Element:tr
				Element:td
					country
				Element:td
					string
				Element:td
					Country where the store is located (as defined during the store sign-up process).
				Element:tr
				Element:td
					phone
				Element:td
					string
				Element:td
					Display phone number.
				Element:tr
				Element:td
					admin_email
				Element:td
					string
				Element:td
					Email address of the store administrator/owner.
				Element:tr
				Element:td
					order_email
				Element:td
					string
				Element:td
					Email address for orders and fulfillment.
				Element:tr
				Element:td
					timezone
				Element:td
					object
				Element:td
					An object that defines the store’s time zone, following conventions of the PHP
				Element:code
					date
					function. (For details, please see:
				Element:a
					http://php.net/manual/en/function.date.php
					.) This object contains the following elements:
				Element:br
				Element:code
					name
					: a string identifying the time zone, in the format:
				Element:code
					<Continent-name>/<City-name>
					.
				Element:br
				Element:code
					raw_offset
					: a negative or positive number, identifying the offset from UTC/GMT, in seconds, during winter/standard time.
				Element:br
				Element:code
					dst_offset
					: -/+ (number) offset from UTC/GMT, in seconds, during summer/daylight saving time.
				Element:br
				Element:code
					dst_correction
					: a boolean indicating whether this time zone observes daylight saving time.
				Element:br
				Element:code
					date_format
					is a nested object, which contains the following internal elements:
				Element:br
					*
				Element:code
					display
					: string that defines dates’ display format, in the pattern:
				Element:code
					M jS Y
					;
				Element:br
					*
				Element:code
					export
					: string that defines the CSV export format for orders, customers, and products, in the pattern:
				Element:code
					M jS Y
					;
				Element:br
					*
				Element:code
					extended_display
					: string that defines dates’ extended-display format, in the pattern:
				Element:code
					M jS Y @ g:i A
					.
				Element:tr
				Element:td
					language
				Element:td
					string
				Element:td
					Default language code.
				Element:tr
				Element:td
					currency
				Element:td
					string
				Element:td
					Default currency code.
				Element:tr
				Element:td
					currency_symbol
				Element:td
					string
				Element:td
					Default symbol for values in the currency.
				Element:tr
				Element:td
					decimal_separator
				Element:td
					string
				Element:td
					Default decimal separator for values in the currency.
				Element:tr
				Element:td
					thousands_separator
				Element:td
					string
				Element:td
					Default thousands separator for values in the currency.
				Element:tr
				Element:td
					decimal_places
				Element:td
					string
				Element:td
					Default decimal places for values in the currency.
				Element:tr
				Element:td
					currency_symbol_location
				Element:td
					string
				Element:td
					Default position of the currency symbol (left or right).
				Element:tr
				Element:td
					weight_units
				Element:td
					string
				Element:td
					Default weight units (metric or imperial).
				Element:tr
				Element:td
					dimension_units
				Element:td
					string
				Element:td
					Default dimension units (metric or imperial).
				Element:tr
				Element:td
					dimension_decimal_places
				Element:td
					string
				Element:td
					The number of decimal places.
				Element:tr
				Element:td
					dimension_decimal_token
				Element:td
					string
				Element:td
					The symbol that separates the whole numbers from the decimal points.
				Element:tr
				Element:td
					dimension_thousands_token
				Element:td
					string
				Element:td
					The symbol used to denote thousands.
				Element:tr
				Element:td
					plan_name
				Element:td
					string
				Element:td
					Name of the BigCommerce plan to which this store is subscribed.
				Element:tr
				Element:td
					plan_level
				Element:td
					string
				Element:td
					Level of the BigCommerce plan to which this store is subscribed.
				Element:tr
				Element:td
					industry
				Element:td
					string
				Element:td
					Industry, or vertical category, in which the business operates. (As selected from drop-down list during the store sign-up process.)
				Element:tr
				Element:td
					logo
				Element:td
					object
				Element:td
				Element:tr
				Element:td
					is_price_entered_with_tax
				Element:td
					boolean
				Element:td
					A Boolean value that indicates whether or not prices are entered with tax.
				Element:tr
				Element:td
					active_comparison_modules
				Element:td
					array
				Element:td
				Element:tr
				Element:td
					features
				Element:td
					object
				Element:td
					Array of flags for features that affect app compatibility or functionality. Child
				Element:code
					stencil_enabled
					element is a Boolean that indicates whether a store is using a Stencil theme.
			Node:
			(type) c
			(layer)1
				Element:h2
				Element:span
					Store Information – Webhook Events
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Store Cancelled
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					store/app/uninstall
			Node:
			(type) c
			(layer)1
				Element:p
					Occurs when a client store is cancelled and uninstalled from the platform.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
				Element:th
				Element:tbody
				Element:tr
				Element:td
				Element:strong
					Manages
				Element:td
				Element:tr
				Element:td
				Element:strong
					OAuth Scopes
				Element:td
					store_v2_information
				Element:tr
				Element:td
				Element:td
					store_v2_information_read_only
			Node:
			(type) c
			(layer)1
				Element:h2
				Element:span
					Get a Store’s Information
			Node:
			(type) c
			(layer)1
				Element:p
					Gets metadata about a store.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					GET /stores/{store_hash}/v2/store
				Element:li
					Basic Auth >
				Element:code
					GET /api/v2/store
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Response
			Node:
			(type) c
			(layer)1
				Element:p
					Example JSON returned in the response:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"cl1xgr"
				Element:span
					,
				Element:span
				Element:span
					"domain"
				Element:span
					:
				Element:span
				Element:span
					"sandbox.mybigcommerce.com"
				Element:span
					,
				Element:span
				Element:span
					"secure_url"
				Element:span
					:
				Element:span
				Element:span
					"https://store-abc123.mybigcommerce.com"
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"My Sandbox Store"
				Element:span
					,
				Element:span
				Element:span
					"first_name"
				Element:span
					:
				Element:span
				Element:span
					"Sylvester"
				Element:span
					,
				Element:span
				Element:span
					"last_name"
				Element:span
					:
				Element:span
				Element:span
					"Biggs"
				Element:span
					,
				Element:span
				Element:span
					"address"
				Element:span
					:
				Element:span
				Element:span
					"555 Test Way\nQuality City, CA 94109\nUSA"
				Element:span
					,
				Element:span
				Element:span
					"country"
				Element:span
					:
				Element:span
				Element:span
					"United States"
				Element:span
					,
				Element:span
				Element:span
					"phone"
				Element:span
					:
				Element:span
				Element:span
					"567-098-9274"
				Element:span
					,
				Element:span
				Element:span
					"admin_email"
				Element:span
					:
				Element:span
				Element:span
					"admin@bigcommerce.com"
				Element:span
					,
				Element:span
				Element:span
					"order_email"
				Element:span
					:
				Element:span
				Element:span
					"order@bigcommerce.com"
				Element:span
					,
				Element:span
				Element:span
					"timezone"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"America/Vancouver"
				Element:span
					,
				Element:span
				Element:span
					"raw_offset"
				Element:span
					:
				Element:span
				Element:span
					-28800
				Element:span
					,
				Element:span
				Element:span
					"dst_offset"
				Element:span
					:
				Element:span
				Element:span
					-25200
				Element:span
					,
				Element:span
				Element:span
					"dst_correction"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"date_format"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"display"
				Element:span
					:
				Element:span
				Element:span
					"M jS Y"
				Element:span
					,
				Element:span
				Element:span
					"export"
				Element:span
					:
				Element:span
				Element:span
					"M jS Y"
				Element:span
					,
				Element:span
				Element:span
					"extended_display"
				Element:span
					:
				Element:span
				Element:span
					"M jS Y @ g:i A"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"language"
				Element:span
					:
				Element:span
				Element:span
					"en"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
					,
				Element:span
				Element:span
					"currency_symbol"
				Element:span
					:
				Element:span
				Element:span
					"$"
				Element:span
					,
				Element:span
				Element:span
					"decimal_separator"
				Element:span
					:
				Element:span
				Element:span
					"."
				Element:span
					,
				Element:span
				Element:span
					"thousands_separator"
				Element:span
					:
				Element:span
				Element:span
					","
				Element:span
					,
				Element:span
				Element:span
					"decimal_places"
				Element:span
					:
				Element:span
				Element:span
					2
				Element:span
					,
				Element:span
				Element:span
					"currency_symbol_location"
				Element:span
					:
				Element:span
				Element:span
					"left"
				Element:span
					,
				Element:span
				Element:span
					"weight_units"
				Element:span
					:
				Element:span
				Element:span
					"LBS"
				Element:span
					,
				Element:span
				Element:span
					"dimension_units"
				Element:span
					:
				Element:span
				Element:span
					"Inches"
				Element:span
					,
				Element:span
				Element:span
					"dimension_decimal_places"
				Element:span
					:
				Element:span
				Element:span
					"2"
				Element:span
					,
				Element:span
				Element:span
					"dimension_decimal_token"
				Element:span
					:
				Element:span
				Element:span
					"."
				Element:span
					,
				Element:span
				Element:span
					"dimension_thousands_token"
				Element:span
					:
				Element:span
				Element:span
					","
				Element:span
					,
				Element:span
				Element:span
					"plan_name"
				Element:span
					:
				Element:span
				Element:span
					"15 Day Free Trial"
				Element:span
					,
				Element:span
				Element:span
					"plan_level"
				Element:span
					:
				Element:span
				Element:span
					"Trial"
				Element:span
					,
				Element:span
				Element:span
					"industry"
				Element:span
					:
				Element:span
				Element:span
					"Books/Music/Video"
				Element:span
					,
				Element:span
				Element:span
					"logo"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
				Element:span
					"http://cdn6.bigcommerce.com/s-cl1xgr/product_images/sandbox_logo_lp_1410899221__28020.jpg"
				Element:span
					,
				Element:span
				Element:span
					"mobile_url"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"is_price_entered_with_tax"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"active_comparison_modules"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					],
				Element:span
				Element:span
					"features"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"stencil_enabled"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) h1
			(layer)1
				Element:h1
				Element:span
					System Reference
			Node:
			(type) c
			(layer)1
				Element:p
					The Get a Timestamp endpoint generates a timestamp ping to check the system status.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
				Element:th
				Element:tbody
				Element:tr
				Element:td
				Element:strong
					Manages
				Element:td
				Element:tr
				Element:td
				Element:strong
					OAuth Scopes
				Element:td
				Element:code
					default
			Node:
			(type) c
			(layer)1
				Element:h2
				Element:span
					Get a Timestamp
			Node:
			(type) c
			(layer)1
				Element:p
					Gets the system timestamp.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:a
					OAuth
					>
				Element:code
					GET /stores/{store_hash}/v2/time
				Element:li
				Element:a
					Basic Auth
					>
				Element:code
					GET /api/v2/time
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Notes
			Node:
			(type) c
			(layer)1
				Element:p
					The time resource is useful for validating API authentication details and testing client connections.
			Node:
			(type) c
			(layer)1
				Element:p
					It returns the
				Element:a
					system timestamp
					at the time of the request.
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"time"
				Element:span
					:
				Element:span
				Element:span
					1393657780
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) h1
			(layer)1
				Element:h1
				Element:span
					Tax Class Reference
			Node:
			(type) c
			(layer)1
				Element:p
					The Tax Class object, and endpoints, manage tax calculations applied to sales. Tax classes are used to apply different tax rates for specific types of products and orders.
			Node:
			(type) c
			(layer)1
				Element:h2
				Element:span
					Tax Class Object – Properties
			Node:
			(type) c
			(layer)1
				Element:p
					The
				Element:code
					tax_class
					object contains the ID and name of the tax class used to calculate tax for stores that use
				Element:em
					manually created
					tax classes.
			Node:
			(type) c
			(layer)1
				Element:aside
				Element:span
					Automatic Taxes – Limitation
				Element:br
				Element:br
					Where a store is configured to use automatic taxes, data inside the
				Element:code
					tax_class
					object will be ignored during tax calculations.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Name
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
					int
				Element:td
					The unique numerical ID of the tax class. A read-only value which is automatically assigned and increments sequentially.
				Element:tr
				Element:td
					name
				Element:td
					string
				Element:td
					The name of the tax class.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
				Element:th
				Element:tbody
				Element:tr
				Element:td
				Element:strong
					Manages
				Element:td
				Element:tr
				Element:td
				Element:strong
					OAuth Scopes
				Element:td
					store_v2_information
				Element:tr
				Element:td
				Element:td
					store_v2_information_read_only
			Node:
			(type) c
			(layer)1
				Element:h2
				Element:span
					List Tax Classes
			Node:
			(type) c
			(layer)1
				Element:p
					Gets the tax classes set up for a store. (Default sorting is by tax-class id, from lowest to highest.)
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					GET /stores/{store_hash}/v2/tax_classes
				Element:li
					Basic Auth >
				Element:code
					GET /api/v2/tax_classes
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Filters
			Node:
			(type) c
			(layer)1
				Element:p
					There are no filter parameters specific to
				Element:code
					tax_classes
					.
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:span
					Pagination
			Node:
			(type) c
			(layer)1
				Element:p
					Parameters can be added to the URL query string to paginate the collection. The maximum limit is 250. If a limit isn’t provided, up to 50 tax_classes are returned by default.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Type
				Element:th
					Example
				Element:tbody
				Element:tr
				Element:td
					page
				Element:td
					int
				Element:td
					/api/v2/tax_classes?page={number}
				Element:tr
				Element:td
					limit
				Element:td
					int
				Element:td
					/api/v2/tax_classes?limit={count}
			Node:
			(type) c
			(layer)1
				Element:h2
				Element:span
					Get a Tax Class
			Node:
			(type) c
			(layer)1
				Element:p
					Gets a tax class.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					OAuth >
				Element:code
					GET /stores/{store_hash}/v2/tax_classes/{id}
				Element:li
					Basic Auth >
				Element:code
					GET /api/v2/tax_classes/{id}
