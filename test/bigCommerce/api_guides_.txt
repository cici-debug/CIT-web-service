Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
				Element:span
					Quickstart Guides for Developing on BigCommerce
			Node:
			(type) c
			(layer)1
				Element:p
					The BigCommerce ecommerce platform provides a flexible API, enabling you to create technical solutions for businesses in the language of your choice.
			Node:
			(type) c
			(layer)1
				Element:p
					We believe starting development on our platform should be easy. Whether or not you have built with APIs or used our templating engine before, we want you to have the tools to start your project efficiently.
			Node:
			(type) h1
			(layer)1
				Element:h1
				Element:span
					Postman/OAuth Quickstart Guide
			Node:
			(type) c
			(layer)1
				Element:p
					This section shows you how to quickly get started exercising BigCommerce APIs, using the
				Element:a
					Postman app
					.
			Node:
			(type) c
			(layer)1
				Element:p
					To get started, you’ll need OAuth credentials to supply to Postman. BigCommerce uses OAuth 2.0.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
							Element:span
								Creating OAuth2.0 Credentials
						Node:
						(type) c
						(layer)2
							Element:p
								Create your OAuth 2.0 credentials as described above under
							Element:a
								Obtaining OAuth Tokens
								. (Depending on what scopes you set, you will be limited in what objects you can request. You can view scope information
							Element:a
								here
								.)
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
							Element:span
								Postman Setup
						Node:
						(type) c
						(layer)2
							Element:p
								You’ll do the next steps in the Postman app.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:span
											Select No Auth
									Node:
									(type) c
									(layer)3
										Element:p
											In Postman, set the
										Element:strong
											Type
											drop-down list to
										Element:strong
											No Auth
											(so as to create only the OAuth headers that you need). This will display the form shown below:
									Node:
									(type) c
									(layer)3
										Element:p
										Element:img
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:span
											Populate Auth Headers
									Node:
									(type) c
									(layer)3
										Element:p
											Select the
										Element:strong
											Headers
											tab to display the form shown below:
									Node:
									(type) c
									(layer)3
										Element:p
										Element:img
									Node:
									(type) c
									(layer)3
										Element:p
											Next, add these two key/value pairs, using the OAuth credentials you obtained in the BigCommerce control panel:
									Node:
									(type) c
									(layer)3
										Element:table
										Element:thead
										Element:tr
										Element:th
											Key
										Element:th
											Value
										Element:tbody
										Element:tr
										Element:td
										Element:code
											X-Auth-Client
										Element:td
											The
										Element:strong
											Client ID
											you obtained when you
										Element:a
											created your OAuth token
											.
										Element:tr
										Element:td
										Element:code
											X-Auth-Token
										Element:td
											The
										Element:strong
											Access Token
											string you obtained when you
										Element:a
											created your OAuth token
											.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
							Element:span
								Sending a Request
						Node:
						(type) c
						(layer)2
							Element:p
								We have created a collection of Postman requests for our v3 API, which you can import by clicking the button below:
						Node:
						(type) c
						(layer)2
							Element:p
							Element:a
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
								To use this collection, you’ll need to enter your OAuth credentials, as explained above under
							Element:a
								Postman Setup
								.
						Node:
						(type) c
						(layer)2
							Element:p
								You’ll also need to enter your store’s API Path, as displayed in the
							Element:a
								control panel
								. You can do so in either of these days:
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:p
								Within each endpoint, replace the variable
							Element:code
								{{store_hash}}
								; or
							Element:li
							Element:p
								Add a new environment, in which you create a
							Element:code
								store_hash
								key, then set its value to the alpahnumeric string from your API Path. (For details on setting up a Postman environment, see
							Element:a
								this Postman documentation
								.)
						Node:
						(type) c
						(layer)2
							Element:p
								Now you can send and receive information through an OAuth API connection with BigCommerce. If you’d like to register webhooks through Postman, please see
							Element:a
								Creating Webhooks: Sending the POST Request
								.
			Node:
			(type) h1
			(layer)1
				Element:h1
				Element:span
					cURL Quickstart Guide
			Node:
			(type) c
			(layer)1
				Element:p
					This section provides some sample cURL commands, for quickstart purposes. These use Basic Authentication, so before you can issue these commands, you must generate Basic Authentication credentials by following the steps discussed
				Element:a
					here
					. Once you have your Basic Authentication credentials, you can issue cURL commands as listed below.
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl --request GET \ -H "Authorization: Basic _username_:_API_key_" \ https://store.mybigcommerce.com/api/v2/time
			Node:
			(type) c
			(layer)1
				Element:p
					If the request is made using the
				Element:code
					Authorization
					header, you need to encode the credentials using base64. Or, a simple way to accomplish the same task as above is:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl --request GET \ -u "_username_:_API_key_" \ https://store.mybigcommerce.com/api/v2/orders.json
			Node:
			(type) c
			(layer)1
				Element:h2
				Element:span
					Orders cURL Commands
			Node:
			(type) c
			(layer)1
				Element:p
					Here are sample cURL commands to handle orders.
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:span
											Get a List of Orders from the Store
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											curl --request GET \ -u "_username_:_API_key_" \ https://store.mybigcommerce.com/api/v2/orders.json
									Node:
									(type) c
									(layer)3
										Element:p
											By default, the API request returns only 50 orders. If you want to return all the orders from the store, you must use filters, as shown in the next example below.
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:span
											Get All Orders from the Store
									Node:
									(type) c
									(layer)3
										Element:p
											Use the
										Element:code
											limit
											and
										Element:code
											page
											filter parameters to get a data beyond what the default query returns. Note that 200 orders is the maximum returned per page:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											curl --request GET \ -u "_username_:_API_key_" \ https://store.mybigcommerce.com/api/v2/orders.json?limit=200&page=1
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:span
											Update an Order
									Node:
									(type) c
									(layer)3
										Element:p
											Orders take many fields upon update requests. (For details, please see
										Element:a
											this documentation
											.) Here, we update an order using just the mandatory fields:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											curl --request PUT \ -u "_username_:_API_key_" \ -H "Content-Type: application/json" \ --data-binary '{"status_id":1}' \ https://store.mybigcommerce.com/api/v2/orders/101
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:span
											Get Orders Created since a Certain Date
									Node:
									(type) c
									(layer)3
										Element:p
											You can use the
										Element:code
											If-Modified-Since
											header to request orders that have been created after a given date:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											curl -I --request GET \ -u "_username_:_API_key_" \ -H "Content-Type: application/json" \ -H "If-Modified-Since: Tue, 4 Dec 2012 00:00:00 GMT" \ https://store.mybigcommerce.com/api/v2/orders.json
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:span
											Get Coupons Associated with an Order
									Node:
									(type) c
									(layer)3
										Element:p
											An order can contain coupons, which might be applied to the order to offer discounts to the customer. You can look at all the available coupons in an order as follows:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											curl --request GET \ -u "_username_:_API_key_"\ https://store.mybigcommerce.com/api/v2/orders/115/coupons.json
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:span
											Create a Shipment for an Order
									Node:
									(type) c
									(layer)3
										Element:p
											You can create a shipment for an order via the
										Element:a
											Orders > Create a Shipment
											endpoint. As an example, third-party shipping services can query orders from a store when the orders are created, and create shipments for those:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											curl --request POST \ -u "_username_:_API_key_" \ -H "Content-Type: application/json" \ -d '{"order_address_id":15,"tracking_number":"123-123-123","items":[{"order_product_id":15,"quantity":1}]}' \ https://store.mybigcommerce.com/api/v2/orders/114/shipments.json
									Node:
									(type) c
									(layer)3
										Element:h2
										Element:span
											Products cURL Commands
									Node:
									(type) c
									(layer)3
										Element:p
											Here are sample cURL commands to handle products.
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:span
														Get a List of Products from the Store
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														curl --request GET \ -u "_username_:_API_key_" \ https://store.mybigcommerce.com/api/v2/products.json
												Node:
												(type) c
												(layer)4
													Element:p
														By default, the API request returns only 50 products. If you want to return all the products from the store, you must use filters, as shown in the example below.
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:span
														Get All Products from the Store
												Node:
												(type) c
												(layer)4
													Element:p
														Use the
													Element:code
														limit
														and
													Element:code
														page
														filter parameters to get data beyond what the default query returns. Note that a maximum of 200 products are returned per page:
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														curl --request GET \ -u "_username_:_API_key_" \ https://store.mybigcommerce.com/api/v2/products.json?limit=200&page=1
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:span
														Create a Product
												Node:
												(type) c
												(layer)4
													Element:p
														Products have many fields. For details on the product fields allowed as part of a
													Element:code
														POST
														request, please see
													Element:a
														this page
														.
												Node:
												(type) c
												(layer)4
													Element:p
														Let’s assume that we want to create a product using only the fields that are for a
													Element:code
														POST
														request. Here,
													Element:code
														price
														must specified as a string, while
													Element:code
														weight
														is a decimal. The
													Element:code
														is_visible
														flag is not mandatory, but if it is not set to
													Element:code
														true
														, the product would not be visible by default:
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														curl --request POST \ -H "Content-Type: application/json" \ -u "_username_:_API_key_" \ -d '{"name":"startrek","price":19.99,"categories":[2],"type":"physical","availability":"available", "weight":0}' \ https://store.mybigcommerce.com/api/v2/products.json
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:span
											Update a Product
									Node:
									(type) c
									(layer)3
										Element:p
											To update the product created above, you could use the following:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											curl --request PUT \ -H "Content-Type: application/json" \ -u "_username_:_API_key_" \ -d '{"name":"startrek","sku":"STREK-DVD","categories":[2,3],"inventory_tracking":"simple","inventory_level":"500", "inventory_warning":100}' \ https://store.mybigcommerce.com/api/v2/products/id.json
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:span
											Search a Product by SKU
									Node:
									(type) c
									(layer)3
										Element:p
											To search by a product SKU, we could use the following code. Remember that when a product has optionset/variations defined, and if the individual options have SKUs defined, then the product SKU is overriden by the option SKUs. Currently, there are two ways to search for SKUs:
										Element:code
											GET /products?sku="something"
											or
										Element:code
											GET /products/skus?sku="something"
											. The first call returns only product-level SKUs and not option-level SKUs.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											curl --request GET \ -u "_username_:_API_key_" \ https://store.mybigcommerce.com/api/v2/products/skus.json?sku="abcd"
									Node:
									(type) c
									(layer)3
										Element:h2
										Element:span
											Coupons cURL Commands
									Node:
									(type) c
									(layer)3
										Element:p
											Here are sample cURL commands to handle coupons.
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:span
											Get a List of Coupons from the Store
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											curl --request GET \ -u "_username_:_API_key_" \ https://store.mybigcommerce.com/api/v2/coupons.json
									Node:
									(type) c
									(layer)3
										Element:p
											Coupons can be filtered by
										Element:code
											code
											,
										Element:code
											type
											,
										Element:code
											name
											,
										Element:code
											min_id
											and
										Element:code
											max_id
											. Without these filters, the call returns all the coupons in the store. So for example, if we wanted to return a list of only those coupons of
										Element:code
											type=percentage_discount
											, we could make the following request:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											curl --request GET \ -u "_username_:_API_key_" \ https://store.mybigcommerce.com/api/v2/coupons.json?type=percentage_discount
									Node:
									(type) c
									(layer)3
										Element:p
											For details on filter fields, please see the
										Element:a
											Coupons resource
											.
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:span
														Create a Coupon
												Node:
												(type) c
												(layer)4
													Element:p
														Coupons can be created by a
													Element:code
														POST
														request on the coupons endpoint. For example, if we want to create a coupon to take 50% off an order, then our coupon will have
													Element:code
														percentage_discount
														as the type. The
													Element:code
														applies_to
														field is optional, and can be used to restrict the coupon to a set of products or categories. In the example shown below, the coupon is being restricted to a set of products:
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														curl --request POST \ -H "Content-Type: application/json" \ -u "_username_:_API_key_" \ -d '{"code":"50OFF", "type":"percentage_discount", "name":"testcoupon1", "amount":50.00, "enabled":"true", "applies_to":"{\"entity\":\"products\",\"ids\":[32]}"}' \ https://store.mybigcommerce.com/api/v2/coupons.json
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:span
														Update a Coupon
												Node:
												(type) c
												(layer)4
													Element:p
														Updating a coupon is almost similar to the Create example above, except that we work off an ID via a
													Element:code
														PUT
														request. For example, assume that we want to change the above coupon from a 50% to a 30% discount, and that the coupon ID is
													Element:code
														15
														. We can update the coupon using the following:
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														curl --request PUT \ -H "Content-Type: application/json" \ -u "_username_:_API_key_" \ -d '{"code":"30OFF", "type":"percentage_discount"' \ https://store.mybigcommerce.com/api/v2/coupons/15.json
												Node:
												(type) c
												(layer)4
													Element:h2
													Element:span
														Option Sets cURL Commands
												Node:
												(type) c
												(layer)4
													Element:p
														Here are sample cURL commands to handle option sets.
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:span
											Connect Options to Option Sets
									Node:
									(type) c
									(layer)3
										Element:p
											This is currently a four-step process.
									Node:
									(type) c
									(layer)3
										Element:ol
										Element:li
											Create the option.
										Element:li
											Add some values to the option.
										Element:li
											Create the option set.
										Element:li
											Create option-set options, using the options you just created.
									Node:
									(type) c
									(layer)3
										Element:p
											Use the following command to create an option:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											curl --request POST \ -H "Content-Type: application/json" \ -u "_username_:_API_key_" \ -d '{"name":"homer simpson", "type":"T"}' \ https://store.mybigcommerce.com/api/v2/options.json
									Node:
									(type) c
									(layer)3
										Element:p
											BigCommerce returns the following, which includes an option ID:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
										Element:span
											{
										Element:span
											"id"
										Element:span
											:
										Element:span
											33
										Element:span
											,
										Element:span
											"name"
										Element:span
											:
										Element:span
											"homer simpson"
										Element:span
											,
										Element:span
											"display_name"
										Element:span
											:
										Element:span
											"homer simpson"
										Element:span
											,
										Element:span
											"type"
										Element:span
											:
										Element:span
											"T"
										Element:span
											,
										Element:span
											"values"
										Element:span
											:{
										Element:span
											"url"
										Element:span
											:
										Element:span
											"https://store.mybigcommerce.com-bwvr466.mybigcommerce.com/api/v2/options/33/values.json"
										Element:span
											,
										Element:span
											"resource"
										Element:span
											:
										Element:span
											"/options/33/values"
										Element:span
											}}
										Element:span
									Node:
									(type) c
									(layer)3
										Element:p
											Next, create a new option set:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											curl --request POST \ -u "admin:key" \ -d '{"name": "Simpson family"}' \ -H "Content-Type: application/json" \ https://store.mybigcommerce.com/api/v2/optionsets.json
									Node:
									(type) c
									(layer)3
										Element:p
											The API returns the following, which includes an option-set ID:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
										Element:span
											{
										Element:span
											"id"
										Element:span
											:
										Element:span
											27
										Element:span
											,
										Element:span
											"name"
										Element:span
											:
										Element:span
											"Simpson family"
										Element:span
											,
										Element:span
											"options"
										Element:span
											:{
										Element:span
											"url"
										Element:span
											:
										Element:span
											"https://store.mybigcommerce.com-bwvr466.mybigcommerce.com/api/v2/optionsets/27/options.json"
										Element:span
											,
										Element:span
											"resource"
										Element:span
											:
										Element:span
											"/optionsets/27/options"
										Element:span
											}}
										Element:span
									Node:
									(type) c
									(layer)3
										Element:p
											The final step is to connect the option with the option set:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											curl --request POST \ -u "_username_:_API_key_" \ -d '{"option_id": "33", "display_name":"Simpson family"}' \ -H "Content-Type: application/json" \ https://store.mybigcommerce.com/api/v2/optionsets/27/options.json
									Node:
									(type) c
									(layer)3
										Element:p
											Which yields the following:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
										Element:span
											{
										Element:span
											"id"
										Element:span
											:
										Element:span
											44
										Element:span
											,
										Element:span
											"option_id"
										Element:span
											:
										Element:span
											33
										Element:span
											,
										Element:span
											"option_set_id"
										Element:span
											:
										Element:span
											27
										Element:span
											,
										Element:span
											"display_name"
										Element:span
											:
										Element:span
											"Simpson family"
										Element:span
											,
										Element:span
											"sort_order"
										Element:span
											:
										Element:span
											0
										Element:span
											,
										Element:span
											"is_required"
										Element:span
											:
										Element:span
											false
										Element:span
											,
										Element:span
											"option"
										Element:span
											:{
										Element:span
											"url"
										Element:span
											:
										Element:span
											"https://store.mybigcommerce.com-bwvr466.mybigcommerce.com/api/v2/options/33.json"
										Element:span
											,
										Element:span
											"resource"
										Element:span
											:
										Element:span
											"/options/33"
										Element:span
											}}
										Element:span
