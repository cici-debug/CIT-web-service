Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					Authentication Guide
			Node:
			(type) c
			(layer)1
				Element:p
					Accessing the Wurl API requires your application to make authenticated requests.
			Node:
			(type) c
			(layer)1
				Element:p
					This guide provides examples of granting access and making authenticated requests.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Obtaining a client token
						Node:
						(type) c
						(layer)2
							Element:p
								An application can request an access token using its
							Element:em
								application_id
								and
							Element:em
								secret
								. This token will allow you to access the API without having to constantly provide your application's
							Element:em
								secret
								. Your application's
							Element:em
								application_id
								and
							Element:em
								secret
								are available from
							Element:a
								Your Application's page
						Node:
						(type) c
						(layer)2
							Element:p
								To retrieve the token, perform a
							Element:code
								POST
								to
							Element:code
								/oauth/token
								and provide the
							Element:em
								grant_type
								,
							Element:em
								client_id
								and
							Element:em
								client_secret
								parameters.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								$ curl -d grant_type="client_credentials" \ -d client_id=APPLICATION_ID \ -d client_secret=SECRET \ 'https://api.wurl.com/oauth/token' { "access_token": "ace9e2216d81159e76a4d4917a2d2afe888dd2349d408f2f", "token_type":"bearer", "expires_in":null, "refresh_token":null, "scope":"watch" }
						Node:
						(type) c
						(layer)2
							Element:i
								A client access token only authorizes access to resources that do not access user information. For example, video content in the Wurl API is accessible via a client access token. However modifying a user's watchlist would not be allowed.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Authenticate with a token
						Node:
						(type) c
						(layer)2
							Element:p
								Once you have been granted an access token, you must provide the token for all requests.
						Node:
						(type) c
						(layer)2
							Element:p
								The recommended method of providing your access token is via the
							Element:code
								Authorization
								header as a
							Element:a
								bearer token
								.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								$ curl -H 'Authorization: Bearer ace9e2216d81159e76a4d4917a2d2afe888dd2349d408f2f' \ 'https://api.wurl.com/api/packages'
						Node:
						(type) c
						(layer)2
							Element:p
								If your HTTP Client does not allow you to specify the header, we also support passing your token via an
							Element:code
								access_token
								query parameter:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								$ curl 'https://api.wurl.com/api/packages?access_token=ace9e2216d81159e76a4d4917a2d2afe888dd2349d408f2f'
						Node:
						(type) c
						(layer)2
							Element:p
								Typically using the
							Element:code
								access_token
								query parameter is useful for browsing the API in a browser.
						Node:
						(type) c
						(layer)2
							Element:i
								In your application, we strongly recommend using the header because it allows you to utilize the URLs provided in API responses without having to append query parameters.
						Node:
						(type) c
						(layer)2
							Element:p
								The Wurl API follows the
							Element:a
								Hypermedia
								pattern. Therefore, Wurl reserves the right to change the URL namespace and format. If you find yourself modifying the URLs in the API responses your client may become brittle to changes in URL structure unless it has very robust methods of modifying URLs.
						Node:
						(type) c
						(layer)2
							Element:footer
							Element:p
							Element:span
								Wurl, Inc.
							Element:br
							Element:span
								Palo Alto, California
							Element:br
							Element:a
								info@wurl.com
							Element:br
							Element:span
								650.470.7550
							Element:p
								© Wurl
							Element:ul
							Element:li
								Wurl
							Element:li
							Element:a
								Home
							Element:li
							Element:a
								About
							Element:li
							Element:a
								Blog
							Element:li
							Element:a
								Team
							Element:li
							Element:a
								Legal
						Node:
						(type) c
						(layer)2
							Element:a
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:a
							Element:li
			Node:
			(type) h1
			(layer)1
				Element:h1
					Developer
				Element:ul
				Element:li
				Element:a
					Blog
				Element:li
				Element:a
					API Status
				Element:li
				Element:a
					Support
			Node:
			(type) h1
			(layer)1
				Element:h1
					Authentication Guide
			Node:
			(type) c
			(layer)1
				Element:p
					Accessing the Wurl API requires your application to make authenticated requests.
			Node:
			(type) c
			(layer)1
				Element:p
					This guide provides examples of granting access and making authenticated requests.
			Node:
			(type) c
			(layer)1
				Element:h2
					Obtaining a client token
			Node:
			(type) c
			(layer)1
				Element:p
					An application can request an access token using its
				Element:em
					application_id
					and
				Element:em
					secret
					. This token will allow you to access the API without having to constantly provide your application's
				Element:em
					secret
					. Your application's
				Element:em
					application_id
					and
				Element:em
					secret
					are available from
				Element:a
					Your Application's page
			Node:
			(type) c
			(layer)1
				Element:p
					To retrieve the token, perform a
				Element:code
					POST
					to
				Element:code
					/oauth/token
					and provide the
				Element:em
					grant_type
					,
				Element:em
					client_id
					and
				Element:em
					client_secret
					parameters.
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					$ curl -d grant_type="client_credentials" \ -d client_id=APPLICATION_ID \ -d client_secret=SECRET \ 'https://api.wurl.com/oauth/token' { "access_token": "ace9e2216d81159e76a4d4917a2d2afe888dd2349d408f2f", "token_type":"bearer", "expires_in":null, "refresh_token":null, "scope":"watch" }
			Node:
			(type) c
			(layer)1
				Element:i
					A client access token only authorizes access to resources that do not access user information. For example, video content in the Wurl API is accessible via a client access token. However modifying a user's watchlist would not be allowed.
			Node:
			(type) c
			(layer)1
				Element:h2
					Authenticate with a token
			Node:
			(type) c
			(layer)1
				Element:p
					Once you have been granted an access token, you must provide the token for all requests.
			Node:
			(type) c
			(layer)1
				Element:p
					The recommended method of providing your access token is via the
				Element:code
					Authorization
					header as a
				Element:a
					bearer token
					.
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					$ curl -H 'Authorization: Bearer ace9e2216d81159e76a4d4917a2d2afe888dd2349d408f2f' \ 'https://api.wurl.com/api/packages'
			Node:
			(type) c
			(layer)1
				Element:p
					If your HTTP Client does not allow you to specify the header, we also support passing your token via an
				Element:code
					access_token
					query parameter:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					$ curl 'https://api.wurl.com/api/packages?access_token=ace9e2216d81159e76a4d4917a2d2afe888dd2349d408f2f'
			Node:
			(type) c
			(layer)1
				Element:p
					Typically using the
				Element:code
					access_token
					query parameter is useful for browsing the API in a browser.
			Node:
			(type) c
			(layer)1
				Element:i
					In your application, we strongly recommend using the header because it allows you to utilize the URLs provided in API responses without having to append query parameters.
			Node:
			(type) c
			(layer)1
				Element:p
					The Wurl API follows the
				Element:a
					Hypermedia
					pattern. Therefore, Wurl reserves the right to change the URL namespace and format. If you find yourself modifying the URLs in the API responses your client may become brittle to changes in URL structure unless it has very robust methods of modifying URLs.
			Node:
			(type) c
			(layer)1
				Element:footer
				Element:ul
				Element:li
					Wurl
				Element:li
				Element:a
					Home
				Element:li
				Element:a
					About
				Element:li
				Element:a
					Blog
				Element:li
				Element:a
					Team
				Element:li
				Element:a
					Legal
				Element:ul
				Element:li
					Help
				Element:li
				Element:a
					Contact Support
				Element:li
				Element:a
					Status
				Element:p
				Element:span
					Wurl, Inc.
				Element:br
				Element:span
					Palo Alto, California
				Element:br
				Element:a
					info@wurl.com
				Element:br
				Element:span
					650.470.7550
				Element:p
					© Wurl
