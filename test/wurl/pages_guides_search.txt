Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					Search Guide
			Node:
			(type) c
			(layer)1
				Element:p
					The search guide covers the following:
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					Creating a search
				Element:li
					Paging through search results
			Node:
			(type) h1
			(layer)1
				Element:h1
					Prerequisites
			Node:
			(type) c
			(layer)1
				Element:p
					You have run through the
				Element:a
					Getting Started Guide
					and have an access token to use for the following API requests.
			Node:
			(type) h1
			(layer)1
				Element:h1
					Creating a search.
			Node:
			(type) c
			(layer)1
				Element:p
					There are a number of supported query parameters.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					parameter
				Element:th
					description
				Element:tbody
				Element:tr
				Element:td
					type
				Element:td
					(Required) The type of entity to search. Must be one of 'series' or 'episode'
				Element:tr
				Element:td
					q
				Element:td
					(Required) your search terms
				Element:tr
				Element:td
					size
				Element:td
					The number of results to return per page of results
				Element:tr
				Element:td
					start
				Element:td
					The index of the results to start at
			Node:
			(type) c
			(layer)1
				Element:p
					To submit a search, perform a
				Element:code
					GET
					or
				Element:code
					POST
					on
				Element:code
					/search
					.
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					$ curl -H 'Authorization: Bearer TOKEN' 'https://api.wurl.com/api/search?q=funny&type=series'
			Node:
			(type) c
			(layer)1
				Element:p
					The response's properties section will contain some meta-data about the search and the entities collection will be the search hits:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					{ "rel":["properties:http://api.wurl.com/schemas/search_response.json"], "class":["search"], "properties":{"searchTerms":"funny","hits":139,"start":0}, "entities":[ // A list of series entities) { "rel":["urn:x-resource:schema:https://wurl-api-qa.herokuapp.com/schemas/series.json"], "class":["series"], "title":"Comedy Time Dir", "properties": { "id":371356, "description":"Description of this very funny show....", "channelsRank":82.7534294465409, "pubDate":"2013-09-13T16:35:43Z", "thumbnails":{ "default":{ "url":"http://i1.ytimg.com/i/Ug9Iv_KnZwTulS0cEi_mJQ/1.jpg?v=8badd5" } } }, "totalEpisodes":128, "matchesApp":true, "link":"http://www.youtube.com/channel/UCUg9Iv_KnZwTulS0cEi_mJQ/videos" }, ], "links":[ {"rel":["self"],"href":"https://api.wurl.com/api/search?q=funny"}, {"rel":["next"],"href":"https://api.wurl.com/api/search?q=funny&start=10"} // 'prev' link may also be here ] }
			Node:
			(type) h1
			(layer)1
				Element:h1
					Paging through a search
			Node:
			(type) c
			(layer)1
				Element:p
					Note the "links" section. This is an array of related links you can use. Like all paginated responses, "next" and "prev" may be here for you to continue paging through the search results.
			Node:
			(type) h1
			(layer)1
				Element:h1
					Query Syntax
			Node:
			(type) c
			(layer)1
				Element:p
					When searching, all the terms in your query are individual terms that are ANDed together. To search for a specific multi-word query (eg: star wars) you can enclose search terms in double quotes.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:code
					q="star wars"
					matches the exact term "star wars"
			Node:
			(type) c
			(layer)1
				Element:p
					You can also use the boolean operators + (AND), | (OR), and - (NOT). If you separate search terms with + or a space, all of the search terms are ANDed together. You can use the | (OR) operator to separate terms when you want either the preceding term(s) or the following term(s). To exclude a particular term, prefix the term with the - (NOT) operator. The NOT operator only applies to individual terms.
			Node:
			(type) c
			(layer)1
				Element:p
					For example:
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:code
					q=star+wars
					matches star and wars.
				Element:li
				Element:code
					q=star|wars
					matches either star or wars.
				Element:li
				Element:code
					q=star|wars-trek
					matches either star or wars but does not contain trek.
			Node:
			(type) c
			(layer)1
				Element:p
					You can use the * (asterisk) wildcard operator to perform some limited wildcard matching. The * operator only applies to individual terms. When you append the * operator to a string, the string is treated as a prefix.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:code
					q=star*
					matches any words that start with 'star' (star, start, etc...)
			Node:
			(type) c
			(layer)1
				Element:i
					NOTE: The samples ignored URL (percent) encoding for clarity.
			Node:
			(type) c
			(layer)1
				Element:footer
				Element:p
				Element:span
					Wurl, Inc.
				Element:br
				Element:span
					Palo Alto, California
				Element:br
				Element:a
					info@wurl.com
				Element:br
				Element:span
					650.470.7550
				Element:p
					Â© Wurl
				Element:ul
				Element:li
					Wurl
				Element:li
				Element:a
					Home
				Element:li
				Element:a
					About
				Element:li
				Element:a
					Blog
				Element:li
				Element:a
					Team
				Element:li
				Element:a
					Legal
			Node:
			(type) c
			(layer)1
				Element:a
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:a
				Element:li
			Node:
			(type) h1
			(layer)1
				Element:h1
					Developer
				Element:ul
				Element:li
				Element:a
					Blog
				Element:li
				Element:a
					API Status
				Element:li
				Element:a
					Support
			Node:
			(type) h1
			(layer)1
				Element:h1
					Search Guide
			Node:
			(type) c
			(layer)1
				Element:p
					The search guide covers the following:
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					Creating a search
				Element:li
					Paging through search results
			Node:
			(type) h1
			(layer)1
				Element:h1
					Prerequisites
			Node:
			(type) c
			(layer)1
				Element:p
					You have run through the
				Element:a
					Getting Started Guide
					and have an access token to use for the following API requests.
			Node:
			(type) h1
			(layer)1
				Element:h1
					Creating a search.
			Node:
			(type) c
			(layer)1
				Element:p
					There are a number of supported query parameters.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					parameter
				Element:th
					description
				Element:tbody
				Element:tr
				Element:td
					type
				Element:td
					(Required) The type of entity to search. Must be one of 'series' or 'episode'
				Element:tr
				Element:td
					q
				Element:td
					(Required) your search terms
				Element:tr
				Element:td
					size
				Element:td
					The number of results to return per page of results
				Element:tr
				Element:td
					start
				Element:td
					The index of the results to start at
			Node:
			(type) c
			(layer)1
				Element:p
					To submit a search, perform a
				Element:code
					GET
					or
				Element:code
					POST
					on
				Element:code
					/search
					.
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					$ curl -H 'Authorization: Bearer TOKEN' 'https://api.wurl.com/api/search?q=funny&type=series'
			Node:
			(type) c
			(layer)1
				Element:p
					The response's properties section will contain some meta-data about the search and the entities collection will be the search hits:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					{ "rel":["properties:http://api.wurl.com/schemas/search_response.json"], "class":["search"], "properties":{"searchTerms":"funny","hits":139,"start":0}, "entities":[ // A list of series entities) { "rel":["urn:x-resource:schema:https://wurl-api-qa.herokuapp.com/schemas/series.json"], "class":["series"], "title":"Comedy Time Dir", "properties": { "id":371356, "description":"Description of this very funny show....", "channelsRank":82.7534294465409, "pubDate":"2013-09-13T16:35:43Z", "thumbnails":{ "default":{ "url":"http://i1.ytimg.com/i/Ug9Iv_KnZwTulS0cEi_mJQ/1.jpg?v=8badd5" } } }, "totalEpisodes":128, "matchesApp":true, "link":"http://www.youtube.com/channel/UCUg9Iv_KnZwTulS0cEi_mJQ/videos" }, ], "links":[ {"rel":["self"],"href":"https://api.wurl.com/api/search?q=funny"}, {"rel":["next"],"href":"https://api.wurl.com/api/search?q=funny&start=10"} // 'prev' link may also be here ] }
			Node:
			(type) h1
			(layer)1
				Element:h1
					Paging through a search
			Node:
			(type) c
			(layer)1
				Element:p
					Note the "links" section. This is an array of related links you can use. Like all paginated responses, "next" and "prev" may be here for you to continue paging through the search results.
			Node:
			(type) h1
			(layer)1
				Element:h1
					Query Syntax
			Node:
			(type) c
			(layer)1
				Element:p
					When searching, all the terms in your query are individual terms that are ANDed together. To search for a specific multi-word query (eg: star wars) you can enclose search terms in double quotes.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:code
					q="star wars"
					matches the exact term "star wars"
			Node:
			(type) c
			(layer)1
				Element:p
					You can also use the boolean operators + (AND), | (OR), and - (NOT). If you separate search terms with + or a space, all of the search terms are ANDed together. You can use the | (OR) operator to separate terms when you want either the preceding term(s) or the following term(s). To exclude a particular term, prefix the term with the - (NOT) operator. The NOT operator only applies to individual terms.
			Node:
			(type) c
			(layer)1
				Element:p
					For example:
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:code
					q=star+wars
					matches star and wars.
				Element:li
				Element:code
					q=star|wars
					matches either star or wars.
				Element:li
				Element:code
					q=star|wars-trek
					matches either star or wars but does not contain trek.
			Node:
			(type) c
			(layer)1
				Element:p
					You can use the * (asterisk) wildcard operator to perform some limited wildcard matching. The * operator only applies to individual terms. When you append the * operator to a string, the string is treated as a prefix.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:code
					q=star*
					matches any words that start with 'star' (star, start, etc...)
			Node:
			(type) c
			(layer)1
				Element:i
					NOTE: The samples ignored URL (percent) encoding for clarity.
			Node:
			(type) c
			(layer)1
				Element:footer
				Element:ul
				Element:li
					Wurl
				Element:li
				Element:a
					Home
				Element:li
				Element:a
					About
				Element:li
				Element:a
					Blog
				Element:li
				Element:a
					Team
				Element:li
				Element:a
					Legal
				Element:ul
				Element:li
					Help
				Element:li
				Element:a
					Contact Support
				Element:li
				Element:a
					Status
				Element:p
				Element:span
					Wurl, Inc.
				Element:br
				Element:span
					Palo Alto, California
				Element:br
				Element:a
					info@wurl.com
				Element:br
				Element:span
					650.470.7550
				Element:p
					Â© Wurl
