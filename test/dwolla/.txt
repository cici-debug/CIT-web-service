Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					Introduction
			Node:
			(type) c
			(layer)1
				Element:p
					Welcome to the Dwolla
				Element:a
					Access API
					documentation. Connect your software to the banking infrastructure. The Access API is
				Element:a
					white label
					by design, however some co-branded experiences and capabilities have been and will continue to be migrated from the legacy
				Element:a
					API v1
					(no longer supported). For more information on transitioning v1 to the Access API, see our
				Element:a
					migration guide
					.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Making requests
						Node:
						(type) c
						(layer)2
							Element:p
								All requests should supply the
							Element:code
								Accept: application/vnd.dwolla.v1.hal+json
								header.
							Element:code
								POST
								requests must specify the
							Element:code
								Content-Type: application/vnd.dwolla.v1.hal+json
								header. Request and response bodies are JSON encoded.
						Node:
						(type) c
						(layer)2
							Element:p
								Requests must be made over HTTPS. Any non-secure requests are met with a redirect (HTTP 302) to the HTTPS equivalent URI.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								POST https://api.dwolla.com/customers Content-Type: application/json Accept: application/vnd.dwolla.v1.hal+json Authorization: Bearer myOAuthAccessToken123 { "foo": "bar" } ... or ... GET https://api.dwolla.com/accounts/a84222d5-31d2-4290-9a96-089813ef96b3/transfers
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Authorization
									Node:
									(type) c
									(layer)3
										Element:p
											All requests require either an OAuth access token or a
										Element:code
											client_id
											and
										Element:code
											client_secret
											. OAuth access tokens are passed via the
										Element:code
											Authorization
											HTTP header:
									Node:
									(type) c
									(layer)3
										Element:p
										Element:code
											Authorization: Bearer {access_token_here}
									Node:
									(type) c
									(layer)3
										Element:p
											Requests that require a client_id and client_secret can be sent using the
										Element:code
											application/x-www-form-urlencoded
											Content-Type or via a JSON body with the
										Element:code
											application/json
											Content-Type.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											API Host
									Node:
									(type) c
									(layer)3
										Element:p
										Element:strong
											Production:
											https://api.dwolla.com
									Node:
									(type) c
									(layer)3
										Element:p
										Element:strong
											Sandbox:
											https://api-uat.dwolla.com
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Idempotency key
						Node:
						(type) c
						(layer)2
							Element:p
								To prevent an operation from being performed more than once, Dwolla supports passing in an
							Element:code
								Idempotency-Key
								header with a unique key as the value. Multiple
							Element:code
								POSTs
								with the same idempotency key won’t result in multiple resources being created.
						Node:
						(type) c
						(layer)2
							Element:p
								For example, if a request to
							Element:a
								initiate a transfer
								fails due to a network connection issue, you can reattempt the request with the same idempotency key to guarantee that only a single transfer is created.
						Node:
						(type) c
						(layer)2
							Element:p
								If you reattempt a
							Element:code
								POST
								request with the same value for the
							Element:code
								Idempotency-Key
								, you will receive the original response. It is recommended to use a random value for the idempotency key, like a UUID (i.e. -
							Element:code
								Idempotency-Key: d2adcbab-4e4e-430b-9181-ac9346be723a
								). Idempotency keys are intented to prevent conflicts over a short period of time, therefore keys will expire after 24 hours. If the Dwolla server is still processing the original
							Element:code
								POST
								, you will receive a
							Element:code
								409 Conflict
								error response on the subsequent request.
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
														Example transfer using an Idempotency Key
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														curl -X POST -H "Content-Type: application/vnd.dwolla.v1.hal+json" -H "Accept: application/vnd.dwolla.v1.hal+json" -H "Authorization: Bearer asdfwXTdDQFimVQOMdn9bOGHJh8KrqnFi34sugYqgrULRCb" -H "Idempotency-Key: d2adcbab-4e4e-430b-9181-ac9346be723a" -d '{ "_links": { "destination": { "href": "https://api-uat.dwolla.com/customers/d795f696-2cac-4662-8f16-95f1db9bddd8" }, "source": { "href": "http://api-uat.dwolla.com/funding-sources/707177c3-bf15-4e7e-b37c-55c3898d9bf4" } }, "amount": { "currency": "USD", "value": "1337.00" } }' "https://api-uat.dwolla.com/transfers" -v
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Errors
						Node:
						(type) c
						(layer)2
							Element:p
								Error responses use HTTP status codes to indicate the type of error. The JSON response body will contain a top-level error code and a message with a detailed description of the error. Errors will contain their own media type and will closely align with
							Element:a
								this spec
								.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Example HTTP 401 error
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
										Element:span
											{
										Element:span
										Element:span
											"code"
										Element:span
											:
										Element:span
										Element:span
											"InvalidAccessToken"
										Element:span
											,
										Element:span
										Element:span
											"message"
										Element:span
											:
										Element:span
										Element:span
											"Invalid access token."
										Element:span
										Element:span
											}
										Element:span
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Common errors
									Node:
									(type) c
									(layer)3
										Element:p
											The following errors are common across all API endpoints.
									Node:
									(type) c
									(layer)3
										Element:table
										Element:thead
										Element:tr
										Element:th
											HTTP Status
										Element:th
											Error Code
										Element:th
											Description
										Element:tbody
										Element:tr
										Element:td
											400
										Element:td
											BadRequest
										Element:td
											The request body contains bad syntax or is incomplete.
										Element:tr
										Element:td
											400
										Element:td
											ValidationError
										Element:td
											Validation error(s) present. See embedded errors list for more details. (
										Element:a
											See below
											)
										Element:tr
										Element:td
											401
										Element:td
											InvalidCredentials
										Element:td
											Missing or invalid Authorization header.
										Element:tr
										Element:td
											401
										Element:td
											InvalidAccessToken
										Element:td
											Invalid access token.
										Element:tr
										Element:td
											401
										Element:td
											ExpiredAccessToken
										Element:td
											Generate a new access token using a valid refresh token.
										Element:tr
										Element:td
											401
										Element:td
											InvalidAccountStatus
										Element:td
											Invalid access token account status.
										Element:tr
										Element:td
											401
										Element:td
											InvalidApplicationStatus
										Element:td
											Invalid application status.
										Element:tr
										Element:td
											401
										Element:td
											InvalidScopes
										Element:td
											Missing or invalid scopes for requested endpoint.
										Element:tr
										Element:td
											403
										Element:td
											Forbidden
										Element:td
											The supplied credentials are not authorized for this resource.
										Element:tr
										Element:td
											403
										Element:td
											InvalidResourceState
										Element:td
											Resource cannot be modified.
										Element:tr
										Element:td
											404
										Element:td
											NotFound
										Element:td
											The requested resource was not found.
										Element:tr
										Element:td
											405
										Element:td
											MethodNotAllowed
										Element:td
											(varies)
										Element:tr
										Element:td
											406
										Element:td
											InvalidVersion
										Element:td
											Missing or invalid API version.
										Element:tr
										Element:td
											500
										Element:td
											ServerError
										Element:td
											A server error occurred. Error ID: 63e92a2a-fb48-4a23-ab4c-24a6764f1593.
										Element:tr
										Element:td
											500
										Element:td
											RequestTimeout
										Element:td
											The request timed out.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Validation errors
									Node:
									(type) c
									(layer)3
										Element:p
											Responses with a top-level error code of
										Element:code
											ValidationError
											are returned when it’s possible to correct a specific problem with your request. The response will include a message: “Validation error(s) present. See embedded errors list for more details.” At least one, but possibly more, detailed error will be present in the list of embedded errors. Multiple errors are represented in a collection of embedded error objects.
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														_embedded JSON object
												Node:
												(type) c
												(layer)4
													Element:table
													Element:thead
													Element:tr
													Element:th
														Parameter
													Element:th
														Description
													Element:tbody
													Element:tr
													Element:td
														errors
													Element:td
														An array of JSON object(s) that contain a
													Element:code
														code
														,
													Element:code
														message
														, and
													Element:code
														path
														.
												Node:
												(type) c
												(layer)4
													Element:p
														The
													Element:code
														path
														field is a JSON pointer to the specific field in the request that has a problem. The
													Element:code
														message
														is a human readable description of the problem. The
													Element:code
														code
														is a detailed error code that can have one of the following values:
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														Required
													Element:li
														Invalid - not a valid value for this field
													Element:li
														InvalidFormat - chars in an amount field, for instance
													Element:li
														Duplicate - “A customer with the specified email already exists.”
													Element:li
														ReadOnly - this field is not allowed to be modified
													Element:li
														NotAllowed - value, while valid/exists, is not allowed to be used
													Element:li
														Restricted - account or customer restricted from this activity
													Element:li
														InsufficientFunds - used on source or destination fields of transfer endpoint
													Element:li
														RequiresFundingSource - used on destination field of transfer endpoint to indicate customer needs a bank
													Element:li
														FileTooLarge - used on document upload
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Example HTTP 400 validation error
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
													Element:span
														{
													Element:span
													Element:span
														"code"
													Element:span
														:
													Element:span
													Element:span
														"ValidationError"
													Element:span
														,
													Element:span
													Element:span
														"message"
													Element:span
														:
													Element:span
													Element:span
														"Validation error(s) present. See embedded errors list for more details."
													Element:span
														,
													Element:span
													Element:span
														"_embedded"
													Element:span
														:
													Element:span
													Element:span
														{
													Element:span
													Element:span
														"errors"
													Element:span
														:
													Element:span
													Element:span
														[
													Element:span
													Element:span
														{
													Element:span
													Element:span
														"code"
													Element:span
														:
													Element:span
													Element:span
														"Required"
													Element:span
														,
													Element:span
													Element:span
														"message"
													Element:span
														:
													Element:span
													Element:span
														"FirstName is required."
													Element:span
														,
													Element:span
													Element:span
														"path"
													Element:span
														:
													Element:span
													Element:span
														"/firstName"
													Element:span
														,
													Element:span
													Element:span
														}
													Element:span
													Element:span
														]
													Element:span
													Element:span
														}
													Element:span
													Element:span
														}
													Element:span
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Links
						Node:
						(type) c
						(layer)2
							Element:p
								Relationships and available actions for a resource are represented with links. All resources have a
							Element:code
								_links
								attribute. At a minimum, all resources will have a
							Element:code
								self
								link which indicates the URL of the resource itself.
						Node:
						(type) c
						(layer)2
							Element:p
								Some links, such as
							Element:code
								funding-sources
								, give you a URL which you can follow to access related resources. For example, the customer resource has a
							Element:code
								funding-sources
								link which, when followed, will list the customer’s available funding sources.
						Node:
						(type) c
						(layer)2
							Element:p
								Responses which contain a collection of resources have pagination links,
							Element:code
								first
								,
							Element:code
								next
								,
							Element:code
								last
								, and
							Element:code
								prev
								.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
								{
							Element:span
							Element:span
								"_links"
							Element:span
								:
							Element:span
							Element:span
								{
							Element:span
							Element:span
								"self"
							Element:span
								:
							Element:span
							Element:span
								{
							Element:span
							Element:span
								"href"
							Element:span
								:
							Element:span
							Element:span
								"https://api.dwolla.com/customers/132681FA-1B4D-4181-8FF2-619CA46235B1"
							Element:span
							Element:span
								},
							Element:span
							Element:span
								"funding-sources"
							Element:span
								:
							Element:span
							Element:span
								{
							Element:span
							Element:span
								"href"
							Element:span
								:
							Element:span
							Element:span
								"https://api.dwolla.com/customers/132681FA-1B4D-4181-8FF2-619CA46235B1/funding-sources"
							Element:span
							Element:span
								},
							Element:span
							Element:span
								"transfers"
							Element:span
								:
							Element:span
							Element:span
								{
							Element:span
							Element:span
								"href"
							Element:span
								:
							Element:span
							Element:span
								"https://api.dwolla.com/customers/132681FA-1B4D-4181-8FF2-619CA46235B1/transfers"
							Element:span
							Element:span
								},
							Element:span
							Element:span
								"retry-verification"
							Element:span
								:
							Element:span
							Element:span
								{
							Element:span
							Element:span
								"href"
							Element:span
								:
							Element:span
							Element:span
								"https://api.dwolla.com/customers/132681FA-1B4D-4181-8FF2-619CA46235B1"
							Element:span
							Element:span
								}
							Element:span
							Element:span
								},
							Element:span
							Element:span
								"id"
							Element:span
								:
							Element:span
							Element:span
								"132681FA-1B4D-4181-8FF2-619CA46235B1"
							Element:span
								,
							Element:span
							Element:span
								"firstName"
							Element:span
								:
							Element:span
							Element:span
								"Jane"
							Element:span
								,
							Element:span
							Element:span
								"lastName"
							Element:span
								:
							Element:span
							Element:span
								"doe"
							Element:span
								,
							Element:span
							Element:span
								"email"
							Element:span
								:
							Element:span
							Element:span
								"jdoe@nomail.com"
							Element:span
								,
							Element:span
							Element:span
								"type"
							Element:span
								:
							Element:span
							Element:span
								"personal"
							Element:span
								,
							Element:span
							Element:span
								"status"
							Element:span
								:
							Element:span
							Element:span
								"retry"
							Element:span
								,
							Element:span
							Element:span
								"created"
							Element:span
								:
							Element:span
							Element:span
								"2015-09-29T19:47:28.920Z"
							Element:span
							Element:span
								}
							Element:span
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Tools
						Node:
						(type) c
						(layer)2
							Element:p
								The following section will outline development tools you can take advantage of to assist in your integration with the Dwolla API. The available tools can help to improve your testing and development workflow, as well as aide in solving a difficult problem (e.g. UI generation) when integrating Dwolla into your application.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Dwolla Hal-Forms
									Node:
									(type) c
									(layer)3
										Element:p
										Element:a
											Dwolla HAL-Forms
											is an extension of the
										Element:a
											HAL spec
											and was created to describe how Dwolla represents forms in the API. The extension starts with the media type. The media type should be used as a profile link as part of the
										Element:code
											Accept
											header of the request in conjunction with the Dwolla HAL style media type. By including these two media-type identifiers in the Accept header, the API knows that you’re looking for a form for the given resource. ##### Example Accept header value
										Element:code
											application/vnd.dwolla.v1.hal+json; profile="https://github.com/dwolla/hal-forms"
									Node:
									(type) c
									(layer)3
										Element:p
											The primary benefit is the ability to dynamically generate your UI based on the state of a particular resource. Your application can easily transition state without knowing Dwolla’s business rules and what information needs to included in the actual request to transition state. When an
										Element:code
											"edit-form"
											link relation is returned on the resource, then your application can follow the link by making a GET request to that resource, including the header shown above. The response will include a simple JSON response body that contains information on the HTTP method, message content-type, and the request parameters used when sending the request to the Dwolla API.
										Element:strong
											Note:
											Currently, forms are only returned for creating & editing customers, but we’re looking forward to expanding them across our existing and future endpoints.
									Node:
									(type) c
									(layer)3
										Element:p
											Reference
										Element:a
											the spec
											for more information on the properties that can be returned in the Dwolla HAL-FORMS response. Or read a
										Element:a
											blog post
											from one of our developers on building out this functionality.
									Node:
									(type) c
									(layer)3
										Element:hr
			Node:
			(type) h1
			(layer)1
				Element:h1
					SDK Support
			Node:
			(type) c
			(layer)1
				Element:p
					The Dwolla Access API has officially maintained software packages to make it easier for developers to get started with making requests against the API. This section is here to provide basic instructions on how to install these packages and get up and running with them. We recommend you use a POSIX-standardized shell on your development machine, and assume that you are already familiar and set-up with any tools required for your specific technical ecosystem.
			Node:
			(type) c
			(layer)1
				Element:p
					Officially maintained SDKs are available for Ruby, Node.js, and Python.
			Node:
			(type) c
			(layer)1
				Element:p
					PHP and Java SDKs autogenerated by
				Element:a
					swagger-codegen
					and are versioned in accordance with our API schema. Each endpoint grouping is assigned a class and then an operation which you can use to make a request. You can choose which environment to target (e.g production vs sandbox) by providing the SDK a different API host value. These libraries are not actively maintained, therefore we encourage community contribution.
			Node:
			(type) c
			(layer)1
												Node:
												(type) c
												(layer)4
													Element:h4
														API Hosts
												Node:
												(type) c
												(layer)4
													Element:table
													Element:thead
													Element:tr
													Element:th
														Production
													Element:th
														Sandbox
													Element:tbody
													Element:tr
													Element:td
														api.dwolla.com
													Element:td
														api-uat.dwolla.com
												Node:
												(type) c
												(layer)4
													Element:h2
														Ruby
												Node:
												(type) c
												(layer)4
													Element:h3
														DwollaV2 Ruby (Recommended)
												Node:
												(type) c
												(layer)4
													Element:p
													Element:code
														dwolla_v2
														is available on
													Element:a
														RubyGems
														with
													Element:a
														source code
														available on our GitHub page. More information is available on the project’s README.
												Node:
												(type) c
												(layer)4
													Element:h3
														Installation
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														gem install dwolla_v2
												Node:
												(type) c
												(layer)4
													Element:h3
														Quickstart
												Node:
												(type) c
												(layer)4
													Element:p
														Let’s fetch a page of customers:
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
													Element:span
														require
													Element:span
														'dwolla_v2'
													Element:span
														# Navigate to https://www.dwolla.com/applications (production) or https://dashboard-uat.dwolla.com/applications (Sandbox) for your application key and secret.
													Element:span
														app_key
													Element:span
														=
													Element:span
														"..."
													Element:span
														app_secret
													Element:span
														=
													Element:span
														"..."
													Element:span
														$dwolla
													Element:span
														=
													Element:span
														DwollaV2
													Element:span
														::
													Element:span
														Client
													Element:span
														.
													Element:span
														new
													Element:span
														(
													Element:span
														key:
													Element:span
														app_key
													Element:span
														,
													Element:span
														secret:
													Element:span
														app_secret
													Element:span
														)
													Element:span
														do
													Element:span
														|
													Element:span
														config
													Element:span
														|
													Element:span
														config
													Element:span
														.
													Element:span
														environment
													Element:span
														=
													Element:span
														:sandbox
													Element:span
														# optional - defaults to production
													Element:span
														end
													Element:span
														# create an application token
													Element:span
														app_token
													Element:span
														=
													Element:span
														$dwolla
													Element:span
														.
													Element:span
														auths
													Element:span
														.
													Element:span
														client
													Element:span
														customers
													Element:span
														=
													Element:span
														app_token
													Element:span
														.
													Element:span
														get
													Element:span
														"customers"
													Element:span
														,
													Element:span
														limit:
													Element:span
														10
												Node:
												(type) c
												(layer)4
													Element:h3
														DwollaSwagger Ruby
												Node:
												(type) c
												(layer)4
													Element:p
													Element:code
														dwolla-swagger-ruby
														is available on
													Element:a
														RubyGems
														with
													Element:a
														source code
														available on our GitHub page. More information is available on the project’s README.
												Node:
												(type) c
												(layer)4
													Element:h3
														Installation
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														gem install dwolla_swagger
												Node:
												(type) c
												(layer)4
													Element:h3
														Quickstart
												Node:
												(type) c
												(layer)4
													Element:p
														Let’s list some
													Element:code
														Customer
														objects:
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
													Element:span
														require
													Element:span
														'dwolla_swagger'
													Element:span
														DwollaSwagger
													Element:span
														::
													Element:span
														Swagger
													Element:span
														.
													Element:span
														configure
													Element:span
														do
													Element:span
														|
													Element:span
														config
													Element:span
														|
													Element:span
														config
													Element:span
														.
													Element:span
														access_token
													Element:span
														=
													Element:span
														'a token'
													Element:span
														config
													Element:span
														.
													Element:span
														host
													Element:span
														=
													Element:span
														'api-uat.dwolla.com'
													Element:span
														config
													Element:span
														.
													Element:span
														base_path
													Element:span
														=
													Element:span
														'/'
													Element:span
														end
													Element:span
														my_custies
													Element:span
														=
													Element:span
														DwollaSwagger
													Element:span
														::
													Element:span
														CustomersApi
													Element:span
														.
													Element:span
														list
													Element:span
														(
													Element:span
														:limit
													Element:span
														=>
													Element:span
														10
													Element:span
														)
												Node:
												(type) c
												(layer)4
													Element:h2
														DwollaV2 Python (Recommended)
												Node:
												(type) c
												(layer)4
													Element:p
													Element:code
														dwollav2
														is available on
													Element:a
														PyPi
														with
													Element:a
														source code
														available on our GitHub page. More information is available on the project’s README.
												Node:
												(type) c
												(layer)4
													Element:h3
														Installation
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														pip install dwollav2
												Node:
												(type) c
												(layer)4
													Element:h3
														Quickstart
												Node:
												(type) c
												(layer)4
													Element:p
														Let’s list some
													Element:code
														Customer
														objects:
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
													Element:span
														import
													Element:span
														dwollav2
													Element:span
														# Navigate to https://www.dwolla.com/applications (production) or https://dashboard-uat.dwolla.com/applications (Sandbox) for your application key and secret.
													Element:span
														app_key
													Element:span
														=
													Element:span
														'...'
													Element:span
														app_secret
													Element:span
														=
													Element:span
														'...'
													Element:span
														client
													Element:span
														=
													Element:span
														dwollav2
													Element:span
														.
													Element:span
														Client
													Element:span
														(
													Element:span
														key
													Element:span
														=
													Element:span
														app_key
													Element:span
														,
													Element:span
														secret
													Element:span
														=
													Element:span
														app_secret
													Element:span
														,
													Element:span
														environment
													Element:span
														=
													Element:span
														'sandbox'
													Element:span
														)
													Element:span
														# optional - defaults to production
													Element:span
														app_token
													Element:span
														=
													Element:span
														client
													Element:span
														.
													Element:span
														Auth
													Element:span
														.
													Element:span
														client
													Element:span
														()
													Element:span
														customers
													Element:span
														=
													Element:span
														app_token
													Element:span
														.
													Element:span
														get
													Element:span
														(
													Element:span
														'customers'
													Element:span
														,
													Element:span
														{
													Element:span
														'limit'
													Element:span
														:
													Element:span
														10
													Element:span
														})
												Node:
												(type) c
												(layer)4
													Element:h2
														DwollaSwagger Python
												Node:
												(type) c
												(layer)4
													Element:p
													Element:code
														dwolla-swagger-python
														is available on
													Element:a
														PyPi
														with
													Element:a
														source code
														available on our GitHub page. More information is available on the project’s README.
												Node:
												(type) c
												(layer)4
													Element:h3
														Installation
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														pip install dwollaswagger
												Node:
												(type) c
												(layer)4
													Element:h3
														Quickstart
												Node:
												(type) c
												(layer)4
													Element:p
														Let’s list some
													Element:code
														Customer
														objects:
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
													Element:span
														dwollaswagger
													Element:span
														.
													Element:span
														configuration
													Element:span
														.
													Element:span
														access_token
													Element:span
														=
													Element:span
														'token'
													Element:span
														client
													Element:span
														=
													Element:span
														dwollaswagger
													Element:span
														.
													Element:span
														ApiClient
													Element:span
														(
													Element:span
														'https://api-uat.dwolla.com'
													Element:span
														)
													Element:span
														customers_api
													Element:span
														=
													Element:span
														dwollaswagger
													Element:span
														.
													Element:span
														CustomersApi
													Element:span
														(
													Element:span
														client
													Element:span
														)
													Element:span
														my_custies
													Element:span
														=
													Element:span
														customers_api
													Element:span
														.
													Element:span
														list
													Element:span
														(
													Element:span
														limit
													Element:span
														=
													Element:span
														10
													Element:span
														)
												Node:
												(type) c
												(layer)4
													Element:h2
														PHP
												Node:
												(type) c
												(layer)4
													Element:p
													Element:code
														dwolla-swagger-php
														is available on
													Element:a
														Packagist
														with
													Element:a
														source code
														available on our GitHub page. More information is available on the project’s README.
												Node:
												(type) c
												(layer)4
													Element:h3
														Installation
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														composer require dwolla/dwollaswagger composer install
												Node:
												(type) c
												(layer)4
													Element:h3
														Quickstart
												Node:
												(type) c
												(layer)4
													Element:p
														Let’s list some
													Element:code
														Customer
														objects:
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
													Element:span
														<?php
													Element:span
														require
													Element:span
														(
													Element:span
														'../path/to/vendor/autoload.php'
													Element:span
														);
													Element:span
														DwollaSwagger\Configuration
													Element:span
														::
													Element:span
														$access_token
													Element:span
														=
													Element:span
														'a token'
													Element:span
														;
													Element:span
														$apiClient
													Element:span
														=
													Element:span
														new
													Element:span
														DwollaSwagger\ApiClient
													Element:span
														(
													Element:span
														"https://api-uat.dwolla.com/"
													Element:span
														);
													Element:span
														$customersApi
													Element:span
														=
													Element:span
														new
													Element:span
														DwollaSwagger\CustomersApi
													Element:span
														(
													Element:span
														$apiClient
													Element:span
														);
													Element:span
														$myCusties
													Element:span
														=
													Element:span
														$customersApi
													Element:span
														->
													Element:span
														_list
													Element:span
														(
													Element:span
														10
													Element:span
														);
													Element:span
														?>
												Node:
												(type) c
												(layer)4
													Element:h2
														Java
												Node:
												(type) c
												(layer)4
													Element:p
													Element:code
														dwolla-swagger-java
														is not actively maintained by Dwolla, however
													Element:a
														source code
														is available on our GitHub page and community contribution is encouraged. More information is available on the project’s README.
												Node:
												(type) c
												(layer)4
													Element:h3
														Installation
												Node:
												(type) c
												(layer)4
													Element:p
														You will be required to install from source, please have
													Element:code
														Git
														and
													Element:code
														mvn
														installed and in your path, then:
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														git clone https://github.com/Dwolla/dwolla-swagger-java
													Element:span
														cd
														dwolla-swagger-java mvn install package
												Node:
												(type) c
												(layer)4
													Element:h3
														Quickstart
												Node:
												(type) c
												(layer)4
													Element:p
														Let’s list some
													Element:code
														Customer
														objects:
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
													Element:span
														import
													Element:span
														io.swagger.client.ApiClient
													Element:span
														;
													Element:span
														import
													Element:span
														io.swagger.client.api.*
													Element:span
														;
													Element:span
														import
													Element:span
														io.swagger.client.model.*
													Element:span
														;
													Element:span
														ApiClient
													Element:span
														a
													Element:span
														=
													Element:span
														new
													Element:span
														ApiClient
													Element:span
														();
													Element:span
														a
													Element:span
														.
													Element:span
														setBasePath
													Element:span
														(
													Element:span
														"https://api-uat.dwolla.com"
													Element:span
														);
													Element:span
														a
													Element:span
														.
													Element:span
														setAccessToken
													Element:span
														(
													Element:span
														"a token"
													Element:span
														);
													Element:span
														CustomersApi
													Element:span
														c
													Element:span
														=
													Element:span
														new
													Element:span
														CustomersApi
													Element:span
														(
													Element:span
														a
													Element:span
														);
													Element:span
														CustomerListResponse
													Element:span
														custies
													Element:span
														=
													Element:span
														c
													Element:span
														.
													Element:span
														list
													Element:span
														(
													Element:span
														10
													Element:span
														);
												Node:
												(type) c
												(layer)4
													Element:h2
														JavaScript
												Node:
												(type) c
												(layer)4
													Element:p
													Element:code
														dwolla-v2
														is available on
													Element:a
														NPM
														with
													Element:a
														source code
														available on our GitHub page. More information is available on the project’s README.
												Node:
												(type) c
												(layer)4
													Element:h3
														Installation
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														npm install dwolla-v2
												Node:
												(type) c
												(layer)4
													Element:h3
														Quickstart
												Node:
												(type) c
												(layer)4
													Element:p
														Let’s fetch a page of customers:
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
													Element:span
														const
													Element:span
														dwolla
													Element:span
														=
													Element:span
														require
													Element:span
														(
													Element:span
														'dwolla-v2'
													Element:span
														);
													Element:span
														// Navigate to https://www.dwolla.com/applications (production) or https://dashboard-uat.dwolla.com/applications (Sandbox) for your application key and secret.
													Element:span
														const
													Element:span
														appKey
													Element:span
														=
													Element:span
														'...'
													Element:span
														;
													Element:span
														const
													Element:span
														appSecret
													Element:span
														=
													Element:span
														'...'
													Element:span
														;
													Element:span
														const
													Element:span
														client
													Element:span
														=
													Element:span
														new
													Element:span
														dwolla
													Element:span
														.
													Element:span
														Client
													Element:span
														({
													Element:span
														key
													Element:span
														:
													Element:span
														appKey
													Element:span
														,
													Element:span
														secret
													Element:span
														:
													Element:span
														appSecret
													Element:span
														,
													Element:span
														environment
													Element:span
														:
													Element:span
														'sandbox'
													Element:span
														// optional - defaults to production
													Element:span
														});
													Element:span
														// create a token
													Element:span
														client
													Element:span
														.
													Element:span
														auth
													Element:span
														.
													Element:span
														client
													Element:span
														()
													Element:span
														.
													Element:span
														then
													Element:span
														(
													Element:span
														appToken
													Element:span
														=>
													Element:span
														appToken
													Element:span
														.
													Element:span
														get
													Element:span
														(
													Element:span
														'customers'
													Element:span
														,
													Element:span
														{
													Element:span
														limit
													Element:span
														:
													Element:span
														10
													Element:span
														}))
													Element:span
														.
													Element:span
														then
													Element:span
														(
													Element:span
														res
													Element:span
														=>
													Element:span
														console
													Element:span
														.
													Element:span
														log
													Element:span
														(
													Element:span
														res
													Element:span
														.
													Element:span
														body
													Element:span
														));
												Node:
												(type) c
												(layer)4
													Element:hr
			Node:
			(type) h1
			(layer)1
				Element:h1
					Authorization
			Node:
			(type) c
			(layer)1
				Element:p
					Dwolla utilizes the
				Element:a
					OAuth 2 protocol
					to facilitate authorization. OAuth is an authorization framework that enables a third-party application to obtain access to protected resources (Transfers, Funding Sources, Customers etc.) in the Dwolla API. Access to the Dwolla API can be granted to an application either on behalf of a user or on behalf of the application itself. This section covers application auth which is meant for server-to-server applications using the Access API.
			Node:
			(type) c
			(layer)1
				Element:h4
					Creating an application
			Node:
			(type) c
			(layer)1
				Element:p
					Before you can get started with making OAuth requests, you’ll need to first register an application with Dwolla by logging in and navigating to the applications page. Once an application is registered you will obtain your
				Element:code
					client_id
					and
				Element:code
					client_secret
					(aka client credentials), which will be used to identify your application when calling the Dwolla API. The Sandbox environment provides you with a created application once you have signed up for an account. Learn more in our
				Element:a
					getting started guide
					.
				Element:strong
					Remember:
					Your client_secret should be kept a secret! Be sure to store your client credentials securely.
			Node:
			(type) c
			(layer)1
				Element:h4
					Token lifetime
			Node:
			(type) c
			(layer)1
				Element:p
				Element:strong
					Access tokens
					are
				Element:em
					short lived
					: 1 hour. To refresh authorization on an application access token, your application will simply exchange its client credentials for a new app access token which will invalidate the previous token.
			Node:
			(type) c
			(layer)1
				Element:h2
					Application authorization
			Node:
			(type) c
			(layer)1
				Element:p
					The
				Element:a
					client credentials flow
					is used when an application needs to obtain permission to act on its own behalf. An application will exchange it’s
				Element:code
					client_id
					,
				Element:code
					client_secret
					, and
				Element:code
					grant_type=client_credentials
					for an application access token. An application access token can then be used to make calls to the Dwolla API on behalf of the application, for example, create a webhook subscription, retrieve events, and make calls to Access API Customer related endpoints. The primary reason for obtaining an application access token is for managing webhooks and events. However, Dwolla has modified this grant type by allowing applications to access Access API
				Element:a
					Customer
					related endpoints using the application access token.
			Node:
			(type) c
			(layer)1
				Element:h4
					HTTP request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:strong
					Production:
				Element:code
					POST https://www.dwolla.com/oauth/v2/token
			Node:
			(type) c
			(layer)1
				Element:p
				Element:strong
					UAT:
				Element:code
					POST https://uat.dwolla.com/oauth/v2/token
			Node:
			(type) c
			(layer)1
				Element:p
					Including the
				Element:code
					Content-Type: application/x-www-form-urlencoded
					header, the request is sent to the token endpoint with the following
				Element:code
					form-encoded
					parameters:
			Node:
			(type) c
			(layer)1
				Element:h4
					Request parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Required
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					client_id
				Element:td
					yes
				Element:td
					string
				Element:td
					Application key. Navigate to
				Element:code
					https://www.dwolla.com/applications
					(production) or
				Element:code
					https://dashboard-uat.dwolla.com/applications
					(Sandbox) for your application key.
				Element:tr
				Element:td
					client_secret
				Element:td
					yes
				Element:td
					string
				Element:td
					Application secret. Navigate to
				Element:code
					https://www.dwolla.com/applications
					(production) or
				Element:code
					https://dashboard-uat.dwolla.com/applications
					(Sandbox) for your application secret.
				Element:tr
				Element:td
					grant_type
				Element:td
					yes
				Element:td
					string
				Element:td
					This must be set to
				Element:code
					client_credentials
					.
			Node:
			(type) c
			(layer)1
				Element:h4
					Response parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					access_token
				Element:td
					A new access token that is used to authenticate against resources that belong to the app itself.
				Element:tr
				Element:td
					expires_in
				Element:td
					The lifetime of the access token, in seconds. Default is 3600.
				Element:tr
				Element:td
					token_type
				Element:td
					Always
				Element:code
					bearer
					.
			Node:
			(type) c
			(layer)1
				Element:h4
					Request
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					POST https://uat.dwolla.com/oauth/v2/token Content-Type: application/x-www-form-urlencoded client_id=CGQXLrlfuOqdUYdTcLz3rBiCZQDRvdWIUPkwasGMuGhkem9Bo&client_secret=g7QLwvO37aN2HoKx1amekWi8a2g7AIuPbD5CcJSLqXIcDOxfTr&grant_type=client_credentials
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					# Using dwollav2 - https://github.com/Dwolla/dwolla-v2-python
				Element:span
					# This example assumes you've already intialized the client. Reference the SDKs page for more information: https://developers.dwolla.com/pages/sdks.html
				Element:span
					application_token
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					Auth
				Element:span
					.
				Element:span
					client
				Element:span
					()
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					// Using DwollaV2 - https://github.com/Dwolla/dwolla-v2-node
				Element:span
					// This example assumes you've already intialized the client. Reference the SDKs page for more information: https://developers.dwolla.com/pages/sdks.html
				Element:span
					client
				Element:span
					.
				Element:span
					auth
				Element:span
					.
				Element:span
					client
				Element:span
					()
				Element:span
					.
				Element:span
					then
				Element:span
					(
				Element:span
					function
				Element:span
					(
				Element:span
					appToken
				Element:span
					)
				Element:span
					{
				Element:span
					return
				Element:span
					appToken
				Element:span
					.
				Element:span
					get
				Element:span
					(
				Element:span
					'webhook-subscriptions'
				Element:span
					);
				Element:span
					})
				Element:span
					.
				Element:span
					then
				Element:span
					(
				Element:span
					function
				Element:span
					(
				Element:span
					res
				Element:span
					)
				Element:span
					{
				Element:span
					console
				Element:span
					.
				Element:span
					log
				Element:span
					(
				Element:span
					JSON
				Element:span
					.
				Element:span
					stringify
				Element:span
					(
				Element:span
					res
				Element:span
					.
				Element:span
					body
				Element:span
					));
				Element:span
					});
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					# Using DwollaV2 - https://github.com/Dwolla/dwolla-v2-ruby
				Element:span
					# This example assumes you've already intialized the client. Reference the SDKs page for more information: https://developers.dwolla.com/pages/sdks.html
				Element:span
					application_token
				Element:span
					=
				Element:span
					$dwolla
				Element:span
					.
				Element:span
					auths
				Element:span
					.
				Element:span
					client
				Element:span
					# => #<DwollaV2::Token client=#<DwollaV2::Client id="..." secret="..." environment=:sandbox> access_token="..." expires_in=3600 scope="...">
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					/** * No support for this language yet. We recommend using an external REST client for making OAuth requests. **/
			Node:
			(type) c
			(layer)1
				Element:h4
					Successful response
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"access_token"
				Element:span
					:
				Element:span
				Element:span
					"SF8Vxx6H644lekdVKAAHFnqRCFy8WGqltzitpii6w2MVaZp1Nw"
				Element:span
					,
				Element:span
				Element:span
					"token_type"
				Element:span
					:
				Element:span
				Element:span
					"bearer"
				Element:span
					,
				Element:span
				Element:span
					"expires_in"
				Element:span
					:
				Element:span
				Element:span
					3600
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:hr
			Node:
			(type) h1
			(layer)1
				Element:h1
					Root
			Node:
			(type) c
			(layer)1
				Element:p
					The “root” serves as an entry point to the API, providing your application with the ability to fetch and discover resources available based on the OAuth
				Element:code
					access_token
					provided in the request. If a user
				Element:a
					account access token
					is provided in the request, the API will return links to resources that belong to a Dwolla account of that user (i.e. “accounts” and “customers”). Alternatively, if an
				Element:a
					application access token
					is provided in the request, the API will return links to resources that belong to the Dwolla application (i.e. “events” and “webhook-subscriptions”).
			Node:
			(type) c
			(layer)1
				Element:ol
				Element:li
				Element:p
					This endpoint requires an OAuth account access token or an
				Element:em
					Application
					access token but does not require a particular scope.
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET https://api.dwolla.com/
			Node:
			(type) c
			(layer)1
				Element:h3
					Request and response
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					GET https://api.dwolla.com/ Accept: application/vnd.dwolla.v1.hal+json Authorization: Bearer pBA9fVDBEyYZCEsLf/wKehyh1RTpzjUj5KzIRfDi0wKTii7DqY ... { "_links": { "account": { "href": "https://api-uat.dwolla.com/accounts/ad5f2162-404a-4c4c-994e-6ab6c3a13254" }, "customers": { "href": "https://api-uat.dwolla.com/customers" } } }
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					root
				Element:span
					=
				Element:span
					token
				Element:span
					.
				Element:span
					get
				Element:span
					"/"
				Element:span
					root
				Element:span
					.
				Element:span
					_links
				Element:span
					.
				Element:span
					account
				Element:span
					.
				Element:span
					href
				Element:span
					# => "https://api-uat.dwolla.com/accounts/ad5f2162-404a-4c4c-994e-6ab6c3a13254"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					/** * No example for this language yet. Coming soon. **/
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					# Using dwollav2 - https://github.com/Dwolla/dwolla-v2-python (Recommended)
				Element:span
					root
				Element:span
					=
				Element:span
					token
				Element:span
					.
				Element:span
					get
				Element:span
					(
				Element:span
					'/'
				Element:span
					)
				Element:span
					root
				Element:span
					.
				Element:span
					body
				Element:span
					[
				Element:span
					'_links'
				Element:span
					][
				Element:span
					'account'
				Element:span
					][
				Element:span
					'href'
				Element:span
					]
				Element:span
					# => 'https://api-uat.dwolla.com/accounts/ad5f2162-404a-4c4c-994e-6ab6c3a13254'
				Element:span
					# Using dwollaswagger - https://github.com/Dwolla/dwolla-swagger-python
				Element:span
					root_api
				Element:span
					=
				Element:span
					dwollaswagger
				Element:span
					.
				Element:span
					RootApi
				Element:span
					(
				Element:span
					client
				Element:span
					)
				Element:span
					an_account
				Element:span
					=
				Element:span
					root_api
				Element:span
					.
				Element:span
					root
				Element:span
					()
				Element:span
					an_account
				Element:span
					.
				Element:span
					_links
				Element:span
					[
				Element:span
					'account'
				Element:span
					][
				Element:span
					'href'
				Element:span
					]
				Element:span
					# => 'https://api-uat.dwolla.com/accounts/ad5f2162-404a-4c4c-994e-6ab6c3a13254'
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					token
				Element:span
					.
				Element:span
					get
				Element:span
					(
				Element:span
					'/'
				Element:span
					)
				Element:span
					.
				Element:span
					then
				Element:span
					(
				Element:span
					res
				Element:span
					=>
				Element:span
					res
				Element:span
					.
				Element:span
					body
				Element:span
					.
				Element:span
					_links
				Element:span
					.
				Element:span
					account
				Element:span
					.
				Element:span
					href
				Element:span
					);
				Element:span
					// => 'https://api-uat.dwolla.com/accounts/ad5f2162-404a-4c4c-994e-6ab6c3a13254'
			Node:
			(type) c
			(layer)1
				Element:hr
			Node:
			(type) h1
			(layer)1
				Element:h1
					Accounts
			Node:
			(type) c
			(layer)1
				Element:p
					An
				Element:code
					Account
					represents an Access API partner Dwolla account that was established on dwolla.com.
			Node:
			(type) c
			(layer)1
				Element:h3
					Migrating Dwolla user Accounts to Access API Customers
			Node:
			(type) c
			(layer)1
				Element:p
					Dwolla offers a seamless process for migrating existing Transfer user Accounts managed via OAuth on your platform to Access API
				Element:a
					Customers
					. The user Account will maintain existing functionality on dwolla.com and will act as a separate Access API Customer upon completion of the migration. To learn more about upgrading to the Access API, please
				Element:a
					contact Sales
					.
			Node:
			(type) c
			(layer)1
				Element:h3
					Account links
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Link
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					self
				Element:td
					URL of the Account resource
				Element:tr
				Element:td
					receive
				Element:td
					Follow the link to create a transfer to this Account.
				Element:tr
				Element:td
					funding-sources
				Element:td
					GET this link to list the Accounts’s funding sources.
				Element:tr
				Element:td
					transfers
				Element:td
					GET this link to list the Account’s transfers
				Element:tr
				Element:td
					customers
				Element:td
					(optional) If this link exists, this account is authorized to create and manage Access API Customers.
				Element:tr
				Element:td
					send
				Element:td
					Follow the link to create a transfer to this Account.
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"_links"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"self"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"href"
				Element:span
					:
				Element:span
				Element:span
					"https://api-uat.dwolla.com/accounts/ca32853c-48fa-40be-ae75-77b37504581b"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"receive"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"href"
				Element:span
					:
				Element:span
				Element:span
					"https://api-uat.dwolla.com/transfers"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"funding-sources"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"href"
				Element:span
					:
				Element:span
				Element:span
					"https://api-uat.dwolla.com/accounts/ca32853c-48fa-40be-ae75-77b37504581b/funding-sources"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"transfers"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"href"
				Element:span
					:
				Element:span
				Element:span
					"https://api-uat.dwolla.com/accounts/ca32853c-48fa-40be-ae75-77b37504581b/transfers"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"customers"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"href"
				Element:span
					:
				Element:span
				Element:span
					"https://api-uat.dwolla.com/customers"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"send"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"href"
				Element:span
					:
				Element:span
				Element:span
					"https://api-uat.dwolla.com/transfers"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"ca32853c-48fa-40be-ae75-77b37504581b"
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Jane Doe"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h2
					Retrieve account details
			Node:
			(type) c
			(layer)1
				Element:p
					This section shows you how to retrieve account information belonging to the authorized user Account. The developer can pass either an
				Element:code
					id
					or the entire
				Element:code
					location
					resource to make this request.
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET https://api.dwolla.com/accounts/{id}
			Node:
			(type) c
			(layer)1
				Element:h3
					Request parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Required
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
					yes
				Element:td
					string
				Element:td
					Account unique identifier.
			Node:
			(type) c
			(layer)1
				Element:h3
					Errors
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					HTTP Status
				Element:th
					Message
				Element:tbody
				Element:tr
				Element:td
					403
				Element:td
					Not authorized to get an Account by id.
				Element:tr
				Element:td
					404
				Element:td
					Account not found.
			Node:
			(type) c
			(layer)1
				Element:h3
					Request and response
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					GET https://api-uat.dwolla.com/accounts/ca32853c-48fa-40be-ae75-77b37504581b Accept: application/vnd.dwolla.v1.hal+json Authorization: Bearer pBA9fVDBEyYZCEsLf/wKehyh1RTpzjUj5KzIRfDi0wKTii7DqY { "_links": { "self": { "href": "https://api-uat.dwolla.com/accounts/ca32853c-48fa-40be-ae75-77b37504581b" }, "receive": { "href": "https://api-uat.dwolla.com/transfers" }, "funding-sources": { "href": "https://api-uat.dwolla.com/accounts/ca32853c-48fa-40be-ae75-77b37504581b/funding-sources" }, "transfers": { "href": "https://api-uat.dwolla.com/accounts/ca32853c-48fa-40be-ae75-77b37504581b/transfers" }, "customers": { "href": "https://api-uat.dwolla.com/customers" }, "send": { "href": "https://api-uat.dwolla.com/transfers" } }, "id": "ca32853c-48fa-40be-ae75-77b37504581b", "name": "Jane Doe" }
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					account_url
				Element:span
					=
				Element:span
					'https://api-uat.dwolla.com/accounts/ca32853c-48fa-40be-ae75-77b37504581b'
				Element:span
					# Using DwollaV2 - https://github.com/Dwolla/dwolla-v2-ruby (Recommended)
				Element:span
					# For Access API applications, an app_token can be used for this endpoint. (https://docsv2.dwolla.com/#application-access-token)
				Element:span
					account
				Element:span
					=
				Element:span
					account_token
				Element:span
					.
				Element:span
					get
				Element:span
					account_url
				Element:span
					account
				Element:span
					.
				Element:span
					name
				Element:span
					# => "Jane Doe"
				Element:span
					# Using DwollaSwagger - https://github.com/Dwolla/dwolla-swagger-ruby
				Element:span
					account
				Element:span
					=
				Element:span
					DwollaSwagger
				Element:span
					::
				Element:span
					AccountsApi
				Element:span
					.
				Element:span
					id
				Element:span
					(
				Element:span
					account_url
				Element:span
					)
				Element:span
					account
				Element:span
					.
				Element:span
					name
				Element:span
					# => "Jane Doe"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					<?php
				Element:span
					$accountUrl
				Element:span
					=
				Element:span
					'https://api-uat.dwolla.com/accounts/ca32853c-48fa-40be-ae75-77b37504581b'
				Element:span
					;
				Element:span
					$accountsApi
				Element:span
					=
				Element:span
					new
				Element:span
					DwollaSwagger\AccountsApi
				Element:span
					(
				Element:span
					$apiClient
				Element:span
					);
				Element:span
					$account
				Element:span
					=
				Element:span
					$accountsApi
				Element:span
					->
				Element:span
					id
				Element:span
					(
				Element:span
					$accountUrl
				Element:span
					);
				Element:span
					print
				Element:span
					(
				Element:span
					$account
				Element:span
					->
				Element:span
					name
				Element:span
					);
				Element:span
					# => "Jane Doe"
				Element:span
					?>
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					account_url
				Element:span
					=
				Element:span
					'https://api-uat.dwolla.com/accounts/ca32853c-48fa-40be-ae75-77b37504581b'
				Element:span
					accounts_api
				Element:span
					=
				Element:span
					dwollaswagger
				Element:span
					.
				Element:span
					AccountsApi
				Element:span
					(
				Element:span
					client
				Element:span
					)
				Element:span
					account
				Element:span
					=
				Element:span
					accounts_api
				Element:span
					.
				Element:span
					id
				Element:span
					(
				Element:span
					account_url
				Element:span
					)
				Element:span
					print
				Element:span
					(
				Element:span
					account
				Element:span
					.
				Element:span
					name
				Element:span
					)
				Element:span
					# => Jane Doe
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					var
				Element:span
					accountUrl
				Element:span
					=
				Element:span
					'https://api-uat.dwolla.com/accounts/ca32853c-48fa-40be-ae75-77b37504581b'
				Element:span
					;
				Element:span
					// For Access API applications, an appToken can be used for this endpoint. (https://docsv2.dwolla.com/#application-access-token)
				Element:span
					accountToken
				Element:span
					.
				Element:span
					get
				Element:span
					(
				Element:span
					accountUrl
				Element:span
					)
				Element:span
					.
				Element:span
					then
				Element:span
					(
				Element:span
					res
				Element:span
					=>
				Element:span
					res
				Element:span
					.
				Element:span
					body
				Element:span
					.
				Element:span
					name
				Element:span
					);
				Element:span
					// => 'Jane Doe'
			Node:
			(type) c
			(layer)1
				Element:h2
					Create a funding source for an account
			Node:
			(type) c
			(layer)1
				Element:p
					This section details how to add a bank account to a Dwolla account. The bank account will have a status of
				Element:code
					unverified
					upon creation. Before a Dwolla account is eligible to transfer money from their bank or credit union account they need to verify ownership of the account via micro-deposit verification.
			Node:
			(type) c
			(layer)1
				Element:p
					For more information on micro-deposit verification, reference the
				Element:a
					funding source verification
					resource article.
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					POST https://api.dwolla.com/funding-sources
			Node:
			(type) c
			(layer)1
				Element:h3
					Request parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Required
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					accountNumber
				Element:td
					yes
				Element:td
					string
				Element:td
					The bank account number.
				Element:tr
				Element:td
					routingNumber
				Element:td
					yes
				Element:td
					string
				Element:td
					The bank account’s routing number.
				Element:tr
				Element:td
					type
				Element:td
					yes
				Element:td
					string
				Element:td
					Type of bank account:
				Element:code
					checking
					or
				Element:code
					savings
					.
				Element:tr
				Element:td
					name
				Element:td
					yes
				Element:td
					string
				Element:td
					Arbitrary nickname for the funding source.
				Element:tr
				Element:td
					channels
				Element:td
					no
				Element:td
					array
				Element:td
					An array containing a list of processing channels. ACH is the default processing channel for bank transfers. Acceptable value for channels is: “wire”. e.g.
				Element:code
					“channels”: [ “wire” ]
					. A funding source (Bank Account) added using the wire channel only supports a funds transfer going to the bank account from a balance.
				Element:strong
					Note:
				Element:code
					channels
					is a premium feature that must be enabled on your account and is only available to select
				Element:a
					Access API
					partners.
			Node:
			(type) c
			(layer)1
				Element:h3
					Errors
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					HTTP Status
				Element:th
					Message
				Element:tbody
				Element:tr
				Element:td
					400
				Element:td
					Duplicate funding source or validation error.
				Element:tr
				Element:td
					403
				Element:td
					Not authorized to create funding source.
			Node:
			(type) c
			(layer)1
				Element:h3
					Request and response
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					POST /funding-sources Content-Type: application/vnd.dwolla.v1.hal+json Accept: application/vnd.dwolla.v1.hal+json Authorization: Bearer pBA9fVDBEyYZCEsLf/wKehyh1RTpzjUj5KzIRfDi0wKTii7DqY { "routingNumber": "222222226", "accountNumber": "123456789", "type": "checking", "name": "My Bank" } ... HTTP/1.1 201 Created Location: https://api-uat.dwolla.com/funding-sources/04173e17-6398-4d36-a167-9d98c4b1f1c3
			Node:
			(type) c
			(layer)1
				Element:h2
					List funding sources for an account
			Node:
			(type) c
			(layer)1
				Element:p
					Retrieve a list of funding sources that belong to an Account. By default, all funding sources are returned unless the
				Element:code
					removed
					querystring parameter is set to
				Element:code
					false
					in the request.
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET https://api.dwolla.com/accounts/{id}/funding-sources
			Node:
			(type) c
			(layer)1
				Element:h3
					Request parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Required
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
					yes
				Element:td
					string
				Element:td
					Account’s unique identifier.
				Element:tr
				Element:td
					removed
				Element:td
					no
				Element:td
					boolean
				Element:td
					Filter removed funding sources. Defaults to
				Element:code
					true
					. Set to
				Element:code
					false
					to filter out removed funding sources from list (i.e. - /accounts/{id}/funding-sources?removed=false).
			Node:
			(type) c
			(layer)1
				Element:h3
					Errors
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					HTTP Status
				Element:th
					Message
				Element:tbody
				Element:tr
				Element:td
					403
				Element:td
					Not authorized to list funding sources.
				Element:tr
				Element:td
					404
				Element:td
					Account not found.
			Node:
			(type) c
			(layer)1
				Element:h3
					Request and response
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					GET https://api.dwolla.com/accounts/ca32853c-48fa-40be-ae75-77b37504581b/funding-sources Accept: application/vnd.dwolla.v1.hal+json Authorization: Bearer pBA9fVDBEyYZCEsLf/wKehyh1RTpzjUj5KzIRfDi0wKTii7DqY ... { "_links": { "self": { "href": "https://api-uat.dwolla.com/accounts/ca32853c-48fa-40be-ae75-77b37504581b/funding-sources" } }, "_embedded": { "funding-sources": [ { "_links": { "self": { "href": "https://api-uat.dwolla.com/funding-sources/04173e17-6398-4d36-a167-9d98c4b1f1c3" }, "account": { "href": "https://api-uat.dwolla.com/accounts/ca32853c-48fa-40be-ae75-77b37504581b" } }, "id": "04173e17-6398-4d36-a167-9d98c4b1f1c3", "status": "verified", "type": "bank", "name": "First Midwestern Bank", "created": "2014-07-09T20:39:37.000Z" }, { "_links": { "self": { "href": "https://api-uat.dwolla.com/funding-sources/b268f6b9-db3b-4ecc-83a2-8823a53ec8b7" }, "account": { "href": "https://api-uat.dwolla.com/accounts/ca32853c-48fa-40be-ae75-77b37504581b" }, "with-available-balance": { "href": "https://api-uat.dwolla.com/funding-sources/b268f6b9-db3b-4ecc-83a2-8823a53ec8b7" } }, "id": "b268f6b9-db3b-4ecc-83a2-8823a53ec8b7", "status": "verified", "type": "balance", "name": "Balance", "created": "2014-07-09T20:39:33.000Z" } ] } }
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					account_url
				Element:span
					=
				Element:span
					'https://api.dwolla.com/accounts/ca32853c-48fa-40be-ae75-77b37504581b'
				Element:span
					# Using DwollaV2 - https://github.com/Dwolla/dwolla-v2-ruby (Recommended)
				Element:span
					# For Access API applications, an app_token can be used for this endpoint. (https://docsv2.dwolla.com/#application-access-token)
				Element:span
					funding_sources
				Element:span
					=
				Element:span
					account_token
				Element:span
					.
				Element:span
					get
				Element:span
					"
				Element:span
					#{
				Element:span
					account_url
				Element:span
					}
				Element:span
					/funding-sources"
				Element:span
					funding_sources
				Element:span
					.
				Element:span
					_embedded
				Element:span
					[
				Element:span
					'funding-sources'
				Element:span
					][
				Element:span
					0
				Element:span
					].
				Element:span
					name
				Element:span
					# => "Jane Doe's Checking"
				Element:span
					# Using DwollaSwagger - https://github.com/Dwolla/dwolla-swagger-ruby
				Element:span
					funding_sources
				Element:span
					=
				Element:span
					DwollaSwagger
				Element:span
					::
				Element:span
					FundingsourcesApi
				Element:span
					.
				Element:span
					get_account_funding_sources
				Element:span
					(
				Element:span
					account_url
				Element:span
					)
				Element:span
					funding_sources
				Element:span
					.
				Element:span
					_embedded
				Element:span
					[
				Element:span
					:'funding-sources'
				Element:span
					][
				Element:span
					0
				Element:span
					][
				Element:span
					:name
				Element:span
					]
				Element:span
					# => "Jane Doe’s Checking"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					<?php
				Element:span
					$accountUrl
				Element:span
					=
				Element:span
					'https://api.dwolla.com/accounts/ca32853c-48fa-40be-ae75-77b37504581b'
				Element:span
					;
				Element:span
					$fsApi
				Element:span
					=
				Element:span
					new
				Element:span
					DwollaSwagger\FundingsourcesApi
				Element:span
					(
				Element:span
					$apiClient
				Element:span
					);
				Element:span
					$fundingSources
				Element:span
					=
				Element:span
					$fsApi
				Element:span
					->
				Element:span
					getAccountFundingSources
				Element:span
					(
				Element:span
					$accountUrl
				Element:span
					);
				Element:span
					$fundingSources
				Element:span
					->
				Element:span
					_embedded
				Element:span
					->
				Element:span
					{
				Element:span
					'funding-sources'
				Element:span
					}[
				Element:span
					0
				Element:span
					]
				Element:span
					->
				Element:span
					name
				Element:span
					);
				Element:span
					# => "Jane Doe’s Checking"
				Element:span
					?>
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					account_url
				Element:span
					=
				Element:span
					'https://api.dwolla.com/accounts/ca32853c-48fa-40be-ae75-77b37504581b'
				Element:span
					fs_api
				Element:span
					=
				Element:span
					dwollaswagger
				Element:span
					.
				Element:span
					FundingsourcesApi
				Element:span
					(
				Element:span
					client
				Element:span
					)
				Element:span
					funding_sources
				Element:span
					=
				Element:span
					fs_api
				Element:span
					.
				Element:span
					get_account_funding_sources
				Element:span
					(
				Element:span
					account_url
				Element:span
					)
				Element:span
					funding_sources
				Element:span
					.
				Element:span
					_embedded
				Element:span
					[
				Element:span
					'funding-sources'
				Element:span
					][
				Element:span
					0
				Element:span
					][
				Element:span
					'name'
				Element:span
					]
				Element:span
					# => Jane Doe’s Checking
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					var
				Element:span
					accountUrl
				Element:span
					=
				Element:span
					'https://api-uat.dwolla.com/accounts/ca32853c-48fa-40be-ae75-77b37504581b'
				Element:span
					;
				Element:span
					// For Access API applications, an appToken can be used for this endpoint. (https://docsv2.dwolla.com/#application-access-token)
				Element:span
					accountToken
				Element:span
					.
				Element:span
					get
				Element:span
					(
				Element:span
					`
				Element:span
					$
				Element:span
					{
				Element:span
					accountUrl
				Element:span
					}
				Element:span
					/funding-sources`
				Element:span
					)
				Element:span
					.
				Element:span
					then
				Element:span
					(
				Element:span
					res
				Element:span
					=>
				Element:span
					res
				Element:span
					.
				Element:span
					body
				Element:span
					.
				Element:span
					_embedded
				Element:span
					[
				Element:span
					'funding-sources'
				Element:span
					][
				Element:span
					0
				Element:span
					].
				Element:span
					name
				Element:span
					);
				Element:span
					// => 'ABC Bank Checking'
			Node:
			(type) c
			(layer)1
				Element:h2
					List and search transfers for an account
			Node:
			(type) c
			(layer)1
				Element:p
					This section covers how to retrieve an Account’s list of transfers. Transaction search is supported by passing in optional querystring parameters such as:
				Element:code
					search
					which represents a term to search on,
				Element:code
					startAmount
					,
				Element:code
					endAmount
					,
				Element:code
					startDate
					, and
				Element:code
					endDate
					.
			Node:
			(type) c
			(layer)1
				Element:ol
				Element:li
				Element:p
					This endpoint requires an OAuth account access token with the
				Element:code
					Transactions
					scope.
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET https://api.dwolla.com/accounts/{id}/transfers
			Node:
			(type) c
			(layer)1
				Element:h3
					Request parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Required
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
					yes
				Element:td
					string
				Element:td
					Account unique identifier to get transfers for.
				Element:tr
				Element:td
					search
				Element:td
					no
				Element:td
					string
				Element:td
					A string to search on fields:
				Element:code
					firstName
					,
				Element:code
					lastName
					,
				Element:code
					email
					,
				Element:code
					businessName
					, Customer Id, and Account Id. (
				Element:code
					/transfers?search=Doe
					)
				Element:tr
				Element:td
					startAmount
				Element:td
					no
				Element:td
					string
				Element:td
					Only include transactions with an amount equal to or greater than
				Element:code
					startAmount
					. Can optionally be used with
				Element:code
					endAmount
					to specify an amount range.
				Element:tr
				Element:td
					endAmount
				Element:td
					no
				Element:td
					string
				Element:td
					Only include transactions with an amount equal to or less than
				Element:code
					endAmount
					. Can optionally be used with
				Element:code
					startAmount
					to specify an amount range.
				Element:tr
				Element:td
					startDate
				Element:td
					no
				Element:td
					string
				Element:td
					Only include transactions created after this date. ISO-8601 format:
				Element:code
					YYYY-MM-DD
					. Can optionally be used with
				Element:code
					endDate
					to specify a date range.
				Element:tr
				Element:td
					endDate
				Element:td
					no
				Element:td
					string
				Element:td
					Only include transactions created before than this date. ISO-8601 format:
				Element:code
					YYYY-MM-DD
					. Can optionally be used with
				Element:code
					startDate
					to specify a date range.
				Element:tr
				Element:td
					status
				Element:td
					no
				Element:td
					string
				Element:td
					Filter results on transaction status. Possible values:
				Element:code
					pending
					,
				Element:code
					processed
					,
				Element:code
					failed
					,
				Element:code
					reclaimed
					, or
				Element:code
					cancelled
					.
				Element:tr
				Element:td
					limit
				Element:td
					no
				Element:td
					integer
				Element:td
					Number of search results to return. Defaults to 25.
				Element:tr
				Element:td
					offset
				Element:td
					no
				Element:td
					integer
				Element:td
					Number of search results to skip. Used for pagination.
			Node:
			(type) c
			(layer)1
				Element:h3
					Errors
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					HTTP Status
				Element:th
					Message
				Element:tbody
				Element:tr
				Element:td
					404
				Element:td
					Account not found.
			Node:
			(type) c
			(layer)1
				Element:h3
					Request and response
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					GET https://api.dwolla.com/accounts/a84222d5-31d2-4290-9a96-089813ef96b3/transfers Accept: application/vnd.dwolla.v1.hal+json Authorization: Bearer pBA9fVDBEyYZCEsLf/wKehyh1RTpzjUj5KzIRfDi0wKTii7DqY ... { "_links": { "self": { "href": "https://api-uat.dwolla.com/accounts/a84222d5-31d2-4290-9a96-089813ef96b3/transfers" }, "first": { "href": "https://api-uat.dwolla.com/accounts/a84222d5-31d2-4290-9a96-089813ef96b3/transfers?limit=25&offset=0" }, "last": { "href": "https://api-uat.dwolla.com/accounts/a84222d5-31d2-4290-9a96-089813ef96b3/transfers?limit=25&offset=0" } }, "_embedded": { "transfers": [ { "_links": { "self": { "href": "https://api-uat.dwolla.com/transfers/DC68A3DC-3C61-E511-80DA-0AA34A9B2388" }, "source": { "href": "https://api-uat.dwolla.com/accounts/CA32853C-48FA-40BE-AE75-77B37504581B" }, "destination": { "href": "https://api-uat.dwolla.com/accounts/A84222D5-31D2-4290-9A96-089813EF96B3" } }, "id": "DC68A3DC-3C61-E511-80DA-0AA34A9B2388", "status": "processed", "amount": { "value": "50.00", "currency": "USD" }, "created": "2015-09-22T15:16:14.180Z" }, { "_links": { "self": { "href": "https://api-uat.dwolla.com/transfers/D36FD9AA-6E5C-E511-80DA-0AA34A9B2388" }, "source": { "href": "https://api-uat.dwolla.com/funding-sources/2BFF2631-4006-45D6-BBBD-A7BE4853E870" }, "destination": { "href": "https://api-uat.dwolla.com/accounts/A84222D5-31D2-4290-9A96-089813EF96B3" } }, "id": "D36FD9AA-6E5C-E511-80DA-0AA34A9B2388", "status": "processed", "amount": { "value": "5000.00", "currency": "USD" }, "created": "2015-09-03T18:11:53.410Z" } ] }, "total": 2 }
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					account_url
				Element:span
					=
				Element:span
					'https://api-uat.dwolla.com/accounts/a84222d5-31d2-4290-9a96-089813ef96b3'
				Element:span
					# Using DwollaV2 - https://github.com/Dwolla/dwolla-v2-ruby (Recommended)
				Element:span
					transfers
				Element:span
					=
				Element:span
					account_token
				Element:span
					.
				Element:span
					get
				Element:span
					"
				Element:span
					#{
				Element:span
					account_url
				Element:span
					}
				Element:span
					/transfers"
				Element:span
					transfers
				Element:span
					.
				Element:span
					_embedded
				Element:span
					.
				Element:span
					transfers
				Element:span
					[
				Element:span
					0
				Element:span
					].
				Element:span
					status
				Element:span
					# => "processed"
				Element:span
					# Using DwollaSwagger - https://github.com/Dwolla/dwolla-swagger-ruby
				Element:span
					transfers
				Element:span
					=
				Element:span
					DwollaSwagger
				Element:span
					::
				Element:span
					TransfersApi
				Element:span
					.
				Element:span
					get_account_transfers
				Element:span
					(
				Element:span
					account_url
				Element:span
					)
				Element:span
					transfers
				Element:span
					.
				Element:span
					_embedded
				Element:span
					[
				Element:span
					:transfers
				Element:span
					][
				Element:span
					0
				Element:span
					][
				Element:span
					:status
				Element:span
					]
				Element:span
					# => "processed"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					<?php
				Element:span
					$accountUrl
				Element:span
					=
				Element:span
					'https://api-uat.dwolla.com/accounts/a84222d5-31d2-4290-9a96-089813ef96b3'
				Element:span
					;
				Element:span
					$transfersApi
				Element:span
					=
				Element:span
					new
				Element:span
					DwollaSwagger\TransfersApi
				Element:span
					(
				Element:span
					$apiClient
				Element:span
					);
				Element:span
					$transfers
				Element:span
					=
				Element:span
					$transfersApi
				Element:span
					->
				Element:span
					getAccountTransfers
				Element:span
					(
				Element:span
					$accountUrl
				Element:span
					);
				Element:span
					$transfers
				Element:span
					->
				Element:span
					_embedded
				Element:span
					->
				Element:span
					transfers
				Element:span
					[
				Element:span
					0
				Element:span
					]
				Element:span
					->
				Element:span
					status
				Element:span
					;
				Element:span
					# => "processed"
				Element:span
					?>
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					account_url
				Element:span
					=
				Element:span
					'https://api-uat.dwolla.com/accounts/a84222d5-31d2-4290-9a96-089813ef96b3'
				Element:span
					# Using dwollav2 - https://github.com/Dwolla/dwolla-v2-python (Recommended)
				Element:span
					# For Access API applications, an app_token can be used for this endpoint. (https://docsv2.dwolla.com/#application-access-token)
				Element:span
					transfers
				Element:span
					=
				Element:span
					account_token
				Element:span
					.
				Element:span
					get
				Element:span
					(
				Element:span
					'
				Element:span
					%
				Element:span
					s/transfers'
				Element:span
					%
				Element:span
					account_url
				Element:span
					)
				Element:span
					transfers
				Element:span
					.
				Element:span
					body
				Element:span
					[
				Element:span
					'_embedded'
				Element:span
					][
				Element:span
					'transfers'
				Element:span
					][
				Element:span
					0
				Element:span
					][
				Element:span
					'status'
				Element:span
					]
				Element:span
					# => "processed"
				Element:span
					# Using dwollaswagger - https://github.com/Dwolla/dwolla-swagger-python
				Element:span
					transfers_api
				Element:span
					=
				Element:span
					dwollaswagger
				Element:span
					.
				Element:span
					TransfersApi
				Element:span
					(
				Element:span
					client
				Element:span
					)
				Element:span
					transfers
				Element:span
					=
				Element:span
					transfers_api
				Element:span
					.
				Element:span
					get_account_transfers
				Element:span
					(
				Element:span
					account_url
				Element:span
					)
				Element:span
					transfers
				Element:span
					.
				Element:span
					_embedded
				Element:span
					[
				Element:span
					'transfers'
				Element:span
					][
				Element:span
					0
				Element:span
					][
				Element:span
					'status'
				Element:span
					]
				Element:span
					# => "processed"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					var
				Element:span
					accountUrl
				Element:span
					=
				Element:span
					'https://api-uat.dwolla.com/accounts/ca32853c-48fa-40be-ae75-77b37504581b'
				Element:span
					;
				Element:span
					// For Access API applications, an appToken can be used for this endpoint. (https://docsv2.dwolla.com/#application-access-token)
				Element:span
					accountToken
				Element:span
					.
				Element:span
					get
				Element:span
					(
				Element:span
					`
				Element:span
					$
				Element:span
					{
				Element:span
					accountUrl
				Element:span
					}
				Element:span
					/transfers`
				Element:span
					)
				Element:span
					.
				Element:span
					then
				Element:span
					(
				Element:span
					res
				Element:span
					=>
				Element:span
					res
				Element:span
					.
				Element:span
					body
				Element:span
					.
				Element:span
					_embedded
				Element:span
					.
				Element:span
					transfers
				Element:span
					.[
				Element:span
					0
				Element:span
					].
				Element:span
					status
				Element:span
					);
				Element:span
					// => 'processed'
			Node:
			(type) c
			(layer)1
				Element:h2
					List mass payments for an account
			Node:
			(type) c
			(layer)1
				Element:p
					This section covers how to retrieve an Account’s list of previously created mass payments. Mass payments are returned ordered by date created, with most recent mass payments appearing first.
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET https://api.dwolla.com/accounts/{id}/mass-payments
			Node:
			(type) c
			(layer)1
				Element:h3
					Request parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Required
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
					yes
				Element:td
					string
				Element:td
					Account unique identifier to get mass payments for.
				Element:tr
				Element:td
					limit
				Element:td
					no
				Element:td
					integer
				Element:td
					How many results to return. Defaults to 25.
				Element:tr
				Element:td
					offset
				Element:td
					no
				Element:td
					integer
				Element:td
					How many results to skip.
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Status and Error Codes
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					HTTP Status
				Element:th
					Code
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					403
				Element:td
					NotAuthorized
				Element:td
					Not authorized to list mass payments.
				Element:tr
				Element:td
					404
				Element:td
					NotFound
				Element:td
					Account not found.
			Node:
			(type) c
			(layer)1
				Element:h3
					Request and response
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					GET https://api-uat.dwolla.com/accounts/ca32853c-48fa-40be-ae75-77b37504581b/mass-payments Accept: application/vnd.dwolla.v1.hal+json Authorization: Bearer pBA9fVDBEyYZCEsLf/wKehyh1RTpzjUj5KzIRfDi0wKTii7DqY .... { "_links": { "self": { "href": "https://api-uat.dwolla.com/accounts/ca32853c-48fa-40be-ae75-77b37504581b/mass-payments" }, "first": { "href": "https://api-uat.dwolla.com/accounts/ca32853c-48fa-40be-ae75-77b37504581b/mass-payments?limit=25&offset=0" }, "last": { "href": "https://api-uat.dwolla.com/accounts/ca32853c-48fa-40be-ae75-77b37504581b/mass-payments?limit=25&offset=0" } }, "_embedded": { "mass-payments": [ { "_links": { "self": { "href": "https://api-uat.dwolla.com/mass-payments/b4b5a699-5278-4727-9f81-a50800ea9abc" }, "source": { "href": "https://api-uat.dwolla.com/funding-sources/84c77e52-d1df-4a33-a444-51911a9623e9" }, "items": { "href": "https://api-uat.dwolla.com/mass-payments/b4b5a699-5278-4727-9f81-a50800ea9abc/items" } }, "id": "b4b5a699-5278-4727-9f81-a50800ea9abc", "status": "complete", "created": "2015-09-03T14:14:10.000Z", "metadata": { "UserJobId": "some ID" } } ] }, "total": 1 }
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					account_url
				Element:span
					=
				Element:span
					'https://api-uat.dwolla.com/accounts/ca32853c-48fa-40be-ae75-77b37504581b'
				Element:span
					# Using DwollaV2 - https://github.com/Dwolla/dwolla-v2-ruby (Recommended)
				Element:span
					mass_payments
				Element:span
					=
				Element:span
					account_token
				Element:span
					.
				Element:span
					get
				Element:span
					"
				Element:span
					#{
				Element:span
					account_url
				Element:span
					}
				Element:span
					/mass-payments"
				Element:span
					,
				Element:span
					limit:
				Element:span
					10
				Element:span
					mass_payments
				Element:span
					.
				Element:span
					_embedded
				Element:span
					[
				Element:span
					'mass-payments'
				Element:span
					][
				Element:span
					0
				Element:span
					].
				Element:span
					status
				Element:span
					# => "complete"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					/** * No example for this language yet. Coming soon. **/
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					account_url
				Element:span
					=
				Element:span
					'https://api-uat.dwolla.com/accounts/ca32853c-48fa-40be-ae75-77b37504581b'
				Element:span
					# Using dwollav2 - https://github.com/Dwolla/dwolla-v2-python
				Element:span
					# For Access API applications, an app_token can be used for this endpoint. (https://docsv2.dwolla.com/#application-access-token)
				Element:span
					transfers
				Element:span
					=
				Element:span
					account_token
				Element:span
					.
				Element:span
					get
				Element:span
					(
				Element:span
					'
				Element:span
					%
				Element:span
					s/mass-payments'
				Element:span
					%
				Element:span
					account_url
				Element:span
					,
				Element:span
					limit
				Element:span
					=
				Element:span
					10
				Element:span
					)
				Element:span
					transfers
				Element:span
					.
				Element:span
					body
				Element:span
					[
				Element:span
					'_embedded'
				Element:span
					][
				Element:span
					'mass-payments'
				Element:span
					][
				Element:span
					0
				Element:span
					][
				Element:span
					'status'
				Element:span
					]
				Element:span
					# => "complete"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					var
				Element:span
					accountUrl
				Element:span
					=
				Element:span
					'https://api-uat.dwolla.com/accounts/ca32853c-48fa-40be-ae75-77b37504581b'
				Element:span
					;
				Element:span
					// For Access API applications, an appToken can be used for this endpoint. (https://docsv2.dwolla.com/#application-access-token)
				Element:span
					accountToken
				Element:span
					.
				Element:span
					get
				Element:span
					(
				Element:span
					`
				Element:span
					$
				Element:span
					{
				Element:span
					accountUrl
				Element:span
					}
				Element:span
					/mass-payments`
				Element:span
					)
				Element:span
					.
				Element:span
					then
				Element:span
					(
				Element:span
					res
				Element:span
					=>
				Element:span
					res
				Element:span
					.
				Element:span
					body
				Element:span
					.
				Element:span
					_embedded
				Element:span
					[
				Element:span
					'mass-payments'
				Element:span
					][
				Element:span
					0
				Element:span
					].
				Element:span
					status
				Element:span
					);
				Element:span
					// => 'complete'
			Node:
			(type) c
			(layer)1
				Element:hr
			Node:
			(type) h1
			(layer)1
				Element:h1
					Customers
			Node:
			(type) c
			(layer)1
				Element:p
					A Customer represents an individual or business with whom you intend to transact with and is programmatically created and managed by a Dwolla
				Element:a
					account
					via the API. In order for a Dwolla
				Element:code
					Account
					to create and manage Customers, an application must obtain permission from Dwolla before being enabled in production.
			Node:
			(type) c
			(layer)1
				Element:ol
				Element:li
				Element:p
					This section outlines functionality for
				Element:a
					the Access API
					, a premium product that only approved partners may access in production. To learn more about entering into an Access API agreement, please
				Element:a
					contact Sales
					.
			Node:
			(type) c
			(layer)1
				Element:h3
					Verified and unverified Customers
			Node:
			(type) c
			(layer)1
				Element:p
					With a transfer of money, at least one party must complete the identity verification process, either the sender or the receiver. It’s your decision about which party completes this process, based on your business model, and you may want to have both parties complete the identity verification process. In cases where a Customer is sending funds to or receiving funds from your account, the Customer can remain unverified because your account is already verified. However, if you need to transfer funds between your Customers, at least one of them will need to be verified.
			Node:
			(type) c
			(layer)1
				Element:p
					For more information on Access API account types, reference the
				Element:a
					account types
					resource article.
			Node:
			(type) c
			(layer)1
				Element:h3
					Receive-only
			Node:
			(type) c
			(layer)1
				Element:p
					Receive-only customers are restricted to a “payouts only” business model. A receive-only customer maintains limited functionality in the API and is only eligible to receive transfers to an attached bank account from the Dwolla
				Element:code
					Account
					that created it.
			Node:
			(type) c
			(layer)1
				Element:h3
					Migrating Dwolla user Accounts to Access API Customers
			Node:
			(type) c
			(layer)1
				Element:p
					Dwolla offers a seamless process for migrating existing user
				Element:a
					Accounts
					managed via OAuth on your platform to Access API
				Element:a
					Customers
					. The user Account will maintain existing functionality on dwolla.com and will act as a separate Access API Customer upon completion of the migration. To learn more about upgrading to the Access API, please
				Element:a
					contact Sales
					.
			Node:
			(type) c
			(layer)1
				Element:h3
					Customer links
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Link
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					self
				Element:td
					URL of the Customer resource
				Element:tr
				Element:td
					receive
				Element:td
					Follow the link to create a transfer to this Customer.
				Element:tr
				Element:td
					funding-sources
				Element:td
					GET this link to list the Customer’s funding sources.
				Element:tr
				Element:td
					transfers
				Element:td
					GET this link to list the Customer’s transfers
				Element:tr
				Element:td
					send
				Element:td
					(optional) If this link exists, this Customer can send funds. POST to this URL to create a transfer.
				Element:tr
				Element:td
					retry-verification
				Element:td
					If the Customer has a
				Element:code
					status
					of
				Element:code
					retry
					, POST to this link to attempt to correct their identity verification information.
				Element:tr
				Element:td
					verify-with-document
				Element:td
					If the Verified Customer of type
				Element:code
					personal
					or
				Element:code
					business
					has a
				Element:code
					status
					of
				Element:code
					document
					, POST to this link to upload a new photo document to verify the Customer’s identity. If type
				Element:code
					business
					, the authorized representaive of the business. Read about
				Element:a
					Documents
					.
				Element:tr
				Element:td
					verify-business-with-document
				Element:td
					If the Verified Customer of type
				Element:code
					business
					has a
				Element:code
					status
					of
				Element:code
					document
					, POST to this link to upload a new photo document to verify the identity of the business itself. Read about
				Element:a
					Documents
					.
				Element:tr
				Element:td
					verify-authorized-representative-and-business-with-document
				Element:td
					If the Verified Customer of type
				Element:code
					business
					has a
				Element:code
					status
					of
				Element:code
					document
					, POST to this link to upload new photo documents to verify the identity of the authorized representative of the business as well as the business itself. Read about
				Element:a
					Documents
					.
			Node:
			(type) c
			(layer)1
				Element:h3
					Customer resource
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
					Customer’s unique identifier.
				Element:tr
				Element:td
					firstName
				Element:td
					Customer’s first name.
				Element:tr
				Element:td
					lastName
				Element:td
					Customer’s last name.
				Element:tr
				Element:td
					email
				Element:td
					Customer’s email address.
				Element:tr
				Element:td
					type
				Element:td
					Either
				Element:code
					unverified
					,
				Element:code
					personal
					,
				Element:code
					business
					, or
				Element:code
					receive-only
					.
				Element:tr
				Element:td
					status
				Element:td
					If type is
				Element:strong
					unverified
					or
				Element:strong
					receive-only
					: status is
				Element:code
					unverified
					or
				Element:code
					suspended
					.
				Element:br
					If type is
				Element:strong
					personal
					or
				Element:strong
					business
					: status is
				Element:code
					retry
					,
				Element:code
					document
					,
				Element:code
					verified
					, or
				Element:code
					suspended
					.
				Element:tr
				Element:td
					created
				Element:td
					ISO-8601 timestamp.
			Node:
			(type) c
			(layer)1
				Element:h3
					Customer statuses
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Status
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					unverified
				Element:td
					Customers of type
				Element:code
					unverified
					or
				Element:code
					receive-only
					always have this status.
				Element:tr
				Element:td
					retry
				Element:td
					Customers of type
				Element:code
					personal
					or
				Element:code
					business
					can have this status. The initial verification attempt failed because the information provided did not satisfy our verification check. You can make one additional attempt by changing some or all the attributes of the existing Customer with a POST request. If the additional attempt fails, the resulting status will be either
				Element:code
					document
					or
				Element:code
					suspended
					.
				Element:tr
				Element:td
					document
				Element:td
					Customers of type
				Element:code
					personal
					or
				Element:code
					business
					can have this status. Dwolla requires additional documentation to identify the Customer in the
				Element:code
					document
					status. Read about
				Element:a
					Documents
					.
				Element:tr
				Element:td
					verified
				Element:td
					Customers of type
				Element:code
					personal
					or
				Element:code
					business
					can have this status. The Customer is currently verified.
				Element:tr
				Element:td
					suspended
				Element:td
					All Customer types can have a status of
				Element:code
					suspended
					. The Customer is suspended and may neither send nor receive funds. Contact Dwolla support for more information.
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"_links"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"self"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"href"
				Element:span
					:
				Element:span
				Element:span
					"https://api.dwolla.com/customers/730CA23F-06C5-45CC-AA6B-8EC2D6EE109F"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"receive"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"href"
				Element:span
					:
				Element:span
				Element:span
					"https://api.dwolla.com/transfers"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"funding-sources"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"href"
				Element:span
					:
				Element:span
				Element:span
					"https://api.dwolla.com/customers/730CA23F-06C5-45CC-AA6B-8EC2D6EE109F/funding-sources"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"transfers"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"href"
				Element:span
					:
				Element:span
				Element:span
					"https://api.dwolla.com/customers/730CA23F-06C5-45CC-AA6B-8EC2D6EE109F/transfers"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"send"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"href"
				Element:span
					:
				Element:span
				Element:span
					"https://api.dwolla.com/transfers"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"730CA23F-06C5-45CC-AA6B-8EC2D6EE109F"
				Element:span
					,
				Element:span
				Element:span
					"firstName"
				Element:span
					:
				Element:span
				Element:span
					"Jane"
				Element:span
					,
				Element:span
				Element:span
					"lastName"
				Element:span
					:
				Element:span
				Element:span
					"Doe"
				Element:span
					,
				Element:span
				Element:span
					"email"
				Element:span
					:
				Element:span
				Element:span
					"janedoe@nomail.com"
				Element:span
					,
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"personal"
				Element:span
					,
				Element:span
				Element:span
					"status"
				Element:span
					:
				Element:span
				Element:span
					"verified"
				Element:span
					,
				Element:span
				Element:span
					"created"
				Element:span
					:
				Element:span
				Element:span
					"2015-10-06T01:18:26.923Z"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h2
					Create a customer
			Node:
			(type) c
			(layer)1
				Element:p
					This section details how to create a new Customer. To create an unverified Customer, you need to provide only the customer’s full name and email address. Verified Customers require additional information that will give Dwolla the ability to confirm the identity of the individual or business. Verified Customers can include type
				Element:code
					business
					or
				Element:code
					personal
					. For businesses, Dwolla will need to verify information about both the business and the “authorized representative” for that business. For receive-only customers, you’ll provide the customer’s full name,
				Element:code
					type
					with the value of
				Element:code
					receive-only
					, and
				Element:code
					businessName
					if applicable.
			Node:
			(type) c
			(layer)1
				Element:p
					For more information on verified Customers, reference our
				Element:a
					Customer verification
					resource article.
			Node:
			(type) c
			(layer)1
				Element:ol
				Element:li
				Element:p
					This endpoint requires an OAuth account access token with the
				Element:code
					ManageCustomers
					scope.
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					POST https://api.dwolla.com/customers
			Node:
			(type) c
			(layer)1
				Element:h3
					Request parameters - unverified Customer
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Required
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					firstName
				Element:td
					yes
				Element:td
					string
				Element:td
					Customer’s first name.
				Element:tr
				Element:td
					lastName
				Element:td
					yes
				Element:td
					string
				Element:td
					Customer’s last name.
				Element:tr
				Element:td
					email
				Element:td
					yes
				Element:td
					string
				Element:td
					Customer’s email address.
				Element:tr
				Element:td
					ipAddress
				Element:td
					no
				Element:td
					string
				Element:td
					Customer’s IP address.
			Node:
			(type) c
			(layer)1
				Element:h3
					Request parameters - verified Customer
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Required
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					firstName
				Element:td
					yes
				Element:td
					string
				Element:td
					Customer or if business, authorized representative’s first name.
				Element:tr
				Element:td
					lastName
				Element:td
					yes
				Element:td
					string
				Element:td
					Customer or if business, authorized representative’s last name.
				Element:tr
				Element:td
					email
				Element:td
					yes
				Element:td
					string
				Element:td
					Customer’s email address.
				Element:tr
				Element:td
					ipAddress
				Element:td
					no
				Element:td
					string
				Element:td
					Customer’s IP address.
				Element:tr
				Element:td
					type
				Element:td
					yes
				Element:td
					string
				Element:td
					Either
				Element:code
					personal
					or
				Element:code
					business
					. If business,
				Element:a
					see below
					for additional required information.
				Element:tr
				Element:td
					address1
				Element:td
					yes
				Element:td
					string
				Element:td
					First line of the street address of the Customer’s permanent residence. Must be 50 characters or less.
				Element:strong
					Note:
					PO Boxes are not allowed.
				Element:tr
				Element:td
					address2
				Element:td
					no
				Element:td
					string
				Element:td
					Second line of the street address of the Customer’s permanent residence. Must be 50 characters or less.
				Element:strong
					Note:
					PO Boxes are not allowed.
				Element:tr
				Element:td
					city
				Element:td
					yes
				Element:td
					string
				Element:td
					City of Customer’s permanent residence.
				Element:tr
				Element:td
					state
				Element:td
					yes
				Element:td
					string
				Element:td
					Two letter abbreviation of the state in which the Customer resides, e.g.
				Element:code
					CA
					.
				Element:tr
				Element:td
					postalCode
				Element:td
					yes
				Element:td
					string
				Element:td
					Postal code of Customer’s permanent residence. Should be a five digit postal code, e.g.
				Element:code
					50314
					.
				Element:tr
				Element:td
					dateOfBirth
				Element:td
					yes
				Element:td
					string
				Element:td
					Customer or if business, authorized representative’s date of birth in
				Element:code
					YYYY-MM-DD
					format.
				Element:tr
				Element:td
					ssn
				Element:td
					yes
				Element:td
					string
				Element:td
					Last four digits of the Customer’s Social Security Number.
				Element:tr
				Element:td
					phone
				Element:td
					no
				Element:td
					string
				Element:td
					Customer or if business, authorized representative’s 10 digit phone number. No hyphens or other separators, e.g.
				Element:code
					3334447777
					.
			Node:
			(type) c
			(layer)1
				Element:h3
					Additional request parameters for verified Customer with type=business
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Required
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					businessClassification
				Element:td
					yes
				Element:td
					string
				Element:td
					The
				Element:a
					industry classification
					id that corresponds to Customer’s business
				Element:tr
				Element:td
					businessType
				Element:td
					yes
				Element:td
					string
				Element:td
					Business structure. Possible values are
				Element:code
					corporation
					,
				Element:code
					llc
					,
				Element:code
					partnership
					, and
				Element:code
					soleproprietorship
				Element:tr
				Element:td
					businessName
				Element:td
					yes
				Element:td
					string
				Element:td
					Customer’s registered business name.
				Element:tr
				Element:td
					ein
				Element:td
					yes
				Element:td
					string
				Element:td
					Employer Identification Number.
				Element:tr
				Element:td
					doingBusinessAs
				Element:td
					no
				Element:td
					string
				Element:td
					Name that is different from the officially registered name of Customer’s business.
				Element:tr
				Element:td
					website
				Element:td
					no
				Element:td
					string
				Element:td
					www.domain.com
			Node:
			(type) c
			(layer)1
				Element:h3
					Request parameters - receive-only
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Required
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					firstName
				Element:td
					yes
				Element:td
					string
				Element:td
					Customer’s first name.
				Element:tr
				Element:td
					lastName
				Element:td
					yes
				Element:td
					string
				Element:td
					Customer’s last name.
				Element:tr
				Element:td
					email
				Element:td
					yes
				Element:td
					string
				Element:td
					Customer’s email address.
				Element:tr
				Element:td
					type
				Element:td
					yes
				Element:td
					string
				Element:td
					Value of
				Element:code
					receive-only
					.
				Element:tr
				Element:td
					businessName
				Element:td
					yes
				Element:td
					string
				Element:td
					Customer’s registered business name. (
				Element:strong
					Optional
					if not a business entity)
				Element:tr
				Element:td
					ipAddress
				Element:td
					no
				Element:td
					string
				Element:td
					Customer’s IP address.
			Node:
			(type) c
			(layer)1
				Element:h3
					Errors
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					HTTP Status
				Element:th
					Message
				Element:tbody
				Element:tr
				Element:td
					400
				Element:td
					Duplicate customer or validation error.
				Element:tr
				Element:td
					403
				Element:td
					Not authorized to create customers.
			Node:
			(type) c
			(layer)1
				Element:h3
					Unverified Customer
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					POST /customers Content-Type: application/vnd.dwolla.v1.hal+json Accept: application/vnd.dwolla.v1.hal+json Authorization: Bearer pBA9fVDBEyYZCEsLf/wKehyh1RTpzjUj5KzIRfDi0wKTii7DqY { "firstName": "Jane", "lastName": "Merchant", "email": "jmerchant@nomail.net", "ipAddress": "99.99.99.99" } HTTP/1.1 201 Created Location: https://api.dwolla.com/customers/FC451A7A-AE30-4404-AB95-E3553FCD733F
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					request_body
				Element:span
					=
				Element:span
					{
				Element:span
					:firstName
				Element:span
					=>
				Element:span
					'Jane'
				Element:span
					,
				Element:span
					:lastName
				Element:span
					=>
				Element:span
					'Merchant'
				Element:span
					,
				Element:span
					:email
				Element:span
					=>
				Element:span
					'jmerchant@nomail.net'
				Element:span
					,
				Element:span
					:ipAddress
				Element:span
					=>
				Element:span
					'99.99.99.99'
				Element:span
					}
				Element:span
					# Using DwollaV2 - https://github.com/Dwolla/dwolla-v2-ruby (Recommended)
				Element:span
					customer
				Element:span
					=
				Element:span
					app_token
				Element:span
					.
				Element:span
					post
				Element:span
					"customers"
				Element:span
					,
				Element:span
					request_body
				Element:span
					customer
				Element:span
					.
				Element:span
					headers
				Element:span
					[
				Element:span
					:location
				Element:span
					]
				Element:span
					# => "https://api-uat.dwolla.com/customers/FC451A7A-AE30-4404-AB95-E3553FCD733F"
				Element:span
					# Using DwollaSwagger - https://github.com/Dwolla/dwolla-swagger-ruby
				Element:span
					customer
				Element:span
					=
				Element:span
					DwollaSwagger
				Element:span
					::
				Element:span
					CustomersApi
				Element:span
					.
				Element:span
					create
				Element:span
					(
				Element:span
					:body
				Element:span
					=>
				Element:span
					request_body
				Element:span
					)
				Element:span
					customer
				Element:span
					# => "https://api-uat.dwolla.com/customers/FC451A7A-AE30-4404-AB95-E3553FCD733F"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					<?php
				Element:span
					$customersApi
				Element:span
					=
				Element:span
					new
				Element:span
					DwollaSwagger\CustomersApi
				Element:span
					(
				Element:span
					$apiClient
				Element:span
					);
				Element:span
					$customer
				Element:span
					=
				Element:span
					$customersApi
				Element:span
					->
				Element:span
					create
				Element:span
					([
				Element:span
					'firstName'
				Element:span
					=>
				Element:span
					'Jane'
				Element:span
					,
				Element:span
					'lastName'
				Element:span
					=>
				Element:span
					'Merchant'
				Element:span
					,
				Element:span
					'email'
				Element:span
					=>
				Element:span
					'jmerchant@nomail.net'
				Element:span
					,
				Element:span
					'ipAddress'
				Element:span
					=>
				Element:span
					'99.99.99.99'
				Element:span
					]);
				Element:span
					$customer
				Element:span
					;
				Element:span
					# => "https://api-uat.dwolla.com/customers/FC451A7A-AE30-4404-AB95-E3553FCD733F"
				Element:span
					?>
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					request_body
				Element:span
					=
				Element:span
					{
				Element:span
					'firstName'
				Element:span
					:
				Element:span
					'Jane'
				Element:span
					,
				Element:span
					'lastName'
				Element:span
					:
				Element:span
					'Merchant'
				Element:span
					,
				Element:span
					'email'
				Element:span
					:
				Element:span
					'jmerchant@nomail.net'
				Element:span
					,
				Element:span
					'ipAddress'
				Element:span
					:
				Element:span
					'99.99.99.99'
				Element:span
					}
				Element:span
					# Using dwollav2 - https://github.com/Dwolla/dwolla-v2-python (Recommended)
				Element:span
					customer
				Element:span
					=
				Element:span
					app_token
				Element:span
					.
				Element:span
					post
				Element:span
					(
				Element:span
					'customers'
				Element:span
					,
				Element:span
					request_body
				Element:span
					)
				Element:span
					customer
				Element:span
					.
				Element:span
					headers
				Element:span
					[
				Element:span
					'location'
				Element:span
					]
				Element:span
					# => 'https://api-uat.dwolla.com/customers/FC451A7A-AE30-4404-AB95-E3553FCD733F'
				Element:span
					# Using dwollaswagger - https://github.com/Dwolla/dwolla-swagger-python
				Element:span
					customers_api
				Element:span
					=
				Element:span
					dwollaswagger
				Element:span
					.
				Element:span
					CustomersApi
				Element:span
					(
				Element:span
					client
				Element:span
					)
				Element:span
					customer
				Element:span
					=
				Element:span
					customers_api
				Element:span
					.
				Element:span
					create
				Element:span
					(
				Element:span
					body
				Element:span
					=
				Element:span
					request_body
				Element:span
					)
				Element:span
					customer
				Element:span
					# => 'https://api-uat.dwolla.com/customers/FC451A7A-AE30-4404-AB95-E3553FCD733F'
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					var
				Element:span
					requestBody
				Element:span
					=
				Element:span
					{
				Element:span
					firstName
				Element:span
					:
				Element:span
					'Jane'
				Element:span
					,
				Element:span
					lastName
				Element:span
					:
				Element:span
					'Merchant'
				Element:span
					,
				Element:span
					email
				Element:span
					:
				Element:span
					'jmerchant@nomail.net'
				Element:span
					,
				Element:span
					ipAddress
				Element:span
					:
				Element:span
					'99.99.99.99'
				Element:span
					};
				Element:span
					appToken
				Element:span
					.
				Element:span
					post
				Element:span
					(
				Element:span
					'customers'
				Element:span
					,
				Element:span
					requestBody
				Element:span
					)
				Element:span
					.
				Element:span
					then
				Element:span
					(
				Element:span
					res
				Element:span
					=>
				Element:span
					res
				Element:span
					.
				Element:span
					headers
				Element:span
					.
				Element:span
					get
				Element:span
					(
				Element:span
					'location'
				Element:span
					));
				Element:span
					// => 'https://api-uat.dwolla.com/customers/FC451A7A-AE30-4404-AB95-E3553FCD733F'
			Node:
			(type) c
			(layer)1
				Element:h3
					Verified Customer
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					POST /customers Content-Type: application/vnd.dwolla.v1.hal+json Accept: application/vnd.dwolla.v1.hal+json Authorization: Bearer pBA9fVDBEyYZCEsLf/wKehyh1RTpzjUj5KzIRfDi0wKTii7DqY { "firstName": "John", "lastName": "Doe", "email": "johndoe@nomail.net", "ipAddress": "10.10.10.10", "type": "personal", "address1": "99-99 33rd St", "city": "Some City", "state": "NY", "postalCode": "11101", "dateOfBirth": "1970-01-01", "ssn": "1234" } HTTP/1.1 201 Created Location: https://api.dwolla.com/customers/FC451A7A-AE30-4404-AB95-E3553FCD733F
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					<?php
				Element:span
					$customersApi
				Element:span
					=
				Element:span
					new
				Element:span
					DwollaSwagger\CustomersApi
				Element:span
					(
				Element:span
					$apiClient
				Element:span
					);
				Element:span
					$customer
				Element:span
					=
				Element:span
					$customersApi
				Element:span
					->
				Element:span
					create
				Element:span
					([
				Element:span
					'firstName'
				Element:span
					=>
				Element:span
					'John'
				Element:span
					,
				Element:span
					'lastName'
				Element:span
					=>
				Element:span
					'Doe'
				Element:span
					,
				Element:span
					'email'
				Element:span
					=>
				Element:span
					'jdoe@nomail.net'
				Element:span
					,
				Element:span
					'type'
				Element:span
					=>
				Element:span
					'personal'
				Element:span
					,
				Element:span
					'address1'
				Element:span
					=>
				Element:span
					'99-99 33rd St'
				Element:span
					,
				Element:span
					'city'
				Element:span
					=>
				Element:span
					'Some City'
				Element:span
					,
				Element:span
					'state'
				Element:span
					=>
				Element:span
					'NY'
				Element:span
					,
				Element:span
					'postalCode'
				Element:span
					=>
				Element:span
					'11101'
				Element:span
					,
				Element:span
					'dateOfBirth'
				Element:span
					=>
				Element:span
					'1970-01-01'
				Element:span
					,
				Element:span
					# For the first attempt, only the
				Element:span
					# last 4 digits of SSN required
				Element:span
					# If the entire SSN is provided,
				Element:span
					# it will still be accepted
				Element:span
					'ssn'
				Element:span
					=>
				Element:span
					'1234'
				Element:span
					]);
				Element:span
					$customer
				Element:span
					;
				Element:span
					# => "https://api-uat.dwolla.com/customers/AB443D36-3757-44C1-A1B4-29727FB3111C"
				Element:span
					?>
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					request_body
				Element:span
					=
				Element:span
					{
				Element:span
					:firstName
				Element:span
					=>
				Element:span
					'John'
				Element:span
					,
				Element:span
					:lastName
				Element:span
					=>
				Element:span
					'Doe'
				Element:span
					,
				Element:span
					:email
				Element:span
					=>
				Element:span
					'jdoe@nomail.net'
				Element:span
					,
				Element:span
					:type
				Element:span
					=>
				Element:span
					'personal'
				Element:span
					,
				Element:span
					:address1
				Element:span
					=>
				Element:span
					'99-99 33rd St'
				Element:span
					,
				Element:span
					:city
				Element:span
					=>
				Element:span
					'Some City'
				Element:span
					,
				Element:span
					:state
				Element:span
					=>
				Element:span
					'NY'
				Element:span
					,
				Element:span
					:postalCode
				Element:span
					=>
				Element:span
					'11101'
				Element:span
					,
				Element:span
					:dateOfBirth
				Element:span
					=>
				Element:span
					'1970-01-01'
				Element:span
					,
				Element:span
					# For the first attempt, only the
				Element:span
					# last 4 digits of SSN required
				Element:span
					# If the entire SSN is provided,
				Element:span
					# it will still be accepted
				Element:span
					:ssn
				Element:span
					=>
				Element:span
					'1234'
				Element:span
					}
				Element:span
					# Using DwollaV2 - https://github.com/Dwolla/dwolla-v2-ruby (Recommended)
				Element:span
					customer
				Element:span
					=
				Element:span
					app_token
				Element:span
					.
				Element:span
					post
				Element:span
					"customers"
				Element:span
					,
				Element:span
					request_body
				Element:span
					customer
				Element:span
					.
				Element:span
					headers
				Element:span
					[
				Element:span
					:location
				Element:span
					]
				Element:span
					# => "https://api-uat.dwolla.com/customers/AB443D36-3757-44C1-A1B4-29727FB3111C"
				Element:span
					# Using DwollaSwagger - https://github.com/Dwolla/dwolla-swagger-ruby
				Element:span
					customer
				Element:span
					=
				Element:span
					DwollaSwagger
				Element:span
					::
				Element:span
					CustomersApi
				Element:span
					.
				Element:span
					create
				Element:span
					(
				Element:span
					:body
				Element:span
					=>
				Element:span
					request_body
				Element:span
					)
				Element:span
					customer
				Element:span
					# => "https://api-uat.dwolla.com/customers/AB443D36-3757-44C1-A1B4-29727FB3111C"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					request_body
				Element:span
					=
				Element:span
					{
				Element:span
					'firstName'
				Element:span
					:
				Element:span
					'John'
				Element:span
					,
				Element:span
					'lastName'
				Element:span
					:
				Element:span
					'Doe'
				Element:span
					,
				Element:span
					'email'
				Element:span
					:
				Element:span
					'jdoe@nomail.net'
				Element:span
					,
				Element:span
					'type'
				Element:span
					:
				Element:span
					'personal'
				Element:span
					,
				Element:span
					'address1'
				Element:span
					:
				Element:span
					'99-99 33rd St'
				Element:span
					,
				Element:span
					'city'
				Element:span
					:
				Element:span
					'Some City'
				Element:span
					,
				Element:span
					'state'
				Element:span
					:
				Element:span
					'NY'
				Element:span
					,
				Element:span
					'postalCode'
				Element:span
					:
				Element:span
					'11101'
				Element:span
					,
				Element:span
					'dateOfBirth'
				Element:span
					:
				Element:span
					'1970-01-01'
				Element:span
					,
				Element:span
					# For the first attempt, only the
				Element:span
					# last 4 digits of SSN required
				Element:span
					# If the entire SSN is provided,
				Element:span
					# it will still be accepted
				Element:span
					'ssn'
				Element:span
					:
				Element:span
					'1234'
				Element:span
					}
				Element:span
					# Using dwollav2 - https://github.com/Dwolla/dwolla-v2-python (Recommended)
				Element:span
					customer
				Element:span
					=
				Element:span
					app_token
				Element:span
					.
				Element:span
					post
				Element:span
					(
				Element:span
					'customers'
				Element:span
					,
				Element:span
					request_body
				Element:span
					)
				Element:span
					customer
				Element:span
					.
				Element:span
					headers
				Element:span
					[
				Element:span
					'location'
				Element:span
					]
				Element:span
					# => 'https://api-uat.dwolla.com/customers/AB443D36-3757-44C1-A1B4-29727FB3111C'
				Element:span
					# Using dwollaswagger - https://github.com/Dwolla/dwolla-swagger-python
				Element:span
					customers_api
				Element:span
					=
				Element:span
					dwollaswagger
				Element:span
					.
				Element:span
					CustomersApi
				Element:span
					(
				Element:span
					client
				Element:span
					)
				Element:span
					customer
				Element:span
					=
				Element:span
					customers_api
				Element:span
					.
				Element:span
					create
				Element:span
					(
				Element:span
					body
				Element:span
					=
				Element:span
					request_body
				Element:span
					)
				Element:span
					customer
				Element:span
					# => 'https://api-uat.dwolla.com/customers/AB443D36-3757-44C1-A1B4-29727FB3111C'
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					var
				Element:span
					requestBody
				Element:span
					=
				Element:span
					{
				Element:span
					firstName
				Element:span
					:
				Element:span
					'John'
				Element:span
					,
				Element:span
					lastName
				Element:span
					:
				Element:span
					'Doe'
				Element:span
					,
				Element:span
					email
				Element:span
					:
				Element:span
					'jdoe@nomail.net'
				Element:span
					,
				Element:span
					type
				Element:span
					:
				Element:span
					'personal'
				Element:span
					,
				Element:span
					address1
				Element:span
					:
				Element:span
					'99-99 33rd St'
				Element:span
					,
				Element:span
					city
				Element:span
					:
				Element:span
					'Some City'
				Element:span
					,
				Element:span
					state
				Element:span
					:
				Element:span
					'NY'
				Element:span
					,
				Element:span
					postalCode
				Element:span
					:
				Element:span
					'11101'
				Element:span
					,
				Element:span
					dateOfBirth
				Element:span
					:
				Element:span
					'1970-01-01'
				Element:span
					,
				Element:span
					// For the first attempt, only the
				Element:span
					// last 4 digits of SSN required
				Element:span
					// If the entire SSN is provided,
				Element:span
					// it will still be accepted
				Element:span
					ssn
				Element:span
					:
				Element:span
					'1234'
				Element:span
					};
				Element:span
					appToken
				Element:span
					.
				Element:span
					post
				Element:span
					(
				Element:span
					'customers'
				Element:span
					,
				Element:span
					requestBody
				Element:span
					)
				Element:span
					.
				Element:span
					then
				Element:span
					(
				Element:span
					res
				Element:span
					=>
				Element:span
					res
				Element:span
					.
				Element:span
					headers
				Element:span
					.
				Element:span
					get
				Element:span
					(
				Element:span
					'location'
				Element:span
					));
				Element:span
					// => 'https://api-uat.dwolla.com/customers/FC451A7A-AE30-4404-AB95-E3553FCD733F'
			Node:
			(type) c
			(layer)1
				Element:h3
					Receive-only customer
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					POST /customers Content-Type: application/vnd.dwolla.v1.hal+json Accept: application/vnd.dwolla.v1.hal+json Authorization: Bearer pBA9fVDBEyYZCEsLf/wKehyh1RTpzjUj5KzIRfDi0wKTii7DqY { "firstName": "Jane", "lastName": "Merchant", "email": "jmerchant@nomail.net", "type": "receive-only", "businessName": "Jane Corp llc", "ipAddress": "99.99.99.99" } HTTP/1.1 201 Created Location: https://api.dwolla.com/customers/FC451A7A-AE30-4404-AB95-E3553FCD733F
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					request_body
				Element:span
					=
				Element:span
					{
				Element:span
					:firstName
				Element:span
					=>
				Element:span
					'Jane'
				Element:span
					,
				Element:span
					:lastName
				Element:span
					=>
				Element:span
					'Merchant'
				Element:span
					,
				Element:span
					:email
				Element:span
					=>
				Element:span
					'jmerchant@nomail.net'
				Element:span
					,
				Element:span
					:type
				Element:span
					=>
				Element:span
					'receive-only'
				Element:span
					,
				Element:span
					:businessName
				Element:span
					=>
				Element:span
					'Jane Corp llc'
				Element:span
					,
				Element:span
					:ipAddress
				Element:span
					=>
				Element:span
					'99.99.99.99'
				Element:span
					}
				Element:span
					# Using DwollaV2 - https://github.com/Dwolla/dwolla-v2-ruby (Recommended)
				Element:span
					customer
				Element:span
					=
				Element:span
					app_token
				Element:span
					.
				Element:span
					post
				Element:span
					"customers"
				Element:span
					,
				Element:span
					request_body
				Element:span
					customer
				Element:span
					.
				Element:span
					headers
				Element:span
					[
				Element:span
					:location
				Element:span
					]
				Element:span
					# => "https://api-uat.dwolla.com/customers/FC451A7A-AE30-4404-AB95-E3553FCD733F"
				Element:span
					# Using DwollaSwagger - https://github.com/Dwolla/dwolla-swagger-ruby
				Element:span
					customer
				Element:span
					=
				Element:span
					DwollaSwagger
				Element:span
					::
				Element:span
					CustomersApi
				Element:span
					.
				Element:span
					create
				Element:span
					(
				Element:span
					:body
				Element:span
					=>
				Element:span
					request_body
				Element:span
					)
				Element:span
					customer
				Element:span
					# => "https://api-uat.dwolla.com/customers/FC451A7A-AE30-4404-AB95-E3553FCD733F"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					<?php
				Element:span
					$customersApi
				Element:span
					=
				Element:span
					new
				Element:span
					DwollaSwagger\CustomersApi
				Element:span
					(
				Element:span
					$apiClient
				Element:span
					);
				Element:span
					$customer
				Element:span
					=
				Element:span
					$customersApi
				Element:span
					->
				Element:span
					create
				Element:span
					([
				Element:span
					'firstName'
				Element:span
					=>
				Element:span
					'Jane'
				Element:span
					,
				Element:span
					'lastName'
				Element:span
					=>
				Element:span
					'Merchant'
				Element:span
					,
				Element:span
					'email'
				Element:span
					=>
				Element:span
					'jmerchant@nomail.net'
				Element:span
					,
				Element:span
					'type'
				Element:span
					=>
				Element:span
					'receive-only'
				Element:span
					,
				Element:span
					'businessName'
				Element:span
					=>
				Element:span
					'Jane Corp llc'
				Element:span
					,
				Element:span
					'ipAddress'
				Element:span
					=>
				Element:span
					'99.99.99.99'
				Element:span
					]);
				Element:span
					$customer
				Element:span
					;
				Element:span
					# => "https://api-uat.dwolla.com/customers/FC451A7A-AE30-4404-AB95-E3553FCD733F"
				Element:span
					?>
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					request_body
				Element:span
					=
				Element:span
					{
				Element:span
					'firstName'
				Element:span
					:
				Element:span
					'Jane'
				Element:span
					,
				Element:span
					'lastName'
				Element:span
					:
				Element:span
					'Merchant'
				Element:span
					,
				Element:span
					'email'
				Element:span
					:
				Element:span
					'jmerchant@nomail.net'
				Element:span
					,
				Element:span
					'type'
				Element:span
					:
				Element:span
					'receive-only'
				Element:span
					,
				Element:span
					'businessName'
				Element:span
					:
				Element:span
					'Jane Corp llc'
				Element:span
					,
				Element:span
					'ipAddress'
				Element:span
					:
				Element:span
					'99.99.99.99'
				Element:span
					}
				Element:span
					# Using dwollav2 - https://github.com/Dwolla/dwolla-v2-python (Recommended)
				Element:span
					customer
				Element:span
					=
				Element:span
					app_token
				Element:span
					.
				Element:span
					post
				Element:span
					(
				Element:span
					'customers'
				Element:span
					,
				Element:span
					request_body
				Element:span
					)
				Element:span
					customer
				Element:span
					.
				Element:span
					headers
				Element:span
					[
				Element:span
					'location'
				Element:span
					]
				Element:span
					# => 'https://api-uat.dwolla.com/customers/AB443D36-3757-44C1-A1B4-29727FB3111C'
				Element:span
					# Using dwollaswagger - https://github.com/Dwolla/dwolla-swagger-python
				Element:span
					customers_api
				Element:span
					=
				Element:span
					dwollaswagger
				Element:span
					.
				Element:span
					CustomersApi
				Element:span
					(
				Element:span
					client
				Element:span
					)
				Element:span
					customer
				Element:span
					=
				Element:span
					customers_api
				Element:span
					.
				Element:span
					create
				Element:span
					(
				Element:span
					body
				Element:span
					=
				Element:span
					request_body
				Element:span
					)
				Element:span
					customer
				Element:span
					# => 'https://api-uat.dwolla.com/customers/FC451A7A-AE30-4404-AB95-E3553FCD733F'
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					var
				Element:span
					requestBody
				Element:span
					=
				Element:span
					{
				Element:span
					firstName
				Element:span
					:
				Element:span
					'Jane'
				Element:span
					,
				Element:span
					lastName
				Element:span
					:
				Element:span
					'Merchant'
				Element:span
					,
				Element:span
					email
				Element:span
					:
				Element:span
					'jmerchant@nomail.net'
				Element:span
					,
				Element:span
					type
				Element:span
					:
				Element:span
					'receive-only'
				Element:span
					,
				Element:span
					businessName
				Element:span
					:
				Element:span
					'Jane Corp llc'
				Element:span
					,
				Element:span
					ipAddress
				Element:span
					:
				Element:span
					'99.99.99.99'
				Element:span
					};
				Element:span
					appToken
				Element:span
					.
				Element:span
					post
				Element:span
					(
				Element:span
					'customers'
				Element:span
					,
				Element:span
					requestBody
				Element:span
					)
				Element:span
					.
				Element:span
					then
				Element:span
					(
				Element:span
					res
				Element:span
					=>
				Element:span
					res
				Element:span
					.
				Element:span
					headers
				Element:span
					.
				Element:span
					get
				Element:span
					(
				Element:span
					'location'
				Element:span
					));
				Element:span
					// => 'https://api-uat.dwolla.com/customers/FC451A7A-AE30-4404-AB95-E3553FCD733F'
			Node:
			(type) c
			(layer)1
				Element:h2
					List business classifications
			Node:
			(type) c
			(layer)1
				Element:p
					Retrieve a list of industry classifications to identify the Customer’s business. An industry classification is required by Dwolla when verifying a
				Element:code
					business
					in order to better analyze the nature of a business.
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET https://api.dwolla.com/business-classifications
			Node:
			(type) c
			(layer)1
				Element:h3
					Request and response
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					GET https://api-uat.dwolla.com/business-classifications Accept: application/vnd.dwolla.v1.hal+json Authorization: Bearer pBA9fVDBEyYZCEsLf/wKehyh1RTpzjUj5KzIRfDi0wKTii7DqY { "_links": {}, "_embedded": { "business-classifications": [ { "_links": { "self": { "href": "https://api-uat.dwolla.com/business-classifications/9ed3f669-7d6f-11e3-b545-5404a6144203" } }, "_embedded": { "industry-classifications": [ { "id": "9ed3f671-7d6f-11e3-803c-5404a6144203", "name": "Gourmet foods" }, { "id": "9ed3f66c-7d6f-11e3-86ae-5404a6144203", "name": "Distilleries" }, { "id": "9ed3f66a-7d6f-11e3-8acd-5404a6144203", "name": "Breweries" }, { "id": "9ed3f66d-7d6f-11e3-9101-5404a6144203", "name": "Alcoholic beverage drinking places" }, { "id": "9ed3f66e-7d6f-11e3-9480-5404a6144203", "name": "Beer, wine, and liquor store" }, { "id": "9ed3f66b-7d6f-11e3-95ac-5404a6144203", "name": "Wineries" }, { "id": "9ed3f674-7d6f-11e3-9619-5404a6144203", "name": "Tobacco" }, { "id": "9ed3f673-7d6f-11e3-adb1-5404a6144203", "name": "Restaurant" }, { "id": "9ed3f676-7d6f-11e3-af8e-5404a6144203", "name": "Supplement store" }, { "id": "9ed3f675-7d6f-11e3-afad-5404a6144203", "name": "Pharmacy and drugstore" }, { "id": "9ed3f670-7d6f-11e3-b1ce-5404a6144203", "name": "Coffee and tea" }, { "id": "9ed3f66f-7d6f-11e3-b1df-5404a6144203", "name": "Catering services" }, { "id": "9ed3f672-7d6f-11e3-b67a-5404a6144203", "name": "Specialty and miscellaneous food store" } ] }, "id": "9ed3f669-7d6f-11e3-b545-5404a6144203", "name": "Food retail and service" } ........... ] }, "total": 27 }
			Node:
			(type) c
			(layer)1
				Element:h2
					Retrieve a business classification
			Node:
			(type) c
			(layer)1
				Element:p
					This section shows you how to retrieve a business classification from a list of industry classifications. An industry classification id is needed in order to verify a
				Element:code
					business
					Customer.
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET https://api.dwolla.com/business-classifications/{id}
			Node:
			(type) c
			(layer)1
				Element:h3
					Request parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Required
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
					yes
				Element:td
					string
				Element:td
					Business classification unique identifier.
			Node:
			(type) c
			(layer)1
				Element:h3
					Request and response
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					GET https://api-uat.dwolla.com/business-classifications/9ed3a866-7d6f-11e3-a0ce-5404a6144203 Accept: application/vnd.dwolla.v1.hal+json Authorization: Bearer pBA9fVDBEyYZCEsLf/wKehyh1RTpzjUj5KzIRfDi0wKTii7DqY { "_links": { "self": { "href": "https://api-uat.dwolla.com/business-classifications/9ed3a866-7d6f-11e3-a0ce-5404a6144203" } }, "_embedded": { "industry-classifications": [ { "id": "9ed3cf58-7d6f-11e3-81a4-5404a6144203", "name": "Toys and games" }, { "id": "9ed3cf50-7d6f-11e3-8ae8-5404a6144203", "name": "Music" }, { "id": "9ed3cf5c-7d6f-11e3-8d0e-5404a6144203", "name": "Gambling" }, { "id": "9ed3cf53-7d6f-11e3-8ee9-5404a6144203", "name": "Cable, satellite, and other pay TV and radio broadcasting" }, { "id": "9ed3cf59-7d6f-11e3-9158-5404a6144203", "name": "Slot machines" }, { "id": "9ed3cf57-7d6f-11e3-921d-5404a6144203", "name": "Theater tickets" }, { "id": "9ed3cf4f-7d6f-11e3-97ea-5404a6144203", "name": "Motion picture and video" }, { "id": "9ed3cf5a-7d6f-11e3-9a99-5404a6144203", "name": "Digital content" }, { "id": "9ed3cf5b-7d6f-11e3-a368-5404a6144203", "name": "Entertainers" }, { "id": "9ed3a867-7d6f-11e3-a6e4-5404a6144203", "name": "Memorabilia" }, { "id": "9ed3cf52-7d6f-11e3-b0da-5404a6144203", "name": "Music store - CDs, cassettes and albums" }, { "id": "9ed3cf5d-7d6f-11e3-b35e-5404a6144203", "name": "Online gaming" }, { "id": "9ed3cf55-7d6f-11e3-b43c-5404a6144203", "name": "Adult digital content" }, { "id": "9ed3cf51-7d6f-11e3-b49f-5404a6144203", "name": "Movie store - DVDs, videotapes" }, { "id": "9ed3cf5e-7d6f-11e3-b9d5-5404a6144203", "name": "Video games and systems" }, { "id": "9ed3cf56-7d6f-11e3-ba87-5404a6144203", "name": "Concert tickets" }, { "id": "9ed3cf54-7d6f-11e3-bf23-5404a6144203", "name": "Cable and other subscription programming" } ] }, "id": "9ed3a866-7d6f-11e3-a0ce-5404a6144203", "name": "Entertainment and media" }
			Node:
			(type) c
			(layer)1
				Element:h2
					Update a customer
			Node:
			(type) c
			(layer)1
				Element:p
					This endpoint can be used to facilitate the following use cases: Update Customer information, upgrade an
				Element:code
					unverified
					Customer to a
				Element:code
					verified
					Customer,
				Element:code
					suspend
					a Customer, and update a verified Customer’s information to
				Element:code
					retry
					verification.
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					POST https://api.dwolla.com/customers/{id}
			Node:
			(type) c
			(layer)1
				Element:h3
					Update a Customer’s information
			Node:
			(type) c
			(layer)1
				Element:p
					A limited set of information can be updated on an existing created Customer.
				Element:strong
					Note:
					A Customer’s information cannot be updated when in a
				Element:a
					status
					of
				Element:code
					document
					or
				Element:code
					suspended
					.
			Node:
			(type) c
			(layer)1
															Node:
															(type) c
															(layer)5
																Element:h5
																	Request parameters - unverified Customer
															Node:
															(type) c
															(layer)5
																Element:table
																Element:thead
																Element:tr
																Element:th
																	Parameter
																Element:th
																	Required
																Element:th
																	Type
																Element:th
																	Description
																Element:tbody
																Element:tr
																Element:td
																	firstName
																Element:td
																	no
																Element:td
																	string
																Element:td
																	Customer’s first name.
																Element:tr
																Element:td
																	lastName
																Element:td
																	no
																Element:td
																	string
																Element:td
																	Customer’s last name.
																Element:tr
																Element:td
																	email
																Element:td
																	no
																Element:td
																	string
																Element:td
																	Customer’s email address.
			Node:
			(type) c
			(layer)1
															Node:
															(type) c
															(layer)5
																Element:h5
																	Request parameters - verified Customer
															Node:
															(type) c
															(layer)5
																Element:table
																Element:thead
																Element:tr
																Element:th
																	Parameter
																Element:th
																	Required
																Element:th
																	Type
																Element:th
																	Description
																Element:tbody
																Element:tr
																Element:td
																	email
																Element:td
																	no
																Element:td
																	string
																Element:td
																	Customer’s email address.
																Element:tr
																Element:td
																	ipAddress
																Element:td
																	no
																Element:td
																	string
																Element:td
																	Customer’s IP address.
																Element:tr
																Element:td
																	address1
																Element:td
																	no
																Element:td
																	string
																Element:td
																	First line of the street address of the customer’s permanent residence.
																Element:strong
																	Note:
																	PO Boxes are not allowed.
																Element:tr
																Element:td
																	address2
																Element:td
																	no
																Element:td
																	string
																Element:td
																	Second line of the street address of the customer’s permanent residence.
																Element:strong
																	Note:
																	PO Boxes are not allowed.
																Element:tr
																Element:td
																	city
																Element:td
																	no
																Element:td
																	string
																Element:td
																	City of customer’s peramanent residence.
																Element:tr
																Element:td
																	state
																Element:td
																	no
																Element:td
																	string
																Element:td
																	Two letter abbreviation of the state in which the customer resides. e.g.
																Element:code
																	NY
																	.
																Element:tr
																Element:td
																	postalCode
																Element:td
																	no
																Element:td
																	string
																Element:td
																	Postal code of customer’s permanent residence. Should be a five digit postal code, e.g.
																Element:code
																	50314
																	.
																Element:tr
																Element:td
																	phone
																Element:td
																	no
																Element:td
																	string
																Element:td
																	Customer’s 10 digit phone number. No hyphens or other separators, e.g.
																Element:code
																	3334447777
																	.
			Node:
			(type) c
			(layer)1
															Node:
															(type) c
															(layer)5
																Element:h5
																	Request parameters - verified Customer with type=business
															Node:
															(type) c
															(layer)5
																Element:p
																	In addition to the table above, business verified Customers can update the following fields.
															Node:
															(type) c
															(layer)5
																Element:table
																Element:thead
																Element:tr
																Element:th
																	Parameter
																Element:th
																	Required
																Element:th
																	Type
																Element:th
																	Description
																Element:tbody
																Element:tr
																Element:td
																	doingBusinessAs
																Element:td
																	no
																Element:td
																	string
																Element:td
																	Name that is different from the officially registered name of Customer’s business.
																Element:tr
																Element:td
																	website
																Element:td
																	no
																Element:td
																	string
																Element:td
																	www.domain.com
															Node:
															(type) c
															(layer)5
																Element:h3
																	Upgrade an unverified Customer to verified Customer
															Node:
															(type) c
															(layer)5
																Element:p
																	An unverified Customer can be upgraded to a verified Customer by supplying the necessary information required to create a verified Customer. See
																Element:a
																	this table
																	for required information.
															Node:
															(type) c
															(layer)5
																Element:h3
																	Suspend a Customer
															Node:
															(type) c
															(layer)5
																Element:p
																	An unverified and verified Customer can be suspended by supplying the status of
																Element:code
																	suspended
																	. You’ll need to contact Dwolla to unsuspend a Customer.
			Node:
			(type) c
			(layer)1
															Node:
															(type) c
															(layer)5
																Element:h5
																	Request parameters
															Node:
															(type) c
															(layer)5
																Element:table
																Element:thead
																Element:tr
																Element:th
																	Parameter
																Element:th
																	Required
																Element:th
																	Type
																Element:th
																	Description
																Element:tbody
																Element:tr
																Element:td
																	status
																Element:td
																	yes
																Element:td
																	string
																Element:td
																	Value of
																Element:code
																	suspended
																	.
															Node:
															(type) c
															(layer)5
																Element:h3
																	Retry verification
															Node:
															(type) c
															(layer)5
																Element:p
																	If the verified Customer has a status of
																Element:code
																	retry
																	, some information may have been miskeyed. You have one more opportunity to correct any mistakes using this endpoint. This time, you’ll need to provide the Customer’s full SSN. If the additional attempt fails, the resulting status will be either
																Element:code
																	document
																	or
																Element:code
																	suspended
																	.
															Node:
															(type) c
															(layer)5
																Element:h3
																	Customer must be in the retry state:
															Node:
															(type) c
															(layer)5
																Element:pre
																Element:code
																Element:span
																	{
																Element:span
																Element:span
																	"_links"
																Element:span
																	:
																Element:span
																Element:span
																	{
																Element:span
																Element:span
																	"self"
																Element:span
																	:
																Element:span
																Element:span
																	{
																Element:span
																Element:span
																	"href"
																Element:span
																	:
																Element:span
																Element:span
																	"https://api.dwolla.com/customers/730CA23F-06C5-45CC-AA6B-8EC2D6EE109F"
																Element:span
																Element:span
																	},
																Element:span
																Element:span
																	"funding-sources"
																Element:span
																	:
																Element:span
																Element:span
																	{
																Element:span
																Element:span
																	"href"
																Element:span
																	:
																Element:span
																Element:span
																	"https://api.dwolla.com/customers/730CA23F-06C5-45CC-AA6B-8EC2D6EE109F/funding-sources"
																Element:span
																Element:span
																	},
																Element:span
																Element:span
																	"transfers"
																Element:span
																	:
																Element:span
																Element:span
																	{
																Element:span
																Element:span
																	"href"
																Element:span
																	:
																Element:span
																Element:span
																	"https://api.dwolla.com/customers/730CA23F-06C5-45CC-AA6B-8EC2D6EE109F/transfers"
																Element:span
																Element:span
																	},
																Element:span
																Element:span
																	"retry-verification"
																Element:span
																	:
																Element:span
																Element:span
																	{
																Element:span
																Element:span
																	"href"
																Element:span
																	:
																Element:span
																Element:span
																	"https://api.dwolla.com/customers/730CA23F-06C5-45CC-AA6B-8EC2D6EE109F"
																Element:span
																Element:span
																	}
																Element:span
																Element:span
																	},
																Element:span
																Element:span
																	"id"
																Element:span
																	:
																Element:span
																Element:span
																	"730CA23F-06C5-45CC-AA6B-8EC2D6EE109F"
																Element:span
																	,
																Element:span
																Element:span
																	"firstName"
																Element:span
																	:
																Element:span
																Element:span
																	"Jane"
																Element:span
																	,
																Element:span
																Element:span
																	"lastName"
																Element:span
																	:
																Element:span
																Element:span
																	"Doe"
																Element:span
																	,
																Element:span
																Element:span
																	"email"
																Element:span
																	:
																Element:span
																Element:span
																	"jdoe@nomail.com"
																Element:span
																	,
																Element:span
																Element:span
																	"type"
																Element:span
																	:
																Element:span
																Element:span
																	"personal"
																Element:span
																	,
																Element:span
																Element:span
																	"status"
																Element:span
																	:
																Element:span
																Element:span
																	"retry"
																Element:span
																	,
																Element:span
																Element:span
																	"created"
																Element:span
																	:
																Element:span
																Element:span
																	"2015-10-06T01:18:26.923Z"
																Element:span
																Element:span
																	}
																Element:span
															Node:
															(type) c
															(layer)5
																Element:h3
																	Request and response
															Node:
															(type) c
															(layer)5
																Element:pre
																Element:code
																	POST /customers/132681FA-1B4D-4181-8FF2-619CA46235B1 Content-Type: application/vnd.dwolla.v1.hal+json Accept: application/vnd.dwolla.v1.hal+json Authorization: Bearer pBA9fVDBEyYZCEsLf/wKehyh1RTpzjUj5KzIRfDi0wKTii7DqY { "firstName": "John", "lastName": "Doe", "email": "jdoe@nomail.com", "ipAddress": "10.10.10.10", "type": "personal", "address1": "221 Corrected Address St.", "address2": "Apt 201", "city": "San Francisco", "state": "CA", "postalCode": "94104", "dateOfBirth": "1970-07-11", "ssn": "123-45-6789" } HTTP/1.1 200 OK Location: https://api.dwolla.com/customers/FC451A7A-AE30-4404-AB95-E3553FCD733F
															Node:
															(type) c
															(layer)5
																Element:pre
																Element:code
																Element:span
																	<?php
																Element:span
																	$customersApi
																Element:span
																	=
																Element:span
																	new
																Element:span
																	DwollaSwagger\CustomersApi
																Element:span
																	(
																Element:span
																	$apiClient
																Element:span
																	);
																Element:span
																	$customerUrl
																Element:span
																	=
																Element:span
																	'https://api.dwolla.com/customers/FC451A7A-AE30-4404-AB95-E3553FCD733F'
																Element:span
																	;
																Element:span
																	$customer
																Element:span
																	=
																Element:span
																	$customersApi
																Element:span
																	->
																Element:span
																	updateCustomer
																Element:span
																	(
																Element:span
																	$customerUrl
																Element:span
																	,
																Element:span
																	array
																Element:span
																	(
																Element:span
																	'firstName'
																Element:span
																	=>
																Element:span
																	'John'
																Element:span
																	,
																Element:span
																	'lastName'
																Element:span
																	=>
																Element:span
																	'Doe'
																Element:span
																	,
																Element:span
																	'email'
																Element:span
																	=>
																Element:span
																	'jdoe@nomail.com'
																Element:span
																	,
																Element:span
																	'ipAddress'
																Element:span
																	=>
																Element:span
																	'10.10.10.10'
																Element:span
																	,
																Element:span
																	'type'
																Element:span
																	=>
																Element:span
																	'personal'
																Element:span
																	,
																Element:span
																	'address1'
																Element:span
																	=>
																Element:span
																	'221 Corrected Address St.'
																Element:span
																	,
																Element:span
																	'address2'
																Element:span
																	=>
																Element:span
																	'Apt 201'
																Element:span
																	,
																Element:span
																	'city'
																Element:span
																	=>
																Element:span
																	'San Francisco'
																Element:span
																	,
																Element:span
																	'state'
																Element:span
																	=>
																Element:span
																	'CA'
																Element:span
																	,
																Element:span
																	'postalCode'
																Element:span
																	=>
																Element:span
																	'94104'
																Element:span
																	,
																Element:span
																	'dateOfBirth'
																Element:span
																	=>
																Element:span
																	'1970-07-11'
																Element:span
																	,
																Element:span
																	'ssn'
																Element:span
																	=>
																Element:span
																	'123-45-6789'
																Element:span
																	,
																Element:span
																	));
																Element:span
																	$customer
																Element:span
																	->
																Element:span
																	id
																Element:span
																	;
																Element:span
																	# => "FC451A7A-AE30-4404-AB95-E3553FCD733F"
																Element:span
																	?>
															Node:
															(type) c
															(layer)5
																Element:pre
																Element:code
																Element:span
																	customer_url
																Element:span
																	=
																Element:span
																	'https://api.dwolla.com/customers/FC451A7A-AE30-4404-AB95-E3553FCD733F'
																Element:span
																	request_body
																Element:span
																	=
																Element:span
																	{
																Element:span
																	"firstName"
																Element:span
																	=>
																Element:span
																	"John"
																Element:span
																	,
																Element:span
																	"lastName"
																Element:span
																	=>
																Element:span
																	"Doe"
																Element:span
																	,
																Element:span
																	"email"
																Element:span
																	=>
																Element:span
																	"jdoe@nomail.com"
																Element:span
																	,
																Element:span
																	"ipAddress"
																Element:span
																	=>
																Element:span
																	"10.10.10.10"
																Element:span
																	,
																Element:span
																	"type"
																Element:span
																	=>
																Element:span
																	"personal"
																Element:span
																	,
																Element:span
																	"address1"
																Element:span
																	=>
																Element:span
																	"221 Corrected Address St."
																Element:span
																	,
																Element:span
																	"address2"
																Element:span
																	=>
																Element:span
																	"Apt 201"
																Element:span
																	,
																Element:span
																	"city"
																Element:span
																	=>
																Element:span
																	"San Francisco"
																Element:span
																	,
																Element:span
																	"state"
																Element:span
																	=>
																Element:span
																	"CA"
																Element:span
																	,
																Element:span
																	"postalCode"
																Element:span
																	=>
																Element:span
																	"94104"
																Element:span
																	,
																Element:span
																	"dateOfBirth"
																Element:span
																	=>
																Element:span
																	"1970-07-11"
																Element:span
																	,
																Element:span
																	"ssn"
																Element:span
																	=>
																Element:span
																	"123-45-6789"
																Element:span
																	}
																Element:span
																	# Using DwollaV2 - https://github.com/Dwolla/dwolla-v2-ruby (Recommended)
																Element:span
																	customer
																Element:span
																	=
																Element:span
																	app_token
																Element:span
																	.
																Element:span
																	post
																Element:span
																	customer_url
																Element:span
																	,
																Element:span
																	request_body
																Element:span
																	customer
																Element:span
																	.
																Element:span
																	id
																Element:span
																	# => "FC451A7A-AE30-4404-AB95-E3553FCD733F"
																Element:span
																	# Using DwollaSwagger - https://github.com/Dwolla/dwolla-swagger-ruby
																Element:span
																	customer
																Element:span
																	=
																Element:span
																	DwollaSwagger
																Element:span
																	::
																Element:span
																	CustomersApi
																Element:span
																	.
																Element:span
																	update_customer
																Element:span
																	(
																Element:span
																	customer_url
																Element:span
																	,
																Element:span
																	:body
																Element:span
																	=>
																Element:span
																	request_body
																Element:span
																	)
																Element:span
																	customer
																Element:span
																	.
																Element:span
																	id
																Element:span
																	# => "FC451A7A-AE30-4404-AB95-E3553FCD733F"
															Node:
															(type) c
															(layer)5
																Element:pre
																Element:code
																Element:span
																	customer_url
																Element:span
																	=
																Element:span
																	'https://api.dwolla.com/customers/FC451A7A-AE30-4404-AB95-E3553FCD733F'
																Element:span
																	request_body
																Element:span
																	=
																Element:span
																	{
																Element:span
																	"firstName"
																Element:span
																	:
																Element:span
																	"John"
																Element:span
																	,
																Element:span
																	"lastName"
																Element:span
																	:
																Element:span
																	"Doe"
																Element:span
																	,
																Element:span
																	"email"
																Element:span
																	:
																Element:span
																	"jdoe@nomail.com"
																Element:span
																	,
																Element:span
																	"ipAddress"
																Element:span
																	:
																Element:span
																	"10.10.10.10"
																Element:span
																	,
																Element:span
																	"type"
																Element:span
																	:
																Element:span
																	"personal"
																Element:span
																	,
																Element:span
																	"address1"
																Element:span
																	:
																Element:span
																	"221 Corrected Address St."
																Element:span
																	,
																Element:span
																	"address2"
																Element:span
																	:
																Element:span
																	"Apt 201"
																Element:span
																	,
																Element:span
																	"city"
																Element:span
																	:
																Element:span
																	"San Francisco"
																Element:span
																	,
																Element:span
																	"state"
																Element:span
																	:
																Element:span
																	"CA"
																Element:span
																	,
																Element:span
																	"postalCode"
																Element:span
																	:
																Element:span
																	"94104"
																Element:span
																	,
																Element:span
																	"dateOfBirth"
																Element:span
																	:
																Element:span
																	"1970-07-11"
																Element:span
																	,
																Element:span
																	"ssn"
																Element:span
																	:
																Element:span
																	"123-45-6789"
																Element:span
																	}
																Element:span
																	# Using dwollav2 - https://github.com/Dwolla/dwolla-v2-python (Recommended)
																Element:span
																	customer
																Element:span
																	=
																Element:span
																	app_token
																Element:span
																	.
																Element:span
																	post
																Element:span
																	(
																Element:span
																	'customers'
																Element:span
																	,
																Element:span
																	request_body
																Element:span
																	)
																Element:span
																	customer
																Element:span
																	.
																Element:span
																	body
																Element:span
																	.
																Element:span
																	id
																Element:span
																	# => 'FC451A7A-AE30-4404-AB95-E3553FCD733F'
																Element:span
																	# Using dwollaswagger - https://github.com/Dwolla/dwolla-swagger-python
																Element:span
																	customers_api
																Element:span
																	=
																Element:span
																	dwollaswagger
																Element:span
																	.
																Element:span
																	CustomersApi
																Element:span
																	(
																Element:span
																	client
																Element:span
																	)
																Element:span
																	customer
																Element:span
																	=
																Element:span
																	customers_api
																Element:span
																	.
																Element:span
																	update_customer
																Element:span
																	(
																Element:span
																	customer_url
																Element:span
																	,
																Element:span
																	body
																Element:span
																	=
																Element:span
																	request_body
																Element:span
																	)
																Element:span
																	customer
																Element:span
																	.
																Element:span
																	id
																Element:span
																	# => 'FC451A7A-AE30-4404-AB95-E3553FCD733F'
															Node:
															(type) c
															(layer)5
																Element:pre
																Element:code
																Element:span
																	var
																Element:span
																	customerUrl
																Element:span
																	=
																Element:span
																	'https://api.dwolla.com/customers/FC451A7A-AE30-4404-AB95-E3553FCD733F'
																Element:span
																	;
																Element:span
																	var
																Element:span
																	requestBody
																Element:span
																	=
																Element:span
																	{
																Element:span
																	firstName
																Element:span
																	:
																Element:span
																	"John"
																Element:span
																	,
																Element:span
																	lastName
																Element:span
																	:
																Element:span
																	"Doe"
																Element:span
																	,
																Element:span
																	email
																Element:span
																	:
																Element:span
																	"johndoe@dwolla.com"
																Element:span
																	,
																Element:span
																	ipAddress
																Element:span
																	:
																Element:span
																	"10.10.10.10"
																Element:span
																	,
																Element:span
																	type
																Element:span
																	:
																Element:span
																	"personal"
																Element:span
																	,
																Element:span
																	address1
																Element:span
																	:
																Element:span
																	"221 Corrected Address St."
																Element:span
																	,
																Element:span
																	address2
																Element:span
																	:
																Element:span
																	"Fl 8"
																Element:span
																	,
																Element:span
																	city
																Element:span
																	:
																Element:span
																	"Ridgewood"
																Element:span
																	,
																Element:span
																	state
																Element:span
																	:
																Element:span
																	"NY"
																Element:span
																	,
																Element:span
																	postalCode
																Element:span
																	:
																Element:span
																	"11385"
																Element:span
																	,
																Element:span
																	dateOfBirth
																Element:span
																	:
																Element:span
																	"1990-07-11"
																Element:span
																	,
																Element:span
																	ssn
																Element:span
																	:
																Element:span
																	"202-99-1516"
																Element:span
																	};
																Element:span
																	appToken
																Element:span
																	.
																Element:span
																	post
																Element:span
																	(
																Element:span
																	customerUrl
																Element:span
																	,
																Element:span
																	requestBody
																Element:span
																	)
																Element:span
																	.
																Element:span
																	then
																Element:span
																	(
																Element:span
																	res
																Element:span
																	=>
																Element:span
																	res
																Element:span
																	.
																Element:span
																	body
																Element:span
																	.
																Element:span
																	id
																Element:span
																	);
																Element:span
																	// => 'FC451A7A-AE30-4404-AB95-E3553FCD733F'
															Node:
															(type) c
															(layer)5
																Element:h3
																	If you try more than once, or Customer is not in retry state:
															Node:
															(type) c
															(layer)5
																Element:pre
																Element:code
																Element:span
																	{
																Element:span
																Element:span
																	"code"
																Element:span
																	:
																Element:span
																Element:span
																	"InvalidResourceState"
																Element:span
																	,
																Element:span
																Element:span
																	"message"
																Element:span
																	:
																Element:span
																Element:span
																	"Resource cannot be modified."
																Element:span
																Element:span
																	}
																Element:span
															Node:
															(type) c
															(layer)5
																Element:h3
																	Request parameters - retry verified Customer
															Node:
															(type) c
															(layer)5
																Element:table
																Element:thead
																Element:tr
																Element:th
																	Parameter
																Element:th
																	Required
																Element:th
																	Type
																Element:th
																	Description
																Element:tbody
																Element:tr
																Element:td
																	firstName
																Element:td
																	yes
																Element:td
																	string
																Element:td
																	Customer’s first name.
																Element:tr
																Element:td
																	lastName
																Element:td
																	yes
																Element:td
																	string
																Element:td
																	Customer’s last name.
																Element:tr
																Element:td
																	email
																Element:td
																	yes
																Element:td
																	string
																Element:td
																	Customer’s email address.
																Element:tr
																Element:td
																	ipAddress
																Element:td
																	no
																Element:td
																	string
																Element:td
																	Customer’s IP address.
																Element:tr
																Element:td
																	type
																Element:td
																	yes
																Element:td
																	string
																Element:td
																	Either
																Element:code
																	personal
																	or
																Element:code
																	business
																	. If business,
																Element:a
																	see above
																	for additional required information.
																Element:tr
																Element:td
																	address1
																Element:td
																	yes
																Element:td
																	string
																Element:td
																	First line of the street address of the Customer’s permanent residence.
																Element:strong
																	Note:
																	PO Boxes are not allowed.
																Element:tr
																Element:td
																	address2
																Element:td
																	no
																Element:td
																	string
																Element:td
																	Second line of the street address of the Customer’s permanent residence.
																Element:strong
																	Note:
																	PO Boxes are not allowed.
																Element:tr
																Element:td
																	city
																Element:td
																	yes
																Element:td
																	string
																Element:td
																	City of Customer’s permanent residence.
																Element:tr
																Element:td
																	state
																Element:td
																	yes
																Element:td
																	string
																Element:td
																	Two letter abbreviation of the state in which the customer resides, e.g.
																Element:code
																	CA
																	.
																Element:tr
																Element:td
																	postalCode
																Element:td
																	yes
																Element:td
																	string
																Element:td
																	Postal code of Customer’s permanent residence. Should be a five digit postal code, e.g.
																Element:code
																	50314
																	.
																Element:tr
																Element:td
																	dateOfBirth
																Element:td
																	yes
																Element:td
																	string
																Element:td
																	Customer’s date of birth in
																Element:code
																	YYYY-MM-DD
																	format.
																Element:tr
																Element:td
																	ssn
																Element:td
																	yes
																Element:td
																	string
																Element:td
																	Customer’s
																Element:strong
																	full
																	Social Security Number.
																Element:tr
																Element:td
																	phone
																Element:td
																	no
																Element:td
																	string
																Element:td
																	Customer’s 10 digit phone number. No hyphens or other separators, e.g.
																Element:code
																	3334447777
																	.
															Node:
															(type) c
															(layer)5
																Element:h3
																	Errors
															Node:
															(type) c
															(layer)5
																Element:table
																Element:thead
																Element:tr
																Element:th
																	HTTP Status
																Element:th
																	Message
																Element:tbody
																Element:tr
																Element:td
																	400
																Element:td
																	Duplicate customer or validation error.
																Element:tr
																Element:td
																	403
																Element:td
																	Not authorized to create customers.
															Node:
															(type) c
															(layer)5
																Element:h2
																	List and search customers
															Node:
															(type) c
															(layer)5
																Element:p
																	This section outlines how to retrieve your list of created Customers.
															Node:
															(type) c
															(layer)5
																Element:h3
																	HTTP request
															Node:
															(type) c
															(layer)5
																Element:p
																Element:code
																	GET https://api.dwolla.com/customers
															Node:
															(type) c
															(layer)5
																Element:h3
																	Request parameters
															Node:
															(type) c
															(layer)5
																Element:table
																Element:thead
																Element:tr
																Element:th
																	Parameter
																Element:th
																	Required
																Element:th
																	Type
																Element:th
																	Description
																Element:tbody
																Element:tr
																Element:td
																	limit
																Element:td
																	no
																Element:td
																	integer
																Element:td
																	How many results to return.
																Element:tr
																Element:td
																	offset
																Element:td
																	no
																Element:td
																	integer
																Element:td
																	How many results to skip.
																Element:tr
																Element:td
																	search
																Element:td
																	no
																Element:td
																	string
																Element:td
																	Searches on
																Element:code
																	firstName
																	,
																Element:code
																	lastName
																	, and
																Element:code
																	email
																	fields. (
																Element:code
																	/customers?search=Doe
																	)
															Node:
															(type) c
															(layer)5
																Element:h3
																	Request and response
															Node:
															(type) c
															(layer)5
																Element:pre
																Element:code
																	GET /customers Accept: application/vnd.dwolla.v1.hal+json Authorization: Bearer pBA9fVDBEyYZCEsLf/wKehyh1RTpzjUj5KzIRfDi0wKTii7DqY { "_links": { "first": { "href": "https://api.dwolla.com/customers?limit=25&offset=0" }, "last": { "href": "https://api.dwolla.com/customers?limit=25&offset=0" }, "self": { "href": "https://api.dwolla.com/customers?limit=25&offset=0" } }, "_embedded": { "customers": [ { "_links": { "self": { "href": "https://api.dwolla.com/customers/FC451A7A-AE30-4404-AB95-E3553FCD733F" } }, "id": "FC451A7A-AE30-4404-AB95-E3553FCD733F", "firstName": "Jane", "lastName": "Doe", "email": "janedoe@nomail.com", "type": "unverified", "status": "unverified", "created": "2015-09-03T23:56:10.023Z" } ] }, "total": 1 }
															Node:
															(type) c
															(layer)5
																Element:pre
																Element:code
																Element:span
																	# Using DwollaV2 - https://github.com/Dwolla/dwolla-v2-ruby (Recommended)
																Element:span
																	customers
																Element:span
																	=
																Element:span
																	app_token
																Element:span
																	.
																Element:span
																	get
																Element:span
																	"customers"
																Element:span
																	,
																Element:span
																	limit:
																Element:span
																	10
																Element:span
																	customers
																Element:span
																	.
																Element:span
																	_embedded
																Element:span
																	.
																Element:span
																	customers
																Element:span
																	[
																Element:span
																	0
																Element:span
																	].
																Element:span
																	firstName
																Element:span
																	# => "Jane"
																Element:span
																	# Using DwollaSwagger - https://github.com/Dwolla/dwolla-swagger-ruby
																Element:span
																	customers
																Element:span
																	=
																Element:span
																	DwollaSwagger
																Element:span
																	::
																Element:span
																	CustomersApi
																Element:span
																	.
																Element:span
																	list
																Element:span
																	(
																Element:span
																	:limit
																Element:span
																	=>
																Element:span
																	10
																Element:span
																	)
																Element:span
																	customers
																Element:span
																	.
																Element:span
																	_embedded
																Element:span
																	[
																Element:span
																	:customers
																Element:span
																	][
																Element:span
																	0
																Element:span
																	][
																Element:span
																	:firstName
																Element:span
																	]
																Element:span
																	# => "Jane"
															Node:
															(type) c
															(layer)5
																Element:pre
																Element:code
																Element:span
																	<?php
																Element:span
																	$customersApi
																Element:span
																	=
																Element:span
																	new
																Element:span
																	DwollaSwagger\CustomersApi
																Element:span
																	(
																Element:span
																	$apiClient
																Element:span
																	);
																Element:span
																	$customers
																Element:span
																	=
																Element:span
																	$customersApi
																Element:span
																	->
																Element:span
																	_list
																Element:span
																	(
																Element:span
																	10
																Element:span
																	,
																Element:span
																	0
																Element:span
																	);
																Element:span
																	$customers
																Element:span
																	->
																Element:span
																	_embedded
																Element:span
																	->
																Element:span
																	customers
																Element:span
																	[
																Element:span
																	0
																Element:span
																	]
																Element:span
																	->
																Element:span
																	firstName
																Element:span
																	;
																Element:span
																	# => "Jane"
																Element:span
																	?>
															Node:
															(type) c
															(layer)5
																Element:pre
																Element:code
																Element:span
																	# Using dwollav2 - https://github.com/Dwolla/dwolla-v2-python (Recommended)
																Element:span
																	customer
																Element:span
																	=
																Element:span
																	app_token
																Element:span
																	.
																Element:span
																	get
																Element:span
																	(
																Element:span
																	'customers'
																Element:span
																	,
																Element:span
																	limit
																Element:span
																	=
																Element:span
																	10
																Element:span
																	)
																Element:span
																	customer
																Element:span
																	.
																Element:span
																	body
																Element:span
																	[
																Element:span
																	'_embedded'
																Element:span
																	][
																Element:span
																	'customers'
																Element:span
																	][
																Element:span
																	0
																Element:span
																	][
																Element:span
																	'firstName'
																Element:span
																	]
																Element:span
																	# => 'Jane'
																Element:span
																	# Using dwollaswagger - https://github.com/Dwolla/dwolla-swagger-python
																Element:span
																	customers_api
																Element:span
																	=
																Element:span
																	dwollaswagger
																Element:span
																	.
																Element:span
																	CustomersApi
																Element:span
																	(
																Element:span
																	client
																Element:span
																	)
																Element:span
																	customers
																Element:span
																	=
																Element:span
																	customers_api
																Element:span
																	.
																Element:span
																	list
																Element:span
																	(
																Element:span
																	limit
																Element:span
																	=
																Element:span
																	10
																Element:span
																	)
																Element:span
																	customers
																Element:span
																	.
																Element:span
																	_embedded
																Element:span
																	[
																Element:span
																	'customers'
																Element:span
																	][
																Element:span
																	0
																Element:span
																	][
																Element:span
																	'firstName'
																Element:span
																	]
																Element:span
																	# => 'Jane'
															Node:
															(type) c
															(layer)5
																Element:pre
																Element:code
																Element:span
																	appToken
																Element:span
																	.
																Element:span
																	get
																Element:span
																	(
																Element:span
																	'customers'
																Element:span
																	,
																Element:span
																	{
																Element:span
																	limit
																Element:span
																	:
																Element:span
																	10
																Element:span
																	})
																Element:span
																	.
																Element:span
																	then
																Element:span
																	(
																Element:span
																	res
																Element:span
																	=>
																Element:span
																	res
																Element:span
																	.
																Element:span
																	body
																Element:span
																	.
																Element:span
																	_embedded
																Element:span
																	.
																Element:span
																	customers
																Element:span
																	[
																Element:span
																	0
																Element:span
																	].
																Element:span
																	firstName
																Element:span
																	);
																Element:span
																	// => 'Jane'
															Node:
															(type) c
															(layer)5
																Element:h2
																	Retrieve a customer
															Node:
															(type) c
															(layer)5
																Element:p
																	This section shows you how to retrieve a Customer belonging to the authorized user Account. Each
																Element:code
																	Customer
																	id is a part of its location resource. The developer can pass either an
																Element:code
																	id
																	or the entire
																Element:code
																	location
																	resource to make this request.
															Node:
															(type) c
															(layer)5
																Element:h3
																	HTTP request
															Node:
															(type) c
															(layer)5
																Element:p
																Element:code
																	GET https://api.dwolla.com/customers/{id}
															Node:
															(type) c
															(layer)5
																Element:h3
																	Request parameters
															Node:
															(type) c
															(layer)5
																Element:table
																Element:thead
																Element:tr
																Element:th
																	Parameter
																Element:th
																	Required
																Element:th
																	Type
																Element:th
																	Description
																Element:tbody
																Element:tr
																Element:td
																	id
																Element:td
																	yes
																Element:td
																	string
																Element:td
																	Customer unique identifier.
															Node:
															(type) c
															(layer)5
																Element:h3
																	Errors
															Node:
															(type) c
															(layer)5
																Element:table
																Element:thead
																Element:tr
																Element:th
																	HTTP Status
																Element:th
																	Message
																Element:tbody
																Element:tr
																Element:td
																	403
																Element:td
																	Not authorized to get a customer by id.
																Element:tr
																Element:td
																	404
																Element:td
																	Customer not found.
															Node:
															(type) c
															(layer)5
																Element:h3
																	Request and response
															Node:
															(type) c
															(layer)5
																Element:pre
																Element:code
																	GET https://api-uat.dwolla.com/customers/07D59716-EF22-4FE6-98E8-F3190233DFB8 Accept: application/vnd.dwolla.v1.hal+json Authorization: Bearer pBA9fVDBEyYZCEsLf/wKehyh1RTpzjUj5KzIRfDi0wKTii7DqY { "_links": { "self": { "href": "https://api.dwolla.com/customers/FC451A7A-AE30-4404-AB95-E3553FCD733F" } }, "id": "FC451A7A-AE30-4404-AB95-E3553FCD733F", "firstName": "Jane", "lastName": "Doe", "email": "janedoe@nomail.com", "type": "unverified", "status": "unverified", "created": "2015-09-03T23:56:10.023Z" }
															Node:
															(type) c
															(layer)5
																Element:pre
																Element:code
																Element:span
																	customer_url
																Element:span
																	=
																Element:span
																	'https://api-uat.dwolla.com/customers/07D59716-EF22-4FE6-98E8-F3190233DFB8'
																Element:span
																	# Using DwollaV2 - https://github.com/Dwolla/dwolla-v2-ruby (Recommended)
																Element:span
																	customer
																Element:span
																	=
																Element:span
																	app_token
																Element:span
																	.
																Element:span
																	get
																Element:span
																	customer_url
																Element:span
																	customer
																Element:span
																	.
																Element:span
																	firstName
																Element:span
																	# => "Jane"
																Element:span
																	# Using DwollaSwagger - https://github.com/Dwolla/dwolla-swagger-ruby
																Element:span
																	customer
																Element:span
																	=
																Element:span
																	DwollaSwagger
																Element:span
																	::
																Element:span
																	CustomersApi
																Element:span
																	.
																Element:span
																	get_customer
																Element:span
																	(
																Element:span
																	customer_url
																Element:span
																	)
																Element:span
																	customer
																Element:span
																	.
																Element:span
																	firstName
																Element:span
																	# => "Jane"
															Node:
															(type) c
															(layer)5
																Element:pre
																Element:code
																Element:span
																	<?php
																Element:span
																	$customerUrl
																Element:span
																	=
																Element:span
																	'https://api-uat.dwolla.com/customers/07D59716-EF22-4FE6-98E8-F3190233DFB8'
																Element:span
																	;
																Element:span
																	$customersApi
																Element:span
																	=
																Element:span
																	new
																Element:span
																	DwollaSwagger\CustomersApi
																Element:span
																	(
																Element:span
																	$apiClient
																Element:span
																	);
																Element:span
																	$customer
																Element:span
																	=
																Element:span
																	$customersApi
																Element:span
																	->
																Element:span
																	getCustomer
																Element:span
																	(
																Element:span
																	$customerUrl
																Element:span
																	);
																Element:span
																	$customer
																Element:span
																	->
																Element:span
																	firstName
																Element:span
																	;
																Element:span
																	# => "Jane"
																Element:span
																	?>
															Node:
															(type) c
															(layer)5
																Element:pre
																Element:code
																Element:span
																	customer_url
																Element:span
																	=
																Element:span
																	'https://api-uat.dwolla.com/customers/07D59716-EF22-4FE6-98E8-F3190233DFB8'
																Element:span
																	# Using dwollav2 - https://github.com/Dwolla/dwolla-v2-python (Recommended)
																Element:span
																	customer
																Element:span
																	=
																Element:span
																	app_token
																Element:span
																	.
																Element:span
																	get
																Element:span
																	(
																Element:span
																	customer_url
																Element:span
																	)
																Element:span
																	customer
																Element:span
																	.
																Element:span
																	body
																Element:span
																	[
																Element:span
																	'firstName'
																Element:span
																	]
																Element:span
																	# Using dwollaswagger - https://github.com/Dwolla/dwolla-swagger-python
																Element:span
																	customers_api
																Element:span
																	=
																Element:span
																	dwollaswagger
																Element:span
																	.
																Element:span
																	CustomersApi
																Element:span
																	(
																Element:span
																	client
																Element:span
																	)
																Element:span
																	customer
																Element:span
																	=
																Element:span
																	customers_api
																Element:span
																	.
																Element:span
																	get_customer
																Element:span
																	(
																Element:span
																	customer_url
																Element:span
																	)
																Element:span
																	customer
																Element:span
																	.
																Element:span
																	firstName
																Element:span
																	# => 'Jane'
															Node:
															(type) c
															(layer)5
																Element:pre
																Element:code
																Element:span
																	var
																Element:span
																	customerUrl
																Element:span
																	=
																Element:span
																	'https://api-uat.dwolla.com/customers/07D59716-EF22-4FE6-98E8-F3190233DFB8'
																Element:span
																	;
																Element:span
																	appToken
																Element:span
																	.
																Element:span
																	get
																Element:span
																	(
																Element:span
																	customerUrl
																Element:span
																	)
																Element:span
																	.
																Element:span
																	then
																Element:span
																	(
																Element:span
																	res
																Element:span
																	=>
																Element:span
																	res
																Element:span
																	.
																Element:span
																	body
																Element:span
																	.
																Element:span
																	firstName
																Element:span
																	);
																Element:span
																	// => 'Jane'
															Node:
															(type) c
															(layer)5
																Element:h2
																	Create an on-demand transfer authorization
															Node:
															(type) c
															(layer)5
																Element:p
																	This section outlines how to create an on-demand bank transfer authorization for your Customer. On-demand authorization allows Customers to authorize Dwolla to transfer variable amounts from their bank account using ACH at a later point in time for products or services delivered. This on-demand authorization is supplied along with the Customer’s bank details when creating a
																Element:a
																	new Customer funding source
																	.
															Node:
															(type) c
															(layer)5
																Element:p
																	When on-demand authorization is enabled for your application the Customer is presented with text on a “add bank account” screen in your user interface(UI) giving authorization to Dwolla for future variable payments.
																Element:strong
																	Note:
																	On-demand payments come as part of our Access API and requires additional approval before getting started. Please
																Element:a
																	contact Sales
																	for more information on enabling.
															Node:
															(type) c
															(layer)5
																Element:h3
																	HTTP request
															Node:
															(type) c
															(layer)5
																Element:p
																Element:code
																	POST https://api.dwolla.com/on-demand-authorizations
															Node:
															(type) c
															(layer)5
																Element:h3
																	HTTP Status and Error Codes
															Node:
															(type) c
															(layer)5
																Element:table
																Element:thead
																Element:tr
																Element:th
																	HTTP Status
																Element:th
																	Code
																Element:th
																	Description
																Element:tbody
																Element:tr
																Element:td
																	403
																Element:td
																	Forbidden
																Element:td
																	The supplied credentials are not authorized for this resource.
															Node:
															(type) c
															(layer)5
																Element:h3
																	Request and response
															Node:
															(type) c
															(layer)5
																Element:pre
																Element:code
																	POST https://api-uat.dwolla.com/on-demand-authorizations Accept: application/vnd.dwolla.v1.hal+json Content-Type: application/vnd.dwolla.v1.hal+json Authorization: Bearer pBA9fVDBEyYZCEsLf/wKehyh1RTpzjUj5KzIRfDi0wKTii7DqY { "_links": { "self": { "href": "https://api-uat.dwolla.com/on-demand-authorizations/30e7c028-0bdf-e511-80de-0aa34a9b2388" } }, "bodyText": "I agree that future payments to Company ABC inc. will be processed by the Dwolla payment system from the selected account above. In order to cancel this authorization, I will change my payment settings within my Company ABC inc. account.", "buttonText": "Agree & Continue" }
															Node:
															(type) c
															(layer)5
																Element:pre
																Element:code
																Element:span
																	on_demand_authorization
																Element:span
																	=
																Element:span
																	app_token
																Element:span
																	.
																Element:span
																	post
																Element:span
																	"on-demand-authorizations"
																Element:span
																	on_demand_authorization
																Element:span
																	.
																Element:span
																	buttonText
																Element:span
																	# => "Agree & Continue"
															Node:
															(type) c
															(layer)5
																Element:pre
																Element:code
																	/** * No example for this language yet. **/
															Node:
															(type) c
															(layer)5
																Element:pre
																Element:code
																Element:span
																	# Using dwollav2 - https://github.com/Dwolla/dwolla-v2-python (Recommended)
																Element:span
																	on_demand_authorization
																Element:span
																	=
																Element:span
																	app_token
																Element:span
																	.
																Element:span
																	post
																Element:span
																	(
																Element:span
																	'on-demand-authorizations'
																Element:span
																	)
																Element:span
																	on_demand_authorization
																Element:span
																	.
																Element:span
																	body
																Element:span
																	[
																Element:span
																	'buttonText'
																Element:span
																	]
																Element:span
																	# => 'Agree & Continue'
															Node:
															(type) c
															(layer)5
																Element:pre
																Element:code
																Element:span
																	appToken
																Element:span
																	.
																Element:span
																	post
																Element:span
																	(
																Element:span
																	'on-demand-authorizations'
																Element:span
																	)
																Element:span
																	.
																Element:span
																	then
																Element:span
																	(
																Element:span
																	res
																Element:span
																	=>
																Element:span
																	res
																Element:span
																	.
																Element:span
																	body
																Element:span
																	.
																Element:span
																	buttonText
																Element:span
																	);
																Element:span
																	// => "Agree & Continue"
															Node:
															(type) c
															(layer)5
																Element:h2
																	Create a funding source for a customer
															Node:
															(type) c
															(layer)5
																Element:p
																	There are two methods available for adding a bank or credit union account to a Customer. You can either collect the Customer’s bank account information and pass it to Dwolla via the
																Element:a
																	new Customer funding source
																	endpoint, or you can send the Customer through the the
																Element:a
																	Instant Account Verification
																	(IAV) flow which will add and verify a bank account within seconds.
															Node:
															(type) c
															(layer)5
																Element:p
																	Before a Dwolla account or Access API Customer is eligible to transfer money from their bank or credit union account they need to verify ownership of the account, either via Instant Account Verification (IAV) or micro-deposits. For more information on bank account verification, reference this
																Element:a
																	funding source verification
																	resource article.
															Node:
															(type) c
															(layer)5
																Element:h3
																	New funding source for a customer
															Node:
															(type) c
															(layer)5
																Element:p
																	Create a new Funding Source for a Customer. Customers can have a maximum of 6 funding sources.
															Node:
															(type) c
															(layer)5
																Element:h3
																	HTTP request
															Node:
															(type) c
															(layer)5
																Element:p
																Element:code
																	POST https://api.dwolla.com/customers/{id}/funding-sources
															Node:
															(type) c
															(layer)5
																Element:h3
																	Request parameters
															Node:
															(type) c
															(layer)5
																Element:table
																Element:thead
																Element:tr
																Element:th
																	Parameter
																Element:th
																	Required
																Element:th
																	Type
																Element:th
																	Description
																Element:tbody
																Element:tr
																Element:td
																	_links
																Element:td
																	no
																Element:td
																	object
																Element:td
																	A
																Element:code
																	_links
																	JSON object containing an
																Element:code
																	on-demand-authorization
																	link relation. See example raw request and response below.
																Element:tr
																Element:td
																	routingNumber
																Element:td
																	yes
																Element:td
																	string
																Element:td
																	The bank account’s routing number.
																Element:tr
																Element:td
																	accountNumber
																Element:td
																	yes
																Element:td
																	string
																Element:td
																	The bank account number.
																Element:tr
																Element:td
																	type
																Element:td
																	yes
																Element:td
																	string
																Element:td
																	Type of bank account:
																Element:code
																	checking
																	or
																Element:code
																	savings
																	.
																Element:tr
																Element:td
																	name
																Element:td
																	yes
																Element:td
																	string
																Element:td
																	Arbitrary nickname for the funding source. Must be 50 characters or less.
																Element:tr
																Element:td
																	channels
																Element:td
																	no
																Element:td
																	array
																Element:td
																	An array containing a list of processing channels. ACH is the default processing channel for bank transfers. Acceptable value for channels is: “wire”. e.g.
																Element:code
																	“channels”: [ “wire” ]
																	. A funding source (Bank Account) added using the wire channel only supports a funds transfer going to the bank account from a balance. As a result, wire as a destination funding source can only be added where the Customer account type is a Verified Customer.
																Element:strong
																	Note:
																Element:code
																	channels
																	is a premium feature that must be enabled on your account and is only available to select
																Element:a
																	Access API
																	partners.
															Node:
															(type) c
															(layer)5
																Element:h3
																	HTTP Status and Error Codes
															Node:
															(type) c
															(layer)5
																Element:table
																Element:thead
																Element:tr
																Element:th
																	HTTP Status
																Element:th
																	Code
																Element:th
																	Description
																Element:tbody
																Element:tr
																Element:td
																	400
																Element:td
																	ValidationError
																Element:td
																	Can be: Duplicate funding source or validation error. Authorization already associated to a funding source.
																Element:tr
																Element:td
																	403
																Element:td
																	Forbidden
																Element:td
																	Not authorized to create funding source.
															Node:
															(type) c
															(layer)5
																Element:h3
																	Request and response
															Node:
															(type) c
															(layer)5
																Element:pre
																Element:code
																	POST /customers/99bfb139-eadd-4cdf-b346-7504f0c16c60/funding-sources Content-Type: application/vnd.dwolla.v1.hal+json Accept: application/vnd.dwolla.v1.hal+json Authorization: Bearer pBA9fVDBEyYZCEsLf/wKehyh1RTpzjUj5KzIRfDi0wKTii7DqY { "_links": { "on-demand-authorization": { "href": "https://api-uat.dwolla.com/on-demand-authorizations/30e7c028-0bdf-e511-80de-0aa34a9b2388" } }, "routingNumber": "222222226", "accountNumber": "123456789", "type": "checking", "name": "Jane Doe’s Checking" } HTTP/1.1 201 Created Location: https://api.dwolla.com/funding-sources/AB443D36-3757-44C1-A1B4-29727FB3111C
															Node:
															(type) c
															(layer)5
																Element:pre
																Element:code
																Element:span
																	<?php
																Element:span
																	$fundingApi
																Element:span
																	=
																Element:span
																	new
																Element:span
																	DwollaSwagger\FundingsourcesApi
																Element:span
																	(
																Element:span
																	$apiClient
																Element:span
																	);
																Element:span
																	$fundingSource
																Element:span
																	=
																Element:span
																	$fundingApi
																Element:span
																	->
																Element:span
																	createCustomerFundingSource
																Element:span
																	([
																Element:span
																	"routingNumber"
																Element:span
																	=>
																Element:span
																	"222222226"
																Element:span
																	,
																Element:span
																	"accountNumber"
																Element:span
																	=>
																Element:span
																	"123456789"
																Element:span
																	,
																Element:span
																	"type"
																Element:span
																	=>
																Element:span
																	"checking"
																Element:span
																	,
																Element:span
																	"name"
																Element:span
																	=>
																Element:span
																	"Jane Doe’s Checking"
																Element:span
																	],
																Element:span
																	"https://api-uat.dwolla.com/customers/AB443D36-3757-44C1-A1B4-29727FB3111C"
																Element:span
																	);
																Element:span
																	$fundingSource
																Element:span
																	;
																Element:span
																	# => "https://api-uat.dwolla.com/funding-sources/375c6781-2a17-476c-84f7-db7d2f6ffb31"
																Element:span
																	?>
															Node:
															(type) c
															(layer)5
																Element:pre
																Element:code
																Element:span
																	customer_url
																Element:span
																	=
																Element:span
																	'https://api-uat.dwolla.com/customers/AB443D36-3757-44C1-A1B4-29727FB3111C'
																Element:span
																	request_body
																Element:span
																	=
																Element:span
																	{
																Element:span
																	routingNumber:
																Element:span
																	'222222226'
																Element:span
																	,
																Element:span
																	accountNumber:
																Element:span
																	'123456789'
																Element:span
																	,
																Element:span
																	type:
																Element:span
																	'checking'
																Element:span
																	,
																Element:span
																	name:
																Element:span
																	'Jane Doe’s Checking'
																Element:span
																	}
																Element:span
																	# Using DwollaV2 - https://github.com/Dwolla/dwolla-v2-ruby (Recommended)
																Element:span
																	funding_source
																Element:span
																	=
																Element:span
																	app_token
																Element:span
																	.
																Element:span
																	post
																Element:span
																	"
																Element:span
																	#{
																Element:span
																	customer_url
																Element:span
																	}
																Element:span
																	/funding-sources"
																Element:span
																	,
																Element:span
																	request_body
																Element:span
																	funding_source
																Element:span
																	.
																Element:span
																	headers
																Element:span
																	[
																Element:span
																	:location
																Element:span
																	]
																Element:span
																	# => "https://api-uat.dwolla.com/funding-sources/375c6781-2a17-476c-84f7-db7d2f6ffb31"
																Element:span
																	# Using DwollaSwagger - https://github.com/Dwolla/dwolla-swagger-ruby
																Element:span
																	funding_source
																Element:span
																	=
																Element:span
																	DwollaSwagger
																Element:span
																	::
																Element:span
																	FundingsourcesApi
																Element:span
																	.
																Element:span
																	create_customer_funding_source
																Element:span
																	(
																Element:span
																	customer_url
																Element:span
																	,
																Element:span
																	:body
																Element:span
																	=>
																Element:span
																	request_body
																Element:span
																	)
																Element:span
																	funding_source
																Element:span
																	# => "https://api-uat.dwolla.com/funding-sources/375c6781-2a17-476c-84f7-db7d2f6ffb31"
															Node:
															(type) c
															(layer)5
																Element:pre
																Element:code
																Element:span
																	customer_url
																Element:span
																	=
																Element:span
																	'https://api-uat.dwolla.com/customers/AB443D36-3757-44C1-A1B4-29727FB3111C'
																Element:span
																	request_body
																Element:span
																	=
																Element:span
																	{
																Element:span
																	'routingNumber'
																Element:span
																	:
																Element:span
																	'222222226'
																Element:span
																	,
																Element:span
																	'accountNumber'
																Element:span
																	:
																Element:span
																	'123456789'
																Element:span
																	,
																Element:span
																	'type'
																Element:span
																	:
																Element:span
																	'checking'
																Element:span
																	,
																Element:span
																	'name'
																Element:span
																	:
																Element:span
																	'Jane Doe’s Checking'
																Element:span
																	}
																Element:span
																	# Using dwollav2 - https://github.com/Dwolla/dwolla-v2-python (Recommended)
																Element:span
																	customer
																Element:span
																	=
																Element:span
																	app_token
																Element:span
																	.
																Element:span
																	post
																Element:span
																	(
																Element:span
																	'
																Element:span
																	%
																Element:span
																	s/funding-sources'
																Element:span
																	%
																Element:span
																	customer_url
																Element:span
																	,
																Element:span
																	request_body
																Element:span
																	)
																Element:span
																	customer
																Element:span
																	.
																Element:span
																	headers
																Element:span
																	[
																Element:span
																	'location'
																Element:span
																	]
																Element:span
																	# => 'https://api-uat.dwolla.com/funding-sources/375c6781-2a17-476c-84f7-db7d2f6ffb31'
																Element:span
																	# Using dwollaswagger - https://github.com/Dwolla/dwolla-swagger-python
																Element:span
																	funding_api
																Element:span
																	=
																Element:span
																	dwollaswagger
																Element:span
																	.
																Element:span
																	FundingsourcesApi
																Element:span
																	(
																Element:span
																	client
																Element:span
																	)
																Element:span
																	funding_source
																Element:span
																	=
																Element:span
																	funding_api
																Element:span
																	.
																Element:span
																	create_customer_funding_source
																Element:span
																	(
																Element:span
																	customer_url
																Element:span
																	,
																Element:span
																	body
																Element:span
																	=
																Element:span
																	request_body
																Element:span
																	)
																Element:span
																	funding_source
																Element:span
																	# => 'https://api-uat.dwolla.com/funding-sources/375c6781-2a17-476c-84f7-db7d2f6ffb31'
															Node:
															(type) c
															(layer)5
																Element:pre
																Element:code
																Element:span
																	var
																Element:span
																	customerUrl
																Element:span
																	=
																Element:span
																	'https://api-uat.dwolla.com/customers/AB443D36-3757-44C1-A1B4-29727FB3111C'
																Element:span
																	;
																Element:span
																	var
																Element:span
																	requestBody
																Element:span
																	=
																Element:span
																	{
																Element:span
																	'routingNumber'
																Element:span
																	:
																Element:span
																	'222222226'
																Element:span
																	,
																Element:span
																	'accountNumber'
																Element:span
																	:
																Element:span
																	'123456789'
																Element:span
																	,
																Element:span
																	'type'
																Element:span
																	:
																Element:span
																	'checking'
																Element:span
																	,
																Element:span
																	'name'
																Element:span
																	:
																Element:span
																	'Jane Doe’s Checking'
																Element:span
																	};
																Element:span
																	appToken
																Element:span
																	.
																Element:span
																	post
																Element:span
																	(
																Element:span
																	`
																Element:span
																	$
																Element:span
																	{
																Element:span
																	customerUrl
																Element:span
																	}
																Element:span
																	/funding-sources`, requestBody
																Element:span
																	)
																Element:span
																	.
																Element:span
																	then
																Element:span
																	(
																Element:span
																	res
																Element:span
																	=>
																Element:span
																	res
																Element:span
																	.
																Element:span
																	headers
																Element:span
																	.
																Element:span
																	get
																Element:span
																	(
																Element:span
																	'location'
																Element:span
																	));
																Element:span
																	// => 'https://api-uat.dwolla.com/funding-sources/375c6781-2a17-476c-84f7-db7d2f6ffb31'
															Node:
															(type) c
															(layer)5
																Element:h3
																	Instant account verification (IAV)
															Node:
															(type) c
															(layer)5
																Element:p
																	IAV is a simple and secure process which requires both server-side and client-side interaction. Your server requests a
																Element:a
																	single-use token
																	which is used to represent the Customer that is adding or verifying their bank. The client-side implementation includes the dwolla.js library on the page that is used to render the IAV flow.
															Node:
															(type) c
															(layer)5
																Element:pre
																Element:code
																Element:span
																	<
																Element:span
																	script
																Element:span
																	src
																Element:span
																	=
																Element:span
																	"https://cdn.dwolla.com/1/dwolla.js"
																Element:span
																	><
																Element:span
																	/script
																Element:span
																	>
																Element:span
																	<
																Element:span
																	script
																Element:span
																	type
																Element:span
																	=
																Element:span
																	"text/javascript"
																Element:span
																	>
																Element:span
																	var
																Element:span
																	iavToken
																Element:span
																	=
																Element:span
																	'4adF858jPeQ9RnojMHdqSD2KwsvmhO7Ti7cI5woOiBGCpH5krY'
																Element:span
																	;
																Element:span
																	dwolla
																Element:span
																	.
																Element:span
																	configure
																Element:span
																	(
																Element:span
																	'sandbox'
																Element:span
																	);
																Element:span
																	dwolla
																Element:span
																	.
																Element:span
																	iav
																Element:span
																	.
																Element:span
																	start
																Element:span
																	(
																Element:span
																	iavToken
																Element:span
																	,
																Element:span
																	{
																Element:span
																	container
																Element:span
																	:
																Element:span
																	'iavContainer'
																Element:span
																	},
																Element:span
																	function
																Element:span
																	(
																Element:span
																	err
																Element:span
																	,
																Element:span
																	res
																Element:span
																	)
																Element:span
																	{
																Element:span
																	console
																Element:span
																	.
																Element:span
																	log
																Element:span
																	(
																Element:span
																	'Error: '
																Element:span
																	+
																Element:span
																	JSON
																Element:span
																	.
																Element:span
																	stringify
																Element:span
																	(
																Element:span
																	err
																Element:span
																	)
																Element:span
																	+
																Element:span
																	' -- Response: '
																Element:span
																	+
																Element:span
																	JSON
																Element:span
																	.
																Element:span
																	stringify
																Element:span
																	(
																Element:span
																	res
																Element:span
																	))
																Element:span
																	})
																Element:span
																	<
																Element:span
																	/script
																Element:span
																	>
															Node:
															(type) c
															(layer)5
																Element:h3
																	Generate an IAV token
															Node:
															(type) c
															(layer)5
																Element:p
																	Get a single-use IAV token for a Customer.
															Node:
															(type) c
															(layer)5
																Element:h3
																	HTTP Request
															Node:
															(type) c
															(layer)5
																Element:p
																Element:code
																	POST https://api.dwolla.com/customers/{id}/iav-token
															Node:
															(type) c
															(layer)5
																Element:h3
																	Request parameters
															Node:
															(type) c
															(layer)5
																Element:table
																Element:thead
																Element:tr
																Element:th
																	Parameter
																Element:th
																	Required
																Element:th
																	Type
																Element:th
																	Description
																Element:tbody
																Element:tr
																Element:td
																	id
																Element:td
																	yes
																Element:td
																	string
																Element:td
																	Customer unique identifier.
															Node:
															(type) c
															(layer)5
																Element:h3
																	Errors
															Node:
															(type) c
															(layer)5
																Element:table
																Element:thead
																Element:tr
																Element:th
																	HTTP Status
																Element:th
																	Message
																Element:tbody
																Element:tr
																Element:td
																	404
																Element:td
																	Customer not found.
															Node:
															(type) c
															(layer)5
																Element:h3
																	Request and response
															Node:
															(type) c
															(layer)5
																Element:pre
																Element:code
																	POST /customers/99bfb139-eadd-4cdf-b346-7504f0c16c60/iav-token Content-Type: application/vnd.dwolla.v1.hal+json Accept: application/vnd.dwolla.v1.hal+json Authorization: Bearer pBA9fVDBEyYZCEsLf/wKehyh1RTpzjUj5KzIRfDi0wKTii7DqY HTTP/1.1 200 OK { "_links": { "self": { "href": "https://api-uat.dwolla.com/customers/5b29279d-6359-4c87-a318-e09095532733/iav-token" } }, "token": "4adF858jPeQ9RnojMHdqSD2KwsvmhO7Ti7cI5woOiBGCpH5krY" }
															Node:
															(type) c
															(layer)5
																Element:pre
																Element:code
																Element:span
																	customer_url
																Element:span
																	=
																Element:span
																	'https://api-uat.dwolla.com/customers/06b51d56-7a6c-4535-a0cc-2c0106f56ba6'
																Element:span
																	# Using DwollaV2 - https://github.com/Dwolla/dwolla-v2-ruby (Recommended)
																Element:span
																	customer
																Element:span
																	=
																Element:span
																	app_token
																Element:span
																	.
																Element:span
																	post
																Element:span
																	"
																Element:span
																	#{
																Element:span
																	customer_url
																Element:span
																	}
																Element:span
																	/iav-token"
																Element:span
																	customer
																Element:span
																	.
																Element:span
																	token
																Element:span
																	# => "lr0Ax1zwIpeXXt8sJDiVXjPbwEeGO6QKFWBIaKvnFG0Sm2j7vL"
																Element:span
																	# Using DwollaSwagger - https://github.com/Dwolla/dwolla-swagger-ruby
																Element:span
																	customer
																Element:span
																	=
																Element:span
																	DwollaSwagger
																Element:span
																	::
																Element:span
																	CustomersApi
																Element:span
																	.
																Element:span
																	get_customer_iav_token
																Element:span
																	(
																Element:span
																	customer_url
																Element:span
																	)
																Element:span
																	customer
																Element:span
																	.
																Element:span
																	token
																Element:span
																	# => "lr0Ax1zwIpeXXt8sJDiVXjPbwEeGO6QKFWBIaKvnFG0Sm2j7vL"
															Node:
															(type) c
															(layer)5
																Element:pre
																Element:code
																Element:span
																	// Using dwolla-v2 - https://github.com/Dwolla/dwolla-v2-node
																Element:span
																	var
																Element:span
																	customerUrl
																Element:span
																	=
																Element:span
																	'https://api-uat.dwolla.com/customers/06b51d56-7a6c-4535-a0cc-2c0106f56ba6'
																Element:span
																	;
																Element:span
																	appToken
																Element:span
																	.
																Element:span
																	post
																Element:span
																	(
																Element:span
																	`
																Element:span
																	$
																Element:span
																	{
																Element:span
																	customerUrl
																Element:span
																	}
																Element:span
																	/iav-token`
																Element:span
																	)
																Element:span
																	.
																Element:span
																	then
																Element:span
																	(
																Element:span
																	res
																Element:span
																	=>
																Element:span
																	res
																Element:span
																	.
																Element:span
																	body
																Element:span
																	.
																Element:span
																	token
																Element:span
																	);
																Element:span
																	// => 'lr0Ax1zwIpeXXt8sJDiVXjPbwEeGO6QKFWBIaKvnFG0Sm2j7vL'
															Node:
															(type) c
															(layer)5
																Element:pre
																Element:code
																Element:span
																	customer_url
																Element:span
																	=
																Element:span
																	'http://api.dwolla.com/customers/06b51d56-7a6c-4535-a0cc-2c0106f56ba6'
																Element:span
																	customers_api
																Element:span
																	=
																Element:span
																	dwollaswagger
																Element:span
																	.
																Element:span
																	CustomersApi
																Element:span
																	(
																Element:span
																	client
																Element:span
																	)
																Element:span
																	token
																Element:span
																	=
																Element:span
																	customers_api
																Element:span
																	.
																Element:span
																	get_customer_iav_token
																Element:span
																	(
																Element:span
																	customer_url
																Element:span
																	)
																Element:span
																	print
																Element:span
																	token
																Element:span
																	[
																Element:span
																	'token'
																Element:span
																	]
																Element:span
																	# => 'lr0Ax1zwIpeXXt8sJDiVXjPbwEeGO6QKFWBIaKvnFG0Sm2j7vL'
															Node:
															(type) c
															(layer)5
																Element:pre
																Element:code
																Element:span
																	<?php
																Element:span
																	$customersApi
																Element:span
																	=
																Element:span
																	new
																Element:span
																	DwollaSwagger\CustomersApi
																Element:span
																	(
																Element:span
																	$apiClient
																Element:span
																	);
																Element:span
																	$fsToken
																Element:span
																	=
																Element:span
																	$customersApi
																Element:span
																	->
																Element:span
																	getCustomerIavToken
																Element:span
																	(
																Element:span
																	"https://api-uat.dwolla.com/customers/06b51d56-7a6c-4535-a0cc-2c0106f56ba6"
																Element:span
																	);
																Element:span
																	$fsToken
																Element:span
																	->
																Element:span
																	token
																Element:span
																	;
																Element:span
																	# => "lr0Ax1zwIpeXXt8sJDiVXjPbwEeGO6QKFWBIaKvnFG0Sm2j7vL"
																Element:span
																	?>
															Node:
															(type) c
															(layer)5
																Element:h3
																	Initiate IAV flow
															Node:
															(type) c
															(layer)5
																Element:p
																	Initiate instant account verification for a Customer.
															Node:
															(type) c
															(layer)5
																Element:h4
																	dwolla.js
															Node:
															(type) c
															(layer)5
																Element:p
																Element:code
																	dwolla.js
																	is a JavaScript library that gives you the ability to render the IAV flow within a specified container. Call the function
																Element:code
																	dwolla.iav.start()
																	and pass the following arguments: the container where you want IAV to render, the Customer’s single-use
																Element:a
																	IAV token
																	, and a callback to handle the
																Element:code
																	response
																	or
																Element:code
																	error
																	. This will initiate an HTTP request asking Dwolla to load IAV in the specified container. Once the Customer successfully completes the IAV flow, Dwolla sends a response that includes either an error or a link to the newly created and verified funding source resource.
															Node:
															(type) c
															(layer)5
																Element:h4
																	Usage and configuration
			Node:
			(type) c
			(layer)1
															Node:
															(type) c
															(layer)5
																Element:h5
																	Include dwolla.js
															Node:
															(type) c
															(layer)5
																Element:p
																Element:strong
																	Development version:
																Element:code
																	<script src="https://cdn.dwolla.com/1/dwolla.js"></script>
															Node:
															(type) c
															(layer)5
																Element:p
																Element:strong
																	Production (minified) version:
																Element:code
																	<script src="https://cdn.dwolla.com/1/dwolla.min.js"></script>
			Node:
			(type) c
			(layer)1
															Node:
															(type) c
															(layer)5
																Element:h5
																	Configure dwolla.js
															Node:
															(type) c
															(layer)5
																Element:pre
																Element:code
																Element:span
																	// Sandbox (UAT)
																Element:span
																	dwolla
																Element:span
																	.
																Element:span
																	configure
																Element:span
																	(
																Element:span
																	'sandbox'
																Element:span
																	);
																Element:span
																	// Production
																Element:span
																	dwolla
																Element:span
																	.
																Element:span
																	configure
																Element:span
																	(
																Element:span
																	'prod'
																Element:span
																	);
			Node:
			(type) c
			(layer)1
															Node:
															(type) c
															(layer)5
																Element:h5
																	Example
															Node:
															(type) c
															(layer)5
																Element:pre
																Element:code
																	<head> <script src="https://cdn.dwolla.com/1/dwolla.js"></script> <!-- jQuery is used for example purposes --> <script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script> </head> <div id="controls"> <input type="button" id="start" value="Start"> </div> <div id="iavContainer"></div> <script type="text/javascript"> $('#start').click(function() { var iavToken = '4adF858jPeQ9RnojMHdqSD2KwsvmhO7Ti7cI5woOiBGCpH5krY'; dwolla.configure('sandbox'); dwolla.iav.start(iavToken, { container: 'iavContainer', stylesheets: [ 'http://fonts.googleapis.com/css?family=Lato&subset=latin,latin-ext', 'http://myapp.com/iav/customStylesheet.css' ], microDeposits: false, fallbackToMicroDeposits: true }, function(err, res) { console.log('Error: ' + JSON.stringify(err) + ' -- Response: ' + JSON.stringify(res)); }); }); </script>
															Node:
															(type) c
															(layer)5
																Element:h3
																	Response:
															Node:
															(type) c
															(layer)5
																Element:pre
																Element:code
																Element:span
																	{
																Element:span
																Element:span
																	"_links"
																Element:span
																	:
																Element:span
																Element:span
																	{
																Element:span
																Element:span
																	"funding-source"
																Element:span
																	:
																Element:span
																Element:span
																	{
																Element:span
																Element:span
																	"href"
																Element:span
																	:
																Element:span
																Element:span
																	"https://api.dwolla.com/funding-sources/3daf2382-e0e4-444a-863e-544239a261e3"
																Element:span
																Element:span
																	}
																Element:span
																Element:span
																	}
																Element:span
																Element:span
																	}
																Element:span
															Node:
															(type) c
															(layer)5
																Element:h3
																	Errors
															Node:
															(type) c
															(layer)5
																Element:table
																Element:thead
																Element:tr
																Element:th
																	Code
																Element:th
																	Message
																Element:tbody
																Element:tr
																Element:td
																	UnexpectedPage
																Element:td
																	IAV navigated to an unexpected page and was cancelled.
																Element:tr
																Element:td
																	InvalidIavToken
																Element:td
																	Invalid IAV token.
																Element:tr
																Element:td
																	UnsupportedBank
																Element:td
																	The customer’s bank is not supported by the IAV flow.
																Element:tr
																Element:td
																	RateLimitReached
																Element:td
																	The customer exceeded the max # of IAV attempts.
															Node:
															(type) c
															(layer)5
																Element:h2
																	List funding sources for a customer
															Node:
															(type) c
															(layer)5
																Element:p
																	Retrieve a list of funding sources that belong to a Customer. By default, all funding sources are returned unless the
																Element:code
																	removed
																	querystring parameter is set to
																Element:code
																	false
																	in the request.
															Node:
															(type) c
															(layer)5
																Element:h3
																	HTTP request
															Node:
															(type) c
															(layer)5
																Element:p
																Element:code
																	GET https://api.dwolla.com/customers/{id}/funding-sources
															Node:
															(type) c
															(layer)5
																Element:h3
																	Request parameters
															Node:
															(type) c
															(layer)5
																Element:table
																Element:thead
																Element:tr
																Element:th
																	Parameter
																Element:th
																	Required
																Element:th
																	Type
																Element:th
																	Description
																Element:tbody
																Element:tr
																Element:td
																	id
																Element:td
																	yes
																Element:td
																	string
																Element:td
																	Customer’s unique identifier.
																Element:tr
																Element:td
																	removed
																Element:td
																	no
																Element:td
																	string
																Element:td
																	Filter removed funding sources. Defaults to
																Element:code
																	true
																	. Set to
																Element:code
																	false
																	to filter out removed funding sources from list (i.e. - /customers/{id}/funding-sources?removed=false).
															Node:
															(type) c
															(layer)5
																Element:h3
																	Errors
															Node:
															(type) c
															(layer)5
																Element:table
																Element:thead
																Element:tr
																Element:th
																	HTTP Status
																Element:th
																	Message
																Element:tbody
																Element:tr
																Element:td
																	403
																Element:td
																	Not authorized to list funding sources.
																Element:tr
																Element:td
																	404
																Element:td
																	Customer not found.
															Node:
															(type) c
															(layer)5
																Element:h3
																	Request and response
															Node:
															(type) c
															(layer)5
																Element:pre
																Element:code
																	GET https://api.dwolla.com/customers/5b29279d-6359-4c87-a318-e09095532733/funding-sources Accept: application/vnd.dwolla.v1.hal+json Authorization: Bearer pBA9fVDBEyYZCEsLf/wKehyh1RTpzjUj5KzIRfDi0wKTii7DqY ... { "_links": { "self": { "href": "https://api.dwolla.com/customers/5b29279d-6359-4c87-a318-e09095532733/funding-sources" }, "customer": { "href": "https://api.dwolla.com/customers/5b29279d-6359-4c87-a318-e09095532733" } }, "_embedded": { "funding-sources": [ { "_links": { "self": { "href": "https://api.dwolla.com/funding-sources/ab9cd5de-9435-47af-96fb-8d2fa5db51e8" }, "customer": { "href": "https://api.dwolla.com/customers/5b29279d-6359-4c87-a318-e09095532733" }, "with-available-balance": { "href": "https://api.dwolla.com/funding-sources/ab9cd5de-9435-47af-96fb-8d2fa5db51e8" } }, "id": "ab9cd5de-9435-47af-96fb-8d2fa5db51e8", "status": "verified", "type": "balance", "name": "Balance", "created": "2015-10-02T21:00:28.153Z" }, { "_links": { "self": { "href": "https://api.dwolla.com/funding-sources/98c209d3-02d6-4bee-bc0f-61e18acf0e33" }, "customer": { "href": "https://api.dwolla.com/customers/5b29279d-6359-4c87-a318-e09095532733" } }, "id": "98c209d3-02d6-4bee-bc0f-61e18acf0e33", "status": "verified", "type": "bank", "name": "Jane Doe’s Checking", "created": "2015-10-02T22:03:45.537Z" } ] } }
															Node:
															(type) c
															(layer)5
																Element:pre
																Element:code
																Element:span
																	customer_url
																Element:span
																	=
																Element:span
																	'https://api.dwolla.com/customers/5b29279d-6359-4c87-a318-e09095532733'
																Element:span
																	# Using DwollaV2 - https://github.com/Dwolla/dwolla-v2-ruby (Recommended)
																Element:span
																	funding_sources
																Element:span
																	=
																Element:span
																	app_token
																Element:span
																	.
																Element:span
																	get
																Element:span
																	"
																Element:span
																	#{
																Element:span
																	customer
																Element:span
																	}
																Element:span
																	/funding-sources"
																Element:span
																	funding_sources
																Element:span
																	.
																Element:span
																	_embedded
																Element:span
																	[
																Element:span
																	'funding-sources'
																Element:span
																	][
																Element:span
																	0
																Element:span
																	].
																Element:span
																	name
																Element:span
																	# => "Jane Doe’s Checking"
																Element:span
																	# Using DwollaSwagger - https://github.com/Dwolla/dwolla-swagger-ruby
																Element:span
																	funding_sources
																Element:span
																	=
																Element:span
																	DwollaSwagger
																Element:span
																	::
																Element:span
																	FundingsourcesApi
																Element:span
																	.
																Element:span
																	get_customer_funding_sources
																Element:span
																	(
																Element:span
																	customer_url
																Element:span
																	)
																Element:span
																	funding_sources
																Element:span
																	.
																Element:span
																	_embedded
																Element:span
																	[
																Element:span
																	:'funding-sources'
																Element:span
																	][
																Element:span
																	0
																Element:span
																	][
																Element:span
																	:name
																Element:span
																	]
																Element:span
																	# => "Jane Doe’s Checking"
															Node:
															(type) c
															(layer)5
																Element:pre
																Element:code
																Element:span
																	<?php
																Element:span
																	$customerUrl
																Element:span
																	=
																Element:span
																	'https://api.dwolla.com/customers/5b29279d-6359-4c87-a318-e09095532733'
																Element:span
																	;
																Element:span
																	$fsApi
																Element:span
																	=
																Element:span
																	new
																Element:span
																	DwollaSwagger\FundingsourcesApi
																Element:span
																	(
																Element:span
																	$apiClient
																Element:span
																	);
																Element:span
																	$fundingSources
																Element:span
																	=
																Element:span
																	$fsApi
																Element:span
																	->
																Element:span
																	getCustomerFundingSources
																Element:span
																	(
																Element:span
																	$customerUrl
																Element:span
																	);
																Element:span
																	$fundingSources
																Element:span
																	->
																Element:span
																	_embedded
																Element:span
																	->
																Element:span
																	{
																Element:span
																	'funding-sources'
																Element:span
																	}[
																Element:span
																	0
																Element:span
																	]
																Element:span
																	->
																Element:span
																	name
																Element:span
																	;
																Element:span
																	# => "Jane Doe’s Checking"
																Element:span
																	?>
															Node:
															(type) c
															(layer)5
																Element:pre
																Element:code
																Element:span
																	customer_url
																Element:span
																	=
																Element:span
																	'https://api.dwolla.com/customers/5b29279d-6359-4c87-a318-e09095532733'
																Element:span
																	# Using dwollav2 - https://github.com/Dwolla/dwolla-v2-python (Recommended)
																Element:span
																	funding_sources
																Element:span
																	=
																Element:span
																	app_token
																Element:span
																	.
																Element:span
																	get
																Element:span
																	(
																Element:span
																	'
																Element:span
																	%
																Element:span
																	s/funding-sources'
																Element:span
																	%
																Element:span
																	customer_url
																Element:span
																	)
																Element:span
																	funding_sources
																Element:span
																	.
																Element:span
																	body
																Element:span
																	[
																Element:span
																	'_embedded'
																Element:span
																	][
																Element:span
																	'funding-sources'
																Element:span
																	][
																Element:span
																	0
																Element:span
																	][
																Element:span
																	'name'
																Element:span
																	]
																Element:span
																	# => 'Jane Doe’s Checking'
																Element:span
																	# Using dwollaswagger - https://github.com/Dwolla/dwolla-swagger-python
																Element:span
																	fs_api
																Element:span
																	=
																Element:span
																	dwollaswagger
																Element:span
																	.
																Element:span
																	FundingsourcesApi
																Element:span
																	(
																Element:span
																	client
																Element:span
																	)
																Element:span
																	funding_sources
																Element:span
																	=
																Element:span
																	fs_api
																Element:span
																	.
																Element:span
																	get_customer_funding_sources
																Element:span
																	(
																Element:span
																	customer_url
																Element:span
																	)
																Element:span
																	funding_sources
																Element:span
																	.
																Element:span
																	_embedded
																Element:span
																	[
																Element:span
																	'funding-sources'
																Element:span
																	][
																Element:span
																	0
																Element:span
																	][
																Element:span
																	'name'
																Element:span
																	]
																Element:span
																	# => 'Jane Doe’s Checking'
															Node:
															(type) c
															(layer)5
																Element:pre
																Element:code
																Element:span
																	var
																Element:span
																	customerUrl
																Element:span
																	=
																Element:span
																	'https://api.dwolla.com/customers/5b29279d-6359-4c87-a318-e09095532733'
																Element:span
																	;
																Element:span
																	appToken
																Element:span
																	.
																Element:span
																	get
																Element:span
																	(
																Element:span
																	`
																Element:span
																	$
																Element:span
																	{
																Element:span
																	customerUrl
																Element:span
																	}
																Element:span
																	/funding-sources`
																Element:span
																	)
																Element:span
																	.
																Element:span
																	then
																Element:span
																	(
																Element:span
																	res
																Element:span
																	=>
																Element:span
																	res
																Element:span
																	.
																Element:span
																	body
																Element:span
																	.
																Element:span
																	_embedded
																Element:span
																	[
																Element:span
																	'funding-sources'
																Element:span
																	][
																Element:span
																	0
																Element:span
																	].
																Element:span
																	name
																Element:span
																	);
																Element:span
																	// => 'Jane Doe’s Checking'
															Node:
															(type) c
															(layer)5
																Element:h2
																	List and search transfers for a customer
															Node:
															(type) c
															(layer)5
																Element:p
																	This section details how to retrieve a Customer’s list of transfers. Transaction search is supported by passing in optional querystring parameters such as:
																Element:code
																	search
																	which represents a term to search on,
																Element:code
																	startAmount
																	,
																Element:code
																	endAmount
																	,
																Element:code
																	startDate
																	, and
																Element:code
																	endDate
																	.
															Node:
															(type) c
															(layer)5
																Element:h3
																	HTTP request
															Node:
															(type) c
															(layer)5
																Element:p
																Element:code
																	GET https://api.dwolla.com/customers/{id}/transfers
															Node:
															(type) c
															(layer)5
																Element:h3
																	Request parameters
															Node:
															(type) c
															(layer)5
																Element:table
																Element:thead
																Element:tr
																Element:th
																	Parameter
																Element:th
																	Required
																Element:th
																	Type
																Element:th
																	Description
																Element:tbody
																Element:tr
																Element:td
																	id
																Element:td
																	yes
																Element:td
																	string
																Element:td
																	Customer unique identifier to get transfers for.
																Element:tr
																Element:td
																	search
																Element:td
																	no
																Element:td
																	string
																Element:td
																	A string to be matched with
																Element:code
																	firstName
																	,
																Element:code
																	lastName
																	,
																Element:code
																	email
																	,
																Element:code
																	businessName
																	, Customer Id, and Account Id. (
																Element:code
																	/transfers?search=Doe
																	)
																Element:tr
																Element:td
																	startAmount
																Element:td
																	no
																Element:td
																	string
																Element:td
																	Only include transactions with an amount equal to or greater than
																Element:code
																	startAmount
																	. Can optionally be used with
																Element:code
																	endAmount
																	to specify an amount range.
																Element:tr
																Element:td
																	endAmount
																Element:td
																	no
																Element:td
																	string
																Element:td
																	Only include transactions with an amount equal to or less than
																Element:code
																	endAmount
																	. Can optionally be used with
																Element:code
																	startAmount
																	to specify an amount range.
																Element:tr
																Element:td
																	startDate
																Element:td
																	no
																Element:td
																	string
																Element:td
																	Only include transactions created after this date. ISO-8601 format:
																Element:code
																	YYYY-MM-DD
																	. Can optionally be used with
																Element:code
																	endDate
																	to specify a date range.
																Element:tr
																Element:td
																	endDate
																Element:td
																	no
																Element:td
																	string
																Element:td
																	Only include transactions created before than this date. ISO-8601 format:
																Element:code
																	YYYY-MM-DD
																	. Can optionally be used with
																Element:code
																	startDate
																	to specify a date range.
																Element:tr
																Element:td
																	status
																Element:td
																	no
																Element:td
																	string
																Element:td
																	Filter results on transaction status. Possible values:
																Element:code
																	pending
																	,
																Element:code
																	processed
																	,
																Element:code
																	failed
																	, or
																Element:code
																	cancelled
																	.
																Element:tr
																Element:td
																	limit
																Element:td
																	no
																Element:td
																	integer
																Element:td
																	Number of search results to return. Defaults to 25.
																Element:tr
																Element:td
																	offset
																Element:td
																	no
																Element:td
																	integer
																Element:td
																	Number of search results to skip. Used for pagination.
															Node:
															(type) c
															(layer)5
																Element:h3
																	Errors
															Node:
															(type) c
															(layer)5
																Element:table
																Element:thead
																Element:tr
																Element:th
																	HTTP Status
																Element:th
																	Message
																Element:tbody
																Element:tr
																Element:td
																	403
																Element:td
																	Not authorized to list transfers.
																Element:tr
																Element:td
																	404
																Element:td
																	Customer not found.
															Node:
															(type) c
															(layer)5
																Element:h3
																	Request and response
															Node:
															(type) c
															(layer)5
																Element:pre
																Element:code
																	GET http://api.dwolla.com/customers/01B47CB2-52AC-42A7-926C-6F1F50B1F271/transfers Accept: application/vnd.dwolla.v1.hal+json Authorization: Bearer pBA9fVDBEyYZCEsLf/wKehyh1RTpzjUj5KzIRfDi0wKTii7DqY ... { "_links": { "first": { "href": "https://api.dwolla.com/customers/01b47cb2-52ac-42a7-926c-6f1f50b1f271/transfers?limit=25&offset=0" }, "last": { "href": "https://api.dwolla.com/customers/01b47cb2-52ac-42a7-926c-6f1f50b1f271/transfers?limit=25&offset=0" }, "self": { "href": "http://api.dwolla.com/customers/01B47CB2-52AC-42A7-926C-6F1F50B1F271/transfers" } }, "_embedded": { "transfers": [ { "_links": { "self": { "href": "https://api.dwolla.com/transfers/4C8AD8B8-3D69-E511-80DB-0AA34A9B2388" }, "source": { "href": "https://api.dwolla.com/accounts/ca32853c-48fa-40be-ae75-77b37504581b" }, "destination": { "href": "https://api.dwolla.com/customers/01B47CB2-52AC-42A7-926C-6F1F50B1F271" } }, "id": "4C8AD8B8-3D69-E511-80DB-0AA34A9B2388", "status": "pending", "amount": { "value": "225.00", "currency": "USD" }, "created": "2015-10-02T19:42:32.950Z", "metadata": { "foo": "bar", "baz": "foo" } }, { "_links": { "self": { "href": "https://api.dwolla.com/transfers/9DC99076-3D69-E511-80DB-0AA34A9B2388" }, "source": { "href": "https://api.dwolla.com/accounts/ca32853c-48fa-40be-ae75-77b37504581b" }, "destination": { "href": "https://api.dwolla.com/customers/01B47CB2-52AC-42A7-926C-6F1F50B1F271" } }, "id": "9DC99076-3D69-E511-80DB-0AA34A9B2388", "status": "pending", "amount": { "value": "225.00", "currency": "USD" }, "created": "2015-10-02T19:40:41.437Z", "metadata": { "foo": "bar", "baz": "foo" } } ] }, "total": 2 }
															Node:
															(type) c
															(layer)5
																Element:pre
																Element:code
																Element:span
																	customer_url
																Element:span
																	=
																Element:span
																	'http://api.dwolla.com/customers/01B47CB2-52AC-42A7-926C-6F1F50B1F271'
																Element:span
																	# Using DwollaV2 - https://github.com/Dwolla/dwolla-v2-ruby (Recommended)
																Element:span
																	transfers
																Element:span
																	=
																Element:span
																	app_token
																Element:span
																	.
																Element:span
																	get
																Element:span
																	"
																Element:span
																	#{
																Element:span
																	customer_url
																Element:span
																	}
																Element:span
																	/transfers"
																Element:span
																	transfers
																Element:span
																	.
																Element:span
																	_embedded
																Element:span
																	.
																Element:span
																	transfers
																Element:span
																	[
																Element:span
																	0
																Element:span
																	].
																Element:span
																	status
																Element:span
																	# => "pending"
																Element:span
																	# Using DwollaSwagger - https://github.com/Dwolla/dwolla-swagger-ruby
																Element:span
																	transfers
																Element:span
																	=
																Element:span
																	DwollaSwagger
																Element:span
																	::
																Element:span
																	TransfersApi
																Element:span
																	.
																Element:span
																	get_customer_transfers
																Element:span
																	(
																Element:span
																	customer_url
																Element:span
																	)
																Element:span
																	transfers
																Element:span
																	.
																Element:span
																	_embedded
																Element:span
																	[
																Element:span
																	:transfers
																Element:span
																	][
																Element:span
																	0
																Element:span
																	][
																Element:span
																	:status
																Element:span
																	]
																Element:span
																	# => "pending"
															Node:
															(type) c
															(layer)5
																Element:pre
																Element:code
																Element:span
																	<?php
																Element:span
																	$customerUrl
																Element:span
																	=
																Element:span
																	'http://api.dwolla.com/customers/01B47CB2-52AC-42A7-926C-6F1F50B1F271'
																Element:span
																	;
																Element:span
																	$TransfersApi
																Element:span
																	=
																Element:span
																	new
																Element:span
																	DwollaSwagger\TransfersApi
																Element:span
																	(
																Element:span
																	$apiClient
																Element:span
																	);
																Element:span
																	$transfers
																Element:span
																	=
																Element:span
																	$TransfersApi
																Element:span
																	->
																Element:span
																	getCustomerTransfers
																Element:span
																	(
																Element:span
																	$customerUrl
																Element:span
																	);
																Element:span
																	$transfers
																Element:span
																	->
																Element:span
																	_embedded
																Element:span
																	->
																Element:span
																	transfers
																Element:span
																	[
																Element:span
																	0
																Element:span
																	]
																Element:span
																	->
																Element:span
																	status
																Element:span
																	;
																Element:span
																	# => "pending"
																Element:span
																	?>
															Node:
															(type) c
															(layer)5
																Element:pre
																Element:code
																Element:span
																	customer_url
																Element:span
																	=
																Element:span
																	'http://api.dwolla.com/customers/01B47CB2-52AC-42A7-926C-6F1F50B1F271'
																Element:span
																	# Using dwollav2 - https://github.com/Dwolla/dwolla-v2-python (Recommended)
																Element:span
																	transfers
																Element:span
																	=
																Element:span
																	app_token
																Element:span
																	.
																Element:span
																	get
																Element:span
																	(
																Element:span
																	'
																Element:span
																	%
																Element:span
																	s/transfers'
																Element:span
																	%
																Element:span
																	customer_url
																Element:span
																	)
																Element:span
																	transfers
																Element:span
																	.
																Element:span
																	body
																Element:span
																	[
																Element:span
																	'_embedded'
																Element:span
																	][
																Element:span
																	'transfers'
																Element:span
																	][
																Element:span
																	0
																Element:span
																	][
																Element:span
																	'status'
																Element:span
																	]
																Element:span
																	# => 'pending'
																Element:span
																	# Using dwollaswagger - https://github.com/Dwolla/dwolla-swagger-python
																Element:span
																	transfers_api
																Element:span
																	=
																Element:span
																	dwollaswagger
																Element:span
																	.
																Element:span
																	TransfersApi
																Element:span
																	(
																Element:span
																	client
																Element:span
																	)
																Element:span
																	transfers
																Element:span
																	=
																Element:span
																	transfers_api
																Element:span
																	.
																Element:span
																	get_customer_transfers
																Element:span
																	(
																Element:span
																	customer_url
																Element:span
																	)
																Element:span
																	transfers
																Element:span
																	.
																Element:span
																	_embedded
																Element:span
																	[
																Element:span
																	'transfers'
																Element:span
																	][
																Element:span
																	0
																Element:span
																	][
																Element:span
																	'status'
																Element:span
																	]
																Element:span
																	# => 'pending'
															Node:
															(type) c
															(layer)5
																Element:pre
																Element:code
																Element:span
																	var
																Element:span
																	customerUrl
																Element:span
																	=
																Element:span
																	'http://api.dwolla.com/customers/01B47CB2-52AC-42A7-926C-6F1F50B1F271'
																Element:span
																	;
																Element:span
																	appToken
																Element:span
																	.
																Element:span
																	get
																Element:span
																	(
																Element:span
																	`
																Element:span
																	$
																Element:span
																	{
																Element:span
																	customerUrl
																Element:span
																	}
																Element:span
																	/transfers`
																Element:span
																	)
																Element:span
																	.
																Element:span
																	then
																Element:span
																	(
																Element:span
																	res
																Element:span
																	=>
																Element:span
																	res
																Element:span
																	.
																Element:span
																	body
																Element:span
																	.
																Element:span
																	_embedded
																Element:span
																	.
																Element:span
																	transfers
																Element:span
																	[
																Element:span
																	0
																Element:span
																	].
																Element:span
																	status
																Element:span
																	);
																Element:span
																	// => "pending"
															Node:
															(type) c
															(layer)5
																Element:h2
																	List mass payments for a customer
															Node:
															(type) c
															(layer)5
																Element:p
																	This section covers how to retrieve a
																Element:a
																	verified Customer’s
																	list of previously created mass payments. Mass payments are returned ordered by date created, with most recent mass payments appearing first.
															Node:
															(type) c
															(layer)5
																Element:h3
																	HTTP request
															Node:
															(type) c
															(layer)5
																Element:p
																Element:code
																	GET https://api.dwolla.com/customers/{id}/mass-payments
															Node:
															(type) c
															(layer)5
																Element:h3
																	Request parameters
															Node:
															(type) c
															(layer)5
																Element:table
																Element:thead
																Element:tr
																Element:th
																	Parameter
																Element:th
																	Required
																Element:th
																	Type
																Element:th
																	Description
																Element:tbody
																Element:tr
																Element:td
																	id
																Element:td
																	yes
																Element:td
																	string
																Element:td
																	Customer unique identifier to get mass payments for.
																Element:tr
																Element:td
																	limit
																Element:td
																	no
																Element:td
																	integer
																Element:td
																	How many results to return. Defaults to 25.
																Element:tr
																Element:td
																	offset
																Element:td
																	no
																Element:td
																	integer
																Element:td
																	How many results to skip.
															Node:
															(type) c
															(layer)5
																Element:h3
																	HTTP Status and Error Codes
															Node:
															(type) c
															(layer)5
																Element:table
																Element:thead
																Element:tr
																Element:th
																	HTTP Status
																Element:th
																	Code
																Element:th
																	Description
																Element:tbody
																Element:tr
																Element:td
																	403
																Element:td
																	NotAuthorized
																Element:td
																	Not authorized to list mass payments.
																Element:tr
																Element:td
																	404
																Element:td
																	NotFound
																Element:td
																	Customer not found.
															Node:
															(type) c
															(layer)5
																Element:h3
																	Request and response
															Node:
															(type) c
															(layer)5
																Element:pre
																Element:code
																	GET https://api-uat.dwolla.com/customers/39e21228-5958-4c4f-96fe-48a4bf11332d/mass-payments Accept: application/vnd.dwolla.v1.hal+json Authorization: Bearer pBA9fVDBEyYZCEsLf/wKehyh1RTpzjUj5KzIRfDi0wKTii7DqY .... { "_links": { "self": { "href": "https://api-uat.dwolla.com/customers/39e21228-5958-4c4f-96fe-48a4bf11332d/mass-payments" }, "first": { "href": "https://api-uat.dwolla.com/customers/39e21228-5958-4c4f-96fe-48a4bf11332d/mass-payments?limit=25&offset=0" }, "last": { "href": "https://api-uat.dwolla.com/customers/39e21228-5958-4c4f-96fe-48a4bf11332d/mass-payments?limit=25&offset=0" } }, "_embedded": { "mass-payments": [ { "_links": { "self": { "href": "https://api-uat.dwolla.com/mass-payments/89ca72d2-63bf-4a8f-92ef-a5d00140aefa" }, "source": { "href": "https://api-uat.dwolla.com/funding-sources/e1c972d4-d8d9-4c30-861a-9081dcbaf4ab" }, "items": { "href": "https://api-uat.dwolla.com/mass-payments/89ca72d2-63bf-4a8f-92ef-a5d00140aefa/items" } }, "id": "89ca72d2-63bf-4a8f-92ef-a5d00140aefa", "status": "complete", "created": "2016-03-21T19:27:34.000Z", "metadata": { "masspay1": "masspay1" } } ] }, "total": 1 }
															Node:
															(type) c
															(layer)5
																Element:pre
																Element:code
																Element:span
																	customer_url
																Element:span
																	=
																Element:span
																	'https://api-uat.dwolla.com/customers/ca32853c-48fa-40be-ae75-77b37504581b'
																Element:span
																	# Using DwollaV2 - https://github.com/Dwolla/dwolla-v2-ruby (Recommended)
																Element:span
																	mass_payments
																Element:span
																	=
																Element:span
																	app_token
																Element:span
																	.
																Element:span
																	get
																Element:span
																	"
																Element:span
																	#{
																Element:span
																	customer_url
																Element:span
																	}
																Element:span
																	/mass-payments"
																Element:span
																	,
																Element:span
																	limit:
																Element:span
																	10
																Element:span
																	mass_payments
																Element:span
																	.
																Element:span
																	_embedded
																Element:span
																	[
																Element:span
																	'mass-payments'
																Element:span
																	][
																Element:span
																	0
																Element:span
																	].
																Element:span
																	status
																Element:span
																	# => "complete"
															Node:
															(type) c
															(layer)5
																Element:pre
																Element:code
																	/** * No example for this language yet. Coming soon. **/
															Node:
															(type) c
															(layer)5
																Element:pre
																Element:code
																Element:span
																	customer_url
																Element:span
																	=
																Element:span
																	'https://api-uat.dwolla.com/customers/ca32853c-48fa-40be-ae75-77b37504581b'
																Element:span
																	# Using dwollav2 - https://github.com/Dwolla/dwolla-v2-python (Recommended)
																Element:span
																	mass_payments
																Element:span
																	=
																Element:span
																	app_token
																Element:span
																	.
																Element:span
																	get
																Element:span
																	(
																Element:span
																	'
																Element:span
																	%
																Element:span
																	s/mass-payments'
																Element:span
																	%
																Element:span
																	customer_url
																Element:span
																	)
																Element:span
																	mass_payments
																Element:span
																	.
																Element:span
																	body
																Element:span
																	[
																Element:span
																	'_embedded'
																Element:span
																	][
																Element:span
																	'mass-payments'
																Element:span
																	][
																Element:span
																	0
																Element:span
																	][
																Element:span
																	'status'
																Element:span
																	]
																Element:span
																	# => 'complete'
															Node:
															(type) c
															(layer)5
																Element:pre
																Element:code
																Element:span
																	var
																Element:span
																	customerUrl
																Element:span
																	=
																Element:span
																	'https://api-uat.dwolla.com/customers/ca32853c-48fa-40be-ae75-77b37504581b'
																Element:span
																	;
																Element:span
																	appToken
																Element:span
																	.
																Element:span
																	get
																Element:span
																	(
																Element:span
																	`
																Element:span
																	$
																Element:span
																	{
																Element:span
																	customerUrl
																Element:span
																	}
																Element:span
																	/mass-payments`, { limit: 10 }
																Element:span
																	)
																Element:span
																	.
																Element:span
																	then
																Element:span
																	(
																Element:span
																	res
																Element:span
																	=>
																Element:span
																	res
																Element:span
																	.
																Element:span
																	body
																Element:span
																	.
																Element:span
																	_embedded
																Element:span
																	[
																Element:span
																	'mass-payments'
																Element:span
																	][
																Element:span
																	0
																Element:span
																	].
																Element:span
																	status
																Element:span
																	);
																Element:span
																	// => "complete"
															Node:
															(type) c
															(layer)5
																Element:hr
			Node:
			(type) h1
			(layer)1
				Element:h1
					Documents
			Node:
			(type) c
			(layer)1
				Element:p
					Customers of type
				Element:code
					personal
					or
				Element:code
					business
					and of status
				Element:code
					document
					require photos of identifying documents to be uploaded for manual review in order to be verified. Currently, SDK support for document upload only exists for Ruby, Node.js, and Python. To upload a document using other languages, you must use an external HTTP library.
			Node:
			(type) c
			(layer)1
				Element:p
					For more information on handling the Customer verifiation status of
				Element:code
					document
					, reference our
				Element:a
					Customer verification
					resource article.
			Node:
			(type) c
			(layer)1
				Element:h3
					Document resource
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
					Document unique identifier
				Element:tr
				Element:td
					type
				Element:td
					Either
				Element:code
					passport
					,
				Element:code
					license
					,
				Element:code
					idCard
					, or
				Element:code
					other
					.
				Element:tr
				Element:td
					status
				Element:td
					Either
				Element:code
					pending
					or
				Element:code
					reviewed
					. When a document has been manually reviewed by Dwolla, its status will be
				Element:code
					reviewed
					. A reviewed document does not necessarily indicate that the customer has completed the identity verification process.
				Element:tr
				Element:td
					created
				Element:td
					ISO 8601 Timestamp of document upload time and date.
				Element:tr
				Element:td
					failureReason
				Element:td
					The reason an uploaded document was rejected. Can be:
				Element:code
					ScanNotReadable
					,
				Element:code
					ScanNotUploaded
					,
				Element:code
					ScanIdTypeNotSupported
					,
				Element:code
					ScanNameMismatch
					,
				Element:code
					ScanFailedOther
					, or
				Element:code
					FailedOther
					.
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"_links"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"self"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"href"
				Element:span
					:
				Element:span
				Element:span
					"https://api.dwolla.com/documents/56502f7a-fa59-4a2f-8579-0f8bc9d7b9cc"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"56502f7a-fa59-4a2f-8579-0f8bc9d7b9cc"
				Element:span
					,
				Element:span
				Element:span
					"status"
				Element:span
					:
				Element:span
				Element:span
					"pending"
				Element:span
					,
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"passport"
				Element:span
					,
				Element:span
				Element:span
					"created"
				Element:span
					:
				Element:span
				Element:span
					"2015-09-29T21:42:16.000Z"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h2
					Create a document
			Node:
			(type) c
			(layer)1
				Element:p
					Create a document for a Customer pending verification by uploading a photo of the document. This requires a multipart form-data POST request. The file must be either a
				Element:code
					.jpg
					,
				Element:code
					.jpeg
					,
				Element:code
					.png
					,
				Element:code
					.tif
					, or
				Element:code
					.pdf
					up to 10MB in size.
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP request
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Form Field
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					documentType
				Element:td
					One of
				Element:code
					passport
					,
				Element:code
					license
					,
				Element:code
					idCard
					, or
				Element:code
					other
				Element:tr
				Element:td
					file
				Element:td
					File contents.
			Node:
			(type) c
			(layer)1
				Element:h3
					Request and response
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -X POST \ -H "Authorization: Bearer tJlyMNW6e3QVbzHjeJ9JvAPsRglFjwnba4NdfCzsYJm7XbckcR" \ -H "Accept: application/vnd.dwolla.v1.hal+json" \ -H "Cache-Control: no-cache" \ -H "Content-Type: multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW" \ -F "documentType=passport" \ -F "file=@foo.png" \ 'https://api.dwolla.com/customers/1DE32EC7-FF0B-4C0C-9F09-19629E6788CE/documents' ... HTTP/1.1 201 Created Location: https://api.dwolla.com/documents/11fe0bab-39bd-42ee-bb39-275afcc050d0
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					customer_url
				Element:span
					=
				Element:span
					'https://api.dwolla.com/customers/1DE32EC7-FF0B-4C0C-9F09-19629E6788CE'
				Element:span
					file
				Element:span
					=
				Element:span
					Faraday
				Element:span
					::
				Element:span
					UploadIO
				Element:span
					.
				Element:span
					new
				Element:span
					(
				Element:span
					'mclovin.jpg'
				Element:span
					,
				Element:span
					'image/jpeg'
				Element:span
					)
				Element:span
					document
				Element:span
					=
				Element:span
					app_token
				Element:span
					.
				Element:span
					post
				Element:span
					"
				Element:span
					#{
				Element:span
					customer_url
				Element:span
					}
				Element:span
					/documents"
				Element:span
					,
				Element:span
					file:
				Element:span
					file
				Element:span
					,
				Element:span
					documentType:
				Element:span
					'license'
				Element:span
					document
				Element:span
					.
				Element:span
					headers
				Element:span
					[
				Element:span
					:location
				Element:span
					]
				Element:span
					# => "https://api.dwolla.com/documents/fb919e0b-ffbe-4268-b1e2-947b44328a16"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					customer_url
				Element:span
					=
				Element:span
					'https://api.dwolla.com/customers/1DE32EC7-FF0B-4C0C-9F09-19629E6788CE'
				Element:span
					# Using dwollav2 - https://github.com/Dwolla/dwolla-v2-python (Recommended)
				Element:span
					document
				Element:span
					=
				Element:span
					app_token
				Element:span
					.
				Element:span
					post
				Element:span
					(
				Element:span
					'
				Element:span
					%
				Element:span
					s/documents'
				Element:span
					%
				Element:span
					customer_url
				Element:span
					,
				Element:span
					file
				Element:span
					=
				Element:span
					open
				Element:span
					(
				Element:span
					'mclovin.jpg'
				Element:span
					,
				Element:span
					'rb'
				Element:span
					),
				Element:span
					documentType
				Element:span
					=
				Element:span
					'license'
				Element:span
					)
				Element:span
					document
				Element:span
					.
				Element:span
					headers
				Element:span
					[
				Element:span
					'location'
				Element:span
					]
				Element:span
					# => 'https://api.dwolla.com/documents/fb919e0b-ffbe-4268-b1e2-947b44328a16'
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					/** * No example for this language yet. **/
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					var
				Element:span
					customerUrl
				Element:span
					=
				Element:span
					'https://api.dwolla.com/customers/1DE32EC7-FF0B-4C0C-9F09-19629E6788CE'
				Element:span
					;
				Element:span
					var
				Element:span
					requestBody
				Element:span
					=
				Element:span
					new
				Element:span
					FormData
				Element:span
					();
				Element:span
					body
				Element:span
					.
				Element:span
					append
				Element:span
					(
				Element:span
					'file'
				Element:span
					,
				Element:span
					fs
				Element:span
					.
				Element:span
					createReadStream
				Element:span
					(
				Element:span
					'mclovin.jpg'
				Element:span
					),
				Element:span
					{
				Element:span
					filename
				Element:span
					:
				Element:span
					'mclovin.jpg'
				Element:span
					,
				Element:span
					contentType
				Element:span
					:
				Element:span
					'image/jpeg'
				Element:span
					,
				Element:span
					knownLength
				Element:span
					:
				Element:span
					fs
				Element:span
					.
				Element:span
					statSync
				Element:span
					(
				Element:span
					'mclovin.jpg'
				Element:span
					).
				Element:span
					size
				Element:span
					});
				Element:span
					body
				Element:span
					.
				Element:span
					append
				Element:span
					(
				Element:span
					'documentType'
				Element:span
					,
				Element:span
					'license'
				Element:span
					);
				Element:span
					appToken
				Element:span
					.
				Element:span
					post
				Element:span
					(
				Element:span
					`
				Element:span
					$
				Element:span
					{
				Element:span
					customerUrl
				Element:span
					}
				Element:span
					/documents`, requestBody
				Element:span
					)
				Element:span
					.
				Element:span
					then
				Element:span
					(
				Element:span
					res
				Element:span
					=>
				Element:span
					res
				Element:span
					.
				Element:span
					headers
				Element:span
					.
				Element:span
					get
				Element:span
					(
				Element:span
					'location'
				Element:span
					));
				Element:span
					// => "https://api.dwolla.com/documents/fb919e0b-ffbe-4268-b1e2-947b44328a16"
			Node:
			(type) c
			(layer)1
				Element:h2
					List documents
			Node:
			(type) c
			(layer)1
				Element:p
					This section contains information on how to retrieve a list of documents that belong to a Customer.
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET https://api.dwolla.com/customers/{id}/documents
			Node:
			(type) c
			(layer)1
				Element:h3
					Request parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Required
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
					yes
				Element:td
					string
				Element:td
					Customer unique identifier.
			Node:
			(type) c
			(layer)1
				Element:h3
					Request and response
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					GET https://api.dwolla.com/customers/176878b8-ecdb-469b-a82b-43ba5e8704b2/documents Accept: application/vnd.dwolla.v1.hal+json Authorization: Bearer pBA9fVDBEyYZCEsLf/wKehyh1RTpzjUj5KzIRfDi0wKTii7DqY ... { "_links": { "self": { "href": "https://api.dwolla.com/customers/176878b8-ecdb-469b-a82b-43ba5e8704b2/documents" } }, "_embedded": { "documents": [ { "_links": { "self": { "href": "https://api.dwolla.com/documents/56502f7a-fa59-4a2f-8579-0f8bc9d7b9cc" } }, "id": "56502f7a-fa59-4a2f-8579-0f8bc9d7b9cc", "status": "pending", "type": "passport", "created": "2015-09-29T21:42:16.000Z" }, { "_links": { "self": { "href": "https://api.dwolla.com/documents/11fe0bab-39bd-42ee-bb39-275afcc050d0" } }, "id": "11fe0bab-39bd-42ee-bb39-275afcc050d0", "status": "pending", "type": "passport", "created": "2015-09-29T21:45:37.000Z" } ] }, "total": 2 }
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					customer_url
				Element:span
					=
				Element:span
					'https://api.dwolla.com/customers/176878b8-ecdb-469b-a82b-43ba5e8704b2'
				Element:span
					# Using DwollaV2 - https://github.com/Dwolla/dwolla-v2-ruby (Recommended)
				Element:span
					documents
				Element:span
					=
				Element:span
					token
				Element:span
					.
				Element:span
					get
				Element:span
					"
				Element:span
					#{
				Element:span
					customer_url
				Element:span
					}
				Element:span
					/documents"
				Element:span
					documents
				Element:span
					.
				Element:span
					_embedded
				Element:span
					.
				Element:span
					documents
				Element:span
					[
				Element:span
					0
				Element:span
					].
				Element:span
					id
				Element:span
					# => "56502f7a-fa59-4a2f-8579-0f8bc9d7b9cc"
				Element:span
					# Using DwollaSwagger - https://github.com/Dwolla/dwolla-swagger-ruby
				Element:span
					documents
				Element:span
					=
				Element:span
					DwollaSwagger
				Element:span
					::
				Element:span
					CustomersApi
				Element:span
					.
				Element:span
					get_customer_documents
				Element:span
					(
				Element:span
					customer_url
				Element:span
					)
				Element:span
					documents
				Element:span
					.
				Element:span
					_embedded
				Element:span
					[
				Element:span
					:documents
				Element:span
					][
				Element:span
					0
				Element:span
					][
				Element:span
					:id
				Element:span
					]
				Element:span
					# => "56502f7a-fa59-4a2f-8579-0f8bc9d7b9cc"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					<?php
				Element:span
					$customerUrl
				Element:span
					=
				Element:span
					'https://api.dwolla.com/customers/176878b8-ecdb-469b-a82b-43ba5e8704b2'
				Element:span
					;
				Element:span
					$customersApi
				Element:span
					=
				Element:span
					new
				Element:span
					DwollaSwagger\CustomersApi
				Element:span
					(
				Element:span
					$apiClient
				Element:span
					);
				Element:span
					$customer
				Element:span
					=
				Element:span
					$customersApi
				Element:span
					->
				Element:span
					getCustomerDocuments
				Element:span
					(
				Element:span
					$customerUrl
				Element:span
					);
				Element:span
					$customer
				Element:span
					->
				Element:span
					total
				Element:span
					;
				Element:span
					# => 2
				Element:span
					?>
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					customer_url
				Element:span
					=
				Element:span
					'https://api.dwolla.com/customers/176878b8-ecdb-469b-a82b-43ba5e8704b2'
				Element:span
					# Using dwollav2 - https://github.com/Dwolla/dwolla-v2-python (Recommended)
				Element:span
					documents
				Element:span
					=
				Element:span
					app_token
				Element:span
					.
				Element:span
					get
				Element:span
					(
				Element:span
					'
				Element:span
					%
				Element:span
					s/documents'
				Element:span
					%
				Element:span
					customer_url
				Element:span
					)
				Element:span
					documents
				Element:span
					.
				Element:span
					body
				Element:span
					[
				Element:span
					'total'
				Element:span
					]
				Element:span
					# => 2
				Element:span
					# Using dwollaswagger - https://github.com/Dwolla/dwolla-swagger-python
				Element:span
					customers_api
				Element:span
					=
				Element:span
					dwollaswagger
				Element:span
					.
				Element:span
					CustomersApi
				Element:span
					(
				Element:span
					client
				Element:span
					)
				Element:span
					documents
				Element:span
					=
				Element:span
					customers_api
				Element:span
					.
				Element:span
					get_customer_documents
				Element:span
					(
				Element:span
					customer_url
				Element:span
					)
				Element:span
					documents
				Element:span
					.
				Element:span
					total
				Element:span
					# => 2
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					var
				Element:span
					customerUrl
				Element:span
					=
				Element:span
					'https://api.dwolla.com/customers/176878b8-ecdb-469b-a82b-43ba5e8704b2'
				Element:span
					;
				Element:span
					token
				Element:span
					.
				Element:span
					get
				Element:span
					(
				Element:span
					`
				Element:span
					$
				Element:span
					{
				Element:span
					customerUrl
				Element:span
					}
				Element:span
					/documents`
				Element:span
					)
				Element:span
					.
				Element:span
					then
				Element:span
					(
				Element:span
					res
				Element:span
					=>
				Element:span
					res
				Element:span
					.
				Element:span
					body
				Element:span
					.
				Element:span
					_embedded
				Element:span
					.
				Element:span
					documents
				Element:span
					[
				Element:span
					0
				Element:span
					].
				Element:span
					id
				Element:span
					);
				Element:span
					// => '56502f7a-fa59-4a2f-8579-0f8bc9d7b9cc'
			Node:
			(type) c
			(layer)1
				Element:h2
					Retrieve a document
			Node:
			(type) c
			(layer)1
				Element:p
					This section contains information on how to retrieve a document by its id.
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET https://api.dwolla.com/documents/{id}
			Node:
			(type) c
			(layer)1
				Element:h3
					Request parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Required
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
					yes
				Element:td
					string
				Element:td
					Document unique identifier.
			Node:
			(type) c
			(layer)1
				Element:h3
					Request and response
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					GET https://api.dwolla.com/documents/56502f7a-fa59-4a2f-8579-0f8bc9d7b9cc Accept: application/vnd.dwolla.v1.hal+json Authorization: Bearer pBA9fVDBEyYZCEsLf/wKehyh1RTpzjUj5KzIRfDi0wKTii7DqY ... { "_links": { "self": { "href": "https://api.dwolla.com/documents/56502f7a-fa59-4a2f-8579-0f8bc9d7b9cc" } }, "id": "56502f7a-fa59-4a2f-8579-0f8bc9d7b9cc", "status": "pending", "type": "passport", "created": "2015-09-29T21:42:16.000Z" }
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					document_url
				Element:span
					=
				Element:span
					'https://api.dwolla.com/documents/56502f7a-fa59-4a2f-8579-0f8bc9d7b9cc'
				Element:span
					# Using DwollaV2 - https://github.com/Dwolla/dwolla-v2-ruby (Recommended)
				Element:span
					document
				Element:span
					=
				Element:span
					app_token
				Element:span
					.
				Element:span
					get
				Element:span
					document_url
				Element:span
					document
				Element:span
					.
				Element:span
					type
				Element:span
					# => "passport"
				Element:span
					# Using DwollaSwagger - https://github.com/Dwolla/dwolla-swagger-ruby
				Element:span
					document
				Element:span
					=
				Element:span
					DwollaSwagger
				Element:span
					::
				Element:span
					DocumentsApi
				Element:span
					.
				Element:span
					get_document
				Element:span
					(
				Element:span
					document_url
				Element:span
					)
				Element:span
					document
				Element:span
					.
				Element:span
					type
				Element:span
					# => "passport"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					<?php
				Element:span
					$documentUrl
				Element:span
					=
				Element:span
					'https://api.dwolla.com/documents/56502f7a-fa59-4a2f-8579-0f8bc9d7b9cc'
				Element:span
					;
				Element:span
					$documentsApi
				Element:span
					=
				Element:span
					new
				Element:span
					DwollaSwagger\DocumentsApi
				Element:span
					(
				Element:span
					$apiClient
				Element:span
					);
				Element:span
					$document
				Element:span
					=
				Element:span
					$documentsApi
				Element:span
					->
				Element:span
					getDocument
				Element:span
					(
				Element:span
					$documentUrl
				Element:span
					);
				Element:span
					$document
				Element:span
					->
				Element:span
					type
				Element:span
					;
				Element:span
					# => "passport"
				Element:span
					?>
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					document_url
				Element:span
					=
				Element:span
					'https://api.dwolla.com/documents/56502f7a-fa59-4a2f-8579-0f8bc9d7b9cc'
				Element:span
					# Using dwollav2 - https://github.com/Dwolla/dwolla-v2-python (Recommended)
				Element:span
					documents
				Element:span
					=
				Element:span
					app_token
				Element:span
					.
				Element:span
					get
				Element:span
					(
				Element:span
					document_url
				Element:span
					)
				Element:span
					documents
				Element:span
					.
				Element:span
					body
				Element:span
					[
				Element:span
					'type'
				Element:span
					]
				Element:span
					# => 'passport'
				Element:span
					# Using dwollaswagger - https://github.com/Dwolla/dwolla-swagger-python
				Element:span
					documents_api
				Element:span
					=
				Element:span
					dwollaswagger
				Element:span
					.
				Element:span
					DocumentsApi
				Element:span
					(
				Element:span
					client
				Element:span
					)
				Element:span
					document
				Element:span
					=
				Element:span
					documents_api
				Element:span
					.
				Element:span
					get_customer
				Element:span
					(
				Element:span
					document_url
				Element:span
					)
				Element:span
					document
				Element:span
					.
				Element:span
					type
				Element:span
					# => "passport"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					var
				Element:span
					documentUrl
				Element:span
					=
				Element:span
					'https://api.dwolla.com/documents/56502f7a-fa59-4a2f-8579-0f8bc9d7b9cc'
				Element:span
					;
				Element:span
					appToken
				Element:span
					.
				Element:span
					get
				Element:span
					(
				Element:span
					document_url
				Element:span
					)
				Element:span
					.
				Element:span
					then
				Element:span
					(
				Element:span
					res
				Element:span
					=>
				Element:span
					res
				Element:span
					.
				Element:span
					body
				Element:span
					.
				Element:span
					type
				Element:span
					);
				Element:span
					// => "passport"
			Node:
			(type) c
			(layer)1
				Element:hr
			Node:
			(type) h1
			(layer)1
				Element:h1
					Funding sources
			Node:
			(type) c
			(layer)1
				Element:p
					Add and retrieve ACH bank account information via funding sources. Customers can have a maximum of 6 funding sources. Funding sources can be created for both the
				Element:a
					Accounts
					and
				Element:a
					Customers
					resources.
			Node:
			(type) c
			(layer)1
				Element:h3
					Funding source resource
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
					The funding source unique identifier
				Element:tr
				Element:td
					status
				Element:td
					Is the funding source verified?
				Element:tr
				Element:td
					type
				Element:td
					Type of funding source. Either
				Element:code
					bank
					or
				Element:code
					balance
					.
				Element:tr
				Element:td
					name
				Element:td
					Customer’s arbitrary nickname for the funding source
				Element:tr
				Element:td
					created
				Element:td
					ISO-8601 timestamp
				Element:tr
				Element:td
					removed
				Element:td
					A value of
				Element:code
					true
					if the funding source has been
				Element:a
					removed
					or
				Element:code
					false
					if the funding source is not removed.
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"routingNumber"
				Element:span
					:
				Element:span
				Element:span
					"222222226"
				Element:span
					,
				Element:span
				Element:span
					"accountNumber"
				Element:span
					:
				Element:span
				Element:span
					"123456789"
				Element:span
					,
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"checking"
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"My Bank"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h2
					Retrieve a funding source
			Node:
			(type) c
			(layer)1
				Element:p
					This section covers how to retrieve a funding source by id.
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET https://api.dwolla.com/funding-sources/{id}
			Node:
			(type) c
			(layer)1
				Element:h3
					Request parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Required
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
					yes
				Element:td
					string
				Element:td
					id of funding source to retrieve.
			Node:
			(type) c
			(layer)1
				Element:h3
					Errors
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					HTTP Status
				Element:th
					Message
				Element:tbody
				Element:tr
				Element:td
					404
				Element:td
					Funding source not found.
			Node:
			(type) c
			(layer)1
				Element:h3
					Request and response
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					GET https://api.dwolla.com/funding-sources/692486f8-29f6-4516-a6a5-c69fd2ce854c Accept: application/vnd.dwolla.v1.hal+json Authorization: Bearer pBA9fVDBEyYZCEsLf/wKehyh1RTpzjUj5KzIRfDi0wKTii7DqY ... { "_links": { "self": { "href": "https://api.dwolla.com/funding-sources/692486f8-29f6-4516-a6a5-c69fd2ce854c" }, "customer": { "href": "https://api.dwolla.com/customers/36e9dcb2-889b-4873-8e52-0c9404ea002a" }, "initiate-micro-deposits": { "href": "https://api.dwolla.com/funding-sources/692486f8-29f6-4516-a6a5-c69fd2ce854c/micro-deposits" } }, "id": "692486f8-29f6-4516-a6a5-c69fd2ce854c", "status": "unverified", "type": "bank", "name": "Test checking account", "created": "2015-10-23T20:37:57.137Z" }
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					funding_source_url
				Element:span
					=
				Element:span
					'https://api.dwolla.com/funding-sources/692486f8-29f6-4516-a6a5-c69fd2ce854c'
				Element:span
					# Using DwollaV2 - https://github.com/Dwolla/dwolla-v2-ruby (Recommended)
				Element:span
					funding_source
				Element:span
					=
				Element:span
					account_token
				Element:span
					.
				Element:span
					get
				Element:span
					funding_source_url
				Element:span
					funding_source
				Element:span
					.
				Element:span
					name
				Element:span
					# => "Test checking account"
				Element:span
					# Using DwollaSwagger - https://github.com/Dwolla/dwolla-swagger-ruby
				Element:span
					funding_source
				Element:span
					=
				Element:span
					DwollaSwagger
				Element:span
					::
				Element:span
					FundingsourcesApi
				Element:span
					.
				Element:span
					id
				Element:span
					(
				Element:span
					funding_source_url
				Element:span
					)
				Element:span
					funding_source
				Element:span
					.
				Element:span
					name
				Element:span
					# => "Test checking account"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					<?php
				Element:span
					$fundingSourceUrl
				Element:span
					=
				Element:span
					'https://api.dwolla.com/funding-sources/692486f8-29f6-4516-a6a5-c69fd2ce854c'
				Element:span
					;
				Element:span
					$fsApi
				Element:span
					=
				Element:span
					new
				Element:span
					DwollaSwagger\FundingsourcesApi
				Element:span
					(
				Element:span
					$apiClient
				Element:span
					);
				Element:span
					$fundingSource
				Element:span
					=
				Element:span
					$fsApi
				Element:span
					->
				Element:span
					id
				Element:span
					(
				Element:span
					$fundingSourceUrl
				Element:span
					);
				Element:span
					$fundingSource
				Element:span
					->
				Element:span
					name
				Element:span
					;
				Element:span
					# => "Test checking account"
				Element:span
					?>
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					funding_source_url
				Element:span
					=
				Element:span
					'https://api.dwolla.com/funding-sources/692486f8-29f6-4516-a6a5-c69fd2ce854c'
				Element:span
					# Using dwollav2 - https://github.com/Dwolla/dwolla-v2-python (Recommended)
				Element:span
					funding_source
				Element:span
					=
				Element:span
					account_token
				Element:span
					.
				Element:span
					get
				Element:span
					(
				Element:span
					funding_source_url
				Element:span
					)
				Element:span
					funding_source
				Element:span
					.
				Element:span
					body
				Element:span
					[
				Element:span
					'name'
				Element:span
					]
				Element:span
					# => 'Test checking account'
				Element:span
					# Using dwollaswagger - https://github.com/Dwolla/dwolla-swagger-python
				Element:span
					fs_api
				Element:span
					=
				Element:span
					dwollaswagger
				Element:span
					.
				Element:span
					FundingsourcesApi
				Element:span
					(
				Element:span
					client
				Element:span
					)
				Element:span
					funding_source
				Element:span
					=
				Element:span
					fs_api
				Element:span
					.
				Element:span
					id
				Element:span
					(
				Element:span
					funding_source_url
				Element:span
					)
				Element:span
					funding_source
				Element:span
					.
				Element:span
					name
				Element:span
					# => 'Test checking account'
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					var
				Element:span
					fundingSourceUrl
				Element:span
					=
				Element:span
					'https://api.dwolla.com/funding-sources/692486f8-29f6-4516-a6a5-c69fd2ce854c'
				Element:span
					;
				Element:span
					accountToken
				Element:span
					.
				Element:span
					get
				Element:span
					(
				Element:span
					fundingSourceUrl
				Element:span
					)
				Element:span
					.
				Element:span
					then
				Element:span
					(
				Element:span
					res
				Element:span
					=>
				Element:span
					res
				Element:span
					.
				Element:span
					body
				Element:span
					.
				Element:span
					name
				Element:span
					);
				Element:span
					// => "Test checking account"
			Node:
			(type) c
			(layer)1
				Element:h2
					Update a funding source
			Node:
			(type) c
			(layer)1
				Element:p
					This section covers how to update a
				Element:code
					bank
					funding source name.
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					POST https://api.dwolla.com/funding-sources/{id}
			Node:
			(type) c
			(layer)1
				Element:h3
					Request parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Required
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
					yes
				Element:td
					string
				Element:td
					id of funding source to update.
				Element:tr
				Element:td
					name
				Element:td
					yes
				Element:td
					string
				Element:td
					Arbitrary nickname for the funding source. Must be 50 characters or less.
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Status and Error Codes
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					HTTP Status
				Element:th
					Code
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					404
				Element:td
					NotFound
				Element:td
					Funding source not found.
				Element:tr
				Element:td
					400
				Element:td
					ValidationError
				Element:td
					Only funding sources of type=“bank” can be updated.
				Element:tr
				Element:td
					400
				Element:td
					ValidationError
				Element:td
					Invalid bank name.
				Element:tr
				Element:td
					403
				Element:td
					InvalidResourceState
				Element:td
					A removed bank cannot be updated.
			Node:
			(type) c
			(layer)1
				Element:h3
					Request and response
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					POST https://api.dwolla.com/funding-sources/692486f8-29f6-4516-a6a5-c69fd2ce854c Accept: application/vnd.dwolla.v1.hal+json Content-Type: application/vnd.dwolla.v1.hal+json Authorization: Bearer pBA9fVDBEyYZCEsLf/wKehyh1RTpzjUj5KzIRfDi0wKTii7DqY ... { "name": "Test Checking - 1234" }
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					funding_source_url
				Element:span
					=
				Element:span
					'https://api.dwolla.com/funding-sources/692486f8-29f6-4516-a6a5-c69fd2ce854c'
				Element:span
					request_body
				Element:span
					=
				Element:span
					{
				Element:span
					"name"
				Element:span
					=>
				Element:span
					"Test Checking - 1234"
				Element:span
					,
				Element:span
					}
				Element:span
					# Using DwollaV2 - https://github.com/Dwolla/dwolla-v2-ruby (Recommended)
				Element:span
					funding_source
				Element:span
					=
				Element:span
					account_token
				Element:span
					.
				Element:span
					post
				Element:span
					"
				Element:span
					#{
				Element:span
					funding_source_url
				Element:span
					}
				Element:span
					"
				Element:span
					,
				Element:span
					request_body
				Element:span
					funding_source
				Element:span
					.
				Element:span
					name
				Element:span
					# => "Test Checking - 1234"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					/** * No example for this language yet. Coming soon. **/
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					funding_source_url
				Element:span
					=
				Element:span
					'https://api.dwolla.com/funding-sources/692486f8-29f6-4516-a6a5-c69fd2ce854c'
				Element:span
					request_body
				Element:span
					=
				Element:span
					{
				Element:span
					"name"
				Element:span
					:
				Element:span
					"Test Checking - 1234"
				Element:span
					}
				Element:span
					# Using dwollav2 - https://github.com/Dwolla/dwolla-v2-python (Recommended)
				Element:span
					funding_source
				Element:span
					=
				Element:span
					account_token
				Element:span
					.
				Element:span
					post
				Element:span
					(
				Element:span
					'funding-sources'
				Element:span
					,
				Element:span
					request_body
				Element:span
					)
				Element:span
					funding_source
				Element:span
					.
				Element:span
					body
				Element:span
					[
				Element:span
					'name'
				Element:span
					]
				Element:span
					# => 'Test Checking - 1234'
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					var
				Element:span
					fundingSourceUrl
				Element:span
					=
				Element:span
					'https://api.dwolla.com/funding-sources/692486f8-29f6-4516-a6a5-c69fd2ce854c'
				Element:span
					;
				Element:span
					var
				Element:span
					requestBody
				Element:span
					=
				Element:span
					{
				Element:span
					name
				Element:span
					:
				Element:span
					"Test Checking - 1234"
				Element:span
					};
				Element:span
					accountToken
				Element:span
					.
				Element:span
					post
				Element:span
					(
				Element:span
					fundingSourceUrl
				Element:span
					,
				Element:span
					requestBody
				Element:span
					)
				Element:span
					.
				Element:span
					then
				Element:span
					(
				Element:span
					res
				Element:span
					=>
				Element:span
					res
				Element:span
					.
				Element:span
					body
				Element:span
					.
				Element:span
					name
				Element:span
					);
				Element:span
					// => "Test Checking - 1234"
			Node:
			(type) c
			(layer)1
				Element:h2
					Retrieve a funding source balance
			Node:
			(type) c
			(layer)1
				Element:p
					This section covers how to retrieve the
				Element:code
					balance
					of a funding source. The funding source can be either of type
				Element:code
					balance
					or
				Element:code
					bank
					.
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET https://api.dwolla.com/funding-sources/{id}/balance
			Node:
			(type) c
			(layer)1
				Element:h3
					Request parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Required
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
					yes
				Element:td
					string
				Element:td
					id of funding source to retreive balance for.
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Status and Error Codes
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					HTTP Status
				Element:th
					Code
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					404
				Element:td
					NotFound
				Element:td
					Funding source not found.
			Node:
			(type) c
			(layer)1
				Element:h3
					Request and response
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					GET https://api-uat.dwolla.com/funding-sources/8e286b86-1e87-4974-9c7e-498ed4e8c61b Accept: application/vnd.dwolla.v1.hal+json Authorization: Bearer {accessToken} { "_links": { "self": { "href": "https://api-uat.dwolla.com/funding-sources/8e286b86-1e87-4974-9c7e-498ed4e8c61b", "type": "funding-source" }, "customer": { "href": "https://api-uat.dwolla.com/customers/dbaede31-c55c-48d9-abe4-e1d59d8f200b", "type": "customer" }, "balance": { "href": "https://api-uat.dwolla.com/funding-sources/8e286b86-1e87-4974-9c7e-498ed4e8c61b/balance", "type": "balance" } }, "id": "8e286b86-1e87-4974-9c7e-498ed4e8c61b", "status": "verified", "type": "bank", "name": "Balance Check - SAVINGS", "created": "2016-07-22T14:47:00.000Z", "removed": false }
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					# No example for this language yet.
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					/* No example for this language yet */
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					# No example for this language yet.
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					// No example for this language yet.
			Node:
			(type) c
			(layer)1
				Element:h2
					Initiate micro-deposits
			Node:
			(type) c
			(layer)1
				Element:p
					This section covers how to initiate micro-deposits for bank verification. Reference the
				Element:a
					funding source verification
					resource article for more information on the micro-deposit method of bank account verification.
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					POST https://api.dwolla.com/funding-sources/{id}/micro-deposits
			Node:
			(type) c
			(layer)1
				Element:h3
					Request parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Required
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
					yes
				Element:td
					string
				Element:td
					id of funding source to initiate micro-deposits to.
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Status and Error Codes
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					HTTP Status
				Element:th
					Code
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					201
				Element:td
					Created
				Element:td
					Micro deposits initiated
				Element:tr
				Element:td
					404
				Element:td
					NotFound
				Element:td
					Funding source not found
			Node:
			(type) c
			(layer)1
				Element:h4
					Request and response
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					POST /funding-sources/e52006c3-7560-4ff1-99d5-b0f3a6f4f909/micro-deposits Authorization: Bearer 8tJjM7iTjujLthkbVPMUcHLqMNw4uv5kG712g9j1RRBHplGpwo Content-Type: application/vnd.dwolla.v1.hal+json Accept: application/vnd.dwolla.v1.hal+json Cache-Control: no-cache HTTP/1.1 201 Created Location: https://api.dwolla.com/funding-sources/e52006c3-7560-4ff1-99d5-b0f3a6f4f909/micro-deposits
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					funding_source_url
				Element:span
					=
				Element:span
					'https://api-uat.dwolla.com/funding-sources/e52006c3-7560-4ff1-99d5-b0f3a6f4f909'
				Element:span
					# Using DwollaV2 - https://github.com/Dwolla/dwolla-v2-ruby (Recommended)
				Element:span
					account_token
				Element:span
					.
				Element:span
					post
				Element:span
					"
				Element:span
					#{
				Element:span
					funding_source_url
				Element:span
					}
				Element:span
					/micro-deposits"
				Element:span
					# Using DwollaSwagger - https://github.com/Dwolla/dwolla-swagger-ruby
				Element:span
					DwollaSwagger
				Element:span
					::
				Element:span
					FundingsourcesApi
				Element:span
					.
				Element:span
					micro_deposits
				Element:span
					(
				Element:span
					funding_source_url
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					var
				Element:span
					fundingSourceUrl
				Element:span
					=
				Element:span
					'https://api-uat.dwolla.com/funding-sources/e52006c3-7560-4ff1-99d5-b0f3a6f4f909'
				Element:span
					;
				Element:span
					accountToken
				Element:span
					.
				Element:span
					post
				Element:span
					(
				Element:span
					`#
				Element:span
					{
				Element:span
					fundingSourceUrl
				Element:span
					}
				Element:span
					/micro-deposits`
				Element:span
					)
				Element:span
					;
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					funding_source_url
				Element:span
					=
				Element:span
					'https://api-uat.dwolla.com/funding-sources/e52006c3-7560-4ff1-99d5-b0f3a6f4f909'
				Element:span
					# Using dwollav2 - https://github.com/Dwolla/dwolla-v2-python (Recommended)
				Element:span
					account_token
				Element:span
					.
				Element:span
					post
				Element:span
					(
				Element:span
					'
				Element:span
					%
				Element:span
					s/micro-deposits'
				Element:span
					%
				Element:span
					funding_source_url
				Element:span
					)
				Element:span
					# Using dwollaswagger - https://github.com/Dwolla/dwolla-swagger-python
				Element:span
					fs_api
				Element:span
					=
				Element:span
					dwollaswagger
				Element:span
					.
				Element:span
					FundingsourcesApi
				Element:span
					(
				Element:span
					client
				Element:span
					)
				Element:span
					fs_api
				Element:span
					.
				Element:span
					micro_deposits
				Element:span
					(
				Element:span
					funding_source_url
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					<?php
				Element:span
					$fundingSourceUrl
				Element:span
					=
				Element:span
					'https://api-uat.dwolla.com/funding-sources/e52006c3-7560-4ff1-99d5-b0f3a6f4f909'
				Element:span
					;
				Element:span
					$fsApi
				Element:span
					=
				Element:span
					new
				Element:span
					DwollaSwagger\FundingsourcesApi
				Element:span
					(
				Element:span
					$apiClient
				Element:span
					);
				Element:span
					$fsApi
				Element:span
					->
				Element:span
					microDeposits
				Element:span
					(
				Element:span
					null
				Element:span
					,
				Element:span
					$fundingSourceUrl
				Element:span
					);
				Element:span
					?>
			Node:
			(type) c
			(layer)1
				Element:h2
					Verify micro-deposits
			Node:
			(type) c
			(layer)1
				Element:p
					This section covers how to verify micro-deposits for bank verification. Reference the
				Element:a
					funding source verification
					resource article for more information on the micro-deposit method of bank account verification.
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					POST https://api.dwolla.com/funding-sources/{id}/micro-deposits
			Node:
			(type) c
			(layer)1
				Element:h3
					Request parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Required
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
					yes
				Element:td
					string
				Element:td
					id of funding source to verify micro-deposits on.
				Element:tr
				Element:td
					amount1
				Element:td
					yes
				Element:td
					string
				Element:td
					An amount JSON object of first micro-deposit. Contains
				Element:code
					value
					and
				Element:code
					currency
					.
				Element:tr
				Element:td
					amount2
				Element:td
					yes
				Element:td
					string
				Element:td
					An amount JSON object of second micro-deposit. Contains
				Element:code
					value
					and
				Element:code
					currency
					.
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Status and Error Codes
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					HTTP Status
				Element:th
					Code
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					200
				Element:td
					OK
				Element:td
					Micro deposits verified
				Element:tr
				Element:td
					202
				Element:td
					TryAgainLater
				Element:td
					“Invalid wait time.”
				Element:tr
				Element:td
					400
				Element:td
					ValidationError
				Element:td
					InvalidAmount
				Element:tr
				Element:td
					400
				Element:td
					ValidationError
				Element:td
					“Wrong amount(s).”
				Element:tr
				Element:td
					403
				Element:td
					InvalidResourceState
				Element:td
					“Too many attempts.”
				Element:tr
				Element:td
					403
				Element:td
					InvalidResourceState
				Element:td
					“Bank already verified.”
				Element:tr
				Element:td
					404
				Element:td
					NotFound
				Element:td
					Micro deposits not initiated
				Element:tr
				Element:td
					404
				Element:td
					NotFound
				Element:td
					Funding source not found
				Element:tr
				Element:td
					500
				Element:td
					Unknown
				Element:td
					“Verify microdeposits returned an unknown error.”
			Node:
			(type) c
			(layer)1
				Element:h4
					Request and response
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					POST /funding-sources/e52006c3-7560-4ff1-99d5-b0f3a6f4f909/micro-deposits Authorization: Bearer 8tJjM7iTjujLthkbVPMUcHLqMNw4uv5kG712g9j1RRBHplGpwo Content-Type: application/vnd.dwolla.v1.hal+json Accept: application/vnd.dwolla.v1.hal+json { "amount1": { "value": "0.03", "currency": "USD" }, "amount2": { "value": "0.09", "currency": "USD" } } HTTP 200 OK
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					funding_source_url
				Element:span
					=
				Element:span
					'https://api-uat.dwolla.com/funding-sources/e52006c3-7560-4ff1-99d5-b0f3a6f4f909'
				Element:span
					request_body
				Element:span
					=
				Element:span
					{
				Element:span
					:amount1
				Element:span
					=>
				Element:span
					{
				Element:span
					:value
				Element:span
					=>
				Element:span
					"0.03"
				Element:span
					,
				Element:span
					:currency
				Element:span
					=>
				Element:span
					"USD"
				Element:span
					},
				Element:span
					:amount2
				Element:span
					=>
				Element:span
					{
				Element:span
					:value
				Element:span
					=>
				Element:span
					"0.09"
				Element:span
					,
				Element:span
					:currency
				Element:span
					=>
				Element:span
					"USD"
				Element:span
					}
				Element:span
					}
				Element:span
					# Using DwollaV2 - https://github.com/Dwolla/dwolla-v2-ruby (Recommended)
				Element:span
					account_token
				Element:span
					.
				Element:span
					post
				Element:span
					"
				Element:span
					#{
				Element:span
					funding_source_url
				Element:span
					}
				Element:span
					/micro-deposits"
				Element:span
					,
				Element:span
					request_body
				Element:span
					# Using DwollaSwagger - https://github.com/Dwolla/dwolla-swagger-ruby
				Element:span
					DwollaSwagger
				Element:span
					::
				Element:span
					FundingsourcesApi
				Element:span
					.
				Element:span
					micro_deposits
				Element:span
					(
				Element:span
					funding_source_url
				Element:span
					,
				Element:span
					body:
				Element:span
					request_body
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					var
				Element:span
					fundingSourceUrl
				Element:span
					=
				Element:span
					'https://api-uat.dwolla.com/funding-sources/e52006c3-7560-4ff1-99d5-b0f3a6f4f909'
				Element:span
					;
				Element:span
					var
				Element:span
					requestBody
				Element:span
					=
				Element:span
					{
				Element:span
					amount1
				Element:span
					:
				Element:span
					{
				Element:span
					value
				Element:span
					:
				Element:span
					'0.03'
				Element:span
					,
				Element:span
					currency
				Element:span
					:
				Element:span
					'USD'
				Element:span
					},
				Element:span
					amount2
				Element:span
					:
				Element:span
					{
				Element:span
					value
				Element:span
					:
				Element:span
					'0.09'
				Element:span
					,
				Element:span
					currency
				Element:span
					:
				Element:span
					'USD'
				Element:span
					}
				Element:span
					};
				Element:span
					accountToken
				Element:span
					.
				Element:span
					post
				Element:span
					(
				Element:span
					`
				Element:span
					$
				Element:span
					{
				Element:span
					fundingSourceUrl
				Element:span
					}
				Element:span
					/micro-deposits`, requestBody
				Element:span
					)
				Element:span
					;
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					funding_source_url
				Element:span
					=
				Element:span
					'https://api-uat.dwolla.com/funding-sources/e52006c3-7560-4ff1-99d5-b0f3a6f4f909'
				Element:span
					request_body
				Element:span
					=
				Element:span
					{
				Element:span
					"amount1"
				Element:span
					:
				Element:span
					{
				Element:span
					"value"
				Element:span
					:
				Element:span
					"0.03"
				Element:span
					,
				Element:span
					"currency"
				Element:span
					:
				Element:span
					"USD"
				Element:span
					},
				Element:span
					"amount2"
				Element:span
					:
				Element:span
					{
				Element:span
					"value"
				Element:span
					:
				Element:span
					"0.09"
				Element:span
					,
				Element:span
					"currency"
				Element:span
					:
				Element:span
					"USD"
				Element:span
					}
				Element:span
					}
				Element:span
					# Using dwollav2 - https://github.com/Dwolla/dwolla-v2-python (Recommended)
				Element:span
					account_token
				Element:span
					.
				Element:span
					post
				Element:span
					(
				Element:span
					'
				Element:span
					%
				Element:span
					s/micro-deposits'
				Element:span
					%
				Element:span
					funding_source_url
				Element:span
					,
				Element:span
					request_body
				Element:span
					)
				Element:span
					# Using dwollaswagger - https://github.com/Dwolla/dwolla-swagger-python
				Element:span
					fs_api
				Element:span
					=
				Element:span
					dwollaswagger
				Element:span
					.
				Element:span
					FundingsourcesApi
				Element:span
					(
				Element:span
					client
				Element:span
					)
				Element:span
					fs_api
				Element:span
					.
				Element:span
					micro_deposits
				Element:span
					(
				Element:span
					funding_source_url
				Element:span
					,
				Element:span
					body
				Element:span
					=
				Element:span
					request_body
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					<?php
				Element:span
					$fundingSourceUrl
				Element:span
					=
				Element:span
					'https://api-uat.dwolla.com/funding-sources/e52006c3-7560-4ff1-99d5-b0f3a6f4f909'
				Element:span
					;
				Element:span
					$fsApi
				Element:span
					=
				Element:span
					new
				Element:span
					DwollaSwagger\FundingsourcesApi
				Element:span
					(
				Element:span
					$apiClient
				Element:span
					);
				Element:span
					$fsApi
				Element:span
					->
				Element:span
					microDeposits
				Element:span
					([
				Element:span
					'amount1'
				Element:span
					=>
				Element:span
					[
				Element:span
					'value'
				Element:span
					=>
				Element:span
					'0.03'
				Element:span
					,
				Element:span
					'currency'
				Element:span
					=>
				Element:span
					'USD'
				Element:span
					],
				Element:span
					'amount2'
				Element:span
					=>
				Element:span
					[
				Element:span
					'value'
				Element:span
					=>
				Element:span
					'0.09'
				Element:span
					,
				Element:span
					'currency'
				Element:span
					=>
				Element:span
					'USD'
				Element:span
					],
				Element:span
					$fundingSourceUrl
				Element:span
					]);
				Element:span
					?>
			Node:
			(type) c
			(layer)1
				Element:h2
					Retrieve micro-deposits details
			Node:
			(type) c
			(layer)1
				Element:p
					This section shows how to retrieve the status of micro-deposits and check if micro-deposits are eligible for verification. If the status of micro-deposits is
				Element:code
					failed
					, a
				Element:code
					failure
					object will be returned in the response body which includes the ACH return code and description.
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET https://api.dwolla.com/funding-sources/{id}/micro-deposits
			Node:
			(type) c
			(layer)1
				Element:h3
					Request parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Required
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
					no
				Element:td
					string
				Element:td
					id of funding source to check status of validation deposits.
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Status and Error Codes
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					HTTP Status
				Element:th
					Code
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					200
				Element:td
					Ok
				Element:td
					Pending micro-deposits exist.
			Node:
			(type) c
			(layer)1
				Element:h3
					Request and response
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					GET https://api.dwolla.com/funding-sources/dfe59fdd-7467-44cf-a339-2020dab5e98a/micro-deposits Accept: application/vnd.dwolla.v1.hal+json Authorization: Bearer pBA9fVDBEyYZCEsLf/wKehyh1RTpzjUj5KzIRfDi0wKTii7DqY ... { "_links": { "self": { "href": "https://api-uat.dwolla.com/funding-sources/dfe59fdd-7467-44cf-a339-2020dab5e98a/micro-deposits", "type": "application/vnd.dwolla.v1.hal+json", "resource-type": "micro-deposits" }, "verify-micro-deposits": { "href": "https://api-uat.dwolla.com/funding-sources/dfe59fdd-7467-44cf-a339-2020dab5e98a/micro-deposits", "type": "application/vnd.dwolla.v1.hal+json", "resource-type": "micro-deposits" } }, "created": "2016-12-30T20:56:53.000Z", "status": "failed", "failure": { "code": "R03", "description": "No Account/Unable to Locate Account" } }
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					funding_source_url
				Element:span
					=
				Element:span
					'https://api.dwolla.com/funding-sources/692486f8-29f6-4516-a6a5-c69fd2ce854c'
				Element:span
					# Using DwollaV2 - https://github.com/Dwolla/dwolla-v2-ruby (Recommended)
				Element:span
					funding_source
				Element:span
					=
				Element:span
					account_token
				Element:span
					.
				Element:span
					get
				Element:span
					"
				Element:span
					#{
				Element:span
					funding_source_url
				Element:span
					}
				Element:span
					/micro-deposits"
				Element:span
					funding_source
				Element:span
					.
				Element:span
					status
				Element:span
					# => "failed"
				Element:span
					# Using DwollaSwagger - https://github.com/Dwolla/dwolla-swagger-ruby
				Element:span
					funding_source
				Element:span
					=
				Element:span
					DwollaSwagger
				Element:span
					::
				Element:span
					FundingsourcesApi
				Element:span
					.
				Element:span
					verify_micro_deposits_exist
				Element:span
					(
				Element:span
					funding_source_url
				Element:span
					)
				Element:span
					funding_source
				Element:span
					.
				Element:span
					status
				Element:span
					# => "failed"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					<?php
				Element:span
					$fundingSourceUrl
				Element:span
					=
				Element:span
					'https://api.dwolla.com/funding-sources/692486f8-29f6-4516-a6a5-c69fd2ce854c'
				Element:span
					;
				Element:span
					$fsApi
				Element:span
					=
				Element:span
					new
				Element:span
					DwollaSwagger\FundingsourcesApi
				Element:span
					(
				Element:span
					$apiClient
				Element:span
					);
				Element:span
					$fundingSource
				Element:span
					=
				Element:span
					$fsApi
				Element:span
					->
				Element:span
					verifyMicroDepositsExist
				Element:span
					(
				Element:span
					$fundingSourceUrl
				Element:span
					);
				Element:span
					$fundingSource
				Element:span
					->
				Element:span
					status
				Element:span
					;
				Element:span
					# => "failed"
				Element:span
					?>
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					funding_source_url
				Element:span
					=
				Element:span
					'https://api.dwolla.com/funding-sources/692486f8-29f6-4516-a6a5-c69fd2ce854c'
				Element:span
					# Using dwollav2 - https://github.com/Dwolla/dwolla-v2-python (Recommended)
				Element:span
					funding_source
				Element:span
					=
				Element:span
					account_token
				Element:span
					.
				Element:span
					get
				Element:span
					(
				Element:span
					'
				Element:span
					%
				Element:span
					s/micro-deposits'
				Element:span
					%
				Element:span
					funding_source_url
				Element:span
					)
				Element:span
					funding_source
				Element:span
					.
				Element:span
					body
				Element:span
					[
				Element:span
					'status'
				Element:span
					]
				Element:span
					# => 'failed'
				Element:span
					# Using dwollaswagger - https://github.com/Dwolla/dwolla-swagger-python
				Element:span
					fs_api
				Element:span
					=
				Element:span
					dwollaswagger
				Element:span
					.
				Element:span
					FundingsourcesApi
				Element:span
					(
				Element:span
					client
				Element:span
					)
				Element:span
					funding_source
				Element:span
					=
				Element:span
					fs_api
				Element:span
					.
				Element:span
					verify_micro_deposits_exist
				Element:span
					(
				Element:span
					funding_source_url
				Element:span
					)
				Element:span
					funding_source
				Element:span
					.
				Element:span
					status
				Element:span
					# => 'failed'
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					var
				Element:span
					fundingSourceUrl
				Element:span
					=
				Element:span
					'https://api.dwolla.com/funding-sources/692486f8-29f6-4516-a6a5-c69fd2ce854c'
				Element:span
					;
				Element:span
					accountToken
				Element:span
					.
				Element:span
					get
				Element:span
					(
				Element:span
					`
				Element:span
					$
				Element:span
					{
				Element:span
					fundingSourceUrl
				Element:span
					}
				Element:span
					/micro-deposits`
				Element:span
					)
				Element:span
					.
				Element:span
					then
				Element:span
					(
				Element:span
					res
				Element:span
					=>
				Element:span
					res
				Element:span
					.
				Element:span
					body
				Element:span
					.
				Element:span
					status
				Element:span
					);
				Element:span
					// => "failed"
			Node:
			(type) c
			(layer)1
				Element:h2
					Remove a funding source
			Node:
			(type) c
			(layer)1
				Element:p
					Remove a funding source by id. A removed funding source is soft deleted and can still be accessed when retrieved.
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					POST https://api.dwolla.com/funding-sources/{id}
			Node:
			(type) c
			(layer)1
				Element:h3
					Request parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Required
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
					yes
				Element:td
					id of funding source to delete.
				Element:td
				Element:tr
				Element:td
					removed
				Element:td
					yes
				Element:td
					Specify a value of
				Element:code
					true
					to remove the associated funding source.
				Element:td
			Node:
			(type) c
			(layer)1
				Element:h3
					Errors
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					HTTP Status
				Element:th
					Message
				Element:tbody
				Element:tr
				Element:td
					404
				Element:td
					Funding source not found.
			Node:
			(type) c
			(layer)1
				Element:h3
					Request and response
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					POST /funding-sources/692486f8-29f6-4516-a6a5-c69fd2ce854c Content-Type: application/vnd.dwolla.v1.hal+json Accept: application/vnd.dwolla.v1.hal+json Authorization: Bearer pBA9fVDBEyYZCEsLf/wKehyh1RTpzjUj5KzIRfDi0wKTii7DqY { "removed": true } ... HTTP 200 OK { "_links": { "self": { "href": "https://api.dwolla.com/funding-sources/692486f8-29f6-4516-a6a5-c69fd2ce854c", "type": "funding-source" } }, "id": "692486f8-29f6-4516-a6a5-c69fd2ce854c", "status": "verified", "type": "bank", "name": "Test bank account", "created": "2016-06-08T21:37:30.000Z", "removed": true }
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					funding_source_url
				Element:span
					=
				Element:span
					'https://api.dwolla.com/funding-sources/692486f8-29f6-4516-a6a5-c69fd2ce854c'
				Element:span
					request_body
				Element:span
					=
				Element:span
					{
				Element:span
					:removed
				Element:span
					=>
				Element:span
					true
				Element:span
					}
				Element:span
					# Using DwollaV2 - https://github.com/Dwolla/dwolla-v2-ruby (Recommended)
				Element:span
					account_token
				Element:span
					.
				Element:span
					post
				Element:span
					"
				Element:span
					#{
				Element:span
					funding_source_url
				Element:span
					}
				Element:span
					"
				Element:span
					,
				Element:span
					request_body
				Element:span
					# Using DwollaSwagger - https://github.com/Dwolla/dwolla-swagger-ruby
				Element:span
					DwollaSwagger
				Element:span
					::
				Element:span
					FundingsourcesApi
				Element:span
					.
				Element:span
					soft_delete
				Element:span
					(
				Element:span
					funding_source_url
				Element:span
					,
				Element:span
					:body
				Element:span
					=>
				Element:span
					request_body
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					<?php
				Element:span
					$fundingSourceUrl
				Element:span
					=
				Element:span
					'https://api.dwolla.com/funding-sources/692486f8-29f6-4516-a6a5-c69fd2ce854c'
				Element:span
					;
				Element:span
					$fsApi
				Element:span
					=
				Element:span
					new
				Element:span
					DwollaSwagger\FundingsourcesApi
				Element:span
					(
				Element:span
					$apiClient
				Element:span
					);
				Element:span
					$fsApi
				Element:span
					->
				Element:span
					softDelete
				Element:span
					([
				Element:span
					'removed'
				Element:span
					=>
				Element:span
					true
				Element:span
					],
				Element:span
					$fundingSourceUrl
				Element:span
					);
				Element:span
					?>
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					funding_source_url
				Element:span
					=
				Element:span
					'https://api.dwolla.com/funding-sources/692486f8-29f6-4516-a6a5-c69fd2ce854c'
				Element:span
					# Using dwollav2 - https://github.com/Dwolla/dwolla-v2-python (Recommended)
				Element:span
					account_token
				Element:span
					.
				Element:span
					delete
				Element:span
					(
				Element:span
					funding_source_url
				Element:span
					)
				Element:span
					# Using dwollaswagger - https://github.com/Dwolla/dwolla-swagger-python
				Element:span
					fs_api
				Element:span
					=
				Element:span
					dwollaswagger
				Element:span
					.
				Element:span
					FundingsourcesApi
				Element:span
					(
				Element:span
					client
				Element:span
					)
				Element:span
					fs_api
				Element:span
					.
				Element:span
					soft_delete
				Element:span
					(
				Element:span
					funding_source_url
				Element:span
					,
				Element:span
					body
				Element:span
					=
				Element:span
					{
				Element:span
					'removed'
				Element:span
					:
				Element:span
					true
				Element:span
					})
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					var
				Element:span
					fundingSourceUrl
				Element:span
					=
				Element:span
					'https://api.dwolla.com/funding-sources/692486f8-29f6-4516-a6a5-c69fd2ce854c'
				Element:span
					;
				Element:span
					var
				Element:span
					requestBody
				Element:span
					=
				Element:span
					{
				Element:span
					removed
				Element:span
					:
				Element:span
					true
				Element:span
					};
				Element:span
					accountToken
				Element:span
					.
				Element:span
					post
				Element:span
					(
				Element:span
					fundingSourceUrl
				Element:span
					,
				Element:span
					requestBody
				Element:span
					);
			Node:
			(type) c
			(layer)1
				Element:hr
			Node:
			(type) h1
			(layer)1
				Element:h1
					Transfers
			Node:
			(type) c
			(layer)1
				Element:p
					A transfer represents money being transferred from a
				Element:code
					source
					to a
				Element:code
					destination
					. Transfers are available for the
				Element:code
					Customer
					and
				Element:code
					Account
					resources.
			Node:
			(type) c
			(layer)1
				Element:h3
					Transfer resource
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
					Transfer unique identifier
				Element:tr
				Element:td
					status
				Element:td
					Either
				Element:code
					processed
					,
				Element:code
					pending
					,
				Element:code
					cancelled
					,
				Element:code
					failed
					, or
				Element:code
					reclaimed
				Element:tr
				Element:td
					amount
				Element:td
					An amount JSON object. See below
				Element:tr
				Element:td
					created
				Element:td
					ISO-8601 timestamp
				Element:tr
				Element:td
					metadata
				Element:td
					A metadata JSON object
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"_links"
				Element:span
					:
				Element:span
				Element:span
					{},
				Element:span
				Element:span
					"_embedded"
				Element:span
					:
				Element:span
				Element:span
					{},
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"string"
				Element:span
					,
				Element:span
				Element:span
					"status"
				Element:span
					:
				Element:span
				Element:span
					"string"
				Element:span
					,
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"value"
				Element:span
					:
				Element:span
				Element:span
					"string"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"string"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"created"
				Element:span
					:
				Element:span
				Element:span
					"2015-10-02T19:48:40.485Z"
				Element:span
					,
				Element:span
				Element:span
					"metadata"
				Element:span
					:
				Element:span
				Element:span
					{}
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
					Amount JSON object
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					value
				Element:td
					Amount of money
				Element:tr
				Element:td
					currency
				Element:td
					String,
				Element:code
					USD
			Node:
			(type) c
			(layer)1
				Element:h2
					Initiate a transfer
			Node:
			(type) c
			(layer)1
				Element:p
					This section covers how to initiate a transfer from either a Dwolla
				Element:a
					Account
					or Access API
				Element:a
					Customer
					resource.
			Node:
			(type) c
			(layer)1
				Element:ol
				Element:li
				Element:p
					This endpoint requires an OAuth account access token with the
				Element:code
					Send
					scope.
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					POST https://api.dwolla.com/transfers
			Node:
			(type) c
			(layer)1
				Element:h3
					Request parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Required
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					_links
				Element:td
					yes
				Element:td
					object
				Element:td
					A _links JSON object describing the desired
				Element:code
					source
					and
				Element:code
					destination
					of a transfer.
				Element:a
					See below
					for possible values for
				Element:code
					source
					and
				Element:code
					destination
					.
				Element:tr
				Element:td
					amount
				Element:td
					yes
				Element:td
					object
				Element:td
					An amount JSON object.
				Element:a
					See above
					.
				Element:tr
				Element:td
					metadata
				Element:td
					no
				Element:td
					object
				Element:td
					A metadata JSON object with a maximum of 10 key-value pairs (each key and value must be less than 255 characters).
				Element:tr
				Element:td
					fees
				Element:td
					no
				Element:td
					array
				Element:td
					an array of fee JSON objects that contain unique fee transfers.
				Element:a
					See below
					.
				Element:tr
				Element:td
					clearing
				Element:td
					no
				Element:td
					object
				Element:td
					A clearing JSON object that contains
				Element:code
					source
					and
				Element:code
					destination
					keys. Acceptable value for source is:
				Element:code
					standard
					. Acceptable value for destination is:
				Element:code
					next-available
					. Source specifies the clearing time for the source funding source involved in the transfer, and can be used to downgrade the clearing time from the default of Next-day ACH. Destination specifies the clearing time for the destination funding source involved in the transfer, and can be used to upgrade the clearing time from the default of Standard ACH to Same-day ACH.
				Element:strong
					Note:
					The clearing request parameter is a premium feature available for
				Element:a
					Access API
					partners. Next-day ACH functionality must be enabled.
			Node:
			(type) c
			(layer)1
				Element:h3
					Source and destination types
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Source Type
				Element:th
					URI
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					Funding source
				Element:td
				Element:code
					https://api.dwolla.com/funding-sources/{id}
				Element:td
					A bank or balance funding source.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Destination Type
				Element:th
					URI
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					Account
				Element:td
				Element:code
					https://api.dwolla.com/accounts/{id}
				Element:td
					Destination Account of a transfer.
				Element:tr
				Element:td
					Customer
				Element:td
				Element:code
					https://api.dwolla.com/customers/{id}
				Element:td
					Destination Customer of a transfer.
				Element:tr
				Element:td
					Email
				Element:td
				Element:code
					mailto:johndoe@email.com
				Element:td
					Email address of existing Dwolla Account or recipient (recipient will create a Dwolla Account to claim funds)
				Element:tr
				Element:td
					Funding source
				Element:td
				Element:code
					https://api.dwolla.com/funding-sources/{id}
				Element:td
					Destination of an Account or verified Customer’s own bank or balance funding source.
				Element:strong
					OR
					A Customer’s bank funding source.
			Node:
			(type) c
			(layer)1
				Element:h3
					Facilitator fee
			Node:
			(type) c
			(layer)1
				Element:p
					The facilitator fee is a feature allowing for a flat rate amount to be removed from a payment as a fee, and sent to the creator of the Dwolla application. The fee does not affect the original payment amount, and exists as a separate
				Element:a
					Transfer resource
					with a unique transfer ID. Within a transfer request you can specify an optional
				Element:code
					fees
					request parameter, which is an array of
				Element:a
					fee objects
					that can represent many unique fee transfers.
			Node:
			(type) c
			(layer)1
				Element:p
					For more information on collecting fees on payments, reference the
				Element:a
					facilitator fee
					resource article.
			Node:
			(type) c
			(layer)1
				Element:h4
					A fee JSON object
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					_links
				Element:td
					Contains a
				Element:code
					charge-to
					JSON object with a link to the associated source or destination
				Element:code
					Customer
					or
				Element:code
					Account
					resource.
				Element:tr
				Element:td
					amount
				Element:td
					Amount of fee to charge. An amount JSON object.
				Element:a
					See above
			Node:
			(type) c
			(layer)1
				Element:h4
					Fee object example:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"_links"
				Element:span
					:{
				Element:span
				Element:span
					"charge-to"
				Element:span
					:{
				Element:span
				Element:span
					"href"
				Element:span
					:
				Element:span
					"https://api-uat.dwolla.com/customers/d795f696-2cac-4662-8f16-95f1db9bddd8"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"amount"
				Element:span
					:{
				Element:span
				Element:span
					"value"
				Element:span
					:
				Element:span
					"4.00"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
					"USD"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Status and Error Codes
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					HTTP Status
				Element:th
					Message
				Element:tbody
				Element:tr
				Element:td
					400
				Element:td
					Transfer failed.
				Element:tr
				Element:td
					403
				Element:td
					OAuth token does not have Send scope.
			Node:
			(type) c
			(layer)1
				Element:h3
					Request and response (using Same Day ACH)
			Node:
			(type) c
			(layer)1
				Element:p
					The reference example below shows what a request looks like when sending a transfer. Please note this example is using
				Element:a
					same-day
					clearing to an Access API Customer’s bank account, part of Dwolla’s Access API.
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					POST https://api.dwolla.com/transfers Accept: application/vnd.dwolla.v1.hal+json Content-Type: application/vnd.dwolla.v1.hal+json Authorization: Bearer pBA9fVDBEyYZCEsLf/wKehyh1RTpzjUj5KzIRfDi0wKTii7DqY Idempotency-Key: 19051a62-3403-11e6-ac61-9e71128cae77 { "_links": { "source": { "href": "https://api.dwolla.com/funding-sources/707177c3-bf15-4e7e-b37c-55c3898d9bf4" }, "destination": { "href": "https://api.dwolla.com/customers/07D59716-EF22-4FE6-98E8-F3190233DFB8" } }, "amount": { "currency": "USD", "value": "10.00" }, "metadata": { "paymentId": "12345678", "note": "payment for completed work Dec. 1" }, "clearing": { "destination": "next-available" } } ... HTTP/1.1 201 Created Location: https://api.dwolla.com/transfers/74c9129b-d14a-e511-80da-0aa34a9b2388
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					request_body
				Element:span
					=
				Element:span
					{
				Element:span
					:_links
				Element:span
					=>
				Element:span
					{
				Element:span
					:source
				Element:span
					=>
				Element:span
					{
				Element:span
					:href
				Element:span
					=>
				Element:span
					"https://api.dwolla.com/funding-sources/707177c3-bf15-4e7e-b37c-55c3898d9bf4"
				Element:span
					},
				Element:span
					:destination
				Element:span
					=>
				Element:span
					{
				Element:span
					:href
				Element:span
					=>
				Element:span
					"https://api.dwolla.com/customers/07D59716-EF22-4FE6-98E8-F3190233DFB8"
				Element:span
					}
				Element:span
					},
				Element:span
					:amount
				Element:span
					=>
				Element:span
					{
				Element:span
					:currency
				Element:span
					=>
				Element:span
					"USD"
				Element:span
					,
				Element:span
					:value
				Element:span
					=>
				Element:span
					"1.00"
				Element:span
					},
				Element:span
					:metadata
				Element:span
					=>
				Element:span
					{
				Element:span
					:paymentId
				Element:span
					=>
				Element:span
					"12345678"
				Element:span
					,
				Element:span
					:note
				Element:span
					=>
				Element:span
					"payment for completed work Dec. 1"
				Element:span
					},
				Element:span
					:clearing
				Element:span
					=>
				Element:span
					{
				Element:span
					:destination
				Element:span
					=>
				Element:span
					"next-available"
				Element:span
					}
				Element:span
					}
				Element:span
					# Using DwollaV2 - https://github.com/Dwolla/dwolla-v2-ruby (Recommended)
				Element:span
					# For Access API applications, an app_token can be used for this endpoint. (https://docsv2.dwolla.com/#application-access-token)
				Element:span
					transfer
				Element:span
					=
				Element:span
					account_token
				Element:span
					.
				Element:span
					post
				Element:span
					"transfers"
				Element:span
					,
				Element:span
					request_body
				Element:span
					transfer
				Element:span
					.
				Element:span
					headers
				Element:span
					[
				Element:span
					:location
				Element:span
					]
				Element:span
					# => "https://api.dwolla.com/transfers/74c9129b-d14a-e511-80da-0aa34a9b2388"
				Element:span
					# Using DwollaSwagger - https://github.com/Dwolla/dwolla-swagger-ruby
				Element:span
					transfer
				Element:span
					=
				Element:span
					DwollaSwagger
				Element:span
					::
				Element:span
					TransfersApi
				Element:span
					.
				Element:span
					create
				Element:span
					(
				Element:span
					:body
				Element:span
					=>
				Element:span
					request_body
				Element:span
					)
				Element:span
					transfer
				Element:span
					# => "https://api.dwolla.com/transfers/74c9129b-d14a-e511-80da-0aa34a9b2388"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					<?php
				Element:span
					$transfersApi
				Element:span
					=
				Element:span
					new
				Element:span
					DwollaSwagger\TransfersApi
				Element:span
					(
				Element:span
					$apiClient
				Element:span
					);
				Element:span
					$transfer
				Element:span
					=
				Element:span
					$transfersApi
				Element:span
					->
				Element:span
					create
				Element:span
					([
				Element:span
					'_links'
				Element:span
					=>
				Element:span
					[
				Element:span
					'source'
				Element:span
					=>
				Element:span
					[
				Element:span
					'href'
				Element:span
					=>
				Element:span
					'https://api.dwolla.com/funding-sources/707177c3-bf15-4e7e-b37c-55c3898d9bf4'
				Element:span
					,
				Element:span
					],
				Element:span
					'destination'
				Element:span
					=>
				Element:span
					[
				Element:span
					'href'
				Element:span
					=>
				Element:span
					'https://api.dwolla.com/customers/07D59716-EF22-4FE6-98E8-F3190233DFB8'
				Element:span
					]
				Element:span
					],
				Element:span
					'amount'
				Element:span
					=>
				Element:span
					[
				Element:span
					'currency'
				Element:span
					=>
				Element:span
					'USD'
				Element:span
					,
				Element:span
					'value'
				Element:span
					=>
				Element:span
					'1.00'
				Element:span
					],
				Element:span
					'metadata'
				Element:span
					=>
				Element:span
					[
				Element:span
					'paymentId'
				Element:span
					=>
				Element:span
					'12345678'
				Element:span
					,
				Element:span
					'note'
				Element:span
					=>
				Element:span
					'payment for completed work Dec. 1'
				Element:span
					,
				Element:span
					],
				Element:span
					'clearing'
				Element:span
					=>
				Element:span
					[
				Element:span
					'destination'
				Element:span
					=>
				Element:span
					'next-available'
				Element:span
					]
				Element:span
					]);
				Element:span
					$transfer
				Element:span
					;
				Element:span
					# => "https://api.dwolla.com/transfers/74c9129b-d14a-e511-80da-0aa34a9b2388"
				Element:span
					?>
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					request_body
				Element:span
					=
				Element:span
					{
				Element:span
					'_links'
				Element:span
					:
				Element:span
					{
				Element:span
					'source'
				Element:span
					:
				Element:span
					{
				Element:span
					'href'
				Element:span
					:
				Element:span
					'https://api.dwolla.com/funding-sources/707177c3-bf15-4e7e-b37c-55c3898d9bf4'
				Element:span
					},
				Element:span
					'destination'
				Element:span
					:
				Element:span
					{
				Element:span
					'href'
				Element:span
					:
				Element:span
					'https://api.dwolla.com/customers/07D59716-EF22-4FE6-98E8-F3190233DFB8'
				Element:span
					}
				Element:span
					},
				Element:span
					'amount'
				Element:span
					:
				Element:span
					{
				Element:span
					'currency'
				Element:span
					:
				Element:span
					'USD'
				Element:span
					,
				Element:span
					'value'
				Element:span
					:
				Element:span
					'1.00'
				Element:span
					},
				Element:span
					'metadata'
				Element:span
					:
				Element:span
					{
				Element:span
					'paymentId'
				Element:span
					:
				Element:span
					'12345678'
				Element:span
					,
				Element:span
					'note'
				Element:span
					:
				Element:span
					'payment for completed work Dec. 1'
				Element:span
					},
				Element:span
					'clearing'
				Element:span
					:
				Element:span
					{
				Element:span
					'destination'
				Element:span
					:
				Element:span
					'next-available'
				Element:span
					}
				Element:span
					}
				Element:span
					# Using dwollav2 - https://github.com/Dwolla/dwolla-v2-python (Recommended)
				Element:span
					# For Access API applications, an app_token can be used for this endpoint. (https://docsv2.dwolla.com/#application-access-token)
				Element:span
					transfer
				Element:span
					=
				Element:span
					account_token
				Element:span
					.
				Element:span
					post
				Element:span
					(
				Element:span
					'transfers'
				Element:span
					,
				Element:span
					request_body
				Element:span
					)
				Element:span
					transfer
				Element:span
					.
				Element:span
					headers
				Element:span
					[
				Element:span
					'location'
				Element:span
					]
				Element:span
					# => 'https://api.dwolla.com/transfers/74c9129b-d14a-e511-80da-0aa34a9b2388'
				Element:span
					# Using dwollaswagger - https://github.com/Dwolla/dwolla-swagger-python
				Element:span
					transfers_api
				Element:span
					=
				Element:span
					dwollaswagger
				Element:span
					.
				Element:span
					TransfersApi
				Element:span
					(
				Element:span
					client
				Element:span
					)
				Element:span
					transfer
				Element:span
					=
				Element:span
					transfers_api
				Element:span
					.
				Element:span
					create
				Element:span
					(
				Element:span
					body
				Element:span
					=
				Element:span
					request_body
				Element:span
					)
				Element:span
					transfer
				Element:span
					# => 'https://api.dwolla.com/transfers/74c9129b-d14a-e511-80da-0aa34a9b2388'
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					var
				Element:span
					requestBody
				Element:span
					=
				Element:span
					{
				Element:span
					_links
				Element:span
					:
				Element:span
					{
				Element:span
					source
				Element:span
					:
				Element:span
					{
				Element:span
					href
				Element:span
					:
				Element:span
					'https://api.dwolla.com/funding-sources/707177c3-bf15-4e7e-b37c-55c3898d9bf4'
				Element:span
					},
				Element:span
					destination
				Element:span
					:
				Element:span
					{
				Element:span
					href
				Element:span
					:
				Element:span
					'https://api.dwolla.com/customers/07D59716-EF22-4FE6-98E8-F3190233DFB8'
				Element:span
					}
				Element:span
					},
				Element:span
					amount
				Element:span
					:
				Element:span
					{
				Element:span
					currency
				Element:span
					:
				Element:span
					'USD'
				Element:span
					,
				Element:span
					value
				Element:span
					:
				Element:span
					'1.00'
				Element:span
					},
				Element:span
					metadata
				Element:span
					:
				Element:span
					{
				Element:span
					paymentId
				Element:span
					:
				Element:span
					'12345678'
				Element:span
					,
				Element:span
					note
				Element:span
					:
				Element:span
					'payment for completed work Dec. 1'
				Element:span
					},
				Element:span
					clearing
				Element:span
					:
				Element:span
					{
				Element:span
					destination
				Element:span
					:
				Element:span
					'next-available'
				Element:span
					}
				Element:span
					};
				Element:span
					// For Access API applications, an appToken can be used for this endpoint. (https://docsv2.dwolla.com/#application-access-token)
				Element:span
					accountToken
				Element:span
					.
				Element:span
					post
				Element:span
					(
				Element:span
					'transfers'
				Element:span
					,
				Element:span
					requestBody
				Element:span
					)
				Element:span
					.
				Element:span
					then
				Element:span
					(
				Element:span
					res
				Element:span
					=>
				Element:span
					res
				Element:span
					.
				Element:span
					headers
				Element:span
					.
				Element:span
					get
				Element:span
					(
				Element:span
					'location'
				Element:span
					));
				Element:span
					// => 'https://api.dwolla.com/transfers/74c9129b-d14a-e511-80da-0aa34a9b2388'
			Node:
			(type) c
			(layer)1
				Element:h2
					Retrieve a transfer
			Node:
			(type) c
			(layer)1
				Element:p
					This section covers how to retrieve a transfer belonging to an Account or Customer by its id.
			Node:
			(type) c
			(layer)1
				Element:ol
				Element:li
				Element:p
					This endpoint requires an OAuth account access token with the
				Element:code
					Transactions
					scope.
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET https://api.dwolla.com/transfers/{id}
			Node:
			(type) c
			(layer)1
				Element:h3
					Request parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Required
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
					yes
				Element:td
					string
				Element:td
					The id of the transfer to be retrieved.
			Node:
			(type) c
			(layer)1
				Element:h3
					Errors
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					HTTP Status
				Element:th
					Message
				Element:tbody
				Element:tr
				Element:td
					404
				Element:td
					Transfer not found.
			Node:
			(type) c
			(layer)1
				Element:h3
					Request and response
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					GET https://api.dwolla.com/transfers/4C8AD8B8-3D69-E511-80DB-0AA34A9B2388 Accept: application/vnd.dwolla.v1.hal+json Authorization: Bearer pBA9fVDBEyYZCEsLf/wKehyh1RTpzjUj5KzIRfDi0wKTii7DqY ... { "_links": { "self": { "href": "https://api.dwolla.com/transfers/4C8AD8B8-3D69-E511-80DB-0AA34A9B2388" }, "source": { "href": "https://api.dwolla.com/accounts/ca32853c-48fa-40be-ae75-77b37504581b" }, "destination": { "href": "https://api.dwolla.com/customers/01B47CB2-52AC-42A7-926C-6F1F50B1F271" } }, "id": "4C8AD8B8-3D69-E511-80DB-0AA34A9B2388", "status": "pending", "amount": { "value": "225.00", "currency": "USD" }, "created": "2015-10-02T19:42:32.950Z", "metadata": { "foo": "bar", "baz": "foo" } }
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					transfer_url
				Element:span
					=
				Element:span
					'https://api.dwolla.com/transfers/4C8AD8B8-3D69-E511-80DB-0AA34A9B2388'
				Element:span
					# Using DwollaV2 - https://github.com/Dwolla/dwolla-v2-ruby (Recommended)
				Element:span
					# For Access API applications, an app_token can be used for this endpoint. (https://docsv2.dwolla.com/#application-access-token)
				Element:span
					transfer
				Element:span
					=
				Element:span
					account_token
				Element:span
					.
				Element:span
					get
				Element:span
					transfer_url
				Element:span
					transfer
				Element:span
					.
				Element:span
					status
				Element:span
					# => "pending"
				Element:span
					# Using DwollaSwagger - https://github.com/Dwolla/dwolla-swagger-ruby
				Element:span
					transfer
				Element:span
					=
				Element:span
					DwollaSwagger
				Element:span
					::
				Element:span
					TransfersApi
				Element:span
					.
				Element:span
					by_id
				Element:span
					(
				Element:span
					transfer_url
				Element:span
					)
				Element:span
					transfer
				Element:span
					.
				Element:span
					status
				Element:span
					# => "pending"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					<?php
				Element:span
					$transferUrl
				Element:span
					=
				Element:span
					'https://api.dwolla.com/transfers/4C8AD8B8-3D69-E511-80DB-0AA34A9B2388'
				Element:span
					;
				Element:span
					$transfersApi
				Element:span
					=
				Element:span
					new
				Element:span
					DwollaSwagger\TransfersApi
				Element:span
					(
				Element:span
					$apiClient
				Element:span
					);
				Element:span
					$transfer
				Element:span
					=
				Element:span
					$transfersApi
				Element:span
					->
				Element:span
					byId
				Element:span
					(
				Element:span
					$transferUrl
				Element:span
					);
				Element:span
					$transfer
				Element:span
					->
				Element:span
					status
				Element:span
					;
				Element:span
					# => "pending"
				Element:span
					?>
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					transfer_url
				Element:span
					=
				Element:span
					'https://api.dwolla.com/transfers/4C8AD8B8-3D69-E511-80DB-0AA34A9B2388'
				Element:span
					# Using dwollav2 - https://github.com/Dwolla/dwolla-v2-python (Recommended)
				Element:span
					# For Access API applications, an app_token can be used for this endpoint. (https://docsv2.dwolla.com/#application-access-token)
				Element:span
					fees
				Element:span
					=
				Element:span
					account_token
				Element:span
					.
				Element:span
					get
				Element:span
					(
				Element:span
					transfer_url
				Element:span
					)
				Element:span
					fees
				Element:span
					.
				Element:span
					body
				Element:span
					[
				Element:span
					'stats'
				Element:span
					]
				Element:span
					# => 'pending'
				Element:span
					# Using dwollaswagger - https://github.com/Dwolla/dwolla-swagger-python
				Element:span
					transfers_api
				Element:span
					=
				Element:span
					dwollaswagger
				Element:span
					.
				Element:span
					TransfersApi
				Element:span
					(
				Element:span
					client
				Element:span
					)
				Element:span
					transfer
				Element:span
					=
				Element:span
					transfers_api
				Element:span
					.
				Element:span
					by_id
				Element:span
					(
				Element:span
					transfer_url
				Element:span
					)
				Element:span
					transfer
				Element:span
					.
				Element:span
					status
				Element:span
					# => 'pending'
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					var
				Element:span
					transferUrl
				Element:span
					=
				Element:span
					'https://api.dwolla.com/transfers/4C8AD8B8-3D69-E511-80DB-0AA34A9B2388'
				Element:span
					;
				Element:span
					// For Access API applications, an appToken can be used for this endpoint. (https://docsv2.dwolla.com/#application-access-token)
				Element:span
					accountToken
				Element:span
					.
				Element:span
					get
				Element:span
					(
				Element:span
					transferUrl
				Element:span
					)
				Element:span
					.
				Element:span
					then
				Element:span
					(
				Element:span
					res
				Element:span
					=>
				Element:span
					res
				Element:span
					.
				Element:span
					body
				Element:span
					.
				Element:span
					status
				Element:span
					);
				Element:span
					// => 'pending'
			Node:
			(type) c
			(layer)1
				Element:h2
					List fees for a transfer
			Node:
			(type) c
			(layer)1
				Element:p
					This section outlines how to retrieve fees charged on a created transfer. Fees are visible to the
				Element:code
					Customer
					or
				Element:code
					Account
					that is charged the fee, as well as the Dwolla
				Element:code
					Account
					that is involved in receiving the fee.
			Node:
			(type) c
			(layer)1
				Element:ol
				Element:li
				Element:p
					This endpoint requires an OAuth account access token with the
				Element:code
					Transactions
					scope.
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET https://api.dwolla.com/transfers/{id}/fees
			Node:
			(type) c
			(layer)1
				Element:h3
					Request parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Required
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
					yes
				Element:td
					string
				Element:td
					The id of the transfer to retrieve fees for.
			Node:
			(type) c
			(layer)1
				Element:h3
					Errors
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					HTTP Status
				Element:th
					Message
				Element:tbody
				Element:tr
				Element:td
					404
				Element:td
					Transfer not found.
			Node:
			(type) c
			(layer)1
				Element:h3
					Request and response
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					GET https://api-uat.dwolla.com/transfers/83eb4b5e-a5d9-e511-80de-0aa34a9b2388/fees Accept: application/vnd.dwolla.v1.hal+json Authorization: Bearer pBA9fVDBEyYZCEsLf/wKehyh1RTpzjUj5KzIRfDi0wKTii7DqY ... { "transactions": [ { "_links": { "self": { "href": "https://api-uat.dwolla.com/transfers/416a2857-c887-4cca-bd02-8c3f75c4bb0e" }, "source": { "href": "https://api-uat.dwolla.com/customers/b442c936-1f87-465d-a4e2-a982164b26bd" }, "destination": { "href": "https://api-uat.dwolla.com/accounts/ca32853c-48fa-40be-ae75-77b37504581b" }, "created-from-transfer": { "href": "https://api-uat.dwolla.com/transfers/83eb4b5e-a5d9-e511-80de-0aa34a9b2388" } }, "id": "416a2857-c887-4cca-bd02-8c3f75c4bb0e", "status": "pending", "amount": { "value": "2.00", "currency": "usd" }, "created": "2016-02-22T20:46:38.777Z" }, { "_links": { "self": { "href": "https://api-uat.dwolla.com/transfers/e58ae1f1-7007-47d3-a308-7e9aa6266d53" }, "source": { "href": "https://api-uat.dwolla.com/customers/b442c936-1f87-465d-a4e2-a982164b26bd" }, "destination": { "href": "https://api-uat.dwolla.com/accounts/ca32853c-48fa-40be-ae75-77b37504581b" }, "created-from-transfer": { "href": "https://api-uat.dwolla.com/transfers/83eb4b5e-a5d9-e511-80de-0aa34a9b2388" } }, "id": "e58ae1f1-7007-47d3-a308-7e9aa6266d53", "status": "pending", "amount": { "value": "1.00", "currency": "usd" }, "created": "2016-02-22T20:46:38.860Z" } ], "total": 2 }
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					transfer_url
				Element:span
					=
				Element:span
					'https://api-uat.dwolla.com/transfers/83eb4b5e-a5d9-e511-80de-0aa34a9b2388'
				Element:span
					# Using DwollaV2 - https://github.com/Dwolla/dwolla-v2-ruby
				Element:span
					# For Access API applications, an app_token can be used for this endpoint. (https://docsv2.dwolla.com/#application-access-token)
				Element:span
					fees
				Element:span
					=
				Element:span
					account_token
				Element:span
					.
				Element:span
					get
				Element:span
					"
				Element:span
					#{
				Element:span
					transfer_url
				Element:span
					}
				Element:span
					/fees"
				Element:span
					fees
				Element:span
					.
				Element:span
					total
				Element:span
					# => 2
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					/** * No example for this language yet. **/
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					transfer_url
				Element:span
					=
				Element:span
					'https://api-uat.dwolla.com/transfers/83eb4b5e-a5d9-e511-80de-0aa34a9b2388'
				Element:span
					# Using dwollav2 - https://github.com/Dwolla/dwolla-v2-python (Recommended)
				Element:span
					# For Access API applications, an app_token can be used for this endpoint. (https://docsv2.dwolla.com/#application-access-token)
				Element:span
					fees
				Element:span
					=
				Element:span
					account_token
				Element:span
					.
				Element:span
					get
				Element:span
					(
				Element:span
					'
				Element:span
					%
				Element:span
					s/fees'
				Element:span
					%
				Element:span
					transfer_url
				Element:span
					)
				Element:span
					fees
				Element:span
					.
				Element:span
					body
				Element:span
					[
				Element:span
					'total'
				Element:span
					]
				Element:span
					# => 2
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					var
				Element:span
					transferUrl
				Element:span
					=
				Element:span
					'https://api-uat.dwolla.com/transfers/83eb4b5e-a5d9-e511-80de-0aa34a9b2388'
				Element:span
					;
				Element:span
					// For Access API applications, an appToken can be used for this endpoint. (https://docsv2.dwolla.com/#application-access-token)
				Element:span
					accountToken
				Element:span
					.
				Element:span
					get
				Element:span
					(
				Element:span
					`
				Element:span
					$
				Element:span
					{
				Element:span
					transferUrl
				Element:span
					}
				Element:span
					/fees`
				Element:span
					)
				Element:span
					.
				Element:span
					then
				Element:span
					(
				Element:span
					res
				Element:span
					=>
				Element:span
					res
				Element:span
					.
				Element:span
					body
				Element:span
					.
				Element:span
					total
				Element:span
					);
				Element:span
					// => 2
			Node:
			(type) c
			(layer)1
				Element:h2
					Retrieve a transfer failure reason
			Node:
			(type) c
			(layer)1
				Element:p
					When a bank transfer fails for an Account or Customer, Dwolla returns a
				Element:code
					failure
					link when
				Element:a
					retrieving the transfer by its Id
					. This failure link is used to retrieve the ACH return code and description. For reference, the list of possible failure codes and descriptions are shown in the
				Element:a
					Transfer failures
					resource article.
			Node:
			(type) c
			(layer)1
				Element:p
				Element:strong
					Note:
					If a transfer fails to/from a bank account then the
				Element:code
					bank
					will automatically be removed from the Dwolla system for all ACH return codes except an
				Element:code
					R01
					.
			Node:
			(type) c
			(layer)1
				Element:ol
				Element:li
				Element:p
					This endpoint requires an OAuth account access token with the
				Element:code
					Transactions
					scope.
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET https://api.dwolla.com/transfers/{id}/failure
			Node:
			(type) c
			(layer)1
				Element:h3
					Request parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Required
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
					yes
				Element:td
					string
				Element:td
					Transfer unique identifier.
			Node:
			(type) c
			(layer)1
				Element:h3
					Request and Response
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					GET https://api-uat.dwolla.com/transfers/e6d9a950-ac9e-e511-80dc-0aa34a9b2388/failure Accept: application/vnd.dwolla.v1.hal+json Authorization: Bearer pBA9fVDBEyYZCEsLf/wKehyh1RTpzjUj5KzIRfDi0wKTii7DqY { "_links": { "self": { "href": "https://api-uat.dwolla.com/transfers/E6D9A950-AC9E-E511-80DC-0AA34A9B2388/failure" } }, "code": "R1", "description": "Insufficient Funds" }
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					transfer_url
				Element:span
					=
				Element:span
					'https://api-uat.dwolla.com/transfers/83eb4b5e-a5d9-e511-80de-0aa34a9b2388'
				Element:span
					# Using DwollaV2 - https://github.com/Dwolla/dwolla-v2-ruby
				Element:span
					# For Access API applications, an app_token can be used for this endpoint. (https://docsv2.dwolla.com/#application-access-token)
				Element:span
					failure
				Element:span
					=
				Element:span
					account_token
				Element:span
					.
				Element:span
					get
				Element:span
					"
				Element:span
					#{
				Element:span
					transfer_url
				Element:span
					}
				Element:span
					/failure"
				Element:span
					failure
				Element:span
					.
				Element:span
					code
				Element:span
					# => "R1"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					/** * No example for this language yet. **/
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					transfer_url
				Element:span
					=
				Element:span
					'https://api-uat.dwolla.com/transfers/83eb4b5e-a5d9-e511-80de-0aa34a9b2388'
				Element:span
					# Using dwollav2 - https://github.com/Dwolla/dwolla-v2-python (Recommended)
				Element:span
					# For Access API applications, an app_token can be used for this endpoint. (https://docsv2.dwolla.com/#application-access-token)
				Element:span
					failure
				Element:span
					=
				Element:span
					account_token
				Element:span
					.
				Element:span
					get
				Element:span
					(
				Element:span
					'
				Element:span
					%
				Element:span
					s/failure'
				Element:span
					%
				Element:span
					transfer_url
				Element:span
					)
				Element:span
					failure
				Element:span
					.
				Element:span
					body
				Element:span
					[
				Element:span
					'code'
				Element:span
					]
				Element:span
					# => 'R1'
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					var
				Element:span
					transferUrl
				Element:span
					=
				Element:span
					'https://api-uat.dwolla.com/transfers/83eb4b5e-a5d9-e511-80de-0aa34a9b2388'
				Element:span
					;
				Element:span
					// For Access API applications, an appToken can be used for this endpoint. (https://docsv2.dwolla.com/#application-access-token)
				Element:span
					accountToken
				Element:span
					.
				Element:span
					get
				Element:span
					(
				Element:span
					`
				Element:span
					$
				Element:span
					{
				Element:span
					transferUrl
				Element:span
					}
				Element:span
					/failure`
				Element:span
					)
				Element:span
					.
				Element:span
					then
				Element:span
					(
				Element:span
					res
				Element:span
					=>
				Element:span
					res
				Element:span
					.
				Element:span
					body
				Element:span
					.
				Element:span
					code
				Element:span
					);
				Element:span
					// => 'R1'
			Node:
			(type) c
			(layer)1
				Element:h2
					Cancel a transfer
			Node:
			(type) c
			(layer)1
				Element:p
					When a bank transfer is eligible for cancellation, Dwolla returns a
				Element:code
					cancel
					link when
				Element:a
					getting the transfer by Id
					. This cancel link is used to trigger the cancellation, preventing the bank transfer from processing further. A bank transfer is cancellable up until 4pm CT on that same business day if the transfer was initiated prior to 4PM CT. If a transfer was initiated after 4pm CT, it can be cancelled anytime before 4pm CT on the following business day.
			Node:
			(type) c
			(layer)1
				Element:ol
				Element:li
				Element:p
					This endpoint requires an OAuth account access token with the
				Element:code
					Transactions
					scope.
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					POST https://api.dwolla.com/transfers/{id}
			Node:
			(type) c
			(layer)1
				Element:h3
					Request parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Required
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					status
				Element:td
					yes
				Element:td
					string
				Element:td
					Possible value:
				Element:code
					cancelled
					.
			Node:
			(type) c
			(layer)1
				Element:h3
					Request and Response
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					POST https://api-uat.dwolla.com/transfers/3d48c13a-0fc6-e511-80de-0aa34a9b2388 Content-Type: application/vnd.dwolla.v1.hal+json Accept: application/vnd.dwolla.v1.hal+json Authorization: Bearer pBA9fVDBEyYZCEsLf/wKehyh1RTpzjUj5KzIRfDi0wKTii7DqY { "status": "cancelled" } ... { "_links": { "cancel": { "href": "https://api-uat.dwolla.com/transfers/3d48c13a-0fc6-e511-80de-0aa34a9b2388" }, "source": { "href": "https://api-uat.dwolla.com/accounts/ca32853c-48fa-40be-ae75-77b37504581b" }, "funding-transfer": { "href": "https://api-uat.dwolla.com/transfers/3c48c13a-0fc6-e511-80de-0aa34a9b2388" }, "self": { "href": "https://api-uat.dwolla.com/transfers/3d48c13a-0fc6-e511-80de-0aa34a9b2388" }, "destination": { "href": "https://api-uat.dwolla.com/customers/05e267e5-c13d-491a-93a8-da52b721f123" } }, "id": "3d48c13a-0fc6-e511-80de-0aa34a9b2388", "status": "cancelled", "amount": { "value": "22.00", "currency": "usd" }, "created": "2016-01-28T22:34:02.663Z", "metadata": { "foo": "bar", "baz": "boo" } }
			Node:
			(type) c
			(layer)1
				Element:hr
			Node:
			(type) h1
			(layer)1
				Element:h1
					MassPay
			Node:
			(type) c
			(layer)1
				Element:p
					Dwolla MassPay allows you to easily send up to 5,000 payments one API request. The payments are funded from a single user’s specified funding source and processed asynchronously upon submission.
			Node:
			(type) c
			(layer)1
				Element:p
					Your mass payment will initially be pending and then processed. As the service processes your mass payment, each
				Element:code
					item
					is processed one after the other, at a rate between 0.5 sec. - 1 sec. / item. Therefore, you can expect a 1000-item MassPay to be completed between 8-16 minutes.
			Node:
			(type) c
			(layer)1
				Element:p
					MassPay offers a significant advantage over repeatedly calling the
				Element:a
					Transfers
					endpoint for each individual transaction. This benefit is the fact that a bank-funded MassPay only incurs a single ACH debit from the bank account to fund the entire batch of payments. The alternative approach will incur a debit from the bank funding source for each individual payment. Those who used this approach have reported incurring fees from their financial institutions for excessive ACH transactions.
			Node:
			(type) c
			(layer)1
				Element:h3
					Mass payment resource
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
					Mass payment unique identifier
				Element:tr
				Element:td
					status
				Element:td
					Either
				Element:code
					deferred
					: A created mass payment that can be processed at a later time.
				Element:code
					pending
					: A mass payment that is pending and awaiting processing. A mass payment has a pending status for a brief period of time and cannot be cancelled.
				Element:code
					processing
					: A mass payment that is processing.
				Element:code
					complete
					: A mass payment successfully completed processing.
				Element:tr
				Element:td
					created
				Element:td
					ISO-8601 timestamp
				Element:tr
				Element:td
					metadata
				Element:td
					A metadata JSON object
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"_links"
				Element:span
					:
				Element:span
				Element:span
					{},
				Element:span
				Element:span
					"_embedded"
				Element:span
					:
				Element:span
				Element:span
					{},
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"string"
				Element:span
					,
				Element:span
				Element:span
					"status"
				Element:span
					:
				Element:span
				Element:span
					"string"
				Element:span
					,
				Element:span
				Element:span
					"created"
				Element:span
					:
				Element:span
				Element:span
					"2016-03-11T15:52:58.289Z"
				Element:span
					,
				Element:span
				Element:span
					"metadata"
				Element:span
					:
				Element:span
				Element:span
					{}
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h2
					Initiate a mass payment
			Node:
			(type) c
			(layer)1
				Element:p
					This section covers how to initiate a mass payment from an
				Element:a
					Account
					resource. A mass payment contains a list of
				Element:code
					items
					representing individual payments. Optionally, mass payments can contain
				Element:code
					metadata
					on the mass payment itself as well as items contained in the mass payment which can be used to pass along additional information with the mass payment and item respectively.
			Node:
			(type) c
			(layer)1
				Element:h4
					Deferred mass payment
			Node:
			(type) c
			(layer)1
				Element:p
					A mass payment can be created with a status of
				Element:code
					deferred
					, which allows you to create the mass payment and defer processing to a later time. To trigger processing on a deferred mass payment, you’ll
				Element:a
					update the mass payment
					with a status of
				Element:code
					pending
					. A deferred mass payment can be cancelled by updating the mass payment with a status of
				Element:code
					cancelled
					.
			Node:
			(type) c
			(layer)1
				Element:ol
				Element:li
				Element:p
					This endpoint requires an OAuth account access token with the
				Element:code
					Send
					scope.
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					POST https://api.dwolla.com/mass-payments
			Node:
			(type) c
			(layer)1
				Element:h3
					Request parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Required
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					_links
				Element:td
					yes
				Element:td
					object
				Element:td
					A _links JSON object describing the desired
				Element:code
					source
					of a mass payment.
				Element:a
					See below
					for possible values for
				Element:code
					source
					and
				Element:code
					destination
					.
				Element:tr
				Element:td
					items
				Element:td
					yes
				Element:td
					array
				Element:td
					an array of item JSON objects that contain unique payments.
				Element:a
					See below
				Element:tr
				Element:td
					metadata
				Element:td
					no
				Element:td
					object
				Element:td
					A metadata JSON object with a maximum of 10 key-value pairs (each key and value must be less than 255 characters).
				Element:tr
				Element:td
					status
				Element:td
					no
				Element:td
					string
				Element:td
					Acceptable value is:
				Element:code
					deferred
					.
			Node:
			(type) c
			(layer)1
				Element:h3
					Source and destination values
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Source Type
				Element:th
					URI
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					Funding source
				Element:td
				Element:code
					https://api.dwolla.com/funding-sources/{id}
				Element:td
					A bank or balance funding source of an
				Element:a
					Account
					.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Destination Type
				Element:th
					URI
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					Account
				Element:td
				Element:code
					https://api.dwolla.com/accounts/{id}
				Element:td
					Destination
				Element:a
					Account
					of a transfer.
				Element:tr
				Element:td
					Email
				Element:td
				Element:code
					mailto:johndoe@email.com
				Element:td
					Email address of existing Dwolla Account or recipient (recipient will create a Dwolla Account to claim funds)
			Node:
			(type) c
			(layer)1
				Element:h3
					Mass payment item
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					_links
				Element:td
					Can return
				Element:code
					mass-payment
					,
				Element:code
					destination
					and
				Element:code
					transfer
					JSON objects that contain relational links to associated resources.
				Element:tr
				Element:td
					amount
				Element:td
					An amount JSON object containing
				Element:code
					currency
					and
				Element:code
					value
					keys.
				Element:tr
				Element:td
					metadata
				Element:td
					A metadata JSON object with a maximum of 10 key-value pairs (each key and value must be less than 255 characters).
			Node:
			(type) c
			(layer)1
				Element:h4
					Item object example:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"_links"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"destination"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"href"
				Element:span
					:
				Element:span
				Element:span
					"https: //api.dwolla.com/accounts/01B47CB2-52AC-42A7-926C-6F1F50B1F271"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
					,
				Element:span
				Element:span
					"value"
				Element:span
					:
				Element:span
				Element:span
					"1.00"
				Element:span
					,
				Element:span
				Element:span
					}
				Element:span
					,
				Element:span
				Element:span
					"metadata"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"key1"
				Element:span
					:
				Element:span
				Element:span
					"value1"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Status and Error Codes
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					HTTP Status
				Element:th
					Code
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					201
				Element:td
					Created
				Element:td
					A mass payment resource was created
				Element:tr
				Element:td
					400
				Element:td
					ValidationError
				Element:td
					Can be: Items exceeded maximum count of 5000, Invalid amount, Invalid metadata, or Invalid funding source.
				Element:tr
				Element:td
					401
				Element:td
					NotAuthorized
				Element:td
					OAuth token does not have Send scope.
			Node:
			(type) c
			(layer)1
				Element:h3
					Request and response (transfer from Account to Customers)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					POST https://api-uat.dwolla.com/mass-payments Accept: application/vnd.dwolla.v1.hal+json Content-Type: application/vnd.dwolla.v1.hal+json Authorization: Bearer pBA9fVDBEyYZCEsLf/wKehyh1RTpzjUj5KzIRfDi0wKTii7DqY Idempotency-Key: 19051a62-3403-11e6-ac61-9e71128cae77 { "_links": { "source": { "href": "https://api-uat.dwolla.com/funding-sources/707177c3-bf15-4e7e-b37c-55c3898d9bf4" } }, "items": [ { "_links": { "destination": { "href": "https://api-uat.dwolla.com/accounts/9c7f8d57-cd45-4e7a-bf7a-914dbd6131db" } }, "amount": { "currency": "USD", "value": "1.00" }, "metadata": { "payment1": "payment1" } }, { "_links": { "destination": { "href": "https://api-uat.dwolla.com/accounts/b442c936-1f87-465d-a4e2-a982164b26bd" } }, "amount": { "currency": "USD", "value": "5.00" }, "metadata": { "payment2": "payment2" } } ], "metadata": { "batch1": "batch1" } } ... HTTP/1.1 201 Created Location: https://api.dwolla.com/mass-payments/d093bcd1-d0c1-41c2-bcb5-a5cc011be0b7
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					request_body
				Element:span
					=
				Element:span
					{
				Element:span
					_links:
				Element:span
					{
				Element:span
					source:
				Element:span
					{
				Element:span
					href:
				Element:span
					"https://api-uat.dwolla.com/funding-sources/707177c3-bf15-4e7e-b37c-55c3898d9bf4"
				Element:span
					}
				Element:span
					},
				Element:span
					items:
				Element:span
					[
				Element:span
					{
				Element:span
					_links:
				Element:span
					{
				Element:span
					destination:
				Element:span
					{
				Element:span
					href:
				Element:span
					"https://api-uat.dwolla.com/accounts/9c7f8d57-cd45-4e7a-bf7a-914dbd6131db"
				Element:span
					}
				Element:span
					},
				Element:span
					amount:
				Element:span
					{
				Element:span
					currency:
				Element:span
					"USD"
				Element:span
					,
				Element:span
					value:
				Element:span
					"1.00"
				Element:span
					},
				Element:span
					metadata:
				Element:span
					{
				Element:span
					payment1:
				Element:span
					"payment1"
				Element:span
					}
				Element:span
					},
				Element:span
					{
				Element:span
					_links:
				Element:span
					{
				Element:span
					destination:
				Element:span
					{
				Element:span
					href:
				Element:span
					"https://api-uat.dwolla.com/accounts/b442c936-1f87-465d-a4e2-a982164b26bd"
				Element:span
					}
				Element:span
					},
				Element:span
					amount:
				Element:span
					{
				Element:span
					currency:
				Element:span
					"USD"
				Element:span
					,
				Element:span
					value:
				Element:span
					"5.00"
				Element:span
					},
				Element:span
					metadata:
				Element:span
					{
				Element:span
					payment2:
				Element:span
					"payment2"
				Element:span
					}
				Element:span
					}
				Element:span
					],
				Element:span
					metadata:
				Element:span
					{
				Element:span
					batch1:
				Element:span
					"batch1"
				Element:span
					}
				Element:span
					}
				Element:span
					# Using DwollaV2 - https://github.com/Dwolla/dwolla-v2-ruby (Recommended)
				Element:span
					mass_payment
				Element:span
					=
				Element:span
					account_token
				Element:span
					.
				Element:span
					post
				Element:span
					"mass-payments"
				Element:span
					,
				Element:span
					request_body
				Element:span
					mass_payment
				Element:span
					.
				Element:span
					headers
				Element:span
					[
				Element:span
					:location
				Element:span
					]
				Element:span
					# => "https://api-uat.dwolla.com/mass-payments/cf1e9e00-09cf-43da-b8b5-a43b3f6192d4"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					/** * No example for this language yet. Coming soon. **/
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					# No example for this language yet. Coming soon.
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					var
				Element:span
					requestBody
				Element:span
					=
				Element:span
					{
				Element:span
					_links
				Element:span
					:
				Element:span
					{
				Element:span
					source
				Element:span
					:
				Element:span
					{
				Element:span
					href
				Element:span
					:
				Element:span
					'https://api-uat.dwolla.com/funding-sources/707177c3-bf15-4e7e-b37c-55c3898d9bf4'
				Element:span
					}
				Element:span
					},
				Element:span
					items
				Element:span
					:
				Element:span
					[
				Element:span
					{
				Element:span
					_links
				Element:span
					:
				Element:span
					{
				Element:span
					destination
				Element:span
					:
				Element:span
					{
				Element:span
					href
				Element:span
					:
				Element:span
					'https://api-uat.dwolla.com/accounts/9c7f8d57-cd45-4e7a-bf7a-914dbd6131db'
				Element:span
					}
				Element:span
					},
				Element:span
					amount
				Element:span
					:
				Element:span
					{
				Element:span
					currency
				Element:span
					:
				Element:span
					'USD'
				Element:span
					,
				Element:span
					value
				Element:span
					:
				Element:span
					'1.00'
				Element:span
					},
				Element:span
					metadata
				Element:span
					:
				Element:span
					{
				Element:span
					payment1
				Element:span
					:
				Element:span
					'payment1'
				Element:span
					}
				Element:span
					},
				Element:span
					{
				Element:span
					_links
				Element:span
					:
				Element:span
					{
				Element:span
					destination
				Element:span
					:
				Element:span
					{
				Element:span
					href
				Element:span
					:
				Element:span
					'https://api-uat.dwolla.com/accounts/b442c936-1f87-465d-a4e2-a982164b26bd'
				Element:span
					}
				Element:span
					},
				Element:span
					amount
				Element:span
					:
				Element:span
					{
				Element:span
					currency
				Element:span
					:
				Element:span
					'USD'
				Element:span
					,
				Element:span
					value
				Element:span
					:
				Element:span
					'5.00'
				Element:span
					},
				Element:span
					metadata
				Element:span
					:
				Element:span
					{
				Element:span
					payment2
				Element:span
					:
				Element:span
					'payment2'
				Element:span
					}
				Element:span
					}
				Element:span
					],
				Element:span
					metadata
				Element:span
					:
				Element:span
					{
				Element:span
					batch1
				Element:span
					:
				Element:span
					'batch1'
				Element:span
					}
				Element:span
					}
				Element:span
					// For Access API applications, an appToken can be used for this endpoint. (https://docsv2.dwolla.com/#application-access-token)
				Element:span
					accountToken
				Element:span
					.
				Element:span
					post
				Element:span
					(
				Element:span
					'mass-payments'
				Element:span
					,
				Element:span
					requestBody
				Element:span
					)
				Element:span
					.
				Element:span
					then
				Element:span
					(
				Element:span
					res
				Element:span
					=>
				Element:span
					res
				Element:span
					.
				Element:span
					headers
				Element:span
					.
				Element:span
					get
				Element:span
					(
				Element:span
					'location'
				Element:span
					));
				Element:span
					// => 'https://api-uat.dwolla.com/mass-payments/cf1e9e00-09cf-43da-b8b5-a43b3f6192d4'
			Node:
			(type) c
			(layer)1
				Element:h2
					Retrieve a mass payment
			Node:
			(type) c
			(layer)1
				Element:p
					This section outlines how to retrieve a mass payment by its id. All mass payments will have a status of
				Element:code
					pending
					upon creation and will move to
				Element:code
					processing
					and finally
				Element:code
					complete
					as the service runs. It is recommended that you retrieve your
				Element:a
					list of mass payment items
					when your mass payment has a status of
				Element:code
					complete
					to determine if any items failed to process successfully.
			Node:
			(type) c
			(layer)1
				Element:ol
				Element:li
				Element:p
					This endpoint requires an OAuth account access token with the
				Element:code
					Transactions
					scope.
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET https://api.dwolla.com/mass-payments/{id}
			Node:
			(type) c
			(layer)1
				Element:h3
					Request parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Required
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
					yes
				Element:td
					string
				Element:td
					The id of the mass payment to retrieve information for.
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Status and Error Codes
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					HTTP Status
				Element:th
					Code
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					404
				Element:td
					NotFound
				Element:td
					Mass payment not found.
			Node:
			(type) c
			(layer)1
				Element:h3
					Request and response
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					GET https://api-uat.dwolla.com/mass-payments/eb467252-808c-4bc0-b86f-a5cd01454563 Accept: application/vnd.dwolla.v1.hal+json Authorization: Bearer pBA9fVDBEyYZCEsLf/wKehyh1RTpzjUj5KzIRfDi0wKTii7DqY ... { "_links": { "self": { "href": "https://api-uat.dwolla.com/mass-payments/eb467252-808c-4bc0-b86f-a5cd01454563" }, "source": { "href": "https://api-uat.dwolla.com/funding-sources/707177c3-bf15-4e7e-b37c-55c3898d9bf4" }, "items": { "href": "https://api-uat.dwolla.com/mass-payments/eb467252-808c-4bc0-b86f-a5cd01454563/items" } }, "id": "eb467252-808c-4bc0-b86f-a5cd01454563", "status": "processing", "created": "2016-03-18T19:44:16.000Z", "metadata": {} }
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					mass_payment_url
				Element:span
					=
				Element:span
					"https://api-uat.dwolla.com/mass-payments/eb467252-808c-4bc0-b86f-a5cd01454563"
				Element:span
					# Using DwollaV2 - https://github.com/Dwolla/dwolla-v2-ruby (Recommended)
				Element:span
					mass_payment
				Element:span
					=
				Element:span
					account_token
				Element:span
					.
				Element:span
					get
				Element:span
					mass_payment_url
				Element:span
					mass_payment
				Element:span
					.
				Element:span
					status
				Element:span
					# => "processing"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					/** * No example for this language yet. Coming soon. **/
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					# No example for this language yet. Coming soon.
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					var
				Element:span
					massPaymentUrl
				Element:span
					=
				Element:span
					'https://api-uat.dwolla.com/mass-payments/eb467252-808c-4bc0-b86f-a5cd01454563'
				Element:span
					;
				Element:span
					// For Access API applications, an appToken can be used for this endpoint. (https://docsv2.dwolla.com/#application-access-token)
				Element:span
					accountToken
				Element:span
					.
				Element:span
					get
				Element:span
					(
				Element:span
					massPaymentUrl
				Element:span
					)
				Element:span
					.
				Element:span
					then
				Element:span
					(
				Element:span
					res
				Element:span
					=>
				Element:span
					res
				Element:span
					.
				Element:span
					body
				Element:span
					.
				Element:span
					status
				Element:span
					);
				Element:span
					// => 'processing'
			Node:
			(type) c
			(layer)1
				Element:h2
					Update a mass payment
			Node:
			(type) c
			(layer)1
				Element:p
					This section covers how to update a mass payment’s status to
				Element:code
					pending
					which triggers processing on a created and deferred mass payment, or
				Element:code
					cancelled
					which cancels a created and deferred mass payment.
			Node:
			(type) c
			(layer)1
				Element:ol
				Element:li
				Element:p
					This endpoint requires an OAuth access token with the
				Element:code
					Send
					scope.
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					POST https://api.dwolla.com/mass-payments/{id}
			Node:
			(type) c
			(layer)1
				Element:h3
					Request parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Required
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
					yes
				Element:td
					string
				Element:td
					id of mass payment to update.
				Element:tr
				Element:td
					status
				Element:td
					yes
				Element:td
					string
				Element:td
					Either
				Element:code
					pending
					or
				Element:code
					cancelled
					depending on the action you want to take on a deferred mass payment.
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Status and Error Codes
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					HTTP Status
				Element:th
					Code
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					404
				Element:td
					NotFound
				Element:td
					Mass payment not found.
				Element:tr
				Element:td
					400
				Element:td
					ValidationError
				Element:td
					Invalid status. Allowed types are pending, cancelled.
			Node:
			(type) c
			(layer)1
				Element:h3
					Request and response
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					POST https://api.dwolla.com/mass-payments/692486f8-29f6-4516-a6a5-c69fd2ce854c Accept: application/vnd.dwolla.v1.hal+json Content-Type: application/vnd.dwolla.v1.hal+json Authorization: Bearer pBA9fVDBEyYZCEsLf/wKehyh1RTpzjUj5KzIRfDi0wKTii7DqY ... { "status": "pending" }
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					mass_payment_url
				Element:span
					=
				Element:span
					'https://api.dwolla.com/mass-payments/692486f8-29f6-4516-a6a5-c69fd2ce854c'
				Element:span
					request_body
				Element:span
					=
				Element:span
					{
				Element:span
					"status"
				Element:span
					=>
				Element:span
					"pending"
				Element:span
					,
				Element:span
					}
				Element:span
					# Using DwollaV2 - https://github.com/Dwolla/dwolla-v2-ruby (Recommended)
				Element:span
					mass_payment
				Element:span
					=
				Element:span
					account_token
				Element:span
					.
				Element:span
					post
				Element:span
					"
				Element:span
					#{
				Element:span
					mass_payment_url
				Element:span
					}
				Element:span
					"
				Element:span
					,
				Element:span
					request_body
				Element:span
					mass_payment
				Element:span
					.
				Element:span
					status
				Element:span
					# => "pending"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					/** * No example for this language yet. Coming soon. **/
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					mass_payment_url
				Element:span
					=
				Element:span
					'https://api.dwolla.com/mass-payments/692486f8-29f6-4516-a6a5-c69fd2ce854c'
				Element:span
					request_body
				Element:span
					=
				Element:span
					{
				Element:span
					"status"
				Element:span
					:
				Element:span
					"pending"
				Element:span
					}
				Element:span
					# Using dwollav2 - https://github.com/Dwolla/dwolla-v2-python (Recommended)
				Element:span
					mass_payments
				Element:span
					=
				Element:span
					account_token
				Element:span
					.
				Element:span
					post
				Element:span
					(
				Element:span
					'mass-payments'
				Element:span
					,
				Element:span
					request_body
				Element:span
					)
				Element:span
					mass_payments
				Element:span
					.
				Element:span
					body
				Element:span
					[
				Element:span
					'status'
				Element:span
					]
				Element:span
					# => 'pending'
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					var
				Element:span
					massPaymentUrl
				Element:span
					=
				Element:span
					'https://api.dwolla.com/mass-payments/692486f8-29f6-4516-a6a5-c69fd2ce854c'
				Element:span
					;
				Element:span
					var
				Element:span
					requestBody
				Element:span
					=
				Element:span
					{
				Element:span
					status
				Element:span
					:
				Element:span
					"pending"
				Element:span
					};
				Element:span
					accountToken
				Element:span
					.
				Element:span
					post
				Element:span
					(
				Element:span
					massPaymentUrl
				Element:span
					,
				Element:span
					requestBody
				Element:span
					)
				Element:span
					.
				Element:span
					then
				Element:span
					(
				Element:span
					res
				Element:span
					=>
				Element:span
					res
				Element:span
					.
				Element:span
					body
				Element:span
					.
				Element:span
					status
				Element:span
					);
				Element:span
					// => "pending"
			Node:
			(type) c
			(layer)1
				Element:h2
					List items for a mass payment
			Node:
			(type) c
			(layer)1
				Element:p
					A mass payment contains a list of payments called
				Element:code
					items
					. An
				Element:code
					item
					is distinct from the transfer which it creates. An item can contain a status of either
				Element:code
					failed
					,
				Element:code
					pending
					, or
				Element:code
					success
					depending on whether the payment was created by the Dwolla service or not. A mass payment item status of
				Element:code
					success
					is an indication that a transfer was successfully created. A mass payment’s items will be returned in the
				Element:code
					_embedded
					object as a list of
				Element:code
					items
					.
			Node:
			(type) c
			(layer)1
				Element:ol
				Element:li
				Element:p
					This endpoint requires an OAuth account access token with the
				Element:code
					Transactions
					scope.
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET https://api.dwolla.com/mass-payments/{id}/items
			Node:
			(type) c
			(layer)1
				Element:h3
					Request parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Required
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
					yes
				Element:td
					string
				Element:td
					Mass payment unique identifier.
				Element:tr
				Element:td
					limit
				Element:td
					no
				Element:td
					integer
				Element:td
					How many results to return. Defaults to 25.
				Element:tr
				Element:td
					offset
				Element:td
					no
				Element:td
					integer
				Element:td
					How many results to skip.
				Element:tr
				Element:td
					status
				Element:td
					no
				Element:td
					string
				Element:td
					Filter results on item status. Possible values:
				Element:code
					failed
					,
				Element:code
					pending
					, and
				Element:code
					success
					. Values delimited by
				Element:code
					&status=
					(i.e. -
				Element:code
					/items?status=failed&status=pending
					).
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Status and Error Codes
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					HTTP Status
				Element:th
					Code
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					403
				Element:td
					Forbidden
				Element:td
					Not authorized to list mass payment items.
				Element:tr
				Element:td
					404
				Element:td
					NotFound
				Element:td
					Mass payment not found.
			Node:
			(type) c
			(layer)1
				Element:h3
					Request and response
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					GET https://api-uat.dwolla.com/mass-payments/eb467252-808c-4bc0-b86f-a5cd01454563/items Accept: application/vnd.dwolla.v1.hal+json Authorization: Bearer pBA9fVDBEyYZCEsLf/wKehyh1RTpzjUj5KzIRfDi0wKTii7DqY ... { "_links": { "self": { "href": "https://api-uat.dwolla.com/mass-payments/eb467252-808c-4bc0-b86f-a5cd01454563/items" }, "first": { "href": "https://api-uat.dwolla.com/mass-payments/eb467252-808c-4bc0-b86f-a5cd01454563/items?limit=25&offset=0" }, "last": { "href": "https://api-uat.dwolla.com/mass-payments/eb467252-808c-4bc0-b86f-a5cd01454563/items?limit=25&offset=0" } }, "_embedded": { "items": [ { "_links": { "self": { "href": "https://api-uat.dwolla.com/mass-payment-items/2f845bc9-41ed-e511-80df-0aa34a9b2388" }, "mass-payment": { "href": "https://api-uat.dwolla.com/mass-payments/eb467252-808c-4bc0-b86f-a5cd01454563" }, "destination": { "href": "https://api-uat.dwolla.com/accounts/9c7f8d57-cd45-4e7a-bf7a-914dbd6131db" }, "transfer": { "href": "https://api-uat.dwolla.com/transfers/fa3999db-41ed-e511-80df-0aa34a9b2388" } }, "id": "2f845bc9-41ed-e511-80df-0aa34a9b2388", "status": "success", "amount": { "value": "1.00", "currency": "USD" }, "metadata": { "item1": "item1" } }, { "_links": { "self": { "href": "https://api-uat.dwolla.com/mass-payment-items/30845bc9-41ed-e511-80df-0aa34a9b2388" }, "mass-payment": { "href": "https://api-uat.dwolla.com/mass-payments/eb467252-808c-4bc0-b86f-a5cd01454563" }, "destination": { "href": "https://api-uat.dwolla.com/accounts/b442c936-1f87-465d-a4e2-a982164b26bd" }, "transfer": { "href": "https://api-uat.dwolla.com/transfers/fb3999db-41ed-e511-80df-0aa34a9b2388" } }, "id": "30845bc9-41ed-e511-80df-0aa34a9b2388", "status": "success", "amount": { "value": "2.00", "currency": "USD" }, "metadata": { "item2": "item2" } } ] }, "total": 2 }
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					mass_payment_url
				Element:span
					=
				Element:span
					'https://api-uat.dwolla.com/mass-payments/eb467252-808c-4bc0-b86f-a5cd01454563'
				Element:span
					# Using DwollaV2 - https://github.com/Dwolla/dwolla-v2-ruby (Recommended)
				Element:span
					mass_payment_items
				Element:span
					=
				Element:span
					account_token
				Element:span
					.
				Element:span
					get
				Element:span
					"
				Element:span
					#{
				Element:span
					mass_payment_url
				Element:span
					}
				Element:span
					/items"
				Element:span
					mass_payment_items
				Element:span
					.
				Element:span
					total
				Element:span
					# => 2
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					/** * No example for this language yet. Coming soon. **/
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					# No example for this language yet. Coming soon.
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					var
				Element:span
					massPaymentUrl
				Element:span
					=
				Element:span
					'https://api-uat.dwolla.com/mass-payments/eb467252-808c-4bc0-b86f-a5cd01454563'
				Element:span
					// For Access API applications, an appToken can be used for this endpoint. (https://docsv2.dwolla.com/#application-access-token)
				Element:span
					accountToken
				Element:span
					.
				Element:span
					get
				Element:span
					(
				Element:span
					`
				Element:span
					$
				Element:span
					{
				Element:span
					massPaymentUrl
				Element:span
					}
				Element:span
					/items`
				Element:span
					)
				Element:span
					.
				Element:span
					then
				Element:span
					(
				Element:span
					res
				Element:span
					=>
				Element:span
					res
				Element:span
					.
				Element:span
					body
				Element:span
					.
				Element:span
					total
				Element:span
					);
				Element:span
					// => 2
			Node:
			(type) c
			(layer)1
				Element:h2
					Retrieve a mass payment item
			Node:
			(type) c
			(layer)1
				Element:p
					This section covers how to retrieve a mass payment item by its unique identifier. An item can contain
				Element:code
					_links
					to: the mass payment the item belongs to, the transfer created from the item, and the destination user.
			Node:
			(type) c
			(layer)1
				Element:ol
				Element:li
				Element:p
					This endpoint requires an OAuth account access token with the
				Element:code
					Transactions
					scope.
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET https://api.dwolla.com/mass-payment-items/{id}
			Node:
			(type) c
			(layer)1
				Element:h3
					Request parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Required
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
					yes
				Element:td
					string
				Element:td
					The id of the item to be retrieved in a mass payment.
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Status and Error Codes
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					HTTP Status
				Element:th
					Code
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					403
				Element:td
					Forbidden
				Element:td
					Not authorized to list mass payment items.
				Element:tr
				Element:td
					404
				Element:td
					NotFound
				Element:td
					Mass payment not found.
			Node:
			(type) c
			(layer)1
				Element:h3
					Request and response
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					GET https://api-uat.dwolla.com/mass-payment-items/c1c7d293-63ec-e511-80df-0aa34a9b2388 Accept: application/vnd.dwolla.v1.hal+json Authorization: Bearer pBA9fVDBEyYZCEsLf/wKehyh1RTpzjUj5KzIRfDi0wKTii7DqY ... { "_links": { "self": { "href": "https://api-uat.dwolla.com/mass-payment-items/2f845bc9-41ed-e511-80df-0aa34a9b2388" }, "mass-payment": { "href": "https://api-uat.dwolla.com/mass-payments/eb467252-808c-4bc0-b86f-a5cd01454563" }, "destination": { "href": "https://api-uat.dwolla.com/accounts/9c7f8d57-cd45-4e7a-bf7a-914dbd6131db" }, "transfer": { "href": "https://api-uat.dwolla.com/transfers/fa3999db-41ed-e511-80df-0aa34a9b2388" } }, "id": "2f845bc9-41ed-e511-80df-0aa34a9b2388", "status": "success", "amount": { "value": "1.00", "currency": "USD" }, "metadata": { "item1": "item1" } }
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					mass_payment_item_url
				Element:span
					=
				Element:span
					'https://api-uat.dwolla.com/mass-payment-items/c1c7d293-63ec-e511-80df-0aa34a9b2388'
				Element:span
					# Using DwollaV2 - https://github.com/Dwolla/dwolla-v2-ruby (Recommended)
				Element:span
					mass_payment_item
				Element:span
					=
				Element:span
					account_token
				Element:span
					.
				Element:span
					get
				Element:span
					mass_payment_item_url
				Element:span
					mass_payment_item
				Element:span
					.
				Element:span
					status
				Element:span
					# => "success"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					/** * No example for this language yet. Coming soon. **/
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					mass_payment_item_url
				Element:span
					=
				Element:span
					'https://api-uat.dwolla.com/mass-payment-items/c1c7d293-63ec-e511-80df-0aa34a9b2388'
				Element:span
					# Using dwollav2 - https://github.com/Dwolla/dwolla-v2-python (Recommended)
				Element:span
					mass_payment_item
				Element:span
					=
				Element:span
					account_token
				Element:span
					.
				Element:span
					get
				Element:span
					(
				Element:span
					mass_payment_item_url
				Element:span
					)
				Element:span
					mass_payment_item
				Element:span
					.
				Element:span
					body
				Element:span
					[
				Element:span
					'status'
				Element:span
					]
				Element:span
					# => 'success'
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					var
				Element:span
					massPaymentItemUrl
				Element:span
					=
				Element:span
					'https://api-uat.dwolla.com/mass-payment-items/c1c7d293-63ec-e511-80df-0aa34a9b2388'
				Element:span
					;
				Element:span
					// For Access API applications, an appToken can be used for this endpoint. (https://docsv2.dwolla.com/#application-access-token)
				Element:span
					accountToken
				Element:span
					.
				Element:span
					get
				Element:span
					(
				Element:span
					massPaymentItemUrl
				Element:span
					)
				Element:span
					.
				Element:span
					then
				Element:span
					(
				Element:span
					res
				Element:span
					=>
				Element:span
					res
				Element:span
					.
				Element:span
					body
				Element:span
					.
				Element:span
					status
				Element:span
					);
				Element:span
					// => 'success'
			Node:
			(type) c
			(layer)1
				Element:hr
			Node:
			(type) h1
			(layer)1
				Element:h1
					Events
			Node:
			(type) c
			(layer)1
				Element:p
					When the state of a resource changes, Dwolla creates a new event resource to record the change. When an Event is created, a
				Element:a
					Webhook
					will be created to deliver the Event to any URLs specified by your active
				Element:a
					Webhook Subscriptions
					.
			Node:
			(type) c
			(layer)1
				Element:h3
					Events resource
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					_links
				Element:td
					Contains links to the event, associated resource, and the Account associated with the event.
				Element:tr
				Element:td
					id
				Element:td
					Event id
				Element:tr
				Element:td
					created
				Element:td
					ISO-8601 timestamp when event was created
				Element:tr
				Element:td
					topic
				Element:td
					Type of event
				Element:tr
				Element:td
					resourceId
				Element:td
					id of the resource associated with the event.
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"_links"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"self"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"href"
				Element:span
					:
				Element:span
				Element:span
					"https://api.dwolla.com/events/f8e70f48-b7ff-47d0-9d3d-62a099363a76"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"href"
				Element:span
					:
				Element:span
				Element:span
					"https://api.dwolla.com/transfers/48CFDDB4-1E74-E511-80DB-0AA34A9B2388"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"account"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"href"
				Element:span
					:
				Element:span
				Element:span
					"https://api.dwolla.com/accounts/ca32853c-48fa-40be-ae75-77b37504581b"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"f8e70f48-b7ff-47d0-9d3d-62a099363a76"
				Element:span
					,
				Element:span
				Element:span
					"created"
				Element:span
					:
				Element:span
				Element:span
					"2015-10-16T15:58:15.000Z"
				Element:span
					,
				Element:span
				Element:span
					"topic"
				Element:span
					:
				Element:span
				Element:span
					"transfer_created"
				Element:span
					,
				Element:span
				Element:span
					"resourceId"
				Element:span
					:
				Element:span
				Element:span
					"48CFDDB4-1E74-E511-80DB-0AA34A9B2388"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h3
					Event topics - (
				Element:a
					Partner Dwolla Account
					)
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Topic
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					funding_source_added
				Element:td
					A funding source was added to a Dwolla account.
				Element:tr
				Element:td
					funding_source_removed
				Element:td
					A funding source was removed from a Dwolla account.
				Element:tr
				Element:td
					funding_source_verified
				Element:td
					A funding source was marked as
				Element:code
					verified
					.
				Element:tr
				Element:td
					microdeposits_added
				Element:td
					Two <=10¢ transfers to a Dwolla account’s linked bank account were initiated.
				Element:tr
				Element:td
					microdeposits_failed
				Element:td
					The two <=10¢ transfers to a Dwolla account’s linked bank account failed to clear successfully.
				Element:tr
				Element:td
					microdeposits_completed
				Element:td
					The two <=10¢ transfers to a Dwolla account’s linked bank account have cleared successfully.
				Element:tr
				Element:td
					microdeposits_maxattempts
				Element:td
					The account has reached their max verification attempts limit of three. The account can no longer verify their funding source with the completed micro-deposit amounts.
				Element:tr
				Element:td
					bank_transfer_created
				Element:td
					A bank transfer was created.
				Element:tr
				Element:td
					bank_transfer_cancelled
				Element:td
					A pending bank transfer has been cancelled, and will not process further.
				Element:tr
				Element:td
					bank_transfer_failed
				Element:td
					A transfer failed to clear successfully. Usually, this is a result of an ACH failure (insufficient funds, etc.).
				Element:tr
				Element:td
					bank_transfer_completed
				Element:td
					A bank transfer has cleared successfully.
				Element:tr
				Element:td
					transfer_created
				Element:td
					A transfer was created.
				Element:tr
				Element:td
					transfer_cancelled
				Element:td
					A pending transfer has been cancelled, and will not process further.
				Element:tr
				Element:td
					transfer_failed
				Element:td
					A transfer failed to clear successfully.
				Element:tr
				Element:td
					transfer_reclaimed
				Element:td
					The transfer was returned to the sender after remaining unclaimed by the intended recipient for a period of time.
				Element:tr
				Element:td
					transfer_completed
				Element:td
					A transfer has cleared successfully.
				Element:tr
				Element:td
					mass_payment_created
				Element:td
					A mass payment was created.
				Element:tr
				Element:td
					mass_payment_completed
				Element:td
					A mass payment completed.
				Element:tr
				Element:td
					mass_payment_cancelled
				Element:td
					A created and deferred mass payment was cancelled.
				Element:tr
				Element:td
					account_suspended
				Element:td
					An account was suspended.
				Element:tr
				Element:td
					account_activated
				Element:td
					A Dwolla account moves from deactive or suspended to active state of verification.
			Node:
			(type) c
			(layer)1
				Element:h3
					Event topics - (
				Element:a
					Customers
					)
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Topic
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					customer_created
				Element:td
					A Customer was created.
				Element:tr
				Element:td
					customer_verification_document_needed
				Element:td
					Additional documentation is needed to verify a Customer.
				Element:tr
				Element:td
					customer_verification_document_uploaded
				Element:td
					A verification document was uploaded for a Customer.
				Element:tr
				Element:td
					customer_verification_document_failed
				Element:td
					A verification document has been rejected for a Customer.
				Element:tr
				Element:td
					customer_verification_document_approved
				Element:td
					A verification document was approved for a Customer.
				Element:tr
				Element:td
					customer_reverification_needed
				Element:td
					Incomplete information was received for a Customer; updated information is needed to verify the Customer.
				Element:tr
				Element:td
					customer_verified
				Element:td
					A Customer was verified.
				Element:tr
				Element:td
					customer_suspended
				Element:td
					A Customer was suspended.
				Element:tr
				Element:td
					customer_activated
				Element:td
					A Customer moves from deactive or suspended to active state of verification.
				Element:tr
				Element:td
					customer_funding_source_added
				Element:td
					A funding source was added to a Customer.
				Element:tr
				Element:td
					customer_funding_source_removed
				Element:td
					A funding source was removed from a Customer.
				Element:tr
				Element:td
					customer_funding_source_verified
				Element:td
					A Customer’s funding source was marked as verified.
				Element:tr
				Element:td
					customer_microdeposits_added
				Element:td
					Two <=10¢ transfers to a Customer’s linked bank account were initiated.
				Element:tr
				Element:td
					customer_microdeposits_failed
				Element:td
					The two <=10¢ transfers to a Customer’s linked bank account failed to clear successfully.
				Element:tr
				Element:td
					customer_microdeposits_completed
				Element:td
					The two <=10¢ transfers to a Customer’s linked bank account have cleared successfully.
				Element:tr
				Element:td
					customer_microdeposits_maxattempts
				Element:td
					The Customer has reached their max verification attempts limit of three. The Customer can no longer verify their funding source with the completed micro-deposit amounts.
				Element:tr
				Element:td
					customer_bank_transfer_created
				Element:td
					A bank transfer was created for a Customer. Represents funds moving either from a verified Customer’s bank to the Dwolla network or from the Dwolla network to a verified Customer’s bank.
				Element:tr
				Element:td
					customer_bank_transfer_cancelled
				Element:td
					A pending Customer bank transfer has been cancelled, and will not process further. Represents a cancellation of funds either transferring from a verified Customer’s bank to the Dwolla network or from the Dwolla network to a verified Customer’s bank.
				Element:tr
				Element:td
					customer_bank_transfer_failed
				Element:td
					A Customer bank transfer failed to clear successfully. Usually, this is a result of an ACH failure (insufficient funds, etc.). Represents funds failing to clear either from a verified Customer’s bank to the Dwolla network or from the Dwolla network to a verified Customer’s bank.
				Element:tr
				Element:td
					customer_bank_transfer_completed
				Element:td
					A bank transfer that was created for a Customer has cleared successfully. Represents funds clearing either from a verified Customer’s bank to the Dwolla network or from the Dwolla network to a verified Customer’s bank.
				Element:tr
				Element:td
					customer_transfer_created
				Element:td
					A transfer was created for a Customer. Represents funds transferring from a verified Customer’s balance or unverified Customer’s bank
				Element:tr
				Element:td
					customer_transfer_cancelled
				Element:td
					A pending transfer has been cancelled, and will not process further. Represents a cancellation of funds transferring either to an unverified Customer’s bank or to a verified Customer’s balance.
				Element:tr
				Element:td
					customer_transfer_failed
				Element:td
					A Customer transfer failed to clear successfully. Represents funds failing to clear either to an unverified Customer’s bank or to a verified Customer’s balance.
				Element:tr
				Element:td
					customer_transfer_completed
				Element:td
					A Customer transfer has cleared successfully. Represents funds clearing either to an unverified Customer’s bank or to a verified Customer’s balance.
				Element:tr
				Element:td
					customer_mass_payment_created
				Element:td
					A Verified Customer’s mass payment was created.
				Element:tr
				Element:td
					customer_mass_payment_completed
				Element:td
					A Verified Customer’s mass payment completed.
				Element:tr
				Element:td
					customer_mass_payment_cancelled
				Element:td
					A Verified Customer’s created and deferred mass payment was cancelled.
			Node:
			(type) c
			(layer)1
				Element:h2
					List events
			Node:
			(type) c
			(layer)1
				Element:p
					Retrieve a list of events for the application.
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET https://api.dwolla.com/events
			Node:
			(type) c
			(layer)1
				Element:h3
					Request parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Required
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					limit
				Element:td
					no
				Element:td
					integer
				Element:td
					How many results to return
				Element:tr
				Element:td
					offset
				Element:td
					no
				Element:td
					integer
				Element:td
					How many results to skip
			Node:
			(type) c
			(layer)1
				Element:h3
					Errors
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					HTTP Status
				Element:th
					Message
				Element:tbody
				Element:tr
				Element:td
					404
				Element:td
					Resource not found.
			Node:
			(type) c
			(layer)1
				Element:h3
					Request and response
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					GET https://api.dwolla.com/events Accept: application/vnd.dwolla.v1.hal+json Authorization: Bearer pBA9fVDBEyYZCEsLf/wKehyh1RTpzjUj5KzIRfDi0wKTii7DqY ... { "_links": { "self": { "href": "https://api.dwolla.com/events" }, "first": { "href": "https://api.dwolla.com/events?limit=25&offset=0" }, "last": { "href": "https://api.dwolla.com/events?limit=25&offset=150" }, "next": { "href": "https://api.dwolla.com/events?limit=25&offset=25" } }, "_embedded": { "events": [ { "_links": { "self": { "href": "https://api.dwolla.com/events/78e57644-56e4-4da2-b743-059479f2e80f" }, "resource": { "href": "https://api.dwolla.com/transfers/47CFDDB4-1E74-E511-80DB-0AA34A9B2388" }, "account": { "href": "https://api.dwolla.com/accounts/ca32853c-48fa-40be-ae75-77b37504581b" } }, "id": "78e57644-56e4-4da2-b743-059479f2e80f", "created": "2015-10-16T15:58:18.000Z", "topic": "bank_transfer_created", "resourceId": "47CFDDB4-1E74-E511-80DB-0AA34A9B2388" }, { "_links": { "self": { "href": "https://api.dwolla.com/events/f8e70f48-b7ff-47d0-9d3d-62a099363a76" }, "resource": { "href": "https://api.dwolla.com/transfers/48CFDDB4-1E74-E511-80DB-0AA34A9B2388" }, "account": { "href": "https://api.dwolla.com/accounts/ca32853c-48fa-40be-ae75-77b37504581b" } }, "id": "f8e70f48-b7ff-47d0-9d3d-62a099363a76", "created": "2015-10-16T15:58:15.000Z", "topic": "transfer_created", "resourceId": "48CFDDB4-1E74-E511-80DB-0AA34A9B2388" }, { "_links": { "self": { "href": "https://api.dwolla.com/events/9f0167e0-dce6-4a1a-ad26-30015d6f1cc1" }, "resource": { "href": "https://api.dwolla.com/transfers/08A166BC-1B74-E511-80DB-0AA34A9B2388" }, "account": { "href": "https://api.dwolla.com/accounts/ca32853c-48fa-40be-ae75-77b37504581b" } }, "id": "9f0167e0-dce6-4a1a-ad26-30015d6f1cc1", "created": "2015-10-16T15:37:03.000Z", "topic": "bank_transfer_created", "resourceId": "08A166BC-1B74-E511-80DB-0AA34A9B2388" } ] }, "total": 3 }
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					# Using DwollaV2 - https://github.com/Dwolla/dwolla-v2-ruby (Recommended)
				Element:span
					events
				Element:span
					=
				Element:span
					app_token
				Element:span
					.
				Element:span
					get
				Element:span
					"events"
				Element:span
					events
				Element:span
					.
				Element:span
					total
				Element:span
					# => 3
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					<?php
				Element:span
					$eventsApi
				Element:span
					=
				Element:span
					new
				Element:span
					DwollaSwagger\EventsApi
				Element:span
					(
				Element:span
					$apiClient
				Element:span
					);
				Element:span
					$events
				Element:span
					=
				Element:span
					$eventsApi
				Element:span
					->
				Element:span
					events
				Element:span
					();
				Element:span
					$events
				Element:span
					->
				Element:span
					total
				Element:span
					;
				Element:span
					# => 3
				Element:span
					?>
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					# Using dwollav2 - https://github.com/Dwolla/dwolla-v2-python (Recommended)
				Element:span
					events
				Element:span
					=
				Element:span
					app_token
				Element:span
					.
				Element:span
					get
				Element:span
					(
				Element:span
					'events'
				Element:span
					)
				Element:span
					events
				Element:span
					.
				Element:span
					body
				Element:span
					[
				Element:span
					'total'
				Element:span
					]
				Element:span
					# => 3
				Element:span
					# Using dwollaswagger - https://github.com/Dwolla/dwolla-swagger-python
				Element:span
					events_api
				Element:span
					=
				Element:span
					dwollaswagger
				Element:span
					.
				Element:span
					EventsApi
				Element:span
					(
				Element:span
					client
				Element:span
					)
				Element:span
					events
				Element:span
					=
				Element:span
					events_api
				Element:span
					.
				Element:span
					events
				Element:span
					()
				Element:span
					events
				Element:span
					.
				Element:span
					total
				Element:span
					# => 3
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					applicationToken
				Element:span
					.
				Element:span
					get
				Element:span
					(
				Element:span
					'events'
				Element:span
					)
				Element:span
					.
				Element:span
					then
				Element:span
					(
				Element:span
					res
				Element:span
					=>
				Element:span
					res
				Element:span
					.
				Element:span
					body
				Element:span
					.
				Element:span
					total
				Element:span
					);
				Element:span
					// => 3
			Node:
			(type) c
			(layer)1
				Element:h2
					Retrieve an event
			Node:
			(type) c
			(layer)1
				Element:p
					This section covers how to retrieve an event by id.
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET https://api.dwolla.com/events/{id}
			Node:
			(type) c
			(layer)1
				Element:h3
					Request parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Required
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
					yes
				Element:td
					string
				Element:td
					ID of application event to get.
			Node:
			(type) c
			(layer)1
				Element:h3
					Errors
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					HTTP Status
				Element:th
					Message
				Element:tbody
				Element:tr
				Element:td
					404
				Element:td
					Application event not found.
			Node:
			(type) c
			(layer)1
				Element:h3
					Request and response
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					GET /events/81f6e13c-557c-4449-9331-da5c65e61095 Accept: application/vnd.dwolla.v1.hal+json Authorization: Bearer pBA9fVDBEyYZCEsLf/wKehyh1RTpzjUj5KzIRfDi0wKTii7DqY ... { "_links": { "self": { "href": "https://api.dwolla.com/events/81f6e13c-557c-4449-9331-da5c65e61095" }, "resource": { "href": "https://api.dwolla.com/transfers/09A166BC-1B74-E511-80DB-0AA34A9B2388" }, "account": { "href": "https://api.dwolla.com/accounts/ca32853c-48fa-40be-ae75-77b37504581b" }, "customer": { "href": "https://api.dwolla.com/customers/07d59716-ef22-4fe6-98e8-f3190233dfb8" } }, "id": "81f6e13c-557c-4449-9331-da5c65e61095", "created": "2015-10-16T15:37:02.000Z", "topic": "customer_transfer_created", "resourceId": "09A166BC-1B74-E511-80DB-0AA34A9B2388" }
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					event_url
				Element:span
					=
				Element:span
					'https://api.dwolla.com/events/81f6e13c-557c-4449-9331-da5c65e61095'
				Element:span
					# Using DwollaV2 - https://github.com/Dwolla/dwolla-v2-ruby (Recommended)
				Element:span
					event
				Element:span
					=
				Element:span
					app_token
				Element:span
					.
				Element:span
					get
				Element:span
					event_url
				Element:span
					event
				Element:span
					.
				Element:span
					topic
				Element:span
					# => "customer_transfer_created"
				Element:span
					# Using DwollaSwagger - https://github.com/Dwolla/dwolla-swagger-ruby
				Element:span
					event
				Element:span
					=
				Element:span
					DwollaSwagger
				Element:span
					::
				Element:span
					EventsApi
				Element:span
					.
				Element:span
					id
				Element:span
					(
				Element:span
					event_url
				Element:span
					)
				Element:span
					event
				Element:span
					.
				Element:span
					topic
				Element:span
					# => "customer_transfer_created"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					<?php
				Element:span
					$eventUrl
				Element:span
					=
				Element:span
					'https://api.dwolla.com/events/81f6e13c-557c-4449-9331-da5c65e61095'
				Element:span
					;
				Element:span
					$eventsApi
				Element:span
					=
				Element:span
					new
				Element:span
					DwollaSwagger\EventsApi
				Element:span
					(
				Element:span
					$apiClient
				Element:span
					);
				Element:span
					$event
				Element:span
					=
				Element:span
					$eventsApi
				Element:span
					->
				Element:span
					id
				Element:span
					(
				Element:span
					$eventUrl
				Element:span
					);
				Element:span
					$event
				Element:span
					->
				Element:span
					topic
				Element:span
					;
				Element:span
					# => "customer_transfer_created"
				Element:span
					?>
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					event_url
				Element:span
					=
				Element:span
					'https://api.dwolla.com/events/81f6e13c-557c-4449-9331-da5c65e61095'
				Element:span
					# Using dwollav2 - https://github.com/Dwolla/dwolla-v2-python (Recommended)
				Element:span
					event
				Element:span
					=
				Element:span
					app_token
				Element:span
					.
				Element:span
					get
				Element:span
					(
				Element:span
					event_url
				Element:span
					)
				Element:span
					event
				Element:span
					.
				Element:span
					body
				Element:span
					[
				Element:span
					'topic'
				Element:span
					]
				Element:span
					# => 'customer_transfer_created'
				Element:span
					# Using dwollaswagger - https://github.com/Dwolla/dwolla-swagger-python
				Element:span
					events_api
				Element:span
					=
				Element:span
					dwollaswagger
				Element:span
					.
				Element:span
					EventsApi
				Element:span
					(
				Element:span
					client
				Element:span
					)
				Element:span
					event
				Element:span
					=
				Element:span
					events_api
				Element:span
					.
				Element:span
					id
				Element:span
					(
				Element:span
					event_url
				Element:span
					)
				Element:span
					event
				Element:span
					.
				Element:span
					topic
				Element:span
					# => 'customer_transfer_created'
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					var
				Element:span
					eventUrl
				Element:span
					=
				Element:span
					'https://api.dwolla.com/events/81f6e13c-557c-4449-9331-da5c65e61095'
				Element:span
					;
				Element:span
					applicationToken
				Element:span
					.
				Element:span
					get
				Element:span
					(
				Element:span
					eventUrl
				Element:span
					)
				Element:span
					.
				Element:span
					then
				Element:span
					(
				Element:span
					res
				Element:span
					=>
				Element:span
					res
				Element:span
					.
				Element:span
					body
				Element:span
					.
				Element:span
					topic
				Element:span
					);
				Element:span
					// => 'customer_transfer_created'
			Node:
			(type) c
			(layer)1
				Element:hr
			Node:
			(type) h1
			(layer)1
				Element:h1
					Webhook subscriptions
			Node:
			(type) c
			(layer)1
				Element:p
					Create a webhook subscription to receive
				Element:code
					POST
					requests from Dwolla (called webhooks) when events associated with your application occur.
				Element:a
					Webhooks
					are sent to a URL which you provide when creating a webhook subscription. Refer to the
				Element:a
					events
					section for the list of events that trigger webhooks.
			Node:
			(type) c
			(layer)1
				Element:h5
				Element:strong
					Automatic pause of a webhook subscription
			Node:
			(type) c
			(layer)1
				Element:p
					Dwolla will automatically pause subscribed webhook endpoints that are no longer reachable. The webhook subscription will be paused after
				Element:strong
					400 consecutive failures
					. This will help us to ensure that unavailable endpoints don’t cause delays or issues in delivery of notifications for other API partners. Webhook subscriptions can be unpaused by calling
				Element:a
					this endpoint
					.
			Node:
			(type) c
			(layer)1
				Element:h3
					Acknowledgement and retries
			Node:
			(type) c
			(layer)1
				Element:p
					When your application receives a
				Element:a
					webhook
					, it should respond with a HTTP 2xx status code to indicate successful receipt. If Dwolla receives a status code greater than a HTTP 400, or your application fails to respond within 20 seconds of the attempt, another attempt will be made.
			Node:
			(type) c
			(layer)1
				Element:p
					Dwolla will re-attempt delivery 8 times over the course of 72 hours according the backoff schedule below. If a webhook was successfully received but you would like the information again, you can call
				Element:a
					retrieve a webhook by its Id
					.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Retry number
				Element:th
					Interval (relative to last retry)
				Element:th
					Interval (relative to original attempt)
				Element:tbody
				Element:tr
				Element:td
					1
				Element:td
					15 min
				Element:td
					15 min
				Element:tr
				Element:td
					2
				Element:td
					45 min
				Element:td
					1 h
				Element:tr
				Element:td
					3
				Element:td
					2 h
				Element:td
					3 h
				Element:tr
				Element:td
					4
				Element:td
					3 h
				Element:td
					6 h
				Element:tr
				Element:td
					5
				Element:td
					6 h
				Element:td
					12 h
				Element:tr
				Element:td
					6
				Element:td
					12 h
				Element:td
					24 h
				Element:tr
				Element:td
					7
				Element:td
					24 h
				Element:td
					48 h
				Element:tr
				Element:td
					8
				Element:td
					24 h
				Element:td
					72 h
			Node:
			(type) c
			(layer)1
				Element:h3
					Webhook subscription resource
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
					Webhook subscription unique identifier.
				Element:tr
				Element:td
					url
				Element:td
					Subscribed url where Dwolla should deliver the webhook notification.
				Element:tr
				Element:td
					paused
				Element:td
					A boolean
				Element:code
					true
					or
				Element:code
					false
					value indicating if the webhook subscription is paused. A webhook subscription will be automatically paused after 400 consecutive failures. In addition, a subscription can be paused or unpaused by calling
				Element:a
					this endpoint
					in the API.
				Element:tr
				Element:td
					created
				Element:td
					ISO-8601 timestamp
			Node:
			(type) c
			(layer)1
				Element:h2
					Create a webhook subscription
			Node:
			(type) c
			(layer)1
				Element:p
					This section details how to create a webhook subscription to deliver
				Element:a
					webhooks
					to a specified URL.
			Node:
			(type) c
			(layer)1
				Element:ol
				Element:li
				Element:p
					This endpoint requires an OAuth
				Element:a
					application access token
					.
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					POST https://api.dwolla.com/webhook-subscriptions
			Node:
			(type) c
			(layer)1
				Element:h3
					Request parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Required
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					url
				Element:td
					yes
				Element:td
					string
				Element:td
					Where Dwolla should deliver the webhook notification.
				Element:tr
				Element:td
					secret
				Element:td
					yes
				Element:td
					string
				Element:td
					A random, secret key, only known by your application. This secret key should be securely stored and used later when
				Element:a
					validating the authenticity
					of the webhook request from Dwolla.
			Node:
			(type) c
			(layer)1
				Element:h3
					Request and response
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					POST https://api-uat.dwolla.com/webhook-subscriptions Accept: application/vnd.dwolla.v1.hal+json Content-Type: application/vnd.dwolla.v1.hal+json Authorization: Bearer 0Sn0W6kzNicvoWhDbQcVSKLRUpGjIdlPSEYyrHqrDDoRnQwE7Q { "url": "http://myapplication.com/webhooks", "secret": "sshhhhhh" }
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					request_body
				Element:span
					=
				Element:span
					{
				Element:span
					:url
				Element:span
					=>
				Element:span
					"http://myawesomeapplication.com/destination"
				Element:span
					,
				Element:span
					:secret
				Element:span
					=>
				Element:span
					"your webhook secret"
				Element:span
					}
				Element:span
					# Using DwollaV2 - https://github.com/Dwolla/dwolla-v2-ruby (Recommended)
				Element:span
					subscription
				Element:span
					=
				Element:span
					app_token
				Element:span
					.
				Element:span
					post
				Element:span
					"webhook-subscriptions"
				Element:span
					,
				Element:span
					request_body
				Element:span
					subscription
				Element:span
					.
				Element:span
					headers
				Element:span
					[
				Element:span
					:location
				Element:span
					]
				Element:span
					# => "https://api-uat.dwolla.com/webhook-subscriptions/5af4c10a-f6de-4ac8-840d-42cb65454216"
				Element:span
					# Using DwollaSwagger - https://github.com/Dwolla/dwolla-swagger-ruby
				Element:span
					subscription
				Element:span
					=
				Element:span
					DwollaSwagger
				Element:span
					::
				Element:span
					WebhooksubscriptionsApi
				Element:span
					.
				Element:span
					create
				Element:span
					(
				Element:span
					:body
				Element:span
					=>
				Element:span
					request_body
				Element:span
					)
				Element:span
					subscription
				Element:span
					# => "https://api-uat.dwolla.com/webhook-subscriptions/5af4c10a-f6de-4ac8-840d-42cb65454216"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					var
				Element:span
					requestBody
				Element:span
					=
				Element:span
					{
				Element:span
					url
				Element:span
					:
				Element:span
					'http://myawesomeapplication.com/destination'
				Element:span
					,
				Element:span
					secret
				Element:span
					:
				Element:span
					'your webhook secret'
				Element:span
					};
				Element:span
					applicationToken
				Element:span
					.
				Element:span
					post
				Element:span
					(
				Element:span
					'webhook-subscriptions'
				Element:span
					,
				Element:span
					requestBody
				Element:span
					)
				Element:span
					.
				Element:span
					then
				Element:span
					(
				Element:span
					res
				Element:span
					=>
				Element:span
					res
				Element:span
					.
				Element:span
					headers
				Element:span
					.
				Element:span
					get
				Element:span
					(
				Element:span
					'location'
				Element:span
					));
				Element:span
					// => 'https://api-uat.dwolla.com/webhook-subscriptions/5af4c10a-f6de-4ac8-840d-42cb65454216'
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					request_body
				Element:span
					=
				Element:span
					{
				Element:span
					'url'
				Element:span
					:
				Element:span
					'http://myapplication.com/webhooks'
				Element:span
					,
				Element:span
					'secret'
				Element:span
					:
				Element:span
					'sshhhhhh'
				Element:span
					}
				Element:span
					# Using dwollav2 - https://github.com/Dwolla/dwolla-v2-python (Recommended)
				Element:span
					retries
				Element:span
					=
				Element:span
					app_token
				Element:span
					.
				Element:span
					post
				Element:span
					(
				Element:span
					'webhook-subscriptions'
				Element:span
					,
				Element:span
					request_body
				Element:span
					)
				Element:span
					retries
				Element:span
					.
				Element:span
					body
				Element:span
					[
				Element:span
					'total'
				Element:span
					]
				Element:span
					# => 1
				Element:span
					# Using dwollaswagger - https://github.com/Dwolla/dwolla-swagger-python
				Element:span
					webhook_api
				Element:span
					=
				Element:span
					dwollaswagger
				Element:span
					.
				Element:span
					WebhooksubscriptionsApi
				Element:span
					(
				Element:span
					client
				Element:span
					)
				Element:span
					subscription
				Element:span
					=
				Element:span
					webhook_api
				Element:span
					.
				Element:span
					create
				Element:span
					(
				Element:span
					body
				Element:span
					=
				Element:span
					request_body
				Element:span
					)
				Element:span
					subscription
				Element:span
					# => 'https://api-uat.dwolla.com/webhook-subscriptions/5af4c10a-f6de-4ac8-840d-42cb65454216'
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					<?php
				Element:span
					$webhookApi
				Element:span
					=
				Element:span
					new
				Element:span
					DwollaSwagger\WebhooksubscriptionsApi
				Element:span
					(
				Element:span
					$apiClient
				Element:span
					);
				Element:span
					$subscription
				Element:span
					=
				Element:span
					$webhookApi
				Element:span
					->
				Element:span
					create
				Element:span
					(
				Element:span
					array
				Element:span
					(
				Element:span
					'url'
				Element:span
					=>
				Element:span
					'http://myapplication.com/webhooks'
				Element:span
					,
				Element:span
					'secret'
				Element:span
					=>
				Element:span
					'sshhhhhh'
				Element:span
					,
				Element:span
					));
				Element:span
					$subscription
				Element:span
					;
				Element:span
					# => "https://api-uat.dwolla.com/webhook-subscriptions/5af4c10a-f6de-4ac8-840d-42cb65454216"
				Element:span
					?>
			Node:
			(type) c
			(layer)1
				Element:h2
					Retrieve a webhook subscription
			Node:
			(type) c
			(layer)1
				Element:p
					This section details how to retrieve a webhook subscription by its id.
			Node:
			(type) c
			(layer)1
				Element:ol
				Element:li
				Element:p
					This endpoint requires an OAuth
				Element:a
					application access token
					.
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET https://api.dwolla.com/webhook-subscriptions/{id}
			Node:
			(type) c
			(layer)1
				Element:h3
					Request parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Required
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
					yes
				Element:td
					string
				Element:td
					Webhook subscription unique identifier.
			Node:
			(type) c
			(layer)1
				Element:h3
					Errors
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					HTTP Status
				Element:th
					Message
				Element:tbody
				Element:tr
				Element:td
					404
				Element:td
					Webhook subscription not found.
			Node:
			(type) c
			(layer)1
				Element:h3
					Request and response
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					GET https://api-uat.dwolla.com/webhook-subscriptions/5af4c10a-f6de-4ac8-840d-42cb65454216 Accept: application/vnd.dwolla.v1.hal+json Authorization: Bearer pBA9fVDBEyYZCEsLf/wKehyh1RTpzjUj5KzIRfDi0wKTii7DqY ... { "_links": { "self": { "href": "https://api-uat.dwolla.com/webhook-subscriptions/077dfffb-4852-412f-96b6-0fe668066589" }, "webhooks": { "href": "https://api-uat.dwolla.com/webhook-subscriptions/077dfffb-4852-412f-96b6-0fe668066589/webhooks" } }, "id": "077dfffb-4852-412f-96b6-0fe668066589", "url": "http://myapplication.com/webhooks", "created": "2015-10-28T16:20:47+00:00" }
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					webhook_subscription_url
				Element:span
					=
				Element:span
					'https://api-uat.dwolla.com/webhook-subscriptions/5af4c10a-f6de-4ac8-840d-42cb65454216'
				Element:span
					# Using DwollaV2 - https://github.com/Dwolla/dwolla-v2-ruby (Recommended)
				Element:span
					webhook_subscription
				Element:span
					=
				Element:span
					app_token
				Element:span
					.
				Element:span
					get
				Element:span
					webhook_subscription_url
				Element:span
					webhook_subscription
				Element:span
					.
				Element:span
					created
				Element:span
					# => 2015-10-28T16:20:47+00:00
				Element:span
					# Using DwollaSwagger - https://github.com/Dwolla/dwolla-swagger-ruby
				Element:span
					webhook_subscription
				Element:span
					=
				Element:span
					DwollaSwagger
				Element:span
					::
				Element:span
					WebhooksubscriptionApi
				Element:span
					.
				Element:span
					id
				Element:span
					webhook_subscription_url
				Element:span
					webhook_subscription
				Element:span
					.
				Element:span
					created
				Element:span
					# => 2015-10-28T16:20:47+00:00
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					var
				Element:span
					webhookSubscriptionUrl
				Element:span
					=
				Element:span
					'https://api-uat.dwolla.com/webhook-subscriptions/5af4c10a-f6de-4ac8-840d-42cb65454216'
				Element:span
					;
				Element:span
					applicationToken
				Element:span
					.
				Element:span
					get
				Element:span
					(
				Element:span
					webhookSubscriptionUrl
				Element:span
					)
				Element:span
					.
				Element:span
					then
				Element:span
					(
				Element:span
					res
				Element:span
					=>
				Element:span
					res
				Element:span
					.
				Element:span
					body
				Element:span
					.
				Element:span
					created
				Element:span
					);
				Element:span
					// => '2016-04-20T15:49:50.340Z'
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					webhook_subscription_url
				Element:span
					=
				Element:span
					'https://api-uat.dwolla.com/webhook-subscriptions/5af4c10a-f6de-4ac8-840d-42cb65454216'
				Element:span
					# Using dwollav2 - https://github.com/Dwolla/dwolla-v2-python (Recommended)
				Element:span
					webhook_subscription
				Element:span
					=
				Element:span
					app_token
				Element:span
					.
				Element:span
					get
				Element:span
					(
				Element:span
					webhook_subscription_url
				Element:span
					)
				Element:span
					webhook_subscription
				Element:span
					.
				Element:span
					body
				Element:span
					[
				Element:span
					'created'
				Element:span
					]
				Element:span
					# => '2015-10-28T16:20:47+00:00'
				Element:span
					# Using dwollaswagger - https://github.com/Dwolla/dwolla-swagger-python
				Element:span
					webhook_api
				Element:span
					=
				Element:span
					dwollaswagger
				Element:span
					.
				Element:span
					WebhooksubscriptionsApi
				Element:span
					(
				Element:span
					client
				Element:span
					)
				Element:span
					retrieved
				Element:span
					=
				Element:span
					webhook_api
				Element:span
					.
				Element:span
					id
				Element:span
					(
				Element:span
					webhook_subscription_url
				Element:span
					)
				Element:span
					retrieved
				Element:span
					.
				Element:span
					created
				Element:span
					# => 2015-10-28T16:20:47+00:00
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					<?php
				Element:span
					$webhookApi
				Element:span
					=
				Element:span
					new
				Element:span
					DwollaSwagger\WebhooksubscriptionsApi
				Element:span
					(
				Element:span
					$apiClient
				Element:span
					);
				Element:span
					$retrieved
				Element:span
					=
				Element:span
					$webhookApi
				Element:span
					->
				Element:span
					id
				Element:span
					(
				Element:span
					'https://api-uat.dwolla.com/webhook-subscriptions/5af4c10a-f6de-4ac8-840d-42cb65454216'
				Element:span
					);
				Element:span
					$retrieved
				Element:span
					->
				Element:span
					created
				Element:span
					;
				Element:span
					# => 2015-10-28T16:20:47+00:00
				Element:span
					?>
			Node:
			(type) c
			(layer)1
				Element:h2
					Update a webhook subscription
			Node:
			(type) c
			(layer)1
				Element:p
					This section details how to pause a webhook subscription. When a webhook subscription is paused Dwolla will continue to create webhooks but not send them to your subscribed webhook url. This is useful if your webhook endpoint is unavailable and you want to temporarily disable webhook requests.
			Node:
			(type) c
			(layer)1
				Element:ol
				Element:li
				Element:p
					This endpoint requires an OAuth
				Element:a
					application access token
					.
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					POST https://api.dwolla.com/webhook-subscriptions/{id}
			Node:
			(type) c
			(layer)1
				Element:h3
					Request parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Required
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
					yes
				Element:td
					string
				Element:td
					Webhook unique identifier.
				Element:tr
				Element:td
					paused
				Element:td
					yes
				Element:td
					string
				Element:td
					Specify a value of
				Element:code
					true
					to pause the associated webhook subscription.
			Node:
			(type) c
			(layer)1
				Element:h3
					Request and response
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					POST https://api.dwolla.com/webhook-subscriptions/5af4c10a-f6de-4ac8-840d-42cb65454216 Accept: application/vnd.dwolla.v1.hal+json Content-Type: application/vnd.dwolla.v1.hal+json Authorization: Bearer 0Sn0W6kzNicvoWhDbQcVSKLRUpGjIdlPSEYyrHqrDDoRnQwE7Q { "paused": true }
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					webhook_subscription_url
				Element:span
					=
				Element:span
					'https://api.dwolla.com/webhook-subscriptions/5af4c10a-f6de-4ac8-840d-42cb65454216'
				Element:span
					request_body
				Element:span
					=
				Element:span
					{
				Element:span
					:paused
				Element:span
					=>
				Element:span
					true
				Element:span
					}
				Element:span
					# Using DwollaV2 - https://github.com/Dwolla/dwolla-v2-ruby (Recommended)
				Element:span
					subscription
				Element:span
					=
				Element:span
					app_token
				Element:span
					.
				Element:span
					post
				Element:span
					"
				Element:span
					#{
				Element:span
					webhook_subscription_url
				Element:span
					}
				Element:span
					"
				Element:span
					,
				Element:span
					request_body
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					var
				Element:span
					webhookSubscriptionUrl
				Element:span
					=
				Element:span
					'https://api.dwolla.com/funding-sources/692486f8-29f6-4516-a6a5-c69fd2ce854c'
				Element:span
					;
				Element:span
					var
				Element:span
					requestBody
				Element:span
					=
				Element:span
					{
				Element:span
					paused
				Element:span
					:
				Element:span
					true
				Element:span
					};
				Element:span
					applicationToken
				Element:span
					.
				Element:span
					post
				Element:span
					(
				Element:span
					webhookSubscriptionUrl
				Element:span
					,
				Element:span
					requestBody
				Element:span
					)
				Element:span
					.
				Element:span
					then
				Element:span
					(
				Element:span
					res
				Element:span
					=>
				Element:span
					res
				Element:span
					.
				Element:span
					body
				Element:span
					.
				Element:span
					paused
				Element:span
					);
				Element:span
					// => 'true'
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					webhook_subscription_url
				Element:span
					=
				Element:span
					'https://api.dwolla.com/webhook-subscriptions/5af4c10a-f6de-4ac8-840d-42cb65454216'
				Element:span
					request_body
				Element:span
					=
				Element:span
					{
				Element:span
					'paused'
				Element:span
					:
				Element:span
					true
				Element:span
					}
				Element:span
					# Using dwollav2 - https://github.com/Dwolla/dwolla-v2-python (Recommended)
				Element:span
					subscription
				Element:span
					=
				Element:span
					app_token
				Element:span
					.
				Element:span
					post
				Element:span
					(
				Element:span
					webhook_subscription_url
				Element:span
					,
				Element:span
					request_body
				Element:span
					)
				Element:span
					subscription
				Element:span
					.
				Element:span
					body
				Element:span
					[
				Element:span
					'paused'
				Element:span
					]
				Element:span
					# => true
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					<?php
				Element:span
					$webhookSubscriptionUrl
				Element:span
					=
				Element:span
					'https://api.dwolla.com/webhook-subscriptions/5af4c10a-f6de-4ac8-840d-42cb65454216'
				Element:span
					$webhookApi
				Element:span
					=
				Element:span
					new
				Element:span
					DwollaSwagger\WebhooksubscriptionsApi
				Element:span
					(
				Element:span
					$apiClient
				Element:span
					);
				Element:span
					$subscription
				Element:span
					=
				Element:span
					$webhookApi
				Element:span
					->
				Element:span
					updateSubscription
				Element:span
					(
				Element:span
					array
				Element:span
					(
				Element:span
					'paused'
				Element:span
					=>
				Element:span
					true
				Element:span
					),
				Element:span
					$webhookSubscriptionUrl
				Element:span
					);
				Element:span
					?>
			Node:
			(type) c
			(layer)1
				Element:h2
					List webhook subscriptions
			Node:
			(type) c
			(layer)1
				Element:p
					This section covers how to retrieve a list of webhook subscriptions that belong to an application.
			Node:
			(type) c
			(layer)1
				Element:ol
				Element:li
				Element:p
					This endpoint requires an OAuth
				Element:a
					application access token
					.
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET https://api.dwolla.com/webhook-subscriptions
			Node:
			(type) c
			(layer)1
				Element:h3
					Request and response
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					GET https://api.dwolla.com/webhook-subscriptions Accept: application/vnd.dwolla.v1.hal+json Authorization: Bearer pBA9fVDBEyYZCEsLf/wKehyh1RTpzjUj5KzIRfDi0wKTii7DqY ... { "_links": { "self": { "href": "https://api.dwolla.com/webhook-subscriptions" } }, "_embedded": { "webhook-subscriptions": [ { "_links": { "self": { "href": "https://api.dwolla.com/webhook-subscriptions/f4d21628-fde2-4d3a-b69a-0a7cb42adc4c" }, "webhooks": { "href": "https://api.dwolla.com/webhook-subscriptions/f4d21628-fde2-4d3a-b69a-0a7cb42adc4c/webhooks" } }, "id": "f4d21628-fde2-4d3a-b69a-0a7cb42adc4c", "url": "https://destination.url", "created": "2015-08-19T21:43:49.000Z" } ] }, "total": 1 }
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					# Using DwollaV2 - https://github.com/Dwolla/dwolla-v2-ruby (Recommended)
				Element:span
					webhook_subscriptions
				Element:span
					=
				Element:span
					app_token
				Element:span
					.
				Element:span
					get
				Element:span
					"webhook-subscriptions"
				Element:span
					webhook_subscriptions
				Element:span
					.
				Element:span
					total
				Element:span
					# => 1
				Element:span
					# Using DwollaSwagger - https://github.com/Dwolla/dwolla-swagger-ruby
				Element:span
					webhook_subscriptions
				Element:span
					=
				Element:span
					DwollaSwagger
				Element:span
					::
				Element:span
					WebhooksubscriptionsApi
				Element:span
					.
				Element:span
					list
				Element:span
					webhook_subscriptions
				Element:span
					.
				Element:span
					total
				Element:span
					# => 1
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					applicationToken
				Element:span
					.
				Element:span
					get
				Element:span
					(
				Element:span
					'webhook-subscriptions'
				Element:span
					)
				Element:span
					.
				Element:span
					then
				Element:span
					(
				Element:span
					res
				Element:span
					=>
				Element:span
					res
				Element:span
					.
				Element:span
					body
				Element:span
					.
				Element:span
					total
				Element:span
					);
				Element:span
					// => 1
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					# Using dwollav2 - https://github.com/Dwolla/dwolla-v2-python (Recommended)
				Element:span
					webhook_subscriptions
				Element:span
					=
				Element:span
					app_token
				Element:span
					.
				Element:span
					get
				Element:span
					(
				Element:span
					'webhook-subscriptions'
				Element:span
					)
				Element:span
					webhook_subscriptions
				Element:span
					.
				Element:span
					body
				Element:span
					[
				Element:span
					'total'
				Element:span
					]
				Element:span
					# => 1
				Element:span
					# Using dwollaswagger - https://github.com/Dwolla/dwolla-swagger-python
				Element:span
					webhook_api
				Element:span
					=
				Element:span
					dwollaswagger
				Element:span
					.
				Element:span
					WebhooksubscriptionsApi
				Element:span
					(
				Element:span
					client
				Element:span
					)
				Element:span
					retrieved
				Element:span
					=
				Element:span
					webhook_api
				Element:span
					.
				Element:span
					list
				Element:span
					()
				Element:span
					retrieved
				Element:span
					.
				Element:span
					total
				Element:span
					# => 1
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					<?php
				Element:span
					$webhookApi
				Element:span
					=
				Element:span
					new
				Element:span
					DwollaSwagger\WebhooksubscriptionsApi
				Element:span
					(
				Element:span
					$apiClient
				Element:span
					);
				Element:span
					$retrieved
				Element:span
					=
				Element:span
					$webhookApi
				Element:span
					->
				Element:span
					_list
				Element:span
					();
				Element:span
					$retrieved
				Element:span
					->
				Element:span
					total
				Element:span
					;
				Element:span
					# => 1
				Element:span
					?>
			Node:
			(type) c
			(layer)1
				Element:h2
					Delete a webhook subscription
			Node:
			(type) c
			(layer)1
				Element:p
					Delete a Webhook Subscription to stop receiving Webhooks at the URL specified. If using an SDK, the request was successful unless an exception was thrown stating otherwise.
			Node:
			(type) c
			(layer)1
				Element:ol
				Element:li
				Element:p
					This endpoint requires an OAuth
				Element:a
					application access token
					.
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					DELETE https://api.dwolla.com/webhook-subscriptions/{id}
			Node:
			(type) c
			(layer)1
				Element:h3
					Request parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Required
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
					yes
				Element:td
					string
				Element:td
					Webhook unique identifier.
			Node:
			(type) c
			(layer)1
				Element:h3
					Errors
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					HTTP Status
				Element:th
					Message
				Element:tbody
				Element:tr
				Element:td
					404
				Element:td
					Webhook subscription not found.
			Node:
			(type) c
			(layer)1
				Element:h3
					Request and response
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					DELETE https://api-uat.dwolla.com/webhook-subscriptions/5af4c10a-f6de-4ac8-840d-42cb65454216 Accept: application/vnd.dwolla.v1.hal+json Authorization: Bearer pBA9fVDBEyYZCEsLf/wKehyh1RTpzjUj5KzIRfDi0wKTii7DqY
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					webhook_subscription_url
				Element:span
					=
				Element:span
					'https://api-uat.dwolla.com/webhook-subscriptions/5af4c10a-f6de-4ac8-840d-42cb65454216'
				Element:span
					# Using DwollaV2 - https://github.com/Dwolla/dwolla-v2-ruby (Recommended)
				Element:span
					app_token
				Element:span
					.
				Element:span
					delete
				Element:span
					webhook_subscription_url
				Element:span
					# Using DwollaSwagger - https://github.com/Dwolla/dwolla-swagger-ruby
				Element:span
					DwollaSwagger
				Element:span
					::
				Element:span
					WebhooksubscriptionApi
				Element:span
					.
				Element:span
					delete_by_id
				Element:span
					(
				Element:span
					webhook_subscription_url
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					var
				Element:span
					webhookSubscriptionUrl
				Element:span
					=
				Element:span
					'https://api-uat.dwolla.com/webhook-subscriptions/5af4c10a-f6de-4ac8-840d-42cb65454216'
				Element:span
					;
				Element:span
					applicationToken
				Element:span
					.
				Element:span
					delete
				Element:span
					(
				Element:span
					webhookSubscriptionUrl
				Element:span
					);
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					webhook_subscription_url
				Element:span
					=
				Element:span
					'https://api-uat.dwolla.com/webhook-subscriptions/5af4c10a-f6de-4ac8-840d-42cb65454216'
				Element:span
					# Using dwollav2 - https://github.com/Dwolla/dwolla-v2-python (Recommended)
				Element:span
					app_token
				Element:span
					.
				Element:span
					delete
				Element:span
					(
				Element:span
					webhook_subscription_url
				Element:span
					)
				Element:span
					# Using dwollaswagger - https://github.com/Dwolla/dwolla-swagger-python
				Element:span
					webhook_api
				Element:span
					=
				Element:span
					dwollaswagger
				Element:span
					.
				Element:span
					WebhooksubscriptionsApi
				Element:span
					(
				Element:span
					client
				Element:span
					)
				Element:span
					webhook_api
				Element:span
					.
				Element:span
					delete_by_id
				Element:span
					(
				Element:span
					webhook_subscription_url
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					<?php
				Element:span
					$webhookApi
				Element:span
					=
				Element:span
					new
				Element:span
					DwollaSwagger\WebhooksubscriptionsApi
				Element:span
					(
				Element:span
					$apiClient
				Element:span
					);
				Element:span
					$webhookApi
				Element:span
					->
				Element:span
					deleteById
				Element:span
					(
				Element:span
					'https://api-uat.dwolla.com/webhook-subscriptions/5af4c10a-f6de-4ac8-840d-42cb65454216'
				Element:span
					);
				Element:span
					?>
			Node:
			(type) c
			(layer)1
				Element:h2
					List webhooks for a webhook subscription
			Node:
			(type) c
			(layer)1
				Element:p
					This section covers how to view all fired
				Element:a
					webhooks
					for a webhook subscription.
			Node:
			(type) c
			(layer)1
				Element:ol
				Element:li
				Element:p
					This endpoint requires an OAuth
				Element:a
					application access token
					.
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET https://api.dwolla.com/webhook-subscriptions/{id}/webhooks
			Node:
			(type) c
			(layer)1
				Element:h3
					Request parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Required
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
					yes
				Element:td
					string
				Element:td
					Webhook subscription unique identifier.
				Element:tr
				Element:td
					limit
				Element:td
					no
				Element:td
					integer
				Element:td
					How many results to return. Defaults to 25.
				Element:tr
				Element:td
					offset
				Element:td
					no
				Element:td
					integer
				Element:td
					How many results to skip.
			Node:
			(type) c
			(layer)1
				Element:h3
					Request and response
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					GET /webhook-subscriptions/10d4133e-b308-4646-b276-40d9d36def1c/webhooks Accept: application/vnd.dwolla.v1.hal+json Authorization: Bearer pBA9fVDBEyYZCEsLf/wKehyh1RTpzjUj5KzIRfDi0wKTii7DqY ... { "_links": {}, "total": 0, "items": [ { "_links": {}, "id": "string", "topic": "string", "accountId": "string", "eventId": "string", "subscriptionId": "string", "attempts": [ { "id": "string", "request": { "created": "2015-07-23T14:19:37.006Z", "url": "string", "headers": [ { "name": "string", "value": "string" } ], "body": "string" }, "response": { "created": "2015-07-23T14:19:37.006Z", "headers": [ { "name": "string", "value": "string" } ], "statusCode": 0, "body": "string" } } ] } ] }
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					webhook_subscription_url
				Element:span
					=
				Element:span
					'https://api-uat.dwolla.com/webhook-subscriptions/5af4c10a-f6de-4ac8-840d-42cb65454216'
				Element:span
					# Using DwollaV2 - https://github.com/Dwolla/dwolla-v2-ruby (Recommended)
				Element:span
					hooks
				Element:span
					=
				Element:span
					app_token
				Element:span
					.
				Element:span
					get
				Element:span
					"
				Element:span
					#{
				Element:span
					webhook_subscription_url
				Element:span
					}
				Element:span
					/webhooks"
				Element:span
					hooks
				Element:span
					.
				Element:span
					total
				Element:span
					# => 5
				Element:span
					# Using DwollaSwagger - https://github.com/Dwolla/dwolla-swagger-ruby
				Element:span
					hooks
				Element:span
					=
				Element:span
					DwollaSwagger
				Element:span
					::
				Element:span
					WebhooksApi
				Element:span
					.
				Element:span
					hooks_by_id
				Element:span
					webhook_subscription_url
				Element:span
					hooks
				Element:span
					.
				Element:span
					total
				Element:span
					# => 5
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					var
				Element:span
					webhookSubscriptionUrl
				Element:span
					=
				Element:span
					'https://api-uat.dwolla.com/webhook-subscriptions/5af4c10a-f6de-4ac8-840d-42cb65454216'
				Element:span
					;
				Element:span
					applicationToken
				Element:span
					.
				Element:span
					get
				Element:span
					(
				Element:span
					`
				Element:span
					$
				Element:span
					{
				Element:span
					webhookSubscriptionUrl
				Element:span
					}
				Element:span
					/webhooks`
				Element:span
					)
				Element:span
					.
				Element:span
					then
				Element:span
					(
				Element:span
					res
				Element:span
					=>
				Element:span
					res
				Element:span
					.
				Element:span
					body
				Element:span
					.
				Element:span
					total
				Element:span
					);
				Element:span
					// => 5
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					webhook_subscription_url
				Element:span
					=
				Element:span
					'https://api-uat.dwolla.com/webhook-subscriptions/5af4c10a-f6de-4ac8-840d-42cb65454216'
				Element:span
					# Using dwollav2 - https://github.com/Dwolla/dwolla-v2-python (Recommended)
				Element:span
					hooks
				Element:span
					=
				Element:span
					app_token
				Element:span
					.
				Element:span
					get
				Element:span
					(
				Element:span
					'
				Element:span
					%
				Element:span
					s/hooks'
				Element:span
					%
				Element:span
					webhook_subscription_url
				Element:span
					)
				Element:span
					hooks
				Element:span
					.
				Element:span
					body
				Element:span
					[
				Element:span
					'total'
				Element:span
					]
				Element:span
					# => 5
				Element:span
					# Using dwollaswagger - https://github.com/Dwolla/dwolla-swagger-python
				Element:span
					webhook_api
				Element:span
					=
				Element:span
					dwollaswagger
				Element:span
					.
				Element:span
					WebhooksApi
				Element:span
					(
				Element:span
					client
				Element:span
					)
				Element:span
					hooks
				Element:span
					=
				Element:span
					webhook_api
				Element:span
					.
				Element:span
					hooks_by_id
				Element:span
					(
				Element:span
					webhook_subscription_url
				Element:span
					)
				Element:span
					hooks
				Element:span
					.
				Element:span
					total
				Element:span
					# => 5
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					<?php
				Element:span
					$webhookApi
				Element:span
					=
				Element:span
					new
				Element:span
					DwollaSwagger\WebhooksApi
				Element:span
					(
				Element:span
					$apiClient
				Element:span
					);
				Element:span
					$hooks
				Element:span
					=
				Element:span
					$webhookApi
				Element:span
					->
				Element:span
					hooksById
				Element:span
					(
				Element:span
					'https://api-uat.dwolla.com/webhook-subscriptions/5af4c10a-f6de-4ac8-840d-42cb65454216'
				Element:span
					);
				Element:span
					$hooks
				Element:span
					->
				Element:span
					total
				Element:span
					;
				Element:span
					# => 5
				Element:span
					?>
			Node:
			(type) c
			(layer)1
				Element:hr
			Node:
			(type) h1
			(layer)1
				Element:h1
					Webhooks
			Node:
			(type) c
			(layer)1
				Element:p
					When a new
				Element:a
					event
					is created and there is an active
				Element:a
					webhook subscription
					, a new webhook is created in order to deliver that event. Attempted deliveries are recorded under the webhook’s
				Element:code
					attempts
					property. Each attempt includes the recorded request and response of the delivery attempt. Webhooks are sent asynchronously and are not guaranteed to be delivered in order. We recommend that applications protect against duplicated events by making event processing idempotent.
			Node:
			(type) c
			(layer)1
				Element:p
				Element:strong
					Note:
					Webhooks containing an
				Element:a
					event
					are only fired if an application has a valid refresh_token for the Dwolla user Account that an event is created on.
			Node:
			(type) c
			(layer)1
				Element:h3
					Webhook resource
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
					Webhook unique identifier
				Element:tr
				Element:td
					topic
				Element:td
					Type of webhook subscription
				Element:tr
				Element:td
					accountId
				Element:td
					Account associated with the webhook notification
				Element:tr
				Element:td
					eventId
				Element:td
					Event id for this webhook
				Element:tr
				Element:td
					subscriptionId
				Element:td
					Webhook subscription id for this event
				Element:tr
				Element:td
					attempts
				Element:td
					Array of attempt JSON object
			Node:
			(type) c
			(layer)1
				Element:h3
					Attempts JSON object
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
					Unique id of webhook delivery attempt.
				Element:tr
				Element:td
					request
				Element:td
					Request JSON object
				Element:tr
				Element:td
					response
				Element:td
					Response JSON object
			Node:
			(type) c
			(layer)1
				Element:h3
					Request/response JSON object
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					created
				Element:td
					ISO-8601 timestamp
				Element:tr
				Element:td
					url
				Element:td
					URL where data was sent to/received from
				Element:tr
				Element:td
					headers
				Element:td
					Array of objects with keys
				Element:code
					name
					and
				Element:code
					value
					representative of HTTP headers
				Element:tr
				Element:td
					body
				Element:td
					An Event for the webhook
			Node:
			(type) c
			(layer)1
				Element:h2
					Retrieve a webhook
			Node:
			(type) c
			(layer)1
				Element:p
					This section covers how to retrieve a single webhook.
			Node:
			(type) c
			(layer)1
				Element:ol
				Element:li
				Element:p
					This endpoint requires an OAuth
				Element:a
					application access token
					.
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET https://api.dwolla.com/webhooks/{id}
			Node:
			(type) c
			(layer)1
				Element:h3
					Request parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Required
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
					yes
				Element:td
					string
				Element:td
					Id of webhook to retrieve.
			Node:
			(type) c
			(layer)1
				Element:h3
					Errors
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					HTTP Status
				Element:th
					Message
				Element:tbody
				Element:tr
				Element:td
					404
				Element:td
					Webhook not found.
			Node:
			(type) c
			(layer)1
				Element:h3
					Request and response
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					GET https://api.dwolla.com/webhooks/9ece9660-aa34-41eb-80d7-0125d53b45e8 Accept: application/vnd.dwolla.v1.hal+json Authorization: Bearer pBA9fVDBEyYZCEsLf/wKehyh1RTpzjUj5KzIRfDi0wKTii7DqY ... { "_links": { "self": { "href": "https://api.dwolla.com/webhooks/9ece9660-aa34-41eb-80d7-0125d53b45e8" }, "subscription": { "href": "https://api.dwolla.com/webhook-subscriptions/a0943041-7a5c-4e8f-92de-b55711ef3a83" }, "retry": { "href": "https://api.dwolla.com/webhooks/9ece9660-aa34-41eb-80d7-0125d53b45e8/retries" }, "event": { "href": "https://api.dwolla.com/events/03c7e14c-7f15-44a2-bcf7-83f2f7e95d50" } }, "id": "9ece9660-aa34-41eb-80d7-0125d53b45e8", "topic": "transfer_created", "accountId": "ca32853c-48fa-40be-ae75-77b37504581b", "eventId": "03c7e14c-7f15-44a2-bcf7-83f2f7e95d50", "subscriptionId": "a0943041-7a5c-4e8f-92de-b55711ef3a83", "attempts": [ { "id": "d4d16621-c6b0-40cb-8dc3-0469fa9dc4e8", "request": { "timestamp": "2015-10-27T17:07:34.304Z", "url": "https://myapp.runscope.net", "headers": [ { "name": "X-Dwolla-Topic", "value": "transfer_created" }, { "name": "X-Request-Signature", "value": "bd93780bd7e1ad77ab821094aaa0f9e3dece5ee3" } ], "body": "{\"id\":\"03c7e14c-7f15-44a2-bcf7-83f2f7e95d50\",\"resourceId\":\"81BA6F36-CD7C-E511-80DB-0AA34A9B2388\",\"topic\":\"transfer_created\",\"timestamp\":\"2015-10-27T17:07:34.207Z\",\"_links\":{\"self\":{\"href\":\"https://api.dwolla.com/events/03c7e14c-7f15-44a2-bcf7-83f2f7e95d50\"},\"account\":{\"href\":\"https://api.dwolla.com/accounts/ca32853c-48fa-40be-ae75-77b37504581b\"},\"resource\":{\"href\":\"https://api.dwolla.com/transfers/81BA6F36-CD7C-E511-80DB-0AA34A9B2388\"}}}" }, "response": { "timestamp": "2015-10-27T17:07:34.308Z", "headers": [ { "name": "Date", "value": "Tue, 27 Oct 2015 17:07:34 GMT" }, { "name": "Content-Type", "value": "application/json; charset=UTF-8" }, { "name": "Content-Length", "value": "1093" }, { "name": "Connection", "value": "keep-alive" }, { "name": "Access-Control-Allow-Credentials", "value": "true" }, { "name": "Access-Control-Allow-Methods", "value": "GET, PUT, POST, PATCH, DELETE, OPTIONS, HEAD" }, { "name": "Server", "value": "Runscope-Gateway/1.0" }, { "name": "Runscope-Message-Id", "value": "97aa5bbd-784f-4007-80cc-8f56919000a0" }, { "name": "Access-Control-Allow-Origin", "value": "*" } ], "statusCode": 200, "body": "{\"body\":\"{\"id\":\"03c7e14c-7f15-44a2-bcf7-83f2f7e95d50\",\"resourceId\":\"81BA6F36-CD7C-E511-80DB-0AA34A9B2388\",\"topic\":\"transfer_created\",\"timestamp\":\"2015-10-27T17:07:34.207Z\",\"_links\":{\"self\":{\"href\":\"https://api.dwolla.com/events/03c7e14c-7f15-44a2-bcf7-83f2f7e95d50\"},\"account\":{\"href\":\"https://api.dwolla.com/accounts/ca32853c-48fa-40be-ae75-77b37504581b\"},\"resource\":{\"href\":\"https://api.dwolla.com/transfers/81BA6F36-CD7C-E511-80DB-0AA34A9B2388\"}}}\",\"files\":[],\"form\":{},\"fragment\":\"\",\"headers\":{\"Connection\":[\"close\"],\"Content-Length\":[\"453\"],\"Content-Type\":[\"application/json; charset=UTF-8\"],\"Host\":[\"myapp.runscope.net\"],\"User-Agent\":[\"dwolla-webhooks/1.0\"],\"X-Dwolla-Topic\":[\"transfer_created\"],\"X-Request-Signature\":[\"bd93780bd7e1ad77ab821094aaa0f9e3dece5ee3\"]},\"host\":\"myapp.runscope.net\",\"method\":\"POST\",\"params\":{},\"path\":\"/\",\"region\":\"us5\",\"runscope_host\":\"prod078.runscope.in\",\"scheme\":\"https\",\"source\":\"capture\",\"source_ip\":\"52.24.10.184\",\"timestamp\":1.4459656543078682e+09,\"url\":\"https://myapp.runscope.net/\"}" } } ] }
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					webhook_url
				Element:span
					=
				Element:span
					'https://api.dwolla.com/webhooks/9ece9660-aa34-41eb-80d7-0125d53b45e8'
				Element:span
					# Using DwollaV2 - https://github.com/Dwolla/dwolla-v2-ruby (Recommended)
				Element:span
					webhook
				Element:span
					=
				Element:span
					app_token
				Element:span
					.
				Element:span
					get
				Element:span
					webhook_url
				Element:span
					webhook
				Element:span
					.
				Element:span
					topic
				Element:span
					# => "transfer_created"
				Element:span
					# Using DwollaSwagger - https://github.com/Dwolla/dwolla-swagger-ruby
				Element:span
					webhook
				Element:span
					=
				Element:span
					DwollaSwagger
				Element:span
					::
				Element:span
					WebhooksApi
				Element:span
					.
				Element:span
					id
				Element:span
					(
				Element:span
					webhook_url
				Element:span
					)
				Element:span
					webhook
				Element:span
					.
				Element:span
					topic
				Element:span
					# => "transfer_created"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					<?php
				Element:span
					$webhookUrl
				Element:span
					=
				Element:span
					'https://api.dwolla.com/webhooks/9ece9660-aa34-41eb-80d7-0125d53b45e8'
				Element:span
					;
				Element:span
					$webhooksApi
				Element:span
					=
				Element:span
					new
				Element:span
					DwollaSwagger\WebhooksApi
				Element:span
					(
				Element:span
					$apiClient
				Element:span
					);
				Element:span
					$webhook
				Element:span
					=
				Element:span
					$webhooksApi
				Element:span
					->
				Element:span
					id
				Element:span
					(
				Element:span
					$webhookUrl
				Element:span
					);
				Element:span
					$webhook
				Element:span
					->
				Element:span
					topic
				Element:span
					;
				Element:span
					# => "transfer_created"
				Element:span
					?>
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					webhook_url
				Element:span
					=
				Element:span
					'https://api.dwolla.com/webhooks/9ece9660-aa34-41eb-80d7-0125d53b45e8'
				Element:span
					# Using dwollav2 - https://github.com/Dwolla/dwolla-v2-python (Recommended)
				Element:span
					webhook
				Element:span
					=
				Element:span
					app_token
				Element:span
					.
				Element:span
					get
				Element:span
					(
				Element:span
					transfer_url
				Element:span
					)
				Element:span
					webhook
				Element:span
					.
				Element:span
					body
				Element:span
					[
				Element:span
					'topic'
				Element:span
					]
				Element:span
					# => 'transfer_created'
				Element:span
					# Using dwollaswagger - https://github.com/Dwolla/dwolla-swagger-python
				Element:span
					webhooks_api
				Element:span
					=
				Element:span
					dwollaswagger
				Element:span
					.
				Element:span
					WebhooksApi
				Element:span
					(
				Element:span
					client
				Element:span
					)
				Element:span
					webhook
				Element:span
					=
				Element:span
					webhooks_api
				Element:span
					.
				Element:span
					id
				Element:span
					(
				Element:span
					webhook_url
				Element:span
					)
				Element:span
					webhook
				Element:span
					.
				Element:span
					topic
				Element:span
					# => 'transfer_created'
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					var
				Element:span
					webhookUrl
				Element:span
					=
				Element:span
					'https://api.dwolla.com/webhooks/9ece9660-aa34-41eb-80d7-0125d53b45e8'
				Element:span
					;
				Element:span
					applicationToken
				Element:span
					.
				Element:span
					get
				Element:span
					(
				Element:span
					webhookUrl
				Element:span
					)
				Element:span
					.
				Element:span
					then
				Element:span
					(
				Element:span
					res
				Element:span
					=>
				Element:span
					res
				Element:span
					.
				Element:span
					body
				Element:span
					.
				Element:span
					topic
				Element:span
					);
				Element:span
					// => 'transfer_created'
			Node:
			(type) c
			(layer)1
				Element:h2
					Retry a webhook
			Node:
			(type) c
			(layer)1
				Element:p
					This section details how to retry a webhook by id.
			Node:
			(type) c
			(layer)1
				Element:ol
				Element:li
				Element:p
					This endpoint requires an OAuth
				Element:a
					application access token
					.
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					POST https://api.dwolla.com/webhooks/{id}/retries
			Node:
			(type) c
			(layer)1
				Element:h3
					Request parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Required
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
					yes
				Element:td
					string
				Element:td
					Id of webhook to retry.
			Node:
			(type) c
			(layer)1
				Element:h3
					Errors
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					HTTP Status
				Element:th
					Message
				Element:tbody
				Element:tr
				Element:td
					404
				Element:td
					Webhook not found.
			Node:
			(type) c
			(layer)1
				Element:h3
					Request and response
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					POST /webhooks/9ece9660-aa34-41eb-80d7-0125d53b45e8/retries Accept: application/vnd.dwolla.v1.hal+json Content-Type: application/vnd.dwolla.v1.hal+json Authorization: Bearer pBA9fVDBEyYZCEsLf/wKehyh1RTpzjUj5KzIRfDi0wKTii7DqY ... HTTP/1.1 201 Created Location: https://api.dwolla.com/webhooks/9ece9660-aa34-41eb-80d7-0125d53b45e8/retries/5aa27a0f-cf99-418d-a3ee-67c0ff99a494
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					webhook_url
				Element:span
					=
				Element:span
					'https://api.dwolla.com/webhooks/9ece9660-aa34-41eb-80d7-0125d53b45e8'
				Element:span
					# Using DwollaV2 - https://github.com/Dwolla/dwolla-v2-ruby (Recommended)
				Element:span
					app_token
				Element:span
					.
				Element:span
					post
				Element:span
					"
				Element:span
					#{
				Element:span
					webhook_url
				Element:span
					}
				Element:span
					/retries"
				Element:span
					# Using DwollaSwagger - https://github.com/Dwolla/dwolla-swagger-ruby
				Element:span
					DwollaSwagger
				Element:span
					::
				Element:span
					WebhooksApi
				Element:span
					.
				Element:span
					retry_webhook
				Element:span
					(
				Element:span
					webhook_url
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					<?php
				Element:span
					$webhookUrl
				Element:span
					=
				Element:span
					'https://api.dwolla.com/webhooks/9ece9660-aa34-41eb-80d7-0125d53b45e8'
				Element:span
					;
				Element:span
					$webhooksApi
				Element:span
					=
				Element:span
					new
				Element:span
					DwollaSwagger\WebhooksApi
				Element:span
					(
				Element:span
					$apiClient
				Element:span
					);
				Element:span
					$webhooksApi
				Element:span
					->
				Element:span
					retryWebhook
				Element:span
					(
				Element:span
					$webhookUrl
				Element:span
					);
				Element:span
					?>
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					webhook_url
				Element:span
					=
				Element:span
					'https://api.dwolla.com/webhooks/9ece9660-aa34-41eb-80d7-0125d53b45e8'
				Element:span
					# Using dwollav2 - https://github.com/Dwolla/dwolla-v2-python (Recommended)
				Element:span
					app_token
				Element:span
					.
				Element:span
					post
				Element:span
					(
				Element:span
					'
				Element:span
					%
				Element:span
					s/retries'
				Element:span
					%
				Element:span
					webhook_url
				Element:span
					)
				Element:span
					# Using dwollaswagger - https://github.com/Dwolla/dwolla-swagger-python
				Element:span
					webhooks_api
				Element:span
					=
				Element:span
					dwollaswagger
				Element:span
					.
				Element:span
					WebhooksApi
				Element:span
					(
				Element:span
					client
				Element:span
					)
				Element:span
					webhooks_api
				Element:span
					.
				Element:span
					retry_webhook
				Element:span
					(
				Element:span
					webhook_url
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					var
				Element:span
					webhookUrl
				Element:span
					=
				Element:span
					'https://api.dwolla.com/webhooks/9ece9660-aa34-41eb-80d7-0125d53b45e8'
				Element:span
					;
				Element:span
					applicationToken
				Element:span
					.
				Element:span
					post
				Element:span
					(
				Element:span
					`
				Element:span
					$
				Element:span
					{
				Element:span
					webhookUrl
				Element:span
					}
				Element:span
					/retries`
				Element:span
					)
				Element:span
					;
			Node:
			(type) c
			(layer)1
				Element:h2
					List retries for a webhook
			Node:
			(type) c
			(layer)1
				Element:p
					This section covers how to retrieve webhook retries by id.
			Node:
			(type) c
			(layer)1
				Element:ol
				Element:li
				Element:p
					This endpoint requires an OAuth
				Element:a
					application access token
					.
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET https://api.dwolla.com/webhooks/{id}/retries
			Node:
			(type) c
			(layer)1
				Element:h3
					Request parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Required
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
					yes
				Element:td
					string
				Element:td
					Id of webhook to get retries for.
			Node:
			(type) c
			(layer)1
				Element:h3
					Errors
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					HTTP Status
				Element:th
					Message
				Element:tbody
				Element:tr
				Element:td
					404
				Element:td
					Webhook not found.
			Node:
			(type) c
			(layer)1
				Element:h3
					Request and response
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					GET /webhooks/9ece9660-aa34-41eb-80d7-0125d53b45e8/retries Accept: application/vnd.dwolla.v1.hal+json Authorization: Bearer pBA9fVDBEyYZCEsLf/wKehyh1RTpzjUj5KzIRfDi0wKTii7DqY ... { "_links": { "self": { "href": "https://api.dwolla.com/webhooks/9ece9660-aa34-41eb-80d7-0125d53b45e8/retries" } }, "_embedded": { "retries": [ { "_links": { "self": { "href": "https://api.dwolla.com/webhooks/9ece9660-aa34-41eb-80d7-0125d53b45e8/retries/5aa27a0f-cf99-418d-a3ee-67c0ff99a494" }, "webhook": { "href": "https://api.dwolla.com/webhooks/9ece9660-aa34-41eb-80d7-0125d53b45e8" } }, "id": "5aa27a0f-cf99-418d-a3ee-67c0ff99a494", "timestamp": "2015-11-02T17:43:26.000Z" } ] }, "total": 1 }
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					webhook_url
				Element:span
					=
				Element:span
					'https://api.dwolla.com/webhooks/9ece9660-aa34-41eb-80d7-0125d53b45e8'
				Element:span
					# Using DwollaV2 - https://github.com/Dwolla/dwolla-v2-ruby (Recommended)
				Element:span
					retries
				Element:span
					=
				Element:span
					app_token
				Element:span
					.
				Element:span
					get
				Element:span
					"
				Element:span
					#{
				Element:span
					webhook_url
				Element:span
					}
				Element:span
					/retries"
				Element:span
					retries
				Element:span
					.
				Element:span
					total
				Element:span
					# => 1
				Element:span
					# Using DwollaSwagger - https://github.com/Dwolla/dwolla-swagger-ruby
				Element:span
					retries
				Element:span
					=
				Element:span
					DwollaSwagger
				Element:span
					::
				Element:span
					WebhooksApi
				Element:span
					.
				Element:span
					retries_by_id
				Element:span
					(
				Element:span
					webhook_url
				Element:span
					)
				Element:span
					retries
				Element:span
					.
				Element:span
					total
				Element:span
					# => 1
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					<?php
				Element:span
					$webhookUrl
				Element:span
					=
				Element:span
					'https://api.dwolla.com/webhooks/9ece9660-aa34-41eb-80d7-0125d53b45e8'
				Element:span
					;
				Element:span
					$webhooksApi
				Element:span
					=
				Element:span
					new
				Element:span
					DwollaSwagger\WebhooksApi
				Element:span
					(
				Element:span
					$apiClient
				Element:span
					);
				Element:span
					$retries
				Element:span
					=
				Element:span
					$webhooksApi
				Element:span
					->
				Element:span
					retriesById
				Element:span
					(
				Element:span
					$webhookUrl
				Element:span
					);
				Element:span
					$retries
				Element:span
					->
				Element:span
					total
				Element:span
					;
				Element:span
					# => 1
				Element:span
					?>
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					webhook_url
				Element:span
					=
				Element:span
					'https://api.dwolla.com/webhooks/9ece9660-aa34-41eb-80d7-0125d53b45e8'
				Element:span
					# Using dwollav2 - https://github.com/Dwolla/dwolla-v2-python (Recommended)
				Element:span
					retries
				Element:span
					=
				Element:span
					app_token
				Element:span
					.
				Element:span
					get
				Element:span
					(
				Element:span
					'
				Element:span
					%
				Element:span
					s/retries'
				Element:span
					%
				Element:span
					webhook_url
				Element:span
					)
				Element:span
					retries
				Element:span
					.
				Element:span
					body
				Element:span
					[
				Element:span
					'total'
				Element:span
					]
				Element:span
					# => 1
				Element:span
					# Using dwollaswagger - https://github.com/Dwolla/dwolla-swagger-python
				Element:span
					webhooks_api
				Element:span
					=
				Element:span
					dwollaswagger
				Element:span
					.
				Element:span
					WebhooksApi
				Element:span
					(
				Element:span
					client
				Element:span
					)
				Element:span
					retries
				Element:span
					=
				Element:span
					webhooks_api
				Element:span
					.
				Element:span
					retries_by_id
				Element:span
					(
				Element:span
					webhook_url
				Element:span
					)
				Element:span
					retries
				Element:span
					.
				Element:span
					total
				Element:span
					# => 1
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					var
				Element:span
					webhookUrl
				Element:span
					=
				Element:span
					'https://api.dwolla.com/webhooks/9ece9660-aa34-41eb-80d7-0125d53b45e8'
				Element:span
					;
				Element:span
					applicationToken
				Element:span
					.
				Element:span
					get
				Element:span
					(
				Element:span
					`
				Element:span
					$
				Element:span
					{
				Element:span
					webhookUrl
				Element:span
					}
				Element:span
					/retries`
				Element:span
					)
				Element:span
					.
				Element:span
					then
				Element:span
					(
				Element:span
					res
				Element:span
					=>
				Element:span
					res
				Element:span
					.
				Element:span
					body
				Element:span
					.
				Element:span
					total
				Element:span
					);
				Element:span
					// => 1
			Node:
			(type) c
			(layer)1
				Element:footer
			Node:
			(type) c
			(layer)1
				Element:h5
					Financial institutions play an important role in the Dwolla network.
			Node:
			(type) c
			(layer)1
				Element:p
					Dwolla, Inc. is an agent of Veridian Credit Union and Compass Bank and all funds associated with your account in the Dwolla network are held in pooled accounts at Veridian Credit Union and Compass Bank. These funds are not eligible for individual insurance, including FDIC insurance and may not be eligible for share insurance by the National Credit Union Share Insurance Fund. Dwolla, Inc. is the operator of a software platform that communicates user instructions for funds transfers to Veridian Credit Union and Compass Bank.
			Node:
			(type) c
			(layer)1
				Element:span
					© 2016 Dwolla, Inc.
			Node:
			(type) c
			(layer)1
				Element:a
					Dwolla, Inc. is an agent of its Financial Institution Partner(s)
