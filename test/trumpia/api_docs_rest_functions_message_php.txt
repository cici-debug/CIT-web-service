Node:
(type) c
(layer)0
	Element:body
									Node:
									(type) h3
									(layer)3
										Element:h3
											Login
									Node:
									(type) c
									(layer)3
										Element:strong
											Warning!
									Node:
									(type) c
									(layer)3
										Element:span
											The email address, username, or password is incorrect. Please note that your password is case-sensitive.
									Node:
									(type) c
									(layer)3
										Element:label
											Username or Email
											Please enter your username or e-mail address.
									Node:
									(type) c
									(layer)3
										Element:label
											Password
											Please enter your password.
									Node:
									(type) c
									(layer)3
										Element:label
											Remember Me
									Node:
									(type) c
									(layer)3
										Element:a
											Forgot Password?
									Node:
									(type) h3
									(layer)3
										Element:h3
											Forgot your password?
											Please enter your username or email address that you signed up with.
									Node:
									(type) c
									(layer)3
										Element:label
											Username or Email
											Username for Password Please enter your username or e-mail address.
									Node:
									(type) c
									(layer)3
										Element:a
											LOGIN
									Node:
									(type) c
									(layer)3
										Element:a
											NAV
										Element:img
										Element:img
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:a
											Comparison
										Element:li
										Element:a
											REST
										Element:span
										Element:ul
										Element:li
										Element:a
											Overview
										Element:li
										Element:a
											Functions
										Element:span
										Element:ul
										Element:li
										Element:a
											List
										Element:li
										Element:a
											Subscription
										Element:li
										Element:a
											Custom Data Field
										Element:li
										Element:a
											Direct SMS
										Element:li
										Element:a
											Message
										Element:li
										Element:a
											Keyword
										Element:li
										Element:a
											Publication
										Element:li
										Element:a
											Resource Balance
										Element:li
										Element:a
											Organization Name
										Element:li
										Element:a
											Social Media Account
										Element:li
										Element:a
											Email Sender Address
										Element:li
										Element:a
											Status Report
										Element:li
										Element:a
											PUSH Notifications
										Element:span
										Element:ul
										Element:li
										Element:a
											List
										Element:li
										Element:a
											Subscription
										Element:li
										Element:a
											Custom Data Field
										Element:li
										Element:a
											Direct SMS
										Element:li
										Element:a
											Message
										Element:li
										Element:a
											Keyword
										Element:li
										Element:a
											Publication
										Element:li
										Element:a
											Organization Name
										Element:li
										Element:a
											Social Media Account
										Element:li
										Element:a
											Email Sender Address
										Element:li
										Element:a
											System Status Codes
										Element:span
										Element:ul
										Element:li
										Element:a
											Common
										Element:li
										Element:a
											List
										Element:li
										Element:a
											Subscription
										Element:li
										Element:a
											Custom Data Field
										Element:li
										Element:a
											Direct SMS
										Element:li
										Element:a
											Message
										Element:li
										Element:a
											Keyword
										Element:li
										Element:a
											Publication
										Element:li
										Element:a
											Organization Name
										Element:li
										Element:a
											Social Media Account
										Element:li
										Element:a
											Email Sender Address
										Element:li
										Element:a
											Status Report
										Element:li
										Element:a
											HTTP
										Element:span
										Element:ul
										Element:li
										Element:a
											Overview
										Element:li
										Element:a
											Functions
										Element:span
										Element:ul
										Element:li
										Element:a
											List
										Element:li
										Element:a
											Contact
										Element:li
										Element:a
											Direct SMS
										Element:li
										Element:a
											Message
										Element:li
										Element:a
											Keyword
										Element:li
										Element:a
											Check Response
										Element:li
										Element:a
											PUSH Notifications
										Element:span
										Element:ul
										Element:li
										Element:a
											Direct SMS
										Element:li
										Element:a
											Message
										Element:li
										Element:a
											System Status Codes
										Element:span
										Element:ul
										Element:li
										Element:a
											Direct SMS
										Element:li
										Element:a
											SDK
										Element:span
										Element:ul
										Element:li
										Element:a
											SDK Overview
										Element:li
										Element:a
											Setting Up SDK
										Element:li
										Element:a
											API Request via SDK
										Element:span
										Element:ul
										Element:li
										Element:a
											Distribution List API
										Element:li
										Element:a
											Subscription API
										Element:li
										Element:a
											Message API
										Element:li
										Element:a
											Receiving Push
										Element:br
											Notification via SDK
										Element:span
										Element:ul
										Element:li
										Element:a
											Distribution List
										Element:li
										Element:a
											Subscription
										Element:li
										Element:a
											Message
										Element:li
										Element:a
											Receiving Inbound Message
										Element:li
										Element:a
											Additional Resources
										Element:span
										Element:ul
										Element:li
										Element:a
											API Settings
										Element:li
										Element:a
											Text Delivery Reports
										Element:li
										Element:a
											Email Delivery Reports
										Element:li
										Element:a
											Supported Message Characters
										Element:li
										Element:a
											Supported MMS Types
										Element:li
										Element:a
											URL Encoded Characters
									Node:
									(type) c
									(layer)3
										Element:span
											REST
											>
									Node:
									(type) c
									(layer)3
										Element:a
											Functions
											>
									Node:
									(type) c
									(layer)3
										Element:a
											Message
											>
									Node:
									(type) c
									(layer)3
										Element:a
											On This Page
									Node:
									(type) c
									(layer)3
										Element:ul
									Node:
									(type) c
									(layer)3
										Element:span
									Node:
									(type) c
									(layer)3
										Element:a
									Node:
									(type) h3
									(layer)3
										Element:h3
											Message
										Element:span
											(Last Updated : 01/04/2017)
									Node:
									(type) c
									(layer)3
										Element:p
											Send a message via supported communication channels, including mobile-text message (SMS/MMS), or email.
									Node:
									(type) c
									(layer)3
										Element:aside
											It is important to note that API users must comply with our Terms of Use and industry privacy regulations, such as the CAN-SPAM act. Subscriptions should be added only with the expressed consent of the subscribers and that they be given the permission to opt-out, which is enabled by default with our text-messaging functions.
									Node:
									(type) c
									(layer)3
										Element:p
										Element:strong
											Methods
									Node:
									(type) c
									(layer)3
										Element:table
										Element:colgroup
										Element:col
										Element:col
										Element:tbody
										Element:tr
										Element:td
											PUT
										Element:td
										Element:code
											/rest/v1/{user_name}/message
										Element:tr
										Element:td
											GET
										Element:td
										Element:code
											/rest/v1/{user_name}/message/{message_id}
										Element:tr
										Element:td
											GET
										Element:td
										Element:code
											/rest/v1/{user_name}/message/scheduled
										Element:tr
										Element:td
											DELETE
										Element:td
										Element:code
											/rest/v1/{user_name}/message/scheduled/{message_id}
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														PUT Message
												Node:
												(type) c
												(layer)4
													Element:p
														To send a message, you will need to provide the ID of the subscription or distribution list(s) you wish to message.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:strong
														Resource Information
												Node:
												(type) c
												(layer)4
													Element:table
													Element:colgroup
													Element:col
													Element:col
													Element:tbody
													Element:tr
													Element:td
														Response Formats
													Element:td
														JSON
													Element:tr
													Element:td
														Allowed Methods
													Element:td
														PUT
													Element:tr
													Element:td
														URL
													Element:td
													Element:code
														http://api.trumpia.com/rest/v1/{user_name}/message
													Element:tr
													Element:td
														{user_name}
													Element:td
														Your account username (this can be found in the Account Settings page after logging in.)
												Node:
												(type) c
												(layer)4
													Element:p
													Element:strong
														Header Parameters
												Node:
												(type) c
												(layer)4
													Element:span
													Element:strong
														&ast;
														required parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:colgroup
													Element:col
													Element:col
													Element:thead
													Element:tr
													Element:th
														Parameter
													Element:th
														Description
													Element:tbody
													Element:tr
													Element:td
														Content-Type
													Element:span
														&ast;
													Element:td
														application/json
													Element:tr
													Element:td
														X-Apikey
													Element:span
														&ast;
													Element:td
														Your API key (This can be found in the API Settings page after logging in.)
													Element:br
													Element:br
														Example value: 123456789abc1011
												Node:
												(type) c
												(layer)4
													Element:p
													Element:strong
														Body Parameters
												Node:
												(type) c
												(layer)4
													Element:span
													Element:strong
														&ast;
														required parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:colgroup
													Element:col
													Element:col
													Element:thead
													Element:tr
													Element:th
														Parameter
													Element:th
														Description
													Element:tbody
													Element:tr
													Element:td
														description
													Element:span
														&ast;
													Element:td
														Description of your message for your reference.
													Element:tr
													Element:td
														email
													Element:td
														See Email Object table below.
													Element:tr
													Element:td
														sms/mms
													Element:td
														Send an SMS or MMS by changing this parameter. See SMS or MMS Object table below.
													Element:tr
													Element:td
														org_name_id
													Element:td
														The organization name ID you wish to include in the mobile message. Only registered organization name IDs can be used. You can get the registered organization name IDs via
													Element:a
														GET Organization Name
														. The default organization name is used if this parameter is not specified.
													Element:tr
													Element:td
														recipients
													Element:span
														&ast;
													Element:td
														See Recipients Object table below.
													Element:tr
													Element:td
														mail_merge
													Element:td
														Mail merge is the replacement value for null data if the content contains mail merge variables, such as first name and last name. See Mail Merge Object table below.
													Element:tr
													Element:td
														send_date
													Element:td
														Date format: YYYY-MM-DD hh:mm:ss (ex: 2009-04-22 14:10:32)
													Element:table
													Element:colgroup
													Element:col
													Element:col
													Element:thead
													Element:tr
													Element:th
														Value
													Element:th
														Description
													Element:tbody
													Element:tr
													Element:td
														YYYY
													Element:td
														four-digit year
													Element:tr
													Element:td
														MM
													Element:td
														two-digit month (01=January, etc.)
													Element:tr
													Element:td
														DD
													Element:td
														two-digit day of month (01 through 31)
													Element:tr
													Element:td
														hh
													Element:td
														two digit hours (00 through 23; am/pm NOT allowed)
													Element:tr
													Element:td
														mm
													Element:td
														two digit minutes (00 through 59)
													Element:tr
													Element:td
														ss
													Element:td
														two digit seconds (00 through 59)
												Node:
												(type) c
												(layer)4
													Element:p
													Element:strong
														> Email Object
												Node:
												(type) c
												(layer)4
													Element:span
													Element:strong
														&ast;
														required parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:colgroup
													Element:col
													Element:col
													Element:thead
													Element:tr
													Element:th
														Parameter
													Element:th
														Description
													Element:tbody
													Element:tr
													Element:td
														subject
													Element:span
														&ast;
													Element:td
														Email subject.
													Element:tr
													Element:td
														body
													Element:span
														&ast;
													Element:td
														Email content.
													Element:br
													Element:br
														You can add first name, last name, and custom data fields as mail merge data. This will automatically populate a placeholder text in the message that will be replaced with data from the subscriber. Also, you can have up to ten mail merge data fields, and format them as specified below.
													Element:table
														If you do not enter the mail merge data in the correct format, our system will process it as regular text. As a result, you may get a status code referencing unsupported characters due to '[', ']'.
													Element:colgroup
													Element:col
													Element:col
													Element:thead
													Element:tr
													Element:th
														Data
													Element:th
														Input Value
													Element:tbody
													Element:tr
													Element:td
														First Name
													Element:td
														[$FirstName]
													Element:tr
													Element:td
														Last Name
													Element:td
														[$LastName]
													Element:tr
													Element:td
														Custom Data Field
													Element:td
														You can get this value via
													Element:a
														GET Custom Data Field
														. You can add value of "mail_merge_text". Ex) [$CustomData-HIGH_SCHOOL]
													Element:br
													Element:br
														When you use mail merge in your message, the system will calculate the character limit with the maximum length specified in each mail merge field. This is specified below.
													Element:table
													Element:colgroup
													Element:col
													Element:col
													Element:thead
													Element:tr
													Element:th
														Data
													Element:th
														Calculated Max Character Count
													Element:tbody
													Element:tr
													Element:td
														First Name
													Element:td
														30 characters
													Element:tr
													Element:td
														Last Name
													Element:td
														30 characters
													Element:tr
													Element:td
														Custom Data Field - Text Field
													Element:td
														You can get the maximum character count via the GET Custom Data Field function. The max length will be returned in the "max_length" parameter.
													Element:tr
													Element:td
														Custom Data Field - Radio Button
													Element:td
														The maximum character count will be decided by the longest value in the set. Ex) "values" : ["Giraffe", "Dog", "Cat"]. This means the character count is seven.
													Element:tr
													Element:td
														Custom Data Field - Drop Down List
													Element:td
														The maximum character count will be decided by the longest value in the set. Ex) "values" : ["Giraffe", "Dog", "Cat"]. This means the character count is seven.
													Element:tr
													Element:td
														Custom Data Field - Date & Time
													Element:td
														Date: 10 characters
													Element:br
														Date & Time: 20 characters
													Element:tr
													Element:td
														Custom Data Field - Number
													Element:td
														You can get the maximum character count via the GET Custom Data Field function. The max length will be returned in the "max" parameter. The max value will be the digit count of the max value. Ex) "max" : 100. This means the character count is three.
													Element:tr
													Element:td
														Custom Data Field - Text Area
													Element:td
														You cannot use this custom data field in your message, as the maximum character count is too large (4,000).
													Element:tr
													Element:td
														reply_to
													Element:td
														Use a different reply to email address. The default email address will be used if parameter is null.
													Element:tr
													Element:td
														shareable
													Element:td
														The shareable parameter allows you to add a "Share on Social Sites" link in the footer of the email. By default, this will be set to true, which means this link will be added to the footer. Please note that this is a Boolean type.
													Element:tr
													Element:td
														forwardable
													Element:td
														The forwardable parameter allows you to add a "Forward Email" link in the footer of the email. By default, this will be set to true, which means this link will be added to the footer. Please note that this is a Boolean type.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:strong
														> SMS Object
												Node:
												(type) c
												(layer)4
													Element:span
													Element:strong
														&ast;
														required parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:colgroup
													Element:col
													Element:col
													Element:thead
													Element:tr
													Element:th
														Parameter
													Element:th
														Description
													Element:tbody
													Element:tr
													Element:td
														message
													Element:span
														&ast;
													Element:td
														SMS message.
													Element:a
														Supported Character Set
														.
													Element:br
													Element:br
														Character limits vary per country. The maximum length for a message is 160 characters as default. For instance, SMS messages for Canadian accounts are limited to 140 characters. Although a 160 character message can be sent in full to US mobile numbers, Canadian mobile devices will only receive the first 140 characters.
													Element:br
													Element:br
														Also, please note that the SMS header and footer are counted as part of the message and should be taken into consideration when composing a message.
													Element:br
													Element:br
														You can add first name, last name, and custom data fields as mail merge data. This will automatically populate a placeholder text in the message that will be replaced with data from the subscriber. Also, you can have up to ten mail merge data fields, and format them as specified below.
													Element:table
														If you do not enter the mail merge data in the correct format, our system will process it as regular text. As a result, you may get a status code referencing unsupported characters due to '[', ']'.
													Element:colgroup
													Element:col
													Element:col
													Element:thead
													Element:tr
													Element:th
														Data
													Element:th
														Input Value
													Element:tbody
													Element:tr
													Element:td
														First Name
													Element:td
														[$FirstName]
													Element:tr
													Element:td
														Last Name
													Element:td
														[$LastName]
													Element:tr
													Element:td
														Custom Data Field
													Element:td
														You can get this value via
													Element:a
														GET Custom Data Field
														. You can add value of "mail_merge_text". Ex) [$CustomData-HIGH_SCHOOL]
													Element:br
													Element:br
														When you use mail merge in your message, the system will calculate the character limit with the maximum length specified in each mail merge field. This is specified below.
													Element:table
													Element:colgroup
													Element:col
													Element:col
													Element:thead
													Element:tr
													Element:th
														Data
													Element:th
														Calculated Max Character Count
													Element:tbody
													Element:tr
													Element:td
														First Name
													Element:td
														30 characters
													Element:tr
													Element:td
														Last Name
													Element:td
														30 characters
													Element:tr
													Element:td
														Custom Data Field - Text Field
													Element:td
														You can get the maximum character count via the GET Custom Data Field function. The max length will be returned in the "max_length" parameter.
													Element:tr
													Element:td
														Custom Data Field - Radio Button
													Element:td
														The maximum character count will be decided by the longest value in the set. Ex) "values" : ["Giraffe", "Dog", "Cat"]. This means the character count is seven.
													Element:tr
													Element:td
														Custom Data Field - Drop Down List
													Element:td
														The maximum character count will be decided by the longest value in the set. Ex) "values" : ["Giraffe", "Dog", "Cat"]. This means the character count is seven.
													Element:tr
													Element:td
														Custom Data Field - Date & Time
													Element:td
														Date: 10 characters
													Element:br
														Date & Time: 20 characters
													Element:tr
													Element:td
														Custom Data Field - Number
													Element:td
														You can get the maximum character count via the GET Custom Data Field function. The max length will be returned in the "max" parameter. The max value will be the digit count of the max value. Ex) "max" : 100. This means the character count is three.
													Element:tr
													Element:td
														Custom Data Field - Text Area
													Element:td
														You cannot use this custom data field in your message, as the maximum character count is too large (4,000).
												Node:
												(type) c
												(layer)4
													Element:p
													Element:strong
														> MMS Object
												Node:
												(type) c
												(layer)4
													Element:span
													Element:strong
														&ast;
														required parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:colgroup
													Element:col
													Element:col
													Element:thead
													Element:tr
													Element:th
														Parameter
													Element:th
														Description
													Element:tbody
													Element:tr
													Element:td
														subject
													Element:td
														MMS subject line; character limit is 50 bytes.
													Element:a
														Supported Character Set
														.
													Element:tr
													Element:td
														message
													Element:span
														&ast;
													Element:td
														MMS message; character limit is 500 bytes.
													Element:a
														Supported Character Set
														.
													Element:br
													Element:br
														You can add first name, last name, and custom data fields as mail merge data. This will automatically populate a placeholder text in the message that will be replaced with data from the subscriber. Also, you can have up to ten mail merge data fields, and format them as specified below. specified below.
													Element:table
														If you do not enter the mail merge data in the correct format, our system will process it as regular text. As a result, you may get a status code referencing unsupported characters due to '[', ']'.
													Element:colgroup
													Element:col
													Element:col
													Element:thead
													Element:tr
													Element:th
														Data
													Element:th
														Input Value
													Element:tbody
													Element:tr
													Element:td
														First Name
													Element:td
														[$FirstName]
													Element:tr
													Element:td
														Last Name
													Element:td
														[$LastName]
													Element:tr
													Element:td
														Custom Data Field
													Element:td
														You can get this value via
													Element:a
														GET Custom Data Field
														. You can add value of "mail_merge_text". Ex) [$CustomData-HIGH_SCHOOL]
													Element:br
													Element:br
														When you use mail merge in your message, the system will calculate the character limit with the maximum length specified in each mail merge field. This is specified below.
													Element:table
													Element:colgroup
													Element:col
													Element:col
													Element:thead
													Element:tr
													Element:th
														Data
													Element:th
														Calculated Max Character Count
													Element:tbody
													Element:tr
													Element:td
														First Name
													Element:td
														30 characters
													Element:tr
													Element:td
														Last Name
													Element:td
														30 characters
													Element:tr
													Element:td
														Custom Data Field - Text Field
													Element:td
														You can get the maximum character count via the GET Custom Data Field function. The max length will be returned in the "max_length" parameter.
													Element:tr
													Element:td
														Custom Data Field - Radio Button
													Element:td
														The maximum character count will be decided by the longest value in the set. Ex) "values" : ["Giraffe", "Dog", "Cat"]. This means the character count is seven.
													Element:tr
													Element:td
														Custom Data Field - Drop Down List
													Element:td
														The maximum character count will be decided by the longest value in the set. Ex) "values" : ["Giraffe", "Dog", "Cat"]. This means the character count is seven.
													Element:tr
													Element:td
														Custom Data Field - Date & Time
													Element:td
														Date: 10 characters
													Element:br
														Date & Time: 20 characters
													Element:tr
													Element:td
														Custom Data Field - Number
													Element:td
														You can get the maximum character count via the GET Custom Data Field function. The max length will be returned in the "max" parameter. The max value will be the digit count of the max value. Ex) "max" : 100. This means the character count is three.
													Element:tr
													Element:td
														Custom Data Field - Text Area
													Element:td
														You cannot use this custom data field in your message, as the maximum character count is too large (4,000).
													Element:tr
													Element:td
														resource
													Element:td
														Resource URL required. Image size limit is 500 KB; supported image file types include .JPG, .PNG, .GIF (non-animated), .BMP; Video size limit is 3 MB; supported video file types include .AVI, .MP4, .WMV, and .MOV.
													Element:a
														Supported audio and video codecs
														.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:strong
														> Recipients Object
												Node:
												(type) c
												(layer)4
													Element:span
													Element:strong
														&ast;
														required parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:colgroup
													Element:col
													Element:col
													Element:thead
													Element:tr
													Element:th
														Parameter
													Element:th
														Description
													Element:tbody
													Element:tr
													Element:td
														type
													Element:span
														&ast;
													Element:td
														Send to one or more subscriptions or lists.
													Element:br
													Element:br
														Example value: 'list' or 'subscription'
													Element:tr
													Element:td
														value
													Element:span
														&ast;
													Element:td
														Subscription IDs or List IDs. You can enter up to 100 list IDs or 300 subscription IDs with an API call.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:strong
														> Mail Merge Object
												Node:
												(type) c
												(layer)4
													Element:span
													Element:strong
														&ast;
														required parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:colgroup
													Element:col
													Element:col
													Element:thead
													Element:tr
													Element:th
														Parameter
													Element:th
														Description
													Element:tbody
													Element:tr
													Element:td
														first_name
													Element:td
														If you added first_name in the message content, you can set this as replacement text. When the subscriber's data is null, then this value will be used.
													Element:tr
													Element:td
														last_name
													Element:td
														If you added last_name in the message contents, you can set this as replacement text. When the subscriber's data is null, then this value will be used.
												Node:
												(type) c
												(layer)4
													Element:a
														JSON
												Node:
												(type) c
												(layer)4
													Element:a
														PHP
												Node:
												(type) c
												(layer)4
													Element:a
														JSP
												Node:
												(type) c
												(layer)4
													Element:a
														C#
												Node:
												(type) c
												(layer)4
													Element:blockquote
													Element:p
														Code sample for PUT Message
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
													Element:span
														"Request Example: PUT http://api.trumpia.com/rest/v1/{user_name}/message"
													Element:span
													Element:span
														{
													Element:span
													Element:span
														"description"
													Element:span
													Element:span
														:
													Element:span
													Element:span
														"This is a description"
													Element:span
														,
													Element:span
													Element:span
														"email"
													Element:span
													Element:span
														:
													Element:span
													Element:span
														{
													Element:span
													Element:span
														"subject"
													Element:span
													Element:span
														:
													Element:span
													Element:span
														"Hello [$FirstName], REST API is here!"
													Element:span
														,
													Element:span
													Element:span
														"body"
													Element:span
													Element:span
														:
													Element:span
													Element:span
														"Contact support for more info."
													Element:span
													Element:span
														},
													Element:span
													Element:span
														"sms"
													Element:span
													Element:span
														:
													Element:span
													Element:span
														{
													Element:span
													Element:span
														"message"
													Element:span
													Element:span
														:
													Element:span
													Element:span
														"Hello [$LastName], REST API is out now!"
													Element:span
													Element:span
														},
													Element:span
													Element:span
														"recipients"
													Element:span
													Element:span
														:
													Element:span
													Element:span
														{
													Element:span
													Element:span
														"type"
													Element:span
													Element:span
														:
													Element:span
													Element:span
														"list"
													Element:span
														,
													Element:span
													Element:span
														"value"
													Element:span
													Element:span
														:
													Element:span
													Element:span
														"987987987980, 9879879879801"
													Element:span
													Element:span
														},
													Element:span
													Element:span
														"mail_merge"
													Element:span
													Element:span
														:
													Element:span
													Element:span
														{
													Element:span
													Element:span
														"first_name"
													Element:span
													Element:span
														:
													Element:span
													Element:span
														"Jason"
													Element:span
														,
													Element:span
													Element:span
														"last_name"
													Element:span
													Element:span
														:
													Element:span
													Element:span
														"Doe"
													Element:span
													Element:span
														}
													Element:span
													Element:span
														}
													Element:span
													Element:span
														"Response Example:"
													Element:span
													Element:span
														{
													Element:span
													Element:span
														"request_id"
													Element:span
													Element:span
														:
													Element:span
													Element:span
														"1234561234567asdf123"
													Element:span
														,
													Element:span
													Element:span
														"message_id"
													Element:span
													Element:span
														:
													Element:span
													Element:span
														"987987987987"
													Element:span
													Element:span
														}
													Element:span
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														<? // PUT Message - Send a message. include "
													Element:a
														request_rest.php
														"; $request_url = "http://api.trumpia.com/rest/v1/{user_name}/message"; $request_data = array( "description" => "This is a description", "email" => array( "subject" => "api.trumpia.com REST API", "body" => "We look forward to serving you." ), "sms" => array( "message" => "Hello api.trumpia.com API" ), "recipients" => array( "type" => "list", "value" => "987987987980" ) ); $request_rest = new RestRequest(); $request_rest->setRequestURL($request_url); $request_rest->setAPIKey("{api_key}"); $request_rest->setRequestBody(json_encode($request_data)); $request_rest->setMethod("PUT"); $result = $request_rest->execute(); $response_status = $result[0]; $json_response_data = $result[1]; if ($response_status == "200") { //success $response_data = json_decode($json_response_data); echo "request_id : " . $response_data->request_id . "<br>"; echo "message_id : " . $response_data->message_id; } else { echo $response_status ." - connection failure"; } ?> <? // PUT Message - Send a message (with MMS). include "
													Element:a
														request_rest.php
														"; $request_url = "http://api.trumpia.com/rest/v1/{user_name}/message"; $request_data = array( "description" => "This is a description", "email" => array( "subject" => "api.trumpia.com REST API", "body" => "We look forward to serving you." ), "mms" => array( "subject" => "api.trumpia.com REST API", "message" => "Hello api.trumpia.com API", "resource" => "http://api.trumpia.com/images/main_120424/logo_t2.png" ), "recipients" => array( "type" => "list", "value" => "987987987980" ) ); $request_rest = new RestRequest(); $request_rest->setRequestURL($request_url); $request_rest->setAPIKey("{api_key}"); $request_rest->setRequestBody(json_encode($request_data)); $request_rest->setMethod("PUT"); $result = $request_rest->execute(); $response_status = $result[0]; $json_response_data = $result[1]; if ($response_status == "200") { //success $response_data = json_decode($json_response_data); echo "request_id : " . $response_data->request_id . "<br>"; echo "message_id : " . $response_data->message_id; } else { echo $response_status ." - connection failure"; } ?>
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														// PUT Message - Send a message. <%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%> <%@ page import="org.json.simple.JSONArray" %> <%@ page import="org.json.simple.JSONObject" %> <%@ page import="java.io.BufferedReader" %> <%@ page import="java.io.IOException" %> <%@ page import="java.io.InputStreamReader" %> <%@ page import="java.io.OutputStream" %> <%@ page import="java.io.OutputStreamWriter" %> <%@ page import="java.io.Writer" %> <%@ page import="java.net.HttpURLConnection" %> <%@ page import="java.net.URL" %> <html> <title>Message Put SMS Sample Code</title> <body> <% String username = "username"; JSONObject email = new JSONObject(); email.put("subject", "api.trumpia.com REST API"); email.put("body", "Hello. We look forward to serving you."); JSONObject im = new JSONObject(); im.put("message", "Hello. This is IM Message."); JSONObject sms = new JSONObject(); sms.put("message", "This is SMS Message."); JSONObject recipients = new JSONObject(); recipients.put("type", "list"); recipients.put("value", "987987987980"); //recipients.put("type", "subscription"); //recipients.put("value", "987987987980"); JSONObject mailMerge = new JSONObject(); mailMerge.put("first_name", "Subscriber's First Name"); mailMerge.put("last_name", "Subscriber's Last Name"); JSONObject messagePut = new JSONObject(); messagePut.put("description", "This is description"); messagePut.put("email", email); messagePut.put("im", im); messagePut.put("sms", sms); messagePut.put("recipients", recipients); messagePut.put("mail_merge", mailMerge); //messagePut.put("send_date", "2012-04-23 12:00:00"); String urlStr = "http://api.trumpia.com/rest/v1/" + username + "/message"; URL url = new URL(urlStr); HttpURLConnection conn = (HttpURLConnection) url.openConnection(); conn.setRequestMethod("PUT"); conn.setDoOutput(true); conn.setDoInput(true); conn.setUseCaches(false); conn.setAllowUserInteraction(false); conn.setRequestProperty("Content-type", "application/json"); conn.setRequestProperty("X-Apikey", "12345aaaaa67890aaaaa"); OutputStream outPutStream = conn.getOutputStream(); Writer writer = new OutputStreamWriter(outPutStream, "UTF-8"); writer.write(messagePut.toJSONString()); writer.close(); outPutStream.close(); if (conn.getResponseCode() != 200) { %> Error : <%=conn.getResponseMessage()%> <% }else{ // Buffer the result into a string BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream())); StringBuilder sb = new StringBuilder(); String line; while ((line = rd.readLine()) != null) { sb.append(line); } rd.close(); conn.disconnect(); %> Response : <%=sb.toString()%> <% } %> </body> </html> // PUT Message - Send a message (with MMS). <%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%> <%@ page import="org.json.simple.JSONArray" %> <%@ page import="org.json.simple.JSONObject" %> <%@ page import="java.io.BufferedReader" %> <%@ page import="java.io.IOException" %> <%@ page import="java.io.InputStreamReader" %> <%@ page import="java.io.OutputStream" %> <%@ page import="java.io.OutputStreamWriter" %> <%@ page import="java.io.Writer" %> <%@ page import="java.net.HttpURLConnection" %> <%@ page import="java.net.URL" %> <html> <title>Message Put MMS Sample Code</title> <body> <% String username = "username"; JSONObject email = new JSONObject(); email.put("subject", "api.trumpia.com REST API"); email.put("body", "Hello. We look forward to serving you."); JSONObject im = new JSONObject(); im.put("message", "Hello. This is IM Message."); JSONObject mms = new JSONObject(); mms.put("subject", "MMS SUBJECT"); mms.put("message", "This is sms Message."); mms.put("resource", "http://api.trumpia.com/files.jpg"); JSONObject recipients = new JSONObject(); recipients.put("type", "list"); recipients.put("value", "987987987980"); //recipients.put("type", "subscription"); //recipients.put("value", "987987987980"); JSONObject mailMerge = new JSONObject(); mailMerge.put("first_name", "Subscriber's First Name"); mailMerge.put("last_name", "Subscriber's Last Name"); JSONObject messagePut = new JSONObject(); messagePut.put("description", "This is description"); messagePut.put("email", email); messagePut.put("im", im); messagePut.put("mms", mms); messagePut.put("recipients", recipients); messagePut.put("mail_merge", mailMerge); //messagePut.put("send_date", "2012-04-23 12:00:00"); String urlStr = "http://api.trumpia.com/rest/v1/" + username + "/message"; URL url = new URL(urlStr); HttpURLConnection conn = (HttpURLConnection) url.openConnection(); conn.setRequestMethod("PUT"); conn.setDoOutput(true); conn.setDoInput(true); conn.setUseCaches(false); conn.setAllowUserInteraction(false); conn.setRequestProperty("Content-type", "application/json"); conn.setRequestProperty("X-Apikey", "12345aaaaa67890aaaaa"); OutputStream outPutStream = conn.getOutputStream(); Writer writer = new OutputStreamWriter(outPutStream, "UTF-8"); writer.write(messagePut.toJSONString()); writer.close(); outPutStream.close(); if (conn.getResponseCode() != 200) { %> Error : <%=conn.getResponseMessage()%> <% }else{ // Buffer the result into a string BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream())); StringBuilder sb = new StringBuilder(); String line; while ((line = rd.readLine()) != null) { sb.append(line); } rd.close(); conn.disconnect(); %> Response : <%=sb.toString()%> <% } %> </body> </html>
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														// PUT Message - Send a message. using Newtonsoft.Json; using Newtonsoft.Json.Linq; using System; using System.Collections.Generic; using System.Linq; using System.Net.Http; using System.Net.Http.Headers; using System.Text; using System.Threading.Tasks; namespace samplecode { class MessageInfo { public string description { get; set; } public JObject email { get; set; } public JObject sms { get; set; } public JObject recipients { get; set; } } class Result { public string request_id { get; set; } } class MessagePut { static void Main() { RunAsync().Wait(); } static async Task RunAsync() { using (var client = new HttpClient()) { var apikey = "12345aaaaa67890aaaaa"; client.DefaultRequestHeaders.Accept.Clear(); client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json")); client.DefaultRequestHeaders.Add("X-Apikey", string.Format("{0}", apikey)); var username = "username"; //PUT JObject emailData = new JObject(); emailData.Add("subject", "Hello REST API"); emailData.Add("body", "We look forward to serving you."); JObject smsData = new JObject(); smsData.Add("message", "Hello REST API"); JObject recipientData = new JObject(); recipientData.Add("type", "subscription"); recipientData.Add("value", "987987987980"); var info = new MessageInfo() { description = "This is a description", email = emailData, sms = smsData, recipients = recipientData }; Uri postUrl = new Uri(string.Format("http://api.trumpia.com/rest/v1/{0}/message", username)); var response = client.PutAsJsonAsync(postUrl, info).Result; if (response.IsSuccessStatusCode) { var p = response.Content.ReadAsAsync<Result>().Result; string json = JsonConvert.SerializeObject(p); Console.WriteLine(json); } } } } }
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														GET Message
												Node:
												(type) c
												(layer)4
													Element:p
														Retrieve the statistics of a successfully processed message. This includes the total number of recipients, delivered messages, and failed messages. FYI, requested_data will be added for PUT Message item only. You cannot GET requested_data for created messages in the web service.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:strong
														Resource Information
												Node:
												(type) c
												(layer)4
													Element:table
													Element:colgroup
													Element:col
													Element:col
													Element:tbody
													Element:tr
													Element:td
														Response Formats
													Element:td
														JSON
													Element:tr
													Element:td
														Allowed Methods
													Element:td
														GET
													Element:tr
													Element:td
														URL
													Element:td
													Element:code
														http://api.trumpia.com/rest/v1/{user_name}/message/{message_id}
													Element:tr
													Element:td
														{user_name}
													Element:td
														Your account username (this can be found in the Account Settings page after logging in.)
													Element:tr
													Element:td
														{message_id}
													Element:td
														The details of this message_id that are retrieved.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:strong
														Header Parameters
												Node:
												(type) c
												(layer)4
													Element:span
													Element:strong
														&ast;
														required parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:colgroup
													Element:col
													Element:col
													Element:thead
													Element:tr
													Element:th
														Parameter
													Element:th
														Description
													Element:tbody
													Element:tr
													Element:td
														Content-Type
													Element:span
														&ast;
													Element:td
														application/json
													Element:tr
													Element:td
														X-Apikey
													Element:span
														&ast;
													Element:td
														Your API key (This can be found in the API Settings page after logging in.)
													Element:br
													Element:br
														Example value: 123456789abc1011
												Node:
												(type) c
												(layer)4
													Element:aside
														The 'status' parameters within the json response will be: sent, scheduled, or canceled.
												Node:
												(type) c
												(layer)4
													Element:a
														JSON
												Node:
												(type) c
												(layer)4
													Element:a
														PHP
												Node:
												(type) c
												(layer)4
													Element:a
														JSP
												Node:
												(type) c
												(layer)4
													Element:a
														C#
												Node:
												(type) c
												(layer)4
													Element:blockquote
													Element:p
														Code sample for GET Message
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
													Element:span
														"Request Example (all subscriptions): GET http://api.trumpia.com/rest/v1/{user_name}/message/{message_id}"
													Element:span
													Element:span
														"Response Example: The following examples are for message blasts that include SMS. For blasts that include MMS, the only difference will be that the 'sms' parameter will be called 'mms'."
													Element:span
													Element:span
														{
													Element:span
													Element:span
														"status"
													Element:span
													Element:span
														:
													Element:span
													Element:span
														"sent"
													Element:span
														,
													Element:span
													Element:span
														"email"
													Element:span
													Element:span
														:
													Element:span
													Element:span
														{
													Element:span
														"total"
													Element:span
													Element:span
														:
													Element:span
													Element:span
														5
													Element:span
														,
													Element:span
														"sent"
													Element:span
													Element:span
														:
													Element:span
													Element:span
														2
													Element:span
														,
													Element:span
														"failed"
													Element:span
													Element:span
														:
													Element:span
													Element:span
														3
													Element:span
														},
													Element:span
													Element:span
														"sms"
													Element:span
													Element:span
														:
													Element:span
													Element:span
														{
													Element:span
														"total"
													Element:span
													Element:span
														:
													Element:span
													Element:span
														5
													Element:span
														,
													Element:span
														"sent"
													Element:span
													Element:span
														:
													Element:span
													Element:span
														5
													Element:span
														,
													Element:span
														"failed"
													Element:span
													Element:span
														:
													Element:span
													Element:span
														0
													Element:span
														},
													Element:span
													Element:span
														"im"
													Element:span
													Element:span
														:
													Element:span
													Element:span
														{
													Element:span
														"total"
													Element:span
													Element:span
														:
													Element:span
													Element:span
														5
													Element:span
														,
													Element:span
														"sent"
													Element:span
													Element:span
														:
													Element:span
													Element:span
														1
													Element:span
														,
													Element:span
														"failed"
													Element:span
													Element:span
														:
													Element:span
													Element:span
														4
													Element:span
														},
													Element:span
													Element:span
														"coupon"
													Element:span
													Element:span
														:
													Element:span
													Element:span
														[
													Element:span
													Element:span
														{
													Element:span
														"coupon_code"
													Element:span
													Element:span
														:
													Element:span
													Element:span
														"9pao8e98l9s0"
													Element:span
														,
													Element:span
														"subscription"
													Element:span
													Element:span
														:
													Element:span
													Element:span
														"6666666"
													Element:span
														},
													Element:span
													Element:span
														{
													Element:span
														"coupon_code"
													Element:span
													Element:span
														:
													Element:span
													Element:span
														"ap9o8e9979sa"
													Element:span
														,
													Element:span
														"subscription"
													Element:span
													Element:span
														:
													Element:span
													Element:span
														"7777777"
													Element:span
														},
													Element:span
													Element:span
														{
													Element:span
														"coupon_code"
													Element:span
													Element:span
														:
													Element:span
													Element:span
														"a03ui49s83a8"
													Element:span
														,
													Element:span
														"subscription"
													Element:span
													Element:span
														:
													Element:span
													Element:span
														"8888888"
													Element:span
														},
													Element:span
													Element:span
														{
													Element:span
														"coupon_code"
													Element:span
													Element:span
														:
													Element:span
													Element:span
														"afn209z7va2f"
													Element:span
														,
													Element:span
														"subscription"
													Element:span
													Element:span
														:
													Element:span
													Element:span
														"9999999"
													Element:span
														},
													Element:span
													Element:span
														{
													Element:span
														"coupon_code"
													Element:span
													Element:span
														:
													Element:span
													Element:span
														"ginz921x3482"
													Element:span
														,
													Element:span
														"subscription"
													Element:span
													Element:span
														:
													Element:span
													Element:span
														"0000000"
													Element:span
														}
													Element:span
													Element:span
														],
													Element:span
													Element:span
														"used_credit"
													Element:span
													Element:span
														:
													Element:span
													Element:span
														{
													Element:span
													Element:span
														"domestic"
													Element:span
													Element:span
														:
													Element:span
													Element:span
														100
													Element:span
														,
													Element:span
													Element:span
														"international"
													Element:span
													Element:span
														:
													Element:span
													Element:span
														20
													Element:span
													Element:span
														}
													Element:span
													Element:span
														}
													Element:span
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														<? // GET Message - Retrieve the statistics of a message. include "
													Element:a
														request_rest.php
														"; $request_url = "http://api.trumpia.com/rest/v1/{user_name}/message"; $message_id = "987987987987"; $request_url = $request_url . "/" . $message_id; $request_rest = new RestRequest(); $request_rest->setRequestURL($request_url); $request_rest->setAPIKey("{api_key}"); $request_rest->setMethod("GET"); $result = $request_rest->execute(); $response_status = $result[0]; $json_response_data = $result[1]; if ($response_status == "200") { //success echo $json_response_data; } else { echo $response_status ." - connection failure"; } ?>
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														// GET Message - Retrieve the statistics of a message. <%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%> <%@ page import="org.json.simple.JSONArray" %> <%@ page import="org.json.simple.JSONObject" %> <%@ page import="java.io.BufferedReader" %> <%@ page import="java.io.IOException" %> <%@ page import="java.io.InputStreamReader" %> <%@ page import="java.io.OutputStream" %> <%@ page import="java.io.OutputStreamWriter" %> <%@ page import="java.io.Writer" %> <%@ page import="java.net.HttpURLConnection" %> <%@ page import="java.net.URL" %> <html> <title>Message Get Sample Code</title> <body> <% String username = "username"; String messageId = "987987987987"; String urlStr = "http://api.trumpia.com/rest/v1/" + username + "/message/" + messageId; URL url = new URL(urlStr); HttpURLConnection conn = (HttpURLConnection) url.openConnection(); conn.setRequestProperty("Content-type", "application/json"); conn.setRequestProperty("X-Apikey", "12345aaaaa67890aaaaa"); if (conn.getResponseCode() != 200) { %> Error : <%=conn.getResponseMessage()%> <% }else{ // Buffer the result into a string BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream())); StringBuilder sb = new StringBuilder(); String line; while ((line = rd.readLine()) != null) { sb.append(line); } rd.close(); conn.disconnect(); %> Response : <%=sb.toString()%> <% } %> </body> </html>
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														// GET Message - Retrieve the statistics of a message. using Newtonsoft.Json; using Newtonsoft.Json.Linq; using System; using System.Collections.Generic; using System.Linq; using System.Net.Http; using System.Net.Http.Headers; using System.Text; using System.Threading.Tasks; namespace samplecode { class MessageInfo { public string status { get; set; } public JObject email { get; set; } public JObject sms { get; set; } } class MessageDetailGet { static void Main() { RunAsync().Wait(); } static async Task RunAsync() { using (var client = new HttpClient()) { var apikey = "12345aaaaa67890aaaaa"; client.BaseAddress = new Uri("http://api.trumpia.com"); client.DefaultRequestHeaders.Accept.Clear(); client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json")); client.DefaultRequestHeaders.Add("X-Apikey", string.Format("{0}", apikey)); var username = "username"; var messageId = "987987987987"; //GET HttpResponseMessage response = await client.GetAsync(string.Format("/rest/v1/{0}/message/{1}", username, messageId)); if (response.IsSuccessStatusCode) { MessageInfo messageInfo = await response.Content.ReadAsAsync<MessageInfo>(); string json = JsonConvert.SerializeObject(messageInfo); Console.WriteLine(json); } } } } }
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														GET Message (Scheduled)
												Node:
												(type) c
												(layer)4
													Element:p
														Retrieve all scheduled messages.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:strong
														Resource Information
												Node:
												(type) c
												(layer)4
													Element:table
													Element:colgroup
													Element:col
													Element:col
													Element:tbody
													Element:tr
													Element:td
														Response Formats
													Element:td
														JSON
													Element:tr
													Element:td
														Allowed Methods
													Element:td
														GET
													Element:tr
													Element:td
														URL
													Element:td
													Element:code
														http://api.trumpia.com/rest/v1/{user_name}/message/scheduled
													Element:tr
													Element:td
														{user_name}
													Element:td
														Your account username (this can be found in the Account Settings page after logging in.)
												Node:
												(type) c
												(layer)4
													Element:p
													Element:strong
														Header Parameters
												Node:
												(type) c
												(layer)4
													Element:span
													Element:strong
														&ast;
														required parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:colgroup
													Element:col
													Element:col
													Element:thead
													Element:tr
													Element:th
														Parameter
													Element:th
														Description
													Element:tbody
													Element:tr
													Element:td
														Content-Type
													Element:span
														&ast;
													Element:td
														application/json
													Element:tr
													Element:td
														X-Apikey
													Element:span
														&ast;
													Element:td
														Your API key (This can be found in the API Settings page after logging in.)
													Element:br
													Element:br
														Example value: 123456789abc1011
												Node:
												(type) c
												(layer)4
													Element:p
													Element:strong
														Query String
												Node:
												(type) c
												(layer)4
													Element:p
														You can retrieve scheduled messages. You can get a partial set of messages using the offset and limit parameters.
												Node:
												(type) c
												(layer)4
													Element:span
													Element:strong
														&ast;
														required parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:colgroup
													Element:col
													Element:col
													Element:thead
													Element:tr
													Element:th
														Parameter
													Element:th
														Description
													Element:tbody
													Element:tr
													Element:td
														order
													Element:td
														The order is the chronological order in which messages are retrieved.
													Element:table
														Default: scheduled_at
													Element:colgroup
													Element:col
													Element:col
													Element:thead
													Element:tr
													Element:th
														Value
													Element:th
														Description
													Element:tbody
													Element:tr
													Element:td
														scheduled_at
													Element:td
														Ascending order.
													Element:tr
													Element:td
														-scheduled_at
													Element:td
														Descending order.
													Element:tr
													Element:td
														offset
													Element:td
														This is the offset for the list. The value specified here will be the number of messages skipped in the retrieval. The entered value can only be a non-negative number. For example, if you enter 'offset=100’, only the 101st message and onwards will be retrieved.
													Element:br
													Element:br
														Default: 0
													Element:tr
													Element:td
														limit
													Element:td
														The limit is the number of items in the response. The entered value can only be a numeric value between 1 and 1000. For example, if you enter 'offset=100&limit=200', then you will receive the 101st to 300th scheduled messages.
													Element:br
													Element:br
														Default: 50
												Node:
												(type) c
												(layer)4
													Element:a
														JSON
												Node:
												(type) c
												(layer)4
													Element:a
														PHP
												Node:
												(type) c
												(layer)4
													Element:a
														JSP
												Node:
												(type) c
												(layer)4
													Element:a
														C#
												Node:
												(type) c
												(layer)4
													Element:blockquote
													Element:p
														Code sample for GET Message (Scheduled)
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
													Element:span
														"Request Example GET http://api.trumpia.com/rest/v1/{user_name}/message/scheduled?offset=100&limit=2&order=scheduled"
													Element:span
													Element:span
														"Response Example:"
													Element:span
													Element:span
														{
													Element:span
													Element:span
														"total_count"
													Element:span
													Element:span
														:
													Element:span
													Element:span
														12345
													Element:span
														,
													Element:span
													Element:span
														"messages"
													Element:span
													Element:span
														:
													Element:span
													Element:span
														[
													Element:span
													Element:span
														{
													Element:span
													Element:span
														"message_id"
													Element:span
														:
													Element:span
														987987987980
													Element:span
														,
													Element:span
													Element:span
														"description"
													Element:span
													Element:span
														:
													Element:span
													Element:span
														"This is a description"
													Element:span
														,
													Element:span
													Element:span
														"scheduled_at"
													Element:span
														:
													Element:span
														"2016-07-20T12:34:56Z"
													Element:span
														,
													Element:span
													Element:span
														"sms"
													Element:span
														:
													Element:span
														4
													Element:span
														,
													Element:span
													Element:span
														"email"
													Element:span
														:
													Element:span
														500
													Element:span
													Element:span
														},
													Element:span
													Element:span
														{
													Element:span
													Element:span
														"message_id"
													Element:span
														:
													Element:span
														987987987981
													Element:span
														,
													Element:span
													Element:span
														"description"
													Element:span
													Element:span
														:
													Element:span
													Element:span
														"This is a description"
													Element:span
														,
													Element:span
													Element:span
														"scheduled_at"
													Element:span
														:
													Element:span
														"2016-07-15T12:34:56Z"
													Element:span
														,
													Element:span
													Element:span
														"mms"
													Element:span
														:
													Element:span
														4
													Element:span
														,
													Element:span
													Element:span
														"email"
													Element:span
														:
													Element:span
														500
													Element:span
													Element:span
														}
													Element:span
													Element:span
														]
													Element:span
													Element:span
														}
													Element:span
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														<? // GET Message(Scheduled) - Lookup one or multiple scheduled messages. include "
													Element:a
														request_rest.php
														"; $request_url = "http://api.trumpia.com/rest/v1/{user_name}/message/scheduled?"; $offset = "10"; $limit = "30"; $order = "scheduled_at"; $request_url = $request_url . "offset=" . $offset . "&limit=" . $limit . "&order=" . $order; $request_rest = new RestRequest(); $request_rest->setRequestURL($request_url); $request_rest->setAPIKey("{api_key}"); $request_rest->setMethod("GET"); $result = $request_rest->execute(); $response_status = $result[0]; $json_response_data = $result[1]; if ($response_status == "200") { //success echo $json_response_data; } else { echo $response_status ." - connection failure"; } ?>
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														// GET Message(Scheduled) - Lookup one or multiple scheduled messages. <%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%> <%@ page import="java.io.BufferedReader" %> <%@ page import="java.io.IOException" %> <%@ page import="java.io.InputStreamReader" %> <%@ page import="java.io.OutputStream" %> <%@ page import="java.io.OutputStreamWriter" %> <%@ page import="java.io.Writer" %> <%@ page import="java.net.HttpURLConnection" %> <%@ page import="java.net.URL" %> <html> <title>GET Scheduled Messages Sample Code</title> <body> <% String username = "username"; String offset = "10"; String limit = "30"; String order = "scheduled_at"; String urlStr = "http://api.trumpia.com/rest/v1/" + username + "/message/scheduled?offset=" +offset+ "&limit=" +limit+ "&order=" + order; URL url = new URL(urlStr); HttpURLConnection conn = (HttpURLConnection) url.openConnection(); conn.setRequestProperty("Content-type", "application/json"); conn.setRequestProperty("X-Apikey", "12345aaaaa67890aaaaa"); if (conn.getResponseCode() != 200) { %> Error : <%=conn.getResponseMessage()%> <% }else{ // Buffer the result into a string BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream())); StringBuilder sb = new StringBuilder(); String line; while ((line = rd.readLine()) != null) { sb.append(line); } rd.close(); conn.disconnect(); %> Response : <%=sb.toString()%> <% } %> </body> </html>
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														// GET Message(Scheduled) - Lookup one or multiple scheduled messages. using Newtonsoft.Json; using Newtonsoft.Json.Linq; using System; using System.Collections.Generic; using System.Linq; using System.Net.Http; using System.Net.Http.Headers; using System.Text; using System.Threading.Tasks; namespace samplecode { class ScheduledMessageInfo { public String total_id_count { get; set; } public JArray message_id_list { get; set; } } class ScheduledMessageGet { static void Main(string[] args) { RunAsync().Wait(); } static async Task RunAsync() { using (var client = new HttpClient()) { var apikey = "12345aaaaa67890aaaaa"; client.BaseAddress = new Uri("http://api.trumpia.com"); client.DefaultRequestHeaders.Accept.Clear(); client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json")); client.DefaultRequestHeaders.Add("X-Apikey", string.Format("{0}", apikey)); var username = "username"; var offset = "10"; var limit = "30"; var order = "scheduled_at"; //GET HttpResponseMessage response = await client.GetAsync(string.Format("/rest/v1/{0}/message/scheduled?offset={1}&limit={2}&order={3}", username, offset, limit, order)); if (response.IsSuccessStatusCode) { ScheduledMessageInfo messageList = await response.Content.ReadAsAsync<ScheduledMessageInfo>(); string json = JsonConvert.SerializeObject(messageList); Console.WriteLine(json); } } } } }
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														DELETE Message
												Node:
												(type) c
												(layer)4
													Element:p
														Cancel a scheduled messages.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:strong
														Resource Information
												Node:
												(type) c
												(layer)4
													Element:table
													Element:colgroup
													Element:col
													Element:col
													Element:tbody
													Element:tr
													Element:td
														Response Formats
													Element:td
														JSON
													Element:tr
													Element:td
														Allowed Methods
													Element:td
														DELETE
													Element:tr
													Element:td
														URL
													Element:td
													Element:code
														http://api.trumpia.com/rest/v1/{user_name}/message/{message_id}
													Element:tr
													Element:td
														{user_name}
													Element:td
														Your account username (this can be found in the Account Settings page after logging in.)
													Element:tr
													Element:td
														{message_id}
													Element:td
														The message_id of the message that will be cancelled.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:strong
														Header Parameters
												Node:
												(type) c
												(layer)4
													Element:span
													Element:strong
														&ast;
														required parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:colgroup
													Element:col
													Element:col
													Element:thead
													Element:tr
													Element:th
														Parameter
													Element:th
														Description
													Element:tbody
													Element:tr
													Element:td
														Content-Type
													Element:span
														&ast;
													Element:td
														application/json
													Element:tr
													Element:td
														X-Apikey
													Element:span
														&ast;
													Element:td
														Your API key (This can be found in the API Settings page after logging in.)
													Element:br
													Element:br
														Example value: 123456789abc1011
												Node:
												(type) c
												(layer)4
													Element:a
														JSON
												Node:
												(type) c
												(layer)4
													Element:a
														PHP
												Node:
												(type) c
												(layer)4
													Element:a
														JSP
												Node:
												(type) c
												(layer)4
													Element:a
														C#
												Node:
												(type) c
												(layer)4
													Element:blockquote
													Element:p
														Code sample for DELETE Message.
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
													Element:span
														"Request Example: GET http://api.trumpia.com/rest/v1/{user_name}/message/scheduled/{message_id}"
													Element:span
													Element:span
														{
													Element:span
													Element:span
														"request_id"
													Element:span
													Element:span
														:
													Element:span
													Element:span
														"T151111522645dsfwesedf"
													Element:span
														,
													Element:span
													Element:span
														"message_id"
													Element:span
													Element:span
														:
													Element:span
													Element:span
														987987987987
													Element:span
														,
													Element:span
													Element:span
														"status_code"
													Element:span
													Element:span
														:
													Element:span
													Element:span
														"MPCE4001"
													Element:span
													Element:span
														}
													Element:span
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														<? // DELETE Message - Cancel a scheduled message. include "
													Element:a
														request_rest.php
														"; $request_url = "http://api.trumpia.com/rest/v1/{user_name}/message/scheduled"; $message_id = "987987987980"; $request_url = $request_url . "/" . $message_id; $request_rest = new RestRequest(); $request_rest->setRequestURL($request_url); $request_rest->setAPIKey("{api_key}"); $request_rest->setMethod("DELETE"); $result = $request_rest->execute(); $response_status = $result[0]; $json_response_data = $result[1]; if ($response_status == "200") { //success echo $json_response_data; } else { echo $response_status ." - connection failure"; } ?>
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														// DELETE Message - Cancel a scheduled message. <%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%> <%@ page import="java.io.BufferedReader" %> <%@ page import="java.io.IOException" %> <%@ page import="java.io.InputStreamReader" %> <%@ page import="java.io.OutputStream" %> <%@ page import="java.io.OutputStreamWriter" %> <%@ page import="java.io.Writer" %> <%@ page import="java.net.HttpURLConnection" %> <%@ page import="java.net.URL" %> <html> <title>Scheduled Message Delete Sample Code</title> <body> <% String username = "username"; String messageID = "987987987980"; String urlStr = "http://api.trumpia.com/rest/v1/" + username + "/message/scheduled/" + messageID; URL url = new URL(urlStr); HttpURLConnection conn = (HttpURLConnection) url.openConnection(); conn.setRequestMethod("DELETE"); conn.setDoOutput(true); conn.setAllowUserInteraction(false); conn.setRequestProperty("Content-type", "application/json"); conn.setRequestProperty("X-Apikey", "12345aaaaa67890aaaaa"); if (conn.getResponseCode() != 200) { %> Error : <%=conn.getResponseMessage()%> <% }else{ // Buffer the result into a string BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream())); StringBuilder sb = new StringBuilder(); String line; while ((line = rd.readLine()) != null) { sb.append(line); } rd.close(); conn.disconnect(); %> Response : <%=sb.toString()%> <% } %> </body> </html>
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														// DELETE Message - Cancel a scheduled message. using Newtonsoft.Json; using System; using System.Collections.Generic; using System.Linq; using System.Net.Http; using System.Net.Http.Headers; using System.Text; using System.Threading.Tasks; namespace samplecode { class Result { public string request_id { get; set; } public string message_id { get; set; } public string status_code { get; set; } } class ScheduledMessageDelete { static void Main() { RunAsync().Wait(); } static async Task RunAsync() { using (var client = new HttpClient()) { var apikey = "12345aaaaa67890aaaaa"; client.DefaultRequestHeaders.Accept.Clear(); client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json")); client.DefaultRequestHeaders.Add("X-Apikey", string.Format("{0}", apikey)); var username = "username"; var messageID = "987987987980"; //DELETE Uri deleteUrl = new Uri(string.Format("http://api.trumpia.com/rest/v1/{0}/message/scheduled/{1}", username, messageID)); var response = client.DeleteAsync(deleteUrl).Result; if (response.IsSuccessStatusCode) { var p = response.Content.ReadAsAsync<Result>().Result; string json = JsonConvert.SerializeObject(p); Console.WriteLine(json); } } } } }
												Node:
												(type) c
												(layer)4
													Element:a
														JSON
												Node:
												(type) c
												(layer)4
													Element:a
														PHP
												Node:
												(type) c
												(layer)4
													Element:a
														JSP
												Node:
												(type) c
												(layer)4
													Element:a
														C#
												Node:
												(type) c
												(layer)4
													Element:a
														SOURCE COPY
												Node:
												(type) c
												(layer)4
													Element:footer
														Trumpia is a DBA of DoCircle, Inc. All rights reserved.
													Element:br
														*Message and data rates may apply.
													Element:strong
													Element:a
														1-888-707-3030
													Element:span
														1-888-707-3030
														/ support@trumpia.com
													Element:br
														6:00 AM - 6:00 PM Pacific (Weekdays) / 8:00 AM - 4:00 PM Pacific (Weekend)
													Element:a
													Element:span
													Element:br
														Go to top
												Node:
												(type) c
												(layer)4
													Element:noscript
													Element:img
