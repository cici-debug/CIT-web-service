Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					API Description
			Node:
			(type) h1
			(layer)1
				Element:h1
					Authentication
			Node:
			(type) c
			(layer)1
				Element:p
					Authorization is performed by sending the following HTTP Headers:
			Node:
			(type) c
			(layer)1
				Element:p
				Element:b
					Key
					— API key. The example of API key:
				Element:i
					46G9R9D6-WJ77XOIP-XH9HH5VQ-A3XN3YOZ-8T1R8I8T
					;
			Node:
			(type) c
			(layer)1
				Element:p
				Element:b
					Sign
					— POST data (?param=val&param1=val1) signed by a secret key according to HMAC-SHA512 method;
			Node:
			(type) c
			(layer)1
				Element:p
					Sent on
				Element:strong
					https://btc-e.com/tapi
					.
			Node:
			(type) c
			(layer)1
				Element:p
					All requests must also include a special
				Element:i
					nonce
					POST parameter with increment integer. (>0)
			Node:
			(type) c
			(layer)1
				Element:br
			Node:
			(type) c
			(layer)1
				Element:p
					The method name is sent via POST parameter method.
			Node:
			(type) c
			(layer)1
				Element:p
					All the method parameters are sent via POST.
			Node:
			(type) c
			(layer)1
				Element:p
					All server answers are in JSON format.
			Node:
			(type) c
			(layer)1
				Element:br
			Node:
			(type) c
			(layer)1
				Element:p
					If the completion is successful, there is an answer like:
			Node:
			(type) c
			(layer)1
				Element:pre
					{"success":1,"return":{<return>}}
			Node:
			(type) c
			(layer)1
				Element:p
					The answer in case of an error:
			Node:
			(type) c
			(layer)1
				Element:pre
					{"success":0,"error":"<error text>"}
			Node:
			(type) c
			(layer)1
				Element:br
			Node:
			(type) c
			(layer)1
				Element:h3
					Examples:
			Node:
			(type) c
			(layer)1
				Element:p
				Element:b
					PHP:
				Element:a
					http://pastebin.com/8fbMCguM
			Node:
			(type) c
			(layer)1
				Element:p
				Element:b
					PHP:
				Element:a
					https://github.com/marinu666/PHP-btce-api
					by marinu666
			Node:
			(type) c
			(layer)1
				Element:p
				Element:b
					Python:
				Element:a
					http://pastebin.com/ec11hxcP
					by miraclemax
			Node:
			(type) c
			(layer)1
				Element:p
				Element:b
					Python:
				Element:a
					https://github.com/alanmcintyre/btce-api
					by alanmcintyre
			Node:
			(type) c
			(layer)1
				Element:p
				Element:b
					Python:
				Element:a
					https://github.com/t0pep0/btc-e.api.python
					by t0pep0
			Node:
			(type) c
			(layer)1
				Element:p
				Element:b
					Java:
				Element:a
					http://pastebin.com/jyd9tACF
					by dApZoKntut
			Node:
			(type) c
			(layer)1
				Element:p
				Element:b
					C#:
				Element:a
					https://github.com/DmT021/BtceApi
					by DmT
			Node:
			(type) c
			(layer)1
				Element:p
				Element:b
					C++/CLI:
				Element:a
					http://pastebin.com/YvxmCRL9
					by PoorGirl
			Node:
			(type) c
			(layer)1
				Element:p
				Element:b
					VB.NET:
				Element:a
					http://pastebin.com/JmJZSsd7
					by franky1
			Node:
			(type) c
			(layer)1
				Element:p
				Element:b
					Objective-C:
				Element:a
					https://github.com/backmeupplz/BTCEBot
					by backmeupplz
			Node:
			(type) c
			(layer)1
				Element:p
				Element:b
					Ruby:
				Element:a
					https://github.com/cgore/ruby-btce
					by cgore & teddythetwig
			Node:
			(type) c
			(layer)1
				Element:br
			Node:
			(type) h1
			(layer)1
				Element:h1
					The list of methods
			Node:
			(type) c
			(layer)1
				Element:h3
					getInfo
			Node:
			(type) c
			(layer)1
				Element:p
					It returns the information about the user's current balance, API key privileges,the number of transactions, the number of open orders and the server time.
			Node:
			(type) c
			(layer)1
				Element:p
				Element:b
					Parameters:
			Node:
			(type) c
			(layer)1
				Element:p
				Element:i
					None.
			Node:
			(type) c
			(layer)1
				Element:p
				Element:b
					The example of an answer:
			Node:
			(type) c
			(layer)1
				Element:pre
					{ "success":1, "return":{ "funds":{ "usd":325, "btc":23.998, "sc":121.998, "ltc":0, "ruc":0, "nmc":0 }, "rights":{ "info":1, "trade":1 }, "transaction_count":80, "open_orders":1, "server_time":1342123547 } }
			Node:
			(type) c
			(layer)1
				Element:h3
					TransHistory
			Node:
			(type) c
			(layer)1
				Element:p
					It returns the transactions history.
			Node:
			(type) c
			(layer)1
				Element:p
				Element:b
					Parameters:
			Node:
			(type) c
			(layer)1
				Element:table
				Element:tr
				Element:td
					parameter
				Element:td
					oblig?
				Element:td
					description
				Element:td
					it takes on the values
				Element:td
					standard value
				Element:tr
				Element:td
					from
				Element:td
					No
				Element:td
					The ID of the transaction to start displaying with
				Element:td
					numerical
				Element:td
					0
				Element:tr
				Element:td
					count
				Element:td
					No
				Element:td
					The number of transactions for displaying
				Element:td
					numerical
				Element:td
					1,000
				Element:tr
				Element:td
					from_id
				Element:td
					No
				Element:td
					The ID of the transaction to start displaying with
				Element:td
					numerical
				Element:td
					0
				Element:tr
				Element:td
					end_id
				Element:td
					No
				Element:td
					The ID of the transaction to finish displaying with
				Element:td
					numerical
				Element:td
					∞
				Element:tr
				Element:td
					order
				Element:td
					No
				Element:td
					sorting
				Element:td
					ASC or DESC
				Element:td
					DESC
				Element:tr
				Element:td
					since
				Element:td
					No
				Element:td
					When to start displaying?
				Element:td
					UNIX time
				Element:td
					0
				Element:tr
				Element:td
					end
				Element:td
					No
				Element:td
					When to finish displaying?
				Element:td
					UNIX time
				Element:td
					∞
			Node:
			(type) c
			(layer)1
				Element:p
				Element:i
					Note: while using since or end parameters, the order parameter automatically take up ASC value.
			Node:
			(type) c
			(layer)1
				Element:p
				Element:b
					The example of an answer:
			Node:
			(type) c
			(layer)1
				Element:pre
					{ "success":1, "return":{ "1081672":{ "type":1, "amount":1.00000000, "currency":"BTC", "desc":"BTC Payment", "status":2, "timestamp":1342448420 } } }
			Node:
			(type) c
			(layer)1
				Element:h3
					TradeHistory
			Node:
			(type) c
			(layer)1
				Element:p
					It returns the trade history
			Node:
			(type) c
			(layer)1
				Element:p
				Element:b
					Parameters:
			Node:
			(type) c
			(layer)1
				Element:table
				Element:tr
				Element:td
					parameter
				Element:td
					обяз?
				Element:td
					description
				Element:td
					It takes up the value
				Element:td
					standard value
				Element:tr
				Element:td
					from
				Element:td
					No
				Element:td
					the number of the transaction to start displaying with
				Element:td
					numerical
				Element:td
					0
				Element:tr
				Element:td
					count
				Element:td
					No
				Element:td
					the number of transactions for displaying
				Element:td
					numerical
				Element:td
					1000
				Element:tr
				Element:td
					from_id
				Element:td
					No
				Element:td
					the ID of the transaction to start displaying with
				Element:td
					numerical
				Element:td
					0
				Element:tr
				Element:td
					end_id
				Element:td
					No
				Element:td
					the ID of the transaction to finish displaying with
				Element:td
					numerical
				Element:td
					∞
				Element:tr
				Element:td
					order
				Element:td
					No
				Element:td
					sorting
				Element:td
					ASC or DESC
				Element:td
					DESC
				Element:tr
				Element:td
					since
				Element:td
					No
				Element:td
					when to start the displaying
				Element:td
					UNIX time
				Element:td
					0
				Element:tr
				Element:td
					end
				Element:td
					No
				Element:td
					when to finish the displaying
				Element:td
					UNIX time
				Element:td
					∞
				Element:tr
				Element:td
					pair
				Element:td
					No
				Element:td
					the pair to show the transactions
				Element:td
					btc_usd (example)
				Element:td
					all pairs
			Node:
			(type) c
			(layer)1
				Element:p
				Element:i
					Note: while using since or end parameters, order parameter automatically takes up ASC value.
			Node:
			(type) c
			(layer)1
				Element:p
				Element:b
					The example of an answer:
			Node:
			(type) c
			(layer)1
				Element:pre
					{ "success":1, "return":{ "166830":{ "pair":"btc_usd", "type":"sell", "amount":1, "rate":1, "order_id":343148, "is_your_order":1, "timestamp":1342445793 } } }
			Node:
			(type) c
			(layer)1
				Element:h3
					ActiveOrders
			Node:
			(type) c
			(layer)1
				Element:p
					Returns your open orders.
			Node:
			(type) c
			(layer)1
				Element:p
				Element:b
					Parameters:
			Node:
			(type) c
			(layer)1
				Element:table
				Element:tr
				Element:td
					parameter
				Element:td
					oblig?
				Element:td
					description
				Element:td
					it takes up values
				Element:td
					standard value
				Element:tr
				Element:td
					pair
				Element:td
					No
				Element:td
					the pair to display the orders
				Element:td
					btc_usd (example)
				Element:td
					all pairs
			Node:
			(type) c
			(layer)1
				Element:p
				Element:b
					The example of an answer
			Node:
			(type) c
			(layer)1
				Element:pre
					{ "success":1, "return":{ "343152":{ "pair":"btc_usd", "type":"sell", "amount":1.00000000, "rate":3.00000000, "timestamp_created":1342448420, "status":0 } } }
			Node:
			(type) c
			(layer)1
				Element:h3
					Trade
			Node:
			(type) c
			(layer)1
				Element:p
					Trading is done according to this method.
			Node:
			(type) c
			(layer)1
				Element:p
				Element:b
					Parameters:
			Node:
			(type) c
			(layer)1
				Element:table
				Element:tr
				Element:td
					parameter
				Element:td
					oblig?
				Element:td
					description
				Element:td
					it takes up the values
				Element:td
					standard value
				Element:tr
				Element:td
					pair
				Element:td
					Yes
				Element:td
					pair
				Element:td
					btc_usd (example)
				Element:td
					-
				Element:tr
				Element:td
					type
				Element:td
					Yes
				Element:td
					The transaction type
				Element:td
					buy or sell
				Element:td
					-
				Element:tr
				Element:td
					rate
				Element:td
					Yes
				Element:td
					The rate to buy/sell
				Element:td
					numerical
				Element:td
					-
				Element:tr
				Element:td
					amount
				Element:td
					Yes
				Element:td
					The amount which is necessary to buy/sell
				Element:td
					numerical
				Element:td
					-
			Node:
			(type) c
			(layer)1
				Element:p
				Element:b
					The example of an asnwer:
			Node:
			(type) c
			(layer)1
				Element:pre
					{ "success":1, "return":{ "received":0.1, "remains":0, "order_id":0, "funds":{ "usd":325, "btc":2.498, "sc":121.998, "ltc":0, "ruc":0, "nmc":0 } } }
			Node:
			(type) c
			(layer)1
				Element:h3
					CancelOrder
			Node:
			(type) c
			(layer)1
				Element:p
					Cancellation of the order
			Node:
			(type) c
			(layer)1
				Element:p
				Element:b
					Parameters:
			Node:
			(type) c
			(layer)1
				Element:table
				Element:tr
				Element:td
					parameter
				Element:td
					oblig?
				Element:td
					description
				Element:td
					it takes up the values
				Element:td
					standard value
				Element:tr
				Element:td
					order_id
				Element:td
					Yes
				Element:td
					Order id
				Element:td
					numerical
				Element:td
					-
			Node:
			(type) c
			(layer)1
				Element:p
				Element:b
					The example of an answer:
			Node:
			(type) c
			(layer)1
				Element:pre
					{ "success":1, "return":{ "order_id":343154, "funds":{ "usd":325, "btc":24.998, "sc":121.998, "ltc":0, "ruc":0, "nmc":0 } } }
			Node:
			(type) c
			(layer)1
				Element:audio
