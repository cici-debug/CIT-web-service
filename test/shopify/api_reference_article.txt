Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					Article
			Node:
			(type) c
			(layer)1
				Element:p
					An
				Element:strong
					article
					is a single entry in a blog.
			Node:
			(type) c
			(layer)1
				Element:img
			Node:
			(type) c
			(layer)1
				Element:p
					Articles appear in reverse chronological order, with the most recent entry at the top of the blog's page. A blog can contain any number of articles.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								What you can do with Article
						Node:
						(type) c
						(layer)2
							Element:p
								The Shopify API lets you do the following with the Article resource. More detailed versions of these general actions may be available:
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:a
							Element:span
							Element:span
								GET /admin/blogs/#{id}/articles.json?since_id=134645308
							Element:span
								Receive a list of all Articles
							Element:li
							Element:a
							Element:span
							Element:span
								GET /admin/blogs/#{id}/articles/count.json
							Element:span
								Receive a count of all Articles
							Element:li
							Element:a
							Element:span
							Element:span
								GET /admin/blogs/#{id}/articles/#{id}.json
							Element:span
								Receive a single Article
							Element:li
							Element:a
							Element:span
							Element:span
								POST /admin/blogs/#{id}/articles.json
							Element:span
								Create a new Article
							Element:li
							Element:a
							Element:span
							Element:span
								PUT /admin/blogs/#{id}/articles/#{id}.json
							Element:span
								Modify an existing Article
							Element:li
							Element:a
							Element:span
							Element:span
								GET /admin/articles/authors.json
							Element:span
								Get a list of all the authors
							Element:li
							Element:a
							Element:span
							Element:span
								GET /admin/articles/tags.json?limit=1&popular=1
							Element:span
								Get a list of all the tags
							Element:li
							Element:a
							Element:span
							Element:span
								DELETE /admin/blogs/#{id}/articles/#{id}.json
							Element:span
								Remove a Article from the database
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Article properties
						Node:
						(type) c
						(layer)2
							Element:table
							Element:tbody
							Element:tr
							Element:td
								author
							Element:td
							Element:pre
							Element:code
							Element:span
							Element:span
								"author"
							Element:span
								:
							Element:span
								"John"
							Element:span
							Element:p
								The name of the author of this article
							Element:tr
							Element:td
								blog_id
							Element:td
							Element:pre
							Element:code
							Element:span
							Element:span
								"blog_id"
							Element:span
								:
							Element:span
								241253187
							Element:span
							Element:p
								A unique numeric identifier for the blog containing the article.
							Element:tr
							Element:td
								body_html
							Element:td
							Element:pre
							Element:code
							Element:span
							Element:span
								"body_html"
							Element:span
								:
							Element:span
								"I have no idea what to write about!"
							Element:span
							Element:p
								The text of the body of the article, complete with HTML markup.
							Element:tr
							Element:td
								created_at
							Element:td
							Element:pre
							Element:code
							Element:span
							Element:span
								"created_at"
							Element:span
								:
							Element:span
								"2008-12-31T19:00:00-05:00"
							Element:span
							Element:p
								The date and time when the article was created. The API returns this value in
							Element:a
								ISO 8601 format
								.
							Element:tr
							Element:td
								id
							Element:td
							Element:pre
							Element:code
							Element:span
							Element:span
								"id"
							Element:span
								:
							Element:span
								989034056
							Element:span
							Element:p
								A unique numeric identifier for the article.
							Element:tr
							Element:td
								handle
							Element:td
							Element:pre
							Element:code
							Element:span
							Element:span
								"handle"
							Element:span
								:
							Element:span
								"hello-world"
							Element:span
							Element:p
								A human-friendly unique string for an article automatically generated from its title. It is used in the article's URL.
							Element:tr
							Element:td
								image
							Element:td
							Element:pre
							Element:code
							Element:span
							Element:span
								"image"
							Element:span
								:
							Element:span
								{"src"=>"https://cdn.myshopify.io/s/files/1/0000/0001/articles/Red_Cotton.jpg?v=1443721435", "created_at"=>"2008-12-31T19:00:00-05:00"}
							Element:span
							Element:p
								The article image.
							Element:tr
							Element:td
								metafield
							Element:td
							Element:pre
							Element:code
								"metafield": [ {
							Element:span
							Element:span
								"key"
							Element:span
								:
							Element:span
								"new"
							Element:span
								,
							Element:pre
							Element:code
							Element:span
							Element:span
								"value"
							Element:span
								:
							Element:span
								"new"
							Element:span
								,
							Element:pre
							Element:code
							Element:span
							Element:span
								"value_type"
							Element:span
								:
							Element:span
								"new"
							Element:span
								,
							Element:pre
							Element:code
							Element:span
							Element:span
								"namespace"
							Element:span
								:
							Element:span
								"new"
							Element:span
								} ]
							Element:p
							Element:p
								Attaches additional metadata to a store's resources:
							Element:ul
							Element:li
							Element:strong
								key (required)
								: Identifier for the metafield (maximum of 30 characters).
							Element:li
							Element:strong
								namespace (required)
								: Container for a set of metadata. Namespaces help distinguish between metadata you created and metadata created by another individual with a similar namespace (maximum of 20 characters).
							Element:li
							Element:strong
								value (required)
								: Information to be stored as metadata.
							Element:li
							Element:strong
								value_type (required)
								: States whether the information in the value is stored as a 'string' or 'integer.'
							Element:li
							Element:strong
								description (optional)
								: Additional information about the metafield.
							Element:tr
							Element:td
								published
							Element:td
							Element:pre
							Element:code
							Element:span
							Element:span
								"published"
							Element:span
								:
							Element:span
								false
							Element:span
							Element:p
								States whether or not the article is visible. Valid values are "true" for published or "false" for hidden.
							Element:tr
							Element:td
								published_at
							Element:td
							Element:pre
							Element:code
							Element:span
							Element:span
								"published_at"
							Element:span
								:
							Element:span
								"2008-07-31T20:00:00-04:00"
							Element:span
							Element:p
								The date and time when the article was published. The API returns this value in
							Element:a
								ISO 8601 format
								.
							Element:tr
							Element:td
								summary_html
							Element:td
							Element:pre
							Element:code
							Element:span
							Element:span
								"summary_html"
							Element:span
								:
							Element:span
								null
							Element:span
							Element:p
								The text of the summary of the article, complete with HTML markup.
							Element:tr
							Element:td
								tags
							Element:td
							Element:pre
							Element:code
							Element:span
							Element:span
								"tags"
							Element:span
								:
							Element:span
								"tagsational"
							Element:span
							Element:p
								Tags are additional short descriptors formatted as a string of comma-separated values. For example, if an article has three tags: tag1, tag2, tag3.
							Element:tr
							Element:td
								template_suffix
							Element:td
							Element:pre
							Element:code
							Element:span
							Element:span
								"template_suffix"
							Element:span
								:
							Element:span
								null
							Element:span
							Element:p
								States the name of the template an article is using if it is using an alternate template. If an article is using the default article.liquid template, the value returned is "null".
							Element:tr
							Element:td
								title
							Element:td
							Element:pre
							Element:code
							Element:span
							Element:span
								"title"
							Element:span
								:
							Element:span
								"Some crazy article I'm coming up with"
							Element:span
							Element:p
								The title of the article.
							Element:tr
							Element:td
								updated_at
							Element:td
							Element:pre
							Element:code
							Element:span
							Element:span
								"updated_at"
							Element:span
								:
							Element:span
								"2009-01-31T19:00:00-05:00"
							Element:span
							Element:p
								The date and time when the article was last updated. The API returns this value in
							Element:a
								ISO 8601 format
								.
							Element:tr
							Element:td
								user_id
							Element:td
							Element:pre
							Element:code
							Element:span
							Element:span
								"user_id"
							Element:span
								:
							Element:span
								799407056
							Element:span
							Element:p
								A unique numeric identifier for the author of the article.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Endpoints
						Node:
						(type) c
						(layer)2
							Element:span
								Get a list of all articles from a certain blog
							Element:span
								GET
								/admin/blogs/241253187/articles.json
						Node:
						(type) c
						(layer)2
							Element:table
							Element:tbody
							Element:tr
							Element:td
								limit
							Element:td
							Element:p
								Amount of results
								(default: 50) (maximum: 250)
							Element:tr
							Element:td
								page
							Element:td
							Element:p
								Page to show
								(default: 1)
							Element:tr
							Element:td
								since_id
							Element:td
							Element:p
								Restrict results to after the specified ID
							Element:tr
							Element:td
								created_at_min
							Element:td
							Element:p
								Show articles created after date (format: 2014-04-25T16:15:47-04:00)
							Element:tr
							Element:td
								created_at_max
							Element:td
							Element:p
								Show articles created before date (format: 2014-04-25T16:15:47-04:00)
							Element:tr
							Element:td
								updated_at_min
							Element:td
							Element:p
								Show articles last updated after date (format: 2014-04-25T16:15:47-04:00)
							Element:tr
							Element:td
								updated_at_max
							Element:td
							Element:p
								Show articles last updated before date (format: 2014-04-25T16:15:47-04:00)
							Element:tr
							Element:td
								published_at_min
							Element:td
							Element:p
								Show articles published after date (format: 2014-04-25T16:15:47-04:00)
							Element:tr
							Element:td
								published_at_max
							Element:td
							Element:p
								Show articles published before date (format: 2014-04-25T16:15:47-04:00)
							Element:tr
							Element:td
								published_status
							Element:td
							Element:ul
							Element:li
								published - Show only published articles
							Element:li
								unpublished - Show only unpublished articles
							Element:li
								any - Show all articles (default)
							Element:tr
							Element:td
								handle
							Element:td
							Element:p
								Filter by article handle
							Element:tr
							Element:td
								tag
							Element:td
							Element:p
								Filter by artcle tag
							Element:tr
							Element:td
								author
							Element:td
							Element:p
								Filter by article author
							Element:tr
							Element:td
								fields
							Element:td
							Element:p
								comma-separated list of fields to include in the response
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Get all the articles after the specified ID
									Node:
									(type) c
									(layer)3
										Element:pre
											GET /admin/blogs/#{id}/articles.json?since_id=134645308
									Node:
									(type) c
									(layer)3
										Element:a
											View Response
									Node:
									(type) c
									(layer)3
										Element:pre
											HTTP/1.1 200 OK { "articles": [ { "id": 294160202, "title": "Just us bots here", "created_at": "2013-11-06T19:00:00-05:00", "body_html": "beep boop", "blog_id": 241253187, "author": "dennis", "user_id": null, "published_at": null, "updated_at": "2017-01-18T13:17:46-05:00", "summary_html": null, "template_suffix": null, "handle": "just-us-bots-here", "tags": "" }, { "id": 989034056, "title": "Some crazy article I'm coming up with", "created_at": "2008-12-31T19:00:00-05:00", "body_html": "I have no idea what to write about, but it's going to rock!", "blog_id": 241253187, "author": "John", "user_id": null, "published_at": null, "updated_at": "2009-01-31T19:00:00-05:00", "summary_html": null, "template_suffix": null, "handle": "some-crazy-article-im-coming-up-with", "tags": "Mystery" }, { "id": 1051293780, "title": "Welcome to the world of tomorrow!", "created_at": "2013-11-06T19:00:00-05:00", "body_html": "Good news, everybody!", "blog_id": 241253187, "author": "dennis", "user_id": null, "published_at": null, "updated_at": "2017-01-18T13:17:46-05:00", "summary_html": null, "template_suffix": null, "handle": "welcome-to-the-world-of-tomorrow", "tags": "" } ] }
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Get all the articles
									Node:
									(type) c
									(layer)3
										Element:pre
											GET /admin/blogs/#{id}/articles.json
									Node:
									(type) c
									(layer)3
										Element:a
											View Response
									Node:
									(type) c
									(layer)3
										Element:pre
											HTTP/1.1 200 OK { "articles": [ { "id": 134645308, "title": "get on the train now", "created_at": "2008-07-31T20:00:00-04:00", "body_html": "<p>Do <em>you<\/em> have an <strong>IPod<\/strong> yet?<\/p>", "blog_id": 241253187, "author": "Dennis", "user_id": 799407056, "published_at": "2008-07-31T20:00:00-04:00", "updated_at": "2008-07-31T20:00:00-04:00", "summary_html": null, "template_suffix": null, "handle": "get-on-the-train-now", "tags": "Announcing", "image": { "created_at": "2017-01-18T13:17:46-05:00", "src": "https:\/\/cdn.shopify.com\/s\/files\/1\/0006\/9093\/3842\/articles\/imac.jpg?v=1484763466" } }, { "id": 294160202, "title": "Just us bots here", "created_at": "2013-11-06T19:00:00-05:00", "body_html": "beep boop", "blog_id": 241253187, "author": "dennis", "user_id": null, "published_at": null, "updated_at": "2017-01-18T13:17:46-05:00", "summary_html": null, "template_suffix": null, "handle": "just-us-bots-here", "tags": "" }, { "id": 989034056, "title": "Some crazy article I'm coming up with", "created_at": "2008-12-31T19:00:00-05:00", "body_html": "I have no idea what to write about, but it's going to rock!", "blog_id": 241253187, "author": "John", "user_id": null, "published_at": null, "updated_at": "2009-01-31T19:00:00-05:00", "summary_html": null, "template_suffix": null, "handle": "some-crazy-article-im-coming-up-with", "tags": "Mystery" }, { "id": 1051293780, "title": "Welcome to the world of tomorrow!", "created_at": "2013-11-06T19:00:00-05:00", "body_html": "Good news, everybody!", "blog_id": 241253187, "author": "dennis", "user_id": null, "published_at": null, "updated_at": "2017-01-18T13:17:46-05:00", "summary_html": null, "template_suffix": null, "handle": "welcome-to-the-world-of-tomorrow", "tags": "" } ] }
									Node:
									(type) c
									(layer)3
										Element:span
											Get a count of all articles from a certain blog
										Element:span
											GET
											/admin/blogs/241253187/articles/count.json
									Node:
									(type) c
									(layer)3
										Element:table
										Element:tbody
										Element:tr
										Element:td
											created_at_min
										Element:td
										Element:p
											Count articles created after date (format: 2014-04-25T16:15:47-04:00)
										Element:tr
										Element:td
											created_at_max
										Element:td
										Element:p
											Count articles created before date (format: 2014-04-25T16:15:47-04:00)
										Element:tr
										Element:td
											updated_at_min
										Element:td
										Element:p
											Count articles last updated after date (format: 2014-04-25T16:15:47-04:00)
										Element:tr
										Element:td
											updated_at_max
										Element:td
										Element:p
											Count articles last updated before date (format: 2014-04-25T16:15:47-04:00)
										Element:tr
										Element:td
											published_at_min
										Element:td
										Element:p
											Count articles published after date (format: 2014-04-25T16:15:47-04:00)
										Element:tr
										Element:td
											published_at_max
										Element:td
										Element:p
											Count articles published before date (format: 2014-04-25T16:15:47-04:00)
										Element:tr
										Element:td
											published_status
										Element:td
										Element:ul
										Element:li
											published - Count only published articles
										Element:li
											unpublished - Count only unpublished articles
										Element:li
											any - Count all articles (default)
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Count all a blog’s articles
									Node:
									(type) c
									(layer)3
										Element:pre
											GET /admin/blogs/#{id}/articles/count.json
									Node:
									(type) c
									(layer)3
										Element:a
											View Response
									Node:
									(type) c
									(layer)3
										Element:pre
											HTTP/1.1 200 OK { "count": 4 }
									Node:
									(type) c
									(layer)3
										Element:span
											Get a single article by its ID and the ID of the parent blog
										Element:span
											GET
											/admin/blogs/241253187/articles/134645308.json
									Node:
									(type) c
									(layer)3
										Element:table
										Element:tbody
										Element:tr
										Element:td
											fields
										Element:td
										Element:p
											comma-separated list of fields to include in the response
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Get a single article
									Node:
									(type) c
									(layer)3
										Element:pre
											GET /admin/blogs/#{id}/articles/#{id}.json
									Node:
									(type) c
									(layer)3
										Element:a
											View Response
									Node:
									(type) c
									(layer)3
										Element:pre
											HTTP/1.1 200 OK { "article": { "id": 134645308, "title": "get on the train now", "created_at": "2008-07-31T20:00:00-04:00", "body_html": "<p>Do <em>you<\/em> have an <strong>IPod<\/strong> yet?<\/p>", "blog_id": 241253187, "author": "Dennis", "user_id": 799407056, "published_at": "2008-07-31T20:00:00-04:00", "updated_at": "2008-07-31T20:00:00-04:00", "summary_html": null, "template_suffix": null, "handle": "get-on-the-train-now", "tags": "Announcing", "image": { "created_at": "2017-01-18T13:17:46-05:00", "src": "https:\/\/cdn.shopify.com\/s\/files\/1\/0006\/9093\/3842\/articles\/imac.jpg?v=1484763466" } } }
									Node:
									(type) c
									(layer)3
										Element:span
											Create a new article for a blog
										Element:span
											POST
											/admin/blogs/241253187/articles.json
									Node:
									(type) c
									(layer)3
										Element:table
										Element:tbody
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Create a new article with html markup and upload it to a blog.
									Node:
									(type) c
									(layer)3
										Element:pre
											POST /admin/blogs/#{id}/articles.json
									Node:
									(type) c
									(layer)3
										Element:pre
											{ "article": { "title": "My new Article title", "author": "John Smith", "tags": "This Post, Has Been Tagged", "body_html": "<h1>I like articles<\/h1>\n<p><strong>Yea<\/strong>, I like posting them through <span class=\"caps\">REST<\/span>.<\/p>", "published_at": "Thu Mar 24 15:45:47 UTC 2011" } }
									Node:
									(type) c
									(layer)3
										Element:a
											View Response
									Node:
									(type) c
									(layer)3
										Element:pre
											HTTP/1.1 201 Created { "article": { "id": 1051293782, "title": "My new Article title", "created_at": "2017-01-18T13:17:59-05:00", "body_html": "<h1>I like articles<\/h1>\n<p><strong>Yea<\/strong>, I like posting them through <span class=\"caps\">REST<\/span>.<\/p>", "blog_id": 241253187, "author": "John Smith", "user_id": null, "published_at": "2011-03-24T11:45:47-04:00", "updated_at": "2017-01-18T13:17:59-05:00", "summary_html": null, "template_suffix": null, "handle": "my-new-article-title", "tags": "Has Been Tagged, This Post" } }
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Create a new article with a base64 encoded image
									Node:
									(type) c
									(layer)3
										Element:pre
											POST /admin/blogs/#{id}/articles.json
									Node:
									(type) c
									(layer)3
										Element:pre
											{ "article": { "title": "My new Article title", "author": "John Smith", "tags": "This Post, Has Been Tagged", "body_html": "<h1>I like articles<\/h1>\n<p><strong>Yea<\/strong>, I like posting them through <span class=\"caps\">REST<\/span>.<\/p>", "published_at": "Thu Mar 24 15:45:47 UTC 2011", "image": { "attachment": "R0lGODlhAQABAIAAAAAAAAAAACH5BAEAAAAALAAAAAABAAEAAAICRAEAOw==\n" } } }
									Node:
									(type) c
									(layer)3
										Element:a
											View Response
									Node:
									(type) c
									(layer)3
										Element:pre
											HTTP/1.1 201 Created { "article": { "id": 1051293783, "title": "My new Article title", "created_at": "2017-01-18T13:18:03-05:00", "body_html": "<h1>I like articles<\/h1>\n<p><strong>Yea<\/strong>, I like posting them through <span class=\"caps\">REST<\/span>.<\/p>", "blog_id": 241253187, "author": "John Smith", "user_id": null, "published_at": "2011-03-24T11:45:47-04:00", "updated_at": "2017-01-18T13:18:03-05:00", "summary_html": null, "template_suffix": null, "handle": "my-new-article-title", "tags": "Has Been Tagged, This Post", "image": { "created_at": "2017-01-18T13:18:03-05:00", "src": "https:\/\/cdn.shopify.com\/s\/files\/1\/0006\/9093\/3842\/articles\/df3e567d6f16d040326c7a0ea29a4f41.gif?v=1484763483" } } }
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Trying to create an article without a title will return an error
									Node:
									(type) c
									(layer)3
										Element:pre
											POST /admin/blogs/#{id}/articles.json
									Node:
									(type) c
									(layer)3
										Element:pre
											{ "article": { "body": "something" } }
									Node:
									(type) c
									(layer)3
										Element:a
											View Response
									Node:
									(type) c
									(layer)3
										Element:pre
											HTTP/1.1 422 Unprocessable Entity { "errors": { "title": [ "can't be blank" ] } }
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Create a new, but unpublished article for a blog
									Node:
									(type) c
									(layer)3
										Element:pre
											POST /admin/blogs/#{id}/articles.json
									Node:
									(type) c
									(layer)3
										Element:pre
											{ "article": { "title": "My new Article title", "author": "John Smith", "tags": "This Post, Has Been Tagged", "body_html": "<h1>I like articles<\/h1>\n<p><strong>Yea<\/strong>, I like posting them through <span class=\"caps\">REST<\/span>.<\/p>", "published": false } }
									Node:
									(type) c
									(layer)3
										Element:a
											View Response
									Node:
									(type) c
									(layer)3
										Element:pre
											HTTP/1.1 201 Created { "article": { "id": 1051293784, "title": "My new Article title", "created_at": "2017-01-18T13:18:04-05:00", "body_html": "<h1>I like articles<\/h1>\n<p><strong>Yea<\/strong>, I like posting them through <span class=\"caps\">REST<\/span>.<\/p>", "blog_id": 241253187, "author": "John Smith", "user_id": null, "published_at": null, "updated_at": "2017-01-18T13:18:04-05:00", "summary_html": null, "template_suffix": null, "handle": "my-new-article-title", "tags": "Has Been Tagged, This Post" } }
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Create a new article with an image which will be downloaded by Shopify
									Node:
									(type) c
									(layer)3
										Element:pre
											POST /admin/blogs/#{id}/articles.json
									Node:
									(type) c
									(layer)3
										Element:pre
											{ "article": { "title": "My new Article title", "author": "John Smith", "tags": "This Post, Has Been Tagged", "body_html": "<h1>I like articles<\/h1>\n<p><strong>Yea<\/strong>, I like posting them through <span class=\"caps\">REST<\/span>.<\/p>", "published_at": "Thu Mar 24 15:45:47 UTC 2011", "image": { "src": "http:\/\/example.com\/rails_logo.gif" } } }
									Node:
									(type) c
									(layer)3
										Element:a
											View Response
									Node:
									(type) c
									(layer)3
										Element:pre
											HTTP/1.1 201 Created { "article": { "id": 1051293785, "title": "My new Article title", "created_at": "2017-01-18T13:18:06-05:00", "body_html": "<h1>I like articles<\/h1>\n<p><strong>Yea<\/strong>, I like posting them through <span class=\"caps\">REST<\/span>.<\/p>", "blog_id": 241253187, "author": "John Smith", "user_id": null, "published_at": "2011-03-24T11:45:47-04:00", "updated_at": "2017-01-18T13:18:06-05:00", "summary_html": null, "template_suffix": null, "handle": "my-new-article-title", "tags": "Has Been Tagged, This Post", "image": { "created_at": "2017-01-18T13:18:06-05:00", "src": "https:\/\/cdn.shopify.com\/s\/files\/1\/0006\/9093\/3842\/articles\/rails_logo.gif?v=1484763486" } } }
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Create an article with a metafield
									Node:
									(type) c
									(layer)3
										Element:pre
											POST /admin/blogs/#{id}/articles.json
									Node:
									(type) c
									(layer)3
										Element:pre
											{ "article": { "title": "My new Article title", "author": "John Smith", "tags": "This Post, Has Been Tagged", "body_html": "<h1>I like articles<\/h1>\n<p><strong>Yea<\/strong>, I like posting them through <span class=\"caps\">REST<\/span>.<\/p>", "published_at": "Thu Mar 24 15:45:47 UTC 2011", "metafields": [ { "key": "new", "value": "newvalue", "value_type": "string", "namespace": "global" } ] } }
									Node:
									(type) c
									(layer)3
										Element:a
											View Response
									Node:
									(type) c
									(layer)3
										Element:pre
											HTTP/1.1 201 Created { "article": { "id": 1051293787, "title": "My new Article title", "created_at": "2017-01-18T13:18:09-05:00", "body_html": "<h1>I like articles<\/h1>\n<p><strong>Yea<\/strong>, I like posting them through <span class=\"caps\">REST<\/span>.<\/p>", "blog_id": 241253187, "author": "John Smith", "user_id": null, "published_at": "2011-03-24T11:45:47-04:00", "updated_at": "2017-01-18T13:18:09-05:00", "summary_html": null, "template_suffix": null, "handle": "my-new-article-title", "tags": "Has Been Tagged, This Post" } }
									Node:
									(type) c
									(layer)3
										Element:span
											Update an article
										Element:span
											PUT
											/admin/blogs/241253187/articles/134645308.json
									Node:
									(type) c
									(layer)3
										Element:table
										Element:tbody
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Show a hidden article by changing the published attribute to true
									Node:
									(type) c
									(layer)3
										Element:pre
											PUT /admin/blogs/#{id}/articles/#{id}.json
									Node:
									(type) c
									(layer)3
										Element:pre
											{ "article": { "id": 134645308, "published": true } }
									Node:
									(type) c
									(layer)3
										Element:a
											View Response
									Node:
									(type) c
									(layer)3
										Element:pre
											HTTP/1.1 200 OK { "article": { "blog_id": 241253187, "published_at": "2017-01-18T13:17:58-05:00", "id": 134645308, "title": "get on the train now", "created_at": "2008-07-31T20:00:00-04:00", "body_html": "<p>Do <em>you<\/em> have an <strong>IPod<\/strong> yet?<\/p>", "author": "Dennis", "user_id": 799407056, "updated_at": "2017-01-18T13:17:58-05:00", "summary_html": null, "template_suffix": null, "handle": "get-on-the-train-now", "tags": "Announcing", "image": { "created_at": "2017-01-18T13:17:46-05:00", "src": "https:\/\/cdn.shopify.com\/s\/files\/1\/0006\/9093\/3842\/articles\/imac.jpg?v=1484763466" } } }
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Update an existing article of a blog
									Node:
									(type) c
									(layer)3
										Element:pre
											PUT /admin/blogs/#{id}/articles/#{id}.json
									Node:
									(type) c
									(layer)3
										Element:pre
											{ "article": { "id": 134645308, "title": "My new Title", "author": "Your name", "tags": "Tags, Will Be, Updated", "body_html": "<p>Look, I can even update through a web service.<\/p>", "published_at": "Thu Mar 24 15:45:47 UTC 2011" } }
									Node:
									(type) c
									(layer)3
										Element:a
											View Response
									Node:
									(type) c
									(layer)3
										Element:pre
											HTTP/1.1 200 OK { "article": { "blog_id": 241253187, "id": 134645308, "title": "My new Title", "created_at": "2008-07-31T20:00:00-04:00", "body_html": "<p>Look, I can even update through a web service.<\/p>", "author": "Your name", "user_id": null, "published_at": "2011-03-24T11:45:47-04:00", "updated_at": "2017-01-18T13:18:01-05:00", "summary_html": null, "template_suffix": null, "handle": "get-on-the-train-now", "tags": "Tags, Updated, Will Be", "image": { "created_at": "2017-01-18T13:17:46-05:00", "src": "https:\/\/cdn.shopify.com\/s\/files\/1\/0006\/9093\/3842\/articles\/imac.jpg?v=1484763466" } } }
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Hide a published article by changing the published attribute to false
									Node:
									(type) c
									(layer)3
										Element:pre
											PUT /admin/blogs/#{id}/articles/#{id}.json
									Node:
									(type) c
									(layer)3
										Element:pre
											{ "article": { "id": 134645308, "published": false } }
									Node:
									(type) c
									(layer)3
										Element:a
											View Response
									Node:
									(type) c
									(layer)3
										Element:pre
											HTTP/1.1 200 OK { "article": { "blog_id": 241253187, "id": 134645308, "title": "get on the train now", "created_at": "2008-07-31T20:00:00-04:00", "body_html": "<p>Do <em>you<\/em> have an <strong>IPod<\/strong> yet?<\/p>", "author": "Dennis", "user_id": 799407056, "published_at": null, "updated_at": "2017-01-18T13:18:01-05:00", "summary_html": null, "template_suffix": null, "handle": "get-on-the-train-now", "tags": "Announcing", "image": { "created_at": "2017-01-18T13:17:46-05:00", "src": "https:\/\/cdn.shopify.com\/s\/files\/1\/0006\/9093\/3842\/articles\/imac.jpg?v=1484763466" } } }
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Update an article, setting a new image
									Node:
									(type) c
									(layer)3
										Element:pre
											PUT /admin/blogs/#{id}/articles/#{id}.json
									Node:
									(type) c
									(layer)3
										Element:pre
											{ "article": { "id": 134645308, "title": "My new Title", "author": "Your name", "tags": "Tags, Will Be, Updated", "body_html": "<p>Look, I can even update through a web service.<\/p>", "published_at": "Thu Mar 24 15:45:47 UTC 2011", "image": { "attachment": "R0lGODlhbgCMAPf\/APbr48VySrxTO7IgKt2qmKQdJeK8lsFjROG5p\/nz7Zg3\nMNmnd7Q1MLNVS9GId71hSJMZIuzTu4UtKbeEeakhKMl8U8WYjfr18YQaIbAf\nKKwhKdKzqpQtLebFortOOejKrOjZ1Mt7aMNpVbAqLLV7bsNqR+3WwMqEWenN\nsZYxL\/Ddy\/Pm2e7ZxLlUQrIjNPXp3bU5MbhENbEtLtqhj5ZQTfHh0bMxL7Ip\nNsNyUYkZIrZJPcqGdYIUHb5aPKkeJnoUHd2yiJkiLKYiKLRFOsyJXKVDO8up\nosFaS+TBnK4kKti5sNaYg\/z49aqYl5kqLrljUtORfMOlo\/36+H4ZH8yDYq0f\nKKFYTaU9MrY8MrZBNXwXHpgaIdGVYu\/byLZNP9SaZLIyOuXCtHkpJst+Wpcm\nLMyCa8BfP9GMb9KQdPDd1PPk1sd5VP79\/L5dQZ0bI9+ymqssK9WcfIoXHdzG\nxdWWfteib79lSr1YP86MYurQxKdcUKdMQr5ZSfPs6YEZH8uhl4oWIenMuurQ\nttmejaqoqsqBVaAcJLlJN5kvMLlZRMNsSL5fRak0LbdQQMVvSPjw6cJnRpkf\nKtmjhvfu5cJtT7IuOMVvWLY\/M\/37+o0YH9ibhtSYdObErc6HarM9NnYSGNGR\navLi09unje3WyeO8rsVrT7tdRtK3uffu6NWeaL9pTJIjJrM4NPbx8cdyX7M7\nPYYVHu7j4KgoNJAYIKtkV5o9MsOcldicis+RYNutfrhFOZ0hJbqinZ8bI8h5\nUObFuOfItJsfJrJfUOfIqc+PXqQtK8RnSbA4Mcd3Tm0SGbpXQ8aqp7RLNs+s\novHfzpVhV9iggMd1TLtbRKUdKXEQFsd4XrZRPLIgMZUeJ+jKvrAlK6AhJ65A\nMpMpKuC3j5obIsRwS7hAN8l\/YtvDvnYXHbAoLI47SIUsOMenorF4gO\/m4+fH\npo4vLZ8oKMukqp0cJbhVSMV2UuPR0bAfMLIrLrg\/OcJwT8h+Vt+wn8eurLlh\nQrIfKHQOHHQOHf\/\/\/\/\/\/\/yH5BAEAAP8ALAAAAABuAIwAAAj\/AP8JHDhQXjpz\n\/PopXNiPn0OHDRMmbKhQIsOJFS1SxAhxI8SHFzVeDBnx48iNBAeeOkcxokeX\nFRdOnAlSokaaLXNujJkxo8iYHRkKtWkzZSsaOXkAWsoUECynsHgoqEW1qtVa\nU7Mq2Mq1K9cUW8GKTUG2rNkUHNByWMuWLdWva7t1W7UKG4S7eO\/ycEhQHgaK\nsL4VGGyocGE3br5929KuxQFFkEtIlgypsuUDmDMfWGRmUZvPoEHfGU36jgDT\nLQSoVt3IQ2sPsL0IUNZGlZ0H0lo00jEkCytWMspdGzBgn\/F9EBIWnKIQlqHB\nhA0bQpx48Z7UAkoEcMTdUeTJJSxf\/4akOTNnzqHb3GkjrUdp0gKwq77jWdod\nO7dNKWvhRUcWT6zYQI82xB03AAQNCdTKX\/xAAB10hfVCnRtbVIhIAy14oJoZ\nAXS4XXfdQaYIeOGJRx555Z1nRnrqqUeaMtIYY8dmn7Vg2yK57TYEgAzIQGBx\nxyXHj0A0OOTggxFKSN1iWwTTAIYanpYdMtFE4+GVIHrn3XeUmVhZeWiIMoOY\nnVQDGiTgKALJjIssIsADt0mjjI6+AXcDgQYi2M8\/7ijEwzRIFmBIL9NVV+EW\nVzyZ4Wqj9RBABchQWeWkV3aY5ZYjjgieeKL446mnjxwAiZVpliAjZqblt19\/\n\/7HCwIAFGv+X3J4s9fMckoYhphiTQTwJ5Wqn9dDDAWuMUUEFviTrS6STVlmp\npVmKqCkOn34aB6TIBAAOJeHZAYl6ptixSCL8edGbq8HFeqBDcygEyIOCGqYk\nkxUW4euiq7knbA\/gUDHGv\/\/ec2wFayQbaQWinOCslVhmSUq1\/gCDLJXacgtJ\nCYu4J66cjbAKoA3CxapnOgm9g+ughdK7xYX3Rinlvj2YYcYanVBBhTg2Axzw\nG4\/4k4bBzDZbKRUQP1LIsRSX6sgBZtwhzQP68ccbj7AWty4\/5igEoaC9dK3r\noVtgs4evvzKqb8wyQ0JFJzXXbDMVcQBQLTDGVmCssstKGs09oPT\/jQcRoBw9\nMamKgEOeeg\/gqBtvdVZSDnHFIQgRD4RxXWhiYEOQKNn4zncHzDIzHc0ZpHdy\nRicIQOypKDf7q3Pd96ABzSab+E1EIYIvS2o0ijA92gPZiCB1qwL+iJxL78Z7\n2NeHQrAK2YrCZva+bcgcujFUQIEG6WigonoCdLT9tr9UbIIAMMCEkkYacvvT\nxSgsBPKGJKBEAw4yjhx+hyn+PAJFfztyVdWOt5B3RehyimneFuwFvQxFyTSf\n25f1zCAqSFACDXTQ3gwSoDoElI5tZyBAINqnuhJ+Kg9vOIOaVnSHT5ECHucK\n0OMiBxJAPCdXmGseBLoBvei5rFEStB5m\/yBhjFJUIw50oIMoLvCpFRAADduj\nwxvUYMIqmvARCBiDeiwRBk+lQQTEq5qQ3CWdJSkGAlu4y9h66EBgAbF6QhSV\nMUpQilKcQRNLwIenfpFEJebBioC0ohrQQJ8QhMIfSwhgj2YouYTYUEmGqhBe\nFNBDH5otgmgLnRyLWMdq0GEGCMCHJjSBjzQE8pSChMLTCJBI4pXDBeuiiA1T\nprK7PK+SUPphsIQ1wSEag5OUKIUlyiAmAowClci0YizKILUAFi+WDQEEJOmF\nxlnMYnOVbOP0gkjBTdZRmDiwhCuywcRkmtOEpHjC1DzBABto4xqN5AcgdEXN\nNO4Ql0+CB2xctv9LM2SSgpXhZB0t0QlT+iMUkzinQquFihD452P0gGdGAPGN\nHKYxjbOAwBpxqU9+ApGXQgyoQDWRgASwoAMGMMAHDrnQhc5AkQPSU0NgYVF7\nQmAWKcBnPvc5HwGcbUVxJCInEfACQXQACUhFQkqRwAIOttScv9ABO21wA8k1\np5Z3mYXYdNqAjvLzbHDUpFCNIQoUdGAdHUhrUg2gVAOg4AXmvEAaOPEGaCCA\nAASQxBtIYYIq5kEHAaKHVfsRGB3eNBPYxKdXGVWGUnAzdOSxgyg+MIxhoDWt\nal3rUlXABEBeYBQIiMMm0AAKPBBAE1A4nTjWEIAzvGEFqsvDEHqEjZj\/wMKw\n1rwlVxerGkv4AxVoAOkEmXGMOKDgA8i1LFrRioSjKrWtKRVEQlXHBBSKQhLQ\nEG3tCHCLJaSWClD0zgHO8LBqDeIYNsDGTG4ryZtak4G7lZ6G2sBSfyCAaTK7\nAzfgQIEzoOC\/yKVsZS+bWeim1BsdqEG10oCANxDgDZwIRHa3O4hbaA91nlKB\nKA7QBhHo0VPwCFBtAdNea86CZVztKk8FUN5PjQIHxKWABihQBkHY+L\/HTa5l\nMetcAxvAG94wQAQAkA1SIIAUBvUHdkVLgBkMwrvkPSEkVtSCJ\/yCAJ5gZ20l\nwgObziITGk3xTqUHhWoxYQVdAIYINMBmO0TA\/8aCwHGOBbwOAvc4pXj2RieY\nIY69ttgfpJBEHOLQ5ArTAQ2SaPAb4lAC33XsoaxYhUx4kFVrZoKSYlYxbOzg\nPX8kAM1d6AILOuEDDQzBBCaIwJvhjOMAU7bOmE0qdMUhhFozQhVxiMWnuiAJ\nQTfZyahFQydWGwA1cbiZAJL0Qiht6UzoVsxetUQaJhEKZzhDBdh+A5s9AQxU\nq3rVN241ne0sa1rXWgjbqLUd3uqPUYhCFNDAxwzm3d3vjgF\/vTvAHegUaYbw\nwMSZyAR8oX0I2BwiC2eoQQ2srYJA6IDNb2ABqr39bVYDWMfkRgIVzs1xdEOD\nCjhQ4nXlPe9BaOLQNf+rRjQc0eg2DM8TyvZTs3mY6Xwy4xI2YLMGdIAAhTvD\nFWzuhKhZIHGKq9riF381rDtQho53\/Bjpboc1OiEJktMbtaplrbHboCOYT9rS\nOdhopocwgiRowOw6L0MNCKCBKjwA26IW9cRTXfE4i1vAlpUEHJze8XTXehvc\n2AQ05k3vDHaiDGNYeaPNoAzGxbwf\/86EHDCd4kbsyBMySII2NH92nevg4TbI\nA7ZVEGqiF93ocLb7nIdhgGMIoROW4Dvft2GHOqQiDoM3+YWJnT8O7yYL3fgI\nDwK+CrFX0lwBctUxtLH55qNd5xkYxMKvDffSn\/7b4L47JYQgjnW0XvZOv0L\/\nKmz\/BS5sIg5QvtkavDPlO\/Am+FzOBCBqgU8veEJA9LCBDRjQznIw3\/lJEIBs\n5gqhUIALN3rWR3QTh31IFwcUkAiV1QEOCH4ddw8LkAqpUH5cgAtnIGzikHgs\nxzSW1w3+Jgc0Bz32Rw8DoA3lQA8yIAP6xwoj4H\/\/B4BJYAOjoAZqYIDWRn0J\nuIB1Z3fHQAGdgHeJQIEcxwwLQH5csIHEQARE4C9aRx49oAPw5ydyIHaANUPE\nwXwtmH\/6Vw5iKIb\/F4DaoAGisAIroIM7WG0MR3pDd3qoJwjVQAEUAAdvEGAG\nsHcUgITFgAtLmIFNiAtQeAInMAa+UGwiyAEW8QMc\/\/AkgKUNx7EPkLOCLOiC\nNiADIzCDY0iDm2cHLxCKbNiGPueDcVh02McJ\/GWHjfABxyUJdigEfUiB+pAL\ndVAHX1B+uPCERHAChSAw8QAOHMaIE6EF3MAKkjiJxlGJljgC+UcPm7iJnch8\nDJAHoRiKaqiDBRgK01d9LDB0QFiHdmiH1YACSDCE4ziLsscIdRCIGriLhfiL\naxAPOKAKtbARPFAFQKKMywg5XuiC9ACN0TiNOwAAAHCNL5CN2siN3QiHcYhq\nwCAD6WiHomAJEzmO4LcGueCOG4gLf2OIAjOPOHCPEEFT\/KiMzKgNLigDABmN\nnKgL02aQB3mNCkmKB+iNCv+IBjI2Y+O4ihcZi063DcywkReYi04Yj\/ewBmuA\nAyRYEbAAAVVwkv3oj9rwgizJks4okCMwCI+ACqgwCQaJkGq4hm3IjW8YakPn\nCWxmhzz5kxfJd3iwkUx4lL0ojw\/QlAnxlG4glQYCOStplS8YkJuoCwnwCIY5\nCYgZljRJlqTYg9WnbTq3lm3plrGojrVWixuJgRpIDB95AgLTCCRYkjeVAXw5\nlfqXiVa5ks64QSVlmF8JljO5mAtplj4IdJE5YzpHmenYcXCwAHKJi7rIi74Y\nD7oQms1xU71QmpQ4AOVwmvoHmAH5ABcwna3pmompmAnJmDzIcGp5m2upmxMp\ni+f\/Zg9AIJeCeJSG+ACHAH8OwWyzoJyUCIOnCYOAKQP4wATTeQElVZio8AiI\nCZtiSZbbuHAIUAXemZu5CZ4YyQ250KAXeJ6c2YsCYIUYwWyZUADK6QoEwAfO\nOZ8yoANSwAT4SZ37eZjXGZtjOZshoAFQ8HAHOo6TCZ5CgAfluYS4OIhPGA8C\n4AXBtxBP+WXvWZrZ4ClhYAkdmokzgAkhKqIjqp+GaaIyGaAL+XDOEAEueqC4\nGaNuKQTWAAQ1OpceCQktcAgcYFuHJQc+wJfhADFpsAPhcJpewAZKKgVL2qTV\n2ZUnKptqMApJ8ADVZqVYKpkKaodwEAflaYvAuYFE4HIe\/8CIEWGhchCkJ7kE\nJQQAHGoDZcYGckqnTGqnhWmiALqYS5AEdGCAVmqgBvqiMqagquANX3qe8cCo\njpqX1iQHsAALaWogx5FkEBMO7URCmjqnTJqfJQql2LkClpAEwNCGahABapmq\nqqqgjAAE3uCgTFgC6tEIZVoRzCYHckBpJ+kBJoQA+xcCqrOpdeqpT\/qf2JkF\nSQAPOdiGLoqq0QqeVOCqDUp+RMBh+7atDgELX+atPJCPKOkAJmQJ7fRH54oJ\nc7qk+amfn+qfsAkAKqB5SeAFo7CGwBCo3smWlMkMQPaqyAAJi2AaKTBpECB5\nUdFlKJk6qoMK\/McHVsSwdFqnxP9aUv3JrgRghhcbCCswqp0XmdAamTtJmXHg\nqjWaCmqCIwJwsg\/RrSvLA6R5HDIAAyJAAJ3mKQQAAwxwC4Akp8Iqog9bna+5\nA2V4g+kUgM\/HZlUwtB2rparwYzWKB\/nzAG3QtBVaq1HxA5+wl8cBA1iABTCg\nCyGgsK7Af1lrReiariTKn6ggAmTIfDfIAJuntt7pth2bjnAABHKbC74ADi13\nByfLrQG7sp\/AA8dBD4EruIILAy0ABboAA66ATMHKqcMKsZ\/aCNMouWrbu2vb\nthw7kdUgt3VgP41WsinwEPzwb7NgqzzwA3xrCMYBuKu7ujBwvTBAAOYEtrbr\nqQkwg5z\/GLmVa7GWy7EJmo7ccGB4gAxp8i3SMLoNEXnOywOf8AmwsA\/aUL3V\ni726QELJtLi3W1ICWQ7SGLm+67tCi6UeSwGb8GOFkC1L+74uAbAq+7z1Sw0F\nwACXcAmBy8H6O7sLxb22O52k4IwD2Yk0SL69a763KWOJgAQLACnFBgl267Qy\nV8H0+wnUgAEb3MMbrL\/a+1SaWrNMSgpYqZUEPIY1qMICyMJtCQSB4wv2czjw\nC3mla8E6nAzcEA4+jAU\/HLiJG8IAbMRW6ZLgq8S8e8BOPGM4cDtSDLqboQD4\neMV8m8VXkAV47MMeDMJP9SmLiw82oAOpicThm8IHXL6BSgEn\/4AHhbAsaRLH\nMSG\/e3vBjojHWRADeowFg9DHEMO9DmADDjAK1ZCaLknAhZzGaoyl3IALXHAC\nMry0cjwR8juwz0sN1OBs3HDJlpwFl8DLvMrJnqKpUADKIUoKD1DGpVzAZ3vI\nWKoIxNDKr0yysRy\/dKzDP3BTChADunzJlxAOygDMJkQANlAGmMCk+CDI0KiV\nBYzGh9zEOmcDRPCEjEwlI3IACtARkmzB1JBRs9AN3KDN2mzJZQDOJRQGNmAH\nDSuiyhCYL2jGKIzKCMxmdwCFRMDIb9xo07y8V1y\/14wXVxADIA3QWRDEBF0t\nBi0CAOwKgDkCmmjGpzy+anwPvbjIJ\/\/gyBitvLNswRmVVewQ0iL9yyVt0PVA\nAIsLBfVJytK4zuXQzknADIZoiIVABNEsx8vWvN\/6vJRmU6vw0T4tsyWtOvxn\nA+EABQCgpID8gqh5lQ6dxGR4yIrgi78o01MdyVY9sJ+QCd+ARlmVzT490F8N\nMTEQ1gwQDiGwPh260i2dzJ3Yu8eAO\/fw2BVwD408w7UAEv9mqyubQBe1Q\/98\nCCA9A38NMSLAf4JtAyFw2Gnd0Il9wmKotm0Q10o5j41svFQtc\/M7CwmU1\/ZU\nC559CLrwC6FdLSFA2sR9pB5anw4dvlUZDyE5j\/SINKBb2RRx2ZldHUxyFxwQ\nA70d3NUCBa7\/QtyljdrIvdZj6AFKGQ\/oTY84YA8PnCb3ON11PQv0dN0QgA1X\noAuH4Fvc7SkIwABcC97hfdiIvdrgSwnOrd72QAkGDsHSnRDD57wS0g4NcAVb\ncN1bkAKHcAh+vd95cL3+DeABPp+pjcybeAnojQMobg8JTgmqQAlSrAjSHb8q\nOwvT0QDocOMTQAJ6UARk4M+HANr77SnY6+Egrn\/tdKTjHY2LkOIqruCq8OR2\n8MYk6ScqSyiGQAI3fuNRsOVRMAEKcAjAHeT+cARD\/t8g3k5HLuJHLQMMYA\/r\nreAsbhv48QCUYD8NDnmSR+MF0At\/YARGoOXoEAW8QAscMARhHNwh\/1DmHm7m\nxZ3mxw2Y1rDicY4ft\/EAlp4tlS3LkndD3ODnfp7lW14EW7AHYu4pg9C6Zc5\/\njE7a+4fkad3iTy7nlW4KtC4N9hAAU47nR1IAwtAMno4Of77labQHrVDqYWC9\nis61qx7i83kIsU7plk7rppAI1G4K0UCSDp4JbgAdJNAMvv7pOL4YViAPpe4P\n+pvsy87qrT6ftQHtiUPr1K4M+9EC9nDnlOYDg+EDf+Dt3\/7n6EALi0EL+VDu\nD4DsqI69ql7kjo4F7r4IpiAN8T7vjdAIdmDv74DvPsAN\/O7tv14EiUECUQAC\npV4G+ovsqf7hAH6a1jDr8E7tLaAbE+8FMv\/\/3n6S79MwBDuw7xzv6e2gGBMQ\nBadQ6gSABQ5AAA4gAodg8kOe8GduCu8O8S7\/8jHfH5\/HDiWRDH6QA9hwK4PB\nDfbyBLRAAtPxDbaw5X0g5mlwCXzsMwgABUdw8Aif7ocg7fEu9VP\/eUPwCmDw\nAzPxA+TgBxgQ+BBgMpUjKNQR6FEwB6WuDJdw6AAQuMnO9KQNI3UP8x0DQHoP\nBmBABnuxEH4f+KAP+LitPNNRDFq+DCN\/CSQt3Psb+fyXBZU\/8ZevA5mv+Zqf\nAz\/AED+gBeQA+r4f+DkAAShTBKAu8kFOAOFQDQV97oqu6o0g8TFP+7Vv+5Ug\nC9+q+1PQ+7\/\/+1n\/DwFF4O\/osAFiDgB4DNT+UPDWC\/lljgV23zF5b\/vwXwny\njw3f+hE\/kP1TsP36\/wxNABBNeEVBp87fQYQJFS5k2NBOjGoEwvxKSOASFowZ\nscDgyHFIo0ZehrwCU9JkyUopK8nKlIkHP379+P2YMoUcBpw5deZ8RohQE6Cn\nGg4lOnRGDKRZsoS7pMPSA6YXNWLsKJLkSZOVwKhMGSTTrJf9ZNKcomXKTrQY\nevr02cSIvKJxi6aJkaVuXaZMs1ziO5UqPawnuXK9AWEW2Jhja9pMuzMd27YW\nLNga10fuZYUPkdZdqpTv575YbJQbkCHw1sEpb9wQMstwWLFkbfppjJPc\/wTI\nhHhJ5r0BBGbMRzfb7ez5MwwbpTMsx5pa9eob2CBM5yETpmzGtTE8hrybN29b\nc1oBn6trc9K7nhmUy6BcOUrn0KHLcr0FQvWYMxdnb3w7t\/fvwFMiFvKG0uw8\n4kRLYjkGG0RtMPlWc+GGdyCwbwtYrOsHu7K0a+K\/AEO04K0CF8InBvPOg2GE\nKpZTrsHSUotwwgnnmW4LHGGBKbb9bMqhsSly082CW0QMkDLLSvQHFQFiOESX\nLGzQpkUY22swA8Lko9EFLqfBEcdvMhRrwx610OLHtJ5Rc01ahHnCzTeFkXNO\nOfWQkwQ6NNFzTz2X0GQJQAMVdJEYsBhBAyrbK\/9tgBcbrCTCG7bkkstvvvwm\nzPzI7JEcNLXDCYICQhXVkAIMMdWQd0x1Y9VdiuHGA1hjhfWQQzyg9dZDYmBg\nyioSVfRKFwfYZ8ZIJ3XhGhe83OLSSwEZU78ea+pUO2wK8MFaUUMl9dReDOll\n1VXbuYIZWWOl1dZDLpGhV3YZXLTR9vZhUMJijUX2mmveYRZcQDLlsCZOp21s\nCx+uLTjbbE\/11ttv3diFkSHKRReGcthtN1hgrdxH2Awk5fJefK+ZZ9lvVvXW\n2cT+ZSwHgdHCpmCYDb4WYVNL7baXbsN9FdYYbKDA4otddBdYeffZx9iPjw35\nmmlKNtnUfmXSNNqAW9b\/6eWYY8YWYW0V7tYQhxWAwwege61y6OXkbdDoSUFe\nWuR3wP3akKhjUtlHlqklG+YqsjaY620VNgQDMcQQouwrX3zR6KKFZfttyKtw\n+utQnRUL2mjLYjnvtLDpu9e9\/ZYZ8FK3maLwwn8OmlF3lWNc7df3gfzteaZZ\n+NTKx5y6RxJ69\/333mvBwHOLQ\/fhiR2SV34HS47hmnAafJ9gh3AaDMcB7LE\/\nIoPY441dhOzDz94VN3DPNmoeM5drAyfK7lWH34baYetVCidBIT6C5UMhB4r2\nn3FheSANRVGCwhBmObtlbgqXyYYNyuYFAMQFCtPwQf3spxAraGBRR+Af91wX\n\/zsPoCIuCCAV13yAMsWo7zIOaJHFSHEZHZABdWK4X0JoIAENLIeDCXFA2rgX\nuwG8MC6kKGGoZuaDTEhtd\/vBTBoyYLYqeAEzFpihGCagEBqIQQJVGMAOEdLD\n2L0uHJdBAMIOhsTELHExwLnS\/i6zAQlIQItWxKIccejGL\/4wjPvw4kHSQApA\nBhKQUDCiEWE2C93dTSEW2EMjaWABhbgnA3g8SAj4cElK+kMJWoyjBK6YECtw\nUgKZ7N8ejdZHfzjgGgNY5SpnZsisJXFHikwICTLBskzUECFtxJ\/FFKKETmrx\nkwixQiclYAX+mfKUCpnBEZzpzHpkS2Yxm0ViMNcjhf+QABs5uKUuD9KoTOaP\nQb80picxaExk8lCZfIxLNuBhrWnurZpjoiVCbAkBbnrTH2pbTjgZVAVyGnOY\nBylmJ9P5xXWOUS6WEB3ZqgmTazLxMk40WntQub3lbIOc7OjkQP1RUI4e9CCl\nfJ3jjCbEogDAE6KrAiKlVs+4gJF7GUDlDLLnUWCyg6Ps8GgxdyrSVK5zH\/WI\noARjZjFEQhSmRCEFg9SGSqIoQadT7alOJcAOoJJUmeFA6VBIETqk+ssPKizK\nDorxwx9CdShSvapOqzpVoO7ApMocgAdcIb74HeSroEOqEn8w1mgVRR0KyEEw\nKqoctTZEquzggFsVooepskP\/DwqZAAfmakpGvc4HXSXF54CWVLthALASRYhB\nFpmDd4QxsQxRQmNd61HITnWyCVHC9MTnCsY9U7dH4AM8spGQvVrsiRB4Fg\/8\ncFxsJmQDHvUHLQyhWsy01rXs2MFj2ZGC6862KKRgHGY6K9zlEPdyP8AJcteo\n3ClsQCHq0AF0QdkN+HbjlxygL31hO13tMrW7lwkB0BiUoR3x4EfmrYlCNjAF\nCRAoIWmwQexQqQcyxHe+9eXAfVOQAg7k16v7jQsAHGi2Bv0gUzyQQ05Ga+Cy\n0MBEDsZgN8gQ4QnXt7oJ0QOGOZACDTeEu0aTCwC80EKhDcAHMDGHWATMsuMC\nFsVl\/9GnP0Jg0kw24MUv\/qUTOGDlCj8WETfGsVx2vI+UzsATIFZUaTIRk3QY\n+ZYlFq0Ce5QJHBXgdU+MRCSwEYlVBCHPQZhyn7vhhD9fWdAc2DKhKXxhRCc6\n0Yi4LOPcl6hGVUFqc4gJLGaxufKO1s2VkrOj63znOkciCKMedZ+n7ARUp1rQ\niLAyIlyNYURcONaInrWs9ci4JyJOaFYawDzP8Q+ZwAICLckbgd08i290eh9V\nCIadQw3qO5Oa1H1GNRlSjeorO2HLruZ2rLudAm+Dm9Gxcx\/GXmSIMbnjH5W2\nzy2RbOzM+cENBRAWs0N9b3zXWdp8pra1r61tbXdb4N\/2Nv8i5gzeIJd5Gjui\nwT+AzQ9YVGrYnNO0Agm27GBkvNnNzje+921qf\/+b1QEfuMDFPe5lk\/lspUG3\nWKbQCofLBBBuwNEs3C3aikcrB2TTeM81HgmOd3zf\/PZ3yFPNaqSXfODF0EDK\nE9e6liZmCvJwOLD7AQhU2efSbG6zm7VgiG1ofBc+\/\/nGgZ7vbYw67aVux4v\/\nfXSSK53by\/HVrzIwDZTBBANUrzpMeAAIWASeB4P\/AQ9+cHjEJx7xWgDE5nLQ\neMdHXvKbg\/zkMZ23H\/1oFRjYPOc9v3nQ58Aw0xn9LACvO7HQAOZVf\/jl0ii1\nHcXe9bPX3euftaPL5R71tIf97nsy7\/o0WlP2r4\/JOU7B+r5nqva7jz1EdZ97\n4qNe+bonfvCfVXvly1762beOOdLBd+Q7PCAAOw==\n" } } }
									Node:
									(type) c
									(layer)3
										Element:a
											View Response
									Node:
									(type) c
									(layer)3
										Element:pre
											HTTP/1.1 200 OK { "article": { "blog_id": 241253187, "id": 134645308, "title": "My new Title", "created_at": "2008-07-31T20:00:00-04:00", "body_html": "<p>Look, I can even update through a web service.<\/p>", "author": "Your name", "user_id": null, "published_at": "2011-03-24T11:45:47-04:00", "updated_at": "2017-01-18T13:18:02-05:00", "summary_html": null, "template_suffix": null, "handle": "get-on-the-train-now", "tags": "Tags, Updated, Will Be", "image": { "created_at": "2017-01-18T13:18:02-05:00", "src": "https:\/\/cdn.shopify.com\/s\/files\/1\/0006\/9093\/3842\/articles\/fd43f2c8883f6e9b680e3295fd990d2c.gif?v=1484763482" } } }
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Add a metafield to an existing article
									Node:
									(type) c
									(layer)3
										Element:pre
											PUT /admin/blogs/#{id}/articles/#{id}.json
									Node:
									(type) c
									(layer)3
										Element:pre
											{ "article": { "id": 134645308, "metafields": [ { "key": "new", "value": "newvalue", "value_type": "string", "namespace": "global" } ] } }
									Node:
									(type) c
									(layer)3
										Element:a
											View Response
									Node:
									(type) c
									(layer)3
										Element:pre
											HTTP/1.1 200 OK { "article": { "blog_id": 241253187, "id": 134645308, "title": "get on the train now", "handle": "get-on-the-train-now", "body_html": "<p>Do <em>you<\/em> have an <strong>IPod<\/strong> yet?<\/p>", "created_at": "2008-07-31T20:00:00-04:00", "author": "Dennis", "user_id": 799407056, "published_at": "2008-07-31T20:00:00-04:00", "updated_at": "2017-01-18T13:18:05-05:00", "summary_html": null, "template_suffix": null, "tags": "Announcing", "image": { "created_at": "2017-01-18T13:17:46-05:00", "src": "https:\/\/cdn.shopify.com\/s\/files\/1\/0006\/9093\/3842\/articles\/imac.jpg?v=1484763466" } } }
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Update a article, clearing the article image
									Node:
									(type) c
									(layer)3
										Element:pre
											PUT /admin/blogs/#{id}/articles/#{id}.json
									Node:
									(type) c
									(layer)3
										Element:pre
											{ "article": { "id": 134645308, "title": "My new Title", "author": "Your name", "tags": "Tags, Updated, Will Be", "body_html": "<p>Look, I can even update through a web service.<\/p>", "published_at": "2011-03-24T11:45:47-04:00", "image": "", "created_at": "2008-07-31T20:00:00-04:00", "user_id": null, "updated_at": "2017-01-18T13:18:08-05:00", "summary_html": null, "template_suffix": null, "handle": "get-on-the-train-now" } }
									Node:
									(type) c
									(layer)3
										Element:a
											View Response
									Node:
									(type) c
									(layer)3
										Element:pre
											HTTP/1.1 200 OK { "article": { "blog_id": 241253187, "id": 134645308, "title": "My new Title", "created_at": "2008-07-31T20:00:00-04:00", "body_html": "<p>Look, I can even update through a web service.<\/p>", "author": "Your name", "user_id": null, "published_at": "2011-03-24T11:45:47-04:00", "updated_at": "2017-01-18T13:18:09-05:00", "summary_html": null, "template_suffix": null, "handle": "get-on-the-train-now", "tags": "Tags, Updated, Will Be" } }
									Node:
									(type) c
									(layer)3
										Element:span
											Get a list of all the authors of articles
										Element:span
											GET
											/admin/articles/authors.json
									Node:
									(type) c
									(layer)3
										Element:table
										Element:tbody
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Get a list of all authors of articles
									Node:
									(type) c
									(layer)3
										Element:pre
											GET /admin/articles/authors.json
									Node:
									(type) c
									(layer)3
										Element:a
											View Response
									Node:
									(type) c
									(layer)3
										Element:pre
											HTTP/1.1 200 OK { "authors": [ "dennis", "John", "Rob", "Dennis" ] }
									Node:
									(type) c
									(layer)3
										Element:span
											Get a list of all the tags of articles
										Element:span
											GET
											/admin/articles/tags.json
									Node:
									(type) c
									(layer)3
										Element:table
										Element:tbody
										Element:tr
										Element:td
											popular
										Element:td
										Element:p
											A flag to indicate only to a certain number of the most popular tags
										Element:tr
										Element:td
											limit
										Element:td
										Element:p
											The number of tags to return
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Get a list of the most popular tags
									Node:
									(type) c
									(layer)3
										Element:pre
											GET /admin/articles/tags.json?limit=1&popular=1
									Node:
									(type) c
									(layer)3
										Element:a
											View Response
									Node:
									(type) c
									(layer)3
										Element:pre
											HTTP/1.1 200 OK { "tags": [ "Announcing" ] }
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Get a list of all tags from a specific blog
									Node:
									(type) c
									(layer)3
										Element:pre
											GET /admin/blogs/#{id}/articles/tags.json
									Node:
									(type) c
									(layer)3
										Element:a
											View Response
									Node:
									(type) c
									(layer)3
										Element:pre
											HTTP/1.1 200 OK { "tags": [ "Announcing", "Mystery" ] }
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Get a list of all tags of articles
									Node:
									(type) c
									(layer)3
										Element:pre
											GET /admin/articles/tags.json
									Node:
									(type) c
									(layer)3
										Element:a
											View Response
									Node:
									(type) c
									(layer)3
										Element:pre
											HTTP/1.1 200 OK { "tags": [ "Announcing", "Mystery" ] }
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Get a list of the most popular tags from a specific blog
									Node:
									(type) c
									(layer)3
										Element:pre
											GET /admin/blogs/#{id}/articles/tags.json?limit=1&popular=1
									Node:
									(type) c
									(layer)3
										Element:a
											View Response
									Node:
									(type) c
									(layer)3
										Element:pre
											HTTP/1.1 200 OK { "tags": [ "Announcing" ] }
									Node:
									(type) c
									(layer)3
										Element:span
											Delete an article of a blog
										Element:span
											DELETE
											/admin/blogs/241253187/articles/134645308.json
									Node:
									(type) c
									(layer)3
										Element:table
										Element:tbody
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Remove an existing article from a blog
									Node:
									(type) c
									(layer)3
										Element:pre
											DELETE /admin/blogs/#{id}/articles/#{id}.json
									Node:
									(type) c
									(layer)3
										Element:a
											View Response
									Node:
									(type) c
									(layer)3
										Element:pre
											HTTP/1.1 200 OK {}
									Node:
									(type) c
									(layer)3
										Element:p
											How helpful was this page?
									Node:
									(type) c
									(layer)3
										Element:label
											1
									Node:
									(type) c
									(layer)3
										Element:label
											2
									Node:
									(type) c
									(layer)3
										Element:label
											3
									Node:
									(type) c
									(layer)3
										Element:label
											4
									Node:
									(type) c
									(layer)3
										Element:label
											5
									Node:
									(type) c
									(layer)3
										Element:label
										Element:span
											Select an option
										Element:span
									Node:
									(type) c
									(layer)3
										Element:label
										Element:span
											What was good or bad about this page?
									Node:
									(type) c
									(layer)3
										Element:p
										Element:strong
											This page was printed on 20 Mar 2017
											. For the latest version, please go to
										Element:a
											https://help.shopify.com/api/reference/article/
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:footer
										Element:a
											About
										Element:a
											Careers
										Element:a
											Blog
										Element:a
											Press and Media
										Element:a
											Enterprise
										Element:a
											Sitemap
										Element:h3
											Online store
										Element:a
											Sell online
										Element:a
											Features
										Element:a
											Examples
										Element:a
											Website editor
										Element:a
											Online retail
										Element:a
											Ecommerce website
										Element:a
											Themes
										Element:a
											Shopping cart
										Element:a
											Ecommerce hosting
										Element:a
											Mobile commerce
										Element:a
											Ecommerce software
										Element:h3
											Point of sale
										Element:a
											Point of sale
										Element:a
											Features
										Element:a
											Hardware
										Element:a
											POS software
										Element:h3
											Support
										Element:a
											24/7 support
										Element:a
											Shopify Help Center
										Element:a
											Forums
										Element:a
											API documentation
										Element:a
											Free tools
										Element:h3
											Shopify
										Element:a
											Contact
										Element:a
											Partner program
										Element:a
											Affiliate program
										Element:a
											App developers
										Element:a
											Investors
										Element:a
											Accessibility
										Element:a
										Element:svg
										Element:svg
										Element:a
										Element:svg
										Element:svg
										Element:a
										Element:svg
										Element:svg
										Element:a
										Element:svg
										Element:svg
										Element:a
										Element:svg
										Element:svg
										Element:a
										Element:svg
										Element:svg
										Element:a
										Element:svg
										Element:svg
										Element:a
										Element:svg
										Element:svg
										Element:a
											Terms of Service
										Element:a
											Privacy Policy
