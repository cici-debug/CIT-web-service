Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					Sendible API
			Node:
			(type) c
			(layer)1
				Element:label
					Version
					This version is in
			Node:
			(type) c
			(layer)1
				Element:strong
					Beta
					, there may be issues we're still working out.
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:aside
										Element:h3
											Documentation
										Element:h3
											API
									Node:
									(type) c
									(layer)3
										Element:article
			Node:
			(type) h1
			(layer)1
				Element:h1
					Monitoring
			Node:
			(type) c
			(layer)1
				Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:hgroup
							Element:h2
								Get Monitoring Keywords
							Element:a
							Element:i
								Open in API Explorer
						Node:
						(type) c
						(layer)2
							Element:span
								GET
						Node:
						(type) c
						(layer)2
							Element:code
								/v1/mention-terms.json
						Node:
						(type) c
						(layer)2
							Element:p
								Retrieves a list of keywords that have been created by the authenticated user.
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
														Example Request
												Node:
												(type) c
												(layer)4
													Element:span
														Format:
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
													Element:a
														curl
													Element:li
													Element:a
														Ruby
													Element:li
													Element:a
														Node
													Element:li
													Element:a
														Python
													Element:li
													Element:a
														PHP
													Element:li
													Element:a
														Go
												Node:
												(type) c
												(layer)4
													Element:pre
														curl --request GET \ --url https://api.sendible.com/api/v1/mention-terms.json \ --header 'accept: application/json' \ --header 'authorization: Basic QWxhZGRpbjpPcGVuU2VzYW1l'
												Node:
												(type) c
												(layer)4
													Element:pre
														require 'uri' require 'net/http' url = URI("https://api.sendible.com/api/v1/mention-terms.json") http = Net::HTTP.new(url.host, url.port) http.use_ssl = true http.verify_mode = OpenSSL::SSL::VERIFY_NONE request = Net::HTTP::Get.new(url) request["accept"] = 'application/json' request["authorization"] = 'Basic QWxhZGRpbjpPcGVuU2VzYW1l' response = http.request(request) puts response.read_body
												Node:
												(type) c
												(layer)4
													Element:pre
														var http = require("https"); var options = { "method": "GET", "hostname": "api.sendible.com", "port": null, "path": "/api/v1/mention-terms.json", "headers": { "accept": "application/json", "authorization": "Basic QWxhZGRpbjpPcGVuU2VzYW1l" } }; var req = http.request(options, function (res) { var chunks = []; res.on("data", function (chunk) { chunks.push(chunk); }); res.on("end", function () { var body = Buffer.concat(chunks); console.log(body.toString()); }); }); req.end();
												Node:
												(type) c
												(layer)4
													Element:pre
														import http.client conn = http.client.HTTPSConnection("api.sendible.com") headers = { 'accept': "application/json", 'authorization': "Basic QWxhZGRpbjpPcGVuU2VzYW1l" } conn.request("GET", "/api/v1/mention-terms.json", headers=headers) res = conn.getresponse() data = res.read() print(data.decode("utf-8"))
												Node:
												(type) c
												(layer)4
													Element:pre
														<?php $curl = curl_init(); curl_setopt_array($curl, array( CURLOPT_URL => "https://api.sendible.com/api/v1/mention-terms.json", CURLOPT_RETURNTRANSFER => true, CURLOPT_ENCODING => "", CURLOPT_MAXREDIRS => 10, CURLOPT_TIMEOUT => 30, CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1, CURLOPT_CUSTOMREQUEST => "GET", CURLOPT_HTTPHEADER => array( "accept: application/json", "authorization: Basic QWxhZGRpbjpPcGVuU2VzYW1l" ), )); $response = curl_exec($curl); $err = curl_error($curl); curl_close($curl); if ($err) { echo "cURL Error #:" . $err; } else { echo $response; }
												Node:
												(type) c
												(layer)4
													Element:pre
														package main import ( "fmt" "net/http" "io/ioutil" ) func main() { url := "https://api.sendible.com/api/v1/mention-terms.json" req, _ := http.NewRequest("GET", url, nil) req.Header.Add("accept", "application/json") req.Header.Add("authorization", "Basic QWxhZGRpbjpPcGVuU2VzYW1l") res, _ := http.DefaultClient.Do(req) defer res.Body.Close() body, _ := ioutil.ReadAll(res.Body) fmt.Println(res) fmt.Println(string(body)) }
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
														Responses
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tbody
													Element:tr
													Element:td
													Element:code
														default
													Element:td
													Element:strong
														Default
													Element:p
														Unknown
													Element:td
													Element:em
														(Empty Response)
													Element:td
												Node:
												(type) c
												(layer)4
													Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:hgroup
							Element:h2
								Get Mentions
							Element:a
							Element:i
								Open in API Explorer
						Node:
						(type) c
						(layer)2
							Element:span
								GET
						Node:
						(type) c
						(layer)2
							Element:code
								/v1/mentions.json
						Node:
						(type) c
						(layer)2
							Element:p
								Retrieves a list of mentions for a given keyword.
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
														Example Request
												Node:
												(type) c
												(layer)4
													Element:span
														Format:
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
													Element:a
														curl
													Element:li
													Element:a
														Ruby
													Element:li
													Element:a
														Node
													Element:li
													Element:a
														Python
													Element:li
													Element:a
														PHP
													Element:li
													Element:a
														Go
												Node:
												(type) c
												(layer)4
													Element:pre
														curl --request GET \ --url 'https://api.sendible.com/api/v1/mentions.json?application_id=4b634537cc392cca820b61dab08&mention_id=10000&type=blogs&sentiment=1&filter=news&page=1&per_page=10' \ --header 'accept: application/json' \ --header 'authorization: Basic QWxhZGRpbjpPcGVuU2VzYW1l'
												Node:
												(type) c
												(layer)4
													Element:pre
														require 'uri' require 'net/http' url = URI("https://api.sendible.com/api/v1/mentions.json?application_id=4b634537cc392cca820b61dab08&mention_id=10000&type=blogs&sentiment=1&filter=news&page=1&per_page=10") http = Net::HTTP.new(url.host, url.port) http.use_ssl = true http.verify_mode = OpenSSL::SSL::VERIFY_NONE request = Net::HTTP::Get.new(url) request["accept"] = 'application/json' request["authorization"] = 'Basic QWxhZGRpbjpPcGVuU2VzYW1l' response = http.request(request) puts response.read_body
												Node:
												(type) c
												(layer)4
													Element:pre
														var http = require("https"); var options = { "method": "GET", "hostname": "api.sendible.com", "port": null, "path": "/api/v1/mentions.json?application_id=4b634537cc392cca820b61dab08&mention_id=10000&type=blogs&sentiment=1&filter=news&page=1&per_page=10", "headers": { "accept": "application/json", "authorization": "Basic QWxhZGRpbjpPcGVuU2VzYW1l" } }; var req = http.request(options, function (res) { var chunks = []; res.on("data", function (chunk) { chunks.push(chunk); }); res.on("end", function () { var body = Buffer.concat(chunks); console.log(body.toString()); }); }); req.end();
												Node:
												(type) c
												(layer)4
													Element:pre
														import http.client conn = http.client.HTTPSConnection("api.sendible.com") headers = { 'accept': "application/json", 'authorization': "Basic QWxhZGRpbjpPcGVuU2VzYW1l" } conn.request("GET", "/api/v1/mentions.json?application_id=4b634537cc392cca820b61dab08&mention_id=10000&type=blogs&sentiment=1&filter=news&page=1&per_page=10", headers=headers) res = conn.getresponse() data = res.read() print(data.decode("utf-8"))
												Node:
												(type) c
												(layer)4
													Element:pre
														<?php $curl = curl_init(); curl_setopt_array($curl, array( CURLOPT_URL => "https://api.sendible.com/api/v1/mentions.json?application_id=4b634537cc392cca820b61dab08&mention_id=10000&type=blogs&sentiment=1&filter=news&page=1&per_page=10", CURLOPT_RETURNTRANSFER => true, CURLOPT_ENCODING => "", CURLOPT_MAXREDIRS => 10, CURLOPT_TIMEOUT => 30, CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1, CURLOPT_CUSTOMREQUEST => "GET", CURLOPT_HTTPHEADER => array( "accept: application/json", "authorization: Basic QWxhZGRpbjpPcGVuU2VzYW1l" ), )); $response = curl_exec($curl); $err = curl_error($curl); curl_close($curl); if ($err) { echo "cURL Error #:" . $err; } else { echo $response; }
												Node:
												(type) c
												(layer)4
													Element:pre
														package main import ( "fmt" "net/http" "io/ioutil" ) func main() { url := "https://api.sendible.com/api/v1/mentions.json?application_id=4b634537cc392cca820b61dab08&mention_id=10000&type=blogs&sentiment=1&filter=news&page=1&per_page=10" req, _ := http.NewRequest("GET", url, nil) req.Header.Add("accept", "application/json") req.Header.Add("authorization", "Basic QWxhZGRpbjpPcGVuU2VzYW1l") res, _ := http.DefaultClient.Do(req) defer res.Body.Close() body, _ := ioutil.ReadAll(res.Body) fmt.Println(res) fmt.Println(string(body)) }
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
														Query Parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:thead
													Element:th
														Name
													Element:th
														Type
													Element:th
														Required
													Element:th
														Description
													Element:th
														Example
													Element:tbody
													Element:tr
													Element:td
													Element:code
														application_id
													Element:td
														String
													Element:td
														Required
													Element:td
													Element:p
														Your developer application id. This was provided to you via email.
													Element:td
													Element:code
														4b634537cc392cca820b61dab08
													Element:tr
													Element:td
													Element:code
														mention_id
													Element:td
														Number
													Element:td
														Optional
													Element:td
													Element:p
														The ID of the keyword, retrieved using the [Get Monitoring Keywords] . If no mention_id is provided, mentions for all keywords will be returned.
													Element:td
													Element:code
														10000
													Element:tr
													Element:td
													Element:code
														type
													Element:td
														String
													Element:td
														Optional
													Element:td
													Element:p
														The type of mentions to retrieve. Possible values are blogs,
													Element:em
														microblogs
														,
													Element:em
														bookmarks
														,
													Element:em
														comments
														,
													Element:em
														events
														,
													Element:em
														images
														,
													Element:em
														news
														,
													Element:em
														videos
														,
													Element:em
														audio
														,
													Element:em
														questions
														,
													Element:em
														networks
													Element:td
													Element:code
														blogs
													Element:tr
													Element:td
													Element:code
														sentiment
													Element:td
														Number
													Element:td
														Optional
													Element:td
													Element:p
														The type of sentiment to filter results by: neutral (0), negative (-1) or positive (1). Possible values are
													Element:em
														0
														,
													Element:em
														1
														or
													Element:em
														-1
														.
													Element:td
													Element:code
														1
													Element:tr
													Element:td
													Element:code
														filter
													Element:td
														String
													Element:td
														Optional
													Element:td
													Element:p
														A search term to filter results by.
													Element:td
													Element:code
														news
													Element:tr
													Element:td
													Element:code
														page
													Element:td
														Number
													Element:td
														Optional
													Element:td
													Element:p
														The page number to retrieve.
													Element:td
													Element:code
														1
													Element:tr
													Element:td
													Element:code
														per_page
													Element:td
														Number
													Element:td
														Optional
													Element:td
													Element:p
														The number of results to return per page.
													Element:td
													Element:code
														10
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
														Responses
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tbody
													Element:tr
													Element:td
													Element:code
														default
													Element:td
													Element:strong
														Default
													Element:p
														Unknown
													Element:td
													Element:em
														(Empty Response)
													Element:td
												Node:
												(type) c
												(layer)4
													Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:hgroup
							Element:h2
								Search Social Media
							Element:a
							Element:i
								Open in API Explorer
						Node:
						(type) c
						(layer)2
							Element:span
								GET
						Node:
						(type) c
						(layer)2
							Element:code
								/v2/social_search.json
						Node:
						(type) c
						(layer)2
							Element:p
								Retrieve search results from social media.
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
														Example Request
												Node:
												(type) c
												(layer)4
													Element:span
														Format:
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
													Element:a
														curl
													Element:li
													Element:a
														Ruby
													Element:li
													Element:a
														Node
													Element:li
													Element:a
														Python
													Element:li
													Element:a
														PHP
													Element:li
													Element:a
														Go
												Node:
												(type) c
												(layer)4
													Element:pre
														curl --request GET \ --url 'https://api.sendible.com/api/v2/social_search.json?application_id=4b634537cc392cca820b61dab08&type=facebook&query=news' \ --header 'accept: application/json' \ --header 'authorization: Basic QWxhZGRpbjpPcGVuU2VzYW1l'
												Node:
												(type) c
												(layer)4
													Element:pre
														require 'uri' require 'net/http' url = URI("https://api.sendible.com/api/v2/social_search.json?application_id=4b634537cc392cca820b61dab08&type=facebook&query=news") http = Net::HTTP.new(url.host, url.port) http.use_ssl = true http.verify_mode = OpenSSL::SSL::VERIFY_NONE request = Net::HTTP::Get.new(url) request["accept"] = 'application/json' request["authorization"] = 'Basic QWxhZGRpbjpPcGVuU2VzYW1l' response = http.request(request) puts response.read_body
												Node:
												(type) c
												(layer)4
													Element:pre
														var http = require("https"); var options = { "method": "GET", "hostname": "api.sendible.com", "port": null, "path": "/api/v2/social_search.json?application_id=4b634537cc392cca820b61dab08&type=facebook&query=news", "headers": { "accept": "application/json", "authorization": "Basic QWxhZGRpbjpPcGVuU2VzYW1l" } }; var req = http.request(options, function (res) { var chunks = []; res.on("data", function (chunk) { chunks.push(chunk); }); res.on("end", function () { var body = Buffer.concat(chunks); console.log(body.toString()); }); }); req.end();
												Node:
												(type) c
												(layer)4
													Element:pre
														import http.client conn = http.client.HTTPSConnection("api.sendible.com") headers = { 'accept': "application/json", 'authorization': "Basic QWxhZGRpbjpPcGVuU2VzYW1l" } conn.request("GET", "/api/v2/social_search.json?application_id=4b634537cc392cca820b61dab08&type=facebook&query=news", headers=headers) res = conn.getresponse() data = res.read() print(data.decode("utf-8"))
												Node:
												(type) c
												(layer)4
													Element:pre
														<?php $curl = curl_init(); curl_setopt_array($curl, array( CURLOPT_URL => "https://api.sendible.com/api/v2/social_search.json?application_id=4b634537cc392cca820b61dab08&type=facebook&query=news", CURLOPT_RETURNTRANSFER => true, CURLOPT_ENCODING => "", CURLOPT_MAXREDIRS => 10, CURLOPT_TIMEOUT => 30, CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1, CURLOPT_CUSTOMREQUEST => "GET", CURLOPT_HTTPHEADER => array( "accept: application/json", "authorization: Basic QWxhZGRpbjpPcGVuU2VzYW1l" ), )); $response = curl_exec($curl); $err = curl_error($curl); curl_close($curl); if ($err) { echo "cURL Error #:" . $err; } else { echo $response; }
												Node:
												(type) c
												(layer)4
													Element:pre
														package main import ( "fmt" "net/http" "io/ioutil" ) func main() { url := "https://api.sendible.com/api/v2/social_search.json?application_id=4b634537cc392cca820b61dab08&type=facebook&query=news" req, _ := http.NewRequest("GET", url, nil) req.Header.Add("accept", "application/json") req.Header.Add("authorization", "Basic QWxhZGRpbjpPcGVuU2VzYW1l") res, _ := http.DefaultClient.Do(req) defer res.Body.Close() body, _ := ioutil.ReadAll(res.Body) fmt.Println(res) fmt.Println(string(body)) }
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
														Query Parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:thead
													Element:th
														Name
													Element:th
														Type
													Element:th
														Required
													Element:th
														Description
													Element:th
														Example
													Element:tbody
													Element:tr
													Element:td
													Element:code
														application_id
													Element:td
														String
													Element:td
														Required
													Element:td
													Element:p
														Your developer application id. This was provided to you via email.
													Element:td
													Element:code
														4b634537cc392cca820b61dab08
													Element:tr
													Element:td
													Element:code
														type
													Element:td
														String
													Element:td
														Required
													Element:td
													Element:p
														The social network to search. Must be entered in lowercase. Possible values are
													Element:em
														facebook
														,
													Element:em
														twitter
														.
													Element:td
													Element:code
														facebook
													Element:tr
													Element:td
													Element:code
														query
													Element:td
														String
													Element:td
														Required
													Element:td
													Element:p
														The search query to search for.
													Element:td
													Element:code
														news
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
														Responses
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tbody
													Element:tr
													Element:td
													Element:code
														default
													Element:td
													Element:strong
														Default
													Element:p
														Unknown
													Element:td
													Element:em
														(Empty Response)
													Element:td
												Node:
												(type) c
												(layer)4
													Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:hgroup
							Element:h2
								Update Mentions
							Element:a
							Element:i
								Open in API Explorer
						Node:
						(type) c
						(layer)2
							Element:span
								PUT
						Node:
						(type) c
						(layer)2
							Element:code
								/v1/mentions.json
						Node:
						(type) c
						(layer)2
							Element:p
								Update sentiment and relevance for one or more mentions.
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
														Example Request
												Node:
												(type) c
												(layer)4
													Element:span
														Format:
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
													Element:a
														curl
													Element:li
													Element:a
														Ruby
													Element:li
													Element:a
														Node
													Element:li
													Element:a
														Python
													Element:li
													Element:a
														PHP
													Element:li
													Element:a
														Go
												Node:
												(type) c
												(layer)4
													Element:pre
														curl --request PUT \ --url 'https://api.sendible.com/api/v1/mentions.json?application_id=4b634537cc392cca820b61dab08&ids=123&sentiment=1&relevancy=0' \ --header 'accept: application/json' \ --header 'authorization: Basic QWxhZGRpbjpPcGVuU2VzYW1l' \ --header 'content-type: multipart/form-data; boundary=---011000010111000001101001'
												Node:
												(type) c
												(layer)4
													Element:pre
														require 'uri' require 'net/http' url = URI("https://api.sendible.com/api/v1/mentions.json?application_id=4b634537cc392cca820b61dab08&ids=123&sentiment=1&relevancy=0") http = Net::HTTP.new(url.host, url.port) http.use_ssl = true http.verify_mode = OpenSSL::SSL::VERIFY_NONE request = Net::HTTP::Put.new(url) request["accept"] = 'application/json' request["authorization"] = 'Basic QWxhZGRpbjpPcGVuU2VzYW1l' request["content-type"] = 'multipart/form-data; boundary=---011000010111000001101001' response = http.request(request) puts response.read_body
												Node:
												(type) c
												(layer)4
													Element:pre
														var http = require("https"); var options = { "method": "PUT", "hostname": "api.sendible.com", "port": null, "path": "/api/v1/mentions.json?application_id=4b634537cc392cca820b61dab08&ids=123&sentiment=1&relevancy=0", "headers": { "accept": "application/json", "authorization": "Basic QWxhZGRpbjpPcGVuU2VzYW1l", "content-type": "multipart/form-data; boundary=---011000010111000001101001" } }; var req = http.request(options, function (res) { var chunks = []; res.on("data", function (chunk) { chunks.push(chunk); }); res.on("end", function () { var body = Buffer.concat(chunks); console.log(body.toString()); }); }); req.end();
												Node:
												(type) c
												(layer)4
													Element:pre
														import http.client conn = http.client.HTTPSConnection("api.sendible.com") payload = "" headers = { 'accept': "application/json", 'authorization': "Basic QWxhZGRpbjpPcGVuU2VzYW1l", 'content-type': "multipart/form-data; boundary=---011000010111000001101001" } conn.request("PUT", "/api/v1/mentions.json?application_id=4b634537cc392cca820b61dab08&ids=123&sentiment=1&relevancy=0", payload, headers) res = conn.getresponse() data = res.read() print(data.decode("utf-8"))
												Node:
												(type) c
												(layer)4
													Element:pre
														<?php $curl = curl_init(); curl_setopt_array($curl, array( CURLOPT_URL => "https://api.sendible.com/api/v1/mentions.json?application_id=4b634537cc392cca820b61dab08&ids=123&sentiment=1&relevancy=0", CURLOPT_RETURNTRANSFER => true, CURLOPT_ENCODING => "", CURLOPT_MAXREDIRS => 10, CURLOPT_TIMEOUT => 30, CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1, CURLOPT_CUSTOMREQUEST => "PUT", CURLOPT_POSTFIELDS => "", CURLOPT_HTTPHEADER => array( "accept: application/json", "authorization: Basic QWxhZGRpbjpPcGVuU2VzYW1l", "content-type: multipart/form-data; boundary=---011000010111000001101001" ), )); $response = curl_exec($curl); $err = curl_error($curl); curl_close($curl); if ($err) { echo "cURL Error #:" . $err; } else { echo $response; }
												Node:
												(type) c
												(layer)4
													Element:pre
														package main import ( "fmt" "net/http" "io/ioutil" ) func main() { url := "https://api.sendible.com/api/v1/mentions.json?application_id=4b634537cc392cca820b61dab08&ids=123&sentiment=1&relevancy=0" req, _ := http.NewRequest("PUT", url, nil) req.Header.Add("accept", "application/json") req.Header.Add("authorization", "Basic QWxhZGRpbjpPcGVuU2VzYW1l") req.Header.Add("content-type", "multipart/form-data; boundary=---011000010111000001101001") res, _ := http.DefaultClient.Do(req) defer res.Body.Close() body, _ := ioutil.ReadAll(res.Body) fmt.Println(res) fmt.Println(string(body)) }
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
														Query Parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:thead
													Element:th
														Name
													Element:th
														Type
													Element:th
														Required
													Element:th
														Description
													Element:th
														Example
													Element:tbody
													Element:tr
													Element:td
													Element:code
														application_id
													Element:td
														String
													Element:td
														Required
													Element:td
													Element:p
														Your developer application id. This was provided to you via email.
													Element:td
													Element:code
														4b634537cc392cca820b61dab08
													Element:tr
													Element:td
													Element:code
														ids
													Element:td
														String
													Element:td
														Required
													Element:td
													Element:p
														A comma separated list of mention IDs to update.
													Element:td
													Element:code
														123
													Element:tr
													Element:td
													Element:code
														sentiment
													Element:td
														Number
													Element:td
														Required
													Element:td
													Element:p
														The sentiment type to set.
													Element:em
														1
														for positive,
													Element:em
														0
														for neutral,
													Element:em
														-1
														for negative
													Element:td
													Element:code
														1
													Element:tr
													Element:td
													Element:code
														relevancy
													Element:td
														Number
													Element:td
														Required
													Element:td
													Element:p
														Set whether or not a mention is relevant.
													Element:em
														1
														for relevant,
													Element:em
														0
														for irrelevant
													Element:td
													Element:code
														0
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
														Responses
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:table
							Element:tbody
							Element:tr
							Element:td
							Element:code
								default
							Element:td
							Element:strong
								Default
							Element:p
								Unknown
							Element:td
							Element:em
								(Empty Response)
							Element:td
							Element:footer
							Element:h2
								Need Some Help?
							Element:ul
							Element:li
							Element:i
							Element:a
								@sendible
							Element:a
							Element:span
								Powered by
							Element:svg
							Element:span
								Gelato.io
