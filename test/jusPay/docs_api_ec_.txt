Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					Introduction
			Node:
			(type) c
			(layer)1
												Node:
												(type) c
												(layer)4
													Element:blockquote
													Element:h4
														API libraries
													Element:p
														Libraries for Express Checkout APIs are available in Python, Ruby and PHP.
													Element:h4
														API Endpoint
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														https://api.juspay.in
												Node:
												(type) c
												(layer)4
													Element:p
														Express Checkout APIs are built around basic HTTP communication and closely follows the standards of REST. While the URL themselves are not specific to resources, the URL path is intuitive to reflect the action performed by the API.
			Node:
			(type) c
			(layer)1
												Node:
												(type) c
												(layer)4
													Element:blockquote
													Element:h4
														Content Request Headers
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														curl https://api.juspay.in/orders -H
													Element:span
														"Accept: application/json"
													Element:span
														\
														-H
													Element:span
														"ContentType: x-url-form-encoded "
			Node:
			(type) c
			(layer)1
												Node:
												(type) c
												(layer)4
													Element:h4
														Server SDK sources
												Node:
												(type) c
												(layer)4
													Element:table
													Element:thead
													Element:tr
													Element:th
														Language
													Element:th
														Project location
													Element:tbody
													Element:tr
													Element:td
														Python
													Element:td
													Element:a
														https://bitbucket.org/juspay/expresscheckout-python-client
													Element:tr
													Element:td
														Ruby
													Element:td
													Element:a
														https://bitbucket.org/juspay/expresscheckout-ruby-client
													Element:tr
													Element:td
														PHP
													Element:td
													Element:a
														https://bitbucket.org/juspay/expresscheckout-php-sdk
													Element:tr
													Element:td
														Java
													Element:td
													Element:a
														https://bitbucket.org/juspay/expresscheckout-java-sdk
												Node:
												(type) c
												(layer)4
						Node:
						(type) c
						(layer)2
							Element:h2
								Authentication
						Node:
						(type) c
						(layer)2
							Element:blockquote
							Element:h4
								AUTHENTICATE YOUR REQUEST
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								curl https://api.juspay.in/orders
							Element:span
								\
								-u 31080C4D8F6A45FB8979266E327503C8:
							Element:span
								#curl** tool uses the option `-u` to accept the username and password. The username & password are separted by `:`. Notice that the password is empty in the above request.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
								import
							Element:span
								juspay
							Element:span
								as
							Element:span
								Juspay
							Element:span
								Juspay
							Element:span
								.
							Element:span
								api_key
							Element:span
								=
							Element:span
								'ACE565EAB40F4AA78853F03F496F7DB5'
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
								require
							Element:span
								'expresscheckout'
							Element:span
								$api_key
							Element:span
								=
							Element:span
								'ACE565EAB40F4AA78853F03F496F7DB5'
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
								JuspayEnvironment
							Element:span
								::
							Element:span
								init
							Element:span
								()
							Element:span
								->
							Element:span
								withApiKey
							Element:span
								(
							Element:span
								"ACE565EAB40F4AA78853F03F496F7DB5"
							Element:span
								)
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
								JuspayEnvironment
							Element:span
								.
							Element:span
								withApiKey
							Element:span
								(
							Element:span
								"ACE565EAB40F4AA78853F03F496F7DB5"
							Element:span
								);
						Node:
						(type) c
						(layer)2
							Element:blockquote
							Element:p
								Ensure that you replace this API Key with the key that pertains to your account.
						Node:
						(type) c
						(layer)2
							Element:p
								All the APIs except
							Element:code
								POST /txns
								use Basic HTTP authentication scheme to authenticate the requests and identify your account. API key can be obtained from
							Element:a
								https://merchant.juspay.in/settings/api-key
								. Provide your API key as the basic auth username value. You do not need to provide a password.
						Node:
						(type) c
						(layer)2
							Element:p
								Transaction
							Element:code
								POST /txns
								API is exempted from authentication so that the card numbers (sensitive data) can be posted from the browsers or application clients (Android or iOS) directly to JusPay’s servers.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:strong
								Note:
								API Key is like password to your account. You must never send this information to browser or application clients. Also, do not publish your API Key in publicly accessible areas such as Git repositories, Android/iOS clients, support forums, etc..
												Node:
												(type) c
												(layer)4
						Node:
						(type) c
						(layer)2
							Element:h2
								Version
						Node:
						(type) c
						(layer)2
							Element:blockquote
							Element:h4
								Include version header
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								curl https://api.juspay.in/orders
							Element:span
								\
								-H
							Element:span
								"version: 2016-07-19"
							Element:span
								\
								-u
							Element:span
								"
							Element:span
								$api_key
							Element:span
								:"
						Node:
						(type) c
						(layer)2
							Element:p
								Proper version headers ensure that we do not send any information that your client is not capable of handling. Our latest API version is
							Element:strong
								2016-10-27
								. Changelog for the revisions are given below.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:strong
								2016-10-27
						Node:
						(type) c
						(layer)2
							Element:p
								For this version, webhooks are posted whenever the payment is initiated for an order.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:strong
								2016-07-19
						Node:
						(type) c
						(layer)2
							Element:p
								For order payment failures, webhooks will be sent to your server. Remember to configure this version in the
							Element:a
								Webhook settings page
								.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:strong
								2015-08-18
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								/order/status
								will respond with all the failed refunds too. Prior to this version, failed refunds were expressly excluded from the listing as clients did not have the capability to handle refunds in failure state.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:strong
								2015-01-09
						Node:
						(type) c
						(layer)2
							Element:p
								Refunds in pending state will have status
							Element:code
								PENDING
								. Prior to this, refund status
							Element:code
								PENDING
								was sent as
							Element:code
								SUCCESS
								.
						Node:
						(type) c
						(layer)2
							Element:p
								Note: JusPay introduced
							Element:code
								PENDING
								status for refunds as large number of PayU refunds were initially queued and success of these refunds were not guaranteed.
												Node:
												(type) c
												(layer)4
						Node:
						(type) c
						(layer)2
							Element:h2
								Support
						Node:
						(type) c
						(layer)2
							Element:p
								Should you have any questions, feel free to reach us at
							Element:a
								support@juspay.in.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:strong
								Note
								: Remember to send your
							Element:code
								merchant_id
								in the subject line of the email so that we can help you better.
			Node:
			(type) h1
			(layer)1
				Element:h1
					Customer
			Node:
			(type) c
			(layer)1
				Element:p
					Represents a customer who is using your service.
			Node:
			(type) c
			(layer)1
				Element:h2
					Create customer
			Node:
			(type) c
			(layer)1
				Element:p
					Create a new customer object. You may invoke this method whenever someone registers in your website or App. JusPay will respond with an ID that you can persist in your Database. Pass this ID at the time of order creation to ensure proper linking of orders/payments belonging to a customer.
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Definition
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					POST https://api.juspay.in/customers
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					Customer
				Element:span
					.
				Element:span
					create
				Element:span
					(
				Element:span
					Map
				Element:span
					params
				Element:span
					);
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example Request
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -X POST https://api.juspay.in/customers
				Element:span
					\
					-u api_key:
				Element:span
					\
					-d
				Element:span
					"object_reference_id=customer@gmail.com"
				Element:span
					\
					-d
				Element:span
					"mobile_number=9988776655"
				Element:span
					\
					-d
				Element:span
					"email_address=customer@gmail.com"
				Element:span
					\
					-d
				Element:span
					"first_name=John"
				Element:span
					\
					-d
				Element:span
					"last_name=Smith"
				Element:span
					\
					-d
				Element:span
					"mobile_country_code=91"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					Juspay
				Element:span
					.
				Element:span
					Customers
				Element:span
					.
				Element:span
					add
				Element:span
					(
				Element:span
					object_reference_id
				Element:span
					=
				Element:span
					'customer@gmail.com'
				Element:span
					,
				Element:span
					mobile_number
				Element:span
					=
				Element:span
					'9988776655'
				Element:span
					,
				Element:span
					email_address
				Element:span
					=
				Element:span
					'customer@gmail.com'
				Element:span
					,
				Element:span
					first_name
				Element:span
					=
				Element:span
					'John'
				Element:span
					,
				Element:span
					last_name
				Element:span
					=
				Element:span
					'Smith'
				Element:span
					,
				Element:span
					mobile_country_code
				Element:span
					=
				Element:span
					'91'
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					Customers
				Element:span
					.
				Element:span
					create
				Element:span
					(
				Element:span
					:object_reference_id
				Element:span
					=>
				Element:span
					'customer@gmail.com'
				Element:span
					,
				Element:span
					:mobile_number
				Element:span
					=>
				Element:span
					'9988776655'
				Element:span
					,
				Element:span
					:email_address
				Element:span
					=>
				Element:span
					'customer@gmail.com'
				Element:span
					,
				Element:span
					:first_name
				Element:span
					=>
				Element:span
					'John'
				Element:span
					,
				Element:span
					:last_name
				Element:span
					=>
				Element:span
					'Smith'
				Element:span
					,
				Element:span
					:mobile_country_code
				Element:span
					=>
				Element:span
					'91'
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					$params
				Element:span
					=
				Element:span
					array
				Element:span
					();
				Element:span
					$params
				Element:span
					[
				Element:span
					'object_reference_id'
				Element:span
					]
				Element:span
					=
				Element:span
					"customer@gmail.com"
				Element:span
					;
				Element:span
					$params
				Element:span
					[
				Element:span
					'mobile_number'
				Element:span
					]
				Element:span
					=
				Element:span
					"9988776655"
				Element:span
					;
				Element:span
					$params
				Element:span
					[
				Element:span
					'email_address'
				Element:span
					]
				Element:span
					=
				Element:span
					"customer@gmail.com"
				Element:span
					;
				Element:span
					$params
				Element:span
					[
				Element:span
					'first_name'
				Element:span
					]
				Element:span
					=
				Element:span
					"John"
				Element:span
					;
				Element:span
					$params
				Element:span
					[
				Element:span
					'last_name'
				Element:span
					]
				Element:span
					=
				Element:span
					"Smith"
				Element:span
					;
				Element:span
					$params
				Element:span
					[
				Element:span
					'mobile_country_code'
				Element:span
					]
				Element:span
					=
				Element:span
					"91"
				Element:span
					;
				Element:span
					$customer
				Element:span
					=
				Element:span
					Customer
				Element:span
					::
				Element:span
					create
				Element:span
					(
				Element:span
					$params
				Element:span
					);
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					Map
				Element:span
					<
				Element:span
					String
				Element:span
					,
				Element:span
					Object
				Element:span
					>
				Element:span
					params
				Element:span
					=
				Element:span
					new
				Element:span
					LinkedHashMap
				Element:span
					();
				Element:span
					params
				Element:span
					.
				Element:span
					put
				Element:span
					(
				Element:span
					"object_reference_id"
				Element:span
					,
				Element:span
					"customer@gmail.com"
				Element:span
					);
				Element:span
					params
				Element:span
					.
				Element:span
					put
				Element:span
					(
				Element:span
					"mobile_number"
				Element:span
					,
				Element:span
					"9988776655"
				Element:span
					);
				Element:span
					params
				Element:span
					.
				Element:span
					put
				Element:span
					(
				Element:span
					"email_address"
				Element:span
					,
				Element:span
					"customer@gmail.com"
				Element:span
					);
				Element:span
					params
				Element:span
					.
				Element:span
					put
				Element:span
					(
				Element:span
					"first_name"
				Element:span
					,
				Element:span
					"John"
				Element:span
					);
				Element:span
					params
				Element:span
					.
				Element:span
					put
				Element:span
					(
				Element:span
					"last_name"
				Element:span
					,
				Element:span
					"Smith"
				Element:span
					);
				Element:span
					params
				Element:span
					.
				Element:span
					put
				Element:span
					(
				Element:span
					"mobile_country_code"
				Element:span
					,
				Element:span
					"91"
				Element:span
					);
				Element:span
					Customer
				Element:span
					customer
				Element:span
					=
				Element:span
					Customer
				Element:span
					.
				Element:span
					create
				Element:span
					(
				Element:span
					params
				Element:span
					);
			Node:
			(type) c
			(layer)1
				Element:h4
					Request Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Field
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					object_reference_id
				Element:br
				Element:code
					Required
				Element:td
					String
				Element:td
					Unique ID that you use to represent the customer in your database. This must be atleast 8 characters and must be unique. The typical value for this field would be email address or mobile number or auto increment ID that you have in your DB.
				Element:tr
				Element:td
					mobile_number
				Element:br
				Element:code
					Required
				Element:td
					String
				Element:td
					Customer’s mobile number.
				Element:tr
				Element:td
					email_address
				Element:br
				Element:code
					Required
				Element:td
					String
				Element:td
					Customer’s e-mail address.
				Element:tr
				Element:td
					first_name
				Element:br
				Element:td
					String
				Element:td
					Customer’s first name.
				Element:tr
				Element:td
					last_name
				Element:br
				Element:td
					String
				Element:td
					Customer’s last name.
				Element:tr
				Element:td
					mobile_country_code
				Element:br
				Element:td
					String
				Element:td
					Mobile country code. No need to prefix “+”.
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example Response
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
					"id"
					:
				Element:span
					"cst_om2l6ctlptxwxuzj"
					,
				Element:span
					"object"
					:
				Element:span
					"customer"
					,
				Element:span
					"object_reference_id"
					:
				Element:span
					"customer@gmail.com"
					,
				Element:span
					"mobile_number"
					:
				Element:span
					"9988776655"
					,
				Element:span
					"date_created"
					:
				Element:span
					"2016-08-02T08:07:52+0000"
					,
				Element:span
					"last_updated"
					:
				Element:span
					"2016-08-02T08:07:52+0000"
					,
				Element:span
					"email_address"
					:
				Element:span
					"customer@gmail.com"
					,
				Element:span
					"first_name"
					:
				Element:span
					"John"
					,
				Element:span
					"last_name"
					:
				Element:span
					"Smith"
					,
				Element:span
					"mobile_country_code"
					:
				Element:span
					"91"
					,
				Element:span
					}
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					<
				Element:span
					Customer
				Element:span
					>
				Element:span
					{
				Element:span
					'id'
				Element:span
					:
				Element:span
					u'cst_om2l6ctlptxwxuzj'
				Element:span
					,
				Element:span
					'object'
				Element:span
					:
				Element:span
					u'customer'
				Element:span
					,
				Element:span
					'object_reference_id'
				Element:span
					:
				Element:span
					u'customer@gmail.com'
				Element:span
					,
				Element:span
					'mobile_number'
				Element:span
					:
				Element:span
					u'9988776655'
				Element:span
					,
				Element:span
					'date_created'
				Element:span
					:
				Element:span
					u'2016-08-02T08:07:52+0000'
				Element:span
					,
				Element:span
					'last_updated'
				Element:span
					:
				Element:span
					u'2016-08-02T08:07:52+0000'
				Element:span
					,
				Element:span
					'email_address'
				Element:span
					:
				Element:span
					u'customer@gmail.com'
				Element:span
					,
				Element:span
					'first_name'
				Element:span
					:
				Element:span
					u'John'
				Element:span
					,
				Element:span
					'last_name'
				Element:span
					:
				Element:span
					u'Smith'
				Element:span
					,
				Element:span
					'mobile_country_code'
				Element:span
					:
				Element:span
					u'91'
				Element:span
					}
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					<
				Element:span
					Customers
				Element:span
					::
				Element:span
					Customer
				Element:span
					:
				Element:span
					0x00000a
				Element:span
					>
				Element:span
					{
				Element:span
					@id
				Element:span
					=
				Element:span
					"cst_om2l6ctlptxwxuzj"
				Element:span
					,
				Element:span
					@object
				Element:span
					=
				Element:span
					"customer"
				Element:span
					,
				Element:span
					@object_reference_id
				Element:span
					=
				Element:span
					"customer@gmail.com"
				Element:span
					,
				Element:span
					@mobile_number
				Element:span
					=
				Element:span
					"9988776655"
				Element:span
					,
				Element:span
					@date_created
				Element:span
					=
				Element:span
					"2016-08-02T08:07:52+0000"
				Element:span
					,
				Element:span
					@last_updated
				Element:span
					=
				Element:span
					"2016-08-02T08:07:52+0000"
				Element:span
					,
				Element:span
					@email_address
				Element:span
					=
				Element:span
					"customer@gmail.com"
				Element:span
					,
				Element:span
					@first_name
				Element:span
					=
				Element:span
					"John"
				Element:span
					,
				Element:span
					@last_name
				Element:span
					=
				Element:span
					"Smith"
				Element:span
					,
				Element:span
					@mobile_country_code
				Element:span
					=
				Element:span
					"91"
				Element:span
					}
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					Customer
				Element:span
					Object
				Element:span
					{
				Element:span
					[
				Element:span
					id
				Element:span
					]
				Element:span
					=>
				Element:span
					cst_om2l6ctlptxwxuzj
				Element:span
					[
				Element:span
					object
				Element:span
					]
				Element:span
					=>
				Element:span
					customer
				Element:span
					[
				Element:span
					object_reference_id
				Element:span
					]
				Element:span
					=>
				Element:span
					customer
				Element:span
					@
				Element:span
					gmail
				Element:span
					.
				Element:span
					com
				Element:span
					[
				Element:span
					mobile_number
				Element:span
					]
				Element:span
					=>
				Element:span
					9988776655
				Element:span
					[
				Element:span
					date_created
				Element:span
					]
				Element:span
					=>
				Element:span
					2016
				Element:span
					-
				Element:span
					08
				Element:span
					-
				Element:span
					02
				Element:span
					T08
				Element:span
					:
				Element:span
					07
				Element:span
					:
				Element:span
					52
				Element:span
					+
				Element:span
					0000
				Element:span
					[
				Element:span
					last_updated
				Element:span
					]
				Element:span
					=>
				Element:span
					2016
				Element:span
					-
				Element:span
					08
				Element:span
					-
				Element:span
					02
				Element:span
					T08
				Element:span
					:
				Element:span
					07
				Element:span
					:
				Element:span
					52
				Element:span
					+
				Element:span
					0000
				Element:span
					[
				Element:span
					email_address
				Element:span
					]
				Element:span
					=>
				Element:span
					customer
				Element:span
					@
				Element:span
					gmail
				Element:span
					.
				Element:span
					com
				Element:span
					[
				Element:span
					first_name
				Element:span
					]
				Element:span
					=>
				Element:span
					John
				Element:span
					[
				Element:span
					last_name
				Element:span
					]
				Element:span
					=>
				Element:span
					Smith
				Element:span
					[
				Element:span
					mobile_country_code
				Element:span
					]
				Element:span
					=>
				Element:span
					91
				Element:span
					}
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					@object
				Element:span
					in
				Element:span
					.
				Element:span
					juspay
				Element:span
					.
				Element:span
					model
				Element:span
					.
				Element:span
					Customer
				Element:span
					JSON:
				Element:span
					{
				Element:span
					"id"
				Element:span
					:
				Element:span
					"cst_om2l6ctlptxwxuzj"
				Element:span
					,
				Element:span
					"object"
				Element:span
					:
				Element:span
					"customer"
				Element:span
					,
				Element:span
					"object_reference_id"
				Element:span
					:
				Element:span
					"customer@gmail.com"
				Element:span
					,
				Element:span
					"mobile_number"
				Element:span
					:
				Element:span
					"9988776655"
				Element:span
					,
				Element:span
					"date_created"
				Element:span
					:
				Element:span
					"2016-08-02T08:07:52+0000"
				Element:span
					,
				Element:span
					"last_updated"
				Element:span
					:
				Element:span
					"2016-08-02T08:07:52+0000"
				Element:span
					,
				Element:span
					"email_address"
				Element:span
					:
				Element:span
					"customer@gmail.com"
				Element:span
					,
				Element:span
					"first_name"
				Element:span
					:
				Element:span
					"John"
				Element:span
					,
				Element:span
					"last_name"
				Element:span
					:
				Element:span
					"Smith"
				Element:span
					,
				Element:span
					"mobile_country_code"
				Element:span
					:
				Element:span
					"91"
				Element:span
					,
				Element:span
					}
			Node:
			(type) c
			(layer)1
				Element:h4
					Response Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Field
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
					String
				Element:td
					Customer ID generated by JUSPAY.
				Element:tr
				Element:td
					object
				Element:td
					String
				Element:td
					Object type of entity, in this case it’ll be
				Element:code
					customer
					.
				Element:tr
				Element:td
					object_reference_id
				Element:td
					String
				Element:td
					Customer ID defined by you.
				Element:tr
				Element:td
					mobile_number
				Element:td
					String
				Element:td
					Customer’s mobile number.
				Element:tr
				Element:td
					date_created
				Element:td
					String
				Element:td
					Date creation of customer entity.
				Element:tr
				Element:td
					last_udpated
				Element:td
					String
				Element:td
					Last updated date of customer entity.
				Element:tr
				Element:td
					email_address
				Element:td
					String
				Element:td
					Customer’s e-mail address.
				Element:tr
				Element:td
					first_name
				Element:td
					String
				Element:td
					Customer’s first name.
				Element:tr
				Element:td
					last_name
				Element:td
					String
				Element:td
					Customer’s last name.
				Element:tr
				Element:td
					mobile_country_code
				Element:td
					String
				Element:td
					Mobile country code.
			Node:
			(type) c
			(layer)1
				Element:h2
					Get customer
			Node:
			(type) c
			(layer)1
				Element:p
					This will return customer entity for given identifier.
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Definition
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					GET https://api.juspay.in/customers/:customer_id
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					Customer
				Element:span
					.
				Element:span
					get
				Element:span
					(
				Element:span
					String
				Element:span
					customerId
				Element:span
					);
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example Request
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -X GET https://api.juspay.in/customers/customer@gmail.com
				Element:span
					\
					-u api_key:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					Juspay
				Element:span
					.
				Element:span
					Customers
				Element:span
					.
				Element:span
					get
				Element:span
					(
				Element:span
					customer_id
				Element:span
					=
				Element:span
					'customer@gmail.com'
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					Customers
				Element:span
					.
				Element:span
					get
				Element:span
					(
				Element:span
					:customer_id
				Element:span
					=>
				Element:span
					'customer@gmail.com'
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					$customer_id
				Element:span
					=
				Element:span
					"customer@gmail.com"
				Element:span
					$customer
				Element:span
					=
				Element:span
					Customer
				Element:span
					::
				Element:span
					get
				Element:span
					(
				Element:span
					$customer_id
				Element:span
					);
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					String
				Element:span
					customerId
				Element:span
					=
				Element:span
					"customer@gmail.com"
				Element:span
					;
				Element:span
					Customer
				Element:span
					customer
				Element:span
					=
				Element:span
					Customer
				Element:span
					.
				Element:span
					get
				Element:span
					(
				Element:span
					customerId
				Element:span
					);
			Node:
			(type) c
			(layer)1
				Element:h4
					URL Embedded Parameter
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Field
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					customer_id
				Element:br
				Element:code
					Required
				Element:td
					String
				Element:td
					Use the ID that is generated by JUSPAY during customer creation. You may also send the value that you sent in
				Element:code
					object_reference_id
					at the time of creating the customer.
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example Response
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
					"id"
					:
				Element:span
					"cst_om2l6ctlptxwxuzj"
					,
				Element:span
					"object"
					:
				Element:span
					"customer"
					,
				Element:span
					"object_reference_id"
					:
				Element:span
					"customer@gmail.com"
					,
				Element:span
					"mobile_number"
					:
				Element:span
					"9988776655"
					,
				Element:span
					"date_created"
					:
				Element:span
					"2016-08-02T08:07:52+0000"
					,
				Element:span
					"last_updated"
					:
				Element:span
					"2016-08-02T08:07:52+0000"
					,
				Element:span
					"email_address"
					:
				Element:span
					"customer@gmail.com"
					,
				Element:span
					"first_name"
					:
				Element:span
					"firstname"
					,
				Element:span
					"last_name"
					:
				Element:span
					"lastname"
					,
				Element:span
					"mobile_country_code"
					:
				Element:span
					"91"
					,
				Element:span
					}
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					<
				Element:span
					Customer
				Element:span
					>
				Element:span
					{
				Element:span
					'id'
				Element:span
					:
				Element:span
					u'cst_om2l6ctlptxwxuzj'
				Element:span
					,
				Element:span
					'object'
				Element:span
					:
				Element:span
					u'customer'
				Element:span
					,
				Element:span
					'object_reference_id'
				Element:span
					:
				Element:span
					u'customer@gmail.com'
				Element:span
					,
				Element:span
					'mobile_number'
				Element:span
					:
				Element:span
					u'9988776655'
				Element:span
					'date_created'
				Element:span
					:
				Element:span
					u'2016-08-02T08:07:52+0000'
				Element:span
					,
				Element:span
					'last_updated'
				Element:span
					:
				Element:span
					u'2016-08-02T08:07:52+0000'
				Element:span
					,
				Element:span
					'email_address'
				Element:span
					:
				Element:span
					u'customer@gmail.com'
				Element:span
					,
				Element:span
					'first_name'
				Element:span
					:
				Element:span
					u'firstname'
				Element:span
					'last_name'
				Element:span
					:
				Element:span
					u'lastname'
				Element:span
					,
				Element:span
					'mobile_country_code'
				Element:span
					:
				Element:span
					u'91'
				Element:span
					}
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					<
				Element:span
					Customers
				Element:span
					::
				Element:span
					Customer
				Element:span
					:
				Element:span
					0x00000a
				Element:span
					>
				Element:span
					{
				Element:span
					@id
				Element:span
					=
				Element:span
					"cst_om2l6ctlptxwxuzj"
				Element:span
					,
				Element:span
					@object
				Element:span
					=
				Element:span
					"customer"
				Element:span
					,
				Element:span
					@object_reference_id
				Element:span
					=
				Element:span
					"customer@gmail.com"
				Element:span
					,
				Element:span
					@mobile_number
				Element:span
					=
				Element:span
					"9988776655"
				Element:span
					,
				Element:span
					@date_created
				Element:span
					=
				Element:span
					"2016-08-02T08:07:52+0000"
				Element:span
					,
				Element:span
					@last_updated
				Element:span
					=
				Element:span
					"2016-08-02T08:07:52+0000"
				Element:span
					,
				Element:span
					@email_address
				Element:span
					=
				Element:span
					"customer@gmail.com"
				Element:span
					,
				Element:span
					@first_name
				Element:span
					=
				Element:span
					"John"
				Element:span
					,
				Element:span
					@last_name
				Element:span
					=
				Element:span
					"Smith"
				Element:span
					,
				Element:span
					@mobile_country_code
				Element:span
					=
				Element:span
					"91"
				Element:span
					}
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					Customer
				Element:span
					Object
				Element:span
					{
				Element:span
					[
				Element:span
					id
				Element:span
					]
				Element:span
					=>
				Element:span
					cst_om2l6ctlptxwxuzj
				Element:span
					[
				Element:span
					object
				Element:span
					]
				Element:span
					=>
				Element:span
					customer
				Element:span
					[
				Element:span
					object_reference_id
				Element:span
					]
				Element:span
					=>
				Element:span
					customer
				Element:span
					@
				Element:span
					gmail
				Element:span
					.
				Element:span
					com
				Element:span
					[
				Element:span
					mobile_number
				Element:span
					]
				Element:span
					=>
				Element:span
					9988776655
				Element:span
					[
				Element:span
					date_created
				Element:span
					]
				Element:span
					=>
				Element:span
					2016
				Element:span
					-
				Element:span
					08
				Element:span
					-
				Element:span
					02
				Element:span
					T08
				Element:span
					:
				Element:span
					07
				Element:span
					:
				Element:span
					52
				Element:span
					+
				Element:span
					0000
				Element:span
					[
				Element:span
					last_updated
				Element:span
					]
				Element:span
					=>
				Element:span
					2016
				Element:span
					-
				Element:span
					08
				Element:span
					-
				Element:span
					02
				Element:span
					T08
				Element:span
					:
				Element:span
					07
				Element:span
					:
				Element:span
					52
				Element:span
					+
				Element:span
					0000
				Element:span
					[
				Element:span
					email_address
				Element:span
					]
				Element:span
					=>
				Element:span
					customer
				Element:span
					@
				Element:span
					gmail
				Element:span
					.
				Element:span
					com
				Element:span
					[
				Element:span
					first_name
				Element:span
					]
				Element:span
					=>
				Element:span
					John
				Element:span
					[
				Element:span
					last_name
				Element:span
					]
				Element:span
					=>
				Element:span
					Smith
				Element:span
					[
				Element:span
					mobile_country_code
				Element:span
					]
				Element:span
					=>
				Element:span
					91
				Element:span
					}
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					@object
				Element:span
					in
				Element:span
					.
				Element:span
					juspay
				Element:span
					.
				Element:span
					model
				Element:span
					.
				Element:span
					Customer
				Element:span
					JSON:
				Element:span
					{
				Element:span
					"id"
				Element:span
					:
				Element:span
					"cst_om2l6ctlptxwxuzj"
				Element:span
					,
				Element:span
					"object"
				Element:span
					:
				Element:span
					"customer"
				Element:span
					,
				Element:span
					"object_reference_id"
				Element:span
					:
				Element:span
					"customer@gmail.com"
				Element:span
					,
				Element:span
					"mobile_number"
				Element:span
					:
				Element:span
					"9988776655"
				Element:span
					,
				Element:span
					"date_created"
				Element:span
					:
				Element:span
					"2016-08-02T08:07:52+0000"
				Element:span
					,
				Element:span
					"last_updated"
				Element:span
					:
				Element:span
					"2016-08-02T08:07:52+0000"
				Element:span
					,
				Element:span
					"email_address"
				Element:span
					:
				Element:span
					"customer@gmail.com"
				Element:span
					,
				Element:span
					"first_name"
				Element:span
					:
				Element:span
					"John"
				Element:span
					,
				Element:span
					"last_name"
				Element:span
					:
				Element:span
					"Smith"
				Element:span
					,
				Element:span
					"mobile_country_code"
				Element:span
					:
				Element:span
					"91"
				Element:span
					,
				Element:span
					}
			Node:
			(type) c
			(layer)1
				Element:h4
					Response Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Field
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
					String
				Element:td
					Customer ID generated by juspay.
				Element:tr
				Element:td
					object
				Element:td
					String
				Element:td
					Object type of entity, in this case it’ll be
				Element:code
					customer
					.
				Element:tr
				Element:td
					object_reference_id
				Element:td
					String
				Element:td
					Customer ID defined by you.
				Element:tr
				Element:td
					mobile_number
				Element:td
					String
				Element:td
					Customer mobile number.
				Element:tr
				Element:td
					date_created
				Element:td
					String
				Element:td
					Date creation of customer entity.
				Element:tr
				Element:td
					last_updated
				Element:td
					String
				Element:td
					Last updated date of customer entity.
				Element:tr
				Element:td
					email_address
				Element:td
					String
				Element:td
					Customer e-mail address.
				Element:tr
				Element:td
					first_name
				Element:td
					String
				Element:td
					Customer first name.
				Element:tr
				Element:td
					last_name
				Element:td
					String
				Element:td
					Customer fast name.
				Element:tr
				Element:td
					mobile_country_code
				Element:td
					String
				Element:td
					Customer mobile country code.
			Node:
			(type) c
			(layer)1
				Element:h2
					Update customer
			Node:
			(type) c
			(layer)1
				Element:p
					Update customer entity.
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Definition
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					POST https://api.juspay.in/customers/:customer_id
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					Customer
				Element:span
					.
				Element:span
					update
				Element:span
					(
				Element:span
					String
				Element:span
					customerId
				Element:span
					,
				Element:span
					Map
				Element:span
					params
				Element:span
					);
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example Request
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -X POST https://api.juspay.in/customers/cst_om2l6ctlptxwxuzj
				Element:span
					\
					-u api_key:
				Element:span
					\
					-d
				Element:span
					"mobile_number=9988776644"
				Element:span
					\
					-d
				Element:span
					"customer_email=customer@gmail.com"
				Element:span
					\
					-d
				Element:span
					"first_name=Jon"
				Element:span
					\
					-d
				Element:span
					"last_name=Snow"
				Element:span
					\
					-d
				Element:span
					"mobile_country_code=91"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					Juspay
				Element:span
					.
				Element:span
					Customers
				Element:span
					.
				Element:span
					update
				Element:span
					(
				Element:span
					customer_id
				Element:span
					=
				Element:span
					'cst_om2l6ctlptxwxuzj'
				Element:span
					,
				Element:span
					mobile_number
				Element:span
					=
				Element:span
					'9988776644'
				Element:span
					,
				Element:span
					customer_email
				Element:span
					=
				Element:span
					'customer@gmail.com'
				Element:span
					,
				Element:span
					first_name
				Element:span
					=
				Element:span
					'Jon'
				Element:span
					,
				Element:span
					last_name
				Element:span
					=
				Element:span
					'Snow'
				Element:span
					,
				Element:span
					mobile_country_code
				Element:span
					=
				Element:span
					'91'
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					Customers
				Element:span
					.
				Element:span
					update
				Element:span
					(
				Element:span
					:customer_id
				Element:span
					=>
				Element:span
					'cst_om2l6ctlptxwxuzj'
				Element:span
					,
				Element:span
					:mobile_number
				Element:span
					=>
				Element:span
					'9988776644'
				Element:span
					,
				Element:span
					:customer_email
				Element:span
					=>
				Element:span
					'customer@gmail.com'
				Element:span
					,
				Element:span
					:first_name
				Element:span
					=>
				Element:span
					'Jon'
				Element:span
					,
				Element:span
					:last_name
				Element:span
					=>
				Element:span
					'Snow'
				Element:span
					,
				Element:span
					:mobile_country_code
				Element:span
					=>
				Element:span
					'91'
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					$params
				Element:span
					=
				Element:span
					array
				Element:span
					();
				Element:span
					$customer_id
				Element:span
					=
				Element:span
					"cst_om2l6ctlptxwxuzj"
				Element:span
					$params
				Element:span
					[
				Element:span
					'mobile_number'
				Element:span
					]
				Element:span
					=
				Element:span
					"9988776644"
				Element:span
					;
				Element:span
					$params
				Element:span
					[
				Element:span
					'email_address'
				Element:span
					]
				Element:span
					=
				Element:span
					"customer@gmail.com"
				Element:span
					;
				Element:span
					$params
				Element:span
					[
				Element:span
					'first_name'
				Element:span
					]
				Element:span
					=
				Element:span
					"Jon"
				Element:span
					;
				Element:span
					$params
				Element:span
					[
				Element:span
					'last_name'
				Element:span
					]
				Element:span
					=
				Element:span
					"Snow"
				Element:span
					;
				Element:span
					$params
				Element:span
					[
				Element:span
					'mobile_country_code'
				Element:span
					]
				Element:span
					=
				Element:span
					"91"
				Element:span
					;
				Element:span
					$customer
				Element:span
					=
				Element:span
					Customer
				Element:span
					::
				Element:span
					update
				Element:span
					(
				Element:span
					$customer_id
				Element:span
					,
				Element:span
					$params
				Element:span
					);
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					String
				Element:span
					customerId
				Element:span
					=
				Element:span
					"cst_om2l6ctlptxwxuzj"
				Element:span
					Map
				Element:span
					<
				Element:span
					String
				Element:span
					,
				Element:span
					Object
				Element:span
					>
				Element:span
					params
				Element:span
					=
				Element:span
					new
				Element:span
					LinkedHashMap
				Element:span
					();
				Element:span
					params
				Element:span
					.
				Element:span
					put
				Element:span
					(
				Element:span
					"first_name"
				Element:span
					,
				Element:span
					"Jon"
				Element:span
					);
				Element:span
					params
				Element:span
					.
				Element:span
					put
				Element:span
					(
				Element:span
					"last_name"
				Element:span
					,
				Element:span
					"Snow"
				Element:span
					);
				Element:span
					params
				Element:span
					.
				Element:span
					put
				Element:span
					(
				Element:span
					"mobile_country_code"
				Element:span
					,
				Element:span
					"91"
				Element:span
					);
				Element:span
					params
				Element:span
					.
				Element:span
					put
				Element:span
					(
				Element:span
					"mobile_number"
				Element:span
					,
				Element:span
					"9988776644"
				Element:span
					);
				Element:span
					params
				Element:span
					.
				Element:span
					put
				Element:span
					(
				Element:span
					"email_address"
				Element:span
					,
				Element:span
					"customer@gmail.com"
				Element:span
					);
				Element:span
					Customer
				Element:span
					customer
				Element:span
					=
				Element:span
					Customer
				Element:span
					.
				Element:span
					update
				Element:span
					(
				Element:span
					customerId
				Element:span
					,
				Element:span
					params
				Element:span
					);
			Node:
			(type) c
			(layer)1
				Element:h4
					URL Embedded Parameter
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Field
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					customer_id
				Element:br
				Element:code
					Required
				Element:td
					String
				Element:td
					Use the ID that is generated by JUSPAY during customer creation. You may also send the value that you sent in
				Element:code
					object_reference_id
					at the time of creating the customer.
			Node:
			(type) c
			(layer)1
				Element:h4
					Request Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Field
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					mobile_number
				Element:br
				Element:td
					String
				Element:td
					Customer mobile number.
				Element:tr
				Element:td
					email_address
				Element:br
				Element:td
					String
				Element:td
					Customer e-mail address.
				Element:tr
				Element:td
					first_name
				Element:br
				Element:td
					String
				Element:td
					Customer first name.
				Element:tr
				Element:td
					last_name
				Element:br
				Element:td
					String
				Element:td
					Customer last name.
				Element:tr
				Element:td
					mobile_country_code
				Element:br
				Element:td
					String
				Element:td
					Customer mobile country code.
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example Response
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
					"id"
					:
				Element:span
					"cst_om2l6ctlptxwxuzj"
					,
				Element:span
					"object"
					:
				Element:span
					"customer"
					,
				Element:span
					"object_reference_id"
					:
				Element:span
					"customer@gmail.com"
					,
				Element:span
					"mobile_number"
					:
				Element:span
					"9988776655"
					,
				Element:span
					"date_created"
					:
				Element:span
					"2016-08-02T08:07:52+0000"
					,
				Element:span
					"last_updated"
					:
				Element:span
					"2016-09-02T07:05:10+0000"
					,
				Element:span
					"email_address"
					:
				Element:span
					"customer@gmail.com"
					,
				Element:span
					"first_name"
					:
				Element:span
					"Jon"
					,
				Element:span
					"last_name"
					:
				Element:span
					"Snow"
					,
				Element:span
					"mobile_country_code"
					:
				Element:span
					"91"
				Element:span
					}
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					<
				Element:span
					Customer
				Element:span
					>
				Element:span
					{
				Element:span
					'id'
				Element:span
					:
				Element:span
					u'cst_om2l6ctlptxwxuzj'
				Element:span
					,
				Element:span
					'object'
				Element:span
					:
				Element:span
					u'customer'
				Element:span
					,
				Element:span
					'object_reference_id'
				Element:span
					:
				Element:span
					u'customer@gmail.com'
				Element:span
					,
				Element:span
					'mobile_number'
				Element:span
					:
				Element:span
					u'9988776644'
				Element:span
					'date_created'
				Element:span
					:
				Element:span
					u'2016-08-02T08:07:52+0000'
				Element:span
					,
				Element:span
					'last_updated'
				Element:span
					:
				Element:span
					u'2016-09-02T07:05:10+0000'
				Element:span
					,
				Element:span
					'email_address'
				Element:span
					:
				Element:span
					u'customer@gmail.com'
				Element:span
					,
				Element:span
					'first_name'
				Element:span
					:
				Element:span
					u'Jon'
				Element:span
					'last_name'
				Element:span
					:
				Element:span
					u'Snow'
				Element:span
					,
				Element:span
					'mobile_country_code'
				Element:span
					:
				Element:span
					u'91'
				Element:span
					}
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					<
				Element:span
					Customers
				Element:span
					::
				Element:span
					Customer
				Element:span
					:
				Element:span
					0x00000a
				Element:span
					>
				Element:span
					{
				Element:span
					@id
				Element:span
					=
				Element:span
					"cst_om2l6ctlptxwxuzj"
				Element:span
					,
				Element:span
					@object
				Element:span
					=
				Element:span
					"customer"
				Element:span
					,
				Element:span
					@object_reference_id
				Element:span
					=
				Element:span
					"customer@gmail.com"
				Element:span
					,
				Element:span
					@mobile_number
				Element:span
					=
				Element:span
					"9988776644"
				Element:span
					,
				Element:span
					@date_created
				Element:span
					=
				Element:span
					"2016-08-02T08:07:52+0000"
				Element:span
					,
				Element:span
					@last_updated
				Element:span
					=
				Element:span
					"2016-09-02T07:05:10+0000"
				Element:span
					,
				Element:span
					@email_address
				Element:span
					=
				Element:span
					"customer@gmail.com"
				Element:span
					,
				Element:span
					@first_name
				Element:span
					=
				Element:span
					"Jon"
				Element:span
					,
				Element:span
					@last_name
				Element:span
					=
				Element:span
					"Snow"
				Element:span
					,
				Element:span
					@mobile_country_code
				Element:span
					=
				Element:span
					"91"
				Element:span
					}
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					Customer
				Element:span
					Object
				Element:span
					{
				Element:span
					[
				Element:span
					id
				Element:span
					]
				Element:span
					=>
				Element:span
					cst_om2l6ctlptxwxuzj
				Element:span
					[
				Element:span
					object
				Element:span
					]
				Element:span
					=>
				Element:span
					customer
				Element:span
					[
				Element:span
					object_reference_id
				Element:span
					]
				Element:span
					=>
				Element:span
					customer
				Element:span
					@
				Element:span
					gmail
				Element:span
					.
				Element:span
					com
				Element:span
					[
				Element:span
					mobile_number
				Element:span
					]
				Element:span
					=>
				Element:span
					9988776655
				Element:span
					[
				Element:span
					date_created
				Element:span
					]
				Element:span
					=>
				Element:span
					2016
				Element:span
					-
				Element:span
					08
				Element:span
					-
				Element:span
					02
				Element:span
					T08
				Element:span
					:
				Element:span
					07
				Element:span
					:
				Element:span
					52
				Element:span
					+
				Element:span
					0000
				Element:span
					[
				Element:span
					last_updated
				Element:span
					]
				Element:span
					=>
				Element:span
					2016
				Element:span
					-
				Element:span
					08
				Element:span
					-
				Element:span
					02
				Element:span
					T08
				Element:span
					:
				Element:span
					07
				Element:span
					:
				Element:span
					52
				Element:span
					+
				Element:span
					0000
				Element:span
					[
				Element:span
					email_address
				Element:span
					]
				Element:span
					=>
				Element:span
					customer
				Element:span
					@
				Element:span
					gmail
				Element:span
					.
				Element:span
					com
				Element:span
					[
				Element:span
					first_name
				Element:span
					]
				Element:span
					=>
				Element:span
					Jon
				Element:span
					[
				Element:span
					last_name
				Element:span
					]
				Element:span
					=>
				Element:span
					Snow
				Element:span
					[
				Element:span
					mobile_country_code
				Element:span
					]
				Element:span
					=>
				Element:span
					91
				Element:span
					}
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					@object
				Element:span
					in
				Element:span
					.
				Element:span
					juspay
				Element:span
					.
				Element:span
					model
				Element:span
					.
				Element:span
					Customer
				Element:span
					JSON:
				Element:span
					{
				Element:span
					"id"
				Element:span
					:
				Element:span
					"cst_om2l6ctlptxwxuzj"
				Element:span
					,
				Element:span
					"object"
				Element:span
					:
				Element:span
					"customer"
				Element:span
					,
				Element:span
					"object_reference_id"
				Element:span
					:
				Element:span
					"customer@gmail.com"
				Element:span
					,
				Element:span
					"mobile_number"
				Element:span
					:
				Element:span
					"9988776644"
				Element:span
					,
				Element:span
					"date_created"
				Element:span
					:
				Element:span
					"2016-08-02T08:07:52+0000"
				Element:span
					,
				Element:span
					"last_updated"
				Element:span
					:
				Element:span
					"2016-08-02T08:07:52+0000"
				Element:span
					,
				Element:span
					"email_address"
				Element:span
					:
				Element:span
					"customer@gmail.com"
				Element:span
					,
				Element:span
					"first_name"
				Element:span
					:
				Element:span
					"Jon"
				Element:span
					,
				Element:span
					"last_name"
				Element:span
					:
				Element:span
					"Snow"
				Element:span
					,
				Element:span
					"mobile_country_code"
				Element:span
					:
				Element:span
					"91"
				Element:span
					}
			Node:
			(type) c
			(layer)1
				Element:h4
					Response Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Field
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
					String
				Element:td
					Customer ID generated by JUSPAY.
				Element:tr
				Element:td
					object
				Element:td
					String
				Element:td
					Object type of entity, in this case it’ll be
				Element:code
					customer
					.
				Element:tr
				Element:td
					object_reference_id
				Element:td
					String
				Element:td
					Customer id defined by merchant.
				Element:tr
				Element:td
					mobile_number
				Element:td
					String
				Element:td
					Customer mobile number.
				Element:tr
				Element:td
					date_created
				Element:td
					String
				Element:td
					Date creation of customer entity.
				Element:tr
				Element:td
					last_updated
				Element:td
					String
				Element:td
					Last updated date of customer entity.
				Element:tr
				Element:td
					email_address
				Element:td
					String
				Element:td
					Customer e-mail address.
				Element:tr
				Element:td
					first_name
				Element:td
					String
				Element:td
					Customer first name.
				Element:tr
				Element:td
					last_name
				Element:td
					String
				Element:td
					Customer last name.
				Element:tr
				Element:td
					mobile_country_code
				Element:td
					String
				Element:td
					Customer mobile country code.
			Node:
			(type) h1
			(layer)1
				Element:h1
					Order
			Node:
			(type) c
			(layer)1
				Element:h2
					Create Order
			Node:
			(type) c
			(layer)1
				Element:p
					Create an order that is a representation of your shopping cart. Order contains important information like amount, customer details, shipping address, billing address etc. Only after an
				Element:code
					order
					is created, payment can be started.
			Node:
			(type) c
			(layer)1
				Element:p
					Note: You can also send custom data in the following fields: udf1, udf2, …, udf10.
			Node:
			(type) c
			(layer)1
				Element:h4
					Payment Links
			Node:
			(type) c
			(layer)1
				Element:p
					Order create response now has payment links for web, mobile & iFrame. These links can directly be emailed or messaged to your customers. If you wish to use your own branding, then you can embed the iFrame link into your page. Note that, these links are not valid perpetually. As soon as your order expires (this can be changed via
				Element:a
					our dashboard
					), the link will cease to work.
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Definition
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					POST https://api.juspay.in/orders
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					Juspay
				Element:span
					.
				Element:span
					Orders
				Element:span
					.
				Element:span
					create
				Element:span
					()
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					Orders
				Element:span
					.
				Element:span
					create
				Element:span
					()
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					Order
				Element:span
					::
				Element:span
					create
				Element:span
					();
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					Order
				Element:span
					.
				Element:span
					create
				Element:span
					(
				Element:span
					Map
				Element:span
					params
				Element:span
					);
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example Request
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -X POST https://api.juspay.in/orders
				Element:span
					\
					-u api_key:
				Element:span
					\
					-d
				Element:span
					"order_id=1418394476"
				Element:span
					\
					-d
				Element:span
					"amount=100.00"
				Element:span
					\
					-d
				Element:span
					"currency=INR"
				Element:span
					\
					-d
				Element:span
					"customer_id=guest_user_101"
				Element:span
					\
					-d
				Element:span
					"customer_email=customer@gmail.com"
				Element:span
					\
					-d
				Element:span
					"customer_phone=9988665522"
				Element:span
					\
					-d
				Element:span
					"product_id=prod-141833"
				Element:span
					\
					-d
				Element:span
					"return_url=http://shop.merchant.com/payments/handleResponse"
				Element:span
					\
					-d
				Element:span
					"description=Sample description"
				Element:span
					\
					-d
				Element:span
					"billing_address_first_name=Juspay"
				Element:span
					\
					-d
				Element:span
					"billing_address_last_name=Technologies"
				Element:span
					\
					-d
				Element:span
					"billing_address_line1=Girija Building"
				Element:span
					\
					-d
				Element:span
					"billing_address_line2=Ganapathi Temple Road"
				Element:span
					\
					-d
				Element:span
					"billing_address_line3=8th Block, Koramangala"
				Element:span
					\
					-d
				Element:span
					"billing_address_city=Bengaluru"
				Element:span
					\
					-d
				Element:span
					"billing_address_state=Karnataka"
				Element:span
					\
					-d
				Element:span
					"billing_address_country=India"
				Element:span
					\
					-d
				Element:span
					"billing_address_postal_code=560095"
				Element:span
					\
					-d
				Element:span
					"billing_address_phone=9988775566"
				Element:span
					\
					-d
				Element:span
					"billing_address_country_code_iso=IND"
				Element:span
					\
					-d
				Element:span
					"shipping_address_first_name=Juspay"
				Element:span
					\
					-d
				Element:span
					"shipping_address_last_name=Technologies"
				Element:span
					\
					-d
				Element:span
					"shipping_address_line1=Girija Building"
				Element:span
					\
					-d
				Element:span
					"shipping_address_line2=Ganapathi Temple Road"
				Element:span
					\
					-d
				Element:span
					"shipping_address_line3=8th Block, Koramangala"
				Element:span
					\
					-d
				Element:span
					"shipping_address_city=Bengaluru"
				Element:span
					\
					-d
				Element:span
					"shipping_address_state=Karnataka"
				Element:span
					\
					-d
				Element:span
					"shipping_address_postal_code=560095"
				Element:span
					\
					-d
				Element:span
					"shipping_address_phone=9962881912"
				Element:span
					\
					-d
				Element:span
					"shipping_address_country_code_iso=IND"
				Element:span
					\
					-d
				Element:span
					"shipping_address_country=India"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					Juspay
				Element:span
					.
				Element:span
					Orders
				Element:span
					.
				Element:span
					create
				Element:span
					(
				Element:span
					order_id
				Element:span
					=
				Element:span
					'1418394476'
				Element:span
					,
				Element:span
					amount
				Element:span
					=
				Element:span
					100.00
				Element:span
					,
				Element:span
					currency
				Element:span
					=
				Element:span
					'INR'
				Element:span
					,
				Element:span
					customer_id
				Element:span
					=
				Element:span
					'guest_user_101'
				Element:span
					,
				Element:span
					customer_email
				Element:span
					=
				Element:span
					'customer@gmail.com'
				Element:span
					,
				Element:span
					customer_phone
				Element:span
					=
				Element:span
					'9988665522'
				Element:span
					,
				Element:span
					product_id
				Element:span
					=
				Element:span
					'prod-141833'
				Element:span
					,
				Element:span
					return_url
				Element:span
					=
				Element:span
					'http://shop.merchant.com/payments/handleResponse'
				Element:span
					,
				Element:span
					description
				Element:span
					=
				Element:span
					'Sample description'
				Element:span
					,
				Element:span
					billing_address_first_name
				Element:span
					=
				Element:span
					'Juspay'
				Element:span
					,
				Element:span
					billing_address_last_name
				Element:span
					=
				Element:span
					'Technologies'
				Element:span
					,
				Element:span
					billing_address_line1
				Element:span
					=
				Element:span
					'Girija Building'
				Element:span
					,
				Element:span
					billing_address_line2
				Element:span
					=
				Element:span
					'Ganapathi Temple Road'
				Element:span
					,
				Element:span
					billing_address_line3
				Element:span
					=
				Element:span
					'8th Block, Koramangala'
				Element:span
					,
				Element:span
					billing_address_city
				Element:span
					=
				Element:span
					'Bengaluru'
				Element:span
					,
				Element:span
					billing_address_state
				Element:span
					=
				Element:span
					'Karnataka'
				Element:span
					,
				Element:span
					billing_address_country
				Element:span
					=
				Element:span
					'India'
				Element:span
					,
				Element:span
					billing_address_postal_code
				Element:span
					=
				Element:span
					'560095'
				Element:span
					,
				Element:span
					billing_address_phone
				Element:span
					=
				Element:span
					'9988775566'
				Element:span
					,
				Element:span
					billing_address_country_code_iso
				Element:span
					=
				Element:span
					'IND'
				Element:span
					,
				Element:span
					shipping_address_first_name
				Element:span
					=
				Element:span
					'Juspay'
				Element:span
					,
				Element:span
					shipping_address_last_name
				Element:span
					=
				Element:span
					'Technologies'
				Element:span
					,
				Element:span
					shipping_address_line1
				Element:span
					=
				Element:span
					'Girija Building'
				Element:span
					,
				Element:span
					shipping_address_line2
				Element:span
					=
				Element:span
					'Ganapathi Temple Road'
				Element:span
					,
				Element:span
					shipping_address_line3
				Element:span
					=
				Element:span
					'8th Block, Koramangala'
				Element:span
					,
				Element:span
					shipping_address_city
				Element:span
					=
				Element:span
					'Bengaluru'
				Element:span
					,
				Element:span
					shipping_address_state
				Element:span
					=
				Element:span
					'Karnataka'
				Element:span
					,
				Element:span
					shipping_address_postal_code
				Element:span
					=
				Element:span
					'560095'
				Element:span
					,
				Element:span
					shipping_address_phone
				Element:span
					=
				Element:span
					'9962881912'
				Element:span
					,
				Element:span
					shipping_address_country_code_iso
				Element:span
					=
				Element:span
					'IND'
				Element:span
					,
				Element:span
					shipping_address_country
				Element:span
					=
				Element:span
					'India'
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					Orders
				Element:span
					.
				Element:span
					create
				Element:span
					(
				Element:span
					:order_id
				Element:span
					=>
				Element:span
					'1418394476'
				Element:span
					,
				Element:span
					:amount
				Element:span
					=>
				Element:span
					100
				Element:span
					.
				Element:span
					00
				Element:span
					,
				Element:span
					:currency
				Element:span
					=>
				Element:span
					'INR'
				Element:span
					,
				Element:span
					:customer_id
				Element:span
					=>
				Element:span
					'guest_user_101'
				Element:span
					,
				Element:span
					:customer_email
				Element:span
					=>
				Element:span
					'customer@gmail.com'
				Element:span
					,
				Element:span
					:customer_phone
				Element:span
					=>
				Element:span
					'9988665522'
				Element:span
					,
				Element:span
					:product_id
				Element:span
					=>
				Element:span
					'prod-141833'
				Element:span
					,
				Element:span
					:return_url
				Element:span
					=>
				Element:span
					'http://shop.merchant.com/pay/handleResponse'
				Element:span
					,
				Element:span
					:description
				Element:span
					=>
				Element:span
					'Sample description'
				Element:span
					,
				Element:span
					:billing_address_first_name
				Element:span
					=>
				Element:span
					'Juspay'
				Element:span
					,
				Element:span
					:billing_address_last_name
				Element:span
					=>
				Element:span
					'Technologies'
				Element:span
					,
				Element:span
					:billing_address_line1
				Element:span
					=>
				Element:span
					'Girija Building'
				Element:span
					,
				Element:span
					:billing_address_line2
				Element:span
					=>
				Element:span
					'Ganapathi Temple Road'
				Element:span
					,
				Element:span
					:billing_address_line3
				Element:span
					=>
				Element:span
					'8th Block, Koramangala'
				Element:span
					,
				Element:span
					:billing_address_city
				Element:span
					=>
				Element:span
					'Bengaluru'
				Element:span
					,
				Element:span
					:billing_address_state
				Element:span
					=>
				Element:span
					'Karnataka'
				Element:span
					,
				Element:span
					:billing_address_country
				Element:span
					=>
				Element:span
					'India'
				Element:span
					,
				Element:span
					:billing_address_postal_code
				Element:span
					=>
				Element:span
					'560095'
				Element:span
					,
				Element:span
					:billing_address_phone
				Element:span
					=>
				Element:span
					'9988775566'
				Element:span
					,
				Element:span
					:billing_address_country_code_iso
				Element:span
					=>
				Element:span
					'IND'
				Element:span
					,
				Element:span
					:shipping_address_first_name
				Element:span
					=>
				Element:span
					'Juspay'
				Element:span
					,
				Element:span
					:shipping_address_last_name
				Element:span
					=>
				Element:span
					'Technologies'
				Element:span
					,
				Element:span
					:shipping_address_line1
				Element:span
					=>
				Element:span
					'Girija Building'
				Element:span
					,
				Element:span
					:shipping_address_line2
				Element:span
					=>
				Element:span
					'Ganapathi Temple Road'
				Element:span
					,
				Element:span
					:shipping_address_line3
				Element:span
					=>
				Element:span
					'8th Block, Koramangala'
				Element:span
					,
				Element:span
					:shipping_address_city
				Element:span
					=>
				Element:span
					'Bengaluru'
				Element:span
					,
				Element:span
					:shipping_address_state
				Element:span
					=>
				Element:span
					'Karnataka'
				Element:span
					,
				Element:span
					:shipping_address_postal_code
				Element:span
					=>
				Element:span
					'560095'
				Element:span
					,
				Element:span
					:shipping_address_phone
				Element:span
					=>
				Element:span
					'9962881912'
				Element:span
					,
				Element:span
					:shipping_address_country_code_iso
				Element:span
					=>
				Element:span
					'IND'
				Element:span
					,
				Element:span
					:shipping_address_country
				Element:span
					=>
				Element:span
					'India'
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					$params
				Element:span
					=
				Element:span
					array
				Element:span
					();
				Element:span
					$params
				Element:span
					[
				Element:span
					'order_id'
				Element:span
					]
				Element:span
					=
				Element:span
					"1418394476"
				Element:span
					;
				Element:span
					$params
				Element:span
					[
				Element:span
					'amount'
				Element:span
					]
				Element:span
					=
				Element:span
					100.00
				Element:span
					;
				Element:span
					$params
				Element:span
					[
				Element:span
					'currency'
				Element:span
					]
				Element:span
					=
				Element:span
					"INR"
				Element:span
					;
				Element:span
					$params
				Element:span
					[
				Element:span
					'customer_id'
				Element:span
					]
				Element:span
					=
				Element:span
					"guest_user_101"
				Element:span
					;
				Element:span
					$params
				Element:span
					[
				Element:span
					'customer_email'
				Element:span
					]
				Element:span
					=
				Element:span
					"customer@gmail.com"
				Element:span
					;
				Element:span
					$params
				Element:span
					[
				Element:span
					'customer_phone'
				Element:span
					]
				Element:span
					=
				Element:span
					"9988665522"
				Element:span
					;
				Element:span
					$params
				Element:span
					[
				Element:span
					'product_id'
				Element:span
					]
				Element:span
					=
				Element:span
					"prod-141833"
				Element:span
					;
				Element:span
					$params
				Element:span
					[
				Element:span
					'return_url'
				Element:span
					]
				Element:span
					=
				Element:span
					"http://shop.merchant.com/payments/handleResponse"
				Element:span
					;
				Element:span
					$params
				Element:span
					[
				Element:span
					'description'
				Element:span
					]
				Element:span
					=
				Element:span
					"Sample description"
				Element:span
					;
				Element:span
					$params
				Element:span
					[
				Element:span
					'billing_address_first_name'
				Element:span
					]
				Element:span
					=
				Element:span
					"Juspay"
				Element:span
					;
				Element:span
					$params
				Element:span
					[
				Element:span
					'billing_address_last_name'
				Element:span
					]
				Element:span
					=
				Element:span
					"Technologies"
				Element:span
					;
				Element:span
					$params
				Element:span
					[
				Element:span
					'billing_address_line1'
				Element:span
					]
				Element:span
					=
				Element:span
					"Girija Building"
				Element:span
					;
				Element:span
					$params
				Element:span
					[
				Element:span
					'billing_address_line2'
				Element:span
					]
				Element:span
					=
				Element:span
					"Ganapathi Temple Road"
				Element:span
					;
				Element:span
					$params
				Element:span
					[
				Element:span
					'billing_address_line3'
				Element:span
					]
				Element:span
					=
				Element:span
					"8th Block, Koramangala"
				Element:span
					;
				Element:span
					$params
				Element:span
					[
				Element:span
					'billing_address_city'
				Element:span
					]
				Element:span
					=
				Element:span
					"Bengaluru"
				Element:span
					;
				Element:span
					$params
				Element:span
					[
				Element:span
					'billing_address_state'
				Element:span
					]
				Element:span
					=
				Element:span
					"Karnataka"
				Element:span
					;
				Element:span
					$params
				Element:span
					[
				Element:span
					'billing_address_country'
				Element:span
					]
				Element:span
					=
				Element:span
					"India"
				Element:span
					;
				Element:span
					$params
				Element:span
					[
				Element:span
					'billing_address_postal_code'
				Element:span
					]
				Element:span
					=
				Element:span
					"560095"
				Element:span
					;
				Element:span
					$params
				Element:span
					[
				Element:span
					'billing_address_phone'
				Element:span
					]
				Element:span
					=
				Element:span
					"9988775566"
				Element:span
					;
				Element:span
					$params
				Element:span
					[
				Element:span
					'billing_address_country_code_iso'
				Element:span
					]
				Element:span
					=
				Element:span
					"IND"
				Element:span
					;
				Element:span
					$params
				Element:span
					[
				Element:span
					'shipping_address_first_name'
				Element:span
					]
				Element:span
					=
				Element:span
					"Juspay"
				Element:span
					;
				Element:span
					$params
				Element:span
					[
				Element:span
					'shipping_address_last_name'
				Element:span
					]
				Element:span
					=
				Element:span
					"Technologies"
				Element:span
					;
				Element:span
					$params
				Element:span
					[
				Element:span
					'shipping_address_line1'
				Element:span
					]
				Element:span
					=
				Element:span
					"Girija Building"
				Element:span
					;
				Element:span
					$params
				Element:span
					[
				Element:span
					'shipping_address_line2'
				Element:span
					]
				Element:span
					=
				Element:span
					"Ganapathi Temple Road"
				Element:span
					;
				Element:span
					$params
				Element:span
					[
				Element:span
					'shipping_address_line3'
				Element:span
					]
				Element:span
					=
				Element:span
					"8th Block, Koramangala"
				Element:span
					;
				Element:span
					$params
				Element:span
					[
				Element:span
					'shipping_address_city'
				Element:span
					]
				Element:span
					=
				Element:span
					"Bengaluru"
				Element:span
					;
				Element:span
					$params
				Element:span
					[
				Element:span
					'shipping_address_state'
				Element:span
					]
				Element:span
					=
				Element:span
					"Karnataka"
				Element:span
					;
				Element:span
					$params
				Element:span
					[
				Element:span
					'shipping_address_postal_code'
				Element:span
					]
				Element:span
					=
				Element:span
					"560095"
				Element:span
					;
				Element:span
					$params
				Element:span
					[
				Element:span
					'shipping_address_phone'
				Element:span
					]
				Element:span
					=
				Element:span
					"9962881912"
				Element:span
					;
				Element:span
					$params
				Element:span
					[
				Element:span
					'shipping_address_country_code_iso'
				Element:span
					]
				Element:span
					=
				Element:span
					"IND"
				Element:span
					;
				Element:span
					$params
				Element:span
					[
				Element:span
					'shipping_address_country'
				Element:span
					]
				Element:span
					=
				Element:span
					"India"
				Element:span
					;
				Element:span
					$order
				Element:span
					=
				Element:span
					Order
				Element:span
					::
				Element:span
					create
				Element:span
					(
				Element:span
					$params
				Element:span
					);
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					Map
				Element:span
					<
				Element:span
					String
				Element:span
					,
				Element:span
					Object
				Element:span
					>
				Element:span
					params
				Element:span
					=
				Element:span
					new
				Element:span
					LinkedHashMap
				Element:span
					();
				Element:span
					params
				Element:span
					.
				Element:span
					put
				Element:span
					(
				Element:span
					"order_id"
				Element:span
					,
				Element:span
					"1418394476"
				Element:span
					);
				Element:span
					params
				Element:span
					.
				Element:span
					put
				Element:span
					(
				Element:span
					"amount"
				Element:span
					,
				Element:span
					100.0
				Element:span
					);
				Element:span
					params
				Element:span
					.
				Element:span
					put
				Element:span
					(
				Element:span
					"currency"
				Element:span
					,
				Element:span
					"INR"
				Element:span
					);
				Element:span
					params
				Element:span
					.
				Element:span
					put
				Element:span
					(
				Element:span
					"customer_id"
				Element:span
					,
				Element:span
					"guest_user_101"
				Element:span
					);
				Element:span
					params
				Element:span
					.
				Element:span
					put
				Element:span
					(
				Element:span
					"customer_email"
				Element:span
					,
				Element:span
					"customer@gmail.com"
				Element:span
					);
				Element:span
					params
				Element:span
					.
				Element:span
					put
				Element:span
					(
				Element:span
					"customer_phone"
				Element:span
					,
				Element:span
					"9988665522"
				Element:span
					);
				Element:span
					params
				Element:span
					.
				Element:span
					put
				Element:span
					(
				Element:span
					"product_id"
				Element:span
					,
				Element:span
					"prod-141833"
				Element:span
					);
				Element:span
					params
				Element:span
					.
				Element:span
					put
				Element:span
					(
				Element:span
					"return_url"
				Element:span
					,
				Element:span
					"http://shop.merchant.com/payments/handleResponse"
				Element:span
					);
				Element:span
					params
				Element:span
					.
				Element:span
					put
				Element:span
					(
				Element:span
					"description"
				Element:span
					,
				Element:span
					"Sample Description"
				Element:span
					);
				Element:span
					params
				Element:span
					.
				Element:span
					put
				Element:span
					(
				Element:span
					"billing_address_first_name"
				Element:span
					,
				Element:span
					"Juspay"
				Element:span
					);
				Element:span
					params
				Element:span
					.
				Element:span
					put
				Element:span
					(
				Element:span
					"billing_address_last_name"
				Element:span
					,
				Element:span
					"Technologies"
				Element:span
					);
				Element:span
					params
				Element:span
					.
				Element:span
					put
				Element:span
					(
				Element:span
					"billing_address_line1"
				Element:span
					,
				Element:span
					"Girija Building"
				Element:span
					);
				Element:span
					params
				Element:span
					.
				Element:span
					put
				Element:span
					(
				Element:span
					"billing_address_line2"
				Element:span
					,
				Element:span
					"Ganapathi Temple Road"
				Element:span
					);
				Element:span
					params
				Element:span
					.
				Element:span
					put
				Element:span
					(
				Element:span
					"billing_address_line3"
				Element:span
					,
				Element:span
					"8th Block, Koramangala"
				Element:span
					);
				Element:span
					params
				Element:span
					.
				Element:span
					put
				Element:span
					(
				Element:span
					"billing_address_city"
				Element:span
					,
				Element:span
					"Bengaluru"
				Element:span
					);
				Element:span
					params
				Element:span
					.
				Element:span
					put
				Element:span
					(
				Element:span
					"billing_address_state"
				Element:span
					,
				Element:span
					"Karnataka"
				Element:span
					);
				Element:span
					params
				Element:span
					.
				Element:span
					put
				Element:span
					(
				Element:span
					"billing_address_country"
				Element:span
					,
				Element:span
					"India"
				Element:span
					);
				Element:span
					params
				Element:span
					.
				Element:span
					put
				Element:span
					(
				Element:span
					"billing_address_postal_code"
				Element:span
					,
				Element:span
					"560095"
				Element:span
					);
				Element:span
					params
				Element:span
					.
				Element:span
					put
				Element:span
					(
				Element:span
					"billing_address_phone"
				Element:span
					,
				Element:span
					"9988775566"
				Element:span
					);
				Element:span
					params
				Element:span
					.
				Element:span
					put
				Element:span
					(
				Element:span
					"billing_address_country_code_iso"
				Element:span
					,
				Element:span
					"IND"
				Element:span
					);
				Element:span
					params
				Element:span
					.
				Element:span
					put
				Element:span
					(
				Element:span
					"shipping_address_first_name"
				Element:span
					,
				Element:span
					"Juspay"
				Element:span
					);
				Element:span
					params
				Element:span
					.
				Element:span
					put
				Element:span
					(
				Element:span
					"shipping_address_last_name"
				Element:span
					,
				Element:span
					"Technologies"
				Element:span
					);
				Element:span
					params
				Element:span
					.
				Element:span
					put
				Element:span
					(
				Element:span
					"shipping_address_line1"
				Element:span
					,
				Element:span
					"Girija Building"
				Element:span
					);
				Element:span
					params
				Element:span
					.
				Element:span
					put
				Element:span
					(
				Element:span
					"shipping_address_line2"
				Element:span
					,
				Element:span
					"Ganapathi Temple Road"
				Element:span
					);
				Element:span
					params
				Element:span
					.
				Element:span
					put
				Element:span
					(
				Element:span
					"shipping_address_line3"
				Element:span
					,
				Element:span
					"8th Block, Koramangala"
				Element:span
					);
				Element:span
					params
				Element:span
					.
				Element:span
					put
				Element:span
					(
				Element:span
					"shipping_address_city"
				Element:span
					,
				Element:span
					"Bengaluru"
				Element:span
					);
				Element:span
					params
				Element:span
					.
				Element:span
					put
				Element:span
					(
				Element:span
					"shipping_address_state"
				Element:span
					,
				Element:span
					"Karnataka"
				Element:span
					);
				Element:span
					params
				Element:span
					.
				Element:span
					put
				Element:span
					(
				Element:span
					"shipping_address_country"
				Element:span
					,
				Element:span
					"India"
				Element:span
					);
				Element:span
					params
				Element:span
					.
				Element:span
					put
				Element:span
					(
				Element:span
					"shipping_address_postal_code"
				Element:span
					,
				Element:span
					"560095"
				Element:span
					);
				Element:span
					params
				Element:span
					.
				Element:span
					put
				Element:span
					(
				Element:span
					"shipping_address_phone"
				Element:span
					,
				Element:span
					"9962881912"
				Element:span
					);
				Element:span
					params
				Element:span
					.
				Element:span
					put
				Element:span
					(
				Element:span
					"shipping_address_country_code_iso"
				Element:span
					,
				Element:span
					"IND"
				Element:span
					);
				Element:span
					params
				Element:span
					.
				Element:span
					put
				Element:span
					(
				Element:span
					"shipping_address_country"
				Element:span
					,
				Element:span
					"India"
				Element:span
					);
				Element:span
					Order
				Element:span
					order
				Element:span
					=
				Element:span
					Order
				Element:span
					.
				Element:span
					create
				Element:span
					(
				Element:span
					params
				Element:span
					);
			Node:
			(type) c
			(layer)1
				Element:h4
					Request Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Field
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					order_id
				Element:br
				Element:code
					Required
				Element:td
					String
				Element:td
					Unique Identifier for the order.
				Element:tr
				Element:td
					amount
				Element:br
				Element:code
					Required
				Element:td
					Double
				Element:td
					Amount that the customer has to pay. Will accept double values with upto two decimal places. For example, 100.15 is valid input but 100.1532 is not valid.
				Element:tr
				Element:td
					currency
				Element:td
					String
				Element:td
					ISO string of the currency. Use INR for Indian Rupee. Among other accepted values are EUR, USD, GBP.
				Element:br
					Default value:
				Element:code
					INR
				Element:tr
				Element:td
					customer_id
				Element:td
					String
				Element:td
					String that uniquely identifies the customer. ID returned when you created customer object.
				Element:tr
				Element:td
					customer_email
				Element:td
					String
				Element:td
					Email address of the customer.
				Element:br
					If the backend gateway requires it, then you must send this value.
				Element:tr
				Element:td
					customer_phone
				Element:td
					String
				Element:td
					Mobile number or fixed line number of the customer.
				Element:br
					If the backend gateway requires it, then you must send this value.
				Element:tr
				Element:td
					description
				Element:td
					String
				Element:td
					Short description for the order. We send this information to the backend gateways whenever there is a provision for this.
				Element:tr
				Element:td
					product_id
				Element:td
					String
				Element:td
					An identifier for the product. Fits well for impulse purchase usecases.
				Element:tr
				Element:td
					gateway_id
				Element:td
					String
				Element:td
					Specify your preferred gateway for this order. Complete mapping for “gateway_id” can be found here:
				Element:a
					Gateway mapping
				Element:tr
				Element:td
					return_url
				Element:td
					String
				Element:td
					A fully qualified URL such as http://shop.merchant.com/ to which the customer will be redirected after payment completion. This URL shouldn’t contain any query parameters. This URL takes higher precedence over the common return URL configured in your account settings.
				Element:tr
				Element:td
					billing_address_first_name
				Element:td
					String
				Element:td
					First name in the billing address
				Element:tr
				Element:td
					billing_address_last_name
				Element:td
					String
				Element:td
					Last name in the billing address
				Element:tr
				Element:td
					billing_address_line1
				Element:td
					String
				Element:td
					Line1 in the billing address
				Element:tr
				Element:td
					billing_address_line2
				Element:td
					String
				Element:td
					Line2 in the billing address
				Element:tr
				Element:td
					billing_address_line3
				Element:td
					String
				Element:td
					Line3 in the billing address
				Element:tr
				Element:td
					billing_address_city
				Element:td
					String
				Element:td
					Billing address city
				Element:tr
				Element:td
					billing_address_state
				Element:td
					String
				Element:td
					Billing address state
				Element:tr
				Element:td
					billing_address_country
				Element:td
					String
				Element:td
					Billing address country
				Element:tr
				Element:td
					billing_address_postal_code
				Element:td
					String
				Element:td
					Billing address postal code or zip code
				Element:tr
				Element:td
					billing_address_phone
				Element:td
					String
				Element:td
					Mobile or phone number in the billing address
				Element:tr
				Element:td
					billing_address_country_code_iso
				Element:td
					String
				Element:td
					ISO Country code
				Element:br
					Default value:
				Element:code
					IND
				Element:tr
				Element:td
					shipping_address_first_name
				Element:td
					String
				Element:td
					First name in the shipping address
				Element:tr
				Element:td
					shipping_address_last_name
				Element:td
					String
				Element:td
					Last name in the shipping address
				Element:tr
				Element:td
					shipping_address_line1
				Element:td
					String
				Element:td
					Line1 in the shipping address
				Element:tr
				Element:td
					shipping_address_line2
				Element:td
					String
				Element:td
					Line2 in the shipping address
				Element:tr
				Element:td
					shipping_address_line3
				Element:td
					String
				Element:td
					Line3 in the shipping address
				Element:tr
				Element:td
					shipping_address_city
				Element:td
					String
				Element:td
					Shipping address city
				Element:tr
				Element:td
					shipping_address_state
				Element:td
					String
				Element:td
					Shipping address state
				Element:tr
				Element:td
					shipping_address_country
				Element:td
					String
				Element:td
					Shipping address country
				Element:tr
				Element:td
					shipping_address_postal_code
				Element:td
					String
				Element:td
					shipping address postal code or zip code
				Element:tr
				Element:td
					shipping_address_phone
				Element:td
					String
				Element:td
					Mobile or phone number in the shipping address
				Element:tr
				Element:td
					shipping_address_country_code_iso
				Element:td
					String
				Element:td
					ISO Country code
				Element:br
					Default value:
				Element:code
					IND
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example Response
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
					"status"
					:
				Element:span
					"CREATED"
					,
				Element:span
					"status_id"
					: 1,
				Element:span
					"id"
					:
				Element:span
					"ord_e294a26e66ad4336a992ceab81ad704c"
					,
				Element:span
					"order_id"
					:
				Element:span
					"1478851764"
					,
				Element:span
					"payment_links"
					:
				Element:span
					{
				Element:span
					"web"
					:
				Element:span
					"https://api.juspay.in/merchant/pay/ord_e294a26e66ad4336a992ceab81ad704c"
					,
				Element:span
					"mobile"
					:
				Element:span
					"https://api.juspay.in/merchant/pay/ord_e294a26e66ad4336a992ceab81ad704c?mobile=true"
					,
				Element:span
					"iframe"
					:
				Element:span
					"https://api.juspay.in/merchant/ipay/ord_e294a26e66ad4336a992ceab81ad704c"
				Element:span
					}
				Element:span
					}
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					<
				Element:span
					Order
				Element:span
					>
				Element:span
					{
				Element:span
					'status'
				Element:span
					:
				Element:span
					u'CREATED'
				Element:span
					,
				Element:span
					'order_id'
				Element:span
					:
				Element:span
					u'1418394476'
				Element:span
					,
				Element:span
					'id'
				Element:span
					:
				Element:span
					'ord_805ab74ffe1245afb00b84d57cb18c65'
				Element:span
					,
				Element:span
					'status_id'
				Element:span
					:
				Element:span
					1
				Element:span
					,
				Element:span
					<
				Element:span
					PaymentLink
				Element:span
					>
				Element:span
					{
				Element:span
					'web'
				Element:span
					:
				Element:span
					u'https://api.juspay.in/merchant/pay/ord_e294a26e66ad4336a992ceab81ad704c'
				Element:span
					,
				Element:span
					'mobile'
				Element:span
					:
				Element:span
					u'https://api.juspay.in/merchant/pay/ord_e294a26e66ad4336a992ceab81ad704c?mobile=true'
				Element:span
					,
				Element:span
					'iframe'
				Element:span
					:
				Element:span
					u'https://api.juspay.in/merchant/ipay/ord_e294a26e66ad4336a992ceab81ad704c'
				Element:span
					}
				Element:span
					}
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					<
				Element:span
					Orders
				Element:span
					::
				Element:span
					Order
				Element:span
					:
				Element:span
					0x00000a
				Element:span
					>
				Element:span
					{
				Element:span
					@status
				Element:span
					=
				Element:span
					"CREATED"
				Element:span
					,
				Element:span
					@status_id
				Element:span
					=
				Element:span
					1
				Element:span
					,
				Element:span
					@id
				Element:span
					=
				Element:span
					"ord_805ab74ffe1245afb00b84d57cb18c65"
				Element:span
					,
				Element:span
					@order_id
				Element:span
					=
				Element:span
					"1418394476"
				Element:span
					,
				Element:span
					<
				Element:span
					PaymentLink
				Element:span
					:
				Element:span
					0x00000a
				Element:span
					>
				Element:span
					{
				Element:span
					@web
				Element:span
					:
				Element:span
					"https://api.juspay.in/merchant/pay/ord_e294a26e66ad4336a992ceab81ad704c"
				Element:span
					,
				Element:span
					@mobile
				Element:span
					:
				Element:span
					"https://api.juspay.in/merchant/pay/ord_e294a26e66ad4336a992ceab81ad704c?mobile=true"
				Element:span
					,
				Element:span
					@iframe
				Element:span
					:
				Element:span
					"https://api.juspay.in/merchant/ipay/ord_e294a26e66ad4336a992ceab81ad704c"
				Element:span
					}
				Element:span
					}
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					Order
				Element:span
					object
				Element:span
					(
				Element:span
					[
				Element:span
					status
				Element:span
					]
				Element:span
					=>
				Element:span
					'CREATED'
				Element:span
					[
				Element:span
					status_id
				Element:span
					]
				Element:span
					=>
				Element:span
					1
				Element:span
					[
				Element:span
					id
				Element:span
					]
				Element:span
					:
				Element:span
					'ord_805ab74ffe1245afb00b84d57cb18c65'
				Element:span
					[
				Element:span
					order_id
				Element:span
					]
				Element:span
					=>
				Element:span
					1418394476
				Element:span
					[
				Element:span
					PaymentLinks
				Element:span
					]
				Element:span
					=>
				Element:span
					(
				Element:span
					[
				Element:span
					web
				Element:span
					]
				Element:span
					:
				Element:span
					https
				Element:span
					://
				Element:span
					api
				Element:span
					.
				Element:span
					juspay
				Element:span
					.
				Element:span
					in
				Element:span
					/
				Element:span
					merchant
				Element:span
					/
				Element:span
					pay
				Element:span
					/
				Element:span
					ord_e294a26e66ad4336a992ceab81ad704c
				Element:span
					[
				Element:span
					mobile
				Element:span
					]
				Element:span
					:
				Element:span
					https
				Element:span
					://
				Element:span
					api
				Element:span
					.
				Element:span
					juspay
				Element:span
					.
				Element:span
					in
				Element:span
					/
				Element:span
					merchant
				Element:span
					/
				Element:span
					pay
				Element:span
					/
				Element:span
					ord_e294a26e66ad4336a992ceab81ad704c
				Element:span
					?
				Element:span
					mobile
				Element:span
					=
				Element:span
					true
				Element:span
					[
				Element:span
					iframe
				Element:span
					]
				Element:span
					:
				Element:span
					https
				Element:span
					://
				Element:span
					api
				Element:span
					.
				Element:span
					juspay
				Element:span
					.
				Element:span
					in
				Element:span
					/
				Element:span
					merchant
				Element:span
					/
				Element:span
					ipay
				Element:span
					/
				Element:span
					ord_e294a26e66ad4336a992ceab81ad704c
				Element:span
					)
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					@object
				Element:span
					in
				Element:span
					.
				Element:span
					juspay
				Element:span
					.
				Element:span
					model
				Element:span
					.
				Element:span
					Order
				Element:span
					JSON:
				Element:span
					{
				Element:span
					"status"
				Element:span
					:
				Element:span
					"CREATED"
				Element:span
					,
				Element:span
					"status_id"
				Element:span
					:
				Element:span
					1
				Element:span
					,
				Element:span
					"id"
				Element:span
					:
				Element:span
					"ord_805ab74ffe1245afb00b84d57cb18c65"
				Element:span
					,
				Element:span
					"order_id"
				Element:span
					:
				Element:span
					"1418394476"
				Element:span
					"payment_links"
				Element:span
					:
				Element:span
					{
				Element:span
					"web"
				Element:span
					:
				Element:span
					"https://api.juspay.in/merchant/pay/ord_e294a26e66ad4336a992ceab81ad704c"
				Element:span
					"mobile"
				Element:span
					:
				Element:span
					"https://api.juspay.in/merchant/pay/ord_e294a26e66ad4336a992ceab81ad704c?mobile=true"
				Element:span
					"iframe"
				Element:span
					:
				Element:span
					"https://api.juspay.in/merchant/ipay/ord_e294a26e66ad4336a992ceab81ad704c"
				Element:span
					}
				Element:span
					}
			Node:
			(type) c
			(layer)1
				Element:h4
					Response Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Field
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
					String
				Element:td
					Unique ID generated by JusPay for the given order.
				Element:tr
				Element:td
					order_id
				Element:td
					String
				Element:td
					Given order ID.
				Element:tr
				Element:td
					status
				Element:td
					String
				Element:td
					Status of the order. If you receive “CREATED”, then the order is successfully created. If you invoke this API with the an order_id which is already created, then this API will return the result of
				Element:code
					/order/status
					API.
				Element:tr
				Element:td
					status_id
				Element:td
					String
				Element:td
					Status ID is a numeric id corresponding to the status value.
				Element:tr
				Element:td
					payment_links.web
				Element:td
					String
				Element:td
					Link to checkout page that is optimized for Desktop for the given order.
				Element:tr
				Element:td
					payment_links.mobile
				Element:td
					String
				Element:td
					Link to Mobile optimized checkout page for the given order.
				Element:tr
				Element:td
					payment_links.iframe
				Element:td
					String
				Element:td
					Link to iFrame checkout screen. This is typically embedded inside of your own page.
			Node:
			(type) c
			(layer)1
				Element:h2
					Get Order Status
			Node:
			(type) c
			(layer)1
				Element:p
					Retrieve the order object associated with the
				Element:code
					order_id
					.
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Definition
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					GET https://api.juspay.in/orders/:order_id
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					Order
				Element:span
					.
				Element:span
					status
				Element:span
					(
				Element:span
					String
				Element:span
					orderId
				Element:span
					);
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example Request
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl https://api.juspay.in/orders/145678234
				Element:span
					\
					-u api_key:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					Juspay
				Element:span
					.
				Element:span
					Orders
				Element:span
					.
				Element:span
					get_status
				Element:span
					(
				Element:span
					order_id
				Element:span
					=
				Element:span
					'145678234'
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					Orders
				Element:span
					.
				Element:span
					status
				Element:span
					(
				Element:span
					:order_id
				Element:span
					=>
				Element:span
					'145678234'
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					$params
				Element:span
					=
				Element:span
					array
				Element:span
					();
				Element:span
					$params
				Element:span
					[
				Element:span
					'order_id'
				Element:span
					]
				Element:span
					=
				Element:span
					"145678234"
				Element:span
					$response
				Element:span
					=
				Element:span
					Order
				Element:span
					::
				Element:span
					status
				Element:span
					(
				Element:span
					$params
				Element:span
					);
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					String
				Element:span
					orderId
				Element:span
					=
				Element:span
					"145678234"
				Element:span
					Order
				Element:span
					order
				Element:span
					=
				Element:span
					Order
				Element:span
					.
				Element:span
					status
				Element:span
					(
				Element:span
					orderId
				Element:span
					);
			Node:
			(type) c
			(layer)1
				Element:h4
					URL Embedded Parameter
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Field
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					order_id
				Element:br
				Element:code
					Required
				Element:td
					String
				Element:td
					Order ID
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example Response
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
					"merchant_id"
					:
				Element:span
					"merchant_id"
					,
				Element:span
					"order_id"
					:
				Element:span
					"order_id"
					,
				Element:span
					"customer_id"
					:
				Element:span
					"user@gmail.com"
					,
				Element:span
					"customer_email"
					:
				Element:span
					"user@gmail.com"
					,
				Element:span
					"customer_phone"
					:
				Element:span
					"9966228812"
					,
				Element:span
					"product_id"
					:
				Element:span
					":product_id"
					,
				Element:span
					"status"
					:
				Element:span
					"CHARGED"
					,
				Element:span
					"status_id"
					: 21,
				Element:span
					"amount"
					: 1000,
				Element:span
					"currency"
					:
				Element:span
					"INR"
					,
				Element:span
					"refunded"
					:
				Element:span
					false
					,
				Element:span
					"amount_refunded"
					: 0,
				Element:span
					"return_url"
					:
				Element:span
					""
					,
				Element:span
					"udf1"
					:
				Element:span
					""
					,
				Element:span
					"udf2"
					:
				Element:span
					""
					,
				Element:span
					"udf3"
					:
				Element:span
					""
					,
				Element:span
					"udf4"
					:
				Element:span
					""
					,
				Element:span
					"udf5"
					:
				Element:span
					""
					,
				Element:span
					"udf6"
					:
				Element:span
					""
					,
				Element:span
					"udf7"
					:
				Element:span
					""
					,
				Element:span
					"udf8"
					:
				Element:span
					""
					,
				Element:span
					"udf9"
					:
				Element:span
					""
					,
				Element:span
					"udf10"
					:
				Element:span
					""
					,
				Element:span
					"txn_id"
					:
				Element:span
					"txn_id"
					,
				Element:span
					"gateway_id"
					: 2,
				Element:span
					"bank_error_code"
					:
				Element:span
					""
					,
				Element:span
					"bank_error_message"
					:
				Element:span
					""
					,
				Element:span
					"card"
					:
				Element:span
					{
				Element:span
					"last_four_digits"
					:
				Element:span
					""
					,
				Element:span
					"card_isin"
					:
				Element:span
					"524368"
					,
				Element:span
					"expiry_month"
					:
				Element:span
					"12"
					,
				Element:span
					"expiry_year"
					:
				Element:span
					"2015"
					,
				Element:span
					"name_on_card"
					:
				Element:span
					"Cardholder Name"
					,
				Element:span
					"card_type"
					:
				Element:span
					"CREDIT"
					,
				Element:span
					"card_issuer"
					:
				Element:span
					"HDFC Bank"
					,
				Element:span
					"card_brand"
					:
				Element:span
					"MasterCard"
				Element:span
					}
					,
				Element:span
					"payment_gateway_response"
					:
				Element:span
					{
				Element:span
					"created"
					:
				Element:span
					"2015-01-29T12:25:49Z"
					,
				Element:span
					"epg_txn_id"
					:
				Element:span
					"502913366745"
					,
				Element:span
					"rrn"
					:
				Element:span
					"502913366745"
					,
				Element:span
					"auth_id_code"
					:
				Element:span
					"999999"
					,
				Element:span
					"txn_id"
					:
				Element:span
					"11327833"
					,
				Element:span
					"resp_code"
					:
				Element:span
					"CAPTURED"
					,
				Element:span
					"resp_message"
					:
				Element:span
					"CAPTURED"
				Element:span
					}
					,
				Element:span
					"payment_links"
					:
				Element:span
					{
				Element:span
					"web"
					:
				Element:span
					"https://api.juspay.in/merchant/pay/ord_e294a26e66ad4336a992ceab81ad704c"
				Element:span
					"mobile"
					:
				Element:span
					"https://api.juspay.in/merchant/pay/ord_e294a26e66ad4336a992ceab81ad704c?mobile=true"
				Element:span
					"iframe"
					:
				Element:span
					"https://api.juspay.in/merchant/ipay/ord_e294a26e66ad4336a992ceab81ad704c"
				Element:span
					}
				Element:span
					}
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					<
				Element:span
					Order
				Element:span
					>
				Element:span
					{
				Element:span
					'status'
				Element:span
					:
				Element:span
					u'NEW'
				Element:span
					,
				Element:span
					'amount_refunded'
				Element:span
					:
				Element:span
					0
				Element:span
					,
				Element:span
					'status_id'
				Element:span
					:
				Element:span
					10
				Element:span
					,
				Element:span
					'order_id'
				Element:span
					:
				Element:span
					u'145678234'
				Element:span
					,
				Element:span
					'refunded'
				Element:span
					:
				Element:span
					False
				Element:span
					,
				Element:span
					'currency'
				Element:span
					:
				Element:span
					u'INR'
				Element:span
					,
				Element:span
					'amount'
				Element:span
					:
				Element:span
					1000
				Element:span
					,
				Element:span
					'merchant_id'
				Element:span
					:
				Element:span
					u'customer'
				Element:span
					,
				Element:span
					<
				Element:span
					PaymentLink
				Element:span
					>
				Element:span
					{
				Element:span
					'web'
				Element:span
					:
				Element:span
					u'https://api.juspay.in/merchant/pay/ord_e294a26e66ad4336a992ceab81ad704c'
				Element:span
					,
				Element:span
					'mobile'
				Element:span
					:
				Element:span
					u'https://api.juspay.in/merchant/pay/ord_e294a26e66ad4336a992ceab81ad704c?mobile=true'
				Element:span
					,
				Element:span
					'iframe'
				Element:span
					:
				Element:span
					u'https://api.juspay.in/merchant/ipay/ord_e294a26e66ad4336a992ceab81ad704c'
				Element:span
					}
				Element:span
					}
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					<
				Element:span
					Orders
				Element:span
					::
				Element:span
					Order
				Element:span
					:
				Element:span
					0x00000a
				Element:span
					>
				Element:span
					{
				Element:span
					@status
				Element:span
					=
				Element:span
					"NEW"
				Element:span
					,
				Element:span
					@amount_refunded
				Element:span
					=
				Element:span
					0
				Element:span
					,
				Element:span
					@status_id
				Element:span
					=
				Element:span
					10
				Element:span
					,
				Element:span
					@order_id
				Element:span
					=
				Element:span
					"145678234"
				Element:span
					,
				Element:span
					@refunded
				Element:span
					=
				Element:span
					false
				Element:span
					,
				Element:span
					@currency
				Element:span
					=
				Element:span
					"INR"
				Element:span
					,
				Element:span
					@amount
				Element:span
					=
				Element:span
					1000
				Element:span
					,
				Element:span
					@merchant_id
				Element:span
					=
				Element:span
					"customer"
				Element:span
					,
				Element:span
					<
				Element:span
					PaymentLink
				Element:span
					:
				Element:span
					0x00000a
				Element:span
					>
				Element:span
					{
				Element:span
					@web
				Element:span
					:
				Element:span
					"https://api.juspay.in/merchant/pay/ord_e294a26e66ad4336a992ceab81ad704c"
				Element:span
					,
				Element:span
					@mobile
				Element:span
					:
				Element:span
					"https://api.juspay.in/merchant/pay/ord_e294a26e66ad4336a992ceab81ad704c?mobile=true"
				Element:span
					,
				Element:span
					@iframe
				Element:span
					:
				Element:span
					"https://api.juspay.in/merchant/ipay/ord_e294a26e66ad4336a992ceab81ad704c"
				Element:span
					}
				Element:span
					}
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					Order
				Element:span
					Object
				Element:span
					(
				Element:span
					[
				Element:span
					status
				Element:span
					]
				Element:span
					=>
				Element:span
					NEW
				Element:span
					[
				Element:span
					amount_refunded
				Element:span
					]
				Element:span
					=>
				Element:span
					0
				Element:span
					[
				Element:span
					status_id
				Element:span
					]
				Element:span
					=>
				Element:span
					10
				Element:span
					[
				Element:span
					order_id
				Element:span
					]
				Element:span
					=>
				Element:span
					145678234
				Element:span
					[
				Element:span
					refunded
				Element:span
					]
				Element:span
					=>
				Element:span
					False
				Element:span
					[
				Element:span
					currency
				Element:span
					]
				Element:span
					=>
				Element:span
					INR
				Element:span
					[
				Element:span
					amount
				Element:span
					]
				Element:span
					=>
				Element:span
					1000
				Element:span
					[
				Element:span
					merchant_id
				Element:span
					]
				Element:span
					=>
				Element:span
					customer
				Element:span
					[
				Element:span
					PaymentLinks
				Element:span
					]
				Element:span
					=>
				Element:span
					(
				Element:span
					[
				Element:span
					web
				Element:span
					]
				Element:span
					:
				Element:span
					https
				Element:span
					://
				Element:span
					api
				Element:span
					.
				Element:span
					juspay
				Element:span
					.
				Element:span
					in
				Element:span
					/
				Element:span
					merchant
				Element:span
					/
				Element:span
					pay
				Element:span
					/
				Element:span
					ord_e294a26e66ad4336a992ceab81ad704c
				Element:span
					[
				Element:span
					mobile
				Element:span
					]
				Element:span
					:
				Element:span
					https
				Element:span
					://
				Element:span
					api
				Element:span
					.
				Element:span
					juspay
				Element:span
					.
				Element:span
					in
				Element:span
					/
				Element:span
					merchant
				Element:span
					/
				Element:span
					pay
				Element:span
					/
				Element:span
					ord_e294a26e66ad4336a992ceab81ad704c
				Element:span
					?
				Element:span
					mobile
				Element:span
					=
				Element:span
					true
				Element:span
					[
				Element:span
					iframe
				Element:span
					]
				Element:span
					:
				Element:span
					https
				Element:span
					://
				Element:span
					api
				Element:span
					.
				Element:span
					juspay
				Element:span
					.
				Element:span
					in
				Element:span
					/
				Element:span
					merchant
				Element:span
					/
				Element:span
					ipay
				Element:span
					/
				Element:span
					ord_e294a26e66ad4336a992ceab81ad704c
				Element:span
					)
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					@object
				Element:span
					in
				Element:span
					.
				Element:span
					juspay
				Element:span
					.
				Element:span
					model
				Element:span
					.
				Element:span
					Order
				Element:span
					JSON:
				Element:span
					{
				Element:span
					"merchant_id"
				Element:span
					:
				Element:span
					"merchant_id"
				Element:span
					,
				Element:span
					"order_id"
				Element:span
					:
				Element:span
					"order_id"
				Element:span
					,
				Element:span
					"customer_id"
				Element:span
					:
				Element:span
					"user@gmail.com"
				Element:span
					,
				Element:span
					"customer_email"
				Element:span
					:
				Element:span
					"user@gmail.com"
				Element:span
					,
				Element:span
					"customer_phone"
				Element:span
					:
				Element:span
					"9966228812"
				Element:span
					,
				Element:span
					"product_id"
				Element:span
					:
				Element:span
					":product_id"
				Element:span
					,
				Element:span
					"status"
				Element:span
					:
				Element:span
					"CHARGED"
				Element:span
					,
				Element:span
					"status_id"
				Element:span
					:
				Element:span
					21
				Element:span
					,
				Element:span
					"amount"
				Element:span
					:
				Element:span
					1000
				Element:span
					,
				Element:span
					"currency"
				Element:span
					:
				Element:span
					"INR"
				Element:span
					,
				Element:span
					"refunded"
				Element:span
					:
				Element:span
					false
				Element:span
					,
				Element:span
					"amount_refunded"
				Element:span
					:
				Element:span
					0
				Element:span
					,
				Element:span
					"return_url"
				Element:span
					:
				Element:span
					""
				Element:span
					,
				Element:span
					"udf1"
				Element:span
					:
				Element:span
					""
				Element:span
					,
				Element:span
					"udf2"
				Element:span
					:
				Element:span
					""
				Element:span
					,
				Element:span
					"udf3"
				Element:span
					:
				Element:span
					""
				Element:span
					,
				Element:span
					"udf4"
				Element:span
					:
				Element:span
					""
				Element:span
					,
				Element:span
					"udf5"
				Element:span
					:
				Element:span
					""
				Element:span
					,
				Element:span
					"udf6"
				Element:span
					:
				Element:span
					""
				Element:span
					,
				Element:span
					"udf7"
				Element:span
					:
				Element:span
					""
				Element:span
					,
				Element:span
					"udf8"
				Element:span
					:
				Element:span
					""
				Element:span
					,
				Element:span
					"udf9"
				Element:span
					:
				Element:span
					""
				Element:span
					,
				Element:span
					"udf10"
				Element:span
					:
				Element:span
					""
				Element:span
					,
				Element:span
					"txn_id"
				Element:span
					:
				Element:span
					"txn_id"
				Element:span
					,
				Element:span
					"gateway_id"
				Element:span
					:
				Element:span
					2
				Element:span
					,
				Element:span
					"bank_error_code"
				Element:span
					:
				Element:span
					""
				Element:span
					,
				Element:span
					"bank_error_message"
				Element:span
					:
				Element:span
					""
				Element:span
					,
				Element:span
					"card"
				Element:span
					:
				Element:span
					{
				Element:span
					"last_four_digits"
				Element:span
					:
				Element:span
					""
				Element:span
					,
				Element:span
					"card_isin"
				Element:span
					:
				Element:span
					"524368"
				Element:span
					,
				Element:span
					"expiry_month"
				Element:span
					:
				Element:span
					"12"
				Element:span
					,
				Element:span
					"expiry_year"
				Element:span
					:
				Element:span
					"2015"
				Element:span
					,
				Element:span
					"name_on_card"
				Element:span
					:
				Element:span
					"Cardholder Name"
				Element:span
					,
				Element:span
					"card_type"
				Element:span
					:
				Element:span
					"CREDIT"
				Element:span
					,
				Element:span
					"card_issuer"
				Element:span
					:
				Element:span
					"HDFC Bank"
				Element:span
					,
				Element:span
					"card_brand"
				Element:span
					:
				Element:span
					"MasterCard"
				Element:span
					},
				Element:span
					"payment_gateway_response"
				Element:span
					:
				Element:span
					{
				Element:span
					"created"
				Element:span
					:
				Element:span
					"2015-01-29T12:25:49Z"
				Element:span
					,
				Element:span
					"epg_txn_id"
				Element:span
					:
				Element:span
					"502913366745"
				Element:span
					,
				Element:span
					"rrn"
				Element:span
					:
				Element:span
					"502913366745"
				Element:span
					,
				Element:span
					"auth_id_code"
				Element:span
					:
				Element:span
					"999999"
				Element:span
					,
				Element:span
					"txn_id"
				Element:span
					:
				Element:span
					"11327833"
				Element:span
					,
				Element:span
					"resp_code"
				Element:span
					:
				Element:span
					"CAPTURED"
				Element:span
					,
				Element:span
					"resp_message"
				Element:span
					:
				Element:span
					"CAPTURED"
				Element:span
					},
				Element:span
					"payment_links"
				Element:span
					:
				Element:span
					{
				Element:span
					"web"
				Element:span
					:
				Element:span
					"https://api.juspay.in/merchant/pay/ord_e294a26e66ad4336a992ceab81ad704c"
				Element:span
					"mobile"
				Element:span
					:
				Element:span
					"https://api.juspay.in/merchant/pay/ord_e294a26e66ad4336a992ceab81ad704c?mobile=true"
				Element:span
					"iframe"
				Element:span
					:
				Element:span
					"https://api.juspay.in/merchant/ipay/ord_e294a26e66ad4336a992ceab81ad704c"
				Element:span
					}
				Element:span
					}
			Node:
			(type) c
			(layer)1
				Element:h2
					List Orders
			Node:
			(type) c
			(layer)1
				Element:p
					List the orders that were created. By default, the orders are listed in the reverse chronological order (starting from the order that was most recently created)
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Definition
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					GET https://api.juspay.in/orders
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					Order
				Element:span
					.
				Element:span
					list
				Element:span
					(
				Element:span
					Map
				Element:span
					params
				Element:span
					);
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example Request
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -X GET https://api.juspay.in/orders?created.lt
				Element:span
					=
					1422271716&created.gt
				Element:span
					=
					1421407873&count
				Element:span
					=
					1&offset
				Element:span
					=
					101
				Element:span
					\
					-u api_key:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					Juspay
				Element:span
					.
				Element:span
					Orders
				Element:span
					.
				Element:span
					list
				Element:span
					()
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					Orders
				Element:span
					.
				Element:span
					list
				Element:span
					()
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					Order
				Element:span
					.
				Element:span
					listAll
				Element:span
					()
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					Map
				Element:span
					<
				Element:span
					String
				Element:span
					,
				Element:span
					Object
				Element:span
					>
				Element:span
					params
				Element:span
					=
				Element:span
					new
				Element:span
					LinkedHashMap
				Element:span
					();
				Element:span
					params
				Element:span
					.
				Element:span
					put
				Element:span
					(
				Element:span
					"count"
				Element:span
					,
				Element:span
					10
				Element:span
					);
				Element:span
					Order
				Element:span
					.
				Element:span
					list
				Element:span
					(
				Element:span
					params
				Element:span
					);
			Node:
			(type) c
			(layer)1
				Element:h4
					Request Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Field
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					created
				Element:td
				Element:td
					Match all orders that were in the time range specified by this. The timestamp value for the attributes mentioned should be given in seconds. This should represent the unix timestamp integer.
				Element:tr
				Element:td
					gt
				Element:td
					Integer
				Element:td
					Return values where the created field is after this timestamp
				Element:tr
				Element:td
					lt
				Element:td
					Integer
				Element:td
					Return values where the created field is before this timestamp
				Element:tr
				Element:td
					ge
				Element:td
					Integer
				Element:td
					Return values where the created field is after or equal to this timestamp
				Element:tr
				Element:td
					le
				Element:td
					Integer
				Element:td
					Return values where the created field is before or equal to this timestamp
				Element:tr
				Element:td
					count
				Element:td
					Integer
				Element:td
					The number of orders that has to be returned
				Element:br
					Size range:
				Element:code
					1-100
				Element:tr
				Element:td
					offset
				Element:td
					Integer
				Element:td
					The number of orders that should be skipped
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example Response
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
					"list"
					:
				Element:span
					[
				Element:span
					{
				Element:span
					"merchant_id"
					:
				Element:span
					"nspi"
					,
				Element:span
					"order_id"
					:
				Element:span
					"2IWz8U9PRriq5cgd_oBhAg"
					,
				Element:span
					"customer_id"
					:
				Element:span
					"user@mail.com"
					,
				Element:span
					"customer_email"
					:
				Element:span
					"user@mail.com"
					,
				Element:span
					"customer_phone"
					: null,
				Element:span
					"product_id"
					:
				Element:span
					""
					,
				Element:span
					"status"
					:
				Element:span
					"NEW"
					,
				Element:span
					"status_id"
					: 10,
				Element:span
					"amount"
					: 600,
				Element:span
					"currency"
					:
				Element:span
					"INR"
					,
				Element:span
					"refunded"
					:
				Element:span
					false
					,
				Element:span
					"amount_refunded"
					: 0,
				Element:span
					"return_url"
					:
				Element:span
					"http://www.merchant.in/order/confirm"
					,
				Element:span
					"udf1"
					:
				Element:span
					""
					,
				Element:span
					"udf2"
					:
				Element:span
					""
					,
				Element:span
					"udf3"
					:
				Element:span
					""
					,
				Element:span
					"udf4"
					:
				Element:span
					""
					,
				Element:span
					"udf5"
					:
				Element:span
					""
					,
				Element:span
					"udf6"
					:
				Element:span
					""
					,
				Element:span
					"udf7"
					:
				Element:span
					""
					,
				Element:span
					"udf8"
					:
				Element:span
					""
					,
				Element:span
					"udf9"
					:
				Element:span
					""
					,
				Element:span
					"udf10"
					:
				Element:span
					""
					,
				Element:span
					"payment_links"
					:
				Element:span
					{
				Element:span
					"web"
					:
				Element:span
					"https://api.juspay.in/merchant/pay/ord_e294a26e66ad4336a992ceab81ad704c"
				Element:span
					"mobile"
					:
				Element:span
					"https://api.juspay.in/merchant/pay/ord_e294a26e66ad4336a992ceab81ad704c?mobile=true"
				Element:span
					"iframe"
					:
				Element:span
					"https://api.juspay.in/merchant/ipay/ord_e294a26e66ad4336a992ceab81ad704c"
				Element:span
					}
				Element:span
					}
					...
				Element:span
					]
					,
				Element:span
					"count"
					: 10,
				Element:span
					"offset"
					: 0,
				Element:span
					"total"
					: 91604
				Element:span
					}
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					<
				Element:span
					dict
				Element:span
					>
				Element:span
					{
				Element:span
					'count'
				Element:span
					:
				Element:span
					10
				Element:span
					,
				Element:span
					'total'
				Element:span
					:
				Element:span
					987
				Element:span
					,
				Element:span
					'list'
				Element:span
					:
				Element:span
					[
				Element:span
					<
				Element:span
					Order
				Element:span
					>
				Element:span
					{
				Element:span
					'status'
				Element:span
					:
				Element:span
					u'NEW'
				Element:span
					,
				Element:span
					'amount_refunded'
				Element:span
					:
				Element:span
					0
				Element:span
					,
				Element:span
					'status_id'
				Element:span
					:
				Element:span
					10
				Element:span
					,
				Element:span
					'order_id'
				Element:span
					:
				Element:span
					u'1465889517'
				Element:span
					,
				Element:span
					'refunded'
				Element:span
					:
				Element:span
					False
				Element:span
					,
				Element:span
					'currency'
				Element:span
					:
				Element:span
					u'INR'
				Element:span
					,
				Element:span
					'amount'
				Element:span
					:
				Element:span
					1000
				Element:span
					,
				Element:span
					'merchant_id'
				Element:span
					:
				Element:span
					u'myshop'
				Element:span
					,
				Element:span
					<
				Element:span
					PaymentLink
				Element:span
					>
				Element:span
					{
				Element:span
					'web'
				Element:span
					:
				Element:span
					u'https://api.juspay.in/merchant/pay/ord_e294a26e66ad4336a992ceab81ad704c'
				Element:span
					,
				Element:span
					'mobile'
				Element:span
					:
				Element:span
					u'https://api.juspay.in/merchant/pay/ord_e294a26e66ad4336a992ceab81ad704c?mobile=true'
				Element:span
					,
				Element:span
					'iframe'
				Element:span
					:
				Element:span
					u'https://api.juspay.in/merchant/ipay/ord_e294a26e66ad4336a992ceab81ad704c'
				Element:span
					}
				Element:span
					}
				Element:span
					,
				Element:span
					...
				Element:span
					],
				Element:span
					'offset'
				Element:span
					:
				Element:span
					0
				Element:span
					}
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					<
				Element:span
					hashmap
				Element:span
					>
				Element:span
					{
				Element:span
					:count
				Element:span
					=>
				Element:span
					10
				Element:span
					,
				Element:span
					:total
				Element:span
					=>
				Element:span
					987
				Element:span
					,
				Element:span
					:list
				Element:span
					=>
				Element:span
					[
				Element:span
					<
				Element:span
					Orders
				Element:span
					::
				Element:span
					Order
				Element:span
					:
				Element:span
					0x00000a
				Element:span
					>
				Element:span
					{
				Element:span
					@status
				Element:span
					=
				Element:span
					"NEW"
				Element:span
					,
				Element:span
					@amount_refunded
				Element:span
					=
				Element:span
					0
				Element:span
					,
				Element:span
					@status_id
				Element:span
					=
				Element:span
					10
				Element:span
					,
				Element:span
					@order_id
				Element:span
					=
				Element:span
					"1465889517"
				Element:span
					,
				Element:span
					@refunded
				Element:span
					=
				Element:span
					false
				Element:span
					,
				Element:span
					@currency
				Element:span
					=
				Element:span
					"INR"
				Element:span
					,
				Element:span
					@amount
				Element:span
					=
				Element:span
					1000
				Element:span
					,
				Element:span
					@merchant_id
				Element:span
					=
				Element:span
					"myshop"
				Element:span
					,
				Element:span
					<
				Element:span
					PaymentLink
				Element:span
					:
				Element:span
					0x00000a
				Element:span
					>
				Element:span
					{
				Element:span
					@web
				Element:span
					:
				Element:span
					"https://api.juspay.in/merchant/pay/ord_e294a26e66ad4336a992ceab81ad704c"
				Element:span
					,
				Element:span
					@mobile
				Element:span
					:
				Element:span
					"https://api.juspay.in/merchant/pay/ord_e294a26e66ad4336a992ceab81ad704c?mobile=true"
				Element:span
					,
				Element:span
					@iframe
				Element:span
					:
				Element:span
					"https://api.juspay.in/merchant/ipay/ord_e294a26e66ad4336a992ceab81ad704c"
				Element:span
					}
				Element:span
					}
				Element:span
					,
				Element:span
					.
				Element:span
					.
				Element:span
					.
				Element:span
					],
				Element:span
					:offset
				Element:span
					=>
				Element:span
					0
				Element:span
					}
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					OrderList
				Element:span
					Object
				Element:span
					(
				Element:span
					count
				Element:span
					=>
				Element:span
					10
				Element:span
					total
				Element:span
					=>
				Element:span
					987
				Element:span
					offset
				Element:span
					=>
				Element:span
					0
				Element:span
					list
				Element:span
					=>
				Element:span
					(
				Element:span
					[
				Element:span
					0
				Element:span
					]
				Element:span
					=>
				Element:span
					Order
				Element:span
					Object
				Element:span
					(
				Element:span
					[
				Element:span
					status
				Element:span
					]
				Element:span
					=>
				Element:span
					NEW
				Element:span
					[
				Element:span
					amount_refunded
				Element:span
					]
				Element:span
					=>
				Element:span
					0
				Element:span
					[
				Element:span
					status_id
				Element:span
					]
				Element:span
					=>
				Element:span
					10
				Element:span
					[
				Element:span
					order_id
				Element:span
					]
				Element:span
					=>
				Element:span
					1465889517
				Element:span
					[
				Element:span
					refunded
				Element:span
					]
				Element:span
					=>
				Element:span
					False
				Element:span
					[
				Element:span
					currency
				Element:span
					]
				Element:span
					=>
				Element:span
					INR
				Element:span
					[
				Element:span
					amount
				Element:span
					]
				Element:span
					=>
				Element:span
					1000
				Element:span
					[
				Element:span
					merchant_id
				Element:span
					]
				Element:span
					=>
				Element:span
					myshop
				Element:span
					[
				Element:span
					PaymentLinks
				Element:span
					]
				Element:span
					=>
				Element:span
					(
				Element:span
					[
				Element:span
					web
				Element:span
					]
				Element:span
					:
				Element:span
					https
				Element:span
					://
				Element:span
					api
				Element:span
					.
				Element:span
					juspay
				Element:span
					.
				Element:span
					in
				Element:span
					/
				Element:span
					merchant
				Element:span
					/
				Element:span
					pay
				Element:span
					/
				Element:span
					ord_e294a26e66ad4336a992ceab81ad704c
				Element:span
					[
				Element:span
					mobile
				Element:span
					]
				Element:span
					:
				Element:span
					https
				Element:span
					://
				Element:span
					api
				Element:span
					.
				Element:span
					juspay
				Element:span
					.
				Element:span
					in
				Element:span
					/
				Element:span
					merchant
				Element:span
					/
				Element:span
					pay
				Element:span
					/
				Element:span
					ord_e294a26e66ad4336a992ceab81ad704c
				Element:span
					?
				Element:span
					mobile
				Element:span
					=
				Element:span
					true
				Element:span
					[
				Element:span
					iframe
				Element:span
					]
				Element:span
					:
				Element:span
					https
				Element:span
					://
				Element:span
					api
				Element:span
					.
				Element:span
					juspay
				Element:span
					.
				Element:span
					in
				Element:span
					/
				Element:span
					merchant
				Element:span
					/
				Element:span
					ipay
				Element:span
					/
				Element:span
					ord_e294a26e66ad4336a992ceab81ad704c
				Element:span
					)
				Element:span
					)
				Element:span
					,
				Element:span
					...
				Element:span
					)
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					@object
				Element:span
					in
				Element:span
					.
				Element:span
					juspay
				Element:span
					.
				Element:span
					model
				Element:span
					.
				Element:span
					OrderList
				Element:span
					JSON:
				Element:span
					{
				Element:span
					"list"
				Element:span
					:
				Element:span
					[
				Element:span
					{
				Element:span
					"merchant_id"
				Element:span
					:
				Element:span
					"nspi"
				Element:span
					,
				Element:span
					"order_id"
				Element:span
					:
				Element:span
					"2IWz8U9PRriq5cgd_oBhAg"
				Element:span
					,
				Element:span
					"customer_id"
				Element:span
					:
				Element:span
					"user@mail.com"
				Element:span
					,
				Element:span
					"customer_email"
				Element:span
					:
				Element:span
					"user@mail.com"
				Element:span
					,
				Element:span
					"customer_phone"
				Element:span
					:
				Element:span
					null
				Element:span
					,
				Element:span
					"product_id"
				Element:span
					:
				Element:span
					""
				Element:span
					,
				Element:span
					"status"
				Element:span
					:
				Element:span
					"NEW"
				Element:span
					,
				Element:span
					"status_id"
				Element:span
					:
				Element:span
					10
				Element:span
					,
				Element:span
					"amount"
				Element:span
					:
				Element:span
					600
				Element:span
					,
				Element:span
					"currency"
				Element:span
					:
				Element:span
					"INR"
				Element:span
					,
				Element:span
					"refunded"
				Element:span
					:
				Element:span
					false
				Element:span
					,
				Element:span
					"amount_refunded"
				Element:span
					:
				Element:span
					0
				Element:span
					,
				Element:span
					"return_url"
				Element:span
					:
				Element:span
					"http://www.merchant.in/order/confirm"
				Element:span
					,
				Element:span
					"udf1"
				Element:span
					:
				Element:span
					""
				Element:span
					,
				Element:span
					"udf2"
				Element:span
					:
				Element:span
					""
				Element:span
					,
				Element:span
					"udf3"
				Element:span
					:
				Element:span
					""
				Element:span
					,
				Element:span
					"udf4"
				Element:span
					:
				Element:span
					""
				Element:span
					,
				Element:span
					"udf5"
				Element:span
					:
				Element:span
					""
				Element:span
					,
				Element:span
					"udf6"
				Element:span
					:
				Element:span
					""
				Element:span
					,
				Element:span
					"udf7"
				Element:span
					:
				Element:span
					""
				Element:span
					,
				Element:span
					"udf8"
				Element:span
					:
				Element:span
					""
				Element:span
					,
				Element:span
					"udf9"
				Element:span
					:
				Element:span
					""
				Element:span
					,
				Element:span
					"udf10"
				Element:span
					:
				Element:span
					""
				Element:span
					,
				Element:span
					"payment_links"
				Element:span
					:
				Element:span
					{
				Element:span
					"web"
				Element:span
					:
				Element:span
					"https://api.juspay.in/merchant/pay/ord_e294a26e66ad4336a992ceab81ad704c"
				Element:span
					"mobile"
				Element:span
					:
				Element:span
					"https://api.juspay.in/merchant/pay/ord_e294a26e66ad4336a992ceab81ad704c?mobile=true"
				Element:span
					"iframe"
				Element:span
					:
				Element:span
					"https://api.juspay.in/merchant/ipay/ord_e294a26e66ad4336a992ceab81ad704c"
				Element:span
					}
				Element:span
					}
				Element:span
					...
				Element:span
					],
				Element:span
					"count"
				Element:span
					:
				Element:span
					10
				Element:span
					,
				Element:span
					"offset"
				Element:span
					:
				Element:span
					0
				Element:span
					,
				Element:span
					"total"
				Element:span
					:
				Element:span
					91604
				Element:span
					}
			Node:
			(type) c
			(layer)1
				Element:h4
					Response Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Field
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					list
				Element:td
					Object
				Element:td
					This attribute contains an array of orders. Each of the order contains all the information associated with it.
				Element:tr
				Element:td
					count
				Element:td
					Integer
				Element:td
					Number of objects returned.
				Element:tr
				Element:td
					offset
				Element:td
					Integer
				Element:td
					The number of orders that was skipped in the search result. Matches the input.
				Element:tr
				Element:td
					total
				Element:td
					Integer
				Element:td
					The total number of orders that matched he search criteria.
			Node:
			(type) c
			(layer)1
				Element:h2
					Update Order
			Node:
			(type) c
			(layer)1
				Element:p
					Update an order that has already been created. Only amount, address and udf fields can be updated. Address fields can be optionally sent as explained in the
				Element:code
					/order/create
					API.
			Node:
			(type) c
			(layer)1
				Element:p
					Return
			Node:
			(type) c
			(layer)1
				Element:p
					The API returns a response that is same as that of
				Element:code
					/order/status
					call.
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Definition
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					POST https://api.juspay.in/orders/:order_id
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					Order
				Element:span
					.
				Element:span
					update
				Element:span
					(
				Element:span
					String
				Element:span
					orderId
				Element:span
					,
				Element:span
					Map
				Element:span
					params
				Element:span
					);
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example Request
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -X POST https://api.juspay.in/orders/1418394476
				Element:span
					\
					-u api_key:
				Element:span
					\
					-d
				Element:span
					"amount=90.00"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					Juspay
				Element:span
					.
				Element:span
					Orders
				Element:span
					.
				Element:span
					update
				Element:span
					(
				Element:span
					order_id
				Element:span
					=
				Element:span
					'1465829015'
				Element:span
					,
				Element:span
					amount
				Element:span
					=
				Element:span
					1000
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					Orders
				Element:span
					.
				Element:span
					update
				Element:span
					(
				Element:span
					:order_id
				Element:span
					=>
				Element:span
					'1465829015'
				Element:span
					,
				Element:span
					:amount
				Element:span
					=>
				Element:span
					1000
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					$params
				Element:span
					=
				Element:span
					array
				Element:span
					()
				Element:span
					$params
				Element:span
					[
				Element:span
					'order_id'
				Element:span
					]
				Element:span
					=
				Element:span
					"1465829015"
				Element:span
					;
				Element:span
					$params
				Element:span
					[
				Element:span
					'amount'
				Element:span
					]
				Element:span
					=
				Element:span
					1000
				Element:span
					;
				Element:span
					$response
				Element:span
					=
				Element:span
					Order
				Element:span
					::
				Element:span
					update
				Element:span
					(
				Element:span
					$params
				Element:span
					);
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					String
				Element:span
					orderId
				Element:span
					=
				Element:span
					"1465829015"
				Element:span
					;
				Element:span
					Map
				Element:span
					<
				Element:span
					String
				Element:span
					,
				Element:span
					Object
				Element:span
					>
				Element:span
					params
				Element:span
					=
				Element:span
					new
				Element:span
					LinkedHashMap
				Element:span
					();
				Element:span
					params
				Element:span
					.
				Element:span
					put
				Element:span
					(
				Element:span
					"amount"
				Element:span
					,
				Element:span
					1000
				Element:span
					);
				Element:span
					Order
				Element:span
					.
				Element:span
					update
				Element:span
					(
				Element:span
					orderId
				Element:span
					,
				Element:span
					params
				Element:span
					);
			Node:
			(type) c
			(layer)1
				Element:h4
					URL Embedded Parameter
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Field
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					order_id
				Element:br
				Element:code
					Required
				Element:td
					String
				Element:td
					Order ID
			Node:
			(type) c
			(layer)1
				Element:h4
					Request Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Field
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					order_id
				Element:br
				Element:code
					Required
				Element:td
					String
				Element:td
					Unique Identifier for the order.
				Element:tr
				Element:td
					amount
				Element:br
				Element:code
					Required
				Element:td
					Double
				Element:td
					New amount value.
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example Response
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
					"merchant_id"
					:
				Element:span
					"test"
					,
				Element:span
					"customer_id"
					:
				Element:span
					"193526"
					,
				Element:span
					"order_id"
					:
				Element:span
					"1418394476"
					,
				Element:span
					"status"
					:
				Element:span
					"NEW"
					,
				Element:span
					"status_id"
					: 10,
				Element:span
					"amount"
					: 90,
				Element:span
					"refunded"
					:
				Element:span
					false
					,
				Element:span
					"amount_refunded"
					: 0,
				Element:span
					"payment_links"
					:
				Element:span
					{
				Element:span
					"web"
					:
				Element:span
					"https://api.juspay.in/merchant/pay/ord_e294a26e66ad4336a992ceab81ad704c"
				Element:span
					"mobile"
					:
				Element:span
					"https://api.juspay.in/merchant/pay/ord_e294a26e66ad4336a992ceab81ad704c?mobile=true"
				Element:span
					"iframe"
					:
				Element:span
					"https://api.juspay.in/merchant/ipay/ord_e294a26e66ad4336a992ceab81ad704c"
				Element:span
					}
				Element:span
					}
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					<
				Element:span
					Order
				Element:span
					>
				Element:span
					{
				Element:span
					'status'
				Element:span
					:
				Element:span
					u'NEW'
				Element:span
					,
				Element:span
					'amount_refunded'
				Element:span
					:
				Element:span
					0
				Element:span
					,
				Element:span
					'status_id'
				Element:span
					:
				Element:span
					10
				Element:span
					,
				Element:span
					'order_id'
				Element:span
					:
				Element:span
					u'1465829015'
				Element:span
					,
				Element:span
					'refunded'
				Element:span
					:
				Element:span
					False
				Element:span
					,
				Element:span
					'currency'
				Element:span
					:
				Element:span
					u'INR'
				Element:span
					,
				Element:span
					'amount'
				Element:span
					:
				Element:span
					1000
				Element:span
					,
				Element:span
					'merchant_id'
				Element:span
					:
				Element:span
					u'shreyas'
				Element:span
					,
				Element:span
					<
				Element:span
					PaymentLink
				Element:span
					>
				Element:span
					{
				Element:span
					'web'
				Element:span
					:
				Element:span
					u'https://api.juspay.in/merchant/pay/ord_e294a26e66ad4336a992ceab81ad704c'
				Element:span
					,
				Element:span
					'mobile'
				Element:span
					:
				Element:span
					u'https://api.juspay.in/merchant/pay/ord_e294a26e66ad4336a992ceab81ad704c?mobile=true'
				Element:span
					,
				Element:span
					'iframe'
				Element:span
					:
				Element:span
					u'https://api.juspay.in/merchant/ipay/ord_e294a26e66ad4336a992ceab81ad704c'
				Element:span
					}
				Element:span
					}
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					<
				Element:span
					Orders
				Element:span
					::
				Element:span
					Order
				Element:span
					:
				Element:span
					0x00000a
				Element:span
					>
				Element:span
					{
				Element:span
					@status
				Element:span
					=
				Element:span
					"NEW"
				Element:span
					,
				Element:span
					@amount_refunded
				Element:span
					=
				Element:span
					0
				Element:span
					,
				Element:span
					@status_id
				Element:span
					=
				Element:span
					10
				Element:span
					,
				Element:span
					@order_id
				Element:span
					=
				Element:span
					"1465829015"
				Element:span
					,
				Element:span
					@refunded
				Element:span
					=
				Element:span
					false
				Element:span
					,
				Element:span
					@currency
				Element:span
					=
				Element:span
					"INR"
				Element:span
					,
				Element:span
					@amount
				Element:span
					=
				Element:span
					1000
				Element:span
					,
				Element:span
					@merchant_id
				Element:span
					=
				Element:span
					"shreyas"
				Element:span
					,
				Element:span
					<
				Element:span
					PaymentLink
				Element:span
					:
				Element:span
					0x00000a
				Element:span
					>
				Element:span
					{
				Element:span
					@web
				Element:span
					:
				Element:span
					"https://api.juspay.in/merchant/pay/ord_e294a26e66ad4336a992ceab81ad704c"
				Element:span
					,
				Element:span
					@mobile
				Element:span
					:
				Element:span
					"https://api.juspay.in/merchant/pay/ord_e294a26e66ad4336a992ceab81ad704c?mobile=true"
				Element:span
					,
				Element:span
					@iframe
				Element:span
					:
				Element:span
					"https://api.juspay.in/merchant/ipay/ord_e294a26e66ad4336a992ceab81ad704c"
				Element:span
					}
				Element:span
					}
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					Order
				Element:span
					Object
				Element:span
					(
				Element:span
					[
				Element:span
					status
				Element:span
					]
				Element:span
					=>
				Element:span
					NEW
				Element:span
					[
				Element:span
					amount_refunded
				Element:span
					]
				Element:span
					=>
				Element:span
					0
				Element:span
					[
				Element:span
					status_id
				Element:span
					]
				Element:span
					=>
				Element:span
					10
				Element:span
					[
				Element:span
					order_id
				Element:span
					]
				Element:span
					=>
				Element:span
					145678234
				Element:span
					[
				Element:span
					refunded
				Element:span
					]
				Element:span
					=>
				Element:span
					False
				Element:span
					[
				Element:span
					currency
				Element:span
					]
				Element:span
					=>
				Element:span
					INR
				Element:span
					[
				Element:span
					amount
				Element:span
					]
				Element:span
					=>
				Element:span
					1000
				Element:span
					[
				Element:span
					merchant_id
				Element:span
					]
				Element:span
					=>
				Element:span
					shreyas
				Element:span
					[
				Element:span
					PaymentLinks
				Element:span
					]
				Element:span
					=>
				Element:span
					(
				Element:span
					[
				Element:span
					web
				Element:span
					]
				Element:span
					:
				Element:span
					https
				Element:span
					://
				Element:span
					api
				Element:span
					.
				Element:span
					juspay
				Element:span
					.
				Element:span
					in
				Element:span
					/
				Element:span
					merchant
				Element:span
					/
				Element:span
					pay
				Element:span
					/
				Element:span
					ord_e294a26e66ad4336a992ceab81ad704c
				Element:span
					[
				Element:span
					mobile
				Element:span
					]
				Element:span
					:
				Element:span
					https
				Element:span
					://
				Element:span
					api
				Element:span
					.
				Element:span
					juspay
				Element:span
					.
				Element:span
					in
				Element:span
					/
				Element:span
					merchant
				Element:span
					/
				Element:span
					pay
				Element:span
					/
				Element:span
					ord_e294a26e66ad4336a992ceab81ad704c
				Element:span
					?
				Element:span
					mobile
				Element:span
					=
				Element:span
					true
				Element:span
					[
				Element:span
					iframe
				Element:span
					]
				Element:span
					:
				Element:span
					https
				Element:span
					://
				Element:span
					api
				Element:span
					.
				Element:span
					juspay
				Element:span
					.
				Element:span
					in
				Element:span
					/
				Element:span
					merchant
				Element:span
					/
				Element:span
					ipay
				Element:span
					/
				Element:span
					ord_e294a26e66ad4336a992ceab81ad704c
				Element:span
					)
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					@object
				Element:span
					in
				Element:span
					.
				Element:span
					juspay
				Element:span
					.
				Element:span
					model
				Element:span
					.
				Element:span
					Order
				Element:span
					JSON:
				Element:span
					{
				Element:span
					"merchant_id"
				Element:span
					:
				Element:span
					"test"
				Element:span
					,
				Element:span
					"customer_id"
				Element:span
					:
				Element:span
					"193526"
				Element:span
					,
				Element:span
					"order_id"
				Element:span
					:
				Element:span
					"1418394476"
				Element:span
					,
				Element:span
					"status"
				Element:span
					:
				Element:span
					"NEW"
				Element:span
					,
				Element:span
					"status_id"
				Element:span
					:
				Element:span
					10
				Element:span
					,
				Element:span
					"amount"
				Element:span
					:
				Element:span
					90
				Element:span
					,
				Element:span
					"refunded"
				Element:span
					:
				Element:span
					false
				Element:span
					,
				Element:span
					"amount_refunded"
				Element:span
					:
				Element:span
					0
				Element:span
					"payment_links"
				Element:span
					:
				Element:span
					{
				Element:span
					"web"
				Element:span
					:
				Element:span
					"https://api.juspay.in/merchant/pay/ord_e294a26e66ad4336a992ceab81ad704c"
				Element:span
					"mobile"
				Element:span
					:
				Element:span
					"https://api.juspay.in/merchant/pay/ord_e294a26e66ad4336a992ceab81ad704c?mobile=true"
				Element:span
					"iframe"
				Element:span
					:
				Element:span
					"https://api.juspay.in/merchant/ipay/ord_e294a26e66ad4336a992ceab81ad704c"
				Element:span
					}
				Element:span
					}
			Node:
			(type) c
			(layer)1
				Element:h2
					Refund order
			Node:
			(type) c
			(layer)1
				Element:p
					Create a refund for a payment.
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Definition
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					POST https://api.juspay.in/orders/:order_id/refunds
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					Order
				Element:span
					.
				Element:span
					refund
				Element:span
					(
				Element:span
					String
				Element:span
					orderId
				Element:span
					,
				Element:span
					Map
				Element:span
					params
				Element:span
					);
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example Request
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -X POST https://api.juspay.in/orders/1418394476/refunds
				Element:span
					\
					-u api_key:
				Element:span
					\
					-d
				Element:span
					"unique_request_id=1"
				Element:span
					\
					-d
				Element:span
					"amount=100.00"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					Juspay
				Element:span
					.
				Element:span
					Orders
				Element:span
					.
				Element:span
					refund
				Element:span
					(
				Element:span
					unique_request_id
				Element:span
					=
				Element:span
					'99'
				Element:span
					,
				Element:span
					order_id
				Element:span
					=
				Element:span
					'1465833326'
				Element:span
					,
				Element:span
					amount
				Element:span
					=
				Element:span
					10
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					Orders
				Element:span
					.
				Element:span
					refund
				Element:span
					(
				Element:span
					:unique_request_id
				Element:span
					=>
				Element:span
					'99'
				Element:span
					,
				Element:span
					:order_id
				Element:span
					=>
				Element:span
					'1465833326'
				Element:span
					,
				Element:span
					:amount
				Element:span
					=>
				Element:span
					10
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					params
				Element:span
					=
				Element:span
					array
				Element:span
					();
				Element:span
					$params
				Element:span
					[
				Element:span
					'unique_request_id'
				Element:span
					]
				Element:span
					=
				Element:span
					"99"
				Element:span
					;
				Element:span
					$params
				Element:span
					[
				Element:span
					'order_id'
				Element:span
					]
				Element:span
					=
				Element:span
					"1465833326"
				Element:span
					,
				Element:span
					$params
				Element:span
					[
				Element:span
					'amount'
				Element:span
					]
				Element:span
					=
				Element:span
					10
				Element:span
					;
				Element:span
					$response
				Element:span
					=
				Element:span
					Order
				Element:span
					::
				Element:span
					refund
				Element:span
					(
				Element:span
					$params
				Element:span
					);
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					String
				Element:span
					orderId
				Element:span
					=
				Element:span
					"1465833326"
				Element:span
					;
				Element:span
					Map
				Element:span
					<
				Element:span
					String
				Element:span
					,
				Element:span
					Object
				Element:span
					>
				Element:span
					params
				Element:span
					=
				Element:span
					new
				Element:span
					LinkedHashMap
				Element:span
					();
				Element:span
					params
				Element:span
					.
				Element:span
					put
				Element:span
					(
				Element:span
					"unique_request_id"
				Element:span
					,
				Element:span
					"99"
				Element:span
					);
				Element:span
					params
				Element:span
					.
				Element:span
					put
				Element:span
					(
				Element:span
					"amount"
				Element:span
					,
				Element:span
					10
				Element:span
					);
				Element:span
					Order
				Element:span
					order
				Element:span
					=
				Element:span
					Order
				Element:span
					.
				Element:span
					refund
				Element:span
					(
				Element:span
					orderId
				Element:span
					,
				Element:span
					params
				Element:span
					);
			Node:
			(type) c
			(layer)1
				Element:h4
					URL Embedded Parameter
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Field
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					order_id
				Element:br
				Element:code
					Required
				Element:td
					String
				Element:td
					Use the order ID that was used while creating the Order.
			Node:
			(type) c
			(layer)1
				Element:h4
					Request Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Field
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					unique_request_id
				Element:br
				Element:code
					Required
				Element:td
					String
				Element:td
					Request ID that uniquely identifies this request. You cannot reuse the value for two different refund requests. This is to avoid processing duplicate refund requests. A good candidate for
				Element:code
					unique_request_id
					would be your database primary key.
				Element:tr
				Element:td
					order_id
				Element:br
				Element:code
					Required
				Element:td
					String
				Element:td
					Send this as request parameter when using server SDK. Order ID for which the refund has to be processed
				Element:tr
				Element:td
					amount
				Element:td
					Double
				Element:td
					Amount that has to be refunded. Amount has to be less than or equal to the amount of the order that is not yet refunded. If this parameter is not passed, then the order is refunded entirely
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example Response
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
					"merchant_id"
					:
				Element:span
					"test"
					,
				Element:span
					"customer_id"
					:
				Element:span
					"193526"
					,
				Element:span
					"order_id"
					:
				Element:span
					"17027265"
					,
				Element:span
					"status"
					:
				Element:span
					"CHARGED"
					,
				Element:span
					"status_id"
					: 21,
				Element:span
					"amount"
					: 2400,
				Element:span
					"txn_id"
					:
				Element:span
					"test-17027265-001"
					,
				Element:span
					"gateway_id"
					: 1,
				Element:span
					"bank_error_code"
					:
				Element:span
					""
					,
				Element:span
					"bank_error_message"
					:
				Element:span
					""
					,
				Element:span
					"card"
					:
				Element:span
					{
				Element:span
					"last_four_digits"
					:
				Element:span
					""
					,
				Element:span
					"expiry_month"
					:
				Element:span
					"07"
					,
				Element:span
					"expiry_year"
					:
				Element:span
					"2013"
					,
				Element:span
					"name_on_card"
					:
				Element:span
					""
				Element:span
					}
					,
				Element:span
					"payment_gateway_response"
					:
				Element:span
					{
				Element:span
					"rrn"
					:
				Element:span
					"306721283931"
					,
				Element:span
					"epg_txn_id"
					:
				Element:span
					"1900005"
					,
				Element:span
					"auth_id_code"
					:
				Element:span
					"T15672"
					,
				Element:span
					"txn_id"
					:
				Element:span
					"test-17027265-001"
					,
				Element:span
					"resp_code"
					:
				Element:span
					"0"
					,
				Element:span
					"resp_message"
					:
				Element:span
					"Approved"
				Element:span
					}
					,
				Element:span
					"refunded"
					:
				Element:span
					false
					,
				Element:span
					"amount_refunded"
					: 100,
				Element:span
					"refunds"
					:
				Element:span
					[
				Element:span
					{
				Element:span
					"id"
					:
				Element:span
					"refund_id"
					,
				Element:span
					"ref"
					:
				Element:span
					"bank_reference_no"
					,
				Element:span
					"amount"
					: 100,
				Element:span
					"created"
					:
				Element:span
					"2013-02-07 23:11:11"
					,
				Element:span
					"status"
					:
				Element:span
					"SUCCESS"
				Element:span
					}
				Element:span
					]
				Element:span
					}
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					<
				Element:span
					Order
				Element:span
					>
				Element:span
					{
				Element:span
					'gateway_id'
				Element:span
					:
				Element:span
					100
				Element:span
					,
				Element:span
					'status'
				Element:span
					:
				Element:span
					u'CHARGED'
				Element:span
					,
				Element:span
					'customer_email'
				Element:span
					:
				Element:span
					u'user@gmail.com'
				Element:span
					,
				Element:span
					'txn_id'
				Element:span
					:
				Element:span
					u'txn-1465833326-1'
				Element:span
					,
				Element:span
					'refunds'
				Element:span
					:
				Element:span
					[
				Element:span
					<
				Element:span
					Refund
				Element:span
					>
				Element:span
					{
				Element:span
					'status'
				Element:span
					:
				Element:span
					u'SUCCESS'
				Element:span
					,
				Element:span
					'amount'
				Element:span
					:
				Element:span
					10
				Element:span
					,
				Element:span
					'created'
				Element:span
					:
				Element:span
					u'2016-06-13T15:19:34Z'
				Element:span
					},
				Element:span
					],
				Element:span
					'amount_refunded'
				Element:span
					:
				Element:span
					10
				Element:span
					,
				Element:span
					'order_id'
				Element:span
					:
				Element:span
					u'1465833326'
				Element:span
					,
				Element:span
					'refunded'
				Element:span
					:
				Element:span
					False
				Element:span
					,
				Element:span
					'status_id'
				Element:span
					:
				Element:span
					21
				Element:span
					,
				Element:span
					'bank_error_code'
				Element:span
					:
				Element:span
					u'0'
				Element:span
					,
				Element:span
					'bank_error_message'
				Element:span
					:
				Element:span
					u'Payment Successful'
				Element:span
					,
				Element:span
					'gateway_response'
				Element:span
					:
				Element:span
					<
				Element:span
					GatewayResponse
				Element:span
					>
				Element:span
					{
				Element:span
					'epg_txn_id'
				Element:span
					:
				Element:span
					u'1465831091168'
				Element:span
					,
				Element:span
					'auth_id_code'
				Element:span
					:
				Element:span
					u'834050'
				Element:span
					,
				Element:span
					'resp_code'
				Element:span
					:
				Element:span
					u'0'
				Element:span
					,
				Element:span
					'txn_id'
				Element:span
					:
				Element:span
					u'txn-1465833326-1'
				Element:span
					,
				Element:span
					'resp_message'
				Element:span
					:
				Element:span
					u'Payment Successful'
				Element:span
					,
				Element:span
					}
				Element:span
					,
				Element:span
					'currency'
				Element:span
					:
				Element:span
					u'INR'
				Element:span
					,
				Element:span
					'amount'
				Element:span
					:
				Element:span
					1000
				Element:span
					,
				Element:span
					'merchant_id'
				Element:span
					:
				Element:span
					u'shop'
				Element:span
					,
				Element:span
					'customer_id'
				Element:span
					:
				Element:span
					u'shop_user_101'
				Element:span
					,
				Element:span
					'card'
				Element:span
					:
				Element:span
					<
				Element:span
					Card
				Element:span
					>
				Element:span
					{
				Element:span
					'isin'
				Element:span
					:
				Element:span
					u'424242'
				Element:span
					,
				Element:span
					'brand'
				Element:span
					:
				Element:span
					u'VISA'
				Element:span
					,
				Element:span
					'type'
				Element:span
					:
				Element:span
					u'CREDIT'
				Element:span
					,
				Element:span
					'fingerprint'
				Element:span
					:
				Element:span
					u'3rfeetv0blcc6bkroo4rvkjk62'
				Element:span
					,
				Element:span
					}
				Element:span
					,
				Element:span
					}
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					<
				Element:span
					Orders
				Element:span
					::
				Element:span
					Order
				Element:span
					:
				Element:span
					0x00000a
				Element:span
					>
				Element:span
					{
				Element:span
					@gateway_id
				Element:span
					=
				Element:span
					100
				Element:span
					,
				Element:span
					@status
				Element:span
					=
				Element:span
					"CHARGED"
				Element:span
					,
				Element:span
					@customer_email
				Element:span
					=
				Element:span
					"user@gmail.com"
				Element:span
					,
				Element:span
					@txn_id
				Element:span
					=
				Element:span
					"txn-1465833326-1"
				Element:span
					,
				Element:span
					@refunds
				Element:span
					=
				Element:span
					[
				Element:span
					<
				Element:span
					Orders
				Element:span
					::
				Element:span
					Order
				Element:span
					::
				Element:span
					Refund
				Element:span
					:
				Element:span
					0x00000b
				Element:span
					>
				Element:span
					{
				Element:span
					@status
				Element:span
					=
				Element:span
					"SUCCESS"
				Element:span
					,
				Element:span
					@amount
				Element:span
					=
				Element:span
					10
				Element:span
					,
				Element:span
					@created
				Element:span
					=
				Element:span
					"2016-06-13T15:19:34Z"
				Element:span
					},
				Element:span
					],
				Element:span
					@amount_refunded
				Element:span
					=
				Element:span
					10
				Element:span
					,
				Element:span
					@order_id
				Element:span
					=
				Element:span
					"1465833326"
				Element:span
					,
				Element:span
					@refunded
				Element:span
					=
				Element:span
					false
				Element:span
					,
				Element:span
					@status_id
				Element:span
					=
				Element:span
					21
				Element:span
					,
				Element:span
					@bank_error_code
				Element:span
					=
				Element:span
					"0"
				Element:span
					,
				Element:span
					@bank_error_message
				Element:span
					=
				Element:span
					"Payment Successful"
				Element:span
					,
				Element:span
					@gateway_response
				Element:span
					=
				Element:span
					<
				Element:span
					Orders
				Element:span
					::
				Element:span
					Order
				Element:span
					::
				Element:span
					GatewayResponse
				Element:span
					:
				Element:span
					0x00000c
				Element:span
					>
				Element:span
					{
				Element:span
					@epg_txn_id
				Element:span
					=
				Element:span
					"1465831091168"
				Element:span
					,
				Element:span
					@auth_id_code
				Element:span
					=
				Element:span
					"834050"
				Element:span
					,
				Element:span
					@resp_code
				Element:span
					=
				Element:span
					"0"
				Element:span
					,
				Element:span
					@txn_id
				Element:span
					=
				Element:span
					"txn-1465833326-1"
				Element:span
					,
				Element:span
					@resp_message
				Element:span
					=
				Element:span
					"Payment Successful"
				Element:span
					,
				Element:span
					},
				Element:span
					@currency
				Element:span
					=
				Element:span
					"INR"
				Element:span
					,
				Element:span
					@amount
				Element:span
					=
				Element:span
					1000
				Element:span
					,
				Element:span
					@merchant_id
				Element:span
					=
				Element:span
					"shop"
				Element:span
					,
				Element:span
					@customer_id
				Element:span
					=
				Element:span
					"shop_user_101"
				Element:span
					,
				Element:span
					@card
				Element:span
					=
				Element:span
					<
				Element:span
					Cards
				Element:span
					::
				Element:span
					Card
				Element:span
					:
				Element:span
					0x00000d
				Element:span
					>
				Element:span
					{
				Element:span
					@isin
				Element:span
					=
				Element:span
					"424242"
				Element:span
					,
				Element:span
					@brand
				Element:span
					:
				Element:span
					"VISA"
				Element:span
					,
				Element:span
					@type
				Element:span
					:
				Element:span
					"CREDIT"
				Element:span
					,
				Element:span
					@fingerprint
				Element:span
					=
				Element:span
					"3rfeetv0blcc6bkroo4rvkjk62"
				Element:span
					,
				Element:span
					}
				Element:span
					,
				Element:span
					}
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					Order
				Element:span
					Object
				Element:span
					(
				Element:span
					[
				Element:span
					gateway_id
				Element:span
					]
				Element:span
					=>
				Element:span
					100
				Element:span
					,
				Element:span
					[
				Element:span
					status
				Element:span
					]
				Element:span
					=>
				Element:span
					CHARGED
				Element:span
					[
				Element:span
					customer_email
				Element:span
					]
				Element:span
					=>
				Element:span
					user
				Element:span
					@
				Element:span
					gmail
				Element:span
					.
				Element:span
					com
				Element:span
					[
				Element:span
					txn_id
				Element:span
					]
				Element:span
					=>
				Element:span
					txn
				Element:span
					-
				Element:span
					1465833326
				Element:span
					-
				Element:span
					1
				Element:span
					[
				Element:span
					refunds
				Element:span
					]
				Element:span
					=>
				Element:span
					(
				Element:span
					[
				Element:span
					0
				Element:span
					]
				Element:span
					=>
				Element:span
					Refund
				Element:span
					Object
				Element:span
					(
				Element:span
					[
				Element:span
					status
				Element:span
					]
				Element:span
					=>
				Element:span
					SUCCESS
				Element:span
					[
				Element:span
					amount
				Element:span
					]
				Element:span
					=>
				Element:span
					10
				Element:span
					,
				Element:span
					[
				Element:span
					created
				Element:span
					]
				Element:span
					=>
				Element:span
					2016
				Element:span
					-
				Element:span
					06
				Element:span
					-
				Element:span
					13
				Element:span
					T15
				Element:span
					:
				Element:span
					19
				Element:span
					:
				Element:span
					34
				Element:span
					Z
				Element:span
					),
				Element:span
					),
				Element:span
					[
				Element:span
					amount_refunded
				Element:span
					]
				Element:span
					=>
				Element:span
					10
				Element:span
					,
				Element:span
					[
				Element:span
					order_id
				Element:span
					]
				Element:span
					=>
				Element:span
					1465833326
				Element:span
					[
				Element:span
					refunded
				Element:span
					]
				Element:span
					=>
				Element:span
					False
				Element:span
					,
				Element:span
					[
				Element:span
					status_id
				Element:span
					]
				Element:span
					=>
				Element:span
					21
				Element:span
					,
				Element:span
					[
				Element:span
					bank_error_code
				Element:span
					]
				Element:span
					=>
				Element:span
					0
				Element:span
					[
				Element:span
					bank_error_message
				Element:span
					]
				Element:span
					=>
				Element:span
					Payment
				Element:span
					Successful
				Element:span
					[
				Element:span
					gateway_response
				Element:span
					]
				Element:span
					=>
				Element:span
					GatewayResponse
				Element:span
					Object
				Element:span
					(
				Element:span
					[
				Element:span
					epg_txn_id
				Element:span
					]
				Element:span
					=>
				Element:span
					1465831091168
				Element:span
					[
				Element:span
					auth_id_code
				Element:span
					]
				Element:span
					=>
				Element:span
					834050
				Element:span
					[
				Element:span
					resp_code
				Element:span
					]
				Element:span
					=>
				Element:span
					0
				Element:span
					[
				Element:span
					txn_id
				Element:span
					]
				Element:span
					=>
				Element:span
					txn
				Element:span
					-
				Element:span
					1465833326
				Element:span
					-
				Element:span
					1
				Element:span
					[
				Element:span
					resp_message
				Element:span
					]
				Element:span
					=>
				Element:span
					Payment
				Element:span
					Successful
				Element:span
					)
				Element:span
					,
				Element:span
					[
				Element:span
					currency
				Element:span
					]
				Element:span
					=>
				Element:span
					INR
				Element:span
					[
				Element:span
					amount
				Element:span
					]
				Element:span
					=>
				Element:span
					1000
				Element:span
					,
				Element:span
					[
				Element:span
					merchant_id
				Element:span
					]
				Element:span
					=>
				Element:span
					shop
				Element:span
					[
				Element:span
					customer_id
				Element:span
					]
				Element:span
					=>
				Element:span
					shop_user_101
				Element:span
					[
				Element:span
					card
				Element:span
					]
				Element:span
					=>
				Element:span
					Card
				Element:span
					Object
				Element:span
					(
				Element:span
					[
				Element:span
					isin
				Element:span
					]
				Element:span
					=>
				Element:span
					424242
				Element:span
					[
				Element:span
					brand
				Element:span
					]
				Element:span
					=>
				Element:span
					VISA
				Element:span
					[
				Element:span
					type
				Element:span
					]
				Element:span
					=>
				Element:span
					CREDIT
				Element:span
					[
				Element:span
					fingerprint
				Element:span
					]
				Element:span
					=>
				Element:span
					3
				Element:span
					rfeetv0blcc6bkroo4rvkjk62
				Element:span
					)
				Element:span
					)
				Element:span
					,
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					@object
				Element:span
					in
				Element:span
					.
				Element:span
					juspay
				Element:span
					.
				Element:span
					model
				Element:span
					.
				Element:span
					Order
				Element:span
					JSON:
				Element:span
					{
				Element:span
					"merchant_id"
				Element:span
					:
				Element:span
					"test"
				Element:span
					,
				Element:span
					"customer_id"
				Element:span
					:
				Element:span
					"193526"
				Element:span
					,
				Element:span
					"order_id"
				Element:span
					:
				Element:span
					"17027265"
				Element:span
					,
				Element:span
					"status"
				Element:span
					:
				Element:span
					"CHARGED"
				Element:span
					,
				Element:span
					"status_id"
				Element:span
					:
				Element:span
					21
				Element:span
					,
				Element:span
					"amount"
				Element:span
					:
				Element:span
					2400
				Element:span
					,
				Element:span
					"txn_id"
				Element:span
					:
				Element:span
					"test-17027265-001"
				Element:span
					,
				Element:span
					"gateway_id"
				Element:span
					:
				Element:span
					1
				Element:span
					,
				Element:span
					"bank_error_code"
				Element:span
					:
				Element:span
					""
				Element:span
					,
				Element:span
					"bank_error_message"
				Element:span
					:
				Element:span
					""
				Element:span
					,
				Element:span
					"card"
				Element:span
					:
				Element:span
					{
				Element:span
					"last_four_digits"
				Element:span
					:
				Element:span
					""
				Element:span
					,
				Element:span
					"expiry_month"
				Element:span
					:
				Element:span
					"07"
				Element:span
					,
				Element:span
					"expiry_year"
				Element:span
					:
				Element:span
					"2013"
				Element:span
					,
				Element:span
					"name_on_card"
				Element:span
					:
				Element:span
					""
				Element:span
					},
				Element:span
					"payment_gateway_response"
				Element:span
					:
				Element:span
					{
				Element:span
					"rrn"
				Element:span
					:
				Element:span
					"306721283931"
				Element:span
					,
				Element:span
					"epg_txn_id"
				Element:span
					:
				Element:span
					"1900005"
				Element:span
					,
				Element:span
					"auth_id_code"
				Element:span
					:
				Element:span
					"T15672"
				Element:span
					,
				Element:span
					"txn_id"
				Element:span
					:
				Element:span
					"test-17027265-001"
				Element:span
					,
				Element:span
					"resp_code"
				Element:span
					:
				Element:span
					"0"
				Element:span
					,
				Element:span
					"resp_message"
				Element:span
					:
				Element:span
					"Approved"
				Element:span
					},
				Element:span
					"refunded"
				Element:span
					:
				Element:span
					false
				Element:span
					,
				Element:span
					"amount_refunded"
				Element:span
					:
				Element:span
					100
				Element:span
					,
				Element:span
					"refunds"
				Element:span
					:
				Element:span
					[
				Element:span
					{
				Element:span
					"id"
				Element:span
					:
				Element:span
					"refund_id"
				Element:span
					,
				Element:span
					"ref"
				Element:span
					:
				Element:span
					"bank_reference_no"
				Element:span
					,
				Element:span
					"amount"
				Element:span
					:
				Element:span
					100
				Element:span
					,
				Element:span
					"created"
				Element:span
					:
				Element:span
					"2013-02-07 23:11:11"
				Element:span
					,
				Element:span
					"status"
				Element:span
					:
				Element:span
					"SUCCESS"
				Element:span
					}
				Element:span
					]
				Element:span
					}
			Node:
			(type) c
			(layer)1
				Element:h4
					Response Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Field
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					amount_refunded
				Element:td
					String
				Element:td
					Amount which has been refunded so far for this order
				Element:tr
				Element:td
					refunded
				Element:td
					Boolean
				Element:td
				Element:code
					true
					if the order has been completely refunded. Will be
				Element:code
					false
					for partial refunds or if the order doesn’t have any refunds.
				Element:tr
				Element:td
					refunds
				Element:td
					List
				Element:td
					This contains the list of refunds for the order. This attribute is present only if atleast one refund exists for the order.
				Element:tr
				Element:td
					refund[x].id
				Element:td
					String
				Element:td
					ID generated for the refund
				Element:tr
				Element:td
					refund[x].ref
				Element:td
					String
				Element:td
					Reference number provided by the bank for the refund
				Element:tr
				Element:td
					refund[x].amount
				Element:td
					Double
				Element:td
					Amount refunded (or to be refunded)
				Element:tr
				Element:td
					refund[x].created
				Element:td
					String
				Element:td
					Date time (ISO representation) when refund was created
				Element:tr
				Element:td
					refund[x].status
				Element:td
					String
				Element:td
					Status of the refund. Can be one of PENDING, SUCCESS, FAILURE.
				Element:br
				Element:span
					SUCCESS:
					. This means that the refund has been successfully executed.
				Element:br
				Element:span
					PENDING:
					. This would mean that the refund has been queued with JusPay or with the downstream system.
				Element:br
				Element:span
					FAILURE:
					.We were unable to process the refund successfully. You have to try again with new
				Element:code
					unique_request_id
					.
			Node:
			(type) h1
			(layer)1
				Element:h1
					Card
			Node:
			(type) c
			(layer)1
				Element:p
					Represents a credit or debit card belonging to a customer.
			Node:
			(type) c
			(layer)1
				Element:h2
					Tokenize
			Node:
			(type) c
			(layer)1
				Element:p
					Authentication is
				Element:strong
					NOT
					required for this API call.
			Node:
			(type) c
			(layer)1
				Element:p
					The tokenization API takes in the details of a card and generates a token representing the details of the card. This API is expected to be called from the browser or directly from Android/iOS app. Once a card is tokenized, you can initiate a payment or add the card to any customer’s account using
				Element:code
					/card/add
					.
			Node:
			(type) c
			(layer)1
				Element:p
					A tokenized card is remembered only for
				Element:em
					15 minutes
					. You have to make use of the card before its validity expires. If expired, you have to get the card input by the user again.
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example Request
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl https://api.juspay.in/card/tokenize
				Element:span
					\
					-d
				Element:span
					"card_number=4111111111111111"
				Element:span
					\
					-d
				Element:span
					"card_exp_year=2015"
				Element:span
					\
					-d
				Element:span
					"card_exp_month=07"
				Element:span
					\
					-d
				Element:span
					"card_security_code=123"
				Element:span
					\
					-d
				Element:span
					"merchant_id=myshop"
				Element:span
					\
					-d
				Element:span
					"name_on_card=123"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					// Use pay-v2.js to tokenize a card
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					# Use pay-v2.js to tokenize a card
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					# Use pay-v2.js to tokenize a card
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example Response
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
					"token"
					:
				Element:span
					"ctkn_qvfiry6hreobblus"
				Element:span
					}
			Node:
			(type) c
			(layer)1
				Element:h4
					API
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					POST https://api.juspay.in/card/tokenize
			Node:
			(type) c
			(layer)1
				Element:h4
					Request Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Field
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					merchant_id
				Element:br
				Element:code
					Required
				Element:td
					String
				Element:td
					Merchant ID which represents the merchant storing the card
				Element:tr
				Element:td
					card_number
				Element:br
				Element:code
					Required
				Element:td
					String
				Element:td
					A valid card number
				Element:tr
				Element:td
					card_exp_year
				Element:br
				Element:code
					Required
				Element:td
					String
				Element:td
					Expiry year of the card (Format: yyyy) Example: 2020
				Element:tr
				Element:td
					card_exp_month
				Element:br
				Element:code
					Required
				Element:td
					String
				Element:td
					Expiry month of the card (Format: mm) Example: 06
				Element:tr
				Element:td
					card_security_code
				Element:br
				Element:code
					Required
				Element:td
					String
				Element:td
					The CVV number of the card.
				Element:tr
				Element:td
					name_on_card
				Element:td
					String
				Element:td
					Cardholder name
			Node:
			(type) c
			(layer)1
				Element:h4
					Response Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Field
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					card_token
				Element:td
					String
				Element:td
					Unique shortlived token which represents the card that has been added. You can initiate payment with this token.
				Element:br
				Element:strong
					When initiating payment, CVV is not collected
					as it is provided at the time of tokenization.
			Node:
			(type) c
			(layer)1
				Element:h2
					Add card
			Node:
			(type) c
			(layer)1
				Element:p
					Add a credit card or debit card of a customer to JusPay Locker.
				Element:code
					customer_id
					parameter identifies the customer to whom this card belongs to.
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Definition
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					POST https://api.juspay.in/cards
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					Card
				Element:span
					.
				Element:span
					create
				Element:span
					(
				Element:span
					Map
				Element:span
					params
				Element:span
					);
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example Request
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -X POST https://api.juspay.in/cards
				Element:span
					\
					-u api_key:
				Element:span
					\
					-d
				Element:span
					"merchant_id=myshop"
				Element:span
					\
					-d
				Element:span
					"customer_id=user_101"
				Element:span
					\
					-d
				Element:span
					"customer_email=customer@gmail.com"
				Element:span
					\
					-d
				Element:span
					"card_number=4111111111111111"
				Element:span
					\
					-d
				Element:span
					"card_exp_year=2019"
				Element:span
					\
					-d
				Element:span
					"card_exp_month=07"
				Element:span
					\
					-d
				Element:span
					"name_on_card=Sindbad"
				Element:span
					\
					-d
				Element:span
					"nickname=Visa card"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					Juspay
				Element:span
					.
				Element:span
					Cards
				Element:span
					.
				Element:span
					create
				Element:span
					(
				Element:span
					merchant_id
				Element:span
					=
				Element:span
					myshop
				Element:span
					,
				Element:span
					customer_id
				Element:span
					=
				Element:span
					user_101
				Element:span
					,
				Element:span
					customer_email
				Element:span
					=
				Element:span
					customer
				Element:span
					@gmail.com
				Element:span
					,
				Element:span
					card_number
				Element:span
					=
				Element:span
					'4111111111111111'
				Element:span
					card_exp_year
				Element:span
					=
				Element:span
					2019
				Element:span
					,
				Element:span
					card_exp_month
				Element:span
					=
				Element:span
					07
				Element:span
					,
				Element:span
					name_on_card
				Element:span
					=
				Element:span
					Sindbad
				Element:span
					,
				Element:span
					nickname
				Element:span
					=
				Element:span
					Visa
				Element:span
					card
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					Cards
				Element:span
					.
				Element:span
					create
				Element:span
					(
				Element:span
					:merchant_id
				Element:span
					=>
				Element:span
					'myshop'
				Element:span
					,
				Element:span
					:customer_id
				Element:span
					=>
				Element:span
					'user_101'
				Element:span
					,
				Element:span
					:customer_email
				Element:span
					=>
				Element:span
					'customer@gmail.com'
				Element:span
					,
				Element:span
					:card_number
				Element:span
					=>
				Element:span
					'4111111111111111'
				Element:span
					,
				Element:span
					:card_exp_year
				Element:span
					=>
				Element:span
					2019
				Element:span
					,
				Element:span
					:card_exp_month
				Element:span
					=>
				Element:span
					07
				Element:span
					,
				Element:span
					:name_on_card
				Element:span
					=>
				Element:span
					'Sindbad'
				Element:span
					,
				Element:span
					:nickname
				Element:span
					=>
				Element:span
					'Visa card'
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					$params
				Element:span
					=
				Element:span
					array
				Element:span
					();
				Element:span
					$params
				Element:span
					[
				Element:span
					'merchant_id'
				Element:span
					]
				Element:span
					=
				Element:span
					"myshop"
				Element:span
					;
				Element:span
					$params
				Element:span
					[
				Element:span
					'customer_id'
				Element:span
					]
				Element:span
					=
				Element:span
					"user_101"
				Element:span
					;
				Element:span
					$params
				Element:span
					[
				Element:span
					'customer_email'
				Element:span
					]
				Element:span
					=
				Element:span
					"customer@gmail.com"
				Element:span
					;
				Element:span
					$params
				Element:span
					[
				Element:span
					'card_number'
				Element:span
					]
				Element:span
					=
				Element:span
					"4111111111111111"
				Element:span
					;
				Element:span
					$params
				Element:span
					[
				Element:span
					'card_exp_year'
				Element:span
					]
				Element:span
					=
				Element:span
					"2019"
				Element:span
					;
				Element:span
					$params
				Element:span
					[
				Element:span
					'card_exp_month'
				Element:span
					]
				Element:span
					=
				Element:span
					"07"
				Element:span
					;
				Element:span
					$params
				Element:span
					[
				Element:span
					'name_on_card'
				Element:span
					]
				Element:span
					=
				Element:span
					"Sindbad"
				Element:span
					;
				Element:span
					$params
				Element:span
					[
				Element:span
					'nickname'
				Element:span
					]
				Element:span
					=
				Element:span
					"Visa card"
				Element:span
					;
				Element:span
					$card
				Element:span
					=
				Element:span
					Card
				Element:span
					::
				Element:span
					create
				Element:span
					(
				Element:span
					$params
				Element:span
					);
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					Map
				Element:span
					<
				Element:span
					String
				Element:span
					,
				Element:span
					Object
				Element:span
					>
				Element:span
					params
				Element:span
					=
				Element:span
					new
				Element:span
					LinkedHashMap
				Element:span
					();
				Element:span
					params
				Element:span
					.
				Element:span
					put
				Element:span
					(
				Element:span
					"merchant_id"
				Element:span
					,
				Element:span
					"myshop"
				Element:span
					);
				Element:span
					params
				Element:span
					.
				Element:span
					put
				Element:span
					(
				Element:span
					"customer_id"
				Element:span
					,
				Element:span
					"user_101"
				Element:span
					);
				Element:span
					params
				Element:span
					.
				Element:span
					put
				Element:span
					(
				Element:span
					"customer_email"
				Element:span
					,
				Element:span
					"customer@gmail.com"
				Element:span
					);
				Element:span
					params
				Element:span
					.
				Element:span
					put
				Element:span
					(
				Element:span
					"card_number"
				Element:span
					,
				Element:span
					"4111111111111111"
				Element:span
					);
				Element:span
					params
				Element:span
					.
				Element:span
					put
				Element:span
					(
				Element:span
					"card_exp_year"
				Element:span
					,
				Element:span
					"2018"
				Element:span
					);
				Element:span
					params
				Element:span
					.
				Element:span
					put
				Element:span
					(
				Element:span
					"card_exp_month"
				Element:span
					,
				Element:span
					"07"
				Element:span
					);
				Element:span
					params
				Element:span
					.
				Element:span
					put
				Element:span
					(
				Element:span
					"name_on_card"
				Element:span
					,
				Element:span
					"Sindbad"
				Element:span
					);
				Element:span
					params
				Element:span
					.
				Element:span
					put
				Element:span
					(
				Element:span
					"nickname"
				Element:span
					,
				Element:span
					"Visa card"
				Element:span
					);
				Element:span
					Card
				Element:span
					card
				Element:span
					=
				Element:span
					Card
				Element:span
					.
				Element:span
					create
				Element:span
					(
				Element:span
					params
				Element:span
					);
			Node:
			(type) c
			(layer)1
				Element:h4
					Request Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Field
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					merchant_id
				Element:br
				Element:code
					Required
				Element:td
					String
				Element:td
					Merchant ID which represents the merchant storing the card
				Element:tr
				Element:td
					customer_id
				Element:br
				Element:code
					Required
				Element:td
					String
				Element:td
					Customer ID which represents the user uniquely
				Element:tr
				Element:td
					customer_email
				Element:br
				Element:code
					Required
				Element:td
					String
				Element:td
					Email address of the customer
				Element:tr
				Element:td
					card_token
				Element:br
				Element:code
					Required
				Element:td
					String
				Element:td
					Card token generated using the
				Element:code
					/card/tokenize
					API.
				Element:br
					If this parameter is sent, the
				Element:code
					card_number
					,
				Element:code
					card_exp_year
					,
				Element:code
					card_exp_month
					fields are not required.
				Element:tr
				Element:td
					card_number
				Element:br
				Element:code
					Required
				Element:td
					String
				Element:td
					A valid card number
				Element:tr
				Element:td
					card_exp_year
				Element:br
				Element:code
					Required
				Element:td
					String
				Element:td
					Expiry year of the card (Format: yyyy) Example: 2020
				Element:tr
				Element:td
					card_exp_month
				Element:br
				Element:code
					Required
				Element:td
					String
				Element:td
					Expiry month of the card (Format: mm) Example: 06
				Element:tr
				Element:td
					name_on_card
				Element:td
					String
				Element:td
					Cardholder name
				Element:tr
				Element:td
					nickname
				Element:td
					String
				Element:td
					A tag or a label for the card so that the user can easily identify the card
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example Response
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
					"card_token"
					:
				Element:span
					"c75a9fca-1121-418e-973c-47d5c4971456"
					,
				Element:span
					"card_reference"
					:
				Element:span
					"df2c47951a71e4486827039fad7b039a"
					,
				Element:span
					"card_fingerprint"
					:
				Element:span
					"c7uapov1smt3a0rd5f9b1l21i"
				Element:span
					}
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					<
				Element:span
					Card
				Element:span
					>
				Element:span
					{
				Element:span
					'token'
				Element:span
					:
				Element:span
					u'046f1004-09b7-4e21-95e7-0d791af1492c'
				Element:span
					,
				Element:span
					'reference'
				Element:span
					:
				Element:span
					u'444d79d0a66c97f66144d3e8d5f8a8cf'
				Element:span
					,
				Element:span
					'fingerprint'
				Element:span
					:
				Element:span
					u'5fp2hhcsvp3udti59ovagb7knr'
				Element:span
					,
				Element:span
					}
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					<
				Element:span
					Cards
				Element:span
					::
				Element:span
					Card
				Element:span
					:
				Element:span
					0x00000a
				Element:span
					>
				Element:span
					{
				Element:span
					@token
				Element:span
					=
				Element:span
					"046f1004-09b7-4e21-95e7-0d791af1492c"
				Element:span
					,
				Element:span
					@reference
				Element:span
					=
				Element:span
					"444d79d0a66c97f66144d3e8d5f8a8cf"
				Element:span
					,
				Element:span
					@fingerprint
				Element:span
					=
				Element:span
					"5fp2hhcsvp3udti59ovagb7knr"
				Element:span
					,
				Element:span
					}
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					Card
				Element:span
					Object
				Element:span
					(
				Element:span
					[
				Element:span
					token
				Element:span
					]
				Element:span
					=>
				Element:span
					c75a9fca
				Element:span
					-
				Element:span
					1121
				Element:span
					-
				Element:span
					418e-973
				Element:span
					c
				Element:span
					-
				Element:span
					47
				Element:span
					d5c4971456
				Element:span
					[
				Element:span
					reference
				Element:span
					]
				Element:span
					=>
				Element:span
					444
				Element:span
					d79d0a66c97f66144d3e8d5f8a8cf
				Element:span
					[
				Element:span
					fingerprint
				Element:span
					]
				Element:span
					=>
				Element:span
					5
				Element:span
					fp2hhcsvp3udti59ovagb7knr
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					@object
				Element:span
					in
				Element:span
					.
				Element:span
					juspay
				Element:span
					.
				Element:span
					model
				Element:span
					.
				Element:span
					Card
				Element:span
					JSON:
				Element:span
					{
				Element:span
					"card_token"
				Element:span
					:
				Element:span
					"c75a9fca-1121-418e-973c-47d5c4971456"
				Element:span
					,
				Element:span
					"card_reference"
				Element:span
					:
				Element:span
					"df2c47951a71e4486827039fad7b039a"
				Element:span
					,
				Element:span
					"card_fingerprint"
				Element:span
					:
				Element:span
					"c7uapov1smt3a0rd5f9b1l21i"
				Element:span
					}
			Node:
			(type) c
			(layer)1
				Element:h4
					Response Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Field
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					card_token
				Element:td
					String
				Element:td
					Unique shortlived token which represents the card that has been added. You can initiate payment with this token.
				Element:tr
				Element:td
					card_reference
				Element:td
					String
				Element:td
					A reference identifier for the card. Use this reference string to map any metadata of the card at your end. For instance, you can setup a transaction counter against the reference or store the channel information against the card for further analytics.
				Element:tr
				Element:td
					card_fingerprint
				Element:td
					String
				Element:td
					A string that uniquely identifies the card across the board. When the same card is stored across multiple accounts, same fingerprint will be returned. This can be used to identify duplicates.
			Node:
			(type) c
			(layer)1
				Element:h2
					List stored cards
			Node:
			(type) c
			(layer)1
				Element:p
					List all the cards stored for a customer. This API gives back only tokens and other metadata relevant to the cards stored in JusPay Locker.
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Definition
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					GET https://api.juspay.in/cards
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					Card
				Element:span
					.
				Element:span
					list
				Element:span
					(
				Element:span
					Map
				Element:span
					params
				Element:span
					);
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example Request
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -X GET https://api.juspay.in/cards?customer_id
				Element:span
					=
					guest_user
				Element:span
					\
					-u api_key:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					Juspay
				Element:span
					.
				Element:span
					Cards
				Element:span
					.
				Element:span
					list
				Element:span
					(
				Element:span
					customer_id
				Element:span
					=
				Element:span
					'guest_user'
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					Cards
				Element:span
					.
				Element:span
					list
				Element:span
					(
				Element:span
					:customer_id
				Element:span
					=>
				Element:span
					'guest_user'
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					$params
				Element:span
					=
				Element:span
					array
				Element:span
					();
				Element:span
					$params
				Element:span
					[
				Element:span
					'customer_id'
				Element:span
					]
				Element:span
					=
				Element:span
					"guest_user"
				Element:span
					;
				Element:span
					$response
				Element:span
					=
				Element:span
					Card
				Element:span
					:
				Element:span
					listAll
				Element:span
					(
				Element:span
					$params
				Element:span
					);
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					Map
				Element:span
					<
				Element:span
					String
				Element:span
					,
				Element:span
					Object
				Element:span
					>
				Element:span
					params
				Element:span
					=
				Element:span
					new
				Element:span
					LinkedHashMap
				Element:span
					();
				Element:span
					params
				Element:span
					.
				Element:span
					put
				Element:span
					(
				Element:span
					"customer_id"
				Element:span
					,
				Element:span
					customerId
				Element:span
					);
				Element:span
					List
				Element:span
					<
				Element:span
					Card
				Element:span
					>
				Element:span
					cards
				Element:span
					=
				Element:span
					Card
				Element:span
					.
				Element:span
					list
				Element:span
					(
				Element:span
					params
				Element:span
					);
			Node:
			(type) c
			(layer)1
				Element:h4
					Request Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Field
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					customer_id
				Element:br
				Element:code
					Required
				Element:td
					String
				Element:td
					Customer ID which represents the user uniquely
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example Response
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
					"customer_id"
					:
				Element:span
					"guest_user"
					,
				Element:span
					"merchantId"
					:
				Element:span
					"guest"
					,
				Element:span
					"cards"
					:
				Element:span
					[
				Element:span
					{
				Element:span
					"card_token"
					:
				Element:span
					"2ea1fc4d-cbeb-4df7-b03d-97198e5c5e4e"
					,
				Element:span
					"card_reference"
					:
				Element:span
					"20d67719b2249ccd375f44fd98817a47"
					,
				Element:span
					"card_fingerprint"
					:
				Element:span
					"f6f6ac14a9438561404e8ec0776d"
					,
				Element:span
					"card_number"
					:
				Element:span
					"5264-XXXXXXXX-3394"
					,
				Element:span
					"card_isin"
					:
				Element:span
					"526419"
					,
				Element:span
					"card_exp_year"
					:
				Element:span
					"2014"
					,
				Element:span
					"card_exp_month"
					:
				Element:span
					"10"
					,
				Element:span
					"card_type"
					:
				Element:span
					"DEBIT"
					,
				Element:span
					"card_issuer"
					:
				Element:span
					"HDFC BANK"
					,
				Element:span
					"card_brand"
					:
				Element:span
					"MASTERCARD"
					,
				Element:span
					"nickname"
					:
				Element:span
					""
					,
				Element:span
					"name_on_card"
					:
				Element:span
					"Real Card"
					,
				Element:span
					"expired"
					:
				Element:span
					true
				Element:span
					}
				Element:span
					]
				Element:span
					}
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					[
				Element:span
					<
				Element:span
					Card
				Element:span
					>
				Element:span
					{
				Element:span
					'exp_month'
				Element:span
					:
				Element:span
					u'12'
				Element:span
					,
				Element:span
					'reference'
				Element:span
					:
				Element:span
					u'c945f23cf7d2218dc0479ddc2c0b901b'
				Element:span
					,
				Element:span
					'number'
				Element:span
					:
				Element:span
					u'4242-xxxxxxxx-4242'
				Element:span
					,
				Element:span
					'token'
				Element:span
					:
				Element:span
					u'0630bb23-55fc-42c8-b912-2f053fab16d0'
				Element:span
					,
				Element:span
					'fingerprint'
				Element:span
					:
				Element:span
					u'5fp2hhcsvp3udti59ovagb7knr'
				Element:span
					,
				Element:span
					'isin'
				Element:span
					:
				Element:span
					u'424242'
				Element:span
					,
				Element:span
					'exp_year'
				Element:span
					:
				Element:span
					u'20'
				Element:span
					,
				Element:span
					'expired'
				Element:span
					:
				Element:span
					False
				Element:span
					,
				Element:span
					},
				Element:span
					<
				Element:span
					Card
				Element:span
					>
				Element:span
					{
				Element:span
					'exp_month'
				Element:span
					:
				Element:span
					u'12'
				Element:span
					,
				Element:span
					'reference'
				Element:span
					:
				Element:span
					u'd249c873550566782586983052dbb95a'
				Element:span
					,
				Element:span
					'number'
				Element:span
					:
				Element:span
					u'4111-xxxxxxxx-1111'
				Element:span
					,
				Element:span
					'token'
				Element:span
					:
				Element:span
					u'feee4822-0f90-44c8-b4b6-a68a2fb2e14a'
				Element:span
					,
				Element:span
					'fingerprint'
				Element:span
					:
				Element:span
					u'7osbi02mhbi5ctom4fn8fbicbd'
				Element:span
					,
				Element:span
					'isin'
				Element:span
					:
				Element:span
					u'411111'
				Element:span
					,
				Element:span
					'exp_year'
				Element:span
					:
				Element:span
					u'20'
				Element:span
					,
				Element:span
					'expired'
				Element:span
					:
				Element:span
					False
				Element:span
					,
				Element:span
					}
				Element:span
					]
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					[
				Element:span
					<
				Element:span
					Cards
				Element:span
					::
				Element:span
					Card
				Element:span
					:
				Element:span
					0x00000a
				Element:span
					>
				Element:span
					{
				Element:span
					@exp_month
				Element:span
					=
				Element:span
					"12"
				Element:span
					,
				Element:span
					@reference
				Element:span
					=
				Element:span
					"c945f23cf7d2218dc0479ddc2c0b901b"
				Element:span
					,
				Element:span
					@number
				Element:span
					=
				Element:span
					"4242-xxxxxxxx-4242"
				Element:span
					,
				Element:span
					@token
				Element:span
					=
				Element:span
					"0630bb23-55fc-42c8-b912-2f053fab16d0"
				Element:span
					,
				Element:span
					@fingerprint
				Element:span
					=
				Element:span
					"5fp2hhcsvp3udti59ovagb7knr"
				Element:span
					,
				Element:span
					@isin
				Element:span
					=
				Element:span
					"424242"
				Element:span
					,
				Element:span
					@exp_year
				Element:span
					=
				Element:span
					"20"
				Element:span
					,
				Element:span
					@expired
				Element:span
					=
				Element:span
					false
				Element:span
					,
				Element:span
					},
				Element:span
					<
				Element:span
					Cards
				Element:span
					::
				Element:span
					Card
				Element:span
					:
				Element:span
					0x00000b
				Element:span
					>
				Element:span
					{
				Element:span
					@exp_month
				Element:span
					=
				Element:span
					"12"
				Element:span
					,
				Element:span
					@reference
				Element:span
					=
				Element:span
					"d249c873550566782586983052dbb95a"
				Element:span
					,
				Element:span
					@number
				Element:span
					=
				Element:span
					"4111-xxxxxxxx-1111"
				Element:span
					,
				Element:span
					@token
				Element:span
					=
				Element:span
					"feee4822-0f90-44c8-b4b6-a68a2fb2e14a"
				Element:span
					,
				Element:span
					@fingerprint
				Element:span
					=
				Element:span
					"7osbi02mhbi5ctom4fn8fbicbd"
				Element:span
					,
				Element:span
					@isin
				Element:span
					=
				Element:span
					"411111"
				Element:span
					,
				Element:span
					@exp_year
				Element:span
					=
				Element:span
					"20"
				Element:span
					,
				Element:span
					@expired
				Element:span
					=
				Element:span
					false
				Element:span
					,
				Element:span
					}
				Element:span
					,
				Element:span
					]
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					(
				Element:span
					[
				Element:span
					0
				Element:span
					]
				Element:span
					=>
				Element:span
					Card
				Element:span
					Object
				Element:span
					(
				Element:span
					[
				Element:span
					exp_month
				Element:span
					]
				Element:span
					=>
				Element:span
					12
				Element:span
					[
				Element:span
					reference
				Element:span
					]
				Element:span
					=>
				Element:span
					c945f23cf7d2218dc0479ddc2c0b901b
				Element:span
					[
				Element:span
					number
				Element:span
					]
				Element:span
					=>
				Element:span
					4242
				Element:span
					-
				Element:span
					xxxxxxxx
				Element:span
					-
				Element:span
					4242
				Element:span
					[
				Element:span
					token
				Element:span
					]
				Element:span
					=>
				Element:span
					0630
				Element:span
					bb23
				Element:span
					-
				Element:span
					55
				Element:span
					fc
				Element:span
					-
				Element:span
					42
				Element:span
					c8
				Element:span
					-
				Element:span
					b912
				Element:span
					-
				Element:span
					2
				Element:span
					f053fab16d0
				Element:span
					[
				Element:span
					fingerprint
				Element:span
					]
				Element:span
					=>
				Element:span
					5
				Element:span
					fp2hhcsvp3udti59ovagb7knr
				Element:span
					[
				Element:span
					isin
				Element:span
					]
				Element:span
					=>
				Element:span
					424242
				Element:span
					[
				Element:span
					exp_year
				Element:span
					]
				Element:span
					=>
				Element:span
					20
				Element:span
					[
				Element:span
					expired
				Element:span
					]
				Element:span
					=>
				Element:span
					false
				Element:span
					)
				Element:span
					[
				Element:span
					1
				Element:span
					]
				Element:span
					=>
				Element:span
					Card
				Element:span
					Object
				Element:span
					(
				Element:span
					[
				Element:span
					exp_month
				Element:span
					]
				Element:span
					=>
				Element:span
					12
				Element:span
					[
				Element:span
					reference
				Element:span
					]
				Element:span
					=>
				Element:span
					d249c873550566782586983052dbb95a
				Element:span
					[
				Element:span
					number
				Element:span
					]
				Element:span
					=>
				Element:span
					4111
				Element:span
					-
				Element:span
					xxxxxxxx
				Element:span
					-
				Element:span
					1111
				Element:span
					[
				Element:span
					token
				Element:span
					]
				Element:span
					=>
				Element:span
					feee4822
				Element:span
					-
				Element:span
					0
				Element:span
					f90
				Element:span
					-
				Element:span
					44
				Element:span
					c8
				Element:span
					-
				Element:span
					b4b6
				Element:span
					-
				Element:span
					a68a2fb2e14a
				Element:span
					[
				Element:span
					fingerprint
				Element:span
					]
				Element:span
					=>
				Element:span
					7
				Element:span
					osbi02mhbi5ctom4fn8fbicbd
				Element:span
					[
				Element:span
					isin
				Element:span
					]
				Element:span
					=>
				Element:span
					411111
				Element:span
					[
				Element:span
					exp_year
				Element:span
					]
				Element:span
					=>
				Element:span
					20
				Element:span
					[
				Element:span
					expired
				Element:span
					]
				Element:span
					=>
				Element:span
					false
				Element:span
					)
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					@object
				Element:span
					java
				Element:span
					.
				Element:span
					util
				Element:span
					.
				Element:span
					List
				Element:span
					<
				Element:span
					Card
				Element:span
					>
				Element:span
					JSON:
				Element:span
					[
				Element:span
					{
				Element:span
					exp_month
				Element:span
					=
				Element:span
					"12"
				Element:span
					,
				Element:span
					reference
				Element:span
					=
				Element:span
					"c945f23cf7d2218dc0479ddc2c0b901b"
				Element:span
					,
				Element:span
					number
				Element:span
					=
				Element:span
					"4242-xxxxxxxx-4242"
				Element:span
					,
				Element:span
					token
				Element:span
					=
				Element:span
					"0630bb23-55fc-42c8-b912-2f053fab16d0"
				Element:span
					,
				Element:span
					fingerprint
				Element:span
					=
				Element:span
					"5fp2hhcsvp3udti59ovagb7knr"
				Element:span
					,
				Element:span
					isin
				Element:span
					=
				Element:span
					"424242"
				Element:span
					,
				Element:span
					exp_year
				Element:span
					=
				Element:span
					"20"
				Element:span
					,
				Element:span
					expired
				Element:span
					=
				Element:span
					false
				Element:span
					,
				Element:span
					},
				Element:span
					{
				Element:span
					exp_month
				Element:span
					=
				Element:span
					"12"
				Element:span
					,
				Element:span
					reference
				Element:span
					=
				Element:span
					"d249c873550566782586983052dbb95a"
				Element:span
					,
				Element:span
					number
				Element:span
					=
				Element:span
					"4111-xxxxxxxx-1111"
				Element:span
					,
				Element:span
					token
				Element:span
					=
				Element:span
					"feee4822-0f90-44c8-b4b6-a68a2fb2e14a"
				Element:span
					,
				Element:span
					fingerprint
				Element:span
					=
				Element:span
					"7osbi02mhbi5ctom4fn8fbicbd"
				Element:span
					,
				Element:span
					isin
				Element:span
					=
				Element:span
					"411111"
				Element:span
					,
				Element:span
					exp_year
				Element:span
					=
				Element:span
					"20"
				Element:span
					,
				Element:span
					expired
				Element:span
					=
				Element:span
					false
				Element:span
					,
				Element:span
					}
				Element:span
					]
			Node:
			(type) c
			(layer)1
				Element:h4
					Response Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Field
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					customer_id
				Element:td
					String
				Element:td
					Given Customer ID.
				Element:tr
				Element:td
					cards
				Element:td
					String
				Element:td
					Array of stored cards that belongs to the given user represented by the Customer ID. Each member of the array is an associative array that represents a stored card of the user.
				Element:tr
				Element:td
					card_token
				Element:td
					String
				Element:td
					Token representing the card. Payment has to be initiated using this token. Tokens are by definition short lived and so, please do not cache them in your system. Expired tokens will lead to transactions being declined.
				Element:tr
				Element:td
					card_reference
				Element:td
					String
				Element:td
					A reference identifier that doesn’t change for the stored card. Use this identifier to store any metadata that you wish. For example, you can store card type or card bin or even transaction data using this reference.
				Element:tr
				Element:td
					card_fingerprint
				Element:td
					String
				Element:td
					A string that uniquely identifies the card across the board. When the same card is stored across multiple accounts, same fingerprint will be returned. This can be used to identify duplicates.
				Element:tr
				Element:td
					card_number
				Element:td
					String
				Element:td
					Masked card number that can be displayed to the customer.
				Element:tr
				Element:td
					card_isin
				Element:td
					String
				Element:td
					First 6 digits of the card
				Element:tr
				Element:td
					card_exp_year
				Element:td
					String
				Element:td
					Year of expiry of the card
				Element:tr
				Element:td
					card_exp_month
				Element:td
					String
				Element:td
					Month of expiry of the card
				Element:tr
				Element:td
					card_type
				Element:td
					String
				Element:td
					Indicates if the card is either CREDIT or DEBIT. Please note that this information is inferred. Not all cards will have this information.
				Element:tr
				Element:td
					card_issuer
				Element:td
					String
				Element:td
					Indicates the bank which issued the card. This again is not available all the time. We make our best effort to get this information for all cards.
				Element:tr
				Element:td
					name_on_card
				Element:td
					String
				Element:td
					Cardholder name given while storing the card
				Element:tr
				Element:td
					nickname
				Element:td
					String
				Element:td
					Returns the given nickname while storing the card
				Element:tr
				Element:td
					expired
				Element:td
					String
				Element:td
					Indicates whether the stored card is expired or not
			Node:
			(type) c
			(layer)1
				Element:h2
					Delete card
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Definition
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					DELETE https://api.juspay.in/cards/:card_token
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					Card
				Element:span
					.
				Element:span
					delete
				Element:span
					(
				Element:span
					String
				Element:span
					cardToken
				Element:span
					);
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example Request
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -X DELETE https://api.juspay.in/cards/c75a9fca-1121-418e-973c-47d5c4971456
				Element:span
					\
					-u api_key:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					Juspay
				Element:span
					.
				Element:span
					Cards
				Element:span
					.
				Element:span
					delete
				Element:span
					(
				Element:span
					card_token
				Element:span
					=
				Element:span
					'c75a9fca-1121-418e-973c-47d5c4971456'
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					Cards
				Element:span
					.
				Element:span
					delete
				Element:span
					(
				Element:span
					:card_token
				Element:span
					=>
				Element:span
					'c75a9fca-1121-418e-973c-47d5c4971456'
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					$params
				Element:span
					=
				Element:span
					array
				Element:span
					();
				Element:span
					$params
				Element:span
					[
				Element:span
					'card_token'
				Element:span
					]
				Element:span
					=
				Element:span
					"c75a9fca-1121-418e-973c-47d5c4971456"
				Element:span
					;
				Element:span
					$response
				Element:span
					=
				Element:span
					Card
				Element:span
					:
				Element:span
					delete
				Element:span
					(
				Element:span
					$params
				Element:span
					);
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					String
				Element:span
					cardToken
				Element:span
					=
				Element:span
					"c75a9fca-1121-418e-973c-47d5c4971456"
				Element:span
					;
				Element:span
					boolean
				Element:span
					isDeleted
				Element:span
					=
				Element:span
					Card
				Element:span
					.
				Element:span
					delete
				Element:span
					(
				Element:span
					cardToken
				Element:span
					);
			Node:
			(type) c
			(layer)1
				Element:h4
					URL Embedded Parameter
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Field
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					card_token
				Element:br
				Element:code
					Required
				Element:td
					String
				Element:td
					Card token obtained from
				Element:code
					/card/list
					API
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example Response
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
					"card_token"
					:
				Element:span
					"c75a9fca-1121-418e-973c-47d5c4971456"
					,
				Element:span
					"card_reference"
					:
				Element:span
					"df2c47951a71e4486827039fad7b039a"
					,
				Element:span
					"deleted"
					:
				Element:span
					true
				Element:span
					}
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					<
				Element:span
					Card
				Element:span
					>
				Element:span
					{
				Element:span
					'deleted'
				Element:span
					:
				Element:span
					True
				Element:span
					,
				Element:span
					'token'
				Element:span
					:
				Element:span
					u'c75a9fca-1121-418e-973c-47d5c4971456'
				Element:span
					,
				Element:span
					'reference'
				Element:span
					:
				Element:span
					u'444d79d0a66c97f66144d3e8d5f8a8cf'
				Element:span
					,
				Element:span
					}
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					<
				Element:span
					Cards
				Element:span
					::
				Element:span
					Card
				Element:span
					:
				Element:span
					0x00000a
				Element:span
					>
				Element:span
					{
				Element:span
					@deleted
				Element:span
					=
				Element:span
					true
				Element:span
					,
				Element:span
					@token
				Element:span
					=
				Element:span
					"c75a9fca-1121-418e-973c-47d5c4971456"
				Element:span
					,
				Element:span
					@reference
				Element:span
					=
				Element:span
					"444d79d0a66c97f66144d3e8d5f8a8cf"
				Element:span
					,
				Element:span
					}
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					Card
				Element:span
					Object
				Element:span
					(
				Element:span
					[
				Element:span
					deleted
				Element:span
					]
				Element:span
					=>
				Element:span
					true
				Element:span
					[
				Element:span
					token
				Element:span
					]
				Element:span
					=>
				Element:span
					c75a9fca
				Element:span
					-
				Element:span
					1121
				Element:span
					-
				Element:span
					418e-973
				Element:span
					c
				Element:span
					-
				Element:span
					47
				Element:span
					d5c4971456
				Element:span
					[
				Element:span
					reference
				Element:span
					]
				Element:span
					=>
				Element:span
					444
				Element:span
					d79d0a66c97f66144d3e8d5f8a8cf
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					true
			Node:
			(type) c
			(layer)1
				Element:h4
					Response Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Field
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					card_token
				Element:td
					String
				Element:td
					Card token that was given as input
				Element:tr
				Element:td
					card_reference
				Element:td
					String
				Element:td
					Reference identifier of the card
				Element:tr
				Element:td
					deleted
				Element:td
					Booloean
				Element:td
					Indicates if the card has been successfully deleted or not
			Node:
			(type) h1
			(layer)1
				Element:h1
					Wallet
			Node:
			(type) c
			(layer)1
				Element:p
					Represents a wallet account that belongs to a customer. Wallet account is valid & usable only when your wallet provider has granted you permission for DIRECT WALLET DEBIT flow. To initiate a direct debit transaction, you need to authenticate and link the wallet with the respective customer account. A linked wallet account will have an associated
				Element:code
					token
					with it. Such a
				Element:code
					token
					is assigned by JusPay and you must send this
				Element:code
					token
					to directly debit from the wallet.
			Node:
			(type) c
			(layer)1
				Element:h4
					Security
			Node:
			(type) c
			(layer)1
				Element:p
					To ensure better security, JusPay will expire the
				Element:code
					token
					within 10 minutes of issuance (issued when you call
				Element:code
					/wallets
					list API). Also a
				Element:code
					token
					is valid only for single use.
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
											Usage
									Node:
									(type) c
									(layer)3
										Element:p
											To allow direct wallet debit, you need to list the wallets of the customer using
										Element:code
											/wallets
											. After listing the wallets, you have the following three options available with you:
									Node:
									(type) c
									(layer)3
										Element:ol
										Element:li
										Element:p
										Element:strong
											Wallet is not listed
										Element:ul
										Element:li
											In this case, you need to create a wallet and then link it to allow direct wallet debit. Following are the steps to create and link a wallet:
										Element:ol
										Element:li
											Call the wallet
										Element:code
											create
											api with
										Element:code
											command=authenticate
											parameter which will send an
										Element:code
											OTP
											to the registered mobile of the customer.
										Element:li
											Send the OTP back to Juspay using
										Element:code
											link
											api. Juspay will authenticate the OTP with the provider and then link the wallet.
										Element:li
										Element:p
										Element:strong
											Wallet is listed but not linked
										Element:ul
										Element:li
											In this case, you need to link the wallet to allow direct wallet debit. Following are the steps to link a wallet:
										Element:ol
										Element:li
											Call the wallet
										Element:code
											authenticate
											api which will send an OTP to the registered mobile of the customer.
										Element:li
											Send the OTP back to Juspay using
										Element:code
											link
											api. Juspay will authenticate the OTP with the provider and then link the wallet.
										Element:li
										Element:p
										Element:strong
											Wallet is listed and already linked
										Element:ul
										Element:li
											In this case, the wallet is already linked and you can use the
										Element:code
											token
											to initiate payment on the wallet directly.
									Node:
									(type) c
									(layer)3
										Element:p
											After this we are good to perform transactions via the linked wallet.
									Node:
									(type) c
									(layer)3
										Element:h2
											List
									Node:
									(type) c
									(layer)3
										Element:p
											Wallets can be listed only in the context of a
										Element:code
											Customer
											. This API will return the list of wallets which may or may not be
										Element:strong
											linked
											.
									Node:
									(type) c
									(layer)3
										Element:p
											If direct debit is enabled by the provider for your setup, you can activate the same for customers using the
										Element:code
											authenticate
											and
										Element:code
											link
											APIs.
									Node:
									(type) c
									(layer)3
										Element:p
										Element:strong
											Note:
											For
										Element:strong
											linked
											wallets, the balance in the response may not be the current balance.
										Element:code
											last_refreshed
											field represents the date & time when balance was updated last. Use
										Element:code
											refresh
											wallet API to update the balance for individual wallets. This results in a network call to the wallet provider and hence the response might be slow.
									Node:
									(type) c
									(layer)3
										Element:blockquote
										Element:p
											Definition
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											GET https://api.juspay.in/customers/:customer_id/wallets
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
										Element:span
											Wallet
										Element:span
											.
										Element:span
											list
										Element:span
											(
										Element:span
											String
										Element:span
											customerId
										Element:span
											);
									Node:
									(type) c
									(layer)3
										Element:blockquote
										Element:p
											Example Request
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											curl -X GET https://api.juspay.in/customers/guest_user/wallets
										Element:span
											\
											-u api_key:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
										Element:span
											Juspay
										Element:span
											.
										Element:span
											Wallets
										Element:span
											.
										Element:span
											list
										Element:span
											(
										Element:span
											customer_id
										Element:span
											=
										Element:span
											'guest_user'
										Element:span
											)
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
										Element:span
											Wallets
										Element:span
											.
										Element:span
											list
										Element:span
											(
										Element:span
											:customer_id
										Element:span
											=>
										Element:span
											'guest_user'
										Element:span
											)
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
										Element:span
											$customerid
										Element:span
											=
										Element:span
											'guest_user'
										Element:span
											;
										Element:span
											$response
										Element:span
											=
										Element:span
											Wallet
										Element:span
											::
										Element:span
											listAll
										Element:span
											(
										Element:span
											$customerid
										Element:span
											);
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
										Element:span
											String
										Element:span
											customerId
										Element:span
											=
										Element:span
											"guest_user"
										Element:span
											;
										Element:span
											WalletList
										Element:span
											wallets
										Element:span
											=
										Element:span
											Wallet
										Element:span
											.
										Element:span
											list
										Element:span
											(
										Element:span
											customerId
										Element:span
											);
									Node:
									(type) c
									(layer)3
										Element:h4
											URL Embedded Parameter
									Node:
									(type) c
									(layer)3
										Element:table
										Element:thead
										Element:tr
										Element:th
											Field
										Element:th
											Type
										Element:th
											Description
										Element:tbody
										Element:tr
										Element:td
											customer_id
										Element:br
										Element:code
											Required
										Element:td
											String
										Element:td
											Use the ID that is generated by JUSPAY during customer creation. You may also send the value that you sent in object_reference_id at the time of creating the customer.
									Node:
									(type) c
									(layer)3
										Element:blockquote
										Element:p
											Example Response
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
										Element:span
											{
										Element:span
											"object"
											:
										Element:span
											"list"
										Element:span
											"list"
											:
										Element:span
											[
										Element:span
											{
										Element:span
											"id"
											:
										Element:span
											"wlt_q23xzki3pazgtezo"
											,
										Element:span
											"object"
											:
										Element:span
											"wallet_account"
											,
										Element:span
											"wallet"
											:
										Element:span
											"MOBIKWIK"
											,
										Element:span
											"token"
											:
										Element:span
											"tok_winysteev9eftrwcv6me"
											,
										Element:span
											"current_balance"
											: 250.00,
										Element:span
											"linked"
											:
										Element:span
											true
											,
										Element:span
											"last_refreshed"
											:
										Element:span
											"2016-08-02T08:07:52+0000"
										Element:span
											}
											,
										Element:span
											{
										Element:span
											"id"
											:
										Element:span
											"wlt_mu2xfwb4mr18flbs"
											,
										Element:span
											"object"
											:
										Element:span
											"wallet_account"
											,
										Element:span
											"wallet"
											:
										Element:span
											"FREECHARGE"
											,
										Element:span
											"token"
											: null,
										Element:span
											"current_balance"
											: null,
										Element:span
											"linked"
											:
										Element:span
											false
											,
										Element:span
											"last_refreshed"
											: null
										Element:span
											}
											,
										Element:span
											]
											, ...
										Element:span
											"count"
											: 10,
										Element:span
											"offset"
											: 0,
										Element:span
											"total"
											: 100
										Element:span
											}
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
										Element:span
											[
										Element:span
											<
										Element:span
											Wallet
										Element:span
											>
										Element:span
											{
										Element:span
											'id'
										Element:span
											:
										Element:span
											u'wlt_q23xzki3pazgtezo'
										Element:span
											,
										Element:span
											'object'
										Element:span
											:
										Element:span
											u'wallet_account'
										Element:span
											,
										Element:span
											'wallet'
										Element:span
											:
										Element:span
											u'MOBIKWIK'
										Element:span
											,
										Element:span
											'token'
										Element:span
											:
										Element:span
											u'tok_winysteev9eftrwcv6me'
										Element:span
											,
										Element:span
											'current_balance'
										Element:span
											:
										Element:span
											u'250.00'
										Element:span
											,
										Element:span
											'linked'
										Element:span
											:
										Element:span
											true
										Element:span
											,
										Element:span
											'last_refreshed'
										Element:span
											:
										Element:span
											u'2016-08-02T08:07:52+0000'
										Element:span
											},
										Element:span
											{
										Element:span
											'id'
										Element:span
											:
										Element:span
											u'wlt_mu2xfwb4mr18flbs'
										Element:span
											,
										Element:span
											'object'
										Element:span
											:
										Element:span
											u'wallet_account'
										Element:span
											,
										Element:span
											'wallet'
										Element:span
											:
										Element:span
											u'FREECHARGE'
										Element:span
											,
										Element:span
											'token'
										Element:span
											:
										Element:span
											null
										Element:span
											,
										Element:span
											'current_balance'
										Element:span
											:
										Element:span
											null
										Element:span
											,
										Element:span
											'linked'
										Element:span
											:
										Element:span
											false
										Element:span
											,
										Element:span
											'last_refreshed'
										Element:span
											:
										Element:span
											null
										Element:span
											},
										Element:span
											...
										Element:span
											]
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
										Element:span
											[
										Element:span
											<
										Element:span
											Wallets
										Element:span
											::
										Element:span
											Wallet
										Element:span
											:
										Element:span
											0x00000a
										Element:span
											>
										Element:span
											{
										Element:span
											@id
										Element:span
											=
										Element:span
											"wlt_q23xzki3pazgtezo"
										Element:span
											,
										Element:span
											@object
										Element:span
											=
										Element:span
											"wallet_account"
										Element:span
											,
										Element:span
											@wallet
										Element:span
											=
										Element:span
											"MOBIKWIK"
										Element:span
											,
										Element:span
											@token
										Element:span
											=
										Element:span
											"tok_winysteev9eftrwcv6me"
										Element:span
											,
										Element:span
											@current_balance
										Element:span
											=
										Element:span
											"250.00"
										Element:span
											,
										Element:span
											@linked
										Element:span
											=
										Element:span
											true
										Element:span
											,
										Element:span
											@last_refreshed
										Element:span
											=
										Element:span
											"2016-08-02T08:07:52+0000"
										Element:span
											},
										Element:span
											{
										Element:span
											@id
										Element:span
											=
										Element:span
											"wlt_mu2xfwb4mr18flbs"
										Element:span
											,
										Element:span
											@object
										Element:span
											=
										Element:span
											"wallet_account"
										Element:span
											,
										Element:span
											@wallet
										Element:span
											=
										Element:span
											"FREECHARGE"
										Element:span
											,
										Element:span
											@token
										Element:span
											=
										Element:span
											nil
										Element:span
											,
										Element:span
											@current_balance
										Element:span
											=
										Element:span
											nil
										Element:span
											,
										Element:span
											@linked
										Element:span
											=
										Element:span
											false
										Element:span
											,
										Element:span
											@last_refreshed
										Element:span
											=
										Element:span
											nil
										Element:span
											},
										Element:span
											.
										Element:span
											.
										Element:span
											.
										Element:span
											]
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
										Element:span
											WalletList
										Element:span
											Object
										Element:span
											(
										Element:span
											count
										Element:span
											=>
										Element:span
											10
										Element:span
											total
										Element:span
											=>
										Element:span
											100
										Element:span
											offset
										Element:span
											=>
										Element:span
											0
										Element:span
											list
										Element:span
											=>
										Element:span
											(
										Element:span
											[
										Element:span
											0
										Element:span
											]
										Element:span
											=>
										Element:span
											Wallet
										Element:span
											Object
										Element:span
											(
										Element:span
											[
										Element:span
											id
										Element:span
											]
										Element:span
											=>
										Element:span
											wlt_q23xzki3pazgtezo
										Element:span
											[
										Element:span
											object
										Element:span
											]
										Element:span
											=>
										Element:span
											wallet_account
										Element:span
											[
										Element:span
											wallet
										Element:span
											]
										Element:span
											=>
										Element:span
											MOBIKWIK
										Element:span
											[
										Element:span
											token
										Element:span
											]
										Element:span
											=>
										Element:span
											tok_winysteev9eftrwcv6me
										Element:span
											[
										Element:span
											current_balance
										Element:span
											]
										Element:span
											=>
										Element:span
											250.00
										Element:span
											[
										Element:span
											linked
										Element:span
											]
										Element:span
											=>
										Element:span
											true
										Element:span
											[
										Element:span
											last_refreshed
										Element:span
											]
										Element:span
											=>
										Element:span
											2016
										Element:span
											-
										Element:span
											08
										Element:span
											-
										Element:span
											02
										Element:span
											T08
										Element:span
											:
										Element:span
											07
										Element:span
											:
										Element:span
											52
										Element:span
											+
										Element:span
											0000
										Element:span
											),
										Element:span
											[
										Element:span
											1
										Element:span
											]
										Element:span
											=>
										Element:span
											Wallet
										Element:span
											Object
										Element:span
											(
										Element:span
											[
										Element:span
											id
										Element:span
											]
										Element:span
											=>
										Element:span
											wlt_mu2xfwb4mr18flbs
										Element:span
											[
										Element:span
											object
										Element:span
											]
										Element:span
											=>
										Element:span
											wallet_account
										Element:span
											[
										Element:span
											wallet
										Element:span
											]
										Element:span
											=>
										Element:span
											FREECHARGE
										Element:span
											[
										Element:span
											token
										Element:span
											]
										Element:span
											=>
										Element:span
											null
										Element:span
											[
										Element:span
											current_balance
										Element:span
											]
										Element:span
											=>
										Element:span
											null
										Element:span
											[
										Element:span
											linked
										Element:span
											]
										Element:span
											=>
										Element:span
											false
										Element:span
											[
										Element:span
											last_refreshed
										Element:span
											]
										Element:span
											=>
										Element:span
											null
										Element:span
											),
										Element:span
											...
										Element:span
											)
										Element:span
											)
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
										Element:span
											@object
										Element:span
											in
										Element:span
											.
										Element:span
											juspay
										Element:span
											.
										Element:span
											model
										Element:span
											.
										Element:span
											WalletList
										Element:span
											JSON:
										Element:span
											{
										Element:span
											"list"
										Element:span
											:
										Element:span
											[
										Element:span
											{
										Element:span
											"id"
										Element:span
											:
										Element:span
											"wlt_q23xzki3pazgtezo"
										Element:span
											,
										Element:span
											"object"
										Element:span
											:
										Element:span
											"wallet_account"
										Element:span
											,
										Element:span
											"wallet"
										Element:span
											:
										Element:span
											"MOBIKWIK"
										Element:span
											,
										Element:span
											"token"
										Element:span
											:
										Element:span
											"tok_winysteev9eftrwcv6me"
										Element:span
											,
										Element:span
											"current_balance"
										Element:span
											:
										Element:span
											250.00
										Element:span
											,
										Element:span
											"linked"
										Element:span
											:
										Element:span
											true
										Element:span
											,
										Element:span
											"last_refreshed"
										Element:span
											:
										Element:span
											"2016-08-02T08:07:52+0000"
										Element:span
											},
										Element:span
											{
										Element:span
											"id"
										Element:span
											:
										Element:span
											"wlt_mu2xfwb4mr18flbs"
										Element:span
											,
										Element:span
											"object"
										Element:span
											:
										Element:span
											"wallet_account"
										Element:span
											,
										Element:span
											"wallet"
										Element:span
											:
										Element:span
											"FREECHARGE"
										Element:span
											,
										Element:span
											"token"
										Element:span
											:
										Element:span
											null
										Element:span
											,
										Element:span
											"current_balance"
										Element:span
											:
										Element:span
											null
										Element:span
											,
										Element:span
											"linked"
										Element:span
											:
										Element:span
											false
										Element:span
											,
										Element:span
											"last_refreshed"
										Element:span
											:
										Element:span
											null
										Element:span
											}
										Element:span
											],
										Element:span
											"count"
										Element:span
											:
										Element:span
											10
										Element:span
											,
										Element:span
											"offset"
										Element:span
											:
										Element:span
											0
										Element:span
											,
										Element:span
											"total"
										Element:span
											:
										Element:span
											100
										Element:span
											}
									Node:
									(type) c
									(layer)3
										Element:h4
											Response Parameters
									Node:
									(type) c
									(layer)3
										Element:table
										Element:thead
										Element:tr
										Element:th
											Field
										Element:th
											Type
										Element:th
											Description
										Element:tbody
										Element:tr
										Element:td
											id
										Element:td
											String
										Element:td
											Wallet id generated by Juspay after creating wallet.
										Element:tr
										Element:td
											object
										Element:td
											String
										Element:td
											Object type of the entity. In this case, it will be
										Element:code
											wallet_account
											.
										Element:tr
										Element:td
											wallet
										Element:td
											String
										Element:td
											Name of the wallet provider.
										Element:tr
										Element:td
											token
										Element:td
											String
										Element:td
											One time use token for performing direct debit transaction. This value will be null if wallet is not linked. This has to be passed in /txns while attempting direct debit using particular wallet.
										Element:tr
										Element:td
											current_balance
										Element:td
											Double
										Element:td
											Wallet balance at last_refreshed time.
										Element:tr
										Element:td
											linked
										Element:td
											Boolean
										Element:td
											Indicates if the wallet account is deep linked for direct authorization. Requires one time authentication by the customer.
										Element:tr
										Element:td
											last_refreshed
										Element:td
											String
										Element:td
											Date and time of the last synchronisation with the wallet provider. Will be updated when you call the
										Element:code
											refresh
											api.
									Node:
									(type) c
									(layer)3
										Element:h2
											Create
									Node:
									(type) c
									(layer)3
										Element:p
											Wallet account can be created only for an existing customer. Please use
										Element:code
											POST /customers
											api to create the customer objects as needed.
									Node:
									(type) c
									(layer)3
										Element:p
											Creating the wallet with
										Element:code
											command=authenticate
											parameter will trigger an OTP which will be used for linking the wallet thereby enabling direct debit authorization. You also have the option of deferring the authentication to a later point of time by omitting the
										Element:code
											command=authenticate
											parameter. In case you decide to defer it, Please use the
										Element:code
											authenticate
											and
										Element:code
											link
											api to authenticate and link the wallet.
									Node:
									(type) c
									(layer)3
										Element:blockquote
										Element:p
											Definition
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											POST https://api.juspay.in/customers/
										Element:span
											$customer_id
											/wallets
									Node:
									(type) c
									(layer)3
										Element:blockquote
										Element:p
											Example Request
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											curl -X POST https://api.juspay.in/customers/
										Element:span
											$customer_id
											/wallets
										Element:span
											\
											-u api_key:
										Element:span
											\
											-d
										Element:span
											"gateway=MOBIKWIK"
										Element:span
											\
											-d
										Element:span
											"command=authenticate"
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
										Element:span
											Juspay
										Element:span
											.
										Element:span
											Wallets
										Element:span
											.
										Element:span
											create
										Element:span
											(
										Element:span
											customer_id
										Element:span
											=
										Element:span
											'guest_user'
										Element:span
											,
										Element:span
											gateway
										Element:span
											=
										Element:span
											'MOBIKWIK'
										Element:span
											)
										Element:span
											## or ##
										Element:span
											Juspay
										Element:span
											.
										Element:span
											Wallets
										Element:span
											.
										Element:span
											create_and_authenticate
										Element:span
											(
										Element:span
											customer_id
										Element:span
											=
										Element:span
											'guest_user'
										Element:span
											,
										Element:span
											gateway
										Element:span
											=
										Element:span
											'MOBIKWIK'
										Element:span
											)
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
										Element:span
											Wallets
										Element:span
											.
										Element:span
											create
										Element:span
											(
										Element:span
											:customer_id
										Element:span
											=>
										Element:span
											'guest_user'
										Element:span
											,
										Element:span
											:gateway
										Element:span
											=>
										Element:span
											'MOBIKWIK'
										Element:span
											)
										Element:span
											## or ##
										Element:span
											Wallets
										Element:span
											.
										Element:span
											create_and_authenticate
										Element:span
											(
										Element:span
											:customer_id
										Element:span
											=>
										Element:span
											'guest_user'
										Element:span
											,
										Element:span
											:gateway
										Element:span
											=>
										Element:span
											'MOBIKWIK'
										Element:span
											)
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
										Element:span
											$customerid
										Element:span
											=
										Element:span
											'guest_user'
										Element:span
											;
										Element:span
											$gateway
										Element:span
											=
										Element:span
											'MOBIKWIK'
										Element:span
											;
										Element:span
											$response
										Element:span
											=
										Element:span
											Wallet
										Element:span
											::
										Element:span
											create
										Element:span
											(
										Element:span
											$customerid
										Element:span
											,
										Element:span
											$gateway
										Element:span
											);
										Element:span
											// or //
										Element:span
											$response
										Element:span
											=
										Element:span
											Wallet
										Element:span
											::
										Element:span
											createAndAuthenticate
										Element:span
											(
										Element:span
											$customerid
										Element:span
											,
										Element:span
											$gateway
										Element:span
											);
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
										Element:span
											String
										Element:span
											customerId
										Element:span
											=
										Element:span
											"guest_user"
										Element:span
											;
										Element:span
											String
										Element:span
											gateway
										Element:span
											=
										Element:span
											"MOBIKWIK"
										Element:span
											;
										Element:span
											Wallet
										Element:span
											wallet
										Element:span
											=
										Element:span
											Wallet
										Element:span
											.
										Element:span
											create
										Element:span
											(
										Element:span
											customerId
										Element:span
											,
										Element:span
											gateway
										Element:span
											);
										Element:span
											// or //
										Element:span
											Wallet
										Element:span
											wallet
										Element:span
											=
										Element:span
											Wallet
										Element:span
											.
										Element:span
											createAndAuthenticate
										Element:span
											(
										Element:span
											customerId
										Element:span
											,
										Element:span
											gateway
										Element:span
											);
									Node:
									(type) c
									(layer)3
										Element:h4
											Request Parameters
									Node:
									(type) c
									(layer)3
										Element:table
										Element:thead
										Element:tr
										Element:th
											Field
										Element:th
											Type
										Element:th
											Description
										Element:tbody
										Element:tr
										Element:td
											gateway
										Element:br
										Element:code
											Required
										Element:td
											String
										Element:td
											Name of the gateway supplying the wallet.
										Element:tr
										Element:td
											command
										Element:td
											String
										Element:td
											Send it as
										Element:code
											authenticate
											if you want to start the authentication/linking process as soon as the wallet gets created.
									Node:
									(type) c
									(layer)3
										Element:blockquote
										Element:p
											Example Response
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
										Element:span
											{
										Element:span
											"id"
											:
										Element:span
											"wlt_q23xzki3pazgtezo"
											,
										Element:span
											"object"
											:
										Element:span
											"wallet_account"
											,
										Element:span
											"wallet"
											:
										Element:span
											"MOBIKWIK"
											,
										Element:span
											"token"
											: null,
										Element:span
											"current_balance"
											: null,
										Element:span
											"linked"
											:
										Element:span
											false
											,
										Element:span
											"last_refreshed"
											: null
										Element:span
											}
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
										Element:span
											<
										Element:span
											Wallet
										Element:span
											>
										Element:span
											{
										Element:span
											'id'
										Element:span
											:
										Element:span
											u'wlt_q23xzki3pazgtezo'
										Element:span
											,
										Element:span
											'object'
										Element:span
											:
										Element:span
											u'wallet_account'
										Element:span
											,
										Element:span
											'wallet'
										Element:span
											:
										Element:span
											u'MOBIKWIK'
										Element:span
											,
										Element:span
											'token'
										Element:span
											:
										Element:span
											None
										Element:span
											,
										Element:span
											'current_balance'
										Element:span
											:
										Element:span
											None
										Element:span
											,
										Element:span
											'linked'
										Element:span
											:
										Element:span
											False
										Element:span
											,
										Element:span
											'last_refreshed'
										Element:span
											:
										Element:span
											None
										Element:span
											}
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
										Element:span
											<
										Element:span
											Wallets
										Element:span
											::
										Element:span
											Wallet
										Element:span
											:
										Element:span
											0x00000a
										Element:span
											>
										Element:span
											{
										Element:span
											@id
										Element:span
											=
										Element:span
											"wlt_q23xzki3pazgtezo"
										Element:span
											,
										Element:span
											@object
										Element:span
											=
										Element:span
											"wallet_account"
										Element:span
											,
										Element:span
											@wallet
										Element:span
											=
										Element:span
											"MOBIKWIK"
										Element:span
											,
										Element:span
											@token
										Element:span
											=
										Element:span
											nil
										Element:span
											,
										Element:span
											@current_balance
										Element:span
											=
										Element:span
											nil
										Element:span
											,
										Element:span
											@linked
										Element:span
											=
										Element:span
											false
										Element:span
											,
										Element:span
											@last_refreshed
										Element:span
											=
										Element:span
											nil
										Element:span
											}
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
										Element:span
											Wallet
										Element:span
											Object
										Element:span
											(
										Element:span
											[
										Element:span
											id
										Element:span
											]
										Element:span
											=>
										Element:span
											"wlt_q23xzki3pazgtezo"
										Element:span
											[
										Element:span
											object
										Element:span
											]
										Element:span
											=>
										Element:span
											"wallet_account"
										Element:span
											[
										Element:span
											wallet
										Element:span
											]
										Element:span
											=>
										Element:span
											"MOBIKWIK"
										Element:span
											[
										Element:span
											token
										Element:span
											]
										Element:span
											=>
										Element:span
											null
										Element:span
											[
										Element:span
											current_balance
										Element:span
											]
										Element:span
											=>
										Element:span
											null
										Element:span
											[
										Element:span
											linked
										Element:span
											]
										Element:span
											=>
										Element:span
											false
										Element:span
											[
										Element:span
											last_refreshed
										Element:span
											]
										Element:span
											=>
										Element:span
											null
										Element:span
											)
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
										Element:span
											@object
										Element:span
											in
										Element:span
											.
										Element:span
											juspay
										Element:span
											.
										Element:span
											model
										Element:span
											.
										Element:span
											Wallet
										Element:span
											JSON:
										Element:span
											{
										Element:span
											"id"
										Element:span
											:
										Element:span
											"wlt_q23xzki3pazgtezo"
										Element:span
											,
										Element:span
											"object"
										Element:span
											:
										Element:span
											"wallet_account"
										Element:span
											,
										Element:span
											"wallet"
										Element:span
											:
										Element:span
											"MOBIKWIK"
										Element:span
											,
										Element:span
											"token"
										Element:span
											:
										Element:span
											null
										Element:span
											,
										Element:span
											"current_balance"
										Element:span
											:
										Element:span
											null
										Element:span
											,
										Element:span
											"linked"
										Element:span
											:
										Element:span
											false
										Element:span
											,
										Element:span
											"last_refreshed"
										Element:span
											:
										Element:span
											null
										Element:span
											}
									Node:
									(type) c
									(layer)3
										Element:h4
											Response Parameters
									Node:
									(type) c
									(layer)3
										Element:table
										Element:thead
										Element:tr
										Element:th
											Field
										Element:th
											Type
										Element:th
											Description
										Element:tbody
										Element:tr
										Element:td
											id
										Element:td
											String
										Element:td
											Wallet id generated by Juspay after creating wallet.
										Element:tr
										Element:td
											object
										Element:td
											String
										Element:td
											Object type of the entity. In this case, it will be
										Element:code
											wallet_account
											.
										Element:tr
										Element:td
											wallet
										Element:td
											String
										Element:td
											Name of the wallet provider.
										Element:tr
										Element:td
											token
										Element:td
											String
										Element:td
											One time use token for performing direct debit transaction. This value will be null if wallet is not linked. This has to be passed in /txns while attempting direct debit using particular wallet.
										Element:tr
										Element:td
											current_balance
										Element:td
											Double
										Element:td
											Wallet balance at last_refreshed time.
										Element:tr
										Element:td
											linked
										Element:td
											Boolean
										Element:td
											Indicates if the wallet account is deep linked for direct authorization. Requires one time authentication by the customer.
										Element:tr
										Element:td
											last_refreshed
										Element:td
											String
										Element:td
											Date and time of the last synchronisation with the wallet provider. Will be updated when you call the
										Element:code
											refresh
											api.
									Node:
									(type) c
									(layer)3
										Element:h2
											Authenticate
									Node:
									(type) c
									(layer)3
										Element:p
											Starts the
										Element:strong
											authentication
											and
										Element:strong
											linking
											process of the wallet with the customer. This API is used if the wallet was
										Element:strong
											delinked
											earlier by the customer or you decided to skip authentication during wallet creation. The customer will get an OTP on his registered mobile number on successful completion of this step.
									Node:
									(type) c
									(layer)3
										Element:blockquote
										Element:p
											Definition
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											POST https://api.juspay.in/wallets/
										Element:span
											$wallet_id
									Node:
									(type) c
									(layer)3
										Element:blockquote
										Element:p
											Example Request
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											curl -X POST https://api.juspay.in/wallets/
										Element:span
											$wallet_id
										Element:span
											\
											-u api_key:
										Element:span
											\
											-d
										Element:span
											"command=authenticate"
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
										Element:span
											Juspay
										Element:span
											.
										Element:span
											Wallets
										Element:span
											.
										Element:span
											authenticate
										Element:span
											(
										Element:span
											wallet_id
										Element:span
											=
										Element:span
											'wlt_q23xzki3pazgtezo'
										Element:span
											)
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
										Element:span
											Wallets
										Element:span
											.
										Element:span
											authenticate
										Element:span
											(
										Element:span
											:wallet_id
										Element:span
											=>
										Element:span
											'wlt_q23xzki3pazgtezo'
										Element:span
											)
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
										Element:span
											$walletid
										Element:span
											=
										Element:span
											'wlt_q23xzki3pazgtezo'
										Element:span
											;
										Element:span
											$response
										Element:span
											=
										Element:span
											Wallet
										Element:span
											::
										Element:span
											authenticate
										Element:span
											(
										Element:span
											$walletid
										Element:span
											);
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
										Element:span
											String
										Element:span
											walletId
										Element:span
											=
										Element:span
											"wlt_q23xzki3pazgtezo"
										Element:span
											;
										Element:span
											Wallet
										Element:span
											wallet
										Element:span
											=
										Element:span
											Wallet
										Element:span
											.
										Element:span
											authenticate
										Element:span
											(
										Element:span
											walletId
										Element:span
											);
									Node:
									(type) c
									(layer)3
										Element:h4
											Request Parameters
									Node:
									(type) c
									(layer)3
										Element:table
										Element:thead
										Element:tr
										Element:th
											Field
										Element:th
											Type
										Element:th
											Description
										Element:tbody
										Element:tr
										Element:td
											command
										Element:br
										Element:code
											Required
										Element:td
											String
										Element:td
											Send it as
										Element:code
											authenticate
											if you want to start the authentication/linking process.
									Node:
									(type) c
									(layer)3
										Element:blockquote
										Element:p
											Example Response
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
										Element:span
											{
										Element:span
											"id"
											:
										Element:span
											"wlt_q23xzki3pazgtezo"
											,
										Element:span
											"object"
											:
										Element:span
											"wallet_account"
											,
										Element:span
											"wallet"
											:
										Element:span
											"MOBIKWIK"
											,
										Element:span
											"token"
											: null,
										Element:span
											"current_balance"
											: null,
										Element:span
											"linked"
											:
										Element:span
											false
											,
										Element:span
											"last_refreshed"
											: null
										Element:span
											}
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
										Element:span
											<
										Element:span
											Wallet
										Element:span
											>
										Element:span
											{
										Element:span
											'id'
										Element:span
											:
										Element:span
											u'wlt_q23xzki3pazgtezo'
										Element:span
											,
										Element:span
											'object'
										Element:span
											:
										Element:span
											u'wallet_account'
										Element:span
											,
										Element:span
											'wallet'
										Element:span
											:
										Element:span
											u'MOBIKWIK'
										Element:span
											,
										Element:span
											'token'
										Element:span
											:
										Element:span
											None
										Element:span
											,
										Element:span
											'current_balance'
										Element:span
											:
										Element:span
											None
										Element:span
											,
										Element:span
											'linked'
										Element:span
											:
										Element:span
											False
										Element:span
											,
										Element:span
											'last_refreshed'
										Element:span
											:
										Element:span
											None
										Element:span
											}
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
										Element:span
											<
										Element:span
											Wallets
										Element:span
											::
										Element:span
											Wallet
										Element:span
											:
										Element:span
											0x00000a
										Element:span
											>
										Element:span
											{
										Element:span
											@id
										Element:span
											=
										Element:span
											"wlt_q23xzki3pazgtezo"
										Element:span
											,
										Element:span
											@object
										Element:span
											=
										Element:span
											"wallet_account"
										Element:span
											,
										Element:span
											@wallet
										Element:span
											=
										Element:span
											"MOBIKWIK"
										Element:span
											,
										Element:span
											@token
										Element:span
											=
										Element:span
											nil
										Element:span
											,
										Element:span
											@current_balance
										Element:span
											=
										Element:span
											nil
										Element:span
											,
										Element:span
											@linked
										Element:span
											=
										Element:span
											false
										Element:span
											,
										Element:span
											@last_refreshed
										Element:span
											=
										Element:span
											nil
										Element:span
											}
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
										Element:span
											Wallet
										Element:span
											Object
										Element:span
											(
										Element:span
											[
										Element:span
											id
										Element:span
											]
										Element:span
											=>
										Element:span
											"wlt_q23xzki3pazgtezo"
										Element:span
											[
										Element:span
											object
										Element:span
											]
										Element:span
											=>
										Element:span
											"wallet_account"
										Element:span
											[
										Element:span
											wallet
										Element:span
											]
										Element:span
											=>
										Element:span
											"MOBIKWIK"
										Element:span
											[
										Element:span
											token
										Element:span
											]
										Element:span
											=>
										Element:span
											null
										Element:span
											[
										Element:span
											current_balance
										Element:span
											]
										Element:span
											=>
										Element:span
											null
										Element:span
											[
										Element:span
											linked
										Element:span
											]
										Element:span
											=>
										Element:span
											false
										Element:span
											[
										Element:span
											last_refreshed
										Element:span
											]
										Element:span
											=>
										Element:span
											null
										Element:span
											)
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
										Element:span
											@object
										Element:span
											in
										Element:span
											.
										Element:span
											juspay
										Element:span
											.
										Element:span
											model
										Element:span
											.
										Element:span
											Wallet
										Element:span
											JSON:
										Element:span
											{
										Element:span
											"id"
										Element:span
											:
										Element:span
											"wlt_q23xzki3pazgtezo"
										Element:span
											,
										Element:span
											"object"
										Element:span
											:
										Element:span
											"wallet_account"
										Element:span
											,
										Element:span
											"wallet"
										Element:span
											:
										Element:span
											"MOBIKWIK"
										Element:span
											,
										Element:span
											"token"
										Element:span
											:
										Element:span
											null
										Element:span
											,
										Element:span
											"current_balance"
										Element:span
											:
										Element:span
											null
										Element:span
											,
										Element:span
											"linked"
										Element:span
											:
										Element:span
											false
										Element:span
											,
										Element:span
											"last_refreshed"
										Element:span
											:
										Element:span
											null
										Element:span
											}
									Node:
									(type) c
									(layer)3
										Element:h4
											Response Parameters
									Node:
									(type) c
									(layer)3
										Element:table
										Element:thead
										Element:tr
										Element:th
											Field
										Element:th
											Type
										Element:th
											Description
										Element:tbody
										Element:tr
										Element:td
											id
										Element:td
											String
										Element:td
											Wallet id generated by Juspay after creating wallet.
										Element:tr
										Element:td
											object
										Element:td
											String
										Element:td
											Object type of the entity. In this case, it will be
										Element:code
											wallet_account
											.
										Element:tr
										Element:td
											wallet
										Element:td
											String
										Element:td
											Name of the wallet provider.
										Element:tr
										Element:td
											token
										Element:td
											String
										Element:td
											One time use token for performing direct debit transaction. This value will be null if wallet is not linked. This has to be passed in /txns while attempting direct debit using particular wallet.
										Element:tr
										Element:td
											current_balance
										Element:td
											Double
										Element:td
											Wallet balance at last_refreshed time.
										Element:tr
										Element:td
											linked
										Element:td
											Boolean
										Element:td
											Indicates if the wallet account is deep linked for direct authorization. Requires one time authentication by the customer.
										Element:tr
										Element:td
											last_refreshed
										Element:td
											String
										Element:td
											Date and time of the last synchronisation with the wallet provider. Will be updated when you call the
										Element:code
											refresh
											api.
									Node:
									(type) c
									(layer)3
										Element:h2
											Link
									Node:
									(type) c
									(layer)3
										Element:p
											Completes the authentication and linking process of the wallet with the customer account. OTP received from the
										Element:code
											authenticate
											API call is forwarded to Juspay using this API for linking the wallet. On successful verification of the OTP, the wallet is linked with the customer object. If failed, then
										Element:code
											linked
											attribute will remain to be
										Element:code
											false
											.
									Node:
									(type) c
									(layer)3
										Element:p
											Returns the wallet object.
									Node:
									(type) c
									(layer)3
										Element:blockquote
										Element:p
											Definition
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											POST https://api.juspay.in/wallets/
										Element:span
											$wallet_id
									Node:
									(type) c
									(layer)3
										Element:blockquote
										Element:p
											Example Request
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											curl -X POST https://api.juspay.in/wallets/
										Element:span
											$wallet_id
										Element:span
											\
											-u api_key:
										Element:span
											\
											-d
										Element:span
											"command=link"
											-d
										Element:span
											"otp=345678"
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
										Element:span
											Juspay
										Element:span
											.
										Element:span
											Wallets
										Element:span
											.
										Element:span
											link
										Element:span
											(
										Element:span
											wallet_id
										Element:span
											=
										Element:span
											'wlt_q23xzki3pazgtezo'
										Element:span
											,
										Element:span
											otp
										Element:span
											=
										Element:span
											'345678'
										Element:span
											)
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
										Element:span
											Wallets
										Element:span
											.
										Element:span
											link
										Element:span
											(
										Element:span
											:wallet_id
										Element:span
											=>
										Element:span
											'wlt_q23xzki3pazgtezo'
										Element:span
											,
										Element:span
											otp
										Element:span
											=>
										Element:span
											'345678'
										Element:span
											)
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
										Element:span
											$walletid
										Element:span
											=
										Element:span
											'wlt_q23xzki3pazgtezo'
										Element:span
											;
										Element:span
											$otp
										Element:span
											=
										Element:span
											'345678'
										Element:span
											;
										Element:span
											$response
										Element:span
											=
										Element:span
											Wallet
										Element:span
											::
										Element:span
											link
										Element:span
											(
										Element:span
											$walletid
										Element:span
											,
										Element:span
											$otp
										Element:span
											);
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
										Element:span
											String
										Element:span
											walletId
										Element:span
											=
										Element:span
											"wlt_q23xzki3pazgtezo"
										Element:span
											;
										Element:span
											String
										Element:span
											otp
										Element:span
											=
										Element:span
											"345678"
										Element:span
											;
										Element:span
											Wallet
										Element:span
											wallet
										Element:span
											=
										Element:span
											Wallet
										Element:span
											.
										Element:span
											link
										Element:span
											(
										Element:span
											walletId
										Element:span
											,
										Element:span
											otp
										Element:span
											);
									Node:
									(type) c
									(layer)3
										Element:h4
											Request Parameters
									Node:
									(type) c
									(layer)3
										Element:table
										Element:thead
										Element:tr
										Element:th
											Field
										Element:th
											Type
										Element:th
											Description
										Element:tbody
										Element:tr
										Element:td
											command
										Element:br
										Element:code
											Required
										Element:td
											String
										Element:td
											Send it as
										Element:code
											link
											if you want to complete the authentication/linking process.
										Element:tr
										Element:td
											otp
										Element:br
										Element:code
											Required
										Element:td
											String
										Element:td
											OTP sent by the provider to the customer’s registered mobile number.
									Node:
									(type) c
									(layer)3
										Element:blockquote
										Element:p
											Example Response
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
										Element:span
											{
										Element:span
											"id"
											:
										Element:span
											"wlt_q23xzki3pazgtezo"
											,
										Element:span
											"object"
											:
										Element:span
											"wallet_account"
											,
										Element:span
											"wallet"
											:
										Element:span
											"MOBIKWIK"
											,
										Element:span
											"token"
											:
										Element:span
											"tok_winysteev9eftrwcv6me"
											,
										Element:span
											"current_balance"
											: 250.00,
										Element:span
											"linked"
											:
										Element:span
											true
											,
										Element:span
											"last_refreshed"
											:
										Element:span
											"2016-08-01T08:07:52+0000"
										Element:span
											}
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
										Element:span
											<
										Element:span
											Wallet
										Element:span
											>
										Element:span
											{
										Element:span
											'id'
										Element:span
											:
										Element:span
											u'wlt_q23xzki3pazgtezo'
										Element:span
											,
										Element:span
											'object'
										Element:span
											:
										Element:span
											u'wallet_account'
										Element:span
											,
										Element:span
											'wallet'
										Element:span
											:
										Element:span
											u'MOBIKWIK'
										Element:span
											,
										Element:span
											'token'
										Element:span
											:
										Element:span
											u'tok_winysteev9eftrwcv6me'
										Element:span
											,
										Element:span
											'current_balance'
										Element:span
											:
										Element:span
											250.00
										Element:span
											,
										Element:span
											'linked'
										Element:span
											:
										Element:span
											true
										Element:span
											,
										Element:span
											'last_refreshed'
										Element:span
											:
										Element:span
											u'2016-08-01T08:07:52+0000'
										Element:span
											}
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
										Element:span
											<
										Element:span
											Wallets
										Element:span
											::
										Element:span
											Wallet
										Element:span
											:
										Element:span
											0x00000a
										Element:span
											>
										Element:span
											{
										Element:span
											@id
										Element:span
											=
										Element:span
											"wlt_q23xzki3pazgtezo"
										Element:span
											,
										Element:span
											@object
										Element:span
											=
										Element:span
											"wallet_account"
										Element:span
											,
										Element:span
											@wallet
										Element:span
											=
										Element:span
											"MOBIKWIK"
										Element:span
											,
										Element:span
											@token
										Element:span
											=
										Element:span
											"tok_winysteev9eftrwcv6me"
										Element:span
											,
										Element:span
											@current_balance
										Element:span
											=
										Element:span
											250
										Element:span
											.
										Element:span
											00
										Element:span
											,
										Element:span
											@linked
										Element:span
											=
										Element:span
											true
										Element:span
											,
										Element:span
											@last_refreshed
										Element:span
											=
										Element:span
											"2016-08-01T08:07:52+0000"
										Element:span
											}
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
										Element:span
											Wallet
										Element:span
											Object
										Element:span
											(
										Element:span
											[
										Element:span
											id
										Element:span
											]
										Element:span
											=>
										Element:span
											"wlt_q23xzki3pazgtezo"
										Element:span
											[
										Element:span
											object
										Element:span
											]
										Element:span
											=>
										Element:span
											"wallet_account"
										Element:span
											[
										Element:span
											wallet
										Element:span
											]
										Element:span
											=>
										Element:span
											"MOBIKWIK"
										Element:span
											[
										Element:span
											token
										Element:span
											]
										Element:span
											=>
										Element:span
											"tok_winysteev9eftrwcv6me"
										Element:span
											[
										Element:span
											current_balance
										Element:span
											]
										Element:span
											=>
										Element:span
											250.00
										Element:span
											[
										Element:span
											linked
										Element:span
											]
										Element:span
											=>
										Element:span
											true
										Element:span
											[
										Element:span
											last_refreshed
										Element:span
											]
										Element:span
											=>
										Element:span
											"2016-08-01T08:07:52+0000"
										Element:span
											)
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
										Element:span
											@object
										Element:span
											in
										Element:span
											.
										Element:span
											juspay
										Element:span
											.
										Element:span
											model
										Element:span
											.
										Element:span
											Wallet
										Element:span
											JSON:
										Element:span
											{
										Element:span
											"id"
										Element:span
											:
										Element:span
											"wlt_q23xzki3pazgtezo"
										Element:span
											,
										Element:span
											"object"
										Element:span
											:
										Element:span
											"wallet_account"
										Element:span
											,
										Element:span
											"wallet"
										Element:span
											:
										Element:span
											"MOBIKWIK"
										Element:span
											,
										Element:span
											"token"
										Element:span
											:
										Element:span
											"tok_winysteev9eftrwcv6me"
										Element:span
											,
										Element:span
											"current_balance"
										Element:span
											:
										Element:span
											250.00
										Element:span
											,
										Element:span
											"linked"
										Element:span
											:
										Element:span
											true
										Element:span
											,
										Element:span
											"last_refreshed"
										Element:span
											:
										Element:span
											"2016-08-01T08:07:52+0000"
										Element:span
											}
									Node:
									(type) c
									(layer)3
										Element:h4
											Response Parameters
									Node:
									(type) c
									(layer)3
										Element:table
										Element:thead
										Element:tr
										Element:th
											Field
										Element:th
											Type
										Element:th
											Description
										Element:tbody
										Element:tr
										Element:td
											id
										Element:td
											String
										Element:td
											Wallet id generated by Juspay after creating wallet.
										Element:tr
										Element:td
											object
										Element:td
											String
										Element:td
											Object type of the entity. In this case, it will be
										Element:code
											wallet_account
											.
										Element:tr
										Element:td
											wallet
										Element:td
											String
										Element:td
											Name of the wallet provider.
										Element:tr
										Element:td
											token
										Element:td
											String
										Element:td
											One time use token for performing direct debit transaction. This value will be null if wallet is not linked. This has to be passed in /txns while attempting direct debit using particular wallet.
										Element:tr
										Element:td
											current_balance
										Element:td
											Double
										Element:td
											Wallet balance at last_refreshed time.
										Element:tr
										Element:td
											linked
										Element:td
											Boolean
										Element:td
											Indicates if the wallet account is deep linked for direct authorization. Requires one time authentication by the customer.
										Element:tr
										Element:td
											last_refreshed
										Element:td
											String
										Element:td
											Date and time of the last synchronisation with the wallet provider. Will be updated when you call the
										Element:code
											refresh
											api.
									Node:
									(type) c
									(layer)3
										Element:h2
											Delink
									Node:
									(type) c
									(layer)3
										Element:p
											Use this call to delink the wallet from the customer.
									Node:
									(type) c
									(layer)3
										Element:blockquote
										Element:p
											Definition
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											POST https://api.juspay.in/wallets/
										Element:span
											$wallet_id
									Node:
									(type) c
									(layer)3
										Element:blockquote
										Element:p
											Example Request
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											curl -X POST https://api.juspay.in/wallets/
										Element:span
											$wallet_id
										Element:span
											\
											-u api_key:
										Element:span
											\
											-d
										Element:span
											"command=delink"
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
										Element:span
											Juspay
										Element:span
											.
										Element:span
											Wallets
										Element:span
											.
										Element:span
											delink
										Element:span
											(
										Element:span
											wallet_id
										Element:span
											=
										Element:span
											'wlt_q23xzki3pazgtezo'
										Element:span
											)
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
										Element:span
											Wallets
										Element:span
											.
										Element:span
											delink
										Element:span
											(
										Element:span
											:wallet_id
										Element:span
											=>
										Element:span
											'wlt_q23xzki3pazgtezo'
										Element:span
											)
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
										Element:span
											$walletid
										Element:span
											=
										Element:span
											'wlt_q23xzki3pazgtezo'
										Element:span
											;
										Element:span
											$response
										Element:span
											=
										Element:span
											Wallet
										Element:span
											::
										Element:span
											delink
										Element:span
											(
										Element:span
											$walletid
										Element:span
											);
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
										Element:span
											String
										Element:span
											walletId
										Element:span
											=
										Element:span
											"wlt_q23xzki3pazgtezo"
										Element:span
											;
										Element:span
											Wallet
										Element:span
											wallet
										Element:span
											=
										Element:span
											Wallet
										Element:span
											.
										Element:span
											delink
										Element:span
											(
										Element:span
											walletId
										Element:span
											);
									Node:
									(type) c
									(layer)3
										Element:h4
											Request Parameters
									Node:
									(type) c
									(layer)3
										Element:table
										Element:thead
										Element:tr
										Element:th
											Field
										Element:th
											Type
										Element:th
											Description
										Element:tbody
										Element:tr
										Element:td
											command
										Element:br
										Element:code
											Required
										Element:td
											String
										Element:td
											Send it as
										Element:code
											delink
											to delink the wallet.
									Node:
									(type) c
									(layer)3
										Element:blockquote
										Element:p
											Example Response
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
										Element:span
											{
										Element:span
											"id"
											:
										Element:span
											"wlt_q23xzki3pazgtezo"
											,
										Element:span
											"object"
											:
										Element:span
											"wallet_account"
											,
										Element:span
											"wallet"
											:
										Element:span
											"MOBIKWIK"
											,
										Element:span
											"token"
											: null,
										Element:span
											"current_balance"
											: null,
										Element:span
											"linked"
											:
										Element:span
											"false"
											,
										Element:span
											"last_refreshed"
											: null
										Element:span
											}
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
										Element:span
											<
										Element:span
											Wallet
										Element:span
											>
										Element:span
											{
										Element:span
											'id'
										Element:span
											:
										Element:span
											u'wlt_q23xzki3pazgtezo'
										Element:span
											,
										Element:span
											'object'
										Element:span
											:
										Element:span
											u'wallet_account'
										Element:span
											,
										Element:span
											'wallet'
										Element:span
											:
										Element:span
											u'MOBIKWIK'
										Element:span
											,
										Element:span
											'token'
										Element:span
											:
										Element:span
											None
										Element:span
											,
										Element:span
											'current_balance'
										Element:span
											:
										Element:span
											None
										Element:span
											,
										Element:span
											'linked'
										Element:span
											:
										Element:span
											False
										Element:span
											,
										Element:span
											'last_refreshed'
										Element:span
											:
										Element:span
											None
										Element:span
											}
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
										Element:span
											<
										Element:span
											Wallets
										Element:span
											::
										Element:span
											Wallet
										Element:span
											:
										Element:span
											0x00000a
										Element:span
											>
										Element:span
											{
										Element:span
											@id
										Element:span
											=
										Element:span
											"wlt_q23xzki3pazgtezo"
										Element:span
											,
										Element:span
											@object
										Element:span
											=
										Element:span
											"wallet_account"
										Element:span
											,
										Element:span
											@wallet
										Element:span
											=
										Element:span
											"MOBIKWIK"
										Element:span
											,
										Element:span
											@token
										Element:span
											=
										Element:span
											nil
										Element:span
											,
										Element:span
											@current_balance
										Element:span
											=
										Element:span
											nil
										Element:span
											,
										Element:span
											@linked
										Element:span
											=
										Element:span
											false
										Element:span
											,
										Element:span
											@last_refreshed
										Element:span
											=
										Element:span
											nil
										Element:span
											}
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
										Element:span
											Wallet
										Element:span
											Object
										Element:span
											(
										Element:span
											[
										Element:span
											id
										Element:span
											]
										Element:span
											=>
										Element:span
											"wlt_q23xzki3pazgtezo"
										Element:span
											[
										Element:span
											object
										Element:span
											]
										Element:span
											=>
										Element:span
											"wallet_account"
										Element:span
											[
										Element:span
											wallet
										Element:span
											]
										Element:span
											=>
										Element:span
											"MOBIKWIK"
										Element:span
											[
										Element:span
											token
										Element:span
											]
										Element:span
											=>
										Element:span
											null
										Element:span
											[
										Element:span
											current_balance
										Element:span
											]
										Element:span
											=>
										Element:span
											null
										Element:span
											[
										Element:span
											linked
										Element:span
											]
										Element:span
											=>
										Element:span
											false
										Element:span
											[
										Element:span
											last_refreshed
										Element:span
											]
										Element:span
											=>
										Element:span
											null
										Element:span
											)
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
										Element:span
											@object
										Element:span
											in
										Element:span
											.
										Element:span
											juspay
										Element:span
											.
										Element:span
											model
										Element:span
											.
										Element:span
											Wallet
										Element:span
											JSON:
										Element:span
											{
										Element:span
											"id"
										Element:span
											:
										Element:span
											"wlt_q23xzki3pazgtezo"
										Element:span
											,
										Element:span
											"object"
										Element:span
											:
										Element:span
											"wallet_account"
										Element:span
											,
										Element:span
											"wallet"
										Element:span
											:
										Element:span
											"MOBIKWIK"
										Element:span
											,
										Element:span
											"token"
										Element:span
											:
										Element:span
											null
										Element:span
											,
										Element:span
											"current_balance"
										Element:span
											:
										Element:span
											null
										Element:span
											,
										Element:span
											"linked"
										Element:span
											:
										Element:span
											false
										Element:span
											,
										Element:span
											"last_refreshed"
										Element:span
											:
										Element:span
											null
										Element:span
											}
									Node:
									(type) c
									(layer)3
										Element:h4
											Response Parameters
									Node:
									(type) c
									(layer)3
										Element:table
										Element:thead
										Element:tr
										Element:th
											Field
										Element:th
											Type
										Element:th
											Description
										Element:tbody
										Element:tr
										Element:td
											id
										Element:td
											String
										Element:td
											Wallet id generated by Juspay after creating wallet.
										Element:tr
										Element:td
											object
										Element:td
											String
										Element:td
											Object type of the entity. In this case, it will be
										Element:code
											wallet_account
											.
										Element:tr
										Element:td
											wallet
										Element:td
											String
										Element:td
											Name of the wallet provider.
										Element:tr
										Element:td
											token
										Element:td
											String
										Element:td
											One time use token for performing direct debit transaction. This value will be null if wallet is not linked. This has to be passed in /txns while attempting direct debit using particular wallet.
										Element:tr
										Element:td
											current_balance
										Element:td
											Double
										Element:td
											Wallet balance at last_refreshed time.
										Element:tr
										Element:td
											linked
										Element:td
											Boolean
										Element:td
											Indicates if the wallet account is deep linked for direct authorization. Requires one time authentication by the customer.
										Element:tr
										Element:td
											last_refreshed
										Element:td
											String
										Element:td
											Date and time of the last synchronisation with the wallet provider. Will be updated when you call the
										Element:code
											refresh
											api.
									Node:
									(type) c
									(layer)3
										Element:h2
											Get
									Node:
									(type) c
									(layer)3
										Element:p
											Get the wallet details. You can also use this api to generate one time use token for direct debit transactions.
									Node:
									(type) c
									(layer)3
										Element:blockquote
										Element:p
											Definition
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											GET https://api.juspay.in/wallets/
										Element:span
											$wallet_id
									Node:
									(type) c
									(layer)3
										Element:blockquote
										Element:p
											Example Request
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											curl -X GET https://api.juspay.in/wallets/
										Element:span
											$wallet_id
										Element:span
											\
											-u api_key:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
									Node:
									(type) c
									(layer)3
										Element:h4
											Request Parameters
									Node:
									(type) c
									(layer)3
										Element:table
										Element:thead
										Element:tr
										Element:th
											Field
										Element:th
											Type
										Element:th
											Description
										Element:tbody
									Node:
									(type) c
									(layer)3
										Element:blockquote
										Element:p
											Example Response
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
										Element:span
											{
										Element:span
											"id"
											:
										Element:span
											"wlt_q23xzki3pazgtezo"
											,
										Element:span
											"object"
											:
										Element:span
											"wallet_account"
											,
										Element:span
											"wallet"
											:
										Element:span
											"MOBIKWIK"
											,
										Element:span
											"token"
											:
										Element:span
											"tok_winysteev9eftrwcv6me"
											,
										Element:span
											"current_balance"
											: 250.00,
										Element:span
											"linked"
											:
										Element:span
											"true"
											,
										Element:span
											"last_refreshed"
											:
										Element:span
											"2016-08-02T08:07:52+0000"
										Element:span
											}
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
									Node:
									(type) c
									(layer)3
										Element:h4
											Response Parameters
									Node:
									(type) c
									(layer)3
										Element:table
										Element:thead
										Element:tr
										Element:th
											Field
										Element:th
											Type
										Element:th
											Description
										Element:tbody
										Element:tr
										Element:td
											id
										Element:td
											String
										Element:td
											Wallet id generated by Juspay after creating wallet.
										Element:tr
										Element:td
											object
										Element:td
											String
										Element:td
											Object type of the entity. In this case, it will be
										Element:code
											wallet_account
											.
										Element:tr
										Element:td
											wallet
										Element:td
											String
										Element:td
											Name of the wallet provider.
										Element:tr
										Element:td
											token
										Element:td
											String
										Element:td
											One time use token for performing direct debit transaction. This value will be null if wallet is not linked. This has to be passed in /txns while attempting direct debit using particular wallet.
										Element:tr
										Element:td
											current_balance
										Element:td
											Double
										Element:td
											Wallet balance at last_refreshed time.
										Element:tr
										Element:td
											linked
										Element:td
											Boolean
										Element:td
											Indicates if the wallet account is deep linked for direct authorization. Requires one time authentication by the customer.
										Element:tr
										Element:td
											last_refreshed
										Element:td
											String
										Element:td
											Date and time of the last synchronisation with the wallet provider. Will be updated when you call the
										Element:code
											refresh
											api.
									Node:
									(type) c
									(layer)3
										Element:h2
											Refresh
									Node:
									(type) c
									(layer)3
										Element:p
											Refresh wallet API can be used to get the wallet with updated balance from wallet provider. This API is applicable only for
										Element:strong
											linked
											wallets.
									Node:
									(type) c
									(layer)3
										Element:blockquote
										Element:p
											Definition
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											GET https://api.juspay.in/wallets/
										Element:span
											$wallet_id
									Node:
									(type) c
									(layer)3
										Element:blockquote
										Element:p
											Example Request
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											curl -X GET https://api.juspay.in/wallets/
										Element:span
											$wallet_id
										Element:span
											\
											-u api_key:
										Element:span
											\
											-d
										Element:span
											"command=refresh"
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
										Element:span
											Juspay
										Element:span
											.
										Element:span
											Wallets
										Element:span
											.
										Element:span
											refresh_by_wallet_id
										Element:span
											(
										Element:span
											wallet_id
										Element:span
											=
										Element:span
											'wlt_q23xzki3pazgtezo'
										Element:span
											)
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
										Element:span
											Wallets
										Element:span
											.
										Element:span
											refresh_by_wallet_id
										Element:span
											(
										Element:span
											:wallet_id
										Element:span
											=>
										Element:span
											'wlt_q23xzki3pazgtezo'
										Element:span
											)
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
										Element:span
											$walletid
										Element:span
											=
										Element:span
											'wlt_q23xzki3pazgtezo'
										Element:span
											;
										Element:span
											$response
										Element:span
											=
										Element:span
											Wallet
										Element:span
											::
										Element:span
											refreshByWalletId
										Element:span
											(
										Element:span
											$walletid
										Element:span
											);
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
										Element:span
											String
										Element:span
											walletId
										Element:span
											=
										Element:span
											"wlt_q23xzki3pazgtezo"
										Element:span
											;
										Element:span
											Wallet
										Element:span
											wallet
										Element:span
											=
										Element:span
											Wallet
										Element:span
											.
										Element:span
											refreshByWalletId
										Element:span
											(
										Element:span
											walletId
										Element:span
											);
									Node:
									(type) c
									(layer)3
										Element:h4
											Request Parameters
									Node:
									(type) c
									(layer)3
										Element:table
										Element:thead
										Element:tr
										Element:th
											Field
										Element:th
											Type
										Element:th
											Description
										Element:tbody
										Element:tr
										Element:td
											command
										Element:br
										Element:code
											Required
										Element:td
											String
										Element:td
											Send it as
										Element:code
											refresh
											to get the updated balances.
									Node:
									(type) c
									(layer)3
										Element:blockquote
										Element:p
											Example Response
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
										Element:span
											{
										Element:span
											"id"
											:
										Element:span
											"wlt_q23xzki3pazgtezo"
											,
										Element:span
											"object"
											:
										Element:span
											"wallet_account"
											,
										Element:span
											"wallet"
											:
										Element:span
											"MOBIKWIK"
											,
										Element:span
											"token"
											:
										Element:span
											"tok_winysteev9eftrwcv6me"
											,
										Element:span
											"current_balance"
											: 250.00,
										Element:span
											"linked"
											:
										Element:span
											"true"
											,
										Element:span
											"last_refreshed"
											:
										Element:span
											"2016-08-02T08:07:52+0000"
										Element:span
											}
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
										Element:span
											<
										Element:span
											Wallet
										Element:span
											>
										Element:span
											{
										Element:span
											'id'
										Element:span
											:
										Element:span
											u'wlt_q23xzki3pazgtezo'
										Element:span
											,
										Element:span
											'object'
										Element:span
											:
										Element:span
											u'wallet_account'
										Element:span
											,
										Element:span
											'wallet'
										Element:span
											:
										Element:span
											u'MOBIKWIK'
										Element:span
											,
										Element:span
											'token'
										Element:span
											:
										Element:span
											u'tok_winysteev9eftrwcv6me'
										Element:span
											,
										Element:span
											'current_balance'
										Element:span
											:
										Element:span
											250.00
										Element:span
											,
										Element:span
											'linked'
										Element:span
											:
										Element:span
											true
										Element:span
											,
										Element:span
											'last_refreshed'
										Element:span
											:
										Element:span
											u'2016-08-02T08:07:52+0000'
										Element:span
											}
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
										Element:span
											<
										Element:span
											Wallets
										Element:span
											::
										Element:span
											Wallet
										Element:span
											:
										Element:span
											0x00000a
										Element:span
											>
										Element:span
											{
										Element:span
											@id
										Element:span
											=
										Element:span
											"wlt_q23xzki3pazgtezo"
										Element:span
											,
										Element:span
											@object
										Element:span
											=
										Element:span
											"wallet_account"
										Element:span
											,
										Element:span
											@wallet
										Element:span
											=
										Element:span
											"MOBIKWIK"
										Element:span
											,
										Element:span
											@token
										Element:span
											=
										Element:span
											"tok_winysteev9eftrwcv6me"
										Element:span
											,
										Element:span
											@current_balance
										Element:span
											=
										Element:span
											250
										Element:span
											.
										Element:span
											00
										Element:span
											,
										Element:span
											@linked
										Element:span
											=
										Element:span
											true
										Element:span
											,
										Element:span
											@last_refreshed
										Element:span
											=
										Element:span
											"2016-08-02T08:07:52+0000"
										Element:span
											}
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
										Element:span
											Wallet
										Element:span
											Object
										Element:span
											(
										Element:span
											[
										Element:span
											id
										Element:span
											]
										Element:span
											=>
										Element:span
											"wlt_q23xzki3pazgtezo"
										Element:span
											[
										Element:span
											object
										Element:span
											]
										Element:span
											=>
										Element:span
											"wallet_account"
										Element:span
											[
										Element:span
											wallet
										Element:span
											]
										Element:span
											=>
										Element:span
											"MOBIKWIK"
										Element:span
											[
										Element:span
											token
										Element:span
											]
										Element:span
											=>
										Element:span
											"tok_winysteev9eftrwcv6me"
										Element:span
											[
										Element:span
											current_balance
										Element:span
											]
										Element:span
											=>
										Element:span
											250.00
										Element:span
											[
										Element:span
											linked
										Element:span
											]
										Element:span
											=>
										Element:span
											true
										Element:span
											[
										Element:span
											last_refreshed
										Element:span
											]
										Element:span
											=>
										Element:span
											"2016-08-02T08:07:52+0000"
										Element:span
											)
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
										Element:span
											@object
										Element:span
											in
										Element:span
											.
										Element:span
											juspay
										Element:span
											.
										Element:span
											model
										Element:span
											.
										Element:span
											Wallet
										Element:span
											JSON:
										Element:span
											{
										Element:span
											"id"
										Element:span
											:
										Element:span
											"wlt_q23xzki3pazgtezo"
										Element:span
											,
										Element:span
											"object"
										Element:span
											:
										Element:span
											"wallet_account"
										Element:span
											,
										Element:span
											"wallet"
										Element:span
											:
										Element:span
											"MOBIKWIK"
										Element:span
											,
										Element:span
											"token"
										Element:span
											:
										Element:span
											"tok_winysteev9eftrwcv6me"
										Element:span
											,
										Element:span
											"current_balance"
										Element:span
											:
										Element:span
											250.00
										Element:span
											,
										Element:span
											"linked"
										Element:span
											:
										Element:span
											true
										Element:span
											,
										Element:span
											"last_refreshed"
										Element:span
											:
										Element:span
											"2016-08-02T08:07:52+0000"
										Element:span
											}
									Node:
									(type) c
									(layer)3
										Element:h4
											Response Parameters
									Node:
									(type) c
									(layer)3
										Element:table
										Element:thead
										Element:tr
										Element:th
											Field
										Element:th
											Type
										Element:th
											Description
										Element:tbody
										Element:tr
										Element:td
											id
										Element:td
											String
										Element:td
											Wallet id generated by Juspay after creating wallet.
										Element:tr
										Element:td
											object
										Element:td
											String
										Element:td
											Object type of the entity. In this case, it will be
										Element:code
											wallet_account
											.
										Element:tr
										Element:td
											wallet
										Element:td
											String
										Element:td
											Name of the wallet provider.
										Element:tr
										Element:td
											token
										Element:td
											String
										Element:td
											One time use token for performing direct debit transaction. This value will be null if wallet is not linked. This has to be passed in /txns while attempting direct debit using particular wallet.
										Element:tr
										Element:td
											current_balance
										Element:td
											Double
										Element:td
											Wallet balance at last_refreshed time.
										Element:tr
										Element:td
											linked
										Element:td
											Boolean
										Element:td
											Indicates if the wallet account is deep linked for direct authorization. Requires one time authentication by the customer.
										Element:tr
										Element:td
											last_refreshed
										Element:td
											String
										Element:td
											Date and time of the last synchronisation with the wallet provider. Will be updated on calling this api.
			Node:
			(type) h1
			(layer)1
				Element:h1
					Payments
			Node:
			(type) c
			(layer)1
				Element:h2
					Credit/Debit Card Payment
			Node:
			(type) c
			(layer)1
				Element:p
					Create a payment transaction for Credit or Debit card. For MAESTRO cards that do not have expiry & CVV, send 12/49 as expiry and 111 as CVV.
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Definition
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					POST https://api.juspay.in/txns
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					Payment
				Element:span
					.
				Element:span
					create
				Element:span
					(
				Element:span
					Map
				Element:span
					params
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example Request
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					// A regular card transaction curl -X POST https://api.juspay.in/txns
				Element:span
					\
					-d
				Element:span
					"order_id=:order_id"
				Element:span
					\
					-d
				Element:span
					"merchant_id=:merchant_id"
				Element:span
					\
					-d
				Element:span
					"payment_method_type=CARD"
				Element:span
					\
					-d
				Element:span
					"payment_method=MASTERCARD"
				Element:span
					\
					-d
				Element:span
					"card_number=5243681100075285"
				Element:span
					\
					-d
				Element:span
					"card_exp_month=10"
				Element:span
					\
					-d
				Element:span
					"card_exp_year=20"
				Element:span
					\
					-d
				Element:span
					"name_on_card=Name"
				Element:span
					\
					-d
				Element:span
					"card_security_code=111"
				Element:span
					\
					-d
				Element:span
					"save_to_locker=true"
				Element:span
					\
					-d
				Element:span
					"redirect_after_payment=true"
				Element:span
					\
					-d
				Element:span
					"format=json"
					// A Stored card transaction curl -X POST https://api.juspay.in/txns
				Element:span
					\
					-d
				Element:span
					"order_id=:order_id"
				Element:span
					\
					-d
				Element:span
					"merchant_id=:merchant_id"
				Element:span
					\
					-d
				Element:span
					"payment_method_type=CARD"
				Element:span
					\
					-d
				Element:span
					"card_token=:card_token"
				Element:span
					\
					-d
				Element:span
					"card_security_code=111"
				Element:span
					\
					-d
				Element:span
					"redirect_after_payment=true"
				Element:span
					\
					-d
				Element:span
					"format=json"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					# A regular card transaction
				Element:span
					Juspay
				Element:span
					.
				Element:span
					Payments
				Element:span
					.
				Element:span
					create_card_payment
				Element:span
					(
				Element:span
					order_id
				Element:span
					=
				Element:span
					'1465893617'
				Element:span
					,
				Element:span
					merchant_id
				Element:span
					=
				Element:span
					'guest'
				Element:span
					,
				Element:span
					payment_method_type
				Element:span
					=
				Element:span
					'CARD'
				Element:span
					,
				Element:span
					card_token
				Element:span
					=
				Element:span
					'68d6b0c6-6e77-473f-a05c-b460ef983fd8'
				Element:span
					,
				Element:span
					redirect_after_payment
				Element:span
					=
				Element:span
					False
				Element:span
					,
				Element:span
					format
				Element:span
					=
				Element:span
					'json'
				Element:span
					,
				Element:span
					card_number
				Element:span
					=
				Element:span
					'5243681100075285'
				Element:span
					,
				Element:span
					name_on_card
				Element:span
					=
				Element:span
					'Customer'
				Element:span
					,
				Element:span
					card_exp_year
				Element:span
					=
				Element:span
					'20'
				Element:span
					,
				Element:span
					card_exp_month
				Element:span
					=
				Element:span
					'12'
				Element:span
					,
				Element:span
					card_security_code
				Element:span
					=
				Element:span
					'123'
				Element:span
					,
				Element:span
					save_to_locker
				Element:span
					=
				Element:span
					False
				Element:span
					)
				Element:span
					# A Stored card transaction
				Element:span
					Juspay
				Element:span
					.
				Element:span
					Payments
				Element:span
					.
				Element:span
					create_card_payment
				Element:span
					(
				Element:span
					order_id
				Element:span
					=
				Element:span
					'1465893617'
				Element:span
					,
				Element:span
					merchant_id
				Element:span
					=
				Element:span
					'guest'
				Element:span
					,
				Element:span
					payment_method_type
				Element:span
					=
				Element:span
					'CARD'
				Element:span
					,
				Element:span
					card_token
				Element:span
					=
				Element:span
					'68d6b0c6-6e77-473f-a05c-b460ef983fd8'
				Element:span
					,
				Element:span
					redirect_after_payment
				Element:span
					=
				Element:span
					False
				Element:span
					,
				Element:span
					format
				Element:span
					=
				Element:span
					'json'
				Element:span
					,
				Element:span
					card_security_code
				Element:span
					=
				Element:span
					'123'
				Element:span
					,
				Element:span
					save_to_locker
				Element:span
					=
				Element:span
					False
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					# A regular card transaction
				Element:span
					Payments
				Element:span
					.
				Element:span
					create_card_payment
				Element:span
					(
				Element:span
					:order_id
				Element:span
					=>
				Element:span
					'1465893617'
				Element:span
					,
				Element:span
					:merchant_id
				Element:span
					=>
				Element:span
					'guest'
				Element:span
					,
				Element:span
					:payment_method_type
				Element:span
					=>
				Element:span
					'CARD'
				Element:span
					,
				Element:span
					:card_token
				Element:span
					=>
				Element:span
					'68d6b0c6-6e77-473f-a05c-b460ef983fd8'
				Element:span
					,
				Element:span
					:redirect_after_payment
				Element:span
					=>
				Element:span
					false
				Element:span
					,
				Element:span
					:format
				Element:span
					=>
				Element:span
					'json'
				Element:span
					,
				Element:span
					:card_number
				Element:span
					=>
				Element:span
					'5243681100075285'
				Element:span
					,
				Element:span
					:name_on_card
				Element:span
					=>
				Element:span
					'Customer'
				Element:span
					,
				Element:span
					:card_exp_year
				Element:span
					=>
				Element:span
					'20'
				Element:span
					,
				Element:span
					:card_exp_month
				Element:span
					=>
				Element:span
					'12'
				Element:span
					,
				Element:span
					:card_security_code
				Element:span
					=>
				Element:span
					'123'
				Element:span
					,
				Element:span
					:save_to_locker
				Element:span
					=>
				Element:span
					false
				Element:span
					)
				Element:span
					# A Stored card transaction
				Element:span
					Payments
				Element:span
					.
				Element:span
					create_card_payment
				Element:span
					(
				Element:span
					:order_id
				Element:span
					=>
				Element:span
					'1465893617'
				Element:span
					,
				Element:span
					:merchant_id
				Element:span
					=>
				Element:span
					'guest'
				Element:span
					,
				Element:span
					:payment_method_type
				Element:span
					=>
				Element:span
					'CARD'
				Element:span
					,
				Element:span
					:card_token
				Element:span
					=>
				Element:span
					'68d6b0c6-6e77-473f-a05c-b460ef983fd8'
				Element:span
					,
				Element:span
					:redirect_after_payment
				Element:span
					=>
				Element:span
					false
				Element:span
					,
				Element:span
					:format
				Element:span
					=>
				Element:span
					'json'
				Element:span
					,
				Element:span
					:card_security_code
				Element:span
					=>
				Element:span
					'123'
				Element:span
					,
				Element:span
					:save_to_locker
				Element:span
					=>
				Element:span
					false
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					# A regular card transaction
				Element:span
					$params
				Element:span
					=
				Element:span
					array
				Element:span
					();
				Element:span
					$params
				Element:span
					[
				Element:span
					'order_id'
				Element:span
					]
				Element:span
					=
				Element:span
					"1465893617"
				Element:span
					;
				Element:span
					$params
				Element:span
					[
				Element:span
					'merchant_id'
				Element:span
					]
				Element:span
					=
				Element:span
					"guest"
				Element:span
					;
				Element:span
					$params
				Element:span
					[
				Element:span
					'payment_method_type'
				Element:span
					]
				Element:span
					=
				Element:span
					"CARD"
				Element:span
					;
				Element:span
					$params
				Element:span
					[
				Element:span
					'card_token'
				Element:span
					]
				Element:span
					=
				Element:span
					"68d6b0c6-6e77-473f-a05c-b460ef983fd8"
				Element:span
					;
				Element:span
					$params
				Element:span
					[
				Element:span
					'redirect_after_payment'
				Element:span
					]
				Element:span
					=
				Element:span
					False
				Element:span
					;
				Element:span
					$params
				Element:span
					[
				Element:span
					'format'
				Element:span
					]
				Element:span
					=
				Element:span
					"json"
				Element:span
					;
				Element:span
					$params
				Element:span
					[
				Element:span
					'card_number'
				Element:span
					]
				Element:span
					=
				Element:span
					"5243681100075285"
				Element:span
					;
				Element:span
					$params
				Element:span
					[
				Element:span
					'name_on_card'
				Element:span
					]
				Element:span
					=
				Element:span
					"Customer"
				Element:span
					;
				Element:span
					$params
				Element:span
					[
				Element:span
					'card_exp_year'
				Element:span
					]
				Element:span
					=
				Element:span
					"20"
				Element:span
					;
				Element:span
					$params
				Element:span
					[
				Element:span
					'card_exp_month'
				Element:span
					]
				Element:span
					=
				Element:span
					"12"
				Element:span
					;
				Element:span
					$params
				Element:span
					[
				Element:span
					'card_security_code'
				Element:span
					]
				Element:span
					=
				Element:span
					"123"
				Element:span
					;
				Element:span
					$params
				Element:span
					[
				Element:span
					'save_to_locker'
				Element:span
					]
				Element:span
					=
				Element:span
					false
				Element:span
					;
				Element:span
					$response
				Element:span
					=
				Element:span
					Payment
				Element:span
					::
				Element:span
					create
				Element:span
					(
				Element:span
					$params
				Element:span
					);
				Element:span
					# A Stored card transaction
				Element:span
					$params
				Element:span
					=
				Element:span
					array
				Element:span
					();
				Element:span
					$params
				Element:span
					[
				Element:span
					'order_id'
				Element:span
					]
				Element:span
					=
				Element:span
					"1465893617"
				Element:span
					;
				Element:span
					$params
				Element:span
					[
				Element:span
					'merchant_id'
				Element:span
					]
				Element:span
					=
				Element:span
					"guest"
				Element:span
					;
				Element:span
					$params
				Element:span
					[
				Element:span
					'payment_method_type'
				Element:span
					]
				Element:span
					=
				Element:span
					"CARD"
				Element:span
					;
				Element:span
					$params
				Element:span
					[
				Element:span
					'card_token'
				Element:span
					]
				Element:span
					=
				Element:span
					"68d6b0c6-6e77-473f-a05c-b460ef983fd8"
				Element:span
					;
				Element:span
					$params
				Element:span
					[
				Element:span
					'redirect_after_payment'
				Element:span
					]
				Element:span
					=
				Element:span
					False
				Element:span
					;
				Element:span
					$params
				Element:span
					[
				Element:span
					'format'
				Element:span
					]
				Element:span
					=
				Element:span
					"json"
				Element:span
					;
				Element:span
					$params
				Element:span
					[
				Element:span
					'card_security_code'
				Element:span
					]
				Element:span
					=
				Element:span
					"123"
				Element:span
					;
				Element:span
					$params
				Element:span
					[
				Element:span
					'save_to_locker'
				Element:span
					]
				Element:span
					=
				Element:span
					false
				Element:span
					;
				Element:span
					$response
				Element:span
					=
				Element:span
					Payment
				Element:span
					::
				Element:span
					create
				Element:span
					(
				Element:span
					$params
				Element:span
					);
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					Map
				Element:span
					<
				Element:span
					String
				Element:span
					,
				Element:span
					Object
				Element:span
					>
				Element:span
					params
				Element:span
					=
				Element:span
					new
				Element:span
					LinkedHashMap
				Element:span
					();
				Element:span
					params
				Element:span
					.
				Element:span
					put
				Element:span
					(
				Element:span
					"order_id"
				Element:span
					,
				Element:span
					"1465893617"
				Element:span
					);
				Element:span
					params
				Element:span
					.
				Element:span
					put
				Element:span
					(
				Element:span
					"merchant_id"
				Element:span
					,
				Element:span
					"guest"
				Element:span
					);
				Element:span
					params
				Element:span
					.
				Element:span
					put
				Element:span
					(
				Element:span
					"payment_method_type"
				Element:span
					,
				Element:span
					"CARD"
				Element:span
					);
				Element:span
					params
				Element:span
					.
				Element:span
					put
				Element:span
					(
				Element:span
					"card_token"
				Element:span
					,
				Element:span
					"68d6b0c6-6e77-473f-a05c-b460ef983fd8"
				Element:span
					);
				Element:span
					params
				Element:span
					.
				Element:span
					put
				Element:span
					(
				Element:span
					"payment_method"
				Element:span
					,
				Element:span
					"MASTERCARD"
				Element:span
					);
				Element:span
					params
				Element:span
					.
				Element:span
					put
				Element:span
					(
				Element:span
					"redirect_after_payment"
				Element:span
					,
				Element:span
					true
				Element:span
					);
				Element:span
					params
				Element:span
					.
				Element:span
					put
				Element:span
					(
				Element:span
					"card_number"
				Element:span
					,
				Element:span
					"5243681100075285"
				Element:span
					);
				Element:span
					params
				Element:span
					.
				Element:span
					put
				Element:span
					(
				Element:span
					"card_exp_month"
				Element:span
					,
				Element:span
					"10"
				Element:span
					);
				Element:span
					params
				Element:span
					.
				Element:span
					put
				Element:span
					(
				Element:span
					"card_exp_year"
				Element:span
					,
				Element:span
					"20"
				Element:span
					);
				Element:span
					params
				Element:span
					.
				Element:span
					put
				Element:span
					(
				Element:span
					"card_security_code"
				Element:span
					,
				Element:span
					"111"
				Element:span
					);
				Element:span
					params
				Element:span
					.
				Element:span
					put
				Element:span
					(
				Element:span
					"save_to_locker"
				Element:span
					,
				Element:span
					false
				Element:span
					);
				Element:span
					Payment
				Element:span
					payment
				Element:span
					=
				Element:span
					Payment
				Element:span
					.
				Element:span
					create
				Element:span
					(
				Element:span
					params
				Element:span
					);
			Node:
			(type) c
			(layer)1
				Element:h4
					Request Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Field
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					order_id
				Element:br
				Element:code
					Required
				Element:td
					String
				Element:td
				Element:code
					order_id
					pertaining to the order for which the payment is started.
				Element:tr
				Element:td
					merchant_id
				Element:br
				Element:code
					Required
				Element:td
					String
				Element:td
					ID of the merchant_account that you hold with us.
				Element:tr
				Element:td
					payment_method_type
				Element:br
				Element:code
					Required
				Element:td
					String
				Element:td
					Must be CARD.
				Element:tr
				Element:td
					payment_method
				Element:td
					String
				Element:td
					One of VISA/MASTERCARD/MAESTRO/AMEX/RUPAY. This is usually inferred from the card number itself and we will take care of this if you are unable to provide this from your end.
				Element:tr
				Element:td
					card_token
				Element:br
				Element:code
					Required
				Element:td
					String
				Element:td
					A valid card token obtained using
				Element:code
					/card/list
					API. If you send this parameter, then
				Element:code
					card_number
					,
				Element:code
					name_on_card
					,
				Element:code
					card_exp_year
					,
				Element:code
					card_exp_month
					fields are not required.
				Element:br
				Element:br
					If the token is generated using the
				Element:code
					/card/tokenize
					API,
				Element:code
					card_number
					,
				Element:code
					name_on_card
					,
				Element:code
					card_exp_year
					,
				Element:code
					card_exp_month
					and
				Element:strong
					fields are not required.
				Element:code
					card_security_code
				Element:tr
				Element:td
					card_number
				Element:br
				Element:code
					Required
				Element:td
					String
				Element:td
					A valid credit/debit card number
				Element:tr
				Element:td
					name_on_card
				Element:br
				Element:code
					Required
				Element:td
					String
				Element:td
					Card holder name. Should contain alphabetical characters only.
				Element:tr
				Element:td
					card_exp_year
				Element:br
				Element:code
					Required
				Element:td
					String
				Element:td
					Represent the expiry year of the card as YY (two digits only)
				Element:tr
				Element:td
					card_exp_month
				Element:br
				Element:code
					Required
				Element:td
					String
				Element:td
					Represent the expiry month of the card as MM (two digits only)
				Element:tr
				Element:td
					card_security_code
				Element:br
				Element:code
					Required
				Element:td
					String
				Element:td
					CVV of the card. Usually three digits.
				Element:tr
				Element:td
					save_to_locker
				Element:br
				Element:code
					Required
				Element:td
					Boolean
				Element:td
					This is a boolean variable and accepts true/false. If set to
				Element:code
					true
					, then the card will be saved in locker when the transaction is successful. Else, the card will not be saved.
				Element:tr
				Element:td
					redirect_after_payment
				Element:br
				Element:code
					Required
				Element:td
					Boolean
				Element:td
					This is a boolean variable and accepts true/false. We recommend that you set this to true and use the redirection flow. If set to
				Element:code
					true
					, then the user is redirected to the
				Element:code
					return_url
					configured for the order. If set to
				Element:code
					false
					, then the user will be stopped at the response page from the gateway. Your client should be able to read the page/title to infer that the user has completed the transaction.
				Element:tr
				Element:td
					format
				Element:br
				Element:code
					Required
				Element:td
					String
				Element:td
					If it is set to
				Element:code
					json
					, then the response will be HTTP 200 with a JSON formatted text. Otherwise, the response is HTTP 302 with the Location attribute having the destination URL.
				Element:tr
				Element:td
					is_emi
				Element:td
					Boolean
				Element:td
					Default is
				Element:code
					false
					. Set it to
				Element:code
					true
					if the user wishes to perform an EMI transaction on the given card.
				Element:tr
				Element:td
					emi_bank
				Element:td
					String
				Element:td
					Represents the bank that issued the card. Value must be one of the entries mentioned under EMI Bank in the support matrix below.
				Element:tr
				Element:td
					emi_tenure
				Element:td
					Integer
				Element:td
					The tenure of the EMI in number of months.
			Node:
			(type) c
			(layer)1
				Element:h3
					EMI Support Matrix
			Node:
			(type) c
			(layer)1
				Element:p
					The following are the valid combinations for
				Element:code
					emi_bank
					and
				Element:code
					emi_tenure
					, although you need to check if bank has approved all the tenures for your gateway account. JusPay does not validate this for you.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					EMI Bank
				Element:th
					EMI Tenure
				Element:th
					Supported Gateways
				Element:tbody
				Element:tr
				Element:td
					HDFC
				Element:td
					3,6,9,12,18,24
				Element:td
					PAYU, HDFC
				Element:tr
				Element:td
					CITI
				Element:td
					3,6,9,12,18,24
				Element:td
					PAYU
				Element:tr
				Element:td
					ICICI
				Element:td
					3,6,9,12,18,24
				Element:td
					PAYU, ICICI, CCAVENUE
				Element:tr
				Element:td
					SBI
				Element:td
					3,6,9,12
				Element:td
					PAYU, CCAVENUE
				Element:tr
				Element:td
					AXIS
				Element:td
					3,6,9,12
				Element:td
					PAYU, ICICI, CCAVENUE
				Element:tr
				Element:td
					SCB
				Element:td
					3,6,9,12
				Element:td
					ICICI
				Element:tr
				Element:td
					KOTAK
				Element:td
					3,6,9,12
				Element:td
					ICICI, CCAVENUE, PAYU
				Element:tr
				Element:td
					HSBC
				Element:td
					3,6,9,12
				Element:td
					ICICI, CCAVENUE, PAYU
				Element:tr
				Element:td
					AMEX
				Element:td
					3,6,9,12
				Element:td
					PAYU, CCAVENUE
				Element:tr
				Element:td
					INDUSIND
				Element:td
					3,6,9,12,18,24
				Element:td
					PAYU, CCAVENUE
				Element:tr
				Element:td
					ICICIDC
				Element:td
					3,6,9,12
				Element:td
					PAYU
				Element:tr
				Element:td
					AXISDC
				Element:td
					3,6,9,12
				Element:td
					PAYU
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example Response
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
					"order_id"
					:
				Element:span
					":order_id"
					,
				Element:span
					"txn_id"
					:
				Element:span
					":txn_id"
					,
				Element:span
					"status"
					:
				Element:span
					"PENDING_VBV"
					,
				Element:span
					"payment"
					:
				Element:span
					{
				Element:span
					"authentication"
					:
				Element:span
					{
				Element:span
					"method"
					:
				Element:span
					"GET"
					,
				Element:span
					"url"
					:
				Element:span
					"https://api.juspay.in/pay/start/guest/8646a7a029974fa99995fec00340a507"
				Element:span
					}
				Element:span
					}
				Element:span
					}
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					<
				Element:span
					Transaction
				Element:span
					>
				Element:span
					{
				Element:span
					'order_id'
				Element:span
					:
				Element:span
					u'1465893617'
				Element:span
					,
				Element:span
					'status'
				Element:span
					:
				Element:span
					u'PENDING_VBV'
				Element:span
					,
				Element:span
					'txn_id'
				Element:span
					:
				Element:span
					u'guest-1465893617-1'
				Element:span
					,
				Element:span
					'payment'
				Element:span
					:
				Element:span
					<
				Element:span
					Payment
				Element:span
					>
				Element:span
					{
				Element:span
					'authentication'
				Element:span
					:
				Element:span
					<
				Element:span
					Authentication
				Element:span
					>
				Element:span
					{
				Element:span
					'url'
				Element:span
					:
				Element:span
					u'https://api.juspay.in/pay/start/guest/8646a7a029974fa99995fec00340a507'
				Element:span
					,
				Element:span
					'method'
				Element:span
					:
				Element:span
					u'GET'
				Element:span
					,
				Element:span
					}
				Element:span
					,
				Element:span
					}
				Element:span
					,
				Element:span
					}
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					<
				Element:span
					Payments
				Element:span
					::
				Element:span
					Transaction
				Element:span
					:
				Element:span
					0x00000a
				Element:span
					>
				Element:span
					{
				Element:span
					@order_id
				Element:span
					=
				Element:span
					"1465893617"
				Element:span
					,
				Element:span
					@status
				Element:span
					=
				Element:span
					"PENDING_VBV"
				Element:span
					,
				Element:span
					@txn_id
				Element:span
					=
				Element:span
					"guest-1465893617-1"
				Element:span
					,
				Element:span
					@payment
				Element:span
					=
				Element:span
					<
				Element:span
					Payments
				Element:span
					::
				Element:span
					Transaction
				Element:span
					::
				Element:span
					Payment
				Element:span
					:
				Element:span
					0x00000b
				Element:span
					>
				Element:span
					{
				Element:span
					@authentication
				Element:span
					=
				Element:span
					<
				Element:span
					Payments
				Element:span
					::
				Element:span
					Transaction
				Element:span
					::
				Element:span
					Payment
				Element:span
					::
				Element:span
					Authentication
				Element:span
					:
				Element:span
					0x00000c
				Element:span
					>
				Element:span
					{
				Element:span
					@url
				Element:span
					=
				Element:span
					"https://api.juspay.in/pay/start/guest/8646a7a029974fa99995fec00340a507"
				Element:span
					,
				Element:span
					@method
				Element:span
					=
				Element:span
					"GET"
				Element:span
					}
				Element:span
					,
				Element:span
					}
				Element:span
					,
				Element:span
					}
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					Payment
				Element:span
					Object
				Element:span
					(
				Element:span
					[
				Element:span
					order_id
				Element:span
					]
				Element:span
					=>
				Element:span
					1465893617
				Element:span
					[
				Element:span
					status
				Element:span
					]
				Element:span
					=>
				Element:span
					PENDING_VBV
				Element:span
					[
				Element:span
					txn_id
				Element:span
					]
				Element:span
					=>
				Element:span
					guest
				Element:span
					-
				Element:span
					1465893617
				Element:span
					-
				Element:span
					1
				Element:span
					[
				Element:span
					method
				Element:span
					]
				Element:span
					=>
				Element:span
					GET
				Element:span
					[
				Element:span
					url
				Element:span
					]
				Element:span
					=>
				Element:span
					https
				Element:span
					://
				Element:span
					api
				Element:span
					.
				Element:span
					juspay
				Element:span
					.
				Element:span
					in
				Element:span
					/
				Element:span
					pay
				Element:span
					/
				Element:span
					start
				Element:span
					/
				Element:span
					guest
				Element:span
					/
				Element:span
					8646
				Element:span
					a7a029974fa99995fec00340a507
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					@object
				Element:span
					in
				Element:span
					.
				Element:span
					juspay
				Element:span
					.
				Element:span
					model
				Element:span
					.
				Element:span
					Payment
				Element:span
					JSON:
				Element:span
					{
				Element:span
					"order_id"
				Element:span
					:
				Element:span
					":order_id"
				Element:span
					,
				Element:span
					"txn_id"
				Element:span
					:
				Element:span
					":txn_id"
				Element:span
					,
				Element:span
					"status"
				Element:span
					:
				Element:span
					"PENDING_VBV"
				Element:span
					,
				Element:span
					"method"
				Element:span
					:
				Element:span
					"GET"
				Element:span
					,
				Element:span
					"url"
				Element:span
					:
				Element:span
					"https://api.juspay.in/pay/start/guest/8646a7a029974fa99995fec00340a507"
				Element:span
					}
			Node:
			(type) c
			(layer)1
				Element:h4
					Response Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Field
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					order_id
				Element:td
					String
				Element:td
					OrderID for which the payment is being started.
				Element:tr
				Element:td
					txn_id
				Element:td
					String
				Element:td
					Transaction ID for the payment attempt.
				Element:tr
				Element:td
					status
				Element:td
					String
				Element:td
					Status of the transaction.
				Element:code
					PENDING_VBV
					indicates that the transaction requires authentication to complete. Please do not validate this at your end.
				Element:tr
				Element:td
					payment
				Element:td
					String
				Element:td
					Contains the payment authentication details.
				Element:tr
				Element:td
					authentication
				Element:td
					String
				Element:td
					Contains the authentication details.
				Element:tr
				Element:td
					method
				Element:td
					String
				Element:td
					HTTP Method for authentication. Can be one of
				Element:code
					GET
					or
				Element:code
					POST
				Element:tr
				Element:td
					url
				Element:td
					String
				Element:td
					URL to which the user has to be taken to for completing the authentication
				Element:tr
				Element:td
					params
				Element:td
					String
				Element:td
					Present only when method is
				Element:code
					POST
					. Parameter map that has to be sent along with the URL for authentication.
			Node:
			(type) c
			(layer)1
				Element:h2
					NetBanking Payment
			Node:
			(type) c
			(layer)1
				Element:p
					Create a payment transaction for NetBanking. Once you have the response, depending on the “method” attribute, you will have to take the next step. If you receive GET, then take the value in the “url” attribute and redirect the user to this location. If you receive POST, then “params” attribute will hold a map containing key value pairs.
			Node:
			(type) c
			(layer)1
				Element:p
					For Web, you can create a form with these parameters as hidden variables and auto submit the form. Example code in Javascript:
				Element:a
					Serialize Parameters
					.
			Node:
			(type) c
			(layer)1
				Element:p
					For Android, serialize this data such that it can be loaded to WebView directly via postData. Example code in Java:
				Element:a
					Serialize Parameters
					.
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Definition
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					POST https://api.juspay.in/txns
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					Payment
				Element:span
					.
				Element:span
					create
				Element:span
					(
				Element:span
					Map
				Element:span
					params
				Element:span
					);
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example Request
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -X POST https://api.juspay.in/txns
				Element:span
					\
					-d
				Element:span
					"order_id=:order_id"
				Element:span
					\
					-d
				Element:span
					"merchant_id=:merchant_id"
				Element:span
					\
					-d
				Element:span
					"payment_method_type=NB"
				Element:span
					\
					-d
				Element:span
					"payment_method=NB_ICICI"
				Element:span
					\
					-d
				Element:span
					"redirect_after_payment=true"
				Element:span
					\
					-d
				Element:span
					"format=json"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					Juspay
				Element:span
					.
				Element:span
					Payments
				Element:span
					.
				Element:span
					create_net_banking_payment
				Element:span
					(
				Element:span
					order_id
				Element:span
					=
				Element:span
					'1465893617'
				Element:span
					,
				Element:span
					merchant_id
				Element:span
					=
				Element:span
					'guest'
				Element:span
					,
				Element:span
					payment_method_type
				Element:span
					=
				Element:span
					'NB'
				Element:span
					,
				Element:span
					payment_method
				Element:span
					=
				Element:span
					'NB_ICICI'
				Element:span
					,
				Element:span
					redirect_after_payment
				Element:span
					=
				Element:span
					False
				Element:span
					,
				Element:span
					format
				Element:span
					=
				Element:span
					'json'
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					Payments
				Element:span
					.
				Element:span
					create_net_banking_payment
				Element:span
					(
				Element:span
					:order_id
				Element:span
					=>
				Element:span
					'1465893617'
				Element:span
					,
				Element:span
					:merchant_id
				Element:span
					=>
				Element:span
					'guest'
				Element:span
					,
				Element:span
					:payment_method_type
				Element:span
					=>
				Element:span
					'NB'
				Element:span
					,
				Element:span
					:payment_method
				Element:span
					=>
				Element:span
					'NB_ICICI'
				Element:span
					,
				Element:span
					:redirect_after_payment
				Element:span
					=>
				Element:span
					false
				Element:span
					,
				Element:span
					:format
				Element:span
					=>
				Element:span
					'json'
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					$params
				Element:span
					=
				Element:span
					array
				Element:span
					();
				Element:span
					$params
				Element:span
					[
				Element:span
					'order_id'
				Element:span
					]
				Element:span
					=
				Element:span
					"1465893617"
				Element:span
					;
				Element:span
					$params
				Element:span
					[
				Element:span
					'merchant_id'
				Element:span
					]
				Element:span
					=
				Element:span
					"guest"
				Element:span
					;
				Element:span
					$params
				Element:span
					[
				Element:span
					'payment_method_type'
				Element:span
					]
				Element:span
					=
				Element:span
					"NB"
				Element:span
					;
				Element:span
					$params
				Element:span
					[
				Element:span
					'payment_method'
				Element:span
					]
				Element:span
					=
				Element:span
					"NB_ICICI"
				Element:span
					;
				Element:span
					$params
				Element:span
					[
				Element:span
					'redirect_after_payment'
				Element:span
					]
				Element:span
					=
				Element:span
					False
				Element:span
					;
				Element:span
					$params
				Element:span
					[
				Element:span
					'format'
				Element:span
					]
				Element:span
					=
				Element:span
					"json"
				Element:span
					;
				Element:span
					$response
				Element:span
					=
				Element:span
					Payment
				Element:span
					::
				Element:span
					create
				Element:span
					(
				Element:span
					$params
				Element:span
					);
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					Map
				Element:span
					<
				Element:span
					String
				Element:span
					,
				Element:span
					Object
				Element:span
					>
				Element:span
					params
				Element:span
					=
				Element:span
					new
				Element:span
					LinkedHashMap
				Element:span
					();
				Element:span
					params
				Element:span
					.
				Element:span
					put
				Element:span
					(
				Element:span
					"order_id"
				Element:span
					,
				Element:span
					"1465893617"
				Element:span
					);
				Element:span
					params
				Element:span
					.
				Element:span
					put
				Element:span
					(
				Element:span
					"merchant_id"
				Element:span
					,
				Element:span
					"guest"
				Element:span
					);
				Element:span
					params
				Element:span
					.
				Element:span
					put
				Element:span
					(
				Element:span
					"payment_method_type"
				Element:span
					,
				Element:span
					"NB"
				Element:span
					);
				Element:span
					params
				Element:span
					.
				Element:span
					put
				Element:span
					(
				Element:span
					"payment_method"
				Element:span
					,
				Element:span
					"NB_ICICI"
				Element:span
					);
				Element:span
					params
				Element:span
					.
				Element:span
					put
				Element:span
					(
				Element:span
					"redirect_after_payment"
				Element:span
					,
				Element:span
					false
				Element:span
					);
				Element:span
					params
				Element:span
					.
				Element:span
					put
				Element:span
					(
				Element:span
					"format"
				Element:span
					,
				Element:span
					"json"
				Element:span
					);
				Element:span
					Payment
				Element:span
					payment
				Element:span
					=
				Element:span
					Payment
				Element:span
					.
				Element:span
					create
				Element:span
					(
				Element:span
					params
				Element:span
					);
			Node:
			(type) c
			(layer)1
				Element:h4
					Request Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Field
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					order_id
				Element:br
				Element:code
					Required
				Element:td
					String
				Element:td
				Element:code
					order_id
					pertaining to the order for which the payment is started.
				Element:tr
				Element:td
					merchant_id
				Element:br
				Element:code
					Required
				Element:td
					String
				Element:td
					ID of the merchant_account that you hold with us.
				Element:tr
				Element:td
					payment_method_type
				Element:br
				Element:code
					Required
				Element:td
					String
				Element:td
					Must be
				Element:code
					NB
				Element:tr
				Element:td
					payment_method
				Element:br
				Element:code
					Required
				Element:td
					String
				Element:td
					The actual payment method that was selected by the user. For NetBanking transactions, it must be one of the below:
				Element:tr
				Element:td
					redirect_after_payment
				Element:br
				Element:code
					Required
				Element:td
					String
				Element:td
					This is a boolean variable and accepts true/false. We recommend that you set this to true. If set to
				Element:code
					true
					, then the user is redirected to the
				Element:code
					return_url
					configured for the order. If set to
				Element:code
					false
					, then the user will be stopped at the response page from the gateway. Your client should be able to read the page/title to infer that the user has completed the transaction.
				Element:tr
				Element:td
					format
				Element:br
				Element:code
					Required
				Element:td
					String
				Element:td
					If it is set to
				Element:code
					json
					, then the response will be HTTP 200 with a JSON formatted text. Otherwise, the response is HTTP 302 with the Location attribute having the destination URL.
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example Response (having POST as the method)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
					"order_id"
					:
				Element:span
					":order_id"
					,
				Element:span
					"txn_id"
					:
				Element:span
					":txn_id"
					,
				Element:span
					"status"
					:
				Element:span
					"PENDING_VBV"
					,
				Element:span
					"payment"
					:
				Element:span
					{
				Element:span
					"authentication"
					:
				Element:span
					{
				Element:span
					"method"
					:
				Element:span
					"POST"
					,
				Element:span
					"url"
					:
				Element:span
					"https://bank-url.com/payment-path/start"
					,
				Element:span
					"params"
					:
				Element:span
					{
				Element:span
					"key1"
					:
				Element:span
					"v1"
					,
				Element:span
					"key2"
					:
				Element:span
					"v2"
					,
				Element:span
					"key3"
					:
				Element:span
					"v3"
				Element:span
					}
				Element:span
					}
				Element:span
					}
				Element:span
					}
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					<
				Element:span
					Transaction
				Element:span
					>
				Element:span
					{
				Element:span
					'order_id'
				Element:span
					:
				Element:span
					u'order_id'
				Element:span
					,
				Element:span
					'status'
				Element:span
					:
				Element:span
					u'PENDING_VBV'
				Element:span
					,
				Element:span
					'txn_id'
				Element:span
					:
				Element:span
					u'txn_id'
				Element:span
					,
				Element:span
					'payment'
				Element:span
					:
				Element:span
					<
				Element:span
					Payment
				Element:span
					>
				Element:span
					{
				Element:span
					'authentication'
				Element:span
					:
				Element:span
					<
				Element:span
					Authentication
				Element:span
					>
				Element:span
					{
				Element:span
					'url'
				Element:span
					:
				Element:span
					u'https://bank-url.com/payment-path/start'
				Element:span
					,
				Element:span
					'method'
				Element:span
					:
				Element:span
					u'POST'
				Element:span
					,
				Element:span
					'params'
				Element:span
					:
				Element:span
					{
				Element:span
					"key1"
				Element:span
					:
				Element:span
					"v1"
				Element:span
					,
				Element:span
					"key2"
				Element:span
					:
				Element:span
					"v2"
				Element:span
					,
				Element:span
					"key3"
				Element:span
					:
				Element:span
					"v3"
				Element:span
					}
				Element:span
					}
				Element:span
					,
				Element:span
					}
				Element:span
					,
				Element:span
					}
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					<
				Element:span
					Payments
				Element:span
					::
				Element:span
					Transaction
				Element:span
					:
				Element:span
					0x00000a
				Element:span
					>
				Element:span
					{
				Element:span
					@order_id
				Element:span
					=
				Element:span
					"order_id"
				Element:span
					,
				Element:span
					@status
				Element:span
					=
				Element:span
					"PENDING_VBV"
				Element:span
					,
				Element:span
					@txn_id
				Element:span
					=
				Element:span
					"txn_id"
				Element:span
					,
				Element:span
					@payment
				Element:span
					=
				Element:span
					<
				Element:span
					Payments
				Element:span
					::
				Element:span
					Transaction
				Element:span
					::
				Element:span
					Payment
				Element:span
					:
				Element:span
					0x00000b
				Element:span
					>
				Element:span
					{
				Element:span
					@authentication
				Element:span
					=
				Element:span
					<
				Element:span
					Payments
				Element:span
					::
				Element:span
					Transaction
				Element:span
					::
				Element:span
					Payment
				Element:span
					::
				Element:span
					Authentication
				Element:span
					:
				Element:span
					0x00000c
				Element:span
					>
				Element:span
					{
				Element:span
					@url
				Element:span
					=
				Element:span
					"https://bank-url.com/payment-path/start"
				Element:span
					,
				Element:span
					@method
				Element:span
					=
				Element:span
					"POST"
				Element:span
					,
				Element:span
					@params
				Element:span
					:{
				Element:span
					:key1
				Element:span
					=>
				Element:span
					"v1"
				Element:span
					,
				Element:span
					:key2
				Element:span
					=>
				Element:span
					"v2"
				Element:span
					,
				Element:span
					:key3
				Element:span
					=>
				Element:span
					"v3"
				Element:span
					}
				Element:span
					}
				Element:span
					,
				Element:span
					}
				Element:span
					,
				Element:span
					}
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					Payment
				Element:span
					Object
				Element:span
					(
				Element:span
					[
				Element:span
					order_id
				Element:span
					]
				Element:span
					=>
				Element:span
					1465893617
				Element:span
					[
				Element:span
					status
				Element:span
					]
				Element:span
					=>
				Element:span
					PENDING_VBV
				Element:span
					[
				Element:span
					txn_id
				Element:span
					]
				Element:span
					=>
				Element:span
					guest
				Element:span
					-
				Element:span
					1465893617
				Element:span
					-
				Element:span
					1
				Element:span
					[
				Element:span
					method
				Element:span
					]
				Element:span
					=>
				Element:span
					POST
				Element:span
					[
				Element:span
					url
				Element:span
					]
				Element:span
					=>
				Element:span
					https
				Element:span
					://
				Element:span
					bank
				Element:span
					-
				Element:span
					url
				Element:span
					.
				Element:span
					com
				Element:span
					/
				Element:span
					payment
				Element:span
					-
				Element:span
					path
				Element:span
					/
				Element:span
					start
				Element:span
					[
				Element:span
					params
				Element:span
					]
				Element:span
					=>
				Element:span
					(
				Element:span
					[
				Element:span
					key1
				Element:span
					]
				Element:span
					=>
				Element:span
					v1
				Element:span
					[
				Element:span
					key2
				Element:span
					]
				Element:span
					=>
				Element:span
					v2
				Element:span
					[
				Element:span
					key3
				Element:span
					]
				Element:span
					=>
				Element:span
					v3
				Element:span
					)
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					Payment
				Element:span
					Object
				Element:span
					{
				Element:span
					"order_id"
				Element:span
					:
				Element:span
					"1465893617"
				Element:span
					,
				Element:span
					"txn_id"
				Element:span
					:
				Element:span
					"guest-1465893617-1"
				Element:span
					,
				Element:span
					"status"
				Element:span
					:
				Element:span
					"PENDING_VBV"
				Element:span
					,
				Element:span
					"method"
				Element:span
					:
				Element:span
					"POST"
				Element:span
					,
				Element:span
					"url"
				Element:span
					:
				Element:span
					"https://bank-url.com/payment-path/start"
				Element:span
					,
				Element:span
					"params"
				Element:span
					:
				Element:span
					{
				Element:span
					"key1"
				Element:span
					:
				Element:span
					"v1"
				Element:span
					,
				Element:span
					"key2"
				Element:span
					:
				Element:span
					"v2"
				Element:span
					,
				Element:span
					"key3"
				Element:span
					:
				Element:span
					"v3"
				Element:span
					}
				Element:span
					}
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example Response (having GET as the method)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
					"order_id"
					:
				Element:span
					":order_id"
					,
				Element:span
					"txn_id"
					:
				Element:span
					":txn_id"
					,
				Element:span
					"status"
					:
				Element:span
					"PENDING_VBV"
					,
				Element:span
					"payment"
					:
				Element:span
					{
				Element:span
					"authentication"
					:
				Element:span
					{
				Element:span
					"method"
					:
				Element:span
					"GET"
					,
				Element:span
					"url"
					:
				Element:span
					"https://api.juspay.in/pay/start/guest/8646a7a029974fa99995fec00340a507"
				Element:span
					}
				Element:span
					}
				Element:span
					}
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					<
				Element:span
					Transaction
				Element:span
					>
				Element:span
					{
				Element:span
					'order_id'
				Element:span
					:
				Element:span
					u'1465893617'
				Element:span
					,
				Element:span
					'status'
				Element:span
					:
				Element:span
					u'PENDING_VBV'
				Element:span
					,
				Element:span
					'txn_id'
				Element:span
					:
				Element:span
					u'guest-1465893617-2'
				Element:span
					,
				Element:span
					'payment'
				Element:span
					:
				Element:span
					<
				Element:span
					Payment
				Element:span
					>
				Element:span
					{
				Element:span
					'authentication'
				Element:span
					:
				Element:span
					<
				Element:span
					Authentication
				Element:span
					>
				Element:span
					{
				Element:span
					'url'
				Element:span
					:
				Element:span
					u'https://api.juspay.in/pay/start/guest/8646a7a029974fa99995fec00340a507'
				Element:span
					,
				Element:span
					'method'
				Element:span
					:
				Element:span
					u'GET'
				Element:span
					,
				Element:span
					}
				Element:span
					,
				Element:span
					}
				Element:span
					,
				Element:span
					}
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					<
				Element:span
					Payments
				Element:span
					::
				Element:span
					Transaction
				Element:span
					:
				Element:span
					0x00000a
				Element:span
					>
				Element:span
					{
				Element:span
					@order_id
				Element:span
					=
				Element:span
					"1465893617"
				Element:span
					,
				Element:span
					@status
				Element:span
					=
				Element:span
					"PENDING_VBV"
				Element:span
					,
				Element:span
					@txn_id
				Element:span
					=
				Element:span
					"guest-1465893617-1"
				Element:span
					,
				Element:span
					@payment
				Element:span
					=
				Element:span
					<
				Element:span
					Payments
				Element:span
					::
				Element:span
					Transaction
				Element:span
					::
				Element:span
					Payment
				Element:span
					:
				Element:span
					0x00000b
				Element:span
					>
				Element:span
					{
				Element:span
					@authentication
				Element:span
					=
				Element:span
					<
				Element:span
					Payments
				Element:span
					::
				Element:span
					Transaction
				Element:span
					::
				Element:span
					Payment
				Element:span
					::
				Element:span
					Authentication
				Element:span
					:
				Element:span
					0x00000c
				Element:span
					>
				Element:span
					{
				Element:span
					@url
				Element:span
					=
				Element:span
					"https://api.juspay.in/pay/start/guest/8646a7a029974fa99995fec00340a507"
				Element:span
					,
				Element:span
					@method
				Element:span
					=
				Element:span
					"GET"
				Element:span
					,
				Element:span
					}
				Element:span
					,
				Element:span
					}
				Element:span
					,
				Element:span
					}
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					Payment
				Element:span
					Object
				Element:span
					(
				Element:span
					[
				Element:span
					order_id
				Element:span
					]
				Element:span
					=>
				Element:span
					1465893617
				Element:span
					[
				Element:span
					status
				Element:span
					]
				Element:span
					=>
				Element:span
					PENDING_VBV
				Element:span
					[
				Element:span
					txn_id
				Element:span
					]
				Element:span
					=>
				Element:span
					guest
				Element:span
					-
				Element:span
					1465893617
				Element:span
					-
				Element:span
					1
				Element:span
					[
				Element:span
					method
				Element:span
					]
				Element:span
					=>
				Element:span
					GET
				Element:span
					[
				Element:span
					url
				Element:span
					]
				Element:span
					=>
				Element:span
					https
				Element:span
					://
				Element:span
					api
				Element:span
					.
				Element:span
					juspay
				Element:span
					.
				Element:span
					in
				Element:span
					/
				Element:span
					pay
				Element:span
					/
				Element:span
					start
				Element:span
					/
				Element:span
					guest
				Element:span
					/
				Element:span
					8646
				Element:span
					a7a029974fa99995fec00340a507
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					@object
				Element:span
					in
				Element:span
					.
				Element:span
					juspay
				Element:span
					.
				Element:span
					model
				Element:span
					.
				Element:span
					Payment
				Element:span
					JSON:
				Element:span
					{
				Element:span
					"order_id"
				Element:span
					:
				Element:span
					"1465893617"
				Element:span
					,
				Element:span
					"txn_id"
				Element:span
					:
				Element:span
					"guest-1465893617-1"
				Element:span
					,
				Element:span
					"status"
				Element:span
					:
				Element:span
					"PENDING_VBV"
				Element:span
					,
				Element:span
					"method"
				Element:span
					:
				Element:span
					"GET"
				Element:span
					,
				Element:span
					"url"
				Element:span
					:
				Element:span
					"https://api.juspay.in/pay/start/guest/8646a7a029974fa99995fec00340a507"
				Element:span
					}
			Node:
			(type) c
			(layer)1
				Element:h4
					Response Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Field
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					order_id
				Element:td
					String
				Element:td
					OrderID for which the payment is being started.
				Element:tr
				Element:td
					txn_id
				Element:td
					String
				Element:td
					Transaction ID for the payment attempt.
				Element:tr
				Element:td
					status
				Element:td
					String
				Element:td
					Status of the transaction. PENDING_VBV indicates that the transaction requires authentication to complete.
				Element:tr
				Element:td
					payment
				Element:td
					String
				Element:td
					Contains the payment authentication details.
				Element:tr
				Element:td
					authentication
				Element:td
					String
				Element:td
					Contains the authentication details.
				Element:tr
				Element:td
					method
				Element:td
					String
				Element:td
					HTTP Method for authentication. Can be one of GET or POST
				Element:tr
				Element:td
					url
				Element:td
					String
				Element:td
					URL to which the user has to be taken to for completing the authentication
				Element:tr
				Element:td
					params
				Element:td
					String
				Element:td
					Present only when method is POST. Parameter map that has to be sent along with the URL for authentication.
				Element:br
				Element:span
					Do not hardcode the params in your client
				Element:br
					* Never assume that you will receive param “x” or param “y”. This is completely dynamic and will vary on a case by case basis.
			Node:
			(type) c
			(layer)1
				Element:h4
					Handling POST
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Handling POST
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					<form
				Element:span
					method=
				Element:span
					"POST"
				Element:span
					action=
				Element:span
					"$authentication.url"
				Element:span
					id=
				Element:span
					"authForm"
				Element:span
					>
					{{ for key in $authentication.params }}
				Element:span
					<input
				Element:span
					type=
				Element:span
					"hidden"
				Element:span
					name=
				Element:span
					"$key"
				Element:span
					value=
				Element:span
					"$authentication.params[$key]"
				Element:span
					>
					{{ end }}
				Element:span
					</form>
				Element:span
					<script
				Element:span
					type=
				Element:span
					"text/javascript"
				Element:span
					>
				Element:span
					document
				Element:span
					.
				Element:span
					forms
				Element:span
					[
				Element:span
					"authForm"
				Element:span
					].
				Element:span
					submit
				Element:span
					()
				Element:span
					</script>
			Node:
			(type) c
			(layer)1
				Element:p
					When you get
				Element:code
					POST
					as the authentication method in the response, then the customer must be redirected using a form. Example HTML code is given to you. Depending on your client language, choose the appropriate way to create the form.
			Node:
			(type) c
			(layer)1
				Element:h4
					Handling GET
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Handling GET
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					<!-- Example for handling GET response -->
				Element:span
					<script
				Element:span
					type=
				Element:span
					"text/javascript"
				Element:span
					>
				Element:span
					// assuming that you are passing the JSON response of /txns API directly here
				Element:span
					function
				Element:span
					handleJuspayGetResponse
				Element:span
					(
				Element:span
					juspayResponse
				Element:span
					)
				Element:span
					{
				Element:span
					window
				Element:span
					.
				Element:span
					location
				Element:span
					.
				Element:span
					href
				Element:span
					=
				Element:span
					juspayResponse
				Element:span
					.
				Element:span
					payment
				Element:span
					.
				Element:span
					authentication
				Element:span
					.
				Element:span
					url
				Element:span
					}
				Element:span
					handleJuspayGetResponse
				Element:span
					(
				Element:span
					response
				Element:span
					)
				Element:span
					</script>
			Node:
			(type) c
			(layer)1
				Element:p
					When you get
				Element:code
					GET
					as the authentication method in the response, you may load the URL directly into the customer’s browser. You can easily achieve this by send HTTP 302 from your server. However, if the API call was made from the browser, then you can utilize the code snippet provided.
			Node:
			(type) c
			(layer)1
				Element:h2
					Wallet Payment
			Node:
			(type) c
			(layer)1
				Element:p
					Create a payment transaction for paying from a prepaid
				Element:strong
					Wallet
					. Once you have the response, depending on the “method” attribute, you will have to take the next step. If you receive GET, then take the value in the “url” attribute and redirect the user to this location. If you receive POST, then “params” attribute will hold a map containing key value pairs.
			Node:
			(type) c
			(layer)1
				Element:p
					For Web, you can create a form with these parameters as hidden variables and auto submit the form. Example code in Javascript:
				Element:a
					Serialize Parameters
					.
			Node:
			(type) c
			(layer)1
				Element:p
					For Android, serialize this data such that it can be loaded to WebView directly via postData. Example code in Java:
				Element:a
					Serialize Parameters
					.
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Definition
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					POST https://api.juspay.in/txns
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					Payment
				Element:span
					.
				Element:span
					create
				Element:span
					(
				Element:span
					Map
				Element:span
					params
				Element:span
					);
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example Request
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -X POST https://api.juspay.in/txns
				Element:span
					\
					-d
				Element:span
					"order_id=:order_id"
				Element:span
					\
					-d
				Element:span
					"merchant_id=:merchant_id"
				Element:span
					\
					-d
				Element:span
					"payment_method_type=WALLET"
				Element:span
					\
					-d
				Element:span
					"payment_method=MOBIKWIK"
				Element:span
					\
					-d
				Element:span
					"redirect_after_payment=true"
				Element:span
					\
					-d
				Element:span
					"format=json"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					Juspay
				Element:span
					.
				Element:span
					Payments
				Element:span
					.
				Element:span
					create_wallet_payment
				Element:span
					(
				Element:span
					order_id
				Element:span
					=
				Element:span
					'1465893617'
				Element:span
					,
				Element:span
					merchant_id
				Element:span
					=
				Element:span
					'guest'
				Element:span
					,
				Element:span
					payment_method
				Element:span
					=
				Element:span
					'MOBIKWIK'
				Element:span
					,
				Element:span
					redirect_after_payment
				Element:span
					=
				Element:span
					False
				Element:span
					,
				Element:span
					format
				Element:span
					=
				Element:span
					'json'
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					Payments
				Element:span
					.
				Element:span
					create_wallet_payment
				Element:span
					(
				Element:span
					:order_id
				Element:span
					=>
				Element:span
					'1465893617'
				Element:span
					,
				Element:span
					:merchant_id
				Element:span
					=>
				Element:span
					'guest'
				Element:span
					,
				Element:span
					:payment_method_type
				Element:span
					=>
				Element:span
					'WALLET'
				Element:span
					,
				Element:span
					:payment_method
				Element:span
					=>
				Element:span
					'MOBIKWIK'
				Element:span
					,
				Element:span
					:redirect_after_payment
				Element:span
					=>
				Element:span
					false
				Element:span
					,
				Element:span
					:format
				Element:span
					=>
				Element:span
					'json'
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					$params
				Element:span
					=
				Element:span
					array
				Element:span
					();
				Element:span
					$params
				Element:span
					[
				Element:span
					'order_id'
				Element:span
					]
				Element:span
					=
				Element:span
					"1465893617"
				Element:span
					;
				Element:span
					$params
				Element:span
					[
				Element:span
					'merchant_id'
				Element:span
					]
				Element:span
					=
				Element:span
					"guest"
				Element:span
					;
				Element:span
					$params
				Element:span
					[
				Element:span
					'payment_method'
				Element:span
					]
				Element:span
					=
				Element:span
					"MOBIKWIK"
				Element:span
					;
				Element:span
					$params
				Element:span
					[
				Element:span
					'payment_method_type'
				Element:span
					]
				Element:span
					=
				Element:span
					"WALLET"
				Element:span
					;
				Element:span
					$params
				Element:span
					[
				Element:span
					'redirect_after_payment'
				Element:span
					]
				Element:span
					=
				Element:span
					False
				Element:span
					;
				Element:span
					$params
				Element:span
					[
				Element:span
					'format'
				Element:span
					]
				Element:span
					=
				Element:span
					"json"
				Element:span
					;
				Element:span
					$response
				Element:span
					=
				Element:span
					Payment
				Element:span
					::
				Element:span
					create
				Element:span
					(
				Element:span
					$params
				Element:span
					);
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					Map
				Element:span
					<
				Element:span
					String
				Element:span
					,
				Element:span
					Object
				Element:span
					>
				Element:span
					params
				Element:span
					=
				Element:span
					new
				Element:span
					LinkedHashMap
				Element:span
					();
				Element:span
					params
				Element:span
					.
				Element:span
					put
				Element:span
					(
				Element:span
					"order_id"
				Element:span
					,
				Element:span
					"1465893617"
				Element:span
					);
				Element:span
					params
				Element:span
					.
				Element:span
					put
				Element:span
					(
				Element:span
					"merchant_id"
				Element:span
					,
				Element:span
					"guest"
				Element:span
					);
				Element:span
					params
				Element:span
					.
				Element:span
					put
				Element:span
					(
				Element:span
					"payment_method_type"
				Element:span
					,
				Element:span
					"MOBIKWIK"
				Element:span
					);
				Element:span
					params
				Element:span
					.
				Element:span
					put
				Element:span
					(
				Element:span
					"payment_method"
				Element:span
					,
				Element:span
					"WALLET"
				Element:span
					);
				Element:span
					params
				Element:span
					.
				Element:span
					put
				Element:span
					(
				Element:span
					"redirect_after_payment"
				Element:span
					,
				Element:span
					false
				Element:span
					);
				Element:span
					params
				Element:span
					.
				Element:span
					put
				Element:span
					(
				Element:span
					"format"
				Element:span
					,
				Element:span
					"json"
				Element:span
					);
				Element:span
					Payment
				Element:span
					payment
				Element:span
					=
				Element:span
					Payment
				Element:span
					.
				Element:span
					create
				Element:span
					(
				Element:span
					params
				Element:span
					);
			Node:
			(type) c
			(layer)1
				Element:h4
					Request Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Field
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					order_id
				Element:br
				Element:code
					Required
				Element:td
					String
				Element:td
				Element:code
					order_id
					pertaining to the order for which the payment is started.
				Element:tr
				Element:td
					merchant_id
				Element:br
				Element:code
					Required
				Element:td
					String
				Element:td
					ID of the merchant_account that you hold with us.
				Element:tr
				Element:td
					payment_method_type
				Element:br
				Element:code
					Required
				Element:td
					String
				Element:td
					Must be
				Element:code
					WALLET
				Element:tr
				Element:td
					payment_method
				Element:br
				Element:code
					Required
				Element:td
					String
				Element:td
					The actual payment method that was selected by the user. For WALLET transactions, it must be one of the below:
				Element:tr
				Element:td
					redirect_after_payment
				Element:br
				Element:code
					Required
				Element:td
					String
				Element:td
					This is a boolean variable and accepts true/false. We recommend that you set this to true. If set to
				Element:code
					true
					, then the user is redirected to the
				Element:code
					return_url
					configured for the order. If set to
				Element:code
					false
					, then the user will be stopped at the response page from the gateway. Your client should be able to read the page/title to infer that the user has completed the transaction.
				Element:tr
				Element:td
					format
				Element:br
				Element:code
					Required
				Element:td
					String
				Element:td
					If it is set to
				Element:code
					json
					, then the response will be HTTP 200 with a JSON formatted text. Otherwise, the response is HTTP 302 with the Location attribute having the destination URL.
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example Response (having POST as the method)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
					"order_id"
					:
				Element:span
					":order_id"
					,
				Element:span
					"txn_id"
					:
				Element:span
					":txn_id"
					,
				Element:span
					"status"
					:
				Element:span
					"PENDING_VBV"
					,
				Element:span
					"payment"
					:
				Element:span
					{
				Element:span
					"authentication"
					:
				Element:span
					{
				Element:span
					"method"
					:
				Element:span
					"POST"
					,
				Element:span
					"url"
					:
				Element:span
					"https://walllet-url.com/payment-path/start"
					,
				Element:span
					"params"
					:
				Element:span
					{
				Element:span
					"key1"
					:
				Element:span
					"v1"
					,
				Element:span
					"key2"
					:
				Element:span
					"v2"
					,
				Element:span
					"key3"
					:
				Element:span
					"v3"
				Element:span
					}
				Element:span
					}
				Element:span
					}
				Element:span
					}
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					<
				Element:span
					Transaction
				Element:span
					>
				Element:span
					{
				Element:span
					'order_id'
				Element:span
					:
				Element:span
					u'order_id'
				Element:span
					,
				Element:span
					'status'
				Element:span
					:
				Element:span
					u'PENDING_VBV'
				Element:span
					,
				Element:span
					'txn_id'
				Element:span
					:
				Element:span
					u'txn_id'
				Element:span
					,
				Element:span
					'payment'
				Element:span
					:
				Element:span
					<
				Element:span
					Payment
				Element:span
					>
				Element:span
					{
				Element:span
					'authentication'
				Element:span
					:
				Element:span
					<
				Element:span
					Authentication
				Element:span
					>
				Element:span
					{
				Element:span
					'url'
				Element:span
					:
				Element:span
					u'https://wallet-url.com/payment-path/start'
				Element:span
					,
				Element:span
					'method'
				Element:span
					:
				Element:span
					u'POST'
				Element:span
					,
				Element:span
					'params'
				Element:span
					:
				Element:span
					{
				Element:span
					"key1"
				Element:span
					:
				Element:span
					"v1"
				Element:span
					,
				Element:span
					"key2"
				Element:span
					:
				Element:span
					"v2"
				Element:span
					,
				Element:span
					"key3"
				Element:span
					:
				Element:span
					"v3"
				Element:span
					}
				Element:span
					}
				Element:span
					,
				Element:span
					}
				Element:span
					,
				Element:span
					}
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					<
				Element:span
					Payments
				Element:span
					::
				Element:span
					Transaction
				Element:span
					:
				Element:span
					0x00000a
				Element:span
					>
				Element:span
					{
				Element:span
					@order_id
				Element:span
					=
				Element:span
					"order_id"
				Element:span
					,
				Element:span
					@status
				Element:span
					=
				Element:span
					"PENDING_VBV"
				Element:span
					,
				Element:span
					@txn_id
				Element:span
					=
				Element:span
					"txn_id"
				Element:span
					,
				Element:span
					@payment
				Element:span
					=
				Element:span
					<
				Element:span
					Payments
				Element:span
					::
				Element:span
					Transaction
				Element:span
					::
				Element:span
					Payment
				Element:span
					:
				Element:span
					0x00000b
				Element:span
					>
				Element:span
					{
				Element:span
					@authentication
				Element:span
					=
				Element:span
					<
				Element:span
					Payments
				Element:span
					::
				Element:span
					Transaction
				Element:span
					::
				Element:span
					Payment
				Element:span
					::
				Element:span
					Authentication
				Element:span
					:
				Element:span
					0x00000c
				Element:span
					>
				Element:span
					{
				Element:span
					@url
				Element:span
					=
				Element:span
					"https://wallet-url.com/payment-path/start"
				Element:span
					,
				Element:span
					@method
				Element:span
					=
				Element:span
					"POST"
				Element:span
					,
				Element:span
					@params
				Element:span
					:{
				Element:span
					:key1
				Element:span
					=>
				Element:span
					"v1"
				Element:span
					,
				Element:span
					:key2
				Element:span
					=>
				Element:span
					"v2"
				Element:span
					,
				Element:span
					:key3
				Element:span
					=>
				Element:span
					"v3"
				Element:span
					}
				Element:span
					}
				Element:span
					,
				Element:span
					}
				Element:span
					,
				Element:span
					}
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					Payment
				Element:span
					Object
				Element:span
					(
				Element:span
					[
				Element:span
					order_id
				Element:span
					]
				Element:span
					=>
				Element:span
					order_id
				Element:span
					[
				Element:span
					status
				Element:span
					]
				Element:span
					=>
				Element:span
					PENDING_VBV
				Element:span
					[
				Element:span
					txn_id
				Element:span
					]
				Element:span
					=>
				Element:span
					txn_id
				Element:span
					[
				Element:span
					method
				Element:span
					]
				Element:span
					=>
				Element:span
					POST
				Element:span
					[
				Element:span
					url
				Element:span
					]
				Element:span
					=>
				Element:span
					https
				Element:span
					://
				Element:span
					wallet
				Element:span
					-
				Element:span
					url
				Element:span
					.
				Element:span
					com
				Element:span
					/
				Element:span
					payment
				Element:span
					-
				Element:span
					path
				Element:span
					/
				Element:span
					start
				Element:span
					[
				Element:span
					params
				Element:span
					]
				Element:span
					=>
				Element:span
					(
				Element:span
					[
				Element:span
					key1
				Element:span
					]
				Element:span
					=>
				Element:span
					v1
				Element:span
					[
				Element:span
					key2
				Element:span
					]
				Element:span
					=>
				Element:span
					v2
				Element:span
					[
				Element:span
					key3
				Element:span
					]
				Element:span
					=>
				Element:span
					v3
				Element:span
					)
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					Payment
				Element:span
					Object
				Element:span
					{
				Element:span
					"order_id"
				Element:span
					:
				Element:span
					"1465893617"
				Element:span
					,
				Element:span
					"txn_id"
				Element:span
					:
				Element:span
					"guest-1465893617-1"
				Element:span
					,
				Element:span
					"status"
				Element:span
					:
				Element:span
					"PENDING_VBV"
				Element:span
					,
				Element:span
					"method"
				Element:span
					:
				Element:span
					"POST"
				Element:span
					,
				Element:span
					"url"
				Element:span
					:
				Element:span
					"https://wallet-url.com/payment-path/start"
				Element:span
					,
				Element:span
					"params"
				Element:span
					:
				Element:span
					{
				Element:span
					"key1"
				Element:span
					:
				Element:span
					"v1"
				Element:span
					,
				Element:span
					"key2"
				Element:span
					:
				Element:span
					"v2"
				Element:span
					,
				Element:span
					"key3"
				Element:span
					:
				Element:span
					"v3"
				Element:span
					}
				Element:span
					}
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example Response (having GET as the method)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
					"order_id"
					:
				Element:span
					":order_id"
					,
				Element:span
					"txn_id"
					:
				Element:span
					":txn_id"
					,
				Element:span
					"status"
					:
				Element:span
					"PENDING_VBV"
					,
				Element:span
					"payment"
					:
				Element:span
					{
				Element:span
					"authentication"
					:
				Element:span
					{
				Element:span
					"method"
					:
				Element:span
					"GET"
					,
				Element:span
					"url"
					:
				Element:span
					"https://wallet-url.com/payment-path/start?hello=world"
				Element:span
					}
				Element:span
					}
				Element:span
					}
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					<
				Element:span
					Transaction
				Element:span
					>
				Element:span
					{
				Element:span
					'order_id'
				Element:span
					:
				Element:span
					u'1465893617'
				Element:span
					,
				Element:span
					'status'
				Element:span
					:
				Element:span
					u'PENDING_VBV'
				Element:span
					,
				Element:span
					'txn_id'
				Element:span
					:
				Element:span
					u'shop-1465893617-2'
				Element:span
					,
				Element:span
					'payment'
				Element:span
					:
				Element:span
					<
				Element:span
					Payment
				Element:span
					>
				Element:span
					{
				Element:span
					'authentication'
				Element:span
					:
				Element:span
					<
				Element:span
					Authentication
				Element:span
					>
				Element:span
					{
				Element:span
					'url'
				Element:span
					:
				Element:span
					u'https://api.juspay.in/pay/start/shop/8646a7a029974fa99995fec00340a507'
				Element:span
					,
				Element:span
					'method'
				Element:span
					:
				Element:span
					u'GET'
				Element:span
					,
				Element:span
					}
				Element:span
					,
				Element:span
					}
				Element:span
					,
				Element:span
					}
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					<
				Element:span
					Payments
				Element:span
					::
				Element:span
					Transaction
				Element:span
					:
				Element:span
					0x00000a
				Element:span
					>
				Element:span
					{
				Element:span
					@order_id
				Element:span
					=
				Element:span
					"1465893617"
				Element:span
					,
				Element:span
					@status
				Element:span
					=
				Element:span
					"PENDING_VBV"
				Element:span
					,
				Element:span
					@txn_id
				Element:span
					=
				Element:span
					"shop-1465893617-2"
				Element:span
					,
				Element:span
					@payment
				Element:span
					=
				Element:span
					<
				Element:span
					Payments
				Element:span
					::
				Element:span
					Transaction
				Element:span
					::
				Element:span
					Payment
				Element:span
					:
				Element:span
					0x00000b
				Element:span
					>
				Element:span
					{
				Element:span
					@authentication
				Element:span
					=
				Element:span
					<
				Element:span
					Payments
				Element:span
					::
				Element:span
					Transaction
				Element:span
					::
				Element:span
					Payment
				Element:span
					::
				Element:span
					Authentication
				Element:span
					:
				Element:span
					0x00000c
				Element:span
					>
				Element:span
					{
				Element:span
					@url
				Element:span
					=
				Element:span
					"https://api.juspay.in/pay/start/shop/8646a7a029974fa99995fec00340a507"
				Element:span
					,
				Element:span
					@method
				Element:span
					=
				Element:span
					"GET"
				Element:span
					,
				Element:span
					}
				Element:span
					,
				Element:span
					}
				Element:span
					,
				Element:span
					}
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					Payment
				Element:span
					Object
				Element:span
					(
				Element:span
					[
				Element:span
					order_id
				Element:span
					]
				Element:span
					=>
				Element:span
					1465893617
				Element:span
					[
				Element:span
					status
				Element:span
					]
				Element:span
					=>
				Element:span
					PENDING_VBV
				Element:span
					[
				Element:span
					txn_id
				Element:span
					]
				Element:span
					=>
				Element:span
					shop
				Element:span
					-
				Element:span
					1465893617
				Element:span
					-
				Element:span
					2
				Element:span
					[
				Element:span
					method
				Element:span
					]
				Element:span
					=>
				Element:span
					GET
				Element:span
					[
				Element:span
					url
				Element:span
					]
				Element:span
					=>
				Element:span
					https
				Element:span
					://
				Element:span
					api
				Element:span
					.
				Element:span
					juspay
				Element:span
					.
				Element:span
					in
				Element:span
					/
				Element:span
					pay
				Element:span
					/
				Element:span
					start
				Element:span
					/
				Element:span
					shop
				Element:span
					/
				Element:span
					8646
				Element:span
					a7a029974fa99995fec00340a507
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					@object
				Element:span
					in
				Element:span
					.
				Element:span
					juspay
				Element:span
					.
				Element:span
					model
				Element:span
					.
				Element:span
					Payment
				Element:span
					JSON:
				Element:span
					{
				Element:span
					"order_id"
				Element:span
					:
				Element:span
					"1465893617"
				Element:span
					,
				Element:span
					"txn_id"
				Element:span
					:
				Element:span
					"guest-1465893617-1"
				Element:span
					,
				Element:span
					"status"
				Element:span
					:
				Element:span
					"CHARGED"
				Element:span
					,
				Element:span
					"method"
				Element:span
					:
				Element:span
					"GET"
				Element:span
					,
				Element:span
					"url"
				Element:span
					:
				Element:span
					"https://api.juspay.in/pay/start/shop/8646a7a029974fa99995fec00340a507"
				Element:span
					}
			Node:
			(type) c
			(layer)1
				Element:h4
					Response Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Field
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					order_id
				Element:td
					String
				Element:td
					OrderID for which the payment is being started.
				Element:tr
				Element:td
					txn_id
				Element:td
					String
				Element:td
					Transaction ID for the payment attempt.
				Element:tr
				Element:td
					status
				Element:td
					String
				Element:td
					Status of the transaction. PENDING_VBV indicates that the transaction requires authentication to complete.
				Element:tr
				Element:td
					payment
				Element:td
					String
				Element:td
					Contains the payment authentication details.
				Element:tr
				Element:td
					authentication
				Element:td
					String
				Element:td
					Contains the authentication details.
				Element:tr
				Element:td
					method
				Element:td
					String
				Element:td
					HTTP Method for authentication. Can be one of GET or POST
				Element:tr
				Element:td
					url
				Element:td
					String
				Element:td
					URL to which the user has to be taken to for completing the authentication
				Element:tr
				Element:td
					params
				Element:td
					String
				Element:td
					Present only when method is POST. Parameter map that has to be sent along with the URL for authentication.
				Element:br
				Element:span
					Do not hardcode the params in your client
				Element:br
					* Never assume that you will receive param “x” or param “y”. This is completely dynamic and will vary on a case by case basis.
			Node:
			(type) c
			(layer)1
				Element:h4
					Handling POST
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Handling POST
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					<form
				Element:span
					method=
				Element:span
					"POST"
				Element:span
					action=
				Element:span
					"$authentication.url"
				Element:span
					id=
				Element:span
					"authForm"
				Element:span
					>
					{{ for key in $authentication.params }}
				Element:span
					<input
				Element:span
					type=
				Element:span
					"hidden"
				Element:span
					name=
				Element:span
					"$key"
				Element:span
					value=
				Element:span
					"$authentication.params[$key]"
				Element:span
					>
					{{ end }}
				Element:span
					</form>
				Element:span
					<script
				Element:span
					type=
				Element:span
					"text/javascript"
				Element:span
					>
				Element:span
					document
				Element:span
					.
				Element:span
					forms
				Element:span
					[
				Element:span
					"authForm"
				Element:span
					].
				Element:span
					submit
				Element:span
					()
				Element:span
					</script>
			Node:
			(type) c
			(layer)1
				Element:p
					When you get
				Element:code
					POST
					as the authentication method in the response, then the customer must be redirected using a form. Example HTML code is given to you. Depending on your client language, choose the appropriate way to create the form.
			Node:
			(type) c
			(layer)1
				Element:h4
					Handling GET
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Handling GET
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					<!-- Example for handling GET response -->
				Element:span
					<script
				Element:span
					type=
				Element:span
					"text/javascript"
				Element:span
					>
				Element:span
					// assuming that you are passing the JSON response of /txns API directly here
				Element:span
					function
				Element:span
					handleJuspayGetResponse
				Element:span
					(
				Element:span
					juspayResponse
				Element:span
					)
				Element:span
					{
				Element:span
					window
				Element:span
					.
				Element:span
					location
				Element:span
					.
				Element:span
					href
				Element:span
					=
				Element:span
					juspayResponse
				Element:span
					.
				Element:span
					payment
				Element:span
					.
				Element:span
					authentication
				Element:span
					.
				Element:span
					url
				Element:span
					}
				Element:span
					handleJuspayGetResponse
				Element:span
					(
				Element:span
					response
				Element:span
					)
				Element:span
					</script>
			Node:
			(type) c
			(layer)1
				Element:p
					When you get
				Element:code
					GET
					as the authentication method in the response, you may load the URL directly into the customer’s browser. You can easily achieve this by send HTTP 302 from your server. However, if the API call was made from the browser, then you can utilize the code snippet provided.
			Node:
			(type) c
			(layer)1
				Element:h2
					Wallet Direct Debit
			Node:
			(type) c
			(layer)1
				Element:p
					Directly debit the amount from a Wallet that is linked to a Customer’s account. If the status in the response is
				Element:code
					CHARGED
					, then the payment is immediatley successful.
			Node:
			(type) c
			(layer)1
				Element:p
					Note: This is an authenticated call unlike other transaction APIs. This API must be invoked from your server directly. DO NOT send the API Key to client.
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Definition
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					POST https://api.juspay.in/txns
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					Payment
				Element:span
					.
				Element:span
					create
				Element:span
					(
				Element:span
					Map
				Element:span
					params
				Element:span
					);
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example Request
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -X POST https://api.juspay.in/txns
				Element:span
					\
					-u api_key:
				Element:span
					\
					-d
				Element:span
					"order_id=:order_id"
				Element:span
					\
					-d
				Element:span
					"merchant_id=:merchant_id"
				Element:span
					\
					-d
				Element:span
					"payment_method_type=WALLET"
				Element:span
					\
					-d
				Element:span
					"direct_wallet_token=:direct_wallet_token"
					-d
				Element:span
					"payment_method=MOBIKWIK"
				Element:span
					\
					-d
				Element:span
					"redirect_after_payment=true"
				Element:span
					\
					-d
				Element:span
					"format=json"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					Juspay
				Element:span
					.
				Element:span
					Payments
				Element:span
					.
				Element:span
					create_wallet_payment
				Element:span
					(
				Element:span
					order_id
				Element:span
					=
				Element:span
					'1465893617'
				Element:span
					,
				Element:span
					merchant_id
				Element:span
					=
				Element:span
					'guest'
				Element:span
					,
				Element:span
					direct_wallet_token
				Element:span
					=
				Element:span
					'directdebittoken123'
				Element:span
					,
				Element:span
					payment_method
				Element:span
					=
				Element:span
					'MOBIKWIK'
				Element:span
					,
				Element:span
					redirect_after_payment
				Element:span
					=
				Element:span
					False
				Element:span
					,
				Element:span
					format
				Element:span
					=
				Element:span
					'json'
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					Payments
				Element:span
					.
				Element:span
					create_wallet_payment
				Element:span
					(
				Element:span
					:order_id
				Element:span
					=>
				Element:span
					'1465893617'
				Element:span
					,
				Element:span
					:merchant_id
				Element:span
					=>
				Element:span
					'guest'
				Element:span
					,
				Element:span
					:direct_wallet_token
				Element:span
					=>
				Element:span
					'directdebittoken123'
				Element:span
					,
				Element:span
					:payment_method_type
				Element:span
					=>
				Element:span
					'WALLET'
				Element:span
					,
				Element:span
					:payment_method
				Element:span
					=>
				Element:span
					'MOBIKWIK'
				Element:span
					,
				Element:span
					:redirect_after_payment
				Element:span
					=>
				Element:span
					false
				Element:span
					,
				Element:span
					:format
				Element:span
					=>
				Element:span
					'json'
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					$params
				Element:span
					=
				Element:span
					array
				Element:span
					();
				Element:span
					$params
				Element:span
					[
				Element:span
					'order_id'
				Element:span
					]
				Element:span
					=
				Element:span
					"1465893617"
				Element:span
					;
				Element:span
					$params
				Element:span
					[
				Element:span
					'merchant_id'
				Element:span
					]
				Element:span
					=
				Element:span
					"guest"
				Element:span
					;
				Element:span
					$params
				Element:span
					[
				Element:span
					'direct_wallet_token'
				Element:span
					]
				Element:span
					=
				Element:span
					"directdebittoken123"
				Element:span
					;
				Element:span
					$params
				Element:span
					[
				Element:span
					'payment_method'
				Element:span
					]
				Element:span
					=
				Element:span
					"MOBIKWIK"
				Element:span
					;
				Element:span
					$params
				Element:span
					[
				Element:span
					'payment_method_type'
				Element:span
					]
				Element:span
					=
				Element:span
					"WALLET;
				Element:span
					$params['redirect_after_payment']
				Element:span
					=False;
				Element:span
					$params['format']
				Element:span
					="
				Element:span
					json
				Element:span
					";
				Element:span
					$response
				Element:span
					= Payment::create(
				Element:span
					$params
				Element:span
					);
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					Map
				Element:span
					<
				Element:span
					String
				Element:span
					,
				Element:span
					Object
				Element:span
					>
				Element:span
					params
				Element:span
					=
				Element:span
					new
				Element:span
					LinkedHashMap
				Element:span
					();
				Element:span
					params
				Element:span
					.
				Element:span
					put
				Element:span
					(
				Element:span
					"order_id"
				Element:span
					,
				Element:span
					"1465893617"
				Element:span
					);
				Element:span
					params
				Element:span
					.
				Element:span
					put
				Element:span
					(
				Element:span
					"merchant_id"
				Element:span
					,
				Element:span
					"guest"
				Element:span
					);
				Element:span
					params
				Element:span
					.
				Element:span
					put
				Element:span
					(
				Element:span
					"payment_method_type"
				Element:span
					,
				Element:span
					"MOBIKWIK"
				Element:span
					);
				Element:span
					params
				Element:span
					.
				Element:span
					put
				Element:span
					(
				Element:span
					"payment_method"
				Element:span
					,
				Element:span
					"WALLET"
				Element:span
					);
				Element:span
					params
				Element:span
					.
				Element:span
					put
				Element:span
					(
				Element:span
					"redirect_after_payment"
				Element:span
					,
				Element:span
					false
				Element:span
					);
				Element:span
					params
				Element:span
					.
				Element:span
					put
				Element:span
					(
				Element:span
					"format"
				Element:span
					,
				Element:span
					"json"
				Element:span
					);
				Element:span
					Payment
				Element:span
					payment
				Element:span
					=
				Element:span
					Payment
				Element:span
					.
				Element:span
					create
				Element:span
					(
				Element:span
					params
				Element:span
					);
			Node:
			(type) c
			(layer)1
				Element:h4
					Request Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Field
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					order_id
				Element:br
				Element:code
					Required
				Element:td
					String
				Element:td
				Element:code
					order_id
					pertaining to the order for which the payment is started.
				Element:tr
				Element:td
					merchant_id
				Element:br
				Element:code
					Required
				Element:td
					String
				Element:td
					ID of the merchant_account that you hold with us.
				Element:tr
				Element:td
					direct_wallet_token
				Element:br
				Element:code
					Required
				Element:td
					String
				Element:td
					Juspay wallet token for linked wallets. This is available in /cusotmers/:id/wallets API.
				Element:tr
				Element:td
					payment_method_type
				Element:br
				Element:code
					Required
				Element:td
					String
				Element:td
					Must be
				Element:code
					WALLET
				Element:tr
				Element:td
					payment_method
				Element:br
				Element:code
					Required
				Element:td
					String
				Element:td
					The actual payment method that was selected by the user. For WALLET transactions, it must be one of the supported wallets:
				Element:tr
				Element:td
					redirect_after_payment
				Element:br
				Element:code
					Required
				Element:td
					String
				Element:td
					This is a boolean variable and accepts true/false. We recommend that you set this to true. If set to
				Element:code
					true
					, then the user is redirected to the
				Element:code
					return_url
					configured for the order. If set to
				Element:code
					false
					, then the user will be stopped at the response page from the gateway.
				Element:tr
				Element:td
					format
				Element:br
				Element:code
					Required
				Element:td
					String
				Element:td
					If it is set to
				Element:code
					json
					, then the response will be HTTP 200 with a JSON formatted text. Otherwise, the response is HTTP 302 with the Location attribute having the destination URL.
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example Response (having POST as the method)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
					"order_id"
					:
				Element:span
					":order_id"
					,
				Element:span
					"txn_id"
					:
				Element:span
					":txn_id"
					,
				Element:span
					"status"
					:
				Element:span
					"CHARGED"
					,
				Element:span
					"payment"
					:
				Element:span
					{
				Element:span
					"authentication"
					:
				Element:span
					{
				Element:span
					"method"
					:
				Element:span
					"POST"
					,
				Element:span
					"url"
					:
				Element:span
					"https://api.juspay.in/pay/finish/:merchant-id/:txn-id"
					,
				Element:span
					"params"
					:
				Element:span
					{
				Element:span
					"key1"
					:
				Element:span
					"v1"
					,
				Element:span
					"key2"
					:
				Element:span
					"v2"
					,
				Element:span
					"key3"
					:
				Element:span
					"v3"
				Element:span
					}
				Element:span
					}
				Element:span
					}
				Element:span
					}
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					<
				Element:span
					Transaction
				Element:span
					>
				Element:span
					{
				Element:span
					'order_id'
				Element:span
					:
				Element:span
					u'order_id'
				Element:span
					,
				Element:span
					'status'
				Element:span
					:
				Element:span
					u'CHARGED'
				Element:span
					,
				Element:span
					'txn_id'
				Element:span
					:
				Element:span
					u'txn_id'
				Element:span
					,
				Element:span
					'payment'
				Element:span
					:
				Element:span
					<
				Element:span
					Payment
				Element:span
					>
				Element:span
					{
				Element:span
					'authentication'
				Element:span
					:
				Element:span
					<
				Element:span
					Authentication
				Element:span
					>
				Element:span
					{
				Element:span
					'url'
				Element:span
					:
				Element:span
					u'https://api.juspay.in/pay/finish/:merchant-id/:txn-id'
				Element:span
					,
				Element:span
					'method'
				Element:span
					:
				Element:span
					u'POST'
				Element:span
					,
				Element:span
					'params'
				Element:span
					:
				Element:span
					{
				Element:span
					"key1"
				Element:span
					:
				Element:span
					"v1"
				Element:span
					,
				Element:span
					"key2"
				Element:span
					:
				Element:span
					"v2"
				Element:span
					,
				Element:span
					"key3"
				Element:span
					:
				Element:span
					"v3"
				Element:span
					}
				Element:span
					}
				Element:span
					,
				Element:span
					}
				Element:span
					,
				Element:span
					}
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					<
				Element:span
					Payments
				Element:span
					::
				Element:span
					Transaction
				Element:span
					:
				Element:span
					0x00000a
				Element:span
					>
				Element:span
					{
				Element:span
					@order_id
				Element:span
					=
				Element:span
					"order_id"
				Element:span
					,
				Element:span
					@status
				Element:span
					=
				Element:span
					"CHARGED"
				Element:span
					,
				Element:span
					@txn_id
				Element:span
					=
				Element:span
					"txn_id"
				Element:span
					,
				Element:span
					@payment
				Element:span
					=
				Element:span
					<
				Element:span
					Payments
				Element:span
					::
				Element:span
					Transaction
				Element:span
					::
				Element:span
					Payment
				Element:span
					:
				Element:span
					0x00000b
				Element:span
					>
				Element:span
					{
				Element:span
					@authentication
				Element:span
					=
				Element:span
					<
				Element:span
					Payments
				Element:span
					::
				Element:span
					Transaction
				Element:span
					::
				Element:span
					Payment
				Element:span
					::
				Element:span
					Authentication
				Element:span
					:
				Element:span
					0x00000c
				Element:span
					>
				Element:span
					{
				Element:span
					@url
				Element:span
					=
				Element:span
					"https://api.juspay.in/pay/finish/:merchant-id/:txn-id"
				Element:span
					,
				Element:span
					@method
				Element:span
					=
				Element:span
					"POST"
				Element:span
					,
				Element:span
					@params
				Element:span
					:{
				Element:span
					:key1
				Element:span
					=>
				Element:span
					"v1"
				Element:span
					,
				Element:span
					:key2
				Element:span
					=>
				Element:span
					"v2"
				Element:span
					,
				Element:span
					:key3
				Element:span
					=>
				Element:span
					"v3"
				Element:span
					}
				Element:span
					}
				Element:span
					,
				Element:span
					}
				Element:span
					,
				Element:span
					}
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					Payment
				Element:span
					Object
				Element:span
					(
				Element:span
					[
				Element:span
					order_id
				Element:span
					]
				Element:span
					=>
				Element:span
					order_id
				Element:span
					[
				Element:span
					status
				Element:span
					]
				Element:span
					=>
				Element:span
					CHARGED
				Element:span
					[
				Element:span
					txn_id
				Element:span
					]
				Element:span
					=>
				Element:span
					txn_id
				Element:span
					[
				Element:span
					method
				Element:span
					]
				Element:span
					=>
				Element:span
					POST
				Element:span
					[
				Element:span
					url
				Element:span
					]
				Element:span
					=>
				Element:span
					https
				Element:span
					://
				Element:span
					api
				Element:span
					.
				Element:span
					juspay
				Element:span
					.
				Element:span
					in
				Element:span
					/
				Element:span
					pay
				Element:span
					/
				Element:span
					finish
				Element:span
					/:
				Element:span
					merchant
				Element:span
					-
				Element:span
					id
				Element:span
					/:
				Element:span
					txn
				Element:span
					-
				Element:span
					id
				Element:span
					[
				Element:span
					params
				Element:span
					]
				Element:span
					=>
				Element:span
					(
				Element:span
					[
				Element:span
					key1
				Element:span
					]
				Element:span
					=>
				Element:span
					v1
				Element:span
					[
				Element:span
					key2
				Element:span
					]
				Element:span
					=>
				Element:span
					v2
				Element:span
					[
				Element:span
					key3
				Element:span
					]
				Element:span
					=>
				Element:span
					v3
				Element:span
					)
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					@object
				Element:span
					in
				Element:span
					.
				Element:span
					juspay
				Element:span
					.
				Element:span
					model
				Element:span
					.
				Element:span
					Payment
				Element:span
					JSON:
				Element:span
					{
				Element:span
					"order_id"
				Element:span
					:
				Element:span
					"1465893617"
				Element:span
					,
				Element:span
					"txn_id"
				Element:span
					:
				Element:span
					"guest-1465893617-1"
				Element:span
					,
				Element:span
					"status"
				Element:span
					:
				Element:span
					"CHARGED"
				Element:span
					,
				Element:span
					"method"
				Element:span
					:
				Element:span
					"POST"
				Element:span
					,
				Element:span
					"url"
				Element:span
					:
				Element:span
					"https://api.juspay.in/pay/finish/:merchant-id/:txn-id"
				Element:span
					,
				Element:span
					"params"
				Element:span
					:
				Element:span
					{
				Element:span
					"key1"
				Element:span
					:
				Element:span
					"v1"
				Element:span
					,
				Element:span
					"key2"
				Element:span
					:
				Element:span
					"v2"
				Element:span
					,
				Element:span
					"key3"
				Element:span
					:
				Element:span
					"v3"
				Element:span
					}
				Element:span
					}
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example Response (having GET as the method)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
					"order_id"
					:
				Element:span
					":order_id"
					,
				Element:span
					"txn_id"
					:
				Element:span
					":txn_id"
					,
				Element:span
					"status"
					:
				Element:span
					"CHARGED"
					,
				Element:span
					"payment"
					:
				Element:span
					{
				Element:span
					"authentication"
					:
				Element:span
					{
				Element:span
					"method"
					:
				Element:span
					"GET"
					,
				Element:span
					"url"
					:
				Element:span
					"https://api.juspay.in/pay/finish/:merchant-id/:txn-id"
				Element:span
					}
				Element:span
					}
				Element:span
					}
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					<
				Element:span
					Transaction
				Element:span
					>
				Element:span
					{
				Element:span
					'order_id'
				Element:span
					:
				Element:span
					u'1465893617'
				Element:span
					,
				Element:span
					'status'
				Element:span
					:
				Element:span
					u'CHARGED'
				Element:span
					,
				Element:span
					'txn_id'
				Element:span
					:
				Element:span
					u'shop-1465893617-2'
				Element:span
					,
				Element:span
					'payment'
				Element:span
					:
				Element:span
					<
				Element:span
					Payment
				Element:span
					>
				Element:span
					{
				Element:span
					'authentication'
				Element:span
					:
				Element:span
					<
				Element:span
					Authentication
				Element:span
					>
				Element:span
					{
				Element:span
					'url'
				Element:span
					:
				Element:span
					u'https://api.juspay.in/pay/finish/:merchant-id/:txn-id'
				Element:span
					,
				Element:span
					'method'
				Element:span
					:
				Element:span
					u'GET'
				Element:span
					,
				Element:span
					}
				Element:span
					,
				Element:span
					}
				Element:span
					,
				Element:span
					}
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					<
				Element:span
					Payments
				Element:span
					::
				Element:span
					Transaction
				Element:span
					:
				Element:span
					0x00000a
				Element:span
					>
				Element:span
					{
				Element:span
					@order_id
				Element:span
					=
				Element:span
					"1465893617"
				Element:span
					,
				Element:span
					@status
				Element:span
					=
				Element:span
					"CHARGED"
				Element:span
					,
				Element:span
					@txn_id
				Element:span
					=
				Element:span
					"shop-1465893617-2"
				Element:span
					,
				Element:span
					@payment
				Element:span
					=
				Element:span
					<
				Element:span
					Payments
				Element:span
					::
				Element:span
					Transaction
				Element:span
					::
				Element:span
					Payment
				Element:span
					:
				Element:span
					0x00000b
				Element:span
					>
				Element:span
					{
				Element:span
					@authentication
				Element:span
					=
				Element:span
					<
				Element:span
					Payments
				Element:span
					::
				Element:span
					Transaction
				Element:span
					::
				Element:span
					Payment
				Element:span
					::
				Element:span
					Authentication
				Element:span
					:
				Element:span
					0x00000c
				Element:span
					>
				Element:span
					{
				Element:span
					@url
				Element:span
					=
				Element:span
					"https://api.juspay.in/pay/finish/:merchant-id/:txn-id"
				Element:span
					,
				Element:span
					@method
				Element:span
					=
				Element:span
					"GET"
				Element:span
					,
				Element:span
					}
				Element:span
					,
				Element:span
					}
				Element:span
					,
				Element:span
					}
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					Payment
				Element:span
					Object
				Element:span
					(
				Element:span
					[
				Element:span
					order_id
				Element:span
					]
				Element:span
					=>
				Element:span
					1465893617
				Element:span
					[
				Element:span
					status
				Element:span
					]
				Element:span
					=>
				Element:span
					CHARGED
				Element:span
					[
				Element:span
					txn_id
				Element:span
					]
				Element:span
					=>
				Element:span
					shop
				Element:span
					-
				Element:span
					1465893617
				Element:span
					-
				Element:span
					2
				Element:span
					[
				Element:span
					method
				Element:span
					]
				Element:span
					=>
				Element:span
					GET
				Element:span
					[
				Element:span
					url
				Element:span
					]
				Element:span
					=>
				Element:span
					https
				Element:span
					://
				Element:span
					api
				Element:span
					.
				Element:span
					juspay
				Element:span
					.
				Element:span
					in
				Element:span
					/
				Element:span
					pay
				Element:span
					/
				Element:span
					finish
				Element:span
					/:
				Element:span
					merchant
				Element:span
					-
				Element:span
					id
				Element:span
					/:
				Element:span
					txn
				Element:span
					-
				Element:span
					id
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					Payment
				Element:span
					Object
				Element:span
					{
				Element:span
					"order_id"
				Element:span
					:
				Element:span
					"1465893617"
				Element:span
					,
				Element:span
					"txn_id"
				Element:span
					:
				Element:span
					"guest-1465893617-1"
				Element:span
					,
				Element:span
					"status"
				Element:span
					:
				Element:span
					"CHARGED"
				Element:span
					,
				Element:span
					"method"
				Element:span
					:
				Element:span
					"GET"
				Element:span
					,
				Element:span
					"url"
				Element:span
					:
				Element:span
					"https://api.juspay.in/pay/finish/:merchant-id/:txn-id"
				Element:span
					}
			Node:
			(type) c
			(layer)1
				Element:h4
					Response Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Field
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					order_id
				Element:td
					String
				Element:td
					Order ID for which the payment is being started.
				Element:tr
				Element:td
					txn_id
				Element:td
					String
				Element:td
					Transaction ID for the payment attempt.
				Element:tr
				Element:td
					status
				Element:td
					String
				Element:td
					Status of the transaction. Successful direct debit will return CHARGED status with pay/finish url which will redirect to your configured return url. PENDING_VBV indicates that the transaction requires authentication to complete.
				Element:tr
				Element:td
					payment
				Element:td
					String
				Element:td
					Contains the payment authentication details.
				Element:tr
				Element:td
					authentication
				Element:td
					String
				Element:td
					Contains the authentication details.
				Element:tr
				Element:td
					method
				Element:td
					String
				Element:td
					HTTP Method for authentication. Can be one of GET or POST
				Element:tr
				Element:td
					url
				Element:td
					String
				Element:td
					URL to which the user has to be taken to for completing the authentication
				Element:tr
				Element:td
					params
				Element:td
					String
				Element:td
					Present only when method is POST. Parameter map that has to be sent along with the URL for authentication.
				Element:br
				Element:span
					Do not hardcode the params in your client
				Element:br
					* Never assume that you will receive param “x” or param “y”. This is completely dynamic and will vary on a case by case basis.
			Node:
			(type) c
			(layer)1
				Element:h4
					Handling POST
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Handling POST
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					<form
				Element:span
					method=
				Element:span
					"POST"
				Element:span
					action=
				Element:span
					"$authentication.url"
				Element:span
					id=
				Element:span
					"authForm"
				Element:span
					>
					{{ for key in $authentication.params }}
				Element:span
					<input
				Element:span
					type=
				Element:span
					"hidden"
				Element:span
					name=
				Element:span
					"$key"
				Element:span
					value=
				Element:span
					"$authentication.params[$key]"
				Element:span
					>
					{{ end }}
				Element:span
					</form>
				Element:span
					<script
				Element:span
					type=
				Element:span
					"text/javascript"
				Element:span
					>
				Element:span
					document
				Element:span
					.
				Element:span
					forms
				Element:span
					[
				Element:span
					"authForm"
				Element:span
					].
				Element:span
					submit
				Element:span
					()
				Element:span
					</script>
			Node:
			(type) c
			(layer)1
				Element:p
					When you get
				Element:code
					POST
					as the authentication method in the response, then the customer must be redirected using a form. Example HTML code is given to you. Depending on your client language, choose the appropriate way to create the form.
			Node:
			(type) c
			(layer)1
				Element:h4
					Handling GET
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Handling GET
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					<!-- Example for handling GET response -->
				Element:span
					<script
				Element:span
					type=
				Element:span
					"text/javascript"
				Element:span
					>
				Element:span
					// assuming that you are passing the JSON response of /txns API directly here
				Element:span
					function
				Element:span
					handleJuspayGetResponse
				Element:span
					(
				Element:span
					juspayResponse
				Element:span
					)
				Element:span
					{
				Element:span
					window
				Element:span
					.
				Element:span
					location
				Element:span
					.
				Element:span
					href
				Element:span
					=
				Element:span
					juspayResponse
				Element:span
					.
				Element:span
					payment
				Element:span
					.
				Element:span
					authentication
				Element:span
					.
				Element:span
					url
				Element:span
					}
				Element:span
					handleJuspayGetResponse
				Element:span
					(
				Element:span
					response
				Element:span
					)
				Element:span
					</script>
			Node:
			(type) c
			(layer)1
				Element:p
					When you get
				Element:code
					GET
					as the authentication method in the response, you may load the URL directly into the customer’s browser. You can easily achieve this by send HTTP 302 from your server. However, if the API call was made from the browser, then you can utilize the code snippet provided.
			Node:
			(type) c
			(layer)1
				Element:h2
					UPI Payment
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					another_day
				Element:span
					=
					86400
				Element:span
					while
					:
				Element:span
					do if
					is_upi_completed
				Element:span
					()
					;
				Element:span
					then
				Element:span
					echo
				Element:span
					"Great. Come on in!"
				Element:span
					break
				Element:span
					else
				Element:span
					echo
				Element:span
					"Coming soon..."
					sleep
				Element:span
					$another_day
				Element:span
					fi done
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					another_day
				Element:span
					=
				Element:span
					86400
				Element:span
					while
				Element:span
					True
				Element:span
					:
				Element:span
					success
				Element:span
					=
				Element:span
					is_upi_available
				Element:span
					()
				Element:span
					if
				Element:span
					success
				Element:span
					:
				Element:span
					echo
				Element:span
					"Done. Lets go!"
				Element:span
					break
				Element:span
					else
				Element:span
					echo
				Element:span
					"Wait my friend..."
				Element:span
					sleep
				Element:span
					another_day
				Element:span
					continue
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					another_day
				Element:span
					=
				Element:span
					86400
				Element:span
					while
				Element:span
					true:
				Element:span
					success
				Element:span
					=
				Element:span
					is_upi_available
				Element:span
					()
				Element:span
					if
				Element:span
					success
				Element:span
					echo
				Element:span
					"Done. Lets go!"
				Element:span
					break
				Element:span
					else
				Element:span
					echo
				Element:span
					"Wait my friend..."
				Element:span
					sleep
				Element:span
					(
				Element:span
					another_day
				Element:span
					)
				Element:span
					next
			Node:
			(type) c
			(layer)1
				Element:p
				Element:img
			Node:
			(type) c
			(layer)1
				Element:p
			Node:
			(type) c
			(layer)1
				Element:h2
					Payment Methods
			Node:
			(type) c
			(layer)1
				Element:p
					Gives list of all the payment methods available for your account.
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Definition
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					GET https://api.juspay.in/merchants/:merchant_id/paymentmethods
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example Request
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -X GET https://api.juspay.in/merchants/guest/paymentmethods
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					Juspay
				Element:span
					.
				Element:span
					Payments
				Element:span
					.
				Element:span
					get_payment_methods
				Element:span
					(
				Element:span
					merchant_id
				Element:span
					=
				Element:span
					'guest'
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					Payments
				Element:span
					.
				Element:span
					get_payment_methods
				Element:span
					(
				Element:span
					:merchant_id
				Element:span
					=>
				Element:span
					'guest'
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					$merchantId
				Element:span
					=
				Element:span
					"guest"
				Element:span
					;
				Element:span
					$response
				Element:span
					=
				Element:span
					PaymentMethod
				Element:span
					::
				Element:span
					listAll
				Element:span
					(
				Element:span
					$merchantId
				Element:span
					);
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					String
				Element:span
					merchantId
				Element:span
					=
				Element:span
					"guest"
				Element:span
					;
				Element:span
					PaymentMethodList
				Element:span
					paymentMethods
				Element:span
					=
				Element:span
					PaymentMethod
				Element:span
					.
				Element:span
					list
				Element:span
					(
				Element:span
					merchantId
				Element:span
					);
			Node:
			(type) c
			(layer)1
				Element:h4
					Request Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Field
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					merchant_id
				Element:br
				Element:code
					Required
				Element:td
					String
				Element:td
					ID of the merchant_account that you hold with us.
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example Response
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
					"payment_methods"
					:
				Element:span
					[
				Element:span
					{
				Element:span
					"payment_method_type"
					:
				Element:span
					"CARD"
					,
				Element:span
					"payment_method"
					:
				Element:span
					"VISA"
					,
				Element:span
					"description"
					:
				Element:span
					"Visa"
				Element:span
					}
					,
				Element:span
					{
				Element:span
					"payment_method_type"
					:
				Element:span
					"CARD"
					,
				Element:span
					"payment_method"
					:
				Element:span
					"MASTER"
					,
				Element:span
					"description"
					:
				Element:span
					"Master Card"
				Element:span
					}
					,
				Element:span
					{
				Element:span
					"payment_method_type"
					:
				Element:span
					"NB"
					,
				Element:span
					"payment_method"
					:
				Element:span
					"NB_HDFC"
					,
				Element:span
					"description"
					:
				Element:span
					"HDFC"
				Element:span
					}
					,
				Element:span
					{
				Element:span
					"payment_method_type"
					:
				Element:span
					"WALLET"
					,
				Element:span
					"payment_method"
					:
				Element:span
					"PAYTM"
					,
				Element:span
					"description"
					:
				Element:span
					"Paytm"
				Element:span
					}
					,...
				Element:span
					]
				Element:span
					}
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					[
				Element:span
					<
				Element:span
					PaymentMethod
				Element:span
					>
				Element:span
					{
				Element:span
					'payment_method_type'
				Element:span
					:
				Element:span
					'CARD'
				Element:span
					,
				Element:span
					'payment_method'
				Element:span
					:
				Element:span
					'VISA'
				Element:span
					,
				Element:span
					'description'
				Element:span
					:
				Element:span
					'Visa'
				Element:span
					},
				Element:span
					<
				Element:span
					PaymentMethod
				Element:span
					>
				Element:span
					{
				Element:span
					'payment_method_type'
				Element:span
					:
				Element:span
					'CARD'
				Element:span
					,
				Element:span
					'payment_method'
				Element:span
					:
				Element:span
					'MASTER'
				Element:span
					,
				Element:span
					'description'
				Element:span
					:
				Element:span
					'Master Card'
				Element:span
					},
				Element:span
					<
				Element:span
					PaymentMethod
				Element:span
					>
				Element:span
					{
				Element:span
					'payment_method_type'
				Element:span
					:
				Element:span
					'NB'
				Element:span
					,
				Element:span
					'payment_method'
				Element:span
					:
				Element:span
					'NB_HDFC'
				Element:span
					,
				Element:span
					'description'
				Element:span
					:
				Element:span
					'HDFC'
				Element:span
					},
				Element:span
					<
				Element:span
					PaymentMethod
				Element:span
					>
				Element:span
					{
				Element:span
					'payment_method_type'
				Element:span
					:
				Element:span
					'WALLET'
				Element:span
					,
				Element:span
					'payment_method'
				Element:span
					:
				Element:span
					'PAYTM'
				Element:span
					,
				Element:span
					'description'
				Element:span
					:
				Element:span
					'Paytm'
				Element:span
					}
				Element:span
					]
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					[
				Element:span
					<
				Element:span
					PaymentMethod
				Element:span
					:
				Element:span
					0x00000a
				Element:span
					>
				Element:span
					{
				Element:span
					@payment_method_type
				Element:span
					=
				Element:span
					"CARD"
				Element:span
					,
				Element:span
					@payment_method
				Element:span
					=
				Element:span
					"VISA"
				Element:span
					,
				Element:span
					@description
				Element:span
					=
				Element:span
					"Visa"
				Element:span
					},
				Element:span
					<
				Element:span
					PaymentMethod
				Element:span
					:
				Element:span
					0x00000b
				Element:span
					>
				Element:span
					{
				Element:span
					@payment_method_type
				Element:span
					=
				Element:span
					"CARD"
				Element:span
					,
				Element:span
					@payment_method
				Element:span
					=
				Element:span
					"MASTER"
				Element:span
					,
				Element:span
					@description
				Element:span
					=
				Element:span
					"Master Card"
				Element:span
					},
				Element:span
					<
				Element:span
					PaymentMethod
				Element:span
					:
				Element:span
					0x00000c
				Element:span
					>
				Element:span
					{
				Element:span
					@payment_method_type
				Element:span
					=
				Element:span
					"NB"
				Element:span
					,
				Element:span
					@payment_method
				Element:span
					=
				Element:span
					"NB_HDFC"
				Element:span
					,
				Element:span
					@description
				Element:span
					=
				Element:span
					"HDFC"
				Element:span
					},
				Element:span
					<
				Element:span
					PaymentMethod
				Element:span
					:
				Element:span
					0x00000d
				Element:span
					>
				Element:span
					{
				Element:span
					@payment_method_type
				Element:span
					=
				Element:span
					"WALLET"
				Element:span
					,
				Element:span
					@payment_method
				Element:span
					=
				Element:span
					"PAYTM"
				Element:span
					,
				Element:span
					@description
				Element:span
					=
				Element:span
					"Paytm"
				Element:span
					}
				Element:span
					]
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					Payment
				Element:span
					Object
				Element:span
					(
				Element:span
					[
				Element:span
					0
				Element:span
					]
				Element:span
					=>
				Element:span
					PaymentMethod
				Element:span
					(
				Element:span
					[
				Element:span
					payment_method_type
				Element:span
					]
				Element:span
					=>
				Element:span
					"CARD"
				Element:span
					,
				Element:span
					[
				Element:span
					payment_method
				Element:span
					]
				Element:span
					=>
				Element:span
					"VISA"
				Element:span
					,
				Element:span
					[
				Element:span
					description
				Element:span
					]
				Element:span
					=>
				Element:span
					"Visa"
				Element:span
					),
				Element:span
					[
				Element:span
					1
				Element:span
					]
				Element:span
					=>
				Element:span
					PaymentMethod
				Element:span
					(
				Element:span
					[
				Element:span
					payment_method_type
				Element:span
					]
				Element:span
					=>
				Element:span
					"CARD"
				Element:span
					,
				Element:span
					[
				Element:span
					payment_method
				Element:span
					]
				Element:span
					=>
				Element:span
					"MASTER"
				Element:span
					,
				Element:span
					[
				Element:span
					description
				Element:span
					]
				Element:span
					=>
				Element:span
					"Master Card"
				Element:span
					),
				Element:span
					[
				Element:span
					2
				Element:span
					]
				Element:span
					=>
				Element:span
					PaymentMethod
				Element:span
					(
				Element:span
					[
				Element:span
					payment_method_type
				Element:span
					]
				Element:span
					=>
				Element:span
					"NB"
				Element:span
					,
				Element:span
					[
				Element:span
					payment_method
				Element:span
					]
				Element:span
					=>
				Element:span
					"NB_HDFC"
				Element:span
					,
				Element:span
					[
				Element:span
					description
				Element:span
					]
				Element:span
					=>
				Element:span
					"HDFC"
				Element:span
					),
				Element:span
					[
				Element:span
					3
				Element:span
					]
				Element:span
					=>
				Element:span
					PaymentMethod
				Element:span
					(
				Element:span
					[
				Element:span
					payment_method_type
				Element:span
					]
				Element:span
					=>
				Element:span
					"WALLET"
				Element:span
					,
				Element:span
					[
				Element:span
					payment_method
				Element:span
					]
				Element:span
					=>
				Element:span
					"PAYTM"
				Element:span
					,
				Element:span
					[
				Element:span
					description
				Element:span
					]
				Element:span
					=>
				Element:span
					"Paytm"
				Element:span
					)
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					@object
				Element:span
					java
				Element:span
					.
				Element:span
					util
				Element:span
					.
				Element:span
					List
				Element:span
					<
				Element:span
					PaymentMethod
				Element:span
					>
				Element:span
					JSON:
				Element:span
					[
				Element:span
					{
				Element:span
					"payment_method_type"
				Element:span
					:
				Element:span
					"CARD"
				Element:span
					,
				Element:span
					"payment_method"
				Element:span
					:
				Element:span
					"VISA"
				Element:span
					,
				Element:span
					"description"
				Element:span
					:
				Element:span
					"Visa"
				Element:span
					},
				Element:span
					{
				Element:span
					"payment_method_type"
				Element:span
					:
				Element:span
					"CARD"
				Element:span
					,
				Element:span
					"payment_method"
				Element:span
					:
				Element:span
					"MASTER"
				Element:span
					,
				Element:span
					"description"
				Element:span
					:
				Element:span
					"Master Card"
				Element:span
					},
				Element:span
					{
				Element:span
					"payment_method_type"
				Element:span
					:
				Element:span
					"NB"
				Element:span
					,
				Element:span
					"payment_method"
				Element:span
					:
				Element:span
					"NB_HDFC"
				Element:span
					,
				Element:span
					"description"
				Element:span
					:
				Element:span
					"HDFC"
				Element:span
					},
				Element:span
					{
				Element:span
					"payment_method_type"
				Element:span
					:
				Element:span
					"WALLET"
				Element:span
					,
				Element:span
					"payment_method"
				Element:span
					:
				Element:span
					"PAYTM"
				Element:span
					,
				Element:span
					"description"
				Element:span
					:
				Element:span
					"Paytm"
				Element:span
					}
				Element:span
					]
			Node:
			(type) c
			(layer)1
				Element:h4
					Response Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Field
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					payment_method_type
				Element:td
					String
				Element:td
					It could be CARD/NB/WALLET/UPI.
				Element:tr
				Element:td
					payment_method
				Element:td
					String
				Element:td
					It is the actual payment method selected by user to perform transaction. For card transaction it could be VISA, MASTER, etc. For Net banking it could be NB_AXIS, NB_HDFC, etc. For Wallet transaction it could be PAYTM, MOBIKWIK, etc.
				Element:tr
				Element:td
					description
				Element:td
					String
				Element:td
					Describe the payment method.
			Node:
			(type) h1
			(layer)1
				Element:h1
					Outage
			Node:
			(type) c
			(layer)1
				Element:p
					Represents a Scheduled Outage that is associated with either a Payment Gateway or a Bank (wherein the NetBanking or Direct Debit option will not be available)
			Node:
			(type) c
			(layer)1
				Element:h2
					List Outages
			Node:
			(type) c
			(layer)1
				Element:p
					This API will return list of outages with banks and payment gateways. At this point, we only return the Scheduled downtimes that are announced by the Bank. You may use this to suggest alternative payment methods to your customers during the checkout process.
			Node:
			(type) c
			(layer)1
				Element:p
					An example checkout screen with downtime info:
				Element:img
			Node:
			(type) c
			(layer)1
				Element:p
				Element:strong
					Note:
					The API will contain the current outages and those in the near future as well. Please check the start time & end time to show only the outages that are currently ongoing.
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Definition
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					GET https://api.juspay.in/outages
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example Request
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -X GET https://api.juspay.in/outages
				Element:span
					\
					-u api_key:
			Node:
			(type) c
			(layer)1
				Element:h4
					Request Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Field
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
					String
				Element:td
					Outage ID generated by JusPay.
				Element:tr
				Element:td
					object
				Element:td
					String
				Element:td
					Object type of entity, in this case it’ll be
				Element:code
					outage
					.
				Element:tr
				Element:td
					scope
				Element:td
					String
				Element:td
					Scope of the outage, one of BANK or GATEWAY. If
				Element:code
					GATEWAY
					, then all the payment methods supported by the gateway will be impacted. If
				Element:code
					BANK
					, then the issue pertains only to the bank.
				Element:tr
				Element:td
					gateway
				Element:td
					String
				Element:td
					Will be present only if the scope is
				Element:code
					GATEWAY
					. All the payment methods pertaining to the
				Element:code
					GATEWAY
					will be impacted.
				Element:br
					You can mitigate this risk by having multiple gateways for each of the payment methods. The probability that two gateways will be down simulateneously is extremely low.
				Element:tr
				Element:td
					bank
				Element:td
					String
				Element:td
					Will be present only if the scope is
				Element:code
					BANK
					.
				Element:tr
				Element:td
					payment_method_type
				Element:td
					String
				Element:td
					Will be present only if the scope is
				Element:code
					BANK
					. One of
				Element:code
					NB
					or
				Element:code
					CARD
					. If
				Element:code
					NB
					, then NetBanking is impacted. If
				Element:code
					CARD
					, then cards issued by the bank will not work.
				Element:tr
				Element:td
					start_time
				Element:td
					String
				Element:td
					Indicates the start time of the outage event.
				Element:tr
				Element:td
					end_time
				Element:td
					String
				Element:td
					Indicates the outage completion time.
				Element:tr
				Element:td
					description
				Element:td
					String
				Element:td
					Short description about the nature of the outage. You can display this message to your users.
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example Response
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
					"object"
					:
				Element:span
					"list"
					,
				Element:span
					"list"
					:
				Element:span
					[
				Element:span
					{
				Element:span
					"id"
					:
				Element:span
					"5xtum1onxblhq28e"
					,
				Element:span
					"object"
					:
				Element:span
					"outage"
					,
				Element:span
					"scope"
					:
				Element:span
					"GATEWAY"
					,
				Element:span
					"start_time"
					:
				Element:span
					"2016-09-19T18:32:00+0000"
					,
				Element:span
					"end_time"
					:
				Element:span
					"2016-09-20T18:29:59+0000"
					,
				Element:span
					"description"
					:
				Element:span
					"ABCD PG is down"
					,
				Element:span
					"gateway"
					:
				Element:span
					"ABCD"
				Element:span
					}
					,
				Element:span
					{
				Element:span
					"id"
					:
				Element:span
					"b3xy6lc0egxvjt02"
					,
				Element:span
					"object"
					:
				Element:span
					"outage"
					,
				Element:span
					"scope"
					:
				Element:span
					"BANK"
					,
				Element:span
					"start_time"
					:
				Element:span
					"2016-09-19T18:30:00+0000"
					,
				Element:span
					"end_time"
					:
				Element:span
					"2016-09-21T12:30:00+0000"
					,
				Element:span
					"description"
					:
				Element:span
					"ABCD Bank cards are failing. Please use other options."
					,
				Element:span
					"bank"
					:
				Element:span
					"ABCD Bank"
					,
				Element:span
					"payment_method_type"
					:
				Element:span
					"CARD"
				Element:span
					}
				Element:span
					]
					,
				Element:span
					"count"
					: 2,
				Element:span
					"offset"
					: 0,
				Element:span
					"total"
					: 2
				Element:span
					}
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					#
				Element:span
					# Not implemented in the SDK yet. Please check the CURL tab.
				Element:span
					#
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					#
				Element:span
					# Not implemented in the SDK yet. Please check the CURL tab.
				Element:span
					#
			Node:
			(type) h1
			(layer)1
				Element:h1
					Recurring Payments
			Node:
			(type) c
			(layer)1
				Element:p
					There are two steps to schedule a recurring payment transaction via Juspay:
			Node:
			(type) c
			(layer)1
				Element:ol
				Element:li
					Create a customer via
				Element:code
					/customers
					, tokenize his card with
				Element:code
					/cards/tokenize
					, add it to the stored cards via
				Element:code
					/cards
					and then create a plan through
				Element:code
					/plans
					with those details.
				Element:li
					Create a subscription with the id got from step one. If the card requires authentication then you will get a validation url in response to validate the payment source
				Element:em
					once
					. Redirect the customer to it, Juspay will validate his payment source and will redirect the customer to the return url.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					After the successful completion of step two, Juspay will periodically do the recurring debit for you and your customer according to schedule.
			Node:
			(type) c
			(layer)1
				Element:h2
					Create plan
			Node:
			(type) c
			(layer)1
				Element:p
					Create a new recurring debit plan object. You may invoke this method for adding plans for your subscription. JusPay will respond with a plan ID that you can persist in your Database.
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Definition
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					POST https://api.juspay.in/plans
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example Request
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -X POST https://api.juspay.in/plans
				Element:span
					\
					-u api_key:
				Element:span
					\
					-d
				Element:span
					"name=Plan_5"
				Element:span
					\
					-d
				Element:span
					"object_reference_id=plan_5"
				Element:span
					\
					-d
				Element:span
					"amount=3000.00"
				Element:span
					\
					-d
				Element:span
					"period_unit=3"
				Element:span
					\
					-d
				Element:span
					"period=MONTH"
				Element:span
					\
					-d
				Element:span
					"amount_type=FIXED"
				Element:span
					\
					-d
				Element:span
					"description=Test plan"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
			Node:
			(type) c
			(layer)1
				Element:h4
					Request Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Field
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					name
				Element:br
				Element:code
					Required
				Element:td
					String
				Element:td
					Name of the plan.
				Element:tr
				Element:td
					object_reference_id
				Element:td
					String
				Element:td
					Unique plan ID defined by you.
				Element:tr
				Element:td
					amount
				Element:br
				Element:code
					Required
				Element:td
					Double
				Element:td
					Amount defined for the plan.
				Element:tr
				Element:td
					period_unit
				Element:br
				Element:code
					Required
				Element:td
					String
				Element:td
					Quantity of the time period defined for the billing cycle.
				Element:tr
				Element:td
					period
				Element:br
				Element:code
					Required
				Element:td
					String
				Element:td
					Unit of Time period for the billing cycle defined.Value could be :
				Element:tr
				Element:td
					amount_type
				Element:br
				Element:code
					Required
				Element:td
					String
				Element:td
					You have the option of either fixed or variable debit amounts controlled by this parameter. Value can be: FIXED or VARIABLE
				Element:tr
				Element:td
					description
				Element:br
				Element:code
					Required
				Element:td
					String
				Element:td
					Description of the plan.
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example Response
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
					"id"
					:
				Element:span
					"plan_hfja9v8w2gevjur0"
					,
				Element:span
					"object"
					:
				Element:span
					"plan"
					,
				Element:span
					"object_reference_id"
					:
				Element:span
					"plan_5"
					,
				Element:span
					"period"
					:
				Element:span
					"DAY"
					,
				Element:span
					"period_unit"
					: 10,
				Element:span
					"name"
					:
				Element:span
					"Plan_5"
					,
				Element:span
					"description"
					:
				Element:span
					"Test plan"
					,
				Element:span
					"currency"
					:
				Element:span
					"INR"
					,
				Element:span
					"amount"
					: 3000,
				Element:span
					"amount_type"
					:
				Element:span
					"VARIABLE"
					,
				Element:span
					"created"
					:
				Element:span
					"2016-12-12T13:10:59Z"
					,
				Element:span
					"updated"
					:
				Element:span
					"2016-12-12T13:10:59Z"
				Element:span
					}
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
			Node:
			(type) c
			(layer)1
				Element:h4
					Response Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Field
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
					String
				Element:td
					Plan ID generated by JUSPAY. Has to be persisted in DB and should be used while creating a subscription
				Element:tr
				Element:td
					object
				Element:td
					String
				Element:td
					Type of the Juspay Entity, Object type is plan here.
				Element:tr
				Element:td
					object_reference_id
				Element:td
					String
				Element:td
					Unique plan ID defined by you.
				Element:tr
				Element:td
					period
				Element:td
					String
				Element:td
					Unit of Time period for the billing cycle defined.
				Element:tr
				Element:td
					period_unit
				Element:td
					String
				Element:td
					Quantity of the time period defined for the billing cycle.
				Element:tr
				Element:td
					name
				Element:td
					String
				Element:td
					Name of the plan.
				Element:tr
				Element:td
					description
				Element:td
					String
				Element:td
					Description for the plan.
				Element:tr
				Element:td
					currency
				Element:td
					String
				Element:td
					Unit of currency.
				Element:tr
				Element:td
					amount
				Element:td
					Double
				Element:td
					Amount for the plan.
				Element:tr
				Element:td
					amount_type
				Element:td
					String
				Element:td
					You have the option of either fixed or variable debit amounts controlled by this parameter. Value can be: FIXED or VARIABLE.
				Element:tr
				Element:td
					created
				Element:td
					String
				Element:td
					Date of plan creation.
				Element:tr
				Element:td
					updated
				Element:td
					String
				Element:td
					Last Updated time of the plan.
			Node:
			(type) c
			(layer)1
				Element:h2
					Get plan
			Node:
			(type) c
			(layer)1
				Element:p
					Get a specified plan for the given plan ID.
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Definition
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					GET https://api.juspay.in/plans/:plan_id
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example Request
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl https://api.juspay.in/plans/plan_hfja9v8w2gevjur0
				Element:span
					\
					-u api_key:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
			Node:
			(type) c
			(layer)1
				Element:h4
					URL Embedded Parameter
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Field
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					plan_id
				Element:br
				Element:code
					Required
				Element:td
					String
				Element:td
					Use the ID that is generated by JUSPAY during plan creation. You may also send the value that you sent in
				Element:code
					object_reference_id
					at the time of creating the plan.
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example Response
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
					"id"
					:
				Element:span
					"plan_hfja9v8w2gevjur0"
					,
				Element:span
					"object"
					:
				Element:span
					"plan"
					,
				Element:span
					"period"
					:
				Element:span
					"DAY"
					,
				Element:span
					"period_unit"
					: 10,
				Element:span
					"name"
					:
				Element:span
					"Plan_5"
					,
				Element:span
					"description"
					:
				Element:span
					"Test plan"
					,
				Element:span
					"currency"
					:
				Element:span
					"INR"
					,
				Element:span
					"amount"
					: 3000,
				Element:span
					"amount_type"
					:
				Element:span
					"VARIABLE"
					,
				Element:span
					"created"
					:
				Element:span
					"2016-12-12T13:10:59Z"
					,
				Element:span
					"updated"
					:
				Element:span
					"2016-12-12T13:10:59Z"
				Element:span
					}
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
			Node:
			(type) c
			(layer)1
				Element:h4
					Response Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Field
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
					String
				Element:td
					Plan ID generated by JUSPAY. Has to be persisted in DB and should be used while creating a subscription
				Element:tr
				Element:td
					object
				Element:td
					String
				Element:td
					Type of the Juspay Entity, Object type is plan here.
				Element:tr
				Element:td
					period
				Element:td
					String
				Element:td
					Unit of Time period for the billing cycle defined.
				Element:tr
				Element:td
					period_unit
				Element:td
					String
				Element:td
					Quantity of the time period defined for the billing cycle.
				Element:tr
				Element:td
					name
				Element:td
					String
				Element:td
					Name of the plan.
				Element:tr
				Element:td
					description
				Element:td
					String
				Element:td
					Description for the plan.
				Element:tr
				Element:td
					currency
				Element:td
					String
				Element:td
					Unit of currency
				Element:tr
				Element:td
					amount
				Element:td
					Double
				Element:td
					Amount for the plan.
				Element:tr
				Element:td
					amount_type
				Element:td
					String
				Element:td
					You have the option of either fixed or variable debit amounts controlled by this parameter. Value can be: FIXED or VARIABLE
				Element:tr
				Element:td
					created
				Element:td
					String
				Element:td
					Date of plan creation.
				Element:tr
				Element:td
					updated
				Element:td
					String
				Element:td
					Last Updated time of the plan.
			Node:
			(type) c
			(layer)1
				Element:h2
					Create subscription
			Node:
			(type) c
			(layer)1
				Element:p
					Create a new subscription object. You may invoke this method for scheduling recurring payment. Requires a valid recurring payment plan id created via
				Element:code
					/plans
					api. JusPay will respond with a subscription ID that you can persist in your Database.
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Definition
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					POST https://api.juspay.in/subscriptions
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example Request
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -X POST https://api.juspay.in/subscriptions
				Element:span
					\
					-u api_key:
				Element:span
					\
					-d
				Element:span
					"object_reference_id=sub1"
				Element:span
					\
					-d
				Element:span
					"max_amount=10000.00"
				Element:span
					\
					-d
				Element:span
					"plan=plan_hfja9v8w2gevjur0"
				Element:span
					\
					-d
				Element:span
					"start_date=2016-12-12T00:00:00Z"
				Element:span
					\
					-d
				Element:span
					"customer=cst_9uiehncjizlfcnps"
				Element:span
					\
					-d
				Element:span
					"gateway_id=100"
				Element:span
					\
					-d
				Element:span
					"payment_source=8825bc1d-993f-4f65-94b3-24048db1f239"
				Element:span
					\
					-d
				Element:span
					"number_of_billing_cycles=2"
				Element:span
					\
					-d
				Element:span
					"source_validation_required=true"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
			Node:
			(type) c
			(layer)1
				Element:h4
					Request Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Field
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					object_reference_id
				Element:br
				Element:code
					Required
				Element:td
					String
				Element:td
					Unique ID that you use to represent the subscription in your database. This must be atleast 8 characters and must be unique.
				Element:tr
				Element:td
					max_amount
				Element:br
				Element:code
					Required
				Element:td
					String
				Element:td
					Maximum amount defined for a single recurring transaction.
				Element:tr
				Element:td
					plan
				Element:code
					Required
				Element:br
				Element:td
					String
				Element:td
					Plan identifier for which you want to subscribe. This was generated by juspay on
				Element:code
					/plan/create
					api response.
				Element:tr
				Element:td
					start_date
				Element:br
				Element:code
					Required
				Element:td
					String
				Element:td
					Start date of subscription.
				Element:tr
				Element:td
					customer
				Element:br
				Element:code
					Required
				Element:td
					String
				Element:td
					Customer id for which you want to create subscription. This was generated by juspay on customer create api response.
				Element:tr
				Element:td
					gateway_id
				Element:br
				Element:code
					Required
				Element:td
					String
				Element:td
					Gateway Id of the gateway used for performing this and the future transactions.
				Element:tr
				Element:td
					payment_source
				Element:br
				Element:code
					Required
				Element:td
					String
				Element:td
					A valid card token obtained using
				Element:code
					/cards/list
					API. Card should have been added by the
				Element:code
					/card
					API. Other payment sources will be added soon.
				Element:tr
				Element:td
					number_of_billing_cycles
				Element:br
				Element:code
					Required
				Element:td
					String
				Element:td
					Represents total number of billing cycles, It will work out as the period defined in the plan times the no of billing cycles defined here. Ex a quarterly plan x 3 billing cycles = Recurring payment made for a year every 4 months.
				Element:tr
				Element:td
					source_validation_required
				Element:td
					Boolean
				Element:td
					This parameter is used to control the authentication requirement on the payment source. If it is set to false a direct debit transaction will be performed on the payment source without authenticating it with the user. Default value is
				Element:code
					true
					if unspecified.
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example Response
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
					"id"
					:
				Element:span
					"sub_y8emhyhklyqni681"
					,
				Element:span
					"object"
					:
				Element:span
					"subscription"
					,
				Element:span
					"object_reference_id=sub1"
					,
				Element:span
					"state"
					:
				Element:span
					"CREATED"
					,
				Element:span
					"start_date"
					:
				Element:span
					"2016-12-11T18:30:00Z"
					,
				Element:span
					"end_date"
					:
				Element:span
					"2016-12-31T18:30:00Z"
					,
				Element:span
					"plan"
					:
				Element:span
					{
				Element:span
					"id"
					:
				Element:span
					"plan_hfja9v8w2gevjur0"
					,
				Element:span
					"object"
					:
				Element:span
					"plan"
					,
				Element:span
					"period"
					:
				Element:span
					"DAY"
					,
				Element:span
					"period_unit"
					: 10,
				Element:span
					"name"
					:
				Element:span
					"Plan_5"
					,
				Element:span
					"description"
					:
				Element:span
					"Test plan"
					,
				Element:span
					"currency"
					:
				Element:span
					"INR"
					,
				Element:span
					"amount"
					: 3000,
				Element:span
					"amount_type"
					:
				Element:span
					"VARIABLE"
					,
				Element:span
					"created"
					:
				Element:span
					"2016-12-12T13:10:59Z"
					,
				Element:span
					"updated"
					:
				Element:span
					"2016-12-12T13:10:59Z"
				Element:span
					}
					,
				Element:span
					"quantity"
					: 1,
				Element:span
					"object_reference_id"
					:
				Element:span
					"sub1"
					,
				Element:span
					"current_billing_cycle"
					: 0,
				Element:span
					"number_of_billing_cycles"
					: 2,
				Element:span
					"trial_period_end"
					: null,
				Element:span
					"max_amount"
					: 10000,
				Element:span
					"tax_percent"
					: 0,
				Element:span
					"activated_on"
					:
				Element:span
					"2016-12-12T13:57:25Z"
					,
				Element:span
					"current_period_start"
					: null,
				Element:span
					"current_period_end"
					: null,
				Element:span
					"date_created"
					:
				Element:span
					"2016-12-12T13:57:25Z"
					,
				Element:span
					"last_updated"
					:
				Element:span
					"2016-12-12T13:58:41Z"
					,
				Element:span
					"gateway"
					:
				Element:span
					"DUMMY"
					,
				Element:span
					"payment_source"
					:
				Element:span
					"8825bc1d-993f-4f65-94b3-24048db1f239"
					,
				Element:span
					"validation_url"
					:
				Element:span
					"https://api.juspay.in/subscriptions/sub_y8emhyhklyqni681/validate-payment-source"
					,
				Element:span
					"return_url"
					:
				Element:span
					"https://merchant-return-url.com/subscription"
					,
				Element:span
					"source_validated"
					:
				Element:span
					false
					,
				Element:span
					"source_validation_required"
					:
				Element:span
					false
				Element:span
					}
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
			Node:
			(type) c
			(layer)1
				Element:h4
					Response Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Field
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
					String
				Element:td
					Subscription ID generated by JUSPAY.
				Element:tr
				Element:td
					object
				Element:td
					String
				Element:td
					Type of the Juspay Entity, Object type is Subscription here.
				Element:tr
				Element:td
					object_reference_id
				Element:td
					String
				Element:td
					Subscription ID defined by you.
				Element:tr
				Element:td
					state
				Element:td
					String
				Element:td
					State of subscription.
				Element:tr
				Element:td
					start_date
				Element:td
					String
				Element:td
					Starting Date of the Subscription.
				Element:tr
				Element:td
					end_date
				Element:td
					String
				Element:td
					Ending date of the subscription. No more debits will happen after this date.
				Element:tr
				Element:td
					plan
				Element:td
					Object
				Element:td
					The plan details specified for this subscription. Check the
				Element:code
					/plans
					api for further details.
				Element:tr
				Element:td
					quantity
				Element:td
					String
				Element:td
					Quantity of objects involved in the bill.
				Element:tr
				Element:td
					current_billing_cycle
				Element:td
					String
				Element:td
					The current billing cycle this subscription process is in.
				Element:tr
				Element:td
					number_of_billing_cycles
				Element:td
					String
				Element:td
					The total no of billing cycles in this subscription.
				Element:tr
				Element:td
					trial_period_end
				Element:td
					String
				Element:td
					The end of the trial period.
				Element:tr
				Element:td
					max_amount
				Element:td
					String
				Element:td
					Maximum amount defined for a single recurring transaction.
				Element:tr
				Element:td
					activated_on
				Element:td
					String
				Element:td
					The date of the plan activation.
				Element:tr
				Element:td
					date_created
				Element:td
					String
				Element:td
					Date of plan creation.
				Element:tr
				Element:td
					last_updated
				Element:td
					String
				Element:td
					Last Updated time of the subscription.
				Element:tr
				Element:td
					gateway
				Element:td
					String
				Element:td
					Gateway used for the transactions.
				Element:tr
				Element:td
					payment_source
				Element:br
				Element:td
					String
				Element:td
					A valid card token used for the transactions.
				Element:tr
				Element:td
					validation_url
				Element:td
					String
				Element:td
					The customer has to be redirected to this url once to perform authentication for the deferred debit transactions, if source_validation_required was specified as true during creation.
				Element:tr
				Element:td
					return_url
				Element:td
					String
				Element:td
					The return url to which the customer will be redirected to after the authorisation of the validation_url occurs. Please use the get subscription api calls to know the status of the subscription.
				Element:tr
				Element:td
					source_validated
				Element:td
					Boolean
				Element:td
					Indicates whether the authorisation has been already performed for the given payment source.
				Element:tr
				Element:td
					source_validation_required
				Element:td
					Boolean
				Element:td
					Indicates whether authentication is required for the given payment source. The value was specified by you during plan creation.Use this as a decision flag to redirect the customer to the validation url.
			Node:
			(type) c
			(layer)1
				Element:h2
					Get subscription
			Node:
			(type) c
			(layer)1
				Element:p
					This will return subscription entity for given identifier. It will also return list of payments associated with the subsciption.
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Definition
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					GET https://api.juspay.in/subscription/:subscription_id
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example Request
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl https://api.juspay.in/subscriptions/sub_y8emhyhklyqni681
				Element:span
					\
					-u api_key:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
			Node:
			(type) c
			(layer)1
				Element:h4
					URL Embedded Parameter
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Field
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					subscription_id
				Element:br
				Element:code
					Required
				Element:td
					String
				Element:td
					Use the ID that is generated by JUSPAY during subscription creation. You may also send the value that you sent in
				Element:code
					object_reference_id
					at the time of creating the subscription.
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example Response
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					"id"
					:
				Element:span
					"sub_y8emhyhklyqni681"
					,
				Element:span
					"object"
					:
				Element:span
					"subscription"
					,
				Element:span
					"state"
					:
				Element:span
					"CREATED"
					,
				Element:span
					"start_date"
					:
				Element:span
					"2016-12-11T18:30:00Z"
					,
				Element:span
					"end_date"
					:
				Element:span
					"2016-12-31T18:30:00Z"
					,
				Element:span
					"plan"
					:
				Element:span
					{
				Element:span
					"id"
					:
				Element:span
					"plan_hfja9v8w2gevjur0"
					,
				Element:span
					"object"
					:
				Element:span
					"plan"
					,
				Element:span
					"period"
					:
				Element:span
					"DAY"
					,
				Element:span
					"period_unit"
					: 10,
				Element:span
					"name"
					:
				Element:span
					"Plan_5"
					,
				Element:span
					"description"
					:
				Element:span
					"Test plan"
					,
				Element:span
					"currency"
					:
				Element:span
					"INR"
					,
				Element:span
					"amount"
					: 3000,
				Element:span
					"amount_type"
					:
				Element:span
					"VARIABLE"
					,
				Element:span
					"created"
					:
				Element:span
					"2016-12-12T13:10:59Z"
					,
				Element:span
					"updated"
					:
				Element:span
					"2016-12-12T13:10:59Z"
				Element:span
					}
					,
				Element:span
					"quantity"
					: 1,
				Element:span
					"object_reference_id"
					:
				Element:span
					"sub1"
					,
				Element:span
					"current_billing_cycle"
					: 0,
				Element:span
					"number_of_billing_cycles"
					: 2,
				Element:span
					"trial_period_end"
					: null,
				Element:span
					"max_amount"
					: 10000,
				Element:span
					"tax_percent"
					: 0,
				Element:span
					"activated_on"
					:
				Element:span
					"2016-12-12T13:57:25Z"
					,
				Element:span
					"current_period_start"
					: null,
				Element:span
					"current_period_end"
					: null,
				Element:span
					"date_created"
					:
				Element:span
					"2016-12-12T13:57:25Z"
					,
				Element:span
					"last_updated"
					:
				Element:span
					"2016-12-12T13:58:41Z"
					,
				Element:span
					"gateway"
					:
				Element:span
					"DUMMY"
					,
				Element:span
					"payment_source"
					:
				Element:span
					"8825bc1d-993f-4f65-94b3-24048db1f239"
					,
				Element:span
					"validation_url"
					:
				Element:span
					"https://api.juspay.in/subscriptions/sub_y8emhyhklyqni681/validate-payment-source"
					,
				Element:span
					"return_url"
					:
				Element:span
					"https://merchant-return-url.com/subscription"
					,
				Element:span
					"source_validated"
					:
				Element:span
					false
					,
				Element:span
					"source_validation_required"
					:
				Element:span
					false
				Element:span
					}
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
			Node:
			(type) c
			(layer)1
				Element:h4
					Response Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Field
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
					String
				Element:td
					Subscription ID generated by JUSPAY.
				Element:tr
				Element:td
					state
				Element:td
					String
				Element:td
					State of subscription.
				Element:tr
				Element:td
					start_date
				Element:td
					String
				Element:td
					Starting Date of the Subscription.
				Element:tr
				Element:td
					end_date
				Element:td
					String
				Element:td
					Ending date of the subscription. No more debits will happen after this date
				Element:tr
				Element:td
					plan
				Element:td
					Object
				Element:td
					The plan details specified for this subscription. Check the
				Element:code
					/plans/
					api for further details.
				Element:tr
				Element:td
					quantity
				Element:td
					String
				Element:td
					Quantity of objects involved in the bill.
				Element:tr
				Element:td
					object_reference_id
				Element:td
					String
				Element:td
					Subscription ID defined by you.
				Element:tr
				Element:td
					current_billing_cycle
				Element:td
					String
				Element:td
					The current billing cycle this subscription process is in.
				Element:tr
				Element:td
					number_of_billing_cycles
				Element:td
					String
				Element:td
					The total no of billing cycles in this subscription.
				Element:tr
				Element:td
					trial_period_end
				Element:td
					String
				Element:td
					The end of the trial period.
				Element:tr
				Element:td
					max_amount
				Element:td
					String
				Element:td
					Maximum amount defined for a single recurring transaction.
				Element:tr
				Element:td
					activated_on
				Element:td
					String
				Element:td
					The date of the plan activation.
				Element:tr
				Element:td
					date_created
				Element:td
					String
				Element:td
					Date of plan creation.
				Element:tr
				Element:td
					last_updated
				Element:td
					String
				Element:td
					Last Updated time of the subscription.
				Element:tr
				Element:td
					gateway
				Element:td
					String
				Element:td
					Gateway used for the transactions.
				Element:tr
				Element:td
					payment_source
				Element:br
				Element:td
					String
				Element:td
					A valid card token used for the transactions.
				Element:tr
				Element:td
					validation_url
				Element:td
					String
				Element:td
					The customer has to be redirected to this url once to perform authorization for the deferred debit transactions.
				Element:tr
				Element:td
					return_url
				Element:td
					String
				Element:td
					The return url to which the customer will be redirected to after the authorisation of the validation_url occurs.
				Element:tr
				Element:td
					source_validated
				Element:td
					Boolean
				Element:td
					Indicates whether the authorisation has been already performed for the given payment source.
				Element:tr
				Element:td
					source_validation_required
				Element:td
					Boolean
				Element:td
					Indicates whether authorisation is required for the given payment source. Use this to redirect the customer to the validation url.
			Node:
			(type) c
			(layer)1
				Element:h2
					Get Invoice
			Node:
			(type) c
			(layer)1
				Element:p
					Invoices are generated whenever a scheduled transaction happens during the billing cycle. You can use this api to view the invoices generated for a particular subscription.
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Definition
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					GET https://api.juspay.in/subscriptions/:subscription_id/invoices
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example Request
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl https://api.juspay.in/subscriptions/tdne2rcd8dlxkeug/invoices
				Element:span
					\
					-u api_key:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
			Node:
			(type) c
			(layer)1
				Element:h4
					URL Embedded Parameter
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Field
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					subscription_id
				Element:br
				Element:code
					Required
				Element:td
					String
				Element:td
					Use the ID that is generated by JUSPAY during subscription creation.
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example Response
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
					"object"
					:
				Element:span
					"list"
					,
				Element:span
					"list"
					:
				Element:span
					[
				Element:span
					{
				Element:span
					"id"
					:
				Element:span
					"tdne2rcd8dlxkeug"
					,
				Element:span
					"object"
					:
				Element:span
					"invoice"
					,
				Element:span
					"amount_due"
					: 3000,
				Element:span
					"attempted"
					:
				Element:span
					false
					,
				Element:span
					"currency"
					:
				Element:span
					"INR"
					,
				Element:span
					"tax"
					: 0,
				Element:span
					"subtotal"
					: 3000,
				Element:span
					"date_created"
					:
				Element:span
					"2016-12-16T14:34:30Z"
					,
				Element:span
					"last_updated"
					:
				Element:span
					"2016-12-16T14:34:30Z"
					,
				Element:span
					"metadata"
					: null,
				Element:span
					"tax_percent"
					: 0,
				Element:span
					"paid"
					:
				Element:span
					false
					,
				Element:span
					"attempts_count"
					: 0,
				Element:span
					"subscription"
					:
				Element:span
					{
				Element:span
					"id"
					:
				Element:span
					"sub_kg71wnm2qzfv3sq1"
					,
				Element:span
					"object"
					:
				Element:span
					"subscription"
					,
				Element:span
					"state"
					:
				Element:span
					"ACTIVE"
					,
				Element:span
					"start_date"
					:
				Element:span
					"2016-12-14T18:30:00Z"
					,
				Element:span
					"end_date"
					:
				Element:span
					"2016-12-29T18:30:00Z"
					,
				Element:span
					"plan"
					:
				Element:span
					{
				Element:span
					"id"
					:
				Element:span
					"plan_khxheoxq8yw4ondw"
					,
				Element:span
					"object"
					:
				Element:span
					"plan"
					,
				Element:span
					"period"
					:
				Element:span
					"DAY"
					,
				Element:span
					"period_unit"
					: 1,
				Element:span
					"name"
					:
				Element:span
					"Plan_5"
					,
				Element:span
					"description"
					:
				Element:span
					"Test plan"
					,
				Element:span
					"currency"
					:
				Element:span
					"INR"
					,
				Element:span
					"amount"
					: 3000,
				Element:span
					"amount_type"
					:
				Element:span
					"FIXED"
					,
				Element:span
					"created"
					:
				Element:span
					"2016-12-14T15:06:03Z"
					,
				Element:span
					"updated"
					:
				Element:span
					"2016-12-14T15:06:03Z"
				Element:span
					}
					,
				Element:span
					"quantity"
					: 1,
				Element:span
					"object_reference_id"
					:
				Element:span
					"sub1"
					,
				Element:span
					"current_billing_cycle"
					: 2,
				Element:span
					"number_of_billing_cycles"
					: 15,
				Element:span
					"trial_period_end"
					: null,
				Element:span
					"max_amount"
					: 10000,
				Element:span
					"tax_percent"
					: 0,
				Element:span
					"activated_on"
					:
				Element:span
					"2016-12-14T18:30:00Z"
					,
				Element:span
					"current_period_start"
					:
				Element:span
					"2016-12-15T18:30:00Z"
					,
				Element:span
					"current_period_end"
					:
				Element:span
					"2016-12-16T18:30:00Z"
					,
				Element:span
					"date_created"
					:
				Element:span
					"2016-12-15T15:06:58Z"
					,
				Element:span
					"last_updated"
					:
				Element:span
					"2016-12-16T14:34:30Z"
					,
				Element:span
					"gateway"
					:
				Element:span
					"DUMMY"
					,
				Element:span
					"payment_source"
					: null,
				Element:span
					"validation_url"
					:
				Element:span
					"https://api.juspay.in/subscriptions/sub_kg71wnm2qzfv3sq1/validate-payment-source"
					,
				Element:span
					"return_url"
					: null,
				Element:span
					"source_validated"
					:
				Element:span
					false
					,
				Element:span
					"source_validation_required"
					:
				Element:span
					false
				Element:span
					}
					,
				Element:span
					"customer"
					:
				Element:span
					"cst_9uiehncjizlfcnps"
					,
				Element:span
					"period_start_date"
					:
				Element:span
					"2016-12-14T18:30:00Z"
					,
				Element:span
					"period_end_date"
					:
				Element:span
					"2016-12-15T18:30:00Z"
					,
				Element:span
					"billing_cycle"
					: 1
				Element:span
					}
				Element:span
					]
					,
				Element:span
					"count"
					: 1,
				Element:span
					"offset"
					: 0,
				Element:span
					"total"
					: 1
				Element:span
					}
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
			Node:
			(type) c
			(layer)1
				Element:h4
					Response Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Field
				Element:th
					Type
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
					String
				Element:td
					Invoice ID generated by Juspay.
				Element:tr
				Element:td
					object
				Element:td
					String
				Element:td
					Type of the Juspay entity, Object type is invoice here.
				Element:tr
				Element:td
					amount_due
				Element:td
					Double
				Element:td
					Total amount of money charged for that transaction, inclusive of tax.
				Element:tr
				Element:td
					attempted
				Element:td
					boolean
				Element:td
					Indicates whether the transaction has been attempted.
				Element:tr
				Element:td
					currency
				Element:td
					String
				Element:td
					Unit of currency.
				Element:tr
				Element:td
					tax
				Element:td
					Double
				Element:td
					Total amount of money charged as tax.
				Element:tr
				Element:td
					subtotal
				Element:td
					Double
				Element:td
					Amount of money charged without tax.
				Element:tr
				Element:td
					date_created
				Element:td
					String
				Element:td
					Date of the invoice.
				Element:tr
				Element:td
					last_updated
				Element:td
					String
				Element:td
					Last updated time of the invoice.
				Element:tr
				Element:td
					tax_percent
				Element:td
					Double
				Element:td
					Percentage of amount as tax charged for this transaction.
				Element:tr
				Element:td
					paid
				Element:td
					boolean
				Element:td
					Represents the status of the transaction.
				Element:tr
				Element:td
					attempts_count
				Element:td
					Double
				Element:td
					Indicates the no of attempts made to authorize this transaction.
				Element:tr
				Element:td
					subscription
				Element:td
					Object
				Element:td
					The Juspay recurring payment subscription entity.
				Element:tr
				Element:td
					customer
				Element:td
					String
				Element:td
					The id of the Juspay customer entity object associated with this transaction.
				Element:tr
				Element:td
					period_start_date
				Element:td
					String
				Element:td
					The start date of the billing cycle which was invoiced.
				Element:tr
				Element:td
					period_end_date
				Element:td
					String
				Element:td
					The end date of the billing cycle which was invoiced.
				Element:tr
				Element:td
					billing_cycle
				Element:td
					String
				Element:td
					The present iteration number of the billing cycle.
			Node:
			(type) c
			(layer)1
				Element:a
					curl
			Node:
			(type) c
			(layer)1
				Element:a
					python
			Node:
			(type) c
			(layer)1
				Element:a
					ruby
			Node:
			(type) c
			(layer)1
				Element:a
					php
			Node:
			(type) c
			(layer)1
				Element:a
					java
