Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					Retrieving Data
			Node:
			(type) c
			(layer)1
				Element:span
				Element:strong
					Date Updated:
					June 23rd 2014
			Node:
			(type) c
			(layer)1
				Element:p
					So just how do I get the data out of this AccountRight Live API? Can I filter data?
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
											HTTP GET
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
											Let me GET the content
									Node:
									(type) c
									(layer)3
										Element:p
											Use the HTTP GET method to retrieve data from the database. This includes both lists and individual records. For example, you would use the GET method to retrieve a list of sales made in a particular month, or the contact details of a customer. By default, successful API responses are returned in JSON format.
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
											Filtering
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
											OData-supported query string filters
									Node:
									(type) c
									(layer)3
										Element:p
											The Open Data Protocol (OData) is a data access protocol which uses the REST model and simple HTTP requests to provide standard
										Element:a
											CRUD
											access to a data source through a website. For more information, including an introduction to OData, see
										Element:a
											here
											.
									Node:
									(type) c
									(layer)3
										Element:p
											The AccountRight API supports four query options:
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:a
											$orderby
											- Order results in ascending or descending order, by a specified field.
										Element:li
										Element:a
											$top
											- Retrieve the first
										Element:strong
											x
											records in a list.
										Element:a
										Element:li
										Element:a
											$skip
											- Retrieve all records in a list, except for the first
										Element:strong
											x
											records.
										Element:a
										Element:li
										Element:a
											$filter
											- Retrieve all records matching a specified expression.
									Node:
									(type) c
									(layer)3
										Element:p
											See the sections below for details about using these query options with the AccountRight API, or see
										Element:a
											here
											for more information.
									Node:
									(type) c
									(layer)3
										Element:a
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
											Pagination
									Node:
									(type) c
									(layer)3
										Element:p
										Element:strong
											Paging:
											a common requirement for applications is to expose partial results from larger sets of data i.e. transaction based collections like
										Element:strong
											JournalTransaction
											and
										Element:strong
											AccountRegister
											.
									Node:
									(type) c
									(layer)3
										Element:p
											The AccountRight Live API default page size is set to
										Element:strong
											400
											however a maximum of
										Element:strong
											1000
											results can be set and returned per page. To do so use the
										Element:strong
											$top
											filter like so in your call to return page 1 of 1000 records
										Element:code
											/GeneralLedger/JournalTransaction/?$top=1000
									Node:
									(type) c
									(layer)3
										Element:p
											To make pagination easier for you, the JSON response information returned provides paging parameters, including a URI
										Element:code
											NextPageLink
											. Calling this URI allows you to retrieve the next set of records. This URI will show you the usage for
										Element:strong
											$top
											and
										Element:strong
											$skip
											parameters.
									Node:
									(type) c
									(layer)3
										Element:p
											We highly recommend that when used
										Element:strong
											$skip
											is a multiple of
										Element:strong
											$top
											for example
										Element:code
											/GeneralLedger/JournalTransaction/?$top=500&$skip=500
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
											$orderby
									Node:
									(type) c
									(layer)3
										Element:p
										Element:a
									Node:
									(type) c
									(layer)3
										Element:p
											Use the
										Element:strong
											$orderby
											filter to specify which field you want lists of items to be ordered by. For example, you could choose to order a list of accounts by AccountName or by AccountNumber, or a list of tax codes by TaxCodeType or Rate.
									Node:
									(type) c
									(layer)3
										Element:p
											By default, results are listed in ascending order, by the chosen field. You can specify whether to sort results in ascending or descending order using the 'asc' and 'desc' keywords.
									Node:
									(type) c
									(layer)3
										Element:p
											Use the syntax shown in the following examples to retrieve the results in the order you want.
									Node:
									(type) c
									(layer)3
																		Node:
																		(type) c
																		(layer)6
																			Element:h6
																				Ascending order
																		Node:
																		(type) c
																		(layer)6
																			Element:p
																				The default syntax. This query will return the entire list of Accounts, sorted in
																			Element:em
																				ascending
																				order by the Account Number:
																		Node:
																		(type) c
																		(layer)6
																			Element:br
																		Node:
																		(type) c
																		(layer)6
																			Element:pre
																			Element:code
																			Element:span
																				{domain}
																				/
																			Element:span
																				{cf_guid}
																				/GeneralLedger/Account?$orderby=Number
																		Node:
																		(type) c
																		(layer)6
																			Element:br
																		Node:
																		(type) c
																		(layer)6
																			Element:p
																				You can also use the 'asc' keyword to specify that the results should be returned in ascending order. This will return the same result as the above query:
																		Node:
																		(type) c
																		(layer)6
																			Element:br
																		Node:
																		(type) c
																		(layer)6
																			Element:pre
																			Element:code
																			Element:span
																				{domain}
																				/
																			Element:span
																				{cf_guid}
																				/GeneralLedger/Account?$orderby=Number asc
																		Node:
																		(type) c
																		(layer)6
																			Element:br
									Node:
									(type) c
									(layer)3
																		Node:
																		(type) c
																		(layer)6
																			Element:h6
																				Descending order
																		Node:
																		(type) c
																		(layer)6
																			Element:p
																				This query uses the 'desc' keyword to return the entire list of Accounts, sorted in
																			Element:em
																				descending
																				order by Account Number:
																		Node:
																		(type) c
																		(layer)6
																			Element:br
																		Node:
																		(type) c
																		(layer)6
																			Element:pre
																			Element:code
																			Element:span
																				{domain}
																				/
																			Element:span
																				{cf_guid}
																				/GeneralLedger/Account?$orderby=Number desc
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
											$top
									Node:
									(type) c
									(layer)3
										Element:p
										Element:a
									Node:
									(type) c
									(layer)3
										Element:p
											Use the
										Element:strong
											$top
											filter to select the first
										Element:strong
											x
											items in a list, where
										Element:strong
											x
											is a positive integer specified in the query (ie.
										Element:strong
											$top=x
											). If
										Element:strong
											x
											is less than 0, the URI is not valid.
									Node:
									(type) c
									(layer)3
																		Node:
																		(type) c
																		(layer)6
																			Element:h6
																				Examples
																		Node:
																		(type) c
																		(layer)6
																			Element:p
																				This query retrieves the first 5 sale invoices from a collection of sales:
																		Node:
																		(type) c
																		(layer)6
																			Element:br
																		Node:
																		(type) c
																		(layer)6
																			Element:pre
																			Element:code
																			Element:span
																				{domain}
																				/
																			Element:span
																				{cf_guid}
																				/Sale/Invoice/?$top=5
																		Node:
																		(type) c
																		(layer)6
																			Element:br
																		Node:
																		(type) c
																		(layer)6
																			Element:p
																				The
																			Element:strong
																				$top
																				filter can be used in combination with other filters, such as
																			Element:strong
																				$orderby
																				(
																			Element:a
																				see above
																				). This query retrieves the first 5 sale invoices from a list of sales sorted by
																			Element:strong
																				Date
																				:
																		Node:
																		(type) c
																		(layer)6
																			Element:br
																		Node:
																		(type) c
																		(layer)6
																			Element:pre
																			Element:code
																			Element:span
																				{domain}
																				/
																			Element:span
																				{cf_guid}
																				/Sale/Invoice/?$top=5&&orderby=Date
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
											$skip
									Node:
									(type) c
									(layer)3
										Element:p
										Element:a
									Node:
									(type) c
									(layer)3
										Element:p
											Use the
										Element:strong
											$skip
											query to skip the first
										Element:strong
											x
											list entries and return all remaining entries, starting from entry
										Element:strong
											x+1
											. The value of
										Element:strong
											x
											must be a positive integer specified in the query (ie.
										Element:strong
											$skip=x
											). If x is less than 0, the URI is not valid.
									Node:
									(type) c
									(layer)3
																		Node:
																		(type) c
																		(layer)6
																			Element:h6
																				Examples
																		Node:
																		(type) c
																		(layer)6
																			Element:p
																				This query returns all customers starting from the fourth entry in a list of customers:
																		Node:
																		(type) c
																		(layer)6
																			Element:br
																		Node:
																		(type) c
																		(layer)6
																			Element:pre
																			Element:code
																			Element:span
																				{domain}
																				/
																			Element:span
																				{cf_guid}
																				/Contact/Customer/?$skip=4
																		Node:
																		(type) c
																		(layer)6
																			Element:br
																		Node:
																		(type) c
																		(layer)6
																			Element:p
																				The
																			Element:strong
																				$skip
																				filter can be used in combination with other filters, such as
																			Element:strong
																				$orderby
																				(
																			Element:a
																				see above
																				). This query returns all customers, starting from the fourth entry in a list of customers sorted by ABN:
																		Node:
																		(type) c
																		(layer)6
																			Element:br
																		Node:
																		(type) c
																		(layer)6
																			Element:pre
																			Element:code
																			Element:span
																				{domain}
																				/
																			Element:span
																				{cf_guid}
																				/Contact/Customer/?$skip=4&$orderby=ABN
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
											$filter
									Node:
									(type) c
									(layer)3
										Element:p
										Element:a
									Node:
									(type) c
									(layer)3
										Element:p
											Use the
										Element:strong
											$filter
											query to select only entries that match an expression specified in the query. Available expressions are
										Element:strong
											Eq
											(equal to) and
										Element:strong
											Gt
											(greater than).
									Node:
									(type) c
									(layer)3
										Element:p
											Expressions can include references to both properties and literal values. Literal values can include strings (enclosed in single quotes), numbers, boolean values (true or false), or any of the additional literal representations. For a full list of supported properties and literals, along with operators and functions, see
										Element:a
											here
											.
									Node:
									(type) c
									(layer)3
																		Node:
																		(type) c
																		(layer)6
																			Element:h6
																				eq (equal to)
																		Node:
																		(type) c
																		(layer)6
																			Element:p
																				The
																			Element:strong
																				Eq
																				expression returns all records where the specified property is equal to a specified literal value.
																		Node:
																		(type) c
																		(layer)6
																			Element:p
																				This query returns contacts where the Type is equal to supplier or customer:
																		Node:
																		(type) c
																		(layer)6
																			Element:br
																		Node:
																		(type) c
																		(layer)6
																			Element:pre
																			Element:code
																			Element:span
																				{domain}
																				/
																			Element:span
																				{cf_guid}
																				/Contact/?$filter=Type eq 'Customer' or Type eq 'Supplier'
																		Node:
																		(type) c
																		(layer)6
																			Element:br
																		Node:
																		(type) c
																		(layer)6
																			Element:p
																				The
																			Element:strong
																				Eq
																				expression can be used in combination with other filters, such as
																			Element:strong
																				$orderby
																				(
																			Element:a
																				see above
																				). This query returns a set of contacts, sorted by DisplayID, where the Type is equal to Personal and Employee:
																		Node:
																		(type) c
																		(layer)6
																			Element:br
																		Node:
																		(type) c
																		(layer)6
																			Element:pre
																			Element:code
																			Element:span
																				{domain}
																				/
																			Element:span
																				{cf_guid}
																				/Contact/?$filter=Type eq 'Personal' or Type eq 'Employee'&$orderby=DisplayID
																		Node:
																		(type) c
																		(layer)6
																			Element:br
									Node:
									(type) c
									(layer)3
																		Node:
																		(type) c
																		(layer)6
																			Element:h6
																				gt (greater than)
																		Node:
																		(type) c
																		(layer)6
																			Element:p
																				The Gt expression returns all records where the specified property is greater than a specified literal value.
																		Node:
																		(type) c
																		(layer)6
																			Element:p
																				This query returns a set of accounts where the Account DisplayID is greater than 5-0000:
																		Node:
																		(type) c
																		(layer)6
																			Element:br
																		Node:
																		(type) c
																		(layer)6
																			Element:pre
																			Element:code
																			Element:span
																				{domain}
																				/
																			Element:span
																				{cf_guid}
																				/GeneralLedger/Account?$filter=DisplayID gt '5-0000':
																		Node:
																		(type) c
																		(layer)6
																			Element:br
																		Node:
																		(type) c
																		(layer)6
																			Element:p
																				The
																			Element:strong
																				Gt
																				expression can be used in combination with other filters, such as
																			Element:strong
																				$orderby
																				(
																			Element:a
																				see above
																				). This query returns a set of accounts, sorted by Name, where the DisplayID is greater than '4-0000':
																		Node:
																		(type) c
																		(layer)6
																			Element:br
																		Node:
																		(type) c
																		(layer)6
																			Element:pre
																			Element:code
																			Element:span
																				{domain}
																				/
																			Element:span
																				{cf_guid}
																				/GeneralLedger/Account/?$filter=DisplayID gt '4-0000'&$orderby=Name
																		Node:
																		(type) c
																		(layer)6
																			Element:br
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
											any and all operators
									Node:
									(type) c
									(layer)3
										Element:p
											Support for 'any' and 'all' operators is now available with OData v3 protocols
										Element:a
											click here
											for more information.
									Node:
									(type) c
									(layer)3
										Element:p
											The following query returns a customer contact where an email address is equal to 'Davis@yahoo.com.au' from within an array of contact addresses.
									Node:
									(type) c
									(layer)3
										Element:br
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
										Element:span
											{domain}
											/
										Element:span
											{cf_guid}
											/Contact/Customer/?$filter=Addresses/any(x: x/Email eq 'Davis@yahoo.com.au')
									Node:
									(type) c
									(layer)3
										Element:br
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
											Primitive Data Types
									Node:
									(type) c
									(layer)3
										Element:p
											To further extend the
										Element:strong
											$filter
											query option, primitive data types such as DateTime can be implemented, for more information on how to represent this see
										Element:a
											here
									Node:
									(type) c
									(layer)3
										Element:p
											This query returns a set of transactions where the DateOccurred is greater than or equal to 01/4/2013 and less than or equal to 30/04/2013:
									Node:
									(type) c
									(layer)3
										Element:br
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
										Element:span
											{domain}
											/
										Element:span
											{cf_guid}
											/GeneralLedger/JournalTransaction/?$filter=DateOccurred ge datetime'2013-04-01' and DateOccurred le datetime'2013-04-30'
									Node:
									(type) c
									(layer)3
										Element:p
										Element:strong
											Note:
											the elements
										Element:span
											{domain}
											/
										Element:span
											{cf_guid}
											shown in the examples above change depending on your environment and the company file (cf_guid) you are using
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
											More Examples
									Node:
									(type) c
									(layer)3
										Element:p
											There is a lot more that you can do using oData to filter the data in the MYOB AccountRight API. From finding transactions for a specific month, to items that contain a specific string. You can do matches on items that start with a specific string or do partial match filters. To learn a little more we've written some blog posts.
									Node:
									(type) c
									(layer)3
										Element:p
											•
										Element:a
											oData $filter tips & tricks
										Element:br
											•
										Element:a
											Digging into oData with MYOBapi
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
											API
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:a
											Express your interest
										Element:li
										Element:a
											MYOB AccountRight API
										Element:li
										Element:a
											MYOB Essentials API
										Element:li
										Element:a
											MYOB EXO API
										Element:li
										Element:a
											MYOBapi Blog
										Element:li
										Element:a
											Google+
										Element:li
										Element:a
											MYOB Corporate
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
											Support
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:a
											AccountRight API Forums
										Element:li
										Element:a
											EXO API Forums
										Element:li
										Element:a
											MYOB Advanced Developer Forums
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
											Social
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:a
											MYOBapi on Twitter
										Element:li
										Element:a
											MYOB on Twitter
										Element:li
										Element:a
											MYOBapi on Instagram
										Element:li
										Element:a
											MYOB on GitHub
										Element:li
										Element:a
											Google+
									Node:
									(type) c
									(layer)3
										Element:img
									Node:
									(type) c
									(layer)3
										Element:p
											Copyright © 2015 MYOB Technology Pty Ltd
