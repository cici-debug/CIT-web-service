Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					Introduction
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					API Endpoint
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					https://api.coinbase.com/v2/
			Node:
			(type) c
			(layer)1
				Element:p
					Coinbase provides a simple and powerful REST API to integrate bitcoin and ethereum payments into your business or application.
			Node:
			(type) c
			(layer)1
				Element:p
					This API reference provides information on available endpoints and how to interact with it. To read more about the API, visit our
				Element:a
					API documentation
					.
			Node:
			(type) c
			(layer)1
				Element:p
				Element:em
				Element:strong
					Note:
					If you’re still using legacy Coinbase API (v1), you should access relevant
				Element:a
					API reference
					,
				Element:a
					Wallet API
					and
				Element:a
					Merchant API
					documentation.
			Node:
			(type) h1
			(layer)1
				Element:h1
					Authentication
			Node:
			(type) c
			(layer)1
				Element:p
					This API support two modes of authentication:
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:a
					API key
					- Useful to access your own account
				Element:li
				Element:a
					OAuth2 (Coinbase Connect)
					- Used to build applications for Coinbase users
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								OAuth2 (Coinbase Connect)
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								curl https://api.coinbase.com/v2/user
							Element:span
								\
								-H
							Element:span
								"Authorization: Bearer abd90df5f27a7b170cd775abf89d632b350b7c1c9d53e08b340cd9832ce52c2c"
						Node:
						(type) c
						(layer)2
							Element:p
								OAuth2 is recommended when you’re creating an application for others on top of Coinbase platform. This authentication provides a secure and easy to use authentication flow for users.
						Node:
						(type) c
						(layer)2
							Element:p
								OAuth2 requests must be authenticated with a valid access token passed as bearer token. To use the bearer token, construct a normal HTTPS request and include an
							Element:code
								Authorization
								header with the value of Bearer. Signing is not required.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:a
								Read more
								about OAuth2 authentication.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								API Key
						Node:
						(type) c
						(layer)2
							Element:p
								API key is recommend if you only need to access your own account. All API key requests must be signed and contain the following headers:
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:code
								CB-ACCESS-KEY
								The api key as a string
							Element:li
							Element:code
								CB-ACCESS-SIGN
								The user generated message signature (see below)
							Element:li
							Element:code
								CB-ACCESS-TIMESTAMP
								A timestamp for your request
						Node:
						(type) c
						(layer)2
							Element:p
								All request bodies should have content type
							Element:code
								application/json
								and be valid JSON.
						Node:
						(type) c
						(layer)2
							Element:p
								The
							Element:code
								CB-ACCESS-SIGN
								header is generated by creating a sha256 HMAC using the secret key on the prehash string
							Element:code
								timestamp + method + requestPath + body
								(where + represents string concatenation). The timestamp value is the same as the
							Element:code
								CB-ACCESS-TIMESTAMP
								header.
						Node:
						(type) c
						(layer)2
							Element:p
								The
							Element:code
								body
								is the request body string or omitted if there is no request body (typically for GET requests).
						Node:
						(type) c
						(layer)2
							Element:p
								The
							Element:code
								method
								should be UPPER CASE.
						Node:
						(type) c
						(layer)2
							Element:p
								The
							Element:code
								CB-ACCESS-TIMESTAMP
								header MUST be number of seconds since
							Element:a
								Unix Epoch
								.
						Node:
						(type) c
						(layer)2
							Element:p
								Your timestamp must be within 30 seconds of the api service time or your request will be considered expired and rejected. We recommend using the
							Element:a
								time
								endpoint to query for the API server time if you believe there many be time skew between your server and the API servers.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:a
								Read more
								about API keys.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:strong
								Note
								: You should never request API keys or secrets from other Coinbase users. Please prefer OAuth2.
			Node:
			(type) h1
			(layer)1
				Element:h1
					Interacting with the API
			Node:
			(type) c
			(layer)1
				Element:h2
					Status codes
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:code
					200 OK
					Successful request
				Element:li
				Element:code
					201 Created
					New object saved
				Element:li
				Element:code
					204 No content
					Object deleted
				Element:li
				Element:code
					400 Bad Request
					Returns JSON with the error message
				Element:li
				Element:code
					401 Unauthorized
					Couldn’t authenticate your request
				Element:li
				Element:code
					402 2FA Token required
					Re-try request with user’s 2FA token as
				Element:code
					CB-2FA-Token
					header
				Element:li
				Element:code
					403 Invalid scope
					User hasn’t authorized necessary scope
				Element:li
				Element:code
					404 Not Found
					No such object
				Element:li
				Element:code
					429 Too Many Requests
					Your connection is being rate limited
				Element:li
				Element:code
					500 Internal Server Error
					Something went wrong
				Element:li
				Element:code
					503 Service Unavailable
					Your connection is being throttled or the service is down for maintenance
			Node:
			(type) c
			(layer)1
				Element:h2
					Making requests
			Node:
			(type) c
			(layer)1
				Element:p
					As per RESTful design patterns, Coinbase API implements following HTTP verbs:
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:code
					GET
					- Read resources
				Element:li
				Element:code
					POST
					- Create new resources
				Element:li
				Element:code
					PUT
					- Modify existing resources
				Element:li
				Element:code
					DELETE
					- Remove resources
			Node:
			(type) c
			(layer)1
				Element:p
					When making requests, arguments can be passed as params, form data or JSON with correct
				Element:code
					Content-Type
					header.
			Node:
			(type) c
			(layer)1
				Element:p
					Most resources are bound to a specific account belonging to the authenticated user. As the user can control which accounts are accessible accounts for both API keys and OAuth applications (
				Element:em
					coming soon
					), you should make sure you have the access to right account with
				Element:code
					GET /v2/accounts/
					endpoint. Otherwise a
				Element:code
					404
					will be returned.
			Node:
			(type) c
			(layer)1
				Element:h2
					CORS
			Node:
			(type) c
			(layer)1
				Element:p
					Coinbase API v2 supports cross-origin HTTP requests which is commonly referred as
				Element:a
					CORS
					. This means that you can call API resources using Javascript from any browser. While this allows many interesting use cases, it’s important to remember that you should never expose private API keys to 3rd parties. CORS is mainly useful with unauthenticated endpoints (e.g. Bitcoin price information) and OAuth2 client side applications.
			Node:
			(type) c
			(layer)1
				Element:h2
					Localization
			Node:
			(type) c
			(layer)1
				Element:p
					Coinbase API supports localization for error messages and other strings. Localization is defined in each request with
				Element:code
					Accept-Language
					header. Accepted values are currently:
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:code
					de
					- Deutsch
				Element:li
				Element:code
					en
					- English (default)
				Element:li
				Element:code
					es
					- Español
				Element:li
				Element:code
					es-mx
					- Español - Méjico
				Element:li
				Element:code
					fr
					- Français
				Element:li
				Element:code
					id
					- bahasa Indonesia
				Element:li
				Element:code
					it
					- Italiano
				Element:li
				Element:code
					nl
					- Nederlands
				Element:li
				Element:code
					pt
					- Português
				Element:li
				Element:code
					pt-br
					- Português - Brazil
			Node:
			(type) c
			(layer)1
				Element:p
					Numbers, currency and datetime don’t rely on localization so they will always be returned in standard format.
			Node:
			(type) c
			(layer)1
				Element:h2
					Fields
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
											IDs and referencing other objects
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
										Element:span
											{
										Element:span
										Element:span
											"id"
										Element:span
											:
										Element:span
										Element:span
											"2bbf394c-193b-5b2a-9155-3b4732659ede"
										Element:span
											,
										Element:span
										Element:span
											...
										Element:span
										Element:span
											"resource"
										Element:span
											:
										Element:span
										Element:span
											"account"
										Element:span
											,
										Element:span
										Element:span
											"resource_path"
										Element:span
											:
										Element:span
										Element:span
											"/v2/accounts/2bbf394c-193b-5b2a-9155-3b4732659ede"
										Element:span
										Element:span
											}
										Element:span
									Node:
									(type) c
									(layer)3
										Element:p
											All resource IDs are represented in UUID format. Together with IDs, all resources have also a
										Element:code
											resource
											field which represents the resource type and
										Element:code
											resource_path
											for the location under
										Element:code
											api.coinbase.com
											. These values can be useful when building wrappers around the API or when linking to other resources.
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
											Money hash
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
										Element:span
											{
										Element:span
										Element:span
											"amount"
										Element:span
											:
										Element:span
										Element:span
											"39.59000000"
										Element:span
											,
										Element:span
										Element:span
											"currency"
										Element:span
											:
										Element:span
										Element:span
											"BTC"
										Element:span
										Element:span
											}
										Element:span
									Node:
									(type) c
									(layer)3
										Element:p
											Money values are represented by a hash object which contains
										Element:code
											amount
											and
										Element:code
											currency
											fields. Amount is always returned as a string which you should be careful when parsing to have correct decimal precision. Bitcoin and ethereum values will have 8 decimal points and fiat currencies will have two.
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
											Timestamps
									Node:
									(type) c
									(layer)3
										Element:p
											All timestamp are returned in ISO8601 format in UTC with fields ending in postfix
										Element:code
											_at
											. Example:
										Element:code
											"created_at": "2015-07-01T00:55:47Z"
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
											Enumerable values
									Node:
									(type) c
									(layer)3
										Element:p
											Some fields like
										Element:code
											type
											usually have a constant set of values. As Coinbase is actively growing and adding features, new values can be added or removed over time and you should take this into account when designing implementation. A good example is the
										Element:a
											Transaction resource
											which has multiple
										Element:code
											type
											values and new ones are added as new features are added to Coinbase.
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
											Lists
									Node:
									(type) c
									(layer)3
										Element:p
											Similar to enumerable values, list values can be added or removed over time. Instead of hardcoding for specific values, your implementation should be flexible enough to take these requirements into account.
			Node:
			(type) h1
			(layer)1
				Element:h1
					Scopes
			Node:
			(type) c
			(layer)1
				Element:p
					Both API key and OAuth2 authentication require that you obtain correct permissions (scopes) to access different API endpoints.
			Node:
			(type) c
			(layer)1
				Element:p
					All authenticated endpoints, except
				Element:code
					GET /user
					, require a specific scope to access them. Some endpoints might also have additional scopes for additional information or access. In general, permissions follow the
				Element:code
					service-name:resource:action
					pattern, where the service is
				Element:code
					wallet
					for the main Coinbase API.
			Node:
			(type) c
			(layer)1
				Element:p
					With OAuth2, scopes should be considered as grants: Users can select which scopes they grant access to for the application. The application might need to request new scopes over the lifecycle of the authorization. To see which permissions the user has granted, you can use
				Element:code
					GET /user/auth
					endpoint.
			Node:
			(type) c
			(layer)1
				Element:p
					As a general rule, you should only ask for scopes which your application needs and avoid asking for access to unnessary ones. Users more readily grant access to limited, clearly described scopes.
			Node:
			(type) h1
			(layer)1
				Element:h1
					Pagination
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl https://api.coinbase.com/v2/accounts
				Element:span
					\
					-H
				Element:span
					'Authorization: Bearer abd90df5f27a7b170cd775abf89d632b350b7c1c9d53e08b340cd9832ce52c2c'
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example response
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"pagination"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"ending_before"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"starting_after"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"limit"
				Element:span
					:
				Element:span
				Element:span
					25
				Element:span
					,
				Element:span
				Element:span
					"order"
				Element:span
					:
				Element:span
				Element:span
					"desc"
				Element:span
					,
				Element:span
				Element:span
					"previous_uri"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"next_uri"
				Element:span
					:
				Element:span
				Element:span
					"/v2/accounts?&limit=25&starting_after=5d5aed5f-b7c0-5585-a3dd-a7ed9ef0e414"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"data"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					...
				Element:span
				Element:span
					]
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					All
				Element:code
					GET
					endpoints which return an object list support cursor based pagination with pagination information inside a
				Element:code
					pagination
					object. This means that to get all objects, you need to paginate through the results by always using the
				Element:code
					id
					of the last resource in the list as a
				Element:code
					starting_after
					parameter for the next call. To make it easier, the API will contruct the next call into
				Element:code
					next_uri
					together with all the currently used pagination parameters. You know that you have paginated all the results when the response’s
				Element:code
					next_uri
					is empty. While using cursor based pagination might seem weird compared to many APIs it protects from the situation when the resulting object list changes during pagination (new resource gets added or removed).
			Node:
			(type) c
			(layer)1
				Element:p
					Default
				Element:code
					limit
					is set to 25 but values up to 100 are permitted. Due to permissions and access level control, the response list might in some cases return less objects than specified by the
				Element:code
					limit
					parameter. This is normal behaviour and should be expected.
			Node:
			(type) c
			(layer)1
				Element:p
					The result list is in descending order by default (newest item first) but it can be reversed by supplying
				Element:code
					order=asc
					instead.
			Node:
			(type) c
			(layer)1
				Element:h3
					Arguments
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
				Element:code
					limit
				Element:em
					optional
				Element:td
					Number of results per call. Accepted values: 0 - 100. Default 25
				Element:tr
				Element:td
				Element:code
					order
				Element:em
					optional
				Element:td
					Result order. Accepted values:
				Element:code
					desc
					(default),
				Element:code
					asc
				Element:tr
				Element:td
				Element:code
					starting_after
				Element:em
					optional
				Element:td
					A cursor for use in pagination.
				Element:code
					starting_after
					is an resource ID that defines your place in the list.
				Element:tr
				Element:td
				Element:code
					ending_before
				Element:em
					optional
				Element:td
					A cursor for use in pagination.
				Element:code
					ending_before
					is an resource ID that defines your place in the list.
			Node:
			(type) h1
			(layer)1
				Element:h1
					Errors
			Node:
			(type) c
			(layer)1
				Element:h2
					Error response
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Generic error response (4xx, 5xx)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"errors"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"not_found"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Not found"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					]
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Validation failed (400)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"errors"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"validation_error"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Please enter a valid email or bitcoin address"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					]
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Error with document link
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"errors"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"invalid_scope"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Invalid scope"
				Element:span
					,
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
				Element:span
					"http://developers.coinbase.com/api#permissions"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					]
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					All error messages will return both machine (
				Element:code
					id
					) and human readable (
				Element:code
					message
					) error message. All errors, except
				Element:code
					validation_error
					, return only one error. Some errors will also have an optional link to the documentation (
				Element:code
					url
					).
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					validation_error
					with status code
				Element:code
					400
					is returned when the validation of the resource fails on
				Element:code
					POST
					or
				Element:code
					PUT
					requests. Response contains
				Element:code
					errors
					field with a list of errors.
			Node:
			(type) c
			(layer)1
				Element:p
				Element:strong
					Important:
					Different error types (
				Element:code
					id
					) can be added and removed over time so you should make sure your application accepts new ones as well.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Error id
				Element:th
					Code
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
				Element:code
					two_factor_required
				Element:td
					402
				Element:td
					When sending money over 2fa limit
				Element:tr
				Element:td
				Element:code
					param_required
				Element:td
					400
				Element:td
					Missing parameter
				Element:tr
				Element:td
				Element:code
					validation_error
				Element:td
					400
				Element:td
					Unable to validate POST/PUT
				Element:tr
				Element:td
				Element:code
					invalid_request
				Element:td
					400
				Element:td
					Invalid request
				Element:tr
				Element:td
				Element:code
					personal_details_required
				Element:td
					400
				Element:td
					User’s personal detail required to complete this request
				Element:tr
				Element:td
				Element:code
					unverified_email
				Element:td
					400
				Element:td
					User has not verified their email
				Element:tr
				Element:td
				Element:code
					authentication_error
				Element:td
					401
				Element:td
					Invalid auth (generic)
				Element:tr
				Element:td
				Element:code
					invalid_token
				Element:td
					401
				Element:td
					Invalid Oauth token
				Element:tr
				Element:td
				Element:code
					revoked_token
				Element:td
					401
				Element:td
					Revoked Oauth token
				Element:tr
				Element:td
				Element:code
					expired_token
				Element:td
					401
				Element:td
					Expired Oauth token
				Element:tr
				Element:td
				Element:code
					invalid_scope
				Element:td
					403
				Element:td
					User hasn’t authenticated necessary scope
				Element:tr
				Element:td
				Element:code
					not_found
				Element:td
					404
				Element:td
					Resource not found
				Element:tr
				Element:td
				Element:code
					rate_limit_exceeded
				Element:td
					429
				Element:td
					Rate limit exceeded
				Element:tr
				Element:td
				Element:code
					internal_server_error
				Element:td
					500
				Element:td
					Internal server error
			Node:
			(type) c
			(layer)1
				Element:h3
					Other errors
			Node:
			(type) c
			(layer)1
												Node:
												(type) c
												(layer)4
													Element:h4
														OAuth2
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
													Element:span
														{
													Element:span
														"error"
													Element:span
														:
													Element:span
													Element:span
														"invalid_request"
													Element:span
														,
													Element:span
													Element:span
														"error_description"
													Element:span
														:
													Element:span
													Element:span
														"The request is missing a required parameter, includes an unsupported parameter value, or is otherwise malformed."
													Element:span
														}
													Element:span
												Node:
												(type) c
												(layer)4
													Element:p
														When authenticating or refreshing access tokens, OAuth2, will follow different error format.
												Node:
												(type) c
												(layer)4
													Element:h2
														Warnings
												Node:
												(type) c
												(layer)4
													Element:blockquote
													Element:p
														Example warning
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
													Element:span
														{
													Element:span
													Element:span
														"warnings"
													Element:span
														:
													Element:span
													Element:span
														[
													Element:span
													Element:span
														{
													Element:span
													Element:span
														"id"
													Element:span
														:
													Element:span
													Element:span
														"missing_version"
													Element:span
														,
													Element:span
													Element:span
														"message"
													Element:span
														:
													Element:span
													Element:span
														"Please supply API version (YYYY-MM-DD) as CB-Version header"
													Element:span
														,
													Element:span
													Element:span
														"url"
													Element:span
														:
													Element:span
													Element:span
														"https://developers.coinbase.com/api/v2#versioning"
													Element:span
													Element:span
														}
													Element:span
													Element:span
														]
													Element:span
													Element:span
														}
													Element:span
												Node:
												(type) c
												(layer)4
													Element:p
														Responses can include a
													Element:code
														warnings
														parameter to notify the developer of best practices, implementation suggestions or deprecation warnings. While you don’t need show warnings to the user, they are usually something you need to act on so it’s recommended that you add them to admin email alerts.
			Node:
			(type) h1
			(layer)1
				Element:h1
					Versioning
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl https://api.coinbase.com/v2/accounts
				Element:span
					\
					-H
				Element:span
					"CB-VERSION: 2015-04-08"
				Element:span
					\
					-H
				Element:span
					"Authorization: Bearer abd90df5f27a7b170cd775abf89d632b350b7c1c9d53e08b340cd9832ce52c2c"
			Node:
			(type) c
			(layer)1
				Element:p
					All API calls should be made with a
				Element:code
					CB-VERSION
					header which guarantees that your call is using the correct API version. Version is passed in as a date (UTC) of the implementation in
				Element:code
					YYYY-MM-DD
					format.
			Node:
			(type) c
			(layer)1
				Element:p
					If no version is passed, the version from
				Element:a
					user’s API settings
					will be used and a warning will be shown. Under no circumstance should you always pass in the current date, as that will return the current version which might break your implementation.
			Node:
			(type) c
			(layer)1
				Element:p
					For information about notification versioning, refer to
				Element:a
					notification documentation
					.
			Node:
			(type) h1
			(layer)1
				Element:h1
					Rate limiting
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Rate limiting error (429)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"errors"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"rate_limit_exceeded"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Too many requests"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					]
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					The Coinbase API is rate limited to prevent abuse that would degrade our ability to maintain consistent API performance for all users. By default, each API key or app is rate limited at 10,000 requests per hour. If your requests are being rate limited, HTTP response code
				Element:code
					429
					will be returned with an
				Element:code
					rate_limit_exceeded
					error.
			Node:
			(type) c
			(layer)1
				Element:p
					If your application requires higher rate limits, please email us a request at
				Element:a
					api@coinbase.com
					.
			Node:
			(type) h1
			(layer)1
				Element:h1
					Changelog
			Node:
			(type) c
			(layer)1
				Element:p
					Recent changes and additions to Coinbase API v2. Changes marked with
				Element:code
					[Versioned]
					include a versioned change and are only available for applications that specify that version or later. Other changes are available for all versions.
			Node:
			(type) c
			(layer)1
				Element:h3
					2016-08-10
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:code
					[Versioned]
					Updated
				Element:code
					POST /v2/accounts/:account-id/buys
					to return a different error if the buy is canceled immediately after the create/edit attempt. Previously, the API would return a 400 error with an id of
				Element:code
					invalid_request
					and a message of
				Element:code
					Buy canceled: <error_message>
					. Now, the API returns a 400 error with a descriptive id (e.g.
				Element:code
					unknown_error
					) and a message of
				Element:code
					<error_message>
					.
				Element:br
			Node:
			(type) c
			(layer)1
				Element:h2
					2016-05-16
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:code
					[Versioned]
					Changed buy/sell/deposit/withdrawal
				Element:code
					fees
					field into
				Element:code
					fee
					which will include the total fee instead of an itemized list.
				Element:li
				Element:code
					[Versioned]
					Changed
				Element:code
					validation_error
					status code from
				Element:code
					422
					to
				Element:code
					400
				Element:li
				Element:code
					[Versioned]
					Changed
				Element:code
					unverified_email
					status code from
				Element:code
					401
					to
				Element:code
					400
					. Now all
				Element:code
					401
					codes can should lead to logging out the user.
			Node:
			(type) c
			(layer)1
				Element:h2
					2016-02-02
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:code
					[Versioned]
					Changed
				Element:a
					notifications
					payload to only include resource data directly under
				Element:code
					data
					field and added
				Element:code
					additional_data
				Element:li
					Added versioning for notifications (
				Element:a
					API settings
					)
				Element:li
					Added
				Element:code
					details
					field to
				Element:a
					transactions
			Node:
			(type) c
			(layer)1
				Element:h2
					2015-11-17
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					Added
				Element:a
					Notifications
			Node:
			(type) c
			(layer)1
				Element:h2
					2015-09-11
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					Authentication requirement removed from price endpoints
			Node:
			(type) c
			(layer)1
				Element:h2
					2015-08-31
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					Added new payment method types (
				Element:code
					secure3d_card
					,
				Element:code
					eft_bank_account
					,
				Element:code
					interac
					)
			Node:
			(type) c
			(layer)1
				Element:h2
					2015-08-04
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:code
					scope
					parameter in OAuth authorize url is now optional
			Node:
			(type) c
			(layer)1
				Element:h2
					2015-08-03
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					Added
				Element:code
					instant_exchange
					field to transactions
				Element:li
					Added
				Element:code
					resource_path
					to all linked resources
				Element:li
					Made
				Element:code
					GET /v2/time
					to be unauthenticated
			Node:
			(type) c
			(layer)1
				Element:h2
					2015-07-07
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					New endpoint:
				Element:a
				Element:code
					GET /accounts/:account_id/addresses/:address_id/transactions
				Element:li
					Added optional
				Element:code
					address
					field to
				Element:a
				Element:code
					Transaction
					resource
				Element:li
					Added possibility to query addresses with bitcoin address on top of IDs
			Node:
			(type) c
			(layer)1
				Element:h2
					2015-07-01
			Node:
			(type) c
			(layer)1
				Element:p
					Initial release of Coinbase API v2.
			Node:
			(type) h1
			(layer)1
				Element:h1
					API Client Libraries
			Node:
			(type) c
			(layer)1
				Element:p
					Client libraries and can help you integrate with our API more quickly.
			Node:
			(type) c
			(layer)1
				Element:p
					Note that if you are using OAuth2 authentication, often times a standard OAuth2 client library in your language of choice or popular
				Element:a
					3rd party authentication framework
					the easiest integration method.
			Node:
			(type) c
			(layer)1
				Element:p
					Some libraries rely on older Wallet API v1 and will be updated in the near future. See
				Element:a
					API v1 documentation
					for details.
			Node:
			(type) c
			(layer)1
				Element:h2
					Official Client Libraries
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:a
					Python
				Element:li
				Element:a
					Ruby
				Element:li
				Element:a
					PHP
				Element:li
				Element:a
					Node.js
				Element:li
				Element:a
					Java
				Element:em
					(API v1)
			Node:
			(type) c
			(layer)1
				Element:h2
					Official Mobile SDKs
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:a
					Android SDK
				Element:em
					(API v1)
				Element:li
				Element:a
					iOS SDK
				Element:em
					(API v1)
			Node:
			(type) c
			(layer)1
				Element:h2
					Unofficial Libraries
			Node:
			(type) c
			(layer)1
				Element:p
				Element:em
					Note that these have not been security tested by Coinbase.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:a
					coinbase_python
					- Python wrapper for the Coinbase API (supports both OAuth2 and api key authentication)
				Element:li
				Element:a
					coinbase_python3
					- Python3 wrapper for the Coinbase API (supports both OAuth2 and api key authentication)
				Element:li
				Element:a
					nodecoinbase
					- A simple Node.js client for use with the Coinbase API
				Element:li
				Element:a
					coinbase-go
					- Go library for the Coinbase API
				Element:li
				Element:a
					whmcs-coinbase-bitcoin
					- A payment gateway module for WHMCS and Coinbase’s bitcoin payment API
				Element:li
				Element:a
					Coinbase.NET
					- A C# library for the Coinbase API
				Element:li
				Element:a
					Coinbase .NET/C#
					- .NET/C# implementation of the Coinbase API
			Node:
			(type) c
			(layer)1
				Element:p
					We plan on adding more client libraries in the future. If you develop a client library that you’d like to open source and add to this page, please
				Element:a
					send us a note
					. We’ll be happy to give you attribution.
			Node:
			(type) c
			(layer)1
				Element:h2
					OAuth2 frameworks/plugins
			Node:
			(type) c
			(layer)1
				Element:p
					To speed up development most web frameworks have popular authentication libraries. They can be used to integrate with Coinbase’s OAuth.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:a
					Python Social Auth
					- Django, Flask and other Python web frameworks
				Element:li
				Element:a
					Passport
					and
				Element:a
					passport-coinbase
					- Node.js
				Element:li
				Element:a
					OmniAuth
					and
				Element:a
					omniauth-coinbase
					- Ruby
			Node:
			(type) c
			(layer)1
				Element:p
				Element:em
					Note that these have not been security tested by Coinbase.
			Node:
			(type) h1
			(layer)1
				Element:h1
					Expanding resources
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Show transactions
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl https://api.coinbase.com/v2/accounts/8fcd97cd-50ca-5803-8c27-1146e54b1c09/transactions/0ec2de93-7dae-5a50-8580-6445a08e4ae4 / -H
				Element:span
					'Authorization: Bearer abd90df5f27a7b170cd775abf89d632b350b7c1c9d53e08b340cd9832ce52c2c'
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Regular response
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"data"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"0ec2de93-7dae-5a50-8580-6445a08e4ae4"
				Element:span
					,
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"send"
				Element:span
					,
				Element:span
				Element:span
					"status"
				Element:span
					:
				Element:span
				Element:span
					"pending"
				Element:span
					,
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"-1.00000000"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"BTC"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"native_amount"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"-10.00"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"description"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-01-31T20:49:02Z"
				Element:span
					,
				Element:span
				Element:span
					"updated_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-01-31T20:49:02Z"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"transaction"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/accounts/8fcd97cd-50ca-5803-8c27-1146e54b1c09/transactions/0ec2de93-7dae-5a50-8580-6445a08e4ae4"
				Element:span
					,
				Element:span
				Element:span
					"network"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"status"
				Element:span
					:
				Element:span
				Element:span
					"unconfirmed"
				Element:span
					,
				Element:span
				Element:span
					"hash"
				Element:span
					:
				Element:span
				Element:span
					"a7e23afeccf863dc8359ba04d2b854eddb6dea6901643828fdb3aca53d8bf600"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"to"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"user"
				Element:span
					,
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"9d55bef5-47f1-5936-b771-b07c1d8140a2"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/users/9d55bef5-47f1-5936-b771-b07c1d8140a2"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Same call with expanded resource
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl https://api.coinbase.com/v2/accounts/8fcd97cd-50ca-5803-8c27-1146e54b1c09/transactions/0ec2de93-7dae-5a50-8580-6445a08e4ae4?expand[]
				Element:span
					=
					to / -H
				Element:span
					'Authorization: Bearer abd90df5f27a7b170cd775abf89d632b350b7c1c9d53e08b340cd9832ce52c2c'
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Expanded response
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"data"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"0ec2de93-7dae-5a50-8580-6445a08e4ae4"
				Element:span
					,
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"send"
				Element:span
					,
				Element:span
				Element:span
					"status"
				Element:span
					:
				Element:span
				Element:span
					"pending"
				Element:span
					,
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"-1.00000000"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"BTC"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"native_amount"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"-10.00"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"description"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-01-31T20:49:02Z"
				Element:span
					,
				Element:span
				Element:span
					"updated_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-01-31T20:49:02Z"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"transaction"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/accounts/8fcd97cd-50ca-5803-8c27-1146e54b1c09/transactions/0ec2de93-7dae-5a50-8580-6445a08e4ae4"
				Element:span
					,
				Element:span
				Element:span
					"network"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"status"
				Element:span
					:
				Element:span
				Element:span
					"unconfirmed"
				Element:span
					,
				Element:span
				Element:span
					"hash"
				Element:span
					:
				Element:span
				Element:span
					"a7e23afeccf863dc8359ba04d2b854eddb6dea6901643828fdb3aca53d8bf600"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"to"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"9d55bef5-47f1-5936-b771-b07c1d8140a2"
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"James Smith"
				Element:span
					,
				Element:span
				Element:span
					"username"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"profile_location"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"profile_bio"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"profile_url"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"avatar_url"
				Element:span
					:
				Element:span
				Element:span
					"https://images.coinbase.com/avatar?h=KphlECxEemoPGv3xtMSxqG2Ud7gEzke9mh0Ff3ifsiu9ggPwStQLCCuQfk6N%0AyY1p&s=128"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"user"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/users/9d55bef5-47f1-5936-b771-b07c1d8140a2"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Many resources, like transactions, have other resources linked to them. By default only the resource type (
				Element:code
					resource
					), id (
				Element:code
					id
					) and path (
				Element:code
					resource_path
					) are exposed which can be used to fetch the resource separately. In some cases it’s useful to expand the resource in the response body. While this might increase the request time and payload, it’s still faster than fetching several resources separately.
			Node:
			(type) c
			(layer)1
				Element:p
					Resources are expanded by passing an array of fields to expand with
				Element:code
					expand
					parameter (e.g.
				Element:code
					?expand[]=to&expand[]=account
					). This can be done both when fetching existing or creating new resources. If you want to expand all available resources, you can pass
				Element:code
					expand=all
					. This is useful with large and complex resources like transactions but it makes queries slower and increases the request payload size.
			Node:
			(type) h1
			(layer)1
				Element:h1
					Metadata
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example request
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl https://api.coinbase.com/v2/orders
				Element:span
					\
					-X POST
				Element:span
					\
					-H
				Element:span
					'Content-Type: application/json'
				Element:span
					\
					-H
				Element:span
					'Authorization: Bearer abd90df5f27a7b170cd775abf89d632b350b7c1c9d53e08b340cd9832ce52c2c'
				Element:span
					\
					-d
				Element:span
					'{ "amount": "10.00", "currency": "USD", "name": "Order #123", "description": "Sample order", "metadata": { "customer_id": "id_1005", "customer_name": "Satoshi Nakamoto" } }'
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Response (201)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"data"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"0fdfb26e-bd26-5e1c-b055-7b935e57fa33"
				Element:span
					,
				Element:span
				Element:span
					"code"
				Element:span
					:
				Element:span
				Element:span
					"66BEOV2A"
				Element:span
					,
				Element:span
				Element:span
					"status"
				Element:span
					:
				Element:span
				Element:span
					"active"
				Element:span
					,
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"order"
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Order #123"
				Element:span
					,
				Element:span
				Element:span
					"description"
				Element:span
					:
				Element:span
				Element:span
					"Sample order"
				Element:span
					,
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"10.00"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					...
				Element:span
				Element:span
					"metadata"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"customer_id"
				Element:span
					:
				Element:span
				Element:span
					"id_1005"
				Element:span
					,
				Element:span
				Element:span
					"customer_name"
				Element:span
					:
				Element:span
				Element:span
					"Satoshi Nakamoto"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Merchant resources,
				Element:a
					orders
					and
				Element:a
					checkouts
					, support
				Element:code
					metadata
					field. It allows the API developer to store custom information related to orders. This information can be for example:
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					Internal order ID
				Element:li
					Customer’s name and email address
			Node:
			(type) c
			(layer)1
				Element:p
					Metadata field supports key-value pairs with the following limitations:
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					Up to 24 keys
				Element:li
					Up to 100 characters for the key (alphanumeric characters, hyphens and underscores)
				Element:li
					Up to 500 characters for the value
				Element:li
					String, integer and boolean values only. Decimals will be converted into strings
			Node:
			(type) h1
			(layer)1
				Element:h1
					Notifications
			Node:
			(type) c
			(layer)1
				Element:h2
					Notification resource
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example notification for new payment to a bitcoin address (wallet:addresses:new-payment)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"5a6956f9-94bb-5c15-99f3-a2a690347674"
				Element:span
					,
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"wallet:addresses:new-payment"
				Element:span
					,
				Element:span
				Element:span
					"data"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"c556eec7-53c2-576c-9158-c2eaa7c7ffca"
				Element:span
					,
				Element:span
				Element:span
					"address"
				Element:span
					:
				Element:span
				Element:span
					"mr4xYGzGMnw5tbbu2qyBBGdKwA4ktufbPy"
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-01-31T20:49:02Z"
				Element:span
					,
				Element:span
				Element:span
					"updated_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-01-31T20:49:02Z"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"address"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/accounts/c334783a-e72c-5e25-bf43-e182345f28c6/addresses/c556eec7-53c2-576c-9158-c2eaa7c7ffca"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"user"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"5b5b60b6-2cd3-5f88-8539-3a78cd111b49"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"user"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/users/5b5b60b6-2cd3-5f88-8539-3a78cd111b49"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"account"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"c334783a-e72c-5e25-bf43-e182345f28c6"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"account"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/accounts/c334783a-e72c-5e25-bf43-e182345f28c6"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"delivery_attempts"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-01-31T20:49:02Z"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"notification"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/notifications/5a6956f9-94bb-5c15-99f3-a2a690347674"
				Element:span
					,
				Element:span
				Element:span
					"additional_data"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"hash"
				Element:span
					:
				Element:span
				Element:span
					"749f267f9d238c978fe3e79a6c1f34070b0b8e5a3de8623d1bd144760bf79a5f"
				Element:span
					,
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"0.10000000"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"BTC"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"transaction"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"fe7b729d-62c6-5978-95ca-6cc1f9d23119"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"transaction"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/accounts/c334783a-e72c-5e25-bf43-e182345f28c6/transactions/fe7b729d-62c6-5978-95ca-6cc1f9d23119"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example notification for paid order (wallet:orders:paid)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"c5352d82-f400-5faf-80dd-c3bf5c7919c5"
				Element:span
					,
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"wallet:orders:paid"
				Element:span
					,
				Element:span
				Element:span
					"data"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"be4a2de8-0afd-5845-b28e-3265665e0f5c"
				Element:span
					,
				Element:span
				Element:span
					"code"
				Element:span
					:
				Element:span
				Element:span
					"C9JJMTHE"
				Element:span
					,
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"order"
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Test Button"
				Element:span
					,
				Element:span
				Element:span
					"description"
				Element:span
					:
				Element:span
				Element:span
					"A cool button"
				Element:span
					,
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"1.00"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"receipt_url"
				Element:span
					:
				Element:span
				Element:span
					"https://www.coinbase.com/orders/fa2868181ca1d8926c6433fea339e556/receipt"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"order"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/orders/be4a2de8-0afd-5845-b28e-3265665e0f5c"
				Element:span
					,
				Element:span
				Element:span
					"status"
				Element:span
					:
				Element:span
				Element:span
					"paid"
				Element:span
					,
				Element:span
				Element:span
					"bitcoin_amount"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"0.10000000"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"BTC"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"payout_amount"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"bitcoin_address"
				Element:span
					:
				Element:span
				Element:span
					"miRHyKJB9Gthgs4wxcTo64oFyzCtQXwyeB"
				Element:span
					,
				Element:span
				Element:span
					"refund_address"
				Element:span
					:
				Element:span
				Element:span
					"mobgFzkRCjePhxftW8XgAhv8Qk6d11HgmC"
				Element:span
					,
				Element:span
				Element:span
					"bitcoin_uri"
				Element:span
					:
				Element:span
				Element:span
					"bitcoin:miRHyKJB9Gthgs4wxcTo64oFyzCtQXwyeB?amount=0.10
				Element:span
					\\
				Element:span
					u0026r=http://127.0.0.1:5000/r/56e6ffbf9f880b748b000264"
				Element:span
					,
				Element:span
				Element:span
					"notifications_url"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"paid_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-01-31T20:49:02Z"
				Element:span
					,
				Element:span
				Element:span
					"mispaid_at"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"expires_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-01-31T20:49:02Z"
				Element:span
					,
				Element:span
				Element:span
					"metadata"
				Element:span
					:
				Element:span
				Element:span
					{},
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-01-31T20:49:02Z"
				Element:span
					,
				Element:span
				Element:span
					"updated_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-01-31T20:49:02Z"
				Element:span
					,
				Element:span
				Element:span
					"customer_info"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"transaction"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"352bd4a8-e5d7-5ea9-929b-365f5067cd54"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"transaction"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/accounts/a8f60558-56e5-55c1-ad09-25fc742acdd1/transactions/352bd4a8-e5d7-5ea9-929b-365f5067cd54"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"mispayments"
				Element:span
					:
				Element:span
				Element:span
					[],
				Element:span
				Element:span
					"refunds"
				Element:span
					:
				Element:span
				Element:span
					[]
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"user"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"a7924890-6f53-5a48-8afe-f333b367a399"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"user"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/users/a7924890-6f53-5a48-8afe-f333b367a399"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"account"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"a8f60558-56e5-55c1-ad09-25fc742acdd1"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"account"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/accounts/a8f60558-56e5-55c1-ad09-25fc742acdd1"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"delivery_attempts"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-01-31T20:49:02Z"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"notification"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/notifications/c5352d82-f400-5faf-80dd-c3bf5c7919c5"
				Element:span
					,
				Element:span
				Element:span
					"additional_data"
				Element:span
					:
				Element:span
				Element:span
					{}
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example notification for completed buy (wallet:buys:completed)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"6bf0ca21-0b2f-5e8a-b95e-7bd7eaccc338"
				Element:span
					,
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"wallet:buys:completed"
				Element:span
					,
				Element:span
				Element:span
					"data"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"67e0eaec-07d7-54c4-a72c-2e92826897df"
				Element:span
					,
				Element:span
				Element:span
					"status"
				Element:span
					:
				Element:span
				Element:span
					"completed"
				Element:span
					,
				Element:span
				Element:span
					"payment_method"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"83562370-3e5c-51db-87da-752af5ab9559"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"payment_method"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/payment-methods/83562370-3e5c-51db-87da-752af5ab9559"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"transaction"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"441b9494-b3f0-5b98-b9b0-4d82c21c252a"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"transaction"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/accounts/2bbf394c-193b-5b2a-9155-3b4732659ede/transactions/441b9494-b3f0-5b98-b9b0-4d82c21c252a"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"1.00000000"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"BTC"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"total"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"10.25"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"subtotal"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"10.10"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-01-31T20:49:02Z"
				Element:span
					,
				Element:span
				Element:span
					"updated_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-02-11T16:54:02-08:00"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"buy"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/accounts/2bbf394c-193b-5b2a-9155-3b4732659ede/buys/67e0eaec-07d7-54c4-a72c-2e92826897df"
				Element:span
					,
				Element:span
				Element:span
					"committed"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"instant"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"fee"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"0.15"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"payout_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-02-18T16:54:00-08:00"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"additional_data"
				Element:span
					:
				Element:span
				Element:span
					{},
				Element:span
				Element:span
					"user"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"f01c821e-bb35-555f-a4da-548672963119"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"user"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/users/f01c821e-bb35-555f-a4da-548672963119"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"account"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"8d5f086c-d7d5-58ee-890e-c09b3d8d4434"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"account"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/accounts/8d5f086c-d7d5-58ee-890e-c09b3d8d4434"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"delivery_attempts"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-11-10T19:15:06Z"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"notification"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/notifications/6bf0ca21-0b2f-5e8a-b95e-7bd7eaccc338"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Notifications allow you to subscribe to updates regarding your OAuth application or API key. Notifications are sent as HTTP POST requests (webhooks) to a notification endpoint, which the developer can set for their OAuth application or API key settings.
			Node:
			(type) c
			(layer)1
				Element:p
					Each notification contains the following information:
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					Type - Action that triggered the event
				Element:li
					Data - Data of the resource at the time of the event
				Element:li
					Additional data - Additional data associated with the event
				Element:li
					User - Owner of the resource (useful with OAuth applications)
				Element:li
					Account - Account of the resource
				Element:li
					Delivery information
			Node:
			(type) c
			(layer)1
				Element:p
					If notification delivery fails, it will be re-tried hourly up to three days. If you ever need to access notifications afterwards, you can query them using
				Element:a
					notification API endpoints
					. Content of the notification will not change even if the referenced resource changes over time.
			Node:
			(type) c
			(layer)1
				Element:p
					To secure your notifications, you should obfuscate your notification URL and verify the origin of the callback by validating it against the Coinbase callback IP addresses and signature (CB-SIGNATURE header).
			Node:
			(type) c
			(layer)1
				Element:p
				Element:a
					Read more about notifications
			Node:
			(type) c
			(layer)1
				Element:p
				Element:a
					Read more about merchant notifications
			Node:
			(type) c
			(layer)1
				Element:p
					Outbound notifications (webhooks) are versioned using API version defined in
				Element:a
					user’s API settings
					.
			Node:
			(type) c
			(layer)1
				Element:p
					Listed below are notification types that are currently supported. Each type is named with
				Element:code
					service:resource:action
					. For example, confirming a buy on the Wallet API is
				Element:code
					wallet:buys:completed
					. To protect sensitive information, read permission for the resource is required to receive notifications for the resource type. For example, an API key needs to have
				Element:code
					wallet:buys:read
					permission to receive a notification for
				Element:code
					wallet:buys:completed
					. There are some exceptions to this rule, but each supported notification type is listed below with its corresponding required permissions.
			Node:
			(type) c
			(layer)1
				Element:p
					Only notifications listed below are currently supported. We’ll add more notifications over time. If your application would benefit from a specific notification, please let us know by
				Element:a
					emailing us
					or posting in
				Element:a
					Coinbase Community
					.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Notification type
				Element:th
					Required permission
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
				Element:code
					ping
				Element:td
				Element:em
					None
				Element:td
					Ping notification can be send at any time to verify that the notification URL is functioning
				Element:tr
				Element:td
				Element:code
					wallet:addresses:new-payment
				Element:td
				Element:code
					wallet:addresses:read
				Element:td
					New payment has been made to
				Element:a
					a Bitcoin address
				Element:tr
				Element:td
				Element:code
					wallet:buys:created
				Element:td
				Element:code
					wallet:buys:read
					or
				Element:code
					wallet:buys:create
				Element:td
					A buy has been created
				Element:tr
				Element:td
				Element:code
					wallet:buys:completed
				Element:td
				Element:code
					wallet:buys:read
					or
				Element:code
					wallet:buys:create
				Element:td
					A buy has been completed
				Element:tr
				Element:td
				Element:code
					wallet:buys:canceled
				Element:td
				Element:code
					wallet:buys:read
					or
				Element:code
					wallet:buys:create
				Element:td
					A buy has been canceled
				Element:tr
				Element:td
				Element:code
					wallet:sells:created
				Element:td
				Element:code
					wallet:sells:read
					or
				Element:code
					wallet:sells:create
				Element:td
					A sell has been created
				Element:tr
				Element:td
				Element:code
					wallet:sells:completed
				Element:td
				Element:code
					wallet:sells:read
					or
				Element:code
					wallet:sells:create
				Element:td
					A sell has been completed
				Element:tr
				Element:td
				Element:code
					wallet:sells:canceled
				Element:td
				Element:code
					wallet:sells:read
					or
				Element:code
					wallet:sells:create
				Element:td
					A sell has been canceled
				Element:tr
				Element:td
				Element:code
					wallet:deposit:created
				Element:td
				Element:code
					wallet:deposit:read
					or
				Element:code
					wallet:deposit:create
				Element:td
					A deposit has been created
				Element:tr
				Element:td
				Element:code
					wallet:deposit:completed
				Element:td
				Element:code
					wallet:deposit:read
					or
				Element:code
					wallet:deposit:create
				Element:td
					A deposit has been completed
				Element:tr
				Element:td
				Element:code
					wallet:deposit:canceled
				Element:td
				Element:code
					wallet:deposit:read
					or
				Element:code
					wallet:deposit:create
				Element:td
					A deposit has been canceled
				Element:tr
				Element:td
				Element:code
					wallet:withdrawal:created
				Element:td
				Element:code
					wallet:withdrawal:read
					or
				Element:code
					wallet:withdrawal:create
				Element:td
					A withdrawal has been created
				Element:tr
				Element:td
				Element:code
					wallet:withdrawal:completed
				Element:td
				Element:code
					wallet:withdrawal:read
					or
				Element:code
					wallet:withdrawal:create
				Element:td
					A withdrawal has been completed
				Element:tr
				Element:td
				Element:code
					wallet:withdrawal:canceled
				Element:td
				Element:code
					wallet:withdrawal:read
					or
				Element:code
					wallet:withdrawal:create
				Element:td
					A withdrawal has been canceled
				Element:tr
				Element:td
				Element:code
					wallet:orders:paid
				Element:td
				Element:code
					wallet:orders:read
				Element:td
					An order has been paid
				Element:tr
				Element:td
				Element:code
					wallet:orders:mispaid
				Element:td
				Element:code
					wallet:orders:read
				Element:td
					An order has been mispaid
				Element:tr
				Element:td
				Element:code
					wallet:merchant-payouts:created
				Element:td
				Element:code
					wallet:orders:read
					or
				Element:code
					wallet:sells:read
				Element:td
					Automated merchant payout (a sell) has been sent to your bank account via our instant exchange feature
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Fields
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
				Element:code
					id
				Element:em
					string
				Element:td
					Resource ID
				Element:tr
				Element:td
				Element:code
					type
				Element:em
					string
				Element:td
					Notification type
				Element:tr
				Element:td
				Element:code
					data
				Element:em
					hash, optional
				Element:td
					Notification data. Related resource is available in
				Element:code
					resource
					key together with other available data. For
				Element:code
					type: ping
					the
				Element:code
					data
					will be an empty hash
				Element:tr
				Element:td
				Element:code
					user
				Element:em
					hash
				Element:td
					Related user (useful when separating OAuth notifications)
				Element:tr
				Element:td
				Element:code
					account
				Element:em
					hash
				Element:td
					Related account
				Element:tr
				Element:td
				Element:code
					delivery_attempts
				Element:em
					integer
				Element:td
					Number of delivery attempts (excluded from webhook)
				Element:tr
				Element:td
				Element:code
					delivery_response
				Element:em
					hash
				Element:td
					Information about last delivery (excluded from webhook)
				Element:tr
				Element:td
				Element:code
					created_at
				Element:em
					timestamp
				Element:td
				Element:tr
				Element:td
				Element:code
					updated_at
				Element:em
					timestamp
				Element:td
				Element:tr
				Element:td
				Element:code
					resource
				Element:em
					string, constant
				Element:strong
					notification
				Element:td
				Element:tr
				Element:td
				Element:code
					resource_path
				Element:em
					string
				Element:td
				Element:tr
				Element:td
				Element:code
					subscriber
				Element:em
					hash
				Element:td
					Subscribing object to separate different notification subsribers in
				Element:a
					list notifications
					endpoint
			Node:
			(type) c
			(layer)1
				Element:h2
					List notifications
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example request
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl https://api.coinbase.com/v2/notifications
				Element:span
					\
					-H
				Element:span
					'Authorization: Bearer abd90df5f27a7b170cd775abf89d632b350b7c1c9d53e08b340cd9832ce52c2c'
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'coinbase/wallet'
				Element:span
					client
				Element:span
					=
				Element:span
					Coinbase
				Element:span
					::
				Element:span
					Wallet
				Element:span
					::
				Element:span
					Client
				Element:span
					.
				Element:span
					new
				Element:span
					(
				Element:span
					api_key:
				Element:span
					<
				Element:span
					api
				Element:span
					key
				Element:span
					>
				Element:span
					,
				Element:span
					api_secret:
				Element:span
					<
				Element:span
					api
				Element:span
					secret
				Element:span
					>
				Element:span
					)
				Element:span
					notifications
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					notifications
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					from
				Element:span
					coinbase.wallet.client
				Element:span
					import
				Element:span
					Client
				Element:span
					client
				Element:span
					=
				Element:span
					Client
				Element:span
					(
				Element:span
					<
				Element:span
					api_key
				Element:span
					>
				Element:span
					,
				Element:span
					<
				Element:span
					api_secret
				Element:span
					>
				Element:span
					)
				Element:span
					notifications
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					get_notifications
				Element:span
					()
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					var
				Element:span
					Client
				Element:span
					=
				Element:span
					require
				Element:span
					(
				Element:span
					'coinbase'
				Element:span
					).
				Element:span
					Client
				Element:span
					;
				Element:span
					var
				Element:span
					client
				Element:span
					=
				Element:span
					new
				Element:span
					Client
				Element:span
					({
				Element:span
					'apiKey'
				Element:span
					:
				Element:span
					'API KEY'
				Element:span
					,
				Element:span
					'apiSecret'
				Element:span
					:
				Element:span
					'API SECRET'
				Element:span
					});
				Element:span
					client
				Element:span
					.
				Element:span
					getNotifications
				Element:span
					({},
				Element:span
					function
				Element:span
					(
				Element:span
					err
				Element:span
					,
				Element:span
					notifications
				Element:span
					)
				Element:span
					{
				Element:span
					console
				Element:span
					.
				Element:span
					log
				Element:span
					(
				Element:span
					notifications
				Element:span
					);
				Element:span
					});
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example response
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"pagination"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"ending_before"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"starting_after"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"limit"
				Element:span
					:
				Element:span
				Element:span
					25
				Element:span
					,
				Element:span
				Element:span
					"order"
				Element:span
					:
				Element:span
				Element:span
					"desc"
				Element:span
					,
				Element:span
				Element:span
					"previous_uri"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"next_uri"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"data"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"6bf0ca21-0b2f-5e8a-b95e-7bd7eaccc338"
				Element:span
					,
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"wallet:buys:completed"
				Element:span
					,
				Element:span
				Element:span
					"data"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"67e0eaec-07d7-54c4-a72c-2e92826897df"
				Element:span
					,
				Element:span
				Element:span
					"status"
				Element:span
					:
				Element:span
				Element:span
					"completed"
				Element:span
					,
				Element:span
				Element:span
					"payment_method"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"83562370-3e5c-51db-87da-752af5ab9559"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"payment_method"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/payment-methods/83562370-3e5c-51db-87da-752af5ab9559"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"transaction"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"441b9494-b3f0-5b98-b9b0-4d82c21c252a"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"transaction"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/accounts/2bbf394c-193b-5b2a-9155-3b4732659ede/transactions/441b9494-b3f0-5b98-b9b0-4d82c21c252a"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"1.00000000"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"BTC"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"total"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"10.25"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"subtotal"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"10.10"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-01-31T20:49:02Z"
				Element:span
					,
				Element:span
				Element:span
					"updated_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-02-11T16:54:02-08:00"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"buy"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/accounts/2bbf394c-193b-5b2a-9155-3b4732659ede/buys/67e0eaec-07d7-54c4-a72c-2e92826897df"
				Element:span
					,
				Element:span
				Element:span
					"committed"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"instant"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"fees"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"coinbase"
				Element:span
					,
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"0.00"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"bank"
				Element:span
					,
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"0.15"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
				Element:span
					],
				Element:span
				Element:span
					"payout_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-02-18T16:54:00-08:00"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"user"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"f01c821e-bb35-555f-a4da-548672963119"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"user"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/users/f01c821e-bb35-555f-a4da-548672963119"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"account"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"8d5f086c-d7d5-58ee-890e-c09b3d8d4434"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"account"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/accounts/8d5f086c-d7d5-58ee-890e-c09b3d8d4434"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"delivery_attempts"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-11-10T19:15:06Z"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"notification"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/notifications/6bf0ca21-0b2f-5e8a-b95e-7bd7eaccc338"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					]
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Lists notifications where the current user was the subscriber (owner of the API key or OAuth application).
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET https://api.coinbase.com/v2/notifications
			Node:
			(type) c
			(layer)1
				Element:h3
					Scopes
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:code
					wallet:notifications:read
			Node:
			(type) c
			(layer)1
				Element:h2
					Show a notification
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example request
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl https://api.coinbase.com/v2/notifications/0fdfb26e-bd26-5e1c-b055-7b935e57fa33
				Element:span
					\
					-H
				Element:span
					'Authorization: Bearer abd90df5f27a7b170cd775abf89d632b350b7c1c9d53e08b340cd9832ce52c2c'
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'coinbase/wallet'
				Element:span
					client
				Element:span
					=
				Element:span
					Coinbase
				Element:span
					::
				Element:span
					Wallet
				Element:span
					::
				Element:span
					Client
				Element:span
					.
				Element:span
					new
				Element:span
					(
				Element:span
					api_key:
				Element:span
					<
				Element:span
					api
				Element:span
					key
				Element:span
					>
				Element:span
					,
				Element:span
					api_secret:
				Element:span
					<
				Element:span
					api
				Element:span
					secret
				Element:span
					>
				Element:span
					)
				Element:span
					notification
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					notification
				Element:span
					(
				Element:span
					'0fdfb26e-bd26-5e1c-b055-7b935e57fa33'
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					from
				Element:span
					coinbase.wallet.client
				Element:span
					import
				Element:span
					Client
				Element:span
					client
				Element:span
					=
				Element:span
					Client
				Element:span
					(
				Element:span
					<
				Element:span
					api_key
				Element:span
					>
				Element:span
					,
				Element:span
					<
				Element:span
					api_secret
				Element:span
					>
				Element:span
					)
				Element:span
					notification
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					get_notification
				Element:span
					(
				Element:span
					'0fdfb26e-bd26-5e1c-b055-7b935e57fa33'
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					var
				Element:span
					Client
				Element:span
					=
				Element:span
					require
				Element:span
					(
				Element:span
					'coinbase'
				Element:span
					).
				Element:span
					Client
				Element:span
					;
				Element:span
					var
				Element:span
					client
				Element:span
					=
				Element:span
					new
				Element:span
					Client
				Element:span
					({
				Element:span
					'apiKey'
				Element:span
					:
				Element:span
					'API KEY'
				Element:span
					,
				Element:span
					'apiSecret'
				Element:span
					:
				Element:span
					'API SECRET'
				Element:span
					});
				Element:span
					client
				Element:span
					.
				Element:span
					getNotification
				Element:span
					(
				Element:span
					'0fdfb26e-bd26-5e1c-b055-7b935e57fa33'
				Element:span
					,
				Element:span
					function
				Element:span
					(
				Element:span
					err
				Element:span
					,
				Element:span
					notification
				Element:span
					)
				Element:span
					{
				Element:span
					console
				Element:span
					.
				Element:span
					log
				Element:span
					(
				Element:span
					notification
				Element:span
					);
				Element:span
					});
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example response
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"data"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"6bf0ca21-0b2f-5e8a-b95e-7bd7eaccc338"
				Element:span
					,
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"wallet:buys:completed"
				Element:span
					,
				Element:span
				Element:span
					"data"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"67e0eaec-07d7-54c4-a72c-2e92826897df"
				Element:span
					,
				Element:span
				Element:span
					"status"
				Element:span
					:
				Element:span
				Element:span
					"completed"
				Element:span
					,
				Element:span
				Element:span
					"payment_method"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"83562370-3e5c-51db-87da-752af5ab9559"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"payment_method"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/payment-methods/83562370-3e5c-51db-87da-752af5ab9559"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"transaction"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"441b9494-b3f0-5b98-b9b0-4d82c21c252a"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"transaction"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/accounts/2bbf394c-193b-5b2a-9155-3b4732659ede/transactions/441b9494-b3f0-5b98-b9b0-4d82c21c252a"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"1.00000000"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"BTC"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"total"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"10.25"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"subtotal"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"10.10"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-01-31T20:49:02Z"
				Element:span
					,
				Element:span
				Element:span
					"updated_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-02-11T16:54:02-08:00"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"buy"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/accounts/2bbf394c-193b-5b2a-9155-3b4732659ede/buys/67e0eaec-07d7-54c4-a72c-2e92826897df"
				Element:span
					,
				Element:span
				Element:span
					"committed"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"instant"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"fee"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"0.15"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"payout_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-02-18T16:54:00-08:00"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"user"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"f01c821e-bb35-555f-a4da-548672963119"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"user"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/users/f01c821e-bb35-555f-a4da-548672963119"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"account"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"8d5f086c-d7d5-58ee-890e-c09b3d8d4434"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"account"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/accounts/8d5f086c-d7d5-58ee-890e-c09b3d8d4434"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"delivery_attempts"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-11-10T19:15:06Z"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"notification"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/notifications/6bf0ca21-0b2f-5e8a-b95e-7bd7eaccc338"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Show a notification for which the current user was a subsciber.
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET https://api.coinbase.com/v2/notifications/:notifications_id
			Node:
			(type) c
			(layer)1
				Element:h3
					Scopes
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:code
					wallet:notifications:read
			Node:
			(type) h1
			(layer)1
				Element:h1
					Wallet Endpoints
			Node:
			(type) h1
			(layer)1
				Element:h1
					Users
			Node:
			(type) c
			(layer)1
				Element:h2
					User resource
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					User’s public information (default)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"9da7a204-544e-5fd1-9a12-61176c5d4cd8"
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"User One"
				Element:span
					,
				Element:span
				Element:span
					"username"
				Element:span
					:
				Element:span
				Element:span
					"user1"
				Element:span
					,
				Element:span
				Element:span
					"profile_location"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"profile_bio"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"profile_url"
				Element:span
					:
				Element:span
				Element:span
					"https://coinbase.com/user1"
				Element:span
					,
				Element:span
				Element:span
					"avatar_url"
				Element:span
					:
				Element:span
				Element:span
					"https://images.coinbase.com/avatar?h=vR%2FY8igBoPwuwGren5JMwvDNGpURAY%2F0nRIOgH%2FY2Qh%2BQ6nomR3qusA%2Bh6o2%0Af9rH&s=128"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"user"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/user"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Detailed information of the authenticated user (wallet:user:read permission)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					...
				Element:span
				Element:span
					"time_zone"
				Element:span
					:
				Element:span
				Element:span
					"Pacific Time (US & Canada)"
				Element:span
					,
				Element:span
				Element:span
					"native_currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
					,
				Element:span
				Element:span
					"bitcoin_unit"
				Element:span
					:
				Element:span
				Element:span
					"bits"
				Element:span
					,
				Element:span
				Element:span
					"country"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"code"
				Element:span
					:
				Element:span
				Element:span
					"US"
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"United States"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-01-31T20:49:02Z"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Authenticated user with their email (wallet:user:email permission)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					...
				Element:span
				Element:span
					"email"
				Element:span
					:
				Element:span
				Element:span
					"user1@example.com"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Generic user information. By default, only public information is shared without any scopes. More detailed information or email can be requested with additional scopes.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Fields
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
				Element:code
					id
				Element:em
					string
				Element:td
					Resource ID
				Element:tr
				Element:td
				Element:code
					name
				Element:em
					string, optional
				Element:td
					User’s public name
				Element:tr
				Element:td
				Element:code
					username
				Element:em
					string, optional
				Element:td
					Payment method’s native currency
				Element:tr
				Element:td
				Element:code
					profile_location
				Element:em
					string, optional
				Element:td
					Location for user’s public profile
				Element:tr
				Element:td
				Element:code
					profile_bio
				Element:em
					string, optional
				Element:td
					Bio for user’s public profile
				Element:tr
				Element:td
				Element:code
					profile_url
				Element:em
					string, optional
				Element:td
					Public profile location if user has one
				Element:tr
				Element:td
				Element:code
					avatar_url
				Element:em
					string
				Element:td
					User’s avatar url
				Element:tr
				Element:td
				Element:code
					resource
				Element:em
					string, constant
				Element:strong
					user
				Element:td
				Element:tr
				Element:td
				Element:code
					resource_path
				Element:em
					string
				Element:td
			Node:
			(type) c
			(layer)1
				Element:h2
					Show a user
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example request
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl https://api.coinbase.com/v2/users/9da7a204-544e-5fd1-9a12-61176c5d4cd8 / -H
				Element:span
					'Authorization: Bearer abd90df5f27a7b170cd775abf89d632b350b7c1c9d53e08b340cd9832ce52c2c'
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'coinbase/wallet'
				Element:span
					client
				Element:span
					=
				Element:span
					Coinbase
				Element:span
					::
				Element:span
					Wallet
				Element:span
					::
				Element:span
					Client
				Element:span
					.
				Element:span
					new
				Element:span
					(
				Element:span
					api_key:
				Element:span
					<
				Element:span
					api
				Element:span
					key
				Element:span
					>
				Element:span
					,
				Element:span
					api_secret:
				Element:span
					<
				Element:span
					api
				Element:span
					secret
				Element:span
					>
				Element:span
					)
				Element:span
					user
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					user
				Element:span
					(
				Element:span
					"9da7a204-544e-5fd1-9a12-61176c5d4cd8"
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					from
				Element:span
					coinbase.wallet.client
				Element:span
					import
				Element:span
					Client
				Element:span
					client
				Element:span
					=
				Element:span
					Client
				Element:span
					(
				Element:span
					<
				Element:span
					api_key
				Element:span
					>
				Element:span
					,
				Element:span
					<
				Element:span
					api_secret
				Element:span
					>
				Element:span
					)
				Element:span
					user
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					get_user
				Element:span
					(
				Element:span
					"9da7a204-544e-5fd1-9a12-61176c5d4cd8"
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					var
				Element:span
					Client
				Element:span
					=
				Element:span
					require
				Element:span
					(
				Element:span
					'coinbase'
				Element:span
					).
				Element:span
					Client
				Element:span
					;
				Element:span
					var
				Element:span
					client
				Element:span
					=
				Element:span
					new
				Element:span
					Client
				Element:span
					({
				Element:span
					'apiKey'
				Element:span
					:
				Element:span
					'API KEY'
				Element:span
					,
				Element:span
					'apiSecret'
				Element:span
					:
				Element:span
					'API SECRET'
				Element:span
					});
				Element:span
					client
				Element:span
					.
				Element:span
					getUser
				Element:span
					(
				Element:span
					'9da7a204-544e-5fd1-9a12-61176c5d4cd8'
				Element:span
					,
				Element:span
					function
				Element:span
					(
				Element:span
					err
				Element:span
					,
				Element:span
					user
				Element:span
					)
				Element:span
					{
				Element:span
					console
				Element:span
					.
				Element:span
					log
				Element:span
					(
				Element:span
					user
				Element:span
					);
				Element:span
					});
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example response (200)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"data"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"9da7a204-544e-5fd1-9a12-61176c5d4cd8"
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"User One"
				Element:span
					,
				Element:span
				Element:span
					"username"
				Element:span
					:
				Element:span
				Element:span
					"user1"
				Element:span
					,
				Element:span
				Element:span
					"profile_location"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"profile_bio"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"profile_url"
				Element:span
					:
				Element:span
				Element:span
					"https://coinbase.com/user1"
				Element:span
					,
				Element:span
				Element:span
					"avatar_url"
				Element:span
					:
				Element:span
				Element:span
					"https://images.coinbase.com/avatar?h=vR%2FY8igBoPwuwGren5JMwvDNGpURAY%2F0nRIOgH%2FY2Qh%2BQ6nomR3qusA%2Bh6o2%0Af9rH&s=128"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"user"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/user/9da7a204-544e-5fd1-9a12-61176c5d4cd8"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Get any user’s public information with their ID.
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET https://api.coinbase.com/v2/users/:user_id
			Node:
			(type) c
			(layer)1
				Element:h3
					Scopes
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:em
					No permission required
			Node:
			(type) c
			(layer)1
				Element:h2
					Show current user
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example request
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl https://api.coinbase.com/v2/user / -H
				Element:span
					'Authorization: Bearer abd90df5f27a7b170cd775abf89d632b350b7c1c9d53e08b340cd9832ce52c2c'
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'coinbase/wallet'
				Element:span
					client
				Element:span
					=
				Element:span
					Coinbase
				Element:span
					::
				Element:span
					Wallet
				Element:span
					::
				Element:span
					Client
				Element:span
					.
				Element:span
					new
				Element:span
					(
				Element:span
					api_key:
				Element:span
					<
				Element:span
					api
				Element:span
					key
				Element:span
					>
				Element:span
					,
				Element:span
					api_secret:
				Element:span
					<
				Element:span
					api
				Element:span
					secret
				Element:span
					>
				Element:span
					)
				Element:span
					user
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					current_user
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					from
				Element:span
					coinbase.wallet.client
				Element:span
					import
				Element:span
					Client
				Element:span
					client
				Element:span
					=
				Element:span
					Client
				Element:span
					(
				Element:span
					<
				Element:span
					api_key
				Element:span
					>
				Element:span
					,
				Element:span
					<
				Element:span
					api_secret
				Element:span
					>
				Element:span
					)
				Element:span
					user
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					get_current_user
				Element:span
					()
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					var
				Element:span
					Client
				Element:span
					=
				Element:span
					require
				Element:span
					(
				Element:span
					'coinbase'
				Element:span
					).
				Element:span
					Client
				Element:span
					;
				Element:span
					var
				Element:span
					client
				Element:span
					=
				Element:span
					new
				Element:span
					Client
				Element:span
					({
				Element:span
					'apiKey'
				Element:span
					:
				Element:span
					'API KEY'
				Element:span
					,
				Element:span
					'apiSecret'
				Element:span
					:
				Element:span
					'API SECRET'
				Element:span
					});
				Element:span
					client
				Element:span
					.
				Element:span
					getCurrentUser
				Element:span
					(
				Element:span
					function
				Element:span
					(
				Element:span
					err
				Element:span
					,
				Element:span
					user
				Element:span
					)
				Element:span
					{
				Element:span
					console
				Element:span
					.
				Element:span
					log
				Element:span
					(
				Element:span
					user
				Element:span
					);
				Element:span
					});
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example response
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"data"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"9da7a204-544e-5fd1-9a12-61176c5d4cd8"
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"User One"
				Element:span
					,
				Element:span
				Element:span
					"username"
				Element:span
					:
				Element:span
				Element:span
					"user1"
				Element:span
					,
				Element:span
				Element:span
					"profile_location"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"profile_bio"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"profile_url"
				Element:span
					:
				Element:span
				Element:span
					"https://coinbase.com/user1"
				Element:span
					,
				Element:span
				Element:span
					"avatar_url"
				Element:span
					:
				Element:span
				Element:span
					"https://images.coinbase.com/avatar?h=vR%2FY8igBoPwuwGren5JMwvDNGpURAY%2F0nRIOgH%2FY2Qh%2BQ6nomR3qusA%2Bh6o2%0Af9rH&s=128"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"user"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/user"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Get current user’s public information. To get user’s email or private information, use permissions
				Element:code
					wallet:user:email
					and
				Element:code
					wallet:user:read
					. If current request has a
				Element:code
					wallet:transactions:send
					scope, then the response will contain a boolean
				Element:code
					sends_disabled
					field that indicates if the user’s send functionality has been disabled.
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET https://api.coinbase.com/v2/user
			Node:
			(type) c
			(layer)1
				Element:h3
					Scopes
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:em
					No scope required for public data
				Element:li
				Element:code
					wallet:user:read
				Element:li
				Element:code
					wallet:user:email
			Node:
			(type) c
			(layer)1
				Element:h2
					Show authorization information
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example request
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl https://api.coinbase.com/v2/user/auth / -H
				Element:span
					'Authorization: Bearer abd90df5f27a7b170cd775abf89d632b350b7c1c9d53e08b340cd9832ce52c2c'
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'coinbase/wallet'
				Element:span
					client
				Element:span
					=
				Element:span
					Coinbase
				Element:span
					::
				Element:span
					Wallet
				Element:span
					::
				Element:span
					Client
				Element:span
					.
				Element:span
					new
				Element:span
					(
				Element:span
					api_key:
				Element:span
					<
				Element:span
					api
				Element:span
					key
				Element:span
					>
				Element:span
					,
				Element:span
					api_secret:
				Element:span
					<
				Element:span
					api
				Element:span
					secret
				Element:span
					>
				Element:span
					)
				Element:span
					client
				Element:span
					.
				Element:span
					auth_info
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					from
				Element:span
					coinbase.wallet.client
				Element:span
					import
				Element:span
					Client
				Element:span
					client
				Element:span
					=
				Element:span
					Client
				Element:span
					(
				Element:span
					<
				Element:span
					api_key
				Element:span
					>
				Element:span
					,
				Element:span
					<
				Element:span
					api_secret
				Element:span
					>
				Element:span
					)
				Element:span
					user
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					get_auth_info
				Element:span
					()
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					var
				Element:span
					Client
				Element:span
					=
				Element:span
					require
				Element:span
					(
				Element:span
					'coinbase'
				Element:span
					).
				Element:span
					Client
				Element:span
					;
				Element:span
					var
				Element:span
					client
				Element:span
					=
				Element:span
					new
				Element:span
					Client
				Element:span
					({
				Element:span
					'apiKey'
				Element:span
					:
				Element:span
					'API KEY'
				Element:span
					,
				Element:span
					'apiSecret'
				Element:span
					:
				Element:span
					'API SECRET'
				Element:span
					});
				Element:span
					client
				Element:span
					.
				Element:span
					getCurrentUser
				Element:span
					(
				Element:span
					function
				Element:span
					(
				Element:span
					err
				Element:span
					,
				Element:span
					user
				Element:span
					)
				Element:span
					{
				Element:span
					user
				Element:span
					.
				Element:span
					showAuth
				Element:span
					(
				Element:span
					function
				Element:span
					(
				Element:span
					err
				Element:span
					,
				Element:span
					auth
				Element:span
					)
				Element:span
					{
				Element:span
					console
				Element:span
					.
				Element:span
					log
				Element:span
					(
				Element:span
					auth
				Element:span
					);
				Element:span
					});
				Element:span
					});
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example response
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"data"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"method"
				Element:span
					:
				Element:span
				Element:span
					"oauth"
				Element:span
					,
				Element:span
				Element:span
					"scopes"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					"wallet:user:read"
				Element:span
					,
				Element:span
				Element:span
					"wallet:user:email"
				Element:span
				Element:span
					],
				Element:span
				Element:span
					"oauth_meta"
				Element:span
					:
				Element:span
				Element:span
					{}
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Get current user’s authorization information including granted scopes and send limits when using OAuth2 authentication.
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET https://api.coinbase.com/v2/user/auth
			Node:
			(type) c
			(layer)1
				Element:h3
					Scopes
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:em
					No permission required
			Node:
			(type) c
			(layer)1
				Element:h2
					Update current user
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example request
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl https://api.coinbase.com/v2/user / -X PUT
				Element:span
					\
					-H
				Element:span
					'Content-Type: application/json'
				Element:span
					\
					-H
				Element:span
					'Authorization: Bearer abd90df5f27a7b170cd775abf89d632b350b7c1c9d53e08b340cd9832ce52c2c'
				Element:span
					\
					-d
				Element:span
					'{"name": "James Smith"}'
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'coinbase/wallet'
				Element:span
					client
				Element:span
					=
				Element:span
					Coinbase
				Element:span
					::
				Element:span
					Wallet
				Element:span
					::
				Element:span
					Client
				Element:span
					.
				Element:span
					new
				Element:span
					(
				Element:span
					api_key:
				Element:span
					<
				Element:span
					api
				Element:span
					key
				Element:span
					>
				Element:span
					,
				Element:span
					api_secret:
				Element:span
					<
				Element:span
					api
				Element:span
					secret
				Element:span
					>
				Element:span
					)
				Element:span
					user
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					update_current_user
				Element:span
					({
				Element:span
					name:
				Element:span
					'James Smith'
				Element:span
					})
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					from
				Element:span
					coinbase.wallet.client
				Element:span
					import
				Element:span
					Client
				Element:span
					client
				Element:span
					=
				Element:span
					Client
				Element:span
					(
				Element:span
					<
				Element:span
					api_key
				Element:span
					>
				Element:span
					,
				Element:span
					<
				Element:span
					api_secret
				Element:span
					>
				Element:span
					)
				Element:span
					user
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					update_current_user
				Element:span
					({
				Element:span
					'name'
				Element:span
					:
				Element:span
					'James Smith'
				Element:span
					})
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					var
				Element:span
					Client
				Element:span
					=
				Element:span
					require
				Element:span
					(
				Element:span
					'coinbase'
				Element:span
					).
				Element:span
					Client
				Element:span
					;
				Element:span
					var
				Element:span
					client
				Element:span
					=
				Element:span
					new
				Element:span
					Client
				Element:span
					({
				Element:span
					'apiKey'
				Element:span
					:
				Element:span
					'API KEY'
				Element:span
					,
				Element:span
					'apiSecret'
				Element:span
					:
				Element:span
					'API SECRET'
				Element:span
					});
				Element:span
					client
				Element:span
					.
				Element:span
					getCurrentUser
				Element:span
					(
				Element:span
					function
				Element:span
					(
				Element:span
					err
				Element:span
					,
				Element:span
					user
				Element:span
					)
				Element:span
					{
				Element:span
					user
				Element:span
					.
				Element:span
					update
				Element:span
					({
				Element:span
					'name'
				Element:span
					:
				Element:span
					'James Smith'
				Element:span
					},
				Element:span
					function
				Element:span
					(
				Element:span
					err
				Element:span
					,
				Element:span
					usr
				Element:span
					)
				Element:span
					{
				Element:span
					console
				Element:span
					.
				Element:span
					log
				Element:span
					(
				Element:span
					usr
				Element:span
					);
				Element:span
					});
				Element:span
					});
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Response (200)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"data"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"9da7a204-544e-5fd1-9a12-61176c5d4cd8"
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"James Smith"
				Element:span
					,
				Element:span
				Element:span
					"username"
				Element:span
					:
				Element:span
				Element:span
					"user1"
				Element:span
					,
				Element:span
				Element:span
					"profile_location"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"profile_bio"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"profile_url"
				Element:span
					:
				Element:span
				Element:span
					"https://coinbase.com/user1"
				Element:span
					,
				Element:span
				Element:span
					"avatar_url"
				Element:span
					:
				Element:span
				Element:span
					"https://images.coinbase.com/avatar?h=vR%2FY8igBoPwuwGren5JMwvDNGpURAY%2F0nRIOgH%2FY2Qh%2BQ6nomR3qusA%2Bh6o2%0Af9rH&s=128"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"user"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/user"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Modify current user and their preferences.
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					PUT https://api.coinbase.com/v2/user
			Node:
			(type) c
			(layer)1
				Element:h3
					Scopes
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:code
					wallet:user:update
			Node:
			(type) c
			(layer)1
				Element:h3
					Arguments
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Type
				Element:th
					Required
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					name
				Element:td
					string
				Element:td
					Optional
				Element:td
					User’s public name
				Element:tr
				Element:td
					time_zone
				Element:td
					string
				Element:td
					Optional
				Element:td
					Time zone
				Element:tr
				Element:td
					native_currency
				Element:td
					string
				Element:td
					Optional
				Element:td
					Local currency used to display amounts converted from BTC
			Node:
			(type) h1
			(layer)1
				Element:h1
					Accounts
			Node:
			(type) c
			(layer)1
				Element:h2
					Account resource
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Account resource
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"2bbf394c-193b-5b2a-9155-3b4732659ede"
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"My Wallet"
				Element:span
					,
				Element:span
				Element:span
					"primary"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"wallet"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"BTC"
				Element:span
					,
				Element:span
				Element:span
					"balance"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"39.59000000"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"BTC"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"native_balance"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"395.90"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-01-31T20:49:02Z"
				Element:span
					,
				Element:span
				Element:span
					"updated_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-01-31T20:49:02Z"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"account"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/accounts/2bbf394c-193b-5b2a-9155-3b4732659ede"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Account resource represents all of a user’s accounts, including bitcoin and ethereum wallets, fiat currency accounts, and vaults. This is represented in the
				Element:code
					type
					field. It’s important to note that new types can be added over time so you want to make sure this won’t break your implementation.
			Node:
			(type) c
			(layer)1
				Element:p
					User can only have one primary account and it’s type can only be
				Element:code
					wallet
					.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Fields
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
				Element:code
					id
				Element:em
					string
				Element:td
					Resource ID
				Element:tr
				Element:td
				Element:code
					name
				Element:em
					string
				Element:td
					User or system defined name
				Element:tr
				Element:td
				Element:code
					primary
				Element:em
					boolean
				Element:td
					Primary account
				Element:tr
				Element:td
				Element:code
					type
				Element:em
					string,
				Element:a
					enumerable
				Element:td
					Account’s type. Available values:
				Element:code
					wallet
					,
				Element:code
					fiat
					,
				Element:code
					multisig
					,
				Element:code
					vault
					,
				Element:code
					multisig_vault
				Element:tr
				Element:td
				Element:code
					currency
				Element:em
					string
				Element:td
					Account’s currency
				Element:tr
				Element:td
				Element:code
					balance
				Element:em
				Element:a
					money hash
				Element:td
					Balance in BTC or ETH
				Element:tr
				Element:td
				Element:code
					native_balance
				Element:em
				Element:a
					money hash
				Element:td
					Balance in user’s native currency
				Element:tr
				Element:td
				Element:code
					created_at
				Element:em
					timestamp
				Element:td
				Element:tr
				Element:td
				Element:code
					updated_at
				Element:em
					timestamp
				Element:td
				Element:tr
				Element:td
				Element:code
					resource
				Element:em
					string, constant
				Element:strong
					account
				Element:td
				Element:tr
				Element:td
				Element:code
					resource_path
				Element:em
					string
				Element:td
			Node:
			(type) c
			(layer)1
				Element:h2
					List accounts
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl https://api.coinbase.com/v2/accounts
				Element:span
					\
					-H
				Element:span
					'Authorization: Bearer abd90df5f27a7b170cd775abf89d632b350b7c1c9d53e08b340cd9832ce52c2c'
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'coinbase/wallet'
				Element:span
					client
				Element:span
					=
				Element:span
					Coinbase
				Element:span
					::
				Element:span
					Wallet
				Element:span
					::
				Element:span
					Client
				Element:span
					.
				Element:span
					new
				Element:span
					(
				Element:span
					api_key:
				Element:span
					<
				Element:span
					api
				Element:span
					key
				Element:span
					>
				Element:span
					,
				Element:span
					api_secret:
				Element:span
					<
				Element:span
					api
				Element:span
					secret
				Element:span
					>
				Element:span
					)
				Element:span
					accounts
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					accounts
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					from
				Element:span
					coinbase.wallet.client
				Element:span
					import
				Element:span
					Client
				Element:span
					client
				Element:span
					=
				Element:span
					Client
				Element:span
					(
				Element:span
					<
				Element:span
					api_key
				Element:span
					>
				Element:span
					,
				Element:span
					<
				Element:span
					api_secret
				Element:span
					>
				Element:span
					)
				Element:span
					accounts
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					get_accounts
				Element:span
					()
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					var
				Element:span
					Client
				Element:span
					=
				Element:span
					require
				Element:span
					(
				Element:span
					'coinbase'
				Element:span
					).
				Element:span
					Client
				Element:span
					;
				Element:span
					var
				Element:span
					client
				Element:span
					=
				Element:span
					new
				Element:span
					Client
				Element:span
					({
				Element:span
					'apiKey'
				Element:span
					:
				Element:span
					'API KEY'
				Element:span
					,
				Element:span
					'apiSecret'
				Element:span
					:
				Element:span
					'API SECRET'
				Element:span
					});
				Element:span
					client
				Element:span
					.
				Element:span
					getAccounts
				Element:span
					({},
				Element:span
					function
				Element:span
					(
				Element:span
					err
				Element:span
					,
				Element:span
					accounts
				Element:span
					)
				Element:span
					{
				Element:span
					console
				Element:span
					.
				Element:span
					log
				Element:span
					(
				Element:span
					accounts
				Element:span
					);
				Element:span
					});
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example response
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"pagination"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"ending_before"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"starting_after"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"limit"
				Element:span
					:
				Element:span
				Element:span
					25
				Element:span
					,
				Element:span
				Element:span
					"order"
				Element:span
					:
				Element:span
				Element:span
					"desc"
				Element:span
					,
				Element:span
				Element:span
					"previous_uri"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"next_uri"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"data"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"58542935-67b5-56e1-a3f9-42686e07fa40"
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"My Vault"
				Element:span
					,
				Element:span
				Element:span
					"primary"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"vault"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"BTC"
				Element:span
					,
				Element:span
				Element:span
					"balance"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"4.00000000"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"BTC"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"native_balance"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"40.00"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-01-31T20:49:02Z"
				Element:span
					,
				Element:span
				Element:span
					"updated_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-01-31T20:49:02Z"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"account"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/accounts/58542935-67b5-56e1-a3f9-42686e07fa40"
				Element:span
					,
				Element:span
				Element:span
					"ready"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"2bbf394c-193b-5b2a-9155-3b4732659ede"
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"My Wallet"
				Element:span
					,
				Element:span
				Element:span
					"primary"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"wallet"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"BTC"
				Element:span
					,
				Element:span
				Element:span
					"balance"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"39.59000000"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"BTC"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"native_balance"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"395.90"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-01-31T20:49:02Z"
				Element:span
					,
				Element:span
				Element:span
					"updated_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-01-31T20:49:02Z"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"account"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/accounts/2bbf394c-193b-5b2a-9155-3b4732659ede"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					]
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Lists current user’s accounts to which the authentication method has access to.
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET https://api.coinbase.com/v2/accounts
			Node:
			(type) c
			(layer)1
				Element:h3
					Scopes
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:code
					wallet:accounts:read
			Node:
			(type) c
			(layer)1
				Element:h2
					Show an account
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl https://api.coinbase.com/v2/accounts/2bbf394c-193b-5b2a-9155-3b4732659ede
				Element:span
					\
					-H
				Element:span
					'Authorization: Bearer abd90df5f27a7b170cd775abf89d632b350b7c1c9d53e08b340cd9832ce52c2c'
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'coinbase/wallet'
				Element:span
					client
				Element:span
					=
				Element:span
					Coinbase
				Element:span
					::
				Element:span
					Wallet
				Element:span
					::
				Element:span
					Client
				Element:span
					.
				Element:span
					new
				Element:span
					(
				Element:span
					api_key:
				Element:span
					<
				Element:span
					api
				Element:span
					key
				Element:span
					>
				Element:span
					,
				Element:span
					api_secret:
				Element:span
					<
				Element:span
					api
				Element:span
					secret
				Element:span
					>
				Element:span
					)
				Element:span
					account
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					account
				Element:span
					(
				Element:span
					"2bbf394c-193b-5b2a-9155-3b4732659ede"
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					from
				Element:span
					coinbase.wallet.client
				Element:span
					import
				Element:span
					Client
				Element:span
					client
				Element:span
					=
				Element:span
					Client
				Element:span
					(
				Element:span
					<
				Element:span
					api_key
				Element:span
					>
				Element:span
					,
				Element:span
					<
				Element:span
					api_secret
				Element:span
					>
				Element:span
					)
				Element:span
					account
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					get_account
				Element:span
					(
				Element:span
					"2bbf394c-193b-5b2a-9155-3b4732659ede"
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					var
				Element:span
					Client
				Element:span
					=
				Element:span
					require
				Element:span
					(
				Element:span
					'coinbase'
				Element:span
					).
				Element:span
					Client
				Element:span
					;
				Element:span
					var
				Element:span
					client
				Element:span
					=
				Element:span
					new
				Element:span
					Client
				Element:span
					({
				Element:span
					'apiKey'
				Element:span
					:
				Element:span
					'API KEY'
				Element:span
					,
				Element:span
					'apiSecret'
				Element:span
					:
				Element:span
					'API SECRET'
				Element:span
					});
				Element:span
					client
				Element:span
					.
				Element:span
					getAccount
				Element:span
					(
				Element:span
					"2bbf394c-193b-5b2a-9155-3b4732659ede"
				Element:span
					,
				Element:span
					function
				Element:span
					(
				Element:span
					err
				Element:span
					,
				Element:span
					account
				Element:span
					)
				Element:span
					{
				Element:span
					console
				Element:span
					.
				Element:span
					log
				Element:span
					(
				Element:span
					account
				Element:span
					);
				Element:span
					});
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example response
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"data"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"2bbf394c-193b-5b2a-9155-3b4732659ede"
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"My Wallet"
				Element:span
					,
				Element:span
				Element:span
					"primary"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"wallet"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"BTC"
				Element:span
					,
				Element:span
				Element:span
					"balance"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"39.59000000"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"BTC"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"native_balance"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"395.90"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-01-31T20:49:02Z"
				Element:span
					,
				Element:span
				Element:span
					"updated_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-01-31T20:49:02Z"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"account"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/accounts/2bbf394c-193b-5b2a-9155-3b4732659ede"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Show current user’s account. To access the primary account for a given currency, a currency string (BTC or ETH) can be used instead of the account id in the URL.
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET https://api.coinbase.com/v2/accounts/:account_id
			Node:
			(type) c
			(layer)1
				Element:h3
					Scopes
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:code
					wallet:accounts:read
			Node:
			(type) c
			(layer)1
				Element:h2
					Create account
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example request
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl https://api.coinbase.com/v2/accounts
				Element:span
					\
					-X POST -H
				Element:span
					'Content-Type: application/json'
					-H
				Element:span
					'Authorization: Bearer abd90df5f27a7b170cd775abf89d632b350b7c1c9d53e08b340cd9832ce52c2c'
					-d
				Element:span
					'{"name": "New wallet"}'
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'coinbase/wallet'
				Element:span
					client
				Element:span
					=
				Element:span
					Coinbase
				Element:span
					::
				Element:span
					Wallet
				Element:span
					::
				Element:span
					Client
				Element:span
					.
				Element:span
					new
				Element:span
					(
				Element:span
					api_key:
				Element:span
					<
				Element:span
					api
				Element:span
					key
				Element:span
					>
				Element:span
					,
				Element:span
					api_secret:
				Element:span
					<
				Element:span
					api
				Element:span
					secret
				Element:span
					>
				Element:span
					)
				Element:span
					account
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					create_account
				Element:span
					({
				Element:span
					name:
				Element:span
					'New Wallet'
				Element:span
					})
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					from
				Element:span
					coinbase.wallet.client
				Element:span
					import
				Element:span
					Client
				Element:span
					client
				Element:span
					=
				Element:span
					Client
				Element:span
					(
				Element:span
					<
				Element:span
					api_key
				Element:span
					>
				Element:span
					,
				Element:span
					<
				Element:span
					api_secret
				Element:span
					>
				Element:span
					)
				Element:span
					account
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					create_account
				Element:span
					({
				Element:span
					name
				Element:span
					:
				Element:span
					'New Wallet'
				Element:span
					})
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					var
				Element:span
					Client
				Element:span
					=
				Element:span
					require
				Element:span
					(
				Element:span
					'coinbase'
				Element:span
					).
				Element:span
					Client
				Element:span
					;
				Element:span
					var
				Element:span
					client
				Element:span
					=
				Element:span
					new
				Element:span
					Client
				Element:span
					({
				Element:span
					'apiKey'
				Element:span
					:
				Element:span
					'API KEY'
				Element:span
					,
				Element:span
					'apiSecret'
				Element:span
					:
				Element:span
					'API SECRET'
				Element:span
					});
				Element:span
					client
				Element:span
					.
				Element:span
					createAccount
				Element:span
					({
				Element:span
					name
				Element:span
					:
				Element:span
					'New Wallet'
				Element:span
					},
				Element:span
					function
				Element:span
					(
				Element:span
					err
				Element:span
					,
				Element:span
					account
				Element:span
					)
				Element:span
					{
				Element:span
					console
				Element:span
					.
				Element:span
					log
				Element:span
					(
				Element:span
					account
				Element:span
					);
				Element:span
					});
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Response (201)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"data"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"82de7fcd-db72-5085-8ceb-bee19303080b"
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"New wallet"
				Element:span
					,
				Element:span
				Element:span
					"primary"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"wallet"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"BTC"
				Element:span
					,
				Element:span
				Element:span
					"balance"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"0.00000000"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"BTC"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"native_balance"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"0.00"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-03-31T15:21:58-07:00"
				Element:span
					,
				Element:span
				Element:span
					"updated_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-03-31T15:21:58-07:00"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"account"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/accounts/82de7fcd-db72-5085-8ceb-bee19303080b"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Creates a new account for user.
			Node:
			(type) c
			(layer)1
				Element:p
					To create a multisig account, visit
				Element:a
					Multisig documentation
					.
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					POST https://api.coinbase.com/v2/accounts
			Node:
			(type) c
			(layer)1
				Element:h3
					Scopes
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:code
					wallet:accounts:create
			Node:
			(type) c
			(layer)1
				Element:h3
					Arguments
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Type
				Element:th
					Required
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					name
				Element:td
					string
				Element:td
					Optional
				Element:td
					Account name
			Node:
			(type) c
			(layer)1
				Element:h2
					Set account as primary
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example request
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl https://api.coinbase.com/v2/accounts/82de7fcd-db72-5085-8ceb-bee19303080b/primary
				Element:span
					\
					-X POST -H
				Element:span
					'Authorization: Bearer abd90df5f27a7b170cd775abf89d632b350b7c1c9d53e08b340cd9832ce52c2c'
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'coinbase/wallet'
				Element:span
					client
				Element:span
					=
				Element:span
					Coinbase
				Element:span
					::
				Element:span
					Wallet
				Element:span
					::
				Element:span
					Client
				Element:span
					.
				Element:span
					new
				Element:span
					(
				Element:span
					api_key:
				Element:span
					<
				Element:span
					api
				Element:span
					key
				Element:span
					>
				Element:span
					,
				Element:span
					api_secret:
				Element:span
					<
				Element:span
					api
				Element:span
					secret
				Element:span
					>
				Element:span
					)
				Element:span
					account
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					set_primary_account
				Element:span
					(
				Element:span
					'82de7fcd-db72-5085-8ceb-bee19303080b'
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					from
				Element:span
					coinbase.wallet.client
				Element:span
					import
				Element:span
					Client
				Element:span
					client
				Element:span
					=
				Element:span
					Client
				Element:span
					(
				Element:span
					<
				Element:span
					api_key
				Element:span
					>
				Element:span
					,
				Element:span
					<
				Element:span
					api_secret
				Element:span
					>
				Element:span
					)
				Element:span
					account
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					set_primary_account
				Element:span
					(
				Element:span
					'82de7fcd-db72-5085-8ceb-bee19303080b'
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					var
				Element:span
					Client
				Element:span
					=
				Element:span
					require
				Element:span
					(
				Element:span
					'coinbase'
				Element:span
					).
				Element:span
					Client
				Element:span
					;
				Element:span
					var
				Element:span
					client
				Element:span
					=
				Element:span
					new
				Element:span
					Client
				Element:span
					({
				Element:span
					'apiKey'
				Element:span
					:
				Element:span
					'API KEY'
				Element:span
					,
				Element:span
					'apiSecret'
				Element:span
					:
				Element:span
					'API SECRET'
				Element:span
					});
				Element:span
					client
				Element:span
					.
				Element:span
					getAccount
				Element:span
					(
				Element:span
					'82de7fcd-db72-5085-8ceb-bee19303080b'
				Element:span
					,
				Element:span
					function
				Element:span
					(
				Element:span
					err
				Element:span
					,
				Element:span
					account
				Element:span
					)
				Element:span
					{
				Element:span
					account
				Element:span
					.
				Element:span
					setPrimary
				Element:span
					(
				Element:span
					function
				Element:span
					(
				Element:span
					err
				Element:span
					,
				Element:span
					acct
				Element:span
					)
				Element:span
					{
				Element:span
					console
				Element:span
					.
				Element:span
					log
				Element:span
					(
				Element:span
					acct
				Element:span
					);
				Element:span
					});
				Element:span
					});
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Response (200)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"data"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"82de7fcd-db72-5085-8ceb-bee19303080b"
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"New hot wallet"
				Element:span
					,
				Element:span
				Element:span
					"primary"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"wallet"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"BTC"
				Element:span
					,
				Element:span
				Element:span
					"balance"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"0.00000000"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"BTC"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"native_balance"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"0.00"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-03-31T15:21:58-07:00"
				Element:span
					,
				Element:span
				Element:span
					"updated_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-03-31T15:21:58-07:00"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"account"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/accounts/82de7fcd-db72-5085-8ceb-bee19303080b"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Promote an account as primary account.
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					POST https://api.coinbase.com/v2/accounts/:account_id/primary
			Node:
			(type) c
			(layer)1
				Element:h3
					Scopes
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:code
					wallet:accounts:update
			Node:
			(type) c
			(layer)1
				Element:h3
					Arguments
			Node:
			(type) c
			(layer)1
				Element:p
				Element:em
					No arguments
			Node:
			(type) c
			(layer)1
				Element:h2
					Update account
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example request
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl https://api.coinbase.com/v2/accounts/82de7fcd-db72-5085-8ceb-bee19303080b
				Element:span
					\
					-X PUT -H
				Element:span
					'Content-Type: application/json'
					-H
				Element:span
					'Authorization: Bearer abd90df5f27a7b170cd775abf89d632b350b7c1c9d53e08b340cd9832ce52c2c'
					-d
				Element:span
					'{"name": "New account name"}'
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'coinbase/wallet'
				Element:span
					client
				Element:span
					=
				Element:span
					Coinbase
				Element:span
					::
				Element:span
					Wallet
				Element:span
					::
				Element:span
					Client
				Element:span
					.
				Element:span
					new
				Element:span
					(
				Element:span
					api_key:
				Element:span
					<
				Element:span
					api
				Element:span
					key
				Element:span
					>
				Element:span
					,
				Element:span
					api_secret:
				Element:span
					<
				Element:span
					api
				Element:span
					secret
				Element:span
					>
				Element:span
					)
				Element:span
					account
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					update_account
				Element:span
					(
				Element:span
					'82de7fcd-db72-5085-8ceb-bee19303080b'
				Element:span
					,
				Element:span
					{
				Element:span
					name:
				Element:span
					'New account name'
				Element:span
					})
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					from
				Element:span
					coinbase.wallet.client
				Element:span
					import
				Element:span
					Client
				Element:span
					client
				Element:span
					=
				Element:span
					Client
				Element:span
					(
				Element:span
					<
				Element:span
					api_key
				Element:span
					>
				Element:span
					,
				Element:span
					<
				Element:span
					api_secret
				Element:span
					>
				Element:span
					)
				Element:span
					account
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					update_account
				Element:span
					(
				Element:span
					'82de7fcd-db72-5085-8ceb-bee19303080b'
				Element:span
					,
				Element:span
					{
				Element:span
					'name'
				Element:span
					:
				Element:span
					'New account name'
				Element:span
					})
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					var
				Element:span
					Client
				Element:span
					=
				Element:span
					require
				Element:span
					(
				Element:span
					'coinbase'
				Element:span
					).
				Element:span
					Client
				Element:span
					;
				Element:span
					var
				Element:span
					client
				Element:span
					=
				Element:span
					new
				Element:span
					Client
				Element:span
					({
				Element:span
					'apiKey'
				Element:span
					:
				Element:span
					'API KEY'
				Element:span
					,
				Element:span
					'apiSecret'
				Element:span
					:
				Element:span
					'API SECRET'
				Element:span
					});
				Element:span
					client
				Element:span
					.
				Element:span
					getAccount
				Element:span
					(
				Element:span
					'82de7fcd-db72-5085-8ceb-bee19303080b'
				Element:span
					,
				Element:span
					function
				Element:span
					(
				Element:span
					err
				Element:span
					,
				Element:span
					account
				Element:span
					)
				Element:span
					{
				Element:span
					account
				Element:span
					.
				Element:span
					update
				Element:span
					({
				Element:span
					'name'
				Element:span
					:
				Element:span
					'New account name'
				Element:span
					},
				Element:span
					function
				Element:span
					(
				Element:span
					err
				Element:span
					,
				Element:span
					acct
				Element:span
					)
				Element:span
					{
				Element:span
					console
				Element:span
					.
				Element:span
					log
				Element:span
					(
				Element:span
					acct
				Element:span
					);
				Element:span
					});
				Element:span
					});
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Response (200)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"data"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"82de7fcd-db72-5085-8ceb-bee19303080b"
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"New account name"
				Element:span
					,
				Element:span
				Element:span
					"primary"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"wallet"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"BTC"
				Element:span
					,
				Element:span
				Element:span
					"balance"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"0.00000000"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"BTC"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"native_balance"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"0.00"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-03-31T15:21:58-07:00"
				Element:span
					,
				Element:span
				Element:span
					"updated_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-03-31T15:21:58-07:00"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"account"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/accounts/82de7fcd-db72-5085-8ceb-bee19303080b"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Modifies user’s account.
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					PUT https://api.coinbase.com/v2/accounts/:account_id
			Node:
			(type) c
			(layer)1
				Element:h3
					Scopes
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:code
					wallet:accounts:update
			Node:
			(type) c
			(layer)1
				Element:h3
					Arguments
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Type
				Element:th
					Required
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					name
				Element:td
					string
				Element:td
					Optional
				Element:td
					Account name
			Node:
			(type) c
			(layer)1
				Element:h2
					Delete account
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example request
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl https://api.coinbase.com/v2/accounts/82de7fcd-db72-5085-8ceb-bee19303080b
				Element:span
					\
					-X DELETE -H
				Element:span
					'Authorization: Bearer abd90df5f27a7b170cd775abf89d632b350b7c1c9d53e08b340cd9832ce52c2c'
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'coinbase/wallet'
				Element:span
					client
				Element:span
					=
				Element:span
					Coinbase
				Element:span
					::
				Element:span
					Wallet
				Element:span
					::
				Element:span
					Client
				Element:span
					.
				Element:span
					new
				Element:span
					(
				Element:span
					api_key:
				Element:span
					<
				Element:span
					api
				Element:span
					key
				Element:span
					>
				Element:span
					,
				Element:span
					api_secret:
				Element:span
					<
				Element:span
					api
				Element:span
					secret
				Element:span
					>
				Element:span
					)
				Element:span
					account
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					delete_account
				Element:span
					(
				Element:span
					'82de7fcd-db72-5085-8ceb-bee19303080b'
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					from
				Element:span
					coinbase.wallet.client
				Element:span
					import
				Element:span
					Client
				Element:span
					client
				Element:span
					=
				Element:span
					Client
				Element:span
					(
				Element:span
					<
				Element:span
					api_key
				Element:span
					>
				Element:span
					,
				Element:span
					<
				Element:span
					api_secret
				Element:span
					>
				Element:span
					)
				Element:span
					account
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					delete_account
				Element:span
					(
				Element:span
					'82de7fcd-db72-5085-8ceb-bee19303080b'
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					var
				Element:span
					Client
				Element:span
					=
				Element:span
					require
				Element:span
					(
				Element:span
					'coinbase'
				Element:span
					).
				Element:span
					Client
				Element:span
					;
				Element:span
					var
				Element:span
					client
				Element:span
					=
				Element:span
					new
				Element:span
					Client
				Element:span
					({
				Element:span
					'apiKey'
				Element:span
					:
				Element:span
					'API KEY'
				Element:span
					,
				Element:span
					'apiSecret'
				Element:span
					:
				Element:span
					'API SECRET'
				Element:span
					});
				Element:span
					client
				Element:span
					.
				Element:span
					getAccount
				Element:span
					(
				Element:span
					'82de7fcd-db72-5085-8ceb-bee19303080b'
				Element:span
					,
				Element:span
					function
				Element:span
					(
				Element:span
					err
				Element:span
					,
				Element:span
					account
				Element:span
					)
				Element:span
					{
				Element:span
					account
				Element:span
					.
				Element:span
					delete
				Element:span
					(
				Element:span
					function
				Element:span
					(
				Element:span
					err
				Element:span
					,
				Element:span
					resp
				Element:span
					)
				Element:span
					{
				Element:span
					console
				Element:span
					.
				Element:span
					log
				Element:span
					(
				Element:span
					resp
				Element:span
					);
				Element:span
					});
				Element:span
					});
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Response (204 No Content)
			Node:
			(type) c
			(layer)1
				Element:p
					Removes user’s account. In order to remove an account it can’t be:
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					Primary account
				Element:li
					Account with non-zero balance
				Element:li
					Fiat account
				Element:li
					Vault with a pending withdrawal
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					DELETE https://api.coinbase.com/v2/accounts/:account_id
			Node:
			(type) c
			(layer)1
				Element:h3
					Scopes
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:code
					wallet:accounts:delete
			Node:
			(type) h1
			(layer)1
				Element:h1
					Addresses
			Node:
			(type) c
			(layer)1
				Element:h2
					Address resource
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example address resource
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"dd3183eb-af1d-5f5d-a90d-cbff946435ff"
				Element:span
					,
				Element:span
				Element:span
					"address"
				Element:span
					:
				Element:span
				Element:span
					"mswUGcPHp1YnkLCgF1TtoryqSc5E9Q8xFa"
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"One off payment"
				Element:span
					,
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-01-31T20:49:02Z"
				Element:span
					,
				Element:span
				Element:span
					"updated_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-03-31T17:25:29-07:00"
				Element:span
					,
				Element:span
				Element:span
					"network"
				Element:span
					:
				Element:span
				Element:span
					"bitcoin"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"address"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/accounts/2bbf394c-193b-5b2a-9155-3b4732659ede/addresses/dd3183eb-af1d-5f5d-a90d-cbff946435ff"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Address resource represents a bitcoin or ethereum address for an account. Account can have unlimited amount of addresses and they should be used only once.
			Node:
			(type) c
			(layer)1
				Element:p
					If you want to get notified when an address receives a new transactions, you can
				Element:a
					set up a API notification
					.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Fields
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
				Element:code
					id
				Element:em
					string
				Element:td
					Resource ID
				Element:tr
				Element:td
				Element:code
					address
				Element:em
					string
				Element:td
					Bitcoin or ethereum address
				Element:tr
				Element:td
				Element:code
					name
				Element:em
					string, optional
				Element:td
					User defined label for the address
				Element:tr
				Element:td
				Element:code
					network
				Element:em
					string
				Element:td
					Name of blockchain
				Element:tr
				Element:td
				Element:code
					created_at
				Element:em
					timestamp
				Element:td
				Element:tr
				Element:td
				Element:code
					updated_at
				Element:em
					timestamp
				Element:td
				Element:tr
				Element:td
				Element:code
					resource
				Element:em
					string, constant
				Element:strong
					address
				Element:td
				Element:tr
				Element:td
				Element:code
					resource_path
				Element:em
					string
				Element:td
			Node:
			(type) c
			(layer)1
				Element:h2
					List addresses
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example request
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl https://api.coinbase.com/v2/accounts/2bbf394c-193b-5b2a-9155-3b4732659ede/addresses
				Element:span
					\
					-H
				Element:span
					'Authorization: Bearer abd90df5f27a7b170cd775abf89d632b350b7c1c9d53e08b340cd9832ce52c2c'
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'coinbase/wallet'
				Element:span
					client
				Element:span
					=
				Element:span
					Coinbase
				Element:span
					::
				Element:span
					Wallet
				Element:span
					::
				Element:span
					Client
				Element:span
					.
				Element:span
					new
				Element:span
					(
				Element:span
					api_key:
				Element:span
					<
				Element:span
					api
				Element:span
					key
				Element:span
					>
				Element:span
					,
				Element:span
					api_secret:
				Element:span
					<
				Element:span
					api
				Element:span
					secret
				Element:span
					>
				Element:span
					)
				Element:span
					addresses
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					addresses
				Element:span
					(
				Element:span
					'2bbf394c-193b-5b2a-9155-3b4732659ede'
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					from
				Element:span
					coinbase.wallet.client
				Element:span
					import
				Element:span
					Client
				Element:span
					client
				Element:span
					=
				Element:span
					Client
				Element:span
					(
				Element:span
					<
				Element:span
					api_key
				Element:span
					>
				Element:span
					,
				Element:span
					<
				Element:span
					api_secret
				Element:span
					>
				Element:span
					)
				Element:span
					addresses
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					get_addresses
				Element:span
					(
				Element:span
					'2bbf394c-193b-5b2a-9155-3b4732659ede'
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					var
				Element:span
					Client
				Element:span
					=
				Element:span
					require
				Element:span
					(
				Element:span
					'coinbase'
				Element:span
					).
				Element:span
					Client
				Element:span
					;
				Element:span
					var
				Element:span
					client
				Element:span
					=
				Element:span
					new
				Element:span
					Client
				Element:span
					({
				Element:span
					'apiKey'
				Element:span
					:
				Element:span
					'API KEY'
				Element:span
					,
				Element:span
					'apiSecret'
				Element:span
					:
				Element:span
					'API SECRET'
				Element:span
					});
				Element:span
					client
				Element:span
					.
				Element:span
					getAccount
				Element:span
					(
				Element:span
					'82de7fcd-db72-5085-8ceb-bee19303080b'
				Element:span
					,
				Element:span
					function
				Element:span
					(
				Element:span
					err
				Element:span
					,
				Element:span
					account
				Element:span
					)
				Element:span
					{
				Element:span
					account
				Element:span
					.
				Element:span
					getAddresses
				Element:span
					(
				Element:span
					function
				Element:span
					(
				Element:span
					err
				Element:span
					,
				Element:span
					addresses
				Element:span
					)
				Element:span
					{
				Element:span
					console
				Element:span
					.
				Element:span
					log
				Element:span
					(
				Element:span
					addresses
				Element:span
					);
				Element:span
					});
				Element:span
					});
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example response
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"pagination"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"ending_before"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"starting_after"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"limit"
				Element:span
					:
				Element:span
				Element:span
					25
				Element:span
					,
				Element:span
				Element:span
					"order"
				Element:span
					:
				Element:span
				Element:span
					"desc"
				Element:span
					,
				Element:span
				Element:span
					"previous_uri"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"next_uri"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"data"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"dd3183eb-af1d-5f5d-a90d-cbff946435ff"
				Element:span
					,
				Element:span
				Element:span
					"address"
				Element:span
					:
				Element:span
				Element:span
					"mswUGcPHp1YnkLCgF1TtoryqSc5E9Q8xFa"
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-01-31T20:49:02Z"
				Element:span
					,
				Element:span
				Element:span
					"updated_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-03-31T17:25:29-07:00"
				Element:span
					,
				Element:span
				Element:span
					"network"
				Element:span
					:
				Element:span
				Element:span
					"bitcoin"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"address"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/accounts/2bbf394c-193b-5b2a-9155-3b4732659ede/addresses/dd3183eb-af1d-5f5d-a90d-cbff946435ff"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"ac5c5f15-0b1d-54f5-8912-fecbf66c2a64"
				Element:span
					,
				Element:span
				Element:span
					"address"
				Element:span
					:
				Element:span
				Element:span
					"mgSvu1z1amUFAPkB4cUg8ujaDxKAfZBt5Q"
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-03-31T17:23:52-07:00"
				Element:span
					,
				Element:span
				Element:span
					"updated_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-01-31T20:49:02Z"
				Element:span
					,
				Element:span
				Element:span
					"network"
				Element:span
					:
				Element:span
				Element:span
					"bitcoin"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"address"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/accounts/2bbf394c-193b-5b2a-9155-3b4732659ede/addresses/ac5c5f15-0b1d-54f5-8912-fecbf66c2a64"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					]
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Lists addresses for an account.
			Node:
			(type) c
			(layer)1
				Element:p
				Element:strong
					Important:
					Addresses should be considered one time use only. Please visit
				Element:a
					for instructions on how to create new addresses.
				Element:code
					POST /accounts/:id/addresses/
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET https://api.coinbase.com/v2/accounts/:account_id/addresses
			Node:
			(type) c
			(layer)1
				Element:h3
					Scopes
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:code
					wallet:addresses:read
			Node:
			(type) c
			(layer)1
				Element:h2
					Show addresss
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example request
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl https://api.coinbase.com/v2/accounts/2bbf394c-193b-5b2a-9155-3b4732659ede/addresses/dd3183eb-af1d-5f5d-a90d-cbff946435ff
				Element:span
					\
					-H
				Element:span
					'Authorization: Bearer abd90df5f27a7b170cd775abf89d632b350b7c1c9d53e08b340cd9832ce52c2c'
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'coinbase/wallet'
				Element:span
					client
				Element:span
					=
				Element:span
					Coinbase
				Element:span
					::
				Element:span
					Wallet
				Element:span
					::
				Element:span
					Client
				Element:span
					.
				Element:span
					new
				Element:span
					(
				Element:span
					api_key:
				Element:span
					<
				Element:span
					api
				Element:span
					key
				Element:span
					>
				Element:span
					,
				Element:span
					api_secret:
				Element:span
					<
				Element:span
					api
				Element:span
					secret
				Element:span
					>
				Element:span
					)
				Element:span
					address
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					address
				Element:span
					(
				Element:span
					'2bbf394c-193b-5b2a-9155-3b4732659ede'
				Element:span
					,
				Element:span
					'dd3183eb-af1d-5f5d-a90d-cbff946435ff'
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					from
				Element:span
					coinbase.wallet.client
				Element:span
					import
				Element:span
					Client
				Element:span
					client
				Element:span
					=
				Element:span
					Client
				Element:span
					(
				Element:span
					<
				Element:span
					api_key
				Element:span
					>
				Element:span
					,
				Element:span
					<
				Element:span
					api_secret
				Element:span
					>
				Element:span
					)
				Element:span
					address
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					get_address
				Element:span
					(
				Element:span
					'2bbf394c-193b-5b2a-9155-3b4732659ede'
				Element:span
					,
				Element:span
					'dd3183eb-af1d-5f5d-a90d-cbff946435ff'
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					var
				Element:span
					Client
				Element:span
					=
				Element:span
					require
				Element:span
					(
				Element:span
					'coinbase'
				Element:span
					).
				Element:span
					Client
				Element:span
					;
				Element:span
					var
				Element:span
					client
				Element:span
					=
				Element:span
					new
				Element:span
					Client
				Element:span
					({
				Element:span
					'apiKey'
				Element:span
					:
				Element:span
					'API KEY'
				Element:span
					,
				Element:span
					'apiSecret'
				Element:span
					:
				Element:span
					'API SECRET'
				Element:span
					});
				Element:span
					client
				Element:span
					.
				Element:span
					getAccount
				Element:span
					(
				Element:span
					'82de7fcd-db72-5085-8ceb-bee19303080b'
				Element:span
					,
				Element:span
					function
				Element:span
					(
				Element:span
					err
				Element:span
					,
				Element:span
					account
				Element:span
					)
				Element:span
					{
				Element:span
					account
				Element:span
					.
				Element:span
					getAddress
				Element:span
					(
				Element:span
					'dd3183eb-af1d-5f5d-a90d-cbff946435ff'
				Element:span
					,
				Element:span
					function
				Element:span
					(
				Element:span
					err
				Element:span
					,
				Element:span
					address
				Element:span
					)
				Element:span
					{
				Element:span
					console
				Element:span
					.
				Element:span
					log
				Element:span
					(
				Element:span
					address
				Element:span
					);
				Element:span
					});
				Element:span
					});
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example response
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"data"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"dd3183eb-af1d-5f5d-a90d-cbff946435ff"
				Element:span
					,
				Element:span
				Element:span
					"address"
				Element:span
					:
				Element:span
				Element:span
					"mswUGcPHp1YnkLCgF1TtoryqSc5E9Q8xFa"
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"callback_url"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-01-31T20:49:02Z"
				Element:span
					,
				Element:span
				Element:span
					"updated_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-03-31T17:25:29-07:00"
				Element:span
					,
				Element:span
				Element:span
					"network"
				Element:span
					:
				Element:span
				Element:span
					"bitcoin"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"address"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/accounts/2bbf394c-193b-5b2a-9155-3b4732659ede/addresses/dd3183eb-af1d-5f5d-a90d-cbff946435ff/"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Show an individual address for an account. A regular bitcoin or ethereum address can be used in place of
				Element:code
					address_id
					but the address has to be associated to the correct account.
			Node:
			(type) c
			(layer)1
				Element:p
				Element:strong
					Important:
					Addresses should be considered one time use only. Please visit
				Element:a
					for instructions on how to create new addresses.
				Element:code
					POST /accounts/:id/addresses/
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET https://api.coinbase.com/v2/accounts/:account_id/addresses/:address_id
			Node:
			(type) c
			(layer)1
				Element:h3
					Scopes
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:code
					wallet:addresses:read
			Node:
			(type) c
			(layer)1
				Element:h2
					List address’s transactions
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example request
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl https://api.coinbase.com/v2/accounts/2bbf394c-193b-5b2a-9155-3b4732659ede/addresses/dd3183eb-af1d-5f5d-a90d-cbff946435ff/transactions
				Element:span
					\
					-H
				Element:span
					'Authorization: Bearer abd90df5f27a7b170cd775abf89d632b350b7c1c9d53e08b340cd9832ce52c2c'
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'coinbase/wallet'
				Element:span
					client
				Element:span
					=
				Element:span
					Coinbase
				Element:span
					::
				Element:span
					Wallet
				Element:span
					::
				Element:span
					Client
				Element:span
					.
				Element:span
					new
				Element:span
					(
				Element:span
					api_key:
				Element:span
					<
				Element:span
					api
				Element:span
					key
				Element:span
					>
				Element:span
					,
				Element:span
					api_secret:
				Element:span
					<
				Element:span
					api
				Element:span
					secret
				Element:span
					>
				Element:span
					)
				Element:span
					txs
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					address_transactions
				Element:span
					(
				Element:span
					'2bbf394c-193b-5b2a-9155-3b4732659ede'
				Element:span
					,
				Element:span
					'dd3183eb-af1d-5f5d-a90d-cbff946435ff'
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					from
				Element:span
					coinbase.wallet.client
				Element:span
					import
				Element:span
					Client
				Element:span
					client
				Element:span
					=
				Element:span
					Client
				Element:span
					(
				Element:span
					<
				Element:span
					api_key
				Element:span
					>
				Element:span
					,
				Element:span
					<
				Element:span
					api_secret
				Element:span
					>
				Element:span
					)
				Element:span
					txs
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					get_address_transactions
				Element:span
					(
				Element:span
					'2bbf394c-193b-5b2a-9155-3b4732659ede'
				Element:span
					,
				Element:span
					'dd3183eb-af1d-5f5d-a90d-cbff946435ff'
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					var
				Element:span
					Client
				Element:span
					=
				Element:span
					require
				Element:span
					(
				Element:span
					'coinbase'
				Element:span
					).
				Element:span
					Client
				Element:span
					;
				Element:span
					var
				Element:span
					client
				Element:span
					=
				Element:span
					new
				Element:span
					Client
				Element:span
					({
				Element:span
					'apiKey'
				Element:span
					:
				Element:span
					'API KEY'
				Element:span
					,
				Element:span
					'apiSecret'
				Element:span
					:
				Element:span
					'API SECRET'
				Element:span
					});
				Element:span
					client
				Element:span
					.
				Element:span
					getAccount
				Element:span
					(
				Element:span
					'82de7fcd-db72-5085-8ceb-bee19303080b'
				Element:span
					,
				Element:span
					function
				Element:span
					(
				Element:span
					err
				Element:span
					,
				Element:span
					account
				Element:span
					)
				Element:span
					{
				Element:span
					account
				Element:span
					.
				Element:span
					getAddress
				Element:span
					(
				Element:span
					'dd3183eb-af1d-5f5d-a90d-cbff946435ff'
				Element:span
					,
				Element:span
					function
				Element:span
					(
				Element:span
					err
				Element:span
					,
				Element:span
					address
				Element:span
					)
				Element:span
					{
				Element:span
					console
				Element:span
					.
				Element:span
					log
				Element:span
					(
				Element:span
					address
				Element:span
					);
				Element:span
					address
				Element:span
					.
				Element:span
					getTransactions
				Element:span
					({},
				Element:span
					function
				Element:span
					(
				Element:span
					err
				Element:span
					,
				Element:span
					txs
				Element:span
					)
				Element:span
					{
				Element:span
					console
				Element:span
					.
				Element:span
					log
				Element:span
					(
				Element:span
					txs
				Element:span
					);
				Element:span
					});
				Element:span
					});
				Element:span
					});
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example response
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"pagination"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"ending_before"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"starting_after"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"limit"
				Element:span
					:
				Element:span
				Element:span
					25
				Element:span
					,
				Element:span
				Element:span
					"order"
				Element:span
					:
				Element:span
				Element:span
					"desc"
				Element:span
					,
				Element:span
				Element:span
					"previous_uri"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"next_uri"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"data"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"57ffb4ae-0c59-5430-bcd3-3f98f797a66c"
				Element:span
					,
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"send"
				Element:span
					,
				Element:span
				Element:span
					"status"
				Element:span
					:
				Element:span
				Element:span
					"completed"
				Element:span
					,
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"0.00100000"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"BTC"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"native_amount"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"0.01"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"description"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-03-11T13:13:35-07:00"
				Element:span
					,
				Element:span
				Element:span
					"updated_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-03-26T15:55:43-07:00"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"transaction"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/accounts/2bbf394c-193b-5b2a-9155-3b4732659ede/transactions/57ffb4ae-0c59-5430-bcd3-3f98f797a66c"
				Element:span
					,
				Element:span
				Element:span
					"network"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"status"
				Element:span
					:
				Element:span
				Element:span
					"off_blockchain"
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"bitcoin"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"from"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"a6b4c2df-a62c-5d68-822a-dd4e2102e703"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"user"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"instant_exchange"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
				Element:span
					}
				Element:span
				Element:span
					]
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					List transactions that have been sent to a specific address. A regular bitcoin or ethereum address can be used in place of
				Element:code
					address_id
					but the address has to be associated to the correct account.
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET https://api.coinbase.com/v2/accounts/:account_id/addresses/:address_id/transactions
			Node:
			(type) c
			(layer)1
				Element:h3
					Scopes
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:code
					wallet:transactions:read
			Node:
			(type) c
			(layer)1
				Element:h2
					Create address
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example request
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl https://api.coinbase.com/v2/accounts/82de7fcd-db72-5085-8ceb-bee19303080b/addresses
				Element:span
					\
					-X POST
				Element:span
					\
					-H
				Element:span
					'Content-Type: application/json'
				Element:span
					\
					-H
				Element:span
					'Authorization: Bearer abd90df5f27a7b170cd775abf89d632b350b7c1c9d53e08b340cd9832ce52c2c'
				Element:span
					\
					-d
				Element:span
					'{"name": "New receive address"}'
				Element:span
					}
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'coinbase/wallet'
				Element:span
					client
				Element:span
					=
				Element:span
					Coinbase
				Element:span
					::
				Element:span
					Wallet
				Element:span
					::
				Element:span
					Client
				Element:span
					.
				Element:span
					new
				Element:span
					(
				Element:span
					api_key:
				Element:span
					<
				Element:span
					api
				Element:span
					key
				Element:span
					>
				Element:span
					,
				Element:span
					api_secret:
				Element:span
					<
				Element:span
					api
				Element:span
					secret
				Element:span
					>
				Element:span
					)
				Element:span
					address
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					create_address
				Element:span
					(
				Element:span
					'2bbf394c-193b-5b2a-9155-3b4732659ede'
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					from
				Element:span
					coinbase.wallet.client
				Element:span
					import
				Element:span
					Client
				Element:span
					client
				Element:span
					=
				Element:span
					Client
				Element:span
					(
				Element:span
					<
				Element:span
					api_key
				Element:span
					>
				Element:span
					,
				Element:span
					<
				Element:span
					api_secret
				Element:span
					>
				Element:span
					)
				Element:span
					address
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					create_address
				Element:span
					(
				Element:span
					'2bbf394c-193b-5b2a-9155-3b4732659ede'
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					var
				Element:span
					Client
				Element:span
					=
				Element:span
					require
				Element:span
					(
				Element:span
					'coinbase'
				Element:span
					).
				Element:span
					Client
				Element:span
					;
				Element:span
					var
				Element:span
					client
				Element:span
					=
				Element:span
					new
				Element:span
					Client
				Element:span
					({
				Element:span
					'apiKey'
				Element:span
					:
				Element:span
					'API KEY'
				Element:span
					,
				Element:span
					'apiSecret'
				Element:span
					:
				Element:span
					'API SECRET'
				Element:span
					});
				Element:span
					client
				Element:span
					.
				Element:span
					getAccount
				Element:span
					(
				Element:span
					'82de7fcd-db72-5085-8ceb-bee19303080b'
				Element:span
					,
				Element:span
					function
				Element:span
					(
				Element:span
					err
				Element:span
					,
				Element:span
					account
				Element:span
					)
				Element:span
					{
				Element:span
					account
				Element:span
					.
				Element:span
					createAddress
				Element:span
					(
				Element:span
					null
				Element:span
					,
				Element:span
					function
				Element:span
					(
				Element:span
					err
				Element:span
					,
				Element:span
					address
				Element:span
					)
				Element:span
					{
				Element:span
					console
				Element:span
					.
				Element:span
					log
				Element:span
					(
				Element:span
					address
				Element:span
					);
				Element:span
					});
				Element:span
					});
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Response (201)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"data"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"dd3183eb-af1d-5f5d-a90d-cbff946435ff"
				Element:span
					,
				Element:span
				Element:span
					"address"
				Element:span
					:
				Element:span
				Element:span
					"mswUGcPHp1YnkLCgF1TtoryqSc5E9Q8xFa"
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"New receive address"
				Element:span
					,
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-01-31T20:49:02Z"
				Element:span
					,
				Element:span
				Element:span
					"updated_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-03-31T17:25:29-07:00"
				Element:span
					,
				Element:span
				Element:span
					"network"
				Element:span
					:
				Element:span
				Element:span
					"bitcoin"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"address"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/accounts/2bbf394c-193b-5b2a-9155-3b4732659ede/addresses/dd3183eb-af1d-5f5d-a90d-cbff946435ff"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Creates a new address for an account. As all the arguments are optinal, it’s possible just to do a empty
				Element:code
					POST
					which will create a new address. This is handy if you need to create new receive addresses for an account on-demand.
			Node:
			(type) c
			(layer)1
				Element:p
					Addresses can be created for all account types. With fiat accounts, funds will be received with
				Element:a
					Instant Exchange
					.
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					POST https://api.coinbase.com/v2/accounts/:account_id/addresses
			Node:
			(type) c
			(layer)1
				Element:h3
					Scopes
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:code
					wallet:addresses:create
			Node:
			(type) c
			(layer)1
				Element:h3
					Arguments
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Type
				Element:th
					Required
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					name
				Element:td
					string
				Element:td
					Optional
				Element:td
					Address label
			Node:
			(type) h1
			(layer)1
				Element:h1
					Transactions
			Node:
			(type) c
			(layer)1
				Element:h2
					Transaction resource
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example transaction resource (send)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"57ffb4ae-0c59-5430-bcd3-3f98f797a66c"
				Element:span
					,
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"send"
				Element:span
					,
				Element:span
				Element:span
					"status"
				Element:span
					:
				Element:span
				Element:span
					"completed"
				Element:span
					,
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"-0.00100000"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"BTC"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"native_amount"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"-0.01"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"description"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-03-11T13:13:35-07:00"
				Element:span
					,
				Element:span
				Element:span
					"updated_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-03-26T15:55:43-07:00"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"transaction"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/accounts/2bbf394c-193b-5b2a-9155-3b4732659ede/transactions/57ffb4ae-0c59-5430-bcd3-3f98f797a66c"
				Element:span
					,
				Element:span
				Element:span
					"network"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"status"
				Element:span
					:
				Element:span
				Element:span
					"off_blockchain"
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"bitcoin"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"to"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"a6b4c2df-a62c-5d68-822a-dd4e2102e703"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"user"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/users/a6b4c2df-a62c-5d68-822a-dd4e2102e703"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"instant_exchange"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"details"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"title"
				Element:span
					:
				Element:span
				Element:span
					"Sent bitcoin"
				Element:span
					,
				Element:span
				Element:span
					"subtitle"
				Element:span
					:
				Element:span
				Element:span
					"to User 2"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example transaction resource (buy)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"8250fe29-f5ef-5fc5-8302-0fbacf6be51e"
				Element:span
					,
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"buy"
				Element:span
					,
				Element:span
				Element:span
					"status"
				Element:span
					:
				Element:span
				Element:span
					"pending"
				Element:span
					,
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"1.00000000"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"BTC"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"native_amount"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"10.00"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"description"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-03-26T13:42:00-07:00"
				Element:span
					,
				Element:span
				Element:span
					"updated_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-03-26T15:55:45-07:00"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"transaction"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/accounts/2bbf394c-193b-5b2a-9155-3b4732659ede/transactions/8250fe29-f5ef-5fc5-8302-0fbacf6be51e"
				Element:span
					,
				Element:span
				Element:span
					"buy"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"5c8216e7-318a-50a5-91aa-2f2cfddfdaab"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"buy"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/accounts/2bbf394c-193b-5b2a-9155-3b4732659ede/buys/5c8216e7-318a-50a5-91aa-2f2cfddfdaab"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"instant_exchange"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"details"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"title"
				Element:span
					:
				Element:span
				Element:span
					"Bought bitcoin"
				Element:span
					,
				Element:span
				Element:span
					"subtitle"
				Element:span
					:
				Element:span
				Element:span
					"using Capital One Bank"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Transaction resource represents an event on the account. It can be either negative or positive on
				Element:code
					amount
					depending if it credited or debited funds on the account. If there’s another party, the transaction will have either
				Element:code
					to
					or
				Element:code
					from
					field. For certain types of transactions, also linked resources with
				Element:code
					type
					value as field will be included in the payload (example
				Element:code
					buy
					and
				Element:code
					sell
					). All these fields are
				Element:a
					expandable
					.
			Node:
			(type) c
			(layer)1
				Element:p
				Element:strong
					Important:
					As transactions represent multiple objects, resources with new
				Element:code
					type
					values can and will be added over time. Also new
				Element:code
					status
					values might be added. See more about
				Element:a
					enumerable values
					.
			Node:
			(type) c
			(layer)1
				Element:p
					Transaction types currently available:
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:code
					send
					- Sent bitcoin/ethereum to a bitcoin/ethereum address or email (
				Element:a
					documentation
					)
				Element:li
				Element:code
					request
					- Requested bitcoin/ethereum from a user or email (
				Element:a
					documentation
					)
				Element:li
				Element:code
					transfer
					- Transfered funds between two of a user’s accounts (
				Element:a
					documentation
					)
				Element:li
				Element:code
					buy
					- Bought bitcoin or ethereum (
				Element:a
					documentation
					)
				Element:li
				Element:code
					sell
					- Sold bitcoin or ethereum (
				Element:a
					documentation
					)
				Element:li
				Element:code
					fiat_deposit
					- Deposited funds into a fiat account from a financial institution (
				Element:a
					documentation
					)
				Element:li
				Element:code
					fiat_withdrawal
					- Withdrew funds from a fiat account (
				Element:a
					documentation
					)
				Element:li
				Element:code
					exchange_deposit
					- Deposited money into
				Element:a
					GDAX
				Element:li
				Element:code
					exchange_withdrawal
					- Withdrew money from
				Element:a
					GDAX
				Element:li
				Element:code
					vault_withdrawal
					- Withdrew funds from a vault account
				Element:li
				Element:em
					More to be added soon
			Node:
			(type) c
			(layer)1
				Element:p
					Transactions statuses vary based on the type of the transaction. As both types and statuses can change over time, we recommend that you use
				Element:code
					details
					field for constructing human readable descriptions of transactions. Currently available statuses are:
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:code
					pending
					- Pending transactions (e.g. a send or a buy)
				Element:li
				Element:code
					completed
					- Completed transactions (e.g. a send or a buy)
				Element:li
				Element:code
					failed
					- Failed transactions (e.g. failed buy)
				Element:li
				Element:code
					expired
					- Conditional transaction expired due to external factors
				Element:li
				Element:code
					canceled
					- Transaction was canceled
				Element:li
				Element:code
					waiting_for_signature
					- Vault withdrawal is waiting for approval
				Element:li
				Element:code
					waiting_for_clearing
					- Vault withdrawal is waiting to be cleared
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Fields
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
				Element:code
					id
				Element:em
					string
				Element:td
					Resource ID
				Element:tr
				Element:td
				Element:code
					type
				Element:em
					string,
				Element:a
					enumerable
				Element:td
					Transaction type
				Element:tr
				Element:td
				Element:code
					status
				Element:em
					string,
				Element:a
					enumerable
				Element:td
					Status
				Element:tr
				Element:td
				Element:code
					amount
				Element:em
				Element:a
					money hash
				Element:td
					Amount in bitcoin or ethereum
				Element:tr
				Element:td
				Element:code
					native_amount
				Element:em
				Element:a
					money hash
				Element:td
					Amount in user’s native currency
				Element:tr
				Element:td
				Element:code
					description
				Element:em
					string
				Element:td
					User defined description
				Element:tr
				Element:td
				Element:code
					instant_exchange
				Element:em
					boolen
				Element:td
					Indicator if the transaction was instant exchanged (received into a bitcoin address for a fiat account)
				Element:tr
				Element:td
				Element:code
					created_at
				Element:em
					timestamp
				Element:td
				Element:tr
				Element:td
				Element:code
					updated_at
				Element:em
					timestamp
				Element:td
				Element:tr
				Element:td
				Element:code
					resource
				Element:em
					string, constant
				Element:strong
					transaction
				Element:td
				Element:tr
				Element:td
				Element:code
					resource_path
				Element:em
					string
				Element:td
				Element:tr
				Element:td
				Element:code
					details
				Element:em
					hash
				Element:td
					Detailed information about the transaction
				Element:tr
				Element:td
				Element:code
					network
				Element:em
					hash, optional
				Element:td
					Information about bitcoin or ethereum network including network transaction hash if transaction was on-blockchain. Only available for certain types of transactions
				Element:tr
				Element:td
				Element:code
					to
				Element:em
					hash, optional
				Element:td
					The receiving party of a debit transaction. Usually another resource but can also be another type like email. Only available for certain types of transactions
				Element:tr
				Element:td
				Element:code
					from
				Element:em
					hash, optional
				Element:td
					The originating party of a credit transaction. Usually another resource but can also be another type like bitcoin network. Only available for certain types of transactions
				Element:tr
				Element:td
				Element:code
					address
				Element:em
					hash, optional
				Element:td
					Associated bitcoin or ethereum address for received payment
				Element:tr
				Element:td
				Element:code
					application
				Element:em
					hash, optional
				Element:td
					Associated OAuth2 application
			Node:
			(type) c
			(layer)1
				Element:h2
					List transactions
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example request
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl https://api.coinbase.com/v2/accounts/2bbf394c-193b-5b2a-9155-3b4732659ede/transactions / -H
				Element:span
					'Authorization: Bearer abd90df5f27a7b170cd775abf89d632b350b7c1c9d53e08b340cd9832ce52c2c'
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'coinbase/wallet'
				Element:span
					client
				Element:span
					=
				Element:span
					Coinbase
				Element:span
					::
				Element:span
					Wallet
				Element:span
					::
				Element:span
					Client
				Element:span
					.
				Element:span
					new
				Element:span
					(
				Element:span
					api_key:
				Element:span
					<
				Element:span
					api
				Element:span
					key
				Element:span
					>
				Element:span
					,
				Element:span
					api_secret:
				Element:span
					<
				Element:span
					api
				Element:span
					secret
				Element:span
					>
				Element:span
					)
				Element:span
					txs
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					transactions
				Element:span
					(
				Element:span
					'2bbf394c-193b-5b2a-9155-3b4732659ede'
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					from
				Element:span
					coinbase.wallet.client
				Element:span
					import
				Element:span
					Client
				Element:span
					client
				Element:span
					=
				Element:span
					Client
				Element:span
					(
				Element:span
					<
				Element:span
					api_key
				Element:span
					>
				Element:span
					,
				Element:span
					<
				Element:span
					api_secret
				Element:span
					>
				Element:span
					)
				Element:span
					txs
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					get_transactions
				Element:span
					(
				Element:span
					'2bbf394c-193b-5b2a-9155-3b4732659ede'
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					var
				Element:span
					Client
				Element:span
					=
				Element:span
					require
				Element:span
					(
				Element:span
					'coinbase'
				Element:span
					).
				Element:span
					Client
				Element:span
					;
				Element:span
					var
				Element:span
					client
				Element:span
					=
				Element:span
					new
				Element:span
					Client
				Element:span
					({
				Element:span
					'apiKey'
				Element:span
					:
				Element:span
					'API KEY'
				Element:span
					,
				Element:span
					'apiSecret'
				Element:span
					:
				Element:span
					'API SECRET'
				Element:span
					});
				Element:span
					client
				Element:span
					.
				Element:span
					getAccount
				Element:span
					(
				Element:span
					'2bbf394c-193b-5b2a-9155-3b4732659ede'
				Element:span
					,
				Element:span
					function
				Element:span
					(
				Element:span
					err
				Element:span
					,
				Element:span
					account
				Element:span
					)
				Element:span
					{
				Element:span
					account
				Element:span
					.
				Element:span
					getTransactions
				Element:span
					(
				Element:span
					function
				Element:span
					(
				Element:span
					err
				Element:span
					,
				Element:span
					txs
				Element:span
					)
				Element:span
					{
				Element:span
					console
				Element:span
					.
				Element:span
					log
				Element:span
					(
				Element:span
					txs
				Element:span
					);
				Element:span
					});
				Element:span
					});
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example response (200)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"pagination"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"ending_before"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"starting_after"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"limit"
				Element:span
					:
				Element:span
				Element:span
					25
				Element:span
					,
				Element:span
				Element:span
					"order"
				Element:span
					:
				Element:span
				Element:span
					"desc"
				Element:span
					,
				Element:span
				Element:span
					"previous_uri"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"next_uri"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"data"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"4117f7d6-5694-5b36-bc8f-847509850ea4"
				Element:span
					,
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"buy"
				Element:span
					,
				Element:span
				Element:span
					"status"
				Element:span
					:
				Element:span
				Element:span
					"pending"
				Element:span
					,
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"486.34313725"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"BTC"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"native_amount"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"4863.43"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"description"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-03-26T23:44:08-07:00"
				Element:span
					,
				Element:span
				Element:span
					"updated_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-03-26T23:44:08-07:00"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"transaction"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/accounts/2bbf394c-193b-5b2a-9155-3b4732659ede/transactions/4117f7d6-5694-5b36-bc8f-847509850ea4"
				Element:span
					,
				Element:span
				Element:span
					"buy"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"9e14d574-30fa-5d85-b02c-6be0d851d61d"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"buy"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/accounts/2bbf394c-193b-5b2a-9155-3b4732659ede/buys/9e14d574-30fa-5d85-b02c-6be0d851d61d"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"details"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"title"
				Element:span
					:
				Element:span
				Element:span
					"Bought bitcoin"
				Element:span
					,
				Element:span
				Element:span
					"subtitle"
				Element:span
					:
				Element:span
				Element:span
					"using Capital One Bank"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"005e55d1-f23a-5d1e-80a4-72943682c055"
				Element:span
					,
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"request"
				Element:span
					,
				Element:span
				Element:span
					"status"
				Element:span
					:
				Element:span
				Element:span
					"pending"
				Element:span
					,
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"0.10000000"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"BTC"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"native_amount"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"1.00"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"description"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-03-24T18:32:35-07:00"
				Element:span
					,
				Element:span
				Element:span
					"updated_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-01-31T20:49:02Z"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"transaction"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/accounts/2bbf394c-193b-5b2a-9155-3b4732659ede/transactions/005e55d1-f23a-5d1e-80a4-72943682c055"
				Element:span
					,
				Element:span
				Element:span
					"to"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"email"
				Element:span
					,
				Element:span
				Element:span
					"email"
				Element:span
					:
				Element:span
				Element:span
					"rb@coinbase.com"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"details"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"title"
				Element:span
					:
				Element:span
				Element:span
					"Requested bitcoin"
				Element:span
					,
				Element:span
				Element:span
					"subtitle"
				Element:span
					:
				Element:span
				Element:span
					"from rb@coinbase.com"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"ff01bbc6-c4ad-59e1-9601-e87b5b709458"
				Element:span
					,
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"transfer"
				Element:span
					,
				Element:span
				Element:span
					"status"
				Element:span
					:
				Element:span
				Element:span
					"completed"
				Element:span
					,
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"-5.00000000"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"BTC"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"native_amount"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"-50.00"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"description"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-03-12T15:51:38-07:00"
				Element:span
					,
				Element:span
				Element:span
					"updated_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-01-31T20:49:02Z"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"transaction"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/accounts/2bbf394c-193b-5b2a-9155-3b4732659ede/transactions/ff01bbc6-c4ad-59e1-9601-e87b5b709458"
				Element:span
					,
				Element:span
				Element:span
					"to"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"58542935-67b5-56e1-a3f9-42686e07fa40"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"account"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/accounts/58542935-67b5-56e1-a3f9-42686e07fa40"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"details"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"title"
				Element:span
					:
				Element:span
				Element:span
					"Transfered bitcoin"
				Element:span
					,
				Element:span
				Element:span
					"subtitle"
				Element:span
					:
				Element:span
				Element:span
					"to Secondary Account"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"57ffb4ae-0c59-5430-bcd3-3f98f797a66c"
				Element:span
					,
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"send"
				Element:span
					,
				Element:span
				Element:span
					"status"
				Element:span
					:
				Element:span
				Element:span
					"completed"
				Element:span
					,
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"-0.00100000"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"BTC"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"native_amount"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"-0.01"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"description"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-03-11T13:13:35-07:00"
				Element:span
					,
				Element:span
				Element:span
					"updated_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-03-26T15:55:43-07:00"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"transaction"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/accounts/2bbf394c-193b-5b2a-9155-3b4732659ede/transactions/57ffb4ae-0c59-5430-bcd3-3f98f797a66c"
				Element:span
					,
				Element:span
				Element:span
					"network"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"status"
				Element:span
					:
				Element:span
				Element:span
					"off_blockchain"
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"bitcoin"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"to"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"a6b4c2df-a62c-5d68-822a-dd4e2102e703"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"user"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/users/a6b4c2df-a62c-5d68-822a-dd4e2102e703"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"details"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"title"
				Element:span
					:
				Element:span
				Element:span
					"Send bitcoin"
				Element:span
					,
				Element:span
				Element:span
					"subtitle"
				Element:span
					:
				Element:span
				Element:span
					"to User 2"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
				Element:span
					]
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Lists account’s transactions. See
				Element:a
					transaction resource
					for more information.
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET https://api.coinbase.com/v2/accounts/:account_id/transactions
			Node:
			(type) c
			(layer)1
				Element:h3
					Scopes
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:code
					wallet:transactions:read
			Node:
			(type) c
			(layer)1
				Element:h2
					Show a transaction
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example request
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl https://api.coinbase.com/v2/accounts/2bbf394c-193b-5b2a-9155-3b4732659ede/transactions/57ffb4ae-0c59-5430-bcd3-3f98f797a66c / -H
				Element:span
					'Authorization: Bearer abd90df5f27a7b170cd775abf89d632b350b7c1c9d53e08b340cd9832ce52c2c'
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'coinbase/wallet'
				Element:span
					client
				Element:span
					=
				Element:span
					Coinbase
				Element:span
					::
				Element:span
					Wallet
				Element:span
					::
				Element:span
					Client
				Element:span
					.
				Element:span
					new
				Element:span
					(
				Element:span
					api_key:
				Element:span
					<
				Element:span
					api
				Element:span
					key
				Element:span
					>
				Element:span
					,
				Element:span
					api_secret:
				Element:span
					<
				Element:span
					api
				Element:span
					secret
				Element:span
					>
				Element:span
					)
				Element:span
					tx
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					transaction
				Element:span
					(
				Element:span
					'2bbf394c-193b-5b2a-9155-3b4732659ede'
				Element:span
					,
				Element:span
					'57ffb4ae-0c59-5430-bcd3-3f98f797a66c'
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					from
				Element:span
					coinbase.wallet.client
				Element:span
					import
				Element:span
					Client
				Element:span
					client
				Element:span
					=
				Element:span
					Client
				Element:span
					(
				Element:span
					<
				Element:span
					api_key
				Element:span
					>
				Element:span
					,
				Element:span
					<
				Element:span
					api_secret
				Element:span
					>
				Element:span
					)
				Element:span
					tx
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					get_transaction
				Element:span
					(
				Element:span
					'2bbf394c-193b-5b2a-9155-3b4732659ede'
				Element:span
					,
				Element:span
					'57ffb4ae-0c59-5430-bcd3-3f98f797a66c'
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					var
				Element:span
					Client
				Element:span
					=
				Element:span
					require
				Element:span
					(
				Element:span
					'coinbase'
				Element:span
					).
				Element:span
					Client
				Element:span
					;
				Element:span
					var
				Element:span
					client
				Element:span
					=
				Element:span
					new
				Element:span
					Client
				Element:span
					({
				Element:span
					'apiKey'
				Element:span
					:
				Element:span
					'API KEY'
				Element:span
					,
				Element:span
					'apiSecret'
				Element:span
					:
				Element:span
					'API SECRET'
				Element:span
					});
				Element:span
					client
				Element:span
					.
				Element:span
					getAccount
				Element:span
					(
				Element:span
					'2bbf394c-193b-5b2a-9155-3b4732659ede'
				Element:span
					,
				Element:span
					function
				Element:span
					(
				Element:span
					err
				Element:span
					,
				Element:span
					account
				Element:span
					)
				Element:span
					{
				Element:span
					account
				Element:span
					.
				Element:span
					getTransaction
				Element:span
					(
				Element:span
					'57ffb4ae-0c59-5430-bcd3-3f98f797a66c'
				Element:span
					,
				Element:span
					function
				Element:span
					(
				Element:span
					err
				Element:span
					,
				Element:span
					tx
				Element:span
					)
				Element:span
					{
				Element:span
					console
				Element:span
					.
				Element:span
					log
				Element:span
					(
				Element:span
					tx
				Element:span
					);
				Element:span
					});
				Element:span
					});
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example response (200)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"data"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"57ffb4ae-0c59-5430-bcd3-3f98f797a66c"
				Element:span
					,
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"send"
				Element:span
					,
				Element:span
				Element:span
					"status"
				Element:span
					:
				Element:span
				Element:span
					"completed"
				Element:span
					,
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"-0.00100000"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"BTC"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"native_amount"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"-0.01"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"description"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-03-11T13:13:35-07:00"
				Element:span
					,
				Element:span
				Element:span
					"updated_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-03-26T15:55:43-07:00"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"transaction"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/accounts/2bbf394c-193b-5b2a-9155-3b4732659ede/transactions/57ffb4ae-0c59-5430-bcd3-3f98f797a66c"
				Element:span
					,
				Element:span
				Element:span
					"network"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"status"
				Element:span
					:
				Element:span
				Element:span
					"off_blockchain"
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"bitcoin"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"to"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"a6b4c2df-a62c-5d68-822a-dd4e2102e703"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"user"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/users/a6b4c2df-a62c-5d68-822a-dd4e2102e703"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"details"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"title"
				Element:span
					:
				Element:span
				Element:span
					"Send bitcoin"
				Element:span
					,
				Element:span
				Element:span
					"subtitle"
				Element:span
					:
				Element:span
				Element:span
					"to User 2"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Show an individual transaction for an account. See
				Element:a
					transaction resource
					for more information.
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET https://api.coinbase.com/v2/accounts/:account_id/transactions/:transaction_id
			Node:
			(type) c
			(layer)1
				Element:h3
					Scopes
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:code
					wallet:transactions:read
			Node:
			(type) c
			(layer)1
				Element:h2
					Send money
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example request
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl https://api.coinbase.com/v2/accounts/2bbf394c-193b-5b2a-9155-3b4732659ede/transactions / -X POST
				Element:span
					\
					-H
				Element:span
					'Content-Type: application/json'
				Element:span
					\
					-H
				Element:span
					'Authorization: Bearer abd90df5f27a7b170cd775abf89d632b350b7c1c9d53e08b340cd9832ce52c2c'
				Element:span
					\
					-d
				Element:span
					'{ "type": "send", "to": "1AUJ8z5RuHRTqD1eikyfUUetzGmdWLGkpT", "amount": "0.1", "currency": "BTC", "idem": "9316dd16-0c05" }'
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'coinbase/wallet'
				Element:span
					client
				Element:span
					=
				Element:span
					Coinbase
				Element:span
					::
				Element:span
					Wallet
				Element:span
					::
				Element:span
					Client
				Element:span
					.
				Element:span
					new
				Element:span
					(
				Element:span
					api_key:
				Element:span
					<
				Element:span
					api
				Element:span
					key
				Element:span
					>
				Element:span
					,
				Element:span
					api_secret:
				Element:span
					<
				Element:span
					api
				Element:span
					secret
				Element:span
					>
				Element:span
					)
				Element:span
					tx
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					send
				Element:span
					(
				Element:span
					'2bbf394c-193b-5b2a-9155-3b4732659ede'
				Element:span
					,
				Element:span
					{
				Element:span
					'to'
				Element:span
					=>
				Element:span
					'1AUJ8z5RuHRTqD1eikyfUUetzGmdWLGkpT'
				Element:span
					,
				Element:span
					'amount'
				Element:span
					=>
				Element:span
					'0.1'
				Element:span
					,
				Element:span
					'currency'
				Element:span
					=>
				Element:span
					'BTC'
				Element:span
					,
				Element:span
					'idem'
				Element:span
					=>
				Element:span
					'9316dd16-0c05'
				Element:span
					})
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					from
				Element:span
					coinbase.wallet.client
				Element:span
					import
				Element:span
					Client
				Element:span
					client
				Element:span
					=
				Element:span
					Client
				Element:span
					(
				Element:span
					<
				Element:span
					api_key
				Element:span
					>
				Element:span
					,
				Element:span
					<
				Element:span
					api_secret
				Element:span
					>
				Element:span
					)
				Element:span
					tx
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					send_money
				Element:span
					(
				Element:span
					'2bbf394c-193b-5b2a-9155-3b4732659ede'
				Element:span
					,
				Element:span
					{
				Element:span
					'to'
				Element:span
					:
				Element:span
					'1AUJ8z5RuHRTqD1eikyfUUetzGmdWLGkpT'
				Element:span
					,
				Element:span
					'amount'
				Element:span
					:
				Element:span
					'0.1'
				Element:span
					,
				Element:span
					'currency'
				Element:span
					:
				Element:span
					'BTC'
				Element:span
					,
				Element:span
					'idem'
				Element:span
					:
				Element:span
					'9316dd16-0c05'
				Element:span
					})
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					var
				Element:span
					Client
				Element:span
					=
				Element:span
					require
				Element:span
					(
				Element:span
					'coinbase'
				Element:span
					).
				Element:span
					Client
				Element:span
					;
				Element:span
					var
				Element:span
					client
				Element:span
					=
				Element:span
					new
				Element:span
					Client
				Element:span
					({
				Element:span
					'apiKey'
				Element:span
					:
				Element:span
					'API KEY'
				Element:span
					,
				Element:span
					'apiSecret'
				Element:span
					:
				Element:span
					'API SECRET'
				Element:span
					});
				Element:span
					client
				Element:span
					.
				Element:span
					getAccount
				Element:span
					(
				Element:span
					'2bbf394c-193b-5b2a-9155-3b4732659ede'
				Element:span
					,
				Element:span
					function
				Element:span
					(
				Element:span
					err
				Element:span
					,
				Element:span
					account
				Element:span
					)
				Element:span
					{
				Element:span
					account
				Element:span
					.
				Element:span
					sendMoney
				Element:span
					({
				Element:span
					'to'
				Element:span
					:
				Element:span
					'1AUJ8z5RuHRTqD1eikyfUUetzGmdWLGkpT'
				Element:span
					,
				Element:span
					'amount'
				Element:span
					:
				Element:span
					'0.1'
				Element:span
					,
				Element:span
					'currency'
				Element:span
					:
				Element:span
					'BTC'
				Element:span
					,
				Element:span
					'idem'
				Element:span
					:
				Element:span
					'9316dd16-0c05'
				Element:span
					},
				Element:span
					function
				Element:span
					(
				Element:span
					err
				Element:span
					,
				Element:span
					tx
				Element:span
					)
				Element:span
					{
				Element:span
					console
				Element:span
					.
				Element:span
					log
				Element:span
					(
				Element:span
					tx
				Element:span
					);
				Element:span
					});
				Element:span
					});
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Response (201)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"data"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"3c04e35e-8e5a-5ff1-9155-00675db4ac02"
				Element:span
					,
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"send"
				Element:span
					,
				Element:span
				Element:span
					"status"
				Element:span
					:
				Element:span
				Element:span
					"pending"
				Element:span
					,
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"-0.10000000"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"BTC"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"native_amount"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"-1.00"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"description"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-01-31T20:49:02Z"
				Element:span
					,
				Element:span
				Element:span
					"updated_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-03-31T17:25:29-07:00"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"transaction"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/accounts/2bbf394c-193b-5b2a-9155-3b4732659ede/transactions/3c04e35e-8e5a-5ff1-9155-00675db4ac02"
				Element:span
					,
				Element:span
				Element:span
					"network"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"status"
				Element:span
					:
				Element:span
				Element:span
					"unconfirmed"
				Element:span
					,
				Element:span
				Element:span
					"hash"
				Element:span
					:
				Element:span
				Element:span
					"463397c87beddd9a61ade61359a13adc9efea26062191fe07147037bce7f33ed"
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"bitcoin"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"to"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"bitcoin_address"
				Element:span
					,
				Element:span
				Element:span
					"address"
				Element:span
					:
				Element:span
				Element:span
					"1AUJ8z5RuHRTqD1eikyfUUetzGmdWLGkpT"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"details"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"title"
				Element:span
					:
				Element:span
				Element:span
					"Send bitcoin"
				Element:span
					,
				Element:span
				Element:span
					"subtitle"
				Element:span
					:
				Element:span
				Element:span
					"to User 2"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Send funds to a bitcoin address, ethereum address, or email address. No transaction fees are required for off blockchain bitcoin transactions and Coinbase waives fees for on-blockchain transactions greater than 0.0001 BTC, up to a threshold of 25 per day.
				Element:a
					Read more
					about free transactions. No transaction fees are required for ethereum transactions.
			Node:
			(type) c
			(layer)1
				Element:p
					It’s recommended to always supply a unique
				Element:code
					idem
					field for each transaction. This prevents you from sending the same transaction twice if there has been an unexpected network outage or other issue.
			Node:
			(type) c
			(layer)1
				Element:p
					When used with OAuth2 authentication, this endpoint requires
				Element:a
					two factor authentication
					unless used with
				Element:code
					wallet:transactions:send:bypass-2fa
					scope.
			Node:
			(type) c
			(layer)1
				Element:p
					If the user is able to buy bitcoin, they can send funds from their fiat account using
				Element:a
					instant exchange
					feature. Buy fees will be included in the created transaction and the recipient will receive the user defined amount.
			Node:
			(type) c
			(layer)1
				Element:p
					To create a multisig transaction, visit
				Element:a
					Multisig documentation
					.
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					POST https://api.coinbase.com/v2/accounts/:account_id/transactions
			Node:
			(type) c
			(layer)1
				Element:h3
					Scopes
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:code
					wallet:transactions:send
			Node:
			(type) c
			(layer)1
				Element:h3
					Arguments
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Type
				Element:th
					Required
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
				Element:code
					type
				Element:em
					constant
				Element:strong
					send
				Element:td
					string
				Element:td
					Required
				Element:td
					Type
				Element:code
					send
					is required when sending money
				Element:tr
				Element:td
				Element:code
					to
				Element:td
					string
				Element:td
					Required
				Element:td
					A bitcoin address, ethereum address, or an email of the recipient
				Element:tr
				Element:td
				Element:code
					amount
				Element:td
					string
				Element:td
					Required
				Element:td
					Amount to be sent
				Element:tr
				Element:td
				Element:code
					currency
				Element:td
					string
				Element:td
					Required
				Element:td
					Currency for the
				Element:code
					amount
				Element:tr
				Element:td
				Element:code
					description
				Element:td
					string
				Element:td
					Optional
				Element:td
					Notes to be included in the email that the recipient receives
				Element:tr
				Element:td
				Element:code
					skip_notifications
				Element:td
					boolean
				Element:td
					Optional
				Element:td
					Don’t send notification emails for small amounts (e.g. tips)
				Element:tr
				Element:td
				Element:code
					fee
				Element:td
					string
				Element:td
					Optional
				Element:td
					Transaction fee in BTC if you would like to pay it. Coinbase pays transaction fees on payments greater than or equal to 0.0001 BTC. But for smaller amounts you may want to add your own amount. Fees can be added as a string, such as
				Element:code
					0.0005
				Element:tr
				Element:td
				Element:code
					idem
				Element:td
					string
				Element:td
					Optional
				Element:td
				Element:strong
					[Recommended]
					A token to ensure
				Element:a
					idempotence
					. If a previous transaction with the same
				Element:code
					idem
					parameter already exists for this sender, that previous transaction will be returned and a new one will not be created. Max length 100 characters
			Node:
			(type) c
			(layer)1
				Element:h2
					Transfer money between accounts
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example request
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl https://api.coinbase.com/v2/accounts/2bbf394c-193b-5b2a-9155-3b4732659ede/transactions / -X POST
				Element:span
					\
					-H
				Element:span
					'Content-Type: application/json'
				Element:span
					\
					-H
				Element:span
					'Authorization: Bearer abd90df5f27a7b170cd775abf89d632b350b7c1c9d53e08b340cd9832ce52c2c'
				Element:span
					\
					-d
				Element:span
					'{ "type": "transfer", "to": "58542935-67b5-56e1-a3f9-42686e07fa40", "amount": "1" }'
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'coinbase/wallet'
				Element:span
					client
				Element:span
					=
				Element:span
					Coinbase
				Element:span
					::
				Element:span
					Wallet
				Element:span
					::
				Element:span
					Client
				Element:span
					.
				Element:span
					new
				Element:span
					(
				Element:span
					api_key:
				Element:span
					<
				Element:span
					api
				Element:span
					key
				Element:span
					>
				Element:span
					,
				Element:span
					api_secret:
				Element:span
					<
				Element:span
					api
				Element:span
					secret
				Element:span
					>
				Element:span
					)
				Element:span
					tx
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					transfer
				Element:span
					(
				Element:span
					'2bbf394c-193b-5b2a-9155-3b4732659ede'
				Element:span
					,
				Element:span
					{
				Element:span
					'to'
				Element:span
					=>
				Element:span
					'58542935-67b5-56e1-a3f9-42686e07fa40'
				Element:span
					,
				Element:span
					'amount'
				Element:span
					=>
				Element:span
					'1'
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					from
				Element:span
					coinbase.wallet.client
				Element:span
					import
				Element:span
					Client
				Element:span
					client
				Element:span
					=
				Element:span
					Client
				Element:span
					(
				Element:span
					<
				Element:span
					api_key
				Element:span
					>
				Element:span
					,
				Element:span
					<
				Element:span
					api_secret
				Element:span
					>
				Element:span
					)
				Element:span
					tx
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					transfer_money
				Element:span
					(
				Element:span
					'2bbf394c-193b-5b2a-9155-3b4732659ede'
				Element:span
					,
				Element:span
					{
				Element:span
					'to'
				Element:span
					:
				Element:span
					'58542935-67b5-56e1-a3f9-42686e07fa40'
				Element:span
					,
				Element:span
					'amount'
				Element:span
					:
				Element:span
					'1'
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					var
				Element:span
					Client
				Element:span
					=
				Element:span
					require
				Element:span
					(
				Element:span
					'coinbase'
				Element:span
					).
				Element:span
					Client
				Element:span
					;
				Element:span
					var
				Element:span
					client
				Element:span
					=
				Element:span
					new
				Element:span
					Client
				Element:span
					({
				Element:span
					'apiKey'
				Element:span
					:
				Element:span
					'API KEY'
				Element:span
					,
				Element:span
					'apiSecret'
				Element:span
					:
				Element:span
					'API SECRET'
				Element:span
					});
				Element:span
					client
				Element:span
					.
				Element:span
					getAccount
				Element:span
					(
				Element:span
					'2bbf394c-193b-5b2a-9155-3b4732659ede'
				Element:span
					,
				Element:span
					function
				Element:span
					(
				Element:span
					err
				Element:span
					,
				Element:span
					account
				Element:span
					)
				Element:span
					{
				Element:span
					account
				Element:span
					.
				Element:span
					transferMoney
				Element:span
					({
				Element:span
					'to'
				Element:span
					:
				Element:span
					'58542935-67b5-56e1-a3f9-42686e07fa40'
				Element:span
					,
				Element:span
					'amount'
				Element:span
					:
				Element:span
					'1'
				Element:span
					},
				Element:span
					function
				Element:span
					(
				Element:span
					err
				Element:span
					,
				Element:span
					tx
				Element:span
					)
				Element:span
					{
				Element:span
					console
				Element:span
					.
				Element:span
					log
				Element:span
					(
				Element:span
					tx
				Element:span
					);
				Element:span
					});
				Element:span
					});
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Response (201)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"data"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"2e9f48cd-0b05-5f7c-9056-17a8acb408ad"
				Element:span
					,
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"request"
				Element:span
					,
				Element:span
				Element:span
					"status"
				Element:span
					:
				Element:span
				Element:span
					"pending"
				Element:span
					,
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"1.00000000"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"BTC"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"native_amount"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"10.00"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"description"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-04-01T10:37:11-07:00"
				Element:span
					,
				Element:span
				Element:span
					"updated_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-04-01T10:37:11-07:00"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"transaction"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/accounts/2bbf394c-193b-5b2a-9155-3b4732659ede/transactions/2e9f48cd-0b05-5f7c-9056-17a8acb408ad"
				Element:span
					,
				Element:span
				Element:span
					"to"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"email"
				Element:span
					,
				Element:span
				Element:span
					"email"
				Element:span
					:
				Element:span
				Element:span
					"email@example.com"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"details"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"title"
				Element:span
					:
				Element:span
				Element:span
					"Requested bitcoin"
				Element:span
					,
				Element:span
				Element:span
					"subtitle"
				Element:span
					:
				Element:span
				Element:span
					"from email@example.com"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					},
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Transfer bitcoin or ethereum between two of a user’s accounts. Following transfers are allowed:
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:code
					wallet
					to
				Element:code
					wallet
				Element:li
				Element:code
					wallet
					to
				Element:code
					vault
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					POST https://api.coinbase.com/v2/accounts/:account_id/transactions
			Node:
			(type) c
			(layer)1
				Element:h3
					Scopes
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:code
					wallet:transactions:transfer
			Node:
			(type) c
			(layer)1
				Element:h3
					Arguments
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Type
				Element:th
					Required
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
				Element:code
					type
				Element:em
					constant
				Element:strong
					transfer
				Element:td
					string
				Element:td
					Required
				Element:td
					Type
				Element:code
					transfer
					is required when transferring bitcoin or ethereum between accounts
				Element:tr
				Element:td
				Element:code
					to
				Element:td
					string
				Element:td
					Required
				Element:td
					ID of the receiving account
				Element:tr
				Element:td
				Element:code
					amount
				Element:td
					string
				Element:td
					Required
				Element:td
					Amount to be transferred
				Element:tr
				Element:td
				Element:code
					currency
				Element:td
					string
				Element:td
					Required
				Element:td
					Currency for the
				Element:code
					amount
				Element:tr
				Element:td
				Element:code
					description
				Element:td
					string
				Element:td
					Optional
				Element:td
					Notes to be included in the transfer
			Node:
			(type) c
			(layer)1
				Element:h2
					Request money
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example request
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl https://api.coinbase.com/v2/accounts/2bbf394c-193b-5b2a-9155-3b4732659ede/transactions / -X POST
				Element:span
					\
					-H
				Element:span
					'Content-Type: application/json'
				Element:span
					\
					-H
				Element:span
					'Authorization: Bearer abd90df5f27a7b170cd775abf89d632b350b7c1c9d53e08b340cd9832ce52c2c'
				Element:span
					\
					-d
				Element:span
					'{ "type": "request", "to": "email@example.com", "amount": "1", "currency": "BTC" }'
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'coinbase/wallet'
				Element:span
					client
				Element:span
					=
				Element:span
					Coinbase
				Element:span
					::
				Element:span
					Wallet
				Element:span
					::
				Element:span
					Client
				Element:span
					.
				Element:span
					new
				Element:span
					(
				Element:span
					api_key:
				Element:span
					<
				Element:span
					api
				Element:span
					key
				Element:span
					>
				Element:span
					,
				Element:span
					api_secret:
				Element:span
					<
				Element:span
					api
				Element:span
					secret
				Element:span
					>
				Element:span
					)
				Element:span
					tx
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					request
				Element:span
					(
				Element:span
					'2bbf394c-193b-5b2a-9155-3b4732659ede'
				Element:span
					,
				Element:span
					{
				Element:span
					'to'
				Element:span
					=>
				Element:span
					'email@example.com'
				Element:span
					,
				Element:span
					'amount'
				Element:span
					=>
				Element:span
					'1'
				Element:span
					,
				Element:span
					'currency'
				Element:span
					=>
				Element:span
					'BTC'
				Element:span
					})
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					from
				Element:span
					coinbase.wallet.client
				Element:span
					import
				Element:span
					Client
				Element:span
					client
				Element:span
					=
				Element:span
					Client
				Element:span
					(
				Element:span
					<
				Element:span
					api_key
				Element:span
					>
				Element:span
					,
				Element:span
					<
				Element:span
					api_secret
				Element:span
					>
				Element:span
					)
				Element:span
					tx
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					request_money
				Element:span
					(
				Element:span
					'2bbf394c-193b-5b2a-9155-3b4732659ede'
				Element:span
					,
				Element:span
					{
				Element:span
					'to'
				Element:span
					:
				Element:span
					'email@example.com'
				Element:span
					,
				Element:span
					'amount'
				Element:span
					:
				Element:span
					'1'
				Element:span
					,
				Element:span
					'currency'
				Element:span
					:
				Element:span
					'BTC'
				Element:span
					})
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					var
				Element:span
					Client
				Element:span
					=
				Element:span
					require
				Element:span
					(
				Element:span
					'coinbase'
				Element:span
					).
				Element:span
					Client
				Element:span
					;
				Element:span
					var
				Element:span
					client
				Element:span
					=
				Element:span
					new
				Element:span
					Client
				Element:span
					({
				Element:span
					'apiKey'
				Element:span
					:
				Element:span
					'API KEY'
				Element:span
					,
				Element:span
					'apiSecret'
				Element:span
					:
				Element:span
					'API SECRET'
				Element:span
					});
				Element:span
					client
				Element:span
					.
				Element:span
					getAccount
				Element:span
					(
				Element:span
					'2bbf394c-193b-5b2a-9155-3b4732659ede'
				Element:span
					,
				Element:span
					function
				Element:span
					(
				Element:span
					err
				Element:span
					,
				Element:span
					account
				Element:span
					)
				Element:span
					{
				Element:span
					account
				Element:span
					.
				Element:span
					requestMoney
				Element:span
					({
				Element:span
					'to'
				Element:span
					:
				Element:span
					'email@example.com'
				Element:span
					,
				Element:span
					'amount'
				Element:span
					:
				Element:span
					'1'
				Element:span
					,
				Element:span
					'currency'
				Element:span
					:
				Element:span
					'BTC'
				Element:span
					},
				Element:span
					function
				Element:span
					(
				Element:span
					err
				Element:span
					,
				Element:span
					tx
				Element:span
					)
				Element:span
					{
				Element:span
					console
				Element:span
					.
				Element:span
					log
				Element:span
					(
				Element:span
					tx
				Element:span
					);
				Element:span
					});
				Element:span
					});
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Response (201)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"data"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"2e9f48cd-0b05-5f7c-9056-17a8acb408ad"
				Element:span
					,
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"request"
				Element:span
					,
				Element:span
				Element:span
					"status"
				Element:span
					:
				Element:span
				Element:span
					"pending"
				Element:span
					,
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"1.00000000"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"BTC"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"native_amount"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"10.00"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"description"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-04-01T10:37:11-07:00"
				Element:span
					,
				Element:span
				Element:span
					"updated_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-04-01T10:37:11-07:00"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"transaction"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/accounts/2bbf394c-193b-5b2a-9155-3b4732659ede/transactions/2e9f48cd-0b05-5f7c-9056-17a8acb408ad"
				Element:span
					,
				Element:span
				Element:span
					"to"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"email"
				Element:span
					,
				Element:span
				Element:span
					"email"
				Element:span
					:
				Element:span
				Element:span
					"email@example.com"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"details"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"title"
				Element:span
					:
				Element:span
				Element:span
					"Requested bitcoin"
				Element:span
					,
				Element:span
				Element:span
					"subtitle"
				Element:span
					:
				Element:span
				Element:span
					"from email@example.com"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					},
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Requests money from an email address.
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					POST https://api.coinbase.com/v2/accounts/:account_id/transactions
			Node:
			(type) c
			(layer)1
				Element:h3
					Scopes
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:code
					wallet:transactions:request
			Node:
			(type) c
			(layer)1
				Element:h3
					Arguments
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Type
				Element:th
					Required
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
				Element:code
					type
				Element:em
					constant
				Element:strong
					request
				Element:td
					string
				Element:td
					Required
				Element:td
					Type
				Element:code
					request
					is required when sending money
				Element:tr
				Element:td
				Element:code
					to
				Element:td
					string
				Element:td
					Required
				Element:td
					An email of the recipient
				Element:tr
				Element:td
				Element:code
					amount
				Element:td
					string
				Element:td
					Required
				Element:td
					Amount to be requested
				Element:tr
				Element:td
				Element:code
					currency
				Element:td
					string
				Element:td
					Required
				Element:td
					Currency for the
				Element:code
					amount
				Element:tr
				Element:td
				Element:code
					description
				Element:td
					string
				Element:td
					Optional
				Element:td
					Notes to be included in the email that the recipient receives
			Node:
			(type) c
			(layer)1
				Element:h2
					Complete request money
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example request
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl https://api.coinbase.com/v2/accounts/2bbf394c-193b-5b2a-9155-3b4732659ede/transactions/2e9f48cd-0b05-5f7c-9056-17a8acb408ad/complete / -X POST
				Element:span
					\
					-H
				Element:span
					'Authorization: Bearer abd90df5f27a7b170cd775abf89d632b350b7c1c9d53e08b340cd9832ce52c2c'
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'coinbase/wallet'
				Element:span
					client
				Element:span
					=
				Element:span
					Coinbase
				Element:span
					::
				Element:span
					Wallet
				Element:span
					::
				Element:span
					Client
				Element:span
					.
				Element:span
					new
				Element:span
					(
				Element:span
					api_key:
				Element:span
					<
				Element:span
					api
				Element:span
					key
				Element:span
					>
				Element:span
					,
				Element:span
					api_secret:
				Element:span
					<
				Element:span
					api
				Element:span
					secret
				Element:span
					>
				Element:span
					)
				Element:span
					tx
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					complete_request
				Element:span
					(
				Element:span
					'2bbf394c-193b-5b2a-9155-3b4732659ede'
				Element:span
					,
				Element:span
					'2e9f48cd-0b05-5f7c-9056-17a8acb408ad'
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					from
				Element:span
					coinbase.wallet.client
				Element:span
					import
				Element:span
					Client
				Element:span
					client
				Element:span
					=
				Element:span
					Client
				Element:span
					(
				Element:span
					<
				Element:span
					api_key
				Element:span
					>
				Element:span
					,
				Element:span
					<
				Element:span
					api_secret
				Element:span
					>
				Element:span
					)
				Element:span
					tx
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					complete_request
				Element:span
					(
				Element:span
					'2bbf394c-193b-5b2a-9155-3b4732659ede'
				Element:span
					,
				Element:span
					'2e9f48cd-0b05-5f7c-9056-17a8acb408ad'
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					var
				Element:span
					Client
				Element:span
					=
				Element:span
					require
				Element:span
					(
				Element:span
					'coinbase'
				Element:span
					).
				Element:span
					Client
				Element:span
					;
				Element:span
					var
				Element:span
					client
				Element:span
					=
				Element:span
					new
				Element:span
					Client
				Element:span
					({
				Element:span
					'apiKey'
				Element:span
					:
				Element:span
					'API KEY'
				Element:span
					,
				Element:span
					'apiSecret'
				Element:span
					:
				Element:span
					'API SECRET'
				Element:span
					});
				Element:span
					client
				Element:span
					.
				Element:span
					getAccount
				Element:span
					(
				Element:span
					'2bbf394c-193b-5b2a-9155-3b4732659ede'
				Element:span
					,
				Element:span
					function
				Element:span
					(
				Element:span
					err
				Element:span
					,
				Element:span
					account
				Element:span
					)
				Element:span
					{
				Element:span
					account
				Element:span
					.
				Element:span
					getTransaction
				Element:span
					(
				Element:span
					'2e9f48cd-0b05-5f7c-9056-17a8acb408ad'
				Element:span
					,
				Element:span
					function
				Element:span
					(
				Element:span
					err
				Element:span
					,
				Element:span
					tx
				Element:span
					)
				Element:span
					{
				Element:span
					tx
				Element:span
					.
				Element:span
					complete
				Element:span
					(
				Element:span
					function
				Element:span
					(
				Element:span
					err
				Element:span
					,
				Element:span
					resp
				Element:span
					)
				Element:span
					{
				Element:span
					console
				Element:span
					.
				Element:span
					log
				Element:span
					(
				Element:span
					resp
				Element:span
					);
				Element:span
					});
				Element:span
					});
				Element:span
					});
			Node:
			(type) c
			(layer)1
				Element:p
					Lets the recipient of a money request complete the request by sending money to the user who requested the money. This can only be completed by the user to whom the request was made,
				Element:em
					not
					the user who sent the request.
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					POST https://api.coinbase.com/v2/accounts/:account_id/transactions/:transaction_id/complete
			Node:
			(type) c
			(layer)1
				Element:h3
					Scopes
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:code
					wallet:transactions:request
			Node:
			(type) c
			(layer)1
				Element:h3
					Arguments
			Node:
			(type) c
			(layer)1
				Element:p
				Element:em
					None
			Node:
			(type) c
			(layer)1
				Element:h2
					Re-send request money
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example request
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl https://api.coinbase.com/v2/accounts/2bbf394c-193b-5b2a-9155-3b4732659ede/transactions/2e9f48cd-0b05-5f7c-9056-17a8acb408ad/resend / -X POST
				Element:span
					\
					-H
				Element:span
					'Authorization: Bearer abd90df5f27a7b170cd775abf89d632b350b7c1c9d53e08b340cd9832ce52c2c'
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'coinbase/wallet'
				Element:span
					client
				Element:span
					=
				Element:span
					Coinbase
				Element:span
					::
				Element:span
					Wallet
				Element:span
					::
				Element:span
					Client
				Element:span
					.
				Element:span
					new
				Element:span
					(
				Element:span
					api_key:
				Element:span
					<
				Element:span
					api
				Element:span
					key
				Element:span
					>
				Element:span
					,
				Element:span
					api_secret:
				Element:span
					<
				Element:span
					api
				Element:span
					secret
				Element:span
					>
				Element:span
					)
				Element:span
					tx
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					resend_request
				Element:span
					(
				Element:span
					'2bbf394c-193b-5b2a-9155-3b4732659ede'
				Element:span
					,
				Element:span
					'2e9f48cd-0b05-5f7c-9056-17a8acb408ad'
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					from
				Element:span
					coinbase.wallet.client
				Element:span
					import
				Element:span
					Client
				Element:span
					client
				Element:span
					=
				Element:span
					Client
				Element:span
					(
				Element:span
					<
				Element:span
					api_key
				Element:span
					>
				Element:span
					,
				Element:span
					<
				Element:span
					api_secret
				Element:span
					>
				Element:span
					)
				Element:span
					tx
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					resend_request
				Element:span
					(
				Element:span
					'2bbf394c-193b-5b2a-9155-3b4732659ede'
				Element:span
					,
				Element:span
					'2e9f48cd-0b05-5f7c-9056-17a8acb408ad'
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					var
				Element:span
					Client
				Element:span
					=
				Element:span
					require
				Element:span
					(
				Element:span
					'coinbase'
				Element:span
					).
				Element:span
					Client
				Element:span
					;
				Element:span
					var
				Element:span
					client
				Element:span
					=
				Element:span
					new
				Element:span
					Client
				Element:span
					({
				Element:span
					'apiKey'
				Element:span
					:
				Element:span
					'API KEY'
				Element:span
					,
				Element:span
					'apiSecret'
				Element:span
					:
				Element:span
					'API SECRET'
				Element:span
					});
				Element:span
					client
				Element:span
					.
				Element:span
					getAccount
				Element:span
					(
				Element:span
					'2bbf394c-193b-5b2a-9155-3b4732659ede'
				Element:span
					,
				Element:span
					function
				Element:span
					(
				Element:span
					err
				Element:span
					,
				Element:span
					account
				Element:span
					)
				Element:span
					{
				Element:span
					account
				Element:span
					.
				Element:span
					getTransaction
				Element:span
					(
				Element:span
					'2e9f48cd-0b05-5f7c-9056-17a8acb408ad'
				Element:span
					,
				Element:span
					function
				Element:span
					(
				Element:span
					err
				Element:span
					,
				Element:span
					tx
				Element:span
					)
				Element:span
					{
				Element:span
					tx
				Element:span
					.
				Element:span
					resend
				Element:span
					(
				Element:span
					function
				Element:span
					(
				Element:span
					err
				Element:span
					,
				Element:span
					resp
				Element:span
					)
				Element:span
					{
				Element:span
					console
				Element:span
					.
				Element:span
					log
				Element:span
					(
				Element:span
					resp
				Element:span
					);
				Element:span
					});
				Element:span
					});
				Element:span
					});
			Node:
			(type) c
			(layer)1
				Element:p
					Lets the user resend a money request. This will notify recipient with a new email.
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					POST https://api.coinbase.com/v2/accounts/:account_id/transactions/:transaction_id/resend
			Node:
			(type) c
			(layer)1
				Element:h3
					Scopes
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:code
					wallet:transactions:request
			Node:
			(type) c
			(layer)1
				Element:h3
					Arguments
			Node:
			(type) c
			(layer)1
				Element:p
				Element:em
					None
			Node:
			(type) c
			(layer)1
				Element:h2
					Cancel request money
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example request
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl https://api.coinbase.com/v2/accounts/2bbf394c-193b-5b2a-9155-3b4732659ede/transactions/2e9f48cd-0b05-5f7c-9056-17a8acb408ad / -X DELETE
				Element:span
					\
					-H
				Element:span
					'Authorization: Bearer abd90df5f27a7b170cd775abf89d632b350b7c1c9d53e08b340cd9832ce52c2c'
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'coinbase/wallet'
				Element:span
					client
				Element:span
					=
				Element:span
					Coinbase
				Element:span
					::
				Element:span
					Wallet
				Element:span
					::
				Element:span
					Client
				Element:span
					.
				Element:span
					new
				Element:span
					(
				Element:span
					api_key:
				Element:span
					<
				Element:span
					api
				Element:span
					key
				Element:span
					>
				Element:span
					,
				Element:span
					api_secret:
				Element:span
					<
				Element:span
					api
				Element:span
					secret
				Element:span
					>
				Element:span
					)
				Element:span
					tx
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					cancel_request
				Element:span
					(
				Element:span
					'2bbf394c-193b-5b2a-9155-3b4732659ede'
				Element:span
					,
				Element:span
					'2e9f48cd-0b05-5f7c-9056-17a8acb408ad'
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					from
				Element:span
					coinbase.wallet.client
				Element:span
					import
				Element:span
					Client
				Element:span
					client
				Element:span
					=
				Element:span
					Client
				Element:span
					(
				Element:span
					<
				Element:span
					api_key
				Element:span
					>
				Element:span
					,
				Element:span
					<
				Element:span
					api_secret
				Element:span
					>
				Element:span
					)
				Element:span
					tx
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					cancel_request
				Element:span
					(
				Element:span
					'2bbf394c-193b-5b2a-9155-3b4732659ede'
				Element:span
					,
				Element:span
					'2e9f48cd-0b05-5f7c-9056-17a8acb408ad'
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					var
				Element:span
					Client
				Element:span
					=
				Element:span
					require
				Element:span
					(
				Element:span
					'coinbase'
				Element:span
					).
				Element:span
					Client
				Element:span
					;
				Element:span
					var
				Element:span
					client
				Element:span
					=
				Element:span
					new
				Element:span
					Client
				Element:span
					({
				Element:span
					'apiKey'
				Element:span
					:
				Element:span
					'API KEY'
				Element:span
					,
				Element:span
					'apiSecret'
				Element:span
					:
				Element:span
					'API SECRET'
				Element:span
					});
				Element:span
					client
				Element:span
					.
				Element:span
					getAccount
				Element:span
					(
				Element:span
					'2bbf394c-193b-5b2a-9155-3b4732659ede'
				Element:span
					,
				Element:span
					function
				Element:span
					(
				Element:span
					err
				Element:span
					,
				Element:span
					account
				Element:span
					)
				Element:span
					{
				Element:span
					account
				Element:span
					.
				Element:span
					getTransaction
				Element:span
					(
				Element:span
					'2e9f48cd-0b05-5f7c-9056-17a8acb408ad'
				Element:span
					,
				Element:span
					function
				Element:span
					(
				Element:span
					err
				Element:span
					,
				Element:span
					tx
				Element:span
					)
				Element:span
					{
				Element:span
					tx
				Element:span
					.
				Element:span
					cancel
				Element:span
					(
				Element:span
					function
				Element:span
					(
				Element:span
					err
				Element:span
					,
				Element:span
					resp
				Element:span
					)
				Element:span
					{
				Element:span
					console
				Element:span
					.
				Element:span
					log
				Element:span
					(
				Element:span
					resp
				Element:span
					);
				Element:span
					});
				Element:span
					});
				Element:span
					});
			Node:
			(type) c
			(layer)1
				Element:p
					Lets a user cancel a money request. Money requests can be canceled by the sender or the recipient.
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					DELETE https://api.coinbase.com/v2/accounts/:account_id/transactions/:transaction_id
			Node:
			(type) c
			(layer)1
				Element:h3
					Scopes
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:code
					wallet:transactions:request
			Node:
			(type) c
			(layer)1
				Element:h3
					Arguments
			Node:
			(type) c
			(layer)1
				Element:p
				Element:em
					None
			Node:
			(type) h1
			(layer)1
				Element:h1
					Buys
			Node:
			(type) c
			(layer)1
				Element:h2
					Buy resource
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example buy resource
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"67e0eaec-07d7-54c4-a72c-2e92826897df"
				Element:span
					,
				Element:span
				Element:span
					"status"
				Element:span
					:
				Element:span
				Element:span
					"completed"
				Element:span
					,
				Element:span
				Element:span
					"payment_method"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"83562370-3e5c-51db-87da-752af5ab9559"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"payment_method"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/payment-methods/83562370-3e5c-51db-87da-752af5ab9559"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"transaction"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"441b9494-b3f0-5b98-b9b0-4d82c21c252a"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"transaction"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/accounts/2bbf394c-193b-5b2a-9155-3b4732659ede/transactions/441b9494-b3f0-5b98-b9b0-4d82c21c252a"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"1.00000000"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"BTC"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"total"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"10.25"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"subtotal"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"10.10"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-01-31T20:49:02Z"
				Element:span
					,
				Element:span
				Element:span
					"updated_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-02-11T16:54:02-08:00"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"buy"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/accounts/2bbf394c-193b-5b2a-9155-3b4732659ede/buys/67e0eaec-07d7-54c4-a72c-2e92826897df"
				Element:span
					,
				Element:span
				Element:span
					"committed"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"instant"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"fee"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"0.15"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"payout_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-02-18T16:54:00-08:00"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Buy resource represents a purchase of bitcoin or ethereum using a payment method (either a bank or a fiat account). Each committed buy also has an associated transaction.
			Node:
			(type) c
			(layer)1
				Element:p
					Buys can be started with
				Element:code
					commit: false
					which is useful when displaying the confirmation for a buy. These buys will never complete and receive an associated transaction unless they are committed separately.
			Node:
			(type) c
			(layer)1
				Element:p
					When using this endpoint, it is possible that our system will not be able to process the buy as normal. If this is the case, our system will return a
				Element:code
					400
					error with an
				Element:code
					id
					of
				Element:code
					unknown_error
					.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Fields
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
				Element:code
					id
				Element:em
					string
				Element:td
					Resource ID
				Element:tr
				Element:td
				Element:code
					status
				Element:em
					string,
				Element:a
					enumerable
				Element:td
					Status of the buy. Currently available values:
				Element:code
					created
					,
				Element:code
					completed
					,
				Element:code
					canceled
				Element:tr
				Element:td
				Element:code
					payment_method
				Element:em
					hash
				Element:td
					Associated payment method (e.g. a bank, fiat account)
				Element:tr
				Element:td
				Element:code
					transaction
				Element:em
					hash
				Element:td
					Associated transaction (e.g. a bank, fiat account)
				Element:tr
				Element:td
				Element:code
					amount
				Element:em
				Element:a
					money hash
				Element:td
					Amount in bitcoin or ethereum
				Element:tr
				Element:td
				Element:code
					total
				Element:em
				Element:a
					money hash
				Element:td
					Fiat amount with fees
				Element:tr
				Element:td
				Element:code
					subtotal
				Element:em
				Element:a
					money hash
				Element:td
					Fiat amount without fees
				Element:tr
				Element:td
				Element:code
					fee
				Element:em
				Element:a
					money hash
				Element:td
					Fee assoaciated to this buy
				Element:tr
				Element:td
				Element:code
					created_at
				Element:em
					timestamp
				Element:td
				Element:tr
				Element:td
				Element:code
					updated_at
				Element:em
					timestamp
				Element:td
				Element:tr
				Element:td
				Element:code
					resource
				Element:em
					string, constant
				Element:strong
					buy
				Element:td
				Element:tr
				Element:td
				Element:code
					resource_path
				Element:em
					string
				Element:td
				Element:tr
				Element:td
				Element:code
					committed
				Element:em
					boolean
				Element:td
					Has this buy been committed?
				Element:tr
				Element:td
				Element:code
					instant
				Element:em
					boolean
				Element:td
					Was this buy executed instantly?
				Element:tr
				Element:td
				Element:code
					payout_at
				Element:em
					timestamp, optional
				Element:td
					When a buy isn’t executed instantly, it will receive a payout date for the time it will be executed
			Node:
			(type) c
			(layer)1
				Element:h2
					List buys
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example request
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl https://api.coinbase.com/v2/accounts/2bbf394c-193b-5b2a-9155-3b4732659ede/buys / -H
				Element:span
					'Authorization: Bearer abd90df5f27a7b170cd775abf89d632b350b7c1c9d53e08b340cd9832ce52c2c'
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'coinbase/wallet'
				Element:span
					client
				Element:span
					=
				Element:span
					Coinbase
				Element:span
					::
				Element:span
					Wallet
				Element:span
					::
				Element:span
					Client
				Element:span
					.
				Element:span
					new
				Element:span
					(
				Element:span
					api_key:
				Element:span
					<
				Element:span
					api
				Element:span
					key
				Element:span
					>
				Element:span
					,
				Element:span
					api_secret:
				Element:span
					<
				Element:span
					api
				Element:span
					secret
				Element:span
					>
				Element:span
					)
				Element:span
					buys
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					list_buys
				Element:span
					(
				Element:span
					'2bbf394c-193b-5b2a-9155-3b4732659ede'
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					from
				Element:span
					coinbase.wallet.client
				Element:span
					import
				Element:span
					Client
				Element:span
					client
				Element:span
					=
				Element:span
					Client
				Element:span
					(
				Element:span
					<
				Element:span
					api_key
				Element:span
					>
				Element:span
					,
				Element:span
					<
				Element:span
					api_secret
				Element:span
					>
				Element:span
					)
				Element:span
					txs
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					get_buys
				Element:span
					(
				Element:span
					'2bbf394c-193b-5b2a-9155-3b4732659ede'
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					var
				Element:span
					Client
				Element:span
					=
				Element:span
					require
				Element:span
					(
				Element:span
					'coinbase'
				Element:span
					).
				Element:span
					Client
				Element:span
					;
				Element:span
					var
				Element:span
					client
				Element:span
					=
				Element:span
					new
				Element:span
					Client
				Element:span
					({
				Element:span
					'apiKey'
				Element:span
					:
				Element:span
					'API KEY'
				Element:span
					,
				Element:span
					'apiSecret'
				Element:span
					:
				Element:span
					'API SECRET'
				Element:span
					});
				Element:span
					client
				Element:span
					.
				Element:span
					getAccount
				Element:span
					(
				Element:span
					'2bbf394c-193b-5b2a-9155-3b4732659ede'
				Element:span
					,
				Element:span
					function
				Element:span
					(
				Element:span
					err
				Element:span
					,
				Element:span
					account
				Element:span
					)
				Element:span
					{
				Element:span
					account
				Element:span
					.
				Element:span
					getBuys
				Element:span
					(
				Element:span
					function
				Element:span
					(
				Element:span
					err
				Element:span
					,
				Element:span
					txs
				Element:span
					)
				Element:span
					{
				Element:span
					console
				Element:span
					.
				Element:span
					log
				Element:span
					(
				Element:span
					txs
				Element:span
					);
				Element:span
					});
				Element:span
					});
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example response
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"pagination"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"ending_before"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"starting_after"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"limit"
				Element:span
					:
				Element:span
				Element:span
					25
				Element:span
					,
				Element:span
				Element:span
					"order"
				Element:span
					:
				Element:span
				Element:span
					"desc"
				Element:span
					,
				Element:span
				Element:span
					"previous_uri"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"next_uri"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"data"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"9e14d574-30fa-5d85-b02c-6be0d851d61d"
				Element:span
					,
				Element:span
				Element:span
					"status"
				Element:span
					:
				Element:span
				Element:span
					"created"
				Element:span
					,
				Element:span
				Element:span
					"payment_method"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"83562370-3e5c-51db-87da-752af5ab9559"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"payment_method"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/payment-methods/83562370-3e5c-51db-87da-752af5ab9559"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"transaction"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"4117f7d6-5694-5b36-bc8f-847509850ea4"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"transaction"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/accounts/2bbf394c-193b-5b2a-9155-3b4732659ede/transactions/441b9494-b3f0-5b98-b9b0-4d82c21c252a"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"10.00000000"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"BTC"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"total"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"102.01"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"subtotal"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"101.00"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-03-26T23:43:59-07:00"
				Element:span
					,
				Element:span
				Element:span
					"updated_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-03-26T23:44:09-07:00"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"buy"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/accounts/2bbf394c-193b-5b2a-9155-3b4732659ede/buys/9e14d574-30fa-5d85-b02c-6be0d851d61d"
				Element:span
					,
				Element:span
				Element:span
					"committed"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"instant"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"fee"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"1.01"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"payout_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-04-01T23:43:59-07:00"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					]
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Lists buys for an account.
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET https://api.coinbase.com/v2/accounts/:account_id/buys
			Node:
			(type) c
			(layer)1
				Element:h3
					Scopes
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:code
					wallet:buys:read
			Node:
			(type) c
			(layer)1
				Element:h2
					Show a buy
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example request
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl https://api.coinbase.com/v2/accounts/2bbf394c-193b-5b2a-9155-3b4732659ede/buys/dd3183eb-af1d-5f5d-a90d-cbff946435ff / -H
				Element:span
					'Authorization: Bearer abd90df5f27a7b170cd775abf89d632b350b7c1c9d53e08b340cd9832ce52c2c'
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'coinbase/wallet'
				Element:span
					client
				Element:span
					=
				Element:span
					Coinbase
				Element:span
					::
				Element:span
					Wallet
				Element:span
					::
				Element:span
					Client
				Element:span
					.
				Element:span
					new
				Element:span
					(
				Element:span
					api_key:
				Element:span
					<
				Element:span
					api
				Element:span
					key
				Element:span
					>
				Element:span
					,
				Element:span
					api_secret:
				Element:span
					<
				Element:span
					api
				Element:span
					secret
				Element:span
					>
				Element:span
					)
				Element:span
					buy
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					list_buy
				Element:span
					(
				Element:span
					'2bbf394c-193b-5b2a-9155-3b4732659ede'
				Element:span
					,
				Element:span
					'dd3183eb-af1d-5f5d-a90d-cbff946435ff'
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					from
				Element:span
					coinbase.wallet.client
				Element:span
					import
				Element:span
					Client
				Element:span
					client
				Element:span
					=
				Element:span
					Client
				Element:span
					(
				Element:span
					<
				Element:span
					api_key
				Element:span
					>
				Element:span
					,
				Element:span
					<
				Element:span
					api_secret
				Element:span
					>
				Element:span
					)
				Element:span
					buy
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					get_buy
				Element:span
					(
				Element:span
					'2bbf394c-193b-5b2a-9155-3b4732659ede'
				Element:span
					,
				Element:span
					'dd3183eb-af1d-5f5d-a90d-cbff946435ff'
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					var
				Element:span
					Client
				Element:span
					=
				Element:span
					require
				Element:span
					(
				Element:span
					'coinbase'
				Element:span
					).
				Element:span
					Client
				Element:span
					;
				Element:span
					var
				Element:span
					client
				Element:span
					=
				Element:span
					new
				Element:span
					Client
				Element:span
					({
				Element:span
					'apiKey'
				Element:span
					:
				Element:span
					'API KEY'
				Element:span
					,
				Element:span
					'apiSecret'
				Element:span
					:
				Element:span
					'API SECRET'
				Element:span
					});
				Element:span
					client
				Element:span
					.
				Element:span
					getAccount
				Element:span
					(
				Element:span
					'2bbf394c-193b-5b2a-9155-3b4732659ede'
				Element:span
					,
				Element:span
					function
				Element:span
					(
				Element:span
					err
				Element:span
					,
				Element:span
					account
				Element:span
					)
				Element:span
					{
				Element:span
					account
				Element:span
					.
				Element:span
					getBuy
				Element:span
					(
				Element:span
					'dd3183eb-af1d-5f5d-a90d-cbff946435ff'
				Element:span
					,
				Element:span
					function
				Element:span
					(
				Element:span
					err
				Element:span
					,
				Element:span
					tx
				Element:span
					)
				Element:span
					{
				Element:span
					console
				Element:span
					.
				Element:span
					log
				Element:span
					(
				Element:span
					tx
				Element:span
					);
				Element:span
					});
				Element:span
					});
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example response
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"data"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"9e14d574-30fa-5d85-b02c-6be0d851d61d"
				Element:span
					,
				Element:span
				Element:span
					"status"
				Element:span
					:
				Element:span
				Element:span
					"created"
				Element:span
					,
				Element:span
				Element:span
					"payment_method"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"83562370-3e5c-51db-87da-752af5ab9559"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"payment_method"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/payment-methods/83562370-3e5c-51db-87da-752af5ab9559"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"transaction"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"4117f7d6-5694-5b36-bc8f-847509850ea4"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"transaction"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/accounts/2bbf394c-193b-5b2a-9155-3b4732659ede/transactions/441b9494-b3f0-5b98-b9b0-4d82c21c252a"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"10.00000000"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"BTC"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"total"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"102.01"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"subtotal"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"101.00"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-03-26T23:43:59-07:00"
				Element:span
					,
				Element:span
				Element:span
					"updated_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-03-26T23:44:09-07:00"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"buy"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/accounts/2bbf394c-193b-5b2a-9155-3b4732659ede/buys/9e14d574-30fa-5d85-b02c-6be0d851d61d"
				Element:span
					,
				Element:span
				Element:span
					"committed"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"instant"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"fee"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"1.01"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"payout_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-04-01T23:43:59-07:00"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Show an individual buy.
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET https://api.coinbase.com/v2/accounts/:account_id/buys/:buy_id
			Node:
			(type) c
			(layer)1
				Element:h3
					Scopes
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:code
					wallet:buys:read
			Node:
			(type) c
			(layer)1
				Element:h2
					Place buy order
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example request
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl https://api.coinbase.com/v2/accounts/82de7fcd-db72-5085-8ceb-bee19303080b/buys / -X POST
				Element:span
					\
					-H
				Element:span
					'Content-Type: application/json'
				Element:span
					\
					-H
				Element:span
					'Authorization: Bearer abd90df5f27a7b170cd775abf89d632b350b7c1c9d53e08b340cd9832ce52c2c'
				Element:span
					\
					-d
				Element:span
					'{"amount": "10", "currency": "BTC", "payment_method": "83562370-3e5c-51db-87da-752af5ab9559"}'
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'coinbase/wallet'
				Element:span
					client
				Element:span
					=
				Element:span
					Coinbase
				Element:span
					::
				Element:span
					Wallet
				Element:span
					::
				Element:span
					Client
				Element:span
					.
				Element:span
					new
				Element:span
					(
				Element:span
					api_key:
				Element:span
					<
				Element:span
					api
				Element:span
					key
				Element:span
					>
				Element:span
					,
				Element:span
					api_secret:
				Element:span
					<
				Element:span
					api
				Element:span
					secret
				Element:span
					>
				Element:span
					)
				Element:span
					buy
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					buy
				Element:span
					(
				Element:span
					'2bbf394c-193b-5b2a-9155-3b4732659ede'
				Element:span
					,
				Element:span
					{
				Element:span
					"amount"
				Element:span
					=>
				Element:span
					"10"
				Element:span
					,
				Element:span
					"currency"
				Element:span
					=>
				Element:span
					"BTC"
				Element:span
					,
				Element:span
					"payment_method"
				Element:span
					=>
				Element:span
					"83562370-3e5c-51db-87da-752af5ab9559"
				Element:span
					})
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					from
				Element:span
					coinbase.wallet.client
				Element:span
					import
				Element:span
					Client
				Element:span
					client
				Element:span
					=
				Element:span
					Client
				Element:span
					(
				Element:span
					<
				Element:span
					api_key
				Element:span
					>
				Element:span
					,
				Element:span
					<
				Element:span
					api_secret
				Element:span
					>
				Element:span
					)
				Element:span
					buy
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					buy
				Element:span
					(
				Element:span
					'2bbf394c-193b-5b2a-9155-3b4732659ede'
				Element:span
					,
				Element:span
					{
				Element:span
					"amount"
				Element:span
					:
				Element:span
					"10"
				Element:span
					,
				Element:span
					"currency"
				Element:span
					:
				Element:span
					"BTC"
				Element:span
					,
				Element:span
					"payment_method"
				Element:span
					:
				Element:span
					"83562370-3e5c-51db-87da-752af5ab9559"
				Element:span
					})
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					var
				Element:span
					Client
				Element:span
					=
				Element:span
					require
				Element:span
					(
				Element:span
					'coinbase'
				Element:span
					).
				Element:span
					Client
				Element:span
					;
				Element:span
					var
				Element:span
					client
				Element:span
					=
				Element:span
					new
				Element:span
					Client
				Element:span
					({
				Element:span
					'apiKey'
				Element:span
					:
				Element:span
					'API KEY'
				Element:span
					,
				Element:span
					'apiSecret'
				Element:span
					:
				Element:span
					'API SECRET'
				Element:span
					});
				Element:span
					client
				Element:span
					.
				Element:span
					getAccount
				Element:span
					(
				Element:span
					'2bbf394c-193b-5b2a-9155-3b4732659ede'
				Element:span
					,
				Element:span
					function
				Element:span
					(
				Element:span
					err
				Element:span
					,
				Element:span
					account
				Element:span
					)
				Element:span
					{
				Element:span
					account
				Element:span
					.
				Element:span
					buy
				Element:span
					({
				Element:span
					"amount"
				Element:span
					:
				Element:span
					"10"
				Element:span
					,
				Element:span
					"currency"
				Element:span
					:
				Element:span
					"BTC"
				Element:span
					,
				Element:span
					"payment_method"
				Element:span
					:
				Element:span
					"83562370-3e5c-51db-87da-752af5ab9559"
				Element:span
					},
				Element:span
					function
				Element:span
					(
				Element:span
					err
				Element:span
					,
				Element:span
					tx
				Element:span
					)
				Element:span
					{
				Element:span
					console
				Element:span
					.
				Element:span
					log
				Element:span
					(
				Element:span
					tx
				Element:span
					);
				Element:span
					});
				Element:span
					});
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Response (201)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"data"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"a333743d-184a-5b5b-abe8-11612fc44ab5"
				Element:span
					,
				Element:span
				Element:span
					"status"
				Element:span
					:
				Element:span
				Element:span
					"created"
				Element:span
					,
				Element:span
				Element:span
					"payment_method"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"83562370-3e5c-51db-87da-752af5ab9559"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"payment_method"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/payment-methods/83562370-3e5c-51db-87da-752af5ab9559"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"transaction"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"763d1401-fd17-5a18-852a-9cca5ac2f9c0"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"transaction"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/accounts/2bbf394c-193b-5b2a-9155-3b4732659ede/transactions/441b9494-b3f0-5b98-b9b0-4d82c21c252a"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"10.00000000"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"BTC"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"total"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"102.01"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"subtotal"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"101.00"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-04-01T18:43:37-07:00"
				Element:span
					,
				Element:span
				Element:span
					"updated_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-04-01T18:43:37-07:00"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"buy"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/accounts/2bbf394c-193b-5b2a-9155-3b4732659ede/buys/a333743d-184a-5b5b-abe8-11612fc44ab5"
				Element:span
					,
				Element:span
				Element:span
					"committed"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"instant"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"fee"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"1.01"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"payout_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-04-07T18:43:37-07:00"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Buys a user-defined amount of bitcoin or ethereum.
			Node:
			(type) c
			(layer)1
				Element:p
					There are two ways to define buy amounts–you can use either the
				Element:code
					amount
					or the
				Element:code
					total
					parameter:
			Node:
			(type) c
			(layer)1
				Element:ol
				Element:li
				Element:p
					When supplying
				Element:code
					amount
					, you’ll get the amount of bitcoin or ethereum defined. With
				Element:code
					amount
					it’s recommended to use
				Element:code
					BTC
					or
				Element:code
					ETH
					as the
				Element:code
					currency
					value, but you can always specify a fiat currency and and the amount will be converted to BTC or ETH respectively.
				Element:li
				Element:p
					When supplying
				Element:code
					total
					, your payment method will be debited the total amount and you’ll get the amount in BTC or ETH after fees have been reduced from the total. With
				Element:code
					total
					it’s recommended to use the currency of the payment method as the
				Element:code
					currency
					parameter, but you can always specify a different currency and it will be converted.
			Node:
			(type) c
			(layer)1
				Element:p
					Given the price of bitcoin and ethereum depend on the time of the call and on the amount of purchase, it’s recommended to use the
				Element:code
					commit: false
					parameter to create an uncommitted buy to show the confirmation for the user or get the final quote, and commit that with
				Element:a
					a separate request
					.
			Node:
			(type) c
			(layer)1
				Element:p
					If you need to query the buy price without locking in the buy, you can use
				Element:code
					quote: true
					option. This returns an unsaved buy and unlike
				Element:code
					commit: false
					, this buy can’t be completed. This option is useful when you need to show the detailed buy price quote for the user when they are filling a form or similar situation.
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					POST https://api.coinbase.com/v2/accounts/:account_id/buys
			Node:
			(type) c
			(layer)1
				Element:h3
					Scopes
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:code
					wallet:buys:create
			Node:
			(type) c
			(layer)1
				Element:h3
					Arguments
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Type
				Element:th
					Required
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
				Element:code
					amount
				Element:td
					string
				Element:td
					Required
				Element:td
					Buy amount without fees
				Element:tr
				Element:td
				Element:code
					total
				Element:td
					string
				Element:td
					Optional
				Element:td
					Buy amount with fees (alternative to
				Element:code
					amount
					)
				Element:tr
				Element:td
				Element:code
					currency
				Element:td
					string
				Element:td
					Required
				Element:td
					Currency for the
				Element:code
					amount
				Element:tr
				Element:td
				Element:code
					payment_method
				Element:td
					string
				Element:td
					Optional
				Element:td
					The ID of the payment method that should be used for the buy. Payment methods can be listed using the
				Element:code
					GET /payment-methods
					API call
				Element:tr
				Element:td
				Element:code
					agree_btc_amount_varies
				Element:td
					boolean
				Element:td
					Optional
				Element:td
					Whether or not you would still like to buy if you have to wait for your money to arrive to lock in a price
				Element:tr
				Element:td
				Element:code
					commit
				Element:td
					boolean
				Element:td
					Optional
				Element:td
					If set to
				Element:code
					false
					, this buy will not be immediately completed. Use the
				Element:a
					commit
					call to complete it. Default value:
				Element:code
					true
				Element:tr
				Element:td
				Element:code
					quote
				Element:td
					boolean
				Element:td
					Optional
				Element:td
					If set to
				Element:code
					true
					, response will return an unsave buy for detailed price quote. Default value:
				Element:code
					false
			Node:
			(type) c
			(layer)1
				Element:h2
					Commit a buy
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example request
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl https://api.coinbase.com/v2/accounts/82de7fcd-db72-5085-8ceb-bee19303080b/buys/a333743d-184a-5b5b-abe8-11612fc44ab5/commit / -X POST
				Element:span
					\
					-H
				Element:span
					'Authorization: Bearer abd90df5f27a7b170cd775abf89d632b350b7c1c9d53e08b340cd9832ce52c2c'
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'coinbase/wallet'
				Element:span
					client
				Element:span
					=
				Element:span
					Coinbase
				Element:span
					::
				Element:span
					Wallet
				Element:span
					::
				Element:span
					Client
				Element:span
					.
				Element:span
					new
				Element:span
					(
				Element:span
					api_key:
				Element:span
					<
				Element:span
					api
				Element:span
					key
				Element:span
					>
				Element:span
					,
				Element:span
					api_secret:
				Element:span
					<
				Element:span
					api
				Element:span
					secret
				Element:span
					>
				Element:span
					)
				Element:span
					buy
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					commit_buy
				Element:span
					(
				Element:span
					'2bbf394c-193b-5b2a-9155-3b4732659ede'
				Element:span
					,
				Element:span
					'a333743d-184a-5b5b-abe8-11612fc44ab5'
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					from
				Element:span
					coinbase.wallet.client
				Element:span
					import
				Element:span
					Client
				Element:span
					client
				Element:span
					=
				Element:span
					Client
				Element:span
					(
				Element:span
					<
				Element:span
					api_key
				Element:span
					>
				Element:span
					,
				Element:span
					<
				Element:span
					api_secret
				Element:span
					>
				Element:span
					)
				Element:span
					buy
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					commit_buy
				Element:span
					(
				Element:span
					'2bbf394c-193b-5b2a-9155-3b4732659ede'
				Element:span
					,
				Element:span
					'a333743d-184a-5b5b-abe8-11612fc44ab5'
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					var
				Element:span
					Client
				Element:span
					=
				Element:span
					require
				Element:span
					(
				Element:span
					'coinbase'
				Element:span
					).
				Element:span
					Client
				Element:span
					;
				Element:span
					var
				Element:span
					client
				Element:span
					=
				Element:span
					new
				Element:span
					Client
				Element:span
					({
				Element:span
					'apiKey'
				Element:span
					:
				Element:span
					'API KEY'
				Element:span
					,
				Element:span
					'apiSecret'
				Element:span
					:
				Element:span
					'API SECRET'
				Element:span
					});
				Element:span
					client
				Element:span
					.
				Element:span
					getAccount
				Element:span
					(
				Element:span
					'2bbf394c-193b-5b2a-9155-3b4732659ede'
				Element:span
					,
				Element:span
					function
				Element:span
					(
				Element:span
					err
				Element:span
					,
				Element:span
					account
				Element:span
					)
				Element:span
					{
				Element:span
					account
				Element:span
					.
				Element:span
					getBuy
				Element:span
					(
				Element:span
					'a333743d-184a-5b5b-abe8-11612fc44ab5'
				Element:span
					,
				Element:span
					function
				Element:span
					(
				Element:span
					err
				Element:span
					,
				Element:span
					tx
				Element:span
					)
				Element:span
					{
				Element:span
					tx
				Element:span
					.
				Element:span
					commit
				Element:span
					(
				Element:span
					function
				Element:span
					(
				Element:span
					err
				Element:span
					,
				Element:span
					resp
				Element:span
					)
				Element:span
					{
				Element:span
					console
				Element:span
					.
				Element:span
					log
				Element:span
					(
				Element:span
					resp
				Element:span
					);
				Element:span
					});
				Element:span
					});
				Element:span
					});
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Response (200)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"data"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"a333743d-184a-5b5b-abe8-11612fc44ab5"
				Element:span
					,
				Element:span
				Element:span
					"status"
				Element:span
					:
				Element:span
				Element:span
					"created"
				Element:span
					,
				Element:span
				Element:span
					"payment_method"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"83562370-3e5c-51db-87da-752af5ab9559"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"payment_method"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/payment-methods/83562370-3e5c-51db-87da-752af5ab9559"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"transaction"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"763d1401-fd17-5a18-852a-9cca5ac2f9c0"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"transaction"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/accounts/2bbf394c-193b-5b2a-9155-3b4732659ede/transactions/441b9494-b3f0-5b98-b9b0-4d82c21c252a"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"10.00000000"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"BTC"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"total"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"102.01"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"subtotal"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"101.00"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-04-01T18:43:37-07:00"
				Element:span
					,
				Element:span
				Element:span
					"updated_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-04-01T18:43:37-07:00"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"buy"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/accounts/2bbf394c-193b-5b2a-9155-3b4732659ede/buys/a333743d-184a-5b5b-abe8-11612fc44ab5"
				Element:span
					,
				Element:span
				Element:span
					"committed"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"instant"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"fee"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"1.01"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"payout_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-04-07T18:43:37-07:00"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Completes a buy that is created in
				Element:code
					commit: false
					state.
			Node:
			(type) c
			(layer)1
				Element:p
					If the exchange rate has changed since the buy was created, this call will fail with the error
				Element:em
					“The exchange rate updated while you were waiting. The new total is shown below”
					.
			Node:
			(type) c
			(layer)1
				Element:p
					The buy’s total will also be updated. You can repeat the
				Element:code
					/commit
					call to accept the new values and start the buy at the new rates.
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					POST https://api.coinbase.com/v2/accounts/:account_id/buys/:buy_id/commit
			Node:
			(type) c
			(layer)1
				Element:h3
					Scopes
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:code
					wallet:buys:create
			Node:
			(type) c
			(layer)1
				Element:h3
					Arguments
			Node:
			(type) c
			(layer)1
				Element:p
				Element:em
					None
			Node:
			(type) h1
			(layer)1
				Element:h1
					Sells
			Node:
			(type) c
			(layer)1
				Element:h2
					Sell resource
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example sell resource
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"67e0eaec-07d7-54c4-a72c-2e92826897df"
				Element:span
					,
				Element:span
				Element:span
					"status"
				Element:span
					:
				Element:span
				Element:span
					"completed"
				Element:span
					,
				Element:span
				Element:span
					"payment_method"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"83562370-3e5c-51db-87da-752af5ab9559"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"payment_method"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/payment-methods/83562370-3e5c-51db-87da-752af5ab9559"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"transaction"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"441b9494-b3f0-5b98-b9b0-4d82c21c252a"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"transaction"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/accounts/2bbf394c-193b-5b2a-9155-3b4732659ede/transactions/441b9494-b3f0-5b98-b9b0-4d82c21c252a"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"1.00000000"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"BTC"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"total"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"9.75"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"subtotal"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"9.90"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-01-31T20:49:02Z"
				Element:span
					,
				Element:span
				Element:span
					"updated_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-02-11T16:54:02-08:00"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"sell"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/accounts/2bbf394c-193b-5b2a-9155-3b4732659ede/sells/67e0eaec-07d7-54c4-a72c-2e92826897df"
				Element:span
					,
				Element:span
				Element:span
					"committed"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"instant"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"fee"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"0.15"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"payout_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-02-18T16:54:00-08:00"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Sell resource represents a sell of bitcoin or ethereum using a payment method (either a bank or a fiat account). Each committed sell also has an associated transaction.
			Node:
			(type) c
			(layer)1
				Element:p
					Sells can be started with
				Element:code
					commit: false
					which is useful when displaying the confirmation for a sell. These sells will never complete and receive an associated transaction unless they are committed separately.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Fields
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
				Element:code
					id
				Element:em
					string
				Element:td
					Resource ID
				Element:tr
				Element:td
				Element:code
					status
				Element:em
					string,
				Element:a
					enumerable
				Element:td
					Status of the sell. Currently available values:
				Element:code
					created
					,
				Element:code
					completed
					,
				Element:code
					canceled
				Element:tr
				Element:td
				Element:code
					payment_method
				Element:em
					hash
				Element:td
					Associated payment method (e.g. a bank, fiat account)
				Element:tr
				Element:td
				Element:code
					transaction
				Element:em
					hash
				Element:td
					Associated transaction (e.g. a bank, fiat account)
				Element:tr
				Element:td
				Element:code
					amount
				Element:em
				Element:a
					money hash
				Element:td
					Amount in bitcoin or ethereum
				Element:tr
				Element:td
				Element:code
					total
				Element:em
				Element:a
					money hash
				Element:td
					Fiat amount with fees
				Element:tr
				Element:td
				Element:code
					subtotal
				Element:em
				Element:a
					money hash
				Element:td
					Fiat amount without fees
				Element:tr
				Element:td
				Element:code
					fee
				Element:em
				Element:a
					money hash
				Element:td
					Fees associated to this sell
				Element:tr
				Element:td
				Element:code
					created_at
				Element:em
					timestamp
				Element:td
				Element:tr
				Element:td
				Element:code
					updated_at
				Element:em
					timestamp
				Element:td
				Element:tr
				Element:td
				Element:code
					resource
				Element:em
					string, constant
				Element:strong
					sell
				Element:td
				Element:tr
				Element:td
				Element:code
					resource_path
				Element:em
					string
				Element:td
				Element:tr
				Element:td
				Element:code
					committed
				Element:em
					boolean
				Element:td
					Has this sell been committed?
				Element:tr
				Element:td
				Element:code
					instant
				Element:em
					boolean
				Element:td
					Was this sell executed instantly?
				Element:tr
				Element:td
				Element:code
					payout_at
				Element:em
					timestamp, optional
				Element:td
					When a sell isn’t executed instantly, it will receive a payout date for the time it will be executed
			Node:
			(type) c
			(layer)1
				Element:h2
					List sells
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example request
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl https://api.coinbase.com/v2/accounts/2bbf394c-193b-5b2a-9155-3b4732659ede/sells / -H
				Element:span
					'Authorization: Bearer abd90df5f27a7b170cd775abf89d632b350b7c1c9d53e08b340cd9832ce52c2c'
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'coinbase/wallet'
				Element:span
					client
				Element:span
					=
				Element:span
					Coinbase
				Element:span
					::
				Element:span
					Wallet
				Element:span
					::
				Element:span
					Client
				Element:span
					.
				Element:span
					new
				Element:span
					(
				Element:span
					api_key:
				Element:span
					<
				Element:span
					api
				Element:span
					key
				Element:span
					>
				Element:span
					,
				Element:span
					api_secret:
				Element:span
					<
				Element:span
					api
				Element:span
					secret
				Element:span
					>
				Element:span
					)
				Element:span
					sells
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					list_sells
				Element:span
					(
				Element:span
					'2bbf394c-193b-5b2a-9155-3b4732659ede'
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					from
				Element:span
					coinbase.wallet.client
				Element:span
					import
				Element:span
					Client
				Element:span
					client
				Element:span
					=
				Element:span
					Client
				Element:span
					(
				Element:span
					<
				Element:span
					api_key
				Element:span
					>
				Element:span
					,
				Element:span
					<
				Element:span
					api_secret
				Element:span
					>
				Element:span
					)
				Element:span
					txs
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					get_sells
				Element:span
					(
				Element:span
					'2bbf394c-193b-5b2a-9155-3b4732659ede'
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					var
				Element:span
					Client
				Element:span
					=
				Element:span
					require
				Element:span
					(
				Element:span
					'coinbase'
				Element:span
					).
				Element:span
					Client
				Element:span
					;
				Element:span
					var
				Element:span
					client
				Element:span
					=
				Element:span
					new
				Element:span
					Client
				Element:span
					({
				Element:span
					'apiKey'
				Element:span
					:
				Element:span
					'API KEY'
				Element:span
					,
				Element:span
					'apiSecret'
				Element:span
					:
				Element:span
					'API SECRET'
				Element:span
					});
				Element:span
					client
				Element:span
					.
				Element:span
					getAccount
				Element:span
					(
				Element:span
					'2bbf394c-193b-5b2a-9155-3b4732659ede'
				Element:span
					,
				Element:span
					function
				Element:span
					(
				Element:span
					err
				Element:span
					,
				Element:span
					account
				Element:span
					)
				Element:span
					{
				Element:span
					account
				Element:span
					.
				Element:span
					getSells
				Element:span
					(
				Element:span
					function
				Element:span
					(
				Element:span
					err
				Element:span
					,
				Element:span
					txs
				Element:span
					)
				Element:span
					{
				Element:span
					console
				Element:span
					.
				Element:span
					log
				Element:span
					(
				Element:span
					txs
				Element:span
					);
				Element:span
					});
				Element:span
					});
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example response
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"pagination"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"ending_before"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"starting_after"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"limit"
				Element:span
					:
				Element:span
				Element:span
					25
				Element:span
					,
				Element:span
				Element:span
					"order"
				Element:span
					:
				Element:span
				Element:span
					"desc"
				Element:span
					,
				Element:span
				Element:span
					"previous_uri"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"next_uri"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"data"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"9e14d574-30fa-5d85-b02c-6be0d851d61d"
				Element:span
					,
				Element:span
				Element:span
					"status"
				Element:span
					:
				Element:span
				Element:span
					"created"
				Element:span
					,
				Element:span
				Element:span
					"payment_method"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"83562370-3e5c-51db-87da-752af5ab9559"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"payment_method"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/payment-methods/83562370-3e5c-51db-87da-752af5ab9559"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"transaction"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"4117f7d6-5694-5b36-bc8f-847509850ea4"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"transaction"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/accounts/2bbf394c-193b-5b2a-9155-3b4732659ede/transactions/4117f7d6-5694-5b36-bc8f-847509850ea4"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"10.00000000"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"BTC"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"total"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"98.01"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"subtotal"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"99.00"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-03-26T23:43:59-07:00"
				Element:span
					,
				Element:span
				Element:span
					"updated_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-03-26T23:44:09-07:00"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"sell"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/accounts/2bbf394c-193b-5b2a-9155-3b4732659ede/sells/9e14d574-30fa-5d85-b02c-6be0d851d61d"
				Element:span
					,
				Element:span
				Element:span
					"committed"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"instant"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"fee"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"10.1"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"payout_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-04-01T23:43:59-07:00"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					]
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Lists sells for an account.
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET https://api.coinbase.com/v2/accounts/:account_id/sells
			Node:
			(type) c
			(layer)1
				Element:h3
					Scopes
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:code
					wallet:sells:read
			Node:
			(type) c
			(layer)1
				Element:h2
					Show a sell
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example request
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl https://api.coinbase.com/v2/accounts/2bbf394c-193b-5b2a-9155-3b4732659ede/sells/dd3183eb-af1d-5f5d-a90d-cbff946435ff / -H
				Element:span
					'Authorization: Bearer abd90df5f27a7b170cd775abf89d632b350b7c1c9d53e08b340cd9832ce52c2c'
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'coinbase/wallet'
				Element:span
					client
				Element:span
					=
				Element:span
					Coinbase
				Element:span
					::
				Element:span
					Wallet
				Element:span
					::
				Element:span
					Client
				Element:span
					.
				Element:span
					new
				Element:span
					(
				Element:span
					api_key:
				Element:span
					<
				Element:span
					api
				Element:span
					key
				Element:span
					>
				Element:span
					,
				Element:span
					api_secret:
				Element:span
					<
				Element:span
					api
				Element:span
					secret
				Element:span
					>
				Element:span
					)
				Element:span
					sell
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					list_sell
				Element:span
					(
				Element:span
					'2bbf394c-193b-5b2a-9155-3b4732659ede'
				Element:span
					,
				Element:span
					'dd3183eb-af1d-5f5d-a90d-cbff946435ff'
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					from
				Element:span
					coinbase.wallet.client
				Element:span
					import
				Element:span
					Client
				Element:span
					client
				Element:span
					=
				Element:span
					Client
				Element:span
					(
				Element:span
					<
				Element:span
					api_key
				Element:span
					>
				Element:span
					,
				Element:span
					<
				Element:span
					api_secret
				Element:span
					>
				Element:span
					)
				Element:span
					sell
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					get_sell
				Element:span
					(
				Element:span
					'2bbf394c-193b-5b2a-9155-3b4732659ede'
				Element:span
					,
				Element:span
					'dd3183eb-af1d-5f5d-a90d-cbff946435ff'
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					var
				Element:span
					Client
				Element:span
					=
				Element:span
					require
				Element:span
					(
				Element:span
					'coinbase'
				Element:span
					).
				Element:span
					Client
				Element:span
					;
				Element:span
					var
				Element:span
					client
				Element:span
					=
				Element:span
					new
				Element:span
					Client
				Element:span
					({
				Element:span
					'apiKey'
				Element:span
					:
				Element:span
					'API KEY'
				Element:span
					,
				Element:span
					'apiSecret'
				Element:span
					:
				Element:span
					'API SECRET'
				Element:span
					});
				Element:span
					client
				Element:span
					.
				Element:span
					getAccount
				Element:span
					(
				Element:span
					'2bbf394c-193b-5b2a-9155-3b4732659ede'
				Element:span
					,
				Element:span
					function
				Element:span
					(
				Element:span
					err
				Element:span
					,
				Element:span
					account
				Element:span
					)
				Element:span
					{
				Element:span
					account
				Element:span
					.
				Element:span
					getSell
				Element:span
					(
				Element:span
					'dd3183eb-af1d-5f5d-a90d-cbff946435ff'
				Element:span
					,
				Element:span
					function
				Element:span
					(
				Element:span
					err
				Element:span
					,
				Element:span
					tx
				Element:span
					)
				Element:span
					{
				Element:span
					console
				Element:span
					.
				Element:span
					log
				Element:span
					(
				Element:span
					tx
				Element:span
					);
				Element:span
					});
				Element:span
					});
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example response
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"data"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"9e14d574-30fa-5d85-b02c-6be0d851d61d"
				Element:span
					,
				Element:span
				Element:span
					"status"
				Element:span
					:
				Element:span
				Element:span
					"created"
				Element:span
					,
				Element:span
				Element:span
					"payment_method"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"83562370-3e5c-51db-87da-752af5ab9559"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"payment_method"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/payment-methods/83562370-3e5c-51db-87da-752af5ab9559"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"transaction"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"4117f7d6-5694-5b36-bc8f-847509850ea4"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"transaction"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/accounts/2bbf394c-193b-5b2a-9155-3b4732659ede/transactions/4117f7d6-5694-5b36-bc8f-847509850ea4"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"10.00000000"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"BTC"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"total"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"98.01"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"subtotal"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"99.00"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-03-26T23:43:59-07:00"
				Element:span
					,
				Element:span
				Element:span
					"updated_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-03-26T23:44:09-07:00"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"sell"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/accounts/2bbf394c-193b-5b2a-9155-3b4732659ede/buys/9e14d574-30fa-5d85-b02c-6be0d851d61d"
				Element:span
					,
				Element:span
				Element:span
					"committed"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"instant"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"fee"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"10.1"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"payout_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-04-01T23:43:59-07:00"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Show an individual sell.
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET https://api.coinbase.com/v2/accounts/:account_id/sells/:sell_id
			Node:
			(type) c
			(layer)1
				Element:h3
					Scopes
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:code
					wallet:sells:read
			Node:
			(type) c
			(layer)1
				Element:h2
					Place sell order
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example request
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl https://api.coinbase.com/v2/accounts/82de7fcd-db72-5085-8ceb-bee19303080b/sells / -X POST
				Element:span
					\
					-H
				Element:span
					'Content-Type: application/json'
				Element:span
					\
					-H
				Element:span
					'Authorization: Bearer abd90df5f27a7b170cd775abf89d632b350b7c1c9d53e08b340cd9832ce52c2c'
				Element:span
					\
					-d
				Element:span
					'{ "amount": "10", "currency": "BTC", "payment_method": "83562370-3e5c-51db-87da-752af5ab9559" }'
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'coinbase/wallet'
				Element:span
					client
				Element:span
					=
				Element:span
					Coinbase
				Element:span
					::
				Element:span
					Wallet
				Element:span
					::
				Element:span
					Client
				Element:span
					.
				Element:span
					new
				Element:span
					(
				Element:span
					api_key:
				Element:span
					<
				Element:span
					api
				Element:span
					key
				Element:span
					>
				Element:span
					,
				Element:span
					api_secret:
				Element:span
					<
				Element:span
					api
				Element:span
					secret
				Element:span
					>
				Element:span
					)
				Element:span
					sell
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					sell
				Element:span
					(
				Element:span
					'2bbf394c-193b-5b2a-9155-3b4732659ede'
				Element:span
					,
				Element:span
					{
				Element:span
					"amount"
				Element:span
					=>
				Element:span
					"10"
				Element:span
					,
				Element:span
					"currency"
				Element:span
					=>
				Element:span
					"BTC"
				Element:span
					,
				Element:span
					"payment_method"
				Element:span
					=>
				Element:span
					"83562370-3e5c-51db-87da-752af5ab9559"
				Element:span
					})
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					from
				Element:span
					coinbase.wallet.client
				Element:span
					import
				Element:span
					Client
				Element:span
					client
				Element:span
					=
				Element:span
					Client
				Element:span
					(
				Element:span
					<
				Element:span
					api_key
				Element:span
					>
				Element:span
					,
				Element:span
					<
				Element:span
					api_secret
				Element:span
					>
				Element:span
					)
				Element:span
					sell
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					sell
				Element:span
					(
				Element:span
					'2bbf394c-193b-5b2a-9155-3b4732659ede'
				Element:span
					,
				Element:span
					{
				Element:span
					"amount"
				Element:span
					:
				Element:span
					"10"
				Element:span
					,
				Element:span
					"currency"
				Element:span
					:
				Element:span
					"BTC"
				Element:span
					,
				Element:span
					"payment_method"
				Element:span
					:
				Element:span
					"83562370-3e5c-51db-87da-752af5ab9559"
				Element:span
					})
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					var
				Element:span
					Client
				Element:span
					=
				Element:span
					require
				Element:span
					(
				Element:span
					'coinbase'
				Element:span
					).
				Element:span
					Client
				Element:span
					;
				Element:span
					var
				Element:span
					client
				Element:span
					=
				Element:span
					new
				Element:span
					Client
				Element:span
					({
				Element:span
					'apiKey'
				Element:span
					:
				Element:span
					'API KEY'
				Element:span
					,
				Element:span
					'apiSecret'
				Element:span
					:
				Element:span
					'API SECRET'
				Element:span
					});
				Element:span
					client
				Element:span
					.
				Element:span
					getAccount
				Element:span
					(
				Element:span
					'2bbf394c-193b-5b2a-9155-3b4732659ede'
				Element:span
					,
				Element:span
					function
				Element:span
					(
				Element:span
					err
				Element:span
					,
				Element:span
					account
				Element:span
					)
				Element:span
					{
				Element:span
					account
				Element:span
					.
				Element:span
					sell
				Element:span
					({
				Element:span
					"amount"
				Element:span
					:
				Element:span
					"10"
				Element:span
					,
				Element:span
					"currency"
				Element:span
					:
				Element:span
					"BTC"
				Element:span
					,
				Element:span
					"payment_method"
				Element:span
					:
				Element:span
					"83562370-3e5c-51db-87da-752af5ab9559"
				Element:span
					},
				Element:span
					function
				Element:span
					(
				Element:span
					err
				Element:span
					,
				Element:span
					tx
				Element:span
					)
				Element:span
					{
				Element:span
					console
				Element:span
					.
				Element:span
					log
				Element:span
					(
				Element:span
					tx
				Element:span
					);
				Element:span
					});
				Element:span
					});
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Response (201)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"data"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"a333743d-184a-5b5b-abe8-11612fc44ab5"
				Element:span
					,
				Element:span
				Element:span
					"status"
				Element:span
					:
				Element:span
				Element:span
					"created"
				Element:span
					,
				Element:span
				Element:span
					"payment_method"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"83562370-3e5c-51db-87da-752af5ab9559"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"payment_method"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/payment-methods/83562370-3e5c-51db-87da-752af5ab9559"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"transaction"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"763d1401-fd17-5a18-852a-9cca5ac2f9c0"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"transaction"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/accounts/2bbf394c-193b-5b2a-9155-3b4732659ede/transactions/763d1401-fd17-5a18-852a-9cca5ac2f9c0"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"10.00000000"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"BTC"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"total"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"98.01"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"subtotal"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"99.00"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-04-01T18:43:37-07:00"
				Element:span
					,
				Element:span
				Element:span
					"updated_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-04-01T18:43:37-07:00"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"sell"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/accounts/2bbf394c-193b-5b2a-9155-3b4732659ede/sells/a333743d-184a-5b5b-abe8-11612fc44ab5"
				Element:span
					,
				Element:span
				Element:span
					"committed"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"instant"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"fee"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"10.1"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"payout_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-04-07T18:43:37-07:00"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Sells a user-defined amount of bitcoin or ethereum.
			Node:
			(type) c
			(layer)1
				Element:p
					There are two ways to define sell amounts–you can use either the
				Element:code
					amount
					or the
				Element:code
					total
					parameter:
			Node:
			(type) c
			(layer)1
				Element:ol
				Element:li
				Element:p
					When supplying
				Element:code
					amount
					, you’ll get the amount of bitcoin or ethereum defined. With
				Element:code
					amount
					it’s recommended to use
				Element:code
					BTC
					or
				Element:code
					ETH
					as the
				Element:code
					currency
					value, but you can always specify a fiat currency and the amount will be converted to BTC or ETH respectively.
				Element:li
				Element:p
					When supplying
				Element:code
					total
					, your payment method will be credited the total amount and you’ll get the amount in BTC or ETH after fees have been reduced from the subtotal. With
				Element:code
					total
					it’s recommended to use the currency of the payment method as the
				Element:code
					currency
					parameter, but you can always specify a different currency and it will be converted.
			Node:
			(type) c
			(layer)1
				Element:p
					Given the price of bitcoin or ethereum depend on the time of the call and amount of the sell, it’s recommended to use the
				Element:code
					commit: false
					parameter to create an uncommitted sell to get a quote and then to commit that with
				Element:a
					a separate request
					.
			Node:
			(type) c
			(layer)1
				Element:p
					If you need to query the sell price without locking in the sell, you can use
				Element:code
					quote: true
					option. This returns an unsaved sell and unlike
				Element:code
					commit: false
					, this sell can’t be completed. This option is useful when you need to show the detailed sell price quote for the user when they are filling a form or similar situation.
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					POST https://api.coinbase.com/v2/accounts/:account_id/sells
			Node:
			(type) c
			(layer)1
				Element:h3
					Scopes
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:code
					wallet:sells:create
			Node:
			(type) c
			(layer)1
				Element:h3
					Arguments
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Type
				Element:th
					Required
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
				Element:code
					amount
				Element:td
					string
				Element:td
					Required
				Element:td
					Sell amount
				Element:tr
				Element:td
				Element:code
					total
				Element:td
					string
				Element:td
					Optional
				Element:td
					Sell amount with fees (alternative to
				Element:code
					amount
					)
				Element:tr
				Element:td
				Element:code
					currency
				Element:td
					string
				Element:td
					Required
				Element:td
					Currency for the
				Element:code
					amount
				Element:tr
				Element:td
				Element:code
					payment_method
				Element:td
					string
				Element:td
					Optional
				Element:td
					The ID of the payment method that should be used for the sell. Payment methods can be listed using the
				Element:code
					GET /payment-methods
					API call
				Element:tr
				Element:td
				Element:code
					agree_btc_amount_varies
				Element:td
					boolean
				Element:td
					Optional
				Element:td
					Whether or not you would still like to sell if you have to wait for your money to arrive to lock in a price
				Element:tr
				Element:td
				Element:code
					commit
				Element:td
					boolean
				Element:td
					Optional
				Element:td
					If set to
				Element:code
					false
					, this sell will not be immediately completed. Use the
				Element:a
					commit
					call to complete it. Default value:
				Element:code
					true
				Element:tr
				Element:td
				Element:code
					quote
				Element:td
					boolean
				Element:td
					Optional
				Element:td
					If set to
				Element:code
					true
					, response will return an unsave sell for detailed price quote. Default value:
				Element:code
					false
			Node:
			(type) c
			(layer)1
				Element:h2
					Commit a sell
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example request
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl https://api.coinbase.com/v2/accounts/82de7fcd-db72-5085-8ceb-bee19303080b/sells/a333743d-184a-5b5b-abe8-11612fc44ab5/commit
				Element:span
					\
					-X POST
				Element:span
					\
					-H
				Element:span
					'Authorization: Bearer abd90df5f27a7b170cd775abf89d632b350b7c1c9d53e08b340cd9832ce52c2c'
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'coinbase/wallet'
				Element:span
					client
				Element:span
					=
				Element:span
					Coinbase
				Element:span
					::
				Element:span
					Wallet
				Element:span
					::
				Element:span
					Client
				Element:span
					.
				Element:span
					new
				Element:span
					(
				Element:span
					api_key:
				Element:span
					<
				Element:span
					api
				Element:span
					key
				Element:span
					>
				Element:span
					,
				Element:span
					api_secret:
				Element:span
					<
				Element:span
					api
				Element:span
					secret
				Element:span
					>
				Element:span
					)
				Element:span
					sell
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					commit_sell
				Element:span
					(
				Element:span
					'2bbf394c-193b-5b2a-9155-3b4732659ede'
				Element:span
					,
				Element:span
					'a333743d-184a-5b5b-abe8-11612fc44ab5'
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					from
				Element:span
					coinbase.wallet.client
				Element:span
					import
				Element:span
					Client
				Element:span
					client
				Element:span
					=
				Element:span
					Client
				Element:span
					(
				Element:span
					<
				Element:span
					api_key
				Element:span
					>
				Element:span
					,
				Element:span
					<
				Element:span
					api_secret
				Element:span
					>
				Element:span
					)
				Element:span
					sell
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					commit_sell
				Element:span
					(
				Element:span
					'2bbf394c-193b-5b2a-9155-3b4732659ede'
				Element:span
					,
				Element:span
					'a333743d-184a-5b5b-abe8-11612fc44ab5'
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					var
				Element:span
					Client
				Element:span
					=
				Element:span
					require
				Element:span
					(
				Element:span
					'coinbase'
				Element:span
					).
				Element:span
					Client
				Element:span
					;
				Element:span
					var
				Element:span
					client
				Element:span
					=
				Element:span
					new
				Element:span
					Client
				Element:span
					({
				Element:span
					'apiKey'
				Element:span
					:
				Element:span
					'API KEY'
				Element:span
					,
				Element:span
					'apiSecret'
				Element:span
					:
				Element:span
					'API SECRET'
				Element:span
					});
				Element:span
					client
				Element:span
					.
				Element:span
					getAccount
				Element:span
					(
				Element:span
					'2bbf394c-193b-5b2a-9155-3b4732659ede'
				Element:span
					,
				Element:span
					function
				Element:span
					(
				Element:span
					err
				Element:span
					,
				Element:span
					account
				Element:span
					)
				Element:span
					{
				Element:span
					account
				Element:span
					.
				Element:span
					getSell
				Element:span
					(
				Element:span
					'a333743d-184a-5b5b-abe8-11612fc44ab5'
				Element:span
					,
				Element:span
					function
				Element:span
					(
				Element:span
					err
				Element:span
					,
				Element:span
					tx
				Element:span
					)
				Element:span
					{
				Element:span
					tx
				Element:span
					.
				Element:span
					commit
				Element:span
					(
				Element:span
					function
				Element:span
					(
				Element:span
					err
				Element:span
					,
				Element:span
					resp
				Element:span
					)
				Element:span
					{
				Element:span
					console
				Element:span
					.
				Element:span
					log
				Element:span
					(
				Element:span
					resp
				Element:span
					);
				Element:span
					});
				Element:span
					});
				Element:span
					});
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Response (200)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"data"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"a333743d-184a-5b5b-abe8-11612fc44ab5"
				Element:span
					,
				Element:span
				Element:span
					"status"
				Element:span
					:
				Element:span
				Element:span
					"created"
				Element:span
					,
				Element:span
				Element:span
					"payment_method"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"83562370-3e5c-51db-87da-752af5ab9559"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"payment_method"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/payment-methods/83562370-3e5c-51db-87da-752af5ab9559"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"transaction"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"763d1401-fd17-5a18-852a-9cca5ac2f9c0"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"transaction"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/accounts/2bbf394c-193b-5b2a-9155-3b4732659ede/transactions763d1401-fd17-5a18-852a-9cca5ac2f9c0"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"10.00000000"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"BTC"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"total"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"98.01"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"subtotal"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"99.00"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-04-01T18:43:37-07:00"
				Element:span
					,
				Element:span
				Element:span
					"updated_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-04-01T18:43:37-07:00"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"sell"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/accounts/2bbf394c-193b-5b2a-9155-3b4732659ede/sells/a333743d-184a-5b5b-abe8-11612fc44ab5"
				Element:span
					,
				Element:span
				Element:span
					"committed"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"instant"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"fee"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"10.1"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"payout_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-04-07T18:43:37-07:00"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Completes a sell that is created in
				Element:code
					commit: false
					state.
			Node:
			(type) c
			(layer)1
				Element:p
					If the exchange rate has changed since the sell was created, this call will fail with the error
				Element:em
					“The exchange rate updated while you were waiting. The new total is shown below”
					.
			Node:
			(type) c
			(layer)1
				Element:p
					The sell’s total will also be updated. You can repeat the
				Element:code
					/commit
					call to accept the new values and commit the sell at the new rates.
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					POST https://api.coinbase.com/v2/accounts/:account_id/sells/:sell_id/commit
			Node:
			(type) c
			(layer)1
				Element:h3
					Scopes
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:code
					wallet:sells:create
			Node:
			(type) c
			(layer)1
				Element:h3
					Arguments
			Node:
			(type) c
			(layer)1
				Element:p
				Element:em
					None
			Node:
			(type) h1
			(layer)1
				Element:h1
					Deposits
			Node:
			(type) c
			(layer)1
				Element:h2
					Deposit resource
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example deposit resource
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"67e0eaec-07d7-54c4-a72c-2e92826897df"
				Element:span
					,
				Element:span
				Element:span
					"status"
				Element:span
					:
				Element:span
				Element:span
					"completed"
				Element:span
					,
				Element:span
				Element:span
					"payment_method"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"83562370-3e5c-51db-87da-752af5ab9559"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"payment_method"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/payment-methods/83562370-3e5c-51db-87da-752af5ab9559"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"transaction"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"441b9494-b3f0-5b98-b9b0-4d82c21c252a"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"transaction"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/accounts/2bbf394c-193b-5b2a-9155-3b4732659ede/transactions/441b9494-b3f0-5b98-b9b0-4d82c21c252a"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"10.00"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"subtotal"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"10.00"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-01-31T20:49:02Z"
				Element:span
					,
				Element:span
				Element:span
					"updated_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-02-11T16:54:02-08:00"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"deposit"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/accounts/2bbf394c-193b-5b2a-9155-3b4732659ede/deposits/67e0eaec-07d7-54c4-a72c-2e92826897df"
				Element:span
					,
				Element:span
				Element:span
					"committed"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"fee"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"0.00"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"payout_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-02-18T16:54:00-08:00"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Deposit resource represents a deposit of funds using a payment method (e.g. a bank). Each committed deposit also has an assoaciated transaction.
			Node:
			(type) c
			(layer)1
				Element:p
					Deposits can be started with
				Element:code
					commit: false
					which is useful when displaying the confirmation for a deposit. These deposits will never complete and receive an assoaciated transaction unless they are committed separately.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Fields
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
				Element:code
					id
				Element:em
					string
				Element:td
					Resource ID
				Element:tr
				Element:td
				Element:code
					status
				Element:em
					string,
				Element:a
					enumerable
				Element:td
					Status of the deposit. Currently available values:
				Element:code
					created
					,
				Element:code
					completed
					,
				Element:code
					canceled
				Element:tr
				Element:td
				Element:code
					payment_method
				Element:em
					hash
				Element:td
					Associated payment method (e.g. a bank)
				Element:tr
				Element:td
				Element:code
					transaction
				Element:em
					hash
				Element:td
					Associated transaction (e.g. a bank, fiat account)
				Element:tr
				Element:td
				Element:code
					amount
				Element:em
				Element:a
					money hash
				Element:td
					Amount
				Element:tr
				Element:td
				Element:code
					subtotal
				Element:em
				Element:a
					money hash
				Element:td
					Amount without fees
				Element:tr
				Element:td
				Element:code
					fee
				Element:em
				Element:a
					money hash
				Element:td
					Fees assoaciated to this deposit
				Element:tr
				Element:td
				Element:code
					created_at
				Element:em
					timestamp
				Element:td
				Element:tr
				Element:td
				Element:code
					updated_at
				Element:em
					timestamp
				Element:td
				Element:tr
				Element:td
				Element:code
					resource
				Element:em
					string, constant
				Element:strong
					deposit
				Element:td
				Element:tr
				Element:td
				Element:code
					resource_path
				Element:em
					string
				Element:td
				Element:tr
				Element:td
				Element:code
					committed
				Element:em
					boolean
				Element:td
					Has this deposit been committed?
				Element:tr
				Element:td
				Element:code
					payout_at
				Element:em
					timestamp, optional
				Element:td
					When a deposit isn’t executed instantly, it will receive a payout date for the time it will be executed
			Node:
			(type) c
			(layer)1
				Element:h2
					List deposits
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl https://api.coinbase.com/v2/accounts/2bbf394c-193b-5b2a-9155-3b4732659ede/deposits
				Element:span
					\
					-H
				Element:span
					'Authorization: Bearer abd90df5f27a7b170cd775abf89d632b350b7c1c9d53e08b340cd9832ce52c2c'
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'coinbase/wallet'
				Element:span
					client
				Element:span
					=
				Element:span
					Coinbase
				Element:span
					::
				Element:span
					Wallet
				Element:span
					::
				Element:span
					Client
				Element:span
					.
				Element:span
					new
				Element:span
					(
				Element:span
					api_key:
				Element:span
					<
				Element:span
					api
				Element:span
					key
				Element:span
					>
				Element:span
					,
				Element:span
					api_secret:
				Element:span
					<
				Element:span
					api
				Element:span
					secret
				Element:span
					>
				Element:span
					)
				Element:span
					deposits
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					list_deposits
				Element:span
					(
				Element:span
					'2bbf394c-193b-5b2a-9155-3b4732659ede'
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					from
				Element:span
					coinbase.wallet.client
				Element:span
					import
				Element:span
					Client
				Element:span
					client
				Element:span
					=
				Element:span
					Client
				Element:span
					(
				Element:span
					<
				Element:span
					api_key
				Element:span
					>
				Element:span
					,
				Element:span
					<
				Element:span
					api_secret
				Element:span
					>
				Element:span
					)
				Element:span
					txs
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					get_deposits
				Element:span
					(
				Element:span
					'2bbf394c-193b-5b2a-9155-3b4732659ede'
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					var
				Element:span
					Client
				Element:span
					=
				Element:span
					require
				Element:span
					(
				Element:span
					'coinbase'
				Element:span
					).
				Element:span
					Client
				Element:span
					;
				Element:span
					var
				Element:span
					client
				Element:span
					=
				Element:span
					new
				Element:span
					Client
				Element:span
					({
				Element:span
					'apiKey'
				Element:span
					:
				Element:span
					'API KEY'
				Element:span
					,
				Element:span
					'apiSecret'
				Element:span
					:
				Element:span
					'API SECRET'
				Element:span
					});
				Element:span
					client
				Element:span
					.
				Element:span
					getAccount
				Element:span
					(
				Element:span
					'2bbf394c-193b-5b2a-9155-3b4732659ede'
				Element:span
					,
				Element:span
					function
				Element:span
					(
				Element:span
					err
				Element:span
					,
				Element:span
					account
				Element:span
					)
				Element:span
					{
				Element:span
					account
				Element:span
					.
				Element:span
					getDeposits
				Element:span
					(
				Element:span
					function
				Element:span
					(
				Element:span
					err
				Element:span
					,
				Element:span
					txs
				Element:span
					)
				Element:span
					{
				Element:span
					console
				Element:span
					.
				Element:span
					log
				Element:span
					(
				Element:span
					txs
				Element:span
					);
				Element:span
					});
				Element:span
					});
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example response
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"pagination"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"ending_before"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"starting_after"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"limit"
				Element:span
					:
				Element:span
				Element:span
					25
				Element:span
					,
				Element:span
				Element:span
					"order"
				Element:span
					:
				Element:span
				Element:span
					"desc"
				Element:span
					,
				Element:span
				Element:span
					"previous_uri"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"next_uri"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"data"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"67e0eaec-07d7-54c4-a72c-2e92826897df"
				Element:span
					,
				Element:span
				Element:span
					"status"
				Element:span
					:
				Element:span
				Element:span
					"completed"
				Element:span
					,
				Element:span
				Element:span
					"payment_method"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"83562370-3e5c-51db-87da-752af5ab9559"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"payment_method"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/payment-methods/83562370-3e5c-51db-87da-752af5ab9559"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"transaction"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"441b9494-b3f0-5b98-b9b0-4d82c21c252a"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"transaction"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/accounts/2bbf394c-193b-5b2a-9155-3b4732659ede/transactions/441b9494-b3f0-5b98-b9b0-4d82c21c252a"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"10.00"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"subtotal"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"10.00"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-01-31T20:49:02Z"
				Element:span
					,
				Element:span
				Element:span
					"updated_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-02-11T16:54:02-08:00"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"deposit"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/accounts/2bbf394c-193b-5b2a-9155-3b4732659ede/deposits/67e0eaec-07d7-54c4-a72c-2e92826897df"
				Element:span
					,
				Element:span
				Element:span
					"committed"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"fee"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"0.00"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"payout_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-02-18T16:54:00-08:00"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					]
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Lists deposits for an account.
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET https://api.coinbase.com/v2/accounts/:account_id/deposits
			Node:
			(type) c
			(layer)1
				Element:h3
					Scopes
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:code
					wallet:deposits:read
			Node:
			(type) c
			(layer)1
				Element:h2
					Show a deposit
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example request
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl https://api.coinbase.com/v2/accounts/2bbf394c-193b-5b2a-9155-3b4732659ede/deposits/67e0eaec-07d7-54c4-a72c-2e92826897df / -H
				Element:span
					'Authorization: Bearer abd90df5f27a7b170cd775abf89d632b350b7c1c9d53e08b340cd9832ce52c2c'
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'coinbase/wallet'
				Element:span
					client
				Element:span
					=
				Element:span
					Coinbase
				Element:span
					::
				Element:span
					Wallet
				Element:span
					::
				Element:span
					Client
				Element:span
					.
				Element:span
					new
				Element:span
					(
				Element:span
					api_key:
				Element:span
					<
				Element:span
					api
				Element:span
					key
				Element:span
					>
				Element:span
					,
				Element:span
					api_secret:
				Element:span
					<
				Element:span
					api
				Element:span
					secret
				Element:span
					>
				Element:span
					)
				Element:span
					deposit
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					list_deposit
				Element:span
					(
				Element:span
					'2bbf394c-193b-5b2a-9155-3b4732659ede'
				Element:span
					,
				Element:span
					'dd3183eb-af1d-5f5d-a90d-cbff946435ff'
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					from
				Element:span
					coinbase.wallet.client
				Element:span
					import
				Element:span
					Client
				Element:span
					client
				Element:span
					=
				Element:span
					Client
				Element:span
					(
				Element:span
					<
				Element:span
					api_key
				Element:span
					>
				Element:span
					,
				Element:span
					<
				Element:span
					api_secret
				Element:span
					>
				Element:span
					)
				Element:span
					deposit
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					get_deposit
				Element:span
					(
				Element:span
					'2bbf394c-193b-5b2a-9155-3b4732659ede'
				Element:span
					,
				Element:span
					'dd3183eb-af1d-5f5d-a90d-cbff946435ff'
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					var
				Element:span
					Client
				Element:span
					=
				Element:span
					require
				Element:span
					(
				Element:span
					'coinbase'
				Element:span
					).
				Element:span
					Client
				Element:span
					;
				Element:span
					var
				Element:span
					client
				Element:span
					=
				Element:span
					new
				Element:span
					Client
				Element:span
					({
				Element:span
					'apiKey'
				Element:span
					:
				Element:span
					'API KEY'
				Element:span
					,
				Element:span
					'apiSecret'
				Element:span
					:
				Element:span
					'API SECRET'
				Element:span
					});
				Element:span
					client
				Element:span
					.
				Element:span
					getAccount
				Element:span
					(
				Element:span
					'2bbf394c-193b-5b2a-9155-3b4732659ede'
				Element:span
					,
				Element:span
					function
				Element:span
					(
				Element:span
					err
				Element:span
					,
				Element:span
					account
				Element:span
					)
				Element:span
					{
				Element:span
					account
				Element:span
					.
				Element:span
					getDeposit
				Element:span
					(
				Element:span
					'dd3183eb-af1d-5f5d-a90d-cbff946435ff'
				Element:span
					,
				Element:span
					function
				Element:span
					(
				Element:span
					err
				Element:span
					,
				Element:span
					tx
				Element:span
					)
				Element:span
					{
				Element:span
					console
				Element:span
					.
				Element:span
					log
				Element:span
					(
				Element:span
					tx
				Element:span
					);
				Element:span
					});
				Element:span
					});
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example response
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"data"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"67e0eaec-07d7-54c4-a72c-2e92826897df"
				Element:span
					,
				Element:span
				Element:span
					"status"
				Element:span
					:
				Element:span
				Element:span
					"completed"
				Element:span
					,
				Element:span
				Element:span
					"payment_method"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"83562370-3e5c-51db-87da-752af5ab9559"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"payment_method"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/payment-methods/83562370-3e5c-51db-87da-752af5ab9559"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"transaction"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"441b9494-b3f0-5b98-b9b0-4d82c21c252a"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"transaction"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/accounts/2bbf394c-193b-5b2a-9155-3b4732659ede/transactions/441b9494-b3f0-5b98-b9b0-4d82c21c252a"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"10.00"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"subtotal"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"10.00"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-01-31T20:49:02Z"
				Element:span
					,
				Element:span
				Element:span
					"updated_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-02-11T16:54:02-08:00"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"deposit"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/accounts/2bbf394c-193b-5b2a-9155-3b4732659ede/deposits/67e0eaec-07d7-54c4-a72c-2e92826897df"
				Element:span
					,
				Element:span
				Element:span
					"committed"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"fee"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"0.00"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"payout_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-02-18T16:54:00-08:00"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Show an individual deposit.
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET https://api.coinbase.com/v2/accounts/:account_id/deposits/:deposit_id
			Node:
			(type) c
			(layer)1
				Element:h3
					Scopes
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:code
					wallet:deposits:read
			Node:
			(type) c
			(layer)1
				Element:h2
					Deposit funds
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl https://api.coinbase.com/v2/accounts/82de7fcd-db72-5085-8ceb-bee19303080b/deposits / -X POST
				Element:span
					\
					-H
				Element:span
					'Content-Type: application/json'
				Element:span
					\
					-H
				Element:span
					'Authorization: Bearer abd90df5f27a7b170cd775abf89d632b350b7c1c9d53e08b340cd9832ce52c2c'
				Element:span
					\
					-d
				Element:span
					'{ "amount": "10", "currency": "USD", "payment_method": "83562370-3e5c-51db-87da-752af5ab9559" }'
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'coinbase/wallet'
				Element:span
					client
				Element:span
					=
				Element:span
					Coinbase
				Element:span
					::
				Element:span
					Wallet
				Element:span
					::
				Element:span
					Client
				Element:span
					.
				Element:span
					new
				Element:span
					(
				Element:span
					api_key:
				Element:span
					<
				Element:span
					api
				Element:span
					key
				Element:span
					>
				Element:span
					,
				Element:span
					api_secret:
				Element:span
					<
				Element:span
					api
				Element:span
					secret
				Element:span
					>
				Element:span
					)
				Element:span
					deposit
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					deposit
				Element:span
					(
				Element:span
					'2bbf394c-193b-5b2a-9155-3b4732659ede'
				Element:span
					,
				Element:span
					{
				Element:span
					"amount"
				Element:span
					=>
				Element:span
					"10"
				Element:span
					,
				Element:span
					"currency"
				Element:span
					=>
				Element:span
					"USD"
				Element:span
					,
				Element:span
					"payment_method"
				Element:span
					=>
				Element:span
					"83562370-3e5c-51db-87da-752af5ab9559"
				Element:span
					})
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					from
				Element:span
					coinbase.wallet.client
				Element:span
					import
				Element:span
					Client
				Element:span
					client
				Element:span
					=
				Element:span
					Client
				Element:span
					(
				Element:span
					<
				Element:span
					api_key
				Element:span
					>
				Element:span
					,
				Element:span
					<
				Element:span
					api_secret
				Element:span
					>
				Element:span
					)
				Element:span
					deposit
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					deposit
				Element:span
					(
				Element:span
					'2bbf394c-193b-5b2a-9155-3b4732659ede'
				Element:span
					,
				Element:span
					{
				Element:span
					"amount"
				Element:span
					:
				Element:span
					"10"
				Element:span
					,
				Element:span
					"currency"
				Element:span
					:
				Element:span
					"USD"
				Element:span
					,
				Element:span
					"payment_method"
				Element:span
					:
				Element:span
					"83562370-3e5c-51db-87da-752af5ab9559"
				Element:span
					})
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					var
				Element:span
					Client
				Element:span
					=
				Element:span
					require
				Element:span
					(
				Element:span
					'coinbase'
				Element:span
					).
				Element:span
					Client
				Element:span
					;
				Element:span
					var
				Element:span
					client
				Element:span
					=
				Element:span
					new
				Element:span
					Client
				Element:span
					({
				Element:span
					'apiKey'
				Element:span
					:
				Element:span
					'API KEY'
				Element:span
					,
				Element:span
					'apiSecret'
				Element:span
					:
				Element:span
					'API SECRET'
				Element:span
					});
				Element:span
					client
				Element:span
					.
				Element:span
					getAccount
				Element:span
					(
				Element:span
					'2bbf394c-193b-5b2a-9155-3b4732659ede'
				Element:span
					,
				Element:span
					function
				Element:span
					(
				Element:span
					err
				Element:span
					,
				Element:span
					account
				Element:span
					)
				Element:span
					{
				Element:span
					account
				Element:span
					.
				Element:span
					deposit
				Element:span
					({
				Element:span
					"amount"
				Element:span
					:
				Element:span
					"10"
				Element:span
					,
				Element:span
					"currency"
				Element:span
					:
				Element:span
					"USD"
				Element:span
					,
				Element:span
					"payment_method"
				Element:span
					:
				Element:span
					"83562370-3e5c-51db-87da-752af5ab9559"
				Element:span
					},
				Element:span
					function
				Element:span
					(
				Element:span
					err
				Element:span
					,
				Element:span
					tx
				Element:span
					)
				Element:span
					{
				Element:span
					console
				Element:span
					.
				Element:span
					log
				Element:span
					(
				Element:span
					tx
				Element:span
					);
				Element:span
					});
				Element:span
					});
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Response (201)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"data"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"67e0eaec-07d7-54c4-a72c-2e92826897df"
				Element:span
					,
				Element:span
				Element:span
					"status"
				Element:span
					:
				Element:span
				Element:span
					"created"
				Element:span
					,
				Element:span
				Element:span
					"payment_method"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"83562370-3e5c-51db-87da-752af5ab9559"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"payment_method"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/payment-methods/83562370-3e5c-51db-87da-752af5ab9559"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"transaction"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"441b9494-b3f0-5b98-b9b0-4d82c21c252a"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"transaction"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/accounts/2bbf394c-193b-5b2a-9155-3b4732659ede/transactions/441b9494-b3f0-5b98-b9b0-4d82c21c252a"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"10.00"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"subtotal"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"10.00"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-01-31T20:49:02Z"
				Element:span
					,
				Element:span
				Element:span
					"updated_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-02-11T16:54:02-08:00"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"deposit"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/accounts/2bbf394c-193b-5b2a-9155-3b4732659ede/deposits/67e0eaec-07d7-54c4-a72c-2e92826897df"
				Element:span
					,
				Element:span
				Element:span
					"committed"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"fee"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"0.00"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"payout_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-02-18T16:54:00-08:00"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Deposits user-defined amount of funds to a fiat account.
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					POST https://api.coinbase.com/v2/accounts/:account_id/deposits
			Node:
			(type) c
			(layer)1
				Element:h3
					Scopes
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:code
					wallet:deposits:create
			Node:
			(type) c
			(layer)1
				Element:h3
					Arguments
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Type
				Element:th
					Required
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
				Element:code
					amount
				Element:td
					string
				Element:td
					Required
				Element:td
					Deposit amount
				Element:tr
				Element:td
				Element:code
					currency
				Element:td
					string
				Element:td
					Required
				Element:td
					Currency for the
				Element:code
					amount
				Element:tr
				Element:td
				Element:code
					payment_method
				Element:td
					string
				Element:td
					Required
				Element:td
					The ID of the payment method that should be used for the deposit. Payment methods can be listed using the
				Element:code
					GET /payment-methods
					API call
				Element:tr
				Element:td
				Element:code
					commit
				Element:td
					boolean
				Element:td
					Optional
				Element:td
					If set to
				Element:code
					false
					, this deposit will not be immediately completed. Use the
				Element:a
					commit
					call to complete it. Default value:
				Element:code
					true
			Node:
			(type) c
			(layer)1
				Element:h2
					Commit a deposit
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example request
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl https://api.coinbase.com/v2/accounts/82de7fcd-db72-5085-8ceb-bee19303080b/deposits/a333743d-184a-5b5b-abe8-11612fc44ab5/commit / -X POST
				Element:span
					\
					-H
				Element:span
					'Authorization: Bearer abd90df5f27a7b170cd775abf89d632b350b7c1c9d53e08b340cd9832ce52c2c'
				Element:span
					\
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'coinbase/wallet'
				Element:span
					client
				Element:span
					=
				Element:span
					Coinbase
				Element:span
					::
				Element:span
					Wallet
				Element:span
					::
				Element:span
					Client
				Element:span
					.
				Element:span
					new
				Element:span
					(
				Element:span
					api_key:
				Element:span
					<
				Element:span
					api
				Element:span
					key
				Element:span
					>
				Element:span
					,
				Element:span
					api_secret:
				Element:span
					<
				Element:span
					api
				Element:span
					secret
				Element:span
					>
				Element:span
					)
				Element:span
					deposit
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					commit_deposit
				Element:span
					(
				Element:span
					'2bbf394c-193b-5b2a-9155-3b4732659ede'
				Element:span
					,
				Element:span
					'a333743d-184a-5b5b-abe8-11612fc44ab5'
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					from
				Element:span
					coinbase.wallet.client
				Element:span
					import
				Element:span
					Client
				Element:span
					client
				Element:span
					=
				Element:span
					Client
				Element:span
					(
				Element:span
					<
				Element:span
					api_key
				Element:span
					>
				Element:span
					,
				Element:span
					<
				Element:span
					api_secret
				Element:span
					>
				Element:span
					)
				Element:span
					deposit
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					commit_deposit
				Element:span
					(
				Element:span
					'2bbf394c-193b-5b2a-9155-3b4732659ede'
				Element:span
					,
				Element:span
					'a333743d-184a-5b5b-abe8-11612fc44ab5'
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					var
				Element:span
					Client
				Element:span
					=
				Element:span
					require
				Element:span
					(
				Element:span
					'coinbase'
				Element:span
					).
				Element:span
					Client
				Element:span
					;
				Element:span
					var
				Element:span
					client
				Element:span
					=
				Element:span
					new
				Element:span
					Client
				Element:span
					({
				Element:span
					'apiKey'
				Element:span
					:
				Element:span
					'API KEY'
				Element:span
					,
				Element:span
					'apiSecret'
				Element:span
					:
				Element:span
					'API SECRET'
				Element:span
					});
				Element:span
					client
				Element:span
					.
				Element:span
					getAccount
				Element:span
					(
				Element:span
					'2bbf394c-193b-5b2a-9155-3b4732659ede'
				Element:span
					,
				Element:span
					function
				Element:span
					(
				Element:span
					err
				Element:span
					,
				Element:span
					account
				Element:span
					)
				Element:span
					{
				Element:span
					account
				Element:span
					.
				Element:span
					getDeposit
				Element:span
					(
				Element:span
					'a333743d-184a-5b5b-abe8-11612fc44ab5'
				Element:span
					,
				Element:span
					function
				Element:span
					(
				Element:span
					err
				Element:span
					,
				Element:span
					tx
				Element:span
					)
				Element:span
					{
				Element:span
					tx
				Element:span
					.
				Element:span
					commit
				Element:span
					(
				Element:span
					function
				Element:span
					(
				Element:span
					err
				Element:span
					,
				Element:span
					resp
				Element:span
					)
				Element:span
					{
				Element:span
					console
				Element:span
					.
				Element:span
					log
				Element:span
					(
				Element:span
					resp
				Element:span
					);
				Element:span
					});
				Element:span
					});
				Element:span
					});
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Response (200)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"data"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"67e0eaec-07d7-54c4-a72c-2e92826897df"
				Element:span
					,
				Element:span
				Element:span
					"status"
				Element:span
					:
				Element:span
				Element:span
					"created"
				Element:span
					,
				Element:span
				Element:span
					"payment_method"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"83562370-3e5c-51db-87da-752af5ab9559"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"payment_method"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/payment-methods/83562370-3e5c-51db-87da-752af5ab9559"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"transaction"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"441b9494-b3f0-5b98-b9b0-4d82c21c252a"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"transaction"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/accounts/2bbf394c-193b-5b2a-9155-3b4732659ede/transactions/441b9494-b3f0-5b98-b9b0-4d82c21c252a"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"10.00"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"subtotal"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"10.00"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-01-31T20:49:02Z"
				Element:span
					,
				Element:span
				Element:span
					"updated_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-02-11T16:54:02-08:00"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"deposit"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/accounts/2bbf394c-193b-5b2a-9155-3b4732659ede/deposits/67e0eaec-07d7-54c4-a72c-2e92826897df"
				Element:span
					,
				Element:span
				Element:span
					"committed"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"fee"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"0.00"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"payout_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-02-18T16:54:00-08:00"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Completes a deposit that is created in
				Element:code
					commit: false
					state.
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					POST https://api.coinbase.com/v2/accounts/:account_id/deposits/:deposit_id/commit
			Node:
			(type) c
			(layer)1
				Element:h3
					Scopes
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:code
					wallet:deposits:create
			Node:
			(type) c
			(layer)1
				Element:h3
					Arguments
			Node:
			(type) c
			(layer)1
				Element:p
				Element:em
					None
			Node:
			(type) h1
			(layer)1
				Element:h1
					Withdrawals
			Node:
			(type) c
			(layer)1
				Element:h2
					Withdrawal resource
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example withdrawal resource
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"67e0eaec-07d7-54c4-a72c-2e92826897df"
				Element:span
					,
				Element:span
				Element:span
					"status"
				Element:span
					:
				Element:span
				Element:span
					"completed"
				Element:span
					,
				Element:span
				Element:span
					"payment_method"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"83562370-3e5c-51db-87da-752af5ab9559"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"payment_method"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/payment-methods/83562370-3e5c-51db-87da-752af5ab9559"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"transaction"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"441b9494-b3f0-5b98-b9b0-4d82c21c252a"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"transaction"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/accounts/2bbf394c-193b-5b2a-9155-3b4732659ede/transactions/441b9494-b3f0-5b98-b9b0-4d82c21c252a"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"10.00"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"subtotal"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"10.00"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-01-31T20:49:02Z"
				Element:span
					,
				Element:span
				Element:span
					"updated_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-02-11T16:54:02-08:00"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"withdrawal"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/accounts/2bbf394c-193b-5b2a-9155-3b4732659ede/withdrawals/67e0eaec-07d7-54c4-a72c-2e92826897df"
				Element:span
					,
				Element:span
				Element:span
					"committed"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"fee"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"0.00"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"payout_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-02-18T16:54:00-08:00"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Withdrawal resource represents a withdrawal of funds using a payment method (e.g. a bank). Each committed withdrawal also has a assoaciated transaction.
			Node:
			(type) c
			(layer)1
				Element:p
					Withdrawal can be started with
				Element:code
					commit: false
					which is useful when displaying the confirmation for a withdrawal. These withdrawals will never complete and receive an assoaciated transaction unless they are committed separately.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Fields
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
				Element:code
					id
				Element:em
					string
				Element:td
					Resource ID
				Element:tr
				Element:td
				Element:code
					status
				Element:em
					string,
				Element:a
					enumerable
				Element:td
					Status of the withdrawal. Currently available values:
				Element:code
					created
					,
				Element:code
					completed
					,
				Element:code
					canceled
				Element:tr
				Element:td
				Element:code
					payment_method
				Element:em
					hash
				Element:td
					Associated payment method (e.g. a bank)
				Element:tr
				Element:td
				Element:code
					transaction
				Element:em
					hash
				Element:td
					Associated transaction (e.g. a bank, fiat account)
				Element:tr
				Element:td
				Element:code
					amount
				Element:em
				Element:a
					money hash
				Element:td
					Amount
				Element:tr
				Element:td
				Element:code
					subtotal
				Element:em
				Element:a
					money hash
				Element:td
					Amount without fees
				Element:tr
				Element:td
				Element:code
					fee
				Element:em
				Element:a
					money hash
				Element:td
					Fee assoaciated to this withdrawal
				Element:tr
				Element:td
				Element:code
					created_at
				Element:em
					timestamp
				Element:td
				Element:tr
				Element:td
				Element:code
					updated_at
				Element:em
					timestamp
				Element:td
				Element:tr
				Element:td
				Element:code
					resource
				Element:em
					string, constant
				Element:strong
					withdrawal
				Element:td
				Element:tr
				Element:td
				Element:code
					resource_path
				Element:em
					string
				Element:td
				Element:tr
				Element:td
				Element:code
					committed
				Element:em
					boolean
				Element:td
					Has this withdrawal been committed?
				Element:tr
				Element:td
				Element:code
					payout_at
				Element:em
					timestamp, optional
				Element:td
					When a withdrawal isn’t executed instantly, it will receive a payout date for the time it will be executed
			Node:
			(type) c
			(layer)1
				Element:h2
					List withdrawals
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example request
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl https://api.coinbase.com/v2/accounts/2bbf394c-193b-5b2a-9155-3b4732659ede/withdrawals / -H
				Element:span
					'Authorization: Bearer abd90df5f27a7b170cd775abf89d632b350b7c1c9d53e08b340cd9832ce52c2c'
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'coinbase/wallet'
				Element:span
					client
				Element:span
					=
				Element:span
					Coinbase
				Element:span
					::
				Element:span
					Wallet
				Element:span
					::
				Element:span
					Client
				Element:span
					.
				Element:span
					new
				Element:span
					(
				Element:span
					api_key:
				Element:span
					<
				Element:span
					api
				Element:span
					key
				Element:span
					>
				Element:span
					,
				Element:span
					api_secret:
				Element:span
					<
				Element:span
					api
				Element:span
					secret
				Element:span
					>
				Element:span
					)
				Element:span
					withdrawals
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					list_withdrawals
				Element:span
					(
				Element:span
					'2bbf394c-193b-5b2a-9155-3b4732659ede'
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					from
				Element:span
					coinbase.wallet.client
				Element:span
					import
				Element:span
					Client
				Element:span
					client
				Element:span
					=
				Element:span
					Client
				Element:span
					(
				Element:span
					<
				Element:span
					api_key
				Element:span
					>
				Element:span
					,
				Element:span
					<
				Element:span
					api_secret
				Element:span
					>
				Element:span
					)
				Element:span
					txs
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					get_withdrawals
				Element:span
					(
				Element:span
					'2bbf394c-193b-5b2a-9155-3b4732659ede'
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					var
				Element:span
					Client
				Element:span
					=
				Element:span
					require
				Element:span
					(
				Element:span
					'coinbase'
				Element:span
					).
				Element:span
					Client
				Element:span
					;
				Element:span
					var
				Element:span
					client
				Element:span
					=
				Element:span
					new
				Element:span
					Client
				Element:span
					({
				Element:span
					'apiKey'
				Element:span
					:
				Element:span
					'API KEY'
				Element:span
					,
				Element:span
					'apiSecret'
				Element:span
					:
				Element:span
					'API SECRET'
				Element:span
					});
				Element:span
					client
				Element:span
					.
				Element:span
					getAccount
				Element:span
					(
				Element:span
					'2bbf394c-193b-5b2a-9155-3b4732659ede'
				Element:span
					,
				Element:span
					function
				Element:span
					(
				Element:span
					err
				Element:span
					,
				Element:span
					account
				Element:span
					)
				Element:span
					{
				Element:span
					account
				Element:span
					.
				Element:span
					getWithdrawals
				Element:span
					(
				Element:span
					function
				Element:span
					(
				Element:span
					err
				Element:span
					,
				Element:span
					txs
				Element:span
					)
				Element:span
					{
				Element:span
					console
				Element:span
					.
				Element:span
					log
				Element:span
					(
				Element:span
					txs
				Element:span
					);
				Element:span
					});
				Element:span
					});
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example response
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"pagination"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"ending_before"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"starting_after"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"limit"
				Element:span
					:
				Element:span
				Element:span
					25
				Element:span
					,
				Element:span
				Element:span
					"order"
				Element:span
					:
				Element:span
				Element:span
					"desc"
				Element:span
					,
				Element:span
				Element:span
					"previous_uri"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"next_uri"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"data"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"67e0eaec-07d7-54c4-a72c-2e92826897df"
				Element:span
					,
				Element:span
				Element:span
					"status"
				Element:span
					:
				Element:span
				Element:span
					"completed"
				Element:span
					,
				Element:span
				Element:span
					"payment_method"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"83562370-3e5c-51db-87da-752af5ab9559"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"payment_method"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/payment-methods/83562370-3e5c-51db-87da-752af5ab9559"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"transaction"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"441b9494-b3f0-5b98-b9b0-4d82c21c252a"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"transaction"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/accounts/2bbf394c-193b-5b2a-9155-3b4732659ede/transactions/441b9494-b3f0-5b98-b9b0-4d82c21c252a"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"10.00"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"subtotal"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"10.00"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-01-31T20:49:02Z"
				Element:span
					,
				Element:span
				Element:span
					"updated_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-02-11T16:54:02-08:00"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"withdrawal"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/accounts/2bbf394c-193b-5b2a-9155-3b4732659ede/withdrawals/67e0eaec-07d7-54c4-a72c-2e92826897df"
				Element:span
					,
				Element:span
				Element:span
					"committed"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"fee"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"0.00"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"payout_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-02-18T16:54:00-08:00"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					]
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Lists withdrawals for an account.
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET https://api.coinbase.com/v2/accounts/:account_id/withdrawals
			Node:
			(type) c
			(layer)1
				Element:h3
					Scopes
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:code
					wallet:withdrawals:read
			Node:
			(type) c
			(layer)1
				Element:h2
					Show a withdrawal
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example request
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl https://api.coinbase.com/v2/accounts/2bbf394c-193b-5b2a-9155-3b4732659ede/withdrawals/67e0eaec-07d7-54c4-a72c-2e92826897df / -H
				Element:span
					'Authorization: Bearer abd90df5f27a7b170cd775abf89d632b350b7c1c9d53e08b340cd9832ce52c2c'
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'coinbase/wallet'
				Element:span
					client
				Element:span
					=
				Element:span
					Coinbase
				Element:span
					::
				Element:span
					Wallet
				Element:span
					::
				Element:span
					Client
				Element:span
					.
				Element:span
					new
				Element:span
					(
				Element:span
					api_key:
				Element:span
					<
				Element:span
					api
				Element:span
					key
				Element:span
					>
				Element:span
					,
				Element:span
					api_secret:
				Element:span
					<
				Element:span
					api
				Element:span
					secret
				Element:span
					>
				Element:span
					)
				Element:span
					withdrawal
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					list_withdrawal
				Element:span
					(
				Element:span
					'2bbf394c-193b-5b2a-9155-3b4732659ede'
				Element:span
					,
				Element:span
					'dd3183eb-af1d-5f5d-a90d-cbff946435ff'
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					from
				Element:span
					coinbase.wallet.client
				Element:span
					import
				Element:span
					Client
				Element:span
					client
				Element:span
					=
				Element:span
					Client
				Element:span
					(
				Element:span
					<
				Element:span
					api_key
				Element:span
					>
				Element:span
					,
				Element:span
					<
				Element:span
					api_secret
				Element:span
					>
				Element:span
					)
				Element:span
					withdrawal
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					get_withdrawal
				Element:span
					(
				Element:span
					'2bbf394c-193b-5b2a-9155-3b4732659ede'
				Element:span
					,
				Element:span
					'dd3183eb-af1d-5f5d-a90d-cbff946435ff'
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					var
				Element:span
					Client
				Element:span
					=
				Element:span
					require
				Element:span
					(
				Element:span
					'coinbase'
				Element:span
					).
				Element:span
					Client
				Element:span
					;
				Element:span
					var
				Element:span
					client
				Element:span
					=
				Element:span
					new
				Element:span
					Client
				Element:span
					({
				Element:span
					'apiKey'
				Element:span
					:
				Element:span
					'API KEY'
				Element:span
					,
				Element:span
					'apiSecret'
				Element:span
					:
				Element:span
					'API SECRET'
				Element:span
					});
				Element:span
					client
				Element:span
					.
				Element:span
					getAccount
				Element:span
					(
				Element:span
					'2bbf394c-193b-5b2a-9155-3b4732659ede'
				Element:span
					,
				Element:span
					function
				Element:span
					(
				Element:span
					err
				Element:span
					,
				Element:span
					account
				Element:span
					)
				Element:span
					{
				Element:span
					account
				Element:span
					.
				Element:span
					getWithdrawal
				Element:span
					(
				Element:span
					'dd3183eb-af1d-5f5d-a90d-cbff946435ff'
				Element:span
					,
				Element:span
					function
				Element:span
					(
				Element:span
					err
				Element:span
					,
				Element:span
					tx
				Element:span
					)
				Element:span
					{
				Element:span
					console
				Element:span
					.
				Element:span
					log
				Element:span
					(
				Element:span
					tx
				Element:span
					);
				Element:span
					});
				Element:span
					});
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example response
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"data"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"67e0eaec-07d7-54c4-a72c-2e92826897df"
				Element:span
					,
				Element:span
				Element:span
					"status"
				Element:span
					:
				Element:span
				Element:span
					"completed"
				Element:span
					,
				Element:span
				Element:span
					"payment_method"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"83562370-3e5c-51db-87da-752af5ab9559"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"payment_method"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/payment-methods/83562370-3e5c-51db-87da-752af5ab9559"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"transaction"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"441b9494-b3f0-5b98-b9b0-4d82c21c252a"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"transaction"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/accounts/2bbf394c-193b-5b2a-9155-3b4732659ede/transactions/441b9494-b3f0-5b98-b9b0-4d82c21c252a"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"10.00"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"subtotal"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"10.00"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-01-31T20:49:02Z"
				Element:span
					,
				Element:span
				Element:span
					"updated_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-02-11T16:54:02-08:00"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"withdrawal"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/accounts/2bbf394c-193b-5b2a-9155-3b4732659ede/withdrawals/67e0eaec-07d7-54c4-a72c-2e92826897df"
				Element:span
					,
				Element:span
				Element:span
					"committed"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"fee"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"0.00"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"payout_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-02-18T16:54:00-08:00"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Show an individual withdrawal.
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET https://api.coinbase.com/v2/accounts/:account_id/withdrawals/:withdrawal_id
			Node:
			(type) c
			(layer)1
				Element:h3
					Scopes
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:code
					wallet:withdrawals:read
			Node:
			(type) c
			(layer)1
				Element:h2
					Withdraw funds
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example request
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl https://api.coinbase.com/v2/accounts/82de7fcd-db72-5085-8ceb-bee19303080b/withdrawals / -X POST
				Element:span
					\
					-H
				Element:span
					'Content-Type: application/json'
				Element:span
					\
					-H
				Element:span
					'Authorization: Bearer abd90df5f27a7b170cd775abf89d632b350b7c1c9d53e08b340cd9832ce52c2c'
				Element:span
					\
					-d
				Element:span
					'{ "amount": "10", "currency": "USD", "payment_method": "83562370-3e5c-51db-87da-752af5ab9559" }'
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'coinbase/wallet'
				Element:span
					client
				Element:span
					=
				Element:span
					Coinbase
				Element:span
					::
				Element:span
					Wallet
				Element:span
					::
				Element:span
					Client
				Element:span
					.
				Element:span
					new
				Element:span
					(
				Element:span
					api_key:
				Element:span
					<
				Element:span
					api
				Element:span
					key
				Element:span
					>
				Element:span
					,
				Element:span
					api_secret:
				Element:span
					<
				Element:span
					api
				Element:span
					secret
				Element:span
					>
				Element:span
					)
				Element:span
					withdrawal
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					withdraw
				Element:span
					(
				Element:span
					'2bbf394c-193b-5b2a-9155-3b4732659ede'
				Element:span
					,
				Element:span
					{
				Element:span
					"amount"
				Element:span
					=>
				Element:span
					"10"
				Element:span
					,
				Element:span
					"currency"
				Element:span
					=>
				Element:span
					"USD"
				Element:span
					,
				Element:span
					"payment_method"
				Element:span
					=>
				Element:span
					"83562370-3e5c-51db-87da-752af5ab9559"
				Element:span
					})
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					from
				Element:span
					coinbase.wallet.client
				Element:span
					import
				Element:span
					Client
				Element:span
					client
				Element:span
					=
				Element:span
					Client
				Element:span
					(
				Element:span
					<
				Element:span
					api_key
				Element:span
					>
				Element:span
					,
				Element:span
					<
				Element:span
					api_secret
				Element:span
					>
				Element:span
					)
				Element:span
					withdraw
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					withdraw
				Element:span
					(
				Element:span
					'2bbf394c-193b-5b2a-9155-3b4732659ede'
				Element:span
					,
				Element:span
					{
				Element:span
					"amount"
				Element:span
					:
				Element:span
					"10"
				Element:span
					,
				Element:span
					"currency"
				Element:span
					:
				Element:span
					"USD"
				Element:span
					,
				Element:span
					"payment_method"
				Element:span
					:
				Element:span
					"83562370-3e5c-51db-87da-752af5ab9559"
				Element:span
					})
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					var
				Element:span
					Client
				Element:span
					=
				Element:span
					require
				Element:span
					(
				Element:span
					'coinbase'
				Element:span
					).
				Element:span
					Client
				Element:span
					;
				Element:span
					var
				Element:span
					client
				Element:span
					=
				Element:span
					new
				Element:span
					Client
				Element:span
					({
				Element:span
					'apiKey'
				Element:span
					:
				Element:span
					'API KEY'
				Element:span
					,
				Element:span
					'apiSecret'
				Element:span
					:
				Element:span
					'API SECRET'
				Element:span
					});
				Element:span
					client
				Element:span
					.
				Element:span
					getAccount
				Element:span
					(
				Element:span
					'2bbf394c-193b-5b2a-9155-3b4732659ede'
				Element:span
					,
				Element:span
					function
				Element:span
					(
				Element:span
					err
				Element:span
					,
				Element:span
					account
				Element:span
					)
				Element:span
					{
				Element:span
					account
				Element:span
					.
				Element:span
					withdraw
				Element:span
					({
				Element:span
					"amount"
				Element:span
					:
				Element:span
					"10"
				Element:span
					,
				Element:span
					"currency"
				Element:span
					:
				Element:span
					"USD"
				Element:span
					,
				Element:span
					"payment_method"
				Element:span
					:
				Element:span
					"83562370-3e5c-51db-87da-752af5ab9559"
				Element:span
					},
				Element:span
					function
				Element:span
					(
				Element:span
					err
				Element:span
					,
				Element:span
					tx
				Element:span
					)
				Element:span
					{
				Element:span
					console
				Element:span
					.
				Element:span
					log
				Element:span
					(
				Element:span
					tx
				Element:span
					);
				Element:span
					});
				Element:span
					});
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Response (201)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"data"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"67e0eaec-07d7-54c4-a72c-2e92826897df"
				Element:span
					,
				Element:span
				Element:span
					"status"
				Element:span
					:
				Element:span
				Element:span
					"created"
				Element:span
					,
				Element:span
				Element:span
					"payment_method"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"83562370-3e5c-51db-87da-752af5ab9559"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"payment_method"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/payment-methods/83562370-3e5c-51db-87da-752af5ab9559"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"transaction"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"441b9494-b3f0-5b98-b9b0-4d82c21c252a"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"transaction"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/accounts/2bbf394c-193b-5b2a-9155-3b4732659ede/transactions/441b9494-b3f0-5b98-b9b0-4d82c21c252a"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"10.00"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"subtotal"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"10.00"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-01-31T20:49:02Z"
				Element:span
					,
				Element:span
				Element:span
					"updated_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-02-11T16:54:02-08:00"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"withdrawal"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/accounts/2bbf394c-193b-5b2a-9155-3b4732659ede/withdrawals/67e0eaec-07d7-54c4-a72c-2e92826897df"
				Element:span
					,
				Element:span
				Element:span
					"committed"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"fee"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"0.00"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"payout_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-02-18T16:54:00-08:00"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Withdraws user-defined amount of funds from a fiat account.
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					POST https://api.coinbase.com/v2/accounts/:account_id/withdrawals
			Node:
			(type) c
			(layer)1
				Element:h3
					Scopes
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:code
					wallet:withdrawals:create
			Node:
			(type) c
			(layer)1
				Element:h3
					Arguments
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Type
				Element:th
					Required
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
				Element:code
					amount
				Element:td
					string
				Element:td
					Required
				Element:td
					Withdrawal amount
				Element:tr
				Element:td
				Element:code
					currency
				Element:td
					string
				Element:td
					Required
				Element:td
					Currency for the
				Element:code
					amount
				Element:tr
				Element:td
				Element:code
					payment_method
				Element:td
					string
				Element:td
					Required
				Element:td
					The ID of the payment method that should be used for the withdrawal. Payment methods can be listed using the
				Element:code
					GET /payment-methods
					API call
				Element:tr
				Element:td
				Element:code
					commit
				Element:td
					boolean
				Element:td
					Optional
				Element:td
					If set to
				Element:code
					false
					, this withdrawal will not be immediately completed. Use the
				Element:a
					commit
					call to complete it. Default value:
				Element:code
					true
			Node:
			(type) c
			(layer)1
				Element:h2
					Commit a withdrawal
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example request
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl https://api.coinbase.com/v2/accounts/82de7fcd-db72-5085-8ceb-bee19303080b/withdrawals/a333743d-184a-5b5b-abe8-11612fc44ab5/commit / -X POST / -H
				Element:span
					'Authorization: Bearer abd90df5f27a7b170cd775abf89d632b350b7c1c9d53e08b340cd9832ce52c2c'
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'coinbase/wallet'
				Element:span
					client
				Element:span
					=
				Element:span
					Coinbase
				Element:span
					::
				Element:span
					Wallet
				Element:span
					::
				Element:span
					Client
				Element:span
					.
				Element:span
					new
				Element:span
					(
				Element:span
					api_key:
				Element:span
					<
				Element:span
					api
				Element:span
					key
				Element:span
					>
				Element:span
					,
				Element:span
					api_secret:
				Element:span
					<
				Element:span
					api
				Element:span
					secret
				Element:span
					>
				Element:span
					)
				Element:span
					withdrawal
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					commit_withdrawal
				Element:span
					(
				Element:span
					'2bbf394c-193b-5b2a-9155-3b4732659ede'
				Element:span
					,
				Element:span
					'a333743d-184a-5b5b-abe8-11612fc44ab5'
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					from
				Element:span
					coinbase.wallet.client
				Element:span
					import
				Element:span
					Client
				Element:span
					client
				Element:span
					=
				Element:span
					Client
				Element:span
					(
				Element:span
					<
				Element:span
					api_key
				Element:span
					>
				Element:span
					,
				Element:span
					<
				Element:span
					api_secret
				Element:span
					>
				Element:span
					)
				Element:span
					withdrawal
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					commit_withdrawal
				Element:span
					(
				Element:span
					'2bbf394c-193b-5b2a-9155-3b4732659ede'
				Element:span
					,
				Element:span
					'a333743d-184a-5b5b-abe8-11612fc44ab5'
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					var
				Element:span
					Client
				Element:span
					=
				Element:span
					require
				Element:span
					(
				Element:span
					'coinbase'
				Element:span
					).
				Element:span
					Client
				Element:span
					;
				Element:span
					var
				Element:span
					client
				Element:span
					=
				Element:span
					new
				Element:span
					Client
				Element:span
					({
				Element:span
					'apiKey'
				Element:span
					:
				Element:span
					'API KEY'
				Element:span
					,
				Element:span
					'apiSecret'
				Element:span
					:
				Element:span
					'API SECRET'
				Element:span
					});
				Element:span
					client
				Element:span
					.
				Element:span
					getAccount
				Element:span
					(
				Element:span
					'2bbf394c-193b-5b2a-9155-3b4732659ede'
				Element:span
					,
				Element:span
					function
				Element:span
					(
				Element:span
					err
				Element:span
					,
				Element:span
					account
				Element:span
					)
				Element:span
					{
				Element:span
					account
				Element:span
					.
				Element:span
					getWithdrawal
				Element:span
					(
				Element:span
					'a333743d-184a-5b5b-abe8-11612fc44ab5'
				Element:span
					,
				Element:span
					function
				Element:span
					(
				Element:span
					err
				Element:span
					,
				Element:span
					tx
				Element:span
					)
				Element:span
					{
				Element:span
					tx
				Element:span
					.
				Element:span
					commit
				Element:span
					(
				Element:span
					function
				Element:span
					(
				Element:span
					err
				Element:span
					,
				Element:span
					resp
				Element:span
					)
				Element:span
					{
				Element:span
					console
				Element:span
					.
				Element:span
					log
				Element:span
					(
				Element:span
					resp
				Element:span
					);
				Element:span
					});
				Element:span
					});
				Element:span
					});
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Response (200)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"data"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"67e0eaec-07d7-54c4-a72c-2e92826897df"
				Element:span
					,
				Element:span
				Element:span
					"status"
				Element:span
					:
				Element:span
				Element:span
					"created"
				Element:span
					,
				Element:span
				Element:span
					"payment_method"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"83562370-3e5c-51db-87da-752af5ab9559"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"payment_method"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/payment-methods/83562370-3e5c-51db-87da-752af5ab9559"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"transaction"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"441b9494-b3f0-5b98-b9b0-4d82c21c252a"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"transaction"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/accounts/2bbf394c-193b-5b2a-9155-3b4732659ede/transactions/441b9494-b3f0-5b98-b9b0-4d82c21c252a"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"10.00"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"subtotal"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"10.00"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-01-31T20:49:02Z"
				Element:span
					,
				Element:span
				Element:span
					"updated_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-02-11T16:54:02-08:00"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"withdrawal"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/accounts/2bbf394c-193b-5b2a-9155-3b4732659ede/withdrawals/67e0eaec-07d7-54c4-a72c-2e92826897df"
				Element:span
					,
				Element:span
				Element:span
					"committed"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"fee"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"0.00"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"payout_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-02-18T16:54:00-08:00"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Completes a withdrawal that is created in
				Element:code
					commit: false
					state.
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					POST https://api.coinbase.com/v2/accounts/:account_id/withdrawals/:withdrawal_id/commit
			Node:
			(type) c
			(layer)1
				Element:h3
					Scopes
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:code
					wallet:withdrawals:create
			Node:
			(type) c
			(layer)1
				Element:h3
					Arguments
			Node:
			(type) c
			(layer)1
				Element:p
				Element:em
					None
			Node:
			(type) h1
			(layer)1
				Element:h1
					Payment methods
			Node:
			(type) c
			(layer)1
				Element:h2
					Payment method resource
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Payment method information (default)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"83562370-3e5c-51db-87da-752af5ab9559"
				Element:span
					,
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"ach_bank_account"
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"International Bank *****1111"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
					,
				Element:span
				Element:span
					"primary_buy"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"primary_sell"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"allow_buy"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"allow_sell"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"allow_deposit"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"allow_withdraw"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"instant_buy"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"instant_sell"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-01-31T20:49:02Z"
				Element:span
					,
				Element:span
				Element:span
					"updated_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-02-11T16:53:57-08:00"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"payment_method"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/payment-methods/83562370-3e5c-51db-87da-752af5ab9559"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Additional payment method limit information (wallet:payment-methods:limits permission)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					...
				Element:span
				Element:span
					"limits"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"buy"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"period_in_days"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"total"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"3000.00"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"remaining"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"3000.00"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
				Element:span
					],
				Element:span
				Element:span
					"instant_buy"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"period_in_days"
				Element:span
					:
				Element:span
				Element:span
					7
				Element:span
					,
				Element:span
				Element:span
					"total"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"0.00"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"remaining"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"0.00"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
				Element:span
					],
				Element:span
				Element:span
					"sell"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"period_in_days"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"total"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"3000.00"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"remaining"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"3000.00"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
				Element:span
					],
				Element:span
				Element:span
					"deposit"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"period_in_days"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"total"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"3000.00"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"remaining"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"3000.00"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
				Element:span
					]
				Element:span
				Element:span
					},
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Payment method resource represents the different kinds of payment methods that can be used when buying and selling bitcoin or ethereum.
			Node:
			(type) c
			(layer)1
				Element:p
					As fiat accounts can be used for buying and selling, they have an associated payment method. This type of a payment method will also have a
				Element:code
					fiat_account
					reference to the actual account.
			Node:
			(type) c
			(layer)1
				Element:p
					Currently available
				Element:code
					type
					values:
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:code
					ach_bank_account
					- Regular US bank account
				Element:li
				Element:code
					sepa_bank_account
					- European SEPA bank account
				Element:li
				Element:code
					ideal_bank_account
					- iDeal bank account (Europe)
				Element:li
				Element:code
					fiat_account
					- Fiat nominated Coinbase account
				Element:li
				Element:code
					bank_wire
					- Bank wire (US only)
				Element:li
				Element:code
					credit_card
					- Credit card (can’t be used for buying/selling)
				Element:li
				Element:code
					secure3d_card
					- Secure3D verified payment card
				Element:li
				Element:code
					eft_bank_account
					- Canadian EFT bank account
				Element:li
				Element:code
					interac
					- Interac Online for Canadian bank accounts
			Node:
			(type) c
			(layer)1
				Element:p
					If the user has obtained optional
				Element:code
					wallet:payment-methods:limits
					permission, an additional field,
				Element:code
					limits
					, will be embedded into payment method data. It will contain information about buy, instant buy, sell and deposit limits (there’s no limits for withdrawals at this time). As each one of these can have several limits you should always look for the lowest remaining value when performing the relevant action.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Fields
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
				Element:code
					id
				Element:em
					string
				Element:td
					Resource ID
				Element:tr
				Element:td
				Element:code
					type
				Element:em
					string,
				Element:a
					enumerable
				Element:td
					Payment method type
				Element:tr
				Element:td
				Element:code
					Name
				Element:em
					string
				Element:td
					Payment method type
				Element:tr
				Element:td
				Element:code
					currency
				Element:em
					string
				Element:td
					Payment method’s native currency
				Element:tr
				Element:td
				Element:code
					primary_buy
				Element:em
					boolean
				Element:td
					Is primary buying method?
				Element:tr
				Element:td
				Element:code
					primary_sell
				Element:em
					boolean
				Element:td
					Is primary selling method?
				Element:tr
				Element:td
				Element:code
					allow_buy
				Element:em
					boolean
				Element:td
					Is buying allowed with this method?
				Element:tr
				Element:td
				Element:code
					allow_sell
				Element:em
					boolean
				Element:td
					Is selling allowed with this method?
				Element:tr
				Element:td
				Element:code
					instant_buy
				Element:em
					boolean
				Element:td
					Does this method allow for instant buys?
				Element:tr
				Element:td
				Element:code
					instant_sell
				Element:em
					boolean
				Element:td
					Does this method allow for instant sells?
				Element:tr
				Element:td
				Element:code
					created_at
				Element:em
					timestamp
				Element:td
				Element:tr
				Element:td
				Element:code
					updated_at
				Element:em
					timestamp
				Element:td
				Element:tr
				Element:td
				Element:code
					resource
				Element:em
					string, constant
				Element:strong
					payment_method
				Element:td
				Element:tr
				Element:td
				Element:code
					resource_path
				Element:em
					string
				Element:td
			Node:
			(type) c
			(layer)1
				Element:h2
					List payment methods
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example request
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl https://api.coinbase.com/v2/payment-methods
				Element:span
					\
					-H
				Element:span
					'Authorization: Bearer abd90df5f27a7b170cd775abf89d632b350b7c1c9d53e08b340cd9832ce52c2c'
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'coinbase/wallet'
				Element:span
					client
				Element:span
					=
				Element:span
					Coinbase
				Element:span
					::
				Element:span
					Wallet
				Element:span
					::
				Element:span
					Client
				Element:span
					.
				Element:span
					new
				Element:span
					(
				Element:span
					api_key:
				Element:span
					<
				Element:span
					api
				Element:span
					key
				Element:span
					>
				Element:span
					,
				Element:span
					api_secret:
				Element:span
					<
				Element:span
					api
				Element:span
					secret
				Element:span
					>
				Element:span
					)
				Element:span
					pms
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					payment_methods
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					from
				Element:span
					coinbase.wallet.client
				Element:span
					import
				Element:span
					Client
				Element:span
					client
				Element:span
					=
				Element:span
					Client
				Element:span
					(
				Element:span
					<
				Element:span
					api_key
				Element:span
					>
				Element:span
					,
				Element:span
					<
				Element:span
					api_secret
				Element:span
					>
				Element:span
					)
				Element:span
					pms
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					get_payment_methods
				Element:span
					()
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					var
				Element:span
					Client
				Element:span
					=
				Element:span
					require
				Element:span
					(
				Element:span
					'coinbase'
				Element:span
					).
				Element:span
					Client
				Element:span
					;
				Element:span
					var
				Element:span
					client
				Element:span
					=
				Element:span
					new
				Element:span
					Client
				Element:span
					({
				Element:span
					'apiKey'
				Element:span
					:
				Element:span
					'API KEY'
				Element:span
					,
				Element:span
					'apiSecret'
				Element:span
					:
				Element:span
					'API SECRET'
				Element:span
					});
				Element:span
					client
				Element:span
					.
				Element:span
					getPaymentMethods
				Element:span
					(
				Element:span
					function
				Element:span
					(
				Element:span
					err
				Element:span
					,
				Element:span
					pms
				Element:span
					)
				Element:span
					{
				Element:span
					console
				Element:span
					.
				Element:span
					log
				Element:span
					(
				Element:span
					pms
				Element:span
					);
				Element:span
					});
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example response
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"pagination"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"ending_before"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"starting_after"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"limit"
				Element:span
					:
				Element:span
				Element:span
					25
				Element:span
					,
				Element:span
				Element:span
					"order"
				Element:span
					:
				Element:span
				Element:span
					"desc"
				Element:span
					,
				Element:span
				Element:span
					"previous_uri"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"next_uri"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"data"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"127b4d76-a1a0-5de7-8185-3657d7b526ec"
				Element:span
					,
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"fiat_account"
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"USD Wallet"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
					,
				Element:span
				Element:span
					"primary_buy"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"primary_sell"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"allow_buy"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"allow_sell"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"allow_deposit"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"allow_withdraw"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"instant_buy"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"instant_sell"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-02-24T14:30:30-08:00"
				Element:span
					,
				Element:span
				Element:span
					"updated_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-02-24T14:30:30-08:00"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"payment_method"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/payment-methods/127b4d76-a1a0-5de7-8185-3657d7b526ec"
				Element:span
					,
				Element:span
				Element:span
					"fiat_account"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"a077fff9-312b-559b-af98-146c33e27388"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"account"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/accounts/a077fff9-312b-559b-af98-146c33e27388"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"83562370-3e5c-51db-87da-752af5ab9559"
				Element:span
					,
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"ach_bank_account"
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"International Bank *****1111"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
					,
				Element:span
				Element:span
					"primary_buy"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"primary_sell"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"allow_buy"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"allow_sell"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"allow_deposit"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"allow_withdraw"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"instant_buy"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"instant_sell"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-01-31T20:49:02Z"
				Element:span
					,
				Element:span
				Element:span
					"updated_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-02-11T16:53:57-08:00"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"payment_method"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/payment-methods/83562370-3e5c-51db-87da-752af5ab9559"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					]
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Lists current user’s payment methods.
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET https://api.coinbase.com/v2/payment-methods
			Node:
			(type) c
			(layer)1
				Element:h3
					Scopes
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:code
					wallet:payment-methods:read
			Node:
			(type) c
			(layer)1
				Element:h2
					Show a payment method
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example request
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl https://api.coinbase.com/v2/payment-methods/83562370-3e5c-51db-87da-752af5ab9559 / -H
				Element:span
					'Authorization: Bearer abd90df5f27a7b170cd775abf89d632b350b7c1c9d53e08b340cd9832ce52c2c'
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'coinbase/wallet'
				Element:span
					client
				Element:span
					=
				Element:span
					Coinbase
				Element:span
					::
				Element:span
					Wallet
				Element:span
					::
				Element:span
					Client
				Element:span
					.
				Element:span
					new
				Element:span
					(
				Element:span
					api_key:
				Element:span
					<
				Element:span
					api
				Element:span
					key
				Element:span
					>
				Element:span
					,
				Element:span
					api_secret:
				Element:span
					<
				Element:span
					api
				Element:span
					secret
				Element:span
					>
				Element:span
					)
				Element:span
					pm
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					payment_method
				Element:span
					(
				Element:span
					"83562370-3e5c-51db-87da-752af5ab9559"
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					from
				Element:span
					coinbase.wallet.client
				Element:span
					import
				Element:span
					Client
				Element:span
					client
				Element:span
					=
				Element:span
					Client
				Element:span
					(
				Element:span
					<
				Element:span
					api_key
				Element:span
					>
				Element:span
					,
				Element:span
					<
				Element:span
					api_secret
				Element:span
					>
				Element:span
					)
				Element:span
					pm
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					get_payment_method
				Element:span
					(
				Element:span
					"83562370-3e5c-51db-87da-752af5ab9559"
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					var
				Element:span
					Client
				Element:span
					=
				Element:span
					require
				Element:span
					(
				Element:span
					'coinbase'
				Element:span
					).
				Element:span
					Client
				Element:span
					;
				Element:span
					var
				Element:span
					client
				Element:span
					=
				Element:span
					new
				Element:span
					Client
				Element:span
					({
				Element:span
					'apiKey'
				Element:span
					:
				Element:span
					'API KEY'
				Element:span
					,
				Element:span
					'apiSecret'
				Element:span
					:
				Element:span
					'API SECRET'
				Element:span
					});
				Element:span
					client
				Element:span
					.
				Element:span
					getPaymentMethod
				Element:span
					(
				Element:span
					'83562370-3e5c-51db-87da-752af5ab9559'
				Element:span
					,
				Element:span
					function
				Element:span
					(
				Element:span
					err
				Element:span
					,
				Element:span
					pm
				Element:span
					)
				Element:span
					{
				Element:span
					console
				Element:span
					.
				Element:span
					log
				Element:span
					(
				Element:span
					pm
				Element:span
					);
				Element:span
					});
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example response
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"data"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"83562370-3e5c-51db-87da-752af5ab9559"
				Element:span
					,
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"ach_bank_account"
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"International Bank *****1111"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
					,
				Element:span
				Element:span
					"primary_buy"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"primary_sell"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"allow_buy"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"allow_sell"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"allow_deposit"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"allow_withdraw"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"instant_buy"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"instant_sell"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-01-31T20:49:02Z"
				Element:span
					,
				Element:span
				Element:span
					"updated_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-02-11T16:53:57-08:00"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"payment_method"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/payment-methods/83562370-3e5c-51db-87da-752af5ab9559"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Show current user’s payment method.
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET https://api.coinbase.com/v2/payment-methods/:payment_method_id/
			Node:
			(type) c
			(layer)1
				Element:h3
					Scopes
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:code
					wallet:payment-methods:read
			Node:
			(type) h1
			(layer)1
				Element:h1
					Merchant Endpoints
			Node:
			(type) h1
			(layer)1
				Element:h1
					Merchants
			Node:
			(type) c
			(layer)1
				Element:h2
					Merchant resource
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example merchant resource
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"c265757c-ec4d-561f-a293-6c44692e29bb"
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Acme User 2"
				Element:span
					,
				Element:span
				Element:span
					"website_url"
				Element:span
					:
				Element:span
				Element:span
					"http://example.com"
				Element:span
					,
				Element:span
				Element:span
					"address"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"line1"
				Element:span
					:
				Element:span
				Element:span
					"123 Main St"
				Element:span
					,
				Element:span
				Element:span
					"line2"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"city"
				Element:span
					:
				Element:span
				Element:span
					"San Francisco"
				Element:span
					,
				Element:span
				Element:span
					"state"
				Element:span
					:
				Element:span
				Element:span
					"CA"
				Element:span
					,
				Element:span
				Element:span
					"postal_code"
				Element:span
					:
				Element:span
				Element:span
					"94131"
				Element:span
					,
				Element:span
				Element:span
					"country"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"code"
				Element:span
					:
				Element:span
				Element:span
					"US"
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"United States"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"avatar_url"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"logo_url"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"cover_image_url"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"merchant"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/merchants/c265757c-ec4d-561f-a293-6c44692e29bb"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Generic merchant information.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Fields
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
				Element:code
					id
				Element:em
					string
				Element:td
					Resource ID
				Element:tr
				Element:td
				Element:code
					name
				Element:em
					string, optional
				Element:td
					Merchant’s name
				Element:tr
				Element:td
				Element:code
					website_url
				Element:em
					string, optional
				Element:td
					Merchant’s website
				Element:tr
				Element:td
				Element:code
					address
				Element:em
					hash, optional
				Element:td
					Merchant’s physical location
				Element:tr
				Element:td
				Element:code
					avatar_url
				Element:em
					string, optional
				Element:td
					Merchant’s avatar url
				Element:tr
				Element:td
				Element:code
					logo_url
				Element:em
					string, optional
				Element:td
					Merchant’s logo url
				Element:tr
				Element:td
				Element:code
					cover_image_url
				Element:em
					string, optional
				Element:td
					Merchant’s cover image url
				Element:tr
				Element:td
				Element:code
					resource
				Element:em
					string, constant
				Element:strong
					merchant
				Element:td
				Element:tr
				Element:td
				Element:code
					resource_path
				Element:em
					string
				Element:td
			Node:
			(type) c
			(layer)1
				Element:h2
					Show a merchant
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example request
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl https://api.coinbase.com/v2/merchant/c265757c-ec4d-561f-a293-6c44692e29bb
				Element:span
					\
					-H
				Element:span
					'Authorization: Bearer abd90df5f27a7b170cd775abf89d632b350b7c1c9d53e08b340cd9832ce52c2c'
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'coinbase/wallet'
				Element:span
					client
				Element:span
					=
				Element:span
					Coinbase
				Element:span
					::
				Element:span
					Wallet
				Element:span
					::
				Element:span
					Client
				Element:span
					.
				Element:span
					new
				Element:span
					(
				Element:span
					api_key:
				Element:span
					<
				Element:span
					api
				Element:span
					key
				Element:span
					>
				Element:span
					,
				Element:span
					api_secret:
				Element:span
					<
				Element:span
					api
				Element:span
					secret
				Element:span
					>
				Element:span
					)
				Element:span
					merchant
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					merchant
				Element:span
					(
				Element:span
					'c265757c-ec4d-561f-a293-6c44692e29bb'
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					from
				Element:span
					coinbase.wallet.client
				Element:span
					import
				Element:span
					Client
				Element:span
					client
				Element:span
					=
				Element:span
					Client
				Element:span
					(
				Element:span
					<
				Element:span
					api_key
				Element:span
					>
				Element:span
					,
				Element:span
					<
				Element:span
					api_secret
				Element:span
					>
				Element:span
					)
				Element:span
					merchant
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					get_merchant
				Element:span
					(
				Element:span
					'c265757c-ec4d-561f-a293-6c44692e29bb'
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					var
				Element:span
					Client
				Element:span
					=
				Element:span
					require
				Element:span
					(
				Element:span
					'coinbase'
				Element:span
					).
				Element:span
					Client
				Element:span
					;
				Element:span
					var
				Element:span
					client
				Element:span
					=
				Element:span
					new
				Element:span
					Client
				Element:span
					({
				Element:span
					'apiKey'
				Element:span
					:
				Element:span
					'API KEY'
				Element:span
					,
				Element:span
					'apiSecret'
				Element:span
					:
				Element:span
					'API SECRET'
				Element:span
					});
				Element:span
					client
				Element:span
					.
				Element:span
					getMerchant
				Element:span
					(
				Element:span
					'c265757c-ec4d-561f-a293-6c44692e29bb'
				Element:span
					,
				Element:span
					function
				Element:span
					(
				Element:span
					err
				Element:span
					,
				Element:span
					merchant
				Element:span
					)
				Element:span
					{
				Element:span
					console
				Element:span
					.
				Element:span
					log
				Element:span
					(
				Element:span
					merchant
				Element:span
					);
				Element:span
					});
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example response
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"data"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"c265757c-ec4d-561f-a293-6c44692e29bb"
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Acme User 2"
				Element:span
					,
				Element:span
				Element:span
					"website_url"
				Element:span
					:
				Element:span
				Element:span
					"http://example.com"
				Element:span
					,
				Element:span
				Element:span
					"address"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"line1"
				Element:span
					:
				Element:span
				Element:span
					"123 Main St"
				Element:span
					,
				Element:span
				Element:span
					"line2"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"city"
				Element:span
					:
				Element:span
				Element:span
					"San Francisco"
				Element:span
					,
				Element:span
				Element:span
					"state"
				Element:span
					:
				Element:span
				Element:span
					"CA"
				Element:span
					,
				Element:span
				Element:span
					"postal_code"
				Element:span
					:
				Element:span
				Element:span
					"94131"
				Element:span
					,
				Element:span
				Element:span
					"country"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"code"
				Element:span
					:
				Element:span
				Element:span
					"US"
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"United States"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"avatar_url"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"logo_url"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"cover_image_url"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"merchant"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/merchants/c265757c-ec4d-561f-a293-6c44692e29bb"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Get any merchant’s information with their ID.
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET https://api.coinbase.com/v2/merchants/:merchant_id
			Node:
			(type) c
			(layer)1
				Element:h3
					Scopes
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:em
					No permission required
			Node:
			(type) h1
			(layer)1
				Element:h1
					Orders
			Node:
			(type) c
			(layer)1
				Element:h2
					Order resource
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example of a merchant’s order resource
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"0fdfb26e-bd26-5e1c-b055-7b935e57fa33"
				Element:span
					,
				Element:span
				Element:span
					"code"
				Element:span
					:
				Element:span
				Element:span
					"66BEOV2A"
				Element:span
					,
				Element:span
				Element:span
					"status"
				Element:span
					:
				Element:span
				Element:span
					"paid"
				Element:span
					,
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"order"
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Order #123"
				Element:span
					,
				Element:span
				Element:span
					"description"
				Element:span
					:
				Element:span
				Element:span
					"Sample order"
				Element:span
					,
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"10.00"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"payout_amount"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"bitcoin_address"
				Element:span
					:
				Element:span
				Element:span
					"mymZkiXhQNd6VWWG7VGSVdDX9bKmviti3U"
				Element:span
					,
				Element:span
				Element:span
					"bitcoin_amount"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"1.00000000"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"BTC"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"bitcoin_uri"
				Element:span
					:
				Element:span
				Element:span
					"bitcoin:mrNo5ntJfWP8BGjR2MkAxEgoE8NDu4CM3g?amount=1.00&r=https://www.coinbase.com/r/555b9570a54d75860e00041d"
				Element:span
					,
				Element:span
				Element:span
					"receipt_url"
				Element:span
					:
				Element:span
				Element:span
					"https://www.coinbase.com/orders/d5d3e516dae19ca5b444fe56405ee917/receipt"
				Element:span
					,
				Element:span
				Element:span
					"expires_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-01-31T13:09:02-08:00"
				Element:span
					,
				Element:span
				Element:span
					"mispaid_at"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"paid_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-01-31T20:49:02Z"
				Element:span
					,
				Element:span
				Element:span
					"refund_address"
				Element:span
					:
				Element:span
				Element:span
					"n3z9tkPHcMcUwGBbyjipT1RxJ3qXK4CKNQ"
				Element:span
					,
				Element:span
				Element:span
					"transaction"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"aee1de26-9d08-56bf-8c51-7f8e6a23e046"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"transaction"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/accounts/2bbf394c-193b-5b2a-9155-3b4732659ede/transactions/aee1de26-9d08-56bf-8c51-7f8e6a23e046"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"refunds"
				Element:span
					:
				Element:span
				Element:span
					[],
				Element:span
				Element:span
					"mispayments"
				Element:span
					:
				Element:span
				Element:span
					[],
				Element:span
				Element:span
					"metadata"
				Element:span
					:
				Element:span
				Element:span
					{},
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-01-31T20:49:02Z"
				Element:span
					,
				Element:span
				Element:span
					"updated_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-01-31T20:49:02Z"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"order"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/orders/0fdfb26e-bd26-5e1c-b055-7b935e57fa33"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example of a public order resource
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"0fdfb26e-bd26-5e1c-b055-7b935e57fa33"
				Element:span
					,
				Element:span
				Element:span
					"code"
				Element:span
					:
				Element:span
				Element:span
					"66BEOV2A"
				Element:span
					,
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"order"
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Order #123"
				Element:span
					,
				Element:span
				Element:span
					"description"
				Element:span
					:
				Element:span
				Element:span
					"Sample order"
				Element:span
					,
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"10.00"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"receipt_url"
				Element:span
					:
				Element:span
				Element:span
					"https://www.coinbase.com/orders/d5d3e516dae19ca5b444fe56405ee917/receipt"
				Element:span
					,
				Element:span
				Element:span
					"merchant"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"fde6342f-3d78-5831-a1a3-d0ebeca73a35"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"merchant"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/merchants/fde6342f-3d78-5831-a1a3-d0ebeca73a35"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"order"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/orders/0fdfb26e-bd26-5e1c-b055-7b935e57fa33"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					The Order resource is used when merchants receive bitcoin payments for orders in bitcoin. There are two representations of an order:
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					Public order is shown to the client who pays for an order (usually inside a transaction)
				Element:li
					Private order is shown to merchants and it includes more detailed information
			Node:
			(type) c
			(layer)1
				Element:p
					Orders are always created for the merchant’s primary account.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Fields
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
				Element:code
					id
				Element:em
					string
				Element:td
					Resource ID
				Element:tr
				Element:td
				Element:code
					code
				Element:em
					string
				Element:td
					Client facing order code
				Element:tr
				Element:td
				Element:code
					status
				Element:em
					string,
				Element:a
					enumerable
				Element:td
					Status of the order. Currently available values:
				Element:code
					active
					,
				Element:code
					paid
					,
				Element:code
					expired
					and
				Element:code
					mispaid
				Element:tr
				Element:td
				Element:code
					type
				Element:em
					string,
				Element:a
					enumerable
				Element:td
					Type of the order. Currently available values:
				Element:code
					order
					(regular order),
				Element:code
					donation
					(donation),
				Element:code
					invoice
					(email invoice)
				Element:tr
				Element:td
				Element:code
					name
				Element:em
					string
				Element:td
					The name of the item for which you are collecting bitcoin. For example,
				Element:code
					Acme Order #123
					or
				Element:code
					Annual Pledge Drive
				Element:tr
				Element:td
				Element:code
					description
				Element:em
					string
				Element:td
					Longer description of the item in case you want it added to the user’s transaction notes.
				Element:tr
				Element:td
				Element:code
					amount
				Element:em
				Element:a
					money hash
				Element:td
					Order amount in original currency (can be fiat or BTC)
				Element:tr
				Element:td
				Element:code
					payout_amount
				Element:em
				Element:a
					money hash
					, optional
				Element:td
					Total amount of the payout that was scheduled to be deposited to your bank account using instant payout
				Element:tr
				Element:td
				Element:code
					bitcoin_address
				Element:em
					string
				Element:td
					Bitcoin address for the payment
				Element:tr
				Element:td
				Element:code
					bitcoin_amount
				Element:em
				Element:a
					money hash
				Element:td
					Exchange bitcoin amount for the order
				Element:tr
				Element:td
				Element:code
					bitcoin_uri
				Element:em
					string
				Element:td
					URI to open payment in native applications
				Element:tr
				Element:td
				Element:code
					receipt_url
				Element:em
					string, optional
				Element:td
					URL to order details
				Element:tr
				Element:td
				Element:code
					expires_at
				Element:em
					timestamp, optional
				Element:td
					Time of expiration
				Element:tr
				Element:td
				Element:code
					mispaid_at
				Element:em
					timestamp, optional
				Element:td
					Time of mispayment
				Element:tr
				Element:td
				Element:code
					paid_at
				Element:em
					timestamp, optional
				Element:td
					Time of payment
				Element:tr
				Element:td
				Element:code
					refund_address
				Element:em
					string, optional
				Element:td
					Bitcoin address to which a refund can be sent to. This is only available if the order was paid by a Coinbase user
				Element:tr
				Element:td
				Element:code
					transaction
				Element:em
					hash, optional
				Element:td
					Merchant’s transaction of the successful payment (available for
				Element:code
					status: paid
					)
				Element:tr
				Element:td
				Element:code
					refunds
				Element:em
					array, optional
				Element:td
					Refunds for this order
				Element:tr
				Element:td
				Element:code
					mispayments
				Element:em
					array, optional
				Element:td
					Mispayments for this order
				Element:tr
				Element:td
				Element:code
					metadata
				Element:em
				Element:a
					metadata hash, optional
				Element:td
					Merchant defined metadata
				Element:tr
				Element:td
				Element:code
					created_at
				Element:em
					timestamp
				Element:td
				Element:tr
				Element:td
				Element:code
					updated_at
				Element:em
					timestamp
				Element:td
				Element:tr
				Element:td
				Element:code
					resource
				Element:em
					string, constant
				Element:strong
					order
				Element:td
				Element:tr
				Element:td
				Element:code
					resource_path
				Element:em
					string
				Element:td
			Node:
			(type) c
			(layer)1
				Element:h2
					List orders
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example request
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl https://api.coinbase.com/v2/orders
				Element:span
					\
					-H
				Element:span
					'Authorization: Bearer abd90df5f27a7b170cd775abf89d632b350b7c1c9d53e08b340cd9832ce52c2c'
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'coinbase/wallet'
				Element:span
					client
				Element:span
					=
				Element:span
					Coinbase
				Element:span
					::
				Element:span
					Wallet
				Element:span
					::
				Element:span
					Client
				Element:span
					.
				Element:span
					new
				Element:span
					(
				Element:span
					api_key:
				Element:span
					<
				Element:span
					api
				Element:span
					key
				Element:span
					>
				Element:span
					,
				Element:span
					api_secret:
				Element:span
					<
				Element:span
					api
				Element:span
					secret
				Element:span
					>
				Element:span
					)
				Element:span
					orders
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					orders
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					from
				Element:span
					coinbase.wallet.client
				Element:span
					import
				Element:span
					Client
				Element:span
					client
				Element:span
					=
				Element:span
					Client
				Element:span
					(
				Element:span
					<
				Element:span
					api_key
				Element:span
					>
				Element:span
					,
				Element:span
					<
				Element:span
					api_secret
				Element:span
					>
				Element:span
					)
				Element:span
					orders
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					get_orders
				Element:span
					()
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					var
				Element:span
					Client
				Element:span
					=
				Element:span
					require
				Element:span
					(
				Element:span
					'coinbase'
				Element:span
					).
				Element:span
					Client
				Element:span
					;
				Element:span
					var
				Element:span
					client
				Element:span
					=
				Element:span
					new
				Element:span
					Client
				Element:span
					({
				Element:span
					'apiKey'
				Element:span
					:
				Element:span
					'API KEY'
				Element:span
					,
				Element:span
					'apiSecret'
				Element:span
					:
				Element:span
					'API SECRET'
				Element:span
					});
				Element:span
					client
				Element:span
					.
				Element:span
					getOrders
				Element:span
					(
				Element:span
					function
				Element:span
					(
				Element:span
					err
				Element:span
					,
				Element:span
					orders
				Element:span
					)
				Element:span
					{
				Element:span
					console
				Element:span
					.
				Element:span
					log
				Element:span
					(
				Element:span
					orders
				Element:span
					);
				Element:span
					});
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example response
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"pagination"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"ending_before"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"starting_after"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"limit"
				Element:span
					:
				Element:span
				Element:span
					25
				Element:span
					,
				Element:span
				Element:span
					"order"
				Element:span
					:
				Element:span
				Element:span
					"desc"
				Element:span
					,
				Element:span
				Element:span
					"previous_uri"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"next_uri"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"data"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"0fdfb26e-bd26-5e1c-b055-7b935e57fa33"
				Element:span
					,
				Element:span
				Element:span
					"code"
				Element:span
					:
				Element:span
				Element:span
					"66BEOV2A"
				Element:span
					,
				Element:span
				Element:span
					"status"
				Element:span
					:
				Element:span
				Element:span
					"paid"
				Element:span
					,
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"order"
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Order #123"
				Element:span
					,
				Element:span
				Element:span
					"description"
				Element:span
					:
				Element:span
				Element:span
					"Sample order"
				Element:span
					,
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"10.00"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"payout_amount"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"bitcoin_address"
				Element:span
					:
				Element:span
				Element:span
					"mymZkiXhQNd6VWWG7VGSVdDX9bKmviti3U"
				Element:span
					,
				Element:span
				Element:span
					"bitcoin_amount"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"1.00000000"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"BTC"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"bitcoin_uri"
				Element:span
					:
				Element:span
				Element:span
					"bitcoin:mrNo5ntJfWP8BGjR2MkAxEgoE8NDu4CM3g?amount=1.00&r=https://www.coinbase.com/r/555b9570a54d75860e00041d"
				Element:span
					,
				Element:span
				Element:span
					"receipt_url"
				Element:span
					:
				Element:span
				Element:span
					"https://www.coinbase.com/orders/d5d3e516dae19ca5b444fe56405ee917/receipt"
				Element:span
					,
				Element:span
				Element:span
					"expires_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-01-31T13:09:02-08:00"
				Element:span
					,
				Element:span
				Element:span
					"mispaid_at"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"paid_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-01-31T20:49:02Z"
				Element:span
					,
				Element:span
				Element:span
					"refund_address"
				Element:span
					:
				Element:span
				Element:span
					"n3z9tkPHcMcUwGBbyjipT1RxJ3qXK4CKNQ"
				Element:span
					,
				Element:span
				Element:span
					"transaction"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"aee1de26-9d08-56bf-8c51-7f8e6a23e046"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"transaction"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/accounts/2bbf394c-193b-5b2a-9155-3b4732659ede/transactions/aee1de26-9d08-56bf-8c51-7f8e6a23e046"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"refunds"
				Element:span
					:
				Element:span
				Element:span
					[],
				Element:span
				Element:span
					"mispayments"
				Element:span
					:
				Element:span
				Element:span
					[],
				Element:span
				Element:span
					"metadata"
				Element:span
					:
				Element:span
				Element:span
					{},
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-01-31T20:49:02Z"
				Element:span
					,
				Element:span
				Element:span
					"updated_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-01-31T20:49:02Z"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"order"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/orders/0fdfb26e-bd26-5e1c-b055-7b935e57fa33"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					]
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Lists the current user’s (merchant) orders.
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET https://api.coinbase.com/v2/orders
			Node:
			(type) c
			(layer)1
				Element:h3
					Scopes
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:code
					wallet:orders:read
			Node:
			(type) c
			(layer)1
				Element:h2
					Show an order
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example request
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl https://api.coinbase.com/v2/order/0fdfb26e-bd26-5e1c-b055-7b935e57fa33
				Element:span
					\
					-H
				Element:span
					'Authorization: Bearer abd90df5f27a7b170cd775abf89d632b350b7c1c9d53e08b340cd9832ce52c2c'
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'coinbase/wallet'
				Element:span
					client
				Element:span
					=
				Element:span
					Coinbase
				Element:span
					::
				Element:span
					Wallet
				Element:span
					::
				Element:span
					Client
				Element:span
					.
				Element:span
					new
				Element:span
					(
				Element:span
					api_key:
				Element:span
					<
				Element:span
					api
				Element:span
					key
				Element:span
					>
				Element:span
					,
				Element:span
					api_secret:
				Element:span
					<
				Element:span
					api
				Element:span
					secret
				Element:span
					>
				Element:span
					)
				Element:span
					order
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					order
				Element:span
					(
				Element:span
					'0fdfb26e-bd26-5e1c-b055-7b935e57fa33'
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					from
				Element:span
					coinbase.wallet.client
				Element:span
					import
				Element:span
					Client
				Element:span
					client
				Element:span
					=
				Element:span
					Client
				Element:span
					(
				Element:span
					<
				Element:span
					api_key
				Element:span
					>
				Element:span
					,
				Element:span
					<
				Element:span
					api_secret
				Element:span
					>
				Element:span
					)
				Element:span
					order
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					get_order
				Element:span
					(
				Element:span
					'0fdfb26e-bd26-5e1c-b055-7b935e57fa33'
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					var
				Element:span
					Client
				Element:span
					=
				Element:span
					require
				Element:span
					(
				Element:span
					'coinbase'
				Element:span
					).
				Element:span
					Client
				Element:span
					;
				Element:span
					var
				Element:span
					client
				Element:span
					=
				Element:span
					new
				Element:span
					Client
				Element:span
					({
				Element:span
					'apiKey'
				Element:span
					:
				Element:span
					'API KEY'
				Element:span
					,
				Element:span
					'apiSecret'
				Element:span
					:
				Element:span
					'API SECRET'
				Element:span
					});
				Element:span
					client
				Element:span
					.
				Element:span
					getOrder
				Element:span
					(
				Element:span
					'0fdfb26e-bd26-5e1c-b055-7b935e57fa33'
				Element:span
					,
				Element:span
					function
				Element:span
					(
				Element:span
					err
				Element:span
					,
				Element:span
					order
				Element:span
					)
				Element:span
					{
				Element:span
					console
				Element:span
					.
				Element:span
					log
				Element:span
					(
				Element:span
					order
				Element:span
					);
				Element:span
					});
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example response
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"data"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"0fdfb26e-bd26-5e1c-b055-7b935e57fa33"
				Element:span
					,
				Element:span
				Element:span
					"code"
				Element:span
					:
				Element:span
				Element:span
					"66BEOV2A"
				Element:span
					,
				Element:span
				Element:span
					"status"
				Element:span
					:
				Element:span
				Element:span
					"paid"
				Element:span
					,
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"order"
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Order #123"
				Element:span
					,
				Element:span
				Element:span
					"description"
				Element:span
					:
				Element:span
				Element:span
					"Sample order"
				Element:span
					,
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"10.00"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"payout_amount"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"bitcoin_address"
				Element:span
					:
				Element:span
				Element:span
					"mymZkiXhQNd6VWWG7VGSVdDX9bKmviti3U"
				Element:span
					,
				Element:span
				Element:span
					"bitcoin_amount"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"1.00000000"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"BTC"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"bitcoin_uri"
				Element:span
					:
				Element:span
				Element:span
					"bitcoin:mrNo5ntJfWP8BGjR2MkAxEgoE8NDu4CM3g?amount=1.00&r=https://www.coinbase.com/r/555b9570a54d75860e00041d"
				Element:span
					,
				Element:span
				Element:span
					"receipt_url"
				Element:span
					:
				Element:span
				Element:span
					"https://www.coinbase.com/orders/d5d3e516dae19ca5b444fe56405ee917/receipt"
				Element:span
					,
				Element:span
				Element:span
					"expires_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-01-31T13:09:02-08:00"
				Element:span
					,
				Element:span
				Element:span
					"mispaid_at"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"paid_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-01-31T20:49:02Z"
				Element:span
					,
				Element:span
				Element:span
					"refund_address"
				Element:span
					:
				Element:span
				Element:span
					"n3z9tkPHcMcUwGBbyjipT1RxJ3qXK4CKNQ"
				Element:span
					,
				Element:span
				Element:span
					"transaction"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"aee1de26-9d08-56bf-8c51-7f8e6a23e046"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"transaction"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/accounts/2bbf394c-193b-5b2a-9155-3b4732659ede/transactions/aee1de26-9d08-56bf-8c51-7f8e6a23e046"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"refunds"
				Element:span
					:
				Element:span
				Element:span
					[],
				Element:span
				Element:span
					"mispayments"
				Element:span
					:
				Element:span
				Element:span
					[],
				Element:span
				Element:span
					"metadata"
				Element:span
					:
				Element:span
				Element:span
					{},
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-01-31T20:49:02Z"
				Element:span
					,
				Element:span
				Element:span
					"updated_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-01-31T20:49:02Z"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"order"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/orders/0fdfb26e-bd26-5e1c-b055-7b935e57fa33"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Show current user’s merchant order.
			Node:
			(type) c
			(layer)1
				Element:p
					This endpoint can also be used to view the order’s public information by the order recipient.
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET https://api.coinbase.com/v2/orders/:order_id
			Node:
			(type) c
			(layer)1
				Element:h3
					Scopes
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:code
					wallet:orders:read
			Node:
			(type) c
			(layer)1
				Element:h2
					Create an order
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example request
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl https://api.coinbase.com/v2/orders
				Element:span
					\
					-X POST
				Element:span
					\
					-H
				Element:span
					'Content-Type: application/json'
				Element:span
					\
					-H
				Element:span
					'Authorization: Bearer abd90df5f27a7b170cd775abf89d632b350b7c1c9d53e08b340cd9832ce52c2c'
				Element:span
					\
					-d
				Element:span
					'{ "amount": "10.00", "currency": "USD", "name": "Order #123", "description": "Sample order", "metadata": { "customer_id": "id_1005", "customer_name": "Satoshi Nakamoto" } }'
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'coinbase/wallet'
				Element:span
					client
				Element:span
					=
				Element:span
					Coinbase
				Element:span
					::
				Element:span
					Wallet
				Element:span
					::
				Element:span
					Client
				Element:span
					.
				Element:span
					new
				Element:span
					(
				Element:span
					api_key:
				Element:span
					<
				Element:span
					api
				Element:span
					key
				Element:span
					>
				Element:span
					,
				Element:span
					api_secret:
				Element:span
					<
				Element:span
					api
				Element:span
					secret
				Element:span
					>
				Element:span
					)
				Element:span
					order
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					create_order
				Element:span
					({
				Element:span
					amount:
				Element:span
					"10.00"
				Element:span
					,
				Element:span
					currency:
				Element:span
					"USD"
				Element:span
					,
				Element:span
					name:
				Element:span
					"Order #123"
				Element:span
					,
				Element:span
					description:
				Element:span
					"Sample order"
				Element:span
					,
				Element:span
					metadata:
				Element:span
					{
				Element:span
					customer_id:
				Element:span
					"id_1005"
				Element:span
					,
				Element:span
					customer_name:
				Element:span
					"Satoshi Nakamoto"
				Element:span
					})
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					from
				Element:span
					coinbase.wallet.client
				Element:span
					import
				Element:span
					Client
				Element:span
					client
				Element:span
					=
				Element:span
					Client
				Element:span
					(
				Element:span
					<
				Element:span
					api_key
				Element:span
					>
				Element:span
					,
				Element:span
					<
				Element:span
					api_secret
				Element:span
					>
				Element:span
					)
				Element:span
					order
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					create_order
				Element:span
					({
				Element:span
					"amount"
				Element:span
					:
				Element:span
					"10.00"
				Element:span
					,
				Element:span
					"currency"
				Element:span
					:
				Element:span
					"USD"
				Element:span
					,
				Element:span
					"name"
				Element:span
					:
				Element:span
					"Order #123"
				Element:span
					,
				Element:span
					"description"
				Element:span
					:
				Element:span
					"Sample order"
				Element:span
					,
				Element:span
					"metadata"
				Element:span
					:
				Element:span
					{
				Element:span
					"customer_id"
				Element:span
					:
				Element:span
					"id_1005"
				Element:span
					,
				Element:span
					"customer_name"
				Element:span
					:
				Element:span
					"Satoshi Nakamoto"
				Element:span
					})
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					var
				Element:span
					Client
				Element:span
					=
				Element:span
					require
				Element:span
					(
				Element:span
					'coinbase'
				Element:span
					).
				Element:span
					Client
				Element:span
					;
				Element:span
					var
				Element:span
					client
				Element:span
					=
				Element:span
					new
				Element:span
					Client
				Element:span
					({
				Element:span
					'apiKey'
				Element:span
					:
				Element:span
					'API KEY'
				Element:span
					,
				Element:span
					'apiSecret'
				Element:span
					:
				Element:span
					'API SECRET'
				Element:span
					});
				Element:span
					client
				Element:span
					.
				Element:span
					createOrder
				Element:span
					({
				Element:span
					"amount"
				Element:span
					:
				Element:span
					"10.00"
				Element:span
					,
				Element:span
					"currency"
				Element:span
					:
				Element:span
					"USD"
				Element:span
					,
				Element:span
					"name"
				Element:span
					:
				Element:span
					"Order #123"
				Element:span
					,
				Element:span
					"description"
				Element:span
					:
				Element:span
					"Sample order"
				Element:span
					,
				Element:span
					"metadata"
				Element:span
					:
				Element:span
					{
				Element:span
					"customer_id"
				Element:span
					:
				Element:span
					"id_1005"
				Element:span
					,
				Element:span
					"customer_name"
				Element:span
					:
				Element:span
					"Satoshi Nakamoto"
				Element:span
					},
				Element:span
					function
				Element:span
					(
				Element:span
					err
				Element:span
					,
				Element:span
					order
				Element:span
					)
				Element:span
					{
				Element:span
					console
				Element:span
					.
				Element:span
					log
				Element:span
					(
				Element:span
					order
				Element:span
					);
				Element:span
					});
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Response (201)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"data"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"0fdfb26e-bd26-5e1c-b055-7b935e57fa33"
				Element:span
					,
				Element:span
				Element:span
					"code"
				Element:span
					:
				Element:span
				Element:span
					"66BEOV2A"
				Element:span
					,
				Element:span
				Element:span
					"status"
				Element:span
					:
				Element:span
				Element:span
					"active"
				Element:span
					,
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"order"
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Order #123"
				Element:span
					,
				Element:span
				Element:span
					"description"
				Element:span
					:
				Element:span
				Element:span
					"Sample order"
				Element:span
					,
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"10.00"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"payout_amount"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"bitcoin_address"
				Element:span
					:
				Element:span
				Element:span
					"mymZkiXhQNd6VWWG7VGSVdDX9bKmviti3U"
				Element:span
					,
				Element:span
				Element:span
					"bitcoin_amount"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"1.00000000"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"BTC"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"bitcoin_uri"
				Element:span
					:
				Element:span
				Element:span
					"bitcoin:mrNo5ntJfWP8BGjR2MkAxEgoE8NDu4CM3g?amount=1.00&r=https://www.coinbase.com/r/555b9570a54d75860e00041d"
				Element:span
					,
				Element:span
				Element:span
					"receipt_url"
				Element:span
					:
				Element:span
				Element:span
					"https://www.coinbase.com/orders/d5d3e516dae19ca5b444fe56405ee917/receipt"
				Element:span
					,
				Element:span
				Element:span
					"expires_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-01-31T13:09:02-08:00"
				Element:span
					,
				Element:span
				Element:span
					"mispaid_at"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"paid_at"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"refund_address"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"transaction"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"refunds"
				Element:span
					:
				Element:span
				Element:span
					[],
				Element:span
				Element:span
					"mispayments"
				Element:span
					:
				Element:span
				Element:span
					[],
				Element:span
				Element:span
					"metadata"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"customer_id"
				Element:span
					:
				Element:span
				Element:span
					"id_1005"
				Element:span
					,
				Element:span
				Element:span
					"customer_name"
				Element:span
					:
				Element:span
				Element:span
					"Satoshi Nakamoto"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-01-31T20:49:02Z"
				Element:span
					,
				Element:span
				Element:span
					"updated_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-01-31T20:49:02Z"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"order"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/orders/0fdfb26e-bd26-5e1c-b055-7b935e57fa33"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Creates a new merchant order. When a new order is created its amount is converted to bitcoin and the order is given a unique bitcoin address. Each order is valid for 15 minutes, during which a customer can pay for it. If the customer pays for an amount that doesn’t equal to
				Element:code
					bitcoin_amount
					, or pays after the order has been expired, the payment is counted as a mispayment.
			Node:
			(type) c
			(layer)1
				Element:p
					All orders created using this endpoint are created for the merchant’s primary account.
			Node:
			(type) c
			(layer)1
				Element:p
					Using this endpoint to create orders is useful when you want to build a merchant checkout experience without Coinbase’s merchant tools. If you’re looking into creating new checkout products, see
				Element:a
					checkouts
					.
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					POST https://api.coinbase.com/v2/orders
			Node:
			(type) c
			(layer)1
				Element:h3
					Scopes
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:code
					wallet:orders:create
			Node:
			(type) c
			(layer)1
				Element:h3
					Arguments
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Type
				Element:th
					Required
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					amount
				Element:td
					string
				Element:td
					Required
				Element:td
					Order amount (price)
				Element:tr
				Element:td
					currency
				Element:td
					string
				Element:td
					Required
				Element:td
					Order amount’s currency
				Element:tr
				Element:td
					name
				Element:td
					string
				Element:td
					Required
				Element:td
					Name of the order
				Element:tr
				Element:td
					description
				Element:td
					string
				Element:td
					Optional
				Element:td
					More detailed description of the order
				Element:tr
				Element:td
					notifications_url
				Element:td
					string
				Element:td
					Optional
				Element:td
					Order specific
				Element:a
					notification URL
				Element:tr
				Element:td
					metadata
				Element:td
					hash
				Element:td
					Optional
				Element:td
					Developer defined key value pairs.
				Element:a
					Read more
					.
			Node:
			(type) c
			(layer)1
				Element:h2
					Refund an order
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example request
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl https://api.coinbase.com/v2/orders/0fdfb26e-bd26-5e1c-b055-7b935e57fa33/refund
				Element:span
					\
					-X POST
				Element:span
					\
					-H
				Element:span
					'Content-Type: application/json'
				Element:span
					\
					-H
				Element:span
					'Authorization: Bearer abd90df5f27a7b170cd775abf89d632b350b7c1c9d53e08b340cd9832ce52c2c'
				Element:span
					\
					-d
				Element:span
					'{"currency": "BTC"}'
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'coinbase/wallet'
				Element:span
					client
				Element:span
					=
				Element:span
					Coinbase
				Element:span
					::
				Element:span
					Wallet
				Element:span
					::
				Element:span
					Client
				Element:span
					.
				Element:span
					new
				Element:span
					(
				Element:span
					api_key:
				Element:span
					<
				Element:span
					api
				Element:span
					key
				Element:span
					>
				Element:span
					,
				Element:span
					api_secret:
				Element:span
					<
				Element:span
					api
				Element:span
					secret
				Element:span
					>
				Element:span
					)
				Element:span
					order
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					refund_order
				Element:span
					(
				Element:span
					'0fdfb26e-bd26-5e1c-b055-7b935e57fa33'
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					from
				Element:span
					coinbase.wallet.client
				Element:span
					import
				Element:span
					Client
				Element:span
					client
				Element:span
					=
				Element:span
					Client
				Element:span
					(
				Element:span
					<
				Element:span
					api_key
				Element:span
					>
				Element:span
					,
				Element:span
					<
				Element:span
					api_secret
				Element:span
					>
				Element:span
					)
				Element:span
					order
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					refund_order
				Element:span
					(
				Element:span
					'0fdfb26e-bd26-5e1c-b055-7b935e57fa33'
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					var
				Element:span
					Client
				Element:span
					=
				Element:span
					require
				Element:span
					(
				Element:span
					'coinbase'
				Element:span
					).
				Element:span
					Client
				Element:span
					;
				Element:span
					var
				Element:span
					client
				Element:span
					=
				Element:span
					new
				Element:span
					Client
				Element:span
					({
				Element:span
					'apiKey'
				Element:span
					:
				Element:span
					'API KEY'
				Element:span
					,
				Element:span
					'apiSecret'
				Element:span
					:
				Element:span
					'API SECRET'
				Element:span
					});
				Element:span
					client
				Element:span
					.
				Element:span
					refundOrder
				Element:span
					(
				Element:span
					'0fdfb26e-bd26-5e1c-b055-7b935e57fa33'
				Element:span
					,
				Element:span
					function
				Element:span
					(
				Element:span
					err
				Element:span
					,
				Element:span
					order
				Element:span
					)
				Element:span
					{
				Element:span
					console
				Element:span
					.
				Element:span
					log
				Element:span
					(
				Element:span
					order
				Element:span
					);
				Element:span
					});
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Response (200)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"data"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"8121ef0b-acbe-55e1-b57e-204cdea46479"
				Element:span
					,
				Element:span
				Element:span
					"code"
				Element:span
					:
				Element:span
				Element:span
					"FZM8HQ64"
				Element:span
					,
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"order"
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Test Button"
				Element:span
					,
				Element:span
				Element:span
					"description"
				Element:span
					:
				Element:span
				Element:span
					"A cool button"
				Element:span
					,
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"1.00000000"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"BTC"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"payout_amount"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"receipt_url"
				Element:span
					:
				Element:span
				Element:span
					"https://www.coinbase.com/orders/ba824a9a66fdb4b47a103ac48ce76041/receipt"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"order"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/orders/8121ef0b-acbe-55e1-b57e-204cdea46479"
				Element:span
					,
				Element:span
				Element:span
					"status"
				Element:span
					:
				Element:span
				Element:span
					"paid"
				Element:span
					,
				Element:span
				Element:span
					"bitcoin_amount"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"1.00000000"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"BTC"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"bitcoin_address"
				Element:span
					:
				Element:span
				Element:span
					"mgmZ1skB4GKfr3hqHAdqQ2A7f8CRC3tRCn"
				Element:span
					,
				Element:span
				Element:span
					"refund_address"
				Element:span
					:
				Element:span
				Element:span
					"my3QyqFk2K9Rc3FooJcAD7HFx85148YFCe"
				Element:span
					,
				Element:span
				Element:span
					"bitcoin_uri"
				Element:span
					:
				Element:span
				Element:span
					"bitcoin:mgmZ1skB4GKfr3hqHAdqQ2A7f8CRC3tRCn?amount=1.00&r=http://127.0.0.1:3000/r/555bc418a54d75965100009d"
				Element:span
					,
				Element:span
				Element:span
					"paid_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-01-31T20:49:02Z"
				Element:span
					,
				Element:span
				Element:span
					"mispaid_at"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"expires_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-01-31T13:09:02-08:00"
				Element:span
					,
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-01-31T20:49:02Z"
				Element:span
					,
				Element:span
				Element:span
					"updated_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-01-31T20:49:02Z"
				Element:span
					,
				Element:span
				Element:span
					"transaction"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"df205189-35ec-51fb-b2fb-0b08fa613601"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"transaction"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/accounts/2bbf394c-193b-5b2a-9155-3b4732659ede/transactions/df205189-35ec-51fb-b2fb-0b08fa613601"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"mispayments"
				Element:span
					:
				Element:span
				Element:span
					[],
				Element:span
				Element:span
					"metadata"
				Element:span
					:
				Element:span
				Element:span
					{},
				Element:span
				Element:span
					"refunds"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"9d6c3ff9-9152-5fc0-9b42-1cdd2230c747"
				Element:span
					,
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"1.00000000"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"BTC"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"native_amount"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"1.00000000"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"BTC"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-01-31T20:49:02Z"
				Element:span
					,
				Element:span
				Element:span
					"updated_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-01-31T20:49:02Z"
				Element:span
					,
				Element:span
				Element:span
					"transaction"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"2a5f54a6-f900-569e-8f9c-cf3e837b8693"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"transaction"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/accounts/2bbf394c-193b-5b2a-9155-3b4732659ede/transactions/2a5f54a6-f900-569e-8f9c-cf3e837b8693"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
				Element:span
					],
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:h2
					Mispayments
			Node:
			(type) c
			(layer)1
				Element:p
					Each merchant order has a lifespan of 15 minutes, during which the payment can be made to the bitcoin address attached to the order. If a payment is made for an amount that is
				Element:strong
					less
					than the order’s BTC amount, or is paid after the order expires, it is counted as a mispayment. Mispayments and refunds are included in the merchant’s private order resource and the order will have a status of
				Element:code
					mispaid
					.
			Node:
			(type) c
			(layer)1
				Element:p
					If a payment is made for an amount that is
				Element:strong
					more
					than the orders’s BTC amount, it completes the order and counts the overpayment. In this case, the order has a status of
				Element:code
					paid
					and the overpaid amount will be available through the merchant’s private order resource.
			Node:
			(type) c
			(layer)1
				Element:p
					If a mispayment is made on an order, all subsequent payments to that order will be added to the array of mispayments. In other words, if payment 1 is
				Element:strong
					less
					than the order’s BTC amount and payment 2 is
				Element:strong
					more
					than the order’s BTC amount, they are both considered mispayments and the order maintains its
				Element:code
					mispaid
					status. The the merchant’s private order resource will contain an array of mispayments which will have each mispaid amount.
			Node:
			(type) c
			(layer)1
				Element:p
					If an order is
				Element:code
					paid
					(received the correct payment on the first payment) all subsequent payments to that order will be counted as mispayments. However, the order will remain it’s status as
				Element:code
					paid
					and the subsequent payments will be visible in the mispayments array. In order words, if payment 1 completes the order and then the order receives payment 2 for any arbitrary amount, only payment 2 will be in the mispayments array, and the order will keep its status as
				Element:code
					paid
			Node:
			(type) c
			(layer)1
				Element:p
					If an order expires and no payment is made then the order status is
				Element:code
					expired
					. If an order expires and a payment is made afterwards, the order status remains
				Element:code
					expired
					and the payment gets counted as a mispayment.
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example request for mispayment
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl https://api.coinbase.com/v2/orders/0fdfb26e-bd26-5e1c-b055-7b935e57fa33/refund
				Element:span
					\
					-X POST
				Element:span
					\
					-H
				Element:span
					'Content-Type: application/json'
				Element:span
					\
					-H
				Element:span
					'Authorization: Bearer abd90df5f27a7b170cd775abf89d632b350b7c1c9d53e08b340cd9832ce52c2c'
				Element:span
					\
					-d
				Element:span
					'{"currency": "BTC", "mispayment": "6c3cc817-b10b-5b42-8261-6298a5b5cea8"}'
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'coinbase/wallet'
				Element:span
					client
				Element:span
					=
				Element:span
					Coinbase
				Element:span
					::
				Element:span
					Wallet
				Element:span
					::
				Element:span
					Client
				Element:span
					.
				Element:span
					new
				Element:span
					(
				Element:span
					api_key:
				Element:span
					<
				Element:span
					api
				Element:span
					key
				Element:span
					>
				Element:span
					,
				Element:span
					api_secret:
				Element:span
					<
				Element:span
					api
				Element:span
					secret
				Element:span
					>
				Element:span
					)
				Element:span
					order
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					refund_order
				Element:span
					(
				Element:span
					'0fdfb26e-bd26-5e1c-b055-7b935e57fa33'
				Element:span
					,
				Element:span
					{
				Element:span
					currency:
				Element:span
					"BTC"
				Element:span
					,
				Element:span
					mispayment:
				Element:span
					"6c3cc817-b10b-5b42-8261-6298a5b5cea8"
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					from
				Element:span
					coinbase.wallet.client
				Element:span
					import
				Element:span
					Client
				Element:span
					client
				Element:span
					=
				Element:span
					Client
				Element:span
					(
				Element:span
					<
				Element:span
					api_key
				Element:span
					>
				Element:span
					,
				Element:span
					<
				Element:span
					api_secret
				Element:span
					>
				Element:span
					)
				Element:span
					order
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					refund_order
				Element:span
					(
				Element:span
					'0fdfb26e-bd26-5e1c-b055-7b935e57fa33'
				Element:span
					,
				Element:span
					{
				Element:span
					"currency"
				Element:span
					:
				Element:span
					"BTC"
				Element:span
					,
				Element:span
					"mispayment"
				Element:span
					:
				Element:span
					"6c3cc817-b10b-5b42-8261-6298a5b5cea8"
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					var
				Element:span
					Client
				Element:span
					=
				Element:span
					require
				Element:span
					(
				Element:span
					'coinbase'
				Element:span
					).
				Element:span
					Client
				Element:span
					;
				Element:span
					var
				Element:span
					client
				Element:span
					=
				Element:span
					new
				Element:span
					Client
				Element:span
					({
				Element:span
					'apiKey'
				Element:span
					:
				Element:span
					'API KEY'
				Element:span
					,
				Element:span
					'apiSecret'
				Element:span
					:
				Element:span
					'API SECRET'
				Element:span
					});
				Element:span
					client
				Element:span
					.
				Element:span
					refundOrder
				Element:span
					(
				Element:span
					'0fdfb26e-bd26-5e1c-b055-7b935e57fa33'
				Element:span
					,
				Element:span
					{
				Element:span
					"currency"
				Element:span
					:
				Element:span
					"BTC"
				Element:span
					,
				Element:span
					"mispayment"
				Element:span
					:
				Element:span
					"6c3cc817-b10b-5b42-8261-6298a5b5cea8"
				Element:span
					},
				Element:span
					function
				Element:span
					(
				Element:span
					err
				Element:span
					,
				Element:span
					order
				Element:span
					)
				Element:span
					{
				Element:span
					console
				Element:span
					.
				Element:span
					log
				Element:span
					(
				Element:span
					order
				Element:span
					);
				Element:span
					});
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Response (200)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"data"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"8121ef0b-acbe-55e1-b57e-204cdea46479"
				Element:span
					,
				Element:span
				Element:span
					"code"
				Element:span
					:
				Element:span
				Element:span
					"FZM8HQ64"
				Element:span
					,
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"order"
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Test Button"
				Element:span
					,
				Element:span
				Element:span
					"description"
				Element:span
					:
				Element:span
				Element:span
					"A cool button"
				Element:span
					,
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"1.00000000"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"BTC"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"payout_amount"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"receipt_url"
				Element:span
					:
				Element:span
				Element:span
					"https://www.coinbase.com/orders/ba824a9a66fdb4b47a103ac48ce76041/receipt"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"order"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/orders/8121ef0b-acbe-55e1-b57e-204cdea46479"
				Element:span
					,
				Element:span
				Element:span
					"status"
				Element:span
					:
				Element:span
				Element:span
					"mispaid"
				Element:span
					,
				Element:span
				Element:span
					"bitcoin_amount"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"1.00000000"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"BTC"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"bitcoin_address"
				Element:span
					:
				Element:span
				Element:span
					"mgmZ1skB4GKfr3hqHAdqQ2A7f8CRC3tRCn"
				Element:span
					,
				Element:span
				Element:span
					"refund_address"
				Element:span
					:
				Element:span
				Element:span
					"my3QyqFk2K9Rc3FooJcAD7HFx85148YFCe"
				Element:span
					,
				Element:span
				Element:span
					"bitcoin_uri"
				Element:span
					:
				Element:span
				Element:span
					"bitcoin:mgmZ1skB4GKfr3hqHAdqQ2A7f8CRC3tRCn?amount=1.00&r=http://127.0.0.1:3000/r/555bc418a54d75965100009d"
				Element:span
					,
				Element:span
				Element:span
					"paid_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-01-31T20:49:02Z"
				Element:span
					,
				Element:span
				Element:span
					"mispaid_at"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"expires_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-01-31T13:09:02-08:00"
				Element:span
					,
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-01-31T20:49:02Z"
				Element:span
					,
				Element:span
				Element:span
					"updated_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-01-31T20:49:02Z"
				Element:span
					,
				Element:span
				Element:span
					"transaction"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"df205189-35ec-51fb-b2fb-0b08fa613601"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"transaction"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/accounts/2bbf394c-193b-5b2a-9155-3b4732659ede/transactions/df205189-35ec-51fb-b2fb-0b08fa613601"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"mispayments"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"6c3cc817-b10b-5b42-8261-6298a5b5cea8"
				Element:span
					,
				Element:span
				Element:span
					"amount"
				Element:span
					:{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"2.00000000"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"BTC"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"native_amount"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"2.00000000"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"BTC"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"refund_address"
				Element:span
					:
				Element:span
				Element:span
					"n1U7TDhxQFNMXUeui6ZHJ6kUEZWnVFojix"
				Element:span
					,
				Element:span
				Element:span
					"transaction"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"5f685ec1-32b3-5359-9d32-bf766bceb28e"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"transaction"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/accounts/2bbf394c-193b-5b2a-9155-3b4732659ede/transactions/5f685ec1-32b3-5359-9d32-bf766bceb28e"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"refund_transaction"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"0be0777f-9ea7-57cb-8306-03fe82f0a637"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"transaction"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/accounts/2bbf394c-193b-5b2a-9155-3b4732659ede/transactions/0be0777f-9ea7-57cb-8306-03fe82f0a637"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-01-31T20:49:02Z"
				Element:span
					,
				Element:span
				Element:span
					"updated_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-01-31T20:49:02Z"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					],
				Element:span
				Element:span
					"metadata"
				Element:span
					:
				Element:span
				Element:span
					{},
				Element:span
				Element:span
					"refunds"
				Element:span
					:
				Element:span
				Element:span
					[]
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Refunds an order or a mispayment to an order. Returns a snapshot of the order data, updated with refund transaction details.
			Node:
			(type) c
			(layer)1
				Element:p
					There are three ways to refund an order:
			Node:
			(type) c
			(layer)1
				Element:ol
				Element:li
					Use this endpoint to refund the full amount of the order or mispayment, specified as either the original BTC amount or the order’s native currency amount (such as USD). There refunds will be linked to the order’s
				Element:code
					refunds
					array with refund information and associated transaction.
				Element:li
					Use this endpoint with the
				Element:code
					mispayment
					parameter to refund a specific mispayment. A refunded mispayment will include refund details in the
				Element:code
					refund_transaction
					field.
				Element:li
					Use the
				Element:a
					send money endpoint
					to manually issue a partial refunds.
			Node:
			(type) c
			(layer)1
				Element:p
					By default, refunds will be issued to the
				Element:code
					refund_address
					that is set on the order or the mispayment. This field is automatically present when the original incoming transaction was from a Coinbase user, or via the payment protocol. In these cases, we are able to provide a refund address automatically. If the refund address is not present, you can specify an address to send the refund to with the
				Element:code
					refund_address
					POST parameter.
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					POST https://api.coinbase.com/v2/orders/:order_id/refund
			Node:
			(type) c
			(layer)1
				Element:h3
					Scopes
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:code
					wallet:orders:refund
			Node:
			(type) c
			(layer)1
				Element:h3
					Arguments
			Node:
			(type) c
			(layer)1
				Element:p
				Element:em
					No arguments
			Node:
			(type) c
			(layer)1
				Element:h3
					Arguments
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Type
				Element:th
					Required
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
				Element:code
					currency
				Element:td
					string
				Element:td
					Required
				Element:td
					The currency to issue the refund in. If
				Element:code
					BTC
					, the original bitcoin amount will be sent back. If
				Element:code
					USD
					(or another currency code if the order had a different native price), the amount of bitcoin sent back will be equivalent to the original USD value (or other native value) at the current exchange rate
				Element:tr
				Element:td
				Element:code
					mispayment
				Element:td
					string
				Element:td
					Optional
				Element:td
					The ID of a mispayment to be refunded. If left blank, the original order transaction will be refunded, if the order status is
				Element:code
					paid
				Element:tr
				Element:td
				Element:code
					refund_address
				Element:td
					string
				Element:td
					Optional
				Element:td
					This field is required if the order or mispayment does not already have a value for
				Element:code
					refund_address
					. Must be a valid bitcoin address. If this field is specified but the order or mispayment already has a
				Element:code
					refund_address
					that was automatically added by Coinbase, the already-present address will take precedence over the refund address specified in the request
			Node:
			(type) h1
			(layer)1
				Element:h1
					Checkouts
			Node:
			(type) c
			(layer)1
				Element:h2
					Checkout resource
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example of a merchant’s checkout resource
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"ffc93ba1-874d-5c55-853c-53c9c4814b1e"
				Element:span
					,
				Element:span
				Element:span
					"embed_code"
				Element:span
					:
				Element:span
				Element:span
					"af0b52802ad7b36806e307b2d294e3b4"
				Element:span
					,
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"order"
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"My Checkout"
				Element:span
					,
				Element:span
				Element:span
					"description"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"99.00000000"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"BTC"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"style"
				Element:span
					:
				Element:span
				Element:span
					"buy_now_large"
				Element:span
					,
				Element:span
				Element:span
					"customer_defined_amount"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"amount_presets"
				Element:span
					:
				Element:span
				Element:span
					[],
				Element:span
				Element:span
					"success_url"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"cancel_url"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"info_url"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"auto_redirect"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"collect_shipping_address"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"collect_email"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"collect_phone_number"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"collect_country"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"metadata"
				Element:span
					:
				Element:span
				Element:span
					{},
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-01-31T20:49:02Z"
				Element:span
					,
				Element:span
				Element:span
					"updated_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-01-31T20:49:02Z"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"checkout"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/checkouts/ffc93ba1-874d-5c55-853c-53c9c4814b1e"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					The Checkout resource is used with Coinbase’s merchant tools (payment pages, iframes etc). It’s highly linked to the
				Element:a
					in the following ways:
				Element:code
					order
					resource
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					When creating a checkout (ie.
				Element:a
					embeddable button
					,
				Element:a
					payment page
					, or
				Element:a
					iFrame
					), information about the payment flow is stored to checkout. Once the user opens the payment page, an order object is automatically created for the checkout, with a lifespan of 15 minutes
				Element:li
					As orders expire, one checkout can have multiple orders
				Element:li
					A checkout resource can be used as a template to create orders
				Element:li
					For donations, merchants only need to have one constant checkout. Every time a customer donates, they will create a new order
			Node:
			(type) c
			(layer)1
				Element:p
					Checkouts are useful if you’re integrating Coinbase’s merchant tools as a payment option for your service. If you’re looking to collect bitcoin payments without Coinbase’s UI, you can do it directly with
				Element:a
					orders
					.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Fields
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
				Element:code
					id
				Element:em
					string
				Element:td
					Resource ID
				Element:tr
				Element:td
				Element:code
					embed_code
				Element:em
					string
				Element:td
					Client facing code which is used with merchant tools (
				Element:code
					data-code
					parameter)
				Element:tr
				Element:td
				Element:code
					type
				Element:em
					string,
				Element:a
					enumerable
				Element:td
					Type of the order. Currently available values:
				Element:code
					order
					(regular order),
				Element:code
					donation
					(donation),
				Element:code
					invoice
					(email invoice)
				Element:tr
				Element:td
				Element:code
					name
				Element:em
					string
				Element:td
					The name of the item for which you are collecting bitcoin. For example,
				Element:code
					Acme Order #123
					or
				Element:code
					Annual Pledge Drive
				Element:tr
				Element:td
				Element:code
					description
				Element:em
					string
				Element:td
					Longer description of the item in case you want it added to the user’s transaction notes.
				Element:tr
				Element:td
				Element:code
					amount
				Element:em
				Element:a
					money hash
				Element:td
					Order amount in original currency (can be fiat or BTC)
				Element:tr
				Element:td
				Element:code
					style
				Element:em
					string,
				Element:a
					enumerable
				Element:td
					Style of a payment button. Currently available values:
				Element:code
					buy_now_large
					(default),
				Element:code
					buy_now_small
					,
				Element:code
					donation_large
					,
				Element:code
					donation_small
					,
				Element:code
					custom_large
					,
				Element:code
					custom_small
					,
				Element:code
					none
					. To control text with custom ones, you need to use the
				Element:code
					data-button-text
					parameter with your checkout button’s HTML code.
				Element:tr
				Element:td
				Element:code
					customer_defined_amount
					,
				Element:em
					boolean
				Element:td
					Allow customer to define the amount they are paying. This is most commonly used with donations
				Element:tr
				Element:td
				Element:code
					acceptable_overpayment
				Element:em
					string, optional
				Element:td
					Apply a percentage on the order amount which defines how much the customer can overpay with no issues
				Element:tr
				Element:td
				Element:code
					acceptable_underpayment
				Element:em
					string, optional
				Element:td
					Apply a percentage on the order amount which defines how much the customer can underpay with no issues
				Element:tr
				Element:td
				Element:code
					amount_presets
				Element:em
					array, optional
				Element:td
					Allow customer to select one of the predefined amount values. Values are
				Element:code
					money
					objects
				Element:tr
				Element:td
				Element:code
					success_url
				Element:em
					string, optional
				Element:td
					URL to which the customer is redirected after successful payment
				Element:tr
				Element:td
				Element:code
					cancel_url
				Element:em
					string, optional
				Element:td
					URL to which the customer is redirected after they have canceled a payment
				Element:tr
				Element:td
				Element:code
					auto_redirect
					,
				Element:em
					boolean
				Element:td
					Auto-redirect users to success or cancel url after payment
				Element:tr
				Element:td
				Element:code
					collect_shipping_address
				Element:em
					boolean
				Element:td
					Collect shipping address from customer (not for use with inline iframes)
				Element:tr
				Element:td
				Element:code
					collect_phone_number
				Element:em
					boolean
				Element:td
					Collect phone number from customer (not for use with inline iframes)
				Element:tr
				Element:td
				Element:code
					collect_email
				Element:em
					boolean
				Element:td
					Collect email from customer (not for use with inline iframes)
				Element:tr
				Element:td
				Element:code
					collect_country
				Element:em
					boolean
				Element:td
					Collect country from customer (not for use with inline iframes)
				Element:tr
				Element:td
				Element:code
					metadata
				Element:em
				Element:a
					metadata hash, optional
				Element:td
					Merchant defined metadata
				Element:tr
				Element:td
				Element:code
					created_at
				Element:em
					timestamp
				Element:td
				Element:tr
				Element:td
				Element:code
					updated_at
				Element:em
					timestamp
				Element:td
				Element:tr
				Element:td
				Element:code
					resource
				Element:em
					string, constant
				Element:strong
					checkout
				Element:td
				Element:tr
				Element:td
				Element:code
					resource_path
				Element:em
					string
				Element:td
			Node:
			(type) c
			(layer)1
				Element:h2
					List checkouts
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example request
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl https://api.coinbase.com/v2/checkouts
				Element:span
					\
					-H
				Element:span
					'Authorization: Bearer abd90df5f27a7b170cd775abf89d632b350b7c1c9d53e08b340cd9832ce52c2c'
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'coinbase/wallet'
				Element:span
					client
				Element:span
					=
				Element:span
					Coinbase
				Element:span
					::
				Element:span
					Wallet
				Element:span
					::
				Element:span
					Client
				Element:span
					.
				Element:span
					new
				Element:span
					(
				Element:span
					api_key:
				Element:span
					<
				Element:span
					api
				Element:span
					key
				Element:span
					>
				Element:span
					,
				Element:span
					api_secret:
				Element:span
					<
				Element:span
					api
				Element:span
					secret
				Element:span
					>
				Element:span
					)
				Element:span
					checkouts
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					checkouts
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					from
				Element:span
					coinbase.wallet.client
				Element:span
					import
				Element:span
					Client
				Element:span
					client
				Element:span
					=
				Element:span
					Client
				Element:span
					(
				Element:span
					<
				Element:span
					api_key
				Element:span
					>
				Element:span
					,
				Element:span
					<
				Element:span
					api_secret
				Element:span
					>
				Element:span
					)
				Element:span
					checkouts
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					get_checkouts
				Element:span
					()
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					var
				Element:span
					Client
				Element:span
					=
				Element:span
					require
				Element:span
					(
				Element:span
					'coinbase'
				Element:span
					).
				Element:span
					Client
				Element:span
					;
				Element:span
					var
				Element:span
					client
				Element:span
					=
				Element:span
					new
				Element:span
					Client
				Element:span
					({
				Element:span
					'apiKey'
				Element:span
					:
				Element:span
					'API KEY'
				Element:span
					,
				Element:span
					'apiSecret'
				Element:span
					:
				Element:span
					'API SECRET'
				Element:span
					});
				Element:span
					client
				Element:span
					.
				Element:span
					getCheckouts
				Element:span
					(
				Element:span
					function
				Element:span
					(
				Element:span
					err
				Element:span
					,
				Element:span
					checkouts
				Element:span
					)
				Element:span
					{
				Element:span
					console
				Element:span
					.
				Element:span
					log
				Element:span
					(
				Element:span
					checkouts
				Element:span
					);
				Element:span
					});
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example response
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"pagination"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"ending_before"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"starting_after"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"limit"
				Element:span
					:
				Element:span
				Element:span
					25
				Element:span
					,
				Element:span
				Element:span
					"order"
				Element:span
					:
				Element:span
				Element:span
					"desc"
				Element:span
					,
				Element:span
				Element:span
					"previous_uri"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"next_uri"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"data"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"ffc93ba1-874d-5c55-853c-53c9c4814b1e"
				Element:span
					,
				Element:span
				Element:span
					"embed_code"
				Element:span
					:
				Element:span
				Element:span
					"af0b52802ad7b36806e307b2d294e3b4"
				Element:span
					,
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"order"
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"My Checkout"
				Element:span
					,
				Element:span
				Element:span
					"description"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"99.00000000"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"BTC"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"style"
				Element:span
					:
				Element:span
				Element:span
					"buy_now_large"
				Element:span
					,
				Element:span
				Element:span
					"customer_defined_amount"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"amount_presets"
				Element:span
					:
				Element:span
				Element:span
					[],
				Element:span
				Element:span
					"success_url"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"cancel_url"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"info_url"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"auto_redirect"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"collect_shipping_address"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"collect_email"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"collect_phone_number"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"collect_country"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"metadata"
				Element:span
					:
				Element:span
				Element:span
					{},
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-01-31T20:49:02Z"
				Element:span
					,
				Element:span
				Element:span
					"updated_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-01-31T20:49:02Z"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"checkout"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/checkouts/ffc93ba1-874d-5c55-853c-53c9c4814b1e"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					]
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Lists current user’s checkouts.
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET https://api.coinbase.com/v2/checkouts
			Node:
			(type) c
			(layer)1
				Element:h3
					Scopes
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:code
					wallet:checkouts:read
			Node:
			(type) c
			(layer)1
				Element:h2
					Show a checkout
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example request
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl https://api.coinbase.com/v2/checkout/ffc93ba1-874d-5c55-853c-53c9c4814b1e
				Element:span
					\
					-H
				Element:span
					'Authorization: Bearer abd90df5f27a7b170cd775abf89d632b350b7c1c9d53e08b340cd9832ce52c2c'
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'coinbase/wallet'
				Element:span
					client
				Element:span
					=
				Element:span
					Coinbase
				Element:span
					::
				Element:span
					Wallet
				Element:span
					::
				Element:span
					Client
				Element:span
					.
				Element:span
					new
				Element:span
					(
				Element:span
					api_key:
				Element:span
					<
				Element:span
					api
				Element:span
					key
				Element:span
					>
				Element:span
					,
				Element:span
					api_secret:
				Element:span
					<
				Element:span
					api
				Element:span
					secret
				Element:span
					>
				Element:span
					)
				Element:span
					checkout
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					checkout
				Element:span
					(
				Element:span
					'ffc93ba1-874d-5c55-853c-53c9c4814b1e'
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					from
				Element:span
					coinbase.wallet.client
				Element:span
					import
				Element:span
					Client
				Element:span
					client
				Element:span
					=
				Element:span
					Client
				Element:span
					(
				Element:span
					<
				Element:span
					api_key
				Element:span
					>
				Element:span
					,
				Element:span
					<
				Element:span
					api_secret
				Element:span
					>
				Element:span
					)
				Element:span
					checkout
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					get_checkout
				Element:span
					(
				Element:span
					'ffc93ba1-874d-5c55-853c-53c9c4814b1e'
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					var
				Element:span
					Client
				Element:span
					=
				Element:span
					require
				Element:span
					(
				Element:span
					'coinbase'
				Element:span
					).
				Element:span
					Client
				Element:span
					;
				Element:span
					var
				Element:span
					client
				Element:span
					=
				Element:span
					new
				Element:span
					Client
				Element:span
					({
				Element:span
					'apiKey'
				Element:span
					:
				Element:span
					'API KEY'
				Element:span
					,
				Element:span
					'apiSecret'
				Element:span
					:
				Element:span
					'API SECRET'
				Element:span
					});
				Element:span
					client
				Element:span
					.
				Element:span
					getCheckout
				Element:span
					(
				Element:span
					'ffc93ba1-874d-5c55-853c-53c9c4814b1e'
				Element:span
					,
				Element:span
					function
				Element:span
					(
				Element:span
					err
				Element:span
					,
				Element:span
					checkout
				Element:span
					)
				Element:span
					{
				Element:span
					console
				Element:span
					.
				Element:span
					log
				Element:span
					(
				Element:span
					checkout
				Element:span
					);
				Element:span
					});
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example response
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"data"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"ffc93ba1-874d-5c55-853c-53c9c4814b1e"
				Element:span
					,
				Element:span
				Element:span
					"embed_code"
				Element:span
					:
				Element:span
				Element:span
					"af0b52802ad7b36806e307b2d294e3b4"
				Element:span
					,
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"order"
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"My Checkout"
				Element:span
					,
				Element:span
				Element:span
					"description"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"99.00000000"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"BTC"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"style"
				Element:span
					:
				Element:span
				Element:span
					"buy_now_large"
				Element:span
					,
				Element:span
				Element:span
					"customer_defined_amount"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"amount_presets"
				Element:span
					:
				Element:span
				Element:span
					[],
				Element:span
				Element:span
					"success_url"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"cancel_url"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"info_url"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"auto_redirect"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"collect_shipping_address"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"collect_email"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"collect_phone_number"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"collect_country"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"metadata"
				Element:span
					:
				Element:span
				Element:span
					{},
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-01-31T20:49:02Z"
				Element:span
					,
				Element:span
				Element:span
					"updated_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-01-31T20:49:02Z"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"checkout"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/checkouts/ffc93ba1-874d-5c55-853c-53c9c4814b1e"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Show current user’s checkout.
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET https://api.coinbase.com/v2/checkouts/:checkout_id
			Node:
			(type) c
			(layer)1
				Element:h3
					Scopes
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:code
					wallet:checkouts:read
			Node:
			(type) c
			(layer)1
				Element:h2
					Create checkout
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example request
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl https://api.coinbase.com/v2/checkouts
				Element:span
					\
					-X POST
				Element:span
					\
					-H
				Element:span
					'Content-Type: application/json'
				Element:span
					\
					-H
				Element:span
					'Authorization: Bearer abd90df5f27a7b170cd775abf89d632b350b7c1c9d53e08b340cd9832ce52c2c'
				Element:span
					\
					-d
				Element:span
					'{"amount": "10.00", "currency": "USD", "name": "Spring donation", "description": "Sample checkout", "type": "donation", "style": "donation_large", "customer_defined_amount": true, "amount_presets": ["20.00", "50.00"], "collect_email": true, "metadata": { "product_id": "id_1020" } }'
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'coinbase/wallet'
				Element:span
					client
				Element:span
					=
				Element:span
					Coinbase
				Element:span
					::
				Element:span
					Wallet
				Element:span
					::
				Element:span
					Client
				Element:span
					.
				Element:span
					new
				Element:span
					(
				Element:span
					api_key:
				Element:span
					<
				Element:span
					api
				Element:span
					key
				Element:span
					>
				Element:span
					,
				Element:span
					api_secret:
				Element:span
					<
				Element:span
					api
				Element:span
					secret
				Element:span
					>
				Element:span
					)
				Element:span
					checkout
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					create_checkout
				Element:span
					({
				Element:span
					amount:
				Element:span
					"10.00"
				Element:span
					,
				Element:span
					currency:
				Element:span
					"USD"
				Element:span
					,
				Element:span
					name:
				Element:span
					"Spring donation"
				Element:span
					,
				Element:span
					description:
				Element:span
					"Sample checkout"
				Element:span
					,
				Element:span
					type:
				Element:span
					"donation"
				Element:span
					,
				Element:span
					style:
				Element:span
					"donation_large"
				Element:span
					,
				Element:span
					customer_defined_amount:
				Element:span
					true
				Element:span
					,
				Element:span
					amount_presets:
				Element:span
					[
				Element:span
					"20.00"
				Element:span
					,
				Element:span
					"50.00"
				Element:span
					],
				Element:span
					collect_email:
				Element:span
					true
				Element:span
					,
				Element:span
					metadata:
				Element:span
					{
				Element:span
					product_id:
				Element:span
					"id_1020"
				Element:span
					}})
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					from
				Element:span
					coinbase.wallet.client
				Element:span
					import
				Element:span
					Client
				Element:span
					client
				Element:span
					=
				Element:span
					Client
				Element:span
					(
				Element:span
					<
				Element:span
					api_key
				Element:span
					>
				Element:span
					,
				Element:span
					<
				Element:span
					api_secret
				Element:span
					>
				Element:span
					)
				Element:span
					checkout
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					create_checkout
				Element:span
					({
				Element:span
					"amount"
				Element:span
					:
				Element:span
					"10.00"
				Element:span
					,
				Element:span
					"currency"
				Element:span
					:
				Element:span
					"USD"
				Element:span
					,
				Element:span
					"name"
				Element:span
					:
				Element:span
					"Spring donation"
				Element:span
					,
				Element:span
					"description"
				Element:span
					:
				Element:span
					"Sample checkout"
				Element:span
					,
				Element:span
					"type"
				Element:span
					:
				Element:span
					"donation"
				Element:span
					,
				Element:span
					"style"
				Element:span
					:
				Element:span
					"donation_large"
				Element:span
					,
				Element:span
					"customer_defined_amount"
				Element:span
					:
				Element:span
					true
				Element:span
					,
				Element:span
					"amount_presets"
				Element:span
					:
				Element:span
					[
				Element:span
					"20.00"
				Element:span
					,
				Element:span
					"50.00"
				Element:span
					],
				Element:span
					"collect_email"
				Element:span
					:
				Element:span
					true
				Element:span
					,
				Element:span
					"metadata"
				Element:span
					:
				Element:span
					{
				Element:span
					"product_id"
				Element:span
					:
				Element:span
					"id_1020"
				Element:span
					}})
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					var
				Element:span
					Client
				Element:span
					=
				Element:span
					require
				Element:span
					(
				Element:span
					'coinbase'
				Element:span
					).
				Element:span
					Client
				Element:span
					;
				Element:span
					var
				Element:span
					client
				Element:span
					=
				Element:span
					new
				Element:span
					Client
				Element:span
					({
				Element:span
					'apiKey'
				Element:span
					:
				Element:span
					'API KEY'
				Element:span
					,
				Element:span
					'apiSecret'
				Element:span
					:
				Element:span
					'API SECRET'
				Element:span
					});
				Element:span
					client
				Element:span
					.
				Element:span
					createCheckout
				Element:span
					({
				Element:span
					"amount"
				Element:span
					:
				Element:span
					"10.00"
				Element:span
					,
				Element:span
					"currency"
				Element:span
					:
				Element:span
					"USD"
				Element:span
					,
				Element:span
					"name"
				Element:span
					:
				Element:span
					"Spring donation"
				Element:span
					,
				Element:span
					"description"
				Element:span
					:
				Element:span
					"Sample checkout"
				Element:span
					,
				Element:span
					"type"
				Element:span
					:
				Element:span
					"donation"
				Element:span
					,
				Element:span
					"style"
				Element:span
					:
				Element:span
					"donation_large"
				Element:span
					,
				Element:span
					"customer_defined_amount"
				Element:span
					:
				Element:span
					true
				Element:span
					,
				Element:span
					"amount_presets"
				Element:span
					:
				Element:span
					[
				Element:span
					"20.00"
				Element:span
					,
				Element:span
					"50.00"
				Element:span
					],
				Element:span
					"collect_email"
				Element:span
					:
				Element:span
					true
				Element:span
					,
				Element:span
					"metadata"
				Element:span
					:
				Element:span
					{
				Element:span
					"product_id"
				Element:span
					:
				Element:span
					"id_1020"
				Element:span
					}},
				Element:span
					function
				Element:span
					(
				Element:span
					err
				Element:span
					,
				Element:span
					checkout
				Element:span
					)
				Element:span
					{
				Element:span
					console
				Element:span
					.
				Element:span
					log
				Element:span
					(
				Element:span
					checkout
				Element:span
					);
				Element:span
					});
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Response (201)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"data"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"ffc93ba1-874d-5c55-853c-53c9c4814b1e"
				Element:span
					,
				Element:span
				Element:span
					"embed_code"
				Element:span
					:
				Element:span
				Element:span
					"af0b52802ad7b36806e307b2d294e3b4"
				Element:span
					,
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"donation"
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Spring donation"
				Element:span
					,
				Element:span
				Element:span
					"description"
				Element:span
					:
				Element:span
				Element:span
					"Sample checkout"
				Element:span
					,
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"10.00"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"style"
				Element:span
					:
				Element:span
				Element:span
					"donation_large"
				Element:span
					,
				Element:span
				Element:span
					"customer_defined_amount"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"amount_presets"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"20.00"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"50.00"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					],
				Element:span
				Element:span
					"success_url"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"cancel_url"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"info_url"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"auto_redirect"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"collect_shipping_address"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"collect_email"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"collect_phone_number"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"collect_country"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"metadata"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"product_id"
				Element:span
					:
				Element:span
				Element:span
					"id_1020"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-01-31T20:49:02Z"
				Element:span
					,
				Element:span
				Element:span
					"updated_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-01-31T20:49:02Z"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"checkout"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/checkouts/ffc93ba1-874d-5c55-853c-53c9c4814b1e"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Creates a new merchant order checkout product.
			Node:
			(type) c
			(layer)1
				Element:p
					All checkouts and subsequent orders created using this endpoint are created for merchant’s primary account.
			Node:
			(type) c
			(layer)1
				Element:p
					Using this endpoint to create checkouts and orders is useful when you want to build a merchant checkout experience with Coinbase’s merchant tools. If you’re looking into building your own checkout flow, see
				Element:a
					POST /api/v2/orders
					.
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					POST https://api.coinbase.com/v2/checkouts
			Node:
			(type) c
			(layer)1
				Element:h3
					Scopes
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:code
					wallet:checkouts:create
			Node:
			(type) c
			(layer)1
				Element:h3
					Arguments
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Type
				Element:th
					Required
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					amount
				Element:td
					string
				Element:td
					Required
				Element:td
					Order amount (price)
				Element:tr
				Element:td
					currency
				Element:td
					string
				Element:td
					Required
				Element:td
					Order amount’s currency
				Element:tr
				Element:td
					name
				Element:td
					string
				Element:td
					Required
				Element:td
					Name of the order
				Element:tr
				Element:td
					description
				Element:td
					string
				Element:td
					Optional
				Element:td
					More detailed description of the checkout order
				Element:tr
				Element:td
					type
				Element:td
					string
				Element:td
					Optional
				Element:td
					Checkout’s order type. Available values:
				Element:code
					order
					(default),
				Element:code
					donation
				Element:tr
				Element:td
					style
				Element:td
					string
				Element:td
					Optional
				Element:td
					Style of a payment button. Currently available values:
				Element:code
					buy_now_large
					,
				Element:code
					buy_now_small
					,
				Element:code
					donation_large
					,
				Element:code
					donation_small
					,
				Element:code
					custom_large
					,
				Element:code
					custom_small
				Element:tr
				Element:td
					customer_defined_amount
				Element:td
					boolean
				Element:td
					Optional
				Element:td
					Allow customer to define the amount they are paying. This is most commonly used with donations
				Element:tr
				Element:td
					amount_presets
				Element:td
					array
				Element:td
					Optional
				Element:td
					Allow customer to select one of the predefined amount values. Input value must be an array of number values. Preset values will inherit currency from
				Element:code
					currency
					argument
				Element:tr
				Element:td
					success_url
				Element:td
					string
				Element:td
					Optional
				Element:td
					URL to which the customer is redirected after successful payment
				Element:tr
				Element:td
					cancel_url
				Element:td
					string
				Element:td
					Optional
				Element:td
					URL to which the customer is redirected after they have canceled a payment
				Element:tr
				Element:td
					notifications_url
				Element:td
					string
				Element:td
					Optional
				Element:td
					Checkout specific
				Element:a
					notification URL
				Element:tr
				Element:td
					auto_redirect
				Element:td
					boolean
				Element:td
					Optional
				Element:td
					Auto-redirect users to success or cancel url after payment
				Element:tr
				Element:td
					collect_shipping_address
				Element:td
					boolean
				Element:td
					Optional
				Element:td
					Collect shipping address from customer (not for use with inline iframes)
				Element:tr
				Element:td
					collect_email
				Element:td
					boolean
				Element:td
					Optional
				Element:td
					Collect email address from customer (not for use with inline iframes)
				Element:tr
				Element:td
					collect_phone_number
				Element:td
					boolean
				Element:td
					Optional
				Element:td
					Collect phone number from customer (not for use with inline iframes)
				Element:tr
				Element:td
					collect_country
				Element:td
					boolean
				Element:td
					Optional
				Element:td
					Collect country from customer (not for use with inline iframes)
				Element:tr
				Element:td
					metadata
				Element:td
					hash
				Element:td
					Optional
				Element:td
					Developer defined key value pairs.
				Element:a
					Read more
					.
			Node:
			(type) c
			(layer)1
				Element:h2
					List checkout’s orders
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example request
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl https://api.coinbase.com/v2/checkouts/0fdfb26e-bd26-5e1c-b055-7b935e57fa33/orders
				Element:span
					\
					-H
				Element:span
					'Authorization: Bearer abd90df5f27a7b170cd775abf89d632b350b7c1c9d53e08b340cd9832ce52c2c'
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'coinbase/wallet'
				Element:span
					client
				Element:span
					=
				Element:span
					Coinbase
				Element:span
					::
				Element:span
					Wallet
				Element:span
					::
				Element:span
					Client
				Element:span
					.
				Element:span
					new
				Element:span
					(
				Element:span
					api_key:
				Element:span
					<
				Element:span
					api
				Element:span
					key
				Element:span
					>
				Element:span
					,
				Element:span
					api_secret:
				Element:span
					<
				Element:span
					api
				Element:span
					secret
				Element:span
					>
				Element:span
					)
				Element:span
					orders
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					checkout_orders
				Element:span
					(
				Element:span
					'ffc93ba1-874d-5c55-853c-53c9c4814b1e'
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					from
				Element:span
					coinbase.wallet.client
				Element:span
					import
				Element:span
					Client
				Element:span
					client
				Element:span
					=
				Element:span
					Client
				Element:span
					(
				Element:span
					<
				Element:span
					api_key
				Element:span
					>
				Element:span
					,
				Element:span
					<
				Element:span
					api_secret
				Element:span
					>
				Element:span
					)
				Element:span
					orders
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					get_checkout_orders
				Element:span
					(
				Element:span
					'ffc93ba1-874d-5c55-853c-53c9c4814b1e'
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					var
				Element:span
					Client
				Element:span
					=
				Element:span
					require
				Element:span
					(
				Element:span
					'coinbase'
				Element:span
					).
				Element:span
					Client
				Element:span
					;
				Element:span
					var
				Element:span
					client
				Element:span
					=
				Element:span
					new
				Element:span
					Client
				Element:span
					({
				Element:span
					'apiKey'
				Element:span
					:
				Element:span
					'API KEY'
				Element:span
					,
				Element:span
					'apiSecret'
				Element:span
					:
				Element:span
					'API SECRET'
				Element:span
					});
				Element:span
					client
				Element:span
					.
				Element:span
					getCheckout
				Element:span
					(
				Element:span
					'ffc93ba1-874d-5c55-853c-53c9c4814b1e'
				Element:span
					,
				Element:span
					function
				Element:span
					(
				Element:span
					err
				Element:span
					,
				Element:span
					checkout
				Element:span
					)
				Element:span
					{
				Element:span
					checkout
				Element:span
					.
				Element:span
					getOrders
				Element:span
					(
				Element:span
					function
				Element:span
					(
				Element:span
					err
				Element:span
					,
				Element:span
					orders
				Element:span
					)
				Element:span
					{
				Element:span
					console
				Element:span
					.
				Element:span
					log
				Element:span
					(
				Element:span
					orders
				Element:span
					);
				Element:span
					});
				Element:span
					});
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Response (200)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"data"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"8121ef0b-acbe-55e1-b57e-204cdea46479"
				Element:span
					,
				Element:span
				Element:span
					"code"
				Element:span
					:
				Element:span
				Element:span
					"FZM8HQ64"
				Element:span
					,
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"order"
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Test Checkout"
				Element:span
					,
				Element:span
				Element:span
					"description"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"1.00000000"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"BTC"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"receipt_url"
				Element:span
					:
				Element:span
				Element:span
					"https://www.coinbase.com/orders/ba824a9a66fdb4b47a103ac48ce76041/receipt"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"order"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/orders/8121ef0b-acbe-55e1-b57e-204cdea46479"
				Element:span
					,
				Element:span
				Element:span
					"status"
				Element:span
					:
				Element:span
				Element:span
					"paid"
				Element:span
					,
				Element:span
				Element:span
					"bitcoin_amount"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"1.00000000"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"BTC"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"bitcoin_address"
				Element:span
					:
				Element:span
				Element:span
					"mgmZ1skB4GKfr3hqHAdqQ2A7f8CRC3tRCn"
				Element:span
					,
				Element:span
				Element:span
					"refund_address"
				Element:span
					:
				Element:span
				Element:span
					"my3QyqFk2K9Rc3FooJcAD7HFx85148YFCe"
				Element:span
					,
				Element:span
				Element:span
					"bitcoin_uri"
				Element:span
					:
				Element:span
				Element:span
					"bitcoin:mgmZ1skB4GKfr3hqHAdqQ2A7f8CRC3tRCn?amount=1.00&r=http://127.0.0.1:3000/r/555bc418a54d75965100009d"
				Element:span
					,
				Element:span
				Element:span
					"paid_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-01-31T20:49:02Z"
				Element:span
					,
				Element:span
				Element:span
					"mispaid_at"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"expired_at"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-01-31T20:49:02Z"
				Element:span
					,
				Element:span
				Element:span
					"updated_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-01-31T20:49:02Z"
				Element:span
					,
				Element:span
				Element:span
					"transaction"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"df205189-35ec-51fb-b2fb-0b08fa613601"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"transaction"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"mispayments"
				Element:span
					:
				Element:span
				Element:span
					[],
				Element:span
				Element:span
					"refunds"
				Element:span
					:
				Element:span
				Element:span
					[],
				Element:span
				Element:span
					"manual_refund_transactions"
				Element:span
					:
				Element:span
				Element:span
					[]
				Element:span
				Element:span
					}
				Element:span
				Element:span
					]
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Lists checkout product’s orders
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET https://api.coinbase.com/v2/checkouts/:checkout_id/orders
			Node:
			(type) c
			(layer)1
				Element:h3
					Scopes
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:code
					wallet:checkouts:read
			Node:
			(type) c
			(layer)1
				Element:h2
					Create a new order for a checkout
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl https://api.coinbase.com/v2/checkouts/0fdfb26e-bd26-5e1c-b055-7b935e57fa33/orders
				Element:span
					\
					-X POST
				Element:span
					\
					-H
				Element:span
					'Authorization: Bearer abd90df5f27a7b170cd775abf89d632b350b7c1c9d53e08b340cd9832ce52c2c'
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'coinbase/wallet'
				Element:span
					client
				Element:span
					=
				Element:span
					Coinbase
				Element:span
					::
				Element:span
					Wallet
				Element:span
					::
				Element:span
					Client
				Element:span
					.
				Element:span
					new
				Element:span
					(
				Element:span
					api_key:
				Element:span
					<
				Element:span
					api
				Element:span
					key
				Element:span
					>
				Element:span
					,
				Element:span
					api_secret:
				Element:span
					<
				Element:span
					api
				Element:span
					secret
				Element:span
					>
				Element:span
					)
				Element:span
					order
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					create_checkout_order
				Element:span
					(
				Element:span
					'ffc93ba1-874d-5c55-853c-53c9c4814b1e'
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					from
				Element:span
					coinbase.wallet.client
				Element:span
					import
				Element:span
					Client
				Element:span
					client
				Element:span
					=
				Element:span
					Client
				Element:span
					(
				Element:span
					<
				Element:span
					api_key
				Element:span
					>
				Element:span
					,
				Element:span
					<
				Element:span
					api_secret
				Element:span
					>
				Element:span
					)
				Element:span
					order
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					create_checkout_order
				Element:span
					(
				Element:span
					'ffc93ba1-874d-5c55-853c-53c9c4814b1e'
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					var
				Element:span
					Client
				Element:span
					=
				Element:span
					require
				Element:span
					(
				Element:span
					'coinbase'
				Element:span
					).
				Element:span
					Client
				Element:span
					;
				Element:span
					var
				Element:span
					client
				Element:span
					=
				Element:span
					new
				Element:span
					Client
				Element:span
					({
				Element:span
					'apiKey'
				Element:span
					:
				Element:span
					'API KEY'
				Element:span
					,
				Element:span
					'apiSecret'
				Element:span
					:
				Element:span
					'API SECRET'
				Element:span
					});
				Element:span
					client
				Element:span
					.
				Element:span
					getCheckout
				Element:span
					(
				Element:span
					'ffc93ba1-874d-5c55-853c-53c9c4814b1e'
				Element:span
					,
				Element:span
					function
				Element:span
					(
				Element:span
					err
				Element:span
					,
				Element:span
					checkout
				Element:span
					)
				Element:span
					{
				Element:span
					checkout
				Element:span
					.
				Element:span
					createOrder
				Element:span
					(
				Element:span
					function
				Element:span
					(
				Element:span
					err
				Element:span
					,
				Element:span
					order
				Element:span
					)
				Element:span
					{
				Element:span
					console
				Element:span
					.
				Element:span
					log
				Element:span
					(
				Element:span
					order
				Element:span
					);
				Element:span
					});
				Element:span
					});
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Response (200)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"data"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"8121ef0b-acbe-55e1-b57e-204cdea46479"
				Element:span
					,
				Element:span
				Element:span
					"code"
				Element:span
					:
				Element:span
				Element:span
					"FZM8HQ64"
				Element:span
					,
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"order"
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Test Checkout"
				Element:span
					,
				Element:span
				Element:span
					"description"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"1.00000000"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"BTC"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"receipt_url"
				Element:span
					:
				Element:span
				Element:span
					"https://www.coinbase.com/orders/ba824a9a66fdb4b47a103ac48ce76041/receipt"
				Element:span
					,
				Element:span
				Element:span
					"resource"
				Element:span
					:
				Element:span
				Element:span
					"order"
				Element:span
					,
				Element:span
				Element:span
					"resource_path"
				Element:span
					:
				Element:span
				Element:span
					"/v2/orders/8121ef0b-acbe-55e1-b57e-204cdea46479"
				Element:span
					,
				Element:span
				Element:span
					"status"
				Element:span
					:
				Element:span
				Element:span
					"active"
				Element:span
					,
				Element:span
				Element:span
					"bitcoin_amount"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"1.00000000"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"BTC"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"bitcoin_address"
				Element:span
					:
				Element:span
				Element:span
					"mgmZ1skB4GKfr3hqHAdqQ2A7f8CRC3tRCn"
				Element:span
					,
				Element:span
				Element:span
					"refund_address"
				Element:span
					:
				Element:span
				Element:span
					"my3QyqFk2K9Rc3FooJcAD7HFx85148YFCe"
				Element:span
					,
				Element:span
				Element:span
					"bitcoin_uri"
				Element:span
					:
				Element:span
				Element:span
					"bitcoin:mgmZ1skB4GKfr3hqHAdqQ2A7f8CRC3tRCn?amount=1.00&r=http://127.0.0.1:3000/r/555bc418a54d75965100009d"
				Element:span
					,
				Element:span
				Element:span
					"paid_at"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"mispaid_at"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"expired_at"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-01-31T20:49:02Z"
				Element:span
					,
				Element:span
				Element:span
					"updated_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-01-31T20:49:02Z"
				Element:span
					,
				Element:span
				Element:span
					"transaction"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"mispayments"
				Element:span
					:
				Element:span
				Element:span
					[],
				Element:span
				Element:span
					"refunds"
				Element:span
					:
				Element:span
				Element:span
					[],
				Element:span
				Element:span
					"manual_refund_transactions"
				Element:span
					:
				Element:span
				Element:span
					[]
				Element:span
				Element:span
					}
				Element:span
				Element:span
					]
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Creates a new order for a checkout. This will create a new receiving bitcoin address and converts the original order amount to bitcoin.
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					POST https://api.coinbase.com/v2/checkouts/:checkout_id/orders
			Node:
			(type) c
			(layer)1
				Element:h3
					Scopes
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:code
					wallet:checkouts:create
			Node:
			(type) c
			(layer)1
				Element:h3
					Arguments
			Node:
			(type) c
			(layer)1
				Element:p
				Element:em
					No arguments
			Node:
			(type) h1
			(layer)1
				Element:h1
					Data Endpoints
			Node:
			(type) h1
			(layer)1
				Element:h1
					Currencies
			Node:
			(type) c
			(layer)1
				Element:h2
					Get currencies
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example request
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl https://api.coinbase.com/v2/currencies
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'coinbase/wallet'
				Element:span
					client
				Element:span
					=
				Element:span
					Coinbase
				Element:span
					::
				Element:span
					Wallet
				Element:span
					::
				Element:span
					Client
				Element:span
					.
				Element:span
					new
				Element:span
					(
				Element:span
					api_key:
				Element:span
					<
				Element:span
					api
				Element:span
					key
				Element:span
					>
				Element:span
					,
				Element:span
					api_secret:
				Element:span
					<
				Element:span
					api
				Element:span
					secret
				Element:span
					>
				Element:span
					)
				Element:span
					currencies
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					currencies
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					from
				Element:span
					coinbase.wallet.client
				Element:span
					import
				Element:span
					Client
				Element:span
					client
				Element:span
					=
				Element:span
					Client
				Element:span
					(
				Element:span
					<
				Element:span
					api_key
				Element:span
					>
				Element:span
					,
				Element:span
					<
				Element:span
					api_secret
				Element:span
					>
				Element:span
					)
				Element:span
					currencies
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					get_currencies
				Element:span
					()
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					var
				Element:span
					Client
				Element:span
					=
				Element:span
					require
				Element:span
					(
				Element:span
					'coinbase'
				Element:span
					).
				Element:span
					Client
				Element:span
					;
				Element:span
					var
				Element:span
					client
				Element:span
					=
				Element:span
					new
				Element:span
					Client
				Element:span
					({
				Element:span
					'apiKey'
				Element:span
					:
				Element:span
					'API KEY'
				Element:span
					,
				Element:span
					'apiSecret'
				Element:span
					:
				Element:span
					'API SECRET'
				Element:span
					});
				Element:span
					client
				Element:span
					.
				Element:span
					getCurrencies
				Element:span
					(
				Element:span
					function
				Element:span
					(
				Element:span
					err
				Element:span
					,
				Element:span
					currencies
				Element:span
					)
				Element:span
					{
				Element:span
					console
				Element:span
					.
				Element:span
					log
				Element:span
					(
				Element:span
					currencies
				Element:span
					);
				Element:span
					});
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example response
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"data"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"AED"
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"United Arab Emirates Dirham"
				Element:span
					,
				Element:span
				Element:span
					"min_size"
				Element:span
					:
				Element:span
				Element:span
					"0.01000000"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"AFN"
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Afghan Afghani"
				Element:span
					,
				Element:span
				Element:span
					"min_size"
				Element:span
					:
				Element:span
				Element:span
					"0.01000000"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"ALL"
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Albanian Lek"
				Element:span
					,
				Element:span
				Element:span
					"min_size"
				Element:span
					:
				Element:span
				Element:span
					"0.01000000"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					"AMD"
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Armenian Dram"
				Element:span
					,
				Element:span
				Element:span
					"min_size"
				Element:span
					:
				Element:span
				Element:span
					"0.01000000"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					...
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					List known currencies. Currency codes will conform to the ISO 4217 standard where possible. Currencies which have or had no representation in ISO 4217 may use a custom code (e.g.
				Element:code
					BTC
					).
			Node:
			(type) c
			(layer)1
				Element:p
				Element:strong
					This endpoint doesn’t require authentication.
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET https://api.coinbase.com/v2/currencies
			Node:
			(type) c
			(layer)1
				Element:h3
					Scopes
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:em
					No permission required
			Node:
			(type) h1
			(layer)1
				Element:h1
					Exchange rates
			Node:
			(type) c
			(layer)1
				Element:h2
					Get exchange rates
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example request
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl https://api.coinbase.com/v2/exchange-rates?currency
				Element:span
					=
					BTC
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'coinbase/wallet'
				Element:span
					client
				Element:span
					=
				Element:span
					Coinbase
				Element:span
					::
				Element:span
					Wallet
				Element:span
					::
				Element:span
					Client
				Element:span
					.
				Element:span
					new
				Element:span
					(
				Element:span
					api_key:
				Element:span
					<
				Element:span
					api
				Element:span
					key
				Element:span
					>
				Element:span
					,
				Element:span
					api_secret:
				Element:span
					<
				Element:span
					api
				Element:span
					secret
				Element:span
					>
				Element:span
					)
				Element:span
					rates
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					exchange_rates
				Element:span
					({
				Element:span
					currency:
				Element:span
					'BTC'
				Element:span
					})
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					from
				Element:span
					coinbase.wallet.client
				Element:span
					import
				Element:span
					Client
				Element:span
					client
				Element:span
					=
				Element:span
					Client
				Element:span
					(
				Element:span
					<
				Element:span
					api_key
				Element:span
					>
				Element:span
					,
				Element:span
					<
				Element:span
					api_secret
				Element:span
					>
				Element:span
					)
				Element:span
					rates
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					get_exchange_rates
				Element:span
					({
				Element:span
					'currency'
				Element:span
					:
				Element:span
					'BTC'
				Element:span
					})
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					var
				Element:span
					Client
				Element:span
					=
				Element:span
					require
				Element:span
					(
				Element:span
					'coinbase'
				Element:span
					).
				Element:span
					Client
				Element:span
					;
				Element:span
					var
				Element:span
					client
				Element:span
					=
				Element:span
					new
				Element:span
					Client
				Element:span
					({
				Element:span
					'apiKey'
				Element:span
					:
				Element:span
					'API KEY'
				Element:span
					,
				Element:span
					'apiSecret'
				Element:span
					:
				Element:span
					'API SECRET'
				Element:span
					});
				Element:span
					client
				Element:span
					.
				Element:span
					getExchangeRates
				Element:span
					({
				Element:span
					'currency'
				Element:span
					:
				Element:span
					'BTC'
				Element:span
					},
				Element:span
					function
				Element:span
					(
				Element:span
					err
				Element:span
					,
				Element:span
					rates
				Element:span
					)
				Element:span
					{
				Element:span
					console
				Element:span
					.
				Element:span
					log
				Element:span
					(
				Element:span
					rates
				Element:span
					);
				Element:span
					});
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example response
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"data"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"BTC"
				Element:span
					,
				Element:span
				Element:span
					"rates"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"AED"
				Element:span
					:
				Element:span
				Element:span
					"36.73"
				Element:span
					,
				Element:span
				Element:span
					"AFN"
				Element:span
					:
				Element:span
				Element:span
					"589.50"
				Element:span
					,
				Element:span
				Element:span
					"ALL"
				Element:span
					:
				Element:span
				Element:span
					"1258.82"
				Element:span
					,
				Element:span
				Element:span
					"AMD"
				Element:span
					:
				Element:span
				Element:span
					"4769.49"
				Element:span
					,
				Element:span
				Element:span
					"ANG"
				Element:span
					:
				Element:span
				Element:span
					"17.88"
				Element:span
					,
				Element:span
				Element:span
					"AOA"
				Element:span
					:
				Element:span
				Element:span
					"1102.76"
				Element:span
					,
				Element:span
				Element:span
					"ARS"
				Element:span
					:
				Element:span
				Element:span
					"90.37"
				Element:span
					,
				Element:span
				Element:span
					"AUD"
				Element:span
					:
				Element:span
				Element:span
					"12.93"
				Element:span
					,
				Element:span
				Element:span
					"AWG"
				Element:span
					:
				Element:span
				Element:span
					"17.93"
				Element:span
					,
				Element:span
				Element:span
					"AZN"
				Element:span
					:
				Element:span
				Element:span
					"10.48"
				Element:span
					,
				Element:span
				Element:span
					"BAM"
				Element:span
					:
				Element:span
				Element:span
					"17.38"
				Element:span
					,
				Element:span
				Element:span
					...
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Get current exchange rates. Default base currency is
				Element:code
					USD
					but it can be defined as any
				Element:a
					supported currency
					. Returned rates will define the exchange rate for one unit of the base currency.
			Node:
			(type) c
			(layer)1
				Element:p
				Element:strong
					This endpoint doesn’t require authentication.
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET https://api.coinbase.com/v2/exchange-rates
			Node:
			(type) c
			(layer)1
				Element:h3
					Scopes
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:em
					No permission required
			Node:
			(type) c
			(layer)1
				Element:h3
					Arguments
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Type
				Element:th
					Required
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					currency
				Element:td
					string
				Element:td
					Optional
				Element:td
					Base currency (default:
				Element:code
					USD
					)
			Node:
			(type) h1
			(layer)1
				Element:h1
					Prices
			Node:
			(type) c
			(layer)1
				Element:h2
					Get buy price
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example request
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl https://api.coinbase.com/v2/prices/BTC-USD/buy
				Element:span
					\
					-H
				Element:span
					'Authorization: Bearer abd90df5f27a7b170cd775abf89d632b350b7c1c9d53e08b340cd9832ce52c2c'
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'coinbase/wallet'
				Element:span
					client
				Element:span
					=
				Element:span
					Coinbase
				Element:span
					::
				Element:span
					Wallet
				Element:span
					::
				Element:span
					Client
				Element:span
					.
				Element:span
					new
				Element:span
					(
				Element:span
					api_key:
				Element:span
					<
				Element:span
					api
				Element:span
					key
				Element:span
					>
				Element:span
					,
				Element:span
					api_secret:
				Element:span
					<
				Element:span
					api
				Element:span
					secret
				Element:span
					>
				Element:span
					)
				Element:span
					price
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					buy_price
				Element:span
					({
				Element:span
					currency_pair:
				Element:span
					'BTC-USD'
				Element:span
					})
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					from
				Element:span
					coinbase.wallet.client
				Element:span
					import
				Element:span
					Client
				Element:span
					client
				Element:span
					=
				Element:span
					Client
				Element:span
					(
				Element:span
					<
				Element:span
					api_key
				Element:span
					>
				Element:span
					,
				Element:span
					<
				Element:span
					api_secret
				Element:span
					>
				Element:span
					)
				Element:span
					price
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					get_buy_price
				Element:span
					(
				Element:span
					currency_pair
				Element:span
					=
				Element:span
					'BTC-USD'
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					var
				Element:span
					Client
				Element:span
					=
				Element:span
					require
				Element:span
					(
				Element:span
					'coinbase'
				Element:span
					).
				Element:span
					Client
				Element:span
					;
				Element:span
					var
				Element:span
					client
				Element:span
					=
				Element:span
					new
				Element:span
					Client
				Element:span
					({
				Element:span
					'apiKey'
				Element:span
					:
				Element:span
					'API KEY'
				Element:span
					,
				Element:span
					'apiSecret'
				Element:span
					:
				Element:span
					'API SECRET'
				Element:span
					});
				Element:span
					client
				Element:span
					.
				Element:span
					getBuyPrice
				Element:span
					({
				Element:span
					'currencyPair'
				Element:span
					:
				Element:span
					'BTC-USD'
				Element:span
					},
				Element:span
					function
				Element:span
					(
				Element:span
					err
				Element:span
					,
				Element:span
					price
				Element:span
					)
				Element:span
					{
				Element:span
					console
				Element:span
					.
				Element:span
					log
				Element:span
					(
				Element:span
					price
				Element:span
					);
				Element:span
					});
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example response
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"data"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"1020.25"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Get the total price to buy one bitcoin or ether.
			Node:
			(type) c
			(layer)1
				Element:p
					Note that exchange rates fluctuates so the price is only correct for seconds at the time. This buy price includes standard Coinbase fee (1%) but excludes any other fees including bank fees. If you need more accurate price estimate for a specific payment method or amount, see
				Element:a
					buy bitcoin endpoint and
					.
				Element:code
					quote: true
					option
			Node:
			(type) c
			(layer)1
				Element:p
				Element:strong
					This endpoint doesn’t require authentication.
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET https://api.coinbase.com/v2/prices/:currency_pair/buy
			Node:
			(type) c
			(layer)1
				Element:h3
					Scopes
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:em
					No permission required
			Node:
			(type) c
			(layer)1
				Element:h2
					Get sell price
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example request
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl https://api.coinbase.com/v2/prices/BTC-USD/sell / -H
				Element:span
					'Authorization: Bearer abd90df5f27a7b170cd775abf89d632b350b7c1c9d53e08b340cd9832ce52c2c'
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'coinbase/wallet'
				Element:span
					client
				Element:span
					=
				Element:span
					Coinbase
				Element:span
					::
				Element:span
					Wallet
				Element:span
					::
				Element:span
					Client
				Element:span
					.
				Element:span
					new
				Element:span
					(
				Element:span
					api_key:
				Element:span
					<
				Element:span
					api
				Element:span
					key
				Element:span
					>
				Element:span
					,
				Element:span
					api_secret:
				Element:span
					<
				Element:span
					api
				Element:span
					secret
				Element:span
					>
				Element:span
					)
				Element:span
					price
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					sell_price
				Element:span
					({
				Element:span
					currency_pair:
				Element:span
					'BTC-USD'
				Element:span
					})
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					from
				Element:span
					coinbase.wallet.client
				Element:span
					import
				Element:span
					Client
				Element:span
					client
				Element:span
					=
				Element:span
					Client
				Element:span
					(
				Element:span
					<
				Element:span
					api_key
				Element:span
					>
				Element:span
					,
				Element:span
					<
				Element:span
					api_secret
				Element:span
					>
				Element:span
					)
				Element:span
					price
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					get_sell_price
				Element:span
					(
				Element:span
					currency_pair
				Element:span
					=
				Element:span
					'BTC-USD'
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					var
				Element:span
					Client
				Element:span
					=
				Element:span
					require
				Element:span
					(
				Element:span
					'coinbase'
				Element:span
					).
				Element:span
					Client
				Element:span
					;
				Element:span
					var
				Element:span
					client
				Element:span
					=
				Element:span
					new
				Element:span
					Client
				Element:span
					({
				Element:span
					'apiKey'
				Element:span
					:
				Element:span
					'API KEY'
				Element:span
					,
				Element:span
					'apiSecret'
				Element:span
					:
				Element:span
					'API SECRET'
				Element:span
					});
				Element:span
					client
				Element:span
					.
				Element:span
					getSellPrice
				Element:span
					({
				Element:span
					'currencyPair'
				Element:span
					:
				Element:span
					'BTC-USD'
				Element:span
					},
				Element:span
					function
				Element:span
					(
				Element:span
					err
				Element:span
					,
				Element:span
					price
				Element:span
					)
				Element:span
					{
				Element:span
					console
				Element:span
					.
				Element:span
					log
				Element:span
					(
				Element:span
					price
				Element:span
					);
				Element:span
					});
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example response
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"data"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"1010.25"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Get the total price to sell one bitcoin or ether.
			Node:
			(type) c
			(layer)1
				Element:p
					Note that exchange rates fluctuates so the price is only correct for seconds at the time. This sell price includes standard Coinbase fee (1%) but excludes any other fees including bank fees. If you need more accurate price estimate for a specific payment method or amount, see
				Element:a
					sell bitcoin endpoint and
					.
				Element:code
					quote: true
					option
			Node:
			(type) c
			(layer)1
				Element:p
				Element:strong
					This endpoint doesn’t require authentication.
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET https://api.coinbase.com/v2/prices/:currency_pair/sell
			Node:
			(type) c
			(layer)1
				Element:h3
					Scopes
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:em
					No permission required
			Node:
			(type) c
			(layer)1
				Element:h2
					Get spot price
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example request
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl https://api.coinbase.com/v2/prices/BTC-USD/spot
				Element:span
					\
					-H
				Element:span
					'Authorization: Bearer abd90df5f27a7b170cd775abf89d632b350b7c1c9d53e08b340cd9832ce52c2c'
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'coinbase/wallet'
				Element:span
					client
				Element:span
					=
				Element:span
					Coinbase
				Element:span
					::
				Element:span
					Wallet
				Element:span
					::
				Element:span
					Client
				Element:span
					.
				Element:span
					new
				Element:span
					(
				Element:span
					api_key:
				Element:span
					<
				Element:span
					api
				Element:span
					key
				Element:span
					>
				Element:span
					,
				Element:span
					api_secret:
				Element:span
					<
				Element:span
					api
				Element:span
					secret
				Element:span
					>
				Element:span
					)
				Element:span
					price
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					spot_price
				Element:span
					({
				Element:span
					currency_pair:
				Element:span
					'BTC-USD'
				Element:span
					})
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					from
				Element:span
					coinbase.wallet.client
				Element:span
					import
				Element:span
					Client
				Element:span
					client
				Element:span
					=
				Element:span
					Client
				Element:span
					(
				Element:span
					<
				Element:span
					api_key
				Element:span
					>
				Element:span
					,
				Element:span
					<
				Element:span
					api_secret
				Element:span
					>
				Element:span
					)
				Element:span
					price
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					get_spot_price
				Element:span
					(
				Element:span
					currency_pair
				Element:span
					=
				Element:span
					'BTC-USD'
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					var
				Element:span
					Client
				Element:span
					=
				Element:span
					require
				Element:span
					(
				Element:span
					'coinbase'
				Element:span
					).
				Element:span
					Client
				Element:span
					;
				Element:span
					var
				Element:span
					client
				Element:span
					=
				Element:span
					new
				Element:span
					Client
				Element:span
					({
				Element:span
					'apiKey'
				Element:span
					:
				Element:span
					'API KEY'
				Element:span
					,
				Element:span
					'apiSecret'
				Element:span
					:
				Element:span
					'API SECRET'
				Element:span
					});
				Element:span
					client
				Element:span
					.
				Element:span
					getSpotPrice
				Element:span
					({
				Element:span
					'currencyPair'
				Element:span
					:
				Element:span
					'BTC-USD'
				Element:span
					},
				Element:span
					function
				Element:span
					(
				Element:span
					err
				Element:span
					,
				Element:span
					price
				Element:span
					)
				Element:span
					{
				Element:span
					console
				Element:span
					.
				Element:span
					log
				Element:span
					(
				Element:span
					price
				Element:span
					);
				Element:span
					});
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example response
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"data"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					"1015.00"
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Get the current market price for bitcoin. This is usually somewhere in between the buy and sell price.
			Node:
			(type) c
			(layer)1
				Element:p
					Note that exchange rates fluctuates so the price is only correct for seconds at the time.
			Node:
			(type) c
			(layer)1
				Element:p
					You can also get historic prices with
				Element:code
					date
					parameter.
			Node:
			(type) c
			(layer)1
				Element:p
				Element:strong
					This endpoint doesn’t require authentication.
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET https://api.coinbase.com/v2/prices/:currency_pair/spot
			Node:
			(type) c
			(layer)1
				Element:h3
					Scopes
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:em
					No permission required
			Node:
			(type) c
			(layer)1
				Element:h3
					Arguments
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
					Type
				Element:th
					Required
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					date
				Element:td
					string
				Element:td
					Optional
				Element:td
					Specify date for historic spot price in format
				Element:code
					YYYY-MM-DD
					(UTC)
			Node:
			(type) h1
			(layer)1
				Element:h1
					Time
			Node:
			(type) c
			(layer)1
				Element:h2
					Get current time
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example request
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl https://api.coinbase.com/v2/time
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'coinbase/wallet'
				Element:span
					client
				Element:span
					=
				Element:span
					Coinbase
				Element:span
					::
				Element:span
					Wallet
				Element:span
					::
				Element:span
					Client
				Element:span
					.
				Element:span
					new
				Element:span
					(
				Element:span
					api_key:
				Element:span
					<
				Element:span
					api
				Element:span
					key
				Element:span
					>
				Element:span
					,
				Element:span
					api_secret:
				Element:span
					<
				Element:span
					api
				Element:span
					secret
				Element:span
					>
				Element:span
					)
				Element:span
					time
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					time
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					from
				Element:span
					coinbase.wallet.client
				Element:span
					import
				Element:span
					Client
				Element:span
					client
				Element:span
					=
				Element:span
					Client
				Element:span
					(
				Element:span
					<
				Element:span
					api_key
				Element:span
					>
				Element:span
					,
				Element:span
					<
				Element:span
					api_secret
				Element:span
					>
				Element:span
					)
				Element:span
					time
				Element:span
					=
				Element:span
					client
				Element:span
					.
				Element:span
					get_time
				Element:span
					()
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					var
				Element:span
					Client
				Element:span
					=
				Element:span
					require
				Element:span
					(
				Element:span
					'coinbase'
				Element:span
					).
				Element:span
					Client
				Element:span
					;
				Element:span
					var
				Element:span
					client
				Element:span
					=
				Element:span
					new
				Element:span
					Client
				Element:span
					({
				Element:span
					'apiKey'
				Element:span
					:
				Element:span
					'API KEY'
				Element:span
					,
				Element:span
					'apiSecret'
				Element:span
					:
				Element:span
					'API SECRET'
				Element:span
					});
				Element:span
					client
				Element:span
					.
				Element:span
					getTime
				Element:span
					(
				Element:span
					function
				Element:span
					(
				Element:span
					err
				Element:span
					,
				Element:span
					time
				Element:span
					)
				Element:span
					{
				Element:span
					console
				Element:span
					.
				Element:span
					log
				Element:span
					(
				Element:span
					time
				Element:span
					);
				Element:span
					});
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Example response
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"data"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"iso"
				Element:span
					:
				Element:span
				Element:span
					"2015-06-23T18:02:51Z"
				Element:span
					,
				Element:span
				Element:span
					"epoch"
				Element:span
					:
				Element:span
				Element:span
					1435082571
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Get the API server time.
			Node:
			(type) c
			(layer)1
				Element:p
				Element:strong
					This endpoint doesn’t require authentication.
			Node:
			(type) c
			(layer)1
				Element:h3
					HTTP Request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET https://api.coinbase.com/v2/time
			Node:
			(type) c
			(layer)1
				Element:h3
					Scopes
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:em
					No permission required
			Node:
			(type) h1
			(layer)1
				Element:h1
					Exchange API
			Node:
			(type) c
			(layer)1
				Element:p
				Element:a
					GDAX’s
					fully featured trading API offers an efficient way for developers to build bitcoin trading applications and to offer related functionality.
			Node:
			(type) c
			(layer)1
				Element:p
				Element:a
					GDAX API →
			Node:
			(type) c
			(layer)1
				Element:a
					curl
			Node:
			(type) c
			(layer)1
				Element:a
					Ruby
			Node:
			(type) c
			(layer)1
				Element:a
					Python
			Node:
			(type) c
			(layer)1
				Element:a
					Node
