Node:
(type) c
(layer)0
	Element:section
			Node:
			(type) h1
			(layer)1
				Element:h1
					Working with User Profiles API
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Download User Profiles
						Node:
						(type) c
						(layer)2
							Element:p
								CleverTap enables developers to download User profiles using the below documented API. User profiles can be downloaded in two ways using this API
						Node:
						(type) c
						(layer)2
							Element:ol
							Element:li
								Download profiles by Events
							Element:li
								Download profiles by ID
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Download Profiles by Events
									Node:
									(type) c
									(layer)3
										Element:p
											Using the API documented below, you can download all the user profiles that have performed a certain event
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Understanding User Profiles paging request and response
												Node:
												(type) c
												(layer)4
													Element:p
														To support efficient batching and pagination of large record sets, accessing user profile records via the Server API is a multi-request process.
												Node:
												(type) c
												(layer)4
													Element:p
														With your first request you will specify a JSON formatted query for records as part of the POST payload, and a
													Element:code
														batch_size
														URL query parameter, specifying the number of records to be returned per request, along with your CleverTap Account ID and CleverTap Account Passcode in the request headers.
												Node:
												(type) c
												(layer)4
													Element:p
														The response to this initial query request will return a
													Element:code
														cursor
														, which you will then append to the URL query in subsequent requests to fetch the actual record set paginated by the
													Element:code
														batch_size
														you specify.
												Node:
												(type) c
												(layer)4
													Element:p
														Each response of records using that
													Element:code
														cursor
														will return a
													Element:code
														next_cursor
														to fetch the subsequent set of records. Once there are no more records to be fetched, the
													Element:code
														next_cursor
														key will no longer be returned.
												Node:
												(type) c
												(layer)4
													Element:p
														In this regard, it may be helpful to think of the
													Element:code
														cursor
														as something akin to a
													Element:a
														database cursor
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Request Authentication
												Node:
												(type) c
												(layer)4
													Element:p
														Every request to the API should include your CleverTap Account ID and CleverTap Account Passcode in the request header keyed with
													Element:code
														X-CleverTap-Account-Id
														and
													Element:code
														X-CleverTap-Passcode
														, respectively.
													Element:br
													Element:code
														Content-Type
														header must be specified as
													Element:code
														application/json
														.
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Initial Endpoint For Cursor
												Node:
												(type) c
												(layer)4
													Element:p
														A request to download User Profile information is an HTTP URL of the following form:
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														POST https://api.clevertap.com/1/profiles.json?batch_size=5000
												Node:
												(type) c
												(layer)4
													Element:p
													Element:mark
														Maximum
													Element:code
														batch_size
														is 5000, this will return 5000 records per request.
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Payload
												Node:
												(type) c
												(layer)4
													Element:p
														JSON formatted request with the following parameters
												Node:
												(type) c
												(layer)4
													Element:p
													Element:strong
														Required Parameters
												Node:
												(type) c
												(layer)4
													Element:p
													Element:code
														event_name
														– The name of the event which has been performed by the users whose profiles you want to download
												Node:
												(type) c
												(layer)4
													Element:p
													Element:code
														from
														&
													Element:code
														to
														– Date range within which users should have performed the event you have specified in
													Element:code
														event_name
														, input values have to be formatted as integers in
													Element:code
														YYYYMMDD
														format
												Node:
												(type) c
												(layer)4
													Element:p
													Element:strong
														Optional Parameters
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Refer here for documentation on advanced queries, their structure, and examples.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:code
														Notification Sent
														event is supported here. Further information about the event is available in the special events section on the above link.
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Example Payload
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														{ "event_name": "choseNewFavoriteFood", "event_properties": [ { "name": "value", "operator": "contains", "value": "piz" } ], "from": 20150810, "to": 20151025 }
												Node:
												(type) c
												(layer)4
													Element:span
														copy
													Element:b
														Copied
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Response
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														{ "status": "success", "cursor": "ZiZiNwMEBQBkaWZzY2MuO20BBQFlYmN7ZG5hewYBTQVjb2BzZmphfwEABQUra2Jmeg%3D%3D" }
												Node:
												(type) c
												(layer)4
													Element:span
														copy
													Element:b
														Copied
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Endpoint For Subsequent Records
												Node:
												(type) c
												(layer)4
													Element:p
														To download subsequent requests you have to use the endpoint documented below while keeping the CleverTap authentication headers in place:
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														GET https://api.clevertap.com/1/profiles.json?cursor=ZiZiNwMEBQBkaWZzY2MuO20BBQFlYmN7ZG5hewYBTQVjb2BzZmphfwEABQUra2Jmeg%3D%3D
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Response
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														{ "status" : "success" , "previous_cursor" : "ZiZiNwMEBQBkaWZzY2MuO20BBQFlYmN7ZG5hewYBTQVjb2BzZmphfwEABQUra2Jmeg==" , "next_cursor" : "ZiZjNwMEBQBkaWZzY2MuO20BBQFlYmN7ZG5hewYBTQVjb2BzZmphfwEABQUra2Jmeg%3D%3D" , "records" : [ { "identity" : "5555555555" , "profileData": {"favoriteFood": "pizza"}, "platformInfo" : [ { "platform" : "iOS" , "os_version": "10.2", "app_version": "6.1.3", "make": "Apple", "model": "iPhone7,2", "push_token" : "95f98af6ad9a5e714a56c5bf527a78cb1e3eda18d2f23bc8591437d0d8ae71a3" , "objectId" : "-1a063854f83a4c6484285039ecff87cb"} , { "platform" : "Web" , "objectId" : "a8ffcbc9-a747-4ee3-a791-c5e58ad03097"} ] } ] }
												Node:
												(type) c
												(layer)4
													Element:span
														copy
													Element:b
														Copied
												Node:
												(type) c
												(layer)4
													Element:p
														Response records may have keys
													Element:code
														email
														,
													Element:code
														phone
														,
													Element:code
														name
														,
													Element:code
														identity
														, and
													Element:code
														profileData
														(containing the custom profile attributes)
												Node:
												(type) c
												(layer)4
													Element:p
														There may be a
													Element:code
														platformInfo
														array containing all
													Element:code
														platform
														names with the corresponding
													Element:code
														objectId
														(CleverTap ID),
													Element:code
														push_token
														,
													Element:code
														app_version
														,
													Element:code
														os_version
														,
													Element:code
														make
														(device make),
													Element:code
														model
														(device model) if available.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Download Profiles by ID
						Node:
						(type) c
						(layer)2
							Element:p
								Using this API, you can retrieve the profile and all the events performed by an individual using their ID. Supported ID values are –
							Element:code
								email
								, a custom
							Element:code
								identity
								(that you have set for the user via the SDK, JavaScript or Server API), or the unique CleverTap
							Element:code
								objectId
								used by CleverTap to identify the user profile.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Request Authentication
									Node:
									(type) c
									(layer)3
										Element:p
											Every request to the API should include your CleverTap Account ID and CleverTap Account Passcode in the request header keyed with
										Element:code
											X-CleverTap-Account-Id
											and
										Element:code
											X-CleverTap-Passcode
											, respectively.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Endpoint
									Node:
									(type) c
									(layer)3
										Element:p
											A request to download User Profile information is an HTTP URL of the following form:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											GET https://api.clevertap.com/1/profile.json?<profile_key>=<value>
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Payload
									Node:
									(type) c
									(layer)3
										Element:p
											JSON formatted request with the following parameters
									Node:
									(type) c
									(layer)3
										Element:p
											Required parameters
										Element:br
										Element:code
											profile_key
											– A valid ID that can be used to identify a profile. Supported values are:
										Element:code
											email
											,
										Element:code
											identity
											&
										Element:code
											objectId
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Example:
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														GET https://api.clevertap.com/1/profile.json?email=Email ID GET https://api.clevertap.com/1/profile.json?objectId=CleverTap objectID GET https://api.clevertap.com/1/profile.json?identity=Your identity value
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Response:
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														{ "status": "success", "record": { "email": "jack@gmail.com", "profileData": { "Last Score": 308, "High Score": 308, "Replayed": true }, "events": { "App Launched": { "count": 10, "first_seen": 1457271567, "last_seen": 1458041215 }, "Charged": { "count": 6, "first_seen": 1457962417, "last_seen": 1458041276 } }, "platformInfo" : [ { "platform" : "iOS" , "os_version": "10.2", "app_version": "6.1.3", "make": "Apple", "model": "iPhone7,2", "push_token" : "95f98af6ad9a5e714a56c5bf527a78cb1e3eda18d2f23bc8591437d0d8ae71a3" , "objectId" : "-1a063854f83a4c6484285039ecff87cb"} , { "platform" : "Web" , "objectId" : "a8ffcbc9-a747-4ee3-a791-c5e58ad03097"} ] } }
												Node:
												(type) c
												(layer)4
													Element:span
														copy
													Element:b
														Copied
												Node:
												(type) c
												(layer)4
													Element:p
														Response records may have keys
													Element:code
														email
														,
													Element:code
														phone
														,
													Element:code
														name
														,
													Element:code
														identity
														, and
													Element:code
														profileData
														(containing the custom profile attributes)
												Node:
												(type) c
												(layer)4
													Element:p
														There may be a
													Element:code
														platformInfo
														array containing all
													Element:code
														platform
														names with the corresponding
													Element:code
														objectId
														(CleverTap ID),
													Element:code
														push_token
														,
													Element:code
														app_version
														,
													Element:code
														os_version
														,
													Element:code
														make
														(device make),
													Element:code
														model
														(device model) if available.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Uploading User Profiles
						Node:
						(type) c
						(layer)2
							Element:p
								CleverTap enables developers to upload User profiles using the below documented API request
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Endpoint
									Node:
									(type) c
									(layer)3
										Element:p
											A request to upload User Profile information is an HTTP URL of the following form:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											POST https://api.clevertap.com/1/upload
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Authentication
									Node:
									(type) c
									(layer)3
										Element:p
											All requests should include your CleverTap Account ID and CleverTap Account Passcode in the request headers keyed with
										Element:code
											X-CleverTap-Account-Id
											and
										Element:code
											X-CleverTap-Passcode
											, respectively.
										Element:br
										Element:code
											Content-Type
											header must be specified as
										Element:code
											application/json
											.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Payload
									Node:
									(type) c
									(layer)3
										Element:p
											JSON formatted payload with
										Element:code
											Content-Type: application/json
											header and a JSON object keyed with
										Element:code
											d
											whose value is an Array container of JSON data records, and then JSON-encoded, e.g.
										Element:code
											{"d":JSON-encoded data}
											with the following keys:
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Required parameters
												Node:
												(type) c
												(layer)4
													Element:p
													Element:code
														type
														– set to
													Element:code
														profile
														for updating an Users’ profile. Must be String
												Node:
												(type) c
												(layer)4
													Element:p
													Element:code
														profileData
														– JSON profile keys and values to be updated. See example payload below
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														One of the following identity parameters are required
												Node:
												(type) c
												(layer)4
													Element:p
													Element:code
														identity
														– identity to recognize a user uniquely. It can be the user’s email id, a phone number or any other identifier that you are using to tag your users.This is the key that will be looked up to find the user whose profile needs to be updated. If this identity is not found a new user profile will be created. Must be String
												Node:
												(type) c
												(layer)4
													Element:p
													Element:code
														FBID
														– Can be used to identify a unique user by his/her Facebook ID. Must be String
												Node:
												(type) c
												(layer)4
													Element:p
													Element:code
														GPID
														– Can be used to identify a unique user by his Google Plus ID. Must be String
												Node:
												(type) c
												(layer)4
													Element:p
													Element:code
														objectId
														– Can be used to identify a unique user by their CleverTapGlobal Object ID. Must be String
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Optional Parameters
												Node:
												(type) c
												(layer)4
													Element:p
													Element:code
														ts
														– date and time when the profile was originally created, formatted as a UNIX epoch. Defaults to current timestamp if omitted. Must be Integer
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Example payload
												Node:
												(type) c
												(layer)4
													Element:p
														In this sample, profile attribute data for a user identified by customer id
													Element:code
														1189549
														is updated
												Node:
												(type) c
												(layer)4
													Element:p
													Element:mark
														profileData[“Phone”] should be a string formatted as +[country code][phone number]. Must be String
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														{ "d": [ { "identity": "1189549", // customer ID, email or any other ID that uniquely identifies your user "ts": 1468308340, // user creation date, or just leave this field out to set the time has current "type": "profile", "profileData": { "Name": "Jack Montana", "Email": "jack@gmail.com", "Phone": "+14155551234", "Gender": "M", "Employed": "Y", "Education": "Graduate", "Married": "Y", "DOB": "$D_1487576752", // UNIX epoch timestamp with $D_ prefix for recording date properties (string) "Customer Type": "Platinum" } } ] }
												Node:
												(type) c
												(layer)4
													Element:span
														copy
													Element:b
														Copied
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Example response format
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														{ "status":<success, partial, fail>, "processed":<count>, "unprocessed": [{"status":"fail", "code":<error code>, "error":<error msg>, "record":<record>}] }
												Node:
												(type) c
												(layer)4
													Element:span
														copy
													Element:b
														Copied
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Example response
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														{ "status": "success", "processed": 1, "unprocessed": [] }
												Node:
												(type) c
												(layer)4
													Element:span
														copy
													Element:b
														Copied
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Error codes
												Node:
												(type) c
												(layer)4
													Element:p
													Element:code
														514
														Gender invalid
													Element:br
													Element:code
														515
														Email invalid
													Element:br
													Element:code
														516
														Phone number invalid
													Element:br
													Element:code
														517
														Employment status invalid
													Element:br
													Element:code
														518
														Education status invalid
													Element:br
													Element:code
														519
														Marital status invalid
													Element:br
													Element:code
														520
														Age invalid
													Element:br
													Element:code
														523
														Missing identity
													Element:br
													Element:code
														524
														Data neither event nor profile
													Element:br
													Element:code
														525
														Timestamp not an epoch
													Element:br
													Element:code
														526
														objectId invalid
													Element:br
													Element:code
														555
														Miscellaneous server error
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											HTTP Response Codes
									Node:
									(type) c
									(layer)3
										Element:p
										Element:code
											200
											Successful request
										Element:br
										Element:code
											400
											Bad Request. Some mandatory parameter was missing
										Element:br
										Element:code
											429
											Too many requests were made concurrently.
										Element:br
										Element:code
											500
											Server Error
										Element:br
										Element:mark
											Currently, we return 429 when you make more than 3 concurrent requests. Please try again after 10 minutes
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Debugging
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
											Records with errors in processing will be sent back along with the response of the HTTP request
										Element:li
											To test whether data submitted is without errors, you can add the parameter
										Element:code
											dryRun=1
											to the URL
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Data Validation
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
											User Profile attribute keys are limited to 32 characters
										Element:li
											User Profile attribute values are limited to 120 bytes
										Element:li
											Maximum number of custom User Profile attributes is 63
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Limitations and Constraints
									Node:
									(type) c
									(layer)3
										Element:p
											Maximum 100 records may be sent per API call. The calls to the endpoint are synchronous. We recommend you make a single call from your server at a time, wait for the response before making another API request
									Node:
									(type) c
									(layer)3
										Element:p
										Element:mark
											Concurrent requests are limited to 3 per account. Requests that exceed the limit will return a 429 HTTP response code
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Import Device Tokens
						Node:
						(type) c
						(layer)2
							Element:p
								CleverTap enables developers to import an existing device token (GCM, APNS etc.) into a user’s profile.
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
														Request Authentication
												Node:
												(type) c
												(layer)4
													Element:p
														Every request to the API should include your CleverTap Account ID and CleverTap Account Passcode in the request header keyed with
													Element:code
														X-CleverTap-Account-Id
														and
													Element:code
														X-CleverTap-Passcode
														, respectively.
													Element:code
														Content-Type
														header must be specified as
													Element:code
														application/json
														.
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
														Endpoint
												Node:
												(type) c
												(layer)4
													Element:p
														A request to upload device tokens to a User Profile is an HTTP URL of the following form:
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														POST https://api.clevertap.com/1/upload
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
														Payload
												Node:
												(type) c
												(layer)4
													Element:p
														JSON-formatted request with the following parameters
												Node:
												(type) c
												(layer)4
													Element:p
													Element:strong
														Required parameters
												Node:
												(type) c
												(layer)4
													Element:p
													Element:code
														type
														– set to ‘token’ for updating Tokens. Must be of type
													Element:code
														String
														.
													Element:br
													Element:code
														tokenData
														– JSON keys and values to be updated. See example payload below.
													Element:br
													Element:code
														objectId
														– used to identify a unique user by their CleverTap Global Object ID. Must be of type String.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:mark
													Element:strong
														Note
														: for updating Google Chrome tokens, the below mentioned additional JSON keys are also required
													Element:br
													Element:code
														keys
														– JSON object, retrieved from google endpoint response at the time of registering WebPush subscription. See example below –
												Node:
												(type) c
												(layer)4
									Node:
									(type) c
									(layer)3
										Element:h3
											Payload Structure for iOS/Android/Windows (mobile devices)
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											{ "d": [ { "type": "token", "tokenData": { "id": <Device Token>, "type": apns/gcm/fcm/wns/mpns }, "objectId": <ClevertapId/GUID> } ] }
									Node:
									(type) c
									(layer)3
										Element:span
											copy
										Element:b
											Copied
												Node:
												(type) c
												(layer)4
									Node:
									(type) c
									(layer)3
										Element:h3
											Payload Structure for WebPush (Chrome)
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											{ "type": "token", "tokenData": { "id": <DeviceToken>, "type": "chrome", "keys": { "p256dh": <>, "auth": <> } }, "objectId": <ClevertapId/GUID> }
									Node:
									(type) c
									(layer)3
										Element:span
											copy
										Element:b
											Copied
												Node:
												(type) c
												(layer)4
									Node:
									(type) c
									(layer)3
										Element:h3
											Example payload
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											{ "d": [ { "type": "token", "tokenData": { "id": "frfsgvrwe:APfdsafsgdfsgghfgfgjkhfsfgdhjhbvcvnetry767456fxsasdf", "type": "chrome", "keys": { "p256dh": "BLc4xRzKlKORKWlbdgFaBrrPK3ydWAHo4M0gs0i1oEKgPpWC5cW8OCzVrOQRv-1npXRWk8udnW3oYhIO4475rds=", "auth": "5I2Bu2oKdyy9CwL8QVF0NQ==" } }, "objectId": "QBOpVJZmKilRAzfaiVS86Tovxm75lHxg" }, { "type": "token", "tokenData": { "id": "dYfuuBmHLGI:APA91bEfAq1b6NAmz0uhUbVxwSLqgKF25zDb7vhgajzS-bOAEUKekH_jbzO5oU1Qip-ZLvDpwKccxAxVNjC3rUUJnFTKDUiBcF9AtuG03_PRfjoUxLKHMR9qykK22SiubrLirNzQtNnO", "type": "fcm" }, "objectId": "__gc4grg4053N1eYkW6OBH71jhFev7b1iP" }, { "type": "token", "tokenData": { "id": "frfsgvrwe:APfdsafsgdfsgghfgfgjkhfsfgdhjhbvcvnetry767456fxsasdf", "type": "gcm" }, "objectId": "__QlXHaDHBZxZPLEMpPo6VvwdZ7FnbGvWA" }, { "type": "token", "tokenData": { "id": "frfsgvrwe:APfdsafsgdfsgghfgfgjkhfsfgdhjhbvcvnetry767456fxsasdf", "type": "apns" }, "objectId": "-HwB9gZWb3RcKhXCQ222FhAhkjeYQs0Hj" }, { "type": "token", "tokenData": { "id": "frfsgvrwe:APfdsafsgdfsgghfgfgjkhfsfgdhjhbvcvnetry767456fxsasdf", "type": "wns" }, "objectId": "~9XrS4Dy6GsnDbdX98Ijs63kEtJDQbhJA" }, { "type": "token", "tokenData": { "id": "frfsgvrwe:APfdsafsgdfsgghfgfgjkhfsfgdhjhbvcvnetry767456fxsasdf", "type": "mpns" }, "objectId": "~y9MqjkDGRfbzwwH8fZI6LIXgTKaEPxHr" } ] }
									Node:
									(type) c
									(layer)3
										Element:span
											copy
										Element:b
											Copied
												Node:
												(type) c
												(layer)4
									Node:
									(type) c
									(layer)3
										Element:h3
											Error Codes
									Node:
									(type) c
									(layer)3
										Element:p
										Element:code
											530
											: Invalid ‘objectId’
										Element:br
										Element:code
											531
											: Invalid token data
										Element:br
										Element:code
											532
											: Token ‘id’ is not present
										Element:br
										Element:code
											533
											: Token ‘type’ is not present
										Element:br
										Element:code
											534
											: Token ‘type’ is not valid for ‘objectId’
										Element:br
										Element:code
											535
											: Invalid token data
												Node:
												(type) c
												(layer)4
									Node:
									(type) c
									(layer)3
										Element:h3
											Limitations and Constraints
									Node:
									(type) c
									(layer)3
										Element:p
											Device token can be updated against CleverTapId (objectId/guid) and not against an email ID or user’s identity in a profile. If given profile already has a token, it won’t be updated and an error will be reported into Live Error Stream.
									Node:
									(type) c
									(layer)3
										Element:p
											Maximum 100 records may be sent per API call. The calls to the endpoint are synchronous. We recommend you make a single call from your server at a time, wait for the response before making another API request.
									Node:
									(type) c
									(layer)3
										Element:p
										Element:mark
											Concurrent requests are limited to 3 per account. Requests that exceed the limit will return a 429 HTTP response code
