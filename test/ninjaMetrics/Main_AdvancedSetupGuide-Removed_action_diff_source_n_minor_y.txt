Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
				Element:a
					Developer Hub
			Node:
			(type) c
			(layer)1
				Element:a
					Main
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
							Element:a
								Advanced Setup Guide-Removed
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Main.AdvancedSetupGuide-Removed History
						Node:
						(type) c
						(layer)2
							Element:p
							Element:a
								Hide minor edits
								-
							Element:a
								Show changes to markup
						Node:
						(type) c
						(layer)2
							Element:a
								May 27, 2015, at 04:07 PM
								by
						Node:
						(type) c
						(layer)2
							Element:span
								76.175.66.204
								- Deleted lines 0-3422:
						Node:
						(type) c
						(layer)2
							Element:p
							Element:a
								Get the complete experience. Follow this
							Element:em
								Advanced Setup Guide
								to get the most out of Katana Analytics. This guide includes the information you need to log all available events, including events custom to your title. You'll find the events are organized based on 10 primary event categories:
						Node:
						(type) c
						(layer)2
							Element:p
							Element:a
								System Events
								System events include those events that are system related, such as when a player logs in or out of the application, or when a shard is initialized.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:a
								Account Management Events
								Account Management events include those events that are related to the creation, deletion, and management of a user or character account.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:a
								Game Events
								Game events include those events that are related to in-game characters, actions, and combat.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:a
								Item Events
								Item events include those events that are related to the creation, use, and transaction of in- game items.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:a
								Group Events
								Group events include those events involving player interaction with a group or guild such as entry, exit, or a player's position within a guild (e.g. Guild Leader).
						Node:
						(type) c
						(layer)2
							Element:p
							Element:a
								Environment Events
								Environment events include those events that are related to in-game levels and areas that players may encounter.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:a
								Economic Events
								Economic events include those events that are related to in-game stores and purchases such as a player's interaction with a store and items within it.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:a
								Transaction Events
								Transaction events include those events that are related to economic events outside of the game such as when an item is purchased outside of the developer game store, or when a subscription changes.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:a
								Social Events
								Social events include social interactions between players in and outside of the game such as messages, off-game-interactions, friend requests, etc.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:a
								Custom Events
								Custom events include those events that relate to custom actions, and CRM actions. As a Ninja Metrics customer you have the freedom to define custom events in any way that you want given the fields described under the
							Element:em
								Custom Slot Action
								and
							Element:em
								Custom Action
								sections.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
							Element:strong
								System Events
							Element:a
						Node:
						(type) c
						(layer)2
							Element:p
								System events include those events that are system related, such as when a player logs in or out of the application, or when a shard is initialized. Details on how to execute calls to log system events can be found below for each corresponding event.
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Login (Event ID#1)
													Element:a
												Node:
												(type) c
												(layer)4
													Element:p
														This event records the time at which the user logged into the system (website, game, software, etc.). To log a login event, you need to pass the user's account ID, character ID, platform, and timestamp. Optionally, you may pass the shard ID, and login area name and ID.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Impacted UI Features
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														KPI
													Element:li
														System Metrics (Items, Location/Maps, NPC, Social)
													Element:li
														User Metrics (Churn, Farming, Integrity)
													Element:li
														Basic Package (Summary)
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tr
													Element:th
														Type
													Element:th
														Parameter
													Element:th
														Default Value
													Element:tr
													Element:td
														Date
													Element:td
														LOGIN TIMESTAMP
													Element:td
														(Current Time)
													Element:tr
													Element:td
														String
													Element:td
														ACCOUNT ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														CHARACTER ID
													Element:td
														ACCOUNT_ID
													Element:tr
													Element:td
														Long
													Element:td
														SHARD ID
													Element:td
														0
													Element:tr
													Element:td
														String
													Element:td
														PLATFORM
													Element:td
														Other
													Element:tr
													Element:td
														Long
													Element:td
														LOGIN AREA ID
													Element:td
														Null
													Element:tr
													Element:td
														String
													Element:td
														LOGIN AREA NAME
													Element:td
														Null
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														Java
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a user logs in
													Element:br
														public void
													Element:em
														aKApi.
														logLogin(LOGIN_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, PLATFORM, LOGIN_AREA_ID, LOGIN_AREA_NAME);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JavaScript
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a user logs in
													Element:br
													Element:em
														aKApi.
														logLogin(LOGIN_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, PLATFORM, LOGIN_AREA_ID, LOGIN_AREA_NAME);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														PHP
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a user logs in
													Element:br
													Element:em
														$aKApi->
														logLogin(LOGIN_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, PLATFORM, LOGIN_AREA_ID, LOGIN_AREA_NAME);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JSON
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a user logs in
													Element:br
												Node:
												(type) c
												(layer)4
													Element:pre
														{ "timestamp":"2013-11-14T13:43:06.308Z", "data":{ "type":1, "account_id":"cool_guy@example.com", "character_id":"Wizard", "shard_id":42, "platform":"Facebook Mobile", "area_id”:0, "area_name”:0 } }
												Node:
												(type) c
												(layer)4
													Element:p
														NOTE: All parameters are required in JSON, except “shard_id”, “area_id” and “area_name” which are optional.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Logout (Event ID#2)
													Element:a
												Node:
												(type) c
												(layer)4
													Element:p
														This event records the time at which the user logged out of the system (website, game, software, etc.). To log a logout event, you need to pass the user's account ID, character ID, and timestamp.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Impacted UI Features
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														KPI
													Element:li
														User Metrics (Churn, Farming, Integrity)
													Element:li
														Basic Package (Summary)
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tr
													Element:th
														Type
													Element:th
														Parameter
													Element:th
														Default Value
													Element:tr
													Element:td
														Date
													Element:td
														LOGOUT TIMESTAMP
													Element:td
														(Current Time)
													Element:tr
													Element:td
														String
													Element:td
														ACCOUNT ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														CHARACTER ID
													Element:td
														ACCOUNT_ID
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														Java
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a user logs out
													Element:br
														public void
													Element:em
														aKApi.
														logLogout(LOGOUT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JavaScript
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a user logs out
													Element:br
													Element:em
														aKApi.
														logLogout(LOGOUT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														PHP
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a user logs out
													Element:br
													Element:em
														$aKApi
														->logLogout(LOGOUT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JSON
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a user logs out
													Element:br
												Node:
												(type) c
												(layer)4
													Element:pre
														{ "timestamp":"2013-11-14T13:51:53.035Z", "data":{ "type":2, "account_id":"cool_guy@example.com", "character_id":"Wizard" } }
												Node:
												(type) c
												(layer)4
													Element:p
														NOTE: All parameters are required in JSON.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Initialize Shard (Event ID#13)
													Element:a
												Node:
												(type) c
												(layer)4
													Element:p
														Many games and environments have multiple instances running in parallel. In our schema, these parallel instances are referred to as shards. Shards are the same as running multiple instances of the game, or other environments, on different servers. To initialize a shard, you need to pass the shard ID and description, as well as a timestamp.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:strong
														Note
														: You must log the shard creation information before any log or load command references the shard ID.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tr
													Element:th
														Type
													Element:th
														Parameter
													Element:th
														Default Value
													Element:tr
													Element:td
														Date
													Element:td
														TIMESTAMP
													Element:td
														(Current Time)
													Element:tr
													Element:td
														Long
													Element:td
														SHARD ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														SHARD DESCRIPTION
													Element:td
														NA
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														Java
												Node:
												(type) c
												(layer)4
													Element:p
														//Log shard creation information
													Element:br
														public void aKApi.loadInitShard(TIMESTAMP, SHARD_ID, SHARD_DESCRIPTION);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JavaScript
												Node:
												(type) c
												(layer)4
													Element:p
														//Log shard creation information
													Element:br
													Element:em
														aKApi.
														loadInitShard(TIMESTAMP, SHARD_ID, SHARD_DESCRIPTION);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														PHP
												Node:
												(type) c
												(layer)4
													Element:p
														//Log shard creation information
													Element:br
													Element:em
														$aKApi->
														loadInitShard(TIMESTAMP, SHARD_ID, SHARD_DESCRIPTION);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JSON
												Node:
												(type) c
												(layer)4
													Element:p
														//Log shard creation information
													Element:br
												Node:
												(type) c
												(layer)4
													Element:pre
														{ "timestamp":"2013-11-14T16:15:08.347Z", "data":{ "type":13, "shard_id":42, "shard_desc":"the shard with answers to it all" } }
												Node:
												(type) c
												(layer)4
													Element:p
														NOTE: All parameters are required in JSON.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														!!!!
													Element:strong
														Ad Click (Event ID#57)
														- To Be Completed.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														This event records information when a user clicks on an Ad, or clicks on an Ad and takes some subsequent action. To log that a user has clicked an Ad you need to pass the user's account ID and the time the Ad was clicked. Optionally, you can pass the Ad tag name and Ad action timestamp.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
													Element:big
													Element:strong
														Parameters
													Element:span
														|| border=1 rules=rows frame=hsides
													Element:span
														||! Type ||! Parameter ||! Default Value ||
													Element:span
														|| Date || AD CLICK TIMESTAMP || (Current Time) ||
													Element:span
														|| String || ACCOUNT ID ||
													Element:em
														No Default Value
														||
													Element:span
														|| String || AD TAG NAME || In App
													Element:a
														(See Appendix for more types)
														||
													Element:span
														|| Date || AD ACTION TIMESTAMP || Null ||
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														*Java
													Element:span
														//Log when a user clicks an Ad
													Element:br
													Element:span
														public void
													Element:em
														aKApi
														.logAccountAd(AD_CLICK_TIMESTAMP, ACCOUNT_ID, AD_TAG_NAME, AD_ACTION_TIMESTAMP);
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														*JavaScript
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														//Log when a user clicks an Ad
													Element:br
													Element:span
													Element:em
														aKApi
														.logAccountAd(AD_CLICK_TIMESTAMP, ACCOUNT_ID, AD_TAG_NAME, AD_ACTION_TIMESTAMP);
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														*PHP
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														//Log when a user clicks an Ad
													Element:br
													Element:span
													Element:em
														$aKApi
														->logAccountAd(AD_CLICK_TIMESTAMP, ACCOUNT_ID, AD_TAG_NAME, AD_ACTION_TIMESTAMP);
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														*JSON
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														//Log when a user clicks an Ad
													Element:br
													Element:span
														{
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:span
														“ad_click_timestamp":"2013-08-12T05:00:00.000Z",
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														"data":{
													Element:span
														"type":57,
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:span
														"account_id":"cool_guy@example.com",
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														"ad_tag_name":"Ad-Words",
													Element:span
														"ad_action_timestamp":"2013-08-12T05:00:00.000Z”
													Element:span
														}
													Element:span
														}
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														NOTE: “account_id” and ‘ad_click_timestamp” are required, while all other parameters are optional.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
													Element:span
														----
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
							Element:strong
								Account Management Events
							Element:a
						Node:
						(type) c
						(layer)2
							Element:p
								Account Management events include those events that are related to the creation, deletion, and management of a user or character account. Details on how to execute calls to log account events can be found below for each corresponding event.
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Create Account (Event ID#9)
													Element:a
												Node:
												(type) c
												(layer)4
													Element:p
														This event records information regarding the creation of a new account, including the user's demographics. To log the creation of an account you need to pass the account ID and type; the user's language, country, gender, and date of birth; as well as the platform and the timestamp. Optionally, you may pass their currency balance and old account ID.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:strong
														Note
														: You must log the account creation information before any log or load command references the account ID.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Impacted UI Features
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														KPI
													Element:li
														User Metrics (Churn, Farming, Integrity)
													Element:li
														Basic Package (Summary)
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tr
													Element:th
														Type
													Element:th
														Parameter
													Element:th
														Default Value
													Element:tr
													Element:td
														Date
													Element:td
														CREATION TIMESTAMP
													Element:td
														(Current Time)
													Element:tr
													Element:td
														String
													Element:td
														ACCOUNT ID
													Element:td
														"No Default Value"
													Element:tr
													Element:td
														String
													Element:td
														ACCOUNT TYPE
													Element:td
														Free
													Element:tr
													Element:td
														String
													Element:td
														LANGUAGE
													Element:td
														N0
													Element:tr
													Element:td
														String
													Element:td
														COUNTRY
													Element:td
														N0
													Element:tr
													Element:td
														String
													Element:td
														GENDER
													Element:td
														N
													Element:tr
													Element:td
														Date
													Element:td
														DOB
													Element:td
														“1900-01-01T00:00:00.000Z”
													Element:tr
													Element:td
														Float
													Element:td
														CURRENCY BALANCE
													Element:td
														0
													Element:tr
													Element:td
														String
													Element:td
														PLATFORM
													Element:td
														Other
													Element:tr
													Element:td
														String
													Element:td
														OLD ACCOUNT ID
													Element:td
														Null
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														Java
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a user creates an account
													Element:br
														public void aKApi.loadAccountCreate(CREATION_TIMESTAMP, ACCOUNT_ID, ACCOUNT_TYPE, LANGUAGE, COUNTRY, GENDER, DOB, PLATFORM, CURRENCY_BALANCE, PLATFORM, OLD_ACCOUNT_ID);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JavaScrip
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a user creates an account
													Element:br
													Element:em
														aKApi.
														loadAccountCreate(CREATION_TIMESTAMP, ACCOUNT_ID, ACCOUNT_TYPE, LANGUAGE, COUNTRY, GENDER, DOB, PLATFORM, CURRENCY_BALANCE, PLATFORM, OLD_ACCOUNT_ID);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														PHP
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a user creates an account
													Element:br
													Element:em
														$aKApi->
														loadAccountCreate(CREATION_TIMESTAMP, ACCOUNT_ID, ACCOUNT_TYPE, LANGUAGE, COUNTRY, GENDER, DOB, PLATFORM, CURRENCY_BALANCE, PLATFORM, OLD_ACCOUNT_ID);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JSON
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a user creates an account
													Element:br
												Node:
												(type) c
												(layer)4
													Element:pre
														{ "timestamp":"2013-11-14T15:18:30.726Z", "data":{ "type":9, "account_id":"cool_guy@example.com", "account_sub_type":"Free", "account_lang":"NA", "account_country":"de", "account_gender":"N", "account_dob":"1900-01-01T00:00:00.000Z", "account_currency_balance":55, "platform":"Social", "old_account_id":"small_cat@example.com" } }
												Node:
												(type) c
												(layer)4
													Element:p
														NOTE: All parameters are required in JSON, except “account_currency_balance_” and “old_account_id” which are optional.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Delete Account (Event ID#10)
													Element:a
												Node:
												(type) c
												(layer)4
													Element:p
														This event records information regarding account deletion, including reasoning for deletion, in terms of churn or account compromise. To log the deletion of an account you need to pass the account ID, churn type, and timestamp.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Impacted UI Features
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														KPI
													Element:li
														User Metrics (Churn, Farming, Integrity)
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tr
													Element:th
														Type
													Element:th
														Parameter
													Element:th
														Default Value
													Element:tr
													Element:td
														Date
													Element:td
														TIMESTAMP
													Element:td
														(Current Time)
													Element:tr
													Element:td
														String
													Element:td
														ACCOUNT ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														CHURN TYPE
													Element:td
														Stopped
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														Java
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a user deletes an account
													Element:br
														public void
													Element:em
														aKApi.
														loadAccountDeleted(TIMESTAMP, ACCOUNT_ID, CHURN_TYPE);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JavaScript
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a user deletes an account
													Element:br
													Element:em
														aKApi.
														loadAccountDelete(TIMESTAMP, ACCOUNT_ID, CHURN_TYPE);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														PHP
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a user deletes an account
													Element:br
													Element:em
														$aKApi->
														loadAccount''Delete(TIMESTAMP, ACCOUNT_ID, CHURN_TYPE);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JSON
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a user deletes an account
													Element:br
												Node:
												(type) c
												(layer)4
													Element:pre
														{ "timestamp":"1989-08-15T05:00:00.000Z", "data":{ "type":10, "account_id":"cool_guy@example.com", "account_status":"Failed" } }
												Node:
												(type) c
												(layer)4
													Element:p
														NOTE: All parameters are required in JSON.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Create Character (Event ID#11)
												Node:
												(type) c
												(layer)4
													Element:p
														Relates to the creation of characters or aliases within the game, where the character's attributes may vary from the attributes of the person in the real world. Once a character is created their attributes are usually fixed. To log a character creation, you need to pass the character and account IDs; the character class, subclass, gender, race, and name; along with the timestamp. Optionally, you may pass the shard ID.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:strong
														Note
														: You must log the character creation information before any log or load command references the character ID.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Impacted UI Features
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														KPI
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tr
													Element:th
														Type
													Element:th
														Parameter
													Element:th
														Default Value
													Element:tr
													Element:td
														Date
													Element:td
														TIMESTAMP
													Element:td
														(Current Time)
													Element:tr
													Element:td
														String
													Element:td
														ACCOUNT ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														CHARACTER ID
													Element:td
														ACCOUNT ID
													Element:tr
													Element:td
														String
													Element:td
														CHARACTER CLASS
													Element:td
														NA
													Element:tr
													Element:td
														String
													Element:td
														CHARACTER SUBCLASS
													Element:td
														NA
													Element:tr
													Element:td
														String
													Element:td
														CHARACTER GENDER
													Element:td
													Element:em
														Must be 'M' or 'F' or 'N
														'
													Element:tr
													Element:td
														String
													Element:td
														CHARACTER RACE
													Element:td
														NA
													Element:tr
													Element:td
														String
													Element:td
														CHARACTER NAME
													Element:td
														NA
													Element:tr
													Element:td
														Long
													Element:td
														SHARD ID
													Element:td
														0
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														Java
												Node:
												(type) c
												(layer)4
													Element:p
														//Log the creation of a character
													Element:br
														public void
													Element:em
														aKApi
														.loadCharacterCreate(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_CLASS, CHARACTER_SUBCLASS, CHARACTER_GENDER, CHARACTER_RACE, CHARACTER_NAME, SHARD_ID);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JavaScript
												Node:
												(type) c
												(layer)4
													Element:p
														//Log the creation of a character
													Element:br
													Element:em
														aKApi
														.loadCharacterCreate(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_CLASS, CHARACTER_SUBCLASS, CHARACTER_GENDER, CHARACTER_RACE, CHARACTER_NAME, SHARD_ID);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														PHP
												Node:
												(type) c
												(layer)4
													Element:p
														//Log the creation of a character
													Element:br
													Element:em
														$aKApi
														->loadCharacterCreate(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_CLASS, CHARACTER_SUBCLASS, CHARACTER_GENDER, CHARACTER_RACE, CHARACTER_NAME, SHARD_ID);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JSON
												Node:
												(type) c
												(layer)4
													Element:p
														//Log the creation of a character
													Element:br
												Node:
												(type) c
												(layer)4
													Element:pre
														{ "timestamp":"2013-11-14T15:47:36.202Z", "data":{ "type":11, "account_id":"cool_guy@example.com", "character_id":"wizard", "character_class":"magic", "character_sub_class":"healer", "character_gender":"N", "character_race":"fish", "character_name":"small_fish", "shard_id":0 } }
												Node:
												(type) c
												(layer)4
													Element:p
														NOTE: All parameters are required in JSON, except “shard_id” which is optional.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Delete Character (Event ID#12)
												Node:
												(type) c
												(layer)4
													Element:p
														This event records information regarding the deletion of a character. To log a character deletion, you need to pass the character ID, account ID, and timestamp.
												Node:
												(type) c
												(layer)4
													Element:p
														For related information, see
													Element:a
														.
													Element:em
														Create Character
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Impacted UI Features
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														KPI
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tr
													Element:th
														Type
													Element:th
														Parameter
													Element:th
														Default Value
													Element:tr
													Element:td
														Date
													Element:td
														TIMESTAMP
													Element:td
														(Current Time)
													Element:tr
													Element:td
														String
													Element:td
														ACCOUNT ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														CHARACTER ID
													Element:td
													Element:em
														No Default Value
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														Java
												Node:
												(type) c
												(layer)4
													Element:p
														//Log the deletion of a character
													Element:br
														public void
													Element:em
														aKApi
														.loadCharacterDelete(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JavaScript
												Node:
												(type) c
												(layer)4
													Element:p
														//Log the deletion of a character
													Element:br
													Element:em
														aKApi
														.loadCharacterDelete(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														PHP
												Node:
												(type) c
												(layer)4
													Element:p
														//Log the deletion of a character
													Element:br
													Element:em
														$aKApi
														->loadCharacterDelete(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JSON
												Node:
												(type) c
												(layer)4
													Element:p
														//Log the deletion of a character
													Element:br
												Node:
												(type) c
												(layer)4
													Element:pre
														{ "timestamp":"2013-11-14T16:03:13.367Z", "data":{ "type":12, "account_id":"cool_guy@example.com”, "character_id":"Wizard” } }
												Node:
												(type) c
												(layer)4
													Element:p
														NOTE: All parameters are required in JSON.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														!!!!
													Element:strong
														Integrity (Event ID#48)
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														Integrity indicates whether an account has been compromised. This event records information regarding when the account was compromised and what type of integrity violation occurred. To log the integrity of an account you need to pass the account ID, integrity type, and timestamp. Optionally, you may pass the shard ID.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
													Element:big
													Element:strong
														Impacted UI Features
													Element:span
														*User Metrics (Integrity)
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
													Element:big
													Element:strong
														Parameters
													Element:span
														|| border=1 rules=rows frame=hsides
													Element:span
														||! Type ||! Parameter ||! Default Value ||
													Element:span
														|| Date || TIMESTAMP || (Current Time) ||
													Element:span
														|| String || ACCOUNT ID ||
													Element:em
														No Default Value
														||
													Element:span
														|| Long || SHARD ID || 0 ||
													Element:span
														|| String || INTEGRITY TYPE || Other
													Element:a
														(See Appendix A for more types)
														||
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														*Java
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														//Log account integrity
													Element:br
													Element:span
														public void
													Element:em
														aKApi
														.logIntegrity(TIMESTAMP, ACCOUNT_ID, SHARD_ID, INTEGRITY_TYPE);
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														*JavaScript
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														//Log account integrity
													Element:br
													Element:span
													Element:em
														aKApi
														.logIntegrity(TIMESTAMP, ACCOUNT_ID, SHARD_ID, INTEGRITY_TYPE);
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														*PHP
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														//Log account integrity
													Element:br
													Element:span
													Element:em
														$aKApi
														->logIntegrity(TIMESTAMP, ACCOUNT_ID, SHARD_ID, INTEGRITY_TYPE);
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														*JSON
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														//Log account integrity
													Element:br
													Element:span
														{
													Element:span
														"timestamp":"2013-11-15T18:00:57.840Z",
													Element:span
														"data":{
													Element:span
														"type":48,
													Element:span
														"account_id":"cool_guy@example.com",
													Element:span
														"shard_id":42.42,
													Element:span
														"integrity_type":"Cheating"
													Element:span
														}
													Element:span
														}
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														NOTE: All parameters are required in JSON, except “shard_id” which is optional.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
													Element:span
														----
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
							Element:strong
								Game Events
							Element:a
						Node:
						(type) c
						(layer)2
							Element:p
								Game events include those events that are related to in-game characters, actions, and combat. Details on how to execute calls to log game events can be found below for each corresponding event.
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Begin Combat (Event ID#21)
												Node:
												(type) c
												(layer)4
													Element:p
														This event records information regarding the beginning of combat between a player and a non-player character (NPC). To log when a player begins combat, you need to pass the account and character IDs; the NPC ID; the area ID, name and position; as well as the timestamp. Optionaly, you may pass the shard ID.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tr
													Element:th
														Type
													Element:th
														Parameter
													Element:th
														Default Value
													Element:tr
													Element:td
														Date
													Element:td
														BEGIN COMBAT TIMESTAMP
													Element:td
														(Current Time)
													Element:tr
													Element:td
														String
													Element:td
														ACCOUNT ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														CHARACTER ID
													Element:td
														ACCOUNT ID
													Element:tr
													Element:td
														Long
													Element:td
														SHARD ID
													Element:td
														0
													Element:tr
													Element:td
														Long
													Element:td
														NPC ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														Long
													Element:td
														BEGIN AREA ID
													Element:td
														0
													Element:tr
													Element:td
														Float
													Element:td
														BEGIN POSITION X
													Element:td
														0
													Element:tr
													Element:td
														Float
													Element:td
														BEGIN POSITION Y
													Element:td
														0
													Element:tr
													Element:td
														Float
													Element:td
														BEGIN POSITION Z
													Element:td
														0
													Element:tr
													Element:td
														String
													Element:td
														BEGIN AREA NAME
													Element:td
														NA
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														Java
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a combat event begins
													Element:br
														public void
													Element:em
														aKApi
														.combatStart(BEGIN_COMBAT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, NPC_ID, BEGIN_AREA_ID, BEGIN_POSITION_X, BEGIN_POSITION_Y, BEGIN_POSITION_Z, BEGIN_AREA_NAME);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JavaScript
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a combat event begins
													Element:br
													Element:em
														aKApi
														.combatStart(BEGIN_COMBAT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, NPC_ID, BEGIN_AREA_ID, BEGIN_POSITION_X, BEGIN_POSITION_Y, BEGIN_POSITION_Z, BEGIN_AREA_NAME);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														PHP
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a combat event begins
													Element:br
													Element:em
														$aKApi
														->combatStart(BEGIN_COMBAT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, NPC_ID, BEGIN_AREA_ID, BEGIN_POSITION_X, BEGIN_POSITION_Y, BEGIN_POSITION_Z, BEGIN_AREA_NAME);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JSON
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a combat event begins
													Element:br
												Node:
												(type) c
												(layer)4
													Element:pre
														{ "timestamp":"2013-11-14T18:55:58.241Z", "data":{ "type":21, "account_id":"cool_guy@example.com", "character_id":"Wizard", "shard_id":42, "npc_id":23456, "area_id":552, "position_x":678, "position_y":231, "position_z":517, "area_name":"Area_Name" } }
												Node:
												(type) c
												(layer)4
													Element:p
														NOTE: All parameters are required in JSON, except “shard_id” which is optional.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														End Combat (Event ID#22)
												Node:
												(type) c
												(layer)4
													Element:p
														This event records information regarding the end of combat between a player and a non- player character (NPC). To log when a player ends combat, you need to pass the account and character IDs; the NPC ID; the area ID, name, and position; as well as the timestamp. Optionally, you may pass the shard ID.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tr
													Element:th
														Type
													Element:th
														Parameter
													Element:th
														Default Value
													Element:tr
													Element:td
														Date
													Element:td
														END COMBAT TIMESTAMP
													Element:td
														(Current Time)
													Element:tr
													Element:td
														String
													Element:td
														ACCOUNT ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														CHARACTER ID
													Element:td
														ACCOUNT ID
													Element:tr
													Element:td
														Long
													Element:td
														SHARD ID
													Element:td
														0
													Element:tr
													Element:td
														Long
													Element:td
														NPC ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														Long
													Element:td
														END AREA ID
													Element:td
														0
													Element:tr
													Element:td
														Float
													Element:td
														END POSITION X
													Element:td
														0
													Element:tr
													Element:td
														Float
													Element:td
														END POSITION Y
													Element:td
														0
													Element:tr
													Element:td
														Float
													Element:td
														END POSITION Z
													Element:td
														0
													Element:tr
													Element:td
														String
													Element:td
														END AREA NAME
													Element:td
														NA
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														Java
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a combat event ends
													Element:br
														public void
													Element:em
														aKApi
														.combatEnd(END_COMBAT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, NPC_ID, END_AREA_ID, END_POSITION_X, END_POSITION_Y, END_POSITION_Z, END_AREA_NAME);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JavaScript
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a combat event ends
													Element:br
													Element:em
														aKApi
														.combatEnd(END_COMBAT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, NPC_ID, END_AREA_ID, END_POSITION_X, END_POSITION_Y, END_POSITION_Z, END_AREA_NAME);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														PHP
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a combat event ends
													Element:br
													Element:em
														$aKApi
														->combatEnd(END_COMBAT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, NPC_ID, END_AREA_ID, END_POSITION_X, END_POSITION_Y, END_POSITION_Z, END_AREA_NAME);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JSON
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a combat event ends
													Element:br
												Node:
												(type) c
												(layer)4
													Element:pre
														{ "timestamp":"2013-11-15T12:41:31.575Z", "data":{ "type":22, "account_id":"cool_guy@example.com", "character_id":"wizard", "shard_id":42, "npc_id":23456, "area_id":552, "position_x":678, "position_y":231, "position_z":517, "area_name":"Area_Name" } }
												Node:
												(type) c
												(layer)4
													Element:p
														NOTE: All parameters are required in JSON, except “shard_id” which is optional.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Kill (NPC) (Event ID#23)
												Node:
												(type) c
												(layer)4
													Element:p
														This event records when a non-player character (NPC) is killed by a player in the game. To log an NPC kill, you need to pass the account and character ID, the character level, the killed NPC ID, and the timestamp. Optionally, you may pass the shard ID.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tr
													Element:th
														Type
													Element:th
														Parameter
													Element:th
														Default Value
													Element:tr
													Element:td
														Date
													Element:td
														KILL NPC TIMESTAMP
													Element:td
														(Current Time)
													Element:tr
													Element:td
														String
													Element:td
														ACCOUNT ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														CHARACTER ID
													Element:td
														ACCOUNT ID
													Element:tr
													Element:td
														Long
													Element:td
														SHARD ID
													Element:td
														0
													Element:tr
													Element:td
														Long
													Element:td
														CHARACTER LEVEL
													Element:td
														0
													Element:tr
													Element:td
														Long
													Element:td
														KILLED NPC ID
													Element:td
													Element:em
														No Default Value
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														Java
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when an NPC is killed
													Element:br
														public void
													Element:em
														aKApi
														.logKillNpc(KILL_NPC_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, CHARACTER_LEVEL, KILLED_NPC_ID);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JavaScript
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when an NPC is killed
													Element:br
													Element:em
														aKApi
														.logKillNpc(KILL_NPC_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, CHARACTER_LEVEL, KILLED_NPC_ID);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														PHP
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when an NPC is killed
													Element:br
													Element:em
														$aKApi
														->logKillNpc(KILL_NPC_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, CHARACTER_LEVEL, KILLED_NPC_ID);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JSON
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when an NPC is killed
													Element:br
														{
												Node:
												(type) c
												(layer)4
													Element:pre
														"timestamp":"2013-11-15T13:08:45.954Z", "data":{ "type":23, "account_id":"cool_guy@example.com", "character_id":"wizard", "shard_id":52, "character_lvl":42, "npc_id":23456 } }
												Node:
												(type) c
												(layer)4
													Element:p
														NOTE: All parameter are required in JSON, except “shard_id” which is optional.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Player Points (Event ID#24)
													Element:a
												Node:
												(type) c
												(layer)4
													Element:p
														This event records information regarding when a player gains points in the game. Points are used as an indicator of how well the player is doing in the game and how far they have progressed. Typically, gaining enough points leads the player to level-up to a higher level. To log player points, you need to pass the account and character IDs, the character level, the point amount and type, along with the timestamp. Optionally, you may pass the shard ID and whether or not the points are grouped.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Impacted UI Features
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														System Metrics (Levels)
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tr
													Element:th
														Type
													Element:th
														Parameter
													Element:th
														Default Value
													Element:tr
													Element:td
														Date
													Element:td
														XP TIMESTAMP
													Element:td
														(Current Time)
													Element:tr
													Element:td
														String
													Element:td
														ACCOUNT ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														CHARACTER ID
													Element:td
														ACCOUNT_ID
													Element:tr
													Element:td
														Long
													Element:td
														CHARACTER LEVEL
													Element:td
														If Generic Character then Account Level; If no concept of Levels then 0.
													Element:tr
													Element:td
														Long
													Element:td
														SHARD ID
													Element:td
														0
													Element:tr
													Element:td
														Long
													Element:td
														POINT_TYPE
													Element:td
														Default = XP, {XP, GENERIC_POINTS, OTHER}
													Element:tr
													Element:td
														Long
													Element:td
														XP AMOUNT
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														Boolean
													Element:td
														GROUPED FLAG
													Element:td
														N
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														*Point Type default is XP, alternate options include 'Generic Point', and 'Other'.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														Java
												Node:
												(type) c
												(layer)4
													Element:p
														//Log player XP
													Element:br
														public void
													Element:em
														aKApi.
														playerXp(XP_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, SHARD_ID, POINT_TYPE, XP_AMOUNT, GROUPED_FLAG);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JavaScript
												Node:
												(type) c
												(layer)4
													Element:p
														//Log player XP
													Element:br
													Element:em
														aKApi.
														playerXp(XP_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, SHARD_ID, POINT_TYPE, XP_AMOUNT, GROUPED_FLAG);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														PHP
												Node:
												(type) c
												(layer)4
													Element:p
														//Log player XP
													Element:br
													Element:em
														$aKApi->
														playerXp(XP_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, SHARD_ID, POINT_TYPE, XP_AMOUNT, GROUPED_FLAG);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JSON
												Node:
												(type) c
												(layer)4
													Element:p
														//Log player XP
													Element:br
												Node:
												(type) c
												(layer)4
													Element:pre
														{ "timestamp":"2013-11-15T13:17:01.847Z", "data":{ "type":24, "account_id":"cool_guy@example.com", "character_id":"Wizard", "character_lvl":1, "shard_id":42, “point_type”:”XP” "xp_amount":34.45, "grouped_flag”:”Y”, } }
												Node:
												(type) c
												(layer)4
													Element:p
														NOTE: All parameters are required in JSON, except “shard_id” and “grouped_flag” which are optional.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Player Versus Player (PVP) Duel (Event ID#25)
												Node:
												(type) c
												(layer)4
													Element:p
														Please use Social Interactions Event #6 to record Player Versus Player actions.
													Element:span
														This event records information when a player enters into combat against another player. Note that this event is only applicable for games and environments where a player is able to fight another player. To log a PVP duel, you need to pass the account and character IDs, the timestamp, and whether or not the player won. Optionally, you may pass the shard ID.
													Element:span
													Element:big
													Element:strong
														Parameters
													Element:span
														|| border=1 rules=rows frame=hsides
													Element:span
														||! Type ||! Parameter ||! Default Value ||
													Element:span
														|| Date || PVP DUEL TIMESTAMP || (Current Time) ||
													Element:span
														|| String || ACCOUNT ID ||
													Element:em
														No Default Value
														||
													Element:span
														|| String || CHARACTER ID || ACCOUNT ID ||
													Element:span
														|| Long || SHARD ID || 0 ||
													Element:span
														|| Boolean || WIN FLAG ||
													Element:em
														No Default Value
														||
													Element:span
													Element:big
													Element:strong
														Sample Use
													Element:span
														*Java
													Element:span
														//Log a PVP Duel
													Element:br
													Element:span
														public void
													Element:em
														aKApi
														.logPvpDuel(PVP_DUEL_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, WIN_FLAG);
													Element:span
														*JavaScript
													Element:span
														//Log a PVP Duel
													Element:br
													Element:span
													Element:em
														aKApi
														.logPvpDuel(PVP_DUEL_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, WIN_FLAG);
													Element:span
														*PHP
													Element:span
														//Log a PVP Duel
													Element:br
													Element:span
													Element:em
														$aKApi
														->logPvpDuel(PVP_DUEL_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, WIN_FLAG);
													Element:span
														*JSON
													Element:span
														//Log a PVP Duel
													Element:br
													Element:span
														{
													Element:span
														"timestamp":"2013-11-15T13:26:39.832Z",
													Element:span
														"data":{
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:span
														"type":25,
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														"account_id":"cool_guy@example.com",
													Element:span
														"character_id":"Wizard",
													Element:span
														"shard_id":42,
													Element:span
														"win_flag":"Y"
													Element:span
														}
													Element:span
														}
													Element:span
														NOTE: All parameters are required in JSON, except “shard_id” which is optional
													Element:a
														Back to Top
													Element:span
														----
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Player Death (Event ID#26)
												Node:
												(type) c
												(layer)4
													Element:p
														This event records information regarding the death of a player by a non-player character (NPC). To log a player death, you need to pass the account and character IDs; the Area ID and name; the NPC ID; the position; the type of death; and the timestamp. Optionally, you may pass the shard ID.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tr
													Element:th
														Type
													Element:th
														Parameter
													Element:th
														Default Value
													Element:tr
													Element:td
														Date
													Element:td
														DEATH TIMESTAMP
													Element:td
														(Current Time)
													Element:tr
													Element:td
														String
													Element:td
														ACCOUNT ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														CHARACTER ID
													Element:td
														ACCOUNT ID
													Element:tr
													Element:td
														Long
													Element:td
														SHARD ID
													Element:td
														0
													Element:tr
													Element:td
														Long
													Element:td
														KILLER NPC ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														DEATH TYPE
													Element:td
														NA
													Element:tr
													Element:td
														Long
													Element:td
														AREA ID
													Element:td
														0
													Element:tr
													Element:td
														Float
													Element:td
														POSITION X
													Element:td
														0
													Element:tr
													Element:td
														Float
													Element:td
														POSITION Y
													Element:td
														0
													Element:tr
													Element:td
														Float
													Element:td
														POSITION Z
													Element:td
														0
													Element:tr
													Element:td
														String
													Element:td
														AREA NAME
													Element:td
														NA
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														Java
												Node:
												(type) c
												(layer)4
													Element:p
														//Log a player death
													Element:br
														public void
													Element:em
														aKApi
														.logPlayerDeath(DEATH_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, KILLER_NPC_ID, DEATH_TYPE, AREA_ID, POSITION_X, POSITION_Y, POSITION_Z, AREA_NAME);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JavaScript
												Node:
												(type) c
												(layer)4
													Element:p
														//Log a player death
													Element:br
													Element:em
														aKApi
														.logPlayerDeath(DEATH_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, KILLER_NPC_ID, DEATH_TYPE, AREA_ID, POSITION_X, POSITION_Y, POSITION_Z, AREA_NAME);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														PHP
												Node:
												(type) c
												(layer)4
													Element:p
														//Log a player death
													Element:br
													Element:em
														$aKApi
														->logPlayerDeath(DEATH_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, KILLER_NPC_ID, DEATH_TYPE, AREA_ID, POSITION_X, POSITION_Y, POSITION_Z, AREA_NAME);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JSON
												Node:
												(type) c
												(layer)4
													Element:p
														//Log a player death
													Element:br
												Node:
												(type) c
												(layer)4
													Element:pre
														{ "timestamp":"2013-11-15T13:32:33.452Z", "data":{ "type":26, "account_id":"cool_guy@example.com", "character_id":"Wizard", "shard_id":42, "npc_id":23456, "death_type":"Immolation", "area_id":512, "position_x":678, "position_y":231, "position_z":517, "area_name”:”Area_Name” } }
												Node:
												(type) c
												(layer)4
													Element:p
														NOTE: All parameter are required in JSON, except “shard_id” which is optional.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Non-Player Character (NPC) (Event ID#31)
													Element:a
												Node:
												(type) c
												(layer)4
													Element:p
														Non-player characters (NPCs) are characters within the game that are not controlled by players. They have different levels of difficulty and may be either friendly or aggressive. This event records information regarding interactions between NPCs and players in the game environment. Recording NPC's also populates the dimension table for NPCs, which is later referred to for all other NPC related events. To log NPC events, you need to pass the account and character IDs; the NPC ID, name, and type; the event type and name; along with the toughness and timestamp. Optionally, you may pass the shard ID, and the minimum and maximum levels.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Impacted UI Features
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														KPI
													Element:li
														System Metrics (NPC)
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tr
													Element:th
														Type
													Element:th
														Parameter
													Element:th
														Default Value
													Element:tr
													Element:td
														Date
													Element:td
														EVENT TIMESTAMP
													Element:td
														(Current Time)
													Element:tr
													Element:td
														String
													Element:td
														ACCOUNT ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														CHARACTER ID
													Element:td
														ACCOUNT_ID
													Element:tr
													Element:td
														Long
													Element:td
														SHARD ID
													Element:td
														0
													Element:tr
													Element:td
														String
													Element:td
														NPC EVENT NAME
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														NPC EVENT TYPE
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														NPC ID
													Element:td
														If NPC ID is empty, and NPC Name is not empty, use 0.
													Element:tr
													Element:td
														String
													Element:td
														NPC NAME
													Element:td
														If NPC ID is not empty, and NPC Name is empty, use NA.
													Element:tr
													Element:td
														String
													Element:td
														NPC TYPE
													Element:td
														Other
													Element:tr
													Element:td
														Integer
													Element:td
														MIN LEVEL
													Element:td
														Set as Optional, with Null value
													Element:tr
													Element:td
														Integer
													Element:td
														MAX LEVEL
													Element:td
														Set as Optional, with Null value
													Element:tr
													Element:td
														Integer
													Element:td
														TOUGHNESS
													Element:td
														Set as Optional, with Null value
													Element:tr
													Element:td
														String
													Element:td
														TOUGHNESS ENUM
													Element:td
														Set as Optional, with Null value
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														Java
												Node:
												(type) c
												(layer)4
													Element:p
														//Log an NPC event occurred
													Element:br
														public void
													Element:em
														aKApi.log
														NpcInteraction(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, NPC_EVENT_NAME, NPC_EVENT_TYPE, NPC_ID, NPC_NAME, NPC_TYPE, MIN_LEVEL, MAX_LEVEL, TOUGHNESS, TOUGHNESS_ENUM);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JavaScript
												Node:
												(type) c
												(layer)4
													Element:p
														//Log an NPC event occurred
													Element:br
													Element:em
														aKApi.log
														NpcInteraction(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, NPC_EVENT_NAME, NPC_EVENT_TYPE, NPC_ID, NPC_NAME, NPC_TYPE, MIN_LEVEL, MAX_LEVEL, TOUGHNESS, TOUGHNESS_ENUM);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														PHP
												Node:
												(type) c
												(layer)4
													Element:p
														//Log an NPC event occurred
													Element:br
													Element:em
														$aKApi->log
														NpcInteraction(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, NPC_EVENT_NAME, NPC_EVENT_TYPE, NPC_ID, NPC_NAME, NPC_TYPE, MIN_LEVEL, MAX_LEVEL, TOUGHNESS, TOUGHNESS_ENUM);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JSON
												Node:
												(type) c
												(layer)4
													Element:p
														//Log an NPC event occurred
													Element:br
												Node:
												(type) c
												(layer)4
													Element:pre
														{ "timestamp":"2013-11-15T14:22:57.102Z", "data":{ "type":31, "account_id":"cool_guy@example.com", "character_id":"wizard", "shard_id":42, "npc_event_name":"npcEventName", "npc_event_type":"Combat", "npc_id":2345, "npc_name":"the Mort of T", "npc_type":"Enemy", "npc_level_min":5, "npc_level_max":10, "npc_toughness":0.25, "npc_toughness_enum":"Quarter" } }
												Node:
												(type) c
												(layer)4
													Element:p
														NOTE: All parameters are required in JSON, except “shard_id”, “npc_level_min”, and “npc_level_max” which are optional.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Challenge (Event ID#32)
												Node:
												(type) c
												(layer)4
													Element:p
														Challenges, sometimes referred to as Quests, are elements of the game where a player, or group of players, can perform tasks for a reward or opportunity to level-up within the game. This event records information regarding challenges. To log a challenge event, you need to pass the account and character IDs; the challenge ID, type, and status; along with the timestamp. Optionally, you may pass the shard ID.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Impacted UI Features
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														KPI
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tr
													Element:th
														Type
													Element:th
														Parameter
													Element:th
														Default Value
													Element:tr
													Element:td
														Date
													Element:td
														EVENT TIMESTAMP
													Element:td
														(Current Time)
													Element:tr
													Element:td
														String
													Element:td
														ACCOUNT ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														CHARACTER ID
													Element:td
														ACCOUNT ID
													Element:tr
													Element:td
														Long
													Element:td
														SHARD ID
													Element:td
														0
													Element:tr
													Element:td
														String
													Element:td
														CHALLENGE ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														CHALLENGE TYPE
													Element:td
														Other
													Element:a
														(See Appendix A for more types)
													Element:tr
													Element:td
														String
													Element:td
														CHALLENGE STATUS
													Element:td
														Accepted*
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														*The Challenge Status default is 'Accepted', but alternate options include 'Completed', or 'Abandoned'.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														Java
												Node:
												(type) c
												(layer)4
													Element:p
														//Log a challenge event occurred
													Element:br
														public void
													Element:em
														aKApi
														.logChallenge(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, CHALLENGE_ID, CHALLENGE_TYPE, CHALLENGE_STATUS);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JavaScript
												Node:
												(type) c
												(layer)4
													Element:p
														//Log a challenge event occurred
													Element:br
													Element:em
														aKApi
														.logChallenge(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, CHALLENGE_ID, CHALLENGE_TYPE, CHALLENGE_STATUS);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														PHP
												Node:
												(type) c
												(layer)4
													Element:p
														//Log a challenge event occurred
													Element:br
													Element:em
														$aKApi
														->logChallenge(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, CHALLENGE_ID, CHALLENGE_TYPE, CHALLENGE_STATUS);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JSON
												Node:
												(type) c
												(layer)4
													Element:p
														//Log a challenge event occurred
													Element:br
												Node:
												(type) c
												(layer)4
													Element:pre
														{ "timestamp":"2013-11-15T14:31:40.633Z", "data":{ "type":32, "account_id":"cool_guy@example.com", "character_id":"Wizard", "shard_id":42, "challenge_id":"challenge_Id", "challenge_type":"Kill NPC", "challenge_status":"Abandonded" } }
												Node:
												(type) c
												(layer)4
													Element:p
														NOTE: All parameters are required in JSON, except “shard_id” which is optional.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														!!!!
													Element:strong
														Farmer (Event ID#47)
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														This event records information regarding whether or not a player is a gold farmer, including what type of gold farmer they are (e.g. spammer, gatherer, mule, etc.). To log whether a player is a gold farmer, you need to pass the account and character ID, the farmer type, and the timestamp. Optionally, you may pass the shard ID.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
													Element:big
													Element:strong
														Impacted UI Features
													Element:span
														*User Metrics (Farming)
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
													Element:big
													Element:strong
														Parameters
													Element:span
														|| border=1 rules=rows frame=hsides
													Element:span
														||! Type ||! Parameter ||! Default Value ||
													Element:span
														|| Date || TIMESTAMP || (Current Time) ||
													Element:span
														|| String || ACCOUNT ID ||
													Element:em
														No Default Value
														||
													Element:span
														|| String || CHARACTER ID || ACCOUNT ID ||
													Element:span
														|| Long || SHARD ID || 0 ||
													Element:span
														|| String || FARMER TYPE || Other
													Element:a
														(See Appendix A for more types)
														||
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														*Java
													Element:span
														//Log if a player is a gold farmer
													Element:br
													Element:span
														public void
													Element:em
														aKApi
														.logFarmer(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, FARMER_TYPE);
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														*JavaScript
													Element:span
														//Log if a player is a gold farmer
													Element:br
													Element:span
													Element:em
														aKApi
														.logFarmer(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, FARMER_TYPE);
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														*PHP
													Element:span
														//Log if a player is a gold farmer
													Element:br
													Element:span
													Element:em
														$aKApi
														->logFarmer(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, FARMER_TYPE);
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														*JSON
													Element:span
														//Log if a player is a gold farmer
													Element:br
													Element:span
														{
													Element:span
														"timestamp":"2013-11-15T17:55:57.747Z",
													Element:span
														"data":{
													Element:span
														"type":47,
													Element:span
														"account_id":"cool_guy@example.com",
													Element:span
														"character_id":"Wizard",
													Element:span
														"shard_id":52,
													Element:span
														"farmer_type":"Banker"
													Element:span
														}
													Element:span
														}
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														NOTE: All parameters are required in JSON, except “shard_id” which is optional.
													Element:a
														Back to Top
													Element:span
														----
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														!!!!
													Element:strong
														Reward (Event ID#49)
													Element:span
														This event records information regarding reward systems, through which rewards may be awarded for completion of a task or seniority. To log reward events, you need to pass the account and character IDs; the reward type, ID, and count; along with the timestamp. Optionally, you may pass the shard ID, and reward item type.
													Element:span
													Element:big
													Element:strong
														Parameters
													Element:span
														|| border=1 rules=rows frame=hsides
													Element:span
														||! Type ||! Parameter ||! Default Value ||
													Element:span
														|| Date || TIMESTAMP || (Current Time) ||
													Element:span
														|| String || ACCOUNT ID ||
													Element:em
														No Default Value
														||
													Element:span
														|| String || CHARACTER ID || ACCOUNT ID ||
													Element:span
														|| Long || SHARD ID || 0 ||
													Element:span
														|| String || REWARD TYPE ||
													Element:em
														No Default Value
														* ||
													Element:span
														|| Long || REWARD ID ||
													Element:em
														No Default Value
														||
													Element:span
														|| String || ITEM TYPE || Other
													Element:a
														(See Appendix A for more types)
														||
													Element:span
														|| Float || REWARD COUNT ||
													Element:em
														No Default Value
														||
													Element:span
													Element:big
													Element:strong
														Sample Use
													Element:span
														*Java
													Element:span
														//Log that a reward event occurred
													Element:br
													Element:span
														public void
													Element:em
														aKApi
														.logReward(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, REWARD_TYPE, REWARD_ID, ITEM_TYPE, REWARD_COUNT);
													Element:span
														*JavaScript
													Element:span
														//Log that a reward event occurred
													Element:br
													Element:span
													Element:em
														aKApi
														.logReward(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, REWARD_TYPE, REWARD_ID, ITEM_TYPE, REWARD_COUNT);
													Element:span
														*PHP
													Element:span
														//Log that a reward event occurred
													Element:br
													Element:span
													Element:em
														$aKApi
														->logReward(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, REWARD_TYPE, REWARD_ID, ITEM_TYPE, REWARD_COUNT);
													Element:span
														*JSON
													Element:span
														//Log that a reward event occurred
													Element:br
													Element:span
														{
													Element:span
														"timestamp":"2013-11-15T18:07:14.132Z",
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:span
														"data":{
													Element:span
														"type":49,
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														"account_id":"cool_guy@example.com",
													Element:span
														"character_id":"Wizard",
													Element:span
														"shard_id":42.42,
													Element:span
														"reward_type":1,
													Element:span
														"reward_id":"1",
													Element:span
														"item_type":2,
													Element:span
														"reward_count":50.5
													Element:span
														}
													Element:span
														}
													Element:span
														NOTE: All parameters are required in JSON, except “shard_id” and “item_type” which are optional.
													Element:a
														Back to Top
													Element:span
														----
													Element:span
														!!!!
													Element:strong
														Mob (Event ID#51)
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														A Mob refers to a group of non-player characters (NPCs). This event records information on when a player confronts and kills a Mob. To log a mob event, you need to pass the account and character IDs, the shard ID, and the timestamp. Optionally, you may pass the shard ID and description of the kill.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
													Element:big
													Element:strong
														Impacted UI Features
													Element:span
														*User Metrics (Farming)
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
													Element:big
													Element:strong
														Parameters
													Element:span
														|| border=1 rules=rows frame=hsides
													Element:span
														||! Type ||! Parameter ||! Default Value ||
													Element:span
														|| Date || TIMESTAMP || (Current Time) ||
													Element:span
														|| String || ACCOUNT ID ||
													Element:em
														No Default Value
														||
													Element:span
														|| String || CHARACTER ID || ACCOUNT ID ||
													Element:span
														|| Long || SHARD ID || 0 ||
													Element:span
														|| String || KILL MOB DESCRIPTION || Null ||
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														*Java
													Element:span
														//Log when a mob is defeated
													Element:br
													Element:span
														public void
													Element:em
														aKApi
														.logMob(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, KILL_MOB_DESCRIPTION);
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														*JavaScript
													Element:span
														//Log when a mob is defeated
													Element:br
													Element:span
													Element:em
														aKApi
														.logMob(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, KILL_MOB_DESCRIPTION);
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														*PHP
													Element:span
														//Log when a mob is defeated
													Element:br
													Element:span
													Element:em
														$aKApi
														->logMob(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, KILL_MOB_DESCRIPTION);
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														*JSON
													Element:span
														//Log when a mob is defeated
													Element:br
													Element:span
														{
													Element:span
														"timestamp":"2013-11-15T18:18:12.933Z",
													Element:span
														"data":{
													Element:span
														"type":51,
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:span
														"account_id":"cool_guy@example.com",
													Element:span
														"character_id":"Wizard",
													Element:span
														"shard_id":42.42,
													Element:span
														"mob_desc":"mob_desc"
													Element:span
														}
													Element:span
														}
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														NOTE: All parameters are required in JSON, except “shard_id” and “mob_desc” which are optional.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
													Element:span
														----
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														!!!!
													Element:strong
														Resource (Event ID#56)
														- To Be Completed.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														A resource event refers to when a player acquires a non-item resource within the game, such as coins, gold, power, etc. To log resource events, you need to pass the account and character IDs; the resource type, count, and ID; along with the timestamp. Optionally, you may pass the shard ID.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
													Element:big
													Element:strong
														Impacted UI Features
													Element:span
														*System Metrics (Levels)
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
													Element:big
													Element:strong
														Parameters
													Element:span
														|| border=1 rules=rows frame=hsides
													Element:span
														||! Type ||! Parameter ||! Default Value ||
													Element:span
														|| Date || TIMESTAMP || (Current Time) ||
													Element:span
														|| String || ACCOUNT ID ||
													Element:em
														No Default Value
														||
													Element:span
														|| String || CHARACTER ID || ACCOUNT ID ||
													Element:span
														|| Long || SHARD ID || 0 ||
													Element:span
														|| String || RESOURCE TYPE || Other
													Element:a
														(See Appendix A for more types)
														||
													Element:span
														|| String || RESOURCE ID ||
													Element:em
														No Default Value
														||
													Element:span
														|| Long || RESOURCE COUNT ||
													Element:em
														No Default Value
														||
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														*Java
													Element:span
														//Log that a resource event occurred
													Element:br
													Element:span
														public void
													Element:em
														aKApi
														.logResource(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, RESOURCE_TYPE, RESOURCE_ID, RESOURCE_COUNT);
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														*JavaScript
													Element:span
														//Log that a resource event occurred
													Element:br
													Element:span
													Element:em
														aKApi
														.logResource(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, RESOURCE_TYPE, RESOURCE_ID, RESOURCE_COUNT);
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														*PHP
													Element:span
														//Log that a resource event occurred
													Element:br
													Element:span
													Element:em
														$aKApi
														->logResource(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, RESOURCE_TYPE, RESOURCE_ID, RESOURCE_COUNT);
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														*JSON
													Element:span
														//Log that a resource event occurred
													Element:br
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:span
														{
													Element:span
														"timestamp":"2013-11-15T18:47:39.266Z",
													Element:span
														"data":{
													Element:span
														"type":56,
													Element:span
														"account_id":"cool_guy@example.com",
													Element:span
														"character_id":"Wizard", "shard_id":42.42,
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														"shard_id":42.42,
													Element:span
														"resource_type":0,
													Element:span
														"resource_id":"1",
													Element:span
														"resource_count":3
													Element:span
														}
													Element:span
														}
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														NOTE: All parameters are required in JSON, except “shard_id” which is optional.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
													Element:span
														----
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
							Element:strong
								Item Events
							Element:a
						Node:
						(type) c
						(layer)2
							Element:p
								Item events include those events that are related to the creation, use, and transaction of in-game items. Details on how to execute calls to log item events can be found below for each corresponding event.
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Initialize Item (Event ID#15)
													Element:a
												Node:
												(type) c
												(layer)4
													Element:p
														This event records information regarding virtual items in the game. Such items may be made available by non-player characters, or they may be created by players in the game. Initializing an item also initializes the dimension table for the item, which is later referred to for all other item related events. To initialize an item, you need to pass the item ID, name, type, and segment, as well as the timestamp. Optionally, you may pass the account and character IDs of the creator.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:strong
														Note
														: You must log the item creation information before any log or load command references the item ID.
													Element:br
													Element:strong
														Note
														: item_type may be any string, but use it consistently. some examples: “Raw materials”, “Mounts and pets”, “armor”, “tools”, “containers”
													Element:br
													Element:strong
														Note
														: item_value is a floating point value which would be used for the store price of the item
													Element:br
													Element:strong
														Note
														: item_segment may be “UGC” when the item is user-generated or “INGAME” when part of the original application
													Element:br
													Element:strong
														Note
														: IF the item_segment field is “UGC” then the creator_account_id and creator_character_id fields should be set appropriately, otherwise they should be empty strings
													Element:br
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Impacted UI Features
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														KPI
													Element:li
														System Metrics (Items)
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tr
													Element:th
														Type
													Element:th
														Parameter
													Element:th
														Default Value
													Element:tr
													Element:td
														Date
													Element:td
														TIMESTAMP
													Element:td
														(Current Time)
													Element:tr
													Element:td
														Long
													Element:td
														ITEM ID
													Element:td
														0
													Element:tr
													Element:td
														String
													Element:td
														ITEM NAME
													Element:td
														NA
													Element:tr
													Element:td
														String
													Element:td
														ITEM TYPE
													Element:td
														Other
													Element:a
														(See Appendix for more types)
													Element:tr
													Element:td
														String
													Element:td
														ITEM SEGMENT
													Element:td
														"UGC or INGAME"
													Element:tr
													Element:td
														String
													Element:td
														CREATED BY ACCOUNT ID
													Element:td
														If ITEM_SEGMENT=UGC, then Required.
													Element:tr
													Element:td
														String
													Element:td
														CREATED BY CHARACTER ID
													Element:td
														If ITEM_SEGMENT=UGC, then ACCOUNT_ID.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														Java
												Node:
												(type) c
												(layer)4
													Element:p
														//Log item creation information
													Element:br
														public void
													Element:em
														aKApi.
														loadInitItem(TIMESTAMP, ITEM_ID, ITEM_NAME, ITEM_TYPE, ITEM_SEGMENT, CREATED_BY_ACCOUNT_ID, CREATED_BY_CHARACTER_ID);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JavaScript
												Node:
												(type) c
												(layer)4
													Element:p
														//Log item creation information
													Element:br
													Element:em
														aKApi
														.loadInitItem(TIMESTAMP, ITEM_ID, ITEM_NAME, ITEM_TYPE, ITEM_SEGMENT, CREATED_BY_ACCOUNT_ID, CREATED_BY_CHARACTER_ID);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														PHP
												Node:
												(type) c
												(layer)4
													Element:p
														//Log item creation information
													Element:br
													Element:em
														$aKApi->
														loadInitItem(TIMESTAMP, ITEM_ID, ITEM_NAME, ITEM_TYPE, ITEM_SEGMENT, CREATED_BY_ACCOUNT_ID, CREATED_BY_CHARACTER_ID);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JSON
												Node:
												(type) c
												(layer)4
													Element:p
														//Log item creation information
													Element:br
												Node:
												(type) c
												(layer)4
													Element:pre
														{ "timestamp":"2013-11-14T17:11:33.720Z", "data":{ "type":15, "item_id":66, "item_name":"the big blaster gun", "item_type":"weapon", "item_segment":"UGC", "account_id":"cool_guy@example.com", "character_id":"Wizard" }
												Node:
												(type) c
												(layer)4
													Element:p
														}
												Node:
												(type) c
												(layer)4
													Element:p
														NOTE: All parameters are required in JSON, except “account_id” and “character_id” which are optional.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Item Used (Event ID#16)
													Element:a
												Node:
												(type) c
												(layer)4
													Element:p
														This event records information regarding the usage of items in the game, such as the usage location, and includes account and character information for the user who used the item. To log an item's use, you need to pass the account and character IDs; the character level; the item ID, name, and count; the area ID, name, and position; as well as the timestamp. Optionally, you may pass the shard ID.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Impacted UI Features
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														KPI
													Element:li
														System Metrics (Items)
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tr
													Element:th
														Type
													Element:th
														Parameter
													Element:th
														Default Value
													Element:tr
													Element:td
														Date
													Element:td
														EVENT TIMESTAMP
													Element:td
														(Current Time)
													Element:tr
													Element:td
														String
													Element:td
														ACCOUNT ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														CHARACTER ID
													Element:td
														ACCOUNT_ID
													Element:tr
													Element:td
														Long
													Element:td
														CHARACTER LEVEL
													Element:td
														If Generic Character then Account Level; If no concept of levels then 0.
													Element:tr
													Element:td
														Long
													Element:td
														SHARD ID
													Element:td
														0
													Element:tr
													Element:td
														Long
													Element:td
														ITEM ID
													Element:td
														If ITEM_ID is empty and ITEM_NAME is not empty, use 0.
													Element:tr
													Element:td
														String
													Element:td
														ITEM NAME
													Element:td
														If ITEM_ID is not empty and ITEM_NAME is empty, use NA.
													Element:tr
													Element:td
														Integer
													Element:td
														ITEM COUNT
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														Long
													Element:td
														AREA ID
													Element:td
														0
													Element:tr
													Element:td
														String
													Element:td
														AREA NAME
													Element:td
														NA
													Element:tr
													Element:td
														Float
													Element:td
														POSITION X
													Element:td
														0
													Element:tr
													Element:td
														Float
													Element:td
														POSITION Y
													Element:td
														0
													Element:tr
													Element:td
														Float
													Element:td
														POSITION Z
													Element:td
														0
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														Java
												Node:
												(type) c
												(layer)4
													Element:p
														//Log that an item was used
													Element:br
														public void
													Element:em
														aKApi.
														logItem(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, SHARD_ID, ITEM_ID, ITEM_NAME, ITEM_COUNT, AREA_ID, AREA_NAME, POSITION_X, POSITION_Y, POSITION_Z);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JavaScript
												Node:
												(type) c
												(layer)4
													Element:p
														//Log that an item was used
													Element:br
													Element:em
														aKApi.
														logItem(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, SHARD_ID, ITEM_ID, ITEM_NAME, ITEM_COUNT, AREA_ID, AREA_NAME, POSITION_X, POSITION_Y, POSITION_Z);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														PHP
												Node:
												(type) c
												(layer)4
													Element:p
													Element:em
														//Log that an item was used
														$aKApi->''logItem(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, SHARD_ID, ITEM_ID, ITEM_NAME, ITEM_COUNT, AREA_ID, AREA_NAME, POSITION_X, POSITION_Y, POSITION_Z);
													Element:br
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JSON
												Node:
												(type) c
												(layer)4
													Element:p
														//Log that an item was used
													Element:br
												Node:
												(type) c
												(layer)4
													Element:pre
														{ "timestamp":"2013-11-14T17:42:49.185Z", "data":{ "type":16, "account_id":"cool_guy@example.com", "character_id":"wizard", "character_lvl":52, "shard_id":42, "item_id":66, "item_name":"The Blaster Gun", "item_count":1, "area_id":42, "area_name":"Area_Name”, "position_x":678, "position_y":231, "position_z":517 } }
												Node:
												(type) c
												(layer)4
													Element:p
														NOTE: All parameters are required in JSON, except “shard_id” which is optional.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														!!!!
													Element:strong
														Item Transaction (Event ID#17)
													Element:a
														- To Be Completed.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														This event records information regarding the purchase of items in the game using either real world money or virtual currency that may be exclusive to the game. To log an item transaction, you need to pass the account and character IDs; the item ID, name, and price; the currency type and currency value; the transaction type; as well as the timestamp. Optionally, you may pass the shard ID, and virtual currency type and count.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
													Element:big
													Element:strong
														Impacted UI Features
													Element:span
														*KPI
													Element:span
														*User Metrics (Churn)
													Element:span
														*Basic Package (Churn)
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
													Element:big
													Element:strong
														Parameters
													Element:span
														|| border=1 rules=rows frame=hsides
													Element:span
														||! Type ||! Parameter ||! Default Value ||
													Element:span
														||Date ||TIMESTAMP ||(Current Time)||
													Element:span
														||String ||ACCOUNT ID ||
													Element:em
														No Default Value
														||
													Element:span
														||String ||CHARACTER ID ||ACCOUNT_ID||
													Element:span
														||Long ||SHARD ID ||0||
													Element:span
														||Long ||ITEM ID ||If ITEM_ID is empty and ITEM_NAME is not empty, use 0.||
													Element:span
														||String ||ITEM NAME ||If ITEM_ID is not empty and ITEM_NAME is empty, use NA.||
													Element:span
														||Float ||ITEM PRICE ||
													Element:em
														No Default Value
														||
													Element:span
														||Integer ||TRANSACTION TYPE ||
													Element:em
														No Default Value
														*||
													Element:span
														||Integer ||CURRENCY TYPE ||
													Element:em
														No Default Value
														**||
													Element:span
														||String ||VIRTUAL CURRENCY TYPE || If CURRENCY_TYPE=1 then required; else null.||
													Element:span
														||Float ||CURRENCY VALUE ||
													Element:em
														No Default Value
														||
													Element:span
														||Integer ||VIRTUAL CURRENCY COUNT || Null||
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
													Element:span
														*Transaction Type must be 0 or 1, where 0 equals 'Spent' and 1 equals 'Acquired'.
													Element:br
													Element:span
													Element:span
														**Currency Type must be 0 or 1, where 0 equals 'Real' and 1 equals 'Virtual Currency'.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														*Java
													Element:span
														//Log that an item transaction occurred
													Element:br
													Element:span
														public void
													Element:em
														aKApi.
														logItemTransaction(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, ITEM_ID, ITEM_NAME, ITEM_PRICE, TRANSACTION_TYPE, CURRENCY_TYPE, VIRTUAL_CURRENCY_TYPE, CURRENCY_VALUE, VIRTUAL_CURRENCY_COUNT);
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														*JavaScript
													Element:span
														//Log that an item transaction occurred
													Element:br
													Element:span
													Element:em
														aKApi.
														logItemTransaction(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, ITEM_ID, ITEM_NAME, ITEM_PRICE, TRANSACTION_TYPE, CURRENCY_TYPE, VIRTUAL_CURRENCY_TYPE, CURRENCY_VALUE, VIRTUAL_CURRENCY_COUNT);
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														*PHP
													Element:span
														//Log that an item transaction occurred
													Element:br
													Element:span
													Element:em
														$aKApi->
														logItemTransaction(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, ITEM_ID, ITEM_NAME, ITEM_PRICE, TRANSACTION_TYPE, CURRENCY_TYPE, VIRTUAL_CURRENCY_TYPE, CURRENCY_VALUE, VIRTUAL_CURRENCY_COUNT);
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														*JSON
													Element:span
														//Log that an item transaction occurred
													Element:br
													Element:span
														{
													Element:span
														"timestamp":"2013-11-14T17:52:58.876Z",
													Element:span
														"data":{
													Element:span
														"type":17,
													Element:span
														"account_id":"cool_guy@example.com",
													Element:span
														"character_id":"wizard",
													Element:span
														"shard_id":42,
													Element:span
														"item_id":66,
													Element:span
														"item_name":"the big blaster gun",
													Element:span
														"item_price":3,
													Element:span
														"transaction_type":0,
													Element:span
														"currency_type":0,
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:span
														"virtual_currency_label":"",
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														"currency_value”:3,
													Element:span
														"virtual_currency_count”:1
													Element:span
														}
													Element:span
														}
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														NOTE: All parameters are required in JSON, except “shard_id”, “virtual_currency_label”, and “virtual_currency_count” which are optional.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
													Element:span
														----
													Element:a
													Element:span
														!!!!
													Element:strong
														User Generated Content (UGC) Rating (Event ID#19)
														- To Be Completed.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														This event records information regarding the creation of in-game items and artifacts, including how items have been rated by other players. To log a UGC rating, you need to pass the account and character IDs; the item ID and name; the UGC rating; and timestamp. Optionally, you may pass the shard ID.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
													Element:big
													Element:strong
														Parameters
													Element:span
														|| border=1 rules=rows frame=hsides
													Element:span
														||! Type ||! Parameter ||! Default Value ||
													Element:span
														|| Date || RATING TIMESTAMP ||
													Element:em
														No Default Value
														||
													Element:span
														|| String || ACCOUNT ID ||
													Element:em
														No Default Value
														||
													Element:span
														|| String || CHARACTER ID || ACCOUNT ID ||
													Element:span
														|| Long || SHARD ID || 0 ||
													Element:span
														|| Long || ITEM ID || 0 ||
													Element:span
														|| String || ITEM NAME || NA ||
													Element:span
														|| String || UGC RATING || 1 ||
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														*Java
													Element:span
														//Log a UGC rating
													Element:br
													Element:span
														public void
													Element:em
														aKApi
														.loadUgcRating(RATING_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, ITEM_ID, ITEM_NAME, UGC_RATING);
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														*JavaScript
													Element:span
														//Log a UGC rating
													Element:br
													Element:span
													Element:em
														aKApi
														.loadUgcRating(RATING_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, ITEM_ID, ITEM_NAME, UGC_RATING);
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														*PHP
													Element:span
														//Log a UGC rating
													Element:br
													Element:span
													Element:em
														$aKApi
														->loadUgcRating(RATING_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, ITEM_ID, ITEM_NAME, UGC_RATING);
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														*JSON
													Element:span
														//Log a UGC rating
													Element:br
													Element:span
														{
													Element:span
														"timestamp":"2013-11-14T18:24:36.601Z",
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:span
														"data":{
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														"type":19,
													Element:span
														"account_id":"cool_guy@example.com",
													Element:span
														"character_id":"Wizard",
													Element:span
														"shard_id":42,
													Element:span
														"item_id":764,
													Element:span
														"item_name":"crafty button",
													Element:span
														"ugc_rating":"theUgcRating"
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:span
														}
													Element:span
														}
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														NOTE: All parameters are required in JSON, except “shard_id” which is optional.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
													Element:span
														----
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														!!!!
													Element:strong
														User Generated Content (UGC) Copy (Event ID#46)
														- To Be Completed.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														This event records information regarding the copying of an in-game item that was created by another player, not including items built-in by the gaming company. To log when a UGC is copied, you need to pass the copier's account and character IDs; the item ID and name; along with the timestamp. Optionally, you may pass the shard ID.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														For related information, see User
													Element:a
														Generated Content (UGC) Rating.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
													Element:big
													Element:strong
														Impacted UI Features
													Element:span
														*KPI
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
													Element:big
													Element:strong
														Parameters
													Element:span
														|| border=1 rules=rows frame=hsides
													Element:span
														||! Type ||! Parameter ||! Default Value ||
													Element:span
														|| Date || ITEM COPY TIMESTAMP || (Current Time) ||
													Element:span
														|| String || COPY ACCOUNT ID ||
													Element:em
														No Default Value
														||
													Element:span
														|| String || COPY CHARACTER ID || COPY_ACCOUNT_ID ||
													Element:span
														|| Long || SHARD ID || 0 ||
													Element:span
														|| Long ||ITEM ID || If ITEM ID is empty, and ITEM NAME is not empty, use 0. ||
													Element:span
														|| String ||ITEM NAME || If ITEM ID is not empty, and ITEM NAME is empty, use NA. ||
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														*Java
													Element:span
														//Log when UGC is copied
													Element:br
													Element:span
														public void
													Element:em
														aKApi
														.trackUgcCopy(ITEM_COPY_TIMESTAMP, COPY_ACCOUNT_ID, COPY_CHARACTER_ID, SHARD_ID, ITEM_ID, ITEM_NAME);
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														*JavaScript
													Element:span
														//Log when UGC is copied
													Element:br
													Element:span
													Element:em
														aKApi
														.trackUgcCopy(ITEM_COPY_TIMESTAMP, COPY_ACCOUNT_ID, COPY_CHARACTER_ID, SHARD_ID, ITEM_ID, ITEM_NAME);
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														*PHP
													Element:span
														//Log when UGC is copied
													Element:br
													Element:span
													Element:em
														$aKApi
														->trackUgcCopy(ITEM_COPY_TIMESTAMP, COPY_ACCOUNT_ID, COPY_CHARACTER_ID, SHARD_ID, ITEM_ID, ITEM_NAME);
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														*JSON
													Element:span
														//Log when UGC is copied
													Element:br
													Element:span
														{
													Element:span
														"timestamp":"2013-11-15T17:50:53.188Z",
													Element:span
														"data":{
													Element:span
														"type":46,
													Element:span
														"account_id":"cool_guy@example.com",
													Element:span
														"character_id":"Wizard",
													Element:span
														"shard_id":42.42,
													Element:span
														"item_id":8729,
													Element:span
														"item_name":"GMO Grain"
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:span
														}
													Element:span
														}
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														NOTE: All parameters are required in JSON, except “shard_id” which is optional.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
													Element:span
														----
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														!!!!
													Element:strong
														Productivity (Event ID#55)
														- To Be Completed.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														Productivity refers to events where players craft or harvest items within the game. To log productivity events, you need to pass the account and character IDs, the productivity type, and the timestamp. Optionally, you may pass the shard ID.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
													Element:big
													Element:strong
														Parameters
													Element:span
														|| border=1 rules=rows frame=hsides
													Element:span
														||! Type ||! Parameter ||! Default Value ||
													Element:span
														|| Date || TIMESTAMP || (Current Time) ||
													Element:span
														|| String || ACCOUNT ID ||
													Element:em
														No Default Value
														||
													Element:span
														|| String || CHARACTER ID || ACCOUNT ID ||
													Element:span
														|| Long || SHARD ID || 0 ||
													Element:span
														|| String || PRODUCTIVITY TYPE || Other
													Element:a
														(See Appendix A for more types)
														||
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														*Java
													Element:span
														//Log a productivity event occurred
													Element:br
													Element:span
														public void
													Element:em
														aKApi
														.logProductivity(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, PRODUCTIVITY_TYPE);
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														*JavaScript
													Element:span
														//Log a productivity event occurred
													Element:br
													Element:span
													Element:em
														aKApi
														.logProductivity(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, PRODUCTIVITY_TYPE);
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														*PHP
													Element:span
														//Log a productivity event occurred
													Element:br
													Element:span
													Element:em
														$aKApi
														->logProductivity(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, PRODUCTIVITY_TYPE););
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														*JSON
													Element:span
														//Log a productivity event occurred
													Element:br
													Element:span
														{
													Element:span
														"timestamp":"2013-11-15T18:42:06.056Z",
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:span
														"data":{
													Element:span
														"type":55,
													Element:span
														"account_id":"cool_guy@example.com",
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														"character_id":"Wizard",
													Element:span
														"shard_id":42.42,
													Element:span
														"productivity_type":"productivity_type"
													Element:span
														}
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:span
														}
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														NOTE: All parameters are required in JSON, except “shard_id” which is optional.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
													Element:span
														----
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
							Element:strong
								Social Group Events
							Element:a
						Node:
						(type) c
						(layer)2
							Element:p
								Group events include those events involving player interaction with a group or guild, such as entry, exit, or a player's position within a guild (e.g. Guild Leader). A guild is analogous to an organization in many online games. Details on how to execute calls to log group events can be found below for each corresponding event.
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Social Group Enter (Event ID#4)
												Node:
												(type) c
												(layer)4
													Element:p
														This event records the time at which a user joins a group. In this case, groups are likely to be impermanent. Note that grouping is not applicable for solo games. To log a user's entry into a group you need to pass the account, character, and group IDs; the character level, and timestamp of entry. Optionally, you may pass the shard ID.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Impacted UI Features
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														System Metrics (Social)
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tr
													Element:th
														Type
													Element:th
														Parameter
													Element:th
														Default Value
													Element:tr
													Element:td
														Date
													Element:td
														ENTER GROUP TIMESTAMP
													Element:td
														(Current Time)
													Element:tr
													Element:td
														String
													Element:td
														ACCOUNT ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														CHARACTER ID
													Element:td
														ACCOUNT ID
													Element:tr
													Element:td
														Long
													Element:td
														CHARACTER LEVEL
													Element:td
														0
													Element:tr
													Element:td
														Long
													Element:td
														SHARD ID
													Element:td
														0
													Element:tr
													Element:td
														Long
													Element:td
														GROUP ID
													Element:td
													Element:em
														No Default Value
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														Java
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a user enters a group
													Element:br
														public void
													Element:em
														aKApi
														.logEnterGroup(ENTER_GROUP_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, SHARD_ID, GROUP_ID);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JavaScript
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a user enters a group
													Element:br
													Element:em
														aKApi
														.logEnterGroup(ENTER_GROUP_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, SHARD_ID, GROUP_ID);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														PHP
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a user enters a group
													Element:br
													Element:em
														$aKApi
														->logEnterGroup(ENTER_GROUP_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, SHARD_ID, GROUP_ID);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JSON
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a user enters a group
													Element:br
												Node:
												(type) c
												(layer)4
													Element:pre
														{ "timestamp":"2013-11-14T14:10:36.792Z", "data":{ "type":4, "account_id":"cool_guy@example.com", "character_id":"wizard", "character_lvl":50, "shard_id":42, "group_id":42 } }
												Node:
												(type) c
												(layer)4
													Element:p
														NOTE: All parameters are required in JSON, except “shard_id” which is optional.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Social Group Exit (Event ID#5)
												Node:
												(type) c
												(layer)4
													Element:p
														This event records the time at which a user leaves a group. To log a user's exit from a group you need to pass the account, character, and group IDs; the character level; and timestamp of exit. Optionally, you may pass the shard ID>
												Node:
												(type) c
												(layer)4
													Element:p
														For related information, see
													Element:a
														Group Enter
														.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Impacted UI Features
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														System Metrics (Social)
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tr
													Element:th
														Type
													Element:th
														Parameter
													Element:th
														Default Value
													Element:tr
													Element:td
														Date
													Element:td
														LEAVE GROUP TIMESTAMP
													Element:td
														(Current Time)
													Element:tr
													Element:td
														String
													Element:td
														ACCOUNT ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														CHARACTER ID
													Element:td
														ACCOUNT ID
													Element:tr
													Element:td
														Long
													Element:td
														CHARACTER LEVEL
													Element:td
														0
													Element:tr
													Element:td
														Long
													Element:td
														SHARD ID
													Element:td
														0
													Element:tr
													Element:td
														Long
													Element:td
														GROUP ID
													Element:td
													Element:em
														No Default Value
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														Java
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a user exits a group
													Element:br
														public void
													Element:em
														aKApi
														.logExitGroup(LEAVE_GROUP_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, SHARD_ID, GROUP_ID);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JavaScript
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a user exits a group
													Element:br
													Element:em
														aKApi
														.logExitGroup(LEAVE_GROUP_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, SHARD_ID, GROUP_ID);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														PHP
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a user exits a group
													Element:br
													Element:em
														$aKApi
														->logExitGroup(LEAVE_GROUP_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, SHARD_ID, GROUP_ID);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JSON
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a user exits a group
													Element:br
														{
												Node:
												(type) c
												(layer)4
													Element:pre
														"timestamp":"2013-11-14T14:16:15.375Z", "data":{ "type":5, "account_id":"cool_guy@example.com", "character_id":"Wizard", "character_lvl":50, "shard_id":42, "group_id":42 } }
												Node:
												(type) c
												(layer)4
													Element:p
														NOTE: All parameters are required in JSON, except “shard_id” which is optional.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Enter Guild (Event ID#41)
												Node:
												(type) c
												(layer)4
													Element:p
														This event records information regarding when a player becomes part of a guild and whether they are the leader of the guild, or not. To log a player's entry into a guild, you need to pass the user's account ID, character ID, character level, guild ID, along with the time of entry. Optionally, you can pass their shard ID.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Impacted UI Features
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														System Metrics (Social)
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tr
													Element:th
														Type
													Element:th
														Parameter
													Element:th
														Default Value
													Element:tr
													Element:td
														Date
													Element:td
														EVENT TIMESTAMP
													Element:td
														(Current Time)
													Element:tr
													Element:td
														String
													Element:td
														ACCOUNT ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														CHARACTER ID
													Element:td
														ACCOUNT ID
													Element:tr
													Element:td
														Long
													Element:td
														CHARACTER LEVEL
													Element:td
														0
													Element:tr
													Element:td
														Long
													Element:td
														SHARD ID
													Element:td
														0
													Element:tr
													Element:td
														Long
													Element:td
														GUILD ID
													Element:td
													Element:em
														No Default Value
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														Java
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a player enters a guild
													Element:br
														public void
													Element:em
														aKApi
														.logEnterGuild(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, SHARD_ID, GUILD_ID);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JavaScript
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a player enters a guild
													Element:br
													Element:em
														aKApi
														.logEnterGuild(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, SHARD_ID, GUILD_ID);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														PHP
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a player enters a guild
													Element:br
													Element:em
														$aKApi
														->logEnterGuild(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, SHARD_ID, GUILD_ID);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JSON
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a player enters a guild
													Element:br
												Node:
												(type) c
												(layer)4
													Element:pre
														{ "timestamp":"2013-11-15T16:21:24.890Z", "data":{ "type":41, "account_id":"cool_guy@example.com", "character_id":"Wizard", "character_lvl":52, "shard_id":1, "guild_id":42 } }
												Node:
												(type) c
												(layer)4
													Element:p
														NOTE: All parameters are required in JSON, except “shard_id” which is optional.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Exit Guild (Event ID#42)
												Node:
												(type) c
												(layer)4
													Element:p
														This event records information regarding exiting a guild, including the guild exited and reason for leaving such as being evicted, leaving voluntarily, etc. To log a player's exit from a guild, you need to pass the user's account ID, character ID, character level, guild ID, along with the time of entry and reason for exiting the guild. Optionally, you can pass their shard ID.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Impacted UI Features
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														System Metrics (Social)
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tr
													Element:th
														Type
													Element:th
														Parameter
													Element:th
														Default Value
													Element:tr
													Element:td
														Date
													Element:td
														EVENT TIMESTAMP
													Element:td
														(Current Time)
													Element:tr
													Element:td
														String
													Element:td
														ACCOUNT ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														CHARACTER ID
													Element:td
														ACCOUNT ID
													Element:tr
													Element:td
														Long
													Element:td
														CHARACTER LEVEL
													Element:td
														0
													Element:tr
													Element:td
														Long
													Element:td
														SHARD ID
													Element:td
														0
													Element:tr
													Element:td
														Long
													Element:td
														GUILD ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														GUILD EXIT REASON
													Element:td
														NA
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														Java
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when and why a player exits a guild
													Element:br
														public void
													Element:em
														aKApi
														.logExitGuild(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, SHARD_ID, GUILD_ID, GUILD_EXIT_REASON);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JavaScript
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when and why a player exits a guild\\
													Element:em
														aKApi
														.logExitGuild(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, SHARD_ID, GUILD_ID, GUILD_EXIT_REASON);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														PHP
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when and why a player exits a guild
													Element:br
													Element:em
														$aKApi
														->logExitGuild(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, SHARD_ID, GUILD_ID, GUILD_EXIT_REASON);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JSON
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when and why a player exits a guild
													Element:br
												Node:
												(type) c
												(layer)4
													Element:pre
														{ "timestamp":"2013-11-15T17:28:35.133Z", "data":{ "type":42, "account_id":"cool_guy@example.com", "character_id":"Wizard", "character_lvl":52, "shard_id":1, "guild_id":42, "guild_exit_reason":"hacking" } }
												Node:
												(type) c
												(layer)4
													Element:p
														NOTE: All parameters are required in JSON, except “shard_id” which is optional.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Guild Leader (Event ID#45)
												Node:
												(type) c
												(layer)4
													Element:p
														This event records information regarding a player's position within a guild (i.e. whether they are the leader of a guild, and if so, which guild). To log if a player is a guild leader, you need to pass the user's account ID, character ID, guild ID, along with the timestamp.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tr
													Element:th
														Type
													Element:th
														Parameter
													Element:th
														Default Value
													Element:tr
													Element:td
														Date
													Element:td
														EVENT TIMESTAMP
													Element:td
														(Current Time)
													Element:tr
													Element:td
														String
													Element:td
														ACCOUNT ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														CHARACTER ID
													Element:td
														ACCOUNT ID
													Element:tr
													Element:td
														Long
													Element:td
														GUILD ID
													Element:td
													Element:em
														No Default Value
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														Java
												Node:
												(type) c
												(layer)4
													Element:p
														//Log if a player is a guild leader
													Element:br
														public void
													Element:em
														aKApi
														.putGuildLeader(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, GUILD_ID);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JavaScript
												Node:
												(type) c
												(layer)4
													Element:p
														//Log if a player is a guild leader
													Element:br
													Element:em
														aKApi
														.putGuildLeader(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, GUILD_ID);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														PHP
												Node:
												(type) c
												(layer)4
													Element:p
														//Log if a player is a guild leader
													Element:br
													Element:em
														$aKApi
														->putGuildLeader(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, GUILD_ID);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JSON
												Node:
												(type) c
												(layer)4
													Element:p
														//Log if a player is a guild leader
													Element:br
												Node:
												(type) c
												(layer)4
													Element:pre
														{ "timestamp":"2013-11-15T17:45:12.627Z", "data":{ "type":45, "account_id":"cool_guy@example.com", "character_id":"Wizard", "guild_id":777 } }
												Node:
												(type) c
												(layer)4
													Element:p
														NOTE: All parameters are required in JSON.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
							Element:strong
								Environment Events
							Element:a
						Node:
						(type) c
						(layer)2
							Element:p
								Environment events include those events that are related to in-game levels and areas that players may encounter. Details on how to execute calls to log environment events can be found below for each corresponding event.
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Level Begin (Event ID#27)
													Element:a
												Node:
												(type) c
												(layer)4
													Element:p
														This event records information regarding the time at which a player begins a level. To log when a player begins a level, you need to pass the account and character ID, the character level, the area ID and name, the position, and the timestamp. Optionally, you may pass the shard ID.
												Node:
												(type) c
												(layer)4
													Element:p
														Note that if there is no concept of levels in your application this event need not be used.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Impacted UI Features
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														KPI
													Element:li
														System Metrics (Levels)
													Element:li
														User Metrics (Churn)
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tr
													Element:th
														Type
													Element:th
														Parameter
													Element:th
														Default Value
													Element:tr
													Element:td
														Date
													Element:td
														LEVEL BEGIN TIMESTAMP
													Element:td
														(Current Time)
													Element:tr
													Element:td
														String
													Element:td
														ACCOUNT ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														CHARACTER ID
													Element:td
														ACCOUNT_ID
													Element:tr
													Element:td
														Long
													Element:td
														CHARACTER LEVEL
													Element:td
														If Generic Character then Account Level.
													Element:tr
													Element:td
														Long
													Element:td
														SHARD ID
													Element:td
														0
													Element:tr
													Element:td
														Long
													Element:td
														AREA ID
													Element:td
														0
													Element:tr
													Element:td
														Float
													Element:td
														POSITION X
													Element:td
														0
													Element:tr
													Element:td
														Float
													Element:td
														POSITION Y
													Element:td
														0
													Element:tr
													Element:td
														Float
													Element:td
														POSITION Z
													Element:td
														0
													Element:tr
													Element:td
														String
													Element:td
														AREA NAME
													Element:td
														NA
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														Java
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a player begins a level
													Element:br
														public void
													Element:em
														aKApi.
														levelBegin(LEVEL_BEGIN_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, SHARD_ID, AREA_ID, POSITION_X, POSITION_Y, POSITION_Z, AREA_NAME);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JavaScript
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a player begins a level
													Element:br
													Element:em
														aKApi.
														levelBegin(LEVEL_BEGIN_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, SHARD_ID, AREA_ID, POSITION_X, POSITION_Y, POSITION_Z, AREA_NAME);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														PHP
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a player begins a level
													Element:br
													Element:em
														$aKApi->
														levelBegin(LEVEL_BEGIN_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, SHARD_ID, AREA_ID, POSITION_X, POSITION_Y, POSITION_Z, AREA_NAME);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JSON
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a player begins a level
													Element:br
												Node:
												(type) c
												(layer)4
													Element:pre
														{ "timestamp":"2013-11-15T13:41:08.559Z", "data":{ "type":27, "account_id":"cool_guy@example.com", "character_id":"Wizard", "character_lvl":52, "shard_id":42, "area_id":2, "position_x":678, "position_y":231, "position_z":517, "area_name”:”Area_Name” } }
												Node:
												(type) c
												(layer)4
													Element:p
														NOTE: All parameters are required in JSON, except “shard_id” which is optional.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Level End (Event ID#28)
													Element:a
												Node:
												(type) c
												(layer)4
													Element:p
														This event records information regarding the time at which a player ends or completes a level. To log when a player ends a level, you need to pass the account and character ID, the character level, the area ID and name, the position, and the timestamp. Optionally, you may pass the shard ID.
												Node:
												(type) c
												(layer)4
													Element:p
														Note that if there is no concept of levels in your application this event need not be used.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Impacted UI Features
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														KPI
													Element:li
														System Metrics (Levels)
													Element:li
														User Metrics (Churn)
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tr
													Element:th
														Type
													Element:th
														Parameter
													Element:th
														Default Value
													Element:tr
													Element:td
														Date
													Element:td
														LEVEL END TIMESTAMP
													Element:td
														(Current Time)
													Element:tr
													Element:td
														String
													Element:td
														ACCOUNT ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														CHARACTER ID
													Element:td
														ACCOUNT_ID
													Element:tr
													Element:td
														Long
													Element:td
														CHARACTER LEVEL
													Element:td
														If Generic Character then Account Level.
													Element:tr
													Element:td
														Long
													Element:td
														SHARD ID
													Element:td
														0
													Element:tr
													Element:td
														Long
													Element:td
														AREA ID
													Element:td
														0
													Element:tr
													Element:td
														Float
													Element:td
														POSITION X
													Element:td
														0
													Element:tr
													Element:td
														Float
													Element:td
														POSITION Y
													Element:td
														0
													Element:tr
													Element:td
														Float
													Element:td
														POSITION Z
													Element:td
														0
													Element:tr
													Element:td
														String
													Element:td
														AREA NAME
													Element:td
														NA
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														Java
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a player ends a level
													Element:br
														public void
													Element:em
														aKApi.
														levelEnd(LEVEL_END_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, SHARD_ID, AREA_ID, POSITION_X, POSITION_Y, POSITION_Z, AREA_NAME);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JavaScript
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a player ends a level
													Element:br
													Element:em
														aKApi.
														levelEnd(LEVEL_END_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, SHARD_ID, AREA_ID, POSITION_X, POSITION_Y, POSITION_Z, AREA_NAME);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														PHP
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a player ends a level
													Element:br
													Element:em
														$aKApi->
														levelEnd(LEVEL_END_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, SHARD_ID, AREA_ID, POSITION_X, POSITION_Y, POSITION_Z, AREA_NAME);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JSON
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a player ends a level
													Element:br
												Node:
												(type) c
												(layer)4
													Element:pre
														{ "timestamp":"2013-11-15T13:50:42.553Z", "data":{ "type":28, "account_id":"cool_guy@example.com", "character_id":"Wizard", "character_lvl":52, "shard_id":42, "area_id":2, "position_x":678, "position_y":231, "position_z":517, "area_name":"Area_Name" } }
												Node:
												(type) c
												(layer)4
													Element:p
														NOTE: All parameters are required in JSON, except “shard_id” which is optional.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Enter Area (Event ID#29)
													Element:a
												Node:
												(type) c
												(layer)4
													Element:p
														An Area refers to a geographical area or region that makes up a larger virtual world. This event records information regarding the time at which a player enters an area. To log when a player enters an area, you need to pass the account and character IDs; area ID, level, and position; and the timestamp. Optionally, you may pass the shard ID.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Impacted UI Features
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														KPI - Optional
													Element:li
														System Metrics (Location/Maps)
													Element:li
														User Metrics (Farming)
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tr
													Element:th
														Type
													Element:th
														Parameter
													Element:th
														Default Value
													Element:tr
													Element:td
														Date
													Element:td
														ENTER AREA TIMESTAMP
													Element:td
														(Current Time)
													Element:tr
													Element:td
														String
													Element:td
														ACCOUNT ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														CHARACTER ID
													Element:td
														ACCOUNT_ID
													Element:tr
													Element:td
														Long
													Element:td
														ENTER AREA CHARACTER LEVEL
													Element:td
														0
													Element:tr
													Element:td
														Long
													Element:td
														SHARD ID
													Element:td
														0
													Element:tr
													Element:td
														Long
													Element:td
														AREA ID
													Element:td
														If AREA_ID is not empty, and AREA_NAME is empty, set AREA_NAME=NA.
													Element:tr
													Element:td
														Float
													Element:td
														ENTER POSITION X
													Element:td
														0
													Element:tr
													Element:td
														Float
													Element:td
														ENTER POSITION Y
													Element:td
														0
													Element:tr
													Element:td
														Float
													Element:td
														ENTER POSITION Z
													Element:td
														0
													Element:tr
													Element:td
														String
													Element:td
														AREA NAME
													Element:td
														If AREA_ID is not empty, and AREA_NAME is empty, set AREA_NAME=NA.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														Java
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a player enters an area
													Element:br
														public void
													Element:em
														aKApi.log
														AreaEnter(ENTER_AREA_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, ENTER_AREA_CHARACTER_LEVEL, SHARD_ID, AREA_ID, ENTER_POSITION_X, ENTER_POSITION_Y, ENTER_POSITION_Z, AREA_NAME);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JavaScript
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a player enters an area
													Element:br
													Element:em
														aKApi.log
														AreaEnter(ENTER_AREA_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, ENTER_AREA_CHARACTER_LEVEL, SHARD_ID, AREA_ID, ENTER_POSITION_X, ENTER_POSITION_Y, ENTER_POSITION_Z, AREA_NAME)
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														PHP
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a player enters an area
													Element:br
													Element:em
														$aKApi->log
														AreaEnter(ENTER_AREA_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, ENTER_AREA_CHARACTER_LEVEL, SHARD_ID, AREA_ID, ENTER_POSITION_X, ENTER_POSITION_Y, ENTER_POSITION_Z, AREA_NAME)
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JSON
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a player enters an area
													Element:br
												Node:
												(type) c
												(layer)4
													Element:pre
														{ "timestamp":"2013-11-15T14:04:32.369Z", "data":{ "type":29, "account_id":"cool_guy@example.com", "character_id":"wizard", "character_lvl":52, "shard_id":42, "area_id":200, "position_x":678, "position_y":231, "position_z":517, "area_name":"Area_Name" } }
												Node:
												(type) c
												(layer)4
													Element:p
														NOTE: All parameters are required in JSON, except “shard_id” which is optional.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Exit Area (Event ID#30)
													Element:a
												Node:
												(type) c
												(layer)4
													Element:p
														This event records information regarding the time at which a player exits an area. To log when a player exits an area, you need to pass the account and character IDs; the area level, position, and ID; and the timestamp. Optionally, you may pass the shard ID.
												Node:
												(type) c
												(layer)4
													Element:p
														For related information, see
													Element:em
														Enter Area
														.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Impacted UI Features
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														KPI - Optional
													Element:li
														System Metrics (Levels, Location/Maps)
													Element:li
														User Metrics (Farming)
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tr
													Element:th
														Type
													Element:th
														Parameter
													Element:th
														Default Value
													Element:tr
													Element:td
														Date
													Element:td
														EXIT AREA TIMESTAMP
													Element:td
														(Current Time)
													Element:tr
													Element:td
														String
													Element:td
														ACCOUNT ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														CHARACTER ID
													Element:td
														ACCOUNT_ID
													Element:tr
													Element:td
														Long
													Element:td
														ENTER AREA CHARACTER LEVEL
													Element:td
														0
													Element:tr
													Element:td
														Long
													Element:td
														SHARD ID
													Element:td
														0
													Element:tr
													Element:td
														Long
													Element:td
														AREA ID
													Element:td
														If AREA_ID is not empty, and AREA_NAME is empty, set AREA_NAME=NA.
													Element:tr
													Element:td
														Float
													Element:td
														EXIT POSITION X
													Element:td
														0
													Element:tr
													Element:td
														Float
													Element:td
														EXIT POSITION Y
													Element:td
														0
													Element:tr
													Element:td
														Float
													Element:td
														EXIT POSITION Z
													Element:td
														0
													Element:tr
													Element:td
														String
													Element:td
														AREA NAME
													Element:td
														If AREA_ID is not empty, and AREA_NAME is empty, set AREA_NAME=NA.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														Java
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a player exits an area
													Element:br
														public void
													Element:em
														aKApi.log
														AreaExit(EXIT_AREA_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, EXIT_AREA_CHARACTER_LEVEL, SHARD_ID, AREA_ID, EXIT_POSITION_X, EXIT_POSITION_Y, EXIT_POSITION_Z, AREA_NAME)
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JavaScript
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a player exits an area
													Element:br
													Element:em
														aKApi.log
														AreaExit(ACCOUNT_ID, CHARACTER_ID, SHARD_ID, AREA_ID, CHARACTER_LEVEL, EXIT_POSITION_X, EXIT_POSITION_Y, EXIT_POSITION_Z, AREA_NAME, EXIT_AREA_TIMESTAMP);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														PHP
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a player exits an area
													Element:br
													Element:em
														$aKApi->log
														AreaExit(ACCOUNT_ID, CHARACTER_ID, SHARD_ID, AREA_ID, CHARACTER_LEVEL, EXIT_POSITION_X, EXIT_POSITION_Y, EXIT_POSITION_Z, AREA_NAME, EXIT_AREA_TIMESTAMP);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JSON
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a player exits an area
													Element:br
												Node:
												(type) c
												(layer)4
													Element:pre
														{ "timestamp":"2013-11-15T14:11:05.873Z", "data":{ "type":30, "account_id":"cool_guy@example.com", "character_id":"wizard", "character_lvl":52, "shard_id":42, "area_id":200, "position_x":678, "position_y":231, "position_z":517, "area_name":"Area_Name" } }
												Node:
												(type) c
												(layer)4
													Element:p
														NOTE: All parameters are required in JSON, except “shard_id” which is optional.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Area Dim (Event ID#50)
												Node:
												(type) c
												(layer)4
													Element:p
														For games with geographical areas and maps that make up a larger virtual world, this event records the dimension information about these maps. To log area dimensions, you need to pass the area name and ID, the map label and ID, the min and max positions, as well as the timestamp.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tr
													Element:th
														Type
													Element:th
														Parameter
													Element:th
														Default Value
													Element:tr
													Element:td
														Date
													Element:td
														TIMESTAMP
													Element:td
														(Current Time)
													Element:tr
													Element:td
														String
													Element:td
														AREA NAME
													Element:td
														If AREA ID is not empty and AREA NAME is empty, use NA.
													Element:tr
													Element:td
														Long
													Element:td
														AREA ID
													Element:td
														If AREA ID is empty, and AREA NAME is not empty, use 0.
													Element:tr
													Element:td
														Long
													Element:td
														MAP ID
													Element:td
														0
													Element:tr
													Element:td
														String
													Element:td
														MAP LABEL
													Element:td
														NA
													Element:tr
													Element:td
														Float
													Element:td
														MIN X
													Element:td
														0
													Element:tr
													Element:td
														Float
													Element:td
														MIN Y
													Element:td
														0
													Element:tr
													Element:td
														Float
													Element:td
														MIN Z
													Element:td
														0
													Element:tr
													Element:td
														Float
													Element:td
														MAX X
													Element:td
														0
													Element:tr
													Element:td
														Float
													Element:td
														MAX Y
													Element:td
														0
													Element:tr
													Element:td
														Float
													Element:td
														MAX Z
													Element:td
														0
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														Java
												Node:
												(type) c
												(layer)4
													Element:p
														//Log area dimensions
													Element:br
														public void
													Element:em
														aKApi
														.logAreaDim(TIMESTAMP, AREA_NAME, AREA_ID, MAP_ID, MAP_LABEL, MIN_X, MIN_Y, MIN_Z, MAX_X, MAX_Y, MAX_Z);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JavaScript
												Node:
												(type) c
												(layer)4
													Element:p
														//Log area dimensions
													Element:br
													Element:em
														aKApi
														.logAreaDim(TIMESTAMP, AREA_NAME, AREA_ID, MAP_ID, MAP_LABEL, MIN_X, MIN_Y, MIN_Z, MAX_X, MAX_Y, MAX_Z);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														PHP
												Node:
												(type) c
												(layer)4
													Element:p
														//Log area dimensions
													Element:br
													Element:em
														$aKApi
														->logAreaDim(TIMESTAMP, AREA_NAME, AREA_ID, MAP_ID, MAP_LABEL, MIN_X, MIN_Y, MIN_Z, MAX_X, MAX_Y, MAX_Z);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JSON
												Node:
												(type) c
												(layer)4
													Element:p
														//Log area dimensions
													Element:br
												Node:
												(type) c
												(layer)4
													Element:pre
														{ "timestamp":"2013-11-15T18:13:04.432Z", "data":{ "type":50, "area_name":"NA", "area_id":2.2, "map_id":-1, "map_label":"map label", "min_x":0, "min_y":0, "min_z":0, "max_x":4, "max_y":5, "max_z":6 } }
												Node:
												(type) c
												(layer)4
													Element:p
														NOTE: All parameters are required in JSON, except “min_z” and “max_z” which are optional.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
							Element:strong
								Economic Events
							Element:a
						Node:
						(type) c
						(layer)2
							Element:p
								Economic events include those events that are related to in-game stores and purchases, such as a player's interaction with a store and items within it. Details on how to execute calls to log economic events can be found below for each corresponding event.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:big
								Virtual Currency will be automatically initialized upon virtual currency transactions.
							Element:strong
								Note:
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								!!!!
							Element:strong
								Initialize Virtual Currency (Event ID#14)
							Element:a
								- Automatically Created - No Need To Implement.
							Element:span
								This event records information regarding which currencies players can use in exchange for in-game virtual items or resources. Typically, virtual currencies have an exchange rate that captures their corresponding value in real world currency, such as US Dollars, Yen, Euros, etc. To log virtual currencies, you need to pass the virtual currency label and timestamp.
							Element:span
							Element:big
							Element:strong
								Impacted UI Features
							Element:span
								*KPI
							Element:span
								*User Metrics (Churn)
							Element:span
								*Basic Package (Summary)
							Element:span
							Element:big
							Element:strong
								Parameters
							Element:span
								|| border=1 rules=rows frame=hsides
							Element:span
								||! Type ||! Parameter ||! Default Value ||
							Element:span
								||Date ||TIMESTAMP ||(Current Time)||
							Element:span
								||String ||VIRTUAL CURRENCY LABEL ||
							Element:em
								No Default Value
								||
							Element:span
							Element:big
							Element:strong
								Sample Use
							Element:span
								*Java
							Element:span
								//Log virtual currency
							Element:br
							Element:span
								public void
							Element:em
								aKApi.
								loadVirtualCurrency(TIMESTAMP, VIRTUAL_CURRENCY_LABEL);
							Element:span
								*JavaScript
							Element:span
								//Log virtual currency
							Element:br
							Element:span
							Element:em
								aKApi.
								loadVirtualCurrency(TIMESTAMP, VIRTUAL_CURRENCY_LABEL);
							Element:span
								*PHP
							Element:span
								//Log virtual currency
							Element:br
							Element:span
							Element:em
								$aKApi->
								loadVirtualCurrency(TIMESTAMP, VIRTUAL_CURRENCY_LABEL);
							Element:span
								*JSON
							Element:span
								//Log virtual currency
							Element:br
							Element:span
								{
							Element:span
								"timestamp":"2013-11-14T16:57:39.193Z",
							Element:span
								"data":{
							Element:span
								"type":14,
							Element:span
								"virtual_currency_label":"MUCHA"
							Element:span
								}
							Element:span
								}
							Element:span
								NOTE: All parameters are required in JSON.
							Element:a
								Back to Top
							Element:span
								----
							Element:a
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Store Create (Event ID#35)
												Node:
												(type) c
												(layer)4
													Element:p
														For games that allow players to setup an in-game store where they can sell items, this event records information regarding the creation of an in-game store. To log when a store is created, you need to pass the store ID and description, as well as the address, city, state, country, zip code, and timestamp.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:strong
														Note
														: You must log the store creation information before any log or load command references the store ID.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tr
													Element:th
														Type
													Element:th
														Parameter
													Element:th
														Default Value
													Element:tr
													Element:td
														Date
													Element:td
														UPDATED TIMESTAMP
													Element:td
														(Current Time)
													Element:tr
													Element:td
														Long
													Element:td
														STORE ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														STORE DESCRIPTION
													Element:td
														NA
													Element:tr
													Element:td
														String
													Element:td
														MAP REAL ADDRESS
													Element:td
														NA
													Element:tr
													Element:td
														String
													Element:td
														MAP REAL CITY
													Element:td
														NA
													Element:tr
													Element:td
														String
													Element:td
														MAP REAL STATE
													Element:td
														NA
													Element:tr
													Element:td
														String
													Element:td
														MAP REAL COUNTRY
													Element:td
														NA
													Element:tr
													Element:td
														String
													Element:td
														MAP REAL POSTAL CODE
													Element:td
														0
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														Java
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a store is created
													Element:br
														public void
													Element:em
														aKApi
														.storeCreate(UPDATED_TIMESTAMP, STORE_ID, STORE_DESCRIPTION, MAP_REAL_ADDRESS, MAP_REAL_CITY, MAP_REAL_STATE, MAP_REAL_COUNTRY, MAP_REAL_POSTAL_CODE);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JavaScript
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a store is created
													Element:br
														aKApi.''storeCreate(UPDATED_TIMESTAMP, STORE_ID, STORE_DESCRIPTION, MAP_REAL_ADDRESS, MAP_REAL_CITY, MAP_REAL_STATE, MAP_REAL_COUNTRY, MAP_REAL_POSTAL_CODE);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														PHP
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a store is created
													Element:br
													Element:em
														$aKApi
														->storeCreate(UPDATED_TIMESTAMP, STORE_ID, STORE_DESCRIPTION, MAP_REAL_ADDRESS, MAP_REAL_CITY, MAP_REAL_STATE, MAP_REAL_COUNTRY, MAP_REAL_POSTAL_CODE);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JSON
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a store is created
													Element:br
												Node:
												(type) c
												(layer)4
													Element:pre
														{ "timestamp":"2013-11-15T15:03:32.064Z", "data":{ "type":35, "store_id":8729, "store_desc":"the cool store", "map_real_address":"123 Fake St", "map_real_city":"Walla Walla", "map_real_state":"Tuvalu", "map_real_country":"United States", "map_real_postal_code":"55667" } }
												Node:
												(type) c
												(layer)4
													Element:p
														NOTE: All parameters are required in JSON.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Store Delete (Event ID#36)
												Node:
												(type) c
												(layer)4
													Element:p
														This event records information regarding the deletion of an in-game store. To log when a store is deleted, you need to pass the store ID and timestamp.
												Node:
												(type) c
												(layer)4
													Element:p
														For related information, see
													Element:a
														Store Create
														.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tr
													Element:th
														Type
													Element:th
														Parameter
													Element:th
														Default Value
													Element:tr
													Element:td
														Date
													Element:td
														UPDATED TIMESTAMP
													Element:td
														(Current Time)
													Element:tr
													Element:td
														String
													Element:td
														STORE ID
													Element:td
													Element:em
														No Default Value
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														Java
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a store is deleted
													Element:br
														public void
													Element:em
														aKApi
														.StoreDelete(UPDATED_TIMESTAMP, STORE_ID);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JavaScript
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a store is deleted
													Element:br
													Element:em
														aKApi
														.StoreDelete(UPDATED_TIMESTAMP, STORE_ID);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														PHP
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a store is deleted
													Element:br
													Element:em
														$aKApi
														->StoreDelete(UPDATED_TIMESTAMP, STORE_ID);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JSON
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a store is deleted
													Element:br
												Node:
												(type) c
												(layer)4
													Element:pre
														{ "timestamp":"2013-11-15T15:11:15.847Z", "data":{ "type":36, "store_id":8729 } }
												Node:
												(type) c
												(layer)4
													Element:p
														NOTE: All parameters are required in JSON.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Buy Store Item (Event ID#37)
													Element:a
												Node:
												(type) c
												(layer)4
													Element:p
														This event records information regarding item purchases from an in-game store and includes details on the type of currency used. To log when a player buys a store item, you need to pass the account, character, and store IDs; the shard ID; the recipient account and character IDs; the item ID, name, and price; the currency type and value; and the timestamp. Optionally, you may pass the name of the virtual currency and the virtual currency count.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Impacted UI Features
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														KPI
													Element:li
														User Metrics (Churn)
													Element:li
														Basic Package (Summary)
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tr
													Element:th
														Type
													Element:th
														Parameter
													Element:th
														Default Value
													Element:tr
													Element:td
														Date
													Element:td
														EVENT TIMESTAMP
													Element:td
														(Current Time)
													Element:tr
													Element:td
														String
													Element:td
														SENDER ACCOUNT ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														SENDER CHARACTER ID
													Element:td
														ACCOUNT_ID
													Element:tr
													Element:td
														String
													Element:td
														RECEIVER ACCOUNT ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														RECEIVER CHARACTER ID
													Element:td
														RECIPIENT_ACCOUNT_ID
													Element:tr
													Element:td
														Long
													Element:td
														SHARD ID
													Element:td
														0
													Element:tr
													Element:td
														Long
													Element:td
														STORE ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														Long
													Element:td
														ITEM ID
													Element:td
														If Item ID is empty and Item Name is not empty, use 0.
													Element:tr
													Element:td
														String
													Element:td
														ITEM NAME
													Element:td
														If Item ID is not empty and Item Name is empty, use NA.
													Element:tr
													Element:td
														Float
													Element:td
														ITEM PRICE
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														Integer
													Element:td
														CURRENCY TYPE
													Element:td
													Element:em
														No Default Value
														*
													Element:tr
													Element:td
														String
													Element:td
														VIRTUAL CURRENCY NAME
													Element:td
														If Currency Type is 1 then mandatory, else NULL.
													Element:tr
													Element:td
														Float
													Element:td
														CURRENCY VALUE
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														Integer
													Element:td
														VIRTUAL CURRENCY COUNT
													Element:td
														Null
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														*Currency Type must be 0 or 1, where 0 equals 'Real' and 1 equals 'Virtual Currency'.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														Java
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a player buys a store item
													Element:br
														public void
													Element:em
														aKApi.
														storeBuyItem(EVENT_TIMESTAMP, SENDER_ACCOUNT_ID, SENDER_CHARACTER_ID, RECEIVER_ACCOUNT_ID, RECEIVER_CHARACTER_ID, SHARD_ID, STORE_ID, ITEM_ID, ITEM_NAME, ITEM_PRICE, CURRENCY_TYPE, VIRTUAL_CURRENCY_NAME, CURRENCY_VALUE, VIRTUAL_CURRENCY_COUNT);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JavaScript
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a player buys a store item
													Element:br
													Element:em
														aKApi.
														storeBuyItem(EVENT_TIMESTAMP, SENDER_ACCOUNT_ID, SENDER_CHARACTER_ID, RECEIVER_ACCOUNT_ID, RECEIVER_CHARACTER_ID, SHARD_ID, STORE_ID, ITEM_ID, ITEM_NAME, ITEM_PRICE, CURRENCY_TYPE, VIRTUAL_CURRENCY_NAME, CURRENCY_VALUE, VIRTUAL_CURRENCY_COUNT);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														PHP
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a player buys a store item
													Element:br
														$aKApi->storeBuyItem(EVENT_TIMESTAMP, SENDER_ACCOUNT_ID, SENDER_CHARACTER_ID, RECEIVER_ACCOUNT_ID, RECEIVER_CHARACTER_ID, SHARD_ID, STORE_ID, ITEM_ID, ITEM_NAME, ITEM_PRICE, CURRENCY_TYPE, VIRTUAL_CURRENCY_NAME, CURRENCY_VALUE, VIRTUAL_CURRENCY_COUNT);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JSON
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a player buys a store item
													Element:br
												Node:
												(type) c
												(layer)4
													Element:pre
														{ "timestamp":"2013-11-15T15:18:44.377Z", "data":{ "type":37, "sender_account_id":"cool_guy@example.com", "sender_character_id":"Wizard", "receiver_account_id":"small_cat@example.com", "receiver_character_id":"Wizard", "shard_id":42, "store_id":1, "item_id":66, "item_name":"The Blaster Gun", "item_price":3, "currency_type":1, "virtual_currency_label":"MCH", "currency_value”:”4”, "virtual_currency_count”:1 } }
												Node:
												(type) c
												(layer)4
													Element:p
														NOTE: All parameters are required in JSON, except “shard_id”, “virtual_currency_label”, and “virtual_currency_count” which are optional.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:p
														Example: If you had $1 per 100 tokens, and you bought an item for 200 tokens, you will send:
													Element:br
													Element:br
														Item Price: 200
													Element:br
														Currency Type: 1
													Element:br
														Virtual Currency Name: Tokens
													Element:br
														Currency Value: 2
													Element:br
														Virtual Currency Count: 200
													Element:br
													Element:br
														Example: If a user buys an item using $5 in real money then send:
													Element:br
													Element:br
														Item Price: 5
													Element:br
														Currency Type: 0
													Element:br
														Virtual Currency Name: (null)
													Element:br
														Currency Value: 5
													Element:br
														Virtual Currency Count: 0
													Element:br
													Element:br
														Example: If a user buys an item for 500 tokens send:
													Element:br
													Element:br
														Item Price: 500
													Element:br
														Currency Type: 1
													Element:br
														Virtual Currency Name: Tokens
													Element:br
														Currency Value: 0
													Element:br
														Virtual Currency Count: 500
													Element:br
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Store Login (Event ID#38)
												Node:
												(type) c
												(layer)4
													Element:p
														This event records information regarding the time at which a player logs in to an in-game virtual store. To log when a player logs into a store, you need to pass the account, character, and store IDs; and the timestamp. Optionally, you may pass the shard ID.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tr
													Element:th
														Type
													Element:th
														Parameter
													Element:th
														Default Value
													Element:tr
													Element:td
														Date
													Element:td
														EVENT TIMESTAMP
													Element:td
														(Current Time)
													Element:tr
													Element:td
														String
													Element:td
														ACCOUNT ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														CHARACTER ID
													Element:td
														ACCOUNT ID
													Element:tr
													Element:td
														Long
													Element:td
														SHARD ID
													Element:td
														0
													Element:tr
													Element:td
														Long
													Element:td
														STORE ID
													Element:td
													Element:em
														No Default Value
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														Java
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a player logs in to a store
													Element:br
														public void
													Element:em
														aKApi
														.storeLogin(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, STORE_ID);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JavaScript
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a player logs in to a store
													Element:br
													Element:em
														aKApi
														.storeLogin(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, STORE_ID);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														PHP
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a player logs in to a store
													Element:br
													Element:em
														$aKApi
														->storeLogin(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, STORE_ID);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JSON
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a player logs in to a store
													Element:br
												Node:
												(type) c
												(layer)4
													Element:pre
														{ "timestamp":"2013-11-15T15:31:43.299Z", "data":{ "type":38, "account_id":"cool_guy@example.com", "character_id":"Wizard", "shard_id":42, "store_id":1 } }
												Node:
												(type) c
												(layer)4
													Element:p
														NOTE: All parameters are required in JSON, except “shard_id” which is optional.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Store Logout (Event ID#39)
												Node:
												(type) c
												(layer)4
													Element:p
														This event records information regarding the time at which a player logs out of an in- game virtual store. To log when a player logs out of a store, you need to pass the account, character, and store IDs; and the timestamp. Optionally you may pass the shard ID.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tr
													Element:th
														Type
													Element:th
														Parameter
													Element:th
														Default Value
													Element:tr
													Element:td
														Date
													Element:td
														EVENT TIMESTAMP
													Element:td
														(Current Time)
													Element:tr
													Element:td
														String
													Element:td
														ACCOUNT ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														CHARACTER ID
													Element:td
														ACCOUNT ID
													Element:tr
													Element:td
														Long
													Element:td
														SHARD ID
													Element:td
														0
													Element:tr
													Element:td
														Long
													Element:td
														STORE ID
													Element:td
													Element:em
														No Default Value
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														Java
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a player logs out of a store
													Element:br
														public void
													Element:em
														aKApi
														.storeLogout(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, STORE_ID);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JavaScript
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a player logs out of a store
													Element:br
													Element:em
														aKApi
														.storeLogout(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, STORE_ID);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														PHP
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a player logs out of a store
													Element:br
													Element:em
														$aKApi
														->storeLogout(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, STORE_ID);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JSON
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a player logs out of a store
													Element:br
												Node:
												(type) c
												(layer)4
													Element:pre
														{ "timestamp":"2013-11-15T15:39:58.675Z", "data":{ "type":39, "account_id":"cool_guy@example.com", "character_id":"Wizard", "shard_id":42, "store_id":1 } }
												Node:
												(type) c
												(layer)4
													Element:p
														NOTE: All parameters are required in JSON, except “shard_id” which is optional.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Store Selection / Add to Cart (Event ID#40)
												Node:
												(type) c
												(layer)4
													Element:p
														This event records information regarding when an item is selected or added to a player's cart. Note that this event may be a pre-requisite for buying an item; however it is not the same as buying an item. To log when a player selects a store item, you need to pass the account, character, and store IDs; the item name, type, and ID; and the timestamp.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tr
													Element:th
														Type
													Element:th
														Parameter
													Element:th
														Default Value
													Element:tr
													Element:td
														Date
													Element:td
														SELECTION TIMESTAMP
													Element:td
														(Current Time)
													Element:tr
													Element:td
														String
													Element:td
														ACCOUNT ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														CHARACTER ID
													Element:td
														ACCOUNT ID
													Element:tr
													Element:td
														Long
													Element:td
														STORE ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														Long
													Element:td
														ITEM ID
													Element:td
														If ITEM NAME is not empty, defaults to 0. Otherwise mandatory.
													Element:tr
													Element:td
														String
													Element:td
														ITEM NAME
													Element:td
														If ITEM ID is not empty, defaults to NA. Otherwise mandatory.
													Element:tr
													Element:td
														String
													Element:td
														ITEM TYPE
													Element:td
														Other
													Element:a
														(See Appendix A for more types)
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														Java
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a player selects a store item
													Element:br
														public void
													Element:em
														aKApi
														.storeAddToCart(SELECTION_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, STORE_ID, ITEM_ID, ITEM_NAME, ITEM_TYPE);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JavaScript
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a player selects a store item
													Element:br
													Element:em
														aKApi
														.storeAddToCart(SELECTION_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, STORE_ID, ITEM_ID, ITEM_NAME, ITEM_TYPE);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														PHP
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a player selects a store item
													Element:br
													Element:em
														$aKApi
														->storeAddToCart(SELECTION_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, STORE_ID, ITEM_ID, ITEM_NAME, ITEM_TYPE);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JSON
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a player selects a store item
													Element:br
												Node:
												(type) c
												(layer)4
													Element:pre
														{ "timestamp":"2013-11-15T16:01:45.370Z", "data":{ "type":40, "account_id":"cool_guy@example.com", "character_id":"Wizard", "store_id":1, "item_id":66, "item_name":"Sword", "item_type":"Weapon" } }
												Node:
												(type) c
												(layer)4
													Element:p
														NOTE: All parameters are required in JSON.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
							Element:strong
								Transaction Events
							Element:a
						Node:
						(type) c
						(layer)2
							Element:p
								Transaction events include those events that are related to economic events outside of the game, such as when an item is purchased outside of the developer game store, or when a subscription changes. Details on how to execute calls to log transaction events can be found below for each corresponding event.
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Subscription Change (Event ID#3)
													Element:a
												Node:
												(type) c
												(layer)4
													Element:p
														This event records a change in subscription type (e.g. from free play to a paid subscriber or premium player). Subscription changes are only applicable to games with subscriptions, not free-to-play (F2P) games. To log a change of subscription, you need to pass the user's account ID, subscription status and type, and a timestamp for both subscription and expiry. Optionally, you can also pass the subscription value.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Impacted UI Features
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														KPI
													Element:li
														System Metrics (Items, Levels, Social, NPC, Location/Maps)
													Element:li
														User Metrics (Churn, Farming, Integrity)
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tr
													Element:th
														Type
													Element:th
														Parameter
													Element:th
														Default Value
													Element:tr
													Element:td
														Date
													Element:td
														SUBSCRIPTION TIMESTAMP
													Element:td
														(Current Time)
													Element:tr
													Element:td
														String
													Element:td
														ACCOUNT ID
													Element:td
														"No Default Value''
													Element:tr
													Element:td
														String
													Element:td
														SUBSCRIPTION STATUS
													Element:td
														Active
													Element:tr
													Element:td
														String
													Element:td
														SUBSCRIPTION TYPE
													Element:td
														Paid
													Element:tr
													Element:td
														Float
													Element:td
														SUBSCRIPTION VALUE
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														Date
													Element:td
														SUBSCRIPTION EXPIRED TIMESTAMP
													Element:td
														(Month From Subscription Date)
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														Java
												Node:
												(type) c
												(layer)4
													Element:p
														//Log a change of subscription
													Element:br
														public void
													Element:em
														aKApi.
														putSubChange(SUBSCRIPTION_TIMESTAMP, ACCOUNT_ID, SUBSCRIPTION_STATUS, SUBSCRIPTION_TYPE, SUBSCRIPTION_VALUE, SUBSCRIPTION_EXPIRED_TIMESTAMP);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JavaScript
												Node:
												(type) c
												(layer)4
													Element:p
														//Log a change of subscription
													Element:br
													Element:em
														aKApi.
														putSubChange(SUBSCRIPTION_TIMESTAMP, ACCOUNT_ID, SUBSCRIPTION_STATUS, SUBSCRIPTION_TYPE, SUBSCRIPTION_VALUE, SUBSCRIPTION_EXPIRED_TIMESTAMP);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														PHP
												Node:
												(type) c
												(layer)4
													Element:p
														//Log a change of subscription
													Element:br
													Element:em
														$aKApi->
														putSubChange(SUBSCRIPTION_TIMESTAMP, ACCOUNT_ID, SUBSCRIPTION_STATUS, SUBSCRIPTION_TYPE, SUBSCRIPTION_VALUE, SUBSCRIPTION_EXPIRED_TIMESTAMP);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JSON
												Node:
												(type) c
												(layer)4
													Element:p
														//Log a change of subscription
													Element:br
												Node:
												(type) c
												(layer)4
													Element:pre
														{ "timestamp":"2013-11-10T06:00:00.000Z", "data":{ "type":3, "account_id":"cool_guy@example.com", "account_status":"Active", "account_sub_type":"Paid", "account_sub_value":10, "account_sub_expires_timestamp":"2016-02-01T06:00:00.000Z" } }
												Node:
												(type) c
												(layer)4
													Element:p
														NOTE: All parameters are required in JSON, except “account_sub_value” which is optional.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Currency Transaction (Event ID#18)
													Element:a
												Node:
												(type) c
												(layer)4
													Element:p
														Logs a Currency Transaction event. Covers all types of transaction in the game or any other environment where real world money was used. Designed To Handle Most Currency Transactions. More Complicated Transactions Can Be Done Within Event #37.
												Node:
												(type) c
												(layer)4
													Element:p
														This event records information regarding transactions in the game or other environments where real world money is used. To log currency transactions, you need to pass the account and character IDs, the transaction and currency types, as well as the timestamp. Optionally, you may pass the shard ID, the virtual currency label, the currency value, the virtual currency count, and the transaction description.
												Node:
												(type) c
												(layer)4
													Element:p
														One common scenario is when a user purchases virtual currency by spending real currency. In this case, you should send this event twice. Once with a TRANSACTION TYPE of 0 and a CURRENCY TYPE of 0 (the user is spending real currency), and then again with a TRANSACTION TYPE of 1 and a CURRENCY TYPE of 1, along with the appropriate VIRTUAL CURRENCY COUNT and LABEL (the user is acquiring virtual currency).
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														Please note that you should only use this event when the Item Transaction (#17) or Store Buy Item (#37) events aren't appropriate. Store Buy Item (#37) should be used in most cases of any type of currency or virtual currency transactions. If currency is being spent to acquire something, it is preferable to use those events so that the purchase can be associated with the item. Do not send the Currency Transaction event in tandem with those events, because the currency transfer will be double counted on your dashboard.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Impacted UI Features
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														KPI
													Element:li
														User Metrics (Churn)
													Element:li
														Basic Package (Summary)
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tr
													Element:th
														Type
													Element:th
														Parameter
													Element:th
														Default Value
													Element:tr
													Element:td
														Date
													Element:td
														EVENT TIMESTAMP
													Element:td
														(Current Time)
													Element:tr
													Element:td
														String
													Element:td
														ACCOUNT ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														CHARACTER ID
													Element:td
														ACCOUNT_ID
													Element:tr
													Element:td
														Long
													Element:td
														SHARD ID
													Element:td
														0
													Element:tr
													Element:td
														Integer
													Element:td
														TRANSACTION TYPE
													Element:td
													Element:em
														No Default Value
														*
													Element:tr
													Element:td
														Integer
													Element:td
														CURRENCY TYPE
													Element:td
													Element:em
														No Default Value
														**
													Element:tr
													Element:td
														String
													Element:td
														VIRTUAL CURRENCY LABEL
													Element:td
														If CURRENCY_TYPE=1 then required; else null.
													Element:tr
													Element:td
														Float
													Element:td
														CURRENCY VALUE
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														TRANSACTION DESCRIPTION
													Element:td
														Truncate if >200
													Element:tr
													Element:td
														Integer
													Element:td
														VIRTUAL CURRENCY COUNT
													Element:td
														Null
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														*Transaction Type must be 0 or 1, where 0 equals 'Spent' and 1 equals 'Acquired'.
													Element:br
													Element:span
														**Currency Type must be 0 or 1, where 0 equals 'Real' and 1 equals 'Virtual Currency'.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														Java
												Node:
												(type) c
												(layer)4
													Element:p
														//Log a currency transaction
													Element:br
														public void
													Element:em
														aKApi.
														logCurrencyTransaction(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, TRANSACTION_TYPE, CURRENCY_TYPE, VIRTUAL_CURRENCY_LABEL, CURRENCY_VALUE, TRANSACTION_DESCRIPTION, VIRTUAL_CURRENCY_COUNT);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JavaScript
												Node:
												(type) c
												(layer)4
													Element:p
														//Log a currency transaction
													Element:br
													Element:em
														aKApi.
														logCurrencyTransaction(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, TRANSACTION_TYPE, CURRENCY_TYPE, VIRTUAL_CURRENCY_LABEL, CURRENCY_VALUE, TRANSACTION_DESCRIPTION, VIRTUAL_CURRENCY_COUNT);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														PHP
												Node:
												(type) c
												(layer)4
													Element:p
														//Log a currency transaction
													Element:br
													Element:em
														$aKApi->
														logCurrencyTransaction(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, TRANSACTION_TYPE, CURRENCY_TYPE, VIRTUAL_CURRENCY_LABEL, CURRENCY_VALUE, TRANSACTION_DESCRIPTION, VIRTUAL_CURRENCY_COUNT);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JSON
												Node:
												(type) c
												(layer)4
													Element:p
														//Log a currency transaction
													Element:br
												Node:
												(type) c
												(layer)4
													Element:pre
														{ "timestamp":"2013-11-14T18:10:14.808Z", "data":{ "type":18, "account_id":"cool_guy@example.com", "character_id":"wizard", "shard_id":42, "transaction_type":0, "currency_type":0, "virtual_currency_label":"mucha", "currency_value":3.45, "transaction_desc":"spend 3.45USD”, "virtual_currency_count:1 } }
												Node:
												(type) c
												(layer)4
													Element:p
														NOTE: All parameters are required in JSON, except “shard_id”, “virtual_currency_label”, “currency_value”, “transaction_desc”, and “virtual_currency_count” which are optional.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														!!!!
													Element:strong
														Economic (Event ID#58)
														- To Be Completed.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														This event records information regarding item purchases, sales, or trades outside of the developer RMT game store. This event requires both an incoming and outgoing value, of which either can be 0. To log an economic event, you need to pass the sender and receiver account and character IDs; the item name and ID; the economic type and value; the currency type and value; along with the timestamp. Optionally, you may pass the shard ID, virtual currency type and count.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
													Element:big
													Element:strong
														Parameters
													Element:span
														|| border=1 rules=rows frame=hsides
													Element:span
														||! Type ||! Parameter ||! Default Value ||
													Element:span
														|| Date || TIMESTAMP || (Current Time) ||
													Element:span
														|| String || SENDER ACCOUNT ID ||
													Element:em
														No Default Value
														||
													Element:span
														|| String || SENDER CHARACTER ID || SENDER ACCOUNT ID ||
													Element:span
														|| String || RECEIVER ACCOUNT ID ||
													Element:em
														No Default Value
														||
													Element:span
														|| String || RECEIVER CHARACTER ID || RECEIVER ACCOUNT ID ||
													Element:span
														|| Long || SHARD ID || 0 ||
													Element:span
														|| Long || ITEM ID || If ITEM ID is empty, and ITEM NAME is not empty, use 0. ||
													Element:span
														|| String || ITEM NAME || If ITEM ID is not empty, and ITEM NAME is empty, use NA. ||
													Element:span
														|| String || ECONOMIC TYPE || Other
													Element:a
														(See Appendix A for more types)
														||
													Element:span
														|| Float || ECONOMIC VALUE ||
													Element:em
														No Default Value
														||
													Element:span
														|| Integer || CURRENCY TYPE ||
													Element:em
														No Default Value
														* ||
													Element:span
														|| String || VIRTUAL CURRENCY TYPE || If CURRENCY TYPE is 1 then mandatory. Otherwise defaults to Null. ||
													Element:span
														|| Float || CURRENCY VALUE ||
													Element:em
														No Default Value
														||
													Element:span
														|| Integer || VIRTUAL CURRENCY COUNT || Null ||
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
													Element:span
														*Currency Type must be 0 or 1, where 0 equals 'Real' and 1 equals 'Virtual Currency'.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														*Java
													Element:span
														//To log that an economic event occurred
													Element:br
													Element:span
														public void
													Element:em
														aKApi
														.logEconomic(TIMESTAMP, SENDER_ACCOUNT_ID, SENDER_CHARACTER_ID, RECEIVER_ACCOUNT_ID, RECEIVER_CHARACTER_ID, SHARD_ID, ITEM_ID, ITEM_NAME, ECONOMIC_TYPE, ECONOMIC_VALUE, CURRENCY_TYPE, VIRTUAL_CURRENCY_TYPE, CURRENCY_VALUE, VIRTUAL_CURRENCY_COUNT) ;
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														*JavaScript
													Element:span
														//To log that an economic event occurred
													Element:br
													Element:span
													Element:em
														aKApi
														.logEconomic(TIMESTAMP, SENDER_ACCOUNT_ID, SENDER_CHARACTER_ID, RECEIVER_ACCOUNT_ID, RECEIVER_CHARACTER_ID, SHARD_ID, ITEM_ID, ITEM_NAME, ECONOMIC_TYPE, ECONOMIC_VALUE, CURRENCY_TYPE, VIRTUAL_CURRENCY_TYPE, CURRENCY_VALUE, VIRTUAL_CURRENCY_COUNT);
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														*PHP
													Element:span
														//To log that an economic event occurred
													Element:br
													Element:span
													Element:em
														$aKApi
														->logEconomic(TIMESTAMP, SENDER_ACCOUNT_ID, SENDER_CHARACTER_ID, RECEIVER_ACCOUNT_ID, RECEIVER_CHARACTER_ID, SHARD_ID, ITEM_ID, ITEM_NAME, ECONOMIC_TYPE, ECONOMIC_VALUE, CURRENCY_TYPE, VIRTUAL_CURRENCY_TYPE, CURRENCY_VALUE, VIRTUAL_CURRENCY_COUNT);
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														*JSON
													Element:span
														//To log that an economic event occurred
													Element:br
													Element:span
														{
													Element:span
														"timestamp":"2013-11-15T18:58:59.893Z",
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:span
														"data":{
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														"type":58,
													Element:span
														"sender_account_id":"cool_guy@example.com",
													Element:span
														"sender_character_id":"advertiser",
													Element:span
														"receiver_account_id":"cguy@aol.com",
													Element:span
														"receiver_character_id":"customer",
													Element:span
														"shard_id":1,
													Element:span
														"item_id":124606,
													Element:span
														"item_name":"Rebate for 124606",
													Element:span
														"economic_type":"rebate",
													Element:span
														"economic_value":52.281000000000006,
													Element:span
														"currency_type":0,
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:span
														"virtual_currency_label":"",
													Element:span
														"currency_value":52.281000000000006,
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														"virtual_currency_count”:1
													Element:span
														}
													Element:span
														}
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														NOTE: All parameters are required in JSON, except “shard_id”, “virtual_currency_label”, and “virtual_currency_count” which are optional.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
													Element:span
														----
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Traffic Source (Event ID#59)
												Node:
												(type) c
												(layer)4
													Element:p
														This event records information regarding where your traffic is coming from, whether it’s from Facebook, an Email Campaign, or Direct Marketing. To log traffic source, you need to pass the account ID, traffic source, and traffic source type, along with the timestamp. Optionally, you may pass the shard ID.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tr
													Element:th
														Type
													Element:th
														Parameter
													Element:th
														Default Value
													Element:tr
													Element:td
														Date
													Element:td
														EVENT TIMESTAMP
													Element:td
														(Current Time)
													Element:tr
													Element:td
														String
													Element:td
														ACCOUNT ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														TRAFFIC SOURCE
													Element:td
														campaign_name | sub_site | publisher_name | sub_publisher
													Element:a
														(See Appendix for more types
													Element:tr
													Element:td
														Long
													Element:td
														SHARD ID
													Element:td
														0
													Element:tr
													Element:td
														String
													Element:td
														TRAFFIC SOURCE TYPE
													Element:td
														publisher_name
													Element:a
														(See Appendix for more types
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														|| String || TRAFFIC SOURCE || Other
													Element:a
														(See Appendix for more types
														||
													Element:span
														|| String || TRAFFIC SOURCE TYPE || Unknown
													Element:a
														(See Appendix for more types
														||
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														Java
												Node:
												(type) c
												(layer)4
													Element:p
														//Log that a traffic source event occurred
													Element:br
														public void
													Element:em
														aKApi
														.logTrafficSource(TIMESTAMP, ACCOUNT_ID, TRAFFIC_SOURCE, SHARD_ID, TRAFFIC_SOURCE_TYPE) ;
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JavaScript
												Node:
												(type) c
												(layer)4
													Element:p
														//Log that a traffic source event occurred
													Element:br
													Element:em
														aKApi
														.logTrafficSource(TIMESTAMP, ACCOUNT_ID, TRAFFIC_SOURCE, SHARD_ID, TRAFFIC_SOURCE_TYPE) ;
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														PHP
												Node:
												(type) c
												(layer)4
													Element:p
														//Log that a traffic source event occurred
													Element:br
													Element:em
														$aKApi
														->logTrafficSource(TIMESTAMP, ACCOUNT_ID, TRAFFIC_SOURCE, SHARD_ID, TRAFFIC_SOURCE_TYPE) ;
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JSON
												Node:
												(type) c
												(layer)4
													Element:p
														//Log that a traffic source event occurred
													Element:br
												Node:
												(type) c
												(layer)4
													Element:pre
														{ "timestamp":"2013-11-15T19:07:30.221Z", "data":{ "type":59, "account_id":"cool_guy@example.com", "traffic_source":"campaign_name | sub_site | publisher_name | sub_publisher", "shard_id":0, "traffic_source_type":"publisher_name" } }
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														{
													Element:span
														"timestamp":"2013-11-15T19:07:30.221Z",
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:span
														"data":{
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														"type":59,
													Element:span
														"account_id":"cool_guy@example.com",
													Element:span
														"traffic_source":"abcTrafficSource",
													Element:span
														"shard_id":42.42,
													Element:span
														"traffic_source_type":"traffic_source_type"
													Element:span
														}
													Element:span
														}
												Node:
												(type) c
												(layer)4
													Element:p
														NOTE: All parameters are required in JSON, except “shard_id” which is optional.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
							Element:strong
								Social Events
							Element:a
						Node:
						(type) c
						(layer)2
							Element:hr
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Social Interactions (Event ID#6)
													Element:a
												Node:
												(type) c
												(layer)4
													Element:p
														This event records social events involving two people and includes all social events that are not covered as
													Element:em
														Group (Entry/Exit) Events
														or
													Element:em
														Friend (Addition/Deletion) Events
														. To log an in-app social event, you need to pass the sender account and character IDs; the receiver account and character IDs; the character levels of both users; the social event name and type; and the timestamp. Optionally, you may pass the shard ID.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Impacted UI Features
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														KPI
													Element:li
														System Metrics (Social)
													Element:li
														Basic Package (Summary)
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tr
													Element:th
														Type
													Element:th
														Parameter
													Element:th
														Default Value
													Element:tr
													Element:td
														Date
													Element:td
														EVENT TIMESTAMP
													Element:td
														(Current Time)
													Element:tr
													Element:td
														String
													Element:td
														ACCOUNT ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														CHARACTER ID
													Element:td
														ACCOUNT_ID
													Element:tr
													Element:td
														Long
													Element:td
														CHARACTER LEVEL
													Element:td
														If Generic Character then Account Level; If no concept of levels then 0.
													Element:tr
													Element:td
														String
													Element:td
														TARGET ACCOUNT ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														TARGET CHARACTER ID
													Element:td
														TARGET_ACCOUNT_ID
													Element:tr
													Element:td
														Long
													Element:td
														TARGET CHARACTER LEVEL
													Element:td
														If Generic Character then Account Level; If no concept of levels then 0.
													Element:tr
													Element:td
														Long
													Element:td
														SHARD ID
													Element:td
														0
													Element:tr
													Element:td
														String
													Element:td
														SOCIAL EVENTS NAME
													Element:td
														"No Default Value''
													Element:tr
													Element:td
														String
													Element:td
														SOCIAL EVENT TYPE
													Element:td
														Other
													Element:a
														(See Appendix for more types)
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														Java
												Node:
												(type) c
												(layer)4
													Element:p
														//Log an in-app social event
													Element:br
														public void
													Element:em
														aKApi.
														logSocialEvent(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, TARGET_ACCOUNT_ID, TARGET_CHARACTER_ID, TARGET_CHARACTER_LEVEL, SHARD_ID, SOCIAL_EVENTS_NAME, SOCIAL_EVENT_TYPE);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
													Element:strong
														JavaScript
												Node:
												(type) c
												(layer)4
													Element:p
														//Log an in-app social event
													Element:br
													Element:em
														aKApi.
														logSocialEvent(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, TARGET_ACCOUNT_ID, TARGET_CHARACTER_ID, TARGET_CHARACTER_LEVEL, SHARD_ID, SOCIAL_EVENTS_NAME, SOCIAL_EVENT_TYPE);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
													Element:strong
														PHP
												Node:
												(type) c
												(layer)4
													Element:p
														//Log an in-app social event
													Element:br
													Element:em
														$aKApi->
														logSocialEvent(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, TARGET_ACCOUNT_ID, TARGET_CHARACTER_ID, TARGET_CHARACTER_LEVEL, SHARD_ID, SOCIAL_EVENTS_NAME, SOCIAL_EVENT_TYPE);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JSON
												Node:
												(type) c
												(layer)4
													Element:p
														//Log an in-app social event
													Element:br
												Node:
												(type) c
												(layer)4
													Element:pre
														{ "timestamp":"2013-11-14T14:28:54.832Z", "data":{ "type":6, "sender_account_id":"cool_guy@example.com", "sender_character_id":"sharer", "sender_character_level":1, "receiver_account_id":"cool_guy1@example.com", "receiver_character_id":"advertiser", "receiver_character_level":1, "shard_id":42, "social_event_name":"rebate_share", "social_event_type":"share" } }
												Node:
												(type) c
												(layer)4
													Element:p
														NOTE: All parameters are required in JSON, except “shard_id” which is optional.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Off-Game Interaction (OGI) Sender (Event ID#7)
												Node:
												(type) c
												(layer)4
													Element:p
														An off-game-interaction refers to an interaction between a player inside the game environment and a person outside the game environment. To log the start of a social interaction outside of the application, you need to pass the sender account and character IDs; the receiver account and character IDs; the interaction category and location; and the event timestamp. Optionally, you may pass the shard ID.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tr
													Element:th
														Type
													Element:th
														Parameter
													Element:th
														Default Value
													Element:tr
													Element:td
														Date
													Element:td
														EVENT TIMESTAMP
													Element:td
														(Current Time)
													Element:tr
													Element:td
														String
													Element:td
														SENDER ACCOUNT ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														SENDER CHARACTER ID
													Element:td
														SENDER ACCOUNT ID
													Element:tr
													Element:td
														String
													Element:td
														RECEIVER ACCOUNT ID
													Element:td
													Element:em
														No Default Value
														*
													Element:tr
													Element:td
														String
													Element:td
														RECEIVER CHARACTER ID
													Element:td
														RECEIVER ACCOUNT ID
													Element:tr
													Element:td
														Long
													Element:td
														SHARD ID
													Element:td
														0
													Element:tr
													Element:td
														String
													Element:td
														OGI LOCATION
													Element:td
														Other
													Element:tr
													Element:td
														String
													Element:td
														OGI CATEGORY
													Element:td
													Element:em
														No Default Value
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														*Receiver Account ID can be an ID (e.g. Facebook or Email).
													Element:br
													Element:br
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														Java
												Node:
												(type) c
												(layer)4
													Element:p
														//Log the start of an off-game-interaction
													Element:br
														public void
													Element:em
														aKApi
														.logOgiSend(EVENT_TIMESTAMP, SENDER_ACCOUNT_ID, SENDER_CHARACTER_ID, RECEIVER_ACCOUNT_ID, RECEIVER_CHARACTER_ID, SHARD_ID,
													Element:span
														OGI_LOCATION, OGI_CATEGORY);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JavaScript
												Node:
												(type) c
												(layer)4
													Element:p
														//Log the start of an off-game-interaction
													Element:br
													Element:em
														aKApi
														.logOgiSend(EVENT_TIMESTAMP, SENDER_ACCOUNT_ID, SENDER_CHARACTER_ID, RECEIVER_ACCOUNT_ID, RECEIVER_CHARACTER_ID, SHARD_ID, OGI_LOCATION,
													Element:span
														OGI_CATEGORY);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														PHP
												Node:
												(type) c
												(layer)4
													Element:p
														//Log the start of an off-game-interaction
													Element:br
													Element:em
														$aKApi
														->logOgiSend(EVENT_TIMESTAMP, SENDER_ACCOUNT_ID, SENDER_CHARACTER_ID, RECEIVER_ACCOUNT_ID, RECEIVER_CHARACTER_ID, SHARD_ID, OGI_LOCATION, OGI_CATEGORY);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JSON
												Node:
												(type) c
												(layer)4
													Element:p
														//Log the start of an off-game-interaction
													Element:br
												Node:
												(type) c
												(layer)4
													Element:pre
														{ "timestamp":"2013-11-14T14:48:56.718Z", "data":{ "type":7, "sender_account_id":"cool_guy@example.com", "sender_character_id":"wizard", "receiver_account_id":"small_cat@example.com", "receiver_character_id":"mage", "shard_id":42, "ogi_location":"https://www.facebook.com/wall/42", "ogi_category":"wall post" } }
												Node:
												(type) c
												(layer)4
													Element:p
														NOTE: All parameters are required in JSON, except “shard_id” which is optional.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Off-Game-Interaction (OGI) Receiver (Event ID#8)
												Node:
												(type) c
												(layer)4
													Element:p
														This event records information regarding how the receiver of an off-game-interaction acted in response. To log the receiver's response to a social interaction outside of the application, you need to pass the sender account and character IDs, along with the receiver account and character IDs, shard ID, and event timestamp. As well, you'll need to pass the interaction category, location, and receiver response. Optionally, you may pass the shard ID.
												Node:
												(type) c
												(layer)4
													Element:p
														For related information, see Off-Game-Interaction Sender.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tr
													Element:th
														Type
													Element:th
														Parameter
													Element:th
														Default Value
													Element:tr
													Element:td
														Date
													Element:td
														EVENT TIMESTAMP
													Element:td
														(Current Time)
													Element:tr
													Element:td
														String
													Element:td
														SENDER ACCOUNT ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														SENDER CHARACTER ID
													Element:td
														SENDER ACCOUNT ID
													Element:tr
													Element:td
														String
													Element:td
														RECEIVER ACCOUNT ID
													Element:td
													Element:em
														No Default Value
														*
													Element:tr
													Element:td
														String
													Element:td
														RECEIVER CHARACTER ID
													Element:td
														RECEIVER ACCOUNT ID
													Element:tr
													Element:td
														Long
													Element:td
														SHARD ID
													Element:td
														0
													Element:tr
													Element:td
														String
													Element:td
														OGI CATEGORY
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														OGI LOCATION
													Element:td
														Other
													Element:tr
													Element:td
														String
													Element:td
														OGI RECEIVER ACTION
													Element:td
														Other
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														*Receiver Account ID can be an ID (e.g. Facebook or Email).
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														Java
												Node:
												(type) c
												(layer)4
													Element:p
														// Log the end of and response to an off-game-interaction
													Element:br
														public void
													Element:em
														aKApi
														.logOgiRecv(EVENT_TIMESTAMP, SENDER_ACCOUNT_ID, SENDER_CHARACTER_ID, RECEIVER_ACCOUNT_ID, RECEIVER_CHARACTER_ID, SHARD_ID, OGI_CATEGORY, OGI_LOCATION, OGI_RECEIVER_ACTION);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JavaScript
												Node:
												(type) c
												(layer)4
													Element:p
														// Log the end of and response to an off-game-interaction
													Element:br
													Element:em
														aKApi
														.logOgiRecv(EVENT_TIMESTAMP, SENDER_ACCOUNT_ID, SENDER_CHARACTER_ID, RECEIVER_ACCOUNT_ID, RECEIVER_CHARACTER_ID, SHARD_ID, OGI_CATEGORY, OGI_LOCATION, OGI_RECEIVER_ACTION);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														PHP
												Node:
												(type) c
												(layer)4
													Element:p
														// Log the end of and response to an off-game-interaction
													Element:br
													Element:em
														$aKApi
														->logOgiRecv(EVENT_TIMESTAMP, SENDER_ACCOUNT_ID, SENDER_CHARACTER_ID, RECEIVER_ACCOUNT_ID, RECEIVER_CHARACTER_ID, SHARD_ID, OGI_CATEGORY, OGI_LOCATION, OGI_RECEIVER_ACTION);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JSON
												Node:
												(type) c
												(layer)4
													Element:p
														// Log the end of and response to an off-game-interaction
													Element:br
												Node:
												(type) c
												(layer)4
													Element:pre
														{ "timestamp":"2013-11-14T15:00:53.806Z", "data":{ "type":8, "sender_account_id":"cool_guy@example.com", "sender_character_id":"wizard", "receiver_account_id":"small_cat@example.com", "receiver_character_id":"mage", "shard_id":42, "ogi_category":"wall post", "ogi_location":"https://www.facebook.com/wall/42", “ogi_receiver_action”:”other”” } }
												Node:
												(type) c
												(layer)4
													Element:p
														NOTE: All parameters are required in JSON, except “shard_id” which is optional.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Message (Event ID#20)
													Element:a
												Node:
												(type) c
												(layer)4
													Element:p
														This event records in-game messages between players for multiple channels of communication such as in-game chat, in-game mail, or a message broadcast to a group. To log an in-game message, you need to pass the sender account and character IDs; the receiver account and character IDs; the channel label; the message character count; and the timestamp. Optionally, you may pass the shard ID and the message description.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Impacted UI Features
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														System Metrics (Levels)
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tr
													Element:th
														Type
													Element:th
														Parameter
													Element:th
														Default Value
													Element:tr
													Element:td
														Date
													Element:td
														EVENT TIMESTAMP
													Element:td
														(Current Time)
													Element:tr
													Element:td
														String
													Element:td
														FROM ACCOUNT ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														FROM CHARACTER ID
													Element:td
														FROM_ACCOUNT_ID
													Element:tr
													Element:td
														String
													Element:td
														TO ACCOUNT ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														TO CHARACTER ID
													Element:td
														TO_ACCOUNT_ID
													Element:tr
													Element:td
														Long
													Element:td
														SHARD ID
													Element:td
														0
													Element:tr
													Element:td
														String
													Element:td
														CHANNEL LABEL
													Element:td
														Other
													Element:a
														(See Appendix for more types)
													Element:tr
													Element:td
														String
													Element:td
														MESSAGE DESCRIPTION
													Element:td
														Null
													Element:tr
													Element:td
														Long
													Element:td
														CHAR COUNT
													Element:td
														1
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														Java
												Node:
												(type) c
												(layer)4
													Element:p
														//Log an in-game message
													Element:br
														public void
													Element:em
														aKApi.
														logMessage(EVENT_TIMESTAMP, FROM_ACCOUNT_ID, FROM_CHARACTER_ID, TO_ACCOUNT_ID, TO_CHARACTER_ID, SHARD_ID, CHANNEL_LABEL, MESSAGE_DESCRIPTION, CHAR_COUNT);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JavaScript
												Node:
												(type) c
												(layer)4
													Element:p
														//Log an in-game message
													Element:br
													Element:em
														aKApi.
														logMessage(EVENT_TIMESTAMP, FROM_ACCOUNT_ID, FROM_CHARACTER_ID, TO_ACCOUNT_ID, TO_CHARACTER_ID, SHARD_ID, CHANNEL_LABEL, MESSAGE_DESCRIPTION, CHAR_COUNT);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														PHP
												Node:
												(type) c
												(layer)4
													Element:p
														//Log an in-game message
													Element:br
														$aKApi->logMessage(EVENT_TIMESTAMP, FROM_ACCOUNT_ID, FROM_CHARACTER_ID, TO_ACCOUNT_ID, TO_CHARACTER_ID, SHARD_ID, CHANNEL_LABEL, MESSAGE_DESCRIPTION, CHAR_COUNT);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JSON
												Node:
												(type) c
												(layer)4
													Element:p
														//Log an in-game message
													Element:br
												Node:
												(type) c
												(layer)4
													Element:pre
														{ "timestamp":"2013-11-14T18:46:02.842Z", "data":{ "type":20, "sender_account_id":"cool_guy@example.com", "sender_character_id":"Wizard", "receiver_account_id":"cool_guy@example.com", "receiver_character_id":"Wizard", "shard_id":0, "message_ch_label":"Group:Pre-Defined", "message_desc":"A guild chat message", "message_char_count":140 } }
												Node:
												(type) c
												(layer)4
													Element:p
														NOTE: All parameters are required in JSON, except “shard_id” and “message_desc” which are optional.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Recruitment Send (Event ID#33)
													Element:a
												Node:
												(type) c
												(layer)4
													Element:p
														For games that allow players to invite other players to join them in finishing certain tasks or activities, this event records information regarding the recruitment request. To log a recruitment request, you need to pass the sender account and character IDs; the receiver account and character IDs; the recruitment type; and timestamp.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Impacted UI Features
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														Basic Package (Summary)
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tr
													Element:th
														Type
													Element:th
														Parameter
													Element:th
														Default Value
													Element:tr
													Element:td
														Date
													Element:td
														TIMESTAMP
													Element:td
														(Current Time)
													Element:tr
													Element:td
														String
													Element:td
														SENDER ACCOUNT ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														SENDER CHARACTER ID
													Element:td
														SENDER_ACCOUNT_ID
													Element:tr
													Element:td
														String
													Element:td
														RECEIVER ACCOUNT ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														RECEIVER CHARACTER ID
													Element:td
														RECEIVER_ACCOUNT_ID
													Element:tr
													Element:td
														String
													Element:td
														RECRUITMENT TYPE
													Element:td
														Other
													Element:a
														(See Appendix for more types)
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														Java
												Node:
												(type) c
												(layer)4
													Element:p
														//Log a recruitment request
													Element:br
														public void
													Element:em
														aKApi.
														recruitmentSend(EVENT_TIMESTAMP, SENDER_ACCOUNT_ID, SENDER_CHARACTER_ID, RECEIVER_ACCOUNT_ID, RECEIVER_CHARACTER_ID, RECRUITMENT_TYPE);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JavaScript
												Node:
												(type) c
												(layer)4
													Element:p
														//Log a recruitment request
													Element:br
													Element:em
														aKApi.
														recruitmentSend(EVENT_TIMESTAMP, SENDER_ACCOUNT_ID, SENDER_CHARACTER_ID, RECEIVER_ACCOUNT_ID, RECEIVER_CHARACTER_ID, RECRUITMENT_TYPE);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														PHP
												Node:
												(type) c
												(layer)4
													Element:p
														//Log a recruitment request
													Element:br
													Element:em
														$aKApi->
														recruitmentSend(EVENT_TIMESTAMP, SENDER_ACCOUNT_ID, SENDER_CHARACTER_ID, RECEIVER_ACCOUNT_ID, RECEIVER_CHARACTER_ID, RECRUITMENT_TYPE);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JSON
												Node:
												(type) c
												(layer)4
													Element:p
														//Log a recruitment request
													Element:br
												Node:
												(type) c
												(layer)4
													Element:pre
														{ "timestamp":"2013-11-15T14:37:55.545Z", "data":{ "type":33, "sender_account_id":"cool_guy@example.com", "sender_character_id":"Wizard", "receiver_account_id":"small_cat@example.com", "receiver_character_id":"Wizard", "recruitment_type":"mobile ad" } }
												Node:
												(type) c
												(layer)4
													Element:p
														NOTE: All parameters are required in JSON.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Recruitment Receive Action (Event ID#34)
													Element:a
												Node:
												(type) c
												(layer)4
													Element:p
														This event records information regarding a player's response to a recruitment request, for example, was the request accepted or declined. To log a recruitment request response, you need to pass the sender account and character IDs; the receiver account and character IDs; the recruitment type and outcome; and the timestamp.
												Node:
												(type) c
												(layer)4
													Element:p
														For related information, see
													Element:a
														.
													Element:em
														Recruitment Send
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Impacted UI Features
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														Basic Package (Summary)
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tr
													Element:th
														Type
													Element:th
														Parameter
													Element:th
														Default Value
													Element:tr
													Element:td
														Date
													Element:td
														TIMESTAMP
													Element:td
														(Current Time)
													Element:tr
													Element:td
														String
													Element:td
														SENDER ACCOUNT ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														SENDER CHARACTER ID
													Element:td
														SENDER_ACCOUNT_ID
													Element:tr
													Element:td
														String
													Element:td
														RECEIVER ACCOUNT ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														RECEIVER CHARACTER ID
													Element:td
														RECEIVER_ACCOUNT_ID
													Element:tr
													Element:td
														String
													Element:td
														RECRUITMENT TYPE
													Element:td
														Other
													Element:a
														(See Appendix for more types)
													Element:tr
													Element:td
														String
													Element:td
														RECRUITMENT OUTCOME
													Element:td
														Rejected*
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														*Recruitment Outcome default is 'Rejected', alternate options also include 'Accepted'.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														Java
												Node:
												(type) c
												(layer)4
													Element:p
														//Log a recruitment request response
													Element:br
														public void
													Element:em
														aKApi.
														recruitmentReceive(EVENT_TIMESTAMP, SENDER_ACCOUNT_ID, SENDER_CHARACTER_ID, RECEIVER_ACCOUNT_ID, RECEIVER_CHARACTER_ID, RECRUITMENT_TYPE, RECRUITMENT_OUTCOME);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JavaScript
												Node:
												(type) c
												(layer)4
													Element:p
														//Log a recruitment request response
													Element:br
													Element:em
														aKApi.
														recruitmentReceive(EVENT_TIMESTAMP, SENDER_ACCOUNT_ID, SENDER_CHARACTER_ID, RECEIVER_ACCOUNT_ID, RECEIVER_CHARACTER_ID, RECRUITMENT_TYPE, RECRUITMENT_OUTCOME);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														PHP
												Node:
												(type) c
												(layer)4
													Element:p
														//Log a recruitment request response
													Element:br
													Element:em
														$aKApi->
														recruitmentReceive(EVENT_TIMESTAMP, SENDER_ACCOUNT_ID, SENDER_CHARACTER_ID, RECEIVER_ACCOUNT_ID, RECEIVER_CHARACTER_ID, RECRUITMENT_TYPE, RECRUITMENT_OUTCOME);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JSON
												Node:
												(type) c
												(layer)4
													Element:p
														//Log a recruitment request response
													Element:br
												Node:
												(type) c
												(layer)4
													Element:pre
														{ "timestamp":"2013-11-15T14:47:14.579Z", "data":{ "type":34, "sender_account_id":"cool_guy@example.com", "sender_character_id":"Wizard", "receiver_account_id":"small_cat@example.com", "receiver_character_id":"Wizard", "recruitment_type":"mobile ad", "recruitment_outcome":"trial account" } }
												Node:
												(type) c
												(layer)4
													Element:p
														NOTE: All parameters are required in JSON.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Friend Addition (Event ID#43)
												Node:
												(type) c
												(layer)4
													Element:p
														This event records information regarding a player adding another player as a friend, despite whether the friendship is reciprocated. To log a friend addition, you need to pass the sender account and character IDs; the receiver account and character IDs; and the timestamp.
												Node:
												(type) c
												(layer)4
													Element:p
														Please note that this is a one-way, "follow" type of addition. If Bob is accepting a friend request from Alice, and they will subsequently appear on each other's friends list, then two events should be sent. One with Alice as the sender and Bob as the recipient, and another with Bob as the sender and Alice as the recipient. If Alice is simply following Bob without any action on his part, then you only need to send a single event with Alice as the sender and Bob as the recipient.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Impacted UI Features
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														System Metrics (Levels)
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tr
													Element:th
														Type
													Element:th
														Parameter
													Element:th
														Default Value
													Element:tr
													Element:td
														Date
													Element:td
														EVENT TIMESTAMP
													Element:td
														(Current Time)
													Element:tr
													Element:td
														String
													Element:td
														ACCOUNT ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														CHARACTER ID
													Element:td
														ACCOUNT ID
													Element:tr
													Element:td
														String
													Element:td
														RECIPIENT ACCOUNT ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														RECIPIENT CHARACTER ID
													Element:td
														RECIPIENT ACCOUNT ID
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														Java
												Node:
												(type) c
												(layer)4
													Element:p
														//Log a friend addition
													Element:br
														public void
													Element:em
														aKApi
														.logFriendAdd(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, RECIPIENT_ACCOUNT_ID, RECIPIENT_CHARACTER_ID);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JavaScript
												Node:
												(type) c
												(layer)4
													Element:p
														//Log a friend addition
													Element:br
													Element:em
														aKApi
														.logFriendAdd(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, RECIPIENT_ACCOUNT_ID, RECIPIENT_CHARACTER_ID);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														PHP
												Node:
												(type) c
												(layer)4
													Element:p
														//Log a friend addition
													Element:br
													Element:em
														$aKApi
														->logFriendAdd(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, RECIPIENT_ACCOUNT_ID, RECIPIENT_CHARACTER_ID);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JSON
												Node:
												(type) c
												(layer)4
													Element:p
														//Log a friend addition
													Element:br
												Node:
												(type) c
												(layer)4
													Element:pre
														{ "timestamp":"2013-11-15T17:35:00.091Z", "data":{ "type":43, "sender_account_id":"cool_guy@example.com", "sender_character_id":"Wizard", "receiver_account_id":"small_cat@example.com", "receiver_character_id":"Wizard" } }
												Node:
												(type) c
												(layer)4
													Element:p
														NOTE: All parameters are required in JSON.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Friend Deletion (Event ID#44)
												Node:
												(type) c
												(layer)4
													Element:p
														This event records information regarding the end of an in-game friendship. To log a friend deletion, you need to pass the sender account and character IDs; the receiver account and character IDs; along with the timestamp.
												Node:
												(type) c
												(layer)4
													Element:p
														For related information, see Friend Addition.
												Node:
												(type) c
												(layer)4
													Element:p
														Please note that this is a one-way, "unfollow" type of deletion. If Alice and Bob are currently in each other's friends list, and a removal from one party will cause them to be dropped from both lists, then you should send two deletion events. One with Alice as the sender and Bob as the recipient, and another with Bob as the sender and Alice as the recipient.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Impacted UI Features
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														System Metrics (Levels)
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tr
													Element:th
														Type
													Element:th
														Parameter
													Element:th
														Default Value
													Element:tr
													Element:td
														Date
													Element:td
														EVENT TIMESTAMP
													Element:td
														(Current Time)
													Element:tr
													Element:td
														String
													Element:td
														ACCOUNT ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														CHARACTER ID
													Element:td
														ACCOUNT ID
													Element:tr
													Element:td
														String
													Element:td
														RECIPIENT ACCOUNT ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														RECIPIENT CHARACTER ID
													Element:td
														RECIPIENT ACCOUNT ID
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														Java
												Node:
												(type) c
												(layer)4
													Element:p
														//Log a friend deletion
													Element:br
														public void
													Element:em
														aKApi
														.logFriendDelete(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, RECIPIENT_ACCOUNT_ID, RECIPIENT_CHARACTER_ID);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JavaScript
												Node:
												(type) c
												(layer)4
													Element:p
														//Log a friend deletion
													Element:br
													Element:em
														aKApi
														.logFriendDelete(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, RECIPIENT_ACCOUNT_ID, RECIPIENT_CHARACTER_ID);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														PHP
												Node:
												(type) c
												(layer)4
													Element:p
														//Log a friend deletion
													Element:br
													Element:em
														$aKApi
														->logFriendDelete(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, RECIPIENT_ACCOUNT_ID, RECIPIENT_CHARACTER_ID);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JSON
												Node:
												(type) c
												(layer)4
													Element:p
														//Log a friend deletion
													Element:br
												Node:
												(type) c
												(layer)4
													Element:pre
														{ "timestamp":"2013-11-15T17:40:17.868Z", "data":{ "type":44, "sender_account_id":"cool_guy@example.com", "sender_character_id":"Wizard", "receiver_account_id":"small_cat@example.com", "receiver_character_id":"Wizard" } }
												Node:
												(type) c
												(layer)4
													Element:p
														NOTE: “sender_account_id”, and “receiver_account_id” are required, while all other parameters are optional.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
							Element:strong
								Custom Events
							Element:a
						Node:
						(type) c
						(layer)2
							Element:p
								Custom events include those events that relate to custom actions and CRM actions. As a Ninja Metrics customer, you have the freedom to define custom events in any way that you want, given the fields described under the
							Element:em
								Custom Slot Action
								and
							Element:em
								Custom Action
								events below. Details on how to execute calls to log custom events can be found below for each corresponding event.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								!!!!
							Element:strong
								CRM Action (Event ID#52)
								- To Be Completed.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								A Customer Relationship Management (CRM) action may be taken by a CRM representative in the gaming company and recorded using this generic field. This event records information regarding how the customer responds to the action. To log a CRM action and response, you need to pass the account and character IDs, the shard ID, the CRM action; and the action type and timestamp. Optionally, you may pass the shard ID, outcome status and timestamp.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
							Element:big
							Element:strong
								Impacted UI Features
							Element:span
								*KPI
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
							Element:big
							Element:strong
								Parameters
							Element:span
								|| border=1 rules=rows frame=hsides
							Element:span
								||! Type ||! Parameter ||! Default Value ||
							Element:span
								|| Date || CRM ACTION TIMESTAMP || (Current Time) ||
							Element:span
								|| String || ACCOUNT ID ||
							Element:em
								No Default Value
								||
							Element:span
								|| String || CHARACTER ID || ACCOUNT ID ||
							Element:span
								|| Long || SHARD ID || 0 ||
							Element:span
								|| String || CRM ACTION || NA ||
							Element:span
								|| String || CRM ACTION TYPE || Other
							Element:a
								(See Appendix for more types)
								||
							Element:span
								|| String || CRM FULFILLED STATUS || Null ||
							Element:span
								|| Date || CRM FULFILLED TIMESTAMP || Null ||
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
							Element:big
							Element:strong
								Sample Use
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								*Java
							Element:span
								//Log a CRM action and response
							Element:br
							Element:span
								public void
							Element:em
								aKApi
								.logCrmAction(CRM_ACTION_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, CRM_ACTION, CRM_ACTION_TYPE, CRM_FULFILLED_STATUS,
							Element:span
								CRM_FULFILLED_TIMESTAMP);
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								*JavaScript
							Element:span
								//Log a CRM action and response
							Element:br
							Element:span
							Element:em
								aKApi
								.logCrmAction(CRM_ACTION_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, CRM_ACTION, CRM_ACTION_TYPE, CRM_FULFILLED_STATUS, CRM_FULFILLED_TIMESTAMP);
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								*PHP
							Element:span
								//Log a CRM action and response
							Element:br
							Element:span
							Element:em
								$aKApi
								->logCrmAction(CRM_ACTION_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, CRM_ACTION, CRM_ACTION_TYPE, CRM_FULFILLED_STATUS, CRM_FULFILLED_TIMESTAMP);
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								*JSON
							Element:span
								//Log a CRM action and response
							Element:br
							Element:span
								{
							Element:span
								"timestamp":"2013-11-15T18:23:20.079Z",
							Element:span
								"data":{
							Element:span
								"type":52,
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								"account_id":"cool_guy@example.com",
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								"character_id":"Wizard",
							Element:span
								"shard_id":42.42,
							Element:span
								"crm_action":"crm_action",
							Element:span
								"crm_action_type":"crm_action_type",
							Element:span
								"crm_fulfilled_status":"crm_fulfilled_status",
							Element:span
								"crm_fulfilled_timestamp":"2013-08-12T05:00:00.000Z"
							Element:span
								}
							Element:span
								}
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								NOTE: All parameters are required in JSON, except “shard_id”, “crm_fulfilled_status”, and “crm_fulfilled_timestamp” which are optional.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:a
								Back to Top
							Element:span
								----
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								!!!!
							Element:strong
								Customer Service Action (Event ID#53)
								- To Be Completed.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								To log a customer service action ,you need to pass the account and character IDs, the customer service action and type; along with the action timestamp. Optionally, you may pass the shard ID.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
							Element:big
							Element:strong
								Impacted UI Features
							Element:span
								*KPI
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
							Element:big
							Element:strong
								Parameters
							Element:span
								|| border=1 rules=rows frame=hsides
							Element:span
								||! Type ||! Parameter ||! Default Value ||
							Element:span
								|| Date || CS TIMESTAMP || (Current Time) ||
							Element:span
								|| String || ACCOUNT ID ||
							Element:em
								No Default Value
								||
							Element:span
								|| String || CHARACTER ID || ACCOUNT ID ||
							Element:span
								|| Long || SHARD ID || 0 ||
							Element:span
								|| String || CS ACTION ||
							Element:em
								No Default Value
								||
							Element:span
								|| String || CS ACTION TYPE || Other
							Element:a
								(See Appendix for more types)
								||
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
							Element:big
							Element:strong
								Sample Use
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								*Java
							Element:span
								//Log a custom slot action event
							Element:br
							Element:span
								public void
							Element:em
								aKApi
								.logCustomerServiceAction(CS_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, CS_ACTION, CS_ACTION_TYPE);
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								*JavaScript
							Element:span
								//Log a custom slot action event\\
							Element:span
							Element:em
								aKApi
								.logCustomerServiceAction(CS_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, CS_ACTION, CS_ACTION_TYPE);
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								*PHP
							Element:span
								//Log a custom slot action event
							Element:br
							Element:span
							Element:em
								$aKApi
								->logCustomerServiceAction(CS_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, CS_ACTION, CS_ACTION_TYPE);
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								*JSON
							Element:span
								//Log a custom slot action event
							Element:br
							Element:span
								{
							Element:span
								"timestamp":"2013-11-15T18:29:07.797Z",
							Element:span
								"data":{
							Element:span
								"type":53,
							Element:span
								"account_id":"cool_guy@example.com",
							Element:span
								"character_id":"Wizard",
							Element:span
								"shard_id":42.42,
							Element:span
								"customer_service_action":"cs_action",
							Element:span
								"customer_service_action_type":"cs_action_type"
							Element:span
								}
							Element:span
								}
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								NOTE: All parameter are required in JSON, except “shard_id” which is optional.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:a
								Back to Top
							Element:span
								----
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Custom Slot (Event ID#54)
												Node:
												(type) c
												(layer)4
													Element:p
														This event can be defined by your organization and records information regarding events that are not described in any of the other events and do not relate to actions in the game. To log a custom action event, you need to pass the account and character IDs, the custom action, the action type, the action value, and the timestamp.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Impacted UI Features
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														KPI
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tr
													Element:th
														Type
													Element:th
														Parameter
													Element:th
														Default Value
													Element:tr
													Element:td
														Date
													Element:td
														TIMESTAMP
													Element:td
														(Current Time)
													Element:tr
													Element:td
														String
													Element:td
														ACCOUNT ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														CHARACTER ID
													Element:td
														ACCOUNT ID
													Element:tr
													Element:td
														String
													Element:td
														CUSTOM ACTION
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														CUSTOM ACTION TYPE
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String (max 400)
													Element:td
														CUSTOM ACTION VALUE
													Element:td
														NA
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														Java
												Node:
												(type) c
												(layer)4
													Element:p
														//Log a custom action event
													Element:br
														public void
													Element:em
														aKApi
														.logCustomAction(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CUSTOM_ACTION, CUSTOM_ACTION_TYPE, CUSTOM_ACTION_VALUE);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JavaScript
												Node:
												(type) c
												(layer)4
													Element:p
														//Log a custom action event
													Element:br
													Element:em
														aKApi
														.logCustomAction(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CUSTOM_ACTION, CUSTOM_ACTION_TYPE, CUSTOM_ACTION_VALUE);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														PHP
												Node:
												(type) c
												(layer)4
													Element:p
														//Log a custom action event
													Element:br
													Element:em
														$aKApi
														->logCustomAction(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CUSTOM_ACTION, CUSTOM_ACTION_TYPE, CUSTOM_ACTION_VALUE);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JSON
												Node:
												(type) c
												(layer)4
													Element:p
														//Log a custom action event
													Element:br
												Node:
												(type) c
												(layer)4
													Element:pre
														{ "timestamp":"2013-11-15T18:35:36.006Z", "data":{ "type":54, "account_id":"cool_guy@example.com", "character_id":"Wizard", "custom_action":"custom_action", "custom_action_type":"custom_action_type", "custom_action_value":"custom_action_value" } }
												Node:
												(type) c
												(layer)4
													Element:p
														NOTE: All parameters are required in JSON.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
												Node:
												(type) c
												(layer)4
													Element:a
														Restore
												Node:
												(type) c
												(layer)4
													Element:a
														March 09, 2015, at 10:51 PM
														by
												Node:
												(type) c
												(layer)4
													Element:span
														173.51.250.14
														- Changed lines 1-32 from:
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														The Katana Social Analytics Engine measures the value of social contributions in applications and games, provides detailed projections for the outcomes that matter to developers, and offers the tools to determine how effectively features facilitate engagement and social interaction.
												Node:
												(type) c
												(layer)4
													Element:p
														If you're new to Katana start with the
													Element:a
														Getting Started Guide
														. Otherwise dig right in with an Integration Library or the API documentation.
												Node:
												(type) c
												(layer)4
													Element:p
														(:table border=0 cellpadding=5 cellspacing=0:) (:headnr:)
													Element:a
														Integration Libraries
														(:head:)
													Element:a
														API Documentation
														(:head:)
													Element:a
														Integration Examples
														(:head:)
													Element:a
														Support
														(:cellnr:)
													Element:a
														JavaScript
														(:cell:)
													Element:a
														Quick Start Guide
														(:cell:)
													Element:a
														Unity
														(:cell:)
													Element:a
														FAQs
														(:cellnr:)
													Element:a
														Java
														(:cell:)
													Element:a
														Advanced Setup Guide
														(:cell:)
													Element:a
														Advanced Setup Guide-Removed
														(:cell:)
													Element:a
														Android
														(:cell:)
													Element:a
														Glossary
														(:cellnr:)
													Element:a
														PHP
														(:cell:)
													Element:a
														Recommended Country Codes
														(:cell:)
													Element:a
														iOS
														(:cell:)
													Element:a
														Dashboards
												Node:
												(type) c
												(layer)4
													Element:p
														(:cellnr:)
													Element:a
														IOS
														(:cellnr:)
													Element:a
														Android
														(:cell:)
													Element:a
														JSON Sample Events
													Element:span
														(:cell:)
														(:cell:) (:cell:)
													Element:a
														JSON Sample Events - Removed
													Element:a
														Videos
												Node:
												(type) c
												(layer)4
													Element:p
														(:tableend:) (:comment [[Attach:Main/Ninja Metrics - Katana API Documentationv9.pdf|Katana API Doc]] :)
														to:
												Node:
												(type) c
												(layer)4
													Element:p
														Get the complete experience. Follow this
													Element:em
														Advanced Setup Guide
														to get the most out of Katana Analytics. This guide includes the information you need to log all available events, including events custom to your title. You'll find the events are organized based on 10 primary event categories:
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														System Events
														System events include those events that are system related, such as when a player logs in or out of the application, or when a shard is initialized.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Account Management Events
														Account Management events include those events that are related to the creation, deletion, and management of a user or character account.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Game Events
														Game events include those events that are related to in-game characters, actions, and combat.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Item Events
														Item events include those events that are related to the creation, use, and transaction of in- game items.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Group Events
														Group events include those events involving player interaction with a group or guild such as entry, exit, or a player's position within a guild (e.g. Guild Leader).
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Environment Events
														Environment events include those events that are related to in-game levels and areas that players may encounter.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Economic Events
														Economic events include those events that are related to in-game stores and purchases such as a player's interaction with a store and items within it.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Transaction Events
														Transaction events include those events that are related to economic events outside of the game such as when an item is purchased outside of the developer game store, or when a subscription changes.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Social Events
														Social events include social interactions between players in and outside of the game such as messages, off-game-interactions, friend requests, etc.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Custom Events
														Custom events include those events that relate to custom actions, and CRM actions. As a Ninja Metrics customer you have the freedom to define custom events in any way that you want given the fields described under the
													Element:em
														Custom Slot Action
														and
													Element:em
														Custom Action
														sections.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
							Element:strong
								System Events
						Node:
						(type) c
						(layer)2
							Element:p
								System events include those events that are system related, such as when a player logs in or out of the application, or when a shard is initialized. Details on how to execute calls to log system events can be found below for each corresponding event.
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Login (Event ID#1)
												Node:
												(type) c
												(layer)4
													Element:p
														This event records the time at which the user logged into the system (website, game, software, etc.). To log a login event, you need to pass the user's account ID, character ID, platform, and timestamp. Optionally, you may pass the shard ID, and login area name and ID.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Impacted UI Features
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														KPI
													Element:li
														System Metrics (Items, Location/Maps, NPC, Social)
													Element:li
														User Metrics (Churn, Farming, Integrity)
													Element:li
														Basic Package (Summary)
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tr
													Element:th
														Type
													Element:th
														Parameter
													Element:th
														Default Value
													Element:tr
													Element:td
														Date
													Element:td
														LOGIN TIMESTAMP
													Element:td
														(Current Time)
													Element:tr
													Element:td
														String
													Element:td
														ACCOUNT ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														CHARACTER ID
													Element:td
														ACCOUNT_ID
													Element:tr
													Element:td
														Long
													Element:td
														SHARD ID
													Element:td
														0
													Element:tr
													Element:td
														String
													Element:td
														PLATFORM
													Element:td
														Other
													Element:tr
													Element:td
														Long
													Element:td
														LOGIN AREA ID
													Element:td
														Null
													Element:tr
													Element:td
														String
													Element:td
														LOGIN AREA NAME
													Element:td
														Null
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														Java
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a user logs in
													Element:br
														public void
													Element:em
														aKApi.
														logLogin(LOGIN_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, PLATFORM, LOGIN_AREA_ID, LOGIN_AREA_NAME);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JavaScript
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a user logs in
													Element:br
													Element:em
														aKApi.
														logLogin(LOGIN_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, PLATFORM, LOGIN_AREA_ID, LOGIN_AREA_NAME);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														PHP
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a user logs in
													Element:br
													Element:em
														$aKApi->
														logLogin(LOGIN_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, PLATFORM, LOGIN_AREA_ID, LOGIN_AREA_NAME);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JSON
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a user logs in
													Element:br
												Node:
												(type) c
												(layer)4
													Element:pre
														{ "timestamp":"2013-11-14T13:43:06.308Z", "data":{ "type":1, "account_id":"cool_guy@example.com", "character_id":"Wizard", "shard_id":42, "platform":"Facebook Mobile", "area_id”:0, "area_name”:0 } }
												Node:
												(type) c
												(layer)4
													Element:p
														NOTE: All parameters are required in JSON, except “shard_id”, “area_id” and “area_name” which are optional.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Logout (Event ID#2)
												Node:
												(type) c
												(layer)4
													Element:p
														This event records the time at which the user logged out of the system (website, game, software, etc.). To log a logout event, you need to pass the user's account ID, character ID, and timestamp.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Impacted UI Features
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														KPI
													Element:li
														User Metrics (Churn, Farming, Integrity)
													Element:li
														Basic Package (Summary)
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tr
													Element:th
														Type
													Element:th
														Parameter
													Element:th
														Default Value
													Element:tr
													Element:td
														Date
													Element:td
														LOGOUT TIMESTAMP
													Element:td
														(Current Time)
													Element:tr
													Element:td
														String
													Element:td
														ACCOUNT ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														CHARACTER ID
													Element:td
														ACCOUNT_ID
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														Java
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a user logs out
													Element:br
														public void
													Element:em
														aKApi.
														logLogout(LOGOUT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JavaScript
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a user logs out
													Element:br
													Element:em
														aKApi.
														logLogout(LOGOUT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														PHP
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a user logs out
													Element:br
													Element:em
														$aKApi
														->logLogout(LOGOUT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JSON
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a user logs out
													Element:br
												Node:
												(type) c
												(layer)4
													Element:pre
														{ "timestamp":"2013-11-14T13:51:53.035Z", "data":{ "type":2, "account_id":"cool_guy@example.com", "character_id":"Wizard" } }
												Node:
												(type) c
												(layer)4
													Element:p
														NOTE: All parameters are required in JSON.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Initialize Shard (Event ID#13)
												Node:
												(type) c
												(layer)4
													Element:p
														Many games and environments have multiple instances running in parallel. In our schema, these parallel instances are referred to as shards. Shards are the same as running multiple instances of the game, or other environments, on different servers. To initialize a shard, you need to pass the shard ID and description, as well as a timestamp.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:strong
														Note
														: You must log the shard creation information before any log or load command references the shard ID.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tr
													Element:th
														Type
													Element:th
														Parameter
													Element:th
														Default Value
													Element:tr
													Element:td
														Date
													Element:td
														TIMESTAMP
													Element:td
														(Current Time)
													Element:tr
													Element:td
														Long
													Element:td
														SHARD ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														SHARD DESCRIPTION
													Element:td
														NA
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														Java
												Node:
												(type) c
												(layer)4
													Element:p
														//Log shard creation information
													Element:br
														public void aKApi.loadInitShard(TIMESTAMP, SHARD_ID, SHARD_DESCRIPTION);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JavaScript
												Node:
												(type) c
												(layer)4
													Element:p
														//Log shard creation information
													Element:br
													Element:em
														aKApi.
														loadInitShard(TIMESTAMP, SHARD_ID, SHARD_DESCRIPTION);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														PHP
												Node:
												(type) c
												(layer)4
													Element:p
														//Log shard creation information
													Element:br
													Element:em
														$aKApi->
														loadInitShard(TIMESTAMP, SHARD_ID, SHARD_DESCRIPTION);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JSON
												Node:
												(type) c
												(layer)4
													Element:p
														//Log shard creation information
													Element:br
												Node:
												(type) c
												(layer)4
													Element:pre
														{ "timestamp":"2013-11-14T16:15:08.347Z", "data":{ "type":13, "shard_id":42, "shard_desc":"the shard with answers to it all" } }
												Node:
												(type) c
												(layer)4
													Element:p
														NOTE: All parameters are required in JSON.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														!!!!
													Element:strong
														Ad Click (Event ID#57)
														- To Be Completed.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														This event records information when a user clicks on an Ad, or clicks on an Ad and takes some subsequent action. To log that a user has clicked an Ad you need to pass the user's account ID and the time the Ad was clicked. Optionally, you can pass the Ad tag name and Ad action timestamp.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
													Element:big
													Element:strong
														Parameters
													Element:span
														|| border=1 rules=rows frame=hsides
													Element:span
														||! Type ||! Parameter ||! Default Value ||
													Element:span
														|| Date || AD CLICK TIMESTAMP || (Current Time) ||
													Element:span
														|| String || ACCOUNT ID ||
													Element:em
														No Default Value
														||
													Element:span
														|| String || AD TAG NAME || In App
													Element:a
														(See Appendix for more types)
														||
													Element:span
														|| Date || AD ACTION TIMESTAMP || Null ||
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														*Java
													Element:span
														//Log when a user clicks an Ad
													Element:br
													Element:span
														public void
													Element:em
														aKApi
														.logAccountAd(AD_CLICK_TIMESTAMP, ACCOUNT_ID, AD_TAG_NAME, AD_ACTION_TIMESTAMP);
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														*JavaScript
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														//Log when a user clicks an Ad
													Element:br
													Element:span
													Element:em
														aKApi
														.logAccountAd(AD_CLICK_TIMESTAMP, ACCOUNT_ID, AD_TAG_NAME, AD_ACTION_TIMESTAMP);
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														*PHP
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														//Log when a user clicks an Ad
													Element:br
													Element:span
													Element:em
														$aKApi
														->logAccountAd(AD_CLICK_TIMESTAMP, ACCOUNT_ID, AD_TAG_NAME, AD_ACTION_TIMESTAMP);
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														*JSON
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														//Log when a user clicks an Ad
													Element:br
													Element:span
														{
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:span
														“ad_click_timestamp":"2013-08-12T05:00:00.000Z",
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														"data":{
													Element:span
														"type":57,
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:span
														"account_id":"cool_guy@example.com",
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														"ad_tag_name":"Ad-Words",
													Element:span
														"ad_action_timestamp":"2013-08-12T05:00:00.000Z”
													Element:span
														}
													Element:span
														}
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														NOTE: “account_id” and ‘ad_click_timestamp” are required, while all other parameters are optional.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
													Element:span
														----
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
							Element:strong
								Account Management Events
						Node:
						(type) c
						(layer)2
							Element:p
								Account Management events include those events that are related to the creation, deletion, and management of a user or character account. Details on how to execute calls to log account events can be found below for each corresponding event.
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Create Account (Event ID#9)
												Node:
												(type) c
												(layer)4
													Element:p
														This event records information regarding the creation of a new account, including the user's demographics. To log the creation of an account you need to pass the account ID and type; the user's language, country, gender, and date of birth; as well as the platform and the timestamp. Optionally, you may pass their currency balance and old account ID.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:strong
														Note
														: You must log the account creation information before any log or load command references the account ID.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Impacted UI Features
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														KPI
													Element:li
														User Metrics (Churn, Farming, Integrity)
													Element:li
														Basic Package (Summary)
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tr
													Element:th
														Type
													Element:th
														Parameter
													Element:th
														Default Value
													Element:tr
													Element:td
														Date
													Element:td
														CREATION TIMESTAMP
													Element:td
														(Current Time)
													Element:tr
													Element:td
														String
													Element:td
														ACCOUNT ID
													Element:td
														"No Default Value"
													Element:tr
													Element:td
														String
													Element:td
														ACCOUNT TYPE
													Element:td
														Free
													Element:tr
													Element:td
														String
													Element:td
														LANGUAGE
													Element:td
														N0
													Element:tr
													Element:td
														String
													Element:td
														COUNTRY
													Element:td
														N0
													Element:tr
													Element:td
														String
													Element:td
														GENDER
													Element:td
														N
													Element:tr
													Element:td
														Date
													Element:td
														DOB
													Element:td
														“1900-01-01T00:00:00.000Z”
													Element:tr
													Element:td
														Float
													Element:td
														CURRENCY BALANCE
													Element:td
														0
													Element:tr
													Element:td
														String
													Element:td
														PLATFORM
													Element:td
														Other
													Element:tr
													Element:td
														String
													Element:td
														OLD ACCOUNT ID
													Element:td
														Null
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														Java
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a user creates an account
													Element:br
														public void aKApi.loadAccountCreate(CREATION_TIMESTAMP, ACCOUNT_ID, ACCOUNT_TYPE, LANGUAGE, COUNTRY, GENDER, DOB, PLATFORM, CURRENCY_BALANCE, PLATFORM, OLD_ACCOUNT_ID);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JavaScrip
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a user creates an account
													Element:br
													Element:em
														aKApi.
														loadAccountCreate(CREATION_TIMESTAMP, ACCOUNT_ID, ACCOUNT_TYPE, LANGUAGE, COUNTRY, GENDER, DOB, PLATFORM, CURRENCY_BALANCE, PLATFORM, OLD_ACCOUNT_ID);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														PHP
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a user creates an account
													Element:br
													Element:em
														$aKApi->
														loadAccountCreate(CREATION_TIMESTAMP, ACCOUNT_ID, ACCOUNT_TYPE, LANGUAGE, COUNTRY, GENDER, DOB, PLATFORM, CURRENCY_BALANCE, PLATFORM, OLD_ACCOUNT_ID);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JSON
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a user creates an account
													Element:br
												Node:
												(type) c
												(layer)4
													Element:pre
														{ "timestamp":"2013-11-14T15:18:30.726Z", "data":{ "type":9, "account_id":"cool_guy@example.com", "account_sub_type":"Free", "account_lang":"NA", "account_country":"de", "account_gender":"N", "account_dob":"1900-01-01T00:00:00.000Z", "account_currency_balance":55, "platform":"Social", "old_account_id":"small_cat@example.com" } }
												Node:
												(type) c
												(layer)4
													Element:p
														NOTE: All parameters are required in JSON, except “account_currency_balance_” and “old_account_id” which are optional.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Delete Account (Event ID#10)
												Node:
												(type) c
												(layer)4
													Element:p
														This event records information regarding account deletion, including reasoning for deletion, in terms of churn or account compromise. To log the deletion of an account you need to pass the account ID, churn type, and timestamp.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Impacted UI Features
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														KPI
													Element:li
														User Metrics (Churn, Farming, Integrity)
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tr
													Element:th
														Type
													Element:th
														Parameter
													Element:th
														Default Value
													Element:tr
													Element:td
														Date
													Element:td
														TIMESTAMP
													Element:td
														(Current Time)
													Element:tr
													Element:td
														String
													Element:td
														ACCOUNT ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														CHURN TYPE
													Element:td
														Stopped
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														Java
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a user deletes an account
													Element:br
														public void
													Element:em
														aKApi.
														loadAccountDeleted(TIMESTAMP, ACCOUNT_ID, CHURN_TYPE);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JavaScript
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a user deletes an account
													Element:br
													Element:em
														aKApi.
														loadAccountDelete(TIMESTAMP, ACCOUNT_ID, CHURN_TYPE);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														PHP
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a user deletes an account
													Element:br
													Element:em
														$aKApi->
														loadAccount''Delete(TIMESTAMP, ACCOUNT_ID, CHURN_TYPE);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JSON
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a user deletes an account
													Element:br
												Node:
												(type) c
												(layer)4
													Element:pre
														{ "timestamp":"1989-08-15T05:00:00.000Z", "data":{ "type":10, "account_id":"cool_guy@example.com", "account_status":"Failed" } }
												Node:
												(type) c
												(layer)4
													Element:p
														NOTE: All parameters are required in JSON.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
												Node:
												(type) c
												(layer)4
													Element:p
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Create Character (Event ID#11)
												Node:
												(type) c
												(layer)4
													Element:p
														Relates to the creation of characters or aliases within the game, where the character's attributes may vary from the attributes of the person in the real world. Once a character is created their attributes are usually fixed. To log a character creation, you need to pass the character and account IDs; the character class, subclass, gender, race, and name; along with the timestamp. Optionally, you may pass the shard ID.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:strong
														Note
														: You must log the character creation information before any log or load command references the character ID.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Impacted UI Features
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														KPI
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tr
													Element:th
														Type
													Element:th
														Parameter
													Element:th
														Default Value
													Element:tr
													Element:td
														Date
													Element:td
														TIMESTAMP
													Element:td
														(Current Time)
													Element:tr
													Element:td
														String
													Element:td
														ACCOUNT ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														CHARACTER ID
													Element:td
														ACCOUNT ID
													Element:tr
													Element:td
														String
													Element:td
														CHARACTER CLASS
													Element:td
														NA
													Element:tr
													Element:td
														String
													Element:td
														CHARACTER SUBCLASS
													Element:td
														NA
													Element:tr
													Element:td
														String
													Element:td
														CHARACTER GENDER
													Element:td
													Element:em
														Must be 'M' or 'F' or 'N
														'
													Element:tr
													Element:td
														String
													Element:td
														CHARACTER RACE
													Element:td
														NA
													Element:tr
													Element:td
														String
													Element:td
														CHARACTER NAME
													Element:td
														NA
													Element:tr
													Element:td
														Long
													Element:td
														SHARD ID
													Element:td
														0
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														Java
												Node:
												(type) c
												(layer)4
													Element:p
														//Log the creation of a character
													Element:br
														public void
													Element:em
														aKApi
														.loadCharacterCreate(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_CLASS, CHARACTER_SUBCLASS, CHARACTER_GENDER, CHARACTER_RACE, CHARACTER_NAME, SHARD_ID);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JavaScript
												Node:
												(type) c
												(layer)4
													Element:p
														//Log the creation of a character
													Element:br
													Element:em
														aKApi
														.loadCharacterCreate(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_CLASS, CHARACTER_SUBCLASS, CHARACTER_GENDER, CHARACTER_RACE, CHARACTER_NAME, SHARD_ID);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														PHP
												Node:
												(type) c
												(layer)4
													Element:p
														//Log the creation of a character
													Element:br
													Element:em
														$aKApi
														->loadCharacterCreate(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_CLASS, CHARACTER_SUBCLASS, CHARACTER_GENDER, CHARACTER_RACE, CHARACTER_NAME, SHARD_ID);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JSON
												Node:
												(type) c
												(layer)4
													Element:p
														//Log the creation of a character
													Element:br
												Node:
												(type) c
												(layer)4
													Element:pre
														{ "timestamp":"2013-11-14T15:47:36.202Z", "data":{ "type":11, "account_id":"cool_guy@example.com", "character_id":"wizard", "character_class":"magic", "character_sub_class":"healer", "character_gender":"N", "character_race":"fish", "character_name":"small_fish", "shard_id":0 } }
												Node:
												(type) c
												(layer)4
													Element:p
														NOTE: All parameters are required in JSON, except “shard_id” which is optional.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Delete Character (Event ID#12)
												Node:
												(type) c
												(layer)4
													Element:p
														This event records information regarding the deletion of a character. To log a character deletion, you need to pass the character ID, account ID, and timestamp.
												Node:
												(type) c
												(layer)4
													Element:p
														For related information, see
													Element:a
														.
													Element:em
														Create Character
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Impacted UI Features
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														KPI
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tr
													Element:th
														Type
													Element:th
														Parameter
													Element:th
														Default Value
													Element:tr
													Element:td
														Date
													Element:td
														TIMESTAMP
													Element:td
														(Current Time)
													Element:tr
													Element:td
														String
													Element:td
														ACCOUNT ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														CHARACTER ID
													Element:td
													Element:em
														No Default Value
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														Java
												Node:
												(type) c
												(layer)4
													Element:p
														//Log the deletion of a character
													Element:br
														public void
													Element:em
														aKApi
														.loadCharacterDelete(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JavaScript
												Node:
												(type) c
												(layer)4
													Element:p
														//Log the deletion of a character
													Element:br
													Element:em
														aKApi
														.loadCharacterDelete(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														PHP
												Node:
												(type) c
												(layer)4
													Element:p
														//Log the deletion of a character
													Element:br
													Element:em
														$aKApi
														->loadCharacterDelete(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JSON
												Node:
												(type) c
												(layer)4
													Element:p
														//Log the deletion of a character
													Element:br
												Node:
												(type) c
												(layer)4
													Element:pre
														{ "timestamp":"2013-11-14T16:03:13.367Z", "data":{ "type":12, "account_id":"cool_guy@example.com”, "character_id":"Wizard” } }
												Node:
												(type) c
												(layer)4
													Element:p
														NOTE: All parameters are required in JSON.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														!!!!
													Element:strong
														Integrity (Event ID#48)
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														Integrity indicates whether an account has been compromised. This event records information regarding when the account was compromised and what type of integrity violation occurred. To log the integrity of an account you need to pass the account ID, integrity type, and timestamp. Optionally, you may pass the shard ID.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
													Element:big
													Element:strong
														Impacted UI Features
													Element:span
														*User Metrics (Integrity)
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
													Element:big
													Element:strong
														Parameters
													Element:span
														|| border=1 rules=rows frame=hsides
													Element:span
														||! Type ||! Parameter ||! Default Value ||
													Element:span
														|| Date || TIMESTAMP || (Current Time) ||
													Element:span
														|| String || ACCOUNT ID ||
													Element:em
														No Default Value
														||
													Element:span
														|| Long || SHARD ID || 0 ||
													Element:span
														|| String || INTEGRITY TYPE || Other
													Element:a
														(See Appendix A for more types)
														||
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														*Java
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														//Log account integrity
													Element:br
													Element:span
														public void
													Element:em
														aKApi
														.logIntegrity(TIMESTAMP, ACCOUNT_ID, SHARD_ID, INTEGRITY_TYPE);
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														*JavaScript
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														//Log account integrity
													Element:br
													Element:span
													Element:em
														aKApi
														.logIntegrity(TIMESTAMP, ACCOUNT_ID, SHARD_ID, INTEGRITY_TYPE);
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														*PHP
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														//Log account integrity
													Element:br
													Element:span
													Element:em
														$aKApi
														->logIntegrity(TIMESTAMP, ACCOUNT_ID, SHARD_ID, INTEGRITY_TYPE);
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														*JSON
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														//Log account integrity
													Element:br
													Element:span
														{
													Element:span
														"timestamp":"2013-11-15T18:00:57.840Z",
													Element:span
														"data":{
													Element:span
														"type":48,
													Element:span
														"account_id":"cool_guy@example.com",
													Element:span
														"shard_id":42.42,
													Element:span
														"integrity_type":"Cheating"
													Element:span
														}
													Element:span
														}
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														NOTE: All parameters are required in JSON, except “shard_id” which is optional.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
													Element:span
														----
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
							Element:strong
								Game Events
						Node:
						(type) c
						(layer)2
							Element:p
								Game events include those events that are related to in-game characters, actions, and combat. Details on how to execute calls to log game events can be found below for each corresponding event.
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Begin Combat (Event ID#21)
												Node:
												(type) c
												(layer)4
													Element:p
														This event records information regarding the beginning of combat between a player and a non-player character (NPC). To log when a player begins combat, you need to pass the account and character IDs; the NPC ID; the area ID, name and position; as well as the timestamp. Optionaly, you may pass the shard ID.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tr
													Element:th
														Type
													Element:th
														Parameter
													Element:th
														Default Value
													Element:tr
													Element:td
														Date
													Element:td
														BEGIN COMBAT TIMESTAMP
													Element:td
														(Current Time)
													Element:tr
													Element:td
														String
													Element:td
														ACCOUNT ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														CHARACTER ID
													Element:td
														ACCOUNT ID
													Element:tr
													Element:td
														Long
													Element:td
														SHARD ID
													Element:td
														0
													Element:tr
													Element:td
														Long
													Element:td
														NPC ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														Long
													Element:td
														BEGIN AREA ID
													Element:td
														0
													Element:tr
													Element:td
														Float
													Element:td
														BEGIN POSITION X
													Element:td
														0
													Element:tr
													Element:td
														Float
													Element:td
														BEGIN POSITION Y
													Element:td
														0
													Element:tr
													Element:td
														Float
													Element:td
														BEGIN POSITION Z
													Element:td
														0
													Element:tr
													Element:td
														String
													Element:td
														BEGIN AREA NAME
													Element:td
														NA
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														Java
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a combat event begins
													Element:br
														public void
													Element:em
														aKApi
														.combatStart(BEGIN_COMBAT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, NPC_ID, BEGIN_AREA_ID, BEGIN_POSITION_X, BEGIN_POSITION_Y, BEGIN_POSITION_Z, BEGIN_AREA_NAME);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JavaScript
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a combat event begins
													Element:br
													Element:em
														aKApi
														.combatStart(BEGIN_COMBAT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, NPC_ID, BEGIN_AREA_ID, BEGIN_POSITION_X, BEGIN_POSITION_Y, BEGIN_POSITION_Z, BEGIN_AREA_NAME);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														PHP
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a combat event begins
													Element:br
													Element:em
														$aKApi
														->combatStart(BEGIN_COMBAT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, NPC_ID, BEGIN_AREA_ID, BEGIN_POSITION_X, BEGIN_POSITION_Y, BEGIN_POSITION_Z, BEGIN_AREA_NAME);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JSON
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a combat event begins
													Element:br
												Node:
												(type) c
												(layer)4
													Element:pre
														{ "timestamp":"2013-11-14T18:55:58.241Z", "data":{ "type":21, "account_id":"cool_guy@example.com", "character_id":"Wizard", "shard_id":42, "npc_id":23456, "area_id":552, "position_x":678, "position_y":231, "position_z":517, "area_name":"Area_Name" } }
												Node:
												(type) c
												(layer)4
													Element:p
														NOTE: All parameters are required in JSON, except “shard_id” which is optional.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														End Combat (Event ID#22)
												Node:
												(type) c
												(layer)4
													Element:p
														This event records information regarding the end of combat between a player and a non- player character (NPC). To log when a player ends combat, you need to pass the account and character IDs; the NPC ID; the area ID, name, and position; as well as the timestamp. Optionally, you may pass the shard ID.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tr
													Element:th
														Type
													Element:th
														Parameter
													Element:th
														Default Value
													Element:tr
													Element:td
														Date
													Element:td
														END COMBAT TIMESTAMP
													Element:td
														(Current Time)
													Element:tr
													Element:td
														String
													Element:td
														ACCOUNT ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														CHARACTER ID
													Element:td
														ACCOUNT ID
													Element:tr
													Element:td
														Long
													Element:td
														SHARD ID
													Element:td
														0
													Element:tr
													Element:td
														Long
													Element:td
														NPC ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														Long
													Element:td
														END AREA ID
													Element:td
														0
													Element:tr
													Element:td
														Float
													Element:td
														END POSITION X
													Element:td
														0
													Element:tr
													Element:td
														Float
													Element:td
														END POSITION Y
													Element:td
														0
													Element:tr
													Element:td
														Float
													Element:td
														END POSITION Z
													Element:td
														0
													Element:tr
													Element:td
														String
													Element:td
														END AREA NAME
													Element:td
														NA
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														Java
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a combat event ends
													Element:br
														public void
													Element:em
														aKApi
														.combatEnd(END_COMBAT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, NPC_ID, END_AREA_ID, END_POSITION_X, END_POSITION_Y, END_POSITION_Z, END_AREA_NAME);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JavaScript
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a combat event ends
													Element:br
													Element:em
														aKApi
														.combatEnd(END_COMBAT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, NPC_ID, END_AREA_ID, END_POSITION_X, END_POSITION_Y, END_POSITION_Z, END_AREA_NAME);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														PHP
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a combat event ends
													Element:br
													Element:em
														$aKApi
														->combatEnd(END_COMBAT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, NPC_ID, END_AREA_ID, END_POSITION_X, END_POSITION_Y, END_POSITION_Z, END_AREA_NAME);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JSON
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a combat event ends
													Element:br
												Node:
												(type) c
												(layer)4
													Element:pre
														{ "timestamp":"2013-11-15T12:41:31.575Z", "data":{ "type":22, "account_id":"cool_guy@example.com", "character_id":"wizard", "shard_id":42, "npc_id":23456, "area_id":552, "position_x":678, "position_y":231, "position_z":517, "area_name":"Area_Name" } }
												Node:
												(type) c
												(layer)4
													Element:p
														NOTE: All parameters are required in JSON, except “shard_id” which is optional.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Kill (NPC) (Event ID#23)
												Node:
												(type) c
												(layer)4
													Element:p
														This event records when a non-player character (NPC) is killed by a player in the game. To log an NPC kill, you need to pass the account and character ID, the character level, the killed NPC ID, and the timestamp. Optionally, you may pass the shard ID.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tr
													Element:th
														Type
													Element:th
														Parameter
													Element:th
														Default Value
													Element:tr
													Element:td
														Date
													Element:td
														KILL NPC TIMESTAMP
													Element:td
														(Current Time)
													Element:tr
													Element:td
														String
													Element:td
														ACCOUNT ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														CHARACTER ID
													Element:td
														ACCOUNT ID
													Element:tr
													Element:td
														Long
													Element:td
														SHARD ID
													Element:td
														0
													Element:tr
													Element:td
														Long
													Element:td
														CHARACTER LEVEL
													Element:td
														0
													Element:tr
													Element:td
														Long
													Element:td
														KILLED NPC ID
													Element:td
													Element:em
														No Default Value
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														Java
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when an NPC is killed
													Element:br
														public void
													Element:em
														aKApi
														.logKillNpc(KILL_NPC_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, CHARACTER_LEVEL, KILLED_NPC_ID);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JavaScript
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when an NPC is killed
													Element:br
													Element:em
														aKApi
														.logKillNpc(KILL_NPC_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, CHARACTER_LEVEL, KILLED_NPC_ID);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														PHP
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when an NPC is killed
													Element:br
													Element:em
														$aKApi
														->logKillNpc(KILL_NPC_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, CHARACTER_LEVEL, KILLED_NPC_ID);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JSON
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when an NPC is killed
													Element:br
														{
												Node:
												(type) c
												(layer)4
													Element:pre
														"timestamp":"2013-11-15T13:08:45.954Z", "data":{ "type":23, "account_id":"cool_guy@example.com", "character_id":"wizard", "shard_id":52, "character_lvl":42, "npc_id":23456 } }
												Node:
												(type) c
												(layer)4
													Element:p
														NOTE: All parameter are required in JSON, except “shard_id” which is optional.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Player Points (Event ID#24)
												Node:
												(type) c
												(layer)4
													Element:p
														This event records information regarding when a player gains points in the game. Points are used as an indicator of how well the player is doing in the game and how far they have progressed. Typically, gaining enough points leads the player to level-up to a higher level. To log player points, you need to pass the account and character IDs, the character level, the point amount and type, along with the timestamp. Optionally, you may pass the shard ID and whether or not the points are grouped.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Impacted UI Features
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														System Metrics (Levels)
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tr
													Element:th
														Type
													Element:th
														Parameter
													Element:th
														Default Value
													Element:tr
													Element:td
														Date
													Element:td
														XP TIMESTAMP
													Element:td
														(Current Time)
													Element:tr
													Element:td
														String
													Element:td
														ACCOUNT ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														CHARACTER ID
													Element:td
														ACCOUNT_ID
													Element:tr
													Element:td
														Long
													Element:td
														CHARACTER LEVEL
													Element:td
														If Generic Character then Account Level; If no concept of Levels then 0.
													Element:tr
													Element:td
														Long
													Element:td
														SHARD ID
													Element:td
														0
													Element:tr
													Element:td
														Long
													Element:td
														POINT_TYPE
													Element:td
														Default = XP, {XP, GENERIC_POINTS, OTHER}
													Element:tr
													Element:td
														Long
													Element:td
														XP AMOUNT
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														Boolean
													Element:td
														GROUPED FLAG
													Element:td
														N
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														*Point Type default is XP, alternate options include 'Generic Point', and 'Other'.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														Java
												Node:
												(type) c
												(layer)4
													Element:p
														//Log player XP
													Element:br
														public void
													Element:em
														aKApi.
														playerXp(XP_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, SHARD_ID, POINT_TYPE, XP_AMOUNT, GROUPED_FLAG);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JavaScript
												Node:
												(type) c
												(layer)4
													Element:p
														//Log player XP
													Element:br
													Element:em
														aKApi.
														playerXp(XP_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, SHARD_ID, POINT_TYPE, XP_AMOUNT, GROUPED_FLAG);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														PHP
												Node:
												(type) c
												(layer)4
													Element:p
														//Log player XP
													Element:br
													Element:em
														$aKApi->
														playerXp(XP_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, SHARD_ID, POINT_TYPE, XP_AMOUNT, GROUPED_FLAG);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JSON
												Node:
												(type) c
												(layer)4
													Element:p
														//Log player XP
													Element:br
												Node:
												(type) c
												(layer)4
													Element:pre
														{ "timestamp":"2013-11-15T13:17:01.847Z", "data":{ "type":24, "account_id":"cool_guy@example.com", "character_id":"Wizard", "character_lvl":1, "shard_id":42, “point_type”:”XP” "xp_amount":34.45, "grouped_flag”:”Y”, } }
												Node:
												(type) c
												(layer)4
													Element:p
														NOTE: All parameters are required in JSON, except “shard_id” and “grouped_flag” which are optional.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Player Versus Player (PVP) Duel (Event ID#25)
												Node:
												(type) c
												(layer)4
													Element:p
														Please use Social Interactions Event #6 to record Player Versus Player actions.
													Element:span
														This event records information when a player enters into combat against another player. Note that this event is only applicable for games and environments where a player is able to fight another player. To log a PVP duel, you need to pass the account and character IDs, the timestamp, and whether or not the player won. Optionally, you may pass the shard ID.
													Element:span
													Element:big
													Element:strong
														Parameters
													Element:span
														|| border=1 rules=rows frame=hsides
													Element:span
														||! Type ||! Parameter ||! Default Value ||
													Element:span
														|| Date || PVP DUEL TIMESTAMP || (Current Time) ||
													Element:span
														|| String || ACCOUNT ID ||
													Element:em
														No Default Value
														||
													Element:span
														|| String || CHARACTER ID || ACCOUNT ID ||
													Element:span
														|| Long || SHARD ID || 0 ||
													Element:span
														|| Boolean || WIN FLAG ||
													Element:em
														No Default Value
														||
													Element:span
													Element:big
													Element:strong
														Sample Use
													Element:span
														*Java
													Element:span
														//Log a PVP Duel
													Element:br
													Element:span
														public void
													Element:em
														aKApi
														.logPvpDuel(PVP_DUEL_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, WIN_FLAG);
													Element:span
														*JavaScript
													Element:span
														//Log a PVP Duel
													Element:br
													Element:span
													Element:em
														aKApi
														.logPvpDuel(PVP_DUEL_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, WIN_FLAG);
													Element:span
														*PHP
													Element:span
														//Log a PVP Duel
													Element:br
													Element:span
													Element:em
														$aKApi
														->logPvpDuel(PVP_DUEL_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, WIN_FLAG);
													Element:span
														*JSON
													Element:span
														//Log a PVP Duel
													Element:br
													Element:span
														{
													Element:span
														"timestamp":"2013-11-15T13:26:39.832Z",
													Element:span
														"data":{
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:span
														"type":25,
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														"account_id":"cool_guy@example.com",
													Element:span
														"character_id":"Wizard",
													Element:span
														"shard_id":42,
													Element:span
														"win_flag":"Y"
													Element:span
														}
													Element:span
														}
													Element:span
														NOTE: All parameters are required in JSON, except “shard_id” which is optional
													Element:a
														Back to Top
													Element:span
														----
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Player Death (Event ID#26)
												Node:
												(type) c
												(layer)4
													Element:p
														This event records information regarding the death of a player by a non-player character (NPC). To log a player death, you need to pass the account and character IDs; the Area ID and name; the NPC ID; the position; the type of death; and the timestamp. Optionally, you may pass the shard ID.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tr
													Element:th
														Type
													Element:th
														Parameter
													Element:th
														Default Value
													Element:tr
													Element:td
														Date
													Element:td
														DEATH TIMESTAMP
													Element:td
														(Current Time)
													Element:tr
													Element:td
														String
													Element:td
														ACCOUNT ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														CHARACTER ID
													Element:td
														ACCOUNT ID
													Element:tr
													Element:td
														Long
													Element:td
														SHARD ID
													Element:td
														0
													Element:tr
													Element:td
														Long
													Element:td
														KILLER NPC ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														DEATH TYPE
													Element:td
														NA
													Element:tr
													Element:td
														Long
													Element:td
														AREA ID
													Element:td
														0
													Element:tr
													Element:td
														Float
													Element:td
														POSITION X
													Element:td
														0
													Element:tr
													Element:td
														Float
													Element:td
														POSITION Y
													Element:td
														0
													Element:tr
													Element:td
														Float
													Element:td
														POSITION Z
													Element:td
														0
													Element:tr
													Element:td
														String
													Element:td
														AREA NAME
													Element:td
														NA
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														Java
												Node:
												(type) c
												(layer)4
													Element:p
														//Log a player death
													Element:br
														public void
													Element:em
														aKApi
														.logPlayerDeath(DEATH_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, KILLER_NPC_ID, DEATH_TYPE, AREA_ID, POSITION_X, POSITION_Y, POSITION_Z, AREA_NAME);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JavaScript
												Node:
												(type) c
												(layer)4
													Element:p
														//Log a player death
													Element:br
													Element:em
														aKApi
														.logPlayerDeath(DEATH_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, KILLER_NPC_ID, DEATH_TYPE, AREA_ID, POSITION_X, POSITION_Y, POSITION_Z, AREA_NAME);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														PHP
												Node:
												(type) c
												(layer)4
													Element:p
														//Log a player death
													Element:br
													Element:em
														$aKApi
														->logPlayerDeath(DEATH_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, KILLER_NPC_ID, DEATH_TYPE, AREA_ID, POSITION_X, POSITION_Y, POSITION_Z, AREA_NAME);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JSON
												Node:
												(type) c
												(layer)4
													Element:p
														//Log a player death
													Element:br
												Node:
												(type) c
												(layer)4
													Element:pre
														{ "timestamp":"2013-11-15T13:32:33.452Z", "data":{ "type":26, "account_id":"cool_guy@example.com", "character_id":"Wizard", "shard_id":42, "npc_id":23456, "death_type":"Immolation", "area_id":512, "position_x":678, "position_y":231, "position_z":517, "area_name”:”Area_Name” } }
												Node:
												(type) c
												(layer)4
													Element:p
														NOTE: All parameter are required in JSON, except “shard_id” which is optional.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Non-Player Character (NPC) (Event ID#31)
												Node:
												(type) c
												(layer)4
													Element:p
														Non-player characters (NPCs) are characters within the game that are not controlled by players. They have different levels of difficulty and may be either friendly or aggressive. This event records information regarding interactions between NPCs and players in the game environment. Recording NPC's also populates the dimension table for NPCs, which is later referred to for all other NPC related events. To log NPC events, you need to pass the account and character IDs; the NPC ID, name, and type; the event type and name; along with the toughness and timestamp. Optionally, you may pass the shard ID, and the minimum and maximum levels.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Impacted UI Features
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														KPI
													Element:li
														System Metrics (NPC)
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tr
													Element:th
														Type
													Element:th
														Parameter
													Element:th
														Default Value
													Element:tr
													Element:td
														Date
													Element:td
														EVENT TIMESTAMP
													Element:td
														(Current Time)
													Element:tr
													Element:td
														String
													Element:td
														ACCOUNT ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														CHARACTER ID
													Element:td
														ACCOUNT_ID
													Element:tr
													Element:td
														Long
													Element:td
														SHARD ID
													Element:td
														0
													Element:tr
													Element:td
														String
													Element:td
														NPC EVENT NAME
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														NPC EVENT TYPE
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														NPC ID
													Element:td
														If NPC ID is empty, and NPC Name is not empty, use 0.
													Element:tr
													Element:td
														String
													Element:td
														NPC NAME
													Element:td
														If NPC ID is not empty, and NPC Name is empty, use NA.
													Element:tr
													Element:td
														String
													Element:td
														NPC TYPE
													Element:td
														Other
													Element:tr
													Element:td
														Integer
													Element:td
														MIN LEVEL
													Element:td
														Set as Optional, with Null value
													Element:tr
													Element:td
														Integer
													Element:td
														MAX LEVEL
													Element:td
														Set as Optional, with Null value
													Element:tr
													Element:td
														Integer
													Element:td
														TOUGHNESS
													Element:td
														Set as Optional, with Null value
													Element:tr
													Element:td
														String
													Element:td
														TOUGHNESS ENUM
													Element:td
														Set as Optional, with Null value
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														Java
												Node:
												(type) c
												(layer)4
													Element:p
														//Log an NPC event occurred
													Element:br
														public void
													Element:em
														aKApi.log
														NpcInteraction(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, NPC_EVENT_NAME, NPC_EVENT_TYPE, NPC_ID, NPC_NAME, NPC_TYPE, MIN_LEVEL, MAX_LEVEL, TOUGHNESS, TOUGHNESS_ENUM);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JavaScript
												Node:
												(type) c
												(layer)4
													Element:p
														//Log an NPC event occurred
													Element:br
													Element:em
														aKApi.log
														NpcInteraction(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, NPC_EVENT_NAME, NPC_EVENT_TYPE, NPC_ID, NPC_NAME, NPC_TYPE, MIN_LEVEL, MAX_LEVEL, TOUGHNESS, TOUGHNESS_ENUM);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														PHP
												Node:
												(type) c
												(layer)4
													Element:p
														//Log an NPC event occurred
													Element:br
													Element:em
														$aKApi->log
														NpcInteraction(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, NPC_EVENT_NAME, NPC_EVENT_TYPE, NPC_ID, NPC_NAME, NPC_TYPE, MIN_LEVEL, MAX_LEVEL, TOUGHNESS, TOUGHNESS_ENUM);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JSON
												Node:
												(type) c
												(layer)4
													Element:p
														//Log an NPC event occurred
													Element:br
												Node:
												(type) c
												(layer)4
													Element:pre
														{ "timestamp":"2013-11-15T14:22:57.102Z", "data":{ "type":31, "account_id":"cool_guy@example.com", "character_id":"wizard", "shard_id":42, "npc_event_name":"npcEventName", "npc_event_type":"Combat", "npc_id":2345, "npc_name":"the Mort of T", "npc_type":"Enemy", "npc_level_min":5, "npc_level_max":10, "npc_toughness":0.25, "npc_toughness_enum":"Quarter" } }
												Node:
												(type) c
												(layer)4
													Element:p
														NOTE: All parameters are required in JSON, except “shard_id”, “npc_level_min”, and “npc_level_max” which are optional.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Challenge (Event ID#32)
												Node:
												(type) c
												(layer)4
													Element:p
														Challenges, sometimes referred to as Quests, are elements of the game where a player, or group of players, can perform tasks for a reward or opportunity to level-up within the game. This event records information regarding challenges. To log a challenge event, you need to pass the account and character IDs; the challenge ID, type, and status; along with the timestamp. Optionally, you may pass the shard ID.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Impacted UI Features
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														KPI
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tr
													Element:th
														Type
													Element:th
														Parameter
													Element:th
														Default Value
													Element:tr
													Element:td
														Date
													Element:td
														EVENT TIMESTAMP
													Element:td
														(Current Time)
													Element:tr
													Element:td
														String
													Element:td
														ACCOUNT ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														CHARACTER ID
													Element:td
														ACCOUNT ID
													Element:tr
													Element:td
														Long
													Element:td
														SHARD ID
													Element:td
														0
													Element:tr
													Element:td
														String
													Element:td
														CHALLENGE ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														CHALLENGE TYPE
													Element:td
														Other
													Element:a
														(See Appendix A for more types)
													Element:tr
													Element:td
														String
													Element:td
														CHALLENGE STATUS
													Element:td
														Accepted*
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														*The Challenge Status default is 'Accepted', but alternate options include 'Completed', or 'Abandoned'.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														Java
												Node:
												(type) c
												(layer)4
													Element:p
														//Log a challenge event occurred
													Element:br
														public void
													Element:em
														aKApi
														.logChallenge(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, CHALLENGE_ID, CHALLENGE_TYPE, CHALLENGE_STATUS);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JavaScript
												Node:
												(type) c
												(layer)4
													Element:p
														//Log a challenge event occurred
													Element:br
													Element:em
														aKApi
														.logChallenge(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, CHALLENGE_ID, CHALLENGE_TYPE, CHALLENGE_STATUS);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														PHP
												Node:
												(type) c
												(layer)4
													Element:p
														//Log a challenge event occurred
													Element:br
													Element:em
														$aKApi
														->logChallenge(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, CHALLENGE_ID, CHALLENGE_TYPE, CHALLENGE_STATUS);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JSON
												Node:
												(type) c
												(layer)4
													Element:p
														//Log a challenge event occurred
													Element:br
												Node:
												(type) c
												(layer)4
													Element:pre
														{ "timestamp":"2013-11-15T14:31:40.633Z", "data":{ "type":32, "account_id":"cool_guy@example.com", "character_id":"Wizard", "shard_id":42, "challenge_id":"challenge_Id", "challenge_type":"Kill NPC", "challenge_status":"Abandonded" } }
												Node:
												(type) c
												(layer)4
													Element:p
														NOTE: All parameters are required in JSON, except “shard_id” which is optional.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														!!!!
													Element:strong
														Farmer (Event ID#47)
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														This event records information regarding whether or not a player is a gold farmer, including what type of gold farmer they are (e.g. spammer, gatherer, mule, etc.). To log whether a player is a gold farmer, you need to pass the account and character ID, the farmer type, and the timestamp. Optionally, you may pass the shard ID.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
													Element:big
													Element:strong
														Impacted UI Features
													Element:span
														*User Metrics (Farming)
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
													Element:big
													Element:strong
														Parameters
													Element:span
														|| border=1 rules=rows frame=hsides
													Element:span
														||! Type ||! Parameter ||! Default Value ||
													Element:span
														|| Date || TIMESTAMP || (Current Time) ||
													Element:span
														|| String || ACCOUNT ID ||
													Element:em
														No Default Value
														||
													Element:span
														|| String || CHARACTER ID || ACCOUNT ID ||
													Element:span
														|| Long || SHARD ID || 0 ||
													Element:span
														|| String || FARMER TYPE || Other
													Element:a
														(See Appendix A for more types)
														||
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														*Java
													Element:span
														//Log if a player is a gold farmer
													Element:br
													Element:span
														public void
													Element:em
														aKApi
														.logFarmer(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, FARMER_TYPE);
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														*JavaScript
													Element:span
														//Log if a player is a gold farmer
													Element:br
													Element:span
													Element:em
														aKApi
														.logFarmer(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, FARMER_TYPE);
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														*PHP
													Element:span
														//Log if a player is a gold farmer
													Element:br
													Element:span
													Element:em
														$aKApi
														->logFarmer(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, FARMER_TYPE);
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														*JSON
													Element:span
														//Log if a player is a gold farmer
													Element:br
													Element:span
														{
													Element:span
														"timestamp":"2013-11-15T17:55:57.747Z",
													Element:span
														"data":{
													Element:span
														"type":47,
													Element:span
														"account_id":"cool_guy@example.com",
													Element:span
														"character_id":"Wizard",
													Element:span
														"shard_id":52,
													Element:span
														"farmer_type":"Banker"
													Element:span
														}
													Element:span
														}
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														NOTE: All parameters are required in JSON, except “shard_id” which is optional.
													Element:a
														Back to Top
													Element:span
														----
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														!!!!
													Element:strong
														Reward (Event ID#49)
													Element:span
														This event records information regarding reward systems, through which rewards may be awarded for completion of a task or seniority. To log reward events, you need to pass the account and character IDs; the reward type, ID, and count; along with the timestamp. Optionally, you may pass the shard ID, and reward item type.
													Element:span
													Element:big
													Element:strong
														Parameters
													Element:span
														|| border=1 rules=rows frame=hsides
													Element:span
														||! Type ||! Parameter ||! Default Value ||
													Element:span
														|| Date || TIMESTAMP || (Current Time) ||
													Element:span
														|| String || ACCOUNT ID ||
													Element:em
														No Default Value
														||
													Element:span
														|| String || CHARACTER ID || ACCOUNT ID ||
													Element:span
														|| Long || SHARD ID || 0 ||
													Element:span
														|| String || REWARD TYPE ||
													Element:em
														No Default Value
														* ||
													Element:span
														|| Long || REWARD ID ||
													Element:em
														No Default Value
														||
													Element:span
														|| String || ITEM TYPE || Other
													Element:a
														(See Appendix A for more types)
														||
													Element:span
														|| Float || REWARD COUNT ||
													Element:em
														No Default Value
														||
													Element:span
													Element:big
													Element:strong
														Sample Use
													Element:span
														*Java
													Element:span
														//Log that a reward event occurred
													Element:br
													Element:span
														public void
													Element:em
														aKApi
														.logReward(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, REWARD_TYPE, REWARD_ID, ITEM_TYPE, REWARD_COUNT);
													Element:span
														*JavaScript
													Element:span
														//Log that a reward event occurred
													Element:br
													Element:span
													Element:em
														aKApi
														.logReward(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, REWARD_TYPE, REWARD_ID, ITEM_TYPE, REWARD_COUNT);
													Element:span
														*PHP
													Element:span
														//Log that a reward event occurred
													Element:br
													Element:span
													Element:em
														$aKApi
														->logReward(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, REWARD_TYPE, REWARD_ID, ITEM_TYPE, REWARD_COUNT);
													Element:span
														*JSON
													Element:span
														//Log that a reward event occurred
													Element:br
													Element:span
														{
													Element:span
														"timestamp":"2013-11-15T18:07:14.132Z",
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:span
														"data":{
													Element:span
														"type":49,
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														"account_id":"cool_guy@example.com",
													Element:span
														"character_id":"Wizard",
													Element:span
														"shard_id":42.42,
													Element:span
														"reward_type":1,
													Element:span
														"reward_id":"1",
													Element:span
														"item_type":2,
													Element:span
														"reward_count":50.5
													Element:span
														}
													Element:span
														}
													Element:span
														NOTE: All parameters are required in JSON, except “shard_id” and “item_type” which are optional.
													Element:a
														Back to Top
													Element:span
														----
													Element:span
														!!!!
													Element:strong
														Mob (Event ID#51)
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														A Mob refers to a group of non-player characters (NPCs). This event records information on when a player confronts and kills a Mob. To log a mob event, you need to pass the account and character IDs, the shard ID, and the timestamp. Optionally, you may pass the shard ID and description of the kill.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
													Element:big
													Element:strong
														Impacted UI Features
													Element:span
														*User Metrics (Farming)
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
													Element:big
													Element:strong
														Parameters
													Element:span
														|| border=1 rules=rows frame=hsides
													Element:span
														||! Type ||! Parameter ||! Default Value ||
													Element:span
														|| Date || TIMESTAMP || (Current Time) ||
													Element:span
														|| String || ACCOUNT ID ||
													Element:em
														No Default Value
														||
													Element:span
														|| String || CHARACTER ID || ACCOUNT ID ||
													Element:span
														|| Long || SHARD ID || 0 ||
													Element:span
														|| String || KILL MOB DESCRIPTION || Null ||
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														*Java
													Element:span
														//Log when a mob is defeated
													Element:br
													Element:span
														public void
													Element:em
														aKApi
														.logMob(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, KILL_MOB_DESCRIPTION);
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														*JavaScript
													Element:span
														//Log when a mob is defeated
													Element:br
													Element:span
													Element:em
														aKApi
														.logMob(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, KILL_MOB_DESCRIPTION);
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														*PHP
													Element:span
														//Log when a mob is defeated
													Element:br
													Element:span
													Element:em
														$aKApi
														->logMob(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, KILL_MOB_DESCRIPTION);
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														*JSON
													Element:span
														//Log when a mob is defeated
													Element:br
													Element:span
														{
													Element:span
														"timestamp":"2013-11-15T18:18:12.933Z",
													Element:span
														"data":{
													Element:span
														"type":51,
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:span
														"account_id":"cool_guy@example.com",
													Element:span
														"character_id":"Wizard",
													Element:span
														"shard_id":42.42,
													Element:span
														"mob_desc":"mob_desc"
													Element:span
														}
													Element:span
														}
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														NOTE: All parameters are required in JSON, except “shard_id” and “mob_desc” which are optional.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
													Element:span
														----
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														!!!!
													Element:strong
														Resource (Event ID#56)
														- To Be Completed.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														A resource event refers to when a player acquires a non-item resource within the game, such as coins, gold, power, etc. To log resource events, you need to pass the account and character IDs; the resource type, count, and ID; along with the timestamp. Optionally, you may pass the shard ID.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
													Element:big
													Element:strong
														Impacted UI Features
													Element:span
														*System Metrics (Levels)
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
													Element:big
													Element:strong
														Parameters
													Element:span
														|| border=1 rules=rows frame=hsides
													Element:span
														||! Type ||! Parameter ||! Default Value ||
													Element:span
														|| Date || TIMESTAMP || (Current Time) ||
													Element:span
														|| String || ACCOUNT ID ||
													Element:em
														No Default Value
														||
													Element:span
														|| String || CHARACTER ID || ACCOUNT ID ||
													Element:span
														|| Long || SHARD ID || 0 ||
													Element:span
														|| String || RESOURCE TYPE || Other
													Element:a
														(See Appendix A for more types)
														||
													Element:span
														|| String || RESOURCE ID ||
													Element:em
														No Default Value
														||
													Element:span
														|| Long || RESOURCE COUNT ||
													Element:em
														No Default Value
														||
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														*Java
													Element:span
														//Log that a resource event occurred
													Element:br
													Element:span
														public void
													Element:em
														aKApi
														.logResource(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, RESOURCE_TYPE, RESOURCE_ID, RESOURCE_COUNT);
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														*JavaScript
													Element:span
														//Log that a resource event occurred
													Element:br
													Element:span
													Element:em
														aKApi
														.logResource(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, RESOURCE_TYPE, RESOURCE_ID, RESOURCE_COUNT);
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														*PHP
													Element:span
														//Log that a resource event occurred
													Element:br
													Element:span
													Element:em
														$aKApi
														->logResource(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, RESOURCE_TYPE, RESOURCE_ID, RESOURCE_COUNT);
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														*JSON
													Element:span
														//Log that a resource event occurred
													Element:br
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:span
														{
													Element:span
														"timestamp":"2013-11-15T18:47:39.266Z",
													Element:span
														"data":{
													Element:span
														"type":56,
													Element:span
														"account_id":"cool_guy@example.com",
													Element:span
														"character_id":"Wizard", "shard_id":42.42,
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														"shard_id":42.42,
													Element:span
														"resource_type":0,
													Element:span
														"resource_id":"1",
													Element:span
														"resource_count":3
													Element:span
														}
													Element:span
														}
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														NOTE: All parameters are required in JSON, except “shard_id” which is optional.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
													Element:span
														----
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
							Element:strong
								Item Events
						Node:
						(type) c
						(layer)2
							Element:p
								Item events include those events that are related to the creation, use, and transaction of in-game items. Details on how to execute calls to log item events can be found below for each corresponding event.
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Initialize Item (Event ID#15)
												Node:
												(type) c
												(layer)4
													Element:p
														This event records information regarding virtual items in the game. Such items may be made available by non-player characters, or they may be created by players in the game. Initializing an item also initializes the dimension table for the item, which is later referred to for all other item related events. To initialize an item, you need to pass the item ID, name, type, and segment, as well as the timestamp. Optionally, you may pass the account and character IDs of the creator.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:strong
														Note
														: You must log the item creation information before any log or load command references the item ID.
													Element:br
													Element:strong
														Note
														: item_type may be any string, but use it consistently. some examples: “Raw materials”, “Mounts and pets”, “armor”, “tools”, “containers”
													Element:br
													Element:strong
														Note
														: item_value is a floating point value which would be used for the store price of the item
													Element:br
													Element:strong
														Note
														: item_segment may be “UGC” when the item is user-generated or “INGAME” when part of the original application
													Element:br
													Element:strong
														Note
														: IF the item_segment field is “UGC” then the creator_account_id and creator_character_id fields should be set appropriately, otherwise they should be empty strings
													Element:br
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Impacted UI Features
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														KPI
													Element:li
														System Metrics (Items)
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tr
													Element:th
														Type
													Element:th
														Parameter
													Element:th
														Default Value
													Element:tr
													Element:td
														Date
													Element:td
														TIMESTAMP
													Element:td
														(Current Time)
													Element:tr
													Element:td
														Long
													Element:td
														ITEM ID
													Element:td
														0
													Element:tr
													Element:td
														String
													Element:td
														ITEM NAME
													Element:td
														NA
													Element:tr
													Element:td
														String
													Element:td
														ITEM TYPE
													Element:td
														Other
													Element:a
														(See Appendix for more types)
													Element:tr
													Element:td
														String
													Element:td
														ITEM SEGMENT
													Element:td
														"UGC or INGAME"
													Element:tr
													Element:td
														String
													Element:td
														CREATED BY ACCOUNT ID
													Element:td
														If ITEM_SEGMENT=UGC, then Required.
													Element:tr
													Element:td
														String
													Element:td
														CREATED BY CHARACTER ID
													Element:td
														If ITEM_SEGMENT=UGC, then ACCOUNT_ID.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														Java
												Node:
												(type) c
												(layer)4
													Element:p
														//Log item creation information
													Element:br
														public void
													Element:em
														aKApi.
														loadInitItem(TIMESTAMP, ITEM_ID, ITEM_NAME, ITEM_TYPE, ITEM_SEGMENT, CREATED_BY_ACCOUNT_ID, CREATED_BY_CHARACTER_ID);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JavaScript
												Node:
												(type) c
												(layer)4
													Element:p
														//Log item creation information
													Element:br
													Element:em
														aKApi
														.loadInitItem(TIMESTAMP, ITEM_ID, ITEM_NAME, ITEM_TYPE, ITEM_SEGMENT, CREATED_BY_ACCOUNT_ID, CREATED_BY_CHARACTER_ID);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														PHP
												Node:
												(type) c
												(layer)4
													Element:p
														//Log item creation information
													Element:br
													Element:em
														$aKApi->
														loadInitItem(TIMESTAMP, ITEM_ID, ITEM_NAME, ITEM_TYPE, ITEM_SEGMENT, CREATED_BY_ACCOUNT_ID, CREATED_BY_CHARACTER_ID);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JSON
												Node:
												(type) c
												(layer)4
													Element:p
														//Log item creation information
													Element:br
												Node:
												(type) c
												(layer)4
													Element:pre
														{ "timestamp":"2013-11-14T17:11:33.720Z", "data":{ "type":15, "item_id":66, "item_name":"the big blaster gun", "item_type":"weapon", "item_segment":"UGC", "account_id":"cool_guy@example.com", "character_id":"Wizard" }
												Node:
												(type) c
												(layer)4
													Element:p
														}
												Node:
												(type) c
												(layer)4
													Element:p
														NOTE: All parameters are required in JSON, except “account_id” and “character_id” which are optional.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Item Used (Event ID#16)
												Node:
												(type) c
												(layer)4
													Element:p
														This event records information regarding the usage of items in the game, such as the usage location, and includes account and character information for the user who used the item. To log an item's use, you need to pass the account and character IDs; the character level; the item ID, name, and count; the area ID, name, and position; as well as the timestamp. Optionally, you may pass the shard ID.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Impacted UI Features
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														KPI
													Element:li
														System Metrics (Items)
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tr
													Element:th
														Type
													Element:th
														Parameter
													Element:th
														Default Value
													Element:tr
													Element:td
														Date
													Element:td
														EVENT TIMESTAMP
													Element:td
														(Current Time)
													Element:tr
													Element:td
														String
													Element:td
														ACCOUNT ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														CHARACTER ID
													Element:td
														ACCOUNT_ID
													Element:tr
													Element:td
														Long
													Element:td
														CHARACTER LEVEL
													Element:td
														If Generic Character then Account Level; If no concept of levels then 0.
													Element:tr
													Element:td
														Long
													Element:td
														SHARD ID
													Element:td
														0
													Element:tr
													Element:td
														Long
													Element:td
														ITEM ID
													Element:td
														If ITEM_ID is empty and ITEM_NAME is not empty, use 0.
													Element:tr
													Element:td
														String
													Element:td
														ITEM NAME
													Element:td
														If ITEM_ID is not empty and ITEM_NAME is empty, use NA.
													Element:tr
													Element:td
														Integer
													Element:td
														ITEM COUNT
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														Long
													Element:td
														AREA ID
													Element:td
														0
													Element:tr
													Element:td
														String
													Element:td
														AREA NAME
													Element:td
														NA
													Element:tr
													Element:td
														Float
													Element:td
														POSITION X
													Element:td
														0
													Element:tr
													Element:td
														Float
													Element:td
														POSITION Y
													Element:td
														0
													Element:tr
													Element:td
														Float
													Element:td
														POSITION Z
													Element:td
														0
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														Java
												Node:
												(type) c
												(layer)4
													Element:p
														//Log that an item was used
													Element:br
														public void
													Element:em
														aKApi.
														logItem(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, SHARD_ID, ITEM_ID, ITEM_NAME, ITEM_COUNT, AREA_ID, AREA_NAME, POSITION_X, POSITION_Y, POSITION_Z);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JavaScript
												Node:
												(type) c
												(layer)4
													Element:p
														//Log that an item was used
													Element:br
													Element:em
														aKApi.
														logItem(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, SHARD_ID, ITEM_ID, ITEM_NAME, ITEM_COUNT, AREA_ID, AREA_NAME, POSITION_X, POSITION_Y, POSITION_Z);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														PHP
												Node:
												(type) c
												(layer)4
													Element:p
													Element:em
														//Log that an item was used
														$aKApi->''logItem(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, SHARD_ID, ITEM_ID, ITEM_NAME, ITEM_COUNT, AREA_ID, AREA_NAME, POSITION_X, POSITION_Y, POSITION_Z);
													Element:br
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JSON
												Node:
												(type) c
												(layer)4
													Element:p
														//Log that an item was used
													Element:br
												Node:
												(type) c
												(layer)4
													Element:pre
														{ "timestamp":"2013-11-14T17:42:49.185Z", "data":{ "type":16, "account_id":"cool_guy@example.com", "character_id":"wizard", "character_lvl":52, "shard_id":42, "item_id":66, "item_name":"The Blaster Gun", "item_count":1, "area_id":42, "area_name":"Area_Name”, "position_x":678, "position_y":231, "position_z":517 } }
												Node:
												(type) c
												(layer)4
													Element:p
														NOTE: All parameters are required in JSON, except “shard_id” which is optional.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														!!!!
													Element:strong
														Item Transaction (Event ID#17)
														- To Be Completed.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														This event records information regarding the purchase of items in the game using either real world money or virtual currency that may be exclusive to the game. To log an item transaction, you need to pass the account and character IDs; the item ID, name, and price; the currency type and currency value; the transaction type; as well as the timestamp. Optionally, you may pass the shard ID, and virtual currency type and count.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
													Element:big
													Element:strong
														Impacted UI Features
													Element:span
														*KPI
													Element:span
														*User Metrics (Churn)
													Element:span
														*Basic Package (Churn)
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
													Element:big
													Element:strong
														Parameters
													Element:span
														|| border=1 rules=rows frame=hsides
													Element:span
														||! Type ||! Parameter ||! Default Value ||
													Element:span
														||Date ||TIMESTAMP ||(Current Time)||
													Element:span
														||String ||ACCOUNT ID ||
													Element:em
														No Default Value
														||
													Element:span
														||String ||CHARACTER ID ||ACCOUNT_ID||
													Element:span
														||Long ||SHARD ID ||0||
													Element:span
														||Long ||ITEM ID ||If ITEM_ID is empty and ITEM_NAME is not empty, use 0.||
													Element:span
														||String ||ITEM NAME ||If ITEM_ID is not empty and ITEM_NAME is empty, use NA.||
													Element:span
														||Float ||ITEM PRICE ||
													Element:em
														No Default Value
														||
													Element:span
														||Integer ||TRANSACTION TYPE ||
													Element:em
														No Default Value
														*||
													Element:span
														||Integer ||CURRENCY TYPE ||
													Element:em
														No Default Value
														**||
													Element:span
														||String ||VIRTUAL CURRENCY TYPE || If CURRENCY_TYPE=1 then required; else null.||
													Element:span
														||Float ||CURRENCY VALUE ||
													Element:em
														No Default Value
														||
													Element:span
														||Integer ||VIRTUAL CURRENCY COUNT || Null||
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
													Element:span
														*Transaction Type must be 0 or 1, where 0 equals 'Spent' and 1 equals 'Acquired'.
													Element:br
													Element:span
													Element:span
														**Currency Type must be 0 or 1, where 0 equals 'Real' and 1 equals 'Virtual Currency'.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														*Java
													Element:span
														//Log that an item transaction occurred
													Element:br
													Element:span
														public void
													Element:em
														aKApi.
														logItemTransaction(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, ITEM_ID, ITEM_NAME, ITEM_PRICE, TRANSACTION_TYPE, CURRENCY_TYPE, VIRTUAL_CURRENCY_TYPE, CURRENCY_VALUE, VIRTUAL_CURRENCY_COUNT);
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														*JavaScript
													Element:span
														//Log that an item transaction occurred
													Element:br
													Element:span
													Element:em
														aKApi.
														logItemTransaction(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, ITEM_ID, ITEM_NAME, ITEM_PRICE, TRANSACTION_TYPE, CURRENCY_TYPE, VIRTUAL_CURRENCY_TYPE, CURRENCY_VALUE, VIRTUAL_CURRENCY_COUNT);
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														*PHP
													Element:span
														//Log that an item transaction occurred
													Element:br
													Element:span
													Element:em
														$aKApi->
														logItemTransaction(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, ITEM_ID, ITEM_NAME, ITEM_PRICE, TRANSACTION_TYPE, CURRENCY_TYPE, VIRTUAL_CURRENCY_TYPE, CURRENCY_VALUE, VIRTUAL_CURRENCY_COUNT);
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														*JSON
													Element:span
														//Log that an item transaction occurred
													Element:br
													Element:span
														{
													Element:span
														"timestamp":"2013-11-14T17:52:58.876Z",
													Element:span
														"data":{
													Element:span
														"type":17,
													Element:span
														"account_id":"cool_guy@example.com",
													Element:span
														"character_id":"wizard",
													Element:span
														"shard_id":42,
													Element:span
														"item_id":66,
													Element:span
														"item_name":"the big blaster gun",
													Element:span
														"item_price":3,
													Element:span
														"transaction_type":0,
													Element:span
														"currency_type":0,
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:span
														"virtual_currency_label":"",
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														"currency_value”:3,
													Element:span
														"virtual_currency_count”:1
													Element:span
														}
													Element:span
														}
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														NOTE: All parameters are required in JSON, except “shard_id”, “virtual_currency_label”, and “virtual_currency_count” which are optional.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
													Element:span
														----
													Element:span
														!!!!
													Element:strong
														User Generated Content (UGC) Rating (Event ID#19)
														- To Be Completed.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														This event records information regarding the creation of in-game items and artifacts, including how items have been rated by other players. To log a UGC rating, you need to pass the account and character IDs; the item ID and name; the UGC rating; and timestamp. Optionally, you may pass the shard ID.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
													Element:big
													Element:strong
														Parameters
													Element:span
														|| border=1 rules=rows frame=hsides
													Element:span
														||! Type ||! Parameter ||! Default Value ||
													Element:span
														|| Date || RATING TIMESTAMP ||
													Element:em
														No Default Value
														||
													Element:span
														|| String || ACCOUNT ID ||
													Element:em
														No Default Value
														||
													Element:span
														|| String || CHARACTER ID || ACCOUNT ID ||
													Element:span
														|| Long || SHARD ID || 0 ||
													Element:span
														|| Long || ITEM ID || 0 ||
													Element:span
														|| String || ITEM NAME || NA ||
													Element:span
														|| String || UGC RATING || 1 ||
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														*Java
													Element:span
														//Log a UGC rating
													Element:br
													Element:span
														public void
													Element:em
														aKApi
														.loadUgcRating(RATING_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, ITEM_ID, ITEM_NAME, UGC_RATING);
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														*JavaScript
													Element:span
														//Log a UGC rating
													Element:br
													Element:span
													Element:em
														aKApi
														.loadUgcRating(RATING_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, ITEM_ID, ITEM_NAME, UGC_RATING);
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														*PHP
													Element:span
														//Log a UGC rating
													Element:br
													Element:span
													Element:em
														$aKApi
														->loadUgcRating(RATING_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, ITEM_ID, ITEM_NAME, UGC_RATING);
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														*JSON
													Element:span
														//Log a UGC rating
													Element:br
													Element:span
														{
													Element:span
														"timestamp":"2013-11-14T18:24:36.601Z",
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:span
														"data":{
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														"type":19,
													Element:span
														"account_id":"cool_guy@example.com",
													Element:span
														"character_id":"Wizard",
													Element:span
														"shard_id":42,
													Element:span
														"item_id":764,
													Element:span
														"item_name":"crafty button",
													Element:span
														"ugc_rating":"theUgcRating"
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:span
														}
													Element:span
														}
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														NOTE: All parameters are required in JSON, except “shard_id” which is optional.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
													Element:span
														----
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														!!!!
													Element:strong
														User Generated Content (UGC) Copy (Event ID#46)
														- To Be Completed.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														This event records information regarding the copying of an in-game item that was created by another player, not including items built-in by the gaming company. To log when a UGC is copied, you need to pass the copier's account and character IDs; the item ID and name; along with the timestamp. Optionally, you may pass the shard ID.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														For related information, see User
													Element:a
														Generated Content (UGC) Rating.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
													Element:big
													Element:strong
														Impacted UI Features
													Element:span
														*KPI
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
													Element:big
													Element:strong
														Parameters
													Element:span
														|| border=1 rules=rows frame=hsides
													Element:span
														||! Type ||! Parameter ||! Default Value ||
													Element:span
														|| Date || ITEM COPY TIMESTAMP || (Current Time) ||
													Element:span
														|| String || COPY ACCOUNT ID ||
													Element:em
														No Default Value
														||
													Element:span
														|| String || COPY CHARACTER ID || COPY_ACCOUNT_ID ||
													Element:span
														|| Long || SHARD ID || 0 ||
													Element:span
														|| Long ||ITEM ID || If ITEM ID is empty, and ITEM NAME is not empty, use 0. ||
													Element:span
														|| String ||ITEM NAME || If ITEM ID is not empty, and ITEM NAME is empty, use NA. ||
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														*Java
													Element:span
														//Log when UGC is copied
													Element:br
													Element:span
														public void
													Element:em
														aKApi
														.trackUgcCopy(ITEM_COPY_TIMESTAMP, COPY_ACCOUNT_ID, COPY_CHARACTER_ID, SHARD_ID, ITEM_ID, ITEM_NAME);
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														*JavaScript
													Element:span
														//Log when UGC is copied
													Element:br
													Element:span
													Element:em
														aKApi
														.trackUgcCopy(ITEM_COPY_TIMESTAMP, COPY_ACCOUNT_ID, COPY_CHARACTER_ID, SHARD_ID, ITEM_ID, ITEM_NAME);
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														*PHP
													Element:span
														//Log when UGC is copied
													Element:br
													Element:span
													Element:em
														$aKApi
														->trackUgcCopy(ITEM_COPY_TIMESTAMP, COPY_ACCOUNT_ID, COPY_CHARACTER_ID, SHARD_ID, ITEM_ID, ITEM_NAME);
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														*JSON
													Element:span
														//Log when UGC is copied
													Element:br
													Element:span
														{
													Element:span
														"timestamp":"2013-11-15T17:50:53.188Z",
													Element:span
														"data":{
													Element:span
														"type":46,
													Element:span
														"account_id":"cool_guy@example.com",
													Element:span
														"character_id":"Wizard",
													Element:span
														"shard_id":42.42,
													Element:span
														"item_id":8729,
													Element:span
														"item_name":"GMO Grain"
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:span
														}
													Element:span
														}
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														NOTE: All parameters are required in JSON, except “shard_id” which is optional.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
													Element:span
														----
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														!!!!
													Element:strong
														Productivity (Event ID#55)
														- To Be Completed.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														Productivity refers to events where players craft or harvest items within the game. To log productivity events, you need to pass the account and character IDs, the productivity type, and the timestamp. Optionally, you may pass the shard ID.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
													Element:big
													Element:strong
														Parameters
													Element:span
														|| border=1 rules=rows frame=hsides
													Element:span
														||! Type ||! Parameter ||! Default Value ||
													Element:span
														|| Date || TIMESTAMP || (Current Time) ||
													Element:span
														|| String || ACCOUNT ID ||
													Element:em
														No Default Value
														||
													Element:span
														|| String || CHARACTER ID || ACCOUNT ID ||
													Element:span
														|| Long || SHARD ID || 0 ||
													Element:span
														|| String || PRODUCTIVITY TYPE || Other
													Element:a
														(See Appendix A for more types)
														||
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														*Java
													Element:span
														//Log a productivity event occurred
													Element:br
													Element:span
														public void
													Element:em
														aKApi
														.logProductivity(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, PRODUCTIVITY_TYPE);
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														*JavaScript
													Element:span
														//Log a productivity event occurred
													Element:br
													Element:span
													Element:em
														aKApi
														.logProductivity(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, PRODUCTIVITY_TYPE);
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														*PHP
													Element:span
														//Log a productivity event occurred
													Element:br
													Element:span
													Element:em
														$aKApi
														->logProductivity(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, PRODUCTIVITY_TYPE););
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														*JSON
													Element:span
														//Log a productivity event occurred
													Element:br
													Element:span
														{
													Element:span
														"timestamp":"2013-11-15T18:42:06.056Z",
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:span
														"data":{
													Element:span
														"type":55,
													Element:span
														"account_id":"cool_guy@example.com",
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														"character_id":"Wizard",
													Element:span
														"shard_id":42.42,
													Element:span
														"productivity_type":"productivity_type"
													Element:span
														}
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:span
														}
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														NOTE: All parameters are required in JSON, except “shard_id” which is optional.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
													Element:span
														----
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
							Element:strong
								Social Group Events
						Node:
						(type) c
						(layer)2
							Element:p
								Group events include those events involving player interaction with a group or guild, such as entry, exit, or a player's position within a guild (e.g. Guild Leader). A guild is analogous to an organization in many online games. Details on how to execute calls to log group events can be found below for each corresponding event.
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Social Group Enter (Event ID#4)
												Node:
												(type) c
												(layer)4
													Element:p
														This event records the time at which a user joins a group. In this case, groups are likely to be impermanent. Note that grouping is not applicable for solo games. To log a user's entry into a group you need to pass the account, character, and group IDs; the character level, and timestamp of entry. Optionally, you may pass the shard ID.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Impacted UI Features
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														System Metrics (Social)
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tr
													Element:th
														Type
													Element:th
														Parameter
													Element:th
														Default Value
													Element:tr
													Element:td
														Date
													Element:td
														ENTER GROUP TIMESTAMP
													Element:td
														(Current Time)
													Element:tr
													Element:td
														String
													Element:td
														ACCOUNT ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														CHARACTER ID
													Element:td
														ACCOUNT ID
													Element:tr
													Element:td
														Long
													Element:td
														CHARACTER LEVEL
													Element:td
														0
													Element:tr
													Element:td
														Long
													Element:td
														SHARD ID
													Element:td
														0
													Element:tr
													Element:td
														Long
													Element:td
														GROUP ID
													Element:td
													Element:em
														No Default Value
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														Java
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a user enters a group
													Element:br
														public void
													Element:em
														aKApi
														.logEnterGroup(ENTER_GROUP_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, SHARD_ID, GROUP_ID);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JavaScript
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a user enters a group
													Element:br
													Element:em
														aKApi
														.logEnterGroup(ENTER_GROUP_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, SHARD_ID, GROUP_ID);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														PHP
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a user enters a group
													Element:br
													Element:em
														$aKApi
														->logEnterGroup(ENTER_GROUP_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, SHARD_ID, GROUP_ID);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JSON
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a user enters a group
													Element:br
												Node:
												(type) c
												(layer)4
													Element:pre
														{ "timestamp":"2013-11-14T14:10:36.792Z", "data":{ "type":4, "account_id":"cool_guy@example.com", "character_id":"wizard", "character_lvl":50, "shard_id":42, "group_id":42 } }
												Node:
												(type) c
												(layer)4
													Element:p
														NOTE: All parameters are required in JSON, except “shard_id” which is optional.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Social Group Exit (Event ID#5)
												Node:
												(type) c
												(layer)4
													Element:p
														This event records the time at which a user leaves a group. To log a user's exit from a group you need to pass the account, character, and group IDs; the character level; and timestamp of exit. Optionally, you may pass the shard ID>
												Node:
												(type) c
												(layer)4
													Element:p
														For related information, see
													Element:a
														Group Enter
														.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Impacted UI Features
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														System Metrics (Social)
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tr
													Element:th
														Type
													Element:th
														Parameter
													Element:th
														Default Value
													Element:tr
													Element:td
														Date
													Element:td
														LEAVE GROUP TIMESTAMP
													Element:td
														(Current Time)
													Element:tr
													Element:td
														String
													Element:td
														ACCOUNT ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														CHARACTER ID
													Element:td
														ACCOUNT ID
													Element:tr
													Element:td
														Long
													Element:td
														CHARACTER LEVEL
													Element:td
														0
													Element:tr
													Element:td
														Long
													Element:td
														SHARD ID
													Element:td
														0
													Element:tr
													Element:td
														Long
													Element:td
														GROUP ID
													Element:td
													Element:em
														No Default Value
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														Java
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a user exits a group
													Element:br
														public void
													Element:em
														aKApi
														.logExitGroup(LEAVE_GROUP_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, SHARD_ID, GROUP_ID);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JavaScript
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a user exits a group
													Element:br
													Element:em
														aKApi
														.logExitGroup(LEAVE_GROUP_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, SHARD_ID, GROUP_ID);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														PHP
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a user exits a group
													Element:br
													Element:em
														$aKApi
														->logExitGroup(LEAVE_GROUP_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, SHARD_ID, GROUP_ID);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JSON
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a user exits a group
													Element:br
														{
												Node:
												(type) c
												(layer)4
													Element:pre
														"timestamp":"2013-11-14T14:16:15.375Z", "data":{ "type":5, "account_id":"cool_guy@example.com", "character_id":"Wizard", "character_lvl":50, "shard_id":42, "group_id":42 } }
												Node:
												(type) c
												(layer)4
													Element:p
														NOTE: All parameters are required in JSON, except “shard_id” which is optional.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
												Node:
												(type) c
												(layer)4
													Element:p
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Enter Guild (Event ID#41)
												Node:
												(type) c
												(layer)4
													Element:p
														This event records information regarding when a player becomes part of a guild and whether they are the leader of the guild, or not. To log a player's entry into a guild, you need to pass the user's account ID, character ID, character level, guild ID, along with the time of entry. Optionally, you can pass their shard ID.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Impacted UI Features
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														System Metrics (Social)
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tr
													Element:th
														Type
													Element:th
														Parameter
													Element:th
														Default Value
													Element:tr
													Element:td
														Date
													Element:td
														EVENT TIMESTAMP
													Element:td
														(Current Time)
													Element:tr
													Element:td
														String
													Element:td
														ACCOUNT ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														CHARACTER ID
													Element:td
														ACCOUNT ID
													Element:tr
													Element:td
														Long
													Element:td
														CHARACTER LEVEL
													Element:td
														0
													Element:tr
													Element:td
														Long
													Element:td
														SHARD ID
													Element:td
														0
													Element:tr
													Element:td
														Long
													Element:td
														GUILD ID
													Element:td
													Element:em
														No Default Value
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														Java
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a player enters a guild
													Element:br
														public void
													Element:em
														aKApi
														.logEnterGuild(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, SHARD_ID, GUILD_ID);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JavaScript
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a player enters a guild
													Element:br
													Element:em
														aKApi
														.logEnterGuild(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, SHARD_ID, GUILD_ID);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														PHP
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a player enters a guild
													Element:br
													Element:em
														$aKApi
														->logEnterGuild(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, SHARD_ID, GUILD_ID);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JSON
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a player enters a guild
													Element:br
												Node:
												(type) c
												(layer)4
													Element:pre
														{ "timestamp":"2013-11-15T16:21:24.890Z", "data":{ "type":41, "account_id":"cool_guy@example.com", "character_id":"Wizard", "character_lvl":52, "shard_id":1, "guild_id":42 } }
												Node:
												(type) c
												(layer)4
													Element:p
														NOTE: All parameters are required in JSON, except “shard_id” which is optional.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Exit Guild (Event ID#42)
												Node:
												(type) c
												(layer)4
													Element:p
														This event records information regarding exiting a guild, including the guild exited and reason for leaving such as being evicted, leaving voluntarily, etc. To log a player's exit from a guild, you need to pass the user's account ID, character ID, character level, guild ID, along with the time of entry and reason for exiting the guild. Optionally, you can pass their shard ID.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Impacted UI Features
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														System Metrics (Social)
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tr
													Element:th
														Type
													Element:th
														Parameter
													Element:th
														Default Value
													Element:tr
													Element:td
														Date
													Element:td
														EVENT TIMESTAMP
													Element:td
														(Current Time)
													Element:tr
													Element:td
														String
													Element:td
														ACCOUNT ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														CHARACTER ID
													Element:td
														ACCOUNT ID
													Element:tr
													Element:td
														Long
													Element:td
														CHARACTER LEVEL
													Element:td
														0
													Element:tr
													Element:td
														Long
													Element:td
														SHARD ID
													Element:td
														0
													Element:tr
													Element:td
														Long
													Element:td
														GUILD ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														GUILD EXIT REASON
													Element:td
														NA
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														Java
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when and why a player exits a guild
													Element:br
														public void
													Element:em
														aKApi
														.logExitGuild(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, SHARD_ID, GUILD_ID, GUILD_EXIT_REASON);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JavaScript
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when and why a player exits a guild\\
													Element:em
														aKApi
														.logExitGuild(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, SHARD_ID, GUILD_ID, GUILD_EXIT_REASON);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														PHP
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when and why a player exits a guild
													Element:br
													Element:em
														$aKApi
														->logExitGuild(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, SHARD_ID, GUILD_ID, GUILD_EXIT_REASON);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JSON
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when and why a player exits a guild
													Element:br
												Node:
												(type) c
												(layer)4
													Element:pre
														{ "timestamp":"2013-11-15T17:28:35.133Z", "data":{ "type":42, "account_id":"cool_guy@example.com", "character_id":"Wizard", "character_lvl":52, "shard_id":1, "guild_id":42, "guild_exit_reason":"hacking" } }
												Node:
												(type) c
												(layer)4
													Element:p
														NOTE: All parameters are required in JSON, except “shard_id” which is optional.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Guild Leader (Event ID#45)
												Node:
												(type) c
												(layer)4
													Element:p
														This event records information regarding a player's position within a guild (i.e. whether they are the leader of a guild, and if so, which guild). To log if a player is a guild leader, you need to pass the user's account ID, character ID, guild ID, along with the timestamp.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tr
													Element:th
														Type
													Element:th
														Parameter
													Element:th
														Default Value
													Element:tr
													Element:td
														Date
													Element:td
														EVENT TIMESTAMP
													Element:td
														(Current Time)
													Element:tr
													Element:td
														String
													Element:td
														ACCOUNT ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														CHARACTER ID
													Element:td
														ACCOUNT ID
													Element:tr
													Element:td
														Long
													Element:td
														GUILD ID
													Element:td
													Element:em
														No Default Value
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														Java
												Node:
												(type) c
												(layer)4
													Element:p
														//Log if a player is a guild leader
													Element:br
														public void
													Element:em
														aKApi
														.putGuildLeader(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, GUILD_ID);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JavaScript
												Node:
												(type) c
												(layer)4
													Element:p
														//Log if a player is a guild leader
													Element:br
													Element:em
														aKApi
														.putGuildLeader(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, GUILD_ID);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														PHP
												Node:
												(type) c
												(layer)4
													Element:p
														//Log if a player is a guild leader
													Element:br
													Element:em
														$aKApi
														->putGuildLeader(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, GUILD_ID);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JSON
												Node:
												(type) c
												(layer)4
													Element:p
														//Log if a player is a guild leader
													Element:br
												Node:
												(type) c
												(layer)4
													Element:pre
														{ "timestamp":"2013-11-15T17:45:12.627Z", "data":{ "type":45, "account_id":"cool_guy@example.com", "character_id":"Wizard", "guild_id":777 } }
												Node:
												(type) c
												(layer)4
													Element:p
														NOTE: All parameters are required in JSON.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
							Element:strong
								Environment Events
						Node:
						(type) c
						(layer)2
							Element:p
								Environment events include those events that are related to in-game levels and areas that players may encounter. Details on how to execute calls to log environment events can be found below for each corresponding event.
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Level Begin (Event ID#27)
												Node:
												(type) c
												(layer)4
													Element:p
														This event records information regarding the time at which a player begins a level. To log when a player begins a level, you need to pass the account and character ID, the character level, the area ID and name, the position, and the timestamp. Optionally, you may pass the shard ID.
												Node:
												(type) c
												(layer)4
													Element:p
														Note that if there is no concept of levels in your application this event need not be used.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Impacted UI Features
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														KPI
													Element:li
														System Metrics (Levels)
													Element:li
														User Metrics (Churn)
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tr
													Element:th
														Type
													Element:th
														Parameter
													Element:th
														Default Value
													Element:tr
													Element:td
														Date
													Element:td
														LEVEL BEGIN TIMESTAMP
													Element:td
														(Current Time)
													Element:tr
													Element:td
														String
													Element:td
														ACCOUNT ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														CHARACTER ID
													Element:td
														ACCOUNT_ID
													Element:tr
													Element:td
														Long
													Element:td
														CHARACTER LEVEL
													Element:td
														If Generic Character then Account Level.
													Element:tr
													Element:td
														Long
													Element:td
														SHARD ID
													Element:td
														0
													Element:tr
													Element:td
														Long
													Element:td
														AREA ID
													Element:td
														0
													Element:tr
													Element:td
														Float
													Element:td
														POSITION X
													Element:td
														0
													Element:tr
													Element:td
														Float
													Element:td
														POSITION Y
													Element:td
														0
													Element:tr
													Element:td
														Float
													Element:td
														POSITION Z
													Element:td
														0
													Element:tr
													Element:td
														String
													Element:td
														AREA NAME
													Element:td
														NA
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														Java
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a player begins a level
													Element:br
														public void
													Element:em
														aKApi.
														levelBegin(LEVEL_BEGIN_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, SHARD_ID, AREA_ID, POSITION_X, POSITION_Y, POSITION_Z, AREA_NAME);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JavaScript
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a player begins a level
													Element:br
													Element:em
														aKApi.
														levelBegin(LEVEL_BEGIN_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, SHARD_ID, AREA_ID, POSITION_X, POSITION_Y, POSITION_Z, AREA_NAME);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														PHP
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a player begins a level
													Element:br
													Element:em
														$aKApi->
														levelBegin(LEVEL_BEGIN_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, SHARD_ID, AREA_ID, POSITION_X, POSITION_Y, POSITION_Z, AREA_NAME);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JSON
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a player begins a level
													Element:br
												Node:
												(type) c
												(layer)4
													Element:pre
														{ "timestamp":"2013-11-15T13:41:08.559Z", "data":{ "type":27, "account_id":"cool_guy@example.com", "character_id":"Wizard", "character_lvl":52, "shard_id":42, "area_id":2, "position_x":678, "position_y":231, "position_z":517, "area_name”:”Area_Name” } }
												Node:
												(type) c
												(layer)4
													Element:p
														NOTE: All parameters are required in JSON, except “shard_id” which is optional.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Level End (Event ID#28)
												Node:
												(type) c
												(layer)4
													Element:p
														This event records information regarding the time at which a player ends or completes a level. To log when a player ends a level, you need to pass the account and character ID, the character level, the area ID and name, the position, and the timestamp. Optionally, you may pass the shard ID.
												Node:
												(type) c
												(layer)4
													Element:p
														Note that if there is no concept of levels in your application this event need not be used.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Impacted UI Features
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														KPI
													Element:li
														System Metrics (Levels)
													Element:li
														User Metrics (Churn)
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tr
													Element:th
														Type
													Element:th
														Parameter
													Element:th
														Default Value
													Element:tr
													Element:td
														Date
													Element:td
														LEVEL END TIMESTAMP
													Element:td
														(Current Time)
													Element:tr
													Element:td
														String
													Element:td
														ACCOUNT ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														CHARACTER ID
													Element:td
														ACCOUNT_ID
													Element:tr
													Element:td
														Long
													Element:td
														CHARACTER LEVEL
													Element:td
														If Generic Character then Account Level.
													Element:tr
													Element:td
														Long
													Element:td
														SHARD ID
													Element:td
														0
													Element:tr
													Element:td
														Long
													Element:td
														AREA ID
													Element:td
														0
													Element:tr
													Element:td
														Float
													Element:td
														POSITION X
													Element:td
														0
													Element:tr
													Element:td
														Float
													Element:td
														POSITION Y
													Element:td
														0
													Element:tr
													Element:td
														Float
													Element:td
														POSITION Z
													Element:td
														0
													Element:tr
													Element:td
														String
													Element:td
														AREA NAME
													Element:td
														NA
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														Java
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a player ends a level
													Element:br
														public void
													Element:em
														aKApi.
														levelEnd(LEVEL_END_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, SHARD_ID, AREA_ID, POSITION_X, POSITION_Y, POSITION_Z, AREA_NAME);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JavaScript
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a player ends a level
													Element:br
													Element:em
														aKApi.
														levelEnd(LEVEL_END_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, SHARD_ID, AREA_ID, POSITION_X, POSITION_Y, POSITION_Z, AREA_NAME);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														PHP
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a player ends a level
													Element:br
													Element:em
														$aKApi->
														levelEnd(LEVEL_END_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, SHARD_ID, AREA_ID, POSITION_X, POSITION_Y, POSITION_Z, AREA_NAME);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JSON
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a player ends a level
													Element:br
												Node:
												(type) c
												(layer)4
													Element:pre
														{ "timestamp":"2013-11-15T13:50:42.553Z", "data":{ "type":28, "account_id":"cool_guy@example.com", "character_id":"Wizard", "character_lvl":52, "shard_id":42, "area_id":2, "position_x":678, "position_y":231, "position_z":517, "area_name":"Area_Name" } }
												Node:
												(type) c
												(layer)4
													Element:p
														NOTE: All parameters are required in JSON, except “shard_id” which is optional.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Enter Area (Event ID#29)
												Node:
												(type) c
												(layer)4
													Element:p
														An Area refers to a geographical area or region that makes up a larger virtual world. This event records information regarding the time at which a player enters an area. To log when a player enters an area, you need to pass the account and character IDs; area ID, level, and position; and the timestamp. Optionally, you may pass the shard ID.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Impacted UI Features
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														KPI - Optional
													Element:li
														System Metrics (Location/Maps)
													Element:li
														User Metrics (Farming)
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tr
													Element:th
														Type
													Element:th
														Parameter
													Element:th
														Default Value
													Element:tr
													Element:td
														Date
													Element:td
														ENTER AREA TIMESTAMP
													Element:td
														(Current Time)
													Element:tr
													Element:td
														String
													Element:td
														ACCOUNT ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														CHARACTER ID
													Element:td
														ACCOUNT_ID
													Element:tr
													Element:td
														Long
													Element:td
														ENTER AREA CHARACTER LEVEL
													Element:td
														0
													Element:tr
													Element:td
														Long
													Element:td
														SHARD ID
													Element:td
														0
													Element:tr
													Element:td
														Long
													Element:td
														AREA ID
													Element:td
														If AREA_ID is not empty, and AREA_NAME is empty, set AREA_NAME=NA.
													Element:tr
													Element:td
														Float
													Element:td
														ENTER POSITION X
													Element:td
														0
													Element:tr
													Element:td
														Float
													Element:td
														ENTER POSITION Y
													Element:td
														0
													Element:tr
													Element:td
														Float
													Element:td
														ENTER POSITION Z
													Element:td
														0
													Element:tr
													Element:td
														String
													Element:td
														AREA NAME
													Element:td
														If AREA_ID is not empty, and AREA_NAME is empty, set AREA_NAME=NA.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														Java
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a player enters an area
													Element:br
														public void
													Element:em
														aKApi.log
														AreaEnter(ENTER_AREA_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, ENTER_AREA_CHARACTER_LEVEL, SHARD_ID, AREA_ID, ENTER_POSITION_X, ENTER_POSITION_Y, ENTER_POSITION_Z, AREA_NAME);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JavaScript
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a player enters an area
													Element:br
													Element:em
														aKApi.log
														AreaEnter(ENTER_AREA_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, ENTER_AREA_CHARACTER_LEVEL, SHARD_ID, AREA_ID, ENTER_POSITION_X, ENTER_POSITION_Y, ENTER_POSITION_Z, AREA_NAME)
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														PHP
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a player enters an area
													Element:br
													Element:em
														$aKApi->log
														AreaEnter(ENTER_AREA_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, ENTER_AREA_CHARACTER_LEVEL, SHARD_ID, AREA_ID, ENTER_POSITION_X, ENTER_POSITION_Y, ENTER_POSITION_Z, AREA_NAME)
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JSON
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a player enters an area
													Element:br
												Node:
												(type) c
												(layer)4
													Element:pre
														{ "timestamp":"2013-11-15T14:04:32.369Z", "data":{ "type":29, "account_id":"cool_guy@example.com", "character_id":"wizard", "character_lvl":52, "shard_id":42, "area_id":200, "position_x":678, "position_y":231, "position_z":517, "area_name":"Area_Name" } }
												Node:
												(type) c
												(layer)4
													Element:p
														NOTE: All parameters are required in JSON, except “shard_id” which is optional.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Exit Area (Event ID#30)
												Node:
												(type) c
												(layer)4
													Element:p
														This event records information regarding the time at which a player exits an area. To log when a player exits an area, you need to pass the account and character IDs; the area level, position, and ID; and the timestamp. Optionally, you may pass the shard ID.
												Node:
												(type) c
												(layer)4
													Element:p
														For related information, see
													Element:em
														Enter Area
														.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Impacted UI Features
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														KPI - Optional
													Element:li
														System Metrics (Levels, Location/Maps)
													Element:li
														User Metrics (Farming)
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tr
													Element:th
														Type
													Element:th
														Parameter
													Element:th
														Default Value
													Element:tr
													Element:td
														Date
													Element:td
														EXIT AREA TIMESTAMP
													Element:td
														(Current Time)
													Element:tr
													Element:td
														String
													Element:td
														ACCOUNT ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														CHARACTER ID
													Element:td
														ACCOUNT_ID
													Element:tr
													Element:td
														Long
													Element:td
														ENTER AREA CHARACTER LEVEL
													Element:td
														0
													Element:tr
													Element:td
														Long
													Element:td
														SHARD ID
													Element:td
														0
													Element:tr
													Element:td
														Long
													Element:td
														AREA ID
													Element:td
														If AREA_ID is not empty, and AREA_NAME is empty, set AREA_NAME=NA.
													Element:tr
													Element:td
														Float
													Element:td
														EXIT POSITION X
													Element:td
														0
													Element:tr
													Element:td
														Float
													Element:td
														EXIT POSITION Y
													Element:td
														0
													Element:tr
													Element:td
														Float
													Element:td
														EXIT POSITION Z
													Element:td
														0
													Element:tr
													Element:td
														String
													Element:td
														AREA NAME
													Element:td
														If AREA_ID is not empty, and AREA_NAME is empty, set AREA_NAME=NA.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														Java
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a player exits an area
													Element:br
														public void
													Element:em
														aKApi.log
														AreaExit(EXIT_AREA_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, EXIT_AREA_CHARACTER_LEVEL, SHARD_ID, AREA_ID, EXIT_POSITION_X, EXIT_POSITION_Y, EXIT_POSITION_Z, AREA_NAME)
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JavaScript
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a player exits an area
													Element:br
													Element:em
														aKApi.log
														AreaExit(ACCOUNT_ID, CHARACTER_ID, SHARD_ID, AREA_ID, CHARACTER_LEVEL, EXIT_POSITION_X, EXIT_POSITION_Y, EXIT_POSITION_Z, AREA_NAME, EXIT_AREA_TIMESTAMP);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														PHP
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a player exits an area
													Element:br
													Element:em
														$aKApi->log
														AreaExit(ACCOUNT_ID, CHARACTER_ID, SHARD_ID, AREA_ID, CHARACTER_LEVEL, EXIT_POSITION_X, EXIT_POSITION_Y, EXIT_POSITION_Z, AREA_NAME, EXIT_AREA_TIMESTAMP);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JSON
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a player exits an area
													Element:br
												Node:
												(type) c
												(layer)4
													Element:pre
														{ "timestamp":"2013-11-15T14:11:05.873Z", "data":{ "type":30, "account_id":"cool_guy@example.com", "character_id":"wizard", "character_lvl":52, "shard_id":42, "area_id":200, "position_x":678, "position_y":231, "position_z":517, "area_name":"Area_Name" } }
												Node:
												(type) c
												(layer)4
													Element:p
														NOTE: All parameters are required in JSON, except “shard_id” which is optional.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Area Dim (Event ID#50)
												Node:
												(type) c
												(layer)4
													Element:p
														For games with geographical areas and maps that make up a larger virtual world, this event records the dimension information about these maps. To log area dimensions, you need to pass the area name and ID, the map label and ID, the min and max positions, as well as the timestamp.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tr
													Element:th
														Type
													Element:th
														Parameter
													Element:th
														Default Value
													Element:tr
													Element:td
														Date
													Element:td
														TIMESTAMP
													Element:td
														(Current Time)
													Element:tr
													Element:td
														String
													Element:td
														AREA NAME
													Element:td
														If AREA ID is not empty and AREA NAME is empty, use NA.
													Element:tr
													Element:td
														Long
													Element:td
														AREA ID
													Element:td
														If AREA ID is empty, and AREA NAME is not empty, use 0.
													Element:tr
													Element:td
														Long
													Element:td
														MAP ID
													Element:td
														0
													Element:tr
													Element:td
														String
													Element:td
														MAP LABEL
													Element:td
														NA
													Element:tr
													Element:td
														Float
													Element:td
														MIN X
													Element:td
														0
													Element:tr
													Element:td
														Float
													Element:td
														MIN Y
													Element:td
														0
													Element:tr
													Element:td
														Float
													Element:td
														MIN Z
													Element:td
														0
													Element:tr
													Element:td
														Float
													Element:td
														MAX X
													Element:td
														0
													Element:tr
													Element:td
														Float
													Element:td
														MAX Y
													Element:td
														0
													Element:tr
													Element:td
														Float
													Element:td
														MAX Z
													Element:td
														0
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														Java
												Node:
												(type) c
												(layer)4
													Element:p
														//Log area dimensions
													Element:br
														public void
													Element:em
														aKApi
														.logAreaDim(TIMESTAMP, AREA_NAME, AREA_ID, MAP_ID, MAP_LABEL, MIN_X, MIN_Y, MIN_Z, MAX_X, MAX_Y, MAX_Z);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JavaScript
												Node:
												(type) c
												(layer)4
													Element:p
														//Log area dimensions
													Element:br
													Element:em
														aKApi
														.logAreaDim(TIMESTAMP, AREA_NAME, AREA_ID, MAP_ID, MAP_LABEL, MIN_X, MIN_Y, MIN_Z, MAX_X, MAX_Y, MAX_Z);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														PHP
												Node:
												(type) c
												(layer)4
													Element:p
														//Log area dimensions
													Element:br
													Element:em
														$aKApi
														->logAreaDim(TIMESTAMP, AREA_NAME, AREA_ID, MAP_ID, MAP_LABEL, MIN_X, MIN_Y, MIN_Z, MAX_X, MAX_Y, MAX_Z);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JSON
												Node:
												(type) c
												(layer)4
													Element:p
														//Log area dimensions
													Element:br
												Node:
												(type) c
												(layer)4
													Element:pre
														{ "timestamp":"2013-11-15T18:13:04.432Z", "data":{ "type":50, "area_name":"NA", "area_id":2.2, "map_id":-1, "map_label":"map label", "min_x":0, "min_y":0, "min_z":0, "max_x":4, "max_y":5, "max_z":6 } }
												Node:
												(type) c
												(layer)4
													Element:p
														NOTE: All parameters are required in JSON, except “min_z” and “max_z” which are optional.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
							Element:strong
								Economic Events
						Node:
						(type) c
						(layer)2
							Element:p
								Economic events include those events that are related to in-game stores and purchases, such as a player's interaction with a store and items within it. Details on how to execute calls to log economic events can be found below for each corresponding event.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:big
								Virtual Currency will be automatically initialized upon virtual currency transactions.
							Element:strong
								Note:
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								!!!!
							Element:strong
								Initialize Virtual Currency (Event ID#14)
								- Automatically Created - No Need To Implement.
							Element:span
								This event records information regarding which currencies players can use in exchange for in-game virtual items or resources. Typically, virtual currencies have an exchange rate that captures their corresponding value in real world currency, such as US Dollars, Yen, Euros, etc. To log virtual currencies, you need to pass the virtual currency label and timestamp.
							Element:span
							Element:big
							Element:strong
								Impacted UI Features
							Element:span
								*KPI
							Element:span
								*User Metrics (Churn)
							Element:span
								*Basic Package (Summary)
							Element:span
							Element:big
							Element:strong
								Parameters
							Element:span
								|| border=1 rules=rows frame=hsides
							Element:span
								||! Type ||! Parameter ||! Default Value ||
							Element:span
								||Date ||TIMESTAMP ||(Current Time)||
							Element:span
								||String ||VIRTUAL CURRENCY LABEL ||
							Element:em
								No Default Value
								||
							Element:span
							Element:big
							Element:strong
								Sample Use
							Element:span
								*Java
							Element:span
								//Log virtual currency
							Element:br
							Element:span
								public void
							Element:em
								aKApi.
								loadVirtualCurrency(TIMESTAMP, VIRTUAL_CURRENCY_LABEL);
							Element:span
								*JavaScript
							Element:span
								//Log virtual currency
							Element:br
							Element:span
							Element:em
								aKApi.
								loadVirtualCurrency(TIMESTAMP, VIRTUAL_CURRENCY_LABEL);
							Element:span
								*PHP
							Element:span
								//Log virtual currency
							Element:br
							Element:span
							Element:em
								$aKApi->
								loadVirtualCurrency(TIMESTAMP, VIRTUAL_CURRENCY_LABEL);
							Element:span
								*JSON
							Element:span
								//Log virtual currency
							Element:br
							Element:span
								{
							Element:span
								"timestamp":"2013-11-14T16:57:39.193Z",
							Element:span
								"data":{
							Element:span
								"type":14,
							Element:span
								"virtual_currency_label":"MUCHA"
							Element:span
								}
							Element:span
								}
							Element:span
								NOTE: All parameters are required in JSON.
							Element:a
								Back to Top
							Element:span
								----
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Store Create (Event ID#35)
												Node:
												(type) c
												(layer)4
													Element:p
														For games that allow players to setup an in-game store where they can sell items, this event records information regarding the creation of an in-game store. To log when a store is created, you need to pass the store ID and description, as well as the address, city, state, country, zip code, and timestamp.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:strong
														Note
														: You must log the store creation information before any log or load command references the store ID.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tr
													Element:th
														Type
													Element:th
														Parameter
													Element:th
														Default Value
													Element:tr
													Element:td
														Date
													Element:td
														UPDATED TIMESTAMP
													Element:td
														(Current Time)
													Element:tr
													Element:td
														Long
													Element:td
														STORE ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														STORE DESCRIPTION
													Element:td
														NA
													Element:tr
													Element:td
														String
													Element:td
														MAP REAL ADDRESS
													Element:td
														NA
													Element:tr
													Element:td
														String
													Element:td
														MAP REAL CITY
													Element:td
														NA
													Element:tr
													Element:td
														String
													Element:td
														MAP REAL STATE
													Element:td
														NA
													Element:tr
													Element:td
														String
													Element:td
														MAP REAL COUNTRY
													Element:td
														NA
													Element:tr
													Element:td
														String
													Element:td
														MAP REAL POSTAL CODE
													Element:td
														0
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														Java
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a store is created
													Element:br
														public void
													Element:em
														aKApi
														.storeCreate(UPDATED_TIMESTAMP, STORE_ID, STORE_DESCRIPTION, MAP_REAL_ADDRESS, MAP_REAL_CITY, MAP_REAL_STATE, MAP_REAL_COUNTRY, MAP_REAL_POSTAL_CODE);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JavaScript
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a store is created
													Element:br
														aKApi.''storeCreate(UPDATED_TIMESTAMP, STORE_ID, STORE_DESCRIPTION, MAP_REAL_ADDRESS, MAP_REAL_CITY, MAP_REAL_STATE, MAP_REAL_COUNTRY, MAP_REAL_POSTAL_CODE);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														PHP
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a store is created
													Element:br
													Element:em
														$aKApi
														->storeCreate(UPDATED_TIMESTAMP, STORE_ID, STORE_DESCRIPTION, MAP_REAL_ADDRESS, MAP_REAL_CITY, MAP_REAL_STATE, MAP_REAL_COUNTRY, MAP_REAL_POSTAL_CODE);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JSON
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a store is created
													Element:br
												Node:
												(type) c
												(layer)4
													Element:pre
														{ "timestamp":"2013-11-15T15:03:32.064Z", "data":{ "type":35, "store_id":8729, "store_desc":"the cool store", "map_real_address":"123 Fake St", "map_real_city":"Walla Walla", "map_real_state":"Tuvalu", "map_real_country":"United States", "map_real_postal_code":"55667" } }
												Node:
												(type) c
												(layer)4
													Element:p
														NOTE: All parameters are required in JSON.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Store Delete (Event ID#36)
												Node:
												(type) c
												(layer)4
													Element:p
														This event records information regarding the deletion of an in-game store. To log when a store is deleted, you need to pass the store ID and timestamp.
												Node:
												(type) c
												(layer)4
													Element:p
														For related information, see
													Element:a
														Store Create
														.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tr
													Element:th
														Type
													Element:th
														Parameter
													Element:th
														Default Value
													Element:tr
													Element:td
														Date
													Element:td
														UPDATED TIMESTAMP
													Element:td
														(Current Time)
													Element:tr
													Element:td
														String
													Element:td
														STORE ID
													Element:td
													Element:em
														No Default Value
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														Java
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a store is deleted
													Element:br
														public void
													Element:em
														aKApi
														.StoreDelete(UPDATED_TIMESTAMP, STORE_ID);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JavaScript
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a store is deleted
													Element:br
													Element:em
														aKApi
														.StoreDelete(UPDATED_TIMESTAMP, STORE_ID);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														PHP
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a store is deleted
													Element:br
													Element:em
														$aKApi
														->StoreDelete(UPDATED_TIMESTAMP, STORE_ID);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JSON
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a store is deleted
													Element:br
												Node:
												(type) c
												(layer)4
													Element:pre
														{ "timestamp":"2013-11-15T15:11:15.847Z", "data":{ "type":36, "store_id":8729 } }
												Node:
												(type) c
												(layer)4
													Element:p
														NOTE: All parameters are required in JSON.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Buy Store Item (Event ID#37)
												Node:
												(type) c
												(layer)4
													Element:p
														This event records information regarding item purchases from an in-game store and includes details on the type of currency used. To log when a player buys a store item, you need to pass the account, character, and store IDs; the shard ID; the recipient account and character IDs; the item ID, name, and price; the currency type and value; and the timestamp. Optionally, you may pass the name of the virtual currency and the virtual currency count.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Impacted UI Features
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														KPI
													Element:li
														User Metrics (Churn)
													Element:li
														Basic Package (Summary)
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tr
													Element:th
														Type
													Element:th
														Parameter
													Element:th
														Default Value
													Element:tr
													Element:td
														Date
													Element:td
														EVENT TIMESTAMP
													Element:td
														(Current Time)
													Element:tr
													Element:td
														String
													Element:td
														SENDER ACCOUNT ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														SENDER CHARACTER ID
													Element:td
														ACCOUNT_ID
													Element:tr
													Element:td
														String
													Element:td
														RECEIVER ACCOUNT ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														RECEIVER CHARACTER ID
													Element:td
														RECIPIENT_ACCOUNT_ID
													Element:tr
													Element:td
														Long
													Element:td
														SHARD ID
													Element:td
														0
													Element:tr
													Element:td
														Long
													Element:td
														STORE ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														Long
													Element:td
														ITEM ID
													Element:td
														If Item ID is empty and Item Name is not empty, use 0.
													Element:tr
													Element:td
														String
													Element:td
														ITEM NAME
													Element:td
														If Item ID is not empty and Item Name is empty, use NA.
													Element:tr
													Element:td
														Float
													Element:td
														ITEM PRICE
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														Integer
													Element:td
														CURRENCY TYPE
													Element:td
													Element:em
														No Default Value
														*
													Element:tr
													Element:td
														String
													Element:td
														VIRTUAL CURRENCY NAME
													Element:td
														If Currency Type is 1 then mandatory, else NULL.
													Element:tr
													Element:td
														Float
													Element:td
														CURRENCY VALUE
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														Integer
													Element:td
														VIRTUAL CURRENCY COUNT
													Element:td
														Null
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														*Currency Type must be 0 or 1, where 0 equals 'Real' and 1 equals 'Virtual Currency'.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														Java
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a player buys a store item
													Element:br
														public void
													Element:em
														aKApi.
														storeBuyItem(EVENT_TIMESTAMP, SENDER_ACCOUNT_ID, SENDER_CHARACTER_ID, RECEIVER_ACCOUNT_ID, RECEIVER_CHARACTER_ID, SHARD_ID, STORE_ID, ITEM_ID, ITEM_NAME, ITEM_PRICE, CURRENCY_TYPE, VIRTUAL_CURRENCY_NAME, CURRENCY_VALUE, VIRTUAL_CURRENCY_COUNT);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JavaScript
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a player buys a store item
													Element:br
													Element:em
														aKApi.
														storeBuyItem(EVENT_TIMESTAMP, SENDER_ACCOUNT_ID, SENDER_CHARACTER_ID, RECEIVER_ACCOUNT_ID, RECEIVER_CHARACTER_ID, SHARD_ID, STORE_ID, ITEM_ID, ITEM_NAME, ITEM_PRICE, CURRENCY_TYPE, VIRTUAL_CURRENCY_NAME, CURRENCY_VALUE, VIRTUAL_CURRENCY_COUNT);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														PHP
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a player buys a store item
													Element:br
														$aKApi->storeBuyItem(EVENT_TIMESTAMP, SENDER_ACCOUNT_ID, SENDER_CHARACTER_ID, RECEIVER_ACCOUNT_ID, RECEIVER_CHARACTER_ID, SHARD_ID, STORE_ID, ITEM_ID, ITEM_NAME, ITEM_PRICE, CURRENCY_TYPE, VIRTUAL_CURRENCY_NAME, CURRENCY_VALUE, VIRTUAL_CURRENCY_COUNT);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JSON
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a player buys a store item
													Element:br
												Node:
												(type) c
												(layer)4
													Element:pre
														{ "timestamp":"2013-11-15T15:18:44.377Z", "data":{ "type":37, "sender_account_id":"cool_guy@example.com", "sender_character_id":"Wizard", "receiver_account_id":"small_cat@example.com", "receiver_character_id":"Wizard", "shard_id":42, "store_id":1, "item_id":66, "item_name":"The Blaster Gun", "item_price":3, "currency_type":1, "virtual_currency_label":"MCH", "currency_value”:”4”, "virtual_currency_count”:1 } }
												Node:
												(type) c
												(layer)4
													Element:p
														NOTE: All parameters are required in JSON, except “shard_id”, “virtual_currency_label”, and “virtual_currency_count” which are optional.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:p
														Example: If you had $1 per 100 tokens, and you bought an item for 200 tokens, you will send:
													Element:br
													Element:br
														Item Price: 200
													Element:br
														Currency Type: 1
													Element:br
														Virtual Currency Name: Tokens
													Element:br
														Currency Value: 2
													Element:br
														Virtual Currency Count: 200
													Element:br
													Element:br
														Example: If a user buys an item using $5 in real money then send:
													Element:br
													Element:br
														Item Price: 5
													Element:br
														Currency Type: 0
													Element:br
														Virtual Currency Name: (null)
													Element:br
														Currency Value: 5
													Element:br
														Virtual Currency Count: 0
													Element:br
													Element:br
														Example: If a user buys an item for 500 tokens send:
													Element:br
													Element:br
														Item Price: 500
													Element:br
														Currency Type: 1
													Element:br
														Virtual Currency Name: Tokens
													Element:br
														Currency Value: 0
													Element:br
														Virtual Currency Count: 500
													Element:br
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Store Login (Event ID#38)
												Node:
												(type) c
												(layer)4
													Element:p
														This event records information regarding the time at which a player logs in to an in-game virtual store. To log when a player logs into a store, you need to pass the account, character, and store IDs; and the timestamp. Optionally, you may pass the shard ID.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tr
													Element:th
														Type
													Element:th
														Parameter
													Element:th
														Default Value
													Element:tr
													Element:td
														Date
													Element:td
														EVENT TIMESTAMP
													Element:td
														(Current Time)
													Element:tr
													Element:td
														String
													Element:td
														ACCOUNT ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														CHARACTER ID
													Element:td
														ACCOUNT ID
													Element:tr
													Element:td
														Long
													Element:td
														SHARD ID
													Element:td
														0
													Element:tr
													Element:td
														Long
													Element:td
														STORE ID
													Element:td
													Element:em
														No Default Value
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														Java
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a player logs in to a store
													Element:br
														public void
													Element:em
														aKApi
														.storeLogin(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, STORE_ID);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JavaScript
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a player logs in to a store
													Element:br
													Element:em
														aKApi
														.storeLogin(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, STORE_ID);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														PHP
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a player logs in to a store
													Element:br
													Element:em
														$aKApi
														->storeLogin(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, STORE_ID);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JSON
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a player logs in to a store
													Element:br
												Node:
												(type) c
												(layer)4
													Element:pre
														{ "timestamp":"2013-11-15T15:31:43.299Z", "data":{ "type":38, "account_id":"cool_guy@example.com", "character_id":"Wizard", "shard_id":42, "store_id":1 } }
												Node:
												(type) c
												(layer)4
													Element:p
														NOTE: All parameters are required in JSON, except “shard_id” which is optional.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Store Logout (Event ID#39)
												Node:
												(type) c
												(layer)4
													Element:p
														This event records information regarding the time at which a player logs out of an in- game virtual store. To log when a player logs out of a store, you need to pass the account, character, and store IDs; and the timestamp. Optionally you may pass the shard ID.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tr
													Element:th
														Type
													Element:th
														Parameter
													Element:th
														Default Value
													Element:tr
													Element:td
														Date
													Element:td
														EVENT TIMESTAMP
													Element:td
														(Current Time)
													Element:tr
													Element:td
														String
													Element:td
														ACCOUNT ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														CHARACTER ID
													Element:td
														ACCOUNT ID
													Element:tr
													Element:td
														Long
													Element:td
														SHARD ID
													Element:td
														0
													Element:tr
													Element:td
														Long
													Element:td
														STORE ID
													Element:td
													Element:em
														No Default Value
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														Java
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a player logs out of a store
													Element:br
														public void
													Element:em
														aKApi
														.storeLogout(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, STORE_ID);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JavaScript
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a player logs out of a store
													Element:br
													Element:em
														aKApi
														.storeLogout(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, STORE_ID);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														PHP
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a player logs out of a store
													Element:br
													Element:em
														$aKApi
														->storeLogout(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, STORE_ID);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JSON
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a player logs out of a store
													Element:br
												Node:
												(type) c
												(layer)4
													Element:pre
														{ "timestamp":"2013-11-15T15:39:58.675Z", "data":{ "type":39, "account_id":"cool_guy@example.com", "character_id":"Wizard", "shard_id":42, "store_id":1 } }
												Node:
												(type) c
												(layer)4
													Element:p
														NOTE: All parameters are required in JSON, except “shard_id” which is optional.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Store Selection / Add to Cart (Event ID#40)
												Node:
												(type) c
												(layer)4
													Element:p
														This event records information regarding when an item is selected or added to a player's cart. Note that this event may be a pre-requisite for buying an item; however it is not the same as buying an item. To log when a player selects a store item, you need to pass the account, character, and store IDs; the item name, type, and ID; and the timestamp.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tr
													Element:th
														Type
													Element:th
														Parameter
													Element:th
														Default Value
													Element:tr
													Element:td
														Date
													Element:td
														SELECTION TIMESTAMP
													Element:td
														(Current Time)
													Element:tr
													Element:td
														String
													Element:td
														ACCOUNT ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														CHARACTER ID
													Element:td
														ACCOUNT ID
													Element:tr
													Element:td
														Long
													Element:td
														STORE ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														Long
													Element:td
														ITEM ID
													Element:td
														If ITEM NAME is not empty, defaults to 0. Otherwise mandatory.
													Element:tr
													Element:td
														String
													Element:td
														ITEM NAME
													Element:td
														If ITEM ID is not empty, defaults to NA. Otherwise mandatory.
													Element:tr
													Element:td
														String
													Element:td
														ITEM TYPE
													Element:td
														Other
													Element:a
														(See Appendix A for more types)
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														Java
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a player selects a store item
													Element:br
														public void
													Element:em
														aKApi
														.storeAddToCart(SELECTION_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, STORE_ID, ITEM_ID, ITEM_NAME, ITEM_TYPE);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JavaScript
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a player selects a store item
													Element:br
													Element:em
														aKApi
														.storeAddToCart(SELECTION_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, STORE_ID, ITEM_ID, ITEM_NAME, ITEM_TYPE);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														PHP
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a player selects a store item
													Element:br
													Element:em
														$aKApi
														->storeAddToCart(SELECTION_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, STORE_ID, ITEM_ID, ITEM_NAME, ITEM_TYPE);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JSON
												Node:
												(type) c
												(layer)4
													Element:p
														//Log when a player selects a store item
													Element:br
												Node:
												(type) c
												(layer)4
													Element:pre
														{ "timestamp":"2013-11-15T16:01:45.370Z", "data":{ "type":40, "account_id":"cool_guy@example.com", "character_id":"Wizard", "store_id":1, "item_id":66, "item_name":"Sword", "item_type":"Weapon" } }
												Node:
												(type) c
												(layer)4
													Element:p
														NOTE: All parameters are required in JSON.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
							Element:strong
								Transaction Events
						Node:
						(type) c
						(layer)2
							Element:p
								Transaction events include those events that are related to economic events outside of the game, such as when an item is purchased outside of the developer game store, or when a subscription changes. Details on how to execute calls to log transaction events can be found below for each corresponding event.
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Subscription Change (Event ID#3)
												Node:
												(type) c
												(layer)4
													Element:p
														This event records a change in subscription type (e.g. from free play to a paid subscriber or premium player). Subscription changes are only applicable to games with subscriptions, not free-to-play (F2P) games. To log a change of subscription, you need to pass the user's account ID, subscription status and type, and a timestamp for both subscription and expiry. Optionally, you can also pass the subscription value.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Impacted UI Features
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														KPI
													Element:li
														System Metrics (Items, Levels, Social, NPC, Location/Maps)
													Element:li
														User Metrics (Churn, Farming, Integrity)
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tr
													Element:th
														Type
													Element:th
														Parameter
													Element:th
														Default Value
													Element:tr
													Element:td
														Date
													Element:td
														SUBSCRIPTION TIMESTAMP
													Element:td
														(Current Time)
													Element:tr
													Element:td
														String
													Element:td
														ACCOUNT ID
													Element:td
														"No Default Value''
													Element:tr
													Element:td
														String
													Element:td
														SUBSCRIPTION STATUS
													Element:td
														Active
													Element:tr
													Element:td
														String
													Element:td
														SUBSCRIPTION TYPE
													Element:td
														Paid
													Element:tr
													Element:td
														Float
													Element:td
														SUBSCRIPTION VALUE
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														Date
													Element:td
														SUBSCRIPTION EXPIRED TIMESTAMP
													Element:td
														(Month From Subscription Date)
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														Java
												Node:
												(type) c
												(layer)4
													Element:p
														//Log a change of subscription
													Element:br
														public void
													Element:em
														aKApi.
														putSubChange(SUBSCRIPTION_TIMESTAMP, ACCOUNT_ID, SUBSCRIPTION_STATUS, SUBSCRIPTION_TYPE, SUBSCRIPTION_VALUE, SUBSCRIPTION_EXPIRED_TIMESTAMP);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JavaScript
												Node:
												(type) c
												(layer)4
													Element:p
														//Log a change of subscription
													Element:br
													Element:em
														aKApi.
														putSubChange(SUBSCRIPTION_TIMESTAMP, ACCOUNT_ID, SUBSCRIPTION_STATUS, SUBSCRIPTION_TYPE, SUBSCRIPTION_VALUE, SUBSCRIPTION_EXPIRED_TIMESTAMP);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														PHP
												Node:
												(type) c
												(layer)4
													Element:p
														//Log a change of subscription
													Element:br
													Element:em
														$aKApi->
														putSubChange(SUBSCRIPTION_TIMESTAMP, ACCOUNT_ID, SUBSCRIPTION_STATUS, SUBSCRIPTION_TYPE, SUBSCRIPTION_VALUE, SUBSCRIPTION_EXPIRED_TIMESTAMP);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JSON
												Node:
												(type) c
												(layer)4
													Element:p
														//Log a change of subscription
													Element:br
												Node:
												(type) c
												(layer)4
													Element:pre
														{ "timestamp":"2013-11-10T06:00:00.000Z", "data":{ "type":3, "account_id":"cool_guy@example.com", "account_status":"Active", "account_sub_type":"Paid", "account_sub_value":10, "account_sub_expires_timestamp":"2016-02-01T06:00:00.000Z" } }
												Node:
												(type) c
												(layer)4
													Element:p
														NOTE: All parameters are required in JSON, except “account_sub_value” which is optional.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Currency Transaction (Event ID#18)
												Node:
												(type) c
												(layer)4
													Element:p
														Logs a Currency Transaction event. Covers all types of transaction in the game or any other environment where real world money was used. Designed To Handle Most Currency Transactions. More Complicated Transactions Can Be Done Within Event #37.
												Node:
												(type) c
												(layer)4
													Element:p
														This event records information regarding transactions in the game or other environments where real world money is used. To log currency transactions, you need to pass the account and character IDs, the transaction and currency types, as well as the timestamp. Optionally, you may pass the shard ID, the virtual currency label, the currency value, the virtual currency count, and the transaction description.
												Node:
												(type) c
												(layer)4
													Element:p
														One common scenario is when a user purchases virtual currency by spending real currency. In this case, you should send this event twice. Once with a TRANSACTION TYPE of 0 and a CURRENCY TYPE of 0 (the user is spending real currency), and then again with a TRANSACTION TYPE of 1 and a CURRENCY TYPE of 1, along with the appropriate VIRTUAL CURRENCY COUNT and LABEL (the user is acquiring virtual currency).
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														Please note that you should only use this event when the Item Transaction (#17) or Store Buy Item (#37) events aren't appropriate. Store Buy Item (#37) should be used in most cases of any type of currency or virtual currency transactions. If currency is being spent to acquire something, it is preferable to use those events so that the purchase can be associated with the item. Do not send the Currency Transaction event in tandem with those events, because the currency transfer will be double counted on your dashboard.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Impacted UI Features
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														KPI
													Element:li
														User Metrics (Churn)
													Element:li
														Basic Package (Summary)
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tr
													Element:th
														Type
													Element:th
														Parameter
													Element:th
														Default Value
													Element:tr
													Element:td
														Date
													Element:td
														EVENT TIMESTAMP
													Element:td
														(Current Time)
													Element:tr
													Element:td
														String
													Element:td
														ACCOUNT ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														CHARACTER ID
													Element:td
														ACCOUNT_ID
													Element:tr
													Element:td
														Long
													Element:td
														SHARD ID
													Element:td
														0
													Element:tr
													Element:td
														Integer
													Element:td
														TRANSACTION TYPE
													Element:td
													Element:em
														No Default Value
														*
													Element:tr
													Element:td
														Integer
													Element:td
														CURRENCY TYPE
													Element:td
													Element:em
														No Default Value
														**
													Element:tr
													Element:td
														String
													Element:td
														VIRTUAL CURRENCY LABEL
													Element:td
														If CURRENCY_TYPE=1 then required; else null.
													Element:tr
													Element:td
														Float
													Element:td
														CURRENCY VALUE
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														TRANSACTION DESCRIPTION
													Element:td
														Truncate if >200
													Element:tr
													Element:td
														Integer
													Element:td
														VIRTUAL CURRENCY COUNT
													Element:td
														Null
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														*Transaction Type must be 0 or 1, where 0 equals 'Spent' and 1 equals 'Acquired'.
													Element:br
													Element:span
														**Currency Type must be 0 or 1, where 0 equals 'Real' and 1 equals 'Virtual Currency'.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														Java
												Node:
												(type) c
												(layer)4
													Element:p
														//Log a currency transaction
													Element:br
														public void
													Element:em
														aKApi.
														logCurrencyTransaction(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, TRANSACTION_TYPE, CURRENCY_TYPE, VIRTUAL_CURRENCY_LABEL, CURRENCY_VALUE, TRANSACTION_DESCRIPTION, VIRTUAL_CURRENCY_COUNT);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JavaScript
												Node:
												(type) c
												(layer)4
													Element:p
														//Log a currency transaction
													Element:br
													Element:em
														aKApi.
														logCurrencyTransaction(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, TRANSACTION_TYPE, CURRENCY_TYPE, VIRTUAL_CURRENCY_LABEL, CURRENCY_VALUE, TRANSACTION_DESCRIPTION, VIRTUAL_CURRENCY_COUNT);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														PHP
												Node:
												(type) c
												(layer)4
													Element:p
														//Log a currency transaction
													Element:br
													Element:em
														$aKApi->
														logCurrencyTransaction(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, TRANSACTION_TYPE, CURRENCY_TYPE, VIRTUAL_CURRENCY_LABEL, CURRENCY_VALUE, TRANSACTION_DESCRIPTION, VIRTUAL_CURRENCY_COUNT);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JSON
												Node:
												(type) c
												(layer)4
													Element:p
														//Log a currency transaction
													Element:br
												Node:
												(type) c
												(layer)4
													Element:pre
														{ "timestamp":"2013-11-14T18:10:14.808Z", "data":{ "type":18, "account_id":"cool_guy@example.com", "character_id":"wizard", "shard_id":42, "transaction_type":0, "currency_type":0, "virtual_currency_label":"mucha", "currency_value":3.45, "transaction_desc":"spend 3.45USD”, "virtual_currency_count:1 } }
												Node:
												(type) c
												(layer)4
													Element:p
														NOTE: All parameters are required in JSON, except “shard_id”, “virtual_currency_label”, “currency_value”, “transaction_desc”, and “virtual_currency_count” which are optional.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														!!!!
													Element:strong
														Economic (Event ID#58)
														- To Be Completed.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														This event records information regarding item purchases, sales, or trades outside of the developer RMT game store. This event requires both an incoming and outgoing value, of which either can be 0. To log an economic event, you need to pass the sender and receiver account and character IDs; the item name and ID; the economic type and value; the currency type and value; along with the timestamp. Optionally, you may pass the shard ID, virtual currency type and count.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
													Element:big
													Element:strong
														Parameters
													Element:span
														|| border=1 rules=rows frame=hsides
													Element:span
														||! Type ||! Parameter ||! Default Value ||
													Element:span
														|| Date || TIMESTAMP || (Current Time) ||
													Element:span
														|| String || SENDER ACCOUNT ID ||
													Element:em
														No Default Value
														||
													Element:span
														|| String || SENDER CHARACTER ID || SENDER ACCOUNT ID ||
													Element:span
														|| String || RECEIVER ACCOUNT ID ||
													Element:em
														No Default Value
														||
													Element:span
														|| String || RECEIVER CHARACTER ID || RECEIVER ACCOUNT ID ||
													Element:span
														|| Long || SHARD ID || 0 ||
													Element:span
														|| Long || ITEM ID || If ITEM ID is empty, and ITEM NAME is not empty, use 0. ||
													Element:span
														|| String || ITEM NAME || If ITEM ID is not empty, and ITEM NAME is empty, use NA. ||
													Element:span
														|| String || ECONOMIC TYPE || Other
													Element:a
														(See Appendix A for more types)
														||
													Element:span
														|| Float || ECONOMIC VALUE ||
													Element:em
														No Default Value
														||
													Element:span
														|| Integer || CURRENCY TYPE ||
													Element:em
														No Default Value
														* ||
													Element:span
														|| String || VIRTUAL CURRENCY TYPE || If CURRENCY TYPE is 1 then mandatory. Otherwise defaults to Null. ||
													Element:span
														|| Float || CURRENCY VALUE ||
													Element:em
														No Default Value
														||
													Element:span
														|| Integer || VIRTUAL CURRENCY COUNT || Null ||
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
													Element:span
														*Currency Type must be 0 or 1, where 0 equals 'Real' and 1 equals 'Virtual Currency'.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														*Java
													Element:span
														//To log that an economic event occurred
													Element:br
													Element:span
														public void
													Element:em
														aKApi
														.logEconomic(TIMESTAMP, SENDER_ACCOUNT_ID, SENDER_CHARACTER_ID, RECEIVER_ACCOUNT_ID, RECEIVER_CHARACTER_ID, SHARD_ID, ITEM_ID, ITEM_NAME, ECONOMIC_TYPE, ECONOMIC_VALUE, CURRENCY_TYPE, VIRTUAL_CURRENCY_TYPE, CURRENCY_VALUE, VIRTUAL_CURRENCY_COUNT) ;
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														*JavaScript
													Element:span
														//To log that an economic event occurred
													Element:br
													Element:span
													Element:em
														aKApi
														.logEconomic(TIMESTAMP, SENDER_ACCOUNT_ID, SENDER_CHARACTER_ID, RECEIVER_ACCOUNT_ID, RECEIVER_CHARACTER_ID, SHARD_ID, ITEM_ID, ITEM_NAME, ECONOMIC_TYPE, ECONOMIC_VALUE, CURRENCY_TYPE, VIRTUAL_CURRENCY_TYPE, CURRENCY_VALUE, VIRTUAL_CURRENCY_COUNT);
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														*PHP
													Element:span
														//To log that an economic event occurred
													Element:br
													Element:span
													Element:em
														$aKApi
														->logEconomic(TIMESTAMP, SENDER_ACCOUNT_ID, SENDER_CHARACTER_ID, RECEIVER_ACCOUNT_ID, RECEIVER_CHARACTER_ID, SHARD_ID, ITEM_ID, ITEM_NAME, ECONOMIC_TYPE, ECONOMIC_VALUE, CURRENCY_TYPE, VIRTUAL_CURRENCY_TYPE, CURRENCY_VALUE, VIRTUAL_CURRENCY_COUNT);
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														*JSON
													Element:span
														//To log that an economic event occurred
													Element:br
													Element:span
														{
													Element:span
														"timestamp":"2013-11-15T18:58:59.893Z",
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:span
														"data":{
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														"type":58,
													Element:span
														"sender_account_id":"cool_guy@example.com",
													Element:span
														"sender_character_id":"advertiser",
													Element:span
														"receiver_account_id":"cguy@aol.com",
													Element:span
														"receiver_character_id":"customer",
													Element:span
														"shard_id":1,
													Element:span
														"item_id":124606,
													Element:span
														"item_name":"Rebate for 124606",
													Element:span
														"economic_type":"rebate",
													Element:span
														"economic_value":52.281000000000006,
													Element:span
														"currency_type":0,
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:span
														"virtual_currency_label":"",
													Element:span
														"currency_value":52.281000000000006,
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														"virtual_currency_count”:1
													Element:span
														}
													Element:span
														}
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														NOTE: All parameters are required in JSON, except “shard_id”, “virtual_currency_label”, and “virtual_currency_count” which are optional.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
													Element:span
														----
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Traffic Source (Event ID#59)
												Node:
												(type) c
												(layer)4
													Element:p
														This event records information regarding where your traffic is coming from, whether it’s from Facebook, an Email Campaign, or Direct Marketing. To log traffic source, you need to pass the account ID, traffic source, and traffic source type, along with the timestamp. Optionally, you may pass the shard ID.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tr
													Element:th
														Type
													Element:th
														Parameter
													Element:th
														Default Value
													Element:tr
													Element:td
														Date
													Element:td
														EVENT TIMESTAMP
													Element:td
														(Current Time)
													Element:tr
													Element:td
														String
													Element:td
														ACCOUNT ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														TRAFFIC SOURCE
													Element:td
														campaign_name | sub_site | publisher_name | sub_publisher
													Element:a
														(See Appendix for more types
													Element:tr
													Element:td
														Long
													Element:td
														SHARD ID
													Element:td
														0
													Element:tr
													Element:td
														String
													Element:td
														TRAFFIC SOURCE TYPE
													Element:td
														publisher_name
													Element:a
														(See Appendix for more types
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														|| String || TRAFFIC SOURCE || Other
													Element:a
														(See Appendix for more types
														||
													Element:span
														|| String || TRAFFIC SOURCE TYPE || Unknown
													Element:a
														(See Appendix for more types
														||
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														Java
												Node:
												(type) c
												(layer)4
													Element:p
														//Log that a traffic source event occurred
													Element:br
														public void
													Element:em
														aKApi
														.logTrafficSource(TIMESTAMP, ACCOUNT_ID, TRAFFIC_SOURCE, SHARD_ID, TRAFFIC_SOURCE_TYPE) ;
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JavaScript
												Node:
												(type) c
												(layer)4
													Element:p
														//Log that a traffic source event occurred
													Element:br
													Element:em
														aKApi
														.logTrafficSource(TIMESTAMP, ACCOUNT_ID, TRAFFIC_SOURCE, SHARD_ID, TRAFFIC_SOURCE_TYPE) ;
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														PHP
												Node:
												(type) c
												(layer)4
													Element:p
														//Log that a traffic source event occurred
													Element:br
													Element:em
														$aKApi
														->logTrafficSource(TIMESTAMP, ACCOUNT_ID, TRAFFIC_SOURCE, SHARD_ID, TRAFFIC_SOURCE_TYPE) ;
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JSON
												Node:
												(type) c
												(layer)4
													Element:p
														//Log that a traffic source event occurred
													Element:br
												Node:
												(type) c
												(layer)4
													Element:pre
														{ "timestamp":"2013-11-15T19:07:30.221Z", "data":{ "type":59, "account_id":"cool_guy@example.com", "traffic_source":"campaign_name | sub_site | publisher_name | sub_publisher", "shard_id":0, "traffic_source_type":"publisher_name" } }
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														{
													Element:span
														"timestamp":"2013-11-15T19:07:30.221Z",
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:span
														"data":{
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														"type":59,
													Element:span
														"account_id":"cool_guy@example.com",
													Element:span
														"traffic_source":"abcTrafficSource",
													Element:span
														"shard_id":42.42,
													Element:span
														"traffic_source_type":"traffic_source_type"
													Element:span
														}
													Element:span
														}
												Node:
												(type) c
												(layer)4
													Element:p
														NOTE: All parameters are required in JSON, except “shard_id” which is optional.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
							Element:strong
								Social Events
						Node:
						(type) c
						(layer)2
							Element:hr
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Social Interactions (Event ID#6)
												Node:
												(type) c
												(layer)4
													Element:p
														This event records social events involving two people and includes all social events that are not covered as
													Element:em
														Group (Entry/Exit) Events
														or
													Element:em
														Friend (Addition/Deletion) Events
														. To log an in-app social event, you need to pass the sender account and character IDs; the receiver account and character IDs; the character levels of both users; the social event name and type; and the timestamp. Optionally, you may pass the shard ID.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Impacted UI Features
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														KPI
													Element:li
														System Metrics (Social)
													Element:li
														Basic Package (Summary)
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tr
													Element:th
														Type
													Element:th
														Parameter
													Element:th
														Default Value
													Element:tr
													Element:td
														Date
													Element:td
														EVENT TIMESTAMP
													Element:td
														(Current Time)
													Element:tr
													Element:td
														String
													Element:td
														ACCOUNT ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														CHARACTER ID
													Element:td
														ACCOUNT_ID
													Element:tr
													Element:td
														Long
													Element:td
														CHARACTER LEVEL
													Element:td
														If Generic Character then Account Level; If no concept of levels then 0.
													Element:tr
													Element:td
														String
													Element:td
														TARGET ACCOUNT ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														TARGET CHARACTER ID
													Element:td
														TARGET_ACCOUNT_ID
													Element:tr
													Element:td
														Long
													Element:td
														TARGET CHARACTER LEVEL
													Element:td
														If Generic Character then Account Level; If no concept of levels then 0.
													Element:tr
													Element:td
														Long
													Element:td
														SHARD ID
													Element:td
														0
													Element:tr
													Element:td
														String
													Element:td
														SOCIAL EVENTS NAME
													Element:td
														"No Default Value''
													Element:tr
													Element:td
														String
													Element:td
														SOCIAL EVENT TYPE
													Element:td
														Other
													Element:a
														(See Appendix for more types)
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														Java
												Node:
												(type) c
												(layer)4
													Element:p
														//Log an in-app social event
													Element:br
														public void
													Element:em
														aKApi.
														logSocialEvent(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, TARGET_ACCOUNT_ID, TARGET_CHARACTER_ID, TARGET_CHARACTER_LEVEL, SHARD_ID, SOCIAL_EVENTS_NAME, SOCIAL_EVENT_TYPE);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
													Element:strong
														JavaScript
												Node:
												(type) c
												(layer)4
													Element:p
														//Log an in-app social event
													Element:br
													Element:em
														aKApi.
														logSocialEvent(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, TARGET_ACCOUNT_ID, TARGET_CHARACTER_ID, TARGET_CHARACTER_LEVEL, SHARD_ID, SOCIAL_EVENTS_NAME, SOCIAL_EVENT_TYPE);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
													Element:strong
														PHP
												Node:
												(type) c
												(layer)4
													Element:p
														//Log an in-app social event
													Element:br
													Element:em
														$aKApi->
														logSocialEvent(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, TARGET_ACCOUNT_ID, TARGET_CHARACTER_ID, TARGET_CHARACTER_LEVEL, SHARD_ID, SOCIAL_EVENTS_NAME, SOCIAL_EVENT_TYPE);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JSON
												Node:
												(type) c
												(layer)4
													Element:p
														//Log an in-app social event
													Element:br
												Node:
												(type) c
												(layer)4
													Element:pre
														{ "timestamp":"2013-11-14T14:28:54.832Z", "data":{ "type":6, "sender_account_id":"cool_guy@example.com", "sender_character_id":"sharer", "sender_character_level":1, "receiver_account_id":"cool_guy1@example.com", "receiver_character_id":"advertiser", "receiver_character_level":1, "shard_id":42, "social_event_name":"rebate_share", "social_event_type":"share" } }
												Node:
												(type) c
												(layer)4
													Element:p
														NOTE: All parameters are required in JSON, except “shard_id” which is optional.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Off-Game Interaction (OGI) Sender (Event ID#7)
												Node:
												(type) c
												(layer)4
													Element:p
														An off-game-interaction refers to an interaction between a player inside the game environment and a person outside the game environment. To log the start of a social interaction outside of the application, you need to pass the sender account and character IDs; the receiver account and character IDs; the interaction category and location; and the event timestamp. Optionally, you may pass the shard ID.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tr
													Element:th
														Type
													Element:th
														Parameter
													Element:th
														Default Value
													Element:tr
													Element:td
														Date
													Element:td
														EVENT TIMESTAMP
													Element:td
														(Current Time)
													Element:tr
													Element:td
														String
													Element:td
														SENDER ACCOUNT ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														SENDER CHARACTER ID
													Element:td
														SENDER ACCOUNT ID
													Element:tr
													Element:td
														String
													Element:td
														RECEIVER ACCOUNT ID
													Element:td
													Element:em
														No Default Value
														*
													Element:tr
													Element:td
														String
													Element:td
														RECEIVER CHARACTER ID
													Element:td
														RECEIVER ACCOUNT ID
													Element:tr
													Element:td
														Long
													Element:td
														SHARD ID
													Element:td
														0
													Element:tr
													Element:td
														String
													Element:td
														OGI LOCATION
													Element:td
														Other
													Element:tr
													Element:td
														String
													Element:td
														OGI CATEGORY
													Element:td
													Element:em
														No Default Value
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														*Receiver Account ID can be an ID (e.g. Facebook or Email).
													Element:br
													Element:br
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														Java
												Node:
												(type) c
												(layer)4
													Element:p
														//Log the start of an off-game-interaction
													Element:br
														public void
													Element:em
														aKApi
														.logOgiSend(EVENT_TIMESTAMP, SENDER_ACCOUNT_ID, SENDER_CHARACTER_ID, RECEIVER_ACCOUNT_ID, RECEIVER_CHARACTER_ID, SHARD_ID,
													Element:span
														OGI_LOCATION, OGI_CATEGORY);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JavaScript
												Node:
												(type) c
												(layer)4
													Element:p
														//Log the start of an off-game-interaction
													Element:br
													Element:em
														aKApi
														.logOgiSend(EVENT_TIMESTAMP, SENDER_ACCOUNT_ID, SENDER_CHARACTER_ID, RECEIVER_ACCOUNT_ID, RECEIVER_CHARACTER_ID, SHARD_ID, OGI_LOCATION,
													Element:span
														OGI_CATEGORY);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														PHP
												Node:
												(type) c
												(layer)4
													Element:p
														//Log the start of an off-game-interaction
													Element:br
													Element:em
														$aKApi
														->logOgiSend(EVENT_TIMESTAMP, SENDER_ACCOUNT_ID, SENDER_CHARACTER_ID, RECEIVER_ACCOUNT_ID, RECEIVER_CHARACTER_ID, SHARD_ID, OGI_LOCATION, OGI_CATEGORY);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JSON
												Node:
												(type) c
												(layer)4
													Element:p
														//Log the start of an off-game-interaction
													Element:br
												Node:
												(type) c
												(layer)4
													Element:pre
														{ "timestamp":"2013-11-14T14:48:56.718Z", "data":{ "type":7, "sender_account_id":"cool_guy@example.com", "sender_character_id":"wizard", "receiver_account_id":"small_cat@example.com", "receiver_character_id":"mage", "shard_id":42, "ogi_location":"https://www.facebook.com/wall/42", "ogi_category":"wall post" } }
												Node:
												(type) c
												(layer)4
													Element:p
														NOTE: All parameters are required in JSON, except “shard_id” which is optional.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Off-Game-Interaction (OGI) Receiver (Event ID#8)
												Node:
												(type) c
												(layer)4
													Element:p
														This event records information regarding how the receiver of an off-game-interaction acted in response. To log the receiver's response to a social interaction outside of the application, you need to pass the sender account and character IDs, along with the receiver account and character IDs, shard ID, and event timestamp. As well, you'll need to pass the interaction category, location, and receiver response. Optionally, you may pass the shard ID.
												Node:
												(type) c
												(layer)4
													Element:p
														For related information, see Off-Game-Interaction Sender.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tr
													Element:th
														Type
													Element:th
														Parameter
													Element:th
														Default Value
													Element:tr
													Element:td
														Date
													Element:td
														EVENT TIMESTAMP
													Element:td
														(Current Time)
													Element:tr
													Element:td
														String
													Element:td
														SENDER ACCOUNT ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														SENDER CHARACTER ID
													Element:td
														SENDER ACCOUNT ID
													Element:tr
													Element:td
														String
													Element:td
														RECEIVER ACCOUNT ID
													Element:td
													Element:em
														No Default Value
														*
													Element:tr
													Element:td
														String
													Element:td
														RECEIVER CHARACTER ID
													Element:td
														RECEIVER ACCOUNT ID
													Element:tr
													Element:td
														Long
													Element:td
														SHARD ID
													Element:td
														0
													Element:tr
													Element:td
														String
													Element:td
														OGI CATEGORY
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														OGI LOCATION
													Element:td
														Other
													Element:tr
													Element:td
														String
													Element:td
														OGI RECEIVER ACTION
													Element:td
														Other
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														*Receiver Account ID can be an ID (e.g. Facebook or Email).
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														Java
												Node:
												(type) c
												(layer)4
													Element:p
														// Log the end of and response to an off-game-interaction
													Element:br
														public void
													Element:em
														aKApi
														.logOgiRecv(EVENT_TIMESTAMP, SENDER_ACCOUNT_ID, SENDER_CHARACTER_ID, RECEIVER_ACCOUNT_ID, RECEIVER_CHARACTER_ID, SHARD_ID, OGI_CATEGORY, OGI_LOCATION, OGI_RECEIVER_ACTION);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JavaScript
												Node:
												(type) c
												(layer)4
													Element:p
														// Log the end of and response to an off-game-interaction
													Element:br
													Element:em
														aKApi
														.logOgiRecv(EVENT_TIMESTAMP, SENDER_ACCOUNT_ID, SENDER_CHARACTER_ID, RECEIVER_ACCOUNT_ID, RECEIVER_CHARACTER_ID, SHARD_ID, OGI_CATEGORY, OGI_LOCATION, OGI_RECEIVER_ACTION);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														PHP
												Node:
												(type) c
												(layer)4
													Element:p
														// Log the end of and response to an off-game-interaction
													Element:br
													Element:em
														$aKApi
														->logOgiRecv(EVENT_TIMESTAMP, SENDER_ACCOUNT_ID, SENDER_CHARACTER_ID, RECEIVER_ACCOUNT_ID, RECEIVER_CHARACTER_ID, SHARD_ID, OGI_CATEGORY, OGI_LOCATION, OGI_RECEIVER_ACTION);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JSON
												Node:
												(type) c
												(layer)4
													Element:p
														// Log the end of and response to an off-game-interaction
													Element:br
												Node:
												(type) c
												(layer)4
													Element:pre
														{ "timestamp":"2013-11-14T15:00:53.806Z", "data":{ "type":8, "sender_account_id":"cool_guy@example.com", "sender_character_id":"wizard", "receiver_account_id":"small_cat@example.com", "receiver_character_id":"mage", "shard_id":42, "ogi_category":"wall post", "ogi_location":"https://www.facebook.com/wall/42", “ogi_receiver_action”:”other”” } }
												Node:
												(type) c
												(layer)4
													Element:p
														NOTE: All parameters are required in JSON, except “shard_id” which is optional.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Message (Event ID#20)
												Node:
												(type) c
												(layer)4
													Element:p
														This event records in-game messages between players for multiple channels of communication such as in-game chat, in-game mail, or a message broadcast to a group. To log an in-game message, you need to pass the sender account and character IDs; the receiver account and character IDs; the channel label; the message character count; and the timestamp. Optionally, you may pass the shard ID and the message description.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Impacted UI Features
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														System Metrics (Levels)
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tr
													Element:th
														Type
													Element:th
														Parameter
													Element:th
														Default Value
													Element:tr
													Element:td
														Date
													Element:td
														EVENT TIMESTAMP
													Element:td
														(Current Time)
													Element:tr
													Element:td
														String
													Element:td
														FROM ACCOUNT ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														FROM CHARACTER ID
													Element:td
														FROM_ACCOUNT_ID
													Element:tr
													Element:td
														String
													Element:td
														TO ACCOUNT ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														TO CHARACTER ID
													Element:td
														TO_ACCOUNT_ID
													Element:tr
													Element:td
														Long
													Element:td
														SHARD ID
													Element:td
														0
													Element:tr
													Element:td
														String
													Element:td
														CHANNEL LABEL
													Element:td
														Other
													Element:a
														(See Appendix for more types)
													Element:tr
													Element:td
														String
													Element:td
														MESSAGE DESCRIPTION
													Element:td
														Null
													Element:tr
													Element:td
														Long
													Element:td
														CHAR COUNT
													Element:td
														1
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														Java
												Node:
												(type) c
												(layer)4
													Element:p
														//Log an in-game message
													Element:br
														public void
													Element:em
														aKApi.
														logMessage(EVENT_TIMESTAMP, FROM_ACCOUNT_ID, FROM_CHARACTER_ID, TO_ACCOUNT_ID, TO_CHARACTER_ID, SHARD_ID, CHANNEL_LABEL, MESSAGE_DESCRIPTION, CHAR_COUNT);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JavaScript
												Node:
												(type) c
												(layer)4
													Element:p
														//Log an in-game message
													Element:br
													Element:em
														aKApi.
														logMessage(EVENT_TIMESTAMP, FROM_ACCOUNT_ID, FROM_CHARACTER_ID, TO_ACCOUNT_ID, TO_CHARACTER_ID, SHARD_ID, CHANNEL_LABEL, MESSAGE_DESCRIPTION, CHAR_COUNT);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														PHP
												Node:
												(type) c
												(layer)4
													Element:p
														//Log an in-game message
													Element:br
														$aKApi->logMessage(EVENT_TIMESTAMP, FROM_ACCOUNT_ID, FROM_CHARACTER_ID, TO_ACCOUNT_ID, TO_CHARACTER_ID, SHARD_ID, CHANNEL_LABEL, MESSAGE_DESCRIPTION, CHAR_COUNT);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JSON
												Node:
												(type) c
												(layer)4
													Element:p
														//Log an in-game message
													Element:br
												Node:
												(type) c
												(layer)4
													Element:pre
														{ "timestamp":"2013-11-14T18:46:02.842Z", "data":{ "type":20, "sender_account_id":"cool_guy@example.com", "sender_character_id":"Wizard", "receiver_account_id":"cool_guy@example.com", "receiver_character_id":"Wizard", "shard_id":0, "message_ch_label":"Group:Pre-Defined", "message_desc":"A guild chat message", "message_char_count":140 } }
												Node:
												(type) c
												(layer)4
													Element:p
														NOTE: All parameters are required in JSON, except “shard_id” and “message_desc” which are optional.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Recruitment Send (Event ID#33)
												Node:
												(type) c
												(layer)4
													Element:p
														For games that allow players to invite other players to join them in finishing certain tasks or activities, this event records information regarding the recruitment request. To log a recruitment request, you need to pass the sender account and character IDs; the receiver account and character IDs; the recruitment type; and timestamp.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Impacted UI Features
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														Basic Package (Summary)
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tr
													Element:th
														Type
													Element:th
														Parameter
													Element:th
														Default Value
													Element:tr
													Element:td
														Date
													Element:td
														TIMESTAMP
													Element:td
														(Current Time)
													Element:tr
													Element:td
														String
													Element:td
														SENDER ACCOUNT ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														SENDER CHARACTER ID
													Element:td
														SENDER_ACCOUNT_ID
													Element:tr
													Element:td
														String
													Element:td
														RECEIVER ACCOUNT ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														RECEIVER CHARACTER ID
													Element:td
														RECEIVER_ACCOUNT_ID
													Element:tr
													Element:td
														String
													Element:td
														RECRUITMENT TYPE
													Element:td
														Other
													Element:a
														(See Appendix for more types)
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														Java
												Node:
												(type) c
												(layer)4
													Element:p
														//Log a recruitment request
													Element:br
														public void
													Element:em
														aKApi.
														recruitmentSend(EVENT_TIMESTAMP, SENDER_ACCOUNT_ID, SENDER_CHARACTER_ID, RECEIVER_ACCOUNT_ID, RECEIVER_CHARACTER_ID, RECRUITMENT_TYPE);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JavaScript
												Node:
												(type) c
												(layer)4
													Element:p
														//Log a recruitment request
													Element:br
													Element:em
														aKApi.
														recruitmentSend(EVENT_TIMESTAMP, SENDER_ACCOUNT_ID, SENDER_CHARACTER_ID, RECEIVER_ACCOUNT_ID, RECEIVER_CHARACTER_ID, RECRUITMENT_TYPE);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														PHP
												Node:
												(type) c
												(layer)4
													Element:p
														//Log a recruitment request
													Element:br
													Element:em
														$aKApi->
														recruitmentSend(EVENT_TIMESTAMP, SENDER_ACCOUNT_ID, SENDER_CHARACTER_ID, RECEIVER_ACCOUNT_ID, RECEIVER_CHARACTER_ID, RECRUITMENT_TYPE);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JSON
												Node:
												(type) c
												(layer)4
													Element:p
														//Log a recruitment request
													Element:br
												Node:
												(type) c
												(layer)4
													Element:pre
														{ "timestamp":"2013-11-15T14:37:55.545Z", "data":{ "type":33, "sender_account_id":"cool_guy@example.com", "sender_character_id":"Wizard", "receiver_account_id":"small_cat@example.com", "receiver_character_id":"Wizard", "recruitment_type":"mobile ad" } }
												Node:
												(type) c
												(layer)4
													Element:p
														NOTE: All parameters are required in JSON.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Recruitment Receive Action (Event ID#34)
												Node:
												(type) c
												(layer)4
													Element:p
														This event records information regarding a player's response to a recruitment request, for example, was the request accepted or declined. To log a recruitment request response, you need to pass the sender account and character IDs; the receiver account and character IDs; the recruitment type and outcome; and the timestamp.
												Node:
												(type) c
												(layer)4
													Element:p
														For related information, see
													Element:a
														.
													Element:em
														Recruitment Send
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Impacted UI Features
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														Basic Package (Summary)
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tr
													Element:th
														Type
													Element:th
														Parameter
													Element:th
														Default Value
													Element:tr
													Element:td
														Date
													Element:td
														TIMESTAMP
													Element:td
														(Current Time)
													Element:tr
													Element:td
														String
													Element:td
														SENDER ACCOUNT ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														SENDER CHARACTER ID
													Element:td
														SENDER_ACCOUNT_ID
													Element:tr
													Element:td
														String
													Element:td
														RECEIVER ACCOUNT ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														RECEIVER CHARACTER ID
													Element:td
														RECEIVER_ACCOUNT_ID
													Element:tr
													Element:td
														String
													Element:td
														RECRUITMENT TYPE
													Element:td
														Other
													Element:a
														(See Appendix for more types)
													Element:tr
													Element:td
														String
													Element:td
														RECRUITMENT OUTCOME
													Element:td
														Rejected*
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														*Recruitment Outcome default is 'Rejected', alternate options also include 'Accepted'.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														Java
												Node:
												(type) c
												(layer)4
													Element:p
														//Log a recruitment request response
													Element:br
														public void
													Element:em
														aKApi.
														recruitmentReceive(EVENT_TIMESTAMP, SENDER_ACCOUNT_ID, SENDER_CHARACTER_ID, RECEIVER_ACCOUNT_ID, RECEIVER_CHARACTER_ID, RECRUITMENT_TYPE, RECRUITMENT_OUTCOME);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JavaScript
												Node:
												(type) c
												(layer)4
													Element:p
														//Log a recruitment request response
													Element:br
													Element:em
														aKApi.
														recruitmentReceive(EVENT_TIMESTAMP, SENDER_ACCOUNT_ID, SENDER_CHARACTER_ID, RECEIVER_ACCOUNT_ID, RECEIVER_CHARACTER_ID, RECRUITMENT_TYPE, RECRUITMENT_OUTCOME);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														PHP
												Node:
												(type) c
												(layer)4
													Element:p
														//Log a recruitment request response
													Element:br
													Element:em
														$aKApi->
														recruitmentReceive(EVENT_TIMESTAMP, SENDER_ACCOUNT_ID, SENDER_CHARACTER_ID, RECEIVER_ACCOUNT_ID, RECEIVER_CHARACTER_ID, RECRUITMENT_TYPE, RECRUITMENT_OUTCOME);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JSON
												Node:
												(type) c
												(layer)4
													Element:p
														//Log a recruitment request response
													Element:br
												Node:
												(type) c
												(layer)4
													Element:pre
														{ "timestamp":"2013-11-15T14:47:14.579Z", "data":{ "type":34, "sender_account_id":"cool_guy@example.com", "sender_character_id":"Wizard", "receiver_account_id":"small_cat@example.com", "receiver_character_id":"Wizard", "recruitment_type":"mobile ad", "recruitment_outcome":"trial account" } }
												Node:
												(type) c
												(layer)4
													Element:p
														NOTE: All parameters are required in JSON.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Friend Addition (Event ID#43)
												Node:
												(type) c
												(layer)4
													Element:p
														This event records information regarding a player adding another player as a friend, despite whether the friendship is reciprocated. To log a friend addition, you need to pass the sender account and character IDs; the receiver account and character IDs; and the timestamp.
												Node:
												(type) c
												(layer)4
													Element:p
														Please note that this is a one-way, "follow" type of addition. If Bob is accepting a friend request from Alice, and they will subsequently appear on each other's friends list, then two events should be sent. One with Alice as the sender and Bob as the recipient, and another with Bob as the sender and Alice as the recipient. If Alice is simply following Bob without any action on his part, then you only need to send a single event with Alice as the sender and Bob as the recipient.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Impacted UI Features
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														System Metrics (Levels)
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tr
													Element:th
														Type
													Element:th
														Parameter
													Element:th
														Default Value
													Element:tr
													Element:td
														Date
													Element:td
														EVENT TIMESTAMP
													Element:td
														(Current Time)
													Element:tr
													Element:td
														String
													Element:td
														ACCOUNT ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														CHARACTER ID
													Element:td
														ACCOUNT ID
													Element:tr
													Element:td
														String
													Element:td
														RECIPIENT ACCOUNT ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														RECIPIENT CHARACTER ID
													Element:td
														RECIPIENT ACCOUNT ID
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														Java
												Node:
												(type) c
												(layer)4
													Element:p
														//Log a friend addition
													Element:br
														public void
													Element:em
														aKApi
														.logFriendAdd(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, RECIPIENT_ACCOUNT_ID, RECIPIENT_CHARACTER_ID);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JavaScript
												Node:
												(type) c
												(layer)4
													Element:p
														//Log a friend addition
													Element:br
													Element:em
														aKApi
														.logFriendAdd(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, RECIPIENT_ACCOUNT_ID, RECIPIENT_CHARACTER_ID);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														PHP
												Node:
												(type) c
												(layer)4
													Element:p
														//Log a friend addition
													Element:br
													Element:em
														$aKApi
														->logFriendAdd(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, RECIPIENT_ACCOUNT_ID, RECIPIENT_CHARACTER_ID);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JSON
												Node:
												(type) c
												(layer)4
													Element:p
														//Log a friend addition
													Element:br
												Node:
												(type) c
												(layer)4
													Element:pre
														{ "timestamp":"2013-11-15T17:35:00.091Z", "data":{ "type":43, "sender_account_id":"cool_guy@example.com", "sender_character_id":"Wizard", "receiver_account_id":"small_cat@example.com", "receiver_character_id":"Wizard" } }
												Node:
												(type) c
												(layer)4
													Element:p
														NOTE: All parameters are required in JSON.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Friend Deletion (Event ID#44)
												Node:
												(type) c
												(layer)4
													Element:p
														This event records information regarding the end of an in-game friendship. To log a friend deletion, you need to pass the sender account and character IDs; the receiver account and character IDs; along with the timestamp.
												Node:
												(type) c
												(layer)4
													Element:p
														For related information, see Friend Addition.
												Node:
												(type) c
												(layer)4
													Element:p
														Please note that this is a one-way, "unfollow" type of deletion. If Alice and Bob are currently in each other's friends list, and a removal from one party will cause them to be dropped from both lists, then you should send two deletion events. One with Alice as the sender and Bob as the recipient, and another with Bob as the sender and Alice as the recipient.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Impacted UI Features
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														System Metrics (Levels)
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tr
													Element:th
														Type
													Element:th
														Parameter
													Element:th
														Default Value
													Element:tr
													Element:td
														Date
													Element:td
														EVENT TIMESTAMP
													Element:td
														(Current Time)
													Element:tr
													Element:td
														String
													Element:td
														ACCOUNT ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														CHARACTER ID
													Element:td
														ACCOUNT ID
													Element:tr
													Element:td
														String
													Element:td
														RECIPIENT ACCOUNT ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														RECIPIENT CHARACTER ID
													Element:td
														RECIPIENT ACCOUNT ID
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														Java
												Node:
												(type) c
												(layer)4
													Element:p
														//Log a friend deletion
													Element:br
														public void
													Element:em
														aKApi
														.logFriendDelete(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, RECIPIENT_ACCOUNT_ID, RECIPIENT_CHARACTER_ID);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JavaScript
												Node:
												(type) c
												(layer)4
													Element:p
														//Log a friend deletion
													Element:br
													Element:em
														aKApi
														.logFriendDelete(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, RECIPIENT_ACCOUNT_ID, RECIPIENT_CHARACTER_ID);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														PHP
												Node:
												(type) c
												(layer)4
													Element:p
														//Log a friend deletion
													Element:br
													Element:em
														$aKApi
														->logFriendDelete(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, RECIPIENT_ACCOUNT_ID, RECIPIENT_CHARACTER_ID);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JSON
												Node:
												(type) c
												(layer)4
													Element:p
														//Log a friend deletion
													Element:br
												Node:
												(type) c
												(layer)4
													Element:pre
														{ "timestamp":"2013-11-15T17:40:17.868Z", "data":{ "type":44, "sender_account_id":"cool_guy@example.com", "sender_character_id":"Wizard", "receiver_account_id":"small_cat@example.com", "receiver_character_id":"Wizard" } }
												Node:
												(type) c
												(layer)4
													Element:p
														NOTE: “sender_account_id”, and “receiver_account_id” are required, while all other parameters are optional.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
							Element:strong
								Custom Events
						Node:
						(type) c
						(layer)2
							Element:p
								Custom events include those events that relate to custom actions and CRM actions. As a Ninja Metrics customer, you have the freedom to define custom events in any way that you want, given the fields described under the
							Element:em
								Custom Slot Action
								and
							Element:em
								Custom Action
								events below. Details on how to execute calls to log custom events can be found below for each corresponding event.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								!!!!
							Element:strong
								CRM Action (Event ID#52)
								- To Be Completed.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								A Customer Relationship Management (CRM) action may be taken by a CRM representative in the gaming company and recorded using this generic field. This event records information regarding how the customer responds to the action. To log a CRM action and response, you need to pass the account and character IDs, the shard ID, the CRM action; and the action type and timestamp. Optionally, you may pass the shard ID, outcome status and timestamp.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
							Element:big
							Element:strong
								Impacted UI Features
							Element:span
								*KPI
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
							Element:big
							Element:strong
								Parameters
							Element:span
								|| border=1 rules=rows frame=hsides
							Element:span
								||! Type ||! Parameter ||! Default Value ||
							Element:span
								|| Date || CRM ACTION TIMESTAMP || (Current Time) ||
							Element:span
								|| String || ACCOUNT ID ||
							Element:em
								No Default Value
								||
							Element:span
								|| String || CHARACTER ID || ACCOUNT ID ||
							Element:span
								|| Long || SHARD ID || 0 ||
							Element:span
								|| String || CRM ACTION || NA ||
							Element:span
								|| String || CRM ACTION TYPE || Other
							Element:a
								(See Appendix for more types)
								||
							Element:span
								|| String || CRM FULFILLED STATUS || Null ||
							Element:span
								|| Date || CRM FULFILLED TIMESTAMP || Null ||
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
							Element:big
							Element:strong
								Sample Use
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								*Java
							Element:span
								//Log a CRM action and response
							Element:br
							Element:span
								public void
							Element:em
								aKApi
								.logCrmAction(CRM_ACTION_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, CRM_ACTION, CRM_ACTION_TYPE, CRM_FULFILLED_STATUS,
							Element:span
								CRM_FULFILLED_TIMESTAMP);
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								*JavaScript
							Element:span
								//Log a CRM action and response
							Element:br
							Element:span
							Element:em
								aKApi
								.logCrmAction(CRM_ACTION_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, CRM_ACTION, CRM_ACTION_TYPE, CRM_FULFILLED_STATUS, CRM_FULFILLED_TIMESTAMP);
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								*PHP
							Element:span
								//Log a CRM action and response
							Element:br
							Element:span
							Element:em
								$aKApi
								->logCrmAction(CRM_ACTION_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, CRM_ACTION, CRM_ACTION_TYPE, CRM_FULFILLED_STATUS, CRM_FULFILLED_TIMESTAMP);
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								*JSON
							Element:span
								//Log a CRM action and response
							Element:br
							Element:span
								{
							Element:span
								"timestamp":"2013-11-15T18:23:20.079Z",
							Element:span
								"data":{
							Element:span
								"type":52,
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								"account_id":"cool_guy@example.com",
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								"character_id":"Wizard",
							Element:span
								"shard_id":42.42,
							Element:span
								"crm_action":"crm_action",
							Element:span
								"crm_action_type":"crm_action_type",
							Element:span
								"crm_fulfilled_status":"crm_fulfilled_status",
							Element:span
								"crm_fulfilled_timestamp":"2013-08-12T05:00:00.000Z"
							Element:span
								}
							Element:span
								}
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								NOTE: All parameters are required in JSON, except “shard_id”, “crm_fulfilled_status”, and “crm_fulfilled_timestamp” which are optional.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:a
								Back to Top
							Element:span
								----
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								!!!!
							Element:strong
								Customer Service Action (Event ID#53)
								- To Be Completed.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								To log a customer service action ,you need to pass the account and character IDs, the customer service action and type; along with the action timestamp. Optionally, you may pass the shard ID.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
							Element:big
							Element:strong
								Impacted UI Features
							Element:span
								*KPI
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
							Element:big
							Element:strong
								Parameters
							Element:span
								|| border=1 rules=rows frame=hsides
							Element:span
								||! Type ||! Parameter ||! Default Value ||
							Element:span
								|| Date || CS TIMESTAMP || (Current Time) ||
							Element:span
								|| String || ACCOUNT ID ||
							Element:em
								No Default Value
								||
							Element:span
								|| String || CHARACTER ID || ACCOUNT ID ||
							Element:span
								|| Long || SHARD ID || 0 ||
							Element:span
								|| String || CS ACTION ||
							Element:em
								No Default Value
								||
							Element:span
								|| String || CS ACTION TYPE || Other
							Element:a
								(See Appendix for more types)
								||
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
							Element:big
							Element:strong
								Sample Use
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								*Java
							Element:span
								//Log a custom slot action event
							Element:br
							Element:span
								public void
							Element:em
								aKApi
								.logCustomerServiceAction(CS_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, CS_ACTION, CS_ACTION_TYPE);
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								*JavaScript
							Element:span
								//Log a custom slot action event\\
							Element:span
							Element:em
								aKApi
								.logCustomerServiceAction(CS_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, CS_ACTION, CS_ACTION_TYPE);
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								*PHP
							Element:span
								//Log a custom slot action event
							Element:br
							Element:span
							Element:em
								$aKApi
								->logCustomerServiceAction(CS_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, CS_ACTION, CS_ACTION_TYPE);
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								*JSON
							Element:span
								//Log a custom slot action event
							Element:br
							Element:span
								{
							Element:span
								"timestamp":"2013-11-15T18:29:07.797Z",
							Element:span
								"data":{
							Element:span
								"type":53,
							Element:span
								"account_id":"cool_guy@example.com",
							Element:span
								"character_id":"Wizard",
							Element:span
								"shard_id":42.42,
							Element:span
								"customer_service_action":"cs_action",
							Element:span
								"customer_service_action_type":"cs_action_type"
							Element:span
								}
							Element:span
								}
						Node:
						(type) c
						(layer)2
							Element:p
							Element:span
								NOTE: All parameter are required in JSON, except “shard_id” which is optional.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:a
								Back to Top
							Element:span
								----
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Custom Slot (Event ID#54)
												Node:
												(type) c
												(layer)4
													Element:p
														This event can be defined by your organization and records information regarding events that are not described in any of the other events and do not relate to actions in the game. To log a custom action event, you need to pass the account and character IDs, the custom action, the action type, the action value, and the timestamp.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Impacted UI Features
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														KPI
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Parameters
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tr
													Element:th
														Type
													Element:th
														Parameter
													Element:th
														Default Value
													Element:tr
													Element:td
														Date
													Element:td
														TIMESTAMP
													Element:td
														(Current Time)
													Element:tr
													Element:td
														String
													Element:td
														ACCOUNT ID
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														CHARACTER ID
													Element:td
														ACCOUNT ID
													Element:tr
													Element:td
														String
													Element:td
														CUSTOM ACTION
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String
													Element:td
														CUSTOM ACTION TYPE
													Element:td
													Element:em
														No Default Value
													Element:tr
													Element:td
														String (max 400)
													Element:td
														CUSTOM ACTION VALUE
													Element:td
														NA
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														Java
												Node:
												(type) c
												(layer)4
													Element:p
														//Log a custom action event
													Element:br
														public void
													Element:em
														aKApi
														.logCustomAction(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CUSTOM_ACTION, CUSTOM_ACTION_TYPE, CUSTOM_ACTION_VALUE);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JavaScript
												Node:
												(type) c
												(layer)4
													Element:p
														//Log a custom action event
													Element:br
													Element:em
														aKApi
														.logCustomAction(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CUSTOM_ACTION, CUSTOM_ACTION_TYPE, CUSTOM_ACTION_VALUE);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														PHP
												Node:
												(type) c
												(layer)4
													Element:p
														//Log a custom action event
													Element:br
													Element:em
														$aKApi
														->logCustomAction(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CUSTOM_ACTION, CUSTOM_ACTION_TYPE, CUSTOM_ACTION_VALUE);
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														JSON
												Node:
												(type) c
												(layer)4
													Element:p
														//Log a custom action event
													Element:br
												Node:
												(type) c
												(layer)4
													Element:pre
														{ "timestamp":"2013-11-15T18:35:36.006Z", "data":{ "type":54, "account_id":"cool_guy@example.com", "character_id":"Wizard", "custom_action":"custom_action", "custom_action_type":"custom_action_type", "custom_action_value":"custom_action_value" } }
												Node:
												(type) c
												(layer)4
													Element:p
														NOTE: All parameters are required in JSON.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
												Node:
												(type) c
												(layer)4
													Element:a
														Restore
												Node:
												(type) c
												(layer)4
													Element:a
														March 09, 2015, at 10:50 PM
														by
												Node:
												(type) c
												(layer)4
													Element:span
														173.51.250.14
														- Added lines 1-32:
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														The Katana Social Analytics Engine measures the value of social contributions in applications and games, provides detailed projections for the outcomes that matter to developers, and offers the tools to determine how effectively features facilitate engagement and social interaction.
												Node:
												(type) c
												(layer)4
													Element:p
														If you're new to Katana start with the
													Element:a
														Getting Started Guide
														. Otherwise dig right in with an Integration Library or the API documentation.
												Node:
												(type) c
												(layer)4
													Element:p
														(:table border=0 cellpadding=5 cellspacing=0:) (:headnr:)
													Element:a
														Integration Libraries
														(:head:)
													Element:a
														API Documentation
														(:head:)
													Element:a
														Integration Examples
														(:head:)
													Element:a
														Support
														(:cellnr:)
													Element:a
														JavaScript
														(:cell:)
													Element:a
														Quick Start Guide
														(:cell:)
													Element:a
														Unity
														(:cell:)
													Element:a
														FAQs
														(:cellnr:)
													Element:a
														Java
														(:cell:)
													Element:a
														Advanced Setup Guide
														(:cell:)
													Element:a
														Advanced Setup Guide-Removed
														(:cell:)
													Element:a
														Android
														(:cell:)
													Element:a
														Glossary
														(:cellnr:)
													Element:a
														PHP
														(:cell:)
													Element:a
														Recommended Country Codes
														(:cell:)
													Element:a
														iOS
														(:cell:)
													Element:a
														Dashboards
												Node:
												(type) c
												(layer)4
													Element:p
														(:cellnr:)
													Element:a
														IOS
														(:cellnr:)
													Element:a
														Android
														(:cell:)
													Element:a
														JSON Sample Events
													Element:span
														(:cell:)
														(:cell:) (:cell:)
													Element:a
														JSON Sample Events - Removed
													Element:a
														Videos
												Node:
												(type) c
												(layer)4
													Element:p
														(:tableend:) (:comment [[Attach:Main/Ninja Metrics - Katana API Documentationv9.pdf|Katana API Doc]] :)
												Node:
												(type) c
												(layer)4
													Element:a
														Restore
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
														Search
												Node:
												(type) c
												(layer)4
													Element:fieldset
													Element:p
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
													Element:a
														View
													Element:li
													Element:a
														Edit
													Element:li
													Element:a
														History
													Element:li
													Element:a
														Print
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Getting Started
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Integration Libraries
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
													Element:a
														JavaScript
													Element:li
													Element:a
														Java
													Element:li
													Element:a
														PHP
													Element:li
													Element:a
														iOS
													Element:li
													Element:a
														Android
													Element:li
													Element:a
														Unreal
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														API Documentation
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
													Element:a
														Getting Started
													Element:li
													Element:a
														Quick Start Guide
													Element:li
													Element:a
														Advanced Setup Guide
													Element:li
													Element:a
														HTTPS & JSON API
													Element:li
													Element:a
														JSON Sample Events
													Element:li
													Element:a
														Recommended Country Codes
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
													Element:a
														edit SideBar
												Node:
												(type) c
												(layer)4
													Element:p
														Page last modified on May 27, 2015, at 04:07 PM
												Node:
												(type) c
												(layer)4
													Element:p
														© Ninja Metrics, Inc.
