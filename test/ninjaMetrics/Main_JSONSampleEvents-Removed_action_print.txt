Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
				Element:a
					Main: JSONSampleEvents-Removed
			Node:
			(type) c
			(layer)1
				Element:p
				Element:a
			Node:
			(type) c
			(layer)1
				Element:p
					The Ninja Metrics JSON API allows you to push your application’s Event data into our pipeline.
			Node:
			(type) c
			(layer)1
				Element:p
					All JSON Event payloads are POSTed to the following URL base:
				Element:br
				Element:a
					https://api.ninjametrics.com/event
			Node:
			(type) c
			(layer)1
				Element:p
					All queries to server-side endpoints require the following parameters:
				Element:br
					?client_id=[client id from account manager]&app_id=[app id from account manager]&api_client=[self identified lib version]
			Node:
			(type) c
			(layer)1
				Element:span
					For example:
				Element:br
				Element:a
					https://api.ninjametrics.com/event?client_id=100&app_id=100&app_pwd=1234567890&api_client=CoolCompany/ruby_1.2a
			Node:
			(type) c
			(layer)1
				Element:p
					We also collect, for deployment tracking purposes to provide better support to our customers, any data in the User-Agent HTTP header field.
				Element:br
			Node:
			(type) c
			(layer)1
				Element:p
					The value for the timestamp key in any Event JSON payload should always be in the ISO-8601 standard (UTC): YYYY-MM-DDTHH:mm:ss.sssZ. JavaScript’s Date.toJSON() accomplishes this perfectly.
				Element:br
			Node:
			(type) c
			(layer)1
				Element:dl
				Element:dd
				Element:span
					For example:
				Element:span
					HTTPS POST
				Element:a
					https://api.ninjametrics.com/event?client_id=1&app_id=1&api_client=Spot/js_1.5.u
				Element:span
					with JSON payload body...
			Node:
			(type) c
			(layer)1
				Element:pre
					{ "timestamp":"2012-12-05T03:12:15.319Z", "data":{ ... } }
			Node:
			(type) c
			(layer)1
				Element:p
					The values used for the account_id, character_id, and shard_id keys must be initialized with the respective #9, #11, and #13 dimensional data loader Events before use in any Event payloads. Event type #9-15, 31, 35, 36 are used in initializing DIM data. REMEMBER: When not making use of a numeric key, you must put 0 for its value.
			Node:
			(type) c
			(layer)1
				Element:p
				Element:br
				Element:big
					Note:
				Element:br
				Element:br
				Element:big
					JSON Content Type - When sending JSON data to the Ninja Metrics API it is required to properly set the "Content Type" header to "application/json". A lot of packages do this automatically, but if you receive a 415 error then that is likely the cause.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
							Element:strong
								Using JSON Samples
						Node:
						(type) c
						(layer)2
							Element:p
								The first line is a sample function call for the event using one of our provided
							Element:a
								libraries
								.
						Node:
						(type) c
						(layer)2
							Element:pre
								nameOfFunction(var1, var2, var3, var4, var5)
						Node:
						(type) c
						(layer)2
							Element:p
								The next section is a pure JSON sample POST body that could be sent.
						Node:
						(type) c
						(layer)2
							Element:pre
								{ "timestamp":"2013-11-14T13:43:06.308Z", "data":{ "type":##, "var1":"cool_guy@example.com", "var2":"Wizard", "var3":987653, "var4":"Something here", "var5":12345 } }
						Node:
						(type) c
						(layer)2
							Element:p
								They are independent. The function is just there as a reference of what you would use in one of the
							Element:a
								libraries
								.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:big
							Element:strong
								Example
						Node:
						(type) c
						(layer)2
							Element:p
								The following is an example of a complete JSON only request.
						Node:
						(type) c
						(layer)2
							Element:span
								1. Create a POST request to the appropriate url making sure to set the header Content-Type = "application/json":
						Node:
						(type) c
						(layer)2
							Element:pre
								http://api.ninjametrics.com/event?client_id=1234&app_id=5678&app_pwd=somepassword&api_client=JSON
						Node:
						(type) c
						(layer)2
							Element:span
								2. The body of the post request format should match one of the following JSON examples found below. In each example the one field that should remain unchanged is the "type" key/value pair. This is the event id.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:strong
								NOTE: The order of the JSON key/value pairs is important. Changing the order will result in the request being rejected.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:a
								Back to Top
						Node:
						(type) c
						(layer)2
							Element:hr
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Login (Event 1)
												Node:
												(type) c
												(layer)4
													Element:p
														Logs that a Login event occurred.
												Node:
												(type) c
												(layer)4
													Element:pre
														logLogin(EventTimestamp, AccountId, CharacterId, ShardId, ClientPlatform, AreaId, AreaName) { "timestamp":"2013-11-14T13:43:06.308Z", "data":{ "type":1, "account_id":"cool_guy@example.com", "character_id":"Wizard", "shard_id":42, “platform":"Facebook Mobile", "area_id":0 “area_name”:"Area_Name" } }
												Node:
												(type) c
												(layer)4
													Element:p
													Element:strong
														Optional Parameters: shard_id, area_id, area_name
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Notes
												Node:
												(type) c
												(layer)4
													Element:dl
													Element:dd
													Element:ul
													Element:li
														platform is an open-ended String field that should be used consistently throughout the application integration.
													Element:li
														FUTURE: area_id must match numeric identifier given from map loading process.
													Element:li
														One could have just the type and account_id parameters in the data section and only have to initialize the account_id parameter.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Logout (Event 2)
												Node:
												(type) c
												(layer)4
													Element:p
														Logs that a Logout event occurred.
												Node:
												(type) c
												(layer)4
													Element:pre
														logLogout(EventTimestamp, AccountId, CharacterId) { "timestamp":"2013-11-14T13:51:53.035Z", "data":{ "type":2, "account_id":"cool_guy@example.com", "character_id":"Wizard", } }
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Notes
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														platform is an open-ended String field that should be used consistently throughout the application integration.
													Element:li
														FUTURE: area_id must match numeric identifier given from map loading process.
													Element:li
														One could have just the type and account_id parameters in the data section and only have to initialize the account_id parameter.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Subscription Change (Event 3)
												Node:
												(type) c
												(layer)4
													Element:p
														Updates the Ninja Metrics service with new information about an account subscription.
												Node:
												(type) c
												(layer)4
													Element:pre
														putSubChange(EventTimestamp, AccountId, SubscriptionStatus, SubscriptionType, SubscriptionValue, ExpireTimestamp) { "timestamp":"2013-11-10T06:00:00.000Z", "data":{ "type":3, "account_id":"cool_guy@example.com", "account_status":"Active", "account_sub_type":"Paid", "account_sub_value":10, "account_sub_expires_timestamp":"2016-02-01T06:00:00.000Z" } }
												Node:
												(type) c
												(layer)4
													Element:p
													Element:strong
														Optional parameters: account_sub_value
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Notes
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														Valid options for subscription_status: Active, Stopped, Expired, Failed, Cancelled
													Element:li
														Valid options for subscription_type: Free, Paid, Premium
													Element:li
														subscription_value: how much does the subscription over this period cost?
													Element:li
														expire_timestamp - timestamp = subscription period length
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Social Group Enter (Event 4)
												Node:
												(type) c
												(layer)4
													Element:p
														Logs a Group Entry event.
												Node:
												(type) c
												(layer)4
													Element:pre
														logEnterGroup(EventTimestamp, AccountId, CharacterId, ShardId, GroupId, CharacterLevel) { "timestamp":"2013-11-14T14:10:36.792Z", "data":{ "type":4, "account_id":"cool_guy@example.com", "character_id":"wizard", "character_lvl":50, "shard_id":42, "group_id":42 } }
												Node:
												(type) c
												(layer)4
													Element:p
													Element:strong
														Optional parameters: shard_id
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Notes
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														group_id parameter values do not have to be initialized beforehand. They will automatically be created if they don't exist.
													Element:li
														character_level must be numeric and should be set to 0 if unused
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Social Group Exit (Event 5)
												Node:
												(type) c
												(layer)4
													Element:p
														Logs a Group Exit event.
												Node:
												(type) c
												(layer)4
													Element:pre
														logExitGroup(EventTimestamp, AccountId, CharacterId, ShardId, GroupId, CharacterLevel) { "timestamp":"2013-11-14T14:16:15.375Z", "data":{ "type":5, "account_id":"cool_guy@example.com", "character_id":"Wizard", "character_lvl":50, "shard_id":42, "group_id":42 } }
												Node:
												(type) c
												(layer)4
													Element:p
													Element:strong
														Optional parameters: shard_id
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Notes
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														group_id parameter values do not have to be initialized beforehand. They will automatically be created if they don't exist.
													Element:li
														character_level must be numeric and should be set to 0 if unused
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Social Interactions (Event 6)
												Node:
												(type) c
												(layer)4
													Element:p
														Logs an in-app Social event and not for game invites, messages, group enter/exit, store gifts or clan enter/exit.
												Node:
												(type) c
												(layer)4
													Element:pre
														logSocialEvent(EventTimestamp, AccountId, SenderCharacterId, ShardId, SenderLevel, ReceiverAccountId, ReceiverCharacterId, ReceiverLevel, EventName, EventType) { "timestamp":"2013-11-14T14:28:54.832Z", "data":{ "type":6, "sender_account_id":"cool_guy@example.com", "sender_character_id":"sharer", "sender_character_level":1, "receiver_account_id":"cool_guy1@example.com", "receiver_character_id":"advertiser", "receiver_character_level":1, "shard_id":42, "social_event_name":"rebate_share", "social_event_type":"share" } }
												Node:
												(type) c
												(layer)4
													Element:p
													Element:strong
														Optional parameters: shard_id
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Notes
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														event_name and event_type will accept any string.
													Element:li
														event_type examples: “clan invite”, “group invite”, “barter”. This should be used for social events not already explicitly called out. Do NOT use this for tracking Guild (#41,42) or Group (#4,5) Enter/Exit, Recruitment (#33,34) Send/Response.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Off Game Interaction (OGI) Sender (Event 7)
												Node:
												(type) c
												(layer)4
													Element:p
														Logs the start (sending) of a social transaction outside of the application aka an Off-Game Interaction.
												Node:
												(type) c
												(layer)4
													Element:pre
														logOgiSend(EventTimestamp, SenderAccountId, SenderCharacterId, ReceiverAccountId, ReceiverCharacterId, ShardId, Category, Location) { "timestamp":"2013-11-14T14:48:56.718Z", "data":{ "type":7, "sender_account_id":"cool_guy@example.com", "sender_character_id":"wizard", "receiver_account_id":"small_cat@example.com", "receiver_character_id":"mage", "shard_id":42, "ogi_location":"https://www.facebook.com/wall/42", "ogi_category":"wall post" } }
												Node:
												(type) c
												(layer)4
													Element:p
													Element:strong
														Optional parameters: shard_id
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Notes
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														See Event#8 for suggested values for location and category.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Off Game Interaction (OGI) Receiver (Event 8)
												Node:
												(type) c
												(layer)4
													Element:p
														Logs the end (receiving) of a social transaction outside of the application aka an Off-Game Interaction.
												Node:
												(type) c
												(layer)4
													Element:pre
														logOgiRecv(EventTimestamp, SenderAccountId, SenderCharacterId, ReceiverAccountId, ReceiverCharacterId, ShardId, Category, Location, ReceiverAction) { "timestamp":"2013-11-14T15:00:53.806Z", "data":{ "type":8, "sender_account_id":"cool_guy@example.com", "sender_character_id":"wizard", "receiver_account_id":"small_cat@example.com", "receiver_character_id":"mage", "shard_id":42, "ogi_category":"wall post", "ogi_location":"https://www.facebook.com/wall/42", “ogi_receiver_action”:”other” } }
												Node:
												(type) c
												(layer)4
													Element:p
													Element:strong
														Optional parameters: shard_id
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Notes
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														location, category, and receiver_action will accept any string, so be sure to use them appropriately.
													Element:li
														We suggest you use a URI for location to specify where the off-game-interaction occurred.
													Element:li
														category examples: “forum post”, “wall post”, “service cancel”.
													Element:li
														receiver_action examples: “post response”, “cancel request”.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Create Account (Event 9)
												Node:
												(type) c
												(layer)4
													Element:p
														Loads Account creation data, and must be run once per Account Id, before referencing said Account Id in any other logging statements.
												Node:
												(type) c
												(layer)4
													Element:pre
														loadAccountCreate(EventTimestamp, AccountId, ClientLanguage, ClientCountry, ClientGender, ClientDob, ClientPlatform, BankedCurrency, AccountType, OldAccountId) { "timestamp":"2013-11-14T15:18:30.726Z", "data":{ "type":9, "account_id":"cool_guy@example.com", "account_sub_type":"Free", "account_lang":"NA", "account_country":"de", "account_gender":"N", "account_dob":"1900-01-01T00:00:00.000Z", "account_currency_balance":55, "platform":"Social", "old_account_id":"small_cat@example.com" } }
												Node:
												(type) c
												(layer)4
													Element:p
													Element:strong
														Optional parameters: banked_currency, old_account_id
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Notes
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														account_type: Free, Paid, Premium
													Element:li
														client_lang - 2 to 4 letter language code from
													Element:a
														http://www.geonames.org/countries/
														- examples: ar-YE, en-US, fr
													Element:li
														client_country - ISO-3166 alpha2 country-code from
													Element:a
														http://www.geonames.org/countries/
														- examples: YE, US, VE
													Element:li
														client_gender: “M”, “F”, “T”, or “”
													Element:li
														client_platform is an open-ended String field that should be used consistently by the integrator
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Delete Account (Event 10)
												Node:
												(type) c
												(layer)4
													Element:p
														Logs a Delete Account event. Information regarding account delete as well as reason regarding account deletion in terms of churn, farming or account compromise. This must be run once per Account Id life cycle, to properly keep application metrics in-sync. This pseudo-event will remove the given account_id from dimension data, and is required for accurate Churn analysis.
												Node:
												(type) c
												(layer)4
													Element:pre
														loadAccountDelete(EventTimestamp, AccountId, ChurnType) { "timestamp":"1989-08-15T05:00:00.000Z", "data":{ "type":10, "account_id":"cool_guy@example.com", "account_status":"Failed", } }
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Notes
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														account_status: Stopped, Expired, Failed, Cancelled
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Create Character (Event 11)
												Node:
												(type) c
												(layer)4
													Element:p
														Logs a Character Create event. Many games allow the user to create multiple characters or aliases. This must be run once per Character Id before referencing said Character Id in any other logging statements.
												Node:
												(type) c
												(layer)4
													Element:pre
														loadCharacterCreate(EventTimestamp, CharacterId, AccountId, CharacterClass, CharacterSubclass, CharacterGender, CharacterRace, CharacterName, ShardId) { "timestamp":"2013-11-14T15:47:36.202Z", "data":{ "type":11, "account_id":"cool_guy@example.com", "character_id":"wizard", "character_class":"magic", "character_sub_class":"healer", "character_gender":"N", "character_race":"fish", "character_name":"small_fish", "shard_id":0 } }
												Node:
												(type) c
												(layer)4
													Element:p
													Element:strong
														Optional parameters: shard_id
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Notes
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														character_gender: “M”, “F”, “T”, “”
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Delete Character (Event 12)
												Node:
												(type) c
												(layer)4
													Element:p
														Logs a Character Delete event- This event refers to the character deletion info and the characters that are referred to here are the same as in event (11). This must be at the end of a Character lifecycle, to properly keep application metrics in-sync.
												Node:
												(type) c
												(layer)4
													Element:pre
														loadCharacterDelete (EventTimestamp, CharacterId, AccountId,) { "timestamp":"2013-11-14T16:03:13.367Z", "data":{ "type":12, "account_id":"cool_guy@example.com”, "character_id":"Wizard” } }
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Shard Initialization (Event 13)
												Node:
												(type) c
												(layer)4
													Element:p
														Logs Shard Initialize event. This must occur before any logger or load command references the Shard Id.
												Node:
												(type) c
												(layer)4
													Element:pre
														loadShardCreate(EventTimestamp, ShardId, ShardDescription) { "timestamp":"2013-11-14T16:15:08.347Z", "data":{ "type":13, "shard_id":42, "shard_desc":"the shard with answers to it all" } }
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														!!!!
													Element:strong
														Virtual Currency Set (Event 14)
														- Automatically Created - No Need To Implement.
													Element:span
														Logs Virtual Currency Set event. This can be used to create a virtual currency and update an exchange rate of an existing currency.
													Element:span
													Element:span
														[ loadVirtualCurrency(EventTimestamp, VirtualCurrencyLabel)
													Element:span
														{
													Element:span
														"timestamp":"2013-11-14T16:57:39.193Z",
													Element:span
														"data":{
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:span
														"type":14,
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														"virtual_currency_label":"MUCHA"
													Element:span
														}
													Element:span
														}
													Element:span
														]
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Item Initialization (Event 15)
												Node:
												(type) c
												(layer)4
													Element:p
														Logs an Item Initialize event. This event capture information regarding virtual items in the game. This must be used before referencing an item id in any other command.
												Node:
												(type) c
												(layer)4
													Element:pre
														loadItem(EventTimestamp, ItemId, ItemName, ItemType, ItemSegment, CreatorAccountId, CreatorCharacterId) { "timestamp":"2013-11-14T17:11:33.720Z", "data":{ "type":15, "item_id":66, "item_name":"the big blaster gun", "item_type":"weapon", "item_segment":"UGC", “creator_account_id":"cool_guy@example.com", “creator_character_id":"Wizard" } }
												Node:
												(type) c
												(layer)4
													Element:p
													Element:strong
														Optional parameters: creator_account_id, creator_character_id
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Notes
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														item_type may be any string, but use it consistently. some examples: “Raw materials”, “Mounts and pets”, “armor”, “tools”, “containers”
													Element:li
														item_value is a floating point value which would be used for the store price of the item
													Element:li
														item_segment may be “UGC” when the item is user-generated or “INGAME” when part of the original application
													Element:li
														IF the item_segment field is “UGC” then the creator_account_id and creator_character_id fields should be set appropriately, otherwise they should be empty strings
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Item Used (Event 16)
												Node:
												(type) c
												(layer)4
													Element:p
														Logs an Item Used event. This item captures usage of items in the game, additional information regarding the account and character of the user who used the item as well as location of the character that used the item is also recorded.
												Node:
												(type) c
												(layer)4
													Element:pre
														logItem(EventTimestamp, AccountId, CharacterId, ShardId, ItemId, ItemName, CharacterLevel, AreaId, AreaName, ItemCount, PosX, PosY, PosZ) { "timestamp":"2013-11-14T17:42:49.185Z", "data":{ "type":16, "account_id":"cool_guy@example.com", "character_id":"wizard", "shard_id":42, "item_id":66, "item_name":"The Blaster Gun", "character_lvl":52, "area_id":42, "area_name”:”Area_Name”, "item_count":1, "position_x":678, "position_y":231, "position_z":517 } }
												Node:
												(type) c
												(layer)4
													Element:p
													Element:strong
														Optional parameters: shard_id
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Notes
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														item_count is used for the number of times the item is used in this particular location; useful for spells, bullets.
													Element:li
														If pos_x, pos_y, or pos_z are unavailable, then the unavailable coordinate(s) should be assigned -1.0.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
													Element:a
														Back to Top
													Element:span
														----
													Element:span
														!!!!
													Element:strong
														Item Transaction (Event 17)
														- To Be Completed.
													Element:span
														Logs an Item Transaction event. Information regarding purchase of items in the game. Depending upon the game, an item may be bought using real world money or virtual currency which may be exclusive to the game.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														[ logItemTransaction(EventTimestamp, AccountId, CharacterId, ShardId, ItemId, ItemName, TransactionType, ItemPrice, CurrencyType, VirtualCurrencyLabel, CurrencyValue, VirtualCurrencyCount)
													Element:span
														{
													Element:span
														"timestamp":"2013-11-14T17:52:58.876Z",
													Element:span
														"data":{
													Element:span
														"type":17,
													Element:span
														"account_id":"cool_guy@example.com",
													Element:span
														"character_id":"wizard",
													Element:span
														"shard_id":42,
													Element:span
														"item_id":66,
													Element:span
														"item_name":"the big blaster gun",
													Element:span
														"transaction_type":0,
													Element:span
														"item_price":3,
													Element:span
														"currency_type":0,
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:span
														"virtual_currency_label":"",
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														"currency_value”:3,
													Element:span
														"virtual_currency_count”:”1”
													Element:span
														}
													Element:span
														}
													Element:span
														]
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
													Element:strong
														Optional parameters: shard_id, virtual_currency_label, virtual_currency_count
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
													Element:big
													Element:strong
														Notes
													Element:span
														* Multiple Item Transaction events may have to be called for a single transaction if multiple currencies are used. Example: 4 gold, 5 silver, 3 copper for a fish trap.
													Element:span
														* item_price is the purchase price a user must pay for the item.
													Element:span
														* See Event#18 for information on the last four fields.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Currency Transaction (Event 18)
												Node:
												(type) c
												(layer)4
													Element:p
														Logs a Currency Transaction event. Covers all types of transaction in the game or any other environment where real world money was used. Designed To Handle Most Currency Transactions. More Complicated Transactions Can Be Done Within Event #37.
												Node:
												(type) c
												(layer)4
													Element:pre
														logCurrencyTransaction(EventTimestamp, AccountId, CharacterId, ShardId, TransactionType, CurrencyType, VirtualCurrencyLabel, CurrencyValue, Description, VirtualCurrencyCount) { "timestamp":"2013-11-14T18:10:14.808Z", "data":{ "type":18, "account_id":"cool_guy@example.com", "character_id":"wizard", "shard_id":42, "transaction_type":0, "currency_type":0, "virtual_currency_label":"mucha", "currency_value":3.45, "transaction_desc”:”spend 3.45USD" "virtual_currency_count”:”1” } }
												Node:
												(type) c
												(layer)4
													Element:p
													Element:strong
														Optional parameters: shard_id, virtual_currency_label, currency_value, description, virtual_currency_count
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Notes
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														transaction_type: 0 if currency is spent, 1 if currency is acquired
													Element:li
														currency_type: 0 if real-world currency, 1 if virtual currency
													Element:li
														virtual_currency_label: name of a virtual currency already initialized with Event#14, used in this transaction
													Element:li
														currency_value: floating point representation of how much currency was transacted
													Element:li
														description: optional description of the transaction limited to 200 characters
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														!!!!
													Element:strong
														UGC Rating (Event 19)
														- To Be Completed.
													Element:span
														Logs a UGC Rating event. Some games allow players to create in-game items or other artifacts. This event covers such items and how such items are rated by other players.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														[ loadUgcRating(EventTimestamp, AccountId, CharacterId, ShardId, ItemId, ItemName, Rating)
													Element:span
														{
													Element:span
														"timestamp":"2013-11-14T18:24:36.601Z",
													Element:span
														"data":{
													Element:span
														"type":19,
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:span
														"account_id":"cool_guy@example.com",
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														"character_id":"Wizard",
													Element:span
														"shard_id":42,
													Element:span
														"item_id":764,
													Element:span
														"item_name":"crafty button",
													Element:span
														"ugc_rating":"theUgcRating"
													Element:span
														}
													Element:span
														}
													Element:span
														]
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
													Element:strong
														Optional parameters: shard_id
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
													Element:big
													Element:strong
														Notes
													Element:span
														* The rating field is an open-ended field that will accept any numeric or string value.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
													Element:a
														Back to Top
													Element:span
														----
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Message (Event 20)
												Node:
												(type) c
												(layer)4
													Element:p
														Logs a Message event. A common feature in many games in the ability of players to message one another. Depending upon the game, multiple channels of communication may be used (e.g. it may be in the form of in-game chat, in-game mail, message broadcast to players in a group, etc). This event does not log any message content, just the interaction between two users.
												Node:
												(type) c
												(layer)4
													Element:pre
														logMessage(Event, SenderAccountId, SenderCharacterId, ReceiverAccountId, ReceiverCharacterId, ShardId, MessageDescription, ChannelLabel, CharacterCount) { "timestamp":"2013-11-14T18:46:02.842Z", "data":{ "type":20, "sender_account_id":"cool_guy@example.com", "sender_character_id":"Wizard", "receiver_account_id":"cool_guy@example.com", "receiver_character_id":"Wizard", "shard_id":0, "message_desc”:”pulled from twitter", “message_ch_label":"twitter", “message_char_count":140 } }
												Node:
												(type) c
												(layer)4
													Element:p
													Element:strong
														Optional parameters: shard_id, message_description
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Notes
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														channel_label should be a unique string identifier for the channel/medium.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Begin Combat (Event 21)
												Node:
												(type) c
												(layer)4
													Element:p
														Logs a Begin Combat event. This event refers to the start of combat between a player and a non-player character (NPC)kick off the beginning of combat.
												Node:
												(type) c
												(layer)4
													Element:pre
														combatStart(EventTimestamp, AccountId, CharacterId, ShardId, NpcId, AreaId, AreaName, PosX, PosY, PosZ) { "timestamp":"2013-11-14T18:55:58.241Z", "data":{ "type":21, "account_id":"cool_guy@example.com", "character_id":"Wizard", "shard_id":42, "npc_id":23456, "area_id":552, "area_name”:''Area Name'', "position_x":678, "position_y":231, "position_z":517 } }
												Node:
												(type) c
												(layer)4
													Element:p
													Element:strong
														Optional parameters: shard_id
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Notes
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														Be sure to initialize the npc_id with Event#31.
													Element:li
														area_id is the unique numeric identifier for area, which must be previously initialized using Event #TODO.
													Element:li
														If pos_x, pos_y, or pos_z are unavailable, then the unavailable coordinate(s) should be assigned -1.0.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														End Combat (Event 22)
												Node:
												(type) c
												(layer)4
													Element:p
														Logs an End Combat event. This event refers to the end of combat between a player and a non-player character (NPC).
												Node:
												(type) c
												(layer)4
													Element:pre
														combatEnd(EventTimestamp, AccountId, CharacterId, ShardId, NpcId, AreaId, AreaName, PosX, PosY, PosZ) { "timestamp":"2013-11-14T18:55:58.241Z", "data":{ "type":22, "account_id":"cool_guy@example.com", "character_id":"Wizard", "shard_id":42, "npc_id":23456, "area_id":552, "area_name”:”Area Name”, "position_x":678, "position_y":231, "position_z":517 } }
												Node:
												(type) c
												(layer)4
													Element:p
													Element:strong
														Optional parameters: shard_id
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Notes
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														See notes on the fields in Event#21 documentation.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														NPC Kill (Event 23)
												Node:
												(type) c
												(layer)4
													Element:p
														Logs a Kill NPC event. Refers to an event when a non-player character (NPC) is killed by a player in the game.
												Node:
												(type) c
												(layer)4
													Element:pre
														logKillNpc(EventTimestamp, CharacterId, AccountId, ShardId, CharacterLevel, NpcId) { "timestamp":"2013-11-15T13:08:45.954Z", "data":{ "type":23, "character_id":"wizard", "account_id":"cool_guy@example.com", "shard_id":52, "character_lvl":42, "npc_id":23456 } }
												Node:
												(type) c
												(layer)4
													Element:p
													Element:strong
														Optional parameters: shard_id
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Notes
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														See field notes from previous Events.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Player Points (Event 24)
												Node:
												(type) c
												(layer)4
													Element:p
														Logs a Player Points event. Information regarding when a player gains experience points in the game. In many games experience points are used as an indicator of how well the player is doing in the game and how much she has progressed. In many games gaining enough experience points leads the player to level up to a higher level.
												Node:
												(type) c
												(layer)4
													Element:pre
														playerPoints(EventTimestamp, AccountId, CharacterId, ShardId, Points, CharacterLevel, GroupedFlag, PointType) { "timestamp":"2013-11-15T13:17:01.847Z", "data":{ "type":24, "account_id":"cool_guy@example.com", "character_id":"Wizard", "shard_id":42, “xp_amount”:34.45, "character_lvl":1, "grouped_flag":"Y", "point_type":"Point_Type" } }
												Node:
												(type) c
												(layer)4
													Element:p
													Element:strong
														Optional parameters: shard_id, grouped_flag
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Notes
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														The points field is an unsigned whole number with maximum size of 18.
													Element:li
														The grouped_flag is used to tell if XP points were awarded for individual or group behaviors: “Y” or “N”.
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														PVP Duel (Event 25)
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														Logs a PVP Duel event. Information regarding when a player enters a combat against another player. This type of event is only applicable to environments or games, where a player is allowed to fight against another player since not all environments are competitive in nature.
												Node:
												(type) c
												(layer)4
													Element:p
														Please use Social Interactions Event #6 to record Player Versus Player actions.
													Element:span
														[ logPvpDuel(EventTimestamp, AccountId, CharacterId, ShardId, Winner)
													Element:span
														{
													Element:span
														"timestamp":"2013-11-15T13:26:39.832Z",
													Element:span
														"data":{
													Element:span
														"type":25,
													Element:span
														"account_id":"cool_guy@example.com",
													Element:span
														"character_id":"Wizard",
													Element:span
														"shard_id":42,
													Element:span
														“win_flag”:”Y”
													Element:span
														}
													Element:span
														}
													Element:span
														]
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
													Element:strong
														Optional parameters: shard_id
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														PVP Death (Event 26)
												Node:
												(type) c
												(layer)4
													Element:p
														Logs a Player Death event. Information regarding the death of player by a non-player character (NPC).
												Node:
												(type) c
												(layer)4
													Element:pre
														logPlayerDeath(EventTimestamp, AccountId, CharacterId, ShardId, AreaId, NpcId, PosX, PosY, PosZ, DeathType, AreaName) { "timestamp":"2013-11-15T13:32:33.452Z", "data":{ "type":26, "account_id":"cool_guy@example.com", "character_id":"Wizard", "shard_id":42, "area_id":512, "npc_id":23456, "position_x":678, "position_y":231, "position_z":517, "death_type":"Immolation", "area_name”:”Area Name” } }
												Node:
												(type) c
												(layer)4
													Element:p
													Element:strong
														Optional parameters: shard_id
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Level Begin (Event 27)
												Node:
												(type) c
												(layer)4
													Element:p
														Logs a level Begin event. A large number of games are organized in terms of levels which reflect the. difficulty of game play. This event captures the time at which a player begins a level.
												Node:
												(type) c
												(layer)4
													Element:pre
														levelBegin(EventTimestamp, AccountId, CharacterId, ShardId, CharacterLevel, AreaId, PosX, PosY, PosZ, AreaName) { "timestamp":"2013-11-15T13:41:08.559Z", "data":{ "type":27, "account_id":"cool_guy@example.com", "character_id":"Wizard", "shard_id":42, "character_lvl":52, "area_id":2, "position_x":678, "position_y":231, "position_z":517, "area_name”:”Area_Name” } }
												Node:
												(type) c
												(layer)4
													Element:p
													Element:strong
														Optional parameters: shard_id
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Level End (Event 28)
												Node:
												(type) c
												(layer)4
													Element:p
														Logs a Level End event. Refers to the level in event (27) but instead of the beginning of levels it refers to the end of levels. Log the player completing a level.
												Node:
												(type) c
												(layer)4
													Element:pre
														levelEnd(EventTimestamp, AccountId, CharacterId, ShardId, CharacterLevel, AreaId, PosX, PosY, PosZ, AreaName) { "timestamp":"2013-11-15T13:41:08.559Z", "data":{ "type":28, "account_id":"cool_guy@example.com", "character_id":"Wizard", "shard_id":42, "character_lvl":52, "area_id":2, "position_x":678, "position_y":231, "position_z":517, "area_name”:”Area_Name” } }
												Node:
												(type) c
												(layer)4
													Element:p
													Element:strong
														Optional parameters: shard_id
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Area Enter (Event 29)
												Node:
												(type) c
												(layer)4
													Element:p
														Logs an Area Enter event. Many games are organized in the form of virtual worlds where there are many. geographical areas. This event refers to the time when a player enters such an area.
												Node:
												(type) c
												(layer)4
													Element:pre
														areaEnter(EventTimestamp, AccountId, CharacterId, ShardId, AreaId, CharacterLevel, PosX, PosY, PosZ, AreaName) { "timestamp":"2013-11-15T14:04:32.369Z", "data":{ "type":29, "account_id":"cool_guy@example.com", "character_id":"wizard", "shard_id":42, "area_id":200, "character_lvl":52, "position_x":678, "position_y":231, "position_z":517, "area_name":"Area_Name" } }
												Node:
												(type) c
												(layer)4
													Element:p
													Element:strong
														Optional parameters: shard_id
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Area Exit (Event 30)
												Node:
												(type) c
												(layer)4
													Element:p
														Logs an Area Exit event. Similar to event (29) but with the difference that it refers to the time when a player exits an area. Logs the player exiting an area.
												Node:
												(type) c
												(layer)4
													Element:pre
														areaExit(EventTimestamp, AccountId, CharacterId, ShardId, AreaId, CharacterLevel, PosX, PosY, PosZ, AreaName) { "timestamp":"2013-11-15T14:04:32.369Z", "data":{ "type”:30, "account_id":"cool_guy@example.com", "character_id":"wizard", "shard_id":42, "area_id":200, "character_lvl":52, "position_x":678, "position_y":231, "position_z":517, "area_name":"Area_Name" } }
												Node:
												(type) c
												(layer)4
													Element:p
													Element:strong
														Optional parameters: shard_id
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														NPC Interaction (Event 31)
												Node:
												(type) c
												(layer)4
													Element:p
														Logs a NPC Interaction event. A large class of games have non-player characters (NPCs) which interact with the player in the gaming environment. They have different levels of difficulty and may be friendly or aggressive. This event is used to populate the dimension tables for NPCs and is referred to by all the other events that refer to NPCs.Logs the interaction between an in-game NPC and a player.
												Node:
												(type) c
												(layer)4
													Element:pre
														logNpcInteraction(EventTimestamp, AccountId, CharacterId, ShardId, EventName, EventType, NpcId, NpcName, NpcType, MinLevel, MaxLevel, Toughness, ToughnessEnum) { "timestamp":"2013-11-15T14:22:57.102Z", "data":{ "type":31, "account_id":"cool_guy@example.com", "character_id":"wizard", "shard_id":42, "npc_event_name":"npcEventName", "npc_event_type":"Combat", "npc_id":2345, "npc_name":"the Mort of T", "npc_type":"Enemy", “npc_level_min”:5, "npc_level_max”:10, "npc_toughness":0.25, "npc_toughness_enum":"Quarter" } }
												Node:
												(type) c
												(layer)4
													Element:p
													Element:strong
														Optional parameters: shard_id, min_level, max_level
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Challenge (Event 32)
												Node:
												(type) c
												(layer)4
													Element:p
														Logs a Challenge event. Challenges are elements of games where a player or even a group of players can perform a tasks or a set of tasks to get some reward within the game. Alternatively completing a challenge may be necessary to level up in the games. In some genres of games e.g., MMORPGs a challenge may be referred to as a quest. Logs a player challenge - starting/working/done.
												Node:
												(type) c
												(layer)4
													Element:pre
														logChallenge(EventTimestamp, AccountId, CharacterId, ShardId, ChallengeId, ChallengeType, ChallengeStatus) { "timestamp":"2013-11-15T14:31:40.633Z", "data":{ "type":32, "account_id":"cool_guy@example.com", "character_id":"Wizard", "shard_id":42, "challenge_id":"challenge_Id", "challenge_type":"Kill NPC", "challenge_status":"Abandoned" } }
												Node:
												(type) c
												(layer)4
													Element:p
													Element:strong
														Optional parameters: shard_id
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Send Recruitment (Event 33)
												Node:
												(type) c
												(layer)4
													Element:p
														Logs a Recruitment Send event. There are certain types of activities or interactions in games where a player may invite other players to join him/her in finishing a certain task. This event captures such events where a person may recruit others to join them in those activities. Logs that a recruitment message was sent.
												Node:
												(type) c
												(layer)4
													Element:pre
														recruitmentSend(EventTimestamp, SenderAccountId, SenderCharacterId, ReceiverAccountId, ReceiverCharacterId, RecruitmentType) { "timestamp":"2013-11-15T14:37:55.545Z", "data":{ "type":33, "sender_account_id":"cool_guy@example.com", "sender_character_id":"Wizard", "receiver_account_id":"small_cat@example.com", "receiver_character_id":"Wizard", "recruitment_type":"mobile ad" } }
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Receive Recruitment (Event 34)
												Node:
												(type) c
												(layer)4
													Element:p
														Logs a Recruitment Receive event. This event refers to the result of the recruitment action from event (33) i.e., if the person to whom the message was sent accepted the invite or declined it. Logs that a recruitment message was responded to.
												Node:
												(type) c
												(layer)4
													Element:pre
														recruitmentReceive(EventTimestamp, SenderAccountId, SenderCharacterId, ReceiverAccountId, ReceiverCharacterId, RecruitmentType, RecruitmentOutcome) { "timestamp":"2013-11-15T14:37:55.545Z", "data":{ "type":34, "sender_account_id":"cool_guy@example.com", "sender_character_id":"Wizard", "receiver_account_id":"small_cat@example.com", "receiver_character_id":"Wizard", "recruitment_type":"mobile ad" "recruitment_outcome:"trial account" } }
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Create Store (Event 35)
												Node:
												(type) c
												(layer)4
													Element:p
														Logs a Store Create event. Some games allow players to set up in-game stores where they can sell items. This event refers to the creation of such stores.
												Node:
												(type) c
												(layer)4
													Element:pre
														storeCreate(EventTimestamp, StoreId, StoreDescription, StoreAddress, StoreCity, StoreState, StoreCountry, StoreZip) { "timestamp":"2013-11-15T15:03:32.064Z", "data":{ "type":35, "store_id":8729, "store_desc":"the cool store", "map_real_address":"123 Fake St", "map_real_city":"Walla Walla", "map_real_state":"Tuvalu", "map_real_country":"United States", "map_real_postal_code":"55667" } }
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Delete Store (Event 36)
												Node:
												(type) c
												(layer)4
													Element:p
														Logs a Store Delete event. This event refers to scenarios where the stores from event (35) are deleted.
												Node:
												(type) c
												(layer)4
													Element:pre
														storeDelete(EventTimestamp, StoreId, StoreDescription, StoreAddress, StoreCity, StoreState, StoreCountry, StoreZip) { "timestamp":"2013-11-15T15:11:15.847Z", "data":{ "type":36, "store_id":8729 } }
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Buy Store Item (Event 37)
												Node:
												(type) c
												(layer)4
													Element:p
														Logs a Store Buy Item event. This event refers to transactions which involve items which are bought from a store. This includes information about the type of currency which is used to buy these items i.e., real world currency or virtual currency.
												Node:
												(type) c
												(layer)4
													Element:pre
														storeBuyItem(EventTimestamp, StoreId, AccountId, CharacterId, ShardId, ReceiverAccountId, ReceiverCharacterId, ItemId, ItemName, ItemPrice, CurrencyType, VirtualCurrencyLabel, CurrencyValue, VirtualCurrencyCount) { "timestamp":"2013-11-15T15:18:44.377Z", "data":{ "type":37, "sender_account_id":"cool_guy@example.com", "sender_character_id":"Wizard", "receiver_account_id":"small_cat@example.com", "receiver_character_id":"Wizard", "shard_id":42, "store_id":1, "item_id":66, "item_name":"The Blaster Gun", "item_price":3, "currency_type":1, "virtual_currency_label":"MCH", "currency_value”:”4”, "virtual_currency_count”:1 } }
												Node:
												(type) c
												(layer)4
													Element:p
													Element:strong
														Optional parameters: shard_id, virtual_currency_name, virtual_currency_count
												Node:
												(type) c
												(layer)4
													Element:p
													Element:big
													Element:strong
														Sample Use
												Node:
												(type) c
												(layer)4
													Element:p
														Example: If you had $1 per 100 tokens, and you bought an item for 200 tokens, you will send:
													Element:br
													Element:br
														Item Price: 200
													Element:br
														Currency Type: 1
													Element:br
														Virtual Currency Name: Tokens
													Element:br
														Currency Value: 2
													Element:br
														Virtual Currency Count: 200
													Element:br
													Element:br
														Example: If a user buys an item using $5 in real money then send:
													Element:br
													Element:br
														Item Price: 5
													Element:br
														Currency Type: 0
													Element:br
														Virtual Currency Name: (null)
													Element:br
														Currency Value: 5
													Element:br
														Virtual Currency Count: 0
													Element:br
													Element:br
														Example: If a user buys an item for 500 tokens send:
													Element:br
													Element:br
														Item Price: 500
													Element:br
														Currency Type: 1
													Element:br
														Virtual Currency Name: Tokens
													Element:br
														Currency Value: 0
													Element:br
														Virtual Currency Count: 500
													Element:br
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Store Login (Event 38)
												Node:
												(type) c
												(layer)4
													Element:p
														Logs a Store Login event. The time at which a player logs into a virtual store. Logs a store login occurrence.
												Node:
												(type) c
												(layer)4
													Element:pre
														storeLogin(EventTimestamp, StoreId, AccountId, CharacterId, ShardId) { "timestamp":"2013-11-15T15:31:43.299Z", "data":{ "type":38, "account_id":"cool_guy@example.com", "character_id":"Wizard", "shard_id":42, "store_id":1 } }
												Node:
												(type) c
												(layer)4
													Element:p
													Element:strong
														Optional parameters: shard_id
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Store Logout (Event 39)
												Node:
												(type) c
												(layer)4
													Element:p
														Logs a Store Logout event. The time at which a player logs out from a virtual store. Logs a store logout occurrence.
												Node:
												(type) c
												(layer)4
													Element:pre
														storeLogout(EventTimestamp, StoreId, AccountId, CharacterId, ShardId) { "timestamp":"2013-11-15T15:31:43.299Z", "data":{ "type":39, "account_id":"cool_guy@example.com", "character_id":"Wizard", "shard_id":42, "store_id":1 } }
												Node:
												(type) c
												(layer)4
													Element:p
													Element:strong
														Optional parameters: shard_id
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Store Add to Cart (Event 40)
												Node:
												(type) c
												(layer)4
													Element:p
														Logs a Store Add To Cart event. This event refers to the case when the user adds an item to his/her cart. It should be noted that this event is not the same as buying an item but it is only about selecting an item. In some games selection may be a prerequisite for buying an item. Logs an add to cart event.
												Node:
												(type) c
												(layer)4
													Element:pre
														storeAddToCart(EventTimestamp, StoreId, AccountId, CharacterId, ItemId, ItemName, ItemType) { "timestamp":"2013-11-15T16:01:45.370Z", "data":{ "type":40, "account_id":"cool_guy@example.com", "character_id":"Wizard", "store_id":1, "item_id":66, "item_name":"Sword", "item_type":"Weapon" } }
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Enter Guild (Event 41)
												Node:
												(type) c
												(layer)4
													Element:p
														Logs a Guild Enter event. Guilds are analogous to organizations in many online games. This event records information regarding when a player becomes part of a guild and if he/she is the leader of the guild.
												Node:
												(type) c
												(layer)4
													Element:pre
														logEnterGuild(EventTimestamp, AccountId, CharacterId, ShardId, GuildId, CharacterLevel) { "timestamp":"2013-11-15T16:21:24.890Z", "data":{ "type":41, "account_id":"cool_guy@example.com", "character_id":"Wizard", "character_lvl":52, "shard_id":1, "guild_id":42 } }
												Node:
												(type) c
												(layer)4
													Element:p
													Element:strong
														Optional parameters: shard_id
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Exit Guild (Event 42)
												Node:
												(type) c
												(layer)4
													Element:p
														Logs a Guild Exit event. The event records information regarding exiting a guild (see event 41) and the reason for leaving a guild e.g., leaving voluntarily, being evicted etc
												Node:
												(type) c
												(layer)4
													Element:pre
														logExitGuild(EventTimestamp, AccountId, CharacterId, ShardId, GuildId, CharacterLevel, ExitReason) { "timestamp":"2013-11-15T16:21:24.890Z", "data":{ "type":42, "account_id":"cool_guy@example.com", "character_id":"Wizard", "character_lvl":52, "shard_id":1, "guild_id":42, "guild_exit_reason":"hacking" } }
												Node:
												(type) c
												(layer)4
													Element:p
													Element:strong
														Optional parameters: shard_id
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Add Friend (Event 43)
												Node:
												(type) c
												(layer)4
													Element:p
														Logs a Friend Addition event. Many online games also allow adding other players as friends. This event captures information about friending other players. It should be noted that this relationship may or may not be reciprocated.
												Node:
												(type) c
												(layer)4
													Element:pre
														logFriendAdd(EventTimestamp, AccountId, CharacterId, ReceiverAccountId, ReceiverCharacterId) { "timestamp":"2013-11-15T17:35:00.091Z", "data":{ "type":43, "sender_account_id":"cool_guy@example.com", "sender_character_id":"Wizard", "receiver_account_id":"small_cat@example.com", "receiver_character_id":"Wizard" } }
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Delete Friend (Event 44)
												Node:
												(type) c
												(layer)4
													Element:p
														Logs a Friend Delete event. This event captures information about the end of a friend relationship (see event 43)
												Node:
												(type) c
												(layer)4
													Element:pre
														logFriendDelete(EventTimestamp, AccountId, CharacterId, ReceiverAccountId, ReceiverCharacterId) { "timestamp":"2013-11-15T17:35:00.091Z", "data":{ "type":44, "sender_account_id":"cool_guy@example.com", "sender_character_id":"Wizard", "receiver_account_id":"small_cat@example.com", "receiver_character_id":"Wizard" } }
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Guild Leader (Event 45)
												Node:
												(type) c
												(layer)4
													Element:p
														Logs a Guild Leader event. Information regarding whether the player is the leader of the guild with the given guild id.
												Node:
												(type) c
												(layer)4
													Element:pre
														putGuildLeader(EventTimestamp, AccountId, CharacterId, GuildId) { "timestamp":"2013-11-15T17:45:12.627Z", "data":{ "type":45, "account_id":"cool_guy@example.com", "character_id":"Wizard", "guild_id":777 } }
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														!!!!
													Element:strong
														UGC Copy (Event 46)
														- To Be Completed.
													Element:span
														Logs a UGC Copy event. Information regarding copying of an item that was created by a player. This event is not applicable to items that are built in by the gaming company. Tracks when User Generated Content is copied to another account.
													Element:span
														[ trackUgcCopy(EventTimestamp, AccountId, CharacterId, ShardId, ItemId, ItemName)
													Element:span
														{
													Element:span
														"timestamp":"2013-11-15T17:50:53.188Z",
													Element:span
														"data":{
													Element:span
														"type":46,
													Element:span
														"account_id":"cool_guy@example.com",
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:span
														"character_id":"Wizard",
													Element:span
														"shard_id":42.42,
													Element:span
														"item_id":8729,
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														"item_name":"GMO Grain"
													Element:span
														}
													Element:span
														}
													Element:span
														]
													Element:span
													Element:strong
														Optional parameters: shard_id
													Element:span
													Element:a
														Back to Top
													Element:span
														----
													Element:span
														!!!!
													Element:strong
														Farmer (Event 47)
														- To Be Completed
													Element:span
														Logs a Farmer event. Indicates whether the player is a gold farmer and if so what type of gold farmer is he
													Element:span
														[ logFarmer(EventTimestamp, AccountId, CharacterId, ShardId, FarmerType)
													Element:span
														{
													Element:span
														"timestamp":"2013-11-15T17:55:57.747Z",
													Element:span
														"data":{
													Element:span
														"type":47,
													Element:span
														"account_id":"cool_guy@example.com",
													Element:span
														"character_id":"Wizard",
													Element:span
														"shard_id":52,
													Element:span
														"farmer_type":"Banker"
													Element:span
														}
													Element:span
														}
													Element:span
														]
													Element:span
													Element:strong
														Optional parametesr: shard_id
													Element:span
													Element:a
														Back to Top
													Element:span
														----
													Element:span
														!!!!
													Element:strong
														Integrity (Event 48)
														- To Be Completed
													Element:span
														Logs an Integrity event. Indicates whether this account was compromised and if so when was this account compromised and the type of integrity violation that resulted in compromising this account.
													Element:span
														[ logIntegrity(EventTimestamp, AccountId, CharacterId, ShardId, IntegrityType)
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:span
														{
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														"timestamp":"2013-11-15T17:55:57.747Z",
													Element:span
														"data":{
													Element:span
														"type":48,
													Element:span
														"account_id":"cool_guy@example.com",
													Element:span
														"character_id":"Wizard",
													Element:span
														"shard_id":52,
													Element:span
														“integrity_type":"Banker"
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:span
														}
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														}
													Element:span
														]
													Element:span
													Element:strong
														Optional parameters: shard_id
													Element:span
													Element:a
														Back to Top
													Element:span
														----
													Element:span
														!!!!
													Element:strong
														Reward (Event 49)
														- To Be Completed.
													Element:span
														Logs a Reward event. Relates to where a player may be awarded a certain reward for completing a certain task or a reward given based on seniority or some other reason.
													Element:span
														[ logReward(EventTimestamp, AccountId, CharacterId, ShardId, RewardType, RewardId, ItemType, RewardCount)
													Element:span
														{
													Element:span
														"timestamp":"2013-11-15T18:07:14.132Z",
													Element:span
														"data":{
													Element:span
														"type":49,
													Element:span
														"account_id":"cool_guy@example.com",
													Element:span
														"character_id":"Wizard",
													Element:span
														"shard_id":42.42,
													Element:span
														"reward_type":1,
													Element:span
														"reward_id":"1",
													Element:span
														"item_type":2,
													Element:span
														"reward_count":50.5
													Element:span
														}
													Element:span
														}
													Element:span
														]
													Element:span
													Element:strong
														Optional parameters: shard_id, item_type
													Element:span
													Element:a
														Back to Top
													Element:span
														----
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Area DIM (Event 50)
												Node:
												(type) c
												(layer)4
													Element:p
														Logs a Area DIM event. Some games have maps associated with them. This event saves the dimension information about these maps.
												Node:
												(type) c
												(layer)4
													Element:pre
														logAreaDim(EventTimestamp, AreaName, AreaId, MapId, MapName, MinX, MinY, MinZ, MaxX, MaxY, MaxZ) { "timestamp":"2013-11-15T18:13:04.432Z", "data":{ "type":50, "area_name":"NA", "area_id":2.2, "map_id":-1, "map_label":"map label", "min_x":0, "min_y":0, "min_z":0, "max_x":4, "max_y":5, "max_z":6 } }
												Node:
												(type) c
												(layer)4
													Element:p
													Element:strong
														Optional parameters: min_z, max_z
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														!!!!
													Element:strong
														Mob (Event 51)
														- To Be Completed
													Element:span
														Logs a Mob event. Mob refers to groupings of non-player characters (NPCs). This event captures the cases when the player confronts a mobs and kills that mob. This event captures the cases when the player confronts a mob and kills that mob.
													Element:span
														[ logMob(EventTimestamp, AccountId, CharacterId, ShardId, MobDescription)
													Element:span
														{
													Element:span
														"timestamp":"2013-11-15T18:18:12.933Z",
													Element:span
														"data":{
													Element:span
														"type":51,
													Element:span
														"account_id":"cool_guy@example.com",
													Element:span
														"character_id":"Wizard",
													Element:span
														"shard_id":42.42,
													Element:span
														"mob_desc”:”mob_desc"
													Element:span
														}
													Element:span
														}
													Element:span
														]
													Element:span
													Element:strong
														Optional parameters: shard_id, mob_description
													Element:span
													Element:a
														Back to Top
													Element:span
														----
													Element:span
														!!!!
													Element:strong
														CRM Action (Event 52)
														- To Be Completed.
													Element:span
														Logs a CRM Action event. This is generic field for CRM (Customer Relationship management) action that may be taken by a CRM person in the gaming company. Information regarding how the customer responded to the action is also saved
													Element:span
														[ logCrmAction(EventTimestamp, AccountId, CharacterId, ShardId, CrmAction, CrmActionType, FulfillmentTimestamp, FulfillmentStatus)
													Element:span
														{
													Element:span
														"timestamp":"2013-11-15T18:23:20.079Z",
													Element:span
														"data":{
													Element:span
														"type":52,
													Element:span
														"account_id":"cool_guy@example.com",
													Element:span
														"character_id":"Wizard",
													Element:span
														"shard_id":42.42,
													Element:span
														"crm_action":"crm_action",
													Element:span
														"crm_action_type":"crm_action_type",
													Element:span
														“crm_fulfilled_timestamp":"2013-08-12T05:00:00.000Z”,
													Element:span
														"crm_fulfilled_status":"crm_fulfilled_status"
													Element:span
														}
													Element:span
														}
													Element:span
														]
													Element:span
													Element:strong
														Optional parameters: shard_id, crm_fulfillment_status, crm_fulfillment_timestamp
													Element:span
													Element:a
														Back to Top
													Element:span
														----
													Element:span
														!!!!
													Element:strong
														Customer Service Action (Event 53)
														- To Be Completed.
													Element:span
														Logs a Customer Service Action event. This event captures all the events which are not described in any of the other events but still events which are within the game.
													Element:span
														[ logCustomerServiceAction(EventTimestamp, AccountId, CharacterId, ShardId, CsAction, CsActionType)
													Element:span
														{
													Element:span
														"timestamp":"2013-11-15T18:29:07.797Z",
													Element:span
														"data":{
													Element:span
														"type":53,
													Element:span
														"account_id":"cool_guy@example.com",
													Element:span
														"character_id":"Wizard",
													Element:span
														"shard_id":42.42,
													Element:span
														"customer_service_action":"cs_action",
													Element:span
														"customer_service_action_type":"cs_action_type"
													Element:span
														}
													Element:span
														}
													Element:span
														]
													Element:span
													Element:strong
														Optional parameters: shard_id
													Element:span
													Element:a
														Back to Top
													Element:span
														----
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Custom Action (Event 54)
												Node:
												(type) c
												(layer)4
													Element:p
														Logs a Custom Action event. This event captures all the events which are not described in any of the other events and the events are not with respect to actions in the game. Any Ninja Metrics customer has the freedom to define this event in any way that they want given the fields described here.
												Node:
												(type) c
												(layer)4
													Element:pre
														logCustomAction(EventTimestamp, AccountId, CharacterId, CustomAction, CustomActionType, CustomActionValue) { "timestamp":"2013-11-15T18:35:36.006Z", "data":{ "type":54, "account_id":"cool_guy@example.com", "character_id":"Wizard", "custom_action":"custom_action", "custom_action_type":"custom_action_type", "custom_action_value":"custom_action_value" } }
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Back to Top
												Node:
												(type) c
												(layer)4
													Element:hr
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														!!!!
													Element:strong
														Productivity (Event 55)
														- To Be Completed
													Element:span
														Logs a Productivity event. This event refers to a scenario where any time a player crafts, harvests etc an item within the game.
													Element:span
														[ logProductivity(EventTimestamp, AccountId, CharacterId, ShardId, ProductivityType)
													Element:span
														{
													Element:span
														"timestamp":"2013-11-15T18:42:06.056Z",
													Element:span
														"data":{
													Element:span
														"type":55,
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:span
														"account_id":"cool_guy@example.com",
													Element:span
														"character_id":"Wizard",
													Element:span
														"shard_id":42.42,
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														"productivity_type":"productivity_type"
													Element:span
														}
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:span
														}
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														]
													Element:span
													Element:strong
														Optional parameters: shard_id
													Element:span
													Element:a
														Back to Top
													Element:span
														----
													Element:span
														!!!!
													Element:strong
														Resource (Event 56)
														- To Be Completed.
													Element:span
														Logs a Resource event. Refers to events where any time a player acquires a non-item resource, e.g. coins, gold, power, etc.
													Element:span
														[ logResource(EventTimestamp, AccountId, CharacterId, ShardId, ResourceType, ResourceId, ResourceCount)
													Element:span
														{
													Element:span
														"timestamp":"2013-11-15T18:47:39.266Z",
													Element:span
														"data":{
													Element:span
														"type":56,
													Element:span
														"account_id":"cool_guy@example.com",
													Element:span
														"character_id":"Wizard",
													Element:span
														"shard_id":42.42,
													Element:span
														"resource_type":0,
													Element:span
														"resource_id":"1",
													Element:span
														"resource_count":3
													Element:span
														}
													Element:span
														}
													Element:span
														]
													Element:span
													Element:strong
														Optional parameters: shard_id
													Element:span
													Element:a
														Back to Top
													Element:span
														----
													Element:span
														!!!!
													Element:strong
														Account Ad (Event 57)
														- To Be Completed.
													Element:span
														Logs an Account Ad event - This event is a record of the user who either clicks an ad or had already clicked the ad and then taking some subsequent action.
													Element:span
														[ logAccountAd(EventTimestamp, AccountId, AdTagName, ActionTimestamp)
													Element:span
														{
													Element:span
														"timestamp":"2013-11-15T18:52:37.557Z",
													Element:span
														"data":{
													Element:span
														"type":57,
													Element:span
														"account_id":"cool_guy@example.com",
													Element:span
														"ad_tag_name":"Ad-Words",
													Element:span
														"ad_action_timestamp":"2013-08-12T05:00:00.000Z"
													Element:span
														}
													Element:span
														}
													Element:span
														]
													Element:span
													Element:strong
														Optional parameters: ad_tag_name, action_timestamp
													Element:span
													Element:a
														Back to Top
													Element:span
														----
													Element:span
														!!!!
													Element:strong
														Economic (Event 58)
														- To Be Completed.
													Element:span
														Logs a Economic event - This item refers TO Economic Type: Buy item, Sell item, Trade away item, Trade acquire item, Create item.
													Element:span
														[ logEconomic(EventTimestamp, SenderAccountId, SenderCharacterId, ReceiverAccountId, ReceiverCharacterId, ShardId, ItemId, ItemName, EconomicType, EconomicValue, CurrencyType, VirtualCurrencyLabel, CurrencyValue, VirtualCurrencyCount)
													Element:span
														{
													Element:span
														"timestamp":"2013-11-15T18:58:59.893Z",
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:span
														"data":{
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														"type":58,
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:span
														"sender_account_id":"cool_guy@example.com",
													Element:span
														"sender_character_id":"advertiser",
													Element:span
														"receiver_account_id":"cguy@aol.com",
													Element:span
														"receiver_character_id":"customer",
													Element:span
														"shard_id":1,
													Element:span
														"item_id":124606,
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														"item_name":"Rebate for 124606",
													Element:span
														"economic_type":"rebate",
													Element:span
														"economic_value":52.281000000000006,
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:span
														“currency_type":0,
													Element:span
														"virtual_currency_label":"",
													Element:span
														"currency_value":52.281000000000006,
													Element:span
														“virtual_currency_count”:”1”
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														}
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:span
														}
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														]
													Element:span
													Element:strong
														Optional parameters: shard_id, virtual_currency_label_ virtual_currency_count
													Element:span
													Element:a
														Back to Top
													Element:span
														----
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
													Element:strong
														Traffic (Event 59)
												Node:
												(type) c
												(layer)4
													Element:p
														Logs a Traffic Source event.
												Node:
												(type) c
												(layer)4
													Element:pre
														logTrafficSource(EventTimestamp, AccountId, TrafficSource, ShardId, TrafficSourceType) Example JSON payload: { "timestamp":"2013-11-15T19:07:30.221Z", "data":{ "type":59, "account_id":"cool_guy@example.com", "traffic_source":"campaign_name | sub_site | publisher_name | sub_publisher", "shard_id":0, "traffic_source_type":"publisher_name" } }
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														====
													Element:span
														{
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:span
														"timestamp":"2013-11-15T19:07:30.221Z",
													Element:span
														"data":{
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
														"type":59,
													Element:span
														"account_id":"cool_guy@example.com",
													Element:span
														"traffic_source":"abcTrafficSource",
													Element:span
														"shard_id":42.42,
													Element:span
														"traffic_source_type":"traffic_source_type"
													Element:span
														}
													Element:span
														}
												Node:
												(type) c
												(layer)4
													Element:p
													Element:strong
														Optional parameters: shard_id
												Node:
												(type) c
												(layer)4
													Element:p
														Retrieved from https://developer.ninjametrics.com/Main/JSONSampleEvents-Removed Page last modified on March 09, 2015, at 10:39 PM
													Element:a
														Back to Top
