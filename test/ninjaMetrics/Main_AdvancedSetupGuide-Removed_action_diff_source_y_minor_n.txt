Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
				Element:a
					Developer Hub
			Node:
			(type) c
			(layer)1
				Element:a
					Main
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
							Element:a
								Advanced Setup Guide-Removed
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Main.AdvancedSetupGuide-Removed History
						Node:
						(type) c
						(layer)2
							Element:p
							Element:a
								Show minor edits
								-
							Element:a
								Show changes to output
						Node:
						(type) c
						(layer)2
							Element:a
								May 27, 2015, at 04:07 PM
								by
						Node:
						(type) c
						(layer)2
							Element:span
								76.175.66.204
								- Deleted lines 0-3422:
						Node:
						(type) c
						(layer)2
							Element:del
								[[#top]]
							Element:br
								Get the complete experience. Follow this ''Advanced Setup Guide ''to get the most out of Katana Analytics. This guide includes the information you need to log all available events, including events custom to your title. You'll find the events are organized based on 10 primary event categories:
							Element:br
							Element:br
								[[AdvancedSetupGuide#SystemEvents| System Events]]
							Element:br
								System events include those events that are system related, such as when a player logs in or out of the application, or when a shard is initialized.
							Element:br
							Element:br
								[[AdvancedSetupGuide#AccountManagementEvents| Account Management Events]]
							Element:br
								Account Management events include those events that are related to the creation, deletion, and management of a user or character account.
							Element:br
							Element:br
								[[AdvancedSetupGuide#GameEvents| Game Events]]
							Element:br
								Game events include those events that are related to in-game characters, actions, and combat.
							Element:br
							Element:br
								[[AdvancedSetupGuide[#ItemEvents| Item Events]]
							Element:br
								Item events include those events that are related to the creation, use, and transaction of in- game items.
							Element:br
							Element:br
								[[AdvancedSetupGuide#GroupEvents| Group Events]]
							Element:br
								Group events include those events involving player interaction with a group or guild such as entry, exit, or a player's position within a guild (e.g. Guild Leader).
							Element:br
							Element:br
								[[AdvancedSetupGuide[#EnvironmentEvents| Environment Events]]
							Element:br
								Environment events include those events that are related to in-game levels and areas that players may encounter.
							Element:br
							Element:br
								[[AdvancedSetupGuide[#EconomicEvents| Economic Events]]
							Element:br
								Economic events include those events that are related to in-game stores and purchases such as a player's interaction with a store and items within it.
							Element:br
							Element:br
								[[AdvancedSetupGuide#TransactionEvents| Transaction Events]]
							Element:br
								Transaction events include those events that are related to economic events outside of the game such as when an item is purchased outside of the developer game store, or when a subscription changes.
							Element:br
							Element:br
								[[AdvancedSetupGuide#SocialEvents| Social Events]]
							Element:br
								Social events include social interactions between players in and outside of the game such as messages, off-game-interactions, friend requests, etc.
							Element:br
							Element:br
								[[AdvancedSetupGuide#CustomEvents| Custom Events]]
							Element:br
								Custom events include those events that relate to custom actions, and CRM actions. As a Ninja Metrics customer you have the freedom to define custom events in any way that you want given the fields described under the ''Custom Slot Action ''and ''Custom Action ''sections.
							Element:br
							Element:br
							Element:br
								!!'''System Events'''[[#SystemEvents]]
							Element:br
							Element:br
								System events include those events that are system related, such as when a player logs in or out of the application, or when a shard is initialized. Details on how to execute calls to log system events can be found below for each corresponding event.
							Element:br
							Element:br
								!!!!''' Login (Event ID#1)'''[[#Login]]
							Element:br
							Element:br
								This event records the time at which the user logged into the system (website, game, software, etc.). To log a login event, you need to pass the user's account ID, character ID, platform, and timestamp. Optionally, you may pass the shard ID, and login area name and ID.
							Element:br
							Element:br
								'+'''Impacted UI Features'''+'
							Element:br
								*KPI
							Element:br
								*System Metrics (Items, Location/Maps, NPC, Social)
							Element:br
								*User Metrics (Churn, Farming, Integrity)
							Element:br
								*Basic Package (Summary)
							Element:br
							Element:br
								'+'''Parameters'''+'
							Element:br
								|| border=1 rules=rows frame=hsides
							Element:br
								||! Type ||! Parameter ||! Default Value ||
							Element:br
								||Date ||LOGIN TIMESTAMP || (Current Time)||
							Element:br
								||String ||ACCOUNT ID ||''No Default Value''||
							Element:br
								||String ||CHARACTER ID ||ACCOUNT_ID||
							Element:br
								||Long ||SHARD ID ||0||
							Element:br
								||String ||PLATFORM ||Other||
							Element:br
								||Long ||LOGIN AREA ID ||Null||
							Element:br
								||String ||LOGIN AREA NAME ||Null||
							Element:br
							Element:br
								'+'''Sample Use'''+'
							Element:br
							Element:br
								*Java
							Element:br
							Element:br
								//Log when a user logs in\\
							Element:br
								public void ''aKApi.''logLogin(LOGIN_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, PLATFORM, LOGIN_AREA_ID, LOGIN_AREA_NAME);
							Element:br
							Element:br
								*JavaScript
							Element:br
							Element:br
								//Log when a user logs in[[<<]]
							Element:br
								''aKApi.''logLogin(LOGIN_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, PLATFORM, LOGIN_AREA_ID, LOGIN_AREA_NAME);
							Element:br
							Element:br
								*PHP
							Element:br
							Element:br
								//Log when a user logs in\\
							Element:br
								''$aKApi->''logLogin(LOGIN_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, PLATFORM, LOGIN_AREA_ID, LOGIN_AREA_NAME);
							Element:br
							Element:br
								*JSON
							Element:br
							Element:br
								//Log when a user logs in\\
							Element:br
							Element:br
								{
							Element:br
								"timestamp":"2013-11-14T13:43:06.308Z",
							Element:br
								"data":{
							Element:br
								"type":1,
							Element:br
								"account_id":"cool_guy@example.com",
							Element:br
								"character_id":"Wizard",
							Element:br
								"shard_id":42,
							Element:br
								"platform":"Facebook Mobile",
							Element:br
								"area_id”:0,
							Element:br
								"area_name”:0
							Element:br
								}
							Element:br
								}
							Element:br
							Element:br
								NOTE: All parameters are required in JSON, except “shard_id”, “area_id” and “area_name” which are optional.
							Element:br
							Element:br
								%right%[[#top|Back to Top]]
							Element:br
								----
							Element:br
							Element:br
								!!!!'''Logout (Event ID#2)'''[[#Logout]]
							Element:br
							Element:br
								This event records the time at which the user logged out of the system (website, game, software, etc.). To log a logout event, you need to pass the user's account ID, character ID, and timestamp.
							Element:br
							Element:br
								'+'''Impacted UI Features'''+'
							Element:br
								*KPI
							Element:br
								*User Metrics (Churn, Farming, Integrity)
							Element:br
								*Basic Package (Summary)
							Element:br
							Element:br
								'+'''Parameters'''+'
							Element:br
								|| border=1 rules=rows frame=hsides
							Element:br
								||! Type ||! Parameter ||! Default Value ||
							Element:br
								||Date ||LOGOUT TIMESTAMP ||(Current Time)||
							Element:br
								||String ||ACCOUNT ID ||''No Default Value''||
							Element:br
								||String ||CHARACTER ID ||ACCOUNT_ID||
							Element:br
							Element:br
								'+'''Sample Use'''+'
							Element:br
							Element:br
								*Java
							Element:br
							Element:br
								//Log when a user logs out\\
							Element:br
								public void ''aKApi.''logLogout(LOGOUT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID);
							Element:br
							Element:br
								*JavaScript
							Element:br
							Element:br
								//Log when a user logs out[[<<]]
							Element:br
								''aKApi.''logLogout(LOGOUT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID);
							Element:br
							Element:br
								*PHP
							Element:br
							Element:br
								//Log when a user logs out\\
							Element:br
								''$aKApi''->logLogout(LOGOUT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID);
							Element:br
							Element:br
								*JSON
							Element:br
							Element:br
								//Log when a user logs out\\
							Element:br
							Element:br
								{
							Element:br
								"timestamp":"2013-11-14T13:51:53.035Z",
							Element:br
								"data":{
							Element:br
								"type":2,
							Element:br
								"account_id":"cool_guy@example.com",
							Element:br
								"character_id":"Wizard"
							Element:br
								}
							Element:br
								}
							Element:br
							Element:br
								NOTE: All parameters are required in JSON.
							Element:br
							Element:br
								%right%[[#top|Back to Top]]
							Element:br
								----
							Element:br
							Element:br
								!!!!'''Initialize Shard (Event ID#13)'''[[#InitializeShard]]
							Element:br
							Element:br
								Many games and environments have multiple instances running in parallel. In our schema, these parallel instances are referred to as shards. Shards are the same as running multiple instances of the game, or other environments, on different servers. To initialize a shard, you need to pass the shard ID and description, as well as a timestamp.
							Element:br
							Element:br
								'''Note''': You must log the shard creation information before any log or load command references the shard ID.
							Element:br
							Element:br
								'+'''Parameters'''+'
							Element:br
								|| border=1 rules=rows frame=hsides
							Element:br
								||! Type ||! Parameter ||! Default Value ||
							Element:br
								||Date ||TIMESTAMP ||(Current Time)||
							Element:br
								||Long ||SHARD ID ||''No Default Value''||
							Element:br
								||String ||SHARD DESCRIPTION ||NA||
							Element:br
							Element:br
							Element:br
								'+'''Sample Use'''+'
							Element:br
							Element:br
								*Java
							Element:br
							Element:br
								//Log shard creation information\\
							Element:br
								public void aKApi.loadInitShard(TIMESTAMP, SHARD_ID, SHARD_DESCRIPTION);
							Element:br
							Element:br
								*JavaScript
							Element:br
							Element:br
								//Log shard creation information\\
							Element:br
								''aKApi.''loadInitShard(TIMESTAMP, SHARD_ID, SHARD_DESCRIPTION);
							Element:br
							Element:br
								*PHP
							Element:br
							Element:br
								//Log shard creation information\\
							Element:br
								''$aKApi->''loadInitShard(TIMESTAMP, SHARD_ID, SHARD_DESCRIPTION);
							Element:br
							Element:br
								*JSON
							Element:br
							Element:br
								//Log shard creation information\\
							Element:br
							Element:br
								{
							Element:br
								"timestamp":"2013-11-14T16:15:08.347Z",
							Element:br
								"data":{
							Element:br
								"type":13,
							Element:br
								"shard_id":42,
							Element:br
								"shard_desc":"the shard with answers to it all"
							Element:br
								}
							Element:br
								}
							Element:br
							Element:br
								NOTE: All parameters are required in JSON.
							Element:br
							Element:br
								%right%[[#top|Back to Top]]
							Element:br
								----
							Element:br
							Element:br
								%comment%!!!!'''Ad Click (Event ID#57)''' - To Be Completed.
							Element:br
							Element:br
							Element:br
								%comment%This event records information when a user clicks on an Ad, or clicks on an Ad and takes some subsequent action. To log that a user has clicked an Ad you need to pass the user's account ID and the time the Ad was clicked. Optionally, you can pass the Ad tag name and Ad action timestamp.
							Element:br
							Element:br
								%comment%'+'''Parameters'''+'
							Element:br
								%comment%|| border=1 rules=rows frame=hsides
							Element:br
								%comment%||! Type ||! Parameter ||! Default Value ||
							Element:br
								%comment%|| Date || AD CLICK TIMESTAMP || (Current Time) ||
							Element:br
								%comment%|| String || ACCOUNT ID || ''No Default Value'' ||
							Element:br
								%comment%|| String || AD TAG NAME || In App [[Appendix#ad-tag-name| (See Appendix for more types)]]||
							Element:br
								%comment%|| Date || AD ACTION TIMESTAMP || Null ||
							Element:br
							Element:br
							Element:br
								%comment%'+'''Sample Use'''+'
							Element:br
							Element:br
								%comment%*Java
							Element:br
								%comment%//Log when a user clicks an Ad\\
							Element:br
								%comment%public void ''aKApi''.logAccountAd(AD_CLICK_TIMESTAMP, ACCOUNT_ID, AD_TAG_NAME, AD_ACTION_TIMESTAMP);
							Element:br
							Element:br
								%comment%*JavaScript
							Element:br
							Element:br
								%comment%//Log when a user clicks an Ad\\
							Element:br
								%comment%''aKApi''.logAccountAd(AD_CLICK_TIMESTAMP, ACCOUNT_ID, AD_TAG_NAME, AD_ACTION_TIMESTAMP);
							Element:br
							Element:br
								%comment%*PHP
							Element:br
							Element:br
								%comment%//Log when a user clicks an Ad\\
							Element:br
								%comment%''$aKApi''->logAccountAd(AD_CLICK_TIMESTAMP, ACCOUNT_ID, AD_TAG_NAME, AD_ACTION_TIMESTAMP);
							Element:br
							Element:br
								%comment%*JSON
							Element:br
							Element:br
								%comment%//Log when a user clicks an Ad\\
							Element:br
							Element:br
								%comment% {
							Element:br
								%comment% “ad_click_timestamp":"2013-08-12T05:00:00.000Z",
							Element:br
								%comment% "data":{
							Element:br
								%comment% "type":57,
							Element:br
								%comment% "account_id":"cool_guy@example.com",
							Element:br
								%comment% "ad_tag_name":"Ad-Words",
							Element:br
								%comment% "ad_action_timestamp":"2013-08-12T05:00:00.000Z”
							Element:br
								%comment% }
							Element:br
								%comment% }
							Element:br
							Element:br
								%comment%NOTE: “account_id” and ‘ad_click_timestamp” are required, while all other parameters are optional.
							Element:br
							Element:br
								%comment%%right%[[#top|Back to Top]]
							Element:br
								%comment%----
							Element:br
							Element:br
							Element:br
								!!'''Account Management Events'''[[#AccountManagementEvents]]
							Element:br
							Element:br
								Account Management events include those events that are related to the creation, deletion, and management of a user or character account. Details on how to execute calls to log account events can be found below for each corresponding event.
							Element:br
							Element:br
							Element:br
								!!!!'''Create Account (Event ID#9)'''[[#CreateAccount]]
							Element:br
							Element:br
								This event records information regarding the creation of a new account, including the user's demographics. To log the creation of an account you need to pass the account ID and type; the user's language, country, gender, and date of birth; as well as the platform and the timestamp. Optionally, you may pass their currency balance and old account ID.
							Element:br
							Element:br
								'''Note''': You must log the account creation information before any log or load command references the account ID.
							Element:br
							Element:br
								'+'''Impacted UI Features'''+'
							Element:br
								*KPI
							Element:br
								*User Metrics (Churn, Farming, Integrity)
							Element:br
								*Basic Package (Summary)
							Element:br
							Element:br
								'+'''Parameters'''+'
							Element:br
								|| border=1 rules=rows frame=hsides
							Element:br
								||! Type ||! Parameter ||! Default Value ||
							Element:br
								||Date ||CREATION TIMESTAMP ||(Current Time)||
							Element:br
								||String ||ACCOUNT ID ||"No Default Value"||
							Element:br
								||String ||ACCOUNT TYPE ||Free||
							Element:br
								||String ||LANGUAGE ||N0||
							Element:br
								||String ||COUNTRY ||N0||
							Element:br
								||String ||GENDER ||N||
							Element:br
								||Date ||DOB ||“1900-01-01T00:00:00.000Z”||
							Element:br
								||Float ||CURRENCY BALANCE ||0||
							Element:br
								||String ||PLATFORM ||Other||
							Element:br
								||String ||OLD ACCOUNT ID ||Null||
							Element:br
							Element:br
								'+'''Sample Use'''+'
							Element:br
							Element:br
								*Java
							Element:br
							Element:br
								//Log when a user creates an account\\
							Element:br
								public void aKApi.loadAccountCreate(CREATION_TIMESTAMP, ACCOUNT_ID, ACCOUNT_TYPE, LANGUAGE, COUNTRY, GENDER, DOB, PLATFORM, CURRENCY_BALANCE, PLATFORM, OLD_ACCOUNT_ID);
							Element:br
							Element:br
								*JavaScrip
							Element:br
								//Log when a user creates an account\\
							Element:br
								''aKApi.''loadAccountCreate(CREATION_TIMESTAMP, ACCOUNT_ID, ACCOUNT_TYPE, LANGUAGE, COUNTRY, GENDER, DOB, PLATFORM, CURRENCY_BALANCE, PLATFORM, OLD_ACCOUNT_ID);
							Element:br
							Element:br
								*PHP
							Element:br
								//Log when a user creates an account\\
							Element:br
								''$aKApi->''loadAccountCreate(CREATION_TIMESTAMP, ACCOUNT_ID, ACCOUNT_TYPE, LANGUAGE, COUNTRY, GENDER, DOB, PLATFORM, CURRENCY_BALANCE, PLATFORM, OLD_ACCOUNT_ID);
							Element:br
							Element:br
								*JSON
							Element:br
								//Log when a user creates an account\\
							Element:br
							Element:br
								{
							Element:br
								"timestamp":"2013-11-14T15:18:30.726Z",
							Element:br
								"data":{
							Element:br
								"type":9,
							Element:br
								"account_id":"cool_guy@example.com",
							Element:br
								"account_sub_type":"Free",
							Element:br
								"account_lang":"NA",
							Element:br
								"account_country":"de",
							Element:br
								"account_gender":"N",
							Element:br
								"account_dob":"1900-01-01T00:00:00.000Z",
							Element:br
								"account_currency_balance":55,
							Element:br
								"platform":"Social",
							Element:br
								"old_account_id":"small_cat@example.com"
							Element:br
								}
							Element:br
								}
							Element:br
							Element:br
								NOTE: All parameters are required in JSON, except “account_currency_balance_” and “old_account_id” which are optional.
							Element:br
							Element:br
								%right%[[#top|Back to Top]]
							Element:br
								----
							Element:br
							Element:br
								!!!!'''Delete Account (Event ID#10)'''[[#DeleteAccount]]
							Element:br
							Element:br
								This event records information regarding account deletion, including reasoning for deletion, in terms of churn or account compromise. To log the deletion of an account you need to pass the account ID, churn type, and timestamp.
							Element:br
							Element:br
								'+'''Impacted UI Features'''+'
							Element:br
								*KPI
							Element:br
								*User Metrics (Churn, Farming, Integrity)
							Element:br
							Element:br
								'+'''Parameters'''+'
							Element:br
								|| border=1 rules=rows frame=hsides
							Element:br
								||! Type ||! Parameter ||! Default Value ||
							Element:br
								||Date ||TIMESTAMP ||(Current Time)||
							Element:br
								||String ||ACCOUNT ID ||''No Default Value''||
							Element:br
								||String ||CHURN TYPE ||Stopped||
							Element:br
							Element:br
								'+'''Sample Use'''+'
							Element:br
							Element:br
								*Java
							Element:br
							Element:br
								//Log when a user deletes an account\\
							Element:br
								public void ''aKApi.''loadAccountDeleted(TIMESTAMP, ACCOUNT_ID, CHURN_TYPE);
							Element:br
							Element:br
								*JavaScript
							Element:br
							Element:br
								//Log when a user deletes an account\\
							Element:br
								''aKApi.''loadAccountDelete(TIMESTAMP, ACCOUNT_ID, CHURN_TYPE);
							Element:br
							Element:br
								*PHP
							Element:br
							Element:br
								//Log when a user deletes an account\\
							Element:br
								''$aKApi->''loadAccount''Delete(TIMESTAMP, ACCOUNT_ID, CHURN_TYPE);
							Element:br
							Element:br
								*JSON
							Element:br
							Element:br
								//Log when a user deletes an account\\
							Element:br
							Element:br
								{
							Element:br
								"timestamp":"1989-08-15T05:00:00.000Z",
							Element:br
								"data":{
							Element:br
								"type":10,
							Element:br
								"account_id":"cool_guy@example.com",
							Element:br
								"account_status":"Failed"
							Element:br
								}
							Element:br
								}
							Element:br
							Element:br
								NOTE: All parameters are required in JSON.
							Element:br
							Element:br
								%right%[[#top|Back to Top]]
							Element:br
								----
							Element:br
							Element:br
								[[#CreateCharacter]]
							Element:br
								!!!!'''Create Character (Event ID#11)'''
							Element:br
							Element:br
							Element:br
								Relates to the creation of characters or aliases within the game, where the character's attributes may vary from the attributes of the person in the real world. Once a character is created their attributes are usually fixed. To log a character creation, you need to pass the character and account IDs; the character class, subclass, gender, race, and name; along with the timestamp. Optionally, you may pass the shard ID.
							Element:br
							Element:br
								'''Note''': You must log the character creation information before any log or load command references the character ID.
							Element:br
							Element:br
								'+'''Impacted UI Features'''+'
							Element:br
								*KPI
							Element:br
							Element:br
								'+'''Parameters'''+'
							Element:br
								|| border=1 rules=rows frame=hsides
							Element:br
								||! Type ||! Parameter ||! Default Value ||
							Element:br
								|| Date || TIMESTAMP || (Current Time) ||
							Element:br
								|| String || ACCOUNT ID || ''No Default Value'' ||
							Element:br
								|| String || CHARACTER ID || ACCOUNT ID ||
							Element:br
								|| String || CHARACTER CLASS || NA ||
							Element:br
								|| String || CHARACTER SUBCLASS || NA ||
							Element:br
								|| String || CHARACTER GENDER || ''Must be 'M' or 'F' or 'N''' ||
							Element:br
								|| String || CHARACTER RACE || NA ||
							Element:br
								|| String || CHARACTER NAME || NA ||
							Element:br
								|| Long || SHARD ID || 0 ||
							Element:br
							Element:br
								'+'''Sample Use'''+'
							Element:br
							Element:br
								*Java
							Element:br
							Element:br
								//Log the creation of a character\\
							Element:br
								public void ''aKApi''.loadCharacterCreate(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_CLASS, CHARACTER_SUBCLASS, CHARACTER_GENDER, CHARACTER_RACE, CHARACTER_NAME, SHARD_ID);
							Element:br
							Element:br
								*JavaScript
							Element:br
							Element:br
								//Log the creation of a character\\
							Element:br
								''aKApi''.loadCharacterCreate(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_CLASS, CHARACTER_SUBCLASS, CHARACTER_GENDER, CHARACTER_RACE, CHARACTER_NAME, SHARD_ID);
							Element:br
							Element:br
								*PHP
							Element:br
							Element:br
								//Log the creation of a character\\
							Element:br
								''$aKApi''->loadCharacterCreate(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_CLASS, CHARACTER_SUBCLASS, CHARACTER_GENDER, CHARACTER_RACE, CHARACTER_NAME, SHARD_ID);
							Element:br
							Element:br
								*JSON
							Element:br
							Element:br
								//Log the creation of a character\\
							Element:br
							Element:br
								{
							Element:br
								"timestamp":"2013-11-14T15:47:36.202Z",
							Element:br
								"data":{
							Element:br
								"type":11,
							Element:br
								"account_id":"cool_guy@example.com",
							Element:br
								"character_id":"wizard",
							Element:br
								"character_class":"magic",
							Element:br
								"character_sub_class":"healer",
							Element:br
								"character_gender":"N",
							Element:br
								"character_race":"fish",
							Element:br
								"character_name":"small_fish",
							Element:br
								"shard_id":0
							Element:br
								}
							Element:br
								}
							Element:br
							Element:br
								NOTE: All parameters are required in JSON, except “shard_id” which is optional.
							Element:br
							Element:br
								%right%[[#top|Back to Top]]
							Element:br
								----
							Element:br
							Element:br
								!!!!'''Delete Character (Event ID#12)'''
							Element:br
							Element:br
							Element:br
								This event records information regarding the deletion of a character. To log a character deletion, you need to pass the character ID, account ID, and timestamp.
							Element:br
							Element:br
								For related information, see [[#CreateCharacter| ''Create Character'']].
							Element:br
							Element:br
								'+'''Impacted UI Features'''+'
							Element:br
								*KPI
							Element:br
							Element:br
								'+'''Parameters'''+'
							Element:br
								|| border=1 rules=rows frame=hsides
							Element:br
								||! Type ||! Parameter ||! Default Value ||
							Element:br
								|| Date || TIMESTAMP || (Current Time) ||
							Element:br
								|| String || ACCOUNT ID || ''No Default Value'' ||
							Element:br
								|| String || CHARACTER ID || ''No Default Value'' ||
							Element:br
							Element:br
							Element:br
								'+'''Sample Use'''+'
							Element:br
							Element:br
								*Java
							Element:br
							Element:br
								//Log the deletion of a character\\
							Element:br
								public void ''aKApi''.loadCharacterDelete(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID);
							Element:br
							Element:br
								*JavaScript
							Element:br
							Element:br
								//Log the deletion of a character\\
							Element:br
								''aKApi''.loadCharacterDelete(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID);
							Element:br
							Element:br
								*PHP
							Element:br
							Element:br
								//Log the deletion of a character\\
							Element:br
								''$aKApi''->loadCharacterDelete(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID);
							Element:br
							Element:br
								*JSON
							Element:br
							Element:br
								//Log the deletion of a character\\
							Element:br
							Element:br
								{
							Element:br
								"timestamp":"2013-11-14T16:03:13.367Z",
							Element:br
								"data":{
							Element:br
								"type":12,
							Element:br
								"account_id":"cool_guy@example.com”,
							Element:br
								"character_id":"Wizard”
							Element:br
								}
							Element:br
								}
							Element:br
							Element:br
								NOTE: All parameters are required in JSON.
							Element:br
							Element:br
								%right%[[#top|Back to Top]]
							Element:br
								----
							Element:br
							Element:br
								%comment%!!!!'''Integrity (Event ID#48)'''
							Element:br
							Element:br
							Element:br
								%comment%Integrity indicates whether an account has been compromised. This event records information regarding when the account was compromised and what type of integrity violation occurred. To log the integrity of an account you need to pass the account ID, integrity type, and timestamp. Optionally, you may pass the shard ID.
							Element:br
							Element:br
								%comment%'+'''Impacted UI Features'''+'
							Element:br
								%comment%*User Metrics (Integrity)
							Element:br
							Element:br
								%comment%'+'''Parameters'''+'
							Element:br
								%comment%|| border=1 rules=rows frame=hsides
							Element:br
								%comment%||! Type ||! Parameter ||! Default Value ||
							Element:br
								%comment%|| Date || TIMESTAMP || (Current Time) ||
							Element:br
								%comment%|| String || ACCOUNT ID || ''No Default Value'' ||
							Element:br
								%comment%|| Long || SHARD ID || 0 ||
							Element:br
								%comment%|| String || INTEGRITY TYPE || Other [[Appendix#integrity-flag-type|(See Appendix A for more types)]]||
							Element:br
							Element:br
							Element:br
							Element:br
								%comment%'+'''Sample Use'''+'
							Element:br
							Element:br
								%comment%*Java
							Element:br
							Element:br
								%comment%//Log account integrity\\
							Element:br
								%comment%public void ''aKApi''.logIntegrity(TIMESTAMP, ACCOUNT_ID, SHARD_ID, INTEGRITY_TYPE);
							Element:br
							Element:br
								%comment%*JavaScript
							Element:br
							Element:br
								%comment%//Log account integrity\\
							Element:br
								%comment%''aKApi''.logIntegrity(TIMESTAMP, ACCOUNT_ID, SHARD_ID, INTEGRITY_TYPE);
							Element:br
							Element:br
								%comment%*PHP
							Element:br
							Element:br
								%comment%//Log account integrity\\
							Element:br
								%comment%''$aKApi''->logIntegrity(TIMESTAMP, ACCOUNT_ID, SHARD_ID, INTEGRITY_TYPE);
							Element:br
							Element:br
								%comment%*JSON
							Element:br
							Element:br
								%comment%//Log account integrity\\
							Element:br
							Element:br
								%comment% {
							Element:br
								%comment% "timestamp":"2013-11-15T18:00:57.840Z",
							Element:br
								%comment% "data":{
							Element:br
								%comment% "type":48,
							Element:br
								%comment% "account_id":"cool_guy@example.com",
							Element:br
								%comment% "shard_id":42.42,
							Element:br
								%comment% "integrity_type":"Cheating"
							Element:br
								%comment% }
							Element:br
								%comment% }
							Element:br
							Element:br
								%comment%NOTE: All parameters are required in JSON, except “shard_id” which is optional.
							Element:br
							Element:br
								%comment%%right%[[#top|Back to Top]]
							Element:br
								%comment%----
							Element:br
							Element:br
							Element:br
								!!'''Game Events'''[[#GameEvents]]
							Element:br
							Element:br
								Game events include those events that are related to in-game characters, actions, and combat. Details on how to execute calls to log game events can be found below for each corresponding event.
							Element:br
							Element:br
							Element:br
								!!!!'''Begin Combat (Event ID#21)'''
							Element:br
							Element:br
							Element:br
								This event records information regarding the beginning of combat between a player and a non-player character (NPC). To log when a player begins combat, you need to pass the account and character IDs; the NPC ID; the area ID, name and position; as well as the timestamp. Optionaly, you may pass the shard ID.
							Element:br
							Element:br
								'+'''Parameters'''+'
							Element:br
								|| border=1 rules=rows frame=hsides
							Element:br
								||! Type ||! Parameter ||! Default Value ||
							Element:br
								|| Date || BEGIN COMBAT TIMESTAMP || (Current Time) ||
							Element:br
								|| String || ACCOUNT ID || ''No Default Value'' ||
							Element:br
								|| String || CHARACTER ID || ACCOUNT ID ||
							Element:br
								|| Long || SHARD ID || 0 ||
							Element:br
								|| Long || NPC ID || ''No Default Value'' ||
							Element:br
								|| Long || BEGIN AREA ID || 0 ||
							Element:br
								|| Float || BEGIN POSITION X || 0 ||
							Element:br
								|| Float || BEGIN POSITION Y || 0 ||
							Element:br
								|| Float || BEGIN POSITION Z || 0 ||
							Element:br
								|| String || BEGIN AREA NAME || NA ||
							Element:br
							Element:br
							Element:br
							Element:br
								'+'''Sample Use'''+'
							Element:br
							Element:br
								*Java
							Element:br
							Element:br
								//Log when a combat event begins\\
							Element:br
								public void ''aKApi''.combatStart(BEGIN_COMBAT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, NPC_ID, BEGIN_AREA_ID, BEGIN_POSITION_X, BEGIN_POSITION_Y, BEGIN_POSITION_Z, BEGIN_AREA_NAME);
							Element:br
							Element:br
								*JavaScript
							Element:br
							Element:br
								//Log when a combat event begins\\
							Element:br
								''aKApi''.combatStart(BEGIN_COMBAT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, NPC_ID, BEGIN_AREA_ID, BEGIN_POSITION_X, BEGIN_POSITION_Y, BEGIN_POSITION_Z, BEGIN_AREA_NAME);
							Element:br
							Element:br
							Element:br
								*PHP
							Element:br
							Element:br
								//Log when a combat event begins\\
							Element:br
								''$aKApi''->combatStart(BEGIN_COMBAT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, NPC_ID, BEGIN_AREA_ID, BEGIN_POSITION_X, BEGIN_POSITION_Y, BEGIN_POSITION_Z, BEGIN_AREA_NAME);
							Element:br
							Element:br
								*JSON
							Element:br
							Element:br
								//Log when a combat event begins\\
							Element:br
							Element:br
								{
							Element:br
								"timestamp":"2013-11-14T18:55:58.241Z",
							Element:br
								"data":{
							Element:br
								"type":21,
							Element:br
								"account_id":"cool_guy@example.com",
							Element:br
								"character_id":"Wizard",
							Element:br
								"shard_id":42,
							Element:br
								"npc_id":23456,
							Element:br
								"area_id":552,
							Element:br
								"position_x":678,
							Element:br
								"position_y":231,
							Element:br
								"position_z":517,
							Element:br
								"area_name":"Area_Name"
							Element:br
								}
							Element:br
								}
							Element:br
							Element:br
								NOTE: All parameters are required in JSON, except “shard_id” which is optional.
							Element:br
							Element:br
								%right%[[#top|Back to Top]]
							Element:br
								----
							Element:br
							Element:br
								!!!!'''End Combat (Event ID#22)'''
							Element:br
							Element:br
							Element:br
								This event records information regarding the end of combat between a player and a non- player character (NPC). To log when a player ends combat, you need to pass the account and character IDs; the NPC ID; the area ID, name, and position; as well as the timestamp. Optionally, you may pass the shard ID.
							Element:br
							Element:br
								'+'''Parameters'''+'
							Element:br
								|| border=1 rules=rows frame=hsides
							Element:br
								||! Type ||! Parameter ||! Default Value ||
							Element:br
								|| Date || END COMBAT TIMESTAMP || (Current Time) ||
							Element:br
								|| String || ACCOUNT ID || ''No Default Value'' ||
							Element:br
								|| String || CHARACTER ID || ACCOUNT ID ||
							Element:br
								|| Long || SHARD ID || 0 ||
							Element:br
								|| Long || NPC ID || ''No Default Value'' ||
							Element:br
								|| Long || END AREA ID || 0 ||
							Element:br
								|| Float || END POSITION X || 0 ||
							Element:br
								|| Float || END POSITION Y || 0 ||
							Element:br
								|| Float || END POSITION Z || 0 ||
							Element:br
								|| String || END AREA NAME || NA ||
							Element:br
							Element:br
							Element:br
							Element:br
								'+'''Sample Use'''+'
							Element:br
							Element:br
								*Java
							Element:br
								//Log when a combat event ends\\
							Element:br
								public void ''aKApi''.combatEnd(END_COMBAT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, NPC_ID, END_AREA_ID, END_POSITION_X, END_POSITION_Y, END_POSITION_Z, END_AREA_NAME);
							Element:br
							Element:br
								*JavaScript
							Element:br
							Element:br
								//Log when a combat event ends\\
							Element:br
								''aKApi''.combatEnd(END_COMBAT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, NPC_ID, END_AREA_ID, END_POSITION_X, END_POSITION_Y, END_POSITION_Z, END_AREA_NAME);
							Element:br
							Element:br
								*PHP
							Element:br
							Element:br
								//Log when a combat event ends\\
							Element:br
								''$aKApi''->combatEnd(END_COMBAT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, NPC_ID, END_AREA_ID, END_POSITION_X, END_POSITION_Y, END_POSITION_Z, END_AREA_NAME);
							Element:br
							Element:br
								*JSON
							Element:br
							Element:br
								//Log when a combat event ends\\
							Element:br
							Element:br
								{
							Element:br
								"timestamp":"2013-11-15T12:41:31.575Z",
							Element:br
								"data":{
							Element:br
								"type":22,
							Element:br
								"account_id":"cool_guy@example.com",
							Element:br
								"character_id":"wizard",
							Element:br
								"shard_id":42,
							Element:br
								"npc_id":23456,
							Element:br
								"area_id":552,
							Element:br
								"position_x":678,
							Element:br
								"position_y":231,
							Element:br
								"position_z":517,
							Element:br
								"area_name":"Area_Name"
							Element:br
								}
							Element:br
								}
							Element:br
							Element:br
								NOTE: All parameters are required in JSON, except “shard_id” which is optional.
							Element:br
							Element:br
								%right%[[#top|Back to Top]]
							Element:br
								----
							Element:br
							Element:br
								!!!!'''Kill (NPC) (Event ID#23)'''
							Element:br
							Element:br
							Element:br
								This event records when a non-player character (NPC) is killed by a player in the game. To log an NPC kill, you need to pass the account and character ID, the character level, the killed NPC ID, and the timestamp. Optionally, you may pass the shard ID.
							Element:br
							Element:br
								'+'''Parameters'''+'
							Element:br
								|| border=1 rules=rows frame=hsides
							Element:br
								||! Type ||! Parameter ||! Default Value ||
							Element:br
								|| Date || KILL NPC TIMESTAMP || (Current Time) ||
							Element:br
								|| String || ACCOUNT ID || ''No Default Value'' ||
							Element:br
								|| String || CHARACTER ID || ACCOUNT ID ||
							Element:br
								|| Long || SHARD ID || 0 ||
							Element:br
								|| Long || CHARACTER LEVEL || 0 ||
							Element:br
								|| Long || KILLED NPC ID || ''No Default Value'' ||
							Element:br
							Element:br
							Element:br
							Element:br
								'+'''Sample Use'''+'
							Element:br
							Element:br
								*Java
							Element:br
								//Log when an NPC is killed\\
							Element:br
								public void ''aKApi''.logKillNpc(KILL_NPC_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, CHARACTER_LEVEL, KILLED_NPC_ID);
							Element:br
							Element:br
								*JavaScript
							Element:br
							Element:br
								//Log when an NPC is killed\\
							Element:br
								''aKApi''.logKillNpc(KILL_NPC_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, CHARACTER_LEVEL, KILLED_NPC_ID);
							Element:br
							Element:br
								*PHP
							Element:br
							Element:br
								//Log when an NPC is killed\\
							Element:br
								''$aKApi''->logKillNpc(KILL_NPC_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, CHARACTER_LEVEL, KILLED_NPC_ID);
							Element:br
							Element:br
								*JSON
							Element:br
							Element:br
								//Log when an NPC is killed\\
							Element:br
								{
							Element:br
								"timestamp":"2013-11-15T13:08:45.954Z",
							Element:br
								"data":{
							Element:br
								"type":23,
							Element:br
								"account_id":"cool_guy@example.com",
							Element:br
								"character_id":"wizard",
							Element:br
								"shard_id":52,
							Element:br
								"character_lvl":42,
							Element:br
								"npc_id":23456
							Element:br
								}
							Element:br
								}
							Element:br
							Element:br
								NOTE: All parameter are required in JSON, except “shard_id” which is optional.
							Element:br
							Element:br
								%right%[[#top|Back to Top]]
							Element:br
								----
							Element:br
							Element:br
								!!!!'''Player Points (Event ID#24)'''[[#PlayerPoints]]
							Element:br
							Element:br
								This event records information regarding when a player gains points in the game. Points are used as an indicator of how well the player is doing in the game and how far they have progressed. Typically, gaining enough points leads the player to level-up to a higher level. To log player points, you need to pass the account and character IDs, the character level, the point amount and type, along with the timestamp. Optionally, you may pass the shard ID and whether or not the points are grouped.
							Element:br
							Element:br
								'+'''Impacted UI Features'''+'
							Element:br
								*System Metrics (Levels)
							Element:br
							Element:br
								'+'''Parameters'''+'
							Element:br
								|| border=1 rules=rows frame=hsides
							Element:br
								||! Type ||! Parameter ||! Default Value ||
							Element:br
								||Date ||XP TIMESTAMP ||(Current Time)||
							Element:br
								||String ||ACCOUNT ID ||''No Default Value''||
							Element:br
								||String ||CHARACTER ID ||ACCOUNT_ID||
							Element:br
								||Long ||CHARACTER LEVEL ||If Generic Character then Account Level; If no concept of Levels then 0.||
							Element:br
								||Long ||SHARD ID ||0||
							Element:br
								||Long ||POINT_TYPE ||Default = XP, {XP, GENERIC_POINTS, OTHER}||
							Element:br
								||Long ||XP AMOUNT ||''No Default Value''||
							Element:br
								||Boolean ||GROUPED FLAG || N||
							Element:br
							Element:br
								[- *Point Type default is XP, alternate options include 'Generic Point', and 'Other'.-]
							Element:br
							Element:br
								'+'''Sample Use'''+'
							Element:br
							Element:br
								*Java
							Element:br
								//Log player XP\\
							Element:br
								public void ''aKApi.''playerXp(XP_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, SHARD_ID, POINT_TYPE, XP_AMOUNT, GROUPED_FLAG);
							Element:br
							Element:br
								*JavaScript
							Element:br
								//Log player XP\\
							Element:br
								''aKApi.''playerXp(XP_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, SHARD_ID, POINT_TYPE, XP_AMOUNT, GROUPED_FLAG);
							Element:br
							Element:br
								*PHP
							Element:br
								//Log player XP\\
							Element:br
								''$aKApi->''playerXp(XP_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, SHARD_ID, POINT_TYPE, XP_AMOUNT, GROUPED_FLAG);
							Element:br
							Element:br
								*JSON
							Element:br
								//Log player XP\\
							Element:br
							Element:br
								{
							Element:br
								"timestamp":"2013-11-15T13:17:01.847Z",
							Element:br
								"data":{
							Element:br
								"type":24,
							Element:br
								"account_id":"cool_guy@example.com",
							Element:br
								"character_id":"Wizard",
							Element:br
								"character_lvl":1,
							Element:br
								"shard_id":42,
							Element:br
								“point_type”:”XP”
							Element:br
								"xp_amount":34.45,
							Element:br
								"grouped_flag”:”Y”,
							Element:br
							Element:br
								}
							Element:br
								}
							Element:br
							Element:br
								NOTE: All parameters are required in JSON, except “shard_id” and “grouped_flag” which are optional.
							Element:br
							Element:br
								%right%[[#top|Back to Top]]
							Element:br
								----
							Element:br
							Element:br
								!!!!'''Player Versus Player (PVP) Duel (Event ID#25)'''
							Element:br
							Element:br
								Please use Social Interactions Event #6 to record Player Versus Player actions.
							Element:br
								%comment%This event records information when a player enters into combat against another player. Note that this event is only applicable for games and environments where a player is able to fight another player. To log a PVP duel, you need to pass the account and character IDs, the timestamp, and whether or not the player won. Optionally, you may pass the shard ID.
							Element:br
								%comment%
							Element:br
								%comment%'+'''Parameters'''+'
							Element:br
								%comment%|| border=1 rules=rows frame=hsides
							Element:br
								%comment%||! Type ||! Parameter ||! Default Value ||
							Element:br
								%comment%|| Date || PVP DUEL TIMESTAMP || (Current Time) ||
							Element:br
								%comment%|| String || ACCOUNT ID || ''No Default Value'' ||
							Element:br
								%comment%|| String || CHARACTER ID || ACCOUNT ID ||
							Element:br
								%comment%|| Long || SHARD ID || 0 ||
							Element:br
								%comment%|| Boolean || WIN FLAG || ''No Default Value'' ||
							Element:br
								%comment%
							Element:br
								%comment%'+'''Sample Use'''+'
							Element:br
								%comment%
							Element:br
								%comment%*Java
							Element:br
								%comment%//Log a PVP Duel\\
							Element:br
								%comment%public void ''aKApi''.logPvpDuel(PVP_DUEL_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, WIN_FLAG);
							Element:br
								%comment%
							Element:br
								%comment%*JavaScript
							Element:br
								%comment%//Log a PVP Duel\\
							Element:br
								%comment%''aKApi''.logPvpDuel(PVP_DUEL_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, WIN_FLAG);
							Element:br
								%comment%
							Element:br
								%comment%*PHP
							Element:br
								%comment%//Log a PVP Duel\\
							Element:br
								%comment%''$aKApi''->logPvpDuel(PVP_DUEL_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, WIN_FLAG);
							Element:br
								%comment%
							Element:br
								%comment%*JSON
							Element:br
								%comment%//Log a PVP Duel\\
							Element:br
								%comment%
							Element:br
								%comment% {
							Element:br
								%comment% "timestamp":"2013-11-15T13:26:39.832Z",
							Element:br
								%comment% "data":{
							Element:br
								%comment% "type":25,
							Element:br
								%comment% "account_id":"cool_guy@example.com",
							Element:br
								%comment% "character_id":"Wizard",
							Element:br
								%comment% "shard_id":42,
							Element:br
								%comment% "win_flag":"Y"
							Element:br
								%comment% }
							Element:br
								%comment% }
							Element:br
								%comment%
							Element:br
								%comment%NOTE: All parameters are required in JSON, except “shard_id” which is optional
							Element:br
								%comment%
							Element:br
								%comment%%right%[[#top|Back to Top]]
							Element:br
								%comment%----
							Element:br
								%comment%
							Element:br
								!!!!'''Player Death (Event ID#26)'''
							Element:br
							Element:br
								This event records information regarding the death of a player by a non-player character (NPC). To log a player death, you need to pass the account and character IDs; the Area ID and name; the NPC ID; the position; the type of death; and the timestamp. Optionally, you may pass the shard ID.
							Element:br
							Element:br
								'+'''Parameters'''+'
							Element:br
								|| border=1 rules=rows frame=hsides
							Element:br
								||! Type ||! Parameter ||! Default Value ||
							Element:br
								|| Date || DEATH TIMESTAMP || (Current Time) ||
							Element:br
								|| String || ACCOUNT ID || ''No Default Value'' ||
							Element:br
								|| String || CHARACTER ID || ACCOUNT ID ||
							Element:br
								|| Long || SHARD ID || 0 ||
							Element:br
								|| Long || KILLER NPC ID || ''No Default Value'' ||
							Element:br
								|| String || DEATH TYPE || NA ||
							Element:br
								|| Long || AREA ID || 0 ||
							Element:br
								|| Float || POSITION X || 0 ||
							Element:br
								|| Float || POSITION Y || 0 ||
							Element:br
								|| Float || POSITION Z || 0 ||
							Element:br
								|| String || AREA NAME || NA ||
							Element:br
							Element:br
								'+'''Sample Use'''+'
							Element:br
							Element:br
								*Java
							Element:br
								//Log a player death\\
							Element:br
								public void ''aKApi''.logPlayerDeath(DEATH_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, KILLER_NPC_ID, DEATH_TYPE, AREA_ID, POSITION_X, POSITION_Y, POSITION_Z, AREA_NAME);
							Element:br
							Element:br
								*JavaScript
							Element:br
							Element:br
								//Log a player death\\
							Element:br
								''aKApi''.logPlayerDeath(DEATH_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, KILLER_NPC_ID, DEATH_TYPE, AREA_ID, POSITION_X, POSITION_Y, POSITION_Z, AREA_NAME);
							Element:br
							Element:br
								*PHP
							Element:br
							Element:br
								//Log a player death\\
							Element:br
								''$aKApi''->logPlayerDeath(DEATH_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, KILLER_NPC_ID, DEATH_TYPE, AREA_ID, POSITION_X, POSITION_Y, POSITION_Z, AREA_NAME);
							Element:br
							Element:br
								*JSON
							Element:br
							Element:br
								//Log a player death\\
							Element:br
							Element:br
								{
							Element:br
								"timestamp":"2013-11-15T13:32:33.452Z",
							Element:br
								"data":{
							Element:br
								"type":26,
							Element:br
								"account_id":"cool_guy@example.com",
							Element:br
								"character_id":"Wizard",
							Element:br
								"shard_id":42,
							Element:br
								"npc_id":23456,
							Element:br
								"death_type":"Immolation",
							Element:br
								"area_id":512,
							Element:br
								"position_x":678,
							Element:br
								"position_y":231,
							Element:br
								"position_z":517,
							Element:br
								"area_name”:”Area_Name”
							Element:br
								}
							Element:br
								}
							Element:br
							Element:br
								NOTE: All parameter are required in JSON, except “shard_id” which is optional.
							Element:br
							Element:br
								%right%[[#top|Back to Top]]
							Element:br
								----
							Element:br
							Element:br
								!!!!'''Non-Player Character (NPC) (Event ID#31)'''[[#NPC]]
							Element:br
							Element:br
								Non-player characters (NPCs) are characters within the game that are not controlled by players. They have different levels of difficulty and may be either friendly or aggressive. This event records information regarding interactions between NPCs and players in the game environment. Recording NPC's also populates the dimension table for NPCs, which is later referred to for all other NPC related events. To log NPC events, you need to pass the account and character IDs; the NPC ID, name, and type; the event type and name; along with the toughness and timestamp. Optionally, you may pass the shard ID, and the minimum and maximum levels.
							Element:br
							Element:br
								'+'''Impacted UI Features'''+'
							Element:br
								*KPI
							Element:br
								*System Metrics (NPC)
							Element:br
							Element:br
								'+'''Parameters'''+'
							Element:br
								|| border=1 rules=rows frame=hsides
							Element:br
								||! Type ||! Parameter ||! Default Value ||
							Element:br
								||Date ||EVENT TIMESTAMP ||(Current Time)||
							Element:br
								||String ||ACCOUNT ID ||''No Default Value''||
							Element:br
								||String ||CHARACTER ID ||ACCOUNT_ID||
							Element:br
								||Long ||SHARD ID ||0||
							Element:br
								||String ||NPC EVENT NAME ||''No Default Value''||
							Element:br
								||String ||NPC EVENT TYPE ||''No Default Value''||
							Element:br
								||String ||NPC ID ||If NPC ID is empty, and NPC Name is not empty, use 0.||
							Element:br
								||String ||NPC NAME ||If NPC ID is not empty, and NPC Name is empty, use NA.||
							Element:br
								||String ||NPC TYPE ||Other||
							Element:br
								||Integer ||MIN LEVEL ||Set as Optional, with Null value||
							Element:br
								||Integer ||MAX LEVEL ||Set as Optional, with Null value||
							Element:br
								||Integer ||TOUGHNESS ||Set as Optional, with Null value||
							Element:br
								||String ||TOUGHNESS ENUM || Set as Optional, with Null value||
							Element:br
							Element:br
								'+'''Sample Use'''+'
							Element:br
							Element:br
								*Java
							Element:br
								//Log an NPC event occurred\\
							Element:br
								public void ''aKApi.log''NpcInteraction(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, NPC_EVENT_NAME, NPC_EVENT_TYPE, NPC_ID, NPC_NAME, NPC_TYPE, MIN_LEVEL, MAX_LEVEL, TOUGHNESS, TOUGHNESS_ENUM);
							Element:br
							Element:br
								*JavaScript
							Element:br
								//Log an NPC event occurred\\
							Element:br
								''aKApi.log''NpcInteraction(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, NPC_EVENT_NAME, NPC_EVENT_TYPE, NPC_ID, NPC_NAME, NPC_TYPE, MIN_LEVEL, MAX_LEVEL, TOUGHNESS, TOUGHNESS_ENUM);
							Element:br
							Element:br
								*PHP
							Element:br
								//Log an NPC event occurred\\
							Element:br
								''$aKApi->log''NpcInteraction(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, NPC_EVENT_NAME, NPC_EVENT_TYPE, NPC_ID, NPC_NAME, NPC_TYPE, MIN_LEVEL, MAX_LEVEL, TOUGHNESS, TOUGHNESS_ENUM);
							Element:br
							Element:br
								*JSON
							Element:br
								//Log an NPC event occurred\\
							Element:br
							Element:br
								{
							Element:br
								"timestamp":"2013-11-15T14:22:57.102Z",
							Element:br
								"data":{
							Element:br
								"type":31,
							Element:br
								"account_id":"cool_guy@example.com",
							Element:br
								"character_id":"wizard",
							Element:br
								"shard_id":42,
							Element:br
								"npc_event_name":"npcEventName",
							Element:br
								"npc_event_type":"Combat",
							Element:br
								"npc_id":2345,
							Element:br
								"npc_name":"the Mort of T",
							Element:br
								"npc_type":"Enemy",
							Element:br
								"npc_level_min":5,
							Element:br
								"npc_level_max":10,
							Element:br
								"npc_toughness":0.25,
							Element:br
								"npc_toughness_enum":"Quarter"
							Element:br
								}
							Element:br
								}
							Element:br
							Element:br
								NOTE: All parameters are required in JSON, except “shard_id”, “npc_level_min”, and “npc_level_max” which are optional.
							Element:br
							Element:br
								%right%[[#top|Back to Top]]
							Element:br
								----
							Element:br
							Element:br
								!!!!'''Challenge (Event ID#32)'''
							Element:br
							Element:br
							Element:br
								Challenges, sometimes referred to as Quests, are elements of the game where a player, or group of players, can perform tasks for a reward or opportunity to level-up within the game. This event records information regarding challenges. To log a challenge event, you need to pass the account and character IDs; the challenge ID, type, and status; along with the timestamp. Optionally, you may pass the shard ID.
							Element:br
							Element:br
								'+'''Impacted UI Features'''+'
							Element:br
								*KPI
							Element:br
							Element:br
								'+'''Parameters'''+'
							Element:br
								|| border=1 rules=rows frame=hsides
							Element:br
								||! Type ||! Parameter ||! Default Value ||
							Element:br
								|| Date || EVENT TIMESTAMP || (Current Time) ||
							Element:br
								|| String || ACCOUNT ID || ''No Default Value'' ||
							Element:br
								|| String || CHARACTER ID || ACCOUNT ID ||
							Element:br
								|| Long || SHARD ID || 0 ||
							Element:br
								|| String || CHALLENGE ID || ''No Default Value'' ||
							Element:br
								|| String || CHALLENGE TYPE || Other [[Appendix#challange-type|(See Appendix A for more types)]]||
							Element:br
								|| String || CHALLENGE STATUS || Accepted* ||
							Element:br
								[- *The Challenge Status default is 'Accepted', but alternate options include 'Completed', or 'Abandoned'.-]
							Element:br
							Element:br
								'+'''Sample Use'''+'
							Element:br
							Element:br
								*Java
							Element:br
								//Log a challenge event occurred\\
							Element:br
								public void ''aKApi''.logChallenge(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, CHALLENGE_ID, CHALLENGE_TYPE, CHALLENGE_STATUS);
							Element:br
							Element:br
								*JavaScript
							Element:br
								//Log a challenge event occurred\\
							Element:br
								''aKApi''.logChallenge(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, CHALLENGE_ID, CHALLENGE_TYPE, CHALLENGE_STATUS);
							Element:br
							Element:br
								*PHP
							Element:br
								//Log a challenge event occurred\\
							Element:br
								''$aKApi''->logChallenge(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, CHALLENGE_ID, CHALLENGE_TYPE, CHALLENGE_STATUS);
							Element:br
							Element:br
								*JSON
							Element:br
								//Log a challenge event occurred\\
							Element:br
							Element:br
								{
							Element:br
								"timestamp":"2013-11-15T14:31:40.633Z",
							Element:br
								"data":{
							Element:br
								"type":32,
							Element:br
								"account_id":"cool_guy@example.com",
							Element:br
								"character_id":"Wizard",
							Element:br
								"shard_id":42,
							Element:br
								"challenge_id":"challenge_Id",
							Element:br
								"challenge_type":"Kill NPC",
							Element:br
								"challenge_status":"Abandonded"
							Element:br
								}
							Element:br
								}
							Element:br
							Element:br
								NOTE: All parameters are required in JSON, except “shard_id” which is optional.
							Element:br
							Element:br
								%right%[[#top|Back to Top]]
							Element:br
								----
							Element:br
							Element:br
								%comment%!!!!'''Farmer (Event ID#47)'''
							Element:br
							Element:br
							Element:br
								%comment%This event records information regarding whether or not a player is a gold farmer, including what type of gold farmer they are (e.g. spammer, gatherer, mule, etc.). To log whether a player is a gold farmer, you need to pass the account and character ID, the farmer type, and the timestamp. Optionally, you may pass the shard ID.
							Element:br
							Element:br
								%comment%'+'''Impacted UI Features'''+'
							Element:br
								%comment%*User Metrics (Farming)
							Element:br
							Element:br
								%comment%'+'''Parameters'''+'
							Element:br
								%comment%|| border=1 rules=rows frame=hsides
							Element:br
								%comment%||! Type ||! Parameter ||! Default Value ||
							Element:br
								%comment%|| Date || TIMESTAMP || (Current Time) ||
							Element:br
								%comment%|| String || ACCOUNT ID || ''No Default Value'' ||
							Element:br
								%comment%|| String || CHARACTER ID || ACCOUNT ID ||
							Element:br
								%comment%|| Long || SHARD ID || 0 ||
							Element:br
								%comment%|| String || FARMER TYPE || Other [[Appendix#farmer-type|(See Appendix A for more types)]]||
							Element:br
							Element:br
							Element:br
								%comment%'+'''Sample Use'''+'
							Element:br
							Element:br
								%comment%*Java
							Element:br
								%comment%//Log if a player is a gold farmer\\
							Element:br
								%comment%public void ''aKApi''.logFarmer(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, FARMER_TYPE);
							Element:br
							Element:br
								%comment%*JavaScript
							Element:br
								%comment%//Log if a player is a gold farmer\\
							Element:br
								%comment%''aKApi''.logFarmer(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, FARMER_TYPE);
							Element:br
							Element:br
								%comment%*PHP
							Element:br
								%comment%//Log if a player is a gold farmer\\
							Element:br
								%comment%''$aKApi''->logFarmer(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, FARMER_TYPE);
							Element:br
							Element:br
								%comment%*JSON
							Element:br
								%comment%//Log if a player is a gold farmer\\
							Element:br
							Element:br
								%comment% {
							Element:br
								%comment% "timestamp":"2013-11-15T17:55:57.747Z",
							Element:br
								%comment% "data":{
							Element:br
								%comment% "type":47,
							Element:br
								%comment% "account_id":"cool_guy@example.com",
							Element:br
								%comment% "character_id":"Wizard",
							Element:br
								%comment% "shard_id":52,
							Element:br
								%comment% "farmer_type":"Banker"
							Element:br
								%comment% }
							Element:br
								%comment% }
							Element:br
							Element:br
								%comment%NOTE: All parameters are required in JSON, except “shard_id” which is optional.
							Element:br
								%comment%
							Element:br
								%comment%%right%[[#top|Back to Top]]
							Element:br
								%comment%----
							Element:br
							Element:br
								%comment%!!!!'''Reward (Event ID#49)'''
							Element:br
								%comment%
							Element:br
								%comment%
							Element:br
								%comment%This event records information regarding reward systems, through which rewards may be awarded for completion of a task or seniority. To log reward events, you need to pass the account and character IDs; the reward type, ID, and count; along with the timestamp. Optionally, you may pass the shard ID, and reward item type.
							Element:br
								%comment%
							Element:br
								%comment%'+'''Parameters'''+'
							Element:br
								%comment%|| border=1 rules=rows frame=hsides
							Element:br
								%comment%||! Type ||! Parameter ||! Default Value ||
							Element:br
								%comment%|| Date || TIMESTAMP || (Current Time) ||
							Element:br
								%comment%|| String || ACCOUNT ID || ''No Default Value'' ||
							Element:br
								%comment%|| String || CHARACTER ID || ACCOUNT ID ||
							Element:br
								%comment%|| Long || SHARD ID || 0 ||
							Element:br
								%comment%|| String || REWARD TYPE || ''No Default Value''* ||
							Element:br
								%comment%|| Long || REWARD ID || ''No Default Value'' ||
							Element:br
								%comment%|| String || ITEM TYPE || Other [[Appendix#item-type|(See Appendix A for more types)]]||
							Element:br
								%comment%|| Float || REWARD COUNT || ''No Default Value'' ||
							Element:br
								%comment%
							Element:br
								%comment%
							Element:br
								%comment%'+'''Sample Use'''+'
							Element:br
								%comment%
							Element:br
								%comment%*Java
							Element:br
								%comment%//Log that a reward event occurred\\
							Element:br
								%comment%public void ''aKApi''.logReward(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, REWARD_TYPE, REWARD_ID, ITEM_TYPE, REWARD_COUNT);
							Element:br
								%comment%
							Element:br
								%comment%*JavaScript
							Element:br
								%comment%//Log that a reward event occurred\\
							Element:br
								%comment%''aKApi''.logReward(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, REWARD_TYPE, REWARD_ID, ITEM_TYPE, REWARD_COUNT);
							Element:br
								%comment%
							Element:br
								%comment%*PHP
							Element:br
								%comment%//Log that a reward event occurred\\
							Element:br
								%comment%''$aKApi''->logReward(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, REWARD_TYPE, REWARD_ID, ITEM_TYPE, REWARD_COUNT);
							Element:br
								%comment%
							Element:br
								%comment%*JSON
							Element:br
								%comment%//Log that a reward event occurred\\
							Element:br
								%comment%
							Element:br
								%comment% {
							Element:br
								%comment% "timestamp":"2013-11-15T18:07:14.132Z",
							Element:br
								%comment% "data":{
							Element:br
								%comment% "type":49,
							Element:br
								%comment% "account_id":"cool_guy@example.com",
							Element:br
								%comment% "character_id":"Wizard",
							Element:br
								%comment% "shard_id":42.42,
							Element:br
								%comment% "reward_type":1,
							Element:br
								%comment% "reward_id":"1",
							Element:br
								%comment% "item_type":2,
							Element:br
								%comment% "reward_count":50.5
							Element:br
								%comment% }
							Element:br
								%comment% }
							Element:br
								%comment%
							Element:br
								%comment%NOTE: All parameters are required in JSON, except “shard_id” and “item_type” which are optional.
							Element:br
								%comment%
							Element:br
								%comment%%right%[[#top|Back to Top]]
							Element:br
								%comment%----
							Element:br
								%comment%
							Element:br
								%comment%!!!!'''Mob (Event ID#51)'''
							Element:br
							Element:br
							Element:br
								%comment%A Mob refers to a group of non-player characters (NPCs). This event records information on when a player confronts and kills a Mob. To log a mob event, you need to pass the account and character IDs, the shard ID, and the timestamp. Optionally, you may pass the shard ID and description of the kill.
							Element:br
							Element:br
								%comment%'+'''Impacted UI Features'''+'
							Element:br
								%comment%*User Metrics (Farming)
							Element:br
							Element:br
								%comment%'+'''Parameters'''+'
							Element:br
								%comment%|| border=1 rules=rows frame=hsides
							Element:br
								%comment%||! Type ||! Parameter ||! Default Value ||
							Element:br
								%comment%|| Date || TIMESTAMP || (Current Time) ||
							Element:br
								%comment%|| String || ACCOUNT ID || ''No Default Value'' ||
							Element:br
								%comment%|| String || CHARACTER ID || ACCOUNT ID ||
							Element:br
								%comment%|| Long || SHARD ID || 0 ||
							Element:br
								%comment%|| String || KILL MOB DESCRIPTION || Null ||
							Element:br
							Element:br
							Element:br
								%comment%'+'''Sample Use'''+'
							Element:br
							Element:br
								%comment%*Java
							Element:br
								%comment%//Log when a mob is defeated\\
							Element:br
								%comment%public void ''aKApi''.logMob(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, KILL_MOB_DESCRIPTION);
							Element:br
							Element:br
								%comment%*JavaScript
							Element:br
								%comment%//Log when a mob is defeated\\
							Element:br
								%comment%''aKApi''.logMob(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, KILL_MOB_DESCRIPTION);
							Element:br
							Element:br
								%comment%*PHP
							Element:br
								%comment%//Log when a mob is defeated\\
							Element:br
								%comment%''$aKApi''->logMob(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, KILL_MOB_DESCRIPTION);
							Element:br
							Element:br
								%comment%*JSON
							Element:br
								%comment%//Log when a mob is defeated\\
							Element:br
							Element:br
								%comment% {
							Element:br
								%comment% "timestamp":"2013-11-15T18:18:12.933Z",
							Element:br
								%comment% "data":{
							Element:br
								%comment% "type":51,
							Element:br
								%comment% "account_id":"cool_guy@example.com",
							Element:br
								%comment% "character_id":"Wizard",
							Element:br
								%comment% "shard_id":42.42,
							Element:br
								%comment% "mob_desc":"mob_desc"
							Element:br
								%comment% }
							Element:br
								%comment% }
							Element:br
							Element:br
								%comment%NOTE: All parameters are required in JSON, except “shard_id” and “mob_desc” which are optional.
							Element:br
							Element:br
								%comment%%right%[[#top|Back to Top]]
							Element:br
								%comment%----
							Element:br
							Element:br
								%comment%!!!!'''Resource (Event ID#56)''' - To Be Completed.
							Element:br
							Element:br
							Element:br
								%comment%A resource event refers to when a player acquires a non-item resource within the game, such as coins, gold, power, etc. To log resource events, you need to pass the account and character IDs; the resource type, count, and ID; along with the timestamp. Optionally, you may pass the shard ID.
							Element:br
							Element:br
								%comment%'+'''Impacted UI Features'''+'
							Element:br
								%comment%*System Metrics (Levels)
							Element:br
							Element:br
								%comment%'+'''Parameters'''+'
							Element:br
								%comment%|| border=1 rules=rows frame=hsides
							Element:br
								%comment%||! Type ||! Parameter ||! Default Value ||
							Element:br
								%comment%|| Date || TIMESTAMP || (Current Time) ||
							Element:br
								%comment%|| String || ACCOUNT ID || ''No Default Value'' ||
							Element:br
								%comment%|| String || CHARACTER ID || ACCOUNT ID ||
							Element:br
								%comment%|| Long || SHARD ID || 0 ||
							Element:br
								%comment%|| String || RESOURCE TYPE || Other [[Appendix#resource-type|(See Appendix A for more types)]]||
							Element:br
								%comment%|| String || RESOURCE ID || ''No Default Value'' ||
							Element:br
								%comment%|| Long || RESOURCE COUNT || ''No Default Value'' ||
							Element:br
							Element:br
							Element:br
								%comment%'+'''Sample Use'''+'
							Element:br
							Element:br
								%comment%*Java
							Element:br
								%comment%//Log that a resource event occurred\\
							Element:br
								%comment%public void ''aKApi''.logResource(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, RESOURCE_TYPE, RESOURCE_ID, RESOURCE_COUNT);
							Element:br
							Element:br
								%comment%*JavaScript
							Element:br
								%comment%//Log that a resource event occurred\\
							Element:br
								%comment%''aKApi''.logResource(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, RESOURCE_TYPE, RESOURCE_ID, RESOURCE_COUNT);
							Element:br
							Element:br
								%comment%*PHP
							Element:br
								%comment%//Log that a resource event occurred\\
							Element:br
								%comment%''$aKApi''->logResource(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, RESOURCE_TYPE, RESOURCE_ID, RESOURCE_COUNT);
							Element:br
							Element:br
								%comment%*JSON
							Element:br
								%comment%//Log that a resource event occurred\\
							Element:br
							Element:br
								%comment% {
							Element:br
								%comment% "timestamp":"2013-11-15T18:47:39.266Z",
							Element:br
								%comment% "data":{
							Element:br
								%comment% "type":56,
							Element:br
								%comment% "account_id":"cool_guy@example.com",
							Element:br
								%comment% "character_id":"Wizard", "shard_id":42.42,
							Element:br
								%comment% "shard_id":42.42,
							Element:br
								%comment% "resource_type":0,
							Element:br
								%comment% "resource_id":"1",
							Element:br
								%comment% "resource_count":3
							Element:br
								%comment% }
							Element:br
								%comment% }
							Element:br
							Element:br
								%comment%NOTE: All parameters are required in JSON, except “shard_id” which is optional.
							Element:br
							Element:br
								%comment%%right%[[#top|Back to Top]]
							Element:br
								%comment%----
							Element:br
							Element:br
								!!'''Item Events'''[[#ItemEvents]]
							Element:br
							Element:br
								Item events include those events that are related to the creation, use, and transaction of in-game items. Details on how to execute calls to log item events can be found below for each corresponding event.
							Element:br
							Element:br
								!!!!'''Initialize Item (Event ID#15)'''[[#InitializeItem]]
							Element:br
							Element:br
								This event records information regarding virtual items in the game. Such items may be made available by non-player characters, or they may be created by players in the game. Initializing an item also initializes the dimension table for the item, which is later referred to for all other item related events. To initialize an item, you need to pass the item ID, name, type, and segment, as well as the timestamp. Optionally, you may pass the account and character IDs of the creator.
							Element:br
							Element:br
								'''Note''': You must log the item creation information before any log or load command references the item ID.\\
							Element:br
								'''Note''': item_type may be any string, but use it consistently. some examples: “Raw materials”, “Mounts and pets”, “armor”, “tools”, “containers”\\
							Element:br
								'''Note''': item_value is a floating point value which would be used for the store price of the item \\
							Element:br
								'''Note''': item_segment may be “UGC” when the item is user-generated or “INGAME” when part of the original application \\
							Element:br
								'''Note''': IF the item_segment field is “UGC” then the creator_account_id and creator_character_id fields should be set appropriately, otherwise they should be empty strings \\
							Element:br
							Element:br
							Element:br
								'+'''Impacted UI Features'''+'
							Element:br
								*KPI
							Element:br
								*System Metrics (Items)
							Element:br
							Element:br
								'+'''Parameters'''+'
							Element:br
								|| border=1 rules=rows frame=hsides
							Element:br
								||! Type ||! Parameter ||! Default Value ||
							Element:br
								||Date ||TIMESTAMP ||(Current Time)||
							Element:br
								||Long ||ITEM ID ||0||
							Element:br
								||String ||ITEM NAME ||NA||
							Element:br
								||String ||ITEM TYPE ||Other [[Appendix#item-type| (See Appendix for more types)]] ||
							Element:br
								||String ||ITEM SEGMENT ||"UGC or INGAME"||
							Element:br
								||String ||CREATED BY ACCOUNT ID ||If ITEM_SEGMENT=UGC, then Required.||
							Element:br
								||String ||CREATED BY CHARACTER ID ||If ITEM_SEGMENT=UGC, then ACCOUNT_ID.||
							Element:br
							Element:br
							Element:br
								'+'''Sample Use'''+'
							Element:br
							Element:br
								*Java
							Element:br
								//Log item creation information\\
							Element:br
								public void ''aKApi.''loadInitItem(TIMESTAMP, ITEM_ID, ITEM_NAME, ITEM_TYPE, ITEM_SEGMENT, CREATED_BY_ACCOUNT_ID, CREATED_BY_CHARACTER_ID);
							Element:br
							Element:br
								*JavaScript
							Element:br
								//Log item creation information\\
							Element:br
								''aKApi''.loadInitItem(TIMESTAMP, ITEM_ID, ITEM_NAME, ITEM_TYPE, ITEM_SEGMENT, CREATED_BY_ACCOUNT_ID, CREATED_BY_CHARACTER_ID);
							Element:br
							Element:br
								*PHP
							Element:br
								//Log item creation information\\
							Element:br
								''$aKApi->''loadInitItem(TIMESTAMP, ITEM_ID, ITEM_NAME, ITEM_TYPE, ITEM_SEGMENT, CREATED_BY_ACCOUNT_ID, CREATED_BY_CHARACTER_ID);
							Element:br
							Element:br
								*JSON
							Element:br
								//Log item creation information\\
							Element:br
							Element:br
								{
							Element:br
								"timestamp":"2013-11-14T17:11:33.720Z",
							Element:br
								"data":{
							Element:br
								"type":15,
							Element:br
								"item_id":66,
							Element:br
								"item_name":"the big blaster gun",
							Element:br
								"item_type":"weapon",
							Element:br
								"item_segment":"UGC",
							Element:br
								"account_id":"cool_guy@example.com",
							Element:br
								"character_id":"Wizard"
							Element:br
								}
							Element:br
								}
							Element:br
							Element:br
								NOTE: All parameters are required in JSON, except “account_id” and “character_id” which are optional.
							Element:br
							Element:br
								%right%[[#top|Back to Top]]
							Element:br
								----
							Element:br
							Element:br
								!!!!'''Item Used (Event ID#16)'''[[#ItemUsed]]
							Element:br
							Element:br
								This event records information regarding the usage of items in the game, such as the usage location, and includes account and character information for the user who used the item. To log an item's use, you need to pass the account and character IDs; the character level; the item ID, name, and count; the area ID, name, and position; as well as the timestamp. Optionally, you may pass the shard ID.
							Element:br
							Element:br
								'+'''Impacted UI Features'''+'
							Element:br
								*KPI
							Element:br
								*System Metrics (Items)
							Element:br
							Element:br
								'+'''Parameters'''+'
							Element:br
								|| border=1 rules=rows frame=hsides
							Element:br
								||! Type ||! Parameter ||! Default Value ||
							Element:br
								||Date ||EVENT TIMESTAMP ||(Current Time)||
							Element:br
								||String ||ACCOUNT ID ||''No Default Value''||
							Element:br
								||String ||CHARACTER ID ||ACCOUNT_ID||
							Element:br
								||Long ||CHARACTER LEVEL ||If Generic Character then Account Level; If no concept of levels then 0.||
							Element:br
								||Long ||SHARD ID ||0||
							Element:br
								||Long ||ITEM ID ||If ITEM_ID is empty and ITEM_NAME is not empty, use 0.||
							Element:br
								||String ||ITEM NAME ||If ITEM_ID is not empty and ITEM_NAME is empty, use NA.||
							Element:br
								||Integer ||ITEM COUNT ||''No Default Value''||
							Element:br
								||Long ||AREA ID ||0||
							Element:br
								||String ||AREA NAME ||NA||
							Element:br
								||Float ||POSITION X ||0||
							Element:br
								||Float ||POSITION Y ||0||
							Element:br
								||Float ||POSITION Z ||0||
							Element:br
							Element:br
								'+'''Sample Use'''+'
							Element:br
							Element:br
								*Java
							Element:br
								//Log that an item was used\\
							Element:br
								public void ''aKApi.''logItem(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, SHARD_ID, ITEM_ID, ITEM_NAME, ITEM_COUNT, AREA_ID, AREA_NAME, POSITION_X, POSITION_Y, POSITION_Z);
							Element:br
							Element:br
								*JavaScript
							Element:br
								//Log that an item was used\\
							Element:br
								''aKApi.''logItem(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, SHARD_ID, ITEM_ID, ITEM_NAME, ITEM_COUNT, AREA_ID, AREA_NAME, POSITION_X, POSITION_Y, POSITION_Z);
							Element:br
							Element:br
								*PHP
							Element:br
								''//Log that an item was used\\
							Element:br
								''$aKApi->''logItem(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, SHARD_ID, ITEM_ID, ITEM_NAME, ITEM_COUNT, AREA_ID, AREA_NAME, POSITION_X, POSITION_Y, POSITION_Z);
							Element:br
							Element:br
								*JSON
							Element:br
								//Log that an item was used\\
							Element:br
							Element:br
								{
							Element:br
								"timestamp":"2013-11-14T17:42:49.185Z",
							Element:br
								"data":{
							Element:br
								"type":16,
							Element:br
								"account_id":"cool_guy@example.com",
							Element:br
								"character_id":"wizard",
							Element:br
								"character_lvl":52,
							Element:br
								"shard_id":42,
							Element:br
								"item_id":66,
							Element:br
								"item_name":"The Blaster Gun",
							Element:br
								"item_count":1,
							Element:br
								"area_id":42,
							Element:br
								"area_name":"Area_Name”,
							Element:br
								"position_x":678,
							Element:br
								"position_y":231,
							Element:br
								"position_z":517
							Element:br
								}
							Element:br
								}
							Element:br
							Element:br
								NOTE: All parameters are required in JSON, except “shard_id” which is optional.
							Element:br
							Element:br
								%right%[[#top|Back to Top]]
							Element:br
								----
							Element:br
								%comment%!!!!'''Item Transaction (Event ID#17)'''[[#ItemTransaction]] - To Be Completed.
							Element:br
							Element:br
								%comment%This event records information regarding the purchase of items in the game using either real world money or virtual currency that may be exclusive to the game. To log an item transaction, you need to pass the account and character IDs; the item ID, name, and price; the currency type and currency value; the transaction type; as well as the timestamp. Optionally, you may pass the shard ID, and virtual currency type and count.
							Element:br
							Element:br
								%comment%'+'''Impacted UI Features'''+'
							Element:br
								%comment%*KPI
							Element:br
								%comment%*User Metrics (Churn)
							Element:br
								%comment%*Basic Package (Churn)
							Element:br
							Element:br
								%comment%'+'''Parameters'''+'
							Element:br
								%comment%|| border=1 rules=rows frame=hsides
							Element:br
								%comment%||! Type ||! Parameter ||! Default Value ||
							Element:br
								%comment%||Date ||TIMESTAMP ||(Current Time)||
							Element:br
								%comment%||String ||ACCOUNT ID ||''No Default Value''||
							Element:br
								%comment%||String ||CHARACTER ID ||ACCOUNT_ID||
							Element:br
								%comment%||Long ||SHARD ID ||0||
							Element:br
								%comment%||Long ||ITEM ID ||If ITEM_ID is empty and ITEM_NAME is not empty, use 0.||
							Element:br
								%comment%||String ||ITEM NAME ||If ITEM_ID is not empty and ITEM_NAME is empty, use NA.||
							Element:br
								%comment%||Float ||ITEM PRICE ||''No Default Value''||
							Element:br
								%comment%||Integer ||TRANSACTION TYPE ||''No Default Value''*||
							Element:br
								%comment%||Integer ||CURRENCY TYPE ||''No Default Value''**||
							Element:br
								%comment%||String ||VIRTUAL CURRENCY TYPE || If CURRENCY_TYPE=1 then required; else null.||
							Element:br
								%comment%||Float ||CURRENCY VALUE ||''No Default Value''||
							Element:br
								%comment%||Integer ||VIRTUAL CURRENCY COUNT || Null||
							Element:br
							Element:br
								%comment%[- *Transaction Type must be 0 or 1, where 0 equals 'Spent' and 1 equals 'Acquired'.-]\\
							Element:br
								%comment%[- **Currency Type must be 0 or 1, where 0 equals 'Real' and 1 equals 'Virtual Currency'.-]
							Element:br
							Element:br
								%comment%'+'''Sample Use'''+'
							Element:br
							Element:br
								%comment%*Java
							Element:br
								%comment%//Log that an item transaction occurred\\
							Element:br
								%comment%public void ''aKApi.''logItemTransaction(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, ITEM_ID, ITEM_NAME, ITEM_PRICE, TRANSACTION_TYPE, CURRENCY_TYPE, VIRTUAL_CURRENCY_TYPE, CURRENCY_VALUE, VIRTUAL_CURRENCY_COUNT);
							Element:br
							Element:br
								%comment%*JavaScript
							Element:br
								%comment%//Log that an item transaction occurred\\
							Element:br
								%comment%''aKApi.''logItemTransaction(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, ITEM_ID, ITEM_NAME, ITEM_PRICE, TRANSACTION_TYPE, CURRENCY_TYPE, VIRTUAL_CURRENCY_TYPE, CURRENCY_VALUE, VIRTUAL_CURRENCY_COUNT);
							Element:br
							Element:br
								%comment%*PHP
							Element:br
								%comment%//Log that an item transaction occurred\\
							Element:br
								%comment%''$aKApi->''logItemTransaction(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, ITEM_ID, ITEM_NAME, ITEM_PRICE, TRANSACTION_TYPE, CURRENCY_TYPE, VIRTUAL_CURRENCY_TYPE, CURRENCY_VALUE, VIRTUAL_CURRENCY_COUNT);
							Element:br
							Element:br
								%comment%*JSON
							Element:br
								%comment%//Log that an item transaction occurred\\
							Element:br
							Element:br
								%comment% {
							Element:br
								%comment% "timestamp":"2013-11-14T17:52:58.876Z",
							Element:br
								%comment% "data":{
							Element:br
								%comment% "type":17,
							Element:br
								%comment% "account_id":"cool_guy@example.com",
							Element:br
								%comment% "character_id":"wizard",
							Element:br
								%comment% "shard_id":42,
							Element:br
								%comment% "item_id":66,
							Element:br
								%comment% "item_name":"the big blaster gun",
							Element:br
								%comment% "item_price":3,
							Element:br
								%comment% "transaction_type":0,
							Element:br
								%comment% "currency_type":0,
							Element:br
								%comment% "virtual_currency_label":"",
							Element:br
								%comment% "currency_value”:3,
							Element:br
								%comment% "virtual_currency_count”:1
							Element:br
								%comment% }
							Element:br
								%comment% }
							Element:br
							Element:br
								%comment%NOTE: All parameters are required in JSON, except “shard_id”, “virtual_currency_label”, and “virtual_currency_count” which are optional.
							Element:br
							Element:br
								%comment%%right%[[#top|Back to Top]]
							Element:br
								%comment%----[[#ugc-rating]]
							Element:br
								%comment%!!!!'''User Generated Content (UGC) Rating (Event ID#19)''' - To Be Completed.
							Element:br
							Element:br
							Element:br
								%comment%This event records information regarding the creation of in-game items and artifacts, including how items have been rated by other players. To log a UGC rating, you need to pass the account and character IDs; the item ID and name; the UGC rating; and timestamp. Optionally, you may pass the shard ID.
							Element:br
							Element:br
								%comment%'+'''Parameters'''+'
							Element:br
								%comment%|| border=1 rules=rows frame=hsides
							Element:br
								%comment%||! Type ||! Parameter ||! Default Value ||
							Element:br
								%comment%|| Date || RATING TIMESTAMP || ''No Default Value'' ||
							Element:br
								%comment%|| String || ACCOUNT ID || ''No Default Value'' ||
							Element:br
								%comment%|| String || CHARACTER ID || ACCOUNT ID ||
							Element:br
								%comment%|| Long || SHARD ID || 0 ||
							Element:br
								%comment%|| Long || ITEM ID || 0 ||
							Element:br
								%comment%|| String || ITEM NAME || NA ||
							Element:br
								%comment%|| String || UGC RATING || 1 ||
							Element:br
							Element:br
								%comment%'+'''Sample Use'''+'
							Element:br
							Element:br
								%comment%*Java
							Element:br
								%comment%//Log a UGC rating\\
							Element:br
								%comment%public void ''aKApi''.loadUgcRating(RATING_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, ITEM_ID, ITEM_NAME, UGC_RATING);
							Element:br
							Element:br
								%comment%*JavaScript
							Element:br
								%comment%//Log a UGC rating\\
							Element:br
								%comment%''aKApi''.loadUgcRating(RATING_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, ITEM_ID, ITEM_NAME, UGC_RATING);
							Element:br
							Element:br
								%comment%*PHP
							Element:br
								%comment%//Log a UGC rating\\
							Element:br
								%comment%''$aKApi''->loadUgcRating(RATING_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, ITEM_ID, ITEM_NAME, UGC_RATING);
							Element:br
							Element:br
								%comment%*JSON
							Element:br
								%comment%//Log a UGC rating\\
							Element:br
							Element:br
								%comment% {
							Element:br
								%comment% "timestamp":"2013-11-14T18:24:36.601Z",
							Element:br
								%comment% "data":{
							Element:br
								%comment% "type":19,
							Element:br
								%comment% "account_id":"cool_guy@example.com",
							Element:br
								%comment% "character_id":"Wizard",
							Element:br
								%comment% "shard_id":42,
							Element:br
								%comment% "item_id":764,
							Element:br
								%comment% "item_name":"crafty button",
							Element:br
								%comment% "ugc_rating":"theUgcRating"
							Element:br
								%comment% }
							Element:br
								%comment% }
							Element:br
							Element:br
								%comment%NOTE: All parameters are required in JSON, except “shard_id” which is optional.
							Element:br
							Element:br
								%comment%%right%[[#top|Back to Top]]
							Element:br
								%comment%----
							Element:br
							Element:br
								%comment%!!!!'''User Generated Content (UGC) Copy (Event ID#46)''' - To Be Completed.
							Element:br
							Element:br
							Element:br
								%comment%This event records information regarding the copying of an in-game item that was created by another player, not including items built-in by the gaming company. To log when a UGC is copied, you need to pass the copier's account and character IDs; the item ID and name; along with the timestamp. Optionally, you may pass the shard ID.
							Element:br
							Element:br
								%comment%For related information, see User [[#ugc-rating |Generated Content (UGC) Rating.]]
							Element:br
							Element:br
								%comment%'+'''Impacted UI Features'''+'
							Element:br
								%comment%*KPI
							Element:br
							Element:br
								%comment%'+'''Parameters'''+'
							Element:br
								%comment%|| border=1 rules=rows frame=hsides
							Element:br
								%comment%||! Type ||! Parameter ||! Default Value ||
							Element:br
								%comment%|| Date || ITEM COPY TIMESTAMP || (Current Time) ||
							Element:br
								%comment%|| String || COPY ACCOUNT ID || ''No Default Value'' ||
							Element:br
								%comment%|| String || COPY CHARACTER ID || COPY_ACCOUNT_ID ||
							Element:br
								%comment%|| Long || SHARD ID || 0 ||
							Element:br
								%comment%|| Long ||ITEM ID || If ITEM ID is empty, and ITEM NAME is not empty, use 0. ||
							Element:br
								%comment%|| String ||ITEM NAME || If ITEM ID is not empty, and ITEM NAME is empty, use NA. ||
							Element:br
							Element:br
								%comment%'+'''Sample Use'''+'
							Element:br
							Element:br
								%comment%*Java
							Element:br
								%comment%//Log when UGC is copied\\
							Element:br
								%comment%public void ''aKApi''.trackUgcCopy(ITEM_COPY_TIMESTAMP, COPY_ACCOUNT_ID, COPY_CHARACTER_ID, SHARD_ID, ITEM_ID, ITEM_NAME);
							Element:br
							Element:br
								%comment%*JavaScript
							Element:br
								%comment%//Log when UGC is copied\\
							Element:br
								%comment%''aKApi''.trackUgcCopy(ITEM_COPY_TIMESTAMP, COPY_ACCOUNT_ID, COPY_CHARACTER_ID, SHARD_ID, ITEM_ID, ITEM_NAME);
							Element:br
							Element:br
								%comment%*PHP
							Element:br
								%comment%//Log when UGC is copied\\
							Element:br
								%comment%''$aKApi''->trackUgcCopy(ITEM_COPY_TIMESTAMP, COPY_ACCOUNT_ID, COPY_CHARACTER_ID, SHARD_ID, ITEM_ID, ITEM_NAME);
							Element:br
							Element:br
								%comment%*JSON
							Element:br
								%comment%//Log when UGC is copied\\
							Element:br
							Element:br
								%comment% {
							Element:br
								%comment% "timestamp":"2013-11-15T17:50:53.188Z",
							Element:br
								%comment% "data":{
							Element:br
								%comment% "type":46,
							Element:br
								%comment% "account_id":"cool_guy@example.com",
							Element:br
								%comment% "character_id":"Wizard",
							Element:br
								%comment% "shard_id":42.42,
							Element:br
								%comment% "item_id":8729,
							Element:br
								%comment% "item_name":"GMO Grain"
							Element:br
								%comment% }
							Element:br
								%comment% }
							Element:br
							Element:br
								%comment%NOTE: All parameters are required in JSON, except “shard_id” which is optional.
							Element:br
							Element:br
								%comment%%right%[[#top|Back to Top]]
							Element:br
								%comment%----
							Element:br
							Element:br
							Element:br
								%comment%!!!!'''Productivity (Event ID#55)''' - To Be Completed.
							Element:br
							Element:br
								%comment%Productivity refers to events where players craft or harvest items within the game. To log productivity events, you need to pass the account and character IDs, the productivity type, and the timestamp. Optionally, you may pass the shard ID.
							Element:br
							Element:br
								%comment%'+'''Parameters'''+'
							Element:br
								%comment%|| border=1 rules=rows frame=hsides
							Element:br
								%comment%||! Type ||! Parameter ||! Default Value ||
							Element:br
								%comment%|| Date || TIMESTAMP || (Current Time) ||
							Element:br
								%comment%|| String || ACCOUNT ID || ''No Default Value'' ||
							Element:br
								%comment%|| String || CHARACTER ID || ACCOUNT ID ||
							Element:br
								%comment%|| Long || SHARD ID || 0 ||
							Element:br
								%comment%|| String || PRODUCTIVITY TYPE || Other [[Appendix#productivity-type |(See Appendix A for more types)]]||
							Element:br
							Element:br
							Element:br
								%comment%'+'''Sample Use'''+'
							Element:br
							Element:br
								%comment%*Java
							Element:br
								%comment%//Log a productivity event occurred\\
							Element:br
								%comment%public void ''aKApi''.logProductivity(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, PRODUCTIVITY_TYPE);
							Element:br
							Element:br
								%comment%*JavaScript
							Element:br
								%comment%//Log a productivity event occurred\\
							Element:br
								%comment%''aKApi''.logProductivity(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, PRODUCTIVITY_TYPE);
							Element:br
							Element:br
								%comment%*PHP
							Element:br
								%comment%//Log a productivity event occurred\\
							Element:br
								%comment%''$aKApi''->logProductivity(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, PRODUCTIVITY_TYPE););
							Element:br
							Element:br
								%comment%*JSON
							Element:br
								%comment%//Log a productivity event occurred\\
							Element:br
							Element:br
								%comment% {
							Element:br
								%comment% "timestamp":"2013-11-15T18:42:06.056Z",
							Element:br
								%comment% "data":{
							Element:br
								%comment% "type":55,
							Element:br
								%comment% "account_id":"cool_guy@example.com",
							Element:br
								%comment% "character_id":"Wizard",
							Element:br
								%comment% "shard_id":42.42,
							Element:br
								%comment% "productivity_type":"productivity_type"
							Element:br
								%comment% }
							Element:br
								%comment% }
							Element:br
							Element:br
								%comment%NOTE: All parameters are required in JSON, except “shard_id” which is optional.
							Element:br
							Element:br
								%comment%%right%[[#top|Back to Top]]
							Element:br
								%comment%----
							Element:br
							Element:br
							Element:br
								!!'''Social Group Events'''[[#GroupEvents]]
							Element:br
							Element:br
								Group events include those events involving player interaction with a group or guild, such as entry, exit, or a player's position within a guild (e.g. Guild Leader). A guild is analogous to an organization in many online games. Details on how to execute calls to log group events can be found below for each corresponding event.
							Element:br
							Element:br
							Element:br
								!!!!'''Social Group Enter (Event ID#4)'''
							Element:br
							Element:br
								This event records the time at which a user joins a group. In this case, groups are likely to be impermanent. Note that grouping is not applicable for solo games. To log a user's entry into a group you need to pass the account, character, and group IDs; the character level, and timestamp of entry. Optionally, you may pass the shard ID.
							Element:br
							Element:br
								'+'''Impacted UI Features'''+'
							Element:br
								*System Metrics (Social)
							Element:br
							Element:br
								'+'''Parameters'''+'
							Element:br
								|| border=1 rules=rows frame=hsides
							Element:br
								||! Type ||! Parameter ||! Default Value ||
							Element:br
								|| Date || ENTER GROUP TIMESTAMP || (Current Time) ||
							Element:br
								|| String || ACCOUNT ID || ''No Default Value'' ||
							Element:br
								|| String || CHARACTER ID || ACCOUNT ID ||
							Element:br
								|| Long || CHARACTER LEVEL || 0 ||
							Element:br
								|| Long || SHARD ID || 0 ||
							Element:br
								|| Long || GROUP ID || ''No Default Value'' ||
							Element:br
							Element:br
								'+'''Sample Use'''+'
							Element:br
							Element:br
								*Java
							Element:br
								//Log when a user enters a group\\
							Element:br
								public void ''aKApi''.logEnterGroup(ENTER_GROUP_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, SHARD_ID, GROUP_ID);
							Element:br
							Element:br
								*JavaScript
							Element:br
								//Log when a user enters a group\\
							Element:br
								''aKApi''.logEnterGroup(ENTER_GROUP_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, SHARD_ID, GROUP_ID);
							Element:br
							Element:br
								*PHP
							Element:br
								//Log when a user enters a group\\
							Element:br
								''$aKApi''->logEnterGroup(ENTER_GROUP_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, SHARD_ID, GROUP_ID);
							Element:br
							Element:br
								*JSON
							Element:br
								//Log when a user enters a group\\
							Element:br
							Element:br
								{
							Element:br
								"timestamp":"2013-11-14T14:10:36.792Z",
							Element:br
								"data":{
							Element:br
								"type":4,
							Element:br
								"account_id":"cool_guy@example.com",
							Element:br
								"character_id":"wizard",
							Element:br
								"character_lvl":50,
							Element:br
								"shard_id":42,
							Element:br
								"group_id":42
							Element:br
								}
							Element:br
								}
							Element:br
							Element:br
								NOTE: All parameters are required in JSON, except “shard_id” which is optional.
							Element:br
							Element:br
								%right%[[#top|Back to Top]]
							Element:br
								----
							Element:br
							Element:br
								!!!!'''Social Group Exit (Event ID#5)'''
							Element:br
							Element:br
							Element:br
								This event records the time at which a user leaves a group. To log a user's exit from a group you need to pass the account, character, and group IDs; the character level; and timestamp of exit. Optionally, you may pass the shard ID>
							Element:br
							Element:br
								For related information, see [[#group-enter |Group Enter]].
							Element:br
							Element:br
								'+'''Impacted UI Features'''+'
							Element:br
								*System Metrics (Social)
							Element:br
							Element:br
								'+'''Parameters'''+'
							Element:br
								|| border=1 rules=rows frame=hsides
							Element:br
								||! Type ||! Parameter ||! Default Value ||
							Element:br
								|| Date || LEAVE GROUP TIMESTAMP || (Current Time) ||
							Element:br
								|| String || ACCOUNT ID || ''No Default Value'' ||
							Element:br
								|| String || CHARACTER ID || ACCOUNT ID ||
							Element:br
								|| Long || CHARACTER LEVEL || 0 ||
							Element:br
								|| Long || SHARD ID || 0 ||
							Element:br
								|| Long || GROUP ID || ''No Default Value'' ||
							Element:br
							Element:br
								'+'''Sample Use'''+'
							Element:br
							Element:br
								*Java
							Element:br
								//Log when a user exits a group\\
							Element:br
								public void ''aKApi''.logExitGroup(LEAVE_GROUP_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, SHARD_ID, GROUP_ID);
							Element:br
							Element:br
								*JavaScript
							Element:br
								//Log when a user exits a group\\
							Element:br
								''aKApi''.logExitGroup(LEAVE_GROUP_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, SHARD_ID, GROUP_ID);
							Element:br
							Element:br
								*PHP
							Element:br
								//Log when a user exits a group\\
							Element:br
								''$aKApi''->logExitGroup(LEAVE_GROUP_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, SHARD_ID, GROUP_ID);
							Element:br
							Element:br
								*JSON
							Element:br
								//Log when a user exits a group\\
							Element:br
								{
							Element:br
								"timestamp":"2013-11-14T14:16:15.375Z",
							Element:br
								"data":{
							Element:br
								"type":5,
							Element:br
								"account_id":"cool_guy@example.com",
							Element:br
								"character_id":"Wizard",
							Element:br
								"character_lvl":50,
							Element:br
								"shard_id":42,
							Element:br
								"group_id":42
							Element:br
								}
							Element:br
								}
							Element:br
							Element:br
								NOTE: All parameters are required in JSON, except “shard_id” which is optional.
							Element:br
							Element:br
								%right%[[#top|Back to Top]]
							Element:br
								----
							Element:br
								[[#guild-enter]]
							Element:br
								!!!!'''Enter Guild (Event ID#41)'''
							Element:br
							Element:br
							Element:br
								This event records information regarding when a player becomes part of a guild and whether they are the leader of the guild, or not. To log a player's entry into a guild, you need to pass the user's account ID, character ID, character level, guild ID, along with the time of entry. Optionally, you can pass their shard ID.
							Element:br
							Element:br
								'+'''Impacted UI Features'''+'
							Element:br
								*System Metrics (Social)
							Element:br
							Element:br
								'+'''Parameters'''+'
							Element:br
								|| border=1 rules=rows frame=hsides
							Element:br
								||! Type ||! Parameter ||! Default Value ||
							Element:br
								|| Date || EVENT TIMESTAMP || (Current Time) ||
							Element:br
								|| String || ACCOUNT ID || ''No Default Value'' ||
							Element:br
								|| String || CHARACTER ID || ACCOUNT ID ||
							Element:br
								|| Long || CHARACTER LEVEL || 0 ||
							Element:br
								|| Long || SHARD ID || 0 ||
							Element:br
								|| Long || GUILD ID || ''No Default Value'' ||
							Element:br
							Element:br
								'+'''Sample Use'''+'
							Element:br
							Element:br
								*Java
							Element:br
								//Log when a player enters a guild\\
							Element:br
								public void ''aKApi''.logEnterGuild(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, SHARD_ID, GUILD_ID);
							Element:br
							Element:br
								*JavaScript
							Element:br
								//Log when a player enters a guild\\
							Element:br
								''aKApi''.logEnterGuild(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, SHARD_ID, GUILD_ID);
							Element:br
							Element:br
								*PHP
							Element:br
								//Log when a player enters a guild\\
							Element:br
								''$aKApi''->logEnterGuild(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, SHARD_ID, GUILD_ID);
							Element:br
							Element:br
								*JSON
							Element:br
								//Log when a player enters a guild\\
							Element:br
							Element:br
								{
							Element:br
								"timestamp":"2013-11-15T16:21:24.890Z",
							Element:br
								"data":{
							Element:br
								"type":41,
							Element:br
								"account_id":"cool_guy@example.com",
							Element:br
								"character_id":"Wizard",
							Element:br
								"character_lvl":52,
							Element:br
								"shard_id":1,
							Element:br
								"guild_id":42
							Element:br
								}
							Element:br
								}
							Element:br
							Element:br
								NOTE: All parameters are required in JSON, except “shard_id” which is optional.
							Element:br
							Element:br
								%right%[[#top|Back to Top]]
							Element:br
								----
							Element:br
							Element:br
								!!!!'''Exit Guild (Event ID#42)'''
							Element:br
							Element:br
							Element:br
								This event records information regarding exiting a guild, including the guild exited and reason for leaving such as being evicted, leaving voluntarily, etc. To log a player's exit from a guild, you need to pass the user's account ID, character ID, character level, guild ID, along with the time of entry and reason for exiting the guild. Optionally, you can pass their shard ID.
							Element:br
							Element:br
								'+'''Impacted UI Features'''+'
							Element:br
								*System Metrics (Social)
							Element:br
							Element:br
								'+'''Parameters'''+'
							Element:br
								|| border=1 rules=rows frame=hsides
							Element:br
								||! Type ||! Parameter ||! Default Value ||
							Element:br
								|| Date || EVENT TIMESTAMP || (Current Time) ||
							Element:br
								|| String || ACCOUNT ID || ''No Default Value'' ||
							Element:br
								|| String || CHARACTER ID || ACCOUNT ID ||
							Element:br
								|| Long || CHARACTER LEVEL || 0 ||
							Element:br
								|| Long || SHARD ID || 0 ||
							Element:br
								|| Long || GUILD ID || ''No Default Value'' ||
							Element:br
								|| String || GUILD EXIT REASON || NA ||
							Element:br
							Element:br
								'+'''Sample Use'''+'
							Element:br
							Element:br
								*Java
							Element:br
								//Log when and why a player exits a guild\\
							Element:br
								public void ''aKApi''.logExitGuild(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, SHARD_ID, GUILD_ID, GUILD_EXIT_REASON);
							Element:br
							Element:br
								*JavaScript
							Element:br
								//Log when and why a player exits a guild\\ ''aKApi''.logExitGuild(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, SHARD_ID, GUILD_ID, GUILD_EXIT_REASON);
							Element:br
							Element:br
								*PHP
							Element:br
								//Log when and why a player exits a guild\\
							Element:br
								''$aKApi''->logExitGuild(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, SHARD_ID, GUILD_ID, GUILD_EXIT_REASON);
							Element:br
							Element:br
								*JSON
							Element:br
								//Log when and why a player exits a guild\\
							Element:br
							Element:br
								{
							Element:br
								"timestamp":"2013-11-15T17:28:35.133Z",
							Element:br
								"data":{
							Element:br
								"type":42,
							Element:br
								"account_id":"cool_guy@example.com",
							Element:br
								"character_id":"Wizard",
							Element:br
								"character_lvl":52,
							Element:br
								"shard_id":1,
							Element:br
								"guild_id":42,
							Element:br
								"guild_exit_reason":"hacking"
							Element:br
								}
							Element:br
								}
							Element:br
							Element:br
								NOTE: All parameters are required in JSON, except “shard_id” which is optional.
							Element:br
							Element:br
								%right%[[#top|Back to Top]]
							Element:br
								----
							Element:br
							Element:br
								!!!!'''Guild Leader (Event ID#45)'''
							Element:br
							Element:br
							Element:br
								This event records information regarding a player's position within a guild (i.e. whether they are the leader of a guild, and if so, which guild). To log if a player is a guild leader, you need to pass the user's account ID, character ID, guild ID, along with the timestamp.
							Element:br
							Element:br
								'+'''Parameters'''+'
							Element:br
								|| border=1 rules=rows frame=hsides
							Element:br
								||! Type ||! Parameter ||! Default Value ||
							Element:br
								|| Date || EVENT TIMESTAMP || (Current Time) ||
							Element:br
								|| String || ACCOUNT ID || ''No Default Value'' ||
							Element:br
								|| String || CHARACTER ID || ACCOUNT ID ||
							Element:br
								|| Long || GUILD ID || ''No Default Value'' ||
							Element:br
							Element:br
							Element:br
								'+'''Sample Use'''+'
							Element:br
							Element:br
								*Java
							Element:br
								//Log if a player is a guild leader\\
							Element:br
								public void ''aKApi''.putGuildLeader(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, GUILD_ID);
							Element:br
							Element:br
								*JavaScript
							Element:br
								//Log if a player is a guild leader\\
							Element:br
								''aKApi''.putGuildLeader(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, GUILD_ID);
							Element:br
							Element:br
								*PHP
							Element:br
								//Log if a player is a guild leader\\
							Element:br
								''$aKApi''->putGuildLeader(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, GUILD_ID);
							Element:br
							Element:br
								*JSON
							Element:br
								//Log if a player is a guild leader\\
							Element:br
							Element:br
								{
							Element:br
								"timestamp":"2013-11-15T17:45:12.627Z",
							Element:br
								"data":{
							Element:br
								"type":45,
							Element:br
								"account_id":"cool_guy@example.com",
							Element:br
								"character_id":"Wizard",
							Element:br
								"guild_id":777
							Element:br
								}
							Element:br
								}
							Element:br
							Element:br
								NOTE: All parameters are required in JSON.
							Element:br
							Element:br
								%right%[[#top|Back to Top]]
							Element:br
								----
							Element:br
							Element:br
								!!'''Environment Events'''[[#EnvironmentEvents]]
							Element:br
							Element:br
								Environment events include those events that are related to in-game levels and areas that players may encounter. Details on how to execute calls to log environment events can be found below for each corresponding event.
							Element:br
							Element:br
							Element:br
								!!!!'''Level Begin (Event ID#27)'''[[#LevelBegin]]
							Element:br
							Element:br
								This event records information regarding the time at which a player begins a level. To log when a player begins a level, you need to pass the account and character ID, the character level, the area ID and name, the position, and the timestamp. Optionally, you may pass the shard ID.
							Element:br
							Element:br
								Note that if there is no concept of levels in your application this event need not be used.
							Element:br
							Element:br
								'+'''Impacted UI Features'''+'
							Element:br
								*KPI
							Element:br
								*System Metrics (Levels)
							Element:br
								*User Metrics (Churn)
							Element:br
							Element:br
								'+'''Parameters'''+'
							Element:br
								|| border=1 rules=rows frame=hsides
							Element:br
								||! Type ||! Parameter ||! Default Value ||
							Element:br
								||Date ||LEVEL BEGIN TIMESTAMP ||(Current Time)||
							Element:br
								||String ||ACCOUNT ID ||''No Default Value''||
							Element:br
								||String ||CHARACTER ID ||ACCOUNT_ID||
							Element:br
								||Long ||CHARACTER LEVEL ||If Generic Character then Account Level.||
							Element:br
								||Long ||SHARD ID ||0||
							Element:br
								||Long ||AREA ID ||0||
							Element:br
								||Float ||POSITION X ||0||
							Element:br
								||Float ||POSITION Y ||0||
							Element:br
								||Float ||POSITION Z ||0||
							Element:br
								||String ||AREA NAME ||NA||
							Element:br
							Element:br
								'+'''Sample Use'''+'
							Element:br
							Element:br
								*Java
							Element:br
								//Log when a player begins a level\\
							Element:br
								public void ''aKApi.''levelBegin(LEVEL_BEGIN_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, SHARD_ID, AREA_ID, POSITION_X, POSITION_Y, POSITION_Z, AREA_NAME);
							Element:br
							Element:br
								*JavaScript
							Element:br
								//Log when a player begins a level\\
							Element:br
								''aKApi.''levelBegin(LEVEL_BEGIN_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, SHARD_ID, AREA_ID, POSITION_X, POSITION_Y, POSITION_Z, AREA_NAME);
							Element:br
							Element:br
								*PHP
							Element:br
								//Log when a player begins a level\\
							Element:br
								''$aKApi->''levelBegin(LEVEL_BEGIN_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, SHARD_ID, AREA_ID, POSITION_X, POSITION_Y, POSITION_Z, AREA_NAME);
							Element:br
							Element:br
								*JSON
							Element:br
								//Log when a player begins a level\\
							Element:br
							Element:br
								{
							Element:br
								"timestamp":"2013-11-15T13:41:08.559Z",
							Element:br
								"data":{
							Element:br
								"type":27,
							Element:br
								"account_id":"cool_guy@example.com",
							Element:br
								"character_id":"Wizard",
							Element:br
								"character_lvl":52,
							Element:br
								"shard_id":42,
							Element:br
								"area_id":2,
							Element:br
								"position_x":678,
							Element:br
								"position_y":231,
							Element:br
								"position_z":517,
							Element:br
								"area_name”:”Area_Name”
							Element:br
								}
							Element:br
								}
							Element:br
							Element:br
								NOTE: All parameters are required in JSON, except “shard_id” which is optional.
							Element:br
							Element:br
								%right%[[#top|Back to Top]]
							Element:br
								----
							Element:br
							Element:br
								!!!!'''Level End (Event ID#28)'''[[#LevelEnd]]
							Element:br
							Element:br
								This event records information regarding the time at which a player ends or completes a level. To log when a player ends a level, you need to pass the account and character ID, the character level, the area ID and name, the position, and the timestamp. Optionally, you may pass the shard ID.
							Element:br
							Element:br
								Note that if there is no concept of levels in your application this event need not be used.
							Element:br
							Element:br
								'+'''Impacted UI Features'''+'
							Element:br
								*KPI
							Element:br
								*System Metrics (Levels)
							Element:br
								*User Metrics (Churn)
							Element:br
							Element:br
								'+'''Parameters'''+'
							Element:br
								|| border=1 rules=rows frame=hsides
							Element:br
								||! Type ||! Parameter ||! Default Value ||
							Element:br
								||Date ||LEVEL END TIMESTAMP ||(Current Time)||
							Element:br
								||String ||ACCOUNT ID ||''No Default Value''||
							Element:br
								||String ||CHARACTER ID ||ACCOUNT_ID||
							Element:br
								||Long ||CHARACTER LEVEL ||If Generic Character then Account Level.||
							Element:br
								||Long ||SHARD ID ||0||
							Element:br
								||Long ||AREA ID ||0||
							Element:br
								||Float ||POSITION X ||0||
							Element:br
								||Float ||POSITION Y ||0||
							Element:br
								||Float ||POSITION Z ||0||
							Element:br
								||String ||AREA NAME ||NA||
							Element:br
							Element:br
								'+'''Sample Use'''+'
							Element:br
							Element:br
								*Java
							Element:br
								//Log when a player ends a level\\
							Element:br
								public void ''aKApi.''levelEnd(LEVEL_END_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, SHARD_ID, AREA_ID, POSITION_X, POSITION_Y, POSITION_Z, AREA_NAME);
							Element:br
							Element:br
								*JavaScript
							Element:br
								//Log when a player ends a level\\
							Element:br
								''aKApi.''levelEnd(LEVEL_END_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, SHARD_ID, AREA_ID, POSITION_X, POSITION_Y, POSITION_Z, AREA_NAME);
							Element:br
							Element:br
								*PHP
							Element:br
								//Log when a player ends a level\\
							Element:br
								''$aKApi->''levelEnd(LEVEL_END_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, SHARD_ID, AREA_ID, POSITION_X, POSITION_Y, POSITION_Z, AREA_NAME);
							Element:br
							Element:br
								*JSON
							Element:br
								//Log when a player ends a level\\
							Element:br
							Element:br
								{
							Element:br
								"timestamp":"2013-11-15T13:50:42.553Z",
							Element:br
								"data":{
							Element:br
								"type":28,
							Element:br
								"account_id":"cool_guy@example.com",
							Element:br
								"character_id":"Wizard",
							Element:br
								"character_lvl":52,
							Element:br
								"shard_id":42,
							Element:br
								"area_id":2,
							Element:br
								"position_x":678,
							Element:br
								"position_y":231,
							Element:br
								"position_z":517,
							Element:br
								"area_name":"Area_Name"
							Element:br
								}
							Element:br
								}
							Element:br
							Element:br
								NOTE: All parameters are required in JSON, except “shard_id” which is optional.
							Element:br
							Element:br
								%right%[[#top|Back to Top]]
							Element:br
								----
							Element:br
							Element:br
								!!!!'''Enter Area (Event ID#29)'''[[#EnterArea]]
							Element:br
							Element:br
								An Area refers to a geographical area or region that makes up a larger virtual world. This event records information regarding the time at which a player enters an area. To log when a player enters an area, you need to pass the account and character IDs; area ID, level, and position; and the timestamp. Optionally, you may pass the shard ID.
							Element:br
							Element:br
								'+'''Impacted UI Features'''+'
							Element:br
								*KPI - Optional
							Element:br
								*System Metrics (Location/Maps)
							Element:br
								*User Metrics (Farming)
							Element:br
							Element:br
								'+'''Parameters'''+'
							Element:br
								|| border=1 rules=rows frame=hsides
							Element:br
								||! Type ||! Parameter ||! Default Value ||
							Element:br
								||Date|| ENTER AREA TIMESTAMP ||(Current Time)||
							Element:br
								||String ||ACCOUNT ID ||''No Default Value''||
							Element:br
								||String ||CHARACTER ID ||ACCOUNT_ID||
							Element:br
								||Long ||ENTER AREA CHARACTER LEVEL ||0||
							Element:br
								||Long ||SHARD ID ||0||
							Element:br
								||Long ||AREA ID ||If AREA_ID is not empty, and AREA_NAME is empty, set AREA_NAME=NA.||
							Element:br
								||Float ||ENTER POSITION X ||0||
							Element:br
								||Float ||ENTER POSITION Y ||0||
							Element:br
								||Float ||ENTER POSITION Z ||0||
							Element:br
								||String|| AREA NAME ||If AREA_ID is not empty, and AREA_NAME is empty, set AREA_NAME=NA.||
							Element:br
							Element:br
							Element:br
								'+'''Sample Use'''+'
							Element:br
							Element:br
								*Java
							Element:br
								//Log when a player enters an area\\
							Element:br
								public void ''aKApi.log''AreaEnter(ENTER_AREA_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, ENTER_AREA_CHARACTER_LEVEL, SHARD_ID, AREA_ID, ENTER_POSITION_X, ENTER_POSITION_Y, ENTER_POSITION_Z, AREA_NAME);
							Element:br
							Element:br
								*JavaScript
							Element:br
								//Log when a player enters an area\\
							Element:br
								''aKApi.log''AreaEnter(ENTER_AREA_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, ENTER_AREA_CHARACTER_LEVEL, SHARD_ID, AREA_ID, ENTER_POSITION_X, ENTER_POSITION_Y, ENTER_POSITION_Z, AREA_NAME)
							Element:br
							Element:br
								*PHP
							Element:br
								//Log when a player enters an area\\
							Element:br
								''$aKApi->log''AreaEnter(ENTER_AREA_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, ENTER_AREA_CHARACTER_LEVEL, SHARD_ID, AREA_ID, ENTER_POSITION_X, ENTER_POSITION_Y, ENTER_POSITION_Z, AREA_NAME)
							Element:br
							Element:br
								*JSON
							Element:br
								//Log when a player enters an area\\
							Element:br
							Element:br
								{
							Element:br
								"timestamp":"2013-11-15T14:04:32.369Z",
							Element:br
								"data":{
							Element:br
								"type":29,
							Element:br
								"account_id":"cool_guy@example.com",
							Element:br
								"character_id":"wizard",
							Element:br
								"character_lvl":52,
							Element:br
								"shard_id":42,
							Element:br
								"area_id":200,
							Element:br
								"position_x":678,
							Element:br
								"position_y":231,
							Element:br
								"position_z":517,
							Element:br
								"area_name":"Area_Name"
							Element:br
								}
							Element:br
								}
							Element:br
							Element:br
								NOTE: All parameters are required in JSON, except “shard_id” which is optional.
							Element:br
							Element:br
								%right%[[#top|Back to Top]]
							Element:br
								----
							Element:br
							Element:br
								!!!!'''Exit Area (Event ID#30)'''[[#ExitArea]]
							Element:br
							Element:br
								This event records information regarding the time at which a player exits an area. To log when a player exits an area, you need to pass the account and character IDs; the area level, position, and ID; and the timestamp. Optionally, you may pass the shard ID.
							Element:br
							Element:br
								For related information, see ''Enter Area''.
							Element:br
							Element:br
								'+'''Impacted UI Features'''+'
							Element:br
								*KPI - Optional
							Element:br
								*System Metrics (Levels, Location/Maps)
							Element:br
								*User Metrics (Farming)
							Element:br
							Element:br
								'+'''Parameters'''+'
							Element:br
								|| border=1 rules=rows frame=hsides
							Element:br
								||! Type ||! Parameter ||! Default Value ||
							Element:br
								||Date ||EXIT AREA TIMESTAMP ||(Current Time)||
							Element:br
								||String ||ACCOUNT ID ||''No Default Value''||
							Element:br
								||String ||CHARACTER ID ||ACCOUNT_ID||
							Element:br
								||Long ||ENTER AREA CHARACTER LEVEL ||0||
							Element:br
								||Long ||SHARD ID ||0||
							Element:br
								||Long ||AREA ID ||If AREA_ID is not empty, and AREA_NAME is empty, set AREA_NAME=NA.||
							Element:br
								||Float ||EXIT POSITION X ||0||
							Element:br
								||Float ||EXIT POSITION Y ||0||
							Element:br
								||Float ||EXIT POSITION Z ||0||
							Element:br
								||String|| AREA NAME ||If AREA_ID is not empty, and AREA_NAME is empty, set AREA_NAME=NA.||
							Element:br
							Element:br
								'+'''Sample Use'''+'
							Element:br
							Element:br
								*Java
							Element:br
								//Log when a player exits an area\\
							Element:br
								public void ''aKApi.log''AreaExit(EXIT_AREA_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, EXIT_AREA_CHARACTER_LEVEL, SHARD_ID, AREA_ID, EXIT_POSITION_X, EXIT_POSITION_Y, EXIT_POSITION_Z, AREA_NAME)
							Element:br
							Element:br
								*JavaScript
							Element:br
								//Log when a player exits an area\\
							Element:br
								''aKApi.log''AreaExit(ACCOUNT_ID, CHARACTER_ID, SHARD_ID, AREA_ID, CHARACTER_LEVEL, EXIT_POSITION_X, EXIT_POSITION_Y, EXIT_POSITION_Z, AREA_NAME, EXIT_AREA_TIMESTAMP);
							Element:br
							Element:br
								*PHP
							Element:br
								//Log when a player exits an area\\
							Element:br
								''$aKApi->log''AreaExit(ACCOUNT_ID, CHARACTER_ID, SHARD_ID, AREA_ID, CHARACTER_LEVEL, EXIT_POSITION_X, EXIT_POSITION_Y, EXIT_POSITION_Z, AREA_NAME, EXIT_AREA_TIMESTAMP);
							Element:br
							Element:br
								*JSON
							Element:br
								//Log when a player exits an area\\
							Element:br
							Element:br
								{
							Element:br
								"timestamp":"2013-11-15T14:11:05.873Z",
							Element:br
								"data":{
							Element:br
								"type":30,
							Element:br
								"account_id":"cool_guy@example.com",
							Element:br
								"character_id":"wizard",
							Element:br
								"character_lvl":52,
							Element:br
								"shard_id":42,
							Element:br
								"area_id":200,
							Element:br
								"position_x":678,
							Element:br
								"position_y":231,
							Element:br
								"position_z":517,
							Element:br
								"area_name":"Area_Name"
							Element:br
								}
							Element:br
								}
							Element:br
							Element:br
								NOTE: All parameters are required in JSON, except “shard_id” which is optional.
							Element:br
							Element:br
								%right%[[#top|Back to Top]]
							Element:br
							Element:br
								----
							Element:br
							Element:br
								!!!!'''Area Dim (Event ID#50)'''
							Element:br
							Element:br
							Element:br
								For games with geographical areas and maps that make up a larger virtual world, this event records the dimension information about these maps. To log area dimensions, you need to pass the area name and ID, the map label and ID, the min and max positions, as well as the timestamp.
							Element:br
							Element:br
								'+'''Parameters'''+'
							Element:br
								|| border=1 rules=rows frame=hsides
							Element:br
								||! Type ||! Parameter ||! Default Value ||
							Element:br
								|| Date || TIMESTAMP || (Current Time) ||
							Element:br
								|| String|| AREA NAME || If AREA ID is not empty and AREA NAME is empty, use NA. ||
							Element:br
								|| Long ||AREA ID || If AREA ID is empty, and AREA NAME is not empty, use 0. ||
							Element:br
								|| Long || MAP ID || 0 ||
							Element:br
								|| String || MAP LABEL || NA ||
							Element:br
								|| Float || MIN X || 0 ||
							Element:br
								|| Float || MIN Y || 0 ||
							Element:br
								|| Float || MIN Z || 0 ||
							Element:br
								|| Float || MAX X || 0 ||
							Element:br
								|| Float || MAX Y || 0 ||
							Element:br
								|| Float || MAX Z || 0 ||
							Element:br
							Element:br
							Element:br
							Element:br
								'+'''Sample Use'''+'
							Element:br
							Element:br
								*Java
							Element:br
								//Log area dimensions\\
							Element:br
								public void ''aKApi''.logAreaDim(TIMESTAMP, AREA_NAME, AREA_ID, MAP_ID, MAP_LABEL, MIN_X, MIN_Y, MIN_Z, MAX_X, MAX_Y, MAX_Z);
							Element:br
							Element:br
								*JavaScript
							Element:br
								//Log area dimensions\\
							Element:br
								''aKApi''.logAreaDim(TIMESTAMP, AREA_NAME, AREA_ID, MAP_ID, MAP_LABEL, MIN_X, MIN_Y, MIN_Z, MAX_X, MAX_Y, MAX_Z);
							Element:br
							Element:br
								*PHP
							Element:br
								//Log area dimensions\\
							Element:br
								''$aKApi''->logAreaDim(TIMESTAMP, AREA_NAME, AREA_ID, MAP_ID, MAP_LABEL, MIN_X, MIN_Y, MIN_Z, MAX_X, MAX_Y, MAX_Z);
							Element:br
							Element:br
								*JSON
							Element:br
								//Log area dimensions\\
							Element:br
							Element:br
								{
							Element:br
								"timestamp":"2013-11-15T18:13:04.432Z",
							Element:br
								"data":{
							Element:br
								"type":50,
							Element:br
								"area_name":"NA",
							Element:br
								"area_id":2.2,
							Element:br
								"map_id":-1,
							Element:br
								"map_label":"map label",
							Element:br
								"min_x":0,
							Element:br
								"min_y":0,
							Element:br
								"min_z":0,
							Element:br
								"max_x":4,
							Element:br
								"max_y":5,
							Element:br
								"max_z":6
							Element:br
								}
							Element:br
								}
							Element:br
							Element:br
								NOTE: All parameters are required in JSON, except “min_z” and “max_z” which are optional.
							Element:br
							Element:br
								%right%[[#top|Back to Top]]
							Element:br
								----
							Element:br
							Element:br
							Element:br
								!!'''Economic Events'''[[#EconomicEvents]]
							Element:br
							Element:br
								Economic events include those events that are related to in-game stores and purchases, such as a player's interaction with a store and items within it. Details on how to execute calls to log economic events can be found below for each corresponding event.
							Element:br
							Element:br
								'+'''Note:'''+' Virtual Currency will be automatically initialized upon virtual currency transactions.
							Element:br
							Element:br
								%comment%!!!!'''Initialize Virtual Currency (Event ID#14)'''[[#InitializeVirtualCurrency]] - Automatically Created - No Need To Implement.
							Element:br
								%comment%
							Element:br
								%comment%This event records information regarding which currencies players can use in exchange for in-game virtual items or resources. Typically, virtual currencies have an exchange rate that captures their corresponding value in real world currency, such as US Dollars, Yen, Euros, etc. To log virtual currencies, you need to pass the virtual currency label and timestamp.
							Element:br
								%comment%
							Element:br
								%comment%'+'''Impacted UI Features'''+'
							Element:br
								%comment%*KPI
							Element:br
								%comment%*User Metrics (Churn)
							Element:br
								%comment%*Basic Package (Summary)
							Element:br
								%comment%
							Element:br
								%comment%'+'''Parameters'''+'
							Element:br
								%comment%|| border=1 rules=rows frame=hsides
							Element:br
								%comment%||! Type ||! Parameter ||! Default Value ||
							Element:br
								%comment%||Date ||TIMESTAMP ||(Current Time)||
							Element:br
								%comment%||String ||VIRTUAL CURRENCY LABEL || ''No Default Value''||
							Element:br
								%comment%
							Element:br
								%comment%'+'''Sample Use'''+'
							Element:br
								%comment%
							Element:br
								%comment%*Java
							Element:br
								%comment%//Log virtual currency\\
							Element:br
								%comment%public void ''aKApi.''loadVirtualCurrency(TIMESTAMP, VIRTUAL_CURRENCY_LABEL);
							Element:br
								%comment%
							Element:br
								%comment%*JavaScript
							Element:br
								%comment%//Log virtual currency\\
							Element:br
								%comment%''aKApi.''loadVirtualCurrency(TIMESTAMP, VIRTUAL_CURRENCY_LABEL);
							Element:br
								%comment%
							Element:br
								%comment%*PHP
							Element:br
								%comment%//Log virtual currency\\
							Element:br
								%comment%''$aKApi->''loadVirtualCurrency(TIMESTAMP, VIRTUAL_CURRENCY_LABEL);
							Element:br
								%comment%
							Element:br
								%comment%*JSON
							Element:br
								%comment%//Log virtual currency\\
							Element:br
								%comment%
							Element:br
								%comment% {
							Element:br
								%comment% "timestamp":"2013-11-14T16:57:39.193Z",
							Element:br
								%comment% "data":{
							Element:br
								%comment% "type":14,
							Element:br
								%comment% "virtual_currency_label":"MUCHA"
							Element:br
								%comment% }
							Element:br
								%comment% }
							Element:br
								%comment%
							Element:br
								%comment%NOTE: All parameters are required in JSON.
							Element:br
								%comment%
							Element:br
								%comment%%right%[[#top|Back to Top]]
							Element:br
								%comment%----
							Element:br
								[[#store-create]]
							Element:br
								!!!!'''Store Create (Event ID#35)'''
							Element:br
							Element:br
							Element:br
								For games that allow players to setup an in-game store where they can sell items, this event records information regarding the creation of an in-game store. To log when a store is created, you need to pass the store ID and description, as well as the address, city, state, country, zip code, and timestamp.
							Element:br
							Element:br
								'''Note''': You must log the store creation information before any log or load command references the store ID.
							Element:br
							Element:br
								'+'''Parameters'''+'
							Element:br
								|| border=1 rules=rows frame=hsides
							Element:br
								||! Type ||! Parameter ||! Default Value ||
							Element:br
								|| Date || UPDATED TIMESTAMP || (Current Time) ||
							Element:br
								|| Long || STORE ID || ''No Default Value'' ||
							Element:br
								|| String || STORE DESCRIPTION || NA ||
							Element:br
								|| String || MAP REAL ADDRESS || NA ||
							Element:br
								|| String || MAP REAL CITY || NA ||
							Element:br
								|| String || MAP REAL STATE || NA ||
							Element:br
								|| String || MAP REAL COUNTRY || NA ||
							Element:br
								|| String || MAP REAL POSTAL CODE || 0 ||
							Element:br
							Element:br
								'+'''Sample Use'''+'
							Element:br
							Element:br
								*Java
							Element:br
								//Log when a store is created\\
							Element:br
								public void ''aKApi''.storeCreate(UPDATED_TIMESTAMP, STORE_ID, STORE_DESCRIPTION, MAP_REAL_ADDRESS, MAP_REAL_CITY, MAP_REAL_STATE, MAP_REAL_COUNTRY, MAP_REAL_POSTAL_CODE);
							Element:br
							Element:br
								*JavaScript
							Element:br
								//Log when a store is created\\
							Element:br
								aKApi.''storeCreate(UPDATED_TIMESTAMP, STORE_ID, STORE_DESCRIPTION, MAP_REAL_ADDRESS, MAP_REAL_CITY, MAP_REAL_STATE, MAP_REAL_COUNTRY, MAP_REAL_POSTAL_CODE);
							Element:br
							Element:br
								*PHP
							Element:br
								//Log when a store is created\\
							Element:br
								''$aKApi''->storeCreate(UPDATED_TIMESTAMP, STORE_ID, STORE_DESCRIPTION, MAP_REAL_ADDRESS, MAP_REAL_CITY, MAP_REAL_STATE, MAP_REAL_COUNTRY, MAP_REAL_POSTAL_CODE);
							Element:br
							Element:br
								*JSON
							Element:br
								//Log when a store is created\\
							Element:br
							Element:br
								{
							Element:br
								"timestamp":"2013-11-15T15:03:32.064Z",
							Element:br
								"data":{
							Element:br
								"type":35,
							Element:br
								"store_id":8729,
							Element:br
								"store_desc":"the cool store",
							Element:br
								"map_real_address":"123 Fake St",
							Element:br
								"map_real_city":"Walla Walla",
							Element:br
								"map_real_state":"Tuvalu",
							Element:br
								"map_real_country":"United States",
							Element:br
								"map_real_postal_code":"55667"
							Element:br
								}
							Element:br
								}
							Element:br
							Element:br
								NOTE: All parameters are required in JSON.
							Element:br
							Element:br
								%right%[[#top|Back to Top]]
							Element:br
								----
							Element:br
							Element:br
								!!!!'''Store Delete (Event ID#36)'''
							Element:br
							Element:br
							Element:br
								This event records information regarding the deletion of an in-game store. To log when a store is deleted, you need to pass the store ID and timestamp.
							Element:br
							Element:br
								For related information, see [[ #store-create |Store Create]].
							Element:br
							Element:br
								'+'''Parameters'''+'
							Element:br
								|| border=1 rules=rows frame=hsides
							Element:br
								||! Type ||! Parameter ||! Default Value ||
							Element:br
								|| Date || UPDATED TIMESTAMP || (Current Time) ||
							Element:br
								|| String || STORE ID || ''No Default Value'' ||
							Element:br
							Element:br
								'+'''Sample Use'''+'
							Element:br
							Element:br
								*Java
							Element:br
								//Log when a store is deleted\\
							Element:br
								public void ''aKApi''.StoreDelete(UPDATED_TIMESTAMP, STORE_ID);
							Element:br
							Element:br
								*JavaScript
							Element:br
								//Log when a store is deleted\\
							Element:br
								''aKApi''.StoreDelete(UPDATED_TIMESTAMP, STORE_ID);
							Element:br
							Element:br
								*PHP
							Element:br
								//Log when a store is deleted\\
							Element:br
								''$aKApi''->StoreDelete(UPDATED_TIMESTAMP, STORE_ID);
							Element:br
							Element:br
								*JSON
							Element:br
								//Log when a store is deleted\\
							Element:br
							Element:br
								{
							Element:br
								"timestamp":"2013-11-15T15:11:15.847Z",
							Element:br
								"data":{
							Element:br
								"type":36,
							Element:br
								"store_id":8729
							Element:br
								}
							Element:br
								}
							Element:br
							Element:br
								NOTE: All parameters are required in JSON.
							Element:br
							Element:br
								%right%[[#top|Back to Top]]
							Element:br
								----
							Element:br
							Element:br
								!!!!'''Buy Store Item (Event ID#37)'''[[#BuyStoreItem]]
							Element:br
							Element:br
								This event records information regarding item purchases from an in-game store and includes details on the type of currency used. To log when a player buys a store item, you need to pass the account, character, and store IDs; the shard ID; the recipient account and character IDs; the item ID, name, and price; the currency type and value; and the timestamp. Optionally, you may pass the name of the virtual currency and the virtual currency count.
							Element:br
							Element:br
								'+'''Impacted UI Features'''+'
							Element:br
								*KPI
							Element:br
								*User Metrics (Churn)
							Element:br
								*Basic Package (Summary)
							Element:br
							Element:br
								'+'''Parameters'''+'
							Element:br
								|| border=1 rules=rows frame=hsides
							Element:br
								||! Type ||! Parameter ||! Default Value ||
							Element:br
								||Date ||EVENT TIMESTAMP ||(Current Time)||
							Element:br
								||String ||SENDER ACCOUNT ID ||''No Default Value''||
							Element:br
								||String ||SENDER CHARACTER ID ||ACCOUNT_ID||
							Element:br
								||String ||RECEIVER ACCOUNT ID ||''No Default Value''||
							Element:br
								||String ||RECEIVER CHARACTER ID ||RECIPIENT_ACCOUNT_ID||
							Element:br
								||Long ||SHARD ID ||0||
							Element:br
								||Long ||STORE ID ||''No Default Value''||
							Element:br
								||Long ||ITEM ID ||If Item ID is empty and Item Name is not empty, use 0.||
							Element:br
								||String ||ITEM NAME ||If Item ID is not empty and Item Name is empty, use NA.||
							Element:br
								||Float ||ITEM PRICE ||''No Default Value''||
							Element:br
								||Integer ||CURRENCY TYPE ||''No Default Value''*||
							Element:br
								||String ||VIRTUAL CURRENCY NAME || If Currency Type is 1 then mandatory, else NULL.||
							Element:br
								||Float ||CURRENCY VALUE ||''No Default Value''||
							Element:br
								||Integer ||VIRTUAL CURRENCY COUNT ||Null||
							Element:br
							Element:br
								[- *Currency Type must be 0 or 1, where 0 equals 'Real' and 1 equals 'Virtual Currency'.-]
							Element:br
							Element:br
								'+'''Sample Use'''+'
							Element:br
							Element:br
								*Java
							Element:br
								//Log when a player buys a store item\\
							Element:br
								public void ''aKApi.''storeBuyItem(EVENT_TIMESTAMP, SENDER_ACCOUNT_ID, SENDER_CHARACTER_ID, RECEIVER_ACCOUNT_ID, RECEIVER_CHARACTER_ID, SHARD_ID, STORE_ID, ITEM_ID, ITEM_NAME, ITEM_PRICE, CURRENCY_TYPE, VIRTUAL_CURRENCY_NAME, CURRENCY_VALUE, VIRTUAL_CURRENCY_COUNT);
							Element:br
							Element:br
								*JavaScript
							Element:br
								//Log when a player buys a store item\\
							Element:br
								''aKApi.''storeBuyItem(EVENT_TIMESTAMP, SENDER_ACCOUNT_ID, SENDER_CHARACTER_ID, RECEIVER_ACCOUNT_ID, RECEIVER_CHARACTER_ID, SHARD_ID, STORE_ID, ITEM_ID, ITEM_NAME, ITEM_PRICE, CURRENCY_TYPE, VIRTUAL_CURRENCY_NAME, CURRENCY_VALUE, VIRTUAL_CURRENCY_COUNT);
							Element:br
							Element:br
								*PHP
							Element:br
								//Log when a player buys a store item\\
							Element:br
								$aKApi->storeBuyItem(EVENT_TIMESTAMP, SENDER_ACCOUNT_ID, SENDER_CHARACTER_ID, RECEIVER_ACCOUNT_ID, RECEIVER_CHARACTER_ID, SHARD_ID, STORE_ID, ITEM_ID, ITEM_NAME, ITEM_PRICE, CURRENCY_TYPE, VIRTUAL_CURRENCY_NAME, CURRENCY_VALUE, VIRTUAL_CURRENCY_COUNT);
							Element:br
							Element:br
								*JSON
							Element:br
								//Log when a player buys a store item\\
							Element:br
							Element:br
								{
							Element:br
								"timestamp":"2013-11-15T15:18:44.377Z",
							Element:br
								"data":{
							Element:br
								"type":37,
							Element:br
								"sender_account_id":"cool_guy@example.com",
							Element:br
								"sender_character_id":"Wizard",
							Element:br
								"receiver_account_id":"small_cat@example.com",
							Element:br
								"receiver_character_id":"Wizard",
							Element:br
								"shard_id":42,
							Element:br
								"store_id":1,
							Element:br
								"item_id":66,
							Element:br
								"item_name":"The Blaster Gun",
							Element:br
								"item_price":3,
							Element:br
								"currency_type":1,
							Element:br
								"virtual_currency_label":"MCH",
							Element:br
								"currency_value”:”4”,
							Element:br
								"virtual_currency_count”:1
							Element:br
								}
							Element:br
								}
							Element:br
							Element:br
								NOTE: All parameters are required in JSON, except “shard_id”, “virtual_currency_label”, and “virtual_currency_count” which are optional.
							Element:br
							Element:br
								'+'''Sample Use'''+'
							Element:br
							Element:br
								Example: If you had $1 per 100 tokens, and you bought an item for 200 tokens, you will send: \\
							Element:br
								\\
							Element:br
								Item Price: 200\\
							Element:br
								Currency Type: 1\\
							Element:br
								Virtual Currency Name: Tokens\\
							Element:br
								Currency Value: 2\\
							Element:br
								Virtual Currency Count: 200\\
							Element:br
								\\
							Element:br
								Example: If a user buys an item using $5 in real money then send:\\
							Element:br
								\\
							Element:br
								Item Price: 5\\
							Element:br
								Currency Type: 0\\
							Element:br
								Virtual Currency Name: (null)\\
							Element:br
								Currency Value: 5\\
							Element:br
								Virtual Currency Count: 0\\
							Element:br
								\\
							Element:br
								Example: If a user buys an item for 500 tokens send:\\
							Element:br
								\\
							Element:br
								Item Price: 500\\
							Element:br
								Currency Type: 1\\
							Element:br
								Virtual Currency Name: Tokens\\
							Element:br
								Currency Value: 0\\
							Element:br
								Virtual Currency Count: 500\\
							Element:br
							Element:br
							Element:br
								%right%[[#top|Back to Top]]
							Element:br
								----
							Element:br
							Element:br
								!!!!'''Store Login (Event ID#38)'''
							Element:br
							Element:br
							Element:br
								This event records information regarding the time at which a player logs in to an in-game virtual store. To log when a player logs into a store, you need to pass the account, character, and store IDs; and the timestamp. Optionally, you may pass the shard ID.
							Element:br
							Element:br
								'+'''Parameters'''+'
							Element:br
								|| border=1 rules=rows frame=hsides
							Element:br
								||! Type ||! Parameter ||! Default Value ||
							Element:br
								|| Date || EVENT TIMESTAMP || (Current Time) ||
							Element:br
								|| String || ACCOUNT ID || ''No Default Value'' ||
							Element:br
								|| String || CHARACTER ID || ACCOUNT ID ||
							Element:br
								|| Long || SHARD ID || 0 ||
							Element:br
								|| Long || STORE ID || ''No Default Value'' ||
							Element:br
							Element:br
								'+'''Sample Use'''+'
							Element:br
							Element:br
								*Java
							Element:br
								//Log when a player logs in to a store\\
							Element:br
								public void ''aKApi''.storeLogin(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, STORE_ID);
							Element:br
							Element:br
								*JavaScript
							Element:br
								//Log when a player logs in to a store\\
							Element:br
								''aKApi''.storeLogin(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, STORE_ID);
							Element:br
							Element:br
								*PHP
							Element:br
								//Log when a player logs in to a store\\
							Element:br
								''$aKApi''->storeLogin(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, STORE_ID);
							Element:br
							Element:br
								*JSON
							Element:br
								//Log when a player logs in to a store\\
							Element:br
							Element:br
								{
							Element:br
								"timestamp":"2013-11-15T15:31:43.299Z",
							Element:br
								"data":{
							Element:br
								"type":38,
							Element:br
								"account_id":"cool_guy@example.com",
							Element:br
								"character_id":"Wizard",
							Element:br
								"shard_id":42,
							Element:br
								"store_id":1
							Element:br
								}
							Element:br
								}
							Element:br
							Element:br
								NOTE: All parameters are required in JSON, except “shard_id” which is optional.
							Element:br
							Element:br
								%right%[[#top|Back to Top]]
							Element:br
								----
							Element:br
							Element:br
								!!!!'''Store Logout (Event ID#39)'''
							Element:br
							Element:br
							Element:br
								This event records information regarding the time at which a player logs out of an in- game virtual store. To log when a player logs out of a store, you need to pass the account, character, and store IDs; and the timestamp. Optionally you may pass the shard ID.
							Element:br
							Element:br
								'+'''Parameters'''+'
							Element:br
								|| border=1 rules=rows frame=hsides
							Element:br
								||! Type ||! Parameter ||! Default Value ||
							Element:br
								|| Date || EVENT TIMESTAMP || (Current Time) ||
							Element:br
								|| String || ACCOUNT ID || ''No Default Value'' ||
							Element:br
								|| String || CHARACTER ID || ACCOUNT ID ||
							Element:br
								|| Long || SHARD ID || 0 ||
							Element:br
								|| Long || STORE ID || ''No Default Value'' ||
							Element:br
							Element:br
							Element:br
								'+'''Sample Use'''+'
							Element:br
							Element:br
								*Java
							Element:br
								//Log when a player logs out of a store\\
							Element:br
								public void ''aKApi''.storeLogout(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, STORE_ID);
							Element:br
							Element:br
								*JavaScript
							Element:br
								//Log when a player logs out of a store\\
							Element:br
								''aKApi''.storeLogout(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, STORE_ID);
							Element:br
							Element:br
								*PHP
							Element:br
								//Log when a player logs out of a store\\
							Element:br
								''$aKApi''->storeLogout(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, STORE_ID);
							Element:br
							Element:br
								*JSON
							Element:br
								//Log when a player logs out of a store\\
							Element:br
							Element:br
								{
							Element:br
								"timestamp":"2013-11-15T15:39:58.675Z",
							Element:br
								"data":{
							Element:br
								"type":39,
							Element:br
								"account_id":"cool_guy@example.com",
							Element:br
								"character_id":"Wizard",
							Element:br
								"shard_id":42,
							Element:br
								"store_id":1
							Element:br
								}
							Element:br
								}
							Element:br
							Element:br
								NOTE: All parameters are required in JSON, except “shard_id” which is optional.
							Element:br
							Element:br
								%right%[[#top|Back to Top]]
							Element:br
								----
							Element:br
							Element:br
								!!!!'''Store Selection / Add to Cart (Event ID#40)'''
							Element:br
							Element:br
							Element:br
								This event records information regarding when an item is selected or added to a player's cart. Note that this event may be a pre-requisite for buying an item; however it is not the same as buying an item. To log when a player selects a store item, you need to pass the account, character, and store IDs; the item name, type, and ID; and the timestamp.
							Element:br
							Element:br
								'+'''Parameters'''+'
							Element:br
								|| border=1 rules=rows frame=hsides
							Element:br
								||! Type ||! Parameter ||! Default Value ||
							Element:br
								|| Date || SELECTION TIMESTAMP || (Current Time) ||
							Element:br
								|| String || ACCOUNT ID || ''No Default Value'' ||
							Element:br
								|| String || CHARACTER ID || ACCOUNT ID ||
							Element:br
								|| Long || STORE ID || ''No Default Value'' ||
							Element:br
								|| Long || ITEM ID || If ITEM NAME is not empty, defaults to 0. Otherwise mandatory. ||
							Element:br
								|| String ||ITEM NAME || If ITEM ID is not empty, defaults to NA. Otherwise mandatory. ||
							Element:br
								|| String || ITEM TYPE || Other [[Appendix#item-type |(See Appendix A for more types)]]||
							Element:br
							Element:br
							Element:br
								'+'''Sample Use'''+'
							Element:br
							Element:br
								*Java
							Element:br
								//Log when a player selects a store item\\
							Element:br
								public void ''aKApi''.storeAddToCart(SELECTION_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, STORE_ID, ITEM_ID, ITEM_NAME, ITEM_TYPE);
							Element:br
							Element:br
								*JavaScript
							Element:br
								//Log when a player selects a store item\\
							Element:br
								''aKApi''.storeAddToCart(SELECTION_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, STORE_ID, ITEM_ID, ITEM_NAME, ITEM_TYPE);
							Element:br
							Element:br
								*PHP
							Element:br
								//Log when a player selects a store item\\
							Element:br
								''$aKApi''->storeAddToCart(SELECTION_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, STORE_ID, ITEM_ID, ITEM_NAME, ITEM_TYPE);
							Element:br
							Element:br
								*JSON
							Element:br
								//Log when a player selects a store item\\
							Element:br
							Element:br
								{
							Element:br
								"timestamp":"2013-11-15T16:01:45.370Z",
							Element:br
								"data":{
							Element:br
								"type":40,
							Element:br
								"account_id":"cool_guy@example.com",
							Element:br
								"character_id":"Wizard",
							Element:br
								"store_id":1,
							Element:br
								"item_id":66,
							Element:br
								"item_name":"Sword",
							Element:br
								"item_type":"Weapon"
							Element:br
								}
							Element:br
								}
							Element:br
							Element:br
								NOTE: All parameters are required in JSON.
							Element:br
							Element:br
								%right%[[#top|Back to Top]]
							Element:br
								----
							Element:br
							Element:br
								!!'''Transaction Events'''[[#TransactionEvents]]
							Element:br
							Element:br
								Transaction events include those events that are related to economic events outside of the game, such as when an item is purchased outside of the developer game store, or when a subscription changes.
							Element:br
								Details on how to execute calls to log transaction events can be found below for each corresponding event.
							Element:br
							Element:br
							Element:br
								!!!!'''Subscription Change (Event ID#3)'''[[#SubscriptionChange]]
							Element:br
							Element:br
								This event records a change in subscription type (e.g. from free play to a paid subscriber or premium player). Subscription changes are only applicable to games with subscriptions, not free-to-play (F2P) games. To log a change of subscription, you need to pass the user's account ID, subscription status and type, and a timestamp for both subscription and expiry. Optionally, you can also pass the subscription value.
							Element:br
							Element:br
								'+'''Impacted UI Features'''+'
							Element:br
								*KPI
							Element:br
								*System Metrics (Items, Levels, Social, NPC, Location/Maps)
							Element:br
								*User Metrics (Churn, Farming, Integrity)
							Element:br
							Element:br
								'+'''Parameters'''+'
							Element:br
								|| border=1 rules=rows frame=hsides
							Element:br
								||! Type ||! Parameter ||! Default Value ||
							Element:br
								||Date ||SUBSCRIPTION TIMESTAMP||(Current Time)||
							Element:br
								||String ||ACCOUNT ID|| "No Default Value''||
							Element:br
								||String ||SUBSCRIPTION STATUS|| Active||
							Element:br
								||String ||SUBSCRIPTION TYPE||Paid||
							Element:br
								||Float ||SUBSCRIPTION VALUE|| ''No Default Value''||
							Element:br
								||Date ||SUBSCRIPTION EXPIRED TIMESTAMP||(Month From Subscription Date)||
							Element:br
							Element:br
								'+'''Sample Use'''+'
							Element:br
							Element:br
								*Java
							Element:br
							Element:br
								//Log a change of subscription\\
							Element:br
								public void ''aKApi.''putSubChange(SUBSCRIPTION_TIMESTAMP, ACCOUNT_ID, SUBSCRIPTION_STATUS, SUBSCRIPTION_TYPE, SUBSCRIPTION_VALUE, SUBSCRIPTION_EXPIRED_TIMESTAMP);
							Element:br
							Element:br
								*JavaScript
							Element:br
							Element:br
								//Log a change of subscription[[<<]]
							Element:br
								''aKApi.''putSubChange(SUBSCRIPTION_TIMESTAMP, ACCOUNT_ID, SUBSCRIPTION_STATUS, SUBSCRIPTION_TYPE, SUBSCRIPTION_VALUE, SUBSCRIPTION_EXPIRED_TIMESTAMP);
							Element:br
							Element:br
								*PHP
							Element:br
							Element:br
								//Log a change of subscription\\
							Element:br
								''$aKApi->''putSubChange(SUBSCRIPTION_TIMESTAMP, ACCOUNT_ID, SUBSCRIPTION_STATUS, SUBSCRIPTION_TYPE, SUBSCRIPTION_VALUE, SUBSCRIPTION_EXPIRED_TIMESTAMP);
							Element:br
							Element:br
								*JSON
							Element:br
							Element:br
								//Log a change of subscription\\
							Element:br
							Element:br
								{
							Element:br
								"timestamp":"2013-11-10T06:00:00.000Z",
							Element:br
								"data":{
							Element:br
								"type":3,
							Element:br
								"account_id":"cool_guy@example.com",
							Element:br
								"account_status":"Active",
							Element:br
								"account_sub_type":"Paid",
							Element:br
								"account_sub_value":10,
							Element:br
								"account_sub_expires_timestamp":"2016-02-01T06:00:00.000Z"
							Element:br
								}
							Element:br
								}
							Element:br
							Element:br
								NOTE: All parameters are required in JSON, except “account_sub_value” which is optional.
							Element:br
							Element:br
								%right%[[#top|Back to Top]]
							Element:br
								----
							Element:br
							Element:br
								!!!!'''Currency Transaction (Event ID#18)'''[[#CurrencyTransaction]]
							Element:br
							Element:br
								Logs a Currency Transaction event. Covers all types of transaction in the game or any other environment where real world money was used. Designed To Handle Most Currency Transactions. More Complicated Transactions Can Be Done Within Event #37.
							Element:br
							Element:br
								This event records information regarding transactions in the game or other environments where real world money is used. To log currency transactions, you need to pass the account and character IDs, the transaction and currency types, as well as the timestamp. Optionally, you may pass the shard ID, the virtual currency label, the currency value, the virtual currency count, and the transaction description.
							Element:br
							Element:br
								One common scenario is when a user purchases virtual currency by spending real currency. In this case, you should send this event twice. Once with a TRANSACTION TYPE of 0 and a CURRENCY TYPE of 0 (the user is spending real currency), and then again with a TRANSACTION TYPE of 1 and a CURRENCY TYPE of 1, along with the appropriate VIRTUAL CURRENCY COUNT and LABEL (the user is acquiring virtual currency).
							Element:br
							Element:br
								%comment%Please note that you should only use this event when the Item Transaction (#17) or Store Buy Item (#37) events aren't appropriate. Store Buy Item (#37) should be used in most cases of any type of currency or virtual currency transactions. If currency is being spent to acquire something, it is preferable to use those events so that the purchase can be associated with the item. Do not send the Currency Transaction event in tandem with those events, because the currency transfer will be double counted on your dashboard.
							Element:br
							Element:br
								'+'''Impacted UI Features'''+'
							Element:br
								*KPI
							Element:br
								*User Metrics (Churn)
							Element:br
								*Basic Package (Summary)
							Element:br
							Element:br
								'+'''Parameters'''+'
							Element:br
								|| border=1 rules=rows frame=hsides
							Element:br
								||! Type ||! Parameter ||! Default Value ||
							Element:br
								||Date ||EVENT TIMESTAMP ||(Current Time)||
							Element:br
								||String ||ACCOUNT ID ||''No Default Value''||
							Element:br
								||String ||CHARACTER ID ||ACCOUNT_ID||
							Element:br
								||Long ||SHARD ID ||0||
							Element:br
								||Integer ||TRANSACTION TYPE ||''No Default Value''*||
							Element:br
								||Integer ||CURRENCY TYPE ||''No Default Value''**||
							Element:br
								||String ||VIRTUAL CURRENCY LABEL ||If CURRENCY_TYPE=1 then required; else null.||
							Element:br
								||Float ||CURRENCY VALUE ||''No Default Value''||
							Element:br
								||String ||TRANSACTION DESCRIPTION ||Truncate if >200||
							Element:br
								||Integer ||VIRTUAL CURRENCY COUNT ||Null||
							Element:br
							Element:br
								[- *Transaction Type must be 0 or 1, where 0 equals 'Spent' and 1 equals 'Acquired'.-]\\
							Element:br
								[- **Currency Type must be 0 or 1, where 0 equals 'Real' and 1 equals 'Virtual Currency'.-]
							Element:br
							Element:br
								'+'''Sample Use'''+'
							Element:br
							Element:br
								*Java
							Element:br
								//Log a currency transaction\\
							Element:br
								public void ''aKApi.''logCurrencyTransaction(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, TRANSACTION_TYPE, CURRENCY_TYPE, VIRTUAL_CURRENCY_LABEL, CURRENCY_VALUE, TRANSACTION_DESCRIPTION, VIRTUAL_CURRENCY_COUNT);
							Element:br
							Element:br
								*JavaScript
							Element:br
								//Log a currency transaction\\
							Element:br
								''aKApi.''logCurrencyTransaction(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, TRANSACTION_TYPE, CURRENCY_TYPE, VIRTUAL_CURRENCY_LABEL, CURRENCY_VALUE, TRANSACTION_DESCRIPTION, VIRTUAL_CURRENCY_COUNT);
							Element:br
							Element:br
								*PHP
							Element:br
								//Log a currency transaction\\
							Element:br
								''$aKApi->''logCurrencyTransaction(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, TRANSACTION_TYPE, CURRENCY_TYPE, VIRTUAL_CURRENCY_LABEL, CURRENCY_VALUE, TRANSACTION_DESCRIPTION, VIRTUAL_CURRENCY_COUNT);
							Element:br
							Element:br
								*JSON
							Element:br
								//Log a currency transaction\\
							Element:br
							Element:br
								{
							Element:br
								"timestamp":"2013-11-14T18:10:14.808Z",
							Element:br
								"data":{
							Element:br
								"type":18,
							Element:br
								"account_id":"cool_guy@example.com",
							Element:br
								"character_id":"wizard",
							Element:br
								"shard_id":42,
							Element:br
								"transaction_type":0,
							Element:br
								"currency_type":0,
							Element:br
								"virtual_currency_label":"mucha",
							Element:br
								"currency_value":3.45,
							Element:br
								"transaction_desc":"spend 3.45USD”,
							Element:br
								"virtual_currency_count:1
							Element:br
								}
							Element:br
								}
							Element:br
							Element:br
								NOTE: All parameters are required in JSON, except “shard_id”, “virtual_currency_label”, “currency_value”, “transaction_desc”, and “virtual_currency_count” which are optional.
							Element:br
							Element:br
								%right%[[#top|Back to Top]]
							Element:br
								----
							Element:br
								%comment%!!!!'''Economic (Event ID#58)''' - To Be Completed.
							Element:br
							Element:br
							Element:br
								%comment%This event records information regarding item purchases, sales, or trades outside of the developer RMT game store. This event requires both an incoming and outgoing value, of which either can be 0. To log an economic event, you need to pass the sender and receiver account and character IDs; the item name and ID; the economic type and value; the currency type and value; along with the timestamp. Optionally, you may pass the shard ID, virtual currency type and count.
							Element:br
							Element:br
								%comment%'+'''Parameters'''+'
							Element:br
								%comment%|| border=1 rules=rows frame=hsides
							Element:br
								%comment%||! Type ||! Parameter ||! Default Value ||
							Element:br
								%comment%|| Date || TIMESTAMP || (Current Time) ||
							Element:br
								%comment%|| String || SENDER ACCOUNT ID || ''No Default Value'' ||
							Element:br
								%comment%|| String || SENDER CHARACTER ID || SENDER ACCOUNT ID ||
							Element:br
								%comment%|| String || RECEIVER ACCOUNT ID || ''No Default Value'' ||
							Element:br
								%comment%|| String || RECEIVER CHARACTER ID || RECEIVER ACCOUNT ID ||
							Element:br
								%comment%|| Long || SHARD ID || 0 ||
							Element:br
								%comment%|| Long || ITEM ID || If ITEM ID is empty, and ITEM NAME is not empty, use 0. ||
							Element:br
								%comment%|| String || ITEM NAME || If ITEM ID is not empty, and ITEM NAME is empty, use NA. ||
							Element:br
								%comment%|| String || ECONOMIC TYPE || Other [[Appendix#economic-type |(See Appendix A for more types)]]||
							Element:br
								%comment%|| Float || ECONOMIC VALUE || ''No Default Value'' ||
							Element:br
								%comment%|| Integer || CURRENCY TYPE || ''No Default Value'' * ||
							Element:br
								%comment%|| String || VIRTUAL CURRENCY TYPE || If CURRENCY TYPE is 1 then mandatory. Otherwise defaults to Null. ||
							Element:br
								%comment%|| Float || CURRENCY VALUE || ''No Default Value'' ||
							Element:br
								%comment%|| Integer || VIRTUAL CURRENCY COUNT || Null ||
							Element:br
							Element:br
								%comment%[- *Currency Type must be 0 or 1, where 0 equals 'Real' and 1 equals 'Virtual Currency'.-]
							Element:br
							Element:br
							Element:br
							Element:br
								%comment%'+'''Sample Use'''+'
							Element:br
							Element:br
								%comment%*Java
							Element:br
								%comment%//To log that an economic event occurred\\
							Element:br
							Element:br
								%comment%public void ''aKApi''.logEconomic(TIMESTAMP, SENDER_ACCOUNT_ID, SENDER_CHARACTER_ID, RECEIVER_ACCOUNT_ID, RECEIVER_CHARACTER_ID, SHARD_ID, ITEM_ID, ITEM_NAME, ECONOMIC_TYPE, ECONOMIC_VALUE, CURRENCY_TYPE, VIRTUAL_CURRENCY_TYPE, CURRENCY_VALUE, VIRTUAL_CURRENCY_COUNT) ;
							Element:br
							Element:br
								%comment%*JavaScript
							Element:br
								%comment%//To log that an economic event occurred\\
							Element:br
							Element:br
								%comment%''aKApi''.logEconomic(TIMESTAMP, SENDER_ACCOUNT_ID, SENDER_CHARACTER_ID, RECEIVER_ACCOUNT_ID, RECEIVER_CHARACTER_ID, SHARD_ID, ITEM_ID, ITEM_NAME, ECONOMIC_TYPE, ECONOMIC_VALUE, CURRENCY_TYPE, VIRTUAL_CURRENCY_TYPE, CURRENCY_VALUE, VIRTUAL_CURRENCY_COUNT);
							Element:br
							Element:br
								%comment%*PHP
							Element:br
								%comment%//To log that an economic event occurred\\
							Element:br
								%comment%''$aKApi''->logEconomic(TIMESTAMP, SENDER_ACCOUNT_ID, SENDER_CHARACTER_ID, RECEIVER_ACCOUNT_ID, RECEIVER_CHARACTER_ID, SHARD_ID, ITEM_ID, ITEM_NAME, ECONOMIC_TYPE, ECONOMIC_VALUE, CURRENCY_TYPE, VIRTUAL_CURRENCY_TYPE, CURRENCY_VALUE, VIRTUAL_CURRENCY_COUNT);
							Element:br
							Element:br
								%comment%*JSON
							Element:br
								%comment%//To log that an economic event occurred\\
							Element:br
							Element:br
								%comment% {
							Element:br
								%comment% "timestamp":"2013-11-15T18:58:59.893Z",
							Element:br
								%comment% "data":{
							Element:br
								%comment% "type":58,
							Element:br
								%comment% "sender_account_id":"cool_guy@example.com",
							Element:br
								%comment% "sender_character_id":"advertiser",
							Element:br
								%comment% "receiver_account_id":"cguy@aol.com",
							Element:br
								%comment% "receiver_character_id":"customer",
							Element:br
								%comment% "shard_id":1,
							Element:br
								%comment% "item_id":124606,
							Element:br
								%comment% "item_name":"Rebate for 124606",
							Element:br
								%comment% "economic_type":"rebate",
							Element:br
								%comment% "economic_value":52.281000000000006,
							Element:br
								%comment% "currency_type":0,
							Element:br
								%comment% "virtual_currency_label":"",
							Element:br
								%comment% "currency_value":52.281000000000006,
							Element:br
								%comment% "virtual_currency_count”:1
							Element:br
								%comment% }
							Element:br
								%comment% }
							Element:br
							Element:br
								%comment%NOTE: All parameters are required in JSON, except “shard_id”, “virtual_currency_label”, and “virtual_currency_count” which are optional.
							Element:br
							Element:br
								%comment%%right%[[#top|Back to Top]]
							Element:br
								%comment%----
							Element:br
							Element:br
								!!!!'''Traffic Source (Event ID#59)'''
							Element:br
							Element:br
							Element:br
								This event records information regarding where your traffic is coming from, whether it’s from Facebook, an Email Campaign, or Direct Marketing. To log traffic source, you need to pass the account ID, traffic source, and traffic source type, along with the timestamp. Optionally, you may pass the shard ID.
							Element:br
							Element:br
								'+'''Parameters'''+'
							Element:br
								|| border=1 rules=rows frame=hsides
							Element:br
								||! Type ||! Parameter ||! Default Value ||
							Element:br
								|| Date || EVENT TIMESTAMP || (Current Time) ||
							Element:br
								|| String || ACCOUNT ID || ''No Default Value'' ||
							Element:br
								|| String || TRAFFIC SOURCE || campaign_name | sub_site | publisher_name | sub_publisher [[ Appendix#traffic-source|(See Appendix for more types]] ||
							Element:br
								|| Long || SHARD ID || 0 ||
							Element:br
								|| String || TRAFFIC SOURCE TYPE || publisher_name [[ Appendix#traffic-source-type|(See Appendix for more types]] ||
							Element:br
							Element:br
								%comment%|| String || TRAFFIC SOURCE || Other [[ Appendix#traffic-source|(See Appendix for more types]] ||
							Element:br
								%comment%|| String || TRAFFIC SOURCE TYPE || Unknown [[ Appendix#traffic-source-type|(See Appendix for more types]] ||
							Element:br
								'+'''Sample Use'''+'
							Element:br
							Element:br
								*Java
							Element:br
								//Log that a traffic source event occurred\\
							Element:br
								public void ''aKApi''.logTrafficSource(TIMESTAMP, ACCOUNT_ID, TRAFFIC_SOURCE, SHARD_ID, TRAFFIC_SOURCE_TYPE) ;
							Element:br
							Element:br
								*JavaScript
							Element:br
								//Log that a traffic source event occurred\\
							Element:br
								''aKApi''.logTrafficSource(TIMESTAMP, ACCOUNT_ID, TRAFFIC_SOURCE, SHARD_ID, TRAFFIC_SOURCE_TYPE) ;
							Element:br
							Element:br
								*PHP
							Element:br
								//Log that a traffic source event occurred\\
							Element:br
								''$aKApi''->logTrafficSource(TIMESTAMP, ACCOUNT_ID, TRAFFIC_SOURCE, SHARD_ID, TRAFFIC_SOURCE_TYPE) ;
							Element:br
							Element:br
								*JSON
							Element:br
								//Log that a traffic source event occurred\\
							Element:br
							Element:br
								{
							Element:br
								"timestamp":"2013-11-15T19:07:30.221Z",
							Element:br
								"data":{
							Element:br
								"type":59,
							Element:br
								"account_id":"cool_guy@example.com",
							Element:br
								"traffic_source":"campaign_name | sub_site | publisher_name | sub_publisher",
							Element:br
								"shard_id":0,
							Element:br
								"traffic_source_type":"publisher_name"
							Element:br
								}
							Element:br
								}
							Element:br
							Element:br
								%comment% {
							Element:br
								%comment% "timestamp":"2013-11-15T19:07:30.221Z",
							Element:br
								%comment% "data":{
							Element:br
								%comment% "type":59,
							Element:br
								%comment% "account_id":"cool_guy@example.com",
							Element:br
								%comment% "traffic_source":"abcTrafficSource",
							Element:br
								%comment% "shard_id":42.42,
							Element:br
								%comment% "traffic_source_type":"traffic_source_type"
							Element:br
								%comment% }
							Element:br
								%comment% }
							Element:br
							Element:br
								NOTE: All parameters are required in JSON, except “shard_id” which is optional.
							Element:br
							Element:br
								%right%[[#top|Back to Top]]
							Element:br
								----
							Element:br
								!!'''Social Events'''[[#SocialEvents]]
							Element:br
								----
							Element:br
								!!!!'''Social Interactions (Event ID#6)'''[[#Social]]
							Element:br
							Element:br
								This event records social events involving two people and includes all social events that are not covered as ''Group (Entry/Exit) Events ''or ''Friend (Addition/Deletion) Events''. To log an in-app social event, you need to pass the sender account and character IDs; the receiver account and character IDs; the character levels of both users; the social event name and type; and the timestamp. Optionally, you may pass the shard ID.
							Element:br
							Element:br
								'+'''Impacted UI Features'''+'
							Element:br
								*KPI
							Element:br
								*System Metrics (Social)
							Element:br
								*Basic Package (Summary)
							Element:br
							Element:br
								'+'''Parameters'''+'
							Element:br
								|| border=1 rules=rows frame=hsides
							Element:br
								||! Type ||! Parameter ||! Default Value ||
							Element:br
								||Date ||EVENT TIMESTAMP ||(Current Time)||
							Element:br
								||String ||ACCOUNT ID ||''No Default Value''||
							Element:br
								||String ||CHARACTER ID ||ACCOUNT_ID||
							Element:br
								||Long ||CHARACTER LEVEL ||If Generic Character then Account Level; If no concept of levels then 0.||
							Element:br
								||String ||TARGET ACCOUNT ID ||''No Default Value''||
							Element:br
								||String ||TARGET CHARACTER ID ||TARGET_ACCOUNT_ID||
							Element:br
								||Long ||TARGET CHARACTER LEVEL ||If Generic Character then Account Level; If no concept of levels then 0.||
							Element:br
								||Long ||SHARD ID ||0||
							Element:br
								||String ||SOCIAL EVENTS NAME|| "No Default Value''||
							Element:br
								||String ||SOCIAL EVENT TYPE|| Other [[Appendix#social-event-type| (See Appendix for more types)]] ||
							Element:br
							Element:br
								'+'''Sample Use'''+'
							Element:br
							Element:br
								*Java
							Element:br
							Element:br
								//Log an in-app social event\\
							Element:br
								public void ''aKApi.''logSocialEvent(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, TARGET_ACCOUNT_ID, TARGET_CHARACTER_ID, TARGET_CHARACTER_LEVEL, SHARD_ID, SOCIAL_EVENTS_NAME, SOCIAL_EVENT_TYPE);
							Element:br
							Element:br
								*'''JavaScript'''
							Element:br
							Element:br
								//Log an in-app social event[[<<]]
							Element:br
								''aKApi.''logSocialEvent(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, TARGET_ACCOUNT_ID, TARGET_CHARACTER_ID, TARGET_CHARACTER_LEVEL, SHARD_ID, SOCIAL_EVENTS_NAME, SOCIAL_EVENT_TYPE);
							Element:br
							Element:br
								*'''PHP'''
							Element:br
							Element:br
								//Log an in-app social event\\
							Element:br
								''$aKApi->''logSocialEvent(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, TARGET_ACCOUNT_ID, TARGET_CHARACTER_ID, TARGET_CHARACTER_LEVEL, SHARD_ID, SOCIAL_EVENTS_NAME, SOCIAL_EVENT_TYPE);
							Element:br
							Element:br
								*JSON
							Element:br
							Element:br
								//Log an in-app social event\\
							Element:br
							Element:br
								{
							Element:br
								"timestamp":"2013-11-14T14:28:54.832Z",
							Element:br
								"data":{
							Element:br
								"type":6,
							Element:br
								"sender_account_id":"cool_guy@example.com",
							Element:br
								"sender_character_id":"sharer",
							Element:br
								"sender_character_level":1,
							Element:br
								"receiver_account_id":"cool_guy1@example.com",
							Element:br
								"receiver_character_id":"advertiser",
							Element:br
								"receiver_character_level":1,
							Element:br
								"shard_id":42,
							Element:br
								"social_event_name":"rebate_share",
							Element:br
								"social_event_type":"share"
							Element:br
								}
							Element:br
								}
							Element:br
							Element:br
								NOTE: All parameters are required in JSON, except “shard_id” which is optional.
							Element:br
							Element:br
								%right%[[#top|Back to Top]]
							Element:br
								----
							Element:br
							Element:br
								!!!!'''Off-Game Interaction (OGI) Sender (Event ID#7)'''
							Element:br
							Element:br
							Element:br
								An off-game-interaction refers to an interaction between a player inside the game environment and a person outside the game environment. To log the start of a social interaction outside of the application, you need to pass the sender account and character IDs; the receiver account and character IDs; the interaction category and location; and the event timestamp. Optionally, you may pass the shard ID.
							Element:br
							Element:br
								'+'''Parameters'''+'
							Element:br
								|| border=1 rules=rows frame=hsides
							Element:br
								||! Type ||! Parameter ||! Default Value ||
							Element:br
								|| Date || EVENT TIMESTAMP || (Current Time) ||
							Element:br
								|| String || SENDER ACCOUNT ID || ''No Default Value'' ||
							Element:br
								|| String || SENDER CHARACTER ID || SENDER ACCOUNT ID ||
							Element:br
								|| String || RECEIVER ACCOUNT ID || ''No Default Value''* ||
							Element:br
								|| String || RECEIVER CHARACTER ID || RECEIVER ACCOUNT ID ||
							Element:br
								|| Long || SHARD ID || 0 ||
							Element:br
								|| String || OGI LOCATION || Other ||
							Element:br
								|| String || OGI CATEGORY || ''No Default Value'' ||
							Element:br
							Element:br
								[- *Receiver Account ID can be an ID (e.g. Facebook or Email).-] \\
							Element:br
								\\
							Element:br
								'+'''Sample Use'''+'
							Element:br
							Element:br
								*Java
							Element:br
								//Log the start of an off-game-interaction\\
							Element:br
								public void ''aKApi''.logOgiSend(EVENT_TIMESTAMP, SENDER_ACCOUNT_ID, SENDER_CHARACTER_ID, RECEIVER_ACCOUNT_ID, RECEIVER_CHARACTER_ID, SHARD_ID, %comment%OGI_LOCATION, OGI_CATEGORY);
							Element:br
							Element:br
								*JavaScript
							Element:br
								//Log the start of an off-game-interaction\\
							Element:br
								''aKApi''.logOgiSend(EVENT_TIMESTAMP, SENDER_ACCOUNT_ID, SENDER_CHARACTER_ID, RECEIVER_ACCOUNT_ID, RECEIVER_CHARACTER_ID, SHARD_ID, OGI_LOCATION, %comment%OGI_CATEGORY);
							Element:br
							Element:br
								*PHP
							Element:br
								//Log the start of an off-game-interaction\\
							Element:br
								''$aKApi''->logOgiSend(EVENT_TIMESTAMP, SENDER_ACCOUNT_ID, SENDER_CHARACTER_ID, RECEIVER_ACCOUNT_ID, RECEIVER_CHARACTER_ID, SHARD_ID, OGI_LOCATION, OGI_CATEGORY);
							Element:br
							Element:br
								*JSON
							Element:br
								//Log the start of an off-game-interaction\\
							Element:br
							Element:br
								{
							Element:br
								"timestamp":"2013-11-14T14:48:56.718Z",
							Element:br
								"data":{
							Element:br
								"type":7,
							Element:br
								"sender_account_id":"cool_guy@example.com",
							Element:br
								"sender_character_id":"wizard",
							Element:br
								"receiver_account_id":"small_cat@example.com",
							Element:br
								"receiver_character_id":"mage",
							Element:br
								"shard_id":42,
							Element:br
								"ogi_location":"https://www.facebook.com/wall/42",
							Element:br
								"ogi_category":"wall post"
							Element:br
								}
							Element:br
								}
							Element:br
							Element:br
								NOTE: All parameters are required in JSON, except “shard_id” which is optional.
							Element:br
							Element:br
								%right%[[#top|Back to Top]]
							Element:br
								----
							Element:br
							Element:br
								!!!!'''Off-Game-Interaction (OGI) Receiver (Event ID#8)'''
							Element:br
							Element:br
							Element:br
								This event records information regarding how the receiver of an off-game-interaction acted in response. To log the receiver's response to a social interaction outside of the application, you need to pass the sender account and character IDs, along with the receiver account and character IDs, shard ID, and event timestamp. As well, you'll need to pass the interaction category, location, and receiver response. Optionally, you may pass the shard ID.
							Element:br
							Element:br
								For related information, see Off-Game-Interaction Sender.
							Element:br
							Element:br
								'+'''Parameters'''+'
							Element:br
								|| border=1 rules=rows frame=hsides
							Element:br
								||! Type ||! Parameter ||! Default Value ||
							Element:br
								|| Date || EVENT TIMESTAMP || (Current Time) ||
							Element:br
								|| String || SENDER ACCOUNT ID || ''No Default Value'' ||
							Element:br
								|| String || SENDER CHARACTER ID || SENDER ACCOUNT ID ||
							Element:br
								|| String || RECEIVER ACCOUNT ID || ''No Default Value''* ||
							Element:br
								|| String || RECEIVER CHARACTER ID || RECEIVER ACCOUNT ID ||
							Element:br
								|| Long || SHARD ID || 0 ||
							Element:br
								|| String || OGI CATEGORY || ''No Default Value'' ||
							Element:br
								|| String || OGI LOCATION || Other ||
							Element:br
								|| String || OGI RECEIVER ACTION || Other ||
							Element:br
							Element:br
								[- *Receiver Account ID can be an ID (e.g. Facebook or Email).-]
							Element:br
							Element:br
								'+'''Sample Use'''+'
							Element:br
							Element:br
								*Java
							Element:br
								// Log the end of and response to an off-game-interaction\\
							Element:br
								public void ''aKApi''.logOgiRecv(EVENT_TIMESTAMP, SENDER_ACCOUNT_ID, SENDER_CHARACTER_ID, RECEIVER_ACCOUNT_ID, RECEIVER_CHARACTER_ID, SHARD_ID, OGI_CATEGORY, OGI_LOCATION, OGI_RECEIVER_ACTION);
							Element:br
							Element:br
								*JavaScript
							Element:br
								// Log the end of and response to an off-game-interaction\\
							Element:br
								''aKApi''.logOgiRecv(EVENT_TIMESTAMP, SENDER_ACCOUNT_ID, SENDER_CHARACTER_ID, RECEIVER_ACCOUNT_ID, RECEIVER_CHARACTER_ID, SHARD_ID, OGI_CATEGORY, OGI_LOCATION, OGI_RECEIVER_ACTION);
							Element:br
							Element:br
								*PHP
							Element:br
								// Log the end of and response to an off-game-interaction\\
							Element:br
								''$aKApi''->logOgiRecv(EVENT_TIMESTAMP, SENDER_ACCOUNT_ID, SENDER_CHARACTER_ID, RECEIVER_ACCOUNT_ID, RECEIVER_CHARACTER_ID, SHARD_ID, OGI_CATEGORY, OGI_LOCATION, OGI_RECEIVER_ACTION);
							Element:br
							Element:br
								*JSON
							Element:br
								// Log the end of and response to an off-game-interaction\\
							Element:br
							Element:br
								{
							Element:br
								"timestamp":"2013-11-14T15:00:53.806Z",
							Element:br
								"data":{
							Element:br
								"type":8,
							Element:br
								"sender_account_id":"cool_guy@example.com",
							Element:br
								"sender_character_id":"wizard",
							Element:br
								"receiver_account_id":"small_cat@example.com",
							Element:br
								"receiver_character_id":"mage",
							Element:br
								"shard_id":42,
							Element:br
								"ogi_category":"wall post",
							Element:br
								"ogi_location":"https://www.facebook.com/wall/42",
							Element:br
								“ogi_receiver_action”:”other””
							Element:br
								}
							Element:br
								}
							Element:br
							Element:br
								NOTE: All parameters are required in JSON, except “shard_id” which is optional.
							Element:br
							Element:br
								%right%[[#top|Back to Top]]
							Element:br
								----
							Element:br
							Element:br
								!!!!'''Message (Event ID#20)'''[[#Message]]
							Element:br
							Element:br
								This event records in-game messages between players for multiple channels of communication such as in-game chat, in-game mail, or a message broadcast to a group. To log an in-game message, you need to pass the sender account and character IDs; the receiver account and character IDs; the channel label; the message character count; and the timestamp. Optionally, you may pass the shard ID and the message description.
							Element:br
							Element:br
								'+'''Impacted UI Features'''+'
							Element:br
								*System Metrics (Levels)
							Element:br
							Element:br
								'+'''Parameters'''+'
							Element:br
								|| border=1 rules=rows frame=hsides
							Element:br
								||! Type ||! Parameter ||! Default Value ||
							Element:br
								||Date ||EVENT TIMESTAMP ||(Current Time)||
							Element:br
								||String ||FROM ACCOUNT ID ||''No Default Value''||
							Element:br
								||String ||FROM CHARACTER ID ||FROM_ACCOUNT_ID||
							Element:br
								||String ||TO ACCOUNT ID ||''No Default Value''||
							Element:br
								||String ||TO CHARACTER ID ||TO_ACCOUNT_ID||
							Element:br
								||Long ||SHARD ID ||0||
							Element:br
								||String ||CHANNEL LABEL ||Other [[Appendix#channel-label| (See Appendix for more types)]] ||
							Element:br
								||String ||MESSAGE DESCRIPTION ||Null||
							Element:br
								||Long ||CHAR COUNT ||1||
							Element:br
							Element:br
								'+'''Sample Use'''+'
							Element:br
							Element:br
								*Java
							Element:br
								//Log an in-game message\\
							Element:br
								public void ''aKApi.''logMessage(EVENT_TIMESTAMP, FROM_ACCOUNT_ID, FROM_CHARACTER_ID, TO_ACCOUNT_ID, TO_CHARACTER_ID, SHARD_ID, CHANNEL_LABEL, MESSAGE_DESCRIPTION, CHAR_COUNT);
							Element:br
							Element:br
								*JavaScript
							Element:br
								//Log an in-game message\\
							Element:br
								''aKApi.''logMessage(EVENT_TIMESTAMP, FROM_ACCOUNT_ID, FROM_CHARACTER_ID, TO_ACCOUNT_ID, TO_CHARACTER_ID, SHARD_ID, CHANNEL_LABEL, MESSAGE_DESCRIPTION, CHAR_COUNT);
							Element:br
							Element:br
								*PHP
							Element:br
								//Log an in-game message\\
							Element:br
								$aKApi->logMessage(EVENT_TIMESTAMP, FROM_ACCOUNT_ID, FROM_CHARACTER_ID, TO_ACCOUNT_ID, TO_CHARACTER_ID, SHARD_ID, CHANNEL_LABEL, MESSAGE_DESCRIPTION, CHAR_COUNT);
							Element:br
							Element:br
								*JSON
							Element:br
								//Log an in-game message\\
							Element:br
							Element:br
								{
							Element:br
								"timestamp":"2013-11-14T18:46:02.842Z",
							Element:br
								"data":{
							Element:br
								"type":20,
							Element:br
								"sender_account_id":"cool_guy@example.com",
							Element:br
								"sender_character_id":"Wizard",
							Element:br
								"receiver_account_id":"cool_guy@example.com",
							Element:br
								"receiver_character_id":"Wizard",
							Element:br
								"shard_id":0,
							Element:br
								"message_ch_label":"Group:Pre-Defined",
							Element:br
								"message_desc":"A guild chat message",
							Element:br
								"message_char_count":140
							Element:br
								}
							Element:br
								}
							Element:br
							Element:br
								NOTE: All parameters are required in JSON, except “shard_id” and “message_desc” which are optional.
							Element:br
							Element:br
								%right%[[#top|Back to Top]]
							Element:br
								----
							Element:br
							Element:br
								!!!!'''Recruitment Send (Event ID#33)'''[[#RecruitmentSend]]
							Element:br
							Element:br
								For games that allow players to invite other players to join them in finishing certain tasks or activities, this event records information regarding the recruitment request. To log a recruitment request, you need to pass the sender account and character IDs; the receiver account and character IDs; the recruitment type; and timestamp.
							Element:br
							Element:br
								'+'''Impacted UI Features'''+'
							Element:br
								*Basic Package (Summary)
							Element:br
							Element:br
								'+'''Parameters'''+'
							Element:br
								|| border=1 rules=rows frame=hsides
							Element:br
								||! Type ||! Parameter ||! Default Value ||
							Element:br
								||Date ||TIMESTAMP ||(Current Time)||
							Element:br
								||String ||SENDER ACCOUNT ID ||''No Default Value''||
							Element:br
								||String ||SENDER CHARACTER ID ||SENDER_ACCOUNT_ID||
							Element:br
								||String ||RECEIVER ACCOUNT ID ||''No Default Value''||
							Element:br
								||String ||RECEIVER CHARACTER ID ||RECEIVER_ACCOUNT_ID||
							Element:br
								||String ||RECRUITMENT TYPE ||Other [[Appendix#recruitment-type| (See Appendix for more types)]] ||
							Element:br
							Element:br
								'+'''Sample Use'''+'
							Element:br
							Element:br
								*Java
							Element:br
								//Log a recruitment request\\
							Element:br
								public void ''aKApi.''recruitmentSend(EVENT_TIMESTAMP, SENDER_ACCOUNT_ID, SENDER_CHARACTER_ID, RECEIVER_ACCOUNT_ID, RECEIVER_CHARACTER_ID, RECRUITMENT_TYPE);
							Element:br
							Element:br
								*JavaScript
							Element:br
								//Log a recruitment request\\
							Element:br
								''aKApi.''recruitmentSend(EVENT_TIMESTAMP, SENDER_ACCOUNT_ID, SENDER_CHARACTER_ID, RECEIVER_ACCOUNT_ID, RECEIVER_CHARACTER_ID, RECRUITMENT_TYPE);
							Element:br
							Element:br
								*PHP
							Element:br
								//Log a recruitment request\\
							Element:br
								''$aKApi->''recruitmentSend(EVENT_TIMESTAMP, SENDER_ACCOUNT_ID, SENDER_CHARACTER_ID, RECEIVER_ACCOUNT_ID, RECEIVER_CHARACTER_ID, RECRUITMENT_TYPE);
							Element:br
							Element:br
								*JSON
							Element:br
								//Log a recruitment request\\
							Element:br
							Element:br
								{
							Element:br
								"timestamp":"2013-11-15T14:37:55.545Z",
							Element:br
								"data":{
							Element:br
								"type":33,
							Element:br
								"sender_account_id":"cool_guy@example.com",
							Element:br
								"sender_character_id":"Wizard",
							Element:br
								"receiver_account_id":"small_cat@example.com",
							Element:br
								"receiver_character_id":"Wizard",
							Element:br
								"recruitment_type":"mobile ad"
							Element:br
								}
							Element:br
								}
							Element:br
							Element:br
								NOTE: All parameters are required in JSON.
							Element:br
							Element:br
								%right%[[#top|Back to Top]]
							Element:br
								----
							Element:br
							Element:br
								!!!!'''Recruitment Receive Action (Event ID#34)'''[[#RecruitmentReceive]]
							Element:br
							Element:br
								This event records information regarding a player's response to a recruitment request, for example, was the request accepted or declined. To log a recruitment request response, you need to pass the sender account and character IDs; the receiver account and character IDs; the recruitment type and outcome; and the timestamp.
							Element:br
							Element:br
								For related information, see [[#RecruitmentSend| ''Recruitment Send'']].
							Element:br
							Element:br
								'+'''Impacted UI Features'''+'
							Element:br
								*Basic Package (Summary)
							Element:br
							Element:br
								'+'''Parameters'''+'
							Element:br
								|| border=1 rules=rows frame=hsides
							Element:br
								||! Type ||! Parameter ||! Default Value ||
							Element:br
								||Date ||TIMESTAMP ||(Current Time)||
							Element:br
								||String ||SENDER ACCOUNT ID ||''No Default Value''||
							Element:br
								||String ||SENDER CHARACTER ID ||SENDER_ACCOUNT_ID||
							Element:br
								||String ||RECEIVER ACCOUNT ID ||''No Default Value''||
							Element:br
								||String ||RECEIVER CHARACTER ID ||RECEIVER_ACCOUNT_ID||
							Element:br
								||String ||RECRUITMENT TYPE ||Other [[Appendix#recruitment-type| (See Appendix for more types)]] ||
							Element:br
								||String ||RECRUITMENT OUTCOME ||Rejected*||
							Element:br
							Element:br
								[- *Recruitment Outcome default is 'Rejected', alternate options also include 'Accepted'.-]
							Element:br
							Element:br
								'+'''Sample Use'''+'
							Element:br
							Element:br
								*Java
							Element:br
								//Log a recruitment request response\\
							Element:br
								public void ''aKApi.''recruitmentReceive(EVENT_TIMESTAMP, SENDER_ACCOUNT_ID, SENDER_CHARACTER_ID, RECEIVER_ACCOUNT_ID, RECEIVER_CHARACTER_ID, RECRUITMENT_TYPE, RECRUITMENT_OUTCOME);
							Element:br
							Element:br
								*JavaScript
							Element:br
								//Log a recruitment request response\\
							Element:br
								''aKApi.''recruitmentReceive(EVENT_TIMESTAMP, SENDER_ACCOUNT_ID, SENDER_CHARACTER_ID, RECEIVER_ACCOUNT_ID, RECEIVER_CHARACTER_ID, RECRUITMENT_TYPE, RECRUITMENT_OUTCOME);
							Element:br
							Element:br
								*PHP
							Element:br
								//Log a recruitment request response\\
							Element:br
								''$aKApi->''recruitmentReceive(EVENT_TIMESTAMP, SENDER_ACCOUNT_ID, SENDER_CHARACTER_ID, RECEIVER_ACCOUNT_ID, RECEIVER_CHARACTER_ID, RECRUITMENT_TYPE, RECRUITMENT_OUTCOME);
							Element:br
							Element:br
								*JSON
							Element:br
								//Log a recruitment request response\\
							Element:br
							Element:br
								{
							Element:br
								"timestamp":"2013-11-15T14:47:14.579Z",
							Element:br
								"data":{
							Element:br
								"type":34,
							Element:br
								"sender_account_id":"cool_guy@example.com",
							Element:br
								"sender_character_id":"Wizard",
							Element:br
								"receiver_account_id":"small_cat@example.com",
							Element:br
								"receiver_character_id":"Wizard",
							Element:br
								"recruitment_type":"mobile ad",
							Element:br
								"recruitment_outcome":"trial account"
							Element:br
								}
							Element:br
								}
							Element:br
							Element:br
								NOTE: All parameters are required in JSON.
							Element:br
							Element:br
								%right%[[#top|Back to Top]]
							Element:br
								----
							Element:br
							Element:br
								!!!!'''Friend Addition (Event ID#43)'''
							Element:br
							Element:br
								This event records information regarding a player adding another player as a friend, despite whether the friendship is reciprocated. To log a friend addition, you need to pass the sender account and character IDs; the receiver account and character IDs; and the timestamp.
							Element:br
							Element:br
								Please note that this is a one-way, "follow" type of addition. If Bob is accepting a friend request from Alice, and they will subsequently appear on each other's friends list, then two events should be sent. One with Alice as the sender and Bob as the recipient, and another with Bob as the sender and Alice as the recipient. If Alice is simply following Bob without any action on his part, then you only need to send a single event with Alice as the sender and Bob as the recipient.
							Element:br
							Element:br
								'+'''Impacted UI Features'''+'
							Element:br
								*System Metrics (Levels)
							Element:br
							Element:br
								'+'''Parameters'''+'
							Element:br
								|| border=1 rules=rows frame=hsides
							Element:br
								||! Type ||! Parameter ||! Default Value ||
							Element:br
								|| Date || EVENT TIMESTAMP || (Current Time) ||
							Element:br
								|| String || ACCOUNT ID || ''No Default Value'' ||
							Element:br
								|| String || CHARACTER ID || ACCOUNT ID ||
							Element:br
								|| String || RECIPIENT ACCOUNT ID || ''No Default Value'' ||
							Element:br
								|| String || RECIPIENT CHARACTER ID || RECIPIENT ACCOUNT ID ||
							Element:br
							Element:br
								'+'''Sample Use'''+'
							Element:br
							Element:br
								*Java
							Element:br
								//Log a friend addition\\
							Element:br
								public void ''aKApi''.logFriendAdd(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, RECIPIENT_ACCOUNT_ID, RECIPIENT_CHARACTER_ID);
							Element:br
							Element:br
								*JavaScript
							Element:br
								//Log a friend addition\\
							Element:br
								''aKApi''.logFriendAdd(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, RECIPIENT_ACCOUNT_ID, RECIPIENT_CHARACTER_ID);
							Element:br
							Element:br
								*PHP
							Element:br
								//Log a friend addition\\
							Element:br
								''$aKApi''->logFriendAdd(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, RECIPIENT_ACCOUNT_ID, RECIPIENT_CHARACTER_ID);
							Element:br
							Element:br
								*JSON
							Element:br
								//Log a friend addition\\
							Element:br
							Element:br
								{
							Element:br
								"timestamp":"2013-11-15T17:35:00.091Z",
							Element:br
								"data":{
							Element:br
								"type":43,
							Element:br
								"sender_account_id":"cool_guy@example.com",
							Element:br
								"sender_character_id":"Wizard",
							Element:br
								"receiver_account_id":"small_cat@example.com",
							Element:br
								"receiver_character_id":"Wizard"
							Element:br
								}
							Element:br
								}
							Element:br
							Element:br
								NOTE: All parameters are required in JSON.
							Element:br
							Element:br
								%right%[[#top|Back to Top]]
							Element:br
								----
							Element:br
							Element:br
								!!!!'''Friend Deletion (Event ID#44)'''
							Element:br
							Element:br
							Element:br
								This event records information regarding the end of an in-game friendship. To log a friend deletion, you need to pass the sender account and character IDs; the receiver account and character IDs; along with the timestamp.
							Element:br
							Element:br
								For related information, see Friend Addition.
							Element:br
							Element:br
								Please note that this is a one-way, "unfollow" type of deletion. If Alice and Bob are currently in each other's friends list, and a removal from one party will cause them to be dropped from both lists, then you should send two deletion events. One with Alice as the sender and Bob as the recipient, and another with Bob as the sender and Alice as the recipient.
							Element:br
							Element:br
								'+'''Impacted UI Features'''+'
							Element:br
								*System Metrics (Levels)
							Element:br
							Element:br
								'+'''Parameters'''+'
							Element:br
								|| border=1 rules=rows frame=hsides
							Element:br
								||! Type ||! Parameter ||! Default Value ||
							Element:br
								|| Date || EVENT TIMESTAMP || (Current Time) ||
							Element:br
								|| String || ACCOUNT ID || ''No Default Value'' ||
							Element:br
								|| String || CHARACTER ID || ACCOUNT ID ||
							Element:br
								|| String || RECIPIENT ACCOUNT ID || ''No Default Value'' ||
							Element:br
								|| String || RECIPIENT CHARACTER ID || RECIPIENT ACCOUNT ID ||
							Element:br
							Element:br
								'+'''Sample Use'''+'
							Element:br
							Element:br
								*Java
							Element:br
								//Log a friend deletion\\
							Element:br
								public void ''aKApi''.logFriendDelete(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, RECIPIENT_ACCOUNT_ID, RECIPIENT_CHARACTER_ID);
							Element:br
							Element:br
								*JavaScript
							Element:br
								//Log a friend deletion\\
							Element:br
								''aKApi''.logFriendDelete(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, RECIPIENT_ACCOUNT_ID, RECIPIENT_CHARACTER_ID);
							Element:br
							Element:br
								*PHP
							Element:br
								//Log a friend deletion\\
							Element:br
								''$aKApi''->logFriendDelete(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, RECIPIENT_ACCOUNT_ID, RECIPIENT_CHARACTER_ID);
							Element:br
							Element:br
								*JSON
							Element:br
								//Log a friend deletion\\
							Element:br
							Element:br
								{
							Element:br
								"timestamp":"2013-11-15T17:40:17.868Z",
							Element:br
								"data":{
							Element:br
								"type":44,
							Element:br
								"sender_account_id":"cool_guy@example.com",
							Element:br
								"sender_character_id":"Wizard",
							Element:br
								"receiver_account_id":"small_cat@example.com",
							Element:br
								"receiver_character_id":"Wizard"
							Element:br
								}
							Element:br
								}
							Element:br
							Element:br
								NOTE: “sender_account_id”, and “receiver_account_id” are required, while all other parameters are optional.
							Element:br
							Element:br
								%right%[[#top|Back to Top]]
							Element:br
								----
							Element:br
							Element:br
								!!'''Custom Events'''[[#CustomEvents]]
							Element:br
							Element:br
								Custom events include those events that relate to custom actions and CRM actions. As a Ninja Metrics customer, you have the freedom to define custom events in any way that you want, given the fields described under the ''Custom Slot Action ''and ''Custom Action ''events below. Details on how to execute calls to log custom events can be found below for each corresponding event.
							Element:br
							Element:br
							Element:br
								%comment%!!!!'''CRM Action (Event ID#52)''' - To Be Completed.
							Element:br
							Element:br
								%comment%A Customer Relationship Management (CRM) action may be taken by a CRM representative in the gaming company and recorded using this generic field. This event records information regarding how the customer responds to the action. To log a CRM action and response, you need to pass the account and character IDs, the shard ID, the CRM action; and the action type and timestamp. Optionally, you may pass the shard ID, outcome status and timestamp.
							Element:br
							Element:br
								%comment%'+'''Impacted UI Features'''+'
							Element:br
								%comment%*KPI
							Element:br
							Element:br
								%comment%'+'''Parameters'''+'
							Element:br
								%comment%|| border=1 rules=rows frame=hsides
							Element:br
								%comment%||! Type ||! Parameter ||! Default Value ||
							Element:br
								%comment%|| Date || CRM ACTION TIMESTAMP || (Current Time) ||
							Element:br
								%comment%|| String || ACCOUNT ID || ''No Default Value'' ||
							Element:br
								%comment%|| String || CHARACTER ID || ACCOUNT ID ||
							Element:br
								%comment%|| Long || SHARD ID || 0 ||
							Element:br
								%comment%|| String || CRM ACTION || NA ||
							Element:br
								%comment%|| String || CRM ACTION TYPE || Other [[Appendix#crm-action-type| (See Appendix for more types)]]||
							Element:br
								%comment%|| String || CRM FULFILLED STATUS || Null ||
							Element:br
								%comment%|| Date || CRM FULFILLED TIMESTAMP || Null ||
							Element:br
							Element:br
								%comment%'+'''Sample Use'''+'
							Element:br
							Element:br
								%comment%*Java
							Element:br
								%comment%//Log a CRM action and response\\
							Element:br
								%comment%public void ''aKApi''.logCrmAction(CRM_ACTION_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, CRM_ACTION, CRM_ACTION_TYPE, CRM_FULFILLED_STATUS, %comment%CRM_FULFILLED_TIMESTAMP);
							Element:br
							Element:br
								%comment%*JavaScript
							Element:br
								%comment%//Log a CRM action and response\\
							Element:br
								%comment%''aKApi''.logCrmAction(CRM_ACTION_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, CRM_ACTION, CRM_ACTION_TYPE, CRM_FULFILLED_STATUS, CRM_FULFILLED_TIMESTAMP);
							Element:br
							Element:br
								%comment%*PHP
							Element:br
								%comment%//Log a CRM action and response\\
							Element:br
								%comment%''$aKApi''->logCrmAction(CRM_ACTION_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, CRM_ACTION, CRM_ACTION_TYPE, CRM_FULFILLED_STATUS, CRM_FULFILLED_TIMESTAMP);
							Element:br
							Element:br
								%comment%*JSON
							Element:br
								%comment%//Log a CRM action and response\\
							Element:br
							Element:br
								%comment% {
							Element:br
								%comment% "timestamp":"2013-11-15T18:23:20.079Z",
							Element:br
								%comment% "data":{
							Element:br
								%comment% "type":52,
							Element:br
								%comment% "account_id":"cool_guy@example.com",
							Element:br
								%comment% "character_id":"Wizard",
							Element:br
								%comment% "shard_id":42.42,
							Element:br
								%comment% "crm_action":"crm_action",
							Element:br
								%comment% "crm_action_type":"crm_action_type",
							Element:br
								%comment% "crm_fulfilled_status":"crm_fulfilled_status",
							Element:br
								%comment% "crm_fulfilled_timestamp":"2013-08-12T05:00:00.000Z"
							Element:br
								%comment% }
							Element:br
								%comment% }
							Element:br
							Element:br
								%comment%NOTE: All parameters are required in JSON, except “shard_id”, “crm_fulfilled_status”, and “crm_fulfilled_timestamp” which are optional.
							Element:br
							Element:br
								%comment%%right%[[#top|Back to Top]]
							Element:br
								%comment%----
							Element:br
							Element:br
								%comment%!!!!'''Customer Service Action (Event ID#53)''' - To Be Completed.
							Element:br
							Element:br
								%comment%To log a customer service action ,you need to pass the account and character IDs, the customer service action and type; along with the action timestamp. Optionally, you may pass the shard ID.
							Element:br
							Element:br
								%comment%'+'''Impacted UI Features'''+'
							Element:br
								%comment%*KPI
							Element:br
							Element:br
								%comment%'+'''Parameters'''+'
							Element:br
								%comment%|| border=1 rules=rows frame=hsides
							Element:br
								%comment%||! Type ||! Parameter ||! Default Value ||
							Element:br
								%comment%|| Date || CS TIMESTAMP || (Current Time) ||
							Element:br
								%comment%|| String || ACCOUNT ID || ''No Default Value'' ||
							Element:br
								%comment%|| String || CHARACTER ID || ACCOUNT ID ||
							Element:br
								%comment%|| Long || SHARD ID || 0 ||
							Element:br
								%comment%|| String || CS ACTION || ''No Default Value'' ||
							Element:br
								%comment%|| String || CS ACTION TYPE || Other [[Appendix#cs-action-type| (See Appendix for more types)]]||
							Element:br
							Element:br
							Element:br
								%comment%'+'''Sample Use'''+'
							Element:br
							Element:br
								%comment%*Java
							Element:br
								%comment%//Log a custom slot action event\\
							Element:br
								%comment%public void ''aKApi''.logCustomerServiceAction(CS_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, CS_ACTION, CS_ACTION_TYPE);
							Element:br
							Element:br
								%comment%*JavaScript
							Element:br
								%comment%//Log a custom slot action event\\
							Element:br
								%comment%''aKApi''.logCustomerServiceAction(CS_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, CS_ACTION, CS_ACTION_TYPE);
							Element:br
							Element:br
								%comment%*PHP
							Element:br
								%comment%//Log a custom slot action event\\
							Element:br
								%comment%''$aKApi''->logCustomerServiceAction(CS_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, CS_ACTION, CS_ACTION_TYPE);
							Element:br
							Element:br
								%comment%*JSON
							Element:br
								%comment%//Log a custom slot action event\\
							Element:br
							Element:br
								%comment% {
							Element:br
								%comment% "timestamp":"2013-11-15T18:29:07.797Z",
							Element:br
								%comment% "data":{
							Element:br
								%comment% "type":53,
							Element:br
								%comment% "account_id":"cool_guy@example.com",
							Element:br
								%comment% "character_id":"Wizard",
							Element:br
								%comment% "shard_id":42.42,
							Element:br
								%comment% "customer_service_action":"cs_action",
							Element:br
								%comment% "customer_service_action_type":"cs_action_type"
							Element:br
								%comment% }
							Element:br
								%comment% }
							Element:br
							Element:br
								%comment%NOTE: All parameter are required in JSON, except “shard_id” which is optional.
							Element:br
							Element:br
								%comment%%right%[[#top|Back to Top]]
							Element:br
								%comment%----
							Element:br
							Element:br
								!!!!'''Custom Slot (Event ID#54)'''
							Element:br
							Element:br
							Element:br
								This event can be defined by your organization and records information regarding events that are not described in any of the other events and do not relate to actions in the game. To log a custom action event, you need to pass the account and character IDs, the custom action, the action type, the action value, and the timestamp.
							Element:br
							Element:br
								'+'''Impacted UI Features'''+'
							Element:br
								*KPI
							Element:br
							Element:br
								'+'''Parameters'''+'
							Element:br
								|| border=1 rules=rows frame=hsides
							Element:br
								||! Type ||! Parameter ||! Default Value ||
							Element:br
								|| Date || TIMESTAMP || (Current Time) ||
							Element:br
								|| String || ACCOUNT ID || ''No Default Value'' ||
							Element:br
								|| String || CHARACTER ID || ACCOUNT ID ||
							Element:br
								|| String || CUSTOM ACTION || ''No Default Value'' ||
							Element:br
								|| String || CUSTOM ACTION TYPE || ''No Default Value'' ||
							Element:br
								|| String (max 400) || CUSTOM ACTION VALUE || NA ||
							Element:br
							Element:br
								'+'''Sample Use'''+'
							Element:br
							Element:br
								*Java
							Element:br
								//Log a custom action event\\
							Element:br
								public void ''aKApi''.logCustomAction(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CUSTOM_ACTION, CUSTOM_ACTION_TYPE, CUSTOM_ACTION_VALUE);
							Element:br
							Element:br
								*JavaScript
							Element:br
								//Log a custom action event\\
							Element:br
								''aKApi''.logCustomAction(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CUSTOM_ACTION, CUSTOM_ACTION_TYPE, CUSTOM_ACTION_VALUE);
							Element:br
							Element:br
								*PHP
							Element:br
								//Log a custom action event\\
							Element:br
								''$aKApi''->logCustomAction(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CUSTOM_ACTION, CUSTOM_ACTION_TYPE, CUSTOM_ACTION_VALUE);
							Element:br
							Element:br
								*JSON
							Element:br
								//Log a custom action event\\
							Element:br
							Element:br
								{
							Element:br
								"timestamp":"2013-11-15T18:35:36.006Z",
							Element:br
								"data":{
							Element:br
								"type":54,
							Element:br
								"account_id":"cool_guy@example.com",
							Element:br
								"character_id":"Wizard",
							Element:br
								"custom_action":"custom_action",
							Element:br
								"custom_action_type":"custom_action_type",
							Element:br
								"custom_action_value":"custom_action_value"
							Element:br
								}
							Element:br
								}
							Element:br
							Element:br
								NOTE: All parameters are required in JSON.
							Element:br
							Element:br
								%right%[[#top|Back to Top]]
							Element:br
								----
						Node:
						(type) c
						(layer)2
							Element:a
								Restore
						Node:
						(type) c
						(layer)2
							Element:a
								March 09, 2015, at 10:51 PM
								by
						Node:
						(type) c
						(layer)2
							Element:span
								173.51.250.14
								- Changed lines 1-32 from:
						Node:
						(type) c
						(layer)2
							Element:del
								[+The Katana Social Analytics Engine measures the value of social contributions in applications and games, provides detailed projections for the outcomes that matter to developers, and offers the tools to determine how effectively features facilitate engagement and social interaction.+]
								to:
							Element:br
							Element:br
								If you're new to Katana start with the [[Main/GettingStarted|Getting Started Guide]]. Otherwise dig right in with an Integration Library or the API documentation.
							Element:br
							Element:br
								(:table border=0 cellpadding=5 cellspacing=0:)
							Element:br
								(:headnr:) [[Libraries/Libraries | Integration Libraries]]
							Element:br
								(:head:) [[Site/APIDocumentation | API Documentation]]
							Element:br
								(:head:) [[IntegrationExamples | Integration Examples]]
							Element:br
								(:head:) [[Help | Support]]
							Element:br
								(:cellnr:) [[Libraries/JavaScript]]
							Element:br
								(:cell:) [[Main/QuickStartGuide|Quick Start Guide]]
							Element:br
								(:cell:) [[IntegrationExamples/Unity | Unity]]
							Element:br
								(:cell:) [[Help/FAQs]]
							Element:br
								(:cellnr:) [[Libraries/Java]]
							Element:br
								(:cell:) [[Main/AdvancedSetupGuide|Advanced Setup Guide]]
							Element:br
								(:cell:) [[Main/AdvancedSetupGuide-Removed|Advanced Setup Guide-Removed]]
							Element:br
								(:cell:) [[IntegrationExamples/Android | Android]]
							Element:br
								(:cell:) [[Help/Glossary]]
							Element:br
								(:cellnr:) [[Libraries/PHP]]
							Element:br
								(:cell:)[[Recommended Country Codes]]
							Element:br
								(:cell:) [[IntegrationExamples/iOS | iOS]]
							Element:br
								(:cell:) [[Help/Dashboards]]
							Element:br
							Element:br
								(:cellnr:) [[Libraries/IOS]]
							Element:br
								(:cellnr:) [[Libraries/Android]]
							Element:br
								(:cell:) [[JSON Sample Events]]
							Element:br
								%comment%(:cell:) [[JSON Sample Events - Removed]]
							Element:br
								(:cell:) &nbsp;
							Element:br
								(:cell:) [[Help/Videos]]
							Element:br
							Element:br
								(:tableend:)
							Element:br
								(:comment [[Attach:Main/Ninja Metrics - Katana API Documentationv9.pdf|Katana API Doc]] :)
						Node:
						(type) c
						(layer)2
							Element:ins
								[[#top]]
							Element:br
								Get the complete experience. Follow this ''Advanced Setup Guide ''to get the most out of Katana Analytics. This guide includes the information you need to log all available events, including events custom to your title. You'll find the events are organized based on 10 primary event categories:
							Element:br
							Element:br
								[[AdvancedSetupGuide#SystemEvents| System Events]]
							Element:br
								System events include those events that are system related, such as when a player logs in or out of the application, or when a shard is initialized.
							Element:br
							Element:br
								[[AdvancedSetupGuide#AccountManagementEvents| Account Management Events]]
							Element:br
								Account Management events include those events that are related to the creation, deletion, and management of a user or character account.
							Element:br
							Element:br
								[[AdvancedSetupGuide#GameEvents| Game Events]]
							Element:br
								Game events include those events that are related to in-game characters, actions, and combat.
							Element:br
							Element:br
								[[AdvancedSetupGuide[#ItemEvents| Item Events]]
							Element:br
								Item events include those events that are related to the creation, use, and transaction of in- game items.
							Element:br
							Element:br
								[[AdvancedSetupGuide#GroupEvents| Group Events]]
							Element:br
								Group events include those events involving player interaction with a group or guild such as entry, exit, or a player's position within a guild (e.g. Guild Leader).
							Element:br
							Element:br
								[[AdvancedSetupGuide[#EnvironmentEvents| Environment Events]]
							Element:br
								Environment events include those events that are related to in-game levels and areas that players may encounter.
							Element:br
							Element:br
								[[AdvancedSetupGuide[#EconomicEvents| Economic Events]]
							Element:br
								Economic events include those events that are related to in-game stores and purchases such as a player's interaction with a store and items within it.
							Element:br
							Element:br
								[[AdvancedSetupGuide#TransactionEvents| Transaction Events]]
							Element:br
								Transaction events include those events that are related to economic events outside of the game such as when an item is purchased outside of the developer game store, or when a subscription changes.
							Element:br
							Element:br
								[[AdvancedSetupGuide#SocialEvents| Social Events]]
							Element:br
								Social events include social interactions between players in and outside of the game such as messages, off-game-interactions, friend requests, etc.
							Element:br
							Element:br
								[[AdvancedSetupGuide#CustomEvents| Custom Events]]
							Element:br
								Custom events include those events that relate to custom actions, and CRM actions. As a Ninja Metrics customer you have the freedom to define custom events in any way that you want given the fields described under the ''Custom Slot Action ''and ''Custom Action ''sections.
							Element:br
							Element:br
							Element:br
								!!'''System Events'''[[#SystemEvents]]
							Element:br
							Element:br
								System events include those events that are system related, such as when a player logs in or out of the application, or when a shard is initialized. Details on how to execute calls to log system events can be found below for each corresponding event.
							Element:br
							Element:br
								!!!!''' Login (Event ID#1)'''[[#Login]]
							Element:br
							Element:br
								This event records the time at which the user logged into the system (website, game, software, etc.). To log a login event, you need to pass the user's account ID, character ID, platform, and timestamp. Optionally, you may pass the shard ID, and login area name and ID.
							Element:br
							Element:br
								'+'''Impacted UI Features'''+'
							Element:br
								*KPI
							Element:br
								*System Metrics (Items, Location/Maps, NPC, Social)
							Element:br
								*User Metrics (Churn, Farming, Integrity)
							Element:br
								*Basic Package (Summary)
							Element:br
							Element:br
								'+'''Parameters'''+'
							Element:br
								|| border=1 rules=rows frame=hsides
							Element:br
								||! Type ||! Parameter ||! Default Value ||
							Element:br
								||Date ||LOGIN TIMESTAMP || (Current Time)||
							Element:br
								||String ||ACCOUNT ID ||''No Default Value''||
							Element:br
								||String ||CHARACTER ID ||ACCOUNT_ID||
							Element:br
								||Long ||SHARD ID ||0||
							Element:br
								||String ||PLATFORM ||Other||
							Element:br
								||Long ||LOGIN AREA ID ||Null||
							Element:br
								||String ||LOGIN AREA NAME ||Null||
							Element:br
							Element:br
								'+'''Sample Use'''+'
							Element:br
							Element:br
								*Java
							Element:br
							Element:br
								//Log when a user logs in\\
							Element:br
								public void ''aKApi.''logLogin(LOGIN_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, PLATFORM, LOGIN_AREA_ID, LOGIN_AREA_NAME);
							Element:br
							Element:br
								*JavaScript
							Element:br
							Element:br
								//Log when a user logs in[[<<]]
							Element:br
								''aKApi.''logLogin(LOGIN_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, PLATFORM, LOGIN_AREA_ID, LOGIN_AREA_NAME);
							Element:br
							Element:br
								*PHP
							Element:br
							Element:br
								//Log when a user logs in\\
							Element:br
								''$aKApi->''logLogin(LOGIN_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, PLATFORM, LOGIN_AREA_ID, LOGIN_AREA_NAME);
							Element:br
							Element:br
								*JSON
							Element:br
							Element:br
								//Log when a user logs in\\
							Element:br
							Element:br
								{
							Element:br
								"timestamp":"2013-11-14T13:43:06.308Z",
							Element:br
								"data":{
							Element:br
								"type":1,
							Element:br
								"account_id":"cool_guy@example.com",
							Element:br
								"character_id":"Wizard",
							Element:br
								"shard_id":42,
							Element:br
								"platform":"Facebook Mobile",
							Element:br
								"area_id”:0,
							Element:br
								"area_name”:0
							Element:br
								}
							Element:br
								}
							Element:br
							Element:br
								NOTE: All parameters are required in JSON, except “shard_id”, “area_id” and “area_name” which are optional.
							Element:br
							Element:br
								%right%[[#top|Back to Top]]
							Element:br
								----
							Element:br
							Element:br
								!!!!'''Logout (Event ID#2)'''[[#Logout]]
							Element:br
							Element:br
								This event records the time at which the user logged out of the system (website, game, software, etc.). To log a logout event, you need to pass the user's account ID, character ID, and timestamp.
							Element:br
							Element:br
								'+'''Impacted UI Features'''+'
							Element:br
								*KPI
							Element:br
								*User Metrics (Churn, Farming, Integrity)
							Element:br
								*Basic Package (Summary)
							Element:br
							Element:br
								'+'''Parameters'''+'
							Element:br
								|| border=1 rules=rows frame=hsides
							Element:br
								||! Type ||! Parameter ||! Default Value ||
							Element:br
								||Date ||LOGOUT TIMESTAMP ||(Current Time)||
							Element:br
								||String ||ACCOUNT ID ||''No Default Value''||
							Element:br
								||String ||CHARACTER ID ||ACCOUNT_ID||
							Element:br
							Element:br
								'+'''Sample Use'''+'
							Element:br
							Element:br
								*Java
							Element:br
							Element:br
								//Log when a user logs out\\
							Element:br
								public void ''aKApi.''logLogout(LOGOUT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID);
							Element:br
							Element:br
								*JavaScript
							Element:br
							Element:br
								//Log when a user logs out[[<<]]
							Element:br
								''aKApi.''logLogout(LOGOUT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID);
							Element:br
							Element:br
								*PHP
							Element:br
							Element:br
								//Log when a user logs out\\
							Element:br
								''$aKApi''->logLogout(LOGOUT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID);
							Element:br
							Element:br
								*JSON
							Element:br
							Element:br
								//Log when a user logs out\\
							Element:br
							Element:br
								{
							Element:br
								"timestamp":"2013-11-14T13:51:53.035Z",
							Element:br
								"data":{
							Element:br
								"type":2,
							Element:br
								"account_id":"cool_guy@example.com",
							Element:br
								"character_id":"Wizard"
							Element:br
								}
							Element:br
								}
							Element:br
							Element:br
								NOTE: All parameters are required in JSON.
							Element:br
							Element:br
								%right%[[#top|Back to Top]]
							Element:br
								----
							Element:br
							Element:br
								!!!!'''Initialize Shard (Event ID#13)'''[[#InitializeShard]]
							Element:br
							Element:br
								Many games and environments have multiple instances running in parallel. In our schema, these parallel instances are referred to as shards. Shards are the same as running multiple instances of the game, or other environments, on different servers. To initialize a shard, you need to pass the shard ID and description, as well as a timestamp.
							Element:br
							Element:br
								'''Note''': You must log the shard creation information before any log or load command references the shard ID.
							Element:br
							Element:br
								'+'''Parameters'''+'
							Element:br
								|| border=1 rules=rows frame=hsides
							Element:br
								||! Type ||! Parameter ||! Default Value ||
							Element:br
								||Date ||TIMESTAMP ||(Current Time)||
							Element:br
								||Long ||SHARD ID ||''No Default Value''||
							Element:br
								||String ||SHARD DESCRIPTION ||NA||
							Element:br
							Element:br
							Element:br
								'+'''Sample Use'''+'
							Element:br
							Element:br
								*Java
							Element:br
							Element:br
								//Log shard creation information\\
							Element:br
								public void aKApi.loadInitShard(TIMESTAMP, SHARD_ID, SHARD_DESCRIPTION);
							Element:br
							Element:br
								*JavaScript
							Element:br
							Element:br
								//Log shard creation information\\
							Element:br
								''aKApi.''loadInitShard(TIMESTAMP, SHARD_ID, SHARD_DESCRIPTION);
							Element:br
							Element:br
								*PHP
							Element:br
							Element:br
								//Log shard creation information\\
							Element:br
								''$aKApi->''loadInitShard(TIMESTAMP, SHARD_ID, SHARD_DESCRIPTION);
							Element:br
							Element:br
								*JSON
							Element:br
							Element:br
								//Log shard creation information\\
							Element:br
							Element:br
								{
							Element:br
								"timestamp":"2013-11-14T16:15:08.347Z",
							Element:br
								"data":{
							Element:br
								"type":13,
							Element:br
								"shard_id":42,
							Element:br
								"shard_desc":"the shard with answers to it all"
							Element:br
								}
							Element:br
								}
							Element:br
							Element:br
								NOTE: All parameters are required in JSON.
							Element:br
							Element:br
								%right%[[#top|Back to Top]]
							Element:br
								----
							Element:br
							Element:br
								%comment%!!!!'''Ad Click (Event ID#57)''' - To Be Completed.
							Element:br
							Element:br
							Element:br
								%comment%This event records information when a user clicks on an Ad, or clicks on an Ad and takes some subsequent action. To log that a user has clicked an Ad you need to pass the user's account ID and the time the Ad was clicked. Optionally, you can pass the Ad tag name and Ad action timestamp.
							Element:br
							Element:br
								%comment%'+'''Parameters'''+'
							Element:br
								%comment%|| border=1 rules=rows frame=hsides
							Element:br
								%comment%||! Type ||! Parameter ||! Default Value ||
							Element:br
								%comment%|| Date || AD CLICK TIMESTAMP || (Current Time) ||
							Element:br
								%comment%|| String || ACCOUNT ID || ''No Default Value'' ||
							Element:br
								%comment%|| String || AD TAG NAME || In App [[Appendix#ad-tag-name| (See Appendix for more types)]]||
							Element:br
								%comment%|| Date || AD ACTION TIMESTAMP || Null ||
							Element:br
							Element:br
							Element:br
								%comment%'+'''Sample Use'''+'
							Element:br
							Element:br
								%comment%*Java
							Element:br
								%comment%//Log when a user clicks an Ad\\
							Element:br
								%comment%public void ''aKApi''.logAccountAd(AD_CLICK_TIMESTAMP, ACCOUNT_ID, AD_TAG_NAME, AD_ACTION_TIMESTAMP);
							Element:br
							Element:br
								%comment%*JavaScript
							Element:br
							Element:br
								%comment%//Log when a user clicks an Ad\\
							Element:br
								%comment%''aKApi''.logAccountAd(AD_CLICK_TIMESTAMP, ACCOUNT_ID, AD_TAG_NAME, AD_ACTION_TIMESTAMP);
							Element:br
							Element:br
								%comment%*PHP
							Element:br
							Element:br
								%comment%//Log when a user clicks an Ad\\
							Element:br
								%comment%''$aKApi''->logAccountAd(AD_CLICK_TIMESTAMP, ACCOUNT_ID, AD_TAG_NAME, AD_ACTION_TIMESTAMP);
							Element:br
							Element:br
								%comment%*JSON
							Element:br
							Element:br
								%comment%//Log when a user clicks an Ad\\
							Element:br
							Element:br
								%comment% {
							Element:br
								%comment% “ad_click_timestamp":"2013-08-12T05:00:00.000Z",
							Element:br
								%comment% "data":{
							Element:br
								%comment% "type":57,
							Element:br
								%comment% "account_id":"cool_guy@example.com",
							Element:br
								%comment% "ad_tag_name":"Ad-Words",
							Element:br
								%comment% "ad_action_timestamp":"2013-08-12T05:00:00.000Z”
							Element:br
								%comment% }
							Element:br
								%comment% }
							Element:br
							Element:br
								%comment%NOTE: “account_id” and ‘ad_click_timestamp” are required, while all other parameters are optional.
							Element:br
							Element:br
								%comment%%right%[[#top|Back to Top]]
							Element:br
								%comment%----
							Element:br
							Element:br
							Element:br
								!!'''Account Management Events'''[[#AccountManagementEvents]]
							Element:br
							Element:br
								Account Management events include those events that are related to the creation, deletion, and management of a user or character account. Details on how to execute calls to log account events can be found below for each corresponding event.
							Element:br
							Element:br
							Element:br
								!!!!'''Create Account (Event ID#9)'''[[#CreateAccount]]
							Element:br
							Element:br
								This event records information regarding the creation of a new account, including the user's demographics. To log the creation of an account you need to pass the account ID and type; the user's language, country, gender, and date of birth; as well as the platform and the timestamp. Optionally, you may pass their currency balance and old account ID.
							Element:br
							Element:br
								'''Note''': You must log the account creation information before any log or load command references the account ID.
							Element:br
							Element:br
								'+'''Impacted UI Features'''+'
							Element:br
								*KPI
							Element:br
								*User Metrics (Churn, Farming, Integrity)
							Element:br
								*Basic Package (Summary)
							Element:br
							Element:br
								'+'''Parameters'''+'
							Element:br
								|| border=1 rules=rows frame=hsides
							Element:br
								||! Type ||! Parameter ||! Default Value ||
							Element:br
								||Date ||CREATION TIMESTAMP ||(Current Time)||
							Element:br
								||String ||ACCOUNT ID ||"No Default Value"||
							Element:br
								||String ||ACCOUNT TYPE ||Free||
							Element:br
								||String ||LANGUAGE ||N0||
							Element:br
								||String ||COUNTRY ||N0||
							Element:br
								||String ||GENDER ||N||
							Element:br
								||Date ||DOB ||“1900-01-01T00:00:00.000Z”||
							Element:br
								||Float ||CURRENCY BALANCE ||0||
							Element:br
								||String ||PLATFORM ||Other||
							Element:br
								||String ||OLD ACCOUNT ID ||Null||
							Element:br
							Element:br
								'+'''Sample Use'''+'
							Element:br
							Element:br
								*Java
							Element:br
							Element:br
								//Log when a user creates an account\\
							Element:br
								public void aKApi.loadAccountCreate(CREATION_TIMESTAMP, ACCOUNT_ID, ACCOUNT_TYPE, LANGUAGE, COUNTRY, GENDER, DOB, PLATFORM, CURRENCY_BALANCE, PLATFORM, OLD_ACCOUNT_ID);
							Element:br
							Element:br
								*JavaScrip
							Element:br
								//Log when a user creates an account\\
							Element:br
								''aKApi.''loadAccountCreate(CREATION_TIMESTAMP, ACCOUNT_ID, ACCOUNT_TYPE, LANGUAGE, COUNTRY, GENDER, DOB, PLATFORM, CURRENCY_BALANCE, PLATFORM, OLD_ACCOUNT_ID);
							Element:br
							Element:br
								*PHP
							Element:br
								//Log when a user creates an account\\
							Element:br
								''$aKApi->''loadAccountCreate(CREATION_TIMESTAMP, ACCOUNT_ID, ACCOUNT_TYPE, LANGUAGE, COUNTRY, GENDER, DOB, PLATFORM, CURRENCY_BALANCE, PLATFORM, OLD_ACCOUNT_ID);
							Element:br
							Element:br
								*JSON
							Element:br
								//Log when a user creates an account\\
							Element:br
							Element:br
								{
							Element:br
								"timestamp":"2013-11-14T15:18:30.726Z",
							Element:br
								"data":{
							Element:br
								"type":9,
							Element:br
								"account_id":"cool_guy@example.com",
							Element:br
								"account_sub_type":"Free",
							Element:br
								"account_lang":"NA",
							Element:br
								"account_country":"de",
							Element:br
								"account_gender":"N",
							Element:br
								"account_dob":"1900-01-01T00:00:00.000Z",
							Element:br
								"account_currency_balance":55,
							Element:br
								"platform":"Social",
							Element:br
								"old_account_id":"small_cat@example.com"
							Element:br
								}
							Element:br
								}
							Element:br
							Element:br
								NOTE: All parameters are required in JSON, except “account_currency_balance_” and “old_account_id” which are optional.
							Element:br
							Element:br
								%right%[[#top|Back to Top]]
							Element:br
								----
							Element:br
							Element:br
								!!!!'''Delete Account (Event ID#10)'''[[#DeleteAccount]]
							Element:br
							Element:br
								This event records information regarding account deletion, including reasoning for deletion, in terms of churn or account compromise. To log the deletion of an account you need to pass the account ID, churn type, and timestamp.
							Element:br
							Element:br
								'+'''Impacted UI Features'''+'
							Element:br
								*KPI
							Element:br
								*User Metrics (Churn, Farming, Integrity)
							Element:br
							Element:br
								'+'''Parameters'''+'
							Element:br
								|| border=1 rules=rows frame=hsides
							Element:br
								||! Type ||! Parameter ||! Default Value ||
							Element:br
								||Date ||TIMESTAMP ||(Current Time)||
							Element:br
								||String ||ACCOUNT ID ||''No Default Value''||
							Element:br
								||String ||CHURN TYPE ||Stopped||
							Element:br
							Element:br
								'+'''Sample Use'''+'
							Element:br
							Element:br
								*Java
							Element:br
							Element:br
								//Log when a user deletes an account\\
							Element:br
								public void ''aKApi.''loadAccountDeleted(TIMESTAMP, ACCOUNT_ID, CHURN_TYPE);
							Element:br
							Element:br
								*JavaScript
							Element:br
							Element:br
								//Log when a user deletes an account\\
							Element:br
								''aKApi.''loadAccountDelete(TIMESTAMP, ACCOUNT_ID, CHURN_TYPE);
							Element:br
							Element:br
								*PHP
							Element:br
							Element:br
								//Log when a user deletes an account\\
							Element:br
								''$aKApi->''loadAccount''Delete(TIMESTAMP, ACCOUNT_ID, CHURN_TYPE);
							Element:br
							Element:br
								*JSON
							Element:br
							Element:br
								//Log when a user deletes an account\\
							Element:br
							Element:br
								{
							Element:br
								"timestamp":"1989-08-15T05:00:00.000Z",
							Element:br
								"data":{
							Element:br
								"type":10,
							Element:br
								"account_id":"cool_guy@example.com",
							Element:br
								"account_status":"Failed"
							Element:br
								}
							Element:br
								}
							Element:br
							Element:br
								NOTE: All parameters are required in JSON.
							Element:br
							Element:br
								%right%[[#top|Back to Top]]
							Element:br
								----
							Element:br
							Element:br
								[[#CreateCharacter]]
							Element:br
								!!!!'''Create Character (Event ID#11)'''
							Element:br
							Element:br
							Element:br
								Relates to the creation of characters or aliases within the game, where the character's attributes may vary from the attributes of the person in the real world. Once a character is created their attributes are usually fixed. To log a character creation, you need to pass the character and account IDs; the character class, subclass, gender, race, and name; along with the timestamp. Optionally, you may pass the shard ID.
							Element:br
							Element:br
								'''Note''': You must log the character creation information before any log or load command references the character ID.
							Element:br
							Element:br
								'+'''Impacted UI Features'''+'
							Element:br
								*KPI
							Element:br
							Element:br
								'+'''Parameters'''+'
							Element:br
								|| border=1 rules=rows frame=hsides
							Element:br
								||! Type ||! Parameter ||! Default Value ||
							Element:br
								|| Date || TIMESTAMP || (Current Time) ||
							Element:br
								|| String || ACCOUNT ID || ''No Default Value'' ||
							Element:br
								|| String || CHARACTER ID || ACCOUNT ID ||
							Element:br
								|| String || CHARACTER CLASS || NA ||
							Element:br
								|| String || CHARACTER SUBCLASS || NA ||
							Element:br
								|| String || CHARACTER GENDER || ''Must be 'M' or 'F' or 'N''' ||
							Element:br
								|| String || CHARACTER RACE || NA ||
							Element:br
								|| String || CHARACTER NAME || NA ||
							Element:br
								|| Long || SHARD ID || 0 ||
							Element:br
							Element:br
								'+'''Sample Use'''+'
							Element:br
							Element:br
								*Java
							Element:br
							Element:br
								//Log the creation of a character\\
							Element:br
								public void ''aKApi''.loadCharacterCreate(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_CLASS, CHARACTER_SUBCLASS, CHARACTER_GENDER, CHARACTER_RACE, CHARACTER_NAME, SHARD_ID);
							Element:br
							Element:br
								*JavaScript
							Element:br
							Element:br
								//Log the creation of a character\\
							Element:br
								''aKApi''.loadCharacterCreate(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_CLASS, CHARACTER_SUBCLASS, CHARACTER_GENDER, CHARACTER_RACE, CHARACTER_NAME, SHARD_ID);
							Element:br
							Element:br
								*PHP
							Element:br
							Element:br
								//Log the creation of a character\\
							Element:br
								''$aKApi''->loadCharacterCreate(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_CLASS, CHARACTER_SUBCLASS, CHARACTER_GENDER, CHARACTER_RACE, CHARACTER_NAME, SHARD_ID);
							Element:br
							Element:br
								*JSON
							Element:br
							Element:br
								//Log the creation of a character\\
							Element:br
							Element:br
								{
							Element:br
								"timestamp":"2013-11-14T15:47:36.202Z",
							Element:br
								"data":{
							Element:br
								"type":11,
							Element:br
								"account_id":"cool_guy@example.com",
							Element:br
								"character_id":"wizard",
							Element:br
								"character_class":"magic",
							Element:br
								"character_sub_class":"healer",
							Element:br
								"character_gender":"N",
							Element:br
								"character_race":"fish",
							Element:br
								"character_name":"small_fish",
							Element:br
								"shard_id":0
							Element:br
								}
							Element:br
								}
							Element:br
							Element:br
								NOTE: All parameters are required in JSON, except “shard_id” which is optional.
							Element:br
							Element:br
								%right%[[#top|Back to Top]]
							Element:br
								----
							Element:br
							Element:br
								!!!!'''Delete Character (Event ID#12)'''
							Element:br
							Element:br
							Element:br
								This event records information regarding the deletion of a character. To log a character deletion, you need to pass the character ID, account ID, and timestamp.
							Element:br
							Element:br
								For related information, see [[#CreateCharacter| ''Create Character'']].
							Element:br
							Element:br
								'+'''Impacted UI Features'''+'
							Element:br
								*KPI
							Element:br
							Element:br
								'+'''Parameters'''+'
							Element:br
								|| border=1 rules=rows frame=hsides
							Element:br
								||! Type ||! Parameter ||! Default Value ||
							Element:br
								|| Date || TIMESTAMP || (Current Time) ||
							Element:br
								|| String || ACCOUNT ID || ''No Default Value'' ||
							Element:br
								|| String || CHARACTER ID || ''No Default Value'' ||
							Element:br
							Element:br
							Element:br
								'+'''Sample Use'''+'
							Element:br
							Element:br
								*Java
							Element:br
							Element:br
								//Log the deletion of a character\\
							Element:br
								public void ''aKApi''.loadCharacterDelete(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID);
							Element:br
							Element:br
								*JavaScript
							Element:br
							Element:br
								//Log the deletion of a character\\
							Element:br
								''aKApi''.loadCharacterDelete(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID);
							Element:br
							Element:br
								*PHP
							Element:br
							Element:br
								//Log the deletion of a character\\
							Element:br
								''$aKApi''->loadCharacterDelete(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID);
							Element:br
							Element:br
								*JSON
							Element:br
							Element:br
								//Log the deletion of a character\\
							Element:br
							Element:br
								{
							Element:br
								"timestamp":"2013-11-14T16:03:13.367Z",
							Element:br
								"data":{
							Element:br
								"type":12,
							Element:br
								"account_id":"cool_guy@example.com”,
							Element:br
								"character_id":"Wizard”
							Element:br
								}
							Element:br
								}
							Element:br
							Element:br
								NOTE: All parameters are required in JSON.
							Element:br
							Element:br
								%right%[[#top|Back to Top]]
							Element:br
								----
							Element:br
							Element:br
								%comment%!!!!'''Integrity (Event ID#48)'''
							Element:br
							Element:br
							Element:br
								%comment%Integrity indicates whether an account has been compromised. This event records information regarding when the account was compromised and what type of integrity violation occurred. To log the integrity of an account you need to pass the account ID, integrity type, and timestamp. Optionally, you may pass the shard ID.
							Element:br
							Element:br
								%comment%'+'''Impacted UI Features'''+'
							Element:br
								%comment%*User Metrics (Integrity)
							Element:br
							Element:br
								%comment%'+'''Parameters'''+'
							Element:br
								%comment%|| border=1 rules=rows frame=hsides
							Element:br
								%comment%||! Type ||! Parameter ||! Default Value ||
							Element:br
								%comment%|| Date || TIMESTAMP || (Current Time) ||
							Element:br
								%comment%|| String || ACCOUNT ID || ''No Default Value'' ||
							Element:br
								%comment%|| Long || SHARD ID || 0 ||
							Element:br
								%comment%|| String || INTEGRITY TYPE || Other [[Appendix#integrity-flag-type|(See Appendix A for more types)]]||
							Element:br
							Element:br
							Element:br
							Element:br
								%comment%'+'''Sample Use'''+'
							Element:br
							Element:br
								%comment%*Java
							Element:br
							Element:br
								%comment%//Log account integrity\\
							Element:br
								%comment%public void ''aKApi''.logIntegrity(TIMESTAMP, ACCOUNT_ID, SHARD_ID, INTEGRITY_TYPE);
							Element:br
							Element:br
								%comment%*JavaScript
							Element:br
							Element:br
								%comment%//Log account integrity\\
							Element:br
								%comment%''aKApi''.logIntegrity(TIMESTAMP, ACCOUNT_ID, SHARD_ID, INTEGRITY_TYPE);
							Element:br
							Element:br
								%comment%*PHP
							Element:br
							Element:br
								%comment%//Log account integrity\\
							Element:br
								%comment%''$aKApi''->logIntegrity(TIMESTAMP, ACCOUNT_ID, SHARD_ID, INTEGRITY_TYPE);
							Element:br
							Element:br
								%comment%*JSON
							Element:br
							Element:br
								%comment%//Log account integrity\\
							Element:br
							Element:br
								%comment% {
							Element:br
								%comment% "timestamp":"2013-11-15T18:00:57.840Z",
							Element:br
								%comment% "data":{
							Element:br
								%comment% "type":48,
							Element:br
								%comment% "account_id":"cool_guy@example.com",
							Element:br
								%comment% "shard_id":42.42,
							Element:br
								%comment% "integrity_type":"Cheating"
							Element:br
								%comment% }
							Element:br
								%comment% }
							Element:br
							Element:br
								%comment%NOTE: All parameters are required in JSON, except “shard_id” which is optional.
							Element:br
							Element:br
								%comment%%right%[[#top|Back to Top]]
							Element:br
								%comment%----
							Element:br
							Element:br
							Element:br
								!!'''Game Events'''[[#GameEvents]]
							Element:br
							Element:br
								Game events include those events that are related to in-game characters, actions, and combat. Details on how to execute calls to log game events can be found below for each corresponding event.
							Element:br
							Element:br
							Element:br
								!!!!'''Begin Combat (Event ID#21)'''
							Element:br
							Element:br
							Element:br
								This event records information regarding the beginning of combat between a player and a non-player character (NPC). To log when a player begins combat, you need to pass the account and character IDs; the NPC ID; the area ID, name and position; as well as the timestamp. Optionaly, you may pass the shard ID.
							Element:br
							Element:br
								'+'''Parameters'''+'
							Element:br
								|| border=1 rules=rows frame=hsides
							Element:br
								||! Type ||! Parameter ||! Default Value ||
							Element:br
								|| Date || BEGIN COMBAT TIMESTAMP || (Current Time) ||
							Element:br
								|| String || ACCOUNT ID || ''No Default Value'' ||
							Element:br
								|| String || CHARACTER ID || ACCOUNT ID ||
							Element:br
								|| Long || SHARD ID || 0 ||
							Element:br
								|| Long || NPC ID || ''No Default Value'' ||
							Element:br
								|| Long || BEGIN AREA ID || 0 ||
							Element:br
								|| Float || BEGIN POSITION X || 0 ||
							Element:br
								|| Float || BEGIN POSITION Y || 0 ||
							Element:br
								|| Float || BEGIN POSITION Z || 0 ||
							Element:br
								|| String || BEGIN AREA NAME || NA ||
							Element:br
							Element:br
							Element:br
							Element:br
								'+'''Sample Use'''+'
							Element:br
							Element:br
								*Java
							Element:br
							Element:br
								//Log when a combat event begins\\
							Element:br
								public void ''aKApi''.combatStart(BEGIN_COMBAT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, NPC_ID, BEGIN_AREA_ID, BEGIN_POSITION_X, BEGIN_POSITION_Y, BEGIN_POSITION_Z, BEGIN_AREA_NAME);
							Element:br
							Element:br
								*JavaScript
							Element:br
							Element:br
								//Log when a combat event begins\\
							Element:br
								''aKApi''.combatStart(BEGIN_COMBAT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, NPC_ID, BEGIN_AREA_ID, BEGIN_POSITION_X, BEGIN_POSITION_Y, BEGIN_POSITION_Z, BEGIN_AREA_NAME);
							Element:br
							Element:br
							Element:br
								*PHP
							Element:br
							Element:br
								//Log when a combat event begins\\
							Element:br
								''$aKApi''->combatStart(BEGIN_COMBAT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, NPC_ID, BEGIN_AREA_ID, BEGIN_POSITION_X, BEGIN_POSITION_Y, BEGIN_POSITION_Z, BEGIN_AREA_NAME);
							Element:br
							Element:br
								*JSON
							Element:br
							Element:br
								//Log when a combat event begins\\
							Element:br
							Element:br
								{
							Element:br
								"timestamp":"2013-11-14T18:55:58.241Z",
							Element:br
								"data":{
							Element:br
								"type":21,
							Element:br
								"account_id":"cool_guy@example.com",
							Element:br
								"character_id":"Wizard",
							Element:br
								"shard_id":42,
							Element:br
								"npc_id":23456,
							Element:br
								"area_id":552,
							Element:br
								"position_x":678,
							Element:br
								"position_y":231,
							Element:br
								"position_z":517,
							Element:br
								"area_name":"Area_Name"
							Element:br
								}
							Element:br
								}
							Element:br
							Element:br
								NOTE: All parameters are required in JSON, except “shard_id” which is optional.
							Element:br
							Element:br
								%right%[[#top|Back to Top]]
							Element:br
								----
							Element:br
							Element:br
								!!!!'''End Combat (Event ID#22)'''
							Element:br
							Element:br
							Element:br
								This event records information regarding the end of combat between a player and a non- player character (NPC). To log when a player ends combat, you need to pass the account and character IDs; the NPC ID; the area ID, name, and position; as well as the timestamp. Optionally, you may pass the shard ID.
							Element:br
							Element:br
								'+'''Parameters'''+'
							Element:br
								|| border=1 rules=rows frame=hsides
							Element:br
								||! Type ||! Parameter ||! Default Value ||
							Element:br
								|| Date || END COMBAT TIMESTAMP || (Current Time) ||
							Element:br
								|| String || ACCOUNT ID || ''No Default Value'' ||
							Element:br
								|| String || CHARACTER ID || ACCOUNT ID ||
							Element:br
								|| Long || SHARD ID || 0 ||
							Element:br
								|| Long || NPC ID || ''No Default Value'' ||
							Element:br
								|| Long || END AREA ID || 0 ||
							Element:br
								|| Float || END POSITION X || 0 ||
							Element:br
								|| Float || END POSITION Y || 0 ||
							Element:br
								|| Float || END POSITION Z || 0 ||
							Element:br
								|| String || END AREA NAME || NA ||
							Element:br
							Element:br
							Element:br
							Element:br
								'+'''Sample Use'''+'
							Element:br
							Element:br
								*Java
							Element:br
								//Log when a combat event ends\\
							Element:br
								public void ''aKApi''.combatEnd(END_COMBAT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, NPC_ID, END_AREA_ID, END_POSITION_X, END_POSITION_Y, END_POSITION_Z, END_AREA_NAME);
							Element:br
							Element:br
								*JavaScript
							Element:br
							Element:br
								//Log when a combat event ends\\
							Element:br
								''aKApi''.combatEnd(END_COMBAT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, NPC_ID, END_AREA_ID, END_POSITION_X, END_POSITION_Y, END_POSITION_Z, END_AREA_NAME);
							Element:br
							Element:br
								*PHP
							Element:br
							Element:br
								//Log when a combat event ends\\
							Element:br
								''$aKApi''->combatEnd(END_COMBAT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, NPC_ID, END_AREA_ID, END_POSITION_X, END_POSITION_Y, END_POSITION_Z, END_AREA_NAME);
							Element:br
							Element:br
								*JSON
							Element:br
							Element:br
								//Log when a combat event ends\\
							Element:br
							Element:br
								{
							Element:br
								"timestamp":"2013-11-15T12:41:31.575Z",
							Element:br
								"data":{
							Element:br
								"type":22,
							Element:br
								"account_id":"cool_guy@example.com",
							Element:br
								"character_id":"wizard",
							Element:br
								"shard_id":42,
							Element:br
								"npc_id":23456,
							Element:br
								"area_id":552,
							Element:br
								"position_x":678,
							Element:br
								"position_y":231,
							Element:br
								"position_z":517,
							Element:br
								"area_name":"Area_Name"
							Element:br
								}
							Element:br
								}
							Element:br
							Element:br
								NOTE: All parameters are required in JSON, except “shard_id” which is optional.
							Element:br
							Element:br
								%right%[[#top|Back to Top]]
							Element:br
								----
							Element:br
							Element:br
								!!!!'''Kill (NPC) (Event ID#23)'''
							Element:br
							Element:br
							Element:br
								This event records when a non-player character (NPC) is killed by a player in the game. To log an NPC kill, you need to pass the account and character ID, the character level, the killed NPC ID, and the timestamp. Optionally, you may pass the shard ID.
							Element:br
							Element:br
								'+'''Parameters'''+'
							Element:br
								|| border=1 rules=rows frame=hsides
							Element:br
								||! Type ||! Parameter ||! Default Value ||
							Element:br
								|| Date || KILL NPC TIMESTAMP || (Current Time) ||
							Element:br
								|| String || ACCOUNT ID || ''No Default Value'' ||
							Element:br
								|| String || CHARACTER ID || ACCOUNT ID ||
							Element:br
								|| Long || SHARD ID || 0 ||
							Element:br
								|| Long || CHARACTER LEVEL || 0 ||
							Element:br
								|| Long || KILLED NPC ID || ''No Default Value'' ||
							Element:br
							Element:br
							Element:br
							Element:br
								'+'''Sample Use'''+'
							Element:br
							Element:br
								*Java
							Element:br
								//Log when an NPC is killed\\
							Element:br
								public void ''aKApi''.logKillNpc(KILL_NPC_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, CHARACTER_LEVEL, KILLED_NPC_ID);
							Element:br
							Element:br
								*JavaScript
							Element:br
							Element:br
								//Log when an NPC is killed\\
							Element:br
								''aKApi''.logKillNpc(KILL_NPC_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, CHARACTER_LEVEL, KILLED_NPC_ID);
							Element:br
							Element:br
								*PHP
							Element:br
							Element:br
								//Log when an NPC is killed\\
							Element:br
								''$aKApi''->logKillNpc(KILL_NPC_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, CHARACTER_LEVEL, KILLED_NPC_ID);
							Element:br
							Element:br
								*JSON
							Element:br
							Element:br
								//Log when an NPC is killed\\
							Element:br
								{
							Element:br
								"timestamp":"2013-11-15T13:08:45.954Z",
							Element:br
								"data":{
							Element:br
								"type":23,
							Element:br
								"account_id":"cool_guy@example.com",
							Element:br
								"character_id":"wizard",
							Element:br
								"shard_id":52,
							Element:br
								"character_lvl":42,
							Element:br
								"npc_id":23456
							Element:br
								}
							Element:br
								}
							Element:br
							Element:br
								NOTE: All parameter are required in JSON, except “shard_id” which is optional.
							Element:br
							Element:br
								%right%[[#top|Back to Top]]
							Element:br
								----
							Element:br
							Element:br
								!!!!'''Player Points (Event ID#24)'''[[#PlayerPoints]]
							Element:br
							Element:br
								This event records information regarding when a player gains points in the game. Points are used as an indicator of how well the player is doing in the game and how far they have progressed. Typically, gaining enough points leads the player to level-up to a higher level. To log player points, you need to pass the account and character IDs, the character level, the point amount and type, along with the timestamp. Optionally, you may pass the shard ID and whether or not the points are grouped.
							Element:br
							Element:br
								'+'''Impacted UI Features'''+'
							Element:br
								*System Metrics (Levels)
							Element:br
							Element:br
								'+'''Parameters'''+'
							Element:br
								|| border=1 rules=rows frame=hsides
							Element:br
								||! Type ||! Parameter ||! Default Value ||
							Element:br
								||Date ||XP TIMESTAMP ||(Current Time)||
							Element:br
								||String ||ACCOUNT ID ||''No Default Value''||
							Element:br
								||String ||CHARACTER ID ||ACCOUNT_ID||
							Element:br
								||Long ||CHARACTER LEVEL ||If Generic Character then Account Level; If no concept of Levels then 0.||
							Element:br
								||Long ||SHARD ID ||0||
							Element:br
								||Long ||POINT_TYPE ||Default = XP, {XP, GENERIC_POINTS, OTHER}||
							Element:br
								||Long ||XP AMOUNT ||''No Default Value''||
							Element:br
								||Boolean ||GROUPED FLAG || N||
							Element:br
							Element:br
								[- *Point Type default is XP, alternate options include 'Generic Point', and 'Other'.-]
							Element:br
							Element:br
								'+'''Sample Use'''+'
							Element:br
							Element:br
								*Java
							Element:br
								//Log player XP\\
							Element:br
								public void ''aKApi.''playerXp(XP_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, SHARD_ID, POINT_TYPE, XP_AMOUNT, GROUPED_FLAG);
							Element:br
							Element:br
								*JavaScript
							Element:br
								//Log player XP\\
							Element:br
								''aKApi.''playerXp(XP_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, SHARD_ID, POINT_TYPE, XP_AMOUNT, GROUPED_FLAG);
							Element:br
							Element:br
								*PHP
							Element:br
								//Log player XP\\
							Element:br
								''$aKApi->''playerXp(XP_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, SHARD_ID, POINT_TYPE, XP_AMOUNT, GROUPED_FLAG);
							Element:br
							Element:br
								*JSON
							Element:br
								//Log player XP\\
							Element:br
							Element:br
								{
							Element:br
								"timestamp":"2013-11-15T13:17:01.847Z",
							Element:br
								"data":{
							Element:br
								"type":24,
							Element:br
								"account_id":"cool_guy@example.com",
							Element:br
								"character_id":"Wizard",
							Element:br
								"character_lvl":1,
							Element:br
								"shard_id":42,
							Element:br
								“point_type”:”XP”
							Element:br
								"xp_amount":34.45,
							Element:br
								"grouped_flag”:”Y”,
							Element:br
							Element:br
								}
							Element:br
								}
							Element:br
							Element:br
								NOTE: All parameters are required in JSON, except “shard_id” and “grouped_flag” which are optional.
							Element:br
							Element:br
								%right%[[#top|Back to Top]]
							Element:br
								----
							Element:br
							Element:br
								!!!!'''Player Versus Player (PVP) Duel (Event ID#25)'''
							Element:br
							Element:br
								Please use Social Interactions Event #6 to record Player Versus Player actions.
							Element:br
								%comment%This event records information when a player enters into combat against another player. Note that this event is only applicable for games and environments where a player is able to fight another player. To log a PVP duel, you need to pass the account and character IDs, the timestamp, and whether or not the player won. Optionally, you may pass the shard ID.
							Element:br
								%comment%
							Element:br
								%comment%'+'''Parameters'''+'
							Element:br
								%comment%|| border=1 rules=rows frame=hsides
							Element:br
								%comment%||! Type ||! Parameter ||! Default Value ||
							Element:br
								%comment%|| Date || PVP DUEL TIMESTAMP || (Current Time) ||
							Element:br
								%comment%|| String || ACCOUNT ID || ''No Default Value'' ||
							Element:br
								%comment%|| String || CHARACTER ID || ACCOUNT ID ||
							Element:br
								%comment%|| Long || SHARD ID || 0 ||
							Element:br
								%comment%|| Boolean || WIN FLAG || ''No Default Value'' ||
							Element:br
								%comment%
							Element:br
								%comment%'+'''Sample Use'''+'
							Element:br
								%comment%
							Element:br
								%comment%*Java
							Element:br
								%comment%//Log a PVP Duel\\
							Element:br
								%comment%public void ''aKApi''.logPvpDuel(PVP_DUEL_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, WIN_FLAG);
							Element:br
								%comment%
							Element:br
								%comment%*JavaScript
							Element:br
								%comment%//Log a PVP Duel\\
							Element:br
								%comment%''aKApi''.logPvpDuel(PVP_DUEL_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, WIN_FLAG);
							Element:br
								%comment%
							Element:br
								%comment%*PHP
							Element:br
								%comment%//Log a PVP Duel\\
							Element:br
								%comment%''$aKApi''->logPvpDuel(PVP_DUEL_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, WIN_FLAG);
							Element:br
								%comment%
							Element:br
								%comment%*JSON
							Element:br
								%comment%//Log a PVP Duel\\
							Element:br
								%comment%
							Element:br
								%comment% {
							Element:br
								%comment% "timestamp":"2013-11-15T13:26:39.832Z",
							Element:br
								%comment% "data":{
							Element:br
								%comment% "type":25,
							Element:br
								%comment% "account_id":"cool_guy@example.com",
							Element:br
								%comment% "character_id":"Wizard",
							Element:br
								%comment% "shard_id":42,
							Element:br
								%comment% "win_flag":"Y"
							Element:br
								%comment% }
							Element:br
								%comment% }
							Element:br
								%comment%
							Element:br
								%comment%NOTE: All parameters are required in JSON, except “shard_id” which is optional
							Element:br
								%comment%
							Element:br
								%comment%%right%[[#top|Back to Top]]
							Element:br
								%comment%----
							Element:br
								%comment%
							Element:br
								!!!!'''Player Death (Event ID#26)'''
							Element:br
							Element:br
								This event records information regarding the death of a player by a non-player character (NPC). To log a player death, you need to pass the account and character IDs; the Area ID and name; the NPC ID; the position; the type of death; and the timestamp. Optionally, you may pass the shard ID.
							Element:br
							Element:br
								'+'''Parameters'''+'
							Element:br
								|| border=1 rules=rows frame=hsides
							Element:br
								||! Type ||! Parameter ||! Default Value ||
							Element:br
								|| Date || DEATH TIMESTAMP || (Current Time) ||
							Element:br
								|| String || ACCOUNT ID || ''No Default Value'' ||
							Element:br
								|| String || CHARACTER ID || ACCOUNT ID ||
							Element:br
								|| Long || SHARD ID || 0 ||
							Element:br
								|| Long || KILLER NPC ID || ''No Default Value'' ||
							Element:br
								|| String || DEATH TYPE || NA ||
							Element:br
								|| Long || AREA ID || 0 ||
							Element:br
								|| Float || POSITION X || 0 ||
							Element:br
								|| Float || POSITION Y || 0 ||
							Element:br
								|| Float || POSITION Z || 0 ||
							Element:br
								|| String || AREA NAME || NA ||
							Element:br
							Element:br
								'+'''Sample Use'''+'
							Element:br
							Element:br
								*Java
							Element:br
								//Log a player death\\
							Element:br
								public void ''aKApi''.logPlayerDeath(DEATH_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, KILLER_NPC_ID, DEATH_TYPE, AREA_ID, POSITION_X, POSITION_Y, POSITION_Z, AREA_NAME);
							Element:br
							Element:br
								*JavaScript
							Element:br
							Element:br
								//Log a player death\\
							Element:br
								''aKApi''.logPlayerDeath(DEATH_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, KILLER_NPC_ID, DEATH_TYPE, AREA_ID, POSITION_X, POSITION_Y, POSITION_Z, AREA_NAME);
							Element:br
							Element:br
								*PHP
							Element:br
							Element:br
								//Log a player death\\
							Element:br
								''$aKApi''->logPlayerDeath(DEATH_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, KILLER_NPC_ID, DEATH_TYPE, AREA_ID, POSITION_X, POSITION_Y, POSITION_Z, AREA_NAME);
							Element:br
							Element:br
								*JSON
							Element:br
							Element:br
								//Log a player death\\
							Element:br
							Element:br
								{
							Element:br
								"timestamp":"2013-11-15T13:32:33.452Z",
							Element:br
								"data":{
							Element:br
								"type":26,
							Element:br
								"account_id":"cool_guy@example.com",
							Element:br
								"character_id":"Wizard",
							Element:br
								"shard_id":42,
							Element:br
								"npc_id":23456,
							Element:br
								"death_type":"Immolation",
							Element:br
								"area_id":512,
							Element:br
								"position_x":678,
							Element:br
								"position_y":231,
							Element:br
								"position_z":517,
							Element:br
								"area_name”:”Area_Name”
							Element:br
								}
							Element:br
								}
							Element:br
							Element:br
								NOTE: All parameter are required in JSON, except “shard_id” which is optional.
							Element:br
							Element:br
								%right%[[#top|Back to Top]]
							Element:br
								----
							Element:br
							Element:br
								!!!!'''Non-Player Character (NPC) (Event ID#31)'''[[#NPC]]
							Element:br
							Element:br
								Non-player characters (NPCs) are characters within the game that are not controlled by players. They have different levels of difficulty and may be either friendly or aggressive. This event records information regarding interactions between NPCs and players in the game environment. Recording NPC's also populates the dimension table for NPCs, which is later referred to for all other NPC related events. To log NPC events, you need to pass the account and character IDs; the NPC ID, name, and type; the event type and name; along with the toughness and timestamp. Optionally, you may pass the shard ID, and the minimum and maximum levels.
							Element:br
							Element:br
								'+'''Impacted UI Features'''+'
							Element:br
								*KPI
							Element:br
								*System Metrics (NPC)
							Element:br
							Element:br
								'+'''Parameters'''+'
							Element:br
								|| border=1 rules=rows frame=hsides
							Element:br
								||! Type ||! Parameter ||! Default Value ||
							Element:br
								||Date ||EVENT TIMESTAMP ||(Current Time)||
							Element:br
								||String ||ACCOUNT ID ||''No Default Value''||
							Element:br
								||String ||CHARACTER ID ||ACCOUNT_ID||
							Element:br
								||Long ||SHARD ID ||0||
							Element:br
								||String ||NPC EVENT NAME ||''No Default Value''||
							Element:br
								||String ||NPC EVENT TYPE ||''No Default Value''||
							Element:br
								||String ||NPC ID ||If NPC ID is empty, and NPC Name is not empty, use 0.||
							Element:br
								||String ||NPC NAME ||If NPC ID is not empty, and NPC Name is empty, use NA.||
							Element:br
								||String ||NPC TYPE ||Other||
							Element:br
								||Integer ||MIN LEVEL ||Set as Optional, with Null value||
							Element:br
								||Integer ||MAX LEVEL ||Set as Optional, with Null value||
							Element:br
								||Integer ||TOUGHNESS ||Set as Optional, with Null value||
							Element:br
								||String ||TOUGHNESS ENUM || Set as Optional, with Null value||
							Element:br
							Element:br
								'+'''Sample Use'''+'
							Element:br
							Element:br
								*Java
							Element:br
								//Log an NPC event occurred\\
							Element:br
								public void ''aKApi.log''NpcInteraction(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, NPC_EVENT_NAME, NPC_EVENT_TYPE, NPC_ID, NPC_NAME, NPC_TYPE, MIN_LEVEL, MAX_LEVEL, TOUGHNESS, TOUGHNESS_ENUM);
							Element:br
							Element:br
								*JavaScript
							Element:br
								//Log an NPC event occurred\\
							Element:br
								''aKApi.log''NpcInteraction(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, NPC_EVENT_NAME, NPC_EVENT_TYPE, NPC_ID, NPC_NAME, NPC_TYPE, MIN_LEVEL, MAX_LEVEL, TOUGHNESS, TOUGHNESS_ENUM);
							Element:br
							Element:br
								*PHP
							Element:br
								//Log an NPC event occurred\\
							Element:br
								''$aKApi->log''NpcInteraction(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, NPC_EVENT_NAME, NPC_EVENT_TYPE, NPC_ID, NPC_NAME, NPC_TYPE, MIN_LEVEL, MAX_LEVEL, TOUGHNESS, TOUGHNESS_ENUM);
							Element:br
							Element:br
								*JSON
							Element:br
								//Log an NPC event occurred\\
							Element:br
							Element:br
								{
							Element:br
								"timestamp":"2013-11-15T14:22:57.102Z",
							Element:br
								"data":{
							Element:br
								"type":31,
							Element:br
								"account_id":"cool_guy@example.com",
							Element:br
								"character_id":"wizard",
							Element:br
								"shard_id":42,
							Element:br
								"npc_event_name":"npcEventName",
							Element:br
								"npc_event_type":"Combat",
							Element:br
								"npc_id":2345,
							Element:br
								"npc_name":"the Mort of T",
							Element:br
								"npc_type":"Enemy",
							Element:br
								"npc_level_min":5,
							Element:br
								"npc_level_max":10,
							Element:br
								"npc_toughness":0.25,
							Element:br
								"npc_toughness_enum":"Quarter"
							Element:br
								}
							Element:br
								}
							Element:br
							Element:br
								NOTE: All parameters are required in JSON, except “shard_id”, “npc_level_min”, and “npc_level_max” which are optional.
							Element:br
							Element:br
								%right%[[#top|Back to Top]]
							Element:br
								----
							Element:br
							Element:br
								!!!!'''Challenge (Event ID#32)'''
							Element:br
							Element:br
							Element:br
								Challenges, sometimes referred to as Quests, are elements of the game where a player, or group of players, can perform tasks for a reward or opportunity to level-up within the game. This event records information regarding challenges. To log a challenge event, you need to pass the account and character IDs; the challenge ID, type, and status; along with the timestamp. Optionally, you may pass the shard ID.
							Element:br
							Element:br
								'+'''Impacted UI Features'''+'
							Element:br
								*KPI
							Element:br
							Element:br
								'+'''Parameters'''+'
							Element:br
								|| border=1 rules=rows frame=hsides
							Element:br
								||! Type ||! Parameter ||! Default Value ||
							Element:br
								|| Date || EVENT TIMESTAMP || (Current Time) ||
							Element:br
								|| String || ACCOUNT ID || ''No Default Value'' ||
							Element:br
								|| String || CHARACTER ID || ACCOUNT ID ||
							Element:br
								|| Long || SHARD ID || 0 ||
							Element:br
								|| String || CHALLENGE ID || ''No Default Value'' ||
							Element:br
								|| String || CHALLENGE TYPE || Other [[Appendix#challange-type|(See Appendix A for more types)]]||
							Element:br
								|| String || CHALLENGE STATUS || Accepted* ||
							Element:br
								[- *The Challenge Status default is 'Accepted', but alternate options include 'Completed', or 'Abandoned'.-]
							Element:br
							Element:br
								'+'''Sample Use'''+'
							Element:br
							Element:br
								*Java
							Element:br
								//Log a challenge event occurred\\
							Element:br
								public void ''aKApi''.logChallenge(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, CHALLENGE_ID, CHALLENGE_TYPE, CHALLENGE_STATUS);
							Element:br
							Element:br
								*JavaScript
							Element:br
								//Log a challenge event occurred\\
							Element:br
								''aKApi''.logChallenge(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, CHALLENGE_ID, CHALLENGE_TYPE, CHALLENGE_STATUS);
							Element:br
							Element:br
								*PHP
							Element:br
								//Log a challenge event occurred\\
							Element:br
								''$aKApi''->logChallenge(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, CHALLENGE_ID, CHALLENGE_TYPE, CHALLENGE_STATUS);
							Element:br
							Element:br
								*JSON
							Element:br
								//Log a challenge event occurred\\
							Element:br
							Element:br
								{
							Element:br
								"timestamp":"2013-11-15T14:31:40.633Z",
							Element:br
								"data":{
							Element:br
								"type":32,
							Element:br
								"account_id":"cool_guy@example.com",
							Element:br
								"character_id":"Wizard",
							Element:br
								"shard_id":42,
							Element:br
								"challenge_id":"challenge_Id",
							Element:br
								"challenge_type":"Kill NPC",
							Element:br
								"challenge_status":"Abandonded"
							Element:br
								}
							Element:br
								}
							Element:br
							Element:br
								NOTE: All parameters are required in JSON, except “shard_id” which is optional.
							Element:br
							Element:br
								%right%[[#top|Back to Top]]
							Element:br
								----
							Element:br
							Element:br
								%comment%!!!!'''Farmer (Event ID#47)'''
							Element:br
							Element:br
							Element:br
								%comment%This event records information regarding whether or not a player is a gold farmer, including what type of gold farmer they are (e.g. spammer, gatherer, mule, etc.). To log whether a player is a gold farmer, you need to pass the account and character ID, the farmer type, and the timestamp. Optionally, you may pass the shard ID.
							Element:br
							Element:br
								%comment%'+'''Impacted UI Features'''+'
							Element:br
								%comment%*User Metrics (Farming)
							Element:br
							Element:br
								%comment%'+'''Parameters'''+'
							Element:br
								%comment%|| border=1 rules=rows frame=hsides
							Element:br
								%comment%||! Type ||! Parameter ||! Default Value ||
							Element:br
								%comment%|| Date || TIMESTAMP || (Current Time) ||
							Element:br
								%comment%|| String || ACCOUNT ID || ''No Default Value'' ||
							Element:br
								%comment%|| String || CHARACTER ID || ACCOUNT ID ||
							Element:br
								%comment%|| Long || SHARD ID || 0 ||
							Element:br
								%comment%|| String || FARMER TYPE || Other [[Appendix#farmer-type|(See Appendix A for more types)]]||
							Element:br
							Element:br
							Element:br
								%comment%'+'''Sample Use'''+'
							Element:br
							Element:br
								%comment%*Java
							Element:br
								%comment%//Log if a player is a gold farmer\\
							Element:br
								%comment%public void ''aKApi''.logFarmer(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, FARMER_TYPE);
							Element:br
							Element:br
								%comment%*JavaScript
							Element:br
								%comment%//Log if a player is a gold farmer\\
							Element:br
								%comment%''aKApi''.logFarmer(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, FARMER_TYPE);
							Element:br
							Element:br
								%comment%*PHP
							Element:br
								%comment%//Log if a player is a gold farmer\\
							Element:br
								%comment%''$aKApi''->logFarmer(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, FARMER_TYPE);
							Element:br
							Element:br
								%comment%*JSON
							Element:br
								%comment%//Log if a player is a gold farmer\\
							Element:br
							Element:br
								%comment% {
							Element:br
								%comment% "timestamp":"2013-11-15T17:55:57.747Z",
							Element:br
								%comment% "data":{
							Element:br
								%comment% "type":47,
							Element:br
								%comment% "account_id":"cool_guy@example.com",
							Element:br
								%comment% "character_id":"Wizard",
							Element:br
								%comment% "shard_id":52,
							Element:br
								%comment% "farmer_type":"Banker"
							Element:br
								%comment% }
							Element:br
								%comment% }
							Element:br
							Element:br
								%comment%NOTE: All parameters are required in JSON, except “shard_id” which is optional.
							Element:br
								%comment%
							Element:br
								%comment%%right%[[#top|Back to Top]]
							Element:br
								%comment%----
							Element:br
							Element:br
								%comment%!!!!'''Reward (Event ID#49)'''
							Element:br
								%comment%
							Element:br
								%comment%
							Element:br
								%comment%This event records information regarding reward systems, through which rewards may be awarded for completion of a task or seniority. To log reward events, you need to pass the account and character IDs; the reward type, ID, and count; along with the timestamp. Optionally, you may pass the shard ID, and reward item type.
							Element:br
								%comment%
							Element:br
								%comment%'+'''Parameters'''+'
							Element:br
								%comment%|| border=1 rules=rows frame=hsides
							Element:br
								%comment%||! Type ||! Parameter ||! Default Value ||
							Element:br
								%comment%|| Date || TIMESTAMP || (Current Time) ||
							Element:br
								%comment%|| String || ACCOUNT ID || ''No Default Value'' ||
							Element:br
								%comment%|| String || CHARACTER ID || ACCOUNT ID ||
							Element:br
								%comment%|| Long || SHARD ID || 0 ||
							Element:br
								%comment%|| String || REWARD TYPE || ''No Default Value''* ||
							Element:br
								%comment%|| Long || REWARD ID || ''No Default Value'' ||
							Element:br
								%comment%|| String || ITEM TYPE || Other [[Appendix#item-type|(See Appendix A for more types)]]||
							Element:br
								%comment%|| Float || REWARD COUNT || ''No Default Value'' ||
							Element:br
								%comment%
							Element:br
								%comment%
							Element:br
								%comment%'+'''Sample Use'''+'
							Element:br
								%comment%
							Element:br
								%comment%*Java
							Element:br
								%comment%//Log that a reward event occurred\\
							Element:br
								%comment%public void ''aKApi''.logReward(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, REWARD_TYPE, REWARD_ID, ITEM_TYPE, REWARD_COUNT);
							Element:br
								%comment%
							Element:br
								%comment%*JavaScript
							Element:br
								%comment%//Log that a reward event occurred\\
							Element:br
								%comment%''aKApi''.logReward(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, REWARD_TYPE, REWARD_ID, ITEM_TYPE, REWARD_COUNT);
							Element:br
								%comment%
							Element:br
								%comment%*PHP
							Element:br
								%comment%//Log that a reward event occurred\\
							Element:br
								%comment%''$aKApi''->logReward(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, REWARD_TYPE, REWARD_ID, ITEM_TYPE, REWARD_COUNT);
							Element:br
								%comment%
							Element:br
								%comment%*JSON
							Element:br
								%comment%//Log that a reward event occurred\\
							Element:br
								%comment%
							Element:br
								%comment% {
							Element:br
								%comment% "timestamp":"2013-11-15T18:07:14.132Z",
							Element:br
								%comment% "data":{
							Element:br
								%comment% "type":49,
							Element:br
								%comment% "account_id":"cool_guy@example.com",
							Element:br
								%comment% "character_id":"Wizard",
							Element:br
								%comment% "shard_id":42.42,
							Element:br
								%comment% "reward_type":1,
							Element:br
								%comment% "reward_id":"1",
							Element:br
								%comment% "item_type":2,
							Element:br
								%comment% "reward_count":50.5
							Element:br
								%comment% }
							Element:br
								%comment% }
							Element:br
								%comment%
							Element:br
								%comment%NOTE: All parameters are required in JSON, except “shard_id” and “item_type” which are optional.
							Element:br
								%comment%
							Element:br
								%comment%%right%[[#top|Back to Top]]
							Element:br
								%comment%----
							Element:br
								%comment%
							Element:br
								%comment%!!!!'''Mob (Event ID#51)'''
							Element:br
							Element:br
							Element:br
								%comment%A Mob refers to a group of non-player characters (NPCs). This event records information on when a player confronts and kills a Mob. To log a mob event, you need to pass the account and character IDs, the shard ID, and the timestamp. Optionally, you may pass the shard ID and description of the kill.
							Element:br
							Element:br
								%comment%'+'''Impacted UI Features'''+'
							Element:br
								%comment%*User Metrics (Farming)
							Element:br
							Element:br
								%comment%'+'''Parameters'''+'
							Element:br
								%comment%|| border=1 rules=rows frame=hsides
							Element:br
								%comment%||! Type ||! Parameter ||! Default Value ||
							Element:br
								%comment%|| Date || TIMESTAMP || (Current Time) ||
							Element:br
								%comment%|| String || ACCOUNT ID || ''No Default Value'' ||
							Element:br
								%comment%|| String || CHARACTER ID || ACCOUNT ID ||
							Element:br
								%comment%|| Long || SHARD ID || 0 ||
							Element:br
								%comment%|| String || KILL MOB DESCRIPTION || Null ||
							Element:br
							Element:br
							Element:br
								%comment%'+'''Sample Use'''+'
							Element:br
							Element:br
								%comment%*Java
							Element:br
								%comment%//Log when a mob is defeated\\
							Element:br
								%comment%public void ''aKApi''.logMob(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, KILL_MOB_DESCRIPTION);
							Element:br
							Element:br
								%comment%*JavaScript
							Element:br
								%comment%//Log when a mob is defeated\\
							Element:br
								%comment%''aKApi''.logMob(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, KILL_MOB_DESCRIPTION);
							Element:br
							Element:br
								%comment%*PHP
							Element:br
								%comment%//Log when a mob is defeated\\
							Element:br
								%comment%''$aKApi''->logMob(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, KILL_MOB_DESCRIPTION);
							Element:br
							Element:br
								%comment%*JSON
							Element:br
								%comment%//Log when a mob is defeated\\
							Element:br
							Element:br
								%comment% {
							Element:br
								%comment% "timestamp":"2013-11-15T18:18:12.933Z",
							Element:br
								%comment% "data":{
							Element:br
								%comment% "type":51,
							Element:br
								%comment% "account_id":"cool_guy@example.com",
							Element:br
								%comment% "character_id":"Wizard",
							Element:br
								%comment% "shard_id":42.42,
							Element:br
								%comment% "mob_desc":"mob_desc"
							Element:br
								%comment% }
							Element:br
								%comment% }
							Element:br
							Element:br
								%comment%NOTE: All parameters are required in JSON, except “shard_id” and “mob_desc” which are optional.
							Element:br
							Element:br
								%comment%%right%[[#top|Back to Top]]
							Element:br
								%comment%----
							Element:br
							Element:br
								%comment%!!!!'''Resource (Event ID#56)''' - To Be Completed.
							Element:br
							Element:br
							Element:br
								%comment%A resource event refers to when a player acquires a non-item resource within the game, such as coins, gold, power, etc. To log resource events, you need to pass the account and character IDs; the resource type, count, and ID; along with the timestamp. Optionally, you may pass the shard ID.
							Element:br
							Element:br
								%comment%'+'''Impacted UI Features'''+'
							Element:br
								%comment%*System Metrics (Levels)
							Element:br
							Element:br
								%comment%'+'''Parameters'''+'
							Element:br
								%comment%|| border=1 rules=rows frame=hsides
							Element:br
								%comment%||! Type ||! Parameter ||! Default Value ||
							Element:br
								%comment%|| Date || TIMESTAMP || (Current Time) ||
							Element:br
								%comment%|| String || ACCOUNT ID || ''No Default Value'' ||
							Element:br
								%comment%|| String || CHARACTER ID || ACCOUNT ID ||
							Element:br
								%comment%|| Long || SHARD ID || 0 ||
							Element:br
								%comment%|| String || RESOURCE TYPE || Other [[Appendix#resource-type|(See Appendix A for more types)]]||
							Element:br
								%comment%|| String || RESOURCE ID || ''No Default Value'' ||
							Element:br
								%comment%|| Long || RESOURCE COUNT || ''No Default Value'' ||
							Element:br
							Element:br
							Element:br
								%comment%'+'''Sample Use'''+'
							Element:br
							Element:br
								%comment%*Java
							Element:br
								%comment%//Log that a resource event occurred\\
							Element:br
								%comment%public void ''aKApi''.logResource(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, RESOURCE_TYPE, RESOURCE_ID, RESOURCE_COUNT);
							Element:br
							Element:br
								%comment%*JavaScript
							Element:br
								%comment%//Log that a resource event occurred\\
							Element:br
								%comment%''aKApi''.logResource(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, RESOURCE_TYPE, RESOURCE_ID, RESOURCE_COUNT);
							Element:br
							Element:br
								%comment%*PHP
							Element:br
								%comment%//Log that a resource event occurred\\
							Element:br
								%comment%''$aKApi''->logResource(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, RESOURCE_TYPE, RESOURCE_ID, RESOURCE_COUNT);
							Element:br
							Element:br
								%comment%*JSON
							Element:br
								%comment%//Log that a resource event occurred\\
							Element:br
							Element:br
								%comment% {
							Element:br
								%comment% "timestamp":"2013-11-15T18:47:39.266Z",
							Element:br
								%comment% "data":{
							Element:br
								%comment% "type":56,
							Element:br
								%comment% "account_id":"cool_guy@example.com",
							Element:br
								%comment% "character_id":"Wizard", "shard_id":42.42,
							Element:br
								%comment% "shard_id":42.42,
							Element:br
								%comment% "resource_type":0,
							Element:br
								%comment% "resource_id":"1",
							Element:br
								%comment% "resource_count":3
							Element:br
								%comment% }
							Element:br
								%comment% }
							Element:br
							Element:br
								%comment%NOTE: All parameters are required in JSON, except “shard_id” which is optional.
							Element:br
							Element:br
								%comment%%right%[[#top|Back to Top]]
							Element:br
								%comment%----
							Element:br
							Element:br
								!!'''Item Events'''[[#ItemEvents]]
							Element:br
							Element:br
								Item events include those events that are related to the creation, use, and transaction of in-game items. Details on how to execute calls to log item events can be found below for each corresponding event.
							Element:br
							Element:br
								!!!!'''Initialize Item (Event ID#15)'''[[#InitializeItem]]
							Element:br
							Element:br
								This event records information regarding virtual items in the game. Such items may be made available by non-player characters, or they may be created by players in the game. Initializing an item also initializes the dimension table for the item, which is later referred to for all other item related events. To initialize an item, you need to pass the item ID, name, type, and segment, as well as the timestamp. Optionally, you may pass the account and character IDs of the creator.
							Element:br
							Element:br
								'''Note''': You must log the item creation information before any log or load command references the item ID.\\
							Element:br
								'''Note''': item_type may be any string, but use it consistently. some examples: “Raw materials”, “Mounts and pets”, “armor”, “tools”, “containers”\\
							Element:br
								'''Note''': item_value is a floating point value which would be used for the store price of the item \\
							Element:br
								'''Note''': item_segment may be “UGC” when the item is user-generated or “INGAME” when part of the original application \\
							Element:br
								'''Note''': IF the item_segment field is “UGC” then the creator_account_id and creator_character_id fields should be set appropriately, otherwise they should be empty strings \\
							Element:br
							Element:br
							Element:br
								'+'''Impacted UI Features'''+'
							Element:br
								*KPI
							Element:br
								*System Metrics (Items)
							Element:br
							Element:br
								'+'''Parameters'''+'
							Element:br
								|| border=1 rules=rows frame=hsides
							Element:br
								||! Type ||! Parameter ||! Default Value ||
							Element:br
								||Date ||TIMESTAMP ||(Current Time)||
							Element:br
								||Long ||ITEM ID ||0||
							Element:br
								||String ||ITEM NAME ||NA||
							Element:br
								||String ||ITEM TYPE ||Other [[Appendix#item-type| (See Appendix for more types)]] ||
							Element:br
								||String ||ITEM SEGMENT ||"UGC or INGAME"||
							Element:br
								||String ||CREATED BY ACCOUNT ID ||If ITEM_SEGMENT=UGC, then Required.||
							Element:br
								||String ||CREATED BY CHARACTER ID ||If ITEM_SEGMENT=UGC, then ACCOUNT_ID.||
							Element:br
							Element:br
							Element:br
								'+'''Sample Use'''+'
							Element:br
							Element:br
								*Java
							Element:br
								//Log item creation information\\
							Element:br
								public void ''aKApi.''loadInitItem(TIMESTAMP, ITEM_ID, ITEM_NAME, ITEM_TYPE, ITEM_SEGMENT, CREATED_BY_ACCOUNT_ID, CREATED_BY_CHARACTER_ID);
							Element:br
							Element:br
								*JavaScript
							Element:br
								//Log item creation information\\
							Element:br
								''aKApi''.loadInitItem(TIMESTAMP, ITEM_ID, ITEM_NAME, ITEM_TYPE, ITEM_SEGMENT, CREATED_BY_ACCOUNT_ID, CREATED_BY_CHARACTER_ID);
							Element:br
							Element:br
								*PHP
							Element:br
								//Log item creation information\\
							Element:br
								''$aKApi->''loadInitItem(TIMESTAMP, ITEM_ID, ITEM_NAME, ITEM_TYPE, ITEM_SEGMENT, CREATED_BY_ACCOUNT_ID, CREATED_BY_CHARACTER_ID);
							Element:br
							Element:br
								*JSON
							Element:br
								//Log item creation information\\
							Element:br
							Element:br
								{
							Element:br
								"timestamp":"2013-11-14T17:11:33.720Z",
							Element:br
								"data":{
							Element:br
								"type":15,
							Element:br
								"item_id":66,
							Element:br
								"item_name":"the big blaster gun",
							Element:br
								"item_type":"weapon",
							Element:br
								"item_segment":"UGC",
							Element:br
								"account_id":"cool_guy@example.com",
							Element:br
								"character_id":"Wizard"
							Element:br
								}
							Element:br
								}
							Element:br
							Element:br
								NOTE: All parameters are required in JSON, except “account_id” and “character_id” which are optional.
							Element:br
							Element:br
								%right%[[#top|Back to Top]]
							Element:br
								----
							Element:br
							Element:br
								!!!!'''Item Used (Event ID#16)'''[[#ItemUsed]]
							Element:br
							Element:br
								This event records information regarding the usage of items in the game, such as the usage location, and includes account and character information for the user who used the item. To log an item's use, you need to pass the account and character IDs; the character level; the item ID, name, and count; the area ID, name, and position; as well as the timestamp. Optionally, you may pass the shard ID.
							Element:br
							Element:br
								'+'''Impacted UI Features'''+'
							Element:br
								*KPI
							Element:br
								*System Metrics (Items)
							Element:br
							Element:br
								'+'''Parameters'''+'
							Element:br
								|| border=1 rules=rows frame=hsides
							Element:br
								||! Type ||! Parameter ||! Default Value ||
							Element:br
								||Date ||EVENT TIMESTAMP ||(Current Time)||
							Element:br
								||String ||ACCOUNT ID ||''No Default Value''||
							Element:br
								||String ||CHARACTER ID ||ACCOUNT_ID||
							Element:br
								||Long ||CHARACTER LEVEL ||If Generic Character then Account Level; If no concept of levels then 0.||
							Element:br
								||Long ||SHARD ID ||0||
							Element:br
								||Long ||ITEM ID ||If ITEM_ID is empty and ITEM_NAME is not empty, use 0.||
							Element:br
								||String ||ITEM NAME ||If ITEM_ID is not empty and ITEM_NAME is empty, use NA.||
							Element:br
								||Integer ||ITEM COUNT ||''No Default Value''||
							Element:br
								||Long ||AREA ID ||0||
							Element:br
								||String ||AREA NAME ||NA||
							Element:br
								||Float ||POSITION X ||0||
							Element:br
								||Float ||POSITION Y ||0||
							Element:br
								||Float ||POSITION Z ||0||
							Element:br
							Element:br
								'+'''Sample Use'''+'
							Element:br
							Element:br
								*Java
							Element:br
								//Log that an item was used\\
							Element:br
								public void ''aKApi.''logItem(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, SHARD_ID, ITEM_ID, ITEM_NAME, ITEM_COUNT, AREA_ID, AREA_NAME, POSITION_X, POSITION_Y, POSITION_Z);
							Element:br
							Element:br
								*JavaScript
							Element:br
								//Log that an item was used\\
							Element:br
								''aKApi.''logItem(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, SHARD_ID, ITEM_ID, ITEM_NAME, ITEM_COUNT, AREA_ID, AREA_NAME, POSITION_X, POSITION_Y, POSITION_Z);
							Element:br
							Element:br
								*PHP
							Element:br
								''//Log that an item was used\\
							Element:br
								''$aKApi->''logItem(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, SHARD_ID, ITEM_ID, ITEM_NAME, ITEM_COUNT, AREA_ID, AREA_NAME, POSITION_X, POSITION_Y, POSITION_Z);
							Element:br
							Element:br
								*JSON
							Element:br
								//Log that an item was used\\
							Element:br
							Element:br
								{
							Element:br
								"timestamp":"2013-11-14T17:42:49.185Z",
							Element:br
								"data":{
							Element:br
								"type":16,
							Element:br
								"account_id":"cool_guy@example.com",
							Element:br
								"character_id":"wizard",
							Element:br
								"character_lvl":52,
							Element:br
								"shard_id":42,
							Element:br
								"item_id":66,
							Element:br
								"item_name":"The Blaster Gun",
							Element:br
								"item_count":1,
							Element:br
								"area_id":42,
							Element:br
								"area_name":"Area_Name”,
							Element:br
								"position_x":678,
							Element:br
								"position_y":231,
							Element:br
								"position_z":517
							Element:br
								}
							Element:br
								}
							Element:br
							Element:br
								NOTE: All parameters are required in JSON, except “shard_id” which is optional.
							Element:br
							Element:br
								%right%[[#top|Back to Top]]
							Element:br
								----
							Element:br
								%comment%!!!!'''Item Transaction (Event ID#17)'''[[#ItemTransaction]] - To Be Completed.
							Element:br
							Element:br
								%comment%This event records information regarding the purchase of items in the game using either real world money or virtual currency that may be exclusive to the game. To log an item transaction, you need to pass the account and character IDs; the item ID, name, and price; the currency type and currency value; the transaction type; as well as the timestamp. Optionally, you may pass the shard ID, and virtual currency type and count.
							Element:br
							Element:br
								%comment%'+'''Impacted UI Features'''+'
							Element:br
								%comment%*KPI
							Element:br
								%comment%*User Metrics (Churn)
							Element:br
								%comment%*Basic Package (Churn)
							Element:br
							Element:br
								%comment%'+'''Parameters'''+'
							Element:br
								%comment%|| border=1 rules=rows frame=hsides
							Element:br
								%comment%||! Type ||! Parameter ||! Default Value ||
							Element:br
								%comment%||Date ||TIMESTAMP ||(Current Time)||
							Element:br
								%comment%||String ||ACCOUNT ID ||''No Default Value''||
							Element:br
								%comment%||String ||CHARACTER ID ||ACCOUNT_ID||
							Element:br
								%comment%||Long ||SHARD ID ||0||
							Element:br
								%comment%||Long ||ITEM ID ||If ITEM_ID is empty and ITEM_NAME is not empty, use 0.||
							Element:br
								%comment%||String ||ITEM NAME ||If ITEM_ID is not empty and ITEM_NAME is empty, use NA.||
							Element:br
								%comment%||Float ||ITEM PRICE ||''No Default Value''||
							Element:br
								%comment%||Integer ||TRANSACTION TYPE ||''No Default Value''*||
							Element:br
								%comment%||Integer ||CURRENCY TYPE ||''No Default Value''**||
							Element:br
								%comment%||String ||VIRTUAL CURRENCY TYPE || If CURRENCY_TYPE=1 then required; else null.||
							Element:br
								%comment%||Float ||CURRENCY VALUE ||''No Default Value''||
							Element:br
								%comment%||Integer ||VIRTUAL CURRENCY COUNT || Null||
							Element:br
							Element:br
								%comment%[- *Transaction Type must be 0 or 1, where 0 equals 'Spent' and 1 equals 'Acquired'.-]\\
							Element:br
								%comment%[- **Currency Type must be 0 or 1, where 0 equals 'Real' and 1 equals 'Virtual Currency'.-]
							Element:br
							Element:br
								%comment%'+'''Sample Use'''+'
							Element:br
							Element:br
								%comment%*Java
							Element:br
								%comment%//Log that an item transaction occurred\\
							Element:br
								%comment%public void ''aKApi.''logItemTransaction(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, ITEM_ID, ITEM_NAME, ITEM_PRICE, TRANSACTION_TYPE, CURRENCY_TYPE, VIRTUAL_CURRENCY_TYPE, CURRENCY_VALUE, VIRTUAL_CURRENCY_COUNT);
							Element:br
							Element:br
								%comment%*JavaScript
							Element:br
								%comment%//Log that an item transaction occurred\\
							Element:br
								%comment%''aKApi.''logItemTransaction(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, ITEM_ID, ITEM_NAME, ITEM_PRICE, TRANSACTION_TYPE, CURRENCY_TYPE, VIRTUAL_CURRENCY_TYPE, CURRENCY_VALUE, VIRTUAL_CURRENCY_COUNT);
							Element:br
							Element:br
								%comment%*PHP
							Element:br
								%comment%//Log that an item transaction occurred\\
							Element:br
								%comment%''$aKApi->''logItemTransaction(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, ITEM_ID, ITEM_NAME, ITEM_PRICE, TRANSACTION_TYPE, CURRENCY_TYPE, VIRTUAL_CURRENCY_TYPE, CURRENCY_VALUE, VIRTUAL_CURRENCY_COUNT);
							Element:br
							Element:br
								%comment%*JSON
							Element:br
								%comment%//Log that an item transaction occurred\\
							Element:br
							Element:br
								%comment% {
							Element:br
								%comment% "timestamp":"2013-11-14T17:52:58.876Z",
							Element:br
								%comment% "data":{
							Element:br
								%comment% "type":17,
							Element:br
								%comment% "account_id":"cool_guy@example.com",
							Element:br
								%comment% "character_id":"wizard",
							Element:br
								%comment% "shard_id":42,
							Element:br
								%comment% "item_id":66,
							Element:br
								%comment% "item_name":"the big blaster gun",
							Element:br
								%comment% "item_price":3,
							Element:br
								%comment% "transaction_type":0,
							Element:br
								%comment% "currency_type":0,
							Element:br
								%comment% "virtual_currency_label":"",
							Element:br
								%comment% "currency_value”:3,
							Element:br
								%comment% "virtual_currency_count”:1
							Element:br
								%comment% }
							Element:br
								%comment% }
							Element:br
							Element:br
								%comment%NOTE: All parameters are required in JSON, except “shard_id”, “virtual_currency_label”, and “virtual_currency_count” which are optional.
							Element:br
							Element:br
								%comment%%right%[[#top|Back to Top]]
							Element:br
								%comment%----[[#ugc-rating]]
							Element:br
								%comment%!!!!'''User Generated Content (UGC) Rating (Event ID#19)''' - To Be Completed.
							Element:br
							Element:br
							Element:br
								%comment%This event records information regarding the creation of in-game items and artifacts, including how items have been rated by other players. To log a UGC rating, you need to pass the account and character IDs; the item ID and name; the UGC rating; and timestamp. Optionally, you may pass the shard ID.
							Element:br
							Element:br
								%comment%'+'''Parameters'''+'
							Element:br
								%comment%|| border=1 rules=rows frame=hsides
							Element:br
								%comment%||! Type ||! Parameter ||! Default Value ||
							Element:br
								%comment%|| Date || RATING TIMESTAMP || ''No Default Value'' ||
							Element:br
								%comment%|| String || ACCOUNT ID || ''No Default Value'' ||
							Element:br
								%comment%|| String || CHARACTER ID || ACCOUNT ID ||
							Element:br
								%comment%|| Long || SHARD ID || 0 ||
							Element:br
								%comment%|| Long || ITEM ID || 0 ||
							Element:br
								%comment%|| String || ITEM NAME || NA ||
							Element:br
								%comment%|| String || UGC RATING || 1 ||
							Element:br
							Element:br
								%comment%'+'''Sample Use'''+'
							Element:br
							Element:br
								%comment%*Java
							Element:br
								%comment%//Log a UGC rating\\
							Element:br
								%comment%public void ''aKApi''.loadUgcRating(RATING_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, ITEM_ID, ITEM_NAME, UGC_RATING);
							Element:br
							Element:br
								%comment%*JavaScript
							Element:br
								%comment%//Log a UGC rating\\
							Element:br
								%comment%''aKApi''.loadUgcRating(RATING_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, ITEM_ID, ITEM_NAME, UGC_RATING);
							Element:br
							Element:br
								%comment%*PHP
							Element:br
								%comment%//Log a UGC rating\\
							Element:br
								%comment%''$aKApi''->loadUgcRating(RATING_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, ITEM_ID, ITEM_NAME, UGC_RATING);
							Element:br
							Element:br
								%comment%*JSON
							Element:br
								%comment%//Log a UGC rating\\
							Element:br
							Element:br
								%comment% {
							Element:br
								%comment% "timestamp":"2013-11-14T18:24:36.601Z",
							Element:br
								%comment% "data":{
							Element:br
								%comment% "type":19,
							Element:br
								%comment% "account_id":"cool_guy@example.com",
							Element:br
								%comment% "character_id":"Wizard",
							Element:br
								%comment% "shard_id":42,
							Element:br
								%comment% "item_id":764,
							Element:br
								%comment% "item_name":"crafty button",
							Element:br
								%comment% "ugc_rating":"theUgcRating"
							Element:br
								%comment% }
							Element:br
								%comment% }
							Element:br
							Element:br
								%comment%NOTE: All parameters are required in JSON, except “shard_id” which is optional.
							Element:br
							Element:br
								%comment%%right%[[#top|Back to Top]]
							Element:br
								%comment%----
							Element:br
							Element:br
								%comment%!!!!'''User Generated Content (UGC) Copy (Event ID#46)''' - To Be Completed.
							Element:br
							Element:br
							Element:br
								%comment%This event records information regarding the copying of an in-game item that was created by another player, not including items built-in by the gaming company. To log when a UGC is copied, you need to pass the copier's account and character IDs; the item ID and name; along with the timestamp. Optionally, you may pass the shard ID.
							Element:br
							Element:br
								%comment%For related information, see User [[#ugc-rating |Generated Content (UGC) Rating.]]
							Element:br
							Element:br
								%comment%'+'''Impacted UI Features'''+'
							Element:br
								%comment%*KPI
							Element:br
							Element:br
								%comment%'+'''Parameters'''+'
							Element:br
								%comment%|| border=1 rules=rows frame=hsides
							Element:br
								%comment%||! Type ||! Parameter ||! Default Value ||
							Element:br
								%comment%|| Date || ITEM COPY TIMESTAMP || (Current Time) ||
							Element:br
								%comment%|| String || COPY ACCOUNT ID || ''No Default Value'' ||
							Element:br
								%comment%|| String || COPY CHARACTER ID || COPY_ACCOUNT_ID ||
							Element:br
								%comment%|| Long || SHARD ID || 0 ||
							Element:br
								%comment%|| Long ||ITEM ID || If ITEM ID is empty, and ITEM NAME is not empty, use 0. ||
							Element:br
								%comment%|| String ||ITEM NAME || If ITEM ID is not empty, and ITEM NAME is empty, use NA. ||
							Element:br
							Element:br
								%comment%'+'''Sample Use'''+'
							Element:br
							Element:br
								%comment%*Java
							Element:br
								%comment%//Log when UGC is copied\\
							Element:br
								%comment%public void ''aKApi''.trackUgcCopy(ITEM_COPY_TIMESTAMP, COPY_ACCOUNT_ID, COPY_CHARACTER_ID, SHARD_ID, ITEM_ID, ITEM_NAME);
							Element:br
							Element:br
								%comment%*JavaScript
							Element:br
								%comment%//Log when UGC is copied\\
							Element:br
								%comment%''aKApi''.trackUgcCopy(ITEM_COPY_TIMESTAMP, COPY_ACCOUNT_ID, COPY_CHARACTER_ID, SHARD_ID, ITEM_ID, ITEM_NAME);
							Element:br
							Element:br
								%comment%*PHP
							Element:br
								%comment%//Log when UGC is copied\\
							Element:br
								%comment%''$aKApi''->trackUgcCopy(ITEM_COPY_TIMESTAMP, COPY_ACCOUNT_ID, COPY_CHARACTER_ID, SHARD_ID, ITEM_ID, ITEM_NAME);
							Element:br
							Element:br
								%comment%*JSON
							Element:br
								%comment%//Log when UGC is copied\\
							Element:br
							Element:br
								%comment% {
							Element:br
								%comment% "timestamp":"2013-11-15T17:50:53.188Z",
							Element:br
								%comment% "data":{
							Element:br
								%comment% "type":46,
							Element:br
								%comment% "account_id":"cool_guy@example.com",
							Element:br
								%comment% "character_id":"Wizard",
							Element:br
								%comment% "shard_id":42.42,
							Element:br
								%comment% "item_id":8729,
							Element:br
								%comment% "item_name":"GMO Grain"
							Element:br
								%comment% }
							Element:br
								%comment% }
							Element:br
							Element:br
								%comment%NOTE: All parameters are required in JSON, except “shard_id” which is optional.
							Element:br
							Element:br
								%comment%%right%[[#top|Back to Top]]
							Element:br
								%comment%----
							Element:br
							Element:br
							Element:br
								%comment%!!!!'''Productivity (Event ID#55)''' - To Be Completed.
							Element:br
							Element:br
								%comment%Productivity refers to events where players craft or harvest items within the game. To log productivity events, you need to pass the account and character IDs, the productivity type, and the timestamp. Optionally, you may pass the shard ID.
							Element:br
							Element:br
								%comment%'+'''Parameters'''+'
							Element:br
								%comment%|| border=1 rules=rows frame=hsides
							Element:br
								%comment%||! Type ||! Parameter ||! Default Value ||
							Element:br
								%comment%|| Date || TIMESTAMP || (Current Time) ||
							Element:br
								%comment%|| String || ACCOUNT ID || ''No Default Value'' ||
							Element:br
								%comment%|| String || CHARACTER ID || ACCOUNT ID ||
							Element:br
								%comment%|| Long || SHARD ID || 0 ||
							Element:br
								%comment%|| String || PRODUCTIVITY TYPE || Other [[Appendix#productivity-type |(See Appendix A for more types)]]||
							Element:br
							Element:br
							Element:br
								%comment%'+'''Sample Use'''+'
							Element:br
							Element:br
								%comment%*Java
							Element:br
								%comment%//Log a productivity event occurred\\
							Element:br
								%comment%public void ''aKApi''.logProductivity(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, PRODUCTIVITY_TYPE);
							Element:br
							Element:br
								%comment%*JavaScript
							Element:br
								%comment%//Log a productivity event occurred\\
							Element:br
								%comment%''aKApi''.logProductivity(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, PRODUCTIVITY_TYPE);
							Element:br
							Element:br
								%comment%*PHP
							Element:br
								%comment%//Log a productivity event occurred\\
							Element:br
								%comment%''$aKApi''->logProductivity(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, PRODUCTIVITY_TYPE););
							Element:br
							Element:br
								%comment%*JSON
							Element:br
								%comment%//Log a productivity event occurred\\
							Element:br
							Element:br
								%comment% {
							Element:br
								%comment% "timestamp":"2013-11-15T18:42:06.056Z",
							Element:br
								%comment% "data":{
							Element:br
								%comment% "type":55,
							Element:br
								%comment% "account_id":"cool_guy@example.com",
							Element:br
								%comment% "character_id":"Wizard",
							Element:br
								%comment% "shard_id":42.42,
							Element:br
								%comment% "productivity_type":"productivity_type"
							Element:br
								%comment% }
							Element:br
								%comment% }
							Element:br
							Element:br
								%comment%NOTE: All parameters are required in JSON, except “shard_id” which is optional.
							Element:br
							Element:br
								%comment%%right%[[#top|Back to Top]]
							Element:br
								%comment%----
							Element:br
							Element:br
							Element:br
								!!'''Social Group Events'''[[#GroupEvents]]
							Element:br
							Element:br
								Group events include those events involving player interaction with a group or guild, such as entry, exit, or a player's position within a guild (e.g. Guild Leader). A guild is analogous to an organization in many online games. Details on how to execute calls to log group events can be found below for each corresponding event.
							Element:br
							Element:br
							Element:br
								!!!!'''Social Group Enter (Event ID#4)'''
							Element:br
							Element:br
								This event records the time at which a user joins a group. In this case, groups are likely to be impermanent. Note that grouping is not applicable for solo games. To log a user's entry into a group you need to pass the account, character, and group IDs; the character level, and timestamp of entry. Optionally, you may pass the shard ID.
							Element:br
							Element:br
								'+'''Impacted UI Features'''+'
							Element:br
								*System Metrics (Social)
							Element:br
							Element:br
								'+'''Parameters'''+'
							Element:br
								|| border=1 rules=rows frame=hsides
							Element:br
								||! Type ||! Parameter ||! Default Value ||
							Element:br
								|| Date || ENTER GROUP TIMESTAMP || (Current Time) ||
							Element:br
								|| String || ACCOUNT ID || ''No Default Value'' ||
							Element:br
								|| String || CHARACTER ID || ACCOUNT ID ||
							Element:br
								|| Long || CHARACTER LEVEL || 0 ||
							Element:br
								|| Long || SHARD ID || 0 ||
							Element:br
								|| Long || GROUP ID || ''No Default Value'' ||
							Element:br
							Element:br
								'+'''Sample Use'''+'
							Element:br
							Element:br
								*Java
							Element:br
								//Log when a user enters a group\\
							Element:br
								public void ''aKApi''.logEnterGroup(ENTER_GROUP_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, SHARD_ID, GROUP_ID);
							Element:br
							Element:br
								*JavaScript
							Element:br
								//Log when a user enters a group\\
							Element:br
								''aKApi''.logEnterGroup(ENTER_GROUP_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, SHARD_ID, GROUP_ID);
							Element:br
							Element:br
								*PHP
							Element:br
								//Log when a user enters a group\\
							Element:br
								''$aKApi''->logEnterGroup(ENTER_GROUP_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, SHARD_ID, GROUP_ID);
							Element:br
							Element:br
								*JSON
							Element:br
								//Log when a user enters a group\\
							Element:br
							Element:br
								{
							Element:br
								"timestamp":"2013-11-14T14:10:36.792Z",
							Element:br
								"data":{
							Element:br
								"type":4,
							Element:br
								"account_id":"cool_guy@example.com",
							Element:br
								"character_id":"wizard",
							Element:br
								"character_lvl":50,
							Element:br
								"shard_id":42,
							Element:br
								"group_id":42
							Element:br
								}
							Element:br
								}
							Element:br
							Element:br
								NOTE: All parameters are required in JSON, except “shard_id” which is optional.
							Element:br
							Element:br
								%right%[[#top|Back to Top]]
							Element:br
								----
							Element:br
							Element:br
								!!!!'''Social Group Exit (Event ID#5)'''
							Element:br
							Element:br
							Element:br
								This event records the time at which a user leaves a group. To log a user's exit from a group you need to pass the account, character, and group IDs; the character level; and timestamp of exit. Optionally, you may pass the shard ID>
							Element:br
							Element:br
								For related information, see [[#group-enter |Group Enter]].
							Element:br
							Element:br
								'+'''Impacted UI Features'''+'
							Element:br
								*System Metrics (Social)
							Element:br
							Element:br
								'+'''Parameters'''+'
							Element:br
								|| border=1 rules=rows frame=hsides
							Element:br
								||! Type ||! Parameter ||! Default Value ||
							Element:br
								|| Date || LEAVE GROUP TIMESTAMP || (Current Time) ||
							Element:br
								|| String || ACCOUNT ID || ''No Default Value'' ||
							Element:br
								|| String || CHARACTER ID || ACCOUNT ID ||
							Element:br
								|| Long || CHARACTER LEVEL || 0 ||
							Element:br
								|| Long || SHARD ID || 0 ||
							Element:br
								|| Long || GROUP ID || ''No Default Value'' ||
							Element:br
							Element:br
								'+'''Sample Use'''+'
							Element:br
							Element:br
								*Java
							Element:br
								//Log when a user exits a group\\
							Element:br
								public void ''aKApi''.logExitGroup(LEAVE_GROUP_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, SHARD_ID, GROUP_ID);
							Element:br
							Element:br
								*JavaScript
							Element:br
								//Log when a user exits a group\\
							Element:br
								''aKApi''.logExitGroup(LEAVE_GROUP_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, SHARD_ID, GROUP_ID);
							Element:br
							Element:br
								*PHP
							Element:br
								//Log when a user exits a group\\
							Element:br
								''$aKApi''->logExitGroup(LEAVE_GROUP_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, SHARD_ID, GROUP_ID);
							Element:br
							Element:br
								*JSON
							Element:br
								//Log when a user exits a group\\
							Element:br
								{
							Element:br
								"timestamp":"2013-11-14T14:16:15.375Z",
							Element:br
								"data":{
							Element:br
								"type":5,
							Element:br
								"account_id":"cool_guy@example.com",
							Element:br
								"character_id":"Wizard",
							Element:br
								"character_lvl":50,
							Element:br
								"shard_id":42,
							Element:br
								"group_id":42
							Element:br
								}
							Element:br
								}
							Element:br
							Element:br
								NOTE: All parameters are required in JSON, except “shard_id” which is optional.
							Element:br
							Element:br
								%right%[[#top|Back to Top]]
							Element:br
								----
							Element:br
								[[#guild-enter]]
							Element:br
								!!!!'''Enter Guild (Event ID#41)'''
							Element:br
							Element:br
							Element:br
								This event records information regarding when a player becomes part of a guild and whether they are the leader of the guild, or not. To log a player's entry into a guild, you need to pass the user's account ID, character ID, character level, guild ID, along with the time of entry. Optionally, you can pass their shard ID.
							Element:br
							Element:br
								'+'''Impacted UI Features'''+'
							Element:br
								*System Metrics (Social)
							Element:br
							Element:br
								'+'''Parameters'''+'
							Element:br
								|| border=1 rules=rows frame=hsides
							Element:br
								||! Type ||! Parameter ||! Default Value ||
							Element:br
								|| Date || EVENT TIMESTAMP || (Current Time) ||
							Element:br
								|| String || ACCOUNT ID || ''No Default Value'' ||
							Element:br
								|| String || CHARACTER ID || ACCOUNT ID ||
							Element:br
								|| Long || CHARACTER LEVEL || 0 ||
							Element:br
								|| Long || SHARD ID || 0 ||
							Element:br
								|| Long || GUILD ID || ''No Default Value'' ||
							Element:br
							Element:br
								'+'''Sample Use'''+'
							Element:br
							Element:br
								*Java
							Element:br
								//Log when a player enters a guild\\
							Element:br
								public void ''aKApi''.logEnterGuild(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, SHARD_ID, GUILD_ID);
							Element:br
							Element:br
								*JavaScript
							Element:br
								//Log when a player enters a guild\\
							Element:br
								''aKApi''.logEnterGuild(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, SHARD_ID, GUILD_ID);
							Element:br
							Element:br
								*PHP
							Element:br
								//Log when a player enters a guild\\
							Element:br
								''$aKApi''->logEnterGuild(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, SHARD_ID, GUILD_ID);
							Element:br
							Element:br
								*JSON
							Element:br
								//Log when a player enters a guild\\
							Element:br
							Element:br
								{
							Element:br
								"timestamp":"2013-11-15T16:21:24.890Z",
							Element:br
								"data":{
							Element:br
								"type":41,
							Element:br
								"account_id":"cool_guy@example.com",
							Element:br
								"character_id":"Wizard",
							Element:br
								"character_lvl":52,
							Element:br
								"shard_id":1,
							Element:br
								"guild_id":42
							Element:br
								}
							Element:br
								}
							Element:br
							Element:br
								NOTE: All parameters are required in JSON, except “shard_id” which is optional.
							Element:br
							Element:br
								%right%[[#top|Back to Top]]
							Element:br
								----
							Element:br
							Element:br
								!!!!'''Exit Guild (Event ID#42)'''
							Element:br
							Element:br
							Element:br
								This event records information regarding exiting a guild, including the guild exited and reason for leaving such as being evicted, leaving voluntarily, etc. To log a player's exit from a guild, you need to pass the user's account ID, character ID, character level, guild ID, along with the time of entry and reason for exiting the guild. Optionally, you can pass their shard ID.
							Element:br
							Element:br
								'+'''Impacted UI Features'''+'
							Element:br
								*System Metrics (Social)
							Element:br
							Element:br
								'+'''Parameters'''+'
							Element:br
								|| border=1 rules=rows frame=hsides
							Element:br
								||! Type ||! Parameter ||! Default Value ||
							Element:br
								|| Date || EVENT TIMESTAMP || (Current Time) ||
							Element:br
								|| String || ACCOUNT ID || ''No Default Value'' ||
							Element:br
								|| String || CHARACTER ID || ACCOUNT ID ||
							Element:br
								|| Long || CHARACTER LEVEL || 0 ||
							Element:br
								|| Long || SHARD ID || 0 ||
							Element:br
								|| Long || GUILD ID || ''No Default Value'' ||
							Element:br
								|| String || GUILD EXIT REASON || NA ||
							Element:br
							Element:br
								'+'''Sample Use'''+'
							Element:br
							Element:br
								*Java
							Element:br
								//Log when and why a player exits a guild\\
							Element:br
								public void ''aKApi''.logExitGuild(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, SHARD_ID, GUILD_ID, GUILD_EXIT_REASON);
							Element:br
							Element:br
								*JavaScript
							Element:br
								//Log when and why a player exits a guild\\ ''aKApi''.logExitGuild(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, SHARD_ID, GUILD_ID, GUILD_EXIT_REASON);
							Element:br
							Element:br
								*PHP
							Element:br
								//Log when and why a player exits a guild\\
							Element:br
								''$aKApi''->logExitGuild(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, SHARD_ID, GUILD_ID, GUILD_EXIT_REASON);
							Element:br
							Element:br
								*JSON
							Element:br
								//Log when and why a player exits a guild\\
							Element:br
							Element:br
								{
							Element:br
								"timestamp":"2013-11-15T17:28:35.133Z",
							Element:br
								"data":{
							Element:br
								"type":42,
							Element:br
								"account_id":"cool_guy@example.com",
							Element:br
								"character_id":"Wizard",
							Element:br
								"character_lvl":52,
							Element:br
								"shard_id":1,
							Element:br
								"guild_id":42,
							Element:br
								"guild_exit_reason":"hacking"
							Element:br
								}
							Element:br
								}
							Element:br
							Element:br
								NOTE: All parameters are required in JSON, except “shard_id” which is optional.
							Element:br
							Element:br
								%right%[[#top|Back to Top]]
							Element:br
								----
							Element:br
							Element:br
								!!!!'''Guild Leader (Event ID#45)'''
							Element:br
							Element:br
							Element:br
								This event records information regarding a player's position within a guild (i.e. whether they are the leader of a guild, and if so, which guild). To log if a player is a guild leader, you need to pass the user's account ID, character ID, guild ID, along with the timestamp.
							Element:br
							Element:br
								'+'''Parameters'''+'
							Element:br
								|| border=1 rules=rows frame=hsides
							Element:br
								||! Type ||! Parameter ||! Default Value ||
							Element:br
								|| Date || EVENT TIMESTAMP || (Current Time) ||
							Element:br
								|| String || ACCOUNT ID || ''No Default Value'' ||
							Element:br
								|| String || CHARACTER ID || ACCOUNT ID ||
							Element:br
								|| Long || GUILD ID || ''No Default Value'' ||
							Element:br
							Element:br
							Element:br
								'+'''Sample Use'''+'
							Element:br
							Element:br
								*Java
							Element:br
								//Log if a player is a guild leader\\
							Element:br
								public void ''aKApi''.putGuildLeader(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, GUILD_ID);
							Element:br
							Element:br
								*JavaScript
							Element:br
								//Log if a player is a guild leader\\
							Element:br
								''aKApi''.putGuildLeader(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, GUILD_ID);
							Element:br
							Element:br
								*PHP
							Element:br
								//Log if a player is a guild leader\\
							Element:br
								''$aKApi''->putGuildLeader(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, GUILD_ID);
							Element:br
							Element:br
								*JSON
							Element:br
								//Log if a player is a guild leader\\
							Element:br
							Element:br
								{
							Element:br
								"timestamp":"2013-11-15T17:45:12.627Z",
							Element:br
								"data":{
							Element:br
								"type":45,
							Element:br
								"account_id":"cool_guy@example.com",
							Element:br
								"character_id":"Wizard",
							Element:br
								"guild_id":777
							Element:br
								}
							Element:br
								}
							Element:br
							Element:br
								NOTE: All parameters are required in JSON.
							Element:br
							Element:br
								%right%[[#top|Back to Top]]
							Element:br
								----
							Element:br
							Element:br
								!!'''Environment Events'''[[#EnvironmentEvents]]
							Element:br
							Element:br
								Environment events include those events that are related to in-game levels and areas that players may encounter. Details on how to execute calls to log environment events can be found below for each corresponding event.
							Element:br
							Element:br
							Element:br
								!!!!'''Level Begin (Event ID#27)'''[[#LevelBegin]]
							Element:br
							Element:br
								This event records information regarding the time at which a player begins a level. To log when a player begins a level, you need to pass the account and character ID, the character level, the area ID and name, the position, and the timestamp. Optionally, you may pass the shard ID.
							Element:br
							Element:br
								Note that if there is no concept of levels in your application this event need not be used.
							Element:br
							Element:br
								'+'''Impacted UI Features'''+'
							Element:br
								*KPI
							Element:br
								*System Metrics (Levels)
							Element:br
								*User Metrics (Churn)
							Element:br
							Element:br
								'+'''Parameters'''+'
							Element:br
								|| border=1 rules=rows frame=hsides
							Element:br
								||! Type ||! Parameter ||! Default Value ||
							Element:br
								||Date ||LEVEL BEGIN TIMESTAMP ||(Current Time)||
							Element:br
								||String ||ACCOUNT ID ||''No Default Value''||
							Element:br
								||String ||CHARACTER ID ||ACCOUNT_ID||
							Element:br
								||Long ||CHARACTER LEVEL ||If Generic Character then Account Level.||
							Element:br
								||Long ||SHARD ID ||0||
							Element:br
								||Long ||AREA ID ||0||
							Element:br
								||Float ||POSITION X ||0||
							Element:br
								||Float ||POSITION Y ||0||
							Element:br
								||Float ||POSITION Z ||0||
							Element:br
								||String ||AREA NAME ||NA||
							Element:br
							Element:br
								'+'''Sample Use'''+'
							Element:br
							Element:br
								*Java
							Element:br
								//Log when a player begins a level\\
							Element:br
								public void ''aKApi.''levelBegin(LEVEL_BEGIN_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, SHARD_ID, AREA_ID, POSITION_X, POSITION_Y, POSITION_Z, AREA_NAME);
							Element:br
							Element:br
								*JavaScript
							Element:br
								//Log when a player begins a level\\
							Element:br
								''aKApi.''levelBegin(LEVEL_BEGIN_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, SHARD_ID, AREA_ID, POSITION_X, POSITION_Y, POSITION_Z, AREA_NAME);
							Element:br
							Element:br
								*PHP
							Element:br
								//Log when a player begins a level\\
							Element:br
								''$aKApi->''levelBegin(LEVEL_BEGIN_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, SHARD_ID, AREA_ID, POSITION_X, POSITION_Y, POSITION_Z, AREA_NAME);
							Element:br
							Element:br
								*JSON
							Element:br
								//Log when a player begins a level\\
							Element:br
							Element:br
								{
							Element:br
								"timestamp":"2013-11-15T13:41:08.559Z",
							Element:br
								"data":{
							Element:br
								"type":27,
							Element:br
								"account_id":"cool_guy@example.com",
							Element:br
								"character_id":"Wizard",
							Element:br
								"character_lvl":52,
							Element:br
								"shard_id":42,
							Element:br
								"area_id":2,
							Element:br
								"position_x":678,
							Element:br
								"position_y":231,
							Element:br
								"position_z":517,
							Element:br
								"area_name”:”Area_Name”
							Element:br
								}
							Element:br
								}
							Element:br
							Element:br
								NOTE: All parameters are required in JSON, except “shard_id” which is optional.
							Element:br
							Element:br
								%right%[[#top|Back to Top]]
							Element:br
								----
							Element:br
							Element:br
								!!!!'''Level End (Event ID#28)'''[[#LevelEnd]]
							Element:br
							Element:br
								This event records information regarding the time at which a player ends or completes a level. To log when a player ends a level, you need to pass the account and character ID, the character level, the area ID and name, the position, and the timestamp. Optionally, you may pass the shard ID.
							Element:br
							Element:br
								Note that if there is no concept of levels in your application this event need not be used.
							Element:br
							Element:br
								'+'''Impacted UI Features'''+'
							Element:br
								*KPI
							Element:br
								*System Metrics (Levels)
							Element:br
								*User Metrics (Churn)
							Element:br
							Element:br
								'+'''Parameters'''+'
							Element:br
								|| border=1 rules=rows frame=hsides
							Element:br
								||! Type ||! Parameter ||! Default Value ||
							Element:br
								||Date ||LEVEL END TIMESTAMP ||(Current Time)||
							Element:br
								||String ||ACCOUNT ID ||''No Default Value''||
							Element:br
								||String ||CHARACTER ID ||ACCOUNT_ID||
							Element:br
								||Long ||CHARACTER LEVEL ||If Generic Character then Account Level.||
							Element:br
								||Long ||SHARD ID ||0||
							Element:br
								||Long ||AREA ID ||0||
							Element:br
								||Float ||POSITION X ||0||
							Element:br
								||Float ||POSITION Y ||0||
							Element:br
								||Float ||POSITION Z ||0||
							Element:br
								||String ||AREA NAME ||NA||
							Element:br
							Element:br
								'+'''Sample Use'''+'
							Element:br
							Element:br
								*Java
							Element:br
								//Log when a player ends a level\\
							Element:br
								public void ''aKApi.''levelEnd(LEVEL_END_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, SHARD_ID, AREA_ID, POSITION_X, POSITION_Y, POSITION_Z, AREA_NAME);
							Element:br
							Element:br
								*JavaScript
							Element:br
								//Log when a player ends a level\\
							Element:br
								''aKApi.''levelEnd(LEVEL_END_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, SHARD_ID, AREA_ID, POSITION_X, POSITION_Y, POSITION_Z, AREA_NAME);
							Element:br
							Element:br
								*PHP
							Element:br
								//Log when a player ends a level\\
							Element:br
								''$aKApi->''levelEnd(LEVEL_END_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, SHARD_ID, AREA_ID, POSITION_X, POSITION_Y, POSITION_Z, AREA_NAME);
							Element:br
							Element:br
								*JSON
							Element:br
								//Log when a player ends a level\\
							Element:br
							Element:br
								{
							Element:br
								"timestamp":"2013-11-15T13:50:42.553Z",
							Element:br
								"data":{
							Element:br
								"type":28,
							Element:br
								"account_id":"cool_guy@example.com",
							Element:br
								"character_id":"Wizard",
							Element:br
								"character_lvl":52,
							Element:br
								"shard_id":42,
							Element:br
								"area_id":2,
							Element:br
								"position_x":678,
							Element:br
								"position_y":231,
							Element:br
								"position_z":517,
							Element:br
								"area_name":"Area_Name"
							Element:br
								}
							Element:br
								}
							Element:br
							Element:br
								NOTE: All parameters are required in JSON, except “shard_id” which is optional.
							Element:br
							Element:br
								%right%[[#top|Back to Top]]
							Element:br
								----
							Element:br
							Element:br
								!!!!'''Enter Area (Event ID#29)'''[[#EnterArea]]
							Element:br
							Element:br
								An Area refers to a geographical area or region that makes up a larger virtual world. This event records information regarding the time at which a player enters an area. To log when a player enters an area, you need to pass the account and character IDs; area ID, level, and position; and the timestamp. Optionally, you may pass the shard ID.
							Element:br
							Element:br
								'+'''Impacted UI Features'''+'
							Element:br
								*KPI - Optional
							Element:br
								*System Metrics (Location/Maps)
							Element:br
								*User Metrics (Farming)
							Element:br
							Element:br
								'+'''Parameters'''+'
							Element:br
								|| border=1 rules=rows frame=hsides
							Element:br
								||! Type ||! Parameter ||! Default Value ||
							Element:br
								||Date|| ENTER AREA TIMESTAMP ||(Current Time)||
							Element:br
								||String ||ACCOUNT ID ||''No Default Value''||
							Element:br
								||String ||CHARACTER ID ||ACCOUNT_ID||
							Element:br
								||Long ||ENTER AREA CHARACTER LEVEL ||0||
							Element:br
								||Long ||SHARD ID ||0||
							Element:br
								||Long ||AREA ID ||If AREA_ID is not empty, and AREA_NAME is empty, set AREA_NAME=NA.||
							Element:br
								||Float ||ENTER POSITION X ||0||
							Element:br
								||Float ||ENTER POSITION Y ||0||
							Element:br
								||Float ||ENTER POSITION Z ||0||
							Element:br
								||String|| AREA NAME ||If AREA_ID is not empty, and AREA_NAME is empty, set AREA_NAME=NA.||
							Element:br
							Element:br
							Element:br
								'+'''Sample Use'''+'
							Element:br
							Element:br
								*Java
							Element:br
								//Log when a player enters an area\\
							Element:br
								public void ''aKApi.log''AreaEnter(ENTER_AREA_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, ENTER_AREA_CHARACTER_LEVEL, SHARD_ID, AREA_ID, ENTER_POSITION_X, ENTER_POSITION_Y, ENTER_POSITION_Z, AREA_NAME);
							Element:br
							Element:br
								*JavaScript
							Element:br
								//Log when a player enters an area\\
							Element:br
								''aKApi.log''AreaEnter(ENTER_AREA_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, ENTER_AREA_CHARACTER_LEVEL, SHARD_ID, AREA_ID, ENTER_POSITION_X, ENTER_POSITION_Y, ENTER_POSITION_Z, AREA_NAME)
							Element:br
							Element:br
								*PHP
							Element:br
								//Log when a player enters an area\\
							Element:br
								''$aKApi->log''AreaEnter(ENTER_AREA_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, ENTER_AREA_CHARACTER_LEVEL, SHARD_ID, AREA_ID, ENTER_POSITION_X, ENTER_POSITION_Y, ENTER_POSITION_Z, AREA_NAME)
							Element:br
							Element:br
								*JSON
							Element:br
								//Log when a player enters an area\\
							Element:br
							Element:br
								{
							Element:br
								"timestamp":"2013-11-15T14:04:32.369Z",
							Element:br
								"data":{
							Element:br
								"type":29,
							Element:br
								"account_id":"cool_guy@example.com",
							Element:br
								"character_id":"wizard",
							Element:br
								"character_lvl":52,
							Element:br
								"shard_id":42,
							Element:br
								"area_id":200,
							Element:br
								"position_x":678,
							Element:br
								"position_y":231,
							Element:br
								"position_z":517,
							Element:br
								"area_name":"Area_Name"
							Element:br
								}
							Element:br
								}
							Element:br
							Element:br
								NOTE: All parameters are required in JSON, except “shard_id” which is optional.
							Element:br
							Element:br
								%right%[[#top|Back to Top]]
							Element:br
								----
							Element:br
							Element:br
								!!!!'''Exit Area (Event ID#30)'''[[#ExitArea]]
							Element:br
							Element:br
								This event records information regarding the time at which a player exits an area. To log when a player exits an area, you need to pass the account and character IDs; the area level, position, and ID; and the timestamp. Optionally, you may pass the shard ID.
							Element:br
							Element:br
								For related information, see ''Enter Area''.
							Element:br
							Element:br
								'+'''Impacted UI Features'''+'
							Element:br
								*KPI - Optional
							Element:br
								*System Metrics (Levels, Location/Maps)
							Element:br
								*User Metrics (Farming)
							Element:br
							Element:br
								'+'''Parameters'''+'
							Element:br
								|| border=1 rules=rows frame=hsides
							Element:br
								||! Type ||! Parameter ||! Default Value ||
							Element:br
								||Date ||EXIT AREA TIMESTAMP ||(Current Time)||
							Element:br
								||String ||ACCOUNT ID ||''No Default Value''||
							Element:br
								||String ||CHARACTER ID ||ACCOUNT_ID||
							Element:br
								||Long ||ENTER AREA CHARACTER LEVEL ||0||
							Element:br
								||Long ||SHARD ID ||0||
							Element:br
								||Long ||AREA ID ||If AREA_ID is not empty, and AREA_NAME is empty, set AREA_NAME=NA.||
							Element:br
								||Float ||EXIT POSITION X ||0||
							Element:br
								||Float ||EXIT POSITION Y ||0||
							Element:br
								||Float ||EXIT POSITION Z ||0||
							Element:br
								||String|| AREA NAME ||If AREA_ID is not empty, and AREA_NAME is empty, set AREA_NAME=NA.||
							Element:br
							Element:br
								'+'''Sample Use'''+'
							Element:br
							Element:br
								*Java
							Element:br
								//Log when a player exits an area\\
							Element:br
								public void ''aKApi.log''AreaExit(EXIT_AREA_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, EXIT_AREA_CHARACTER_LEVEL, SHARD_ID, AREA_ID, EXIT_POSITION_X, EXIT_POSITION_Y, EXIT_POSITION_Z, AREA_NAME)
							Element:br
							Element:br
								*JavaScript
							Element:br
								//Log when a player exits an area\\
							Element:br
								''aKApi.log''AreaExit(ACCOUNT_ID, CHARACTER_ID, SHARD_ID, AREA_ID, CHARACTER_LEVEL, EXIT_POSITION_X, EXIT_POSITION_Y, EXIT_POSITION_Z, AREA_NAME, EXIT_AREA_TIMESTAMP);
							Element:br
							Element:br
								*PHP
							Element:br
								//Log when a player exits an area\\
							Element:br
								''$aKApi->log''AreaExit(ACCOUNT_ID, CHARACTER_ID, SHARD_ID, AREA_ID, CHARACTER_LEVEL, EXIT_POSITION_X, EXIT_POSITION_Y, EXIT_POSITION_Z, AREA_NAME, EXIT_AREA_TIMESTAMP);
							Element:br
							Element:br
								*JSON
							Element:br
								//Log when a player exits an area\\
							Element:br
							Element:br
								{
							Element:br
								"timestamp":"2013-11-15T14:11:05.873Z",
							Element:br
								"data":{
							Element:br
								"type":30,
							Element:br
								"account_id":"cool_guy@example.com",
							Element:br
								"character_id":"wizard",
							Element:br
								"character_lvl":52,
							Element:br
								"shard_id":42,
							Element:br
								"area_id":200,
							Element:br
								"position_x":678,
							Element:br
								"position_y":231,
							Element:br
								"position_z":517,
							Element:br
								"area_name":"Area_Name"
							Element:br
								}
							Element:br
								}
							Element:br
							Element:br
								NOTE: All parameters are required in JSON, except “shard_id” which is optional.
							Element:br
							Element:br
								%right%[[#top|Back to Top]]
							Element:br
							Element:br
								----
							Element:br
							Element:br
								!!!!'''Area Dim (Event ID#50)'''
							Element:br
							Element:br
							Element:br
								For games with geographical areas and maps that make up a larger virtual world, this event records the dimension information about these maps. To log area dimensions, you need to pass the area name and ID, the map label and ID, the min and max positions, as well as the timestamp.
							Element:br
							Element:br
								'+'''Parameters'''+'
							Element:br
								|| border=1 rules=rows frame=hsides
							Element:br
								||! Type ||! Parameter ||! Default Value ||
							Element:br
								|| Date || TIMESTAMP || (Current Time) ||
							Element:br
								|| String|| AREA NAME || If AREA ID is not empty and AREA NAME is empty, use NA. ||
							Element:br
								|| Long ||AREA ID || If AREA ID is empty, and AREA NAME is not empty, use 0. ||
							Element:br
								|| Long || MAP ID || 0 ||
							Element:br
								|| String || MAP LABEL || NA ||
							Element:br
								|| Float || MIN X || 0 ||
							Element:br
								|| Float || MIN Y || 0 ||
							Element:br
								|| Float || MIN Z || 0 ||
							Element:br
								|| Float || MAX X || 0 ||
							Element:br
								|| Float || MAX Y || 0 ||
							Element:br
								|| Float || MAX Z || 0 ||
							Element:br
							Element:br
							Element:br
							Element:br
								'+'''Sample Use'''+'
							Element:br
							Element:br
								*Java
							Element:br
								//Log area dimensions\\
							Element:br
								public void ''aKApi''.logAreaDim(TIMESTAMP, AREA_NAME, AREA_ID, MAP_ID, MAP_LABEL, MIN_X, MIN_Y, MIN_Z, MAX_X, MAX_Y, MAX_Z);
							Element:br
							Element:br
								*JavaScript
							Element:br
								//Log area dimensions\\
							Element:br
								''aKApi''.logAreaDim(TIMESTAMP, AREA_NAME, AREA_ID, MAP_ID, MAP_LABEL, MIN_X, MIN_Y, MIN_Z, MAX_X, MAX_Y, MAX_Z);
							Element:br
							Element:br
								*PHP
							Element:br
								//Log area dimensions\\
							Element:br
								''$aKApi''->logAreaDim(TIMESTAMP, AREA_NAME, AREA_ID, MAP_ID, MAP_LABEL, MIN_X, MIN_Y, MIN_Z, MAX_X, MAX_Y, MAX_Z);
							Element:br
							Element:br
								*JSON
							Element:br
								//Log area dimensions\\
							Element:br
							Element:br
								{
							Element:br
								"timestamp":"2013-11-15T18:13:04.432Z",
							Element:br
								"data":{
							Element:br
								"type":50,
							Element:br
								"area_name":"NA",
							Element:br
								"area_id":2.2,
							Element:br
								"map_id":-1,
							Element:br
								"map_label":"map label",
							Element:br
								"min_x":0,
							Element:br
								"min_y":0,
							Element:br
								"min_z":0,
							Element:br
								"max_x":4,
							Element:br
								"max_y":5,
							Element:br
								"max_z":6
							Element:br
								}
							Element:br
								}
							Element:br
							Element:br
								NOTE: All parameters are required in JSON, except “min_z” and “max_z” which are optional.
							Element:br
							Element:br
								%right%[[#top|Back to Top]]
							Element:br
								----
							Element:br
							Element:br
							Element:br
								!!'''Economic Events'''[[#EconomicEvents]]
							Element:br
							Element:br
								Economic events include those events that are related to in-game stores and purchases, such as a player's interaction with a store and items within it. Details on how to execute calls to log economic events can be found below for each corresponding event.
							Element:br
							Element:br
								'+'''Note:'''+' Virtual Currency will be automatically initialized upon virtual currency transactions.
							Element:br
							Element:br
								%comment%!!!!'''Initialize Virtual Currency (Event ID#14)'''[[#InitializeVirtualCurrency]] - Automatically Created - No Need To Implement.
							Element:br
								%comment%
							Element:br
								%comment%This event records information regarding which currencies players can use in exchange for in-game virtual items or resources. Typically, virtual currencies have an exchange rate that captures their corresponding value in real world currency, such as US Dollars, Yen, Euros, etc. To log virtual currencies, you need to pass the virtual currency label and timestamp.
							Element:br
								%comment%
							Element:br
								%comment%'+'''Impacted UI Features'''+'
							Element:br
								%comment%*KPI
							Element:br
								%comment%*User Metrics (Churn)
							Element:br
								%comment%*Basic Package (Summary)
							Element:br
								%comment%
							Element:br
								%comment%'+'''Parameters'''+'
							Element:br
								%comment%|| border=1 rules=rows frame=hsides
							Element:br
								%comment%||! Type ||! Parameter ||! Default Value ||
							Element:br
								%comment%||Date ||TIMESTAMP ||(Current Time)||
							Element:br
								%comment%||String ||VIRTUAL CURRENCY LABEL || ''No Default Value''||
							Element:br
								%comment%
							Element:br
								%comment%'+'''Sample Use'''+'
							Element:br
								%comment%
							Element:br
								%comment%*Java
							Element:br
								%comment%//Log virtual currency\\
							Element:br
								%comment%public void ''aKApi.''loadVirtualCurrency(TIMESTAMP, VIRTUAL_CURRENCY_LABEL);
							Element:br
								%comment%
							Element:br
								%comment%*JavaScript
							Element:br
								%comment%//Log virtual currency\\
							Element:br
								%comment%''aKApi.''loadVirtualCurrency(TIMESTAMP, VIRTUAL_CURRENCY_LABEL);
							Element:br
								%comment%
							Element:br
								%comment%*PHP
							Element:br
								%comment%//Log virtual currency\\
							Element:br
								%comment%''$aKApi->''loadVirtualCurrency(TIMESTAMP, VIRTUAL_CURRENCY_LABEL);
							Element:br
								%comment%
							Element:br
								%comment%*JSON
							Element:br
								%comment%//Log virtual currency\\
							Element:br
								%comment%
							Element:br
								%comment% {
							Element:br
								%comment% "timestamp":"2013-11-14T16:57:39.193Z",
							Element:br
								%comment% "data":{
							Element:br
								%comment% "type":14,
							Element:br
								%comment% "virtual_currency_label":"MUCHA"
							Element:br
								%comment% }
							Element:br
								%comment% }
							Element:br
								%comment%
							Element:br
								%comment%NOTE: All parameters are required in JSON.
							Element:br
								%comment%
							Element:br
								%comment%%right%[[#top|Back to Top]]
							Element:br
								%comment%----
							Element:br
								[[#store-create]]
							Element:br
								!!!!'''Store Create (Event ID#35)'''
							Element:br
							Element:br
							Element:br
								For games that allow players to setup an in-game store where they can sell items, this event records information regarding the creation of an in-game store. To log when a store is created, you need to pass the store ID and description, as well as the address, city, state, country, zip code, and timestamp.
							Element:br
							Element:br
								'''Note''': You must log the store creation information before any log or load command references the store ID.
							Element:br
							Element:br
								'+'''Parameters'''+'
							Element:br
								|| border=1 rules=rows frame=hsides
							Element:br
								||! Type ||! Parameter ||! Default Value ||
							Element:br
								|| Date || UPDATED TIMESTAMP || (Current Time) ||
							Element:br
								|| Long || STORE ID || ''No Default Value'' ||
							Element:br
								|| String || STORE DESCRIPTION || NA ||
							Element:br
								|| String || MAP REAL ADDRESS || NA ||
							Element:br
								|| String || MAP REAL CITY || NA ||
							Element:br
								|| String || MAP REAL STATE || NA ||
							Element:br
								|| String || MAP REAL COUNTRY || NA ||
							Element:br
								|| String || MAP REAL POSTAL CODE || 0 ||
							Element:br
							Element:br
								'+'''Sample Use'''+'
							Element:br
							Element:br
								*Java
							Element:br
								//Log when a store is created\\
							Element:br
								public void ''aKApi''.storeCreate(UPDATED_TIMESTAMP, STORE_ID, STORE_DESCRIPTION, MAP_REAL_ADDRESS, MAP_REAL_CITY, MAP_REAL_STATE, MAP_REAL_COUNTRY, MAP_REAL_POSTAL_CODE);
							Element:br
							Element:br
								*JavaScript
							Element:br
								//Log when a store is created\\
							Element:br
								aKApi.''storeCreate(UPDATED_TIMESTAMP, STORE_ID, STORE_DESCRIPTION, MAP_REAL_ADDRESS, MAP_REAL_CITY, MAP_REAL_STATE, MAP_REAL_COUNTRY, MAP_REAL_POSTAL_CODE);
							Element:br
							Element:br
								*PHP
							Element:br
								//Log when a store is created\\
							Element:br
								''$aKApi''->storeCreate(UPDATED_TIMESTAMP, STORE_ID, STORE_DESCRIPTION, MAP_REAL_ADDRESS, MAP_REAL_CITY, MAP_REAL_STATE, MAP_REAL_COUNTRY, MAP_REAL_POSTAL_CODE);
							Element:br
							Element:br
								*JSON
							Element:br
								//Log when a store is created\\
							Element:br
							Element:br
								{
							Element:br
								"timestamp":"2013-11-15T15:03:32.064Z",
							Element:br
								"data":{
							Element:br
								"type":35,
							Element:br
								"store_id":8729,
							Element:br
								"store_desc":"the cool store",
							Element:br
								"map_real_address":"123 Fake St",
							Element:br
								"map_real_city":"Walla Walla",
							Element:br
								"map_real_state":"Tuvalu",
							Element:br
								"map_real_country":"United States",
							Element:br
								"map_real_postal_code":"55667"
							Element:br
								}
							Element:br
								}
							Element:br
							Element:br
								NOTE: All parameters are required in JSON.
							Element:br
							Element:br
								%right%[[#top|Back to Top]]
							Element:br
								----
							Element:br
							Element:br
								!!!!'''Store Delete (Event ID#36)'''
							Element:br
							Element:br
							Element:br
								This event records information regarding the deletion of an in-game store. To log when a store is deleted, you need to pass the store ID and timestamp.
							Element:br
							Element:br
								For related information, see [[ #store-create |Store Create]].
							Element:br
							Element:br
								'+'''Parameters'''+'
							Element:br
								|| border=1 rules=rows frame=hsides
							Element:br
								||! Type ||! Parameter ||! Default Value ||
							Element:br
								|| Date || UPDATED TIMESTAMP || (Current Time) ||
							Element:br
								|| String || STORE ID || ''No Default Value'' ||
							Element:br
							Element:br
								'+'''Sample Use'''+'
							Element:br
							Element:br
								*Java
							Element:br
								//Log when a store is deleted\\
							Element:br
								public void ''aKApi''.StoreDelete(UPDATED_TIMESTAMP, STORE_ID);
							Element:br
							Element:br
								*JavaScript
							Element:br
								//Log when a store is deleted\\
							Element:br
								''aKApi''.StoreDelete(UPDATED_TIMESTAMP, STORE_ID);
							Element:br
							Element:br
								*PHP
							Element:br
								//Log when a store is deleted\\
							Element:br
								''$aKApi''->StoreDelete(UPDATED_TIMESTAMP, STORE_ID);
							Element:br
							Element:br
								*JSON
							Element:br
								//Log when a store is deleted\\
							Element:br
							Element:br
								{
							Element:br
								"timestamp":"2013-11-15T15:11:15.847Z",
							Element:br
								"data":{
							Element:br
								"type":36,
							Element:br
								"store_id":8729
							Element:br
								}
							Element:br
								}
							Element:br
							Element:br
								NOTE: All parameters are required in JSON.
							Element:br
							Element:br
								%right%[[#top|Back to Top]]
							Element:br
								----
							Element:br
							Element:br
								!!!!'''Buy Store Item (Event ID#37)'''[[#BuyStoreItem]]
							Element:br
							Element:br
								This event records information regarding item purchases from an in-game store and includes details on the type of currency used. To log when a player buys a store item, you need to pass the account, character, and store IDs; the shard ID; the recipient account and character IDs; the item ID, name, and price; the currency type and value; and the timestamp. Optionally, you may pass the name of the virtual currency and the virtual currency count.
							Element:br
							Element:br
								'+'''Impacted UI Features'''+'
							Element:br
								*KPI
							Element:br
								*User Metrics (Churn)
							Element:br
								*Basic Package (Summary)
							Element:br
							Element:br
								'+'''Parameters'''+'
							Element:br
								|| border=1 rules=rows frame=hsides
							Element:br
								||! Type ||! Parameter ||! Default Value ||
							Element:br
								||Date ||EVENT TIMESTAMP ||(Current Time)||
							Element:br
								||String ||SENDER ACCOUNT ID ||''No Default Value''||
							Element:br
								||String ||SENDER CHARACTER ID ||ACCOUNT_ID||
							Element:br
								||String ||RECEIVER ACCOUNT ID ||''No Default Value''||
							Element:br
								||String ||RECEIVER CHARACTER ID ||RECIPIENT_ACCOUNT_ID||
							Element:br
								||Long ||SHARD ID ||0||
							Element:br
								||Long ||STORE ID ||''No Default Value''||
							Element:br
								||Long ||ITEM ID ||If Item ID is empty and Item Name is not empty, use 0.||
							Element:br
								||String ||ITEM NAME ||If Item ID is not empty and Item Name is empty, use NA.||
							Element:br
								||Float ||ITEM PRICE ||''No Default Value''||
							Element:br
								||Integer ||CURRENCY TYPE ||''No Default Value''*||
							Element:br
								||String ||VIRTUAL CURRENCY NAME || If Currency Type is 1 then mandatory, else NULL.||
							Element:br
								||Float ||CURRENCY VALUE ||''No Default Value''||
							Element:br
								||Integer ||VIRTUAL CURRENCY COUNT ||Null||
							Element:br
							Element:br
								[- *Currency Type must be 0 or 1, where 0 equals 'Real' and 1 equals 'Virtual Currency'.-]
							Element:br
							Element:br
								'+'''Sample Use'''+'
							Element:br
							Element:br
								*Java
							Element:br
								//Log when a player buys a store item\\
							Element:br
								public void ''aKApi.''storeBuyItem(EVENT_TIMESTAMP, SENDER_ACCOUNT_ID, SENDER_CHARACTER_ID, RECEIVER_ACCOUNT_ID, RECEIVER_CHARACTER_ID, SHARD_ID, STORE_ID, ITEM_ID, ITEM_NAME, ITEM_PRICE, CURRENCY_TYPE, VIRTUAL_CURRENCY_NAME, CURRENCY_VALUE, VIRTUAL_CURRENCY_COUNT);
							Element:br
							Element:br
								*JavaScript
							Element:br
								//Log when a player buys a store item\\
							Element:br
								''aKApi.''storeBuyItem(EVENT_TIMESTAMP, SENDER_ACCOUNT_ID, SENDER_CHARACTER_ID, RECEIVER_ACCOUNT_ID, RECEIVER_CHARACTER_ID, SHARD_ID, STORE_ID, ITEM_ID, ITEM_NAME, ITEM_PRICE, CURRENCY_TYPE, VIRTUAL_CURRENCY_NAME, CURRENCY_VALUE, VIRTUAL_CURRENCY_COUNT);
							Element:br
							Element:br
								*PHP
							Element:br
								//Log when a player buys a store item\\
							Element:br
								$aKApi->storeBuyItem(EVENT_TIMESTAMP, SENDER_ACCOUNT_ID, SENDER_CHARACTER_ID, RECEIVER_ACCOUNT_ID, RECEIVER_CHARACTER_ID, SHARD_ID, STORE_ID, ITEM_ID, ITEM_NAME, ITEM_PRICE, CURRENCY_TYPE, VIRTUAL_CURRENCY_NAME, CURRENCY_VALUE, VIRTUAL_CURRENCY_COUNT);
							Element:br
							Element:br
								*JSON
							Element:br
								//Log when a player buys a store item\\
							Element:br
							Element:br
								{
							Element:br
								"timestamp":"2013-11-15T15:18:44.377Z",
							Element:br
								"data":{
							Element:br
								"type":37,
							Element:br
								"sender_account_id":"cool_guy@example.com",
							Element:br
								"sender_character_id":"Wizard",
							Element:br
								"receiver_account_id":"small_cat@example.com",
							Element:br
								"receiver_character_id":"Wizard",
							Element:br
								"shard_id":42,
							Element:br
								"store_id":1,
							Element:br
								"item_id":66,
							Element:br
								"item_name":"The Blaster Gun",
							Element:br
								"item_price":3,
							Element:br
								"currency_type":1,
							Element:br
								"virtual_currency_label":"MCH",
							Element:br
								"currency_value”:”4”,
							Element:br
								"virtual_currency_count”:1
							Element:br
								}
							Element:br
								}
							Element:br
							Element:br
								NOTE: All parameters are required in JSON, except “shard_id”, “virtual_currency_label”, and “virtual_currency_count” which are optional.
							Element:br
							Element:br
								'+'''Sample Use'''+'
							Element:br
							Element:br
								Example: If you had $1 per 100 tokens, and you bought an item for 200 tokens, you will send: \\
							Element:br
								\\
							Element:br
								Item Price: 200\\
							Element:br
								Currency Type: 1\\
							Element:br
								Virtual Currency Name: Tokens\\
							Element:br
								Currency Value: 2\\
							Element:br
								Virtual Currency Count: 200\\
							Element:br
								\\
							Element:br
								Example: If a user buys an item using $5 in real money then send:\\
							Element:br
								\\
							Element:br
								Item Price: 5\\
							Element:br
								Currency Type: 0\\
							Element:br
								Virtual Currency Name: (null)\\
							Element:br
								Currency Value: 5\\
							Element:br
								Virtual Currency Count: 0\\
							Element:br
								\\
							Element:br
								Example: If a user buys an item for 500 tokens send:\\
							Element:br
								\\
							Element:br
								Item Price: 500\\
							Element:br
								Currency Type: 1\\
							Element:br
								Virtual Currency Name: Tokens\\
							Element:br
								Currency Value: 0\\
							Element:br
								Virtual Currency Count: 500\\
							Element:br
							Element:br
							Element:br
								%right%[[#top|Back to Top]]
							Element:br
								----
							Element:br
							Element:br
								!!!!'''Store Login (Event ID#38)'''
							Element:br
							Element:br
							Element:br
								This event records information regarding the time at which a player logs in to an in-game virtual store. To log when a player logs into a store, you need to pass the account, character, and store IDs; and the timestamp. Optionally, you may pass the shard ID.
							Element:br
							Element:br
								'+'''Parameters'''+'
							Element:br
								|| border=1 rules=rows frame=hsides
							Element:br
								||! Type ||! Parameter ||! Default Value ||
							Element:br
								|| Date || EVENT TIMESTAMP || (Current Time) ||
							Element:br
								|| String || ACCOUNT ID || ''No Default Value'' ||
							Element:br
								|| String || CHARACTER ID || ACCOUNT ID ||
							Element:br
								|| Long || SHARD ID || 0 ||
							Element:br
								|| Long || STORE ID || ''No Default Value'' ||
							Element:br
							Element:br
								'+'''Sample Use'''+'
							Element:br
							Element:br
								*Java
							Element:br
								//Log when a player logs in to a store\\
							Element:br
								public void ''aKApi''.storeLogin(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, STORE_ID);
							Element:br
							Element:br
								*JavaScript
							Element:br
								//Log when a player logs in to a store\\
							Element:br
								''aKApi''.storeLogin(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, STORE_ID);
							Element:br
							Element:br
								*PHP
							Element:br
								//Log when a player logs in to a store\\
							Element:br
								''$aKApi''->storeLogin(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, STORE_ID);
							Element:br
							Element:br
								*JSON
							Element:br
								//Log when a player logs in to a store\\
							Element:br
							Element:br
								{
							Element:br
								"timestamp":"2013-11-15T15:31:43.299Z",
							Element:br
								"data":{
							Element:br
								"type":38,
							Element:br
								"account_id":"cool_guy@example.com",
							Element:br
								"character_id":"Wizard",
							Element:br
								"shard_id":42,
							Element:br
								"store_id":1
							Element:br
								}
							Element:br
								}
							Element:br
							Element:br
								NOTE: All parameters are required in JSON, except “shard_id” which is optional.
							Element:br
							Element:br
								%right%[[#top|Back to Top]]
							Element:br
								----
							Element:br
							Element:br
								!!!!'''Store Logout (Event ID#39)'''
							Element:br
							Element:br
							Element:br
								This event records information regarding the time at which a player logs out of an in- game virtual store. To log when a player logs out of a store, you need to pass the account, character, and store IDs; and the timestamp. Optionally you may pass the shard ID.
							Element:br
							Element:br
								'+'''Parameters'''+'
							Element:br
								|| border=1 rules=rows frame=hsides
							Element:br
								||! Type ||! Parameter ||! Default Value ||
							Element:br
								|| Date || EVENT TIMESTAMP || (Current Time) ||
							Element:br
								|| String || ACCOUNT ID || ''No Default Value'' ||
							Element:br
								|| String || CHARACTER ID || ACCOUNT ID ||
							Element:br
								|| Long || SHARD ID || 0 ||
							Element:br
								|| Long || STORE ID || ''No Default Value'' ||
							Element:br
							Element:br
							Element:br
								'+'''Sample Use'''+'
							Element:br
							Element:br
								*Java
							Element:br
								//Log when a player logs out of a store\\
							Element:br
								public void ''aKApi''.storeLogout(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, STORE_ID);
							Element:br
							Element:br
								*JavaScript
							Element:br
								//Log when a player logs out of a store\\
							Element:br
								''aKApi''.storeLogout(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, STORE_ID);
							Element:br
							Element:br
								*PHP
							Element:br
								//Log when a player logs out of a store\\
							Element:br
								''$aKApi''->storeLogout(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, STORE_ID);
							Element:br
							Element:br
								*JSON
							Element:br
								//Log when a player logs out of a store\\
							Element:br
							Element:br
								{
							Element:br
								"timestamp":"2013-11-15T15:39:58.675Z",
							Element:br
								"data":{
							Element:br
								"type":39,
							Element:br
								"account_id":"cool_guy@example.com",
							Element:br
								"character_id":"Wizard",
							Element:br
								"shard_id":42,
							Element:br
								"store_id":1
							Element:br
								}
							Element:br
								}
							Element:br
							Element:br
								NOTE: All parameters are required in JSON, except “shard_id” which is optional.
							Element:br
							Element:br
								%right%[[#top|Back to Top]]
							Element:br
								----
							Element:br
							Element:br
								!!!!'''Store Selection / Add to Cart (Event ID#40)'''
							Element:br
							Element:br
							Element:br
								This event records information regarding when an item is selected or added to a player's cart. Note that this event may be a pre-requisite for buying an item; however it is not the same as buying an item. To log when a player selects a store item, you need to pass the account, character, and store IDs; the item name, type, and ID; and the timestamp.
							Element:br
							Element:br
								'+'''Parameters'''+'
							Element:br
								|| border=1 rules=rows frame=hsides
							Element:br
								||! Type ||! Parameter ||! Default Value ||
							Element:br
								|| Date || SELECTION TIMESTAMP || (Current Time) ||
							Element:br
								|| String || ACCOUNT ID || ''No Default Value'' ||
							Element:br
								|| String || CHARACTER ID || ACCOUNT ID ||
							Element:br
								|| Long || STORE ID || ''No Default Value'' ||
							Element:br
								|| Long || ITEM ID || If ITEM NAME is not empty, defaults to 0. Otherwise mandatory. ||
							Element:br
								|| String ||ITEM NAME || If ITEM ID is not empty, defaults to NA. Otherwise mandatory. ||
							Element:br
								|| String || ITEM TYPE || Other [[Appendix#item-type |(See Appendix A for more types)]]||
							Element:br
							Element:br
							Element:br
								'+'''Sample Use'''+'
							Element:br
							Element:br
								*Java
							Element:br
								//Log when a player selects a store item\\
							Element:br
								public void ''aKApi''.storeAddToCart(SELECTION_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, STORE_ID, ITEM_ID, ITEM_NAME, ITEM_TYPE);
							Element:br
							Element:br
								*JavaScript
							Element:br
								//Log when a player selects a store item\\
							Element:br
								''aKApi''.storeAddToCart(SELECTION_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, STORE_ID, ITEM_ID, ITEM_NAME, ITEM_TYPE);
							Element:br
							Element:br
								*PHP
							Element:br
								//Log when a player selects a store item\\
							Element:br
								''$aKApi''->storeAddToCart(SELECTION_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, STORE_ID, ITEM_ID, ITEM_NAME, ITEM_TYPE);
							Element:br
							Element:br
								*JSON
							Element:br
								//Log when a player selects a store item\\
							Element:br
							Element:br
								{
							Element:br
								"timestamp":"2013-11-15T16:01:45.370Z",
							Element:br
								"data":{
							Element:br
								"type":40,
							Element:br
								"account_id":"cool_guy@example.com",
							Element:br
								"character_id":"Wizard",
							Element:br
								"store_id":1,
							Element:br
								"item_id":66,
							Element:br
								"item_name":"Sword",
							Element:br
								"item_type":"Weapon"
							Element:br
								}
							Element:br
								}
							Element:br
							Element:br
								NOTE: All parameters are required in JSON.
							Element:br
							Element:br
								%right%[[#top|Back to Top]]
							Element:br
								----
							Element:br
							Element:br
								!!'''Transaction Events'''[[#TransactionEvents]]
							Element:br
							Element:br
								Transaction events include those events that are related to economic events outside of the game, such as when an item is purchased outside of the developer game store, or when a subscription changes.
							Element:br
								Details on how to execute calls to log transaction events can be found below for each corresponding event.
							Element:br
							Element:br
							Element:br
								!!!!'''Subscription Change (Event ID#3)'''[[#SubscriptionChange]]
							Element:br
							Element:br
								This event records a change in subscription type (e.g. from free play to a paid subscriber or premium player). Subscription changes are only applicable to games with subscriptions, not free-to-play (F2P) games. To log a change of subscription, you need to pass the user's account ID, subscription status and type, and a timestamp for both subscription and expiry. Optionally, you can also pass the subscription value.
							Element:br
							Element:br
								'+'''Impacted UI Features'''+'
							Element:br
								*KPI
							Element:br
								*System Metrics (Items, Levels, Social, NPC, Location/Maps)
							Element:br
								*User Metrics (Churn, Farming, Integrity)
							Element:br
							Element:br
								'+'''Parameters'''+'
							Element:br
								|| border=1 rules=rows frame=hsides
							Element:br
								||! Type ||! Parameter ||! Default Value ||
							Element:br
								||Date ||SUBSCRIPTION TIMESTAMP||(Current Time)||
							Element:br
								||String ||ACCOUNT ID|| "No Default Value''||
							Element:br
								||String ||SUBSCRIPTION STATUS|| Active||
							Element:br
								||String ||SUBSCRIPTION TYPE||Paid||
							Element:br
								||Float ||SUBSCRIPTION VALUE|| ''No Default Value''||
							Element:br
								||Date ||SUBSCRIPTION EXPIRED TIMESTAMP||(Month From Subscription Date)||
							Element:br
							Element:br
								'+'''Sample Use'''+'
							Element:br
							Element:br
								*Java
							Element:br
							Element:br
								//Log a change of subscription\\
							Element:br
								public void ''aKApi.''putSubChange(SUBSCRIPTION_TIMESTAMP, ACCOUNT_ID, SUBSCRIPTION_STATUS, SUBSCRIPTION_TYPE, SUBSCRIPTION_VALUE, SUBSCRIPTION_EXPIRED_TIMESTAMP);
							Element:br
							Element:br
								*JavaScript
							Element:br
							Element:br
								//Log a change of subscription[[<<]]
							Element:br
								''aKApi.''putSubChange(SUBSCRIPTION_TIMESTAMP, ACCOUNT_ID, SUBSCRIPTION_STATUS, SUBSCRIPTION_TYPE, SUBSCRIPTION_VALUE, SUBSCRIPTION_EXPIRED_TIMESTAMP);
							Element:br
							Element:br
								*PHP
							Element:br
							Element:br
								//Log a change of subscription\\
							Element:br
								''$aKApi->''putSubChange(SUBSCRIPTION_TIMESTAMP, ACCOUNT_ID, SUBSCRIPTION_STATUS, SUBSCRIPTION_TYPE, SUBSCRIPTION_VALUE, SUBSCRIPTION_EXPIRED_TIMESTAMP);
							Element:br
							Element:br
								*JSON
							Element:br
							Element:br
								//Log a change of subscription\\
							Element:br
							Element:br
								{
							Element:br
								"timestamp":"2013-11-10T06:00:00.000Z",
							Element:br
								"data":{
							Element:br
								"type":3,
							Element:br
								"account_id":"cool_guy@example.com",
							Element:br
								"account_status":"Active",
							Element:br
								"account_sub_type":"Paid",
							Element:br
								"account_sub_value":10,
							Element:br
								"account_sub_expires_timestamp":"2016-02-01T06:00:00.000Z"
							Element:br
								}
							Element:br
								}
							Element:br
							Element:br
								NOTE: All parameters are required in JSON, except “account_sub_value” which is optional.
							Element:br
							Element:br
								%right%[[#top|Back to Top]]
							Element:br
								----
							Element:br
							Element:br
								!!!!'''Currency Transaction (Event ID#18)'''[[#CurrencyTransaction]]
							Element:br
							Element:br
								Logs a Currency Transaction event. Covers all types of transaction in the game or any other environment where real world money was used. Designed To Handle Most Currency Transactions. More Complicated Transactions Can Be Done Within Event #37.
							Element:br
							Element:br
								This event records information regarding transactions in the game or other environments where real world money is used. To log currency transactions, you need to pass the account and character IDs, the transaction and currency types, as well as the timestamp. Optionally, you may pass the shard ID, the virtual currency label, the currency value, the virtual currency count, and the transaction description.
							Element:br
							Element:br
								One common scenario is when a user purchases virtual currency by spending real currency. In this case, you should send this event twice. Once with a TRANSACTION TYPE of 0 and a CURRENCY TYPE of 0 (the user is spending real currency), and then again with a TRANSACTION TYPE of 1 and a CURRENCY TYPE of 1, along with the appropriate VIRTUAL CURRENCY COUNT and LABEL (the user is acquiring virtual currency).
							Element:br
							Element:br
								%comment%Please note that you should only use this event when the Item Transaction (#17) or Store Buy Item (#37) events aren't appropriate. Store Buy Item (#37) should be used in most cases of any type of currency or virtual currency transactions. If currency is being spent to acquire something, it is preferable to use those events so that the purchase can be associated with the item. Do not send the Currency Transaction event in tandem with those events, because the currency transfer will be double counted on your dashboard.
							Element:br
							Element:br
								'+'''Impacted UI Features'''+'
							Element:br
								*KPI
							Element:br
								*User Metrics (Churn)
							Element:br
								*Basic Package (Summary)
							Element:br
							Element:br
								'+'''Parameters'''+'
							Element:br
								|| border=1 rules=rows frame=hsides
							Element:br
								||! Type ||! Parameter ||! Default Value ||
							Element:br
								||Date ||EVENT TIMESTAMP ||(Current Time)||
							Element:br
								||String ||ACCOUNT ID ||''No Default Value''||
							Element:br
								||String ||CHARACTER ID ||ACCOUNT_ID||
							Element:br
								||Long ||SHARD ID ||0||
							Element:br
								||Integer ||TRANSACTION TYPE ||''No Default Value''*||
							Element:br
								||Integer ||CURRENCY TYPE ||''No Default Value''**||
							Element:br
								||String ||VIRTUAL CURRENCY LABEL ||If CURRENCY_TYPE=1 then required; else null.||
							Element:br
								||Float ||CURRENCY VALUE ||''No Default Value''||
							Element:br
								||String ||TRANSACTION DESCRIPTION ||Truncate if >200||
							Element:br
								||Integer ||VIRTUAL CURRENCY COUNT ||Null||
							Element:br
							Element:br
								[- *Transaction Type must be 0 or 1, where 0 equals 'Spent' and 1 equals 'Acquired'.-]\\
							Element:br
								[- **Currency Type must be 0 or 1, where 0 equals 'Real' and 1 equals 'Virtual Currency'.-]
							Element:br
							Element:br
								'+'''Sample Use'''+'
							Element:br
							Element:br
								*Java
							Element:br
								//Log a currency transaction\\
							Element:br
								public void ''aKApi.''logCurrencyTransaction(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, TRANSACTION_TYPE, CURRENCY_TYPE, VIRTUAL_CURRENCY_LABEL, CURRENCY_VALUE, TRANSACTION_DESCRIPTION, VIRTUAL_CURRENCY_COUNT);
							Element:br
							Element:br
								*JavaScript
							Element:br
								//Log a currency transaction\\
							Element:br
								''aKApi.''logCurrencyTransaction(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, TRANSACTION_TYPE, CURRENCY_TYPE, VIRTUAL_CURRENCY_LABEL, CURRENCY_VALUE, TRANSACTION_DESCRIPTION, VIRTUAL_CURRENCY_COUNT);
							Element:br
							Element:br
								*PHP
							Element:br
								//Log a currency transaction\\
							Element:br
								''$aKApi->''logCurrencyTransaction(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, TRANSACTION_TYPE, CURRENCY_TYPE, VIRTUAL_CURRENCY_LABEL, CURRENCY_VALUE, TRANSACTION_DESCRIPTION, VIRTUAL_CURRENCY_COUNT);
							Element:br
							Element:br
								*JSON
							Element:br
								//Log a currency transaction\\
							Element:br
							Element:br
								{
							Element:br
								"timestamp":"2013-11-14T18:10:14.808Z",
							Element:br
								"data":{
							Element:br
								"type":18,
							Element:br
								"account_id":"cool_guy@example.com",
							Element:br
								"character_id":"wizard",
							Element:br
								"shard_id":42,
							Element:br
								"transaction_type":0,
							Element:br
								"currency_type":0,
							Element:br
								"virtual_currency_label":"mucha",
							Element:br
								"currency_value":3.45,
							Element:br
								"transaction_desc":"spend 3.45USD”,
							Element:br
								"virtual_currency_count:1
							Element:br
								}
							Element:br
								}
							Element:br
							Element:br
								NOTE: All parameters are required in JSON, except “shard_id”, “virtual_currency_label”, “currency_value”, “transaction_desc”, and “virtual_currency_count” which are optional.
							Element:br
							Element:br
								%right%[[#top|Back to Top]]
							Element:br
								----
							Element:br
								%comment%!!!!'''Economic (Event ID#58)''' - To Be Completed.
							Element:br
							Element:br
							Element:br
								%comment%This event records information regarding item purchases, sales, or trades outside of the developer RMT game store. This event requires both an incoming and outgoing value, of which either can be 0. To log an economic event, you need to pass the sender and receiver account and character IDs; the item name and ID; the economic type and value; the currency type and value; along with the timestamp. Optionally, you may pass the shard ID, virtual currency type and count.
							Element:br
							Element:br
								%comment%'+'''Parameters'''+'
							Element:br
								%comment%|| border=1 rules=rows frame=hsides
							Element:br
								%comment%||! Type ||! Parameter ||! Default Value ||
							Element:br
								%comment%|| Date || TIMESTAMP || (Current Time) ||
							Element:br
								%comment%|| String || SENDER ACCOUNT ID || ''No Default Value'' ||
							Element:br
								%comment%|| String || SENDER CHARACTER ID || SENDER ACCOUNT ID ||
							Element:br
								%comment%|| String || RECEIVER ACCOUNT ID || ''No Default Value'' ||
							Element:br
								%comment%|| String || RECEIVER CHARACTER ID || RECEIVER ACCOUNT ID ||
							Element:br
								%comment%|| Long || SHARD ID || 0 ||
							Element:br
								%comment%|| Long || ITEM ID || If ITEM ID is empty, and ITEM NAME is not empty, use 0. ||
							Element:br
								%comment%|| String || ITEM NAME || If ITEM ID is not empty, and ITEM NAME is empty, use NA. ||
							Element:br
								%comment%|| String || ECONOMIC TYPE || Other [[Appendix#economic-type |(See Appendix A for more types)]]||
							Element:br
								%comment%|| Float || ECONOMIC VALUE || ''No Default Value'' ||
							Element:br
								%comment%|| Integer || CURRENCY TYPE || ''No Default Value'' * ||
							Element:br
								%comment%|| String || VIRTUAL CURRENCY TYPE || If CURRENCY TYPE is 1 then mandatory. Otherwise defaults to Null. ||
							Element:br
								%comment%|| Float || CURRENCY VALUE || ''No Default Value'' ||
							Element:br
								%comment%|| Integer || VIRTUAL CURRENCY COUNT || Null ||
							Element:br
							Element:br
								%comment%[- *Currency Type must be 0 or 1, where 0 equals 'Real' and 1 equals 'Virtual Currency'.-]
							Element:br
							Element:br
							Element:br
							Element:br
								%comment%'+'''Sample Use'''+'
							Element:br
							Element:br
								%comment%*Java
							Element:br
								%comment%//To log that an economic event occurred\\
							Element:br
							Element:br
								%comment%public void ''aKApi''.logEconomic(TIMESTAMP, SENDER_ACCOUNT_ID, SENDER_CHARACTER_ID, RECEIVER_ACCOUNT_ID, RECEIVER_CHARACTER_ID, SHARD_ID, ITEM_ID, ITEM_NAME, ECONOMIC_TYPE, ECONOMIC_VALUE, CURRENCY_TYPE, VIRTUAL_CURRENCY_TYPE, CURRENCY_VALUE, VIRTUAL_CURRENCY_COUNT) ;
							Element:br
							Element:br
								%comment%*JavaScript
							Element:br
								%comment%//To log that an economic event occurred\\
							Element:br
							Element:br
								%comment%''aKApi''.logEconomic(TIMESTAMP, SENDER_ACCOUNT_ID, SENDER_CHARACTER_ID, RECEIVER_ACCOUNT_ID, RECEIVER_CHARACTER_ID, SHARD_ID, ITEM_ID, ITEM_NAME, ECONOMIC_TYPE, ECONOMIC_VALUE, CURRENCY_TYPE, VIRTUAL_CURRENCY_TYPE, CURRENCY_VALUE, VIRTUAL_CURRENCY_COUNT);
							Element:br
							Element:br
								%comment%*PHP
							Element:br
								%comment%//To log that an economic event occurred\\
							Element:br
								%comment%''$aKApi''->logEconomic(TIMESTAMP, SENDER_ACCOUNT_ID, SENDER_CHARACTER_ID, RECEIVER_ACCOUNT_ID, RECEIVER_CHARACTER_ID, SHARD_ID, ITEM_ID, ITEM_NAME, ECONOMIC_TYPE, ECONOMIC_VALUE, CURRENCY_TYPE, VIRTUAL_CURRENCY_TYPE, CURRENCY_VALUE, VIRTUAL_CURRENCY_COUNT);
							Element:br
							Element:br
								%comment%*JSON
							Element:br
								%comment%//To log that an economic event occurred\\
							Element:br
							Element:br
								%comment% {
							Element:br
								%comment% "timestamp":"2013-11-15T18:58:59.893Z",
							Element:br
								%comment% "data":{
							Element:br
								%comment% "type":58,
							Element:br
								%comment% "sender_account_id":"cool_guy@example.com",
							Element:br
								%comment% "sender_character_id":"advertiser",
							Element:br
								%comment% "receiver_account_id":"cguy@aol.com",
							Element:br
								%comment% "receiver_character_id":"customer",
							Element:br
								%comment% "shard_id":1,
							Element:br
								%comment% "item_id":124606,
							Element:br
								%comment% "item_name":"Rebate for 124606",
							Element:br
								%comment% "economic_type":"rebate",
							Element:br
								%comment% "economic_value":52.281000000000006,
							Element:br
								%comment% "currency_type":0,
							Element:br
								%comment% "virtual_currency_label":"",
							Element:br
								%comment% "currency_value":52.281000000000006,
							Element:br
								%comment% "virtual_currency_count”:1
							Element:br
								%comment% }
							Element:br
								%comment% }
							Element:br
							Element:br
								%comment%NOTE: All parameters are required in JSON, except “shard_id”, “virtual_currency_label”, and “virtual_currency_count” which are optional.
							Element:br
							Element:br
								%comment%%right%[[#top|Back to Top]]
							Element:br
								%comment%----
							Element:br
							Element:br
								!!!!'''Traffic Source (Event ID#59)'''
							Element:br
							Element:br
							Element:br
								This event records information regarding where your traffic is coming from, whether it’s from Facebook, an Email Campaign, or Direct Marketing. To log traffic source, you need to pass the account ID, traffic source, and traffic source type, along with the timestamp. Optionally, you may pass the shard ID.
							Element:br
							Element:br
								'+'''Parameters'''+'
							Element:br
								|| border=1 rules=rows frame=hsides
							Element:br
								||! Type ||! Parameter ||! Default Value ||
							Element:br
								|| Date || EVENT TIMESTAMP || (Current Time) ||
							Element:br
								|| String || ACCOUNT ID || ''No Default Value'' ||
							Element:br
								|| String || TRAFFIC SOURCE || campaign_name | sub_site | publisher_name | sub_publisher [[ Appendix#traffic-source|(See Appendix for more types]] ||
							Element:br
								|| Long || SHARD ID || 0 ||
							Element:br
								|| String || TRAFFIC SOURCE TYPE || publisher_name [[ Appendix#traffic-source-type|(See Appendix for more types]] ||
							Element:br
							Element:br
								%comment%|| String || TRAFFIC SOURCE || Other [[ Appendix#traffic-source|(See Appendix for more types]] ||
							Element:br
								%comment%|| String || TRAFFIC SOURCE TYPE || Unknown [[ Appendix#traffic-source-type|(See Appendix for more types]] ||
							Element:br
								'+'''Sample Use'''+'
							Element:br
							Element:br
								*Java
							Element:br
								//Log that a traffic source event occurred\\
							Element:br
								public void ''aKApi''.logTrafficSource(TIMESTAMP, ACCOUNT_ID, TRAFFIC_SOURCE, SHARD_ID, TRAFFIC_SOURCE_TYPE) ;
							Element:br
							Element:br
								*JavaScript
							Element:br
								//Log that a traffic source event occurred\\
							Element:br
								''aKApi''.logTrafficSource(TIMESTAMP, ACCOUNT_ID, TRAFFIC_SOURCE, SHARD_ID, TRAFFIC_SOURCE_TYPE) ;
							Element:br
							Element:br
								*PHP
							Element:br
								//Log that a traffic source event occurred\\
							Element:br
								''$aKApi''->logTrafficSource(TIMESTAMP, ACCOUNT_ID, TRAFFIC_SOURCE, SHARD_ID, TRAFFIC_SOURCE_TYPE) ;
							Element:br
							Element:br
								*JSON
							Element:br
								//Log that a traffic source event occurred\\
							Element:br
							Element:br
								{
							Element:br
								"timestamp":"2013-11-15T19:07:30.221Z",
							Element:br
								"data":{
							Element:br
								"type":59,
							Element:br
								"account_id":"cool_guy@example.com",
							Element:br
								"traffic_source":"campaign_name | sub_site | publisher_name | sub_publisher",
							Element:br
								"shard_id":0,
							Element:br
								"traffic_source_type":"publisher_name"
							Element:br
								}
							Element:br
								}
							Element:br
							Element:br
								%comment% {
							Element:br
								%comment% "timestamp":"2013-11-15T19:07:30.221Z",
							Element:br
								%comment% "data":{
							Element:br
								%comment% "type":59,
							Element:br
								%comment% "account_id":"cool_guy@example.com",
							Element:br
								%comment% "traffic_source":"abcTrafficSource",
							Element:br
								%comment% "shard_id":42.42,
							Element:br
								%comment% "traffic_source_type":"traffic_source_type"
							Element:br
								%comment% }
							Element:br
								%comment% }
							Element:br
							Element:br
								NOTE: All parameters are required in JSON, except “shard_id” which is optional.
							Element:br
							Element:br
								%right%[[#top|Back to Top]]
							Element:br
								----
							Element:br
								!!'''Social Events'''[[#SocialEvents]]
							Element:br
								----
							Element:br
								!!!!'''Social Interactions (Event ID#6)'''[[#Social]]
							Element:br
							Element:br
								This event records social events involving two people and includes all social events that are not covered as ''Group (Entry/Exit) Events ''or ''Friend (Addition/Deletion) Events''. To log an in-app social event, you need to pass the sender account and character IDs; the receiver account and character IDs; the character levels of both users; the social event name and type; and the timestamp. Optionally, you may pass the shard ID.
							Element:br
							Element:br
								'+'''Impacted UI Features'''+'
							Element:br
								*KPI
							Element:br
								*System Metrics (Social)
							Element:br
								*Basic Package (Summary)
							Element:br
							Element:br
								'+'''Parameters'''+'
							Element:br
								|| border=1 rules=rows frame=hsides
							Element:br
								||! Type ||! Parameter ||! Default Value ||
							Element:br
								||Date ||EVENT TIMESTAMP ||(Current Time)||
							Element:br
								||String ||ACCOUNT ID ||''No Default Value''||
							Element:br
								||String ||CHARACTER ID ||ACCOUNT_ID||
							Element:br
								||Long ||CHARACTER LEVEL ||If Generic Character then Account Level; If no concept of levels then 0.||
							Element:br
								||String ||TARGET ACCOUNT ID ||''No Default Value''||
							Element:br
								||String ||TARGET CHARACTER ID ||TARGET_ACCOUNT_ID||
							Element:br
								||Long ||TARGET CHARACTER LEVEL ||If Generic Character then Account Level; If no concept of levels then 0.||
							Element:br
								||Long ||SHARD ID ||0||
							Element:br
								||String ||SOCIAL EVENTS NAME|| "No Default Value''||
							Element:br
								||String ||SOCIAL EVENT TYPE|| Other [[Appendix#social-event-type| (See Appendix for more types)]] ||
							Element:br
							Element:br
								'+'''Sample Use'''+'
							Element:br
							Element:br
								*Java
							Element:br
							Element:br
								//Log an in-app social event\\
							Element:br
								public void ''aKApi.''logSocialEvent(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, TARGET_ACCOUNT_ID, TARGET_CHARACTER_ID, TARGET_CHARACTER_LEVEL, SHARD_ID, SOCIAL_EVENTS_NAME, SOCIAL_EVENT_TYPE);
							Element:br
							Element:br
								*'''JavaScript'''
							Element:br
							Element:br
								//Log an in-app social event[[<<]]
							Element:br
								''aKApi.''logSocialEvent(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, TARGET_ACCOUNT_ID, TARGET_CHARACTER_ID, TARGET_CHARACTER_LEVEL, SHARD_ID, SOCIAL_EVENTS_NAME, SOCIAL_EVENT_TYPE);
							Element:br
							Element:br
								*'''PHP'''
							Element:br
							Element:br
								//Log an in-app social event\\
							Element:br
								''$aKApi->''logSocialEvent(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CHARACTER_LEVEL, TARGET_ACCOUNT_ID, TARGET_CHARACTER_ID, TARGET_CHARACTER_LEVEL, SHARD_ID, SOCIAL_EVENTS_NAME, SOCIAL_EVENT_TYPE);
							Element:br
							Element:br
								*JSON
							Element:br
							Element:br
								//Log an in-app social event\\
							Element:br
							Element:br
								{
							Element:br
								"timestamp":"2013-11-14T14:28:54.832Z",
							Element:br
								"data":{
							Element:br
								"type":6,
							Element:br
								"sender_account_id":"cool_guy@example.com",
							Element:br
								"sender_character_id":"sharer",
							Element:br
								"sender_character_level":1,
							Element:br
								"receiver_account_id":"cool_guy1@example.com",
							Element:br
								"receiver_character_id":"advertiser",
							Element:br
								"receiver_character_level":1,
							Element:br
								"shard_id":42,
							Element:br
								"social_event_name":"rebate_share",
							Element:br
								"social_event_type":"share"
							Element:br
								}
							Element:br
								}
							Element:br
							Element:br
								NOTE: All parameters are required in JSON, except “shard_id” which is optional.
							Element:br
							Element:br
								%right%[[#top|Back to Top]]
							Element:br
								----
							Element:br
							Element:br
								!!!!'''Off-Game Interaction (OGI) Sender (Event ID#7)'''
							Element:br
							Element:br
							Element:br
								An off-game-interaction refers to an interaction between a player inside the game environment and a person outside the game environment. To log the start of a social interaction outside of the application, you need to pass the sender account and character IDs; the receiver account and character IDs; the interaction category and location; and the event timestamp. Optionally, you may pass the shard ID.
							Element:br
							Element:br
								'+'''Parameters'''+'
							Element:br
								|| border=1 rules=rows frame=hsides
							Element:br
								||! Type ||! Parameter ||! Default Value ||
							Element:br
								|| Date || EVENT TIMESTAMP || (Current Time) ||
							Element:br
								|| String || SENDER ACCOUNT ID || ''No Default Value'' ||
							Element:br
								|| String || SENDER CHARACTER ID || SENDER ACCOUNT ID ||
							Element:br
								|| String || RECEIVER ACCOUNT ID || ''No Default Value''* ||
							Element:br
								|| String || RECEIVER CHARACTER ID || RECEIVER ACCOUNT ID ||
							Element:br
								|| Long || SHARD ID || 0 ||
							Element:br
								|| String || OGI LOCATION || Other ||
							Element:br
								|| String || OGI CATEGORY || ''No Default Value'' ||
							Element:br
							Element:br
								[- *Receiver Account ID can be an ID (e.g. Facebook or Email).-] \\
							Element:br
								\\
							Element:br
								'+'''Sample Use'''+'
							Element:br
							Element:br
								*Java
							Element:br
								//Log the start of an off-game-interaction\\
							Element:br
								public void ''aKApi''.logOgiSend(EVENT_TIMESTAMP, SENDER_ACCOUNT_ID, SENDER_CHARACTER_ID, RECEIVER_ACCOUNT_ID, RECEIVER_CHARACTER_ID, SHARD_ID, %comment%OGI_LOCATION, OGI_CATEGORY);
							Element:br
							Element:br
								*JavaScript
							Element:br
								//Log the start of an off-game-interaction\\
							Element:br
								''aKApi''.logOgiSend(EVENT_TIMESTAMP, SENDER_ACCOUNT_ID, SENDER_CHARACTER_ID, RECEIVER_ACCOUNT_ID, RECEIVER_CHARACTER_ID, SHARD_ID, OGI_LOCATION, %comment%OGI_CATEGORY);
							Element:br
							Element:br
								*PHP
							Element:br
								//Log the start of an off-game-interaction\\
							Element:br
								''$aKApi''->logOgiSend(EVENT_TIMESTAMP, SENDER_ACCOUNT_ID, SENDER_CHARACTER_ID, RECEIVER_ACCOUNT_ID, RECEIVER_CHARACTER_ID, SHARD_ID, OGI_LOCATION, OGI_CATEGORY);
							Element:br
							Element:br
								*JSON
							Element:br
								//Log the start of an off-game-interaction\\
							Element:br
							Element:br
								{
							Element:br
								"timestamp":"2013-11-14T14:48:56.718Z",
							Element:br
								"data":{
							Element:br
								"type":7,
							Element:br
								"sender_account_id":"cool_guy@example.com",
							Element:br
								"sender_character_id":"wizard",
							Element:br
								"receiver_account_id":"small_cat@example.com",
							Element:br
								"receiver_character_id":"mage",
							Element:br
								"shard_id":42,
							Element:br
								"ogi_location":"https://www.facebook.com/wall/42",
							Element:br
								"ogi_category":"wall post"
							Element:br
								}
							Element:br
								}
							Element:br
							Element:br
								NOTE: All parameters are required in JSON, except “shard_id” which is optional.
							Element:br
							Element:br
								%right%[[#top|Back to Top]]
							Element:br
								----
							Element:br
							Element:br
								!!!!'''Off-Game-Interaction (OGI) Receiver (Event ID#8)'''
							Element:br
							Element:br
							Element:br
								This event records information regarding how the receiver of an off-game-interaction acted in response. To log the receiver's response to a social interaction outside of the application, you need to pass the sender account and character IDs, along with the receiver account and character IDs, shard ID, and event timestamp. As well, you'll need to pass the interaction category, location, and receiver response. Optionally, you may pass the shard ID.
							Element:br
							Element:br
								For related information, see Off-Game-Interaction Sender.
							Element:br
							Element:br
								'+'''Parameters'''+'
							Element:br
								|| border=1 rules=rows frame=hsides
							Element:br
								||! Type ||! Parameter ||! Default Value ||
							Element:br
								|| Date || EVENT TIMESTAMP || (Current Time) ||
							Element:br
								|| String || SENDER ACCOUNT ID || ''No Default Value'' ||
							Element:br
								|| String || SENDER CHARACTER ID || SENDER ACCOUNT ID ||
							Element:br
								|| String || RECEIVER ACCOUNT ID || ''No Default Value''* ||
							Element:br
								|| String || RECEIVER CHARACTER ID || RECEIVER ACCOUNT ID ||
							Element:br
								|| Long || SHARD ID || 0 ||
							Element:br
								|| String || OGI CATEGORY || ''No Default Value'' ||
							Element:br
								|| String || OGI LOCATION || Other ||
							Element:br
								|| String || OGI RECEIVER ACTION || Other ||
							Element:br
							Element:br
								[- *Receiver Account ID can be an ID (e.g. Facebook or Email).-]
							Element:br
							Element:br
								'+'''Sample Use'''+'
							Element:br
							Element:br
								*Java
							Element:br
								// Log the end of and response to an off-game-interaction\\
							Element:br
								public void ''aKApi''.logOgiRecv(EVENT_TIMESTAMP, SENDER_ACCOUNT_ID, SENDER_CHARACTER_ID, RECEIVER_ACCOUNT_ID, RECEIVER_CHARACTER_ID, SHARD_ID, OGI_CATEGORY, OGI_LOCATION, OGI_RECEIVER_ACTION);
							Element:br
							Element:br
								*JavaScript
							Element:br
								// Log the end of and response to an off-game-interaction\\
							Element:br
								''aKApi''.logOgiRecv(EVENT_TIMESTAMP, SENDER_ACCOUNT_ID, SENDER_CHARACTER_ID, RECEIVER_ACCOUNT_ID, RECEIVER_CHARACTER_ID, SHARD_ID, OGI_CATEGORY, OGI_LOCATION, OGI_RECEIVER_ACTION);
							Element:br
							Element:br
								*PHP
							Element:br
								// Log the end of and response to an off-game-interaction\\
							Element:br
								''$aKApi''->logOgiRecv(EVENT_TIMESTAMP, SENDER_ACCOUNT_ID, SENDER_CHARACTER_ID, RECEIVER_ACCOUNT_ID, RECEIVER_CHARACTER_ID, SHARD_ID, OGI_CATEGORY, OGI_LOCATION, OGI_RECEIVER_ACTION);
							Element:br
							Element:br
								*JSON
							Element:br
								// Log the end of and response to an off-game-interaction\\
							Element:br
							Element:br
								{
							Element:br
								"timestamp":"2013-11-14T15:00:53.806Z",
							Element:br
								"data":{
							Element:br
								"type":8,
							Element:br
								"sender_account_id":"cool_guy@example.com",
							Element:br
								"sender_character_id":"wizard",
							Element:br
								"receiver_account_id":"small_cat@example.com",
							Element:br
								"receiver_character_id":"mage",
							Element:br
								"shard_id":42,
							Element:br
								"ogi_category":"wall post",
							Element:br
								"ogi_location":"https://www.facebook.com/wall/42",
							Element:br
								“ogi_receiver_action”:”other””
							Element:br
								}
							Element:br
								}
							Element:br
							Element:br
								NOTE: All parameters are required in JSON, except “shard_id” which is optional.
							Element:br
							Element:br
								%right%[[#top|Back to Top]]
							Element:br
								----
							Element:br
							Element:br
								!!!!'''Message (Event ID#20)'''[[#Message]]
							Element:br
							Element:br
								This event records in-game messages between players for multiple channels of communication such as in-game chat, in-game mail, or a message broadcast to a group. To log an in-game message, you need to pass the sender account and character IDs; the receiver account and character IDs; the channel label; the message character count; and the timestamp. Optionally, you may pass the shard ID and the message description.
							Element:br
							Element:br
								'+'''Impacted UI Features'''+'
							Element:br
								*System Metrics (Levels)
							Element:br
							Element:br
								'+'''Parameters'''+'
							Element:br
								|| border=1 rules=rows frame=hsides
							Element:br
								||! Type ||! Parameter ||! Default Value ||
							Element:br
								||Date ||EVENT TIMESTAMP ||(Current Time)||
							Element:br
								||String ||FROM ACCOUNT ID ||''No Default Value''||
							Element:br
								||String ||FROM CHARACTER ID ||FROM_ACCOUNT_ID||
							Element:br
								||String ||TO ACCOUNT ID ||''No Default Value''||
							Element:br
								||String ||TO CHARACTER ID ||TO_ACCOUNT_ID||
							Element:br
								||Long ||SHARD ID ||0||
							Element:br
								||String ||CHANNEL LABEL ||Other [[Appendix#channel-label| (See Appendix for more types)]] ||
							Element:br
								||String ||MESSAGE DESCRIPTION ||Null||
							Element:br
								||Long ||CHAR COUNT ||1||
							Element:br
							Element:br
								'+'''Sample Use'''+'
							Element:br
							Element:br
								*Java
							Element:br
								//Log an in-game message\\
							Element:br
								public void ''aKApi.''logMessage(EVENT_TIMESTAMP, FROM_ACCOUNT_ID, FROM_CHARACTER_ID, TO_ACCOUNT_ID, TO_CHARACTER_ID, SHARD_ID, CHANNEL_LABEL, MESSAGE_DESCRIPTION, CHAR_COUNT);
							Element:br
							Element:br
								*JavaScript
							Element:br
								//Log an in-game message\\
							Element:br
								''aKApi.''logMessage(EVENT_TIMESTAMP, FROM_ACCOUNT_ID, FROM_CHARACTER_ID, TO_ACCOUNT_ID, TO_CHARACTER_ID, SHARD_ID, CHANNEL_LABEL, MESSAGE_DESCRIPTION, CHAR_COUNT);
							Element:br
							Element:br
								*PHP
							Element:br
								//Log an in-game message\\
							Element:br
								$aKApi->logMessage(EVENT_TIMESTAMP, FROM_ACCOUNT_ID, FROM_CHARACTER_ID, TO_ACCOUNT_ID, TO_CHARACTER_ID, SHARD_ID, CHANNEL_LABEL, MESSAGE_DESCRIPTION, CHAR_COUNT);
							Element:br
							Element:br
								*JSON
							Element:br
								//Log an in-game message\\
							Element:br
							Element:br
								{
							Element:br
								"timestamp":"2013-11-14T18:46:02.842Z",
							Element:br
								"data":{
							Element:br
								"type":20,
							Element:br
								"sender_account_id":"cool_guy@example.com",
							Element:br
								"sender_character_id":"Wizard",
							Element:br
								"receiver_account_id":"cool_guy@example.com",
							Element:br
								"receiver_character_id":"Wizard",
							Element:br
								"shard_id":0,
							Element:br
								"message_ch_label":"Group:Pre-Defined",
							Element:br
								"message_desc":"A guild chat message",
							Element:br
								"message_char_count":140
							Element:br
								}
							Element:br
								}
							Element:br
							Element:br
								NOTE: All parameters are required in JSON, except “shard_id” and “message_desc” which are optional.
							Element:br
							Element:br
								%right%[[#top|Back to Top]]
							Element:br
								----
							Element:br
							Element:br
								!!!!'''Recruitment Send (Event ID#33)'''[[#RecruitmentSend]]
							Element:br
							Element:br
								For games that allow players to invite other players to join them in finishing certain tasks or activities, this event records information regarding the recruitment request. To log a recruitment request, you need to pass the sender account and character IDs; the receiver account and character IDs; the recruitment type; and timestamp.
							Element:br
							Element:br
								'+'''Impacted UI Features'''+'
							Element:br
								*Basic Package (Summary)
							Element:br
							Element:br
								'+'''Parameters'''+'
							Element:br
								|| border=1 rules=rows frame=hsides
							Element:br
								||! Type ||! Parameter ||! Default Value ||
							Element:br
								||Date ||TIMESTAMP ||(Current Time)||
							Element:br
								||String ||SENDER ACCOUNT ID ||''No Default Value''||
							Element:br
								||String ||SENDER CHARACTER ID ||SENDER_ACCOUNT_ID||
							Element:br
								||String ||RECEIVER ACCOUNT ID ||''No Default Value''||
							Element:br
								||String ||RECEIVER CHARACTER ID ||RECEIVER_ACCOUNT_ID||
							Element:br
								||String ||RECRUITMENT TYPE ||Other [[Appendix#recruitment-type| (See Appendix for more types)]] ||
							Element:br
							Element:br
								'+'''Sample Use'''+'
							Element:br
							Element:br
								*Java
							Element:br
								//Log a recruitment request\\
							Element:br
								public void ''aKApi.''recruitmentSend(EVENT_TIMESTAMP, SENDER_ACCOUNT_ID, SENDER_CHARACTER_ID, RECEIVER_ACCOUNT_ID, RECEIVER_CHARACTER_ID, RECRUITMENT_TYPE);
							Element:br
							Element:br
								*JavaScript
							Element:br
								//Log a recruitment request\\
							Element:br
								''aKApi.''recruitmentSend(EVENT_TIMESTAMP, SENDER_ACCOUNT_ID, SENDER_CHARACTER_ID, RECEIVER_ACCOUNT_ID, RECEIVER_CHARACTER_ID, RECRUITMENT_TYPE);
							Element:br
							Element:br
								*PHP
							Element:br
								//Log a recruitment request\\
							Element:br
								''$aKApi->''recruitmentSend(EVENT_TIMESTAMP, SENDER_ACCOUNT_ID, SENDER_CHARACTER_ID, RECEIVER_ACCOUNT_ID, RECEIVER_CHARACTER_ID, RECRUITMENT_TYPE);
							Element:br
							Element:br
								*JSON
							Element:br
								//Log a recruitment request\\
							Element:br
							Element:br
								{
							Element:br
								"timestamp":"2013-11-15T14:37:55.545Z",
							Element:br
								"data":{
							Element:br
								"type":33,
							Element:br
								"sender_account_id":"cool_guy@example.com",
							Element:br
								"sender_character_id":"Wizard",
							Element:br
								"receiver_account_id":"small_cat@example.com",
							Element:br
								"receiver_character_id":"Wizard",
							Element:br
								"recruitment_type":"mobile ad"
							Element:br
								}
							Element:br
								}
							Element:br
							Element:br
								NOTE: All parameters are required in JSON.
							Element:br
							Element:br
								%right%[[#top|Back to Top]]
							Element:br
								----
							Element:br
							Element:br
								!!!!'''Recruitment Receive Action (Event ID#34)'''[[#RecruitmentReceive]]
							Element:br
							Element:br
								This event records information regarding a player's response to a recruitment request, for example, was the request accepted or declined. To log a recruitment request response, you need to pass the sender account and character IDs; the receiver account and character IDs; the recruitment type and outcome; and the timestamp.
							Element:br
							Element:br
								For related information, see [[#RecruitmentSend| ''Recruitment Send'']].
							Element:br
							Element:br
								'+'''Impacted UI Features'''+'
							Element:br
								*Basic Package (Summary)
							Element:br
							Element:br
								'+'''Parameters'''+'
							Element:br
								|| border=1 rules=rows frame=hsides
							Element:br
								||! Type ||! Parameter ||! Default Value ||
							Element:br
								||Date ||TIMESTAMP ||(Current Time)||
							Element:br
								||String ||SENDER ACCOUNT ID ||''No Default Value''||
							Element:br
								||String ||SENDER CHARACTER ID ||SENDER_ACCOUNT_ID||
							Element:br
								||String ||RECEIVER ACCOUNT ID ||''No Default Value''||
							Element:br
								||String ||RECEIVER CHARACTER ID ||RECEIVER_ACCOUNT_ID||
							Element:br
								||String ||RECRUITMENT TYPE ||Other [[Appendix#recruitment-type| (See Appendix for more types)]] ||
							Element:br
								||String ||RECRUITMENT OUTCOME ||Rejected*||
							Element:br
							Element:br
								[- *Recruitment Outcome default is 'Rejected', alternate options also include 'Accepted'.-]
							Element:br
							Element:br
								'+'''Sample Use'''+'
							Element:br
							Element:br
								*Java
							Element:br
								//Log a recruitment request response\\
							Element:br
								public void ''aKApi.''recruitmentReceive(EVENT_TIMESTAMP, SENDER_ACCOUNT_ID, SENDER_CHARACTER_ID, RECEIVER_ACCOUNT_ID, RECEIVER_CHARACTER_ID, RECRUITMENT_TYPE, RECRUITMENT_OUTCOME);
							Element:br
							Element:br
								*JavaScript
							Element:br
								//Log a recruitment request response\\
							Element:br
								''aKApi.''recruitmentReceive(EVENT_TIMESTAMP, SENDER_ACCOUNT_ID, SENDER_CHARACTER_ID, RECEIVER_ACCOUNT_ID, RECEIVER_CHARACTER_ID, RECRUITMENT_TYPE, RECRUITMENT_OUTCOME);
							Element:br
							Element:br
								*PHP
							Element:br
								//Log a recruitment request response\\
							Element:br
								''$aKApi->''recruitmentReceive(EVENT_TIMESTAMP, SENDER_ACCOUNT_ID, SENDER_CHARACTER_ID, RECEIVER_ACCOUNT_ID, RECEIVER_CHARACTER_ID, RECRUITMENT_TYPE, RECRUITMENT_OUTCOME);
							Element:br
							Element:br
								*JSON
							Element:br
								//Log a recruitment request response\\
							Element:br
							Element:br
								{
							Element:br
								"timestamp":"2013-11-15T14:47:14.579Z",
							Element:br
								"data":{
							Element:br
								"type":34,
							Element:br
								"sender_account_id":"cool_guy@example.com",
							Element:br
								"sender_character_id":"Wizard",
							Element:br
								"receiver_account_id":"small_cat@example.com",
							Element:br
								"receiver_character_id":"Wizard",
							Element:br
								"recruitment_type":"mobile ad",
							Element:br
								"recruitment_outcome":"trial account"
							Element:br
								}
							Element:br
								}
							Element:br
							Element:br
								NOTE: All parameters are required in JSON.
							Element:br
							Element:br
								%right%[[#top|Back to Top]]
							Element:br
								----
							Element:br
							Element:br
								!!!!'''Friend Addition (Event ID#43)'''
							Element:br
							Element:br
								This event records information regarding a player adding another player as a friend, despite whether the friendship is reciprocated. To log a friend addition, you need to pass the sender account and character IDs; the receiver account and character IDs; and the timestamp.
							Element:br
							Element:br
								Please note that this is a one-way, "follow" type of addition. If Bob is accepting a friend request from Alice, and they will subsequently appear on each other's friends list, then two events should be sent. One with Alice as the sender and Bob as the recipient, and another with Bob as the sender and Alice as the recipient. If Alice is simply following Bob without any action on his part, then you only need to send a single event with Alice as the sender and Bob as the recipient.
							Element:br
							Element:br
								'+'''Impacted UI Features'''+'
							Element:br
								*System Metrics (Levels)
							Element:br
							Element:br
								'+'''Parameters'''+'
							Element:br
								|| border=1 rules=rows frame=hsides
							Element:br
								||! Type ||! Parameter ||! Default Value ||
							Element:br
								|| Date || EVENT TIMESTAMP || (Current Time) ||
							Element:br
								|| String || ACCOUNT ID || ''No Default Value'' ||
							Element:br
								|| String || CHARACTER ID || ACCOUNT ID ||
							Element:br
								|| String || RECIPIENT ACCOUNT ID || ''No Default Value'' ||
							Element:br
								|| String || RECIPIENT CHARACTER ID || RECIPIENT ACCOUNT ID ||
							Element:br
							Element:br
								'+'''Sample Use'''+'
							Element:br
							Element:br
								*Java
							Element:br
								//Log a friend addition\\
							Element:br
								public void ''aKApi''.logFriendAdd(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, RECIPIENT_ACCOUNT_ID, RECIPIENT_CHARACTER_ID);
							Element:br
							Element:br
								*JavaScript
							Element:br
								//Log a friend addition\\
							Element:br
								''aKApi''.logFriendAdd(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, RECIPIENT_ACCOUNT_ID, RECIPIENT_CHARACTER_ID);
							Element:br
							Element:br
								*PHP
							Element:br
								//Log a friend addition\\
							Element:br
								''$aKApi''->logFriendAdd(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, RECIPIENT_ACCOUNT_ID, RECIPIENT_CHARACTER_ID);
							Element:br
							Element:br
								*JSON
							Element:br
								//Log a friend addition\\
							Element:br
							Element:br
								{
							Element:br
								"timestamp":"2013-11-15T17:35:00.091Z",
							Element:br
								"data":{
							Element:br
								"type":43,
							Element:br
								"sender_account_id":"cool_guy@example.com",
							Element:br
								"sender_character_id":"Wizard",
							Element:br
								"receiver_account_id":"small_cat@example.com",
							Element:br
								"receiver_character_id":"Wizard"
							Element:br
								}
							Element:br
								}
							Element:br
							Element:br
								NOTE: All parameters are required in JSON.
							Element:br
							Element:br
								%right%[[#top|Back to Top]]
							Element:br
								----
							Element:br
							Element:br
								!!!!'''Friend Deletion (Event ID#44)'''
							Element:br
							Element:br
							Element:br
								This event records information regarding the end of an in-game friendship. To log a friend deletion, you need to pass the sender account and character IDs; the receiver account and character IDs; along with the timestamp.
							Element:br
							Element:br
								For related information, see Friend Addition.
							Element:br
							Element:br
								Please note that this is a one-way, "unfollow" type of deletion. If Alice and Bob are currently in each other's friends list, and a removal from one party will cause them to be dropped from both lists, then you should send two deletion events. One with Alice as the sender and Bob as the recipient, and another with Bob as the sender and Alice as the recipient.
							Element:br
							Element:br
								'+'''Impacted UI Features'''+'
							Element:br
								*System Metrics (Levels)
							Element:br
							Element:br
								'+'''Parameters'''+'
							Element:br
								|| border=1 rules=rows frame=hsides
							Element:br
								||! Type ||! Parameter ||! Default Value ||
							Element:br
								|| Date || EVENT TIMESTAMP || (Current Time) ||
							Element:br
								|| String || ACCOUNT ID || ''No Default Value'' ||
							Element:br
								|| String || CHARACTER ID || ACCOUNT ID ||
							Element:br
								|| String || RECIPIENT ACCOUNT ID || ''No Default Value'' ||
							Element:br
								|| String || RECIPIENT CHARACTER ID || RECIPIENT ACCOUNT ID ||
							Element:br
							Element:br
								'+'''Sample Use'''+'
							Element:br
							Element:br
								*Java
							Element:br
								//Log a friend deletion\\
							Element:br
								public void ''aKApi''.logFriendDelete(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, RECIPIENT_ACCOUNT_ID, RECIPIENT_CHARACTER_ID);
							Element:br
							Element:br
								*JavaScript
							Element:br
								//Log a friend deletion\\
							Element:br
								''aKApi''.logFriendDelete(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, RECIPIENT_ACCOUNT_ID, RECIPIENT_CHARACTER_ID);
							Element:br
							Element:br
								*PHP
							Element:br
								//Log a friend deletion\\
							Element:br
								''$aKApi''->logFriendDelete(EVENT_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, RECIPIENT_ACCOUNT_ID, RECIPIENT_CHARACTER_ID);
							Element:br
							Element:br
								*JSON
							Element:br
								//Log a friend deletion\\
							Element:br
							Element:br
								{
							Element:br
								"timestamp":"2013-11-15T17:40:17.868Z",
							Element:br
								"data":{
							Element:br
								"type":44,
							Element:br
								"sender_account_id":"cool_guy@example.com",
							Element:br
								"sender_character_id":"Wizard",
							Element:br
								"receiver_account_id":"small_cat@example.com",
							Element:br
								"receiver_character_id":"Wizard"
							Element:br
								}
							Element:br
								}
							Element:br
							Element:br
								NOTE: “sender_account_id”, and “receiver_account_id” are required, while all other parameters are optional.
							Element:br
							Element:br
								%right%[[#top|Back to Top]]
							Element:br
								----
							Element:br
							Element:br
								!!'''Custom Events'''[[#CustomEvents]]
							Element:br
							Element:br
								Custom events include those events that relate to custom actions and CRM actions. As a Ninja Metrics customer, you have the freedom to define custom events in any way that you want, given the fields described under the ''Custom Slot Action ''and ''Custom Action ''events below. Details on how to execute calls to log custom events can be found below for each corresponding event.
							Element:br
							Element:br
							Element:br
								%comment%!!!!'''CRM Action (Event ID#52)''' - To Be Completed.
							Element:br
							Element:br
								%comment%A Customer Relationship Management (CRM) action may be taken by a CRM representative in the gaming company and recorded using this generic field. This event records information regarding how the customer responds to the action. To log a CRM action and response, you need to pass the account and character IDs, the shard ID, the CRM action; and the action type and timestamp. Optionally, you may pass the shard ID, outcome status and timestamp.
							Element:br
							Element:br
								%comment%'+'''Impacted UI Features'''+'
							Element:br
								%comment%*KPI
							Element:br
							Element:br
								%comment%'+'''Parameters'''+'
							Element:br
								%comment%|| border=1 rules=rows frame=hsides
							Element:br
								%comment%||! Type ||! Parameter ||! Default Value ||
							Element:br
								%comment%|| Date || CRM ACTION TIMESTAMP || (Current Time) ||
							Element:br
								%comment%|| String || ACCOUNT ID || ''No Default Value'' ||
							Element:br
								%comment%|| String || CHARACTER ID || ACCOUNT ID ||
							Element:br
								%comment%|| Long || SHARD ID || 0 ||
							Element:br
								%comment%|| String || CRM ACTION || NA ||
							Element:br
								%comment%|| String || CRM ACTION TYPE || Other [[Appendix#crm-action-type| (See Appendix for more types)]]||
							Element:br
								%comment%|| String || CRM FULFILLED STATUS || Null ||
							Element:br
								%comment%|| Date || CRM FULFILLED TIMESTAMP || Null ||
							Element:br
							Element:br
								%comment%'+'''Sample Use'''+'
							Element:br
							Element:br
								%comment%*Java
							Element:br
								%comment%//Log a CRM action and response\\
							Element:br
								%comment%public void ''aKApi''.logCrmAction(CRM_ACTION_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, CRM_ACTION, CRM_ACTION_TYPE, CRM_FULFILLED_STATUS, %comment%CRM_FULFILLED_TIMESTAMP);
							Element:br
							Element:br
								%comment%*JavaScript
							Element:br
								%comment%//Log a CRM action and response\\
							Element:br
								%comment%''aKApi''.logCrmAction(CRM_ACTION_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, CRM_ACTION, CRM_ACTION_TYPE, CRM_FULFILLED_STATUS, CRM_FULFILLED_TIMESTAMP);
							Element:br
							Element:br
								%comment%*PHP
							Element:br
								%comment%//Log a CRM action and response\\
							Element:br
								%comment%''$aKApi''->logCrmAction(CRM_ACTION_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, CRM_ACTION, CRM_ACTION_TYPE, CRM_FULFILLED_STATUS, CRM_FULFILLED_TIMESTAMP);
							Element:br
							Element:br
								%comment%*JSON
							Element:br
								%comment%//Log a CRM action and response\\
							Element:br
							Element:br
								%comment% {
							Element:br
								%comment% "timestamp":"2013-11-15T18:23:20.079Z",
							Element:br
								%comment% "data":{
							Element:br
								%comment% "type":52,
							Element:br
								%comment% "account_id":"cool_guy@example.com",
							Element:br
								%comment% "character_id":"Wizard",
							Element:br
								%comment% "shard_id":42.42,
							Element:br
								%comment% "crm_action":"crm_action",
							Element:br
								%comment% "crm_action_type":"crm_action_type",
							Element:br
								%comment% "crm_fulfilled_status":"crm_fulfilled_status",
							Element:br
								%comment% "crm_fulfilled_timestamp":"2013-08-12T05:00:00.000Z"
							Element:br
								%comment% }
							Element:br
								%comment% }
							Element:br
							Element:br
								%comment%NOTE: All parameters are required in JSON, except “shard_id”, “crm_fulfilled_status”, and “crm_fulfilled_timestamp” which are optional.
							Element:br
							Element:br
								%comment%%right%[[#top|Back to Top]]
							Element:br
								%comment%----
							Element:br
							Element:br
								%comment%!!!!'''Customer Service Action (Event ID#53)''' - To Be Completed.
							Element:br
							Element:br
								%comment%To log a customer service action ,you need to pass the account and character IDs, the customer service action and type; along with the action timestamp. Optionally, you may pass the shard ID.
							Element:br
							Element:br
								%comment%'+'''Impacted UI Features'''+'
							Element:br
								%comment%*KPI
							Element:br
							Element:br
								%comment%'+'''Parameters'''+'
							Element:br
								%comment%|| border=1 rules=rows frame=hsides
							Element:br
								%comment%||! Type ||! Parameter ||! Default Value ||
							Element:br
								%comment%|| Date || CS TIMESTAMP || (Current Time) ||
							Element:br
								%comment%|| String || ACCOUNT ID || ''No Default Value'' ||
							Element:br
								%comment%|| String || CHARACTER ID || ACCOUNT ID ||
							Element:br
								%comment%|| Long || SHARD ID || 0 ||
							Element:br
								%comment%|| String || CS ACTION || ''No Default Value'' ||
							Element:br
								%comment%|| String || CS ACTION TYPE || Other [[Appendix#cs-action-type| (See Appendix for more types)]]||
							Element:br
							Element:br
							Element:br
								%comment%'+'''Sample Use'''+'
							Element:br
							Element:br
								%comment%*Java
							Element:br
								%comment%//Log a custom slot action event\\
							Element:br
								%comment%public void ''aKApi''.logCustomerServiceAction(CS_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, CS_ACTION, CS_ACTION_TYPE);
							Element:br
							Element:br
								%comment%*JavaScript
							Element:br
								%comment%//Log a custom slot action event\\
							Element:br
								%comment%''aKApi''.logCustomerServiceAction(CS_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, CS_ACTION, CS_ACTION_TYPE);
							Element:br
							Element:br
								%comment%*PHP
							Element:br
								%comment%//Log a custom slot action event\\
							Element:br
								%comment%''$aKApi''->logCustomerServiceAction(CS_TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, SHARD_ID, CS_ACTION, CS_ACTION_TYPE);
							Element:br
							Element:br
								%comment%*JSON
							Element:br
								%comment%//Log a custom slot action event\\
							Element:br
							Element:br
								%comment% {
							Element:br
								%comment% "timestamp":"2013-11-15T18:29:07.797Z",
							Element:br
								%comment% "data":{
							Element:br
								%comment% "type":53,
							Element:br
								%comment% "account_id":"cool_guy@example.com",
							Element:br
								%comment% "character_id":"Wizard",
							Element:br
								%comment% "shard_id":42.42,
							Element:br
								%comment% "customer_service_action":"cs_action",
							Element:br
								%comment% "customer_service_action_type":"cs_action_type"
							Element:br
								%comment% }
							Element:br
								%comment% }
							Element:br
							Element:br
								%comment%NOTE: All parameter are required in JSON, except “shard_id” which is optional.
							Element:br
							Element:br
								%comment%%right%[[#top|Back to Top]]
							Element:br
								%comment%----
							Element:br
							Element:br
								!!!!'''Custom Slot (Event ID#54)'''
							Element:br
							Element:br
							Element:br
								This event can be defined by your organization and records information regarding events that are not described in any of the other events and do not relate to actions in the game. To log a custom action event, you need to pass the account and character IDs, the custom action, the action type, the action value, and the timestamp.
							Element:br
							Element:br
								'+'''Impacted UI Features'''+'
							Element:br
								*KPI
							Element:br
							Element:br
								'+'''Parameters'''+'
							Element:br
								|| border=1 rules=rows frame=hsides
							Element:br
								||! Type ||! Parameter ||! Default Value ||
							Element:br
								|| Date || TIMESTAMP || (Current Time) ||
							Element:br
								|| String || ACCOUNT ID || ''No Default Value'' ||
							Element:br
								|| String || CHARACTER ID || ACCOUNT ID ||
							Element:br
								|| String || CUSTOM ACTION || ''No Default Value'' ||
							Element:br
								|| String || CUSTOM ACTION TYPE || ''No Default Value'' ||
							Element:br
								|| String (max 400) || CUSTOM ACTION VALUE || NA ||
							Element:br
							Element:br
								'+'''Sample Use'''+'
							Element:br
							Element:br
								*Java
							Element:br
								//Log a custom action event\\
							Element:br
								public void ''aKApi''.logCustomAction(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CUSTOM_ACTION, CUSTOM_ACTION_TYPE, CUSTOM_ACTION_VALUE);
							Element:br
							Element:br
								*JavaScript
							Element:br
								//Log a custom action event\\
							Element:br
								''aKApi''.logCustomAction(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CUSTOM_ACTION, CUSTOM_ACTION_TYPE, CUSTOM_ACTION_VALUE);
							Element:br
							Element:br
								*PHP
							Element:br
								//Log a custom action event\\
							Element:br
								''$aKApi''->logCustomAction(TIMESTAMP, ACCOUNT_ID, CHARACTER_ID, CUSTOM_ACTION, CUSTOM_ACTION_TYPE, CUSTOM_ACTION_VALUE);
							Element:br
							Element:br
								*JSON
							Element:br
								//Log a custom action event\\
							Element:br
							Element:br
								{
							Element:br
								"timestamp":"2013-11-15T18:35:36.006Z",
							Element:br
								"data":{
							Element:br
								"type":54,
							Element:br
								"account_id":"cool_guy@example.com",
							Element:br
								"character_id":"Wizard",
							Element:br
								"custom_action":"custom_action",
							Element:br
								"custom_action_type":"custom_action_type",
							Element:br
								"custom_action_value":"custom_action_value"
							Element:br
								}
							Element:br
								}
							Element:br
							Element:br
								NOTE: All parameters are required in JSON.
							Element:br
							Element:br
								%right%[[#top|Back to Top]]
							Element:br
								----
						Node:
						(type) c
						(layer)2
							Element:a
								Restore
						Node:
						(type) c
						(layer)2
							Element:a
								March 09, 2015, at 10:50 PM
								by
						Node:
						(type) c
						(layer)2
							Element:span
								173.51.250.14
								- Added lines 1-32:
						Node:
						(type) c
						(layer)2
							Element:ins
								[+The Katana Social Analytics Engine measures the value of social contributions in applications and games, provides detailed projections for the outcomes that matter to developers, and offers the tools to determine how effectively features facilitate engagement and social interaction.+]
							Element:br
							Element:br
								If you're new to Katana start with the [[Main/GettingStarted|Getting Started Guide]]. Otherwise dig right in with an Integration Library or the API documentation.
							Element:br
							Element:br
								(:table border=0 cellpadding=5 cellspacing=0:)
							Element:br
								(:headnr:) [[Libraries/Libraries | Integration Libraries]]
							Element:br
								(:head:) [[Site/APIDocumentation | API Documentation]]
							Element:br
								(:head:) [[IntegrationExamples | Integration Examples]]
							Element:br
								(:head:) [[Help | Support]]
							Element:br
								(:cellnr:) [[Libraries/JavaScript]]
							Element:br
								(:cell:) [[Main/QuickStartGuide|Quick Start Guide]]
							Element:br
								(:cell:) [[IntegrationExamples/Unity | Unity]]
							Element:br
								(:cell:) [[Help/FAQs]]
							Element:br
								(:cellnr:) [[Libraries/Java]]
							Element:br
								(:cell:) [[Main/AdvancedSetupGuide|Advanced Setup Guide]]
							Element:br
								(:cell:) [[Main/AdvancedSetupGuide-Removed|Advanced Setup Guide-Removed]]
							Element:br
								(:cell:) [[IntegrationExamples/Android | Android]]
							Element:br
								(:cell:) [[Help/Glossary]]
							Element:br
								(:cellnr:) [[Libraries/PHP]]
							Element:br
								(:cell:)[[Recommended Country Codes]]
							Element:br
								(:cell:) [[IntegrationExamples/iOS | iOS]]
							Element:br
								(:cell:) [[Help/Dashboards]]
							Element:br
							Element:br
								(:cellnr:) [[Libraries/IOS]]
							Element:br
								(:cellnr:) [[Libraries/Android]]
							Element:br
								(:cell:) [[JSON Sample Events]]
							Element:br
								%comment%(:cell:) [[JSON Sample Events - Removed]]
							Element:br
								(:cell:) &nbsp;
							Element:br
								(:cell:) [[Help/Videos]]
							Element:br
							Element:br
								(:tableend:)
							Element:br
								(:comment [[Attach:Main/Ninja Metrics - Katana API Documentationv9.pdf|Katana API Doc]] :)
						Node:
						(type) c
						(layer)2
							Element:a
								Restore
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
														Search
												Node:
												(type) c
												(layer)4
													Element:fieldset
													Element:p
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
													Element:a
														View
													Element:li
													Element:a
														Edit
													Element:li
													Element:a
														History
													Element:li
													Element:a
														Print
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Getting Started
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Integration Libraries
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
													Element:a
														JavaScript
													Element:li
													Element:a
														Java
													Element:li
													Element:a
														PHP
													Element:li
													Element:a
														iOS
													Element:li
													Element:a
														Android
													Element:li
													Element:a
														Unreal
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														API Documentation
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
													Element:a
														Getting Started
													Element:li
													Element:a
														Quick Start Guide
													Element:li
													Element:a
														Advanced Setup Guide
													Element:li
													Element:a
														HTTPS & JSON API
													Element:li
													Element:a
														JSON Sample Events
													Element:li
													Element:a
														Recommended Country Codes
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
													Element:a
														edit SideBar
												Node:
												(type) c
												(layer)4
													Element:p
														Page last modified on May 27, 2015, at 04:07 PM
												Node:
												(type) c
												(layer)4
													Element:p
														© Ninja Metrics, Inc.
