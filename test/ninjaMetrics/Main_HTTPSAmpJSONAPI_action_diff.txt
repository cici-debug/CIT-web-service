Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
				Element:a
					Developer Hub
			Node:
			(type) c
			(layer)1
				Element:a
					Main
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
							Element:a
								HTTPS Amp JSONAPI
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Main.HTTPSAmpJSONAPI History
						Node:
						(type) c
						(layer)2
							Element:p
							Element:a
								Hide minor edits
								-
							Element:a
								Show changes to output
						Node:
						(type) c
						(layer)2
							Element:a
								November 14, 2013, at 06:01 AM
								by
						Node:
						(type) c
						(layer)2
							Element:span
								68.170.72.231
								- Changed lines 64-66 from: platform is an open-ended String field that should be used consistently by the integrator.
						Node:
						(type) c
						(layer)2
							Element:br
								FUTURE: area_id must match numeric identifier given from map loading process.
						Node:
						(type) c
						(layer)2
							Element:br
								NOTE: One could have just the type and account_id parameters in the data section and only have to initialize the account_id parameter. to:
						Node:
						(type) c
						(layer)2
							Element:ins
								*
								platform is an open-ended String field that should be used consistently by the integrator.
						Node:
						(type) c
						(layer)2
							Element:br
						Node:
						(type) c
						(layer)2
							Element:ins
								*
								FUTURE: area_id must match numeric identifier given from map loading process.
						Node:
						(type) c
						(layer)2
							Element:br
						Node:
						(type) c
						(layer)2
							Element:ins
								*
								NOTE: One could have just the type and account_id parameters in the data section and only have to initialize the account_id parameter. Changed lines 84-85 from: account_sub_value: how much does the subscription over this period cost?
						Node:
						(type) c
						(layer)2
							Element:br
								account_sub_expires_timestamp - timestamp = subscription period length to:
						Node:
						(type) c
						(layer)2
							Element:ins
								*
								account_sub_value: how much does the subscription over this period cost?
						Node:
						(type) c
						(layer)2
							Element:br
						Node:
						(type) c
						(layer)2
							Element:ins
								*
								account_sub_expires_timestamp - timestamp = subscription period length Changed lines 102-103 from: group_id parameter values do not have to be initialized beforehand. The burden of using correct values in on the integrator.
						Node:
						(type) c
						(layer)2
							Element:br
								character_lvl must be numeric and should be set to 0 if unused to:
						Node:
						(type) c
						(layer)2
							Element:ins
								*
								group_id parameter values do not have to be initialized beforehand. The burden of using correct values in on the integrator.
						Node:
						(type) c
						(layer)2
							Element:br
						Node:
						(type) c
						(layer)2
							Element:ins
								*
								character_lvl must be numeric and should be set to 0 if unused Changed lines 120-121 from: group_id parameter values do not have to be initialized beforehand. The burden of using correct values in on the integrator.
						Node:
						(type) c
						(layer)2
							Element:br
								character_lvl must be numeric and should be set to 0 if unused to:
						Node:
						(type) c
						(layer)2
							Element:ins
								*
								group_id parameter values do not have to be initialized beforehand. The burden of using correct values in on the integrator.
						Node:
						(type) c
						(layer)2
							Element:br
						Node:
						(type) c
						(layer)2
							Element:ins
								*
								character_lvl must be numeric and should be set to 0 if unused Changed lines 141-143 from: Optional parameters: sender_character_id, receiver_character_id, shard_id. social_event_name, and social_event_type will accept any string. social_event_type examples: “clan invite”, “group invite”, “barter”. This should be used for social events not already explicitly called out. Do NOT use this for tracking Guild (#41,42) or Group (#4,5) Enter/Exit, Recruitment (#33,34) Send/Response. to: Optional parameters: sender_character_id, receiver_character_id, shard_id.
						Node:
						(type) c
						(layer)2
							Element:ins
								social_event_name, and social_event_type will accept any string.
							Element:br
								*
						Node:
						(type) c
						(layer)2
							Element:ins
								social_event_type examples: “clan invite”, “group invite”, “barter”. This should be used for social events not already explicitly called out. Do NOT use this for tracking Guild (#41,42) or Group (#4,5) Enter/Exit, Recruitment (#33,34) Send/Response. Changed lines 200-204 from: account_sub_type: Free, Paid, Premium
							Element:br
								*
						Node:
						(type) c
						(layer)2
							Element:br
								account_lang - 2 to 4 letter language code from http://www.geonames.org/countries/ - examples: ar-YE, en-US, fr
						Node:
						(type) c
						(layer)2
							Element:br
								account_country - ISO-3166 alpha2 country-code from http://www.geonames.org/countries/ - examples: YE, US, VE
						Node:
						(type) c
						(layer)2
							Element:br
								account_gender: “M”, “F”, “T”, or “”
						Node:
						(type) c
						(layer)2
							Element:br
								platform is an open-ended String field that should be used consistently by the integrator to:
						Node:
						(type) c
						(layer)2
							Element:ins
								*
								account_sub_type: Free, Paid, Premium
						Node:
						(type) c
						(layer)2
							Element:br
						Node:
						(type) c
						(layer)2
							Element:ins
								*
								account_lang - 2 to 4 letter language code from http://www.geonames.org/countries/ - examples: ar-YE, en-US, fr
						Node:
						(type) c
						(layer)2
							Element:br
						Node:
						(type) c
						(layer)2
							Element:ins
								*
								account_country - ISO-3166 alpha2 country-code from http://www.geonames.org/countries/ - examples: YE, US, VE
						Node:
						(type) c
						(layer)2
							Element:br
						Node:
						(type) c
						(layer)2
							Element:ins
								*
								account_gender: “M”, “F”, “T”, or “”
						Node:
						(type) c
						(layer)2
							Element:br
						Node:
						(type) c
						(layer)2
							Element:ins
								*
								platform is an open-ended String field that should be used consistently by the integrator Changed lines 220-222 from: account_status: Stopped, Expired, Failed, Cancelled
						Node:
						(type) c
						(layer)2
							Element:br
								farmer_flag: Y, N - was this account a gold farmer?
						Node:
						(type) c
						(layer)2
							Element:br
								integrity_flag: Y, N - did this account’s integrity get compromised? to:
						Node:
						(type) c
						(layer)2
							Element:ins
								*
								account_status: Stopped, Expired, Failed, Cancelled
						Node:
						(type) c
						(layer)2
							Element:br
						Node:
						(type) c
						(layer)2
							Element:ins
								*
								farmer_flag: Y, N - was this account a gold farmer?
						Node:
						(type) c
						(layer)2
							Element:br
						Node:
						(type) c
						(layer)2
							Element:ins
								*
								integrity_flag: Y, N - did this account’s integrity get compromised? Changed line 242 from: character_gender: “M”, “F”, “T”, “” to:
						Node:
						(type) c
						(layer)2
							Element:ins
								*
								character_gender: “M”, “F”, “T”, “” Changed lines 300-303 from: item_type may be any string, but use it consistently. some examples: “Raw materials”, “Mounts and pets”, “armor”, “tools”, “containers”
						Node:
						(type) c
						(layer)2
							Element:br
								item_value is a floating point value which would be used for the store price of the item
						Node:
						(type) c
						(layer)2
							Element:br
								item_segment may be “UGC” when the item is user-generated or “INGAME” when part of the original application
						Node:
						(type) c
						(layer)2
							Element:br
								IF the item_segment field is “UGC” then the account_id and character_id fields should be set appropriately, otherwise they should be empty strings to:
						Node:
						(type) c
						(layer)2
							Element:ins
								*
								item_type may be any string, but use it consistently. some examples: “Raw materials”, “Mounts and pets”, “armor”, “tools”, “containers”
						Node:
						(type) c
						(layer)2
							Element:br
						Node:
						(type) c
						(layer)2
							Element:ins
								*
								item_value is a floating point value which would be used for the store price of the item
						Node:
						(type) c
						(layer)2
							Element:br
						Node:
						(type) c
						(layer)2
							Element:ins
								*
								item_segment may be “UGC” when the item is user-generated or “INGAME” when part of the original application
						Node:
						(type) c
						(layer)2
							Element:br
						Node:
						(type) c
						(layer)2
							Element:ins
								*
								IF the item_segment field is “UGC” then the account_id and character_id fields should be set appropriately, otherwise they should be empty strings Changed lines 365-369 from: transaction_type: 0 if currency is spent, 1 if currency is acquired
						Node:
						(type) c
						(layer)2
							Element:br
								currency_type: 0 if real-world currency, 1 if virtual currency
						Node:
						(type) c
						(layer)2
							Element:br
								virtual_currency_label: name of a virtual currency already initialized with Event#14, used in this transaction
						Node:
						(type) c
						(layer)2
							Element:br
								currency_value: floating point representation of how much currency was trasacted
						Node:
						(type) c
						(layer)2
							Element:br
								transaction_desc: optional description of the transaction limited to 200 characters to:
						Node:
						(type) c
						(layer)2
							Element:ins
								*
								transaction_type: 0 if currency is spent, 1 if currency is acquired
						Node:
						(type) c
						(layer)2
							Element:br
						Node:
						(type) c
						(layer)2
							Element:ins
								*
								currency_type: 0 if real-world currency, 1 if virtual currency
						Node:
						(type) c
						(layer)2
							Element:br
						Node:
						(type) c
						(layer)2
							Element:ins
								*
								virtual_currency_label: name of a virtual currency already initialized with Event#14, used in this transaction
						Node:
						(type) c
						(layer)2
							Element:br
						Node:
						(type) c
						(layer)2
							Element:ins
								*
								currency_value: floating point representation of how much currency was trasacted
						Node:
						(type) c
						(layer)2
							Element:br
						Node:
						(type) c
						(layer)2
							Element:ins
								*
								transaction_desc: optional description of the transaction limited to 200 characters
						Node:
						(type) c
						(layer)2
							Element:a
								Restore
						Node:
						(type) c
						(layer)2
							Element:a
								November 14, 2013, at 05:58 AM
								by
						Node:
						(type) c
						(layer)2
							Element:span
								68.170.72.231
								- Added line 86:
						Node:
						(type) c
						(layer)2
							Element:ins
								----
								Added line 104:
						Node:
						(type) c
						(layer)2
							Element:ins
								----
								Added line 122:
						Node:
						(type) c
						(layer)2
							Element:ins
								----
								Added line 142:
						Node:
						(type) c
						(layer)2
							Element:ins
								----
								Added line 160:
						Node:
						(type) c
						(layer)2
							Element:ins
								----
								Added line 179:
						Node:
						(type) c
						(layer)2
							Element:ins
								----
								Added line 203:
						Node:
						(type) c
						(layer)2
							Element:ins
								----
								Added line 221:
						Node:
						(type) c
						(layer)2
							Element:ins
								----
								Added line 241:
						Node:
						(type) c
						(layer)2
							Element:ins
								----
								Added line 254:
						Node:
						(type) c
						(layer)2
							Element:ins
								----
								Added line 267:
						Node:
						(type) c
						(layer)2
							Element:ins
								----
								Added line 280:
						Node:
						(type) c
						(layer)2
							Element:ins
								----
								Added line 302:
						Node:
						(type) c
						(layer)2
							Element:ins
								----
								Added line 323:
						Node:
						(type) c
						(layer)2
							Element:ins
								----
								Changed lines 344-345 from: #18 Currency Transaction to:
						Node:
						(type) c
						(layer)2
							Element:ins
								----
								#18 Currency Transaction Changed lines 368-369 from: #19 User Generated Content Rating to:
							Element:br
								*Event
						Node:
						(type) c
						(layer)2
							Element:ins
								----
								#19 User Generated Content Rating Changed lines 385-386 from: #20 Message to:
							Element:br
								*Event
						Node:
						(type) c
						(layer)2
							Element:ins
								----
								#20 Message Changed lines 404-405 from: #21 Begin Combat with an NPC to:
							Element:br
								* Event
						Node:
						(type) c
						(layer)2
							Element:ins
								----
								#21 Begin Combat with an NPC Changed lines 423-424 from: #22 End Combat with an NPC to:
							Element:br
								* Event
						Node:
						(type) c
						(layer)2
							Element:ins
								----
								#22 End Combat with an NPC Changed lines 442-443 from: #23 Kill an NPC to:
							Element:br
								* Event
						Node:
						(type) c
						(layer)2
							Element:ins
								----
								#23 Kill an NPC Changed lines 458-459 from: #24 Player Xp to:
							Element:br
								* Event
						Node:
						(type) c
						(layer)2
							Element:ins
								----
								#24 Player Xp
							Element:br
								* Event
						Node:
						(type) c
						(layer)2
							Element:a
								Restore
						Node:
						(type) c
						(layer)2
							Element:a
								November 14, 2013, at 05:56 AM
								by
						Node:
						(type) c
						(layer)2
							Element:span
								68.170.72.231
								- Added line 29:
						Node:
						(type) c
						(layer)2
							Element:ins
								----
								Changed lines 45-47 from: platform is an open-ended String field that should be used consistently by the integrator.
						Node:
						(type) c
						(layer)2
							Element:br
								FUTURE: area_id must match numeric identifier given from map loading process.
						Node:
						(type) c
						(layer)2
							Element:br
								NOTE: One could have just the type and account_id parameters in the data section and only have to initialize the account_id parameter. to:
						Node:
						(type) c
						(layer)2
							Element:ins
								**
								platform is an open-ended String field that should be used consistently by the integrator.
						Node:
						(type) c
						(layer)2
							Element:br
						Node:
						(type) c
						(layer)2
							Element:ins
								**
								FUTURE: area_id must match numeric identifier given from map loading process.
						Node:
						(type) c
						(layer)2
							Element:br
						Node:
						(type) c
						(layer)2
							Element:ins
								**
								NOTE: One could have just the type and account_id parameters in the data section and only have to initialize the account_id parameter.
						Node:
						(type) c
						(layer)2
							Element:ins
								Added line 67:
							Element:br
								----
						Node:
						(type) c
						(layer)2
							Element:ins
								----
						Node:
						(type) c
						(layer)2
							Element:a
								Restore
						Node:
						(type) c
						(layer)2
							Element:a
								November 14, 2013, at 05:55 AM
								by
						Node:
						(type) c
						(layer)2
							Element:span
								68.170.72.231
								- Changed line 27 from:
						Node:
						(type) c
						(layer)2
							Element:del
								->
								The values used for the account_id, character_id, and shard_id keys must be initialized with the respective #9, #11, and #13 dimensional data loader Events before use in any Event payloads. Event type #9-15, 31, 35, 36 are used in initializing DIM data. to: The values used for the account_id, character_id, and shard_id keys must be initialized with the respective #9, #11, and #13 dimensional data loader Events before use in any Event payloads. Event type #9-15, 31, 35, 36 are used in initializing DIM data. Changed line 43 from:
						Node:
						(type) c
						(layer)2
							Element:del
								->
								Optional parameters: character_id, shard_id, platform, area_id to: Optional parameters: character_id, shard_id, platform, area_id Changed line 61 from:
						Node:
						(type) c
						(layer)2
							Element:del
								->
								Optional parameters: shard_id, platform, area_id to: Optional parameters: shard_id, platform, area_id
						Node:
						(type) c
						(layer)2
							Element:a
								Restore
						Node:
						(type) c
						(layer)2
							Element:a
								November 14, 2013, at 05:54 AM
								by
						Node:
						(type) c
						(layer)2
							Element:span
								68.170.72.231
								- Changed line 27 from: The values used for the account_id, character_id, and shard_id keys must be initialized with the respective #9, #11, and #13 dimensional data loader Events before use in any Event payloads. Event type #9-15, 31, 35, 36 are used in initializing DIM data. to:
						Node:
						(type) c
						(layer)2
							Element:ins
								->
								The values used for the account_id, character_id, and shard_id keys must be initialized with the respective #9, #11, and #13 dimensional data loader Events before use in any Event payloads. Event type #9-15, 31, 35, 36 are used in initializing DIM data. Changed line 43 from: Optional parameters: character_id, shard_id, platform, area_id to:
						Node:
						(type) c
						(layer)2
							Element:ins
								->
								Optional parameters: character_id, shard_id, platform, area_id Changed line 61 from: Optional parameters: shard_id, platform, area_id to:
						Node:
						(type) c
						(layer)2
							Element:ins
								->
								Optional parameters: shard_id, platform, area_id
						Node:
						(type) c
						(layer)2
							Element:a
								Restore
						Node:
						(type) c
						(layer)2
							Element:a
								November 14, 2013, at 05:53 AM
								by
						Node:
						(type) c
						(layer)2
							Element:span
								68.170.72.231
								- Added line 66:
						Node:
						(type) c
						(layer)2
							Element:ins
								[@
								Added line 78:
						Node:
						(type) c
						(layer)2
							Element:ins
								@]
								Added line 84:
						Node:
						(type) c
						(layer)2
							Element:ins
								[@
								Added line 96:
						Node:
						(type) c
						(layer)2
							Element:ins
								@]
								Added line 101:
						Node:
						(type) c
						(layer)2
							Element:ins
								[@
								Added line 113:
						Node:
						(type) c
						(layer)2
							Element:ins
								@]
								Added line 118:
						Node:
						(type) c
						(layer)2
							Element:ins
								[@
								Added line 134:
						Node:
						(type) c
						(layer)2
							Element:ins
								@]
								Added line 137:
						Node:
						(type) c
						(layer)2
							Element:ins
								[@
								Added line 151:
						Node:
						(type) c
						(layer)2
							Element:ins
								@]
								Added line 154:
						Node:
						(type) c
						(layer)2
							Element:ins
								[@
								Added line 169:
						Node:
						(type) c
						(layer)2
							Element:ins
								@]
								Added line 172:
						Node:
						(type) c
						(layer)2
							Element:ins
								[@
								Added line 187:
						Node:
						(type) c
						(layer)2
							Element:ins
								@]
								Added line 195:
						Node:
						(type) c
						(layer)2
							Element:ins
								[@
								Added line 206:
						Node:
						(type) c
						(layer)2
							Element:ins
								@]
								Added line 212:
						Node:
						(type) c
						(layer)2
							Element:ins
								[@
								Added line 226:
						Node:
						(type) c
						(layer)2
							Element:ins
								@]
								Added line 231:
						Node:
						(type) c
						(layer)2
							Element:ins
								[@
								Added line 240:
						Node:
						(type) c
						(layer)2
							Element:ins
								@]
								Added line 243:
						Node:
						(type) c
						(layer)2
							Element:ins
								[@
								Added line 252:
						Node:
						(type) c
						(layer)2
							Element:ins
								@]
								Added line 255:
						Node:
						(type) c
						(layer)2
							Element:ins
								[@
								Added line 264:
						Node:
						(type) c
						(layer)2
							Element:ins
								@]
								Added line 267:
						Node:
						(type) c
						(layer)2
							Element:ins
								[@
								Added line 281:
						Node:
						(type) c
						(layer)2
							Element:ins
								@]
								Added line 288:
						Node:
						(type) c
						(layer)2
							Element:ins
								[@
								Added line 305:
						Node:
						(type) c
						(layer)2
							Element:ins
								@]
								Added line 308:
						Node:
						(type) c
						(layer)2
							Element:ins
								[@
								Added line 325:
						Node:
						(type) c
						(layer)2
							Element:ins
								@]
								Added line 328:
						Node:
						(type) c
						(layer)2
							Element:ins
								[@
								Added line 343:
						Node:
						(type) c
						(layer)2
							Element:ins
								@]
								Added line 351:
						Node:
						(type) c
						(layer)2
							Element:ins
								[@
								Added line 364:
						Node:
						(type) c
						(layer)2
							Element:ins
								@]
								Added line 367:
						Node:
						(type) c
						(layer)2
							Element:ins
								[@
								Added line 382:
						Node:
						(type) c
						(layer)2
							Element:ins
								@]
								Added line 385:
						Node:
						(type) c
						(layer)2
							Element:ins
								[@
								Added line 400:
						Node:
						(type) c
						(layer)2
							Element:ins
								@]
								Added line 403:
						Node:
						(type) c
						(layer)2
							Element:ins
								[@
								Added line 418:
						Node:
						(type) c
						(layer)2
							Element:ins
								@]
								Added line 421:
						Node:
						(type) c
						(layer)2
							Element:ins
								[@
								Added line 433:
						Node:
						(type) c
						(layer)2
							Element:ins
								@]
								Added line 436:
						Node:
						(type) c
						(layer)2
							Element:ins
								[@
								Added line 449:
						Node:
						(type) c
						(layer)2
							Element:ins
								@]
						Node:
						(type) c
						(layer)2
							Element:a
								Restore
						Node:
						(type) c
						(layer)2
							Element:a
								November 14, 2013, at 05:50 AM
								by
						Node:
						(type) c
						(layer)2
							Element:span
								68.170.72.231
								- Added line 30:
						Node:
						(type) c
						(layer)2
							Element:ins
								[@
								Added line 42:
						Node:
						(type) c
						(layer)2
							Element:ins
								@]
								Added line 48:
						Node:
						(type) c
						(layer)2
							Element:ins
								[@
								Added line 60:
						Node:
						(type) c
						(layer)2
							Element:ins
								@]
						Node:
						(type) c
						(layer)2
							Element:a
								Restore
						Node:
						(type) c
						(layer)2
							Element:a
								November 14, 2013, at 05:50 AM
								by
						Node:
						(type) c
						(layer)2
							Element:span
								68.170.72.231
								- Added lines 1-402:
						Node:
						(type) c
						(layer)2
							Element:ins
								'+Ninja Metrics HTTPS & JSON Event Interface+'
							Element:br
							Element:br
								The Ninja Metrics JSON API allows you to push your application’s Event data into our pipeline.
							Element:br
							Element:br
								All JSON Event payloads are POSTed to the following URL base:\\
							Element:br
								https://api.ninjametrics.com/event
							Element:br
							Element:br
								All queries to server-side endpoints require the following parameters:\\
							Element:br
								?client_id=[client id from account manager]&app_id=[app id from account manager]&api_client=[self identified lib version]
							Element:br
							Element:br
								For example:\\
							Element:br
								https://api.ninjametrics.com/event?client_id=100&app_id=100&app_pwd=1234567890&api_client=CoolCompany/ruby_1.2a\\
							Element:br
								We also collect, for deployment tracking purposes to provide better support to our customers, any data in the User-Agent HTTP header field.\\
							Element:br
								The value for the timestamp key in any Event JSON payload should always be in the ISO-8601 standard (UTC): YYYY-MM-DDTHH:mm:ss.sssZ. JavaScript’s Date.toJSON() accomplishes this perfectly.\\
							Element:br
							Element:br
								For example … \\
							Element:br
								HTTPS POST https://api.ninjametrics.com/event?client_id=1&app_id=1&api_client=Spot/js_1.5.u \\
							Element:br
								with JSON payload body …
							Element:br
								[@
							Element:br
								{
							Element:br
								"timestamp":"2012-12-05T03:12:15.319Z",
							Element:br
								"data":{
							Element:br
								...
							Element:br
								}
							Element:br
								}
							Element:br
								@]
							Element:br
								The values used for the account_id, character_id, and shard_id keys must be initialized with the respective #9, #11, and #13 dimensional data loader Events before use in any Event payloads. Event type #9-15, 31, 35, 36 are used in initializing DIM data.
							Element:br
								REMEMBER: When not making use of a numeric key, you must put 0 for its value.
							Element:br
								* Event #1 Login
							Element:br
								{
							Element:br
								"timestamp":"2013-01-14T15:36:27.671Z",
							Element:br
								"data":{
							Element:br
								"type":1,
							Element:br
								"account_id":"cool_guy@example.com",
							Element:br
								"character_id":"wizard",
							Element:br
								"shard_id":42,
							Element:br
								"platform":"Facebook Mobile",
							Element:br
								"area_id":0
							Element:br
								}
							Element:br
								}
							Element:br
								Optional parameters: character_id, shard_id, platform, area_id
							Element:br
								platform is an open-ended String field that should be used consistently by the integrator.
							Element:br
								FUTURE: area_id must match numeric identifier given from map loading process.
							Element:br
								NOTE: One could have just the type and account_id parameters in the data section and only have to initialize the account_id parameter.
							Element:br
								* Event #2 Logout
							Element:br
								{
							Element:br
								"timestamp":"2013-01-14T15:36:27.739Z",
							Element:br
								"data":{
							Element:br
								"type":2,
							Element:br
								"account_id":"cool_guy@example.com",
							Element:br
								"character_id":"wizard",
							Element:br
								"shard_id":42,
							Element:br
								"platform":"Facebook Mobile",
							Element:br
								"area_id":0
							Element:br
								}
							Element:br
								}
							Element:br
								Optional parameters: shard_id, platform, area_id
							Element:br
								platform is an open-ended String field that should be used consistently by the integrator.
							Element:br
								FUTURE: area_id must match numeric identifier given from map loading process.
							Element:br
								NOTE: One could have just the type and account_id parameters in the data section and only have to initialize the account_id parameter.
							Element:br
								* Event #3 Change Subscription
							Element:br
								{
							Element:br
								"timestamp":"1989-08-15T05:00:00.000Z",
							Element:br
								"data":{
							Element:br
								"type":3,
							Element:br
								"account_id":"cool_guy@example.com",
							Element:br
								"account_status":"Active",
							Element:br
								"account_sub_type":"Paid",
							Element:br
								"account_sub_value":7.34,
							Element:br
								"account_sub_expires_timestamp":"1990-08-15T05:00:00.000Z"
							Element:br
								}
							Element:br
								}
							Element:br
								Valid options for account_status: Active, Stopped, Expired, Failed, Cancelled
							Element:br
								Valid options for account_sub_type: Free, Paid, Premium
							Element:br
								account_sub_value: how much does the subscription over this period cost?
							Element:br
								account_sub_expires_timestamp - timestamp = subscription period length
							Element:br
								* Event #4 Group Enter
							Element:br
								{
							Element:br
								"timestamp":"2013-01-14T15:36:27.353Z",
							Element:br
								"data":{
							Element:br
								"type":4,
							Element:br
								"account_id":"cool_guy@example.com",
							Element:br
								"character_id":"wizard",
							Element:br
								"character_lvl":50,
							Element:br
								"shard_id":42,
							Element:br
								"group_id":42
							Element:br
								}
							Element:br
								}
							Element:br
								Optional parameters: character_id, shard_id
							Element:br
								group_id parameter values do not have to be initialized beforehand. The burden of using correct values in on the integrator.
							Element:br
								character_lvl must be numeric and should be set to 0 if unused
							Element:br
								* Event #5 Group Exit
							Element:br
								{
							Element:br
								"timestamp":"2013-01-14T15:36:27.418Z",
							Element:br
								"data":{
							Element:br
								"type":5,
							Element:br
								"account_id":"cool_guy@example.com",
							Element:br
								"character_id":"wizard",
							Element:br
								"character_lvl":52,
							Element:br
								"shard_id":42,
							Element:br
								"group_id":42
							Element:br
								}
							Element:br
								}
							Element:br
								Optional parameters: character_id, shard_id
							Element:br
								group_id parameter values do not have to be initialized beforehand. The burden of using correct values in on the integrator.
							Element:br
								character_lvl must be numeric and should be set to 0 if unused
							Element:br
								* Event #6 In-Game Social Event
							Element:br
								{
							Element:br
								"timestamp":"2013-01-14T15:36:28.000Z",
							Element:br
								"data":{
							Element:br
								"type":6,
							Element:br
								"sender_account_id":"cool_guy@example.com",
							Element:br
								"sender_character_id":"wizard",
							Element:br
								"sender_character_level":52,
							Element:br
								"receiver_account_id":"small_cat",
							Element:br
								"receiver_character_id":"mage",
							Element:br
								"receiver_character_level":6,
							Element:br
								"shard_id":42,
							Element:br
								"social_event_name":"trade gold",
							Element:br
								"social_event_type":"economic"
							Element:br
								}
							Element:br
								}
							Element:br
								Optional parameters: sender_character_id, receiver_character_id, shard_id. social_event_name, and social_event_type will accept any string. social_event_type examples: “clan invite”, “group invite”, “barter”. This should be used for social events not already explicitly called out. Do NOT use this for tracking Guild (#41,42) or Group (#4,5) Enter/Exit, Recruitment (#33,34) Send/Response.
							Element:br
								* Event #7 Off-Game-Interaction Send
							Element:br
								{
							Element:br
								"timestamp":"2013-01-14T15:36:27.935Z",
							Element:br
								"data":{
							Element:br
								"type":7,
							Element:br
								"sender_account_id":"cool_guy@example.com",
							Element:br
								"sender_character_id":"wizard",
							Element:br
								"receiver_account_id":"small_cat",
							Element:br
								"receiver_character_id":"mage",
							Element:br
								"shard_id":42,
							Element:br
								"ogi_location":"https://www.facebook.com/wall/42",
							Element:br
								"ogi_category":"wall post"
							Element:br
								}
							Element:br
								}
							Element:br
								Optional parameters: sender_character_id, receiver_character_id, shard_id. See Event#8 (just below) for suggested values for ogi_location, and ogi_category.
							Element:br
								* Event #8 Off-Game-Interaction Receive
							Element:br
								{
							Element:br
								"timestamp":"2013-01-14T15:36:27.869Z",
							Element:br
								"data":{
							Element:br
								"type":8,
							Element:br
								"sender_account_id":"cool_guy@example.com",
							Element:br
								"sender_character_id":"wizard",
							Element:br
								"receiver_account_id":"small_cat",
							Element:br
								"receiver_character_id":"mage",
							Element:br
								"shard_id":42,
							Element:br
								"ogi_location":"https://www.facebook.com/wall/42",
							Element:br
								"ogi_category":"wall post",
							Element:br
								"ogi_receiver_action":"responded"
							Element:br
								}
							Element:br
								}
							Element:br
								Optional parameters: sender_character_id, receiver_character_id, shard_id. ogi_location, ogi_category, and ogi_receiver_action will accept any string, so be sure to use them appropriately. We suggest you use a URI for ogi_location to specify where the off-game-interaction occurred. ogi_category examples: “forum post”, “wall post”, “service cancel”. ogi_receiver_action examples: “post response”, “cancel request”.
							Element:br
								* Event #9 Account Create
							Element:br
								{
							Element:br
								"timestamp":"2013-01-11T22:01:10.700Z",
							Element:br
								"data":{
							Element:br
								"type":9,
							Element:br
								"account_id":"cool_guy@example.com",
							Element:br
								"account_sub_type":"Free",
							Element:br
								"account_lang":"en-US",
							Element:br
								"account_country":"US",
							Element:br
								"account_gender":"M",
							Element:br
								"account_dob":"1980-09-22T05:00:00.000Z",
							Element:br
								"account_currency_balance":42.42,
							Element:br
								"platform":"Facebook Mobile"
							Element:br
								}
							Element:br
								}
							Element:br
								Account dimension data loader. Pseudo-Event that has to be fired before referencing account_id in any other Event.
							Element:br
								account_sub_type: Free, Paid, Premium
							Element:br
								account_lang - 2 to 4 letter language code from http://www.geonames.org/countries/ - examples: ar-YE, en-US, fr
							Element:br
								account_country - ISO-3166 alpha2 country-code from http://www.geonames.org/countries/ - examples: YE, US, VE
							Element:br
								account_gender: “M”, “F”, “T”, or “”
							Element:br
								platform is an open-ended String field that should be used consistently by the integrator
							Element:br
								* Event #10 Account Delete
							Element:br
								{
							Element:br
								"timestamp":"1989-08-15T05:00:00.000Z",
							Element:br
								"data":{
							Element:br
								"type":10,
							Element:br
								"account_id":"cool_guy@example.com",
							Element:br
								"account_status":"Failed",
							Element:br
								"farmer_flag":"Y",
							Element:br
								"integrity_flag":"N"
							Element:br
								}
							Element:br
								}
							Element:br
								Pseudo-Event that will remove the given account_id from dimension data. Required for accurate Churn analysis.
							Element:br
								account_status: Stopped, Expired, Failed, Cancelled
							Element:br
								farmer_flag: Y, N - was this account a gold farmer?
							Element:br
								integrity_flag: Y, N - did this account’s integrity get compromised?
							Element:br
								* Event #11 Character Create
							Element:br
								{
							Element:br
								"timestamp":"2013-01-11T22:01:11.742Z",
							Element:br
								"data":{
							Element:br
								"type":11,
							Element:br
								"account_id":"cool_guy@example.com",
							Element:br
								"character_id":"wizard","character_class":"magic",
							Element:br
								"character_sub_class":"healer",
							Element:br
								"character_gender":"T",
							Element:br
								"character_race":"fish",
							Element:br
								"character_name":"the character name",
							Element:br
								"shard_id":0
							Element:br
								}
							Element:br
								}
							Element:br
								Dimension data modification Event for initializing a character_id; must be called before referencing chracater_id in any other Event.
							Element:br
								Optional parameter: shard_id
							Element:br
								character_gender: “M”, “F”, “T”, “”
							Element:br
								* Event #12 Character Delete
							Element:br
								{
							Element:br
								"timestamp":"2013-01-11T22:01:11.925Z",
							Element:br
								"data":{
							Element:br
								"type":12,
							Element:br
								"account_id":"wizard",
							Element:br
								"character_id":"cool_guy@example.com"
							Element:br
								}
							Element:br
								}
							Element:br
								Remove character_id from dimension data.
							Element:br
								* Event #13 Shard Create
							Element:br
								{
							Element:br
								"timestamp":"2013-01-11T22:01:12.173Z",
							Element:br
								"data":{
							Element:br
								"type":13,
							Element:br
								"shard_id":42,
							Element:br
								"shard_desc":"the shard with answers to it all"
							Element:br
								}
							Element:br
								}
							Element:br
								Pseudo-Event for initializing a shard_id; must be called before referencing shard_id in any other Event.
							Element:br
								* Event #14 Set Virtual Currency
							Element:br
								{
							Element:br
								"timestamp":"2013-01-11T22:01:12.295Z",
							Element:br
								"data":{
							Element:br
								"type":14,
							Element:br
								"virtual_currency_label":"mucha",
							Element:br
								"virtual_currency_ex_rate":0.01
							Element:br
								}
							Element:br
								}
							Element:br
								Load a named virtual currency and the exchange rate from said virtual currency to real currency. In the above example, 100 muchas = 1 USD. Call this loader event again with the same value for virtual_currency_label with a different value for virtual_currency_ex_rate to update the existing virtual currency exchange rate; be sure to use a later timestamp.
							Element:br
								* Event #15 Initialize Item
							Element:br
								{
							Element:br
								"timestamp":"2013-01-11T22:01:12.060Z",
							Element:br
								"data":{
							Element:br
								"type":15,
							Element:br
								"item_id":66,
							Element:br
								"item_name":"the big blaster gun",
							Element:br
								"item_type":"weapon",
							Element:br
								"item_value":5,
							Element:br
								"item_segment":"UGC",
							Element:br
								"account_id":"cool_guy@example.com",
							Element:br
								"character_id":"wizard"
							Element:br
								}
							Element:br
								}
							Element:br
								Load an Item definition.
							Element:br
								item_type may be any string, but use it consistently. some examples: “Raw materials”, “Mounts and pets”, “armor”, “tools”, “containers”
							Element:br
								item_value is a floating point value which would be used for the store price of the item
							Element:br
								item_segment may be “UGC” when the item is user-generated or “INGAME” when part of the original application
							Element:br
								IF the item_segment field is “UGC” then the account_id and character_id fields should be set appropriately, otherwise they should be empty strings
							Element:br
								* Event #16 Item Used
							Element:br
								{
							Element:br
								"timestamp":"2013-01-14T15:36:27.483Z",
							Element:br
								"data":{
							Element:br
								"type":16,
							Element:br
								"account_id":"cool_guy@example.com",
							Element:br
								"character_id":"wizard",
							Element:br
								"character_lvl":52,
							Element:br
								"shard_id":42,
							Element:br
								"item_id":66,
							Element:br
								"item_count":1,
							Element:br
								"area_id":42,
							Element:br
								"position_x":678,
							Element:br
								"position_y":231,
							Element:br
								"position_z":517
							Element:br
								}
							Element:br
								}
							Element:br
								Log an item usage. item_count is used for the number of times the item is used in this particular location; useful for spells, bullets. If position_x, position_y, or position_z are unavailable, then the unavailable coordinate(s) should be assigned -1.0.
							Element:br
								* Event #17 Item Transaction
							Element:br
								{
							Element:br
								"timestamp":"2013-01-14T15:36:27.548Z",
							Element:br
								"data":{
							Element:br
								"type":17,
							Element:br
								"account_id":"cool_guy@example.com",
							Element:br
								"character_id":"wizard",
							Element:br
								"shard_id":42,
							Element:br
								"item_id":66,
							Element:br
								"item_name":"the big blaster gun",
							Element:br
								"item_price":3,
							Element:br
								"transaction_type":0,
							Element:br
								"currency_type":0,
							Element:br
								"virtual_currency_label":"",
							Element:br
								"currency_value":3
							Element:br
								}
							Element:br
								}
							Element:br
								Log a purchase/sale of an item. Multiple Item Transaction events may have to be called for a single transaction if multiple currencies are used. Example: 4 gold, 5 silver, 3 copper for a fish trap. item_price is the purchase price a user must pay for the item. See Event#18 (right below) for information on the last four fields.
							Element:br
								#18 Currency Transaction
							Element:br
								{
							Element:br
								"timestamp":"2013-01-14T15:36:27.217Z",
							Element:br
								"data":{
							Element:br
								"type":18,
							Element:br
								"account_id":"cool_guy@example.com",
							Element:br
								"character_id":"wizard",
							Element:br
								"shard_id":42,
							Element:br
								"transaction_type":0,
							Element:br
								"currency_type":0,
							Element:br
								"virtual_currency_label":"",
							Element:br
								"currency_value":3.45,
							Element:br
								"transaction_desc":"spend 3.45USD"
							Element:br
								}
							Element:br
								}
							Element:br
								Log currency being spent or acquired by an application user.
							Element:br
								transaction_type: 0 if currency is spent, 1 if currency is acquired
							Element:br
								currency_type: 0 if real-world currency, 1 if virtual currency
							Element:br
								virtual_currency_label: name of a virtual currency already initialized with Event#14, used in this transaction
							Element:br
								currency_value: floating point representation of how much currency was trasacted
							Element:br
								transaction_desc: optional description of the transaction limited to 200 characters
							Element:br
								#19 User Generated Content Rating
							Element:br
								{
							Element:br
								"timestamp":"2013-01-14T15:36:27.281Z",
							Element:br
								"data":{
							Element:br
								"type":19,
							Element:br
								"account_id":"theAccountId",
							Element:br
								"character_id":"theCharacterId",
							Element:br
								"shard_id":42,
							Element:br
								"item_id":764,
							Element:br
								"item_name":"theItemName",
							Element:br
								"ugc_rating":"theUgcRating"
							Element:br
								}
							Element:br
								}
							Element:br
								Any player can give any UGC item a rating. The ugc_rating field is an open-ended field that will accept any numeric or string value.
							Element:br
								#20 Message
							Element:br
								{
							Element:br
								"timestamp":"2013-01-14T15:36:27.805Z",
							Element:br
								"data":{
							Element:br
								"type":20,
							Element:br
								"sender_account_id":"account 1",
							Element:br
								"sender_character_id":"char 1",
							Element:br
								"receiver_account_id":"account 2",
							Element:br
								"receiver_character_id":"char 2",
							Element:br
								"shard_id":0,
							Element:br
								"message_ch_label":"twitter",
							Element:br
								"message_desc":"pulled from twitter",
							Element:br
								"message_char_count":140
							Element:br
								}
							Element:br
								}
							Element:br
								Log a message between two users. This does not log any message content, just the interaction between two users. message_ch_label should be a unique string identifier for the channel/medium.
							Element:br
								#21 Begin Combat with an NPC
							Element:br
								{
							Element:br
								"timestamp":"2013-01-14T15:36:28.130Z",
							Element:br
								"data":{
							Element:br
								"type":21,
							Element:br
								"account_id":"cool_guy@example.com",
							Element:br
								"character_id":"wizard",
							Element:br
								"shard_id":42,
							Element:br
								"npc_id":"the_mercenary_npc",
							Element:br
								"area_id":0,
							Element:br
								"position_x":678,
							Element:br
								"position_y":231,
							Element:br
								"position_z":517
							Element:br
								}
							Element:br
								}
							Element:br
								Be sure to initialize the npc_id with Event#31. area_id is the unique numeric identifier for area, which must be previously initialized using Event #TODO. If position_x, position_y, or position_z are unavailable, then the unavailable coordinate(s) should be assigned -1.0.
							Element:br
								#22 End Combat with an NPC
							Element:br
								{
							Element:br
								"timestamp":"2013-01-14T15:36:28.193Z",
							Element:br
								"data":{
							Element:br
								"type":22,
							Element:br
								"account_id":"cool_guy@example.com",
							Element:br
								"character_id":"wizard",
							Element:br
								"shard_id":42,
							Element:br
								"npc_id":"the_mercenary_npc",
							Element:br
								"area_id":0,
							Element:br
								"position_x":678,
							Element:br
								"position_y":231,
							Element:br
								"position_z":517
							Element:br
								}
							Element:br
								}
							Element:br
								See notes on the fields in Event#21 documentation.
							Element:br
								#23 Kill an NPC
							Element:br
								{
							Element:br
								"timestamp":"2013-01-14T15:36:28.257Z",
							Element:br
								"data":{
							Element:br
								"type":23,
							Element:br
								"account_id":"cool_guy@example.com",
							Element:br
								"character_id":"wizard",
							Element:br
								"shard_id":42,
							Element:br
								"npc_id":"the_mercenary_npc",
							Element:br
								"character_lvl":52
							Element:br
								}
							Element:br
								}
							Element:br
								See field notes from previous Events.
							Element:br
								#24 Player Xp
							Element:br
								{
							Element:br
								"timestamp":"2013-01-14T15:36:28.336Z",
							Element:br
								"data":{
							Element:br
								"type":24,
							Element:br
								"account_id":"cool_guy@example.com",
							Element:br
								"character_id":"wizard",
							Element:br
								"shard_id":42,
							Element:br
								"xp_amount":3,
							Element:br
								"character_lvl":52,
							Element:br
								"grouped_flag":"N"
							Element:br
								}
							Element:br
								}
							Element:br
								The xp_amount field is an unsigned whole number with maximum size of 18. The grouped_flag is used to tell if XP points were awarded for individual or group behaviors: “Y” or “N”.
						Node:
						(type) c
						(layer)2
							Element:a
								Restore
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
														Search
												Node:
												(type) c
												(layer)4
													Element:fieldset
													Element:p
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
													Element:a
														View
													Element:li
													Element:a
														Edit
													Element:li
													Element:a
														History
													Element:li
													Element:a
														Print
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Getting Started
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														Integration Libraries
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
													Element:a
														JavaScript
													Element:li
													Element:a
														Java
													Element:li
													Element:a
														PHP
													Element:li
													Element:a
														iOS
													Element:li
													Element:a
														Android
													Element:li
													Element:a
														Unreal
												Node:
												(type) c
												(layer)4
													Element:p
													Element:a
														API Documentation
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
													Element:a
														Getting Started
													Element:li
													Element:a
														Quick Start Guide
													Element:li
													Element:a
														Advanced Setup Guide
													Element:li
													Element:a
														HTTPS & JSON API
													Element:li
													Element:a
														JSON Sample Events
													Element:li
													Element:a
														Recommended Country Codes
												Node:
												(type) c
												(layer)4
													Element:p
													Element:span
													Element:a
														edit SideBar
												Node:
												(type) c
												(layer)4
													Element:p
														Page last modified on November 14, 2013, at 06:01 AM
												Node:
												(type) c
												(layer)4
													Element:p
														© Ninja Metrics, Inc.
