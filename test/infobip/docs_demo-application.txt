Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					Demo application
			Node:
			(type) c
			(layer)1
				Element:hr
					Implementing Infobip API is easy and straight forward. In order to demonstrate, we have created a simple demo application which you can use to kick start your own project or just examine how it's done. Application has three basic functionalities: * Send SMS * Get delivery report for sent message * Get sent message log <p align="center"> [DOWNLOAD INFOBIP SMS DEMO APPLICATION](http://www.infobip.com/assets/downloads/InfobipSmsDemoApp.jar) </p> This application **does not require installation**. Running the file will open the login screen. [block:callout] { "type": "info", "title": "Use your Infobip account to login", "body": "In order to send messages from this demo app, you will need to provide your Infobip account credentials. If you don't have an account yet, please follow instruction here: [Introduction](/docs/getting-started)" } [/block] [block:image] { "images": [ { "image": [ "https://files.readme.io/11c0a04-demoApp1.PNG", "demoApp1.PNG", 624, 483, "#f0f0f0" ], "sizing": "80", "caption": "Enter Infobip credentials" } ] } [/block] Enter recipient's phone number and message and hit Send. [block:image] { "images": [ { "image": [ "https://files.readme.io/506f5e6-demoApp2.PNG", "demoApp2.PNG", 623, 481, "#eeeeee" ], "sizing": "80", "caption": "Enter phone number and message text" } ] } [/block] After the message was sent, click logs and delivery report to access message details. [block:api-header] { "type": "basic", "title": "Used technologies" } [/block] The application is a simple desktop program written in Java. For communicating with the Infobip APIs the application uses Infobip’s [java API client library](https://github.com/infobip/infobip-api-java-client). Core business logic is implemented in the adapter classes, e.g. `SendSmsAdapter.java`. Check out those classes to find out how best to use the API client. Along with the code itself, there are **abundant comments and documentation** for clarifying every part of the implementation as well as the behavior of the API client library. The user interface is implemented using the [JavaFX](https://en.wikipedia.org/wiki/JavaFX) framework that comes bundled with the Java version 8. The interface itself is kept basic and the code related to the JavaFX is separated neatly into user interface packages. [block:callout] { "type": "info", "body": "There are other online sources for documentation and examples on how to architect applications based on [JavaFX ](http://docs.oracle.com/javafx/2/get_started/jfxpub-get_started.htm) and this demo app does not try to instruct you on that subject. Nevertheless, it does use a clean approach in its setup and can be used as a starting point for your own project.", "title": "JavaFX" } [/block] [block:api-header] { "type": "basic", "title": "Where to find code" } [/block] Code for the demo application is available on the [Github ](https://github.com/infobip/infobip-api-java-demo) and can freely be browsed, checked out and / or forked. To help you get started Git repository contains detailed **readme ** documenting all of the tools and steps required to build and run the app. After going through those steps you can go on to browse the code and try altering it yourself. [block:api-header] { "type": "basic", "title": "Basic code structure" } [/block] The application code itself is structured in [per feature packages](http://www.javapractices.com/topic/TopicAction.do?Id=205). That means that all of the code related to, for example, sending of SMS is grouped in a package called **send**. Therein you can find before mentioned `SendSmsAdapter.java` class that implements calls to the Infobip API client library, along with a [POJO](https://en.wikipedia.org/wiki/Plain_Old_Java_Object) (Plain Old Java Object) class used to represent the SMS message in the demo application and an exception class used to indicate problem encountered while sending messages. Additionally, send package has a UI (user interface) package inside of it that holds classes implementing parts of the JavaFX framework needed to render the send SMS form and handle user input. You’ll find a similar structure in the other top-level packages, namely **log **and **report**. A package named **common** houses interfaces and abstract classes used throughout the rest of the application. `SmsApplication.java` is the starting point of the application and implements Java’s main method as well as the JavaFX setup.
			Node:
			(type) c
			(layer)1
				Element:footer
			Node:
			(type) c
			(layer)1
												Node:
												(type) c
												(layer)4
													Element:h4
														Subscribe to our newsletter
												Node:
												(type) c
												(layer)4
													Element:noscript
												Node:
												(type) c
												(layer)4
													Element:noscript
