Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					Introduction
					This page will help you get started with Infobip API. You'll be up and running in a jiffy!
			Node:
			(type) c
			(layer)1
				Element:hr
					**Welcome to Infobip API documentation!** This document will provide instructions on how to quickly integrate Infobip messaging services into various solutions by using Infobip HTTP application programming interface (HTTP API). Use HTTP API for sending SMS messages, collecting delivery reports, making Number Lookup (number validation) requests and receiving incoming SMS messages sent from mobile phones. Infobip's API is based on REST standards, enabling you to use your browser for accessing URLs. Use any HTTP client in any programming language to interact with our API. [block:callout] { "type": "info", "body": "If you don't have an Infobip account yet, please visit our [Sign-up](http://www.infobip.com/en/get-started) page and create your free account.", "title": "Note:" } [/block] [block:api-header] { "type": "basic", "title": "Base URL" } [/block] Submit all requests to the base URL. All the requests are submitted through HTTP `POST`, `PUT` or `GET` method. Although you can use HTTP protocol, we strongly recommend you to submit all requests to Infobip SMS API over HTTPS so the traffic is encrypted and the privacy is ensured. **Base URL:** `https://api.infobip.com` [block:api-header] { "type": "basic", "title": "Content-Type & Accept header" } [/block] Infobip SMS API supports `JSON` and `XML` Content-Types and Accept criteria that should be specified in the header. If the Content-Type is not specified, you will receive a General error. Depending which Accept type is chosen in the header for the request, the same one will be applied in the response. **Content-Type:** `application/json` or `application/xml`. **Accept header:** `application/json` or `application/xml`. [block:api-header] { "type": "basic", "title": "Authorization" } [/block] Infobip offers two methods of authorization. For maximum level of security we strongly suggest to use [**API key**](/docs/api-key-create). An example of using API key in request header: ``` Authorization: App 003026bbc133714df1834b8628bb496e-8f4b3d9a-e921-478d-a994-28a725159ab9 ``` Besides API key, we support basic authorization using a username and password with Base64 encoding variation [RFC2045-MIME](https://www.ietf.org/rfc/rfc2045.txt). Throughout this documentation, we use basic authentication to make *in page testing* as simple as possible. However, in production environment [using API key](/docs/api-key-create) is suggested way of securing API transactions. [block:callout] { "type": "warning", "title": "Important", "body": "All API communication should be done over **HTTPS** protocol in order to minimize security risks." } [/block] Basic authorization header is constructed as follows: 1. Username and password are combined into a string `username:password`. 2. The resulting string is encoded using the [RFC2045-MIME](https://www.ietf.org/rfc/rfc2045.txt) variant of Base64. 3. The authorization method and space, like this: `"Basic "`, are put before the encoded string. Example: ``` Username: `Aladdin` Password: `openSesame` Base64 encoded string: `QWxhZGRpbjpvcGVuIHNlc2FtZQ==` Authorization header: `Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==` ``` ------ ### **Next:** [Send your first SMS message](doc:send-sms).
			Node:
			(type) c
			(layer)1
				Element:footer
			Node:
			(type) c
			(layer)1
												Node:
												(type) c
												(layer)4
													Element:h4
														Subscribe to our newsletter
												Node:
												(type) c
												(layer)4
													Element:noscript
												Node:
												(type) c
												(layer)4
													Element:noscript
