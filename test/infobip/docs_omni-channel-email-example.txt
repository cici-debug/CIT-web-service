Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					OMNI channel: Email example
					This page will describe simple methods which will allow You to send messages and retrieve message logs using Email and SMS communication channels.
			Node:
			(type) c
			(layer)1
				Element:hr
					## Why OMNI? Consider the following scenario: a travel agency has a large number of customers that are receiving SMS message notifications when their itinerary changes, flight gets delayed or canceled and different booking reservations are confirmed. While an SMS is a very convenient way to get notified, this channel might not be all that reliable when your customers are traveling all around the world. People sometimes switch their phones off because of the roaming charges, or purchase local SIM cards so they have local network prices and data packages. And finally, spending time on the road means they can run out of battery life. This is not the only scenario in which SMS message is not the most efficient option for reaching your customers so a backup option should be introduced. While most customers can still be reached over SMS, other communication channels like email could fill in the gaps. ## Solution This is where our Omni solution fits in perfectly. We can set it up in a way that all SMS messages that don’t get delivered in a given time frame to customer devices, **fall back on email** which will then be sent instead and wait for the customers safely in their inbox. Fallback logic happens automatically so the travel agency would still send only one message. [block:callout] { "type": "info", "title": "Email setup", "body": "Learn more about email and its initial account setup: [Email introduction](/docs/email-introduction)" } [/block] Here is what we are going to go over in this tutorial: 1. Creating an Omni scenario in which we will define order of communication channels and sender information. 2. We will use this scenario to deliver an SMS message first. If the SMS is not delivered within 3 minutes, we will send the message over email. 3. In the end, we will acquire message logs and examine how the message was delivered. [block:api-header] { "type": "basic", "title": "Step 1: Creating an Omni scenario" } [/block] The first step is to create an **Omni scenario**. In the Omni scenario configuration you need to define the steps which will be sequentially executed. The key parameters are the **`channel`** and **`from`**, respectively identifying the communication channels and senders for each communication channel. [block:code] { "codes": [ { "code": "POST /omni/1/scenarios HTTP/1.1\nHost: api.infobip.com\nAuthorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==\nContent-Type: application/json\n\n{\n \"name\": \"SMS with e-mail fallback\",\n \"flow\": [\n {\n \"from\": \"Travel agency\",\n \"channel\": \"SMS\"\n },\n {\n \"from\": \"info@travelagency.com\",\n \"channel\": \"EMAIL\"\n }\n ],\n \"default\": false\n}", "language": "json" } ] } [/block] ## Response format If successful, response header HTTP status code will be `200 OK` and the scenario will be created, as shown in the example below. If you try to create the scenario without authorization, you will receive the `401 Unauthorized` error. [block:code] { "codes": [ { "code": "{\n \"key\": \"AD9E01A5DC7BEE2C2B828D208182A611\",\n \"name\":\"SMS with e-mail fallback\",\n \"flow\": [\n {\n \"from\": \"Travel agency\",\n \"channel\": \"SMS\"\n },\n {\n \"from\": \"info@travelagency.com\",\n \"channel\": \"EMAIL\"\n } \n ],\n \"default\": false\n}", "language": "json" } ] } [/block] The **`key`**parameter needs to be stored as it will be used when sending the message. In case you missed it in response, it can be acquired again by calling the [Scenario: Get method](/docs/omni-get-scenario) [block:api-header] { "type": "basic", "title": "Step 2: Omni message sending" } [/block] Once you’ve created an Omni scenario (identified by the **`key`** parameter) as described in the previous chapter, you are ready to send your Omni messages through defined SMS and Email communication channels. Firstly, the SMS message will be sent on the defined `phoneNumber`. If for some reason the message is not delivered, the message will then be sent to email as defined in previously created scenario. The parameters that should be set are the scenario `key`, `phoneNumber`, `emailAddress` and specific `text` for each communication channels, as shown below. To make this example more interesting, let's say that instead of a single traveler, the travel agency needs to send messages to a happy couple (John and Jane Smith) on their honeymoon. [block:code] { "codes": [ { "code": "POST /omni/1/advanced HTTP/1.1\nHost: api.infobip.com\nAuthorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==\nContent-Type: application/json\n\n{ \n \"scenarioKey\": \"AD9E01A5DC7BEE2C2B828D208182A611\",\n \"destinations\":[ \n { \n \"to\": {\n \"phoneNumber\": \"385974241491\",\n \"emailAddress\": \"john.smith@gmail.com\"\n }\n },\n { \n \"to\": {\n \"phoneNumber\": \"385972135566111111111\",\n \"emailAddress\": \"jane.smith@gmail.com\"\n }\n }\n ],\n \"sms\": {\n \"text\": \"Hello, we are happy to confirm your reservation for the safari trip.\",\n \"validityPeriod\":3\n },\n \"email\": {\n \"subject\": \"Reservation confirmed!\",\n \"text\": \"Hello, we are happy to confirm your reservation for the safari trip.\"\n } \n}", "language": "json" } ] } [/block] In this example we can see that message can be sent to one or many recipients listed in `destinations` collection. `validityPeriod` is expressed in minutes. If message is not delivered in 3 minutes, an email will be sent as a backup option. ## Response format If request was successful, response header HTTP status code will be `200 OK` and the message will be sent. If you try to send the message without authorization, you will receive the `401 Unauthorized` error . [block:code] { "codes": [ { "code": "HTTP/1.1 200 OK\nContent-Type: application/json\n\n{\n \"bulkId\": \"b608b611-0fd4-4594-9dea-39656caae30d\",\n \"messages\": [\n {\n \"to\": {\n \"phoneNumber\": \"385974241491\",\n \"emailAddress\": \"john.smith@gmail.com\"\n },\n \"status\": {\n \"groupId\": 1,\n \"groupName\": \"PENDING\",\n \"id\": 7,\n \"name\": \"PENDING_ENROUTE\",\n \"description\": \"Message sent to next instance\"\n },\n \"messageId\": \"05396f95-856d-47e8-bfe7-8ecaff9caa1f\"\n },\n {\n \"to\": {\n \"phoneNumber\": \"385972135566111111111\",\n \"emailAddress\": \"jane.smith@gmail.com\"\n },\n \"status\": {\n \"groupId\": 1,\n \"groupName\": \"PENDING\",\n \"id\": 7,\n \"name\": \"PENDING_ENROUTE\",\n \"description\": \"Message sent to next instance\"\n },\n \"messageId\": \"055d6674-096d-4c5e-b0d9-8285f0fd1b55\"\n }\n ]\n}", "language": "json" } ] } [/block] [block:callout] { "type": "info", "body": "Note that the response does not provide info on if and how the message was delivered. It merely states that the message has been accepted by our server and will be processed according to the created Omni scenario." } [/block] Detailed information about delivery will be available in message log. The easiest way to get the message log for the request is to save the `bulkId` value from the response which can later be used to easily filter out the logs. Besides single `bulkId`, each message has its own unique `messageId`. Message ID can be used to identify failover messages when examining logs. [block:api-header] { "type": "basic", "title": "Step 3: Getting message logs" } [/block] Message logs can be accessed without any filters but such query could potentially return logs of all messages sent in last 48 hours. By introducing `bulkId` as the filter parameter we can get logs for this specific request. [block:code] { "codes": [ { "code": "GET /omni/1/logs?bulkid=b608b611-0fd4-4594-9dea-39656caae30d HTTP/1.1\nHost: api.infobip.com\nAuthorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==\nAccept: application/json", "language": "json" } ] } [/block] Here is the returned response: [block:code] { "codes": [ { "code": "HTTP/1.1 200 OK\nContent-Type: application/json\n\n{\n \"results\": [\n {\n \"bulkId\": \"b608b611-0fd4-4594-9dea-39656caae30d\",\n \"messageId\": \"055d6674-096d-4c5e-b0d9-8285f0fd1b55\",\n \"to\": \"jane.smith@gmail.com\",\n \"from\": \"info@travelagency.com\",\n \"text\": \"Hello, we are happy to confirm your reservation for the safari trip.\",\n \"sentAt\": \"2016-09-29T14:58:32.117+0000\",\n \"doneAt\": \"2016-09-29T14:58:32.747+0000\",\n \"messageCount\": 1,\n \"price\": {\n \"pricePerMessage\": 0,\n \"currency\": \"EUR\"\n },\n \"status\": {\n \"groupId\": 3,\n \"groupName\": \"DELIVERED\",\n \"id\": 5,\n \"name\": \"DELIVERED_TO_HANDSET\",\n \"description\": \"Message delivered to handset\"\n },\n \"channel\": \"EMAIL\"\n },\n {\n \"bulkId\": \"b608b611-0fd4-4594-9dea-39656caae30d\",\n \"messageId\": \"055d6674-096d-4c5e-b0d9-8285f0fd1b55\",\n \"to\": \"385972135566111111111\",\n \"from\": \"Travel agency\",\n \"text\": \"Hello, we are happy to confirm your reservation for the safari trip.\",\n \"sentAt\": \"2016-09-29T14:58:32.070+0000\",\n \"doneAt\": \"2016-09-29T14:58:32.073+0000\",\n \"messageCount\": 1,\n \"mccMnc\": \"21910\",\n \"price\": {\n \"pricePerMessage\": 0,\n \"currency\": \"EUR\"\n },\n \"status\": {\n \"groupId\": 5,\n \"groupName\": \"REJECTED\",\n \"id\": 52,\n \"name\": \"REJECTED_DESTINATION\",\n \"description\": \"Invalid destination address.\",\n \"action\": \"Check to parameter.\"\n },\n \"channel\": \"SMS\"\n },\n {\n \"bulkId\": \"b608b611-0fd4-4594-9dea-39656caae30d\",\n \"messageId\": \"05396f95-856d-47e8-bfe7-8ecaff9caa1f\",\n \"to\": \"385974241491\",\n \"from\": \"Travel agency\",\n \"text\": \"Hello, we are happy to confirm your reservation for the safari trip.\",\n \"sentAt\": \"2016-09-29T14:58:32.013+0000\",\n \"doneAt\": \"2016-09-29T14:58:32.697+0000\",\n \"messageCount\": 1,\n \"mccMnc\": \"21901\",\n \"price\": {\n \"pricePerMessage\": 0,\n \"currency\": \"EUR\"\n },\n \"status\": {\n \"groupId\": 3,\n \"groupName\": \"DELIVERED\",\n \"id\": 5,\n \"name\": \"DELIVERED_TO_HANDSET\",\n \"description\": \"Message delivered to handset\"\n },\n \"channel\": \"SMS\"\n }\n ]\n}", "language": "json" } ] } [/block] In our case **three** returned log records have the same bulk ID. Two out of three messages have the same messageId because, as you can see, Jane Smith supplied an invalid phone number (too many digits) so an SMS could not be delivered (see message `status` and `channel`). This is why we have additional message log with the same `messageId` confirming that email, as a secondary delivery method, has been successfully delivered. John had no problem receiving the SMS message on his phone, as we can see in the last recorded log.
			Node:
			(type) c
			(layer)1
				Element:footer
			Node:
			(type) c
			(layer)1
												Node:
												(type) c
												(layer)4
													Element:h4
														Subscribe to our newsletter
												Node:
												(type) c
												(layer)4
													Element:noscript
												Node:
												(type) c
												(layer)4
													Element:noscript
