Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					This method allows you to get logs for sent e-mail.
				Element:span
					get
					Email messages logs
			Node:
			(type) c
			(layer)1
				Element:hr
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
											Definition
									Node:
									(type) c
									(layer)3
										Element:span
											{{ api_url }}
									Node:
									(type) c
									(layer)3
										Element:span
											{{ page_api_url }}
									Node:
									(type) c
									(layer)3
										Element:hr
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
											Parameters
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Query Params
												Node:
												(type) c
												(layer)4
													Element:strong
														from
													Element:span
														:
												Node:
												(type) c
												(layer)4
													Element:strong
														string
														Sender ID that can be alphanumeric or numeric.
												Node:
												(type) c
												(layer)4
													Element:strong
														to
													Element:span
														:
												Node:
												(type) c
												(layer)4
													Element:strong
														string
														The message destination address.
												Node:
												(type) c
												(layer)4
													Element:strong
														bulkId
													Element:span
														:
												Node:
												(type) c
												(layer)4
													Element:strong
														string
														The ID uniquely identifies a group of Email requests. This filter will enable you to query delivery reports for all the messages with the same bulk id using just one request.
												Node:
												(type) c
												(layer)4
													Element:strong
														messageId
													Element:span
														:
												Node:
												(type) c
												(layer)4
													Element:strong
														string
														The ID that uniquely identifies the message sent.
												Node:
												(type) c
												(layer)4
													Element:strong
														generalStatus
													Element:span
														:
												Node:
												(type) c
												(layer)4
													Element:strong
														string
														Sent e-mail [status group](http://dev.infobip.com/v1/docs/response-codes#section-statuses-groups). Indicates whether the message is successfully sent, not sent, delivered, not delivered, waiting for delivery or any other possible status.
												Node:
												(type) c
												(layer)4
													Element:strong
														sentSince
													Element:span
														:
												Node:
												(type) c
												(layer)4
													Element:strong
														datetime
														Lower limit on date and time of sending SMS.
												Node:
												(type) c
												(layer)4
													Element:strong
														sentUntil
													Element:span
														:
												Node:
												(type) c
												(layer)4
													Element:strong
														datetime
														Upper limit on date and time of sending SMS.
												Node:
												(type) c
												(layer)4
													Element:strong
														limit
													Element:span
														:
												Node:
												(type) c
												(layer)4
													Element:strong
														integer
														Maximal number of messages in returned logs. Default value is 50.
												Node:
												(type) c
												(layer)4
													Element:hr
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
											Examples
									Node:
									(type) c
									(layer)3
										Element:hr
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
											Result Format
									Node:
									(type) c
									(layer)3
										Element:hr
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
											Documentation
											None of the query parameters is mandatory for this request. For filtering results any combination of parameters can be used. Some examples are shown below. [block:callout] { "type": "warning", "title": "Important", "body": "**E-mail logs are available for the last 48 hours!**" } [/block] # Response format If successful, response header HTTP status code will be `200 OK` and the message logs will be returned. If you try to send message without authorization, you will get a response with HTTP status code `401 Unauthorized`. ## SMSLogsResponse |Parameter|Type|Description| |-|-|-| |*results*|[SentEmailLog[]](#section-sentsmslog)|Collection of logs.| ### SentEmailLog |Parameter|Type|Description| |-|-|-| |*messageId*|String|The ID that uniquely identifies the message sent.| |*to*|String|The message destination address.| |*from*|String|Sender e-mail address.| |*text*|String|Text of the message that was sent.| |*sentAt*|Date|Tells when the e-mail was sent. Has the following format: `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.| |*doneAt*|Date|Tells when the e-mail was finished processing by Infobip (i.e. delivered to destination)| |*messageCount*|int|How many parts the message was split into. Always will be 1 for e-mail.| |*price*|[Price](#section-price)|Sent e-mail price.| |*status*|[Status](#section-status)|Indicates whether the message is successfully sent, not sent, delivered, not delivered, waiting for delivery or any other possible status.| |*error*|[Error](#section-error)|Indicates whether the error occurred during the query execution.| #### Price |Parameter|Type|Description| |-|-|-| |*pricePerMessage*|BigDecimal|Price per one e-mail.| |*currency*|String|The currency in which the price is expressed.| #### Status |Parameter|Type|Description| |-|-|-| |*groupId*|int|Status group ID| |*groupName*|String|Status [group name](/docs/response-codes).| |*id*|int|Status ID| |*name*|String|Status [name](/docs/response-codes).| |*description*|String|Human readable description of the status.| |*action*|String|Action that should be taken to eliminate the error.| #### Error |Parameter|Type|Description| |-|-|-| |*groupId*|int|Error group ID| |*groupName*|String|Error [group name](/docs/response-codes#error-object-example)| |*id*|int|Error ID| |*name*|String|Error [name](/docs/response-codes#error-object-example)| |*description*|String|Human readable description of the error.| |*permanent*|boolean|Tells if the error is permanent| [block:api-header] { "type": "get", "title": "Get logs with multiple messageId filter" } [/block] You may retrieve message logs by supplying comma-split message IDs to the endpoint. Request: [block:code] { "codes": [ { "code": "GET /email/1/logs?messageId=64c98929-f160-4e2c-b156-ca88cc733547,60d586a1-6448-4c5f-860d-be3ddbea16da HTTP/1.1\nHost: api.infobip.com\nAuthorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==\nAccept: application/json", "language": "http", "name": "JSON" }, { "code": "GET /email/1/logs?messageId=64c98929-f160-4e2c-b156-ca88cc733547,60d586a1-6448-4c5f-860d-be3ddbea16da HTTP/1.1\nHost: api.infobip.com\nAuthorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==\nAccept: application/xml", "language": "http", "name": "XML" }, { "code": "curl -X GET \n-H 'Accept: application/json' \n-H 'Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ=='\nhttps://api.infobip.com/email/1/logs?messageId=64c98929-f160-4e2c-b156-ca88cc733547,60d586a1-6448-4c5f-860d-be3ddbea16da", "language": "curl", "name": "cURL" }, { "code": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.infobip.com/email/1/logs?messageId=64c98929-f160-4e2c-b156-ca88cc733547,60d586a1-6448-4c5f-860d-be3ddbea16da');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n 'accept' => 'application/json',\n 'authorization' => 'Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ=='\n));\n\ntry {\n $response = $request->send();\n\n echo $response->getBody();\n} catch (HttpException $ex) {\n echo $ex;\n}\n?>", "language": "php" }, { "code": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://api.infobip.com/email/1/logs?messageId=64c98929-f160-4e2c-b156-ca88cc733547,60d586a1-6448-4c5f-860d-be3ddbea16da\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"authorization\"] = 'Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ=='\nrequest[\"accept\"] = 'application/json'\n\nresponse = http.request(request)\nputs response.read_body\n", "language": "ruby" }, { "code": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.infobip.com\")\n\nheaders = {\n 'authorization': \"Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==\",\n 'accept': \"application/json\"\n }\n\nconn.request(\"GET\", \"/email/1/logs?messageId=64c98929-f160-4e2c-b156-ca88cc733547,60d586a1-6448-4c5f-860d-be3ddbea16da\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))\n", "language": "python" }, { "code": "HttpResponse<String> response = Unirest.get(\"https://api.infobip.com/email/1/logs?messageId=64c98929-f160-4e2c-b156-ca88cc733547,60d586a1-6448-4c5f-860d-be3ddbea16da\")\n .header(\"authorization\", \"Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==\")\n .header(\"accept\", \"application/json\")\n .asString();", "language": "java" }, { "code": "var client = new RestClient(\"https://api.infobip.com/email/1/logs?messageId=64c98929-f160-4e2c-b156-ca88cc733547,60d586a1-6448-4c5f-860d-be3ddbea16da\");\n\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"accept\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==\");\n\nIRestResponse response = client.Execute(request);", "language": "csharp" }, { "code": "var data = null;\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n if (this.readyState === this.DONE) {\n console.log(this.responseText);\n }\n});\n\nxhr.open(\"GET\", \"https://api.infobip.com/email/1/logs?messageId=64c98929-f160-4e2c-b156-ca88cc733547,60d586a1-6448-4c5f-860d-be3ddbea16da\");\nxhr.setRequestHeader(\"authorization\", \"Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==\");\nxhr.setRequestHeader(\"accept\", \"application/json\");\n\nxhr.send(data);\n", "language": "javascript" } ] } [/block] Response: [block:code] { "codes": [ { "code": "{\n \"results\": [\n {\n \"messageId\": \"64c98929-f160-4e2c-b156-ca88cc733547\",\n \"to\": \"recipient@infobip.com\",\n \"from\": \"sender@infobip.com\",\n \"text\": \"Test text\",\n \"sentAt\": \"2016-09-01T10:29:00.440+0000\",\n \"doneAt\": \"2016-09-01T10:29:01.130+0000\",\n \"price\": {\n \"pricePerMessage\": 0.0005,\n \"currency\": \"EUR\"\n },\n \"status\": {\n \"groupId\": 3,\n \"groupName\": \"DELIVERED\",\n \"id\": 5,\n \"name\": \"DELIVERED_TO_HANDSET\",\n \"description\": \"Message delivered to handset\"\n },\n \"channel\": \"EMAIL\"\n },\n {\n \"messageId\": \"60d586a1-6448-4c5f-860d-be3ddbea16da\",\n \"to\": \"recipient@infobip.com\",\n \"from\": \"sender@infobip.com\",\n \"text\": \"Test text\",\n \"sentAt\": \"2016-09-01T10:29:00.317+0000\",\n \"doneAt\": \"2016-09-01T10:29:00.807+0000\",\n \"price\": {\n \"pricePerMessage\": 0.0005,\n \"currency\": \"EUR\"\n },\n \"status\": {\n \"groupId\": 3,\n \"groupName\": \"DELIVERED\",\n \"id\": 5,\n \"name\": \"DELIVERED_TO_HANDSET\",\n \"description\": \"Message delivered to handset\"\n },\n \"channel\": \"EMAIL\"\n }\n ]\n}", "language": "json" }, { "code": "<?xml version='1.0' encoding='UTF-8'?>\n<LogsResponse>\n <results>\n <result>\n <messageId>64c98929-f160-4e2c-b156-ca88cc733547</messageId>\n <to>recipient@infobip.com</to>\n <from>sender@infobip.com</from>\n <text>Test text</text>\n <sentAt>2016-09-01T10:29:00.440+0000</sentAt>\n <doneAt>2016-09-01T10:29:01.130+0000</doneAt>\n <price>\n <pricePerMessage>0.0005000000</pricePerMessage>\n <currency>EUR</currency>\n </price>\n <status>\n <groupId>3</groupId>\n <groupName>DELIVERED</groupName>\n <id>5</id>\n <name>DELIVERED_TO_HANDSET</name>\n <description>Message delivered to handset</description>\n </status>\n <channel>EMAIL</channel>\n </result>\n \t<result>\n <messageId>60d586a1-6448-4c5f-860d-be3ddbea16da</messageId>\n <to>recipient@infobip.com</to>\n <from>sender@infobip.com</from>\n <text>Test text</text>\n <sentAt>2016-09-01T10:29:00.317+0000</sentAt>\n <doneAt>2016-09-01T10:29:00.807+0000</doneAt>\n <price>\n <pricePerMessage>0.0005000000</pricePerMessage>\n <currency>EUR</currency>\n </price>\n <status>\n <groupId>3</groupId>\n <groupName>DELIVERED</groupName>\n <id>5</id>\n <name>DELIVERED_TO_HANDSET</name>\n <description>Message delivered to handset</description>\n </status>\n <channel>EMAIL</channel>\n </result>\n </results>\n</LogsResponse>", "language": "xml" } ] } [/block] [block:api-header] { "type": "get", "title": "Get logs with from, to and limit filters" } [/block] `from`, `to` and `limit` accept a single parameter which will be used to filter response message logs. **Request** [block:code] { "codes": [ { "code": "GET /email/1/logs?from=sender@infobip.com&to=recipient@infobip.com&limit=1\nHost: api.infobip.com\nAuthorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==\nAccept: application/json", "language": "http", "name": "JSON" }, { "code": "GET /email/1/logs?from=sender@infobip.com&to=recipient@infobip.com&limit=1\nHost: api.infobip.com\nAuthorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==\nAccept: application/xml", "language": "http", "name": "XML" }, { "code": "curl -X GET \n-H 'Accept: application/json' \n-H 'Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ=='\nhttps://api.infobip.com/email/1/logs?from=sender@infobip.com&to=recipient@infobip.com&limit=1", "language": "curl", "name": "cURL" }, { "code": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.infobip.com/email/1/logs?from=sender@infobip.com&to=recipient@infobip.com&limit=1');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n 'accept' => 'application/json',\n 'authorization' => 'Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ=='\n));\n\ntry {\n $response = $request->send();\n\n echo $response->getBody();\n} catch (HttpException $ex) {\n echo $ex;\n}\n?>", "language": "php" }, { "code": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://api.infobip.com/email/1/logs?from=sender@infobip.com&to=recipient@infobip.com&limit=1\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"authorization\"] = 'Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ=='\nrequest[\"accept\"] = 'application/json'\n\nresponse = http.request(request)\nputs response.read_body\n", "language": "ruby" }, { "code": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.infobip.com\")\n\nheaders = {\n 'authorization': \"Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==\",\n 'accept': \"application/json\"\n }\n\nconn.request(\"GET\", \"/email/1/logs?from=sender@infobip.com&to=recipient@infobip.com&limit=1\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))\n", "language": "python" }, { "code": "HttpResponse<String> response = Unirest.get(\"https://api.infobip.com/email/1/logs?from=sender@infobip.com&to=recipient@infobip.com&limit=1\")\n .header(\"authorization\", \"Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==\")\n .header(\"accept\", \"application/json\")\n .asString();", "language": "java" }, { "code": "var client = new RestClient(\"https://api.infobip.com/email/1/logs?from=sender@infobip.com&to=recipient@infobip.com&limit=1\");\n\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"accept\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==\");\n\nIRestResponse response = client.Execute(request);", "language": "csharp" }, { "code": "var data = null;\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n if (this.readyState === this.DONE) {\n console.log(this.responseText);\n }\n});\n\nxhr.open(\"GET\", \"https://api.infobip.com/email/1/logs?from=sender@infobip.com&to=recipient@infobip.com&limit=1\");\nxhr.setRequestHeader(\"authorization\", \"Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==\");\nxhr.setRequestHeader(\"accept\", \"application/json\");\n\nxhr.send(data);\n", "language": "javascript" } ] } [/block] **Response** [block:code] { "codes": [ { "code": "{\n \"results\": [\n {\n \"messageId\": \"54ddb941-2566-46e0-802a-22bea5cf94bc\",\n \"to\": \"recipient@infobip.com\",\n \"from\": \"sender@infobip.com\",\n \"text\": \"Test text\",\n \"sentAt\": \"2016-09-01T11:14:44.453+0000\",\n \"doneAt\": \"2016-09-01T11:14:45.050+0000\",\n \"price\": {\n \"pricePerMessage\": 0.0005,\n \"currency\": \"EUR\"\n },\n \"status\": {\n \"groupId\": 3,\n \"groupName\": \"DELIVERED\",\n \"id\": 5,\n \"name\": \"DELIVERED_TO_HANDSET\",\n \"description\": \"Message delivered to handset\"\n },\n \"channel\": \"EMAIL\"\n }\n ]\n}", "language": "json" }, { "code": "<?xml version='1.0' encoding='UTF-8'?>\n<LogsResponse>\n <results>\n <result>\n <messageId>54ddb941-2566-46e0-802a-22bea5cf94bc</messageId>\n <to>recipient@infobip.com</to>\n <from>sender@infobip.com</from>\n <text>Test text</text>\n <sentAt>2016-09-01T11:14:44.453+0000</sentAt>\n <doneAt>2016-09-01T11:14:45.050+0000</doneAt>\n <price>\n <pricePerMessage>0.0005000000</pricePerMessage>\n <currency>EUR</currency>\n </price>\n <status>\n <groupId>3</groupId>\n <groupName>DELIVERED</groupName>\n <id>5</id>\n <name>DELIVERED_TO_HANDSET</name>\n <description>Message delivered to handset</description>\n </status>\n <channel>EMAIL</channel>\n </result>\n </results>\n</LogsResponse>", "language": "xml" } ] } [/block] [block:api-header] { "type": "get", "title": "Get logs with date range and general status filters" } [/block] `sentSince` and `generalStatus` accept a single parameter which will be used to filter response message logs. Request: [block:code] { "codes": [ { "code": "GET /email/1/logs?sentSince=2016-08-22T17:42:05.390%2b01:00&generalStatus=DELIVERED HTTP/1.1\nHost: api.infobip.com\nAuthorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==\nAccept: application/json", "language": "http", "name": "JSON" }, { "code": "GET /email/1/logs?sentSince=2016-08-22T17:42:05.390%2b01:00&generalStatus=DELIVERED HTTP/1.1\nHost: api.infobip.com\nAuthorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==\nAccept: application/xml", "language": "http", "name": "XML" }, { "code": "curl -X GET \n-H 'Accept: application/json' \n-H 'Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ=='\nhttps://api.infobip.com/email/1/logs?sentSince=2016-08-22T17:42:05.390%2b01:00&generalStatus=DELIVERED", "language": "curl", "name": "cURL" }, { "code": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.infobip.com/email/1/logs?sentSince=2016-08-22T17:42:05.390%2b01:00&generalStatus=DELIVERED');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n 'accept' => 'application/json',\n 'authorization' => 'Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ=='\n));\n\ntry {\n $response = $request->send();\n\n echo $response->getBody();\n} catch (HttpException $ex) {\n echo $ex;\n}\n?>", "language": "php" }, { "code": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://api.infobip.com/email/1/logs?sentSince=2016-08-22T17:42:05.390%2b01:00&generalStatus=DELIVERED\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"authorization\"] = 'Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ=='\nrequest[\"accept\"] = 'application/json'\n\nresponse = http.request(request)\nputs response.read_body\n", "language": "ruby" }, { "code": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.infobip.com\")\n\nheaders = {\n 'authorization': \"Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==\",\n 'accept': \"application/json\"\n }\n\nconn.request(\"GET\", \"/email/1/logs?sentSince=2016-08-22T17:42:05.390%2b01:00&generalStatus=DELIVERED\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))\n", "language": "python" }, { "code": "HttpResponse<String> response = Unirest.get(\"https://api.infobip.com/email/1/logs?sentSince=2016-08-22T17:42:05.390%2b01:00&generalStatus=DELIVERED\")\n .header(\"authorization\", \"Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==\")\n .header(\"accept\", \"application/json\")\n .asString();", "language": "java" }, { "code": "var client = new RestClient(\"https://api.infobip.com/email/1/logs?sentSince=2016-08-22T17:42:05.390%2b01:00&generalStatus=DELIVERED\");\n\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"accept\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==\");\n\nIRestResponse response = client.Execute(request);", "language": "csharp" }, { "code": "var data = null;\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n if (this.readyState === this.DONE) {\n console.log(this.responseText);\n }\n});\n\nxhr.open(\"GET\", \"https://api.infobip.com/email/1/logs?sentSince=2016-08-22T17:42:05.390%2b01:00&generalStatus=DELIVERED\");\nxhr.setRequestHeader(\"authorization\", \"Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==\");\nxhr.setRequestHeader(\"accept\", \"application/json\");\n\nxhr.send(data);\n", "language": "javascript" } ] } [/block] Response: [block:code] { "codes": [ { "code": "{\n \"results\": [\n {\n \"messageId\": \"54ddb941-2566-46e0-802a-22bea5cf94bc\",\n \"to\": \"recipient@infobip.com\",\n \"from\": \"sender@infobip.com\",\n \"text\": \"Test text\",\n \"sentAt\": \"2016-09-01T11:14:44.453+0000\",\n \"doneAt\": \"2016-09-01T11:14:45.050+0000\",\n \"price\": {\n \"pricePerMessage\": 0.0005,\n \"currency\": \"EUR\"\n },\n \"status\": {\n \"groupId\": 3,\n \"groupName\": \"DELIVERED\",\n \"id\": 5,\n \"name\": \"DELIVERED_TO_HANDSET\",\n \"description\": \"Message delivered to handset\"\n },\n \"channel\": \"EMAIL\"\n }\n ]\n}", "language": "json" }, { "code": "<?xml version='1.0' encoding='UTF-8'?>\n<LogsResponse>\n <results>\n <result>\n <messageId>54ddb941-2566-46e0-802a-22bea5cf94bc</messageId>\n <to>recipient@infobip.com</to>\n <from>sender@infobip.com</from>\n <text>Test text</text>\n <sentAt>2016-09-01T11:14:44.453+0000</sentAt>\n <doneAt>2016-09-01T11:14:45.050+0000</doneAt>\n <price>\n <pricePerMessage>0.0005000000</pricePerMessage>\n <currency>EUR</currency>\n </price>\n <status>\n <groupId>3</groupId>\n <groupName>DELIVERED</groupName>\n <id>5</id>\n <name>DELIVERED_TO_HANDSET</name>\n <description>Message delivered to handset</description>\n </status>\n <channel>EMAIL</channel>\n </result>\n </results>\n</LogsResponse>", "language": "xml" } ] } [/block] #Get logs by Bulk ID **Request:** [block:code] { "codes": [ { "code": "GET /email/1/logs?bulkId=lrzkq6gatdkxouhrkgni HTTP/1.1\nHost: api.infobip.com\nAuthorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==\nAccept: application/json", "language": "http", "name": "JSON" }, { "code": "GET /email/1/logs?bulkId=lrzkq6gatdkxouhrkgni HTTP/1.1\nHost: api.infobip.com\nAuthorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==\nAccept: application/xml", "language": "http", "name": null }, { "code": "curl -X GET \\\n-H 'Accept: application/json' \\\n-H \"Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==\" \\\nhttps://api.infobip.com/email/1/logs?bulkId=lrzkq6gatdkxouhrkgni", "language": "curl" }, { "code": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.infobip.com/email/1/logs');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setQueryData(array(\n 'bulkId' => 'lrzkq6gatdkxouhrkgni'\n));\n\n$request->setHeaders(array(\n 'accept' => 'application/json',\n 'authorization' => 'Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ=='\n));\n\ntry {\n $response = $request->send();\n\n echo $response->getBody();\n} catch (HttpException $ex) {\n echo $ex;\n}", "language": "php" }, { "code": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://api.infobip.com/email/1/logs?bulkId=lrzkq6gatdkxouhrkgni\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"authorization\"] = 'Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ=='\nrequest[\"accept\"] = 'application/json'\n\nresponse = http.request(request)\nputs response.read_body", "language": "ruby" }, { "code": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.infobip.com\")\n\nheaders = {\n 'authorization': \"Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==\",\n 'accept': \"application/json\"\n }\n\nconn.request(\"GET\", \"/email/1/logs?bulkId=lrzkq6gatdkxouhrkgni\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))", "language": "python" }, { "code": "HttpResponse<String> response = Unirest.get(\"https://api.infobip.com/email/1/logs?bulkId=lrzkq6gatdkxouhrkgni\")\n .header(\"authorization\", \"Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==\")\n .header(\"accept\", \"application/json\")\n .asString();", "language": "java" }, { "code": "var client = new RestClient(\"https://api.infobip.com/email/1/logs?bulkId=lrzkq6gatdkxouhrkgni\");\n\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"accept\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==\");\n\nIRestResponse response = client.Execute(request);", "language": "csharp", "name": "C#" }, { "code": "var data = null;\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n if (this.readyState === this.DONE) {\n console.log(this.responseText);\n }\n});\n\nxhr.open(\"GET\", \"https://api.infobip.com/email/1/logs?bulkId=lrzkq6gatdkxouhrkgni\");\nxhr.setRequestHeader(\"authorization\", \"Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==\");\nxhr.setRequestHeader(\"accept\", \"application/json\");\n\nxhr.send(data);", "language": "javascript" } ] } [/block] **Response:** [block:code] { "codes": [ { "code": "{\n \"results\": [\n {\n \"bulkId\": \"lrzkq6gatdkxouhrkgni\",\n \"messageId\": \"64c98929-f160-4e2c-b156-ca88cc733547\",\n \"to\": \"recipient@infobip.com\",\n \"from\": \"sender@infobip.com\",\n \"text\": \"Test text\",\n \"sentAt\": \"2016-09-01T10:29:00.440+0000\",\n \"doneAt\": \"2016-09-01T10:29:01.130+0000\",\n \"price\": {\n \"pricePerMessage\": 0.0005,\n \"currency\": \"EUR\"\n },\n \"status\": {\n \"groupId\": 3,\n \"groupName\": \"DELIVERED\",\n \"id\": 5,\n \"name\": \"DELIVERED_TO_HANDSET\",\n \"description\": \"Message delivered to handset\"\n },\n \"channel\": \"EMAIL\"\n },\n {\n \"bulkId\": \"lrzkq6gatdkxouhrkgni\",\n \"messageId\": \"60d586a1-6448-4c5f-860d-be3ddbea16da\",\n \"to\": \"recipient@infobip.com\",\n \"from\": \"sender@infobip.com\",\n \"text\": \"Test text\",\n \"sentAt\": \"2016-09-01T10:29:00.317+0000\",\n \"doneAt\": \"2016-09-01T10:29:00.807+0000\",\n \"price\": {\n \"pricePerMessage\": 0.0005,\n \"currency\": \"EUR\"\n },\n \"status\": {\n \"groupId\": 3,\n \"groupName\": \"DELIVERED\",\n \"id\": 5,\n \"name\": \"DELIVERED_TO_HANDSET\",\n \"description\": \"Message delivered to handset\"\n },\n \"channel\": \"EMAIL\"\n }\n ]\n}", "language": "json", "name": null }, { "code": "<?xml version='1.0' encoding='UTF-8'?>\n<LogsResponse>\n <results>\n <result>\n <bulkId>lrzkq6gatdkxouhrkgni</bulkId>\n <messageId>64c98929-f160-4e2c-b156-ca88cc733547</messageId>\n <to>recipient@infobip.com</to>\n <from>sender@infobip.com</from>\n <text>Test text</text>\n <sentAt>2016-09-01T10:29:00.440+0000</sentAt>\n <doneAt>2016-09-01T10:29:01.130+0000</doneAt>\n <price>\n <pricePerMessage>0.0005000000</pricePerMessage>\n <currency>EUR</currency>\n </price>\n <status>\n <groupId>3</groupId>\n <groupName>DELIVERED</groupName>\n <id>5</id>\n <name>DELIVERED_TO_HANDSET</name>\n <description>Message delivered to handset</description>\n </status>\n <channel>EMAIL</channel>\n </result>\n \t<result>\n <bulkId>lrzkq6gatdkxouhrkgni</bulkId>\n <messageId>60d586a1-6448-4c5f-860d-be3ddbea16da</messageId>\n <to>recipient@infobip.com</to>\n <from>sender@infobip.com</from>\n <text>Test text</text>\n <sentAt>2016-09-01T10:29:00.317+0000</sentAt>\n <doneAt>2016-09-01T10:29:00.807+0000</doneAt>\n <price>\n <pricePerMessage>0.0005000000</pricePerMessage>\n <currency>EUR</currency>\n </price>\n <status>\n <groupId>3</groupId>\n <groupName>DELIVERED</groupName>\n <id>5</id>\n <name>DELIVERED_TO_HANDSET</name>\n <description>Message delivered to handset</description>\n </status>\n <channel>EMAIL</channel>\n </result>\n </results>\n</LogsResponse>", "language": "xml" } ] } [/block]
									Node:
									(type) c
									(layer)3
										Element:hr
									Node:
									(type) c
									(layer)3
										Element:a
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
											User Information
									Node:
									(type) c
									(layer)3
										Element:label
											username
									Node:
									(type) c
									(layer)3
										Element:label
											password
									Node:
									(type) c
									(layer)3
						Node:
						(type) c
						(layer)2
							Element:h2
								Try It Out
						Node:
						(type) c
						(layer)2
							Element:label
								{{ param.name }}
							Element:span
								*
						Node:
						(type) c
						(layer)2
							Element:span
								get
						Node:
						(type) c
						(layer)2
							Element:span
						Node:
						(type) c
						(layer)2
							Element:span
						Node:
						(type) c
						(layer)2
							Element:pre
								{{ tryResults.results }}
						Node:
						(type) c
						(layer)2
							Element:table
							Element:tr
							Element:th
								Method
							Element:td
								{{ tryResults.method }}
							Element:tr
							Element:th
								Request Headers
							Element:td
							Element:pre
								{{ tryResults.requestHeaders }}
							Element:tr
							Element:th
								URL
							Element:td
								{{ tryResults.url }}
							Element:tr
							Element:th
								Request Data
							Element:td
							Element:pre
								{{ tryResults.data }}
							Element:tr
							Element:th
								Status
							Element:td
							Element:span
							Element:tr
							Element:th
								Response Headers
							Element:td
							Element:pre
								{{ tryResults.responseHeaders }}
						Node:
						(type) c
						(layer)2
							Element:footer
						Node:
						(type) c
						(layer)2
												Node:
												(type) c
												(layer)4
													Element:h4
														Subscribe to our newsletter
												Node:
												(type) c
												(layer)4
													Element:noscript
												Node:
												(type) c
												(layer)4
													Element:noscript
