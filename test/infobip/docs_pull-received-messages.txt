Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					Receive SMS by Pull method
					This method allows you to pull received messages over API call.
			Node:
			(type) c
			(layer)1
				Element:hr
					This tutorial will show you how to access messages sent by your customers. Before you proceed to implement this method, [**please read introduction**](/docs/receive-sms-introduction) on how to receive inbound messages where you can learn about numbers and initial setup. [block:callout] { "type": "info", "title": "", "body": "This tutorial covers accessing messages via Pull method. Besides Pull method, received messages can be forwarded to your application URL in real time. [Learn more about Forward method](/docs/forward-received-messages)." } [/block] Accessing your received messages in our system is pretty much straight forward. All you need to do is make simple API call which will return received messages. [block:callout] { "type": "warning", "title": "Important!", "body": "All received messages can be pulled **only once**! Once a certain message has been pulled by this method, it will not be available for the next API call. This means that every time you make an API call, you will receive **only new messages** that arrived since the last API call." } [/block] Request example [block:code] { "codes": [ { "code": "GET /sms/1/inbox/reports HTTP/1.1\nHost: api.infobip.com\nAuthorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==\nAccept: application/json", "language": "json" }, { "code": "GET /sms/1/inbox/reports HTTP/1.1\nHost: api.infobip.com\nAuthorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==\nAccept: application/xml", "language": "xml" }, { "code": "curl -X GET \\\n-H 'Accept: application/json' \\\n-H \"Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==\" \\\nhttps://api.infobip.com/sms/1/inbox/reports", "language": "curl" }, { "code": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n CURLOPT_URL => \"http://api.infobip.com/sms/1/inbox/reports\",\n CURLOPT_RETURNTRANSFER => true,\n CURLOPT_ENCODING => \"\",\n CURLOPT_MAXREDIRS => 10,\n CURLOPT_TIMEOUT => 30,\n CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n CURLOPT_CUSTOMREQUEST => \"GET\",\n CURLOPT_POSTFIELDS => \"\",\n CURLOPT_HTTPHEADER => array(\n \"accept: application/json\",\n \"authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==\"\n ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n echo \"cURL Error #:\" . $err;\n} else {\n echo $response;\n}", "language": "php" }, { "code": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://api.infobip.com/sms/1/inbox/reports\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"authorization\"] = 'Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ=='\nrequest[\"accept\"] = 'application/json'\n\nresponse = http.request(request)\nputs response.read_body", "language": "ruby" }, { "code": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.infobip.com\")\n\nheaders = {\n 'authorization': \"Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==\",\n 'accept': \"application/json\"\n }\n\nconn.request(\"GET\", \"/sms/1/inbox/reports\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))", "language": "python" }, { "code": "HttpResponse<String> response = Unirest.get(\"https://api.infobip.com/sms/1/inbox/reports\")\n .header(\"authorization\", \"Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==\")\n .header(\"accept\", \"application/json\")\n .asString();", "language": "java" }, { "code": "var client = new RestClient(\"https://api.infobip.com/sms/1/inbox/reports\");\n\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"accept\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==\");\n\nIRestResponse response = client.Execute(request);", "language": "csharp" }, { "code": "var data = null;\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n if (this.readyState === this.DONE) {\n console.log(this.responseText);\n }\n});\n\nxhr.open(\"GET\", \"https://api.infobip.com/sms/1/inbox/reports\");\nxhr.setRequestHeader(\"authorization\", \"Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==\");\nxhr.setRequestHeader(\"accept\", \"application/json\");\n\nxhr.send(data);", "language": "javascript" } ] } [/block] Response [block:code] { "codes": [ { "code": "{\n \"results\": [\n {\n \"messageId\": \"817790313235066447\",\n \"from\": \"385916242493\",\n \"to\": \"385921004026\",\n \"text\": \"QUIZ Correct answer is Paris\",\n \"cleanText\": \"Correct answer is Paris\",\n \"keyword\": \"QUIZ\",\n \"receivedAt\": \"2016-10-06T09:28:39.220+0000\",\n \"smsCount\": 1,\n \"price\": {\n \"pricePerMessage\": 0,\n \"currency\": \"EUR\"\n },\n \"callbackData\": \"callbackData\"\n }\n ],\n \"messageCount\": 1,\n \"pendingMessageCount\": 0\n}", "language": "json" } ] } [/block] # Response body parameters If successful, the response header HTTP status code will be `200 OK` and messages will be returned in the response body. If you try to get received messages without authorization, you will get a response with HTTP status code `401 Unauthorized`. ## SMSResponse |Parameter|Type|Description| |-|-|-| |*results*|[Messages[]](#messages)|Collection of reports, one per every received message.| |*messageCount*|Int|Number of returned messages in this request.| |*pendingMessageCount*|Int|Number of remaining new messages on our server ready to be returned in the next API call.| ### Messages |Parameter|Type|Description| |-|-|-| |*messageId*|String|The ID that uniquely identifies the received message.| |*from*|String|Sender ID that can be alphanumeric or numeric.| |*to*|String|The message destination address.| |*text*|String|Full text of the received message.| |*cleanText*|String|Text of received message without a keyword (if a keyword was sent).| |*keyword*|String|Keyword extracted from the message text.| |*receivedAt*|Date|Tells when Infobip platform received the message. It has the following format: `yyyy-MM-dd'T'HH:mm:ss.SSSXXX`.| |*smsCount*|Int|The number of sent message segments.| |*pricePerMessage*|Decimal|Cost of receiving a message.| |*currency*|String|Currency of the message price.| |*callbackData*|int|Custom callback data can be inserted during setup phase.| [block:callout] { "type": "info", "title": "Keywords", "body": "Learn more about keywords and how to use them in [introduction](/docs/receive-sms-introduction)." } [/block] [block:api-header] { "type": "basic", "title": "Get limited number of messages" } [/block] You can limit the number of messages in one request by introducing `limit` parameter like this: ``` /sms/1/inbox/reports?limit=2 ``` **Request example:** [block:code] { "codes": [ { "code": "GET /sms/1/inbox/reports?limit=2 HTTP/1.1\nHost: api.infobip.com\nAuthorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==\nAccept: application/json", "language": "json" }, { "code": "GET /sms/1/inbox/reports?limit=2 HTTP/1.1\nHost: api.infobip.com\nAuthorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==\nAccept: application/xml", "language": "xml" }, { "code": "curl -X GET \n-H 'Accept: application/json' \n-H \"Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==\" \nhttps://api.infobip.com/sms/1/inbox/reports?limit=2", "language": "curl" }, { "code": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n CURLOPT_URL => \"http://api.infobip.com/sms/1/inbox/reports?limit=2\",\n CURLOPT_RETURNTRANSFER => true,\n CURLOPT_ENCODING => \"\",\n CURLOPT_MAXREDIRS => 10,\n CURLOPT_TIMEOUT => 30,\n CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n CURLOPT_CUSTOMREQUEST => \"GET\",\n CURLOPT_POSTFIELDS => \"\",\n CURLOPT_HTTPHEADER => array(\n \"accept: application/json\",\n \"authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==\"\n ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n echo \"cURL Error #:\" . $err;\n} else {\n echo $response;\n}", "language": "php" }, { "code": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://api.infobip.com/sms/1/inbox/reports?limit=2\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"authorization\"] = 'Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ=='\nrequest[\"accept\"] = 'application/json'\n\nresponse = http.request(request)\nputs response.read_body", "language": "ruby" }, { "code": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.infobip.com\")\n\nheaders = {\n 'authorization': \"Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==\",\n 'accept': \"application/json\"\n }\n\nconn.request(\"GET\", \"/sms/1/inbox/reports?limit=2\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))", "language": "python" }, { "code": "HttpResponse<String> response = Unirest.get(\"https://api.infobip.com/sms/1/inbox/reports?limit=2\")\n .header(\"authorization\", \"Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==\")\n .header(\"accept\", \"application/json\")\n .asString();", "language": "java" }, { "code": "var client = new RestClient(\"https://api.infobip.com/sms/1/inbox/reports?limit=2\");\n\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"accept\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==\");\n\nIRestResponse response = client.Execute(request);", "language": "csharp" }, { "code": "var data = null;\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n if (this.readyState === this.DONE) {\n console.log(this.responseText);\n }\n});\n\nxhr.open(\"GET\", \"https://api.infobip.com/sms/1/inbox/reports?limit=2\");\nxhr.setRequestHeader(\"authorization\", \"Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==\");\nxhr.setRequestHeader(\"accept\", \"application/json\");\n\nxhr.send(data);", "language": "javascript" } ] } [/block] The response will return a collection with only selected number of messages. The rest of the messages will be included in the next call you make.
			Node:
			(type) c
			(layer)1
				Element:footer
			Node:
			(type) c
			(layer)1
												Node:
												(type) c
												(layer)4
													Element:h4
														Subscribe to our newsletter
												Node:
												(type) c
												(layer)4
													Element:noscript
												Node:
												(type) c
												(layer)4
													Element:noscript
