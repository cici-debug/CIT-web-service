Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					Use this method when sending large amount of messages or targeting different user segments with different messages to optimize data traffic and increase performance.
				Element:span
					post
					Send bulk PUSH notifications
			Node:
			(type) c
			(layer)1
				Element:hr
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
											Definition
									Node:
									(type) c
									(layer)3
										Element:span
											{{ api_url }}
									Node:
									(type) c
									(layer)3
										Element:span
											{{ page_api_url }}
									Node:
									(type) c
									(layer)3
										Element:hr
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
											Parameters
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Body Params
												Node:
												(type) c
												(layer)4
													Element:strong
														messages
														required
													Element:span
														:
												Node:
												(type) c
												(layer)4
													Element:strong
														object
														Collection of Push notifications. Each message in the collection is completely independent. Different values may be used for each notification, such as "sender application" or "message text".
												Node:
												(type) c
												(layer)4
													Element:strong
														from
														required
													Element:span
														:
												Node:
												(type) c
												(layer)4
													Element:strong
														string
														Push application code you are using to send notifications. Application code is the application identifier which links your mobile application to the application profile created inside the Infobip Platform. It is required to insert the application code into the Mobile Messaging SDK configuration once you implement it in your mobile application.
												Node:
												(type) c
												(layer)4
													Element:strong
														to
														required
													Element:span
														:
												Node:
												(type) c
												(layer)4
													Element:strong
														object
														<a href="#section-recipient-destination-address-types">Recipient destination address.</a>
												Node:
												(type) c
												(layer)4
													Element:strong
														text
														required
													Element:span
														:
												Node:
												(type) c
												(layer)4
													Element:strong
														string
														Text of the message that will be sent.
												Node:
												(type) c
												(layer)4
													Element:strong
														sendAt
													Element:span
														:
												Node:
												(type) c
												(layer)4
													Element:strong
														datetime
														Used for scheduled Push notifications. The notification will be sent at the scheduled time.
												Node:
												(type) c
												(layer)4
													Element:strong
														customPayload
													Element:span
														:
												Node:
												(type) c
												(layer)4
													Element:strong
														object
														Additional data that can be delivered with the Push notification. customPayload must be formatted as JSON object.
												Node:
												(type) c
												(layer)4
													Element:strong
														notificationOptions
													Element:span
														:
												Node:
												(type) c
												(layer)4
													Element:strong
														object
														<a href="#section-notification-options">JSON object that contains notification options.</a>
												Node:
												(type) c
												(layer)4
													Element:hr
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
											Examples
									Node:
									(type) c
									(layer)3
										Element:hr
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
											Result Format
									Node:
									(type) c
									(layer)3
										Element:hr
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
											Documentation
											If successful, the response header HTTP status code will be 200 OK and the message will be sent. If you try to send the message without authorization, you will receive a 401 Unauthorized error. On a wrongly formatted request, the HTTP status code will be 400 Bad Request. ##Response format |Parameter|Type|Description| |-|-|-| |*to*|object|[Recipient destination address](#section-recipient-destination-address-types).| |*status*|object|Message status.| |*messageCount*|integer|Number of recipients for targeted segment.| |*bulkId*|string|The ID which uniquely identifies the request.| Status: |Parameter|Type|Description| |-|-|-| |*groupId*|int|Status [group ID](http://dev.infobip.com/v1/docs/response-codes#status-object-example).| |*groupName*|String|Status [group name](http://dev.infobip.com/v1/docs/response-codes#status-object-example).| |*id*|int|Status [ID](http://dev.infobip.com/v1/docs/response-codes#status-object-example).| |*name*|String|Status [name](http://dev.infobip.com/v1/docs/response-codes#status-object-example).| |*description*|String|Human readable [description](http://dev.infobip.com/v1/docs/response-codes#status-object-example) of the status.| ##Notification options You may choose different options on how to alert the user when the Push notification is received. |Name|Required|Default|Type|Description| |-|-|-|-|-| |vibrationEnabled|no|true|boolean|Notification vibration (Android only).| |soundEnabled|no|true|boolean|Sound when notification arrive on a device.| |badge|no|true|integer|Badge counter (iOS only).| ##Recipient destination address types Push notifications offer a wide range of possibilities when it comes to destination targeting options. Below you will find available fields and examples on how they can be used. [block:callout] { "type": "warning", "title": "PUSH SDK", "body": "Learn how to properly implement destination address type parameters in [Android](https://github.com/infobip/mobile-messaging-sdk-android/wiki/User-data) and [iOS](https://github.com/infobip/mobile-messaging-sdk-ios/wiki/User-data) SDK documentation." } [/block] Destination address types enabled by default are: |Name|Type|Description| |-|-|-| |*pushRegistrationId*|string|Push Registration Id is a unique ID which identifies application instance and a specific device.| |*cloudType*|string|Possible values are `GCM` (Google Cloud Messaging) or `APNS` (Apple Push Notification service).| The following destination address types are not available by default. They should be defined by User Data in SDK. |Name|Type|Description| |-|-|-| |*externalUserId*|string|External user ID set in User Profile. Learn more about external user id in [Android ](https://github.com/infobip/mobile-messaging-sdk-android/wiki/User-data#external-user-id)and [IOS ](https://github.com/infobip/mobile-messaging-sdk-ios/wiki/User-data#external-user-id)SDK documentation.| |*GSM*|string|MSISDN in international format (Example: 41793026727).| |*email*|string|Email of the user if it is provided in User Profile.| |*<custom field>*|string|Any field from **custom data** parameters. Learn more about custom data in [Android ](https://github.com/infobip/mobile-messaging-sdk-android/wiki/User-data#custom-user-data)and [IOS ](https://github.com/infobip/mobile-messaging-sdk-ios/wiki/User-data#custom-user-data)SDK documentation.| [block:callout] { "type": "warning", "body": "You can use a single address type or even combine two or more to achieve desired user segmentation. Use the API request example above and replace only the \"to\" field with one of the examples below to take advantage of various segmentation options.", "title": "Combining different address types in single request" } [/block] ####Single recipient destination address type Use this method to target recipient's device associated with the single PUSH registration ID. ``` "to": { "pushRegistrationId": "69827EDB-A806-4AF6-A7F6-98298EAA4F14" } ``` With this type of targeting, you can achieve the following: * target all iOS or Android devices * target a particular device * target all devices of particular external user ID * target all devices linked to a GSM * target all devices linked to an email * target all devices associated with any custom data parameter like tag, subscription or other In the following example we are targeting all iOS devices. ``` "to": { "cloudType": "APNS" } ``` With this example will be targeted all devices that has been associated with GSM number 41793026727 ``` "to": { "GSM": "41793026727" } ``` ####Multiple recipient destinations of the single address type (IN) Combining two or more different parameters of the same destination address type can be done as shown in the example below. In this example, the message will be delivered to both iOS and Android users. ``` "to": { "cloudType": ["APNS", "GCM"] } ``` By using this method you can target all user devices by email address. ``` "to": { "email": ["jane.smith@somedomain.com", "john.smith@somedomain.com"] } ``` ####Multiple destination address types (AND) You can use this method to target recipient segment by using two or more different address type filters. The message will be delivered only to those recipients who satisfy **all filter conditions**. In other words, if recipient's device matches address type 1 **AND **address type 2, the message will be sent. In the following example, all iOS devices of the recipient with specific external ID will be targeted. ``` "to": { "cloudType": "APNS", "externalUserId": "customer_21234" } ``` ####Multiple destination address types (OR) In some cases, you may want to segment your recipients by including different filters over multiple destination address types. By using this method, a recipient will receive the message if he satisfies **at least one condition**. In other words, if recipient matches address type 1 **OR **address type 2, the message will be sent. In the following example, recipients whose favorite pizza is Capricciosa or favorite pasta is Napolitana will be targeted. ``` "to": { "$or": [ {"FavoritePizza": "Capricciosa"}, {"FavoritePasta": "Napolitana"} ] } ``` ####Advanced targeting example The combination of different targeting methods is also supported. In the following example, we are targeting Android devices of the recipients who have a specific user ID or at least one of the listed emails. ``` "to": { "$or": [ {"externalUserId": "my-ext_id-1"}, {"email": ["myEmail_1@domain.com", "myEmail_2@domain.com"]} ], "cloudType": "GCM" } ```
									Node:
									(type) c
									(layer)3
										Element:footer
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Subscribe to our newsletter
												Node:
												(type) c
												(layer)4
													Element:noscript
												Node:
												(type) c
												(layer)4
													Element:noscript
