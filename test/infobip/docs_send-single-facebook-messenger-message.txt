Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					This method allows you to send a single message.
				Element:span
					post
					Send Facebook message
			Node:
			(type) c
			(layer)1
				Element:hr
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
											Definition
									Node:
									(type) c
									(layer)3
										Element:span
											{{ api_url }}
									Node:
									(type) c
									(layer)3
										Element:span
											{{ page_api_url }}
									Node:
									(type) c
									(layer)3
										Element:hr
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
											Parameters
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Body Params
												Node:
												(type) c
												(layer)4
													Element:strong
														from
														required
													Element:span
														:
												Node:
												(type) c
												(layer)4
													Element:strong
														string
														Application key you are using to send messages.
												Node:
												(type) c
												(layer)4
													Element:strong
														to
														required
													Element:span
														:
												Node:
												(type) c
												(layer)4
													Element:strong
														string
														User key or phone number. User key is not facebook_id. User key is a assigned when user is registering to be contacted by your Facebook application. User can register in different ways described <a href="/docs/facebook-messenger-introduction#how-can-my-organisation-contact-people-over-Facebook">here</a>.
												Node:
												(type) c
												(layer)4
													Element:strong
														message
														required
													Element:span
														:
												Node:
												(type) c
												(layer)4
													Element:strong
														object
														<a href="#section-message-object">Message object</a> contains type and text properties
												Node:
												(type) c
												(layer)4
													Element:hr
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
											Examples
									Node:
									(type) c
									(layer)3
										Element:hr
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
											Result Format
									Node:
									(type) c
									(layer)3
										Element:hr
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
											Documentation
											# Response format If successful, response header HTTP status code will be 200 OK and the message will be sent. If you try to send the message without authorization, you will receive an 401 Unauthorized error. On a wrongly formatted request the HTTP status code will be `400 Bad Request`. ####Response |Parameter|Type|Description| |-|-|-| |*to*|String|User key or phone number.| |*status*|[Status](#section-status)|Indicates whether the message is sent successfully, not sent, delivered, not delivered, waiting for delivery or any other possible status.| |*messageCount*|int|The number of sent message segments.| |*messageId*|String|The ID that uniquely identifies the sent message.| ####Status |Parameter|Type|Description| |-|-|-| |*groupId*|int|Status [group ID](http://dev.infobip.com/v1/docs/response-codes#status-object-example).| |*groupName*|String|Status [group name](http://dev.infobip.com/v1/docs/response-codes#status-object-example).| |*id*|int|Status [ID](http://dev.infobip.com/v1/docs/response-codes#status-object-example).| |*name*|String|Status [name](http://dev.infobip.com/v1/docs/response-codes#status-object-example).| |*description*|String|Human readable [description](http://dev.infobip.com/v1/docs/response-codes#status-object-example) of the status.| |*action*|String|[Action](http://dev.infobip.com/v1/docs/response-codes#status-object-example) that should be taken to eliminate the error.| [block:callout] { "type": "info", "title": "Facebook OMNI", "body": "Facebook API is available also as a part of our [OMNI experience](/docs/omni-channel-facebook-messenger-example)." } [/block] # Request Format [block:parameters] { "data": { "h-0": "Property name", "h-1": "Type", "0-0": "from", "1-0": "to", "2-0": "message", "0-1": "String", "1-1": "String", "2-1": "Object", "0-2": "Application key you are using to send messages.", "1-2": "User key.", "2-2": "[Message object](#section-message-object).", "h-2": "Description" }, "cols": 3, "rows": 3 } [/block] ## Message Object Supported message objects are: * [Text message](#section-text-message) (`TEXT`) * [Media message](#section-media-message) (`IMAGE`, `VIDEO`, `AUDIO`) * [Template message](#section-template-messages) (`TEMPLATE`) * [Sender action message](#section-sender-actions) (`SENDER_ACTION`) ### Text Message Type `TEXT` is used when sending a text message. Message must be UTF-8 encoded and under 640 character limit. Messages longer than 640 character will be truncated. [block:parameters] { "data": { "h-0": "Property name", "h-1": "Type", "h-2": "Description", "0-0": "type", "0-1": "String", "0-2": "Constant value - `TEXT`.", "1-0": "text", "1-1": "String", "1-2": "Text of the message." }, "cols": 3, "rows": 2 } [/block] Request example [block:code] { "codes": [ { "code": "POST /facebook/1/single HTTP/1.1\nHost: api.infobip.com\nAuthorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==\nContent-Type: application/json\nAccept: application/json\n\n{ \n \"from\":\"8F0792F86035A9F4290821F1EE6BC06A\",\n \"to\":\"9c29bd43-054b-4cfe-a1d4-0b37812b4ed3\",\n \"message\": {\n \"type\":\"TEXT\",\n \"text\":\"Hello, World!\"\n }\n}", "language": "json" } ] } [/block] ### Media Message Besides the text message, media file can also be sent over API. Before sending the message, you will need to upload your media to publicly accessible server and supply `url` of the file. According to supplied file type, Facebook will attempt to render media preview inside of the client chat application. [block:parameters] { "data": { "h-0": "Property name", "h-1": "Type", "h-2": "Description", "0-0": "type", "0-1": "String", "0-2": "Constant value - allowed values are `IMAGE`, `AUDIO`, `VIDEO` or `FILE`.", "1-0": "url", "1-1": "String", "1-2": "URL of the attachment." }, "cols": 3, "rows": 2 } [/block] Request example [block:code] { "codes": [ { "code": "POST /facebook/1/single HTTP/1.1\nHost: api.infobip.com\nAuthorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==\nContent-Type: application/json\nAccept: application/json\n\n{ \n \"from\":\"8F0792F86035A9F4290821F1EE6BC06A\",\n \"to\":\"9c29bd43-054b-4cfe-a1d4-0b37812b4ed3\",\n \"message\": {\n \"type\":\"IMAGE\",\n \"url\":\"https://petersapparel.com/img/shirt.png\"\n }\n}", "language": "json" } ] } [/block] ### Sender Actions Besides sending messages, you may also want to send typing indicators or send read receipts using the API, to let users know you are processing their request. This way your customers can see if you have seen the message or typing reply. [block:parameters] { "data": { "h-0": "Property name", "h-1": "Type", "h-2": "Description", "0-2": "Constant value - `SENDER_ACTION`.", "0-0": "type", "0-1": "String", "1-0": "senderAction", "1-1": "String", "1-2": "Constant value - `MARK_SEEN`, `TYPING_ON`, `TYPING_OFF`" }, "cols": 3, "rows": 2 } [/block] Request example [block:code] { "codes": [ { "code": "POST /facebook/1/single HTTP/1.1\nHost: api.infobip.com\nAuthorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==\nContent-Type: application/json\nAccept: application/json\n\n{ \n \"from\":\"8F0792F86035A9F4290821F1EE6BC06A\",\n \"to\":\"9c29bd43-054b-4cfe-a1d4-0b37812b4ed3\",\n \"message\": {\n \"type\":\"SENDER_ACTION\",\n \"senderAction\":\"MARK_SEEN\"\n }\n}", "language": "json" } ] } [/block] ### Template messages Use the Button Template with the Send API to send a text and buttons attachment to request input from the user. The buttons can open a URL, or make a back-end call to your webhook. [block:parameters] { "data": { "h-0": "Property name", "h-1": "Type", "h-2": "Description", "0-2": "Constant value - `TEMPLATE`.", "0-0": "type", "0-1": "String", "1-0": "payload", "1-1": "Object", "1-2": "Payload object" }, "cols": 3, "rows": 2 } [/block] Payload Object [block:parameters] { "data": { "h-0": "Property name", "h-1": "Type", "h-2": "Description", "0-2": "Constant value - `BUTTON`.", "0-0": "type", "0-1": "String", "1-0": "text", "1-1": "String", "1-2": "UTF-8 encoded text of up to 320 characters that appears the in main body.", "2-0": "buttons", "2-2": "Set of, one to three, buttons that appear as call-to-actions", "2-1": "Array of button" }, "cols": 3, "rows": 3 } [/block] Button Object [block:parameters] { "data": { "h-0": "Property name", "h-1": "Type", "h-2": "Description", "0-2": "Constant value - `POSTBACK`, `URL`.", "0-0": "type", "0-1": "String", "1-0": "title", "1-1": "String", "1-2": "Button title. 20 character limit.", "2-0": "payload", "2-2": "Use if `POSTBACK` type is set.\nThis data will be sent back to your webhook. 1000 character limit.", "2-1": "String", "3-0": "url", "3-1": "String", "3-2": "Use if `URL` type is set.\nThis URL is opened in a mobile browser when the button is tapped." }, "cols": 3, "rows": 4 } [/block] [block:code] { "codes": [ { "code": "POST /facebook/1/single HTTP/1.1\nHost: api.infobip.com\nAuthorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==\nContent-Type: application/json\nAccept: application/json\n\n{ \n \"from\":\"8F0792F86035A9F4290821F1EE6BC06A\",\n \"to\":\"9c29bd43-054b-4cfe-a1d4-0b37812b4ed3\",\n \"message\": {\n \"type\":\"TEMPLATE\",\n \"payload\":{\n \"type\":\"BUTTON\",\n \"text\":\"Test\",\n \"buttons\":[\n {\n \"type\":\"POSTBACK\",\n \"title\":\"title\",\n \"payload\":\"payload\"\n },\n {\n \"type\":\"URL\",\n \"title\":\"title\",\n \"url\":\"www.infobip.com\"\n }\n ]\n }\n }\n}", "language": "json" } ] } [/block]
									Node:
									(type) c
									(layer)3
										Element:footer
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Subscribe to our newsletter
												Node:
												(type) c
												(layer)4
													Element:noscript
												Node:
												(type) c
												(layer)4
													Element:noscript
