Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					SMS over URL parameters
					Send SMS by including all required parameters in the URL using HTTP GET request.
			Node:
			(type) c
			(layer)1
				Element:hr
					Owning custom made applications tailored for specific requirements of the single organization is an expensive privilege not many can afford. Using third party software solutions for your business needs is a more common case for most of the businesses today. Those **"generic" applications** are usually highly configurable in order to cover the widest range of use cases. No matter how clever the application is designed, it seems like there is always at least one crucial feature missing. If you happen to have one of those applications, you probably have options to configure different workflows and triggers. Very often the application also offers some integration options too. Due to it's generic nature, the application has to cover a variety of integration scenarios and also keep a certain level of simplicity to remain intuitive and usable. This trade-off between options and usability can result in a solution with **limited integration possibilities**. Integrating our [REST API method for sending SMS](/docs/fully-featured-binary-message) in such an application may be impossible since you have to configure the request type, headers and body model. This is something that is usually handled by developers and this type of application will not allow you to write custom code. In best case scenario it will provide you with a **single input** to enter URL of the service you want to trigger, and that's it. [block:api-header] { "type": "basic", "title": "Simple SMS with basic parameters" } [/block] With this single input problem in mind, we have designed a method which allows you to **send SMS in a single line** of the HTTP request: ``` https://api.infobip.com/sms/1/text/query?username=myUsername&password=myPassword&to=41793026727&text=Message text ``` This is all you need to send a message. You can even send this message through your web browser address bar, the same way you would type some address to open a web page. Now, this is something that you could put into your application without writing any code! Response will be identical to fully featured SMS response: [block:code] { "codes": [ { "code": "{\n \"bulkId\": \"1478260834465349757\",\n \"messages\": [\n {\n \"to\": \"41793026727\",\n \"status\": {\n \"groupId\": 1,\n \"groupName\": \"PENDING\",\n \"id\": 7,\n \"name\": \"PENDING_ENROUTE\",\n \"description\": \"Message sent to next instance\"\n },\n \"smsCount\": 1,\n \"messageId\": \"844acc75-e5c6-4a21-a7e3-444c412c385b\"\n }\n ]\n}", "language": "json" } ] } [/block] [block:callout] { "type": "info", "title": "XML response format", "body": "Default response format is JSON, however if you would like to receive XML as a response instead, you may specify the format **.xml** extension at the end of the method base URL, such as:\n\n`https://api.infobip.com/sms/1/text/query.xml`" } [/block] There is one more catch. You will probably need to replace hard-coded values like phone number and message text with placeholders unless you want to send the same message every time to the same recipient. Placeholder names will be provided by the application system you are using. What you need to understand is where to put those placeholders. Let's break down our example request in several lines so we could examine it closely: ``` https://api.infobip.com/sms/1/text/query? username=myUsername &password=myPassword &to=41793026727 &text=Message text ``` The first line is API endpoint and this never changes. The question mark at the end represents begging of the **query string parameters**. It's a system of **key / value pairs** separated by symbol `&`. It's quite clear now what the values are and which values you will need to replace by a value placeholder. ``` &to=%phoneNumber% &text=%message% ``` [block:callout] { "type": "warning", "title": "Value placeholders", "body": "Placeholder names and format will vary depending on your application. Refer to your application documentation for instructions." } [/block] Here is the final result: ``` https://api.infobip.com/sms/1/text/query?username=myUsername&password=myPassword&to=%phoneNumber%&text=%message% ``` Your application should now dynamically send different messages to different recipients by dynamically replacing placeholders with recipient phone number and message. [block:callout] { "type": "info", "title": "Key / value pairs", "body": "It's important to understand how to properly format the query string in order to make it work properly. Here is the rule that must be followed:\n\nhttps://api.infobip.com/sms/1/text/query `?` key `=` value `&` key `=` value `&` key `=` value\n\nSort order of key / value pairs is not important as long as it's well formatted. If your application supports placeholders, you should use it to replace values only!" } [/block] [block:api-header] { "type": "basic", "title": "Multiple recipients" } [/block] Sending messages to multiple recipients at once is also supported, as long as they all get the same message. URL is basically the same as simple SMS The only difference is in `to` key where you need to separate recipients by comma. ``` https://api.infobip.com/sms/1/text/query?username=myUsername&password=myPassword&to=41793026727,41793026834&text=Message text ``` Closer look: ``` &to=41793026727,41793026834 ``` [block:api-header] { "type": "basic", "title": "Fully featured SMS" } [/block] You can use this method to send an SMS with almost all features of our standard [fully featured SMS](/docs/fully-featured-textual-message) Optional key value pairs: ``` &from=InfoSMS &flash=true &transliteration=TURKISH &languageCode=TR &intermediateReport=true &notifyUrl=https//www.example.com &notifyContentType=application/json &callbackData=callbackData &validityPeriod=86400000 &track=SMS &processKey=A612ECB0F62799FDC12EC50D2A6F0472 &trackingType=Custom+field+test ``` Refer to our fully featured SMS documentation for an explanation of each parameter. [block:callout] { "type": "danger", "title": "Important!", "body": "Please use this method for sending messages only when you don't have the option to integrate via [fully featured SMS method](/docs/fully-featured-textual-message). \n\nPlease keep in mind:\n* This method does not support API key authorization. You are sending the username and password over the network which is less secure than using API key\n* Your application should support URL encoding of your requests. Messages that are not properly formatted may be delivered with incorrectly encoded text or not delivered at all." } [/block]
			Node:
			(type) c
			(layer)1
				Element:footer
			Node:
			(type) c
			(layer)1
												Node:
												(type) c
												(layer)4
													Element:h4
														Subscribe to our newsletter
												Node:
												(type) c
												(layer)4
													Element:noscript
												Node:
												(type) c
												(layer)4
													Element:noscript
