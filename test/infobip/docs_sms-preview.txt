Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					SMS preview
					This method allows you to preview your SMS messages before sending them. Discover the message length, number of message parts, language, and transliteration output.
			Node:
			(type) c
			(layer)1
				Element:hr
					Sending an SMS message seems simple enough until you get unexpected results which can be caused by various reasons. Just one unsupported character can significantly reduce the total number of available characters per message which can cause a message to be split into two or even more messages, significantly increase the cost of sending messages. Things get even trickier when messages must be sent in different languages and **language **and **transliteration **options are introduced. [block:callout] { "type": "info", "body": "To avoid unpleasant surprises, use this method to preview your messages before sending them.", "title": "Note" } [/block] Preview method can provide you with the following information: * `originalText` - original text that was supplied for preview * `textPreview` - preview of the text as it should appear on recipient's device * `messageCount` - number of messages required to deliver `textPreview` * `charactersRemaining` - number of remaining characters before `messageCount` increase * `configuration` - configuration setup that should be included in advanced SMS in order to deliver `textPreview` message [block:api-header] { "type": "post", "title": "Message count and remaining characters" } [/block] Use this method to see how many characters are left 'unspent' in the message and if the message fits in one or more messages. ##Request [block:code] { "codes": [ { "code": "POST /sms/1/preview HTTP/1.1\nHost: api.infobip.com\nAuthorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==\nContent-Type: application/json\n\n{\n \"text\": \"Let's see how many characters will remain unused in this message.\"\n}", "language": "json" } ] } [/block] ##Response [block:code] { "codes": [ { "code": "{\n \"originalText\": \"Let's see how many characters will remain unused in this message.\",\n \"previews\": [\n {\n \"textPreview\": \"Let's see how many characters will remain unused in this message.\",\n \"messageCount\": 1,\n \"charactersRemaining\": 95,\n \"configuration\": {}\n }\n ]\n}", "language": "json" } ] } [/block] The response contains the original text (sent text) and one preview which showcases a message received by the recipient without any configuration. In this case, the text will fit in one message and there will be 95 characters to spare. No special configuration is needed if your goal is to deliver the message as seen in `textPreview`. You can use 'simple' or 'advanced' 'send SMS' methods to send this message. [block:api-header] { "type": "post", "title": "Message language" } [/block] By introducing language code we can preview a message displayed using selected alphabet. In this example we will request a message preview for Turkish language by introducing the `languageCode` parameter. [block:callout] { "type": "info", "title": "Info", "body": "Sending messages in a specific language is supported in advanced SMS method. Find more information about supported languages and language codes: [SMS language](/docs/language)" } [/block] ##Request [block:code] { "codes": [ { "code": "POST /sms/1/preview HTTP/1.1\nHost: api.infobip.com\nAuthorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==\nContent-Type: application/json\n\n{\n \"text\": \"Mesaj gönderimi yapmadan önce önizleme seçeneğini kullanmanız doğru karar vermenize yardımcı olur.\",\n \"languageCode\": \"TR\"\n}", "language": "json" } ] } [/block] ##Response [block:code] { "codes": [ { "code": "{\n \"originalText\": \"Mesaj gönderimi yapmadan önce önizleme seçeneğini kullanmanız doğru karar vermenize yardımcı olur.\",\n \"previews\": [\n {\n \"textPreview\": \"Mesaj gönderimi yapmadan önce önizleme seçeneğini kullanmanız doğru karar vermenize yardımcı olur.\",\n \"messageCount\": 2,\n \"charactersRemaining\": 36,\n \"configuration\": {}\n },\n {\n \"textPreview\": \"Mesaj gönderimi yapmadan önce önizleme seçeneğini kullanmanız doğru karar vermenize yardımcı olur.\",\n \"messageCount\": 1,\n \"charactersRemaining\": 57,\n \"configuration\": {\n \"language\": {\n \"languageCode\": \"TR\"\n }\n }\n }\n ]\n}", "language": "json" } ] } [/block] Response model is formatted like this: * **Original text** - text entered as parameter when method was called * **Preview 1** - scenario in which no configuration is applied * **Preview 2** - scenario with desired language configuration applied [block:callout] { "type": "info", "body": "Both previews are returned in the same response, side by side, so you could easily compare your sending options and choose the best solution for that particular message.", "title": "Compare your previews!" } [/block] First preview shows what would happen if the message will be sent with no configuration whatsoever. Characters would be interpreted as Unicode which would use up 2 message parts and bring remaining number of remaining characters to 36. Other than that, the message will look the same. In this case you would want to use `languageCode` to instruct the system to use correct alphabet and by doing so bring message count to 1. This is where second preview of this example comes in handy. It shows you **exactly what configuration settings to use** when sending [advanced message](/docs/language). ``` "language": { "languageCode": "TR" } ``` Note that by configuring the `languageCode` option, `charactersRemaining` expands significantly. This gives you the ability to send a much longer message. [block:api-header] { "type": "basic", "title": "Transliteration" } [/block] If message language is not supported by National Language Identifier (NLI), transliteration is another option to send messages. Since transliteration is a technique that replaces original special characters, having an output message preview makes a lot of sense. [block:callout] { "type": "info", "title": "Info", "body": "Learn how to send messages with transliteration: [SMS transliteration](/docs/transliteration)" } [/block] Let's examine an example with the message in Greek with `transliteration` option ##Request [block:code] { "codes": [ { "code": "POST /sms/1/preview HTTP/1.1\nHost: api.infobip.com\nAuthorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==\nContent-Type: application/json\n\n{\n \"text\": \"Ως Μεγαρικό ψήφισμα είναι γνωστή η απόφαση της Εκκλησίας του δήμου των Αθηναίων (πιθανόν γύρω στο 433/2 π.Χ.) να επιβάλει αυστηρό και καθολικό εμπάργκο στα\",\n \"transliteration\": \"GREEK\"\n}", "language": "json" } ] } [/block] ##Response [block:code] { "codes": [ { "code": "{\n \"originalText\": \"Ως Μεγαρικό ψήφισμα είναι γνωστή η απόφαση της Εκκλησίας του δήμου των Αθηναίων (πιθανόν γύρω στο 433/2 π.Χ.) να επιβάλει αυστηρό και καθολικό εμπάργκο στα\",\n \"previews\": [\n {\n \"textPreview\": \"Ως Μεγαρικό ψήφισμα είναι γνωστή η απόφαση της Εκκλησίας του δήμου των Αθηναίων (πιθανόν γύρω στο 433/2 π.Χ.) να επιβάλει αυστηρό και καθολικό εμπάργκο στα\",\n \"messageCount\": 3,\n \"charactersRemaining\": 46,\n \"configuration\": {}\n },\n {\n \"textPreview\": \"ΩΣ MEΓAPIKO ΨHΦIΣMA EINAI ΓNΩΣTH H AΠOΦAΣH THΣ EKKΛHΣIAΣ TOY ΔHMOY TΩN AΘHNAIΩN (ΠIΘANON ΓYPΩ ΣTO 433/2 Π.X.) NA EΠIBAΛEI AYΣTHPO KAI KAΘOΛIKO EMΠAPΓKO ΣTA\",\n \"messageCount\": 1,\n \"charactersRemaining\": 5,\n \"configuration\": {\n \"transliteration\": \"GREEK\"\n }\n }\n ]\n}", "language": "json" } ] } [/block] Response model is formatted like this: * **Original text** - text entered as parameter when method was called * **Preview 1** - scenario in which no configuration is applied * **Preview 2** - scenario with desired transliteration configuration applied This is a great example where you can examine how unsupported characters were replaced with similar charters included in default alphabet. The difference is more obvious when you compare `messageCount`. Default message would cost 3 messages per recipient, while transliteration will bring message count to 1 with 5 characters to spare. [block:api-header] { "type": "basic", "title": "Sending language and transliteration messages" } [/block] Each preview object shows `configuration` you should use when composing API request to send a message if you want to get the result as seen in `textPreview` In transliteration example configuration can look like this ``` "transliteration": "GREEK" ``` and you can use it like it's shown in [this example](/docs/transliteration). For NLI, suggested configuration might be ``` "language": { "languageCode": "TR" } ``` in this case you will use it like it's shown in [this example](/docs/language). [block:callout] { "type": "warning", "title": "Warning!", "body": "Even though preview engine relies on the same business logic as sending actual messages, we cannot 100% guarantee that the message received by the recipient will look exactly like the message in the preview, since some networks may not support the language feature or handle it differently." } [/block]
			Node:
			(type) c
			(layer)1
				Element:footer
			Node:
			(type) c
			(layer)1
												Node:
												(type) c
												(layer)4
													Element:h4
														Subscribe to our newsletter
												Node:
												(type) c
												(layer)4
													Element:noscript
												Node:
												(type) c
												(layer)4
													Element:noscript
