Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					Parameters
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
							Element:a
								Parameters list
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Basic parameters
									Node:
									(type) c
									(layer)3
										Element:table
										Element:thead
										Element:tr
										Element:th
											Id
										Element:th
											Description
										Element:tbody
										Element:tr
										Element:td
										Element:code
											name
										Element:td
										Element:strong
											String
											-
										Element:em
											Required
											Unique name of the campaign. You can use the letters a-z, A-Z, the numbers 0-9, underscores and hyphens.
										Element:em
											E.g.
										Element:code
											{"name":"Reengagement campaign"}
										Element:tr
										Element:td
										Element:code
											live
										Element:td
										Element:strong
											Boolean
											-
										Element:em
											Required
											Value that sets the campaign to live. A false value will save the campaign as a draft but not activate it
										Element:em
											E.g.
										Element:code
											{"live":true}
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Message options
									Node:
									(type) c
									(layer)3
										Element:table
										Element:thead
										Element:tr
										Element:th
											Id
										Element:th
											Description
										Element:tbody
										Element:tr
										Element:td
										Element:code
											priority
										Element:td
										Element:strong
											String
											-
										Element:em
											Optional
											Defines the priority of your message on iOS
										Element:i
											(APNS)
											and Android
										Element:i
											(GCM)
											.
										Element:br
											Default value on iOS and Android is high.
										Element:br
											Acceptable values include:
										Element:code
											normal
											or
										Element:code
											high
											.
										Element:br
											On Android, use the high priority if you have a messaging/voip app and if you notice delivery issues due to native
										Element:i
											(Doze)
											or constructor related
										Element:i
											(Samsung Smart Manager, etc)
											energy saving features. High priority Android notifications can drain your user's battery faster since they 'wake up' the device and open a network connection. Switch to Normal priority if your notifications are not time-sentitive.
										Element:em
											E.g.
										Element:code
											{"priority":"normal"}
										Element:tr
										Element:td
										Element:code
											gcm_collapse_key
										Element:td
										Element:strong
											Object
											-
										Element:em
											Optional - Android only
											Defines how notifications are managed when an offline device goes online
										Element:i
											(enabled by default)
											.
										Element:br
											If enabled, the device will only show the most recent notification. If disabled, it will show all the notifications received when the device was offline. You should disable the collapse key if all your notifications matter
										Element:i
											(E.g. messages, etc)
											. You can use up to 3 different collapse keys if you want users to get only one notification of each kind when coming online
										Element:i
											(E.g. marketing messages, alert, etc)
											.
										Element:em
											E.g.
										Element:code
											{"enabled":true,"key":"default"}
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Timing and delivery
									Node:
									(type) c
									(layer)3
										Element:p
											There are two timezone parameters to choose from:
										Element:code
											local_push_time
											and
										Element:code
											push_time
											. One of the two timezone parameters must be included.
									Node:
									(type) c
									(layer)3
										Element:table
										Element:thead
										Element:tr
										Element:th
											Id
										Element:th
											Description
										Element:tbody
										Element:tr
										Element:td
										Element:code
											push_time
										Element:td
										Element:strong
											String
											-
										Element:em
											Required - Conflicts with
											Time that Batch servers will start sending push notifications GMT (UTC+0000). Format is
										Element:code
											local_push_time
										Element:code
											yyyy-MM-ddTHH:mm:ss
											or
										Element:code
											now
											to activate and send the campaign immediately.
										Element:em
											E.g.
										Element:code
											{"push_time":"2015-12-01T14:25:00"}
										Element:tr
										Element:td
										Element:code
											local_push_time
										Element:td
										Element:strong
											String
											-
										Element:em
											Required - Conflicts with
											A value that defines the campaign send time in terms of the user's device. Batch servers will send push notifications at the selected time for each time zone. The campaign will take 24 hours to complete if users exist in all time zones
										Element:code
											push_time
										Element:em
											(only for the Live API key).
										Element:br
											Format is
										Element:code
											yyyy-MM-ddTHH:mm:ss
										Element:em
											E.g.
										Element:code
											{"local_push_time":"2015-12-01T14:25:00"}
										Element:tr
										Element:td
										Element:code
											recurrence
										Element:td
										Element:strong
											Object
											-
										Element:em
											Optional
											An object containing parameters to define the recurrency of the campaign.
										Element:tr
										Element:td
										Element:code
											end_date
										Element:td
										Element:strong
											String
											- Time that the recurring campaign will stop sending. Format is
										Element:code
											yyyy-MM-ddTHH:mm:ss
											. Optional
										Element:em
											E.g.
										Element:code
											{"end_date":"2015-12-03T14:25:00"}
										Element:tr
										Element:td
										Element:code
											repeat_unit
										Element:td
										Element:strong
											Integer
											- Sets the unit of how often the campaign will recur. Acceptable values include:
										Element:code
											DAILY
											,
										Element:code
											WEEKLY
											, and
										Element:code
											MONTHLY
											.
										Element:em
											E.g.
										Element:code
											{"repeat_unit":"WEEKLY"}
										Element:tr
										Element:td
										Element:code
											repeat_frequency
										Element:td
										Element:strong
											Integer
											- Sets the frequency of campaign repetition. Uses the above
										Element:code
											repeat_unit
											parameter to determine units.
										Element:em
											E.g.
										Element:code
											{"repeat_frequency":2}
										Element:tr
										Element:td
										Element:code
											capping
										Element:td
										Element:strong
											Integer
											-
										Element:em
											Optional
											The maximum number of time a given user can receive the campaign
										Element:em
											E.g.
										Element:code
											{"capping":1}
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											User targeting
									Node:
									(type) c
									(layer)3
										Element:table
										Element:thead
										Element:tr
										Element:th
											Id
										Element:th
											Description
										Element:tbody
										Element:tr
										Element:td
										Element:code
											targeting
										Element:td
										Element:strong
											Object
											-
										Element:em
											Optional
											An object containing the targeting property of the campaign. If omitted, all users will be targeted.
										Element:tr
										Element:td
										Element:code
											languages
										Element:td
										Element:strong
											Array of Strings
											- An array containing all device languages to be targeted. All language codes in this array must be contained in the messages object. See here for all valid language codes.
										Element:em
											E.g.
										Element:code
											{"languages":["it","fr"]}
										Element:tr
										Element:td
										Element:code
											regions
										Element:td
										Element:strong
											Array of Strings
											- An array containing all the geographical regions codes to be targeted. See here for all valid region codes.
										Element:em
											E.g.
										Element:code
											{"regions":["FR","US"]}
										Element:tr
										Element:td
										Element:code
											segments
										Element:td
										Element:strong
											Array of Strings
											- An array containing the smart segments to be targeted. Acceptable values include:
										Element:code
											NEW
											,
										Element:code
											ONE_TIME
											,
										Element:code
											ENGAGED
											,
										Element:code
											DORMANT
											and
										Element:code
											IMPORTED
											. If you ommit this field or pass [], all users, included imported ones, will be targeted.
										Element:em
											E.g.
										Element:code
											{"segments":["ENGAGED","NEW"]}
										Element:tr
										Element:td
										Element:code
											query
										Element:td
										Element:strong
											Object
											- A mongo inspired query object containing filters & operators, based on native attributes
										Element:i
											(app version, OS version, etc)
											and custom users data
										Element:i
											(attributes, tags & events defined by you in the SDK)
											.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Message editions
									Node:
									(type) c
									(layer)3
										Element:table
										Element:thead
										Element:tr
										Element:th
											Id
										Element:th
											Description
										Element:tbody
										Element:tr
										Element:td
										Element:code
											messages
										Element:td
										Element:strong
											Array of Objects
											-
										Element:em
											Required
											An object containing the messages to be delivered for each device language targeted in the targeting object. The title and body of your notification can contain emojis.
										Element:em
											E.g.
										Element:code
											[{"language":"en","body":"Today's challenge starts in 5 minutes!"},{"language":"fr","body":"Le d\u00e9fi du jour commence dans 5 minutes !"}]
										Element:tr
										Element:td
										Element:code
											language
										Element:td
										Element:strong
											String
											- Language of this message.
										Element:i
											Required
										Element:em
											E.g.
										Element:code
											{"language":"en"}
										Element:tr
										Element:td
										Element:code
											title
										Element:td
										Element:strong
											String
											-
										Element:i
											Optional
											. Title of the push notification. On
										Element:b
											iOS
											, the title will only appear on the Apple Watch or in the notification center
										Element:i
											(since iOS 8)
											.
										Element:em
											E.g.
										Element:code
											{"title":"Don't give up!"}
										Element:tr
										Element:td
										Element:code
											body
										Element:td
										Element:strong
											String
											-
										Element:i
											Required
											. Body text of the push notification.
										Element:em
											E.g.
										Element:code
											{"body":"Just keep training, you'll get better."}
										Element:tr
										Element:td
										Element:code
											media
										Element:td
										Element:strong
											Object
											-
										Element:em
											Optional
											An object containing an icon, a picture, an audio or a video file's URL.
										Element:em
											E.g.
										Element:code
											{"media":{"icon":"http://mydomain.com/icon.png","picture":"http://mydomain.com/pic.png"}}
										Element:tr
										Element:td
										Element:code
											icon
										Element:td
										Element:strong
											String
											-
										Element:strong
											Android
											- URL of the icon file. The file must be a PNG or JPG image, with a minimum width of 192px.
										Element:tr
										Element:td
										Element:code
											picture
										Element:td
										Element:strong
											String
											-
										Element:strong
											iOS 10+ / Android
											- URL of the picture file. The file must be a PNG or JPG image with a width of 1250px and a ratio of 2:1.
										Element:br
										Element:strong
											Note:
											On iOS, make sure your server complies to
										Element:a
											App Transport Security
											or that you’ve added the appropriate exceptions in your app and app extension. Here is how a push with an image attachement looks:
										Element:a
											Example
											.
										Element:tr
										Element:td
										Element:code
											audio
										Element:td
										Element:strong
											String
											-
										Element:strong
											iOS 10+
											- URL of the audio file. The file must be a MP3 file hosted on an HTTPS server that responds to HEAD requests. It must not be larger than 10MB. Here is how a push with an audio attachement looks:
										Element:a
											Example
											.
										Element:tr
										Element:td
										Element:code
											video
										Element:td
										Element:strong
											String
											-
										Element:strong
											iOS 10+
											- URL of the video file. The file must be a MPEG-4 file hosted on an HTTPS server that responds to HEAD requests. It must not be larger than 30MB. Here is how a push with a video attachement looks:
										Element:a
											Example
											.
										Element:tr
										Element:td
										Element:code
											deeplink
										Element:td
										Element:strong
											String
											-
										Element:em
											Optional
											A URL that points to a specific part of your app (i.e. The news you mention in your notification, etc). The deeplink URL is usually be a link based on a URL scheme that you specify within your app, but can be a relative one if you decide to read it manually. If you decide to use an external URL in your campaign, Batch won't show the open rate.
										Element:tr
										Element:td
										Element:code
											custom_payload
										Element:td
										Element:strong
											String - must be valid JSON
											-
										Element:em
											Optional
											A JSON string containing additional parameters that your application can handle when receiving push notifications if configured to do so. The only forbidden key is
										Element:code
											com.batch
											. Format is:
										Element:code
											{"x":"y"}
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Landing message
									Node:
									(type) c
									(layer)3
										Element:p
											You have the ability to add a landing message to your push campaign. This will display a landing view using the theme and content of your choosing, allowing you to have complex interactions following a push notification.
									Node:
									(type) c
									(layer)3
										Element:p
											The landing message is defined under the
										Element:code
											landing
											key at the root of the payload and the following fields are allowed.
									Node:
									(type) c
									(layer)3
										Element:table
										Element:thead
										Element:tr
										Element:th
											Id
										Element:th
											Description
										Element:tbody
										Element:tr
										Element:td
										Element:code
											theme
										Element:td
										Element:strong
											String
											-
										Element:em
											Required
											The code of the theme to use for your landing view
										Element:em
											E.g.
										Element:code
											{"theme":"dark_base_theme"}
										Element:tr
										Element:td
										Element:code
											image
										Element:td
										Element:strong
											String
											-
										Element:em
											Optional
											The url of the image to use if the theme contains one
										Element:em
											E.g.
										Element:code
											{"image":"https://d1v3v59tzaau1a.cloudfront.net/medias/img/landing-samples/fly.15569dd6.jpg"}
										Element:tr
										Element:td
										Element:code
											tracking_id
										Element:td
										Element:strong
											String
											-
										Element:em
											Optional
											A tracking ID that you will receive in your application if set
										Element:em
											E.g.
										Element:code
											{"tracking_id":"OPEA20161005"}
										Element:tr
										Element:td
										Element:code
											contents
										Element:td
										Element:strong
											Array of Objects
											-
										Element:em
											Required
											The contents of the landing message
										Element:tr
										Element:td
										Element:code
											language
										Element:td
										Element:strong
											String
											- The language of the message
										Element:em
											E.g.
										Element:code
											{"language":"en"}
										Element:tr
										Element:td
										Element:code
											header
										Element:td
										Element:strong
											String
											- The text of the header
										Element:em
											E.g.
										Element:code
											{"header":"News"}
										Element:tr
										Element:td
										Element:code
											title
										Element:td
										Element:strong
											String
											- The text of the title
										Element:em
											E.g.
										Element:code
											{"title":"Update to the latest version!"}
										Element:tr
										Element:td
										Element:code
											body
										Element:td
										Element:strong
											String
											- The text of the body
										Element:em
											E.g.
										Element:code
											{"body":"Lots of bug and security fixes"}
										Element:tr
										Element:td
										Element:code
											image_description
										Element:td
										Element:strong
											String
											- The description of the image used for accessibility purposes
										Element:em
											E.g.
										Element:code
											{"image_description":"Boeing 747"}
										Element:tr
										Element:td
										Element:code
											actions
										Element:td
										Element:strong
											Array of objects
											- A list of actions available in the landing message. The action object will be described further below
									Node:
									(type) c
									(layer)3
										Element:blockquote
										Element:p
										Element:strong
											Note
										Element:br
											If your theme contains the close button, the
										Element:code
											actions
											array is not strictly required.
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														The action object
												Node:
												(type) c
												(layer)4
													Element:p
														Each action in the landing message must be defined as follows.
												Node:
												(type) c
												(layer)4
													Element:table
													Element:thead
													Element:tr
													Element:th
														Id
													Element:th
														Description
													Element:tbody
													Element:tr
													Element:td
													Element:code
														action
													Element:td
													Element:strong
														String
														-
													Element:em
														Required
														The action name. Must match with the actions you register in your mobile application. Not strictly required, if null the close action will be used
													Element:em
														E.g.
													Element:code
														{"action":"show_article"}
													Element:tr
													Element:td
													Element:code
														label
													Element:td
													Element:strong
														String
														-
													Element:em
														Required
														The label of the call to action
													Element:em
														E.g.
													Element:code
														{"label":"Show"}
													Element:tr
													Element:td
													Element:code
														args
													Element:td
													Element:strong
														Object
														-
													Element:em
														Optional
														An object containing arbitrary data that will be passed to your action as is
													Element:em
														E.g.
													Element:code
														{"args":{"id":4,"category":"sports"}}
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
							Element:a
								The query object
						Node:
						(type) c
						(layer)2
							Element:p
								For advanced usage, you can pass a query object to the targeting. This is a homemade syntax, inspired by MongoDB. This feature is available to
							Element:strong
								Pro
								and
							Element:strong
								Enterprise
								users for
							Element:strong
								native
								and
							Element:strong
								custom
								attributes.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Native attributes
									Node:
									(type) c
									(layer)3
										Element:p
											Native attributes allow you to target users based on their OS and app version, their device type or the number of days since they installed your app.
									Node:
									(type) c
									(layer)3
										Element:p
											Native attributes must be added in
										Element:code
											query
											, as a
										Element:code
											targeting
											property.
									Node:
									(type) c
									(layer)3
										Element:table
										Element:thead
										Element:tr
										Element:th
											Id
										Element:th
											Description
										Element:tbody
										Element:tr
										Element:td
										Element:code
											b.os_version
										Element:td
										Element:strong
											String
											-
										Element:em
											The Android or iOS version.The expected format is X.Y.Z. The OS version cannot contain any letter.
										Element:em
											E.g.
										Element:code
											{"b.os_version":"5.1.1"}
										Element:tr
										Element:td
										Element:code
											b.app_version
										Element:td
										Element:strong
											String
											-
										Element:em
											Your app version. The expected format is X.Y.Z.
										Element:em
											E.g.
										Element:code
											{"b.app_version":"2.A.3"}
										Element:tr
										Element:td
										Element:code
											b.device_type
										Element:td
										Element:strong
											String
											-
										Element:em
											The device type / model. The full list of
										Element:b
											Apple
											model names is
										Element:a
											available here
											and a list of all the
										Element:b
											Android
											devices supported by the PlayStore is
										Element:a
											available here
											. Make sure you choose a value in the
										Element:code
											model
											column.
										Element:em
											E.g.
										Element:code
											{"b.device_type":"iPhone8,1"}
										Element:tr
										Element:td
										Element:code
											b.carrier_code
										Element:td
										Element:strong
											Integer
											-
										Element:em
											Your user's carrier. The code provided by Batch is a combination of the
										Element:i
											Mobile country code (MCC)
											and the
										Element:i
											Mobile network code (MNC)
											. The full list of MCC and MNC codes is
										Element:a
											available here
											.
										Element:em
											E.g.
										Element:code
											{"b.carrier_code":20815}
										Element:tr
										Element:td
										Element:code
											age(b.install_date)
										Element:td
										Element:strong
											Integer
											-
										Element:em
											Number of days elapsed since the install
										Element:i
											(install: the first time Batch SDK sees the user)
											. The days are counted in sections of 24 hours from the hour of install.
										Element:em
											E.g.
										Element:code
											{"age(b.install_date)":1}
										Element:tr
										Element:td
										Element:code
											age(b.last_visit_date)
										Element:td
										Element:strong
											Integer
											-
										Element:em
											Number of days elapsed since your users' last session. The days are counted in sections of 24 hours from the last session.
										Element:em
											E.g.
										Element:code
											{"age(b.install_date)":1}
									Node:
									(type) c
									(layer)3
										Element:blockquote
										Element:p
										Element:strong
											RECOMMENDED
										Element:br
											- Users coming from an older version of your app and upgrading to a version with Batch's SDK
										Element:em
											(after a first release or a token import)
											are considered as new installs.
										Element:br
											- If you are planning to use this attribute to send 1-3-7 days post-install notifications, we recommend that you wait at least 7 days to make sure you only target your new users.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Custom user data
									Node:
									(type) c
									(layer)3
										Element:p
											You can send custom user data from your app using the API, as explained by the SDK documentation (
										Element:a
											iOS
											/
										Element:a
											Android
											). We offer 3 kinds of data:
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:strong
											Custom attributes
											are prefixed with
										Element:code
											c.
											, and are simple key/value data. They can have 4 types:
										Element:ul
										Element:li
											String
										Element:li
											Number / Decimal
										Element:li
											Boolean
										Element:li
											Date
										Element:li
										Element:strong
											Tags collections
											are prefixed with
										Element:code
											t.
											, and are sets of tags.
										Element:li
										Element:strong
											Events
											are prefixed with
										Element:code
											e.
											and have a key, an occurence date, an optional label, and an optional data object.
									Node:
									(type) c
									(layer)3
										Element:blockquote
										Element:p
										Element:strong
											Recommended
										Element:br
											Take a look at
										Element:a
											this guide
											to know more on custom data and learn how to tag your app.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Operators
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:code
											$eq
											Equal to. This is the default and thus can be ommited.
										Element:li
										Element:code
											$lt
											Lower than <
										Element:li
										Element:code
											$lte
											Lower or equal than <=
										Element:li
										Element:code
											$gt
											Greater than >
										Element:li
										Element:code
											$gte
											Greater or equal than >
										Element:li
										Element:code
											$contains
											Checks if the tag collection has one of the requested tag
										Element:li
										Element:code
											$containsAll
											Checks if the tag collection has all of the requested tag
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Basic examples
												Node:
												(type) c
												(layer)4
													Element:p
														Send a push to all users who live in Paris :
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														{ "targeting": { "query": { "c.city": { "$eq": "Paris" } } } }
												Node:
												(type) c
												(layer)4
													Element:p
														As explained above, $eq is the default so we can ommit it:
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														{ "targeting": { "query": { "c.city": "Paris" } } }
												Node:
												(type) c
												(layer)4
													Element:p
														All users with app version 1.0.1
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														{ "targeting": { "query": { "b.app_version": { "$gte": "1.0.1" } } } }
												Node:
												(type) c
												(layer)4
													Element:p
														Users who installed your app 1 day ago and use an iPhone 6.
												Node:
												(type) c
												(layer)4
													Element:pre
													Element:code
														{ "targeting": { "query": { "$and": [ { "age(b.install_date)": 1 }, { "b.device_type": { "$gt": "iPhone7,2" } } ] } } }
												Node:
												(type) c
												(layer)4
													Element:p
														When you need multiple conditions, the first level of your query needs to be an
													Element:code
														$and
														, with an array of conditions.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Functions and advanced example
									Node:
									(type) c
									(layer)3
										Element:p
											Date attribute needs a function to be queried; that's why we showed you
										Element:code
											age(b.install_date)
											before.
									Node:
									(type) c
									(layer)3
										Element:p
											We plan to introduce more functions to our API to enable events querying in the upcoming weeks.
									Node:
									(type) c
									(layer)3
										Element:p
											From now on, we will only show the query. Just remember it goes in
										Element:code
											targeting.query
											.
									Node:
									(type) c
									(layer)3
										Element:p
										Element:em
											Users intersted by Rugby or Football, who installed in the last 10 days, and subscribed to your paid offer.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											{ "$and": [ { "t.interest": { "$contains": [ "Rugby", "Football" ] } }, { "age(b.install_date)": { "$lte": 10 } }, { "c.paidSubscriber": true } ] }
									Node:
									(type) c
									(layer)3
										Element:p
										Element:em
											Users who installed your app since at least 10 days, living in Paris, at least Android 5.0, using the version 3.1.1 of your app, and subscribed to both France & Sport push notifications
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											{ "$and": [ { "age(b.install_date)": { "$gte": 10 } }, { "c.city": "Paris" }, { "b.os_version": { "$gte": "5.0" } }, { "b.app_version": "3.1.1" }, { "t.push_optin": { "$containsAll": [ "France", "Sport" ] } } ] }
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
							Element:a
								A/B Testing
						Node:
						(type) c
						(layer)2
							Element:p
								A/B tested marketing campaigns work a little bit differently than standard ones.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Messages
									Node:
									(type) c
									(layer)3
										Element:p
											You will need to change what you put in the
										Element:code
											messages
											key. It should become
										Element:strong
											an object
											, rather than an array.
									Node:
									(type) c
									(layer)3
										Element:p
											In that object, you need to have have two keys:
										Element:strong
											"a"
											and
										Element:strong
											"b"
											. You've guessed it, these are your A and B messages. Their content works exactly like
										Element:code
											messages
											does for standard campaigns: they're an array of messages objects, with all of your translations.
									Node:
									(type) c
									(layer)3
										Element:p
											Here's a quick example of a A/B tested campaign, implying you still have all the other keys:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											{ "messages": { "a": [ { "language": "en", "title": "Hello!", "body": "How is it going?" }, { "language": "fr", "title": "Salut!", "body": "Ça va?" } ], "b": [ { "language": "en", "title": "Hey!", "body": "How are you?" }, { "language": "fr", "title": "Coucou!", "body": "Tu vas bien?" } ] } }
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:a
											Landing messages
									Node:
									(type) c
									(layer)3
										Element:p
											Same as standard messages, you can A/B test your landing messages. To do that, you simply need to define two keys
										Element:code
											a
											and
										Element:code
											b
											under the
										Element:code
											landing
											key. Each key must contain a valid landing message object, as described above.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											{ "landing": { "a": { "theme": "dark-theme", "tracking_id": "article_1054", "contents": [ { "language": "en", "header": "Latest news", "title": "Elon Musk announces the ITS", "body": "Elon Musk unveiled the biggest rocket ever designed for its Mars spaceship", "actions": [ { "label": "Show", "action": "show_article", "args": { "id": "1054", "category": "high_tech" } } ] } ] }, "b": { "theme": "light-theme", "tracking_id": "article_1054", "contents": [ { "language": "en", "header": "Latest news", "title": "SpaceX's ITS announcement by Elon Musk", "body": "Elon Musk unveiled the biggest rocket ever designed for its Mars spaceship", "actions": [ { "label": "Show", "action": "show_article", "args": { "id": "1054", "category": "high_tech" } } ] } ] } } }
									Node:
									(type) c
									(layer)3
										Element:blockquote
										Element:p
										Element:strong
											Note
										Element:br
											Custom Payloads are not A/B testable. Also, A/B Testing is only available starting from the
										Element:em
											Pro
											plan.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
							Element:a
								CURL example
						Node:
						(type) c
						(layer)2
							Element:p
								Here is an example of a valid CURL CLI request syntax:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								curl -H "Content-Type: application/json" -H "X-Authorization: BATCH-PUSH-API-TOKEN" -X POST -d "@payload.json" "https://api.batch.com/API_VERSION_NUMBER/BATCH_API_KEY/campaigns/create"
						Node:
						(type) c
						(layer)2
							Element:p
								where
							Element:code
								payload.json
								:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								{ "name": "Test Campaign", "local_push_time": "2015-06-01T14:00:00", "live": true, "targeting": { "languages": [ "it" ], "regions": [ "FR", "US" ], "segments": [ "ONE_TIME", "ENGAGED", "NEW" ], "query": { "age(b.install_date)": 1 } }, "messages": [ { "language": "en", "title": "Hello!", "body": "How is it going?" }, { "language": "fr", "title": "Salut!", "body": "Ça va?" } ], "recurrence": { "end_date": "2015-06-30T00:00:00", "repeat_unit": "DAILY", "repeat_frequency": 1 }, "capping": 1, "images": { "icon": "https://batch-doc.s3.amazonaws.com/logo_batch_192.png" }, "custom_payload": "{\"tag\":\"wake up push\", \"landing_screen\":\"greeting\"}" }
						Node:
						(type) c
						(layer)2
							Element:p
								The above example will start a recurring campaign on
							Element:em
								June 1, 2015 at 14:00 (2PM)
								, sending to users based on their device time.
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:p
								It is set as
							Element:code
								"live": true
								so will begin at the designated time, versus resting as a draft requiring further action before sending.
							Element:li
							Element:p
								The optional
							Element:code
								targeting
								object has been included to specify the device language, region, and targeted segments. If this object were not included, all users would be targeted. In this case, we used the native attribute
							Element:code
								age(b.install_date)
								to target users who installed the app one day ago.
							Element:li
							Element:p
								Within the
							Element:code
								messages
								object each targeted language has been given a message. It's worth noting two things here:
							Element:ul
							Element:li
							Element:code
								title
								is optional but recommended.
							Element:li
								You must have a message object for the default language of your app, as set within the Batch dashboard.
							Element:p
							Element:li
							Element:p
								This campaign uses the
							Element:code
								recurrence
								optional object to have the campaign repeat
							Element:em
								every day
								at the originally defined time of
							Element:em
								14:00
								until
							Element:em
								June 6, 2015
								at
							Element:em
								00:00
								.
							Element:li
							Element:p
								The
							Element:code
								custom_payload
								here implies that the app being pushed to can handle a dictionary string of
							Element:em
								"tag"
								with a value of
							Element:em
								"wake up push"
								and
							Element:em
								"landing_screen"
								with
							Element:em
								"greeting"
								. These are not required but can be added if desired.
