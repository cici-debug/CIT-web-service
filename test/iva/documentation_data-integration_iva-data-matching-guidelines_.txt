Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
				Element:span
					IVA Data Matching Guidelines
			Node:
			(type) c
			(layer)1
												Node:
												(type) c
												(layer)4
													Element:aside
													Element:h4
														Search Documentation
													Element:label
														Search for:
													Element:h4
														Documentation Menu
												Node:
												(type) c
												(layer)4
						Node:
						(type) c
						(layer)2
							Element:h2
								IVA Matching Overview
						Node:
						(type) c
						(layer)2
							Element:p
								Data matching is a difficult process, and IVA has spent a long time developing and evolving our matching procedure. If you do decide to implement your own matching solution instead of allowing us to handle the hard work, provided below is IVA’s matching procedure outlined by media vertical. Using this procedure along with our matching guidelines and normalization rules listed above, will help to guarantee accurate and consistent data matching between IVA and our data partners.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Movies
									Node:
									(type) c
									(layer)3
										Element:p
											Step 1. Normalize our third party title using the normalization rules outlined above. Second, we search the IVA’s catalogue of normalized title’s for title’s that match to our third party title.
									Node:
									(type) c
									(layer)3
										Element:p
											Step 2. For each of our potential IVA matches from Step 1, Validate the release year for both IVA title and the third party release year are within a year apart. For example, if IVA’s release year is 2011 and the third party release year is 2013, we would immediately skip this title. A simple algorithm for this, with M1 as IVA year and M2 as third party release year,
									Node:
									(type) c
									(layer)3
										Element:p
											if ( Math.abs(M1 – M2) <=1 ) #Subtract both values and take the absolute value of the result. If the result is less than or equal to 1, proceed to Step 3.
										Element:br
											Step 3. Next, we validate the performer’s and director’s for the IVA title’s that passed Step 2. For each of our matches from Step 2, use our normalization rule’s outlined above for the cast and director of both IVA title’s and third party data. An IVA title will pass this step if at least one performer OR director matches against the third party cast / director data.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											TV Series
									Node:
									(type) c
									(layer)3
										Element:p
											Special Note: TV Matching follows a hierarchial order. We ALWAYS start with the series, then match Seasons, and finally match episodes.
									Node:
									(type) c
									(layer)3
										Element:p
											Step 1.Follow Step 1 under Movies. Note: Specifically use the Series Title.
									Node:
									(type) c
									(layer)3
										Element:p
											Step 2.Follow Step 2 under Movies. Note: Specifially use the Series release year.
									Node:
									(type) c
									(layer)3
										Element:p
											Step 3.Any title’s left from Step 2 is considered a match.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											TV season
									Node:
									(type) c
									(layer)3
										Element:p
											(Season Sequence number is required for Season matching.)
									Node:
									(type) c
									(layer)3
										Element:p
											Step 1.Using our series match from TV Series Step 3, grab all IVA seasons under the IVA series record.
									Node:
									(type) c
									(layer)3
										Element:p
											Step 2.For each season from Step 1, look for the IVA season with the same season sequence number as our third party season sequence number.
									Node:
									(type) c
									(layer)3
										Element:p
											Step 3.The IVA season with the same season sequence number is our season match.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											TV Episode
									Node:
									(type) c
									(layer)3
										Element:p
											(Episode Sequence number is required for Episode matching.)
									Node:
									(type) c
									(layer)3
										Element:p
											Step 1.Using our season match from TV Season Step 3, grab all IVA episodes under the IVA season record.
									Node:
									(type) c
									(layer)3
										Element:p
											Step 2.For each episode from Step 1, look for the IVA episode with the same episode sequence number as our third party episode sequence number.
									Node:
									(type) c
									(layer)3
										Element:p
											Step 3.The IVA episode with the same episode sequence number is our episode match.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Games
									Node:
									(type) c
									(layer)3
										Element:p
											Special Note: Games are NOT matched specific to platform.
									Node:
									(type) c
									(layer)3
										Element:p
											Step 1.Follow Step 1 under Movies.
									Node:
									(type) c
									(layer)3
										Element:p
											Step 2.Follow Step 2 under Movies
									Node:
									(type) c
									(layer)3
										Element:p
											Step 3.The title that is left from Step 2 is our Game match.
												Node:
												(type) c
												(layer)4
						Node:
						(type) c
						(layer)2
							Element:h2
								Data Matching
						Node:
						(type) c
						(layer)2
							Element:p
								IVA makes it easy to use a third party data provider because we match IVA content to all the major providers. To facilitate your data matching requirements, IVA has created these Data Matching Guidelines.
						Node:
						(type) c
						(layer)2
							Element:p
								Users who choose to perform their own data matching should query IVA’s OData API for the information listed in the tables below. The more data points you have the better the match is going to be with fewer anomalies returned in the results. If you are getting a table from us you will need to switch your ID for the IVA Published ID. An example of a data query is shown after the last table.
						Node:
						(type) c
						(layer)2
							Element:p
								IVA does offer a custom data matching service for which additional fees apply.
							Element:a
								Contact sales
								for additional information regarding the cost of this service. If you prefer to have IVA perform a data match you will need to provide us with a table containing the following data for each media type.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Movies
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
											Your ID
										Element:li
											Title
										Element:li
											First Released Year ( check +/- 1 year as this field can vary by data provider)
										Element:li
											Director
										Element:li
											Cast
										Element:li
											Media Type (Movie Scene/Clip, Movie Trialer, Movie Alternate Trailer)
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											TV
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
											Your ID
										Element:li
											Title (Series)
										Element:li
											Season number
										Element:li
											Episode Title
										Element:li
											Sequence (Episode sequence number: i.e. Season 3 Episode 5 = 5 )
										Element:li
											Director
										Element:li
											Cast
										Element:li
											Year
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Game
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
											Title
										Element:li
											Year
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Music
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
											Title
										Element:li
											Performer
										Element:li
											Year
										Element:li
											Album
									Node:
									(type) c
									(layer)3
										Element:p
										Element:strong
											Example Queries for Matching
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											Linq: (From e in EntertainmentPrograms where e.MediaId = 0 select e.Title, e.PublishedId, e.FirstReleasedYear, e.Director.FullName).Skip(5000).Take(100) URL: http://api.internetvideoarchive.com/2.0/DataService/EntertainmentPrograms()?$filter=MediaId eq 0&$skip=5000&$top=100&$expand=Director&$select=Title,Publishedid,FirstReleasedYear,Director/FullName&developerid={yourID}
												Node:
												(type) c
												(layer)4
						Node:
						(type) c
						(layer)2
							Element:h2
								Best Practices for Using the Normalized Title in our Data APIs
						Node:
						(type) c
						(layer)2
							Element:p
								Inside our Data API’s are titles that have been normalized according to the rules listed below. The rules are subject to change without notice. IVA recommends using this only if you have no other data option. IVA dedicates a lot of resources to matching our titles to 3rd party databases and ID’s. We work with some of the biggest data providers in the world. If you are already matched to one of our other data partners we would suggest using their ID’s to match using the Pinpoint API .
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Normalization Rules
									Node:
									(type) c
									(layer)3
										Element:p
											Note: Lists start with { and end with }.Lists are delimited by pipes. Spaces will be indicated by _
										Element:br
											Single Quotes indicate a value is used literally, for example a list that includes the curly brace,
										Element:br
											ex. { ‘{‘| ‘}’}
									Node:
									(type) c
									(layer)3
										Element:p
											Steps:
									Node:
									(type) c
									(layer)3
										Element:ol
										Element:li
											Remove leading and trailing whitespace.
										Element:li
											Uppercase the entire string.
										Element:li
											Move any of the following articles to the front of the string from the end : {,_A|,_AN|,_THE}. (Note: Only one occurence is checked) Exe. Dark Knight, the becomes the dark knight.
										Element:li
											Remove any of the following leading articles, {,_A|,_AN|,_THE} Exe. The Dark Knight becomes Dark Knight
										Element:li
											Lowercase the entire string
										Element:li
											For each of the following pairs:If
										Element:ol
										Element:li
											The string contains both parts of the pair and
										Element:li
											The last occurrence of the left pair comes before the last occurrence of the right pair then
										Element:li
											Return the base string starting from leftmost character and ending one character from last occurrence of leftmost pair.
										Element:p
											The pairs are, 1. [ ] 2.( ) 3.{ } Exe. Hi[5][6] returns Hi[5]
										Element:br
											Exe. Hello[] returns Hello
										Element:li
											Append a space in front and back of the word to account for trimming.
										Element:li
											Remove the following phrases from the string,
										Element:br
											{_an_imax_3d_experience_| _an_imax_experience_ | _the_imax_experience_|_imax_3d_experience_|_imax_3d_}
										Element:li
											Replace character & with string and.
										Element:li
											Remove leading and trailing whitespace.
										Element:li
											Uppercase the string.
										Element:li
											Repeat Step 3
										Element:li
											Repeat step 4
										Element:li
											LowerCase the string.
										Element:li
											Replace any occurence of the following strings
										Element:br
											{_i:|_ii:|_iii:|_iv:|_v:|_vi|_vii:|_viii|_ix:|_x:|_xi:|_xii:|} with their equivalent counterparts
										Element:br
											{_1:|_2:|_3:|_4:|_5:|_6:|_7:|_8:|_9:|_10:|_11:|_12:|}
										Element:li
											Using the following list of characters,
										Element:br
											{ !| @| #| $| %| ^| *| _| +| =| ‘{‘| ‘}’| [| ]| ‘|’ | <| >| `| 😐 -| (| )| ?| /| \| & | ~| .| ,|single quote|double quote } **NOTE**: single quote means ‘ and double quote means ” respectively.
										Element:br
											Replace any occurence of the above characters with a blank space, exe. A string, Blink_182 becomes Blink 182
										Element:li
											Replace any numeric text to its string equivalent. For example, 1000 changes to One_Thousand ,
										Element:br
											6010 turns into Six_Thousand_Ten . Link to equivalent article,http://stackoverflow.com/questions/794663/net-convert-number-to-string-representation-1-to-one-2-to-two-etc
										Element:li
											LowerCase the entire string.
										Element:li
											Remove leading and trailing whitespace.
										Element:li
											Replace any occurence of the following string, {,} (comma) to a empty space. Exe. Hello, John becomes Hello John
										Element:li
										Element:span
											If your string ends with the following strings
										Element:br
											{_i|_ii|_iii|_iv|_v|_vi|_vii|_viii|_ix|_x|_xi|_xii|}, replace them with their equivalent counterparts
										Element:br
											{_1|_2|_3|_4|_5|_6|_7|_8|_9|_10|_11|_12|}
										Element:li
											Repeat step 17
										Element:li
											Lowercase the string
										Element:li
											Replace Diacritics from the string with their correct counterpart. For example, strings such as é, è, ë, ê, É would all be replaced with e,e,e,e,E respectively.
										Element:li
											Remove leading and trailing whitespace.
										Element:li
											Remove the following occurences from the string, between any two characters remove any number of blank spaces and keep just one. For example, two____times will be replaced with two_times.
									Node:
									(type) c
									(layer)3
																		Node:
																		(type) c
																		(layer)6
																			Element:footer
																			Element:img
																			Element:span
																			Element:a
																			Element:span
																			Element:i
																			Element:span
																			Element:a
																			Element:span
																			Element:i
																			Element:a
																			Element:img
																			Element:span
																			Element:a
																			Element:span
																			Element:i
																			Element:span
																				Phone: +1 856 310 1981
																			Element:a
																			Element:span
																			Element:i
																			Element:br
																				Fax: +1 856 310 1956 E-mail Us:
																			Element:a
																				support@internetvideoarchive.com
																			Element:h6
																				RECENT BLOG POSTS
																			Element:ul
																			Element:li
																			Element:a
																				IVA Trailers of the Week – First Contact
																			Element:span
																				March 15, 2017
																			Element:li
																			Element:a
																				Video Hack Day 3
																			Element:span
																				March 14, 2017
																			Element:li
																			Element:a
																				AdQ Announcement
																			Element:span
																				March 13, 2017
																			Element:h6
																				MORE LINKS
																			Element:ul
																			Element:li
																			Element:a
																				Developers
																			Element:li
																			Element:a
																				Contact Us
																			Element:li
																			Element:a
																				Privacy Policy
																			Element:li
																			Element:a
																				Charts
																			Element:li
																			Element:a
																				Client Login
																			Element:li
																			Element:a
																				Legacy Documentation
																			Element:h6
																				EVENTS
																				»
																			Element:a
																				Mar. 11-12, Video Hack Day 3, New York City
																				»
																			Element:a
																				Apr. 24-27, NAB Show, Las Vegas, NV
																			Element:h6
																				SUBMIT CONTENT
																			Element:ul
																			Element:li
																			Element:a
																				Movie
																			Element:li
																			Element:a
																				TV
																			Element:li
																			Element:a
																				Video Game
																			Element:span
																				© Copyright Internet Video Archive LLC.
