Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
				Element:span
					Widgets for Ad Servers
			Node:
			(type) c
			(layer)1
												Node:
												(type) c
												(layer)4
													Element:aside
													Element:h4
														Search Documentation
													Element:label
														Search for:
													Element:h4
														Documentation Menu
												Node:
												(type) c
												(layer)4
													Element:p
														These content widgets are sized to fit your existing web site templates. They can be placed in any available advertisement space (400×300 or larger) and published using your existing advertisement server for easiest and broadest distribution.
			Node:
			(type) c
			(layer)1
												Node:
												(type) c
												(layer)4
													Element:h4
														Available Dynamic Lists
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
														Movies of the Week [InTheatersThisWeek]
													Element:li
														Top TV Shows [NewTV]
													Element:li
														Top Game Trailers [PopularGames]
													Element:li
														New on DVD [NewOnDVD]
													Element:li
														In Theaters [InTheaters]
													Element:li
														*** Featured [FeaturedPlacement]
			Node:
			(type) c
			(layer)1
												Node:
												(type) c
												(layer)4
													Element:h4
														Requirements
												Node:
												(type) c
												(layer)4
													Element:ol
													Element:li
														Clients may not link to “auto start” video unless IVA player is “above the fold”.
													Element:li
														You may not include “auto start” video on a page that includes other “auto start” video.
													Element:li
														Widgets must be targeted to desktops only. Mobile is not supported at this time.
												Node:
												(type) c
												(layer)4
													Element:p
														To get started or discuss setting up a test with IVA, please contact
													Element:a
														sales
														.
												Node:
												(type) c
												(layer)4
									Node:
									(type) c
									(layer)3
										Element:h3
											Implementation
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:a
											Embed Code
										Element:li
										Element:a
											Player API
										Element:li
										Element:a
											Detecting In View
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
											<!-- Begin IVA Widget For Ad Servers --> <div style="text-align:center" id="iva-widget-placeholder"></div> <script type="text/javascript"> var ivaplayer = { config: { tag: 'featuredplacement', partnerid: '[insert your id here]', //Provided by your representative listname: 'featuredplacement', //Which dynamic list of content to display //publishedid:'[insert published id]' //use to play single video. (optional) placeholder: 'iva-widget-placeholder', customerid:'[insert your customer id here]', //Required. This is provided by your account rep domain:'[insert domain here]', //The domain the player will be loaded on. autostart: false, //Start video on page load. width: 460, //Width in pixels of the player. DO NOT INCLUDE 'px' height: 250, //Height in pixels of the player. DO NOT INCLUDE 'px' mute: false, //Volume on or off on load. randomize: true //Set to false if using a single published ID. Randomizes the playlist. } } var ivawidget = document.createElement('script'); ivawidget.type = 'text/javascript'; ivawidget.async = true; ivawidget.src = 'https://syndication.videodetective.com/widget/inview/loader.inview.js'; var ivascr = document.getElementsByTagName('script')[0]; ivascr.parentNode.insertBefore(ivawidget, ivascr); </script> <!-- END IVA Widget For Ad Servers -->
												Node:
												(type) c
												(layer)4
									Node:
									(type) c
									(layer)3
										Element:h3
											Play
											This method tells the player to start playing the content starting with a pre-roll. This is particularly useful in starting the player when the player comes into view (inview) of the user when the user scrolls down the page.
									Node:
									(type) c
									(layer)3
										Element:br
									Node:
									(type) c
									(layer)3
										Element:br
											To send the play event to the player, use code below to post a message to the player iframe with the message 'Play'.
									Node:
									(type) c
									(layer)3
										Element:br
									Node:
									(type) c
									(layer)3
										Element:pre
											function sendmessage(msg) { var ifrm = document.getElementById("iva_iframe"); ifrm.contentWindow.postMessage(msg, "http://syndication.videodetective.com"); } // when you detect the player is in view, send the Play message to the player. var msg = 'Play'; sendmessage(msg);
									Node:
									(type) c
									(layer)3
										Element:br
									Node:
									(type) c
									(layer)3
										Element:br
												Node:
												(type) c
												(layer)4
									Node:
									(type) c
									(layer)3
										Element:h3
											Pause
											This method tells the player to pause playback.
									Node:
									(type) c
									(layer)3
										Element:br
									Node:
									(type) c
									(layer)3
										Element:br
											To send the pause event to the player, use code below to post a message to the player iframe with the message 'Pause'.
									Node:
									(type) c
									(layer)3
										Element:br
									Node:
									(type) c
									(layer)3
										Element:pre
											function sendmessage(msg) { var ifrm = document.getElementById("iva_iframe"); ifrm.contentWindow.postMessage(msg, "http://syndication.videodetective.com"); }
									Node:
									(type) c
									(layer)3
										Element:br
									Node:
									(type) c
									(layer)3
										Element:br
												Node:
												(type) c
												(layer)4
									Node:
									(type) c
									(layer)3
										Element:h3
											Paused
											This method returns whether the player is paused on not (Boolean).
									Node:
									(type) c
									(layer)3
										Element:br
									Node:
									(type) c
									(layer)3
										Element:br
									Node:
									(type) c
									(layer)3
										Element:br
									Node:
									(type) c
									(layer)3
										Element:br
												Node:
												(type) c
												(layer)4
									Node:
									(type) c
									(layer)3
										Element:h3
											Muted
											This method returns whether the player is muted on not (Boolean).
									Node:
									(type) c
									(layer)3
										Element:br
									Node:
									(type) c
									(layer)3
										Element:br
									Node:
									(type) c
									(layer)3
										Element:br
									Node:
									(type) c
									(layer)3
										Element:br
												Node:
												(type) c
												(layer)4
									Node:
									(type) c
									(layer)3
										Element:h3
											Mute
											This method tells the player to Mute.
									Node:
									(type) c
									(layer)3
										Element:br
									Node:
									(type) c
									(layer)3
										Element:br
									Node:
									(type) c
									(layer)3
										Element:br
									Node:
									(type) c
									(layer)3
										Element:br
												Node:
												(type) c
												(layer)4
									Node:
									(type) c
									(layer)3
										Element:h3
											UnMute
											This method tells the player to UnMute.
									Node:
									(type) c
									(layer)3
										Element:br
									Node:
									(type) c
									(layer)3
										Element:br
									Node:
									(type) c
									(layer)3
										Element:br
									Node:
									(type) c
									(layer)3
										Element:br
												Node:
												(type) c
												(layer)4
									Node:
									(type) c
									(layer)3
										Element:h3
											Height
											This method returns the Height of the player.
									Node:
									(type) c
									(layer)3
										Element:br
									Node:
									(type) c
									(layer)3
										Element:br
									Node:
									(type) c
									(layer)3
										Element:br
									Node:
									(type) c
									(layer)3
										Element:br
												Node:
												(type) c
												(layer)4
									Node:
									(type) c
									(layer)3
										Element:h3
											Width
											This method returns the Width of the player.
									Node:
									(type) c
									(layer)3
										Element:br
									Node:
									(type) c
									(layer)3
										Element:br
									Node:
									(type) c
									(layer)3
										Element:br
									Node:
									(type) c
									(layer)3
										Element:br
												Node:
												(type) c
												(layer)4
									Node:
									(type) c
									(layer)3
										Element:h3
											CurrentTime
											This method returns the CurrentTime of the player.
									Node:
									(type) c
									(layer)3
										Element:br
									Node:
									(type) c
									(layer)3
										Element:br
									Node:
									(type) c
									(layer)3
										Element:br
									Node:
									(type) c
									(layer)3
										Element:br
												Node:
												(type) c
												(layer)4
									Node:
									(type) c
									(layer)3
										Element:h3
											RemainingTime
											This method returns the RemainingTime of the player.
									Node:
									(type) c
									(layer)3
										Element:br
									Node:
									(type) c
									(layer)3
										Element:br
									Node:
									(type) c
									(layer)3
										Element:p
												Node:
												(type) c
												(layer)4
									Node:
									(type) c
									(layer)3
										Element:h3
											GetCurrentPlayerInfo
											This method gets the starting video in the player's playlist as a JSON object to display appropriate heading, description, and image.
									Node:
									(type) c
									(layer)3
										Element:br
									Node:
									(type) c
									(layer)3
										Element:br
											The return object looks like the following.
									Node:
									(type) c
									(layer)3
										Element:pre
											{'Response' : { 'id': 1234, 'title': 'Title Of the Video', 'description': "A full description about the video.", 'image': "http://content.internetvideoarchive.com/photo/to/image.jpg" }}
									Node:
									(type) c
									(layer)3
										Element:p
											To access the meta data about the first title in the playlist from the player, you need to send a message containing 'GetCurrentPlayerInfo' to the player and set up an event listener 'message' to our page. When the player receives the request to 'GetCurrentPlayerInfo', it will send a message back containing the meta data.
										Element:br
										Element:br
											Below is an example that opens an alert window displaying the meta data.
									Node:
									(type) c
									(layer)3
										Element:pre
											function sendmessage(msg) { var ifrm = document.getElementById("iva_iframe"); ifrm.contentWindow.postMessage(msg, "http://syndication.videodetective.com"); } // Handle for postMessage events sent from parent window.addEventListener('message', receiveMessage, false); function receiveMessage(event) { if (event.data.Response != undefined){ alert('title: ' + event.data.Response.title + '\n' + '\n' + 'image: ' + event.data.Response.image + '\n' + '\n' + 'description: ' + event.data.Response.description + '\n' + '\n' + 'id: ' + event.data.Response.id); } } // when you detect the player is in view, send the Play message to the player. var msg = 'GetCurrentPlayerInfo'; sendmessage(msg);
									Node:
									(type) c
									(layer)3
										Element:p
											To optimize impressions, we suggest that the player is autostarted (autostart:true) or autostart the player when the video player is in view.
									Node:
									(type) c
									(layer)3
										Element:p
											To detect when the video is in view, you can use this script below which takes an element and determines if the element is in the Viewport and returns true or false.
									Node:
									(type) c
									(layer)3
										Element:pre
											// Check to see if player is in view. function isElementInViewport (el) { var rect = el.getBoundingClientRect(); return ( rect.top >= 0 && rect.left >= 0 && rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) && /*or $(window).height() */ rect.right <= (window.innerWidth || document.documentElement.clientWidth) /*or $(window).width() */ ); }
									Node:
									(type) c
									(layer)3
										Element:p
											To put it all together, you need to set an interval to check if the player is in view and if it is, send the 'Play' event to the player.
										Element:br
											Below is sample code to do just that.
									Node:
									(type) c
									(layer)3
										Element:pre
											// Check to see if player is in view. function isElementInViewport (el) { var rect = el.getBoundingClientRect(); return ( rect.top >= 0 && rect.left >= 0 && rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) && /*or $(window).height() */ rect.right <= (window.innerWidth || document.documentElement.clientWidth) /*or $(window).width() */ ); } // handles sending the 'Play' event to the player when it is in view function sendmessage(msg) { var ifrm = document.getElementById("iva_iframe"); ifrm.contentWindow.postMessage(msg, "http://syndication.videodetective.com"); } // check every 100 milliseconds to see if the player is in view var IVA_CheckViewabilityInterval = setInterval(function () { _checkIVAViewability(); console.log("IVA:: Interval of 1 second. Sending checkViewability."); }, 100); var visibleOnce = false; //only send Play event once. function _checkIVAViewability() { console.log("IVA:: checkIVAViewability called. visibleOnce = " + visibleOnce); if (visibleOnce == true) { return;} var my_element = document.getElementById('iva_iframe'); if (isElementInViewport(my_element)) { console.log("IVA:: isInViewport = true"); if (visibleOnce == false) { sendmessage('Play'); visibleOnce = true; clearInterval(IVA_CheckViewabilityInterval); } else { console.log("IVA:: isInViewport = false"); } } }
												Node:
												(type) c
												(layer)4
									Node:
									(type) c
									(layer)3
										Element:h3
											Using IVA’s PublishedId’s
									Node:
									(type) c
									(layer)3
										Element:p
											If using the option to pass an IVA PublishedID instead of using the lists, be sure to check that the content is not explicit (IVAWarning = False), does not require the IVA player (RequiresIVAPlayer = False), and that the content allows ads (AllowAds = True). For more information on these fields see the Video Assets Entity on the
										Element:a
											data dictionary
											page for the OData API.
									Node:
									(type) c
									(layer)3
																		Node:
																		(type) c
																		(layer)6
																			Element:footer
																			Element:img
																			Element:span
																			Element:a
																			Element:span
																			Element:i
																			Element:span
																			Element:a
																			Element:span
																			Element:i
																			Element:a
																			Element:img
																			Element:span
																			Element:a
																			Element:span
																			Element:i
																			Element:span
																				Phone: +1 856 310 1981
																			Element:a
																			Element:span
																			Element:i
																			Element:br
																				Fax: +1 856 310 1956 E-mail Us:
																			Element:a
																				support@internetvideoarchive.com
																			Element:h6
																				RECENT BLOG POSTS
																			Element:ul
																			Element:li
																			Element:a
																				IVA Trailers of the Week – First Contact
																			Element:span
																				March 15, 2017
																			Element:li
																			Element:a
																				Video Hack Day 3
																			Element:span
																				March 14, 2017
																			Element:li
																			Element:a
																				AdQ Announcement
																			Element:span
																				March 13, 2017
																			Element:h6
																				MORE LINKS
																			Element:ul
																			Element:li
																			Element:a
																				Developers
																			Element:li
																			Element:a
																				Contact Us
																			Element:li
																			Element:a
																				Privacy Policy
																			Element:li
																			Element:a
																				Charts
																			Element:li
																			Element:a
																				Client Login
																			Element:li
																			Element:a
																				Legacy Documentation
																			Element:h6
																				EVENTS
																				»
																			Element:a
																				Mar. 11-12, Video Hack Day 3, New York City
																				»
																			Element:a
																				Apr. 24-27, NAB Show, Las Vegas, NV
																			Element:h6
																				SUBMIT CONTENT
																			Element:ul
																			Element:li
																			Element:a
																				Movie
																			Element:li
																			Element:a
																				TV
																			Element:li
																			Element:a
																				Video Game
																			Element:span
																				© Copyright Internet Video Archive LLC.
