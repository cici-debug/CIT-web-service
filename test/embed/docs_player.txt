Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					Player
			Node:
			(type) c
			(layer)1
				Element:hr
					Embedly's `platform.js` ships with a lightweight version of [Player.js](doc:playerjs) to make it easy to interact with Cards and Embedly Iframes. Instead of having to include multiple libraries and this makes it simple to interact with the media. [block:callout] { "type": "info", "title": "Make sure `platform.js` is installed!", "body": "Intergrations require platform.js to be installed on the page, you can learn how to install it [here](doc:playerjs)" } [/block] [block:api-header] { "type": "basic", "title": "Quick Start" } [/block] It's a rather simple integration. It looks like this: [block:code] { "codes": [ { "code": "embedly('player', function(player){\n console.log(player.url) // URL of the media that we are operating on.\n\n // When the user pauses a video, perform an action.\n player.on('pause', function(){\n //display modal.\n });\n\n // Autoplay all the videos that support Player.js\n player.play()\n});", "language": "javascript" } ] } [/block] The player callback is only called if the Card or iframe supports player.js and is ready to accept calls. if supports the following methods [block:api-header] { "type": "basic", "title": "Demo" } [/block] Here's a quick demo of using the player method to control both a Card and a Media Iframe. [block:embed] { "html": "<iframe class=\"embedly-embed\" src=\"//cdn.embedly.com/widgets/media.html?url=https%3A%2F%2Fjsfiddle.net%2Ffexnhqbd%2F%3Fheight%3D800%26tabs%3Dresult%2Cjs%2Chtml%2Ccss%2Cresources&src=https%3A%2F%2Fjsfiddle.net%2Ffexnhqbd%2Fembedded%2Fresult%2Cjs%2Chtml%2Ccss%2Cresources%2F&type=text%2Fhtml&key=02466f963b9b4bb8845a05b53d3235d7&schema=jsfiddle\" width=\"600\" height=\"800\" scrolling=\"no\" frameborder=\"0\" allowfullscreen></iframe>", "url": "https://jsfiddle.net/fexnhqbd/?height=800&tabs=result,js,html,css,resources", "title": "Edit fiddle - JSFiddle", "favicon": "https://jsfiddle.net/favicon.png" } [/block] [block:api-header] { "type": "basic", "title": "Methods" } [/block] **``player.play()``**: void Play the media **``player.pause()``**: void Pause the media **``player.getPaused(callback)``**: boolean Determine if the media is paused player.getPaused(function(paused){ console.log('Paused: '+paused); }); **``player.mute()``**: void Mute the media **``player.unmute()``**: void Unmute the media **``player.getMuted(callback)``**: boolean Determine if the media is muted player.getMuted(function(muted){ console.log('Muted: '+muted); }); **``player.setVolume(volume)``**: void Set the volume. Value needs to be between 0-100 player.setVolume(50); **``player.getVolume(callback)``**: number Get the volume. Value will be between 0-100 player.getVolume(function(volume){ console.log('Volume: '+volume); }); **``player.getDuration(callback)``**: number Get the duration of the media is seconds player.getDuration(function(duration){ console.log('Duration: '+duration); }); **``player.setCurrentTime(seconds)``**: number Perform a seek to a particular time in seconds player.setVolume(10); **``player.getCurrentTime(callback)``**: number Get the current time in seconds of the video player.getCurrentTime(function(seconds){ console.log('Current Time: '+seconds); }); **``player.setLoop(bool)``**: boolean Tell the media to loop continuously player.setLoop(true); **``player.getLoop(callback)``**: number Return the loop attribute of the video player.getLoop(function(looped){ console.log('Looped: '+looped); }); [block:api-header] { "type": "basic", "title": "Events" } [/block] **``timeupdate``** Fires during playback player.on('timeupdate', function(data){ // autoplay the video. console.log('Duration: '+ data.duration); console.log('Current Time: '+ data.seconds); }); **``play``** Fires when the video starts to play player.on('play', function(){ console.log('played'); }); **``pause``** Fires when the video is paused player.on('pause', function(){ console.log('paused'); }); **``ended``** Fires when the video has ended player.on('ended', function(){ console.log('video ended'); }); **``error``** Fires when something goes wrong player.on('ended', function(){ alert('unable to play media') });
			Node:
			(type) c
			(layer)1
				Element:footer
