Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					Cards
			Node:
			(type) c
			(layer)1
				Element:hr
					Cards provide you with responsive and shareable embeds to drive the reach of your websites, blog posts, and articles. Our [code generator](http://embed.ly/code) makes it super simple to create a card of any site. The follow explains how to use platform.js to programmatically create cards. [block:api-header] { "type": "basic", "title": "Basics" } [/block] This adds ``platform.js`` to your site and loads the script asynchronously. By default ``platform.js`` will create a card for an ``A`` tag or ``BLOCKQUOTE`` with the class ``embedly-card``. For example, this will create a card for embed.ly: [block:code] { "codes": [ { "code": " <a href=\"http://embed.ly\" class=\"embedly-card\">Embedly</a>", "language": "html" } ] } [/block] And this will also create a card: [block:code] { "codes": [ { "code": " <blockquote class=\"embedly-card\">\n <h4><a href=\"http://embed.ly/docs\">Documentation</a></h4>\n <p>\n Embedly's Documentation is the best.\n </p>\n </blockquote>", "language": "html" } ] } [/block] The difference here, is that the ``H4`` will become the title of the Card and the ``P`` text will become the description. [block:api-header] { "type": "basic", "title": "Customize" } [/block] There are a number of ``data-card-*`` attributes that you can use to customize the card. They are as follows: [block:parameters] { "data": { "h-0": "Attribute", "h-1": "Value", "h-2": "Description", "0-0": "data-card-via", "0-1": "URL i.e http://embed.ly", "0-2": "Specifies the via content in the card. It's a great way to do attribution.", "1-0": "data-card-chrome", "1-1": "\"1\", \"0\"", "1-2": "Chrome of 0 will remove the left hand colored border.", "2-0": "data-card-theme", "2-1": "\"light\", \"dark\"", "2-2": "For dark backgrounds it's better to specify the dark theme.", "3-0": "data-card-image", "4-0": "data-card-embed", "5-0": "data-card-controls", "6-0": "data-card-width", "7-0": "data-card-align", "8-0": "data-card-recommend", "3-1": "URL i.e. http://embed.ly/image.jpg", "4-1": "URL i.e. https://vimeo.com/62648882", "5-1": "\"1\", \"0\"", "6-1": "\"100%\", \"300px\", etc.", "7-1": "\"left\", \"center\", \"right\"", "8-1": "\"1\", \"0\"", "7-2": "Align the card, Default: \"center\"", "6-2": "Sets the width of the card. Specifically the max-width, so card is still responsive.", "5-2": "Enable Share Icons. Default: \"1\"", "4-2": "Instead of using the static page content, the card will embed the video or rich media.", "3-2": "Specify which image to use in article cards.", "8-2": "Disable Embedly Recommendations on video and rich cards. Default: 1", "9-0": "data-card-key", "9-1": "\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"", "9-2": "You Embedly API Key. If you are a paid user this will remove Embedly's branding from the cards." }, "cols": 3, "rows": 10 } [/block] [block:api-header] { "type": "basic", "title": "Javascript" } [/block] Platform.js has some pretty interesting features for customizing cards further. For example, if you do not want to use a custom class instead of ``embedly-card`` you can use the following code: [block:code] { "codes": [ { "code": "embedly('card', '.card-this');", "language": "javascript" } ] } [/block] If you would like to create a card from a single element you can do the following: [block:code] { "codes": [ { "code": " var a = document.getElementById('#myCard');\n embedly('card', a);", "language": "javascript" } ] } [/block] Lastly if you would like to limit the cards to only embed certain types of media you can pass in a ``types`` argument:: [block:code] { "codes": [ { "code": "embedly('card', {types: ['rich', 'video', 'image']});\n", "language": "javascript" } ] } [/block] or with a custom selector as well: [block:code] { "codes": [ { "code": "embedly('card', {selector: 'a.embed', types: ['article', 'image']});", "language": "javascript" } ] } [/block] If ``platform.js`` has not loaded yet, it will queue actions till we are ready to act on them. [block:api-header] { "type": "basic", "title": "Listeners" } [/block] When using cards in non-standard displays you may want to listen to some events. Cards supports the following events. **``card.rendered``** When the card has actually been rendered. [block:code] { "codes": [ { "code": "embedly('on', 'card.rendered', function(iframe){\n // iframe is the card iframe that we used to render the event.\n $card = $(iframe);\n\n // Grab the width and height.\n console.log($card.width(), $card.height());\n});", "language": "javascript" } ] } [/block] **``card.resize``** When the card has been resized. We do this fairly often when the browser window has changed size, or the content in the card has changed. [block:code] { "codes": [ { "code": "embedly('on', 'card.resize', function(iframe){\n // iframe is the card iframe that we used to render the event.\n $card = $(iframe);\n\n // Grab the width and height.\n console.log($card.width(), $card.height());\n});", "language": "javascript" } ] } [/block] [block:api-header] { "type": "basic", "title": "Defaults" } [/block] If you would like to set options globally instead of per card you use ``defaults``. Here's an example of setting all the cards to align right with a width of 700px and remove the chrome. [block:code] { "codes": [ { "code": "embedly(\"defaults\", {\n cards: {\n key: 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx',\n width: 700\n align: 'right',\n chrome: 0\n }\n});", "language": "javascript" } ] } [/block] Note that data attributes on the card override these defaults. If you wish for the defaults to override the data attributes, you can add ``override: true`` like so: [block:code] { "codes": [ { "code": "embedly(\"defaults\", {\n cards: {\n override: true,\n width: '90%',\n ...\n }\n});", "language": "javascript" } ] } [/block] [block:api-header] { "type": "basic", "title": "Player" } [/block] Embedly gives you programmatic control of embedded video via [Player.js](https://github.com/embedly/player.js/) and we've expanded that to Cards as well. Player allows you to play, pause, seek and listen to events for cards with video. Here's a quick example: [block:code] { "codes": [ { "code": "embedly('player', function(player){\n console.log(player.url) // URL of the media that we are operating on.\n\n // When the user pauses a video, perform an action.\n player.on('pause', function(){\n //display modal.\n });\n\n // Autoplay all the videos that support Player.js\n player.play()\n});", "language": "javascript" } ] } [/block] Learn more about the [Player functionality](doc:player) [block:api-header] { "type": "basic", "title": "Integrations" } [/block] Cards integrate with 3rd Party Analytics, such as Google Analytics, so you can track card performance wherever you like. While we think our Analytics are pretty awesome, we know that it won't fit with everyone's workflow. Learn mote about [Integrations](doc:integrations) [block:api-header] { "type": "basic", "title": "CSS Customization" } [/block] [block:callout] { "type": "info", "title": "CSS is only available on a paid plan.", "body": "You can upgrade inside [app.embed.ly](https://app.embed.ly)" } [/block] Embedly allows you to customize the styles inside a card. If you want to change the font or colors of the card than this feature is for you! There are a couple of ways to pass styles into a card. We will outline them here. ## inline You can specify the css styles inline via a `style` tag. Embedly will look for a single `style` tag with the `embedly-css` and use that CSS. [block:code] { "codes": [ { "code": "<style class=\"embedly-css\">\n @import url(https://fonts.googleapis.com/css?family=Open+Sans+Condensed:300);\n .card {\n font-family: 'Open Sans Condensed', sans-serif;\n }\n .card a, .card .action {\n color: red;\n }\n .hdr {\n display:none;\n }\n</style>", "language": "html" } ] } [/block] ## link You can specify a stylesheet for Embedly to place inside the card via a `linke` tag. Embedly will look for a single `link` tag with the `embedly-css` and use that CSS. [block:code] { "codes": [ { "code": "<head>\n ...\n\t<link rel=\"stylesheet\" href=\"http://example.com/styles/card.css\">\n</head>", "language": "html" } ] } [/block] ## defaults Lastly you can pass the css through defaults like so: [block:code] { "codes": [ { "code": "embedly(\"defaults\", {\n cards: {\n key: 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx',\n\t\tcss: 'http://example.com/styles/card.css'\n }\n});", "language": "javascript" } ] } [/block] ## demo [block:embed] { "html": "<iframe class=\"embedly-embed\" src=\"//cdn.embedly.com/widgets/media.html?url=https%3A%2F%2Fjsfiddle.net%2FvuwLcpw1%2F%3Fheight%3D600%26tabs%3Dresult%2Chtml&src=https%3A%2F%2Fjsfiddle.net%2FvuwLcpw1%2Fembedded%2Fresult%2Chtml%2F&type=text%2Fhtml&key=02466f963b9b4bb8845a05b53d3235d7&schema=jsfiddle\" width=\"600\" height=\"600\" scrolling=\"no\" frameborder=\"0\" allowfullscreen></iframe>", "url": "https://jsfiddle.net/vuwLcpw1/?height=600&tabs=result,html", "title": "Edit fiddle - JSFiddle", "favicon": "https://jsfiddle.net/favicon.png" } [/block] [block:api-header] { "type": "basic", "title": "Remove Branding" } [/block] Cards includes a "powered by Embedly" logo at the bottom of every card. If you would like to removed this branding, you can upgrade to a the embed product in [app.embed.ly](https://app.embed.ly/ar?path=settings%2Fplan). Any card created through [app.embed.ly](https://app.embed.ly) will have branding removed within 24 hours due to browser caching. For cards not generated through app.embed.ly you must include your API key, found [here](https://app.embed.ly/ar?path=api%2Fkey). You can do this one of two ways. ### On the Card [block:code] { "codes": [ { "code": "<a href=\"embedly-card\" data-card-key=\"XXXXXXXXXXXX\" href=\"http://embed.ly\"></a>", "language": "html" } ] } [/block] ### Via JavaScript [block:code] { "codes": [ { "code": "embedly(\"defaults\", {\n cards: {\n key: 'XXXXXXXXXXXX',\n }\n});", "language": "javascript" } ] } [/block]
			Node:
			(type) c
			(layer)1
				Element:footer
