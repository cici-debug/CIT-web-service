Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					Player.js
			Node:
			(type) c
			(layer)1
				Element:hr
					Player.js allows developers to programmatically control Embedly embeds. You can tell a video to play, pause, seek and listen to events with JavaScript. It's pretty cool. Here's at quick example: [block:code] { "codes": [ { "code": "// Use jQuery to find all the embedly iframes on the page.\n$('iframe.embedly-embed').each(function(){\n // initialize the player.\n\tvar player = new playerjs.Player(this);\n \n // Wait for the player to be ready.\n player.on('ready', function(){\n \n // Listen to the play event.\n player.on('play', function(){\n \t// Tell Google analytics that a video was played.\n window.ga('send', 'event', 'Video', 'Play');\n });\n \n //autoplay the video.\n player.play();\n });\n});", "language": "javascript" } ] } [/block] [block:callout] { "type": "success", "title": "Player.js Resources", "body": "Player.js is an open source specification that anyone can use. Here are some additional resources:\n\nSite: [playerjs.io](http://playerjs.io/)\nCode: [github.com/embedly/player.js](https://github.com/embedly/player.js)" } [/block] [block:api-header] { "type": "basic", "title": "Install" } [/block] You need to include Player.js on your site: bower install player.js Or include the script tag on your site directly. [block:code] { "codes": [ { "code": "<script type=\"text/javascript\" src=\"//cdn.embed.ly/player-0.0.11.min.js\"></script>", "language": "html" } ] } [/block] [block:api-header] { "type": "basic", "title": "Ready" } [/block] Because of the dance that we need to do between both iframes, you should always wait till the ready events fire before interacting with the player object. But good news, the player will internally queue messages until ready is called. [block:code] { "codes": [ { "code": "var iframe = document.querySelector('iframe.embedly-embed');\n\nvar player = new playerjs.Player(iframe);\n\nplayer.on(playerjs.Events.PLAY, function(\n console.log('play');\n));\n\nplayer.on('ready', function(){\n\t// Seek to 20 seconds in.\n player.setCurrentTime(20);\n});", "language": "javascript" } ] } [/block] [block:api-header] { "type": "basic", "title": "Demo" } [/block] Embeds are resource intensive to load, often times you want to just show a placeholder and autoplay the video when the video loads. Here's how you would do that with Player.js. Click play below. [block:embed] { "html": "<iframe class=\"embedly-embed\" src=\"//cdn.embedly.com/widgets/media.html?url=https%3A%2F%2Fjsfiddle.net%2F4rbre2Lz%2F%3Fheight%3D400%26tabs%3Dresult%2Cjs%2Chtml%2Ccss%2Cresources&src=https%3A%2F%2Fjsfiddle.net%2F4rbre2Lz%2Fembedded%2Fresult%2Cjs%2Chtml%2Ccss%2Cresources%2F&type=text%2Fhtml&key=02466f963b9b4bb8845a05b53d3235d7&schema=jsfiddle\" width=\"600\" height=\"400\" scrolling=\"no\" frameborder=\"0\" allowfullscreen></iframe>", "url": "https://jsfiddle.net/4rbre2Lz/?height=400&tabs=result,js,html,css,resources", "title": "Edit fiddle - JSFiddle", "favicon": "https://jsfiddle.net/favicon.png" } [/block] [block:api-header] { "type": "basic", "title": "Methods" } [/block] **``player.play()``**: void Play the media **``player.pause()``**: void Pause the media **``player.getPaused(callback)``**: boolean Determine if the media is paused player.getPaused(function(paused){ console.log('Paused: '+paused); }); **``player.mute()``**: void Mute the media **``player.unmute()``**: void Unmute the media **``player.getMuted(callback)``**: boolean Determine if the media is muted player.getMuted(function(muted){ console.log('Muted: '+muted); }); **``player.setVolume(volume)``**: void Set the volume. Value needs to be between 0-100 player.setVolume(50); **``player.getVolume(callback)``**: number Get the volume. Value will be between 0-100 player.getVolume(function(volume){ console.log('Volume: '+volume); }); **``player.getDuration(callback)``**: number Get the duration of the media is seconds player.getDuration(function(duration){ console.log('Duration: '+duration); }); **``player.setCurrentTime(seconds)``**: number Perform a seek to a particular time in seconds player.setVolume(10); **``player.getCurrentTime(callback)``**: number Get the current time in seconds of the video player.getCurrentTime(function(seconds){ console.log('Current Time: '+seconds); }); **``player.setLoop(bool)``**: boolean Tell the media to loop continuously player.setLoop(true); **``player.getLoop(callback)``**: number Return the loop attribute of the video player.getLoop(function(looped){ console.log('Looped: '+looped); }); [block:api-header] { "type": "basic", "title": "Events" } [/block] Events that can be listened to. **``ready``** fired when the media is ready to receive commands. This is fired regardless of listening to the event. ``ready`` sets the stage for the rest of the interactions with the iframe. player.on('ready', function(){ // autoplay the video. player.play(); }); **``timeupdate``** Fires during playback player.on('timeupdate', function(data){ // autoplay the video. console.log('Duration: '+ data.duration); console.log('Current Time: '+ data.seconds); }); **``play``** Fires when the video starts to play player.on('play', function(){ console.log('played'); }); **``pause``** Fires when the video is paused player.on('pause', function(){ console.log('paused'); }); **``ended``** Fires when the video has ended player.on('ended', function(){ console.log('video ended'); }); **``error``** Fires when something goes wrong player.on('ended', function(){ alert('unable to play media') });
			Node:
			(type) c
			(layer)1
				Element:footer
