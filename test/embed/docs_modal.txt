Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					Modal
			Node:
			(type) c
			(layer)1
				Element:hr
					Modals are a really easy way to show embeds when you don't have the real estate on the page to display them inline. Here we are going to show a super easy modal a couple of ways. [block:api-header] { "type": "basic", "title": "On Demand" } [/block] Instead of prefetching all the data associated with the links on the page, only make an API call when the user has initiated an event. In this case, it's click to watch the video. [block:embed] { "html": "<iframe class=\"embedly-embed\" src=\"//cdn.embedly.com/widgets/media.html?url=https%3A%2F%2Fjsfiddle.net%2Fc5uubz68%2F1%2F%3Fheight%3D600%26tabs%3Dresult%2Cjs%2Chtml%2Ccss&src=https%3A%2F%2Fjsfiddle.net%2Fc5uubz68%2F1%2Fembedded%2Fresult%2Cjs%2Chtml%2Ccss%2F&type=text%2Fhtml&key=02466f963b9b4bb8845a05b53d3235d7&schema=jsfiddle\" width=\"600\" height=\"600\" scrolling=\"no\" frameborder=\"0\" allowfullscreen></iframe>", "url": "https://jsfiddle.net/c5uubz68/1/?height=600&tabs=result,js,html,css", "title": "Edit fiddle - JSFiddle", "favicon": "https://jsfiddle.net/favicon.png" } [/block] In this case, when the button is clicked, we fetch the embed code and place it in the model. Here's the Javascript. [block:code] { "codes": [ { "code": "$('.button').on('click', function(e) {\n \n // Show the Foundation modal.\n var elem = new Foundation.Reveal($('#videoModal'), {\n vOffset: 0\n });\n elem.open();\n\n // Get the URL.\n var url = $(this).attr('href');\n\n // Call embedly\n $.embedly.oembed(url, {\n key: 'Your Embed Key'\n })\n .progress(function(obj) {\n $('#videoModal h2').text(obj.title);\n $('#videoModal div').html('<div class=\"flex-video\">' + obj.html + '</div>');\n });\n\n // So the link isn't followed.\n return false;\n});", "language": "text" } ] } [/block] [block:api-header] { "type": "basic", "title": "Pre Fetch" } [/block] In this case we will grab the data before the user clicks on the link. The modal will render a little faster because we already have the data. [block:embed] { "html": "<iframe class=\"embedly-embed\" src=\"//cdn.embedly.com/widgets/media.html?url=https%3A%2F%2Fjsfiddle.net%2Fshnv1L87%2F1%2F%3Fheight%3D600%26tabs%3Dresult%2Cjs%2Chtml%2Ccss&src=https%3A%2F%2Fjsfiddle.net%2Fshnv1L87%2F1%2Fembedded%2Fresult%2Cjs%2Chtml%2Ccss%2F&type=text%2Fhtml&key=02466f963b9b4bb8845a05b53d3235d7&schema=jsfiddle\" width=\"600\" height=\"400\" scrolling=\"no\" frameborder=\"0\" allowfullscreen></iframe>", "url": "https://jsfiddle.net/shnv1L87/1/?height=600&tabs=result,js,html,css", "title": "Edit fiddle - JSFiddle", "favicon": "https://jsfiddle.net/favicon.png" } [/block] In this case we use the default Embedly jQuery process to grab the URL data on load then display that data when the button is clicked. [block:code] { "codes": [ { "code": "$('.button')\n .embedly({\n display: $.noop,\n key:'Your Embedly Key'\n })\n .on('click', function() {\n // Get the data that embedly stored on the attr.\n var obj = $(this).data('embedly');\n $('#videoModal h2').text(obj.title);\n $('#videoModal div').html('<div class=\"flex-video\">' + obj.html + '</div>');\n\n var elem = new Foundation.Reveal($('#videoModal'), {\n vOffset: 0\n });\n\n // open the model.\n elem.open();\n return false;\n });", "language": "javascript" } ] } [/block]
			Node:
			(type) c
			(layer)1
				Element:footer
