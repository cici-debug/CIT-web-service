Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					Read All Tickets
			Node:
			(type) c
			(layer)1
				Element:table
				Element:tr
				Element:td
				Element:b
					URL
				Element:td
					<base_uri> / <response_format> /tickets/?size=<size>&page=<page>
				Element:tr
				Element:td
				Element:b
					HTTP Method
				Element:td
					GET
				Element:tr
				Element:td
				Element:b
					Response Data
				Element:td
					Paginated List of Ticket
				Element:tr
				Element:td
				Element:b
					Additional Params
				Element:td
					size: number of items per page(minimum 10, maximum 50, default 10)
				Element:tr
				Element:td
					page: the number of the page required
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
											Data Structure
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
											JSON
			Node:
			(type) h1
			(layer)1
				Element:h1
					Read One Ticket
			Node:
			(type) c
			(layer)1
				Element:table
				Element:tr
				Element:td
				Element:b
					URL
				Element:td
					<base_uri> / <response_format> /ticket /<id>/
				Element:tr
				Element:td
				Element:b
					HTTP Method
				Element:td
					GET
				Element:tr
				Element:td
				Element:b
					Response Data
				Element:td
					Ticket
			Node:
			(type) c
			(layer)1
				Element:h3
					Data Structure
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					JSON
			Node:
			(type) h1
			(layer)1
				Element:h1
					Create a Ticket
			Node:
			(type) c
			(layer)1
				Element:p
					To create a ticket make a POST request to the URL below with request data encoded in one of the supported formats. On success it returns the newly created ticket.
			Node:
			(type) c
			(layer)1
				Element:p
					NOTE: file attachments are supported only when using Multipart Form Data
			Node:
			(type) c
			(layer)1
				Element:table
				Element:tr
				Element:td
				Element:b
					URL
				Element:td
					<base_uri> / <response_format> /tickets/
				Element:tr
				Element:td
				Element:b
					HTTP Method
				Element:td
					POST
				Element:tr
				Element:td
				Element:b
					Request Data
				Element:td
					Create Ticket or Create Ticket Using User Email & Name
				Element:tr
				Element:td
				Element:b
					Response Data
				Element:td
					Ticket
			Node:
			(type) c
			(layer)1
				Element:h3
					Data Structure
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					JSON
			Node:
			(type) c
			(layer)1
				Element:pre
			Node:
			(type) c
			(layer)1
				Element:h3
					Notes:
			Node:
			(type) c
			(layer)1
				Element:h3
					Ticket Custom Field Values For Create Ticket
			Node:
			(type) c
			(layer)1
				Element:ol
				Element:li
					All the points in Common Information For Setting Ticket / User Custom Field Values.
				Element:li
					The values for ticket custom fields should be appended to the fields for Create Ticket.
				Element:li
					The value for a ticket custom field should be sent using a field name constructed from the ID of the ticket custom field in the following format
				Element:strong
					"t-cf-<id>"
					.
				Element:li
					The ticket custom fields applicable to a ticket are dependent on the ticket's category. This can be determined from the "categories" field of Ticket Custom Field.
			Node:
			(type) c
			(layer)1
				Element:h3
					User Custom Field Values For Create Ticket
			Node:
			(type) c
			(layer)1
				Element:ol
				Element:li
					All the points in Common Information For Setting Ticket / User Custom Field Values.
				Element:li
					The values for user custom fields should be appended to the fields for Create Ticket.
				Element:li
					The value for a user custom fields should be sent using a field name constructed from the ID of the user custom field in the following format
				Element:strong
					"c-cf-<id>"
					.
			Node:
			(type) c
			(layer)1
				Element:h3
					Errors
					If you specify an invalid user, you will get the error
			Node:
			(type) c
			(layer)1
				Element:br
			Node:
			(type) c
			(layer)1
				Element:pre
					"field": "client", "errors": [ "Select a valid choice. That choice is not one of the available choices." ]
			Node:
			(type) h1
			(layer)1
				Element:h1
					Create new ticket using email and ID
			Node:
			(type) c
			(layer)1
				Element:p
					This data structure contains information required to create a ticket. This variation uses the email and name of a user. If the email already exists in the Helpdesk, the corresponding user is used, else a new user is created.
			Node:
			(type) c
			(layer)1
				Element:p
					NOTE: Any custom fields required for the ticket and user need to be appended to the list below.
			Node:
			(type) c
			(layer)1
				Element:h3
					Data Structure
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					JSON
			Node:
			(type) c
			(layer)1
				Element:pre
			Node:
			(type) h1
			(layer)1
				Element:h1
					Add a Staff Update
			Node:
			(type) c
			(layer)1
				Element:p
					To add a staff update make a POST request to the URL below with request data encoded in one of the supported formats. On success it returns the modified ticket.
			Node:
			(type) c
			(layer)1
				Element:p
					NOTE: file attachments are supported only when using Multipart Form Data
			Node:
			(type) c
			(layer)1
				Element:table
				Element:tr
				Element:td
				Element:b
					URL
				Element:td
					<base_uri> / <response_format> /ticket/<id>/staff_update/
				Element:tr
				Element:td
				Element:b
					HTTP Method
				Element:td
					POST
				Element:tr
				Element:td
				Element:b
					Request Data
				Element:td
					Add Staff Update
				Element:tr
				Element:td
				Element:b
					Response Data
				Element:td
					Ticket
			Node:
			(type) c
			(layer)1
				Element:h3
					Data Structure
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					JSON
			Node:
			(type) c
			(layer)1
				Element:pre
			Node:
			(type) h1
			(layer)1
				Element:h1
					Add a Staff Private Note
			Node:
			(type) c
			(layer)1
				Element:p
					To add a staff private note make a POST request to the URL below with request data encoded in one of the supported formats. On success it returns the modified ticket.
			Node:
			(type) c
			(layer)1
				Element:table
				Element:tr
				Element:td
				Element:b
					URL
				Element:td
					<base_uri> / <response_format> /ticket/<id>/staff_pvtnote/
				Element:tr
				Element:td
				Element:b
					HTTP Method
				Element:td
					POST
				Element:tr
				Element:td
				Element:b
					Request Data
				Element:td
					Add Staff Private Note
				Element:tr
				Element:td
				Element:b
					Response Data
				Element:td
					Ticket
			Node:
			(type) c
			(layer)1
				Element:h3
					Data Structure
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					JSON
			Node:
			(type) c
			(layer)1
				Element:pre
			Node:
			(type) h1
			(layer)1
				Element:h1
					Add a User Reply
			Node:
			(type) c
			(layer)1
				Element:p
					To add a user reply make a POST request to the URL below with request data encoded in one of the supported formats. On success it returns the modified ticket.
			Node:
			(type) c
			(layer)1
				Element:p
					NOTE: file attachments are supported only when using Multipart Form Data
			Node:
			(type) c
			(layer)1
				Element:table
				Element:tr
				Element:td
				Element:b
					URL
				Element:td
					<base_uri> / <response_format> /ticket/<id>/user_reply/
				Element:tr
				Element:td
				Element:b
					HTTP Method
				Element:td
					POST
				Element:tr
				Element:td
				Element:b
					Request Data
				Element:td
					Add User Reply
				Element:tr
				Element:td
				Element:b
					Response Data
				Element:td
					Ticket
			Node:
			(type) c
			(layer)1
				Element:h3
					Data Structure
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					JSON
			Node:
			(type) c
			(layer)1
				Element:pre
			Node:
			(type) h1
			(layer)1
				Element:h1
					Search Tickets
			Node:
			(type) c
			(layer)1
				Element:table
				Element:tr
				Element:td
				Element:b
					URL
				Element:td
					<base_uri> / <response_format> /tickets/ ?q=<querystring>
				Element:tr
				Element:td
				Element:b
					HTTP Method
				Element:td
					GET
				Element:tr
				Element:td
				Element:b
					Request Data
				Element:td
					<querystring> can be replaced with just a single search keyword, or you can use the search syntax same as the one generated by the advanced search in the HappyFox User Interface.
				Element:br
				Element:p
					Example of a query string: contact:Scott(scott@example.com) priority:Normal solve
				Element:tr
				Element:td
				Element:b
					Response Data
				Element:td
					List of tickets matching the search criteria
			Node:
			(type) c
			(layer)1
				Element:h3
					Advanced Search Keywords
			Node:
			(type) c
			(layer)1
				Element:table
				Element:tr
				Element:td
				Element:b
					Keyword
				Element:td
					Type
				Element:td
					Description
				Element:tr
				Element:td
					id
				Element:td
					String
				Element:td
					List of ticket ids separated by comma. eg "q=id:7095,7094"
				Element:tr
				Element:td
					subscribed
				Element:td
					Boolean
				Element:td
				Element:tr
				Element:td
					unresponded
				Element:td
					Boolean
				Element:td
				Element:tr
				Element:td
					breached
				Element:td
					Boolean
				Element:td
				Element:tr
				Element:td
					has_attachments
				Element:td
					Boolean
				Element:td
				Element:tr
				Element:td
					tag
				Element:td
					String
				Element:td
					Comma separated values
				Element:tr
				Element:td
					duedate
				Element:td
					String
				Element:td
					Accepted values: today / yesterday / tomorrow / next 7 days / overdue (get all tickets that are overdue)
				Element:tr
				Element:td
					priority
				Element:td
					String
				Element:td
					Name of priority
				Element:tr
				Element:td
					status
				Element:td
					String
				Element:td
					Name of status
				Element:tr
				Element:td
					assignee
				Element:td
					String
				Element:td
					Values: none (unassigned tickets)/ any (assigned tickets)/ some keyword identifying staff like first name, last name, username, email, etc
				Element:tr
				Element:td
					group
				Element:td
					String
				Element:td
					Values: none(contact is not part of any group) / any (contact is part of a group) / name of contact group
				Element:tr
				Element:td
					contact
				Element:td
					String
				Element:td
					Identifying keyword like name of contact, email or phone number.
				Element:tr
				Element:td
					Custom Field names
				Element:td
					String
				Element:td
					Format: "< custom field name >: < custom field value >". Eg "Address: Georgetown". You can search by contact and ticket custom fields
			Node:
			(type) c
			(layer)1
				Element:h3
					Data Structure
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					JSON
			Node:
			(type) c
			(layer)1
				Element:pre
			Node:
			(type) h1
			(layer)1
				Element:h1
					Summary Information for All Tickets
			Node:
			(type) c
			(layer)1
				Element:table
				Element:tr
				Element:td
				Element:b
					URL
				Element:td
					<base_uri> / <response_format> / tickets / ?show_updates=0
				Element:tr
				Element:td
				Element:b
					HTTP Method
				Element:td
					GET
				Element:tr
				Element:td
				Element:b
					Response Data
				Element:td
					List of tickets without any updates
			Node:
			(type) c
			(layer)1
				Element:h3
					Data Structure
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					JSON
			Node:
			(type) c
			(layer)1
				Element:pre
			Node:
			(type) h1
			(layer)1
				Element:h1
					Summary Information for One Ticket
			Node:
			(type) c
			(layer)1
				Element:table
				Element:tr
				Element:td
				Element:b
					URL
				Element:td
					<base_uri> / <response_format> /ticket / <id> / ?show_updates=0
				Element:tr
				Element:td
				Element:b
					HTTP Method
				Element:td
					GET
				Element:tr
				Element:td
				Element:b
					Response Data
				Element:td
					Ticket without any updates
			Node:
			(type) c
			(layer)1
				Element:h3
					Data Structure
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					JSON
			Node:
			(type) c
			(layer)1
				Element:pre
