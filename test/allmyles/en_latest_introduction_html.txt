Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					Introduction
				Element:a
					¶
			Node:
			(type) c
			(layer)1
				Element:p
					We highly recommend you to read at least
				Element:a
					before jumping into the API reference, as it contains information about problems often encountered by developers working with our API that are not immediately apparent.
				Element:span
					the ‘Common Gotchas’ section below
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Reading This Documentation
							Element:a
								¶
						Node:
						(type) c
						(layer)2
							Element:p
								For the most part, it should be rather easy to understand the documentation. Two things that might require explanation are:
						Node:
						(type) c
						(layer)2
							Element:blockquote
							Element:ul
							Element:li
							Element:p
								A colon in a URL path denotes a variable; in the path
							Element:code
								the entirety of
							Element:span
								/flights/:booking_id
							Element:code
								should be replaced by a booking ID, as such:
							Element:span
								:booking_id
							Element:code
							Element:span
								/flights/8986210d-7e2f-4481-a29f-846ab386ddac
							Element:li
							Element:p
								When declaring the type of a variable, the symbol
							Element:code
								after a type means that the variable’s type is an array, containing items of the type named before the symbol.
							Element:span
								[ ]
							Element:p
								For example, a
							Element:code
								variable can look like the following:
							Element:span
								String [ ]
							Element:code
								.
							Element:span
								["abc",
							Element:span
								"def",
							Element:span
								""]
						Node:
						(type) c
						(layer)2
							Element:span
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Common Gotchas
							Element:a
								¶
						Node:
						(type) c
						(layer)2
							Element:blockquote
							Element:ul
							Element:li
							Element:p
								The staging API returns search results from all available airlines, but only the following results are guaranteed to work when booking in staging:
							Element:blockquote
							Element:ul
							Element:li
								Budapest to London & London to Budapest British Airways flights, to filter for these, include
							Element:code
								in your search request.
							Element:span
								"fromLocation":
							Element:span
								"BUD",
							Element:span
								"toLocation":
							Element:span
								"LON",
							Element:span
								"preferredAirlines":
							Element:span
								["BA"]
							Element:li
								Budapest to London & London to Budapest Low Cost Carrier flights, to filter for these, include
							Element:code
								in your search request.
							Element:span
								"fromLocation":
							Element:span
								"BUD",
							Element:span
								"toLocation":
							Element:span
								"LON",
							Element:span
								"providerType":
							Element:span
								"OnlyLowCost"
							Element:li
							Element:p
								Workflows expire 17 minutes after a request arrives. Any requests for the same session will return an HTTP 412 error.
							Element:li
							Element:p
								All requests in the booking flow are applied to the last received search request. This means that if a passenger is searching for flights in multiple tabs, they will be able to proceed with booking only in the tab they last searched in.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Request Headers
							Element:a
								¶
						Node:
						(type) c
						(layer)2
							Element:p
								In addition to standard HTTP headers, the following ones are of interest:
						Node:
						(type) c
						(layer)2
							Element:blockquote
							Element:ul
							Element:li
							Element:strong
								Accept
								: The format the response data should be sent in. Currently we support JSON, specified as
							Element:code
								, and XML, specified as
							Element:span
								application/json
							Element:code
								.
							Element:span
								application/json
							Element:li
							Element:strong
								Cookie
								: A unique identifier for the customer’s session, this is typically the randomly generated session cookie saved on the customer’s computer.
							Element:li
							Element:strong
								X-Auth-Token
								: The API key you received after signing up on
							Element:a
								the Allmyles home page
								(ex.
							Element:code
								.)
							Element:span
								12345678-1234
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Generic Response Codes
							Element:a
								¶
						Node:
						(type) c
						(layer)2
							Element:p
								The documentation has a number of different status codes listed as possible reponses to certain requests that are specific to that response. In addition to those, we can also return the following status codes:
						Node:
						(type) c
						(layer)2
							Element:blockquote
							Element:ul
							Element:li
							Element:strong
								200 OK
								: The request has succeeded.
							Element:li
							Element:strong
								202 Accepted
								: The request has been accepted for processing but the processing is not yet completed.
							Element:li
							Element:strong
								301 Moved Permanently
								: The resource at the endpoint URI has been moved permanently and the client must use the new address in the future.
							Element:li
							Element:strong
								400 Bad Request
								: Invalid request syntax, the error message will in most cases contain the exact reason. The client must not repeat the request in the same form.
							Element:li
							Element:strong
								403 Forbidden
								: The client failed to authorize themselves with a valid API key, and the request was rejected.
							Element:li
							Element:strong
								404 Not Found
								: Request contains an invalid URI endpoint, or the given resource does not exist.
							Element:li
							Element:strong
								413 Rate Control
								: Request limitation threshold violated.
							Element:li
							Element:strong
								500 Internal Server Error
								: The server has failed to complete the sent request—please report such errors to our support team at
							Element:a
								support
								!
							Element:span
								@
								allmyles
							Element:span
								.
								com
							Element:li
							Element:strong
								502 Bad Gateway
								: The backend servers are down, or an update process is under way.
							Element:li
							Element:strong
								503 Service Unavailable
								: Servers are accessible, but overloaded. Try and repeat the request later.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Displaying Errors to Users
							Element:a
								¶
						Node:
						(type) c
						(layer)2
							Element:p
								When displaying errors to your users you must:
						Node:
						(type) c
						(layer)2
							Element:blockquote
							Element:ul
							Element:li
							Element:strong
								Not
								directly display our errors on your frontend.
							Element:li
								Show a
							Element:strong
								meaningful
								error message to the user.
							Element:li
								Include the
							Element:strong
								session cookie
								in the error message as an error code or error identifier.
						Node:
						(type) c
						(layer)2
							Element:p
								Note
						Node:
						(type) c
						(layer)2
							Element:p
								Our error messages are meant to be information rich for the developers and are not optimal for direct reproduction on the frontend. They might contain information that is seen as cryptic to your users which is why we require that you make them more user friendly and fitting for your service.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Asynchronous Calls
							Element:a
								¶
						Node:
						(type) c
						(layer)2
							Element:p
								Long running requests, such as a flight search use asynchronous calls. This means that the the Allmyles API can—and in most cases, will—respond to the first request with an HTTP 202 status code, and no content. When this happens, the client is expected to periodically send the same request to the API, with a reasonable delay between the requests (5 seconds is a good baseline for this.) The Allmyles API will then reply with an HTTP 202 response code if processing is still underway, or any other status code and a content body if it is done processing the request.
						Node:
						(type) c
						(layer)2
							Element:p
								Note
						Node:
						(type) c
						(layer)2
							Element:p
								It is a good idea to implement a timeout on the client side that checks for infinite loops in this process, as the server theoretically could fail in a way that it won’t stop returning 202 status codes.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Quick Start
							Element:a
								¶
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Configuration
										Element:a
											¶
									Node:
									(type) c
									(layer)3
										Element:p
											Create a localrc file with the following:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
										Element:span
											#!/bin/bash
										Element:span
											SERVICE_ENDPOINT
										Element:span
											={
											ALLMYLES-API-URL-GOES-HERE
										Element:span
											}
										Element:span
											TENANT_KEY
										Element:span
											={
											YOUR-TENANTKEY-GOES-HERE
										Element:span
											}
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Search Flights
										Element:a
											¶
									Node:
									(type) c
									(layer)3
										Element:p
											The following script starts a flight search, and then checks if a result is available every 5 or so seconds.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
										Element:span
											#!/bin/bash
										Element:span
											source
											localrc
										Element:span
											read
											-d
										Element:span
											''
											PAYLOAD
										Element:span
											<<EOF
										Element:span
											{
										Element:span
											"fromLocation": "BUD",
										Element:span
											"toLocation": "LON",
										Element:span
											"departureDate": "$(date -v+7d -u +'%Y-%m-%dT%H:%M:%SZ')",
										Element:span
											"resultTypes": "default",
										Element:span
											"returnDate": "$(date -v+14d -u +'%Y-%m-%dT%H:%M:%SZ')",
										Element:span
											"persons": [
										Element:span
											{
										Element:span
											"passengerType": "ADT",
										Element:span
											"quantity": 1
										Element:span
											}
										Element:span
											],
										Element:span
											"preferredAirlines": ["BA"]
										Element:span
											}
										Element:span
											EOF
										Element:span
											PAYLOAD
										Element:span
											=
										Element:span
											$(
										Element:span
											echo
										Element:span
											$PAYLOAD
										Element:span
											)
										Element:span
											echo
										Element:span
											"Sending search request..."
										Element:span
											while
										Element:span
											true
										Element:span
											do
										Element:span
											echo
										Element:span
											"Checking for search response..."
										Element:span
											STATUS
										Element:span
											=
										Element:span
											$(
										Element:span
											echo
										Element:span
											"
										Element:span
											$PAYLOAD
										Element:span
											"
										Element:span
											|
											curl
										Element:span
											$*
										Element:span
											\
											-s
										Element:span
											\
											-H
										Element:span
											"X-Auth-Token:
										Element:span
											$TENANT_KEY
										Element:span
											"
										Element:span
											\
											-H
										Element:span
											"Content-Type: application/json"
										Element:span
											\
											-H
										Element:span
											"Accept: application/json"
										Element:span
											\
											-H
										Element:span
											"Cookie: 12345678-02"
										Element:span
											\
											-d @-
										Element:span
											$SERVICE_ENDPOINT
											/flights
										Element:span
											\
											-w
										Element:span
											"%{http_code}"
										Element:span
											\
											-o /dev/null
										Element:span
											)
										Element:span
											if
										Element:span
											(
										Element:span
											[
										Element:span
											$STATUS
										Element:span
											==
										Element:span
											"200"
										Element:span
											]
										Element:span
											)
										Element:span
											then
										Element:span
											break
										Element:span
											fi
											sleep 5
										Element:span
											done
										Element:span
											echo
										Element:span
											"Search response received!"
										Element:span
											RESPONSE
										Element:span
											=
										Element:span
											$(
										Element:span
											echo
										Element:span
											"
										Element:span
											$PAYLOAD
										Element:span
											"
										Element:span
											|
											curl
										Element:span
											$*
										Element:span
											\
											-H
										Element:span
											"X-Auth-Token:
										Element:span
											$TENANT_KEY
										Element:span
											"
										Element:span
											\
											-H
										Element:span
											"Content-Type: application/json"
										Element:span
											\
											-H
										Element:span
											"Accept: application/json"
										Element:span
											\
											-H
										Element:span
											"Cookie: 12345678-02"
										Element:span
											\
											-d @-
										Element:span
											$SERVICE_ENDPOINT
											/flights
										Element:span
											)
										Element:span
											echo
										Element:span
											BOOKING_ID
										Element:span
											=
										Element:span
											$(
										Element:span
											echo
										Element:span
											$RESPONSE
										Element:span
											|
											sed -n
										Element:span
											's/.*\"bookingId\": \"\([A-Za-z1-9\-_]*\)\".*/\1/p'
										Element:span
											)
											>> localrc
										Element:span
											echo
										Element:span
											$RESPONSE
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Get Flight Details
										Element:a
											¶
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
										Element:span
											#!/bin/bash
										Element:span
											source
											localrc curl
										Element:span
											$*
										Element:span
											\
											-H
										Element:span
											"X-Auth-Token:
										Element:span
											$TENANT_KEY
										Element:span
											"
										Element:span
											\
											-H
										Element:span
											"Content-Type: application/json"
										Element:span
											\
											-H
										Element:span
											"Accept: application/json"
										Element:span
											\
											-H
										Element:span
											"Cookie: 12345678-02"
										Element:span
											\
										Element:span
											$SERVICE_ENDPOINT
											/flights/
										Element:span
											$BOOKING_ID
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Book a Flight
										Element:a
											¶
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
										Element:span
											#!/bin/bash
										Element:span
											source
											localrc
										Element:span
											read
											-d
										Element:span
											''
											PAYLOAD
										Element:span
											<<EOF
										Element:span
											{
										Element:span
											"bookingId": "$BOOKING_ID",
										Element:span
											"passengers": [
										Element:span
											{
										Element:span
											"namePrefix": "MR",
										Element:span
											"firstName": "Lajos",
										Element:span
											"lastName": "Kovacs",
										Element:span
											"birthDate": "1911-01-01",
										Element:span
											"gender": "MALE",
										Element:span
											"passengerTypeCode": "ADT",
										Element:span
											"baggage": 0,
										Element:span
											"email": "
										Element:a
											[email protected]
											",
										Element:span
											"document": {
										Element:span
											"type": "Passport",
										Element:span
											"id": "123",
										Element:span
											"issueCountry": "HU",
										Element:span
											"dateOfExpiry": "2015-12-01"
										Element:span
											}
										Element:span
											}
										Element:span
											],
										Element:span
											"contactInfo": {
										Element:span
											"name": "Kovacs Lajos",
										Element:span
											"address": {
										Element:span
											"countryCode": "HU",
										Element:span
											"cityName": "Budapest",
										Element:span
											"addressLine1": "Xasd utca 13."
										Element:span
											},
										Element:span
											"phone": {
										Element:span
											"countryCode": 36,
										Element:span
											"areaCode": 30,
										Element:span
											"phoneNumber": 1234567
										Element:span
											},
										Element:span
											"email": "
										Element:a
											[email protected]
											"
										Element:span
											},
										Element:span
											"billingInfo": {
										Element:span
											"name": "Kovacs Lajos",
										Element:span
											"address": {
										Element:span
											"countryCode": "HU",
										Element:span
											"cityName": "Budapest",
										Element:span
											"addressLine1": "XBSD utca 23."
										Element:span
											}
										Element:span
											}
										Element:span
											}
										Element:span
											EOF
										Element:span
											echo
										Element:span
											"
										Element:span
											$PAYLOAD
										Element:span
											"
										Element:span
											|
											curl
										Element:span
											$*
										Element:span
											\
											-H
										Element:span
											"X-Auth-Token:
										Element:span
											$TENANT_KEY
										Element:span
											"
										Element:span
											\
											-H
										Element:span
											"Content-Type: application/json"
										Element:span
											\
											-H
										Element:span
											"Accept: application/json"
										Element:span
											\
											-H
										Element:span
											"Cookie: 12345678-02"
										Element:span
											\
											-d @-
										Element:span
											$SERVICE_ENDPOINT
											/books
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Create Your Ticket
										Element:a
											¶
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
										Element:span
											#!/bin/bash
										Element:span
											source
											localrc curl
										Element:span
											$*
										Element:span
											\
											-H
										Element:span
											"X-Auth-Token:
										Element:span
											$TENANT_KEY
										Element:span
											"
										Element:span
											\
											-H
										Element:span
											"Content-Type: application/json"
										Element:span
											\
											-H
										Element:span
											"Accept: application/json"
										Element:span
											\
											-H
										Element:span
											"Cookie: 12345678-02"
										Element:span
											\
										Element:span
											$SERVICE_ENDPOINT
											/tickets/
										Element:span
											$BOOKING_ID
									Node:
									(type) c
									(layer)3
										Element:footer
										Element:a
											Next
										Element:span
										Element:a
										Element:span
											Previous
										Element:hr
										Element:p
											© Copyright 2014, Allmyles Ltd.
											Built with
										Element:span
											Revision
										Element:code
											a31bef5d
											.
										Element:a
											Sphinx
											using a
										Element:a
											theme
											provided by
										Element:a
											Read the Docs
											.
									Node:
									(type) c
									(layer)3
										Element:span
										Element:span
											Read the Docs
											v: latest
										Element:span
									Node:
									(type) c
									(layer)3
										Element:dl
										Element:dt
											Versions
										Element:dd
										Element:a
											latest
									Node:
									(type) c
									(layer)3
										Element:dl
										Element:dt
											Downloads
										Element:dd
										Element:a
											pdf
										Element:dd
										Element:a
											htmlzip
										Element:dd
										Element:a
											epub
									Node:
									(type) c
									(layer)3
										Element:dl
										Element:dt
											On Read the Docs
										Element:dd
										Element:a
											Project Home
										Element:dd
										Element:a
											Builds
									Node:
									(type) c
									(layer)3
										Element:hr
											Free document hosting provided by
									Node:
									(type) c
									(layer)3
										Element:a
											Read the Docs
											.
