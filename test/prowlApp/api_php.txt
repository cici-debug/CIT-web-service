Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
				Element:a
				Element:span
					Prowl
			Node:
			(type) c
			(layer)1
				Element:a
					register
					•
			Node:
			(type) c
			(layer)1
				Element:a
					reset password
					•
			Node:
			(type) c
			(layer)1
				Element:a
					login
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:a
					Home
				Element:li
				Element:a
					Apps
				Element:li
				Element:a
					Help
				Element:li
				Element:a
					API
			Node:
			(type) c
			(layer)1
				Element:p
					This describes Prowl's third-party API. Users can find their API keys on the
				Element:a
					API keys page
					.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:a
					Changes
				Element:li
				Element:a
					API limits
				Element:li
				Element:a
					Methods
				Element:ul
				Element:li
				Element:a
					add (POST)
				Element:li
				Element:a
					verify (GET)
				Element:li
				Element:a
					retrieve/token (GET)
				Element:li
				Element:a
					retrieve/apikey (GET)
				Element:li
				Element:a
					Generic return format
				Element:li
				Element:a
					Libraries
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Changes
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:strong
								2011-01-30
								—Recommended server is
							Element:em
								api.prowlapp.com
								, for some simple SSL-cert checks which fail on wildcard.
							Element:li
							Element:strong
								2011-01-30
								—Added
							Element:a
								retrieve/token (GET)
								and
							Element:a
								retrieve/apikey (GET)
								, to allow applications to create API keys for users.
							Element:li
							Element:strong
								2011-01-28
								—Added ability to register and manage provider keys on the
							Element:a
								API keys
								page.
							Element:li
							Element:strong
								2011-01-26
								—Added
							Element:em
								url
								parameter to
							Element:a
								add (GET)
								in Prowl 1.2.
							Element:li
							Element:strong
								2011-01-22
								—Removed SSL requirement. Cool uses like
							Element:a
								micro-controllers
								need more flexibility. Please use SSL if you can.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Limits
						Node:
						(type) c
						(layer)2
							Element:p
								IP addresses are limited to 1000 API calls per hour which begins from the start of the first call. You can create a provider key at the
							Element:a
								API keys
								page, which will grant you a larger limit.
						Node:
						(type) c
						(layer)2
							Element:p
								If you are writing an application where the provider key will be user-visible in the source or object files, you should only use the provider key for methods that require the provider key, none of which cost API calls.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Methods
						Node:
						(type) c
						(layer)2
							Element:p
								SSL is
							Element:strong
								strongly recommended
								. All commands are sent to:
							Element:code
								https://api.prowlapp.com/publicapi/
								For example,
							Element:em
								method
							Element:em
								add
								is:
							Element:code
								https://api.prowlapp.com/publicapi/
								Square brackets next to parameters are maximum lengths in bytes. Parameters are required unless otherwise specified.
							Element:em
								add
						Node:
						(type) c
						(layer)2
							Element:p
								You should send all arguments in UTF-8 encoding. Some level of conversion is done if you provide other encoding, but it may not succeed.
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:a
								add (POST)
								— Add a notification to an API key.
							Element:li
							Element:a
								verify (GET)
								— Verify an API key is valid.
							Element:li
								Retrieving an API key:
							Element:ol
							Element:li
							Element:a
								retrieve/token (GET)
								— Get a registration token.
							Element:li
							Element:a
								retrieve/apikey (GET)
								— Get an API key from a registration token.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											add (POST)
									Node:
									(type) c
									(layer)3
										Element:p
											Add a notification for a particular user.
									Node:
									(type) c
									(layer)3
										Element:p
											You must provide either
										Element:strong
											event
											or
										Element:strong
											description
											or both.
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Input
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tr
													Element:td
													Element:strong
														apikey
														[unlimited]
													Element:td
														API keys separated by commas. Each API key is a 40-byte hexadecimal string.
													Element:br
													Element:br
														When using multiple API keys, you will only get a failure response if
													Element:strong
														all
														API keys are not valid.
													Element:tr
													Element:td
													Element:strong
														providerkey
														[40]
													Element:br
													Element:em
														Optional
													Element:td
														Your provider API key. Only necessary if you have been whitelisted.
													Element:tr
													Element:td
													Element:strong
														priority
													Element:br
													Element:em
														Optional
													Element:td
														Default value of 0 if not provided. An integer value ranging [-2, 2] representing:
													Element:ol
														Emergency priority messages may bypass quiet hours according to the user's settings.
													Element:li
														Very Low
													Element:li
														Moderate
													Element:li
														Normal
													Element:li
														High
													Element:li
														Emergency
													Element:tr
													Element:td
													Element:strong
														url
														[512]
													Element:br
													Element:em
														Optional
													Element:td
														The URL which should be attached to the notification.
													Element:br
													Element:br
														This will trigger a redirect when launched, and is viewable in the notification list.
													Element:tr
													Element:td
													Element:strong
														application
														[256]
													Element:td
														The name of your application or the application generating the event.
													Element:tr
													Element:td
													Element:strong
														event
														[1024]
													Element:td
														The name of the event or subject of the notification.
													Element:tr
													Element:td
													Element:strong
														description
														[10000]
													Element:td
														A description of the event, generally terse.
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Success output
												Node:
												(type) c
												(layer)4
													Element:p
														No modification from
													Element:a
														generic format
														.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											verify (GET)
									Node:
									(type) c
									(layer)3
										Element:p
											Verify an API key is valid.
									Node:
									(type) c
									(layer)3
										Element:p
											For the sake of adding a notification
										Element:em
											do not
											call verify first; it costs you an API call. You should only use verify to confirm an API key is valid in situations like a user entering an API key into your program. If it's not valid while posting the notification, you will get the appropriate error.
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Input
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tr
													Element:td
													Element:strong
														apikey
														[40]
													Element:td
														The user's API key. A 40-byte hexadecimal string.
													Element:tr
													Element:td
													Element:strong
														providerkey
														[40]
													Element:br
													Element:em
														Optional
													Element:td
														Your provider API key. Only necessary if you have been whitelisted.
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Success output
												Node:
												(type) c
												(layer)4
													Element:p
														No modification from
													Element:a
														generic format
														.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											retrieve/token (GET) [no call cost]
									Node:
									(type) c
									(layer)3
										Element:p
											Get a registration token for use in
										Element:em
											retrieve/apikey
											and the associated URL for the user to approve the request.
									Node:
									(type) c
									(layer)3
										Element:p
											This is the first step in fetching an API key for a user. The token retrieved expires after 24 hours.
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Input
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tr
													Element:td
													Element:strong
														providerkey
														[40]
													Element:td
														Your provider API key. Required.
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Success output
												Node:
												(type) c
												(layer)4
													Element:pre
														<?xml version="1.0" encoding="UTF-8"?><prowl> <success code="200" remaining="
													Element:strong
														REMAINING
														" resetdate="
													Element:strong
														TIMESTAMP
														" /> <retrieve token="
													Element:strong
														TOKEN
														" url="
													Element:strong
														URL
														" /> </prowl>
												Node:
												(type) c
												(layer)4
													Element:p
														Fields in the response are as follows:
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
													Element:strong
														is the URL you must direct the user to for them to complete the operation.
													Element:code
														URL
													Element:li
													Element:strong
														is the token associated with the request. You must save this because it is required for
													Element:code
														TOKEN
													Element:a
														retrieve/apikey (GET)
														.
													Element:li
														The rest are as defined in the
													Element:a
														generic format
														.
												Node:
												(type) c
												(layer)4
													Element:p
														When the user completes the retrieve operation, they will be presented a link back to your application if you set one. The query string "token" will be set in the return URL with the
													Element:strong
														above.
													Element:code
														TOKEN
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											retrieve/apikey (GET) [no call cost]
									Node:
									(type) c
									(layer)3
										Element:p
											Get an API key from a registration token retrieved in
										Element:em
											retrieve/token
											. The user must have approved your request first, or you will get an error response.
									Node:
									(type) c
									(layer)3
										Element:p
											This is the second/final step in fetching an API key for a user.
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Input
												Node:
												(type) c
												(layer)4
													Element:table
													Element:tr
													Element:td
													Element:strong
														providerkey
														[40]
													Element:td
														Your provider API key. Required.
													Element:tr
													Element:td
													Element:strong
														token
														[40]
													Element:td
														The token returned from
													Element:em
														retrieve/token
														. Required.
									Node:
									(type) c
									(layer)3
												Node:
												(type) c
												(layer)4
													Element:h4
														Success output
												Node:
												(type) c
												(layer)4
													Element:pre
														<?xml version="1.0" encoding="UTF-8"?><prowl> <success code="200" remaining="
													Element:strong
														REMAINING
														" resetdate="
													Element:strong
														TIMESTAMP
														" /> <retrieve apikey="
													Element:strong
														APIKEY
														" /> </prowl>
												Node:
												(type) c
												(layer)4
													Element:p
														Fields in the response are as follows:
												Node:
												(type) c
												(layer)4
													Element:ul
													Element:li
													Element:strong
														is the new API key associated with the user.
													Element:code
														APIKEY
													Element:li
														The rest are as defined in the
													Element:a
														generic format
														.
												Node:
												(type) c
												(layer)4
													Element:p
														At any point, the user can delete the API key. Be prepared to prompt the user to retrieve a new API key if they do.
												Node:
												(type) c
												(layer)4
													Element:p
														If the user already had an API key requested using your provider key, you will get the same API key back if it still exists.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Generic return format
						Node:
						(type) c
						(layer)2
							Element:p
								You should always use an XML parser. While the structure itself won't change, the format or attributes might in a way that breaks direct string parsing.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Errors
									Node:
									(type) c
									(layer)3
										Element:p
											An error will return the following format, as well as an HTTP status code equal to
										Element:code
											.
										Element:strong
											ERRORCODE
									Node:
									(type) c
									(layer)3
										Element:pre
											<?xml version="1.0" encoding="UTF-8"?><prowl> <error code="
										Element:strong
											ERRORCODE
											">
										Element:strong
											ERRORMESSAGE
											</error> </prowl>
									Node:
									(type) c
									(layer)3
										Element:code
											can be one of the following:
										Element:strong
											ERRORCODE
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:code
											400
											Bad request, the parameters you provided did not validate, see
										Element:code
											.
										Element:strong
											ERRORMESSAGE
										Element:li
										Element:code
											401
											Not authorized, the API key given is not valid, and does not correspond to a user.
										Element:li
										Element:code
											406
											Not acceptable, your IP address has exceeded the API limit.
										Element:li
										Element:code
											409
											Not approved, the user has yet to approve your retrieve request.
										Element:li
										Element:code
											500
											Internal server error, something failed to execute properly on the Prowl side.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Success
									Node:
									(type) c
									(layer)3
										Element:p
											A success will return the following format, as well as the HTTP status code
										Element:code
											200
											. Some methods add additional output, which will be detailed in their example response. This is the generic success information.
									Node:
									(type) c
									(layer)3
										Element:pre
											<?xml version="1.0" encoding="UTF-8"?><prowl> <success code="200" remaining="
										Element:strong
											REMAINING
											" resetdate="
										Element:strong
											TIMESTAMP
											" /> </prowl>
									Node:
									(type) c
									(layer)3
										Element:p
											Fields in the response are as follows:
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:code
											is the number of API calls you have left.
										Element:strong
											REMAINING
										Element:li
										Element:code
											is in UTC, and is the time your remaining resets.
										Element:strong
											TIMESTAMP
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Libraries
						Node:
						(type) c
						(layer)2
							Element:p
								There are different libraries and scripts available which use the API in an array of languages.
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
								Ruby
							Element:ul
							Element:li
							Element:a
								prowler
								by Andrew White
							Element:li
							Element:a
								Prowly
								by Rafael Magaña
							Element:li
							Element:a
								prowl
								by August Lilleaas
							Element:li
								PHP
							Element:ul
							Element:li
							Element:a
								ProwlPHP
								maintained by Mario Mueller [Originally by
							Element:a
								Fenric
								] (Library)
							Element:li
							Element:a
								Prowl for FuelPHP
								by egersdorfer
							Element:li
							Element:a
								PHP-Prowl
								maintained by Scott Wilcox
							Element:li
								Perl
							Element:ul
							Element:li
							Element:a
								WebService::Prowl
								by Masayoshi Sekimura (Module)
							Element:li
							Element:a
								prowl.pl
								(Official; Command line)
							Element:li
								Python
							Element:ul
							Element:li
							Element:a
								Pyrowl
								by Damien Degois
							Element:li
							Element:a
								prowlpy
								by Jacob Burch
							Element:li
								Node.js
							Element:ul
							Element:li
							Element:a
								node-prowl
								by Jonas Arnklint
							Element:li
								Objective-C
							Element:ul
							Element:li
							Element:a
								ProwlKit
								by infincia
							Element:li
								Java
							Element:ul
							Element:li
							Element:a
								jProwlAPI
								by Christian Ternes
							Element:li
							Element:a
								jProwlClient
								by Marco Bienlein
							Element:li
								C
							Element:ul
							Element:li
							Element:a
								Prowl-for-C
								by Jorryt Dijkstra (requires OpenSSL)
							Element:li
							Element:a
								CProwl
								by Ryan Phillips (Command-line)
							Element:li
								.NET
							Element:ul
							Element:li
							Element:a
								Prowlin
								by Niklas Nihlén
							Element:li
							Element:a
								Prowl.NET
								by Casey Watson
							Element:li
								Go
							Element:ul
							Element:li
							Element:a
								Goprowl
								by Yanko
							Element:li
								MQL4
							Element:ul
							Element:li
							Element:a
								Prowllink
								by Osman Taskin
							Element:li
								Linden Scripting Language
							Element:ul
							Element:li
							Element:a
								Prowler
								by Kira Komarov
							Element:li
								PowerShell
							Element:ul
							Element:li
							Element:a
								PowerProwl
								by Alex McFarland
							Element:li
								Arduino
							Element:ul
							Element:li
							Element:a
								Avviso
								by Mike Colagrosso (wrapper of jProwlAPI)
							Element:li
								Lasso
							Element:ul
							Element:li
							Element:a
								SHp_prowl
								by Lieven Gekiere
							Element:li
								Groovy
							Element:ul
							Element:li
							Element:a
								GProwl
								by Niels Peter Strandberg
							Element:li
								WHMCS
							Element:ul
							Element:li
							Element:a
								Pusher
								by Josh Bonfield
						Node:
						(type) c
						(layer)2
							Element:a
								Privacy Policy
