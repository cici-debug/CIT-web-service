Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					You Don’t Need a CRM! API
			Node:
			(type) c
			(layer)1
				Element:aside
				Element:strong
					This is the documentation of the version 2 of the API. To use this API you have to add `Accept: application/ydncrm.v2` in the headers of all your requests. If you do not add this header, you will use the default version of the API which is version 1.
			Node:
			(type) c
			(layer)1
				Element:p
				Element:strong
					To check what has been changed between version 1 and version 2, please visit the list of modifications
				Element:a
					Migration v1 to v2
					.
			Node:
			(type) c
			(layer)1
				Element:p
					Welcome to the You Don’t Need a CRM! API! You can use this API to access data of your account. It will enable you to create, update and retrieve leads and users. It will also allow you to get notifications when particular events happen, thanks to our Webhooks.
			Node:
			(type) c
			(layer)1
				Element:p
					We have examples with shell commands and Ruby. You can view code examples in the dark area to the right, and you can switch of programming language of the examples with the tabs in the top right. All the examples are made twice, one with an API key and one with the USER token to help you understand some parameters in the requests.
			Node:
			(type) c
			(layer)1
				Element:p
					This is a traditional and simple REST API. It means that requests are passed to our servers through https (secure http) following a standard scheme. Each request is independant from the previous one (stateless) and it’s language independant. To use this API you will need:
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					your account address wich is of the form https://YOUR_SLUG_HERE.leadalead.com
				Element:li
					a token that can be a private key generated by your administrator from the admin section of your account or a user token returned by a login
			Node:
			(type) c
			(layer)1
				Element:p
					There are two ways to connect on the API and it depends on what you intend to do:
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					if the user who makes the request is not important, use the API key that makes the request as the first admin user of the account.
				Element:li
					if the requests have to be made by a specific a user, use the login method that will give you a USER_TOKEN to make the requests. The requests in this case will depend on the rights of the user meaning if the user is not admin, he/she could not access of admin actions.
			Node:
			(type) c
			(layer)1
				Element:p
				Element:strong
					IMPORTANT
					: Your private keys are like your admin password. These keys should only be used for authentification. This key is only for signing purpose.
			Node:
			(type) c
			(layer)1
				Element:p
				Element:strong
					Note
					: The generated API key is a key generated by you from your account to access the API. You can generate one different key for each application. You can delete it at any time and generate a new one if necessary. When a key is deleted, the application using this key won’t be able to connect to your account anymore and won’t access to any of your data.
			Node:
			(type) c
			(layer)1
				Element:p
				Element:strong
					Note 2
					: The user token is a token returned by a login method and is available for 30 days or until you logout.
			Node:
			(type) c
			(layer)1
				Element:p
					Each time you want to access, add, modify or delete something through the API you have to:
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					Use one of the generated keys from your account or the user token
				Element:li
					Use an
				Element:strong
					https request
					to call the API method you want with the one of the key, your parameters and by using the correct http method
			Node:
			(type) c
			(layer)1
				Element:p
					REST defines which http method is to be used depending on wich kind of request your performing.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					To read something use GET method
				Element:li
					To create something use POST method
				Element:li
					To update something use PUT method
				Element:li
					To destroy something use DELETE method
			Node:
			(type) c
			(layer)1
				Element:p
					If you’re not familiar with REST and HTTP methods, don’t worry it’s very simple and our documentation is well explained (at least we do our best). You can also check out this nice introduction to REST philosophy at
				Element:a
					http://rest.elkstein.org/
					.
			Node:
			(type) c
			(layer)1
				Element:p
					Data are sent to and retrieved from our servers in JSON format (
				Element:a
					http://json.org
					for more info).
			Node:
			(type) c
			(layer)1
				Element:p
					If you’re only interested in creating leads you can also check our mail API wich do not need any coding skill.
			Node:
			(type) c
			(layer)1
				Element:p
					Don’t hesitate to contact us at
				Element:a
					support@youdontneedacrm.com
					if you need any help and/or you would like to have more data access from the API.
			Node:
			(type) h1
			(layer)1
				Element:h1
					Authentication
			Node:
			(type) c
			(layer)1
				Element:p
					In order to secure your transaction, we ask you to use one of your
				Element:strong
					generated api key
					or your
				Element:strong
					user token
					with any
				Element:strong
					https
					transaction.
			Node:
			(type) c
			(layer)1
				Element:p
					In this version 2 of the API, you have the choice of making your requests:
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					user not dependent using one of your
				Element:strong
					API key
					: it is for the account and it grants you admin rights. Meaning if you create a lead for example with this api key without specifying a user, the lead won’t belong to any specific user and will appear in the interface as an unassigned lead.
				Element:li
					user dependent using a
				Element:strong
					USER token
					: all the requests will use the privacy of the users and some requests won;t be allowed depending of the user rights.
			Node:
			(type) c
			(layer)1
				Element:aside
					You have to add the api key or the user token for each https request, otherwise the request will be rejected. The preferred way to send us the api key or the user token is through the header of the request. However, if it is easier for you, instead of passing the api key or user token in the header you can add it as parameter of the request. But remember, you must use **https** to access our API. This is the only way to **secure your api key or user token**. We won’t respond to any http request to our API.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Ping API
						Node:
						(type) c
						(layer)2
							Element:blockquote
							Element:p
								With the API key
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								curl -H
							Element:span
								"Accept: application/ydncrm.v2"
								-H
							Element:span
								"X-API-KEY: 91Jy7XxreymBRMASfTF8"
							Element:span
								"https://YOUR_SLUG_HERE.leadalead.com/api/ping"
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
								require
							Element:span
								'rest-client'
							Element:span
								key
							Element:span
								=
							Element:span
								"91Jy7XxreymBRMASfTF8"
							Element:span
								header
							Element:span
								=
							Element:span
								{
							Element:span
								'X-API-KEY'
							Element:span
								=>
							Element:span
								key
							Element:span
								,
							Element:span
								content_type: :json
							Element:span
								,
							Element:span
								accept:
							Element:span
								"application/json application/ydncrm.v2"
							Element:span
								}
							Element:span
								response
							Element:span
								=
							Element:span
								RestClient
							Element:span
								.
							Element:span
								get
							Element:span
								"https://YOUR_SLUG_HERE.leadalead.com/api/ping"
							Element:span
								,
							Element:span
								header
							Element:span
								JSON
							Element:span
								.
							Element:span
								parse
							Element:span
								(
							Element:span
								response
							Element:span
								)
						Node:
						(type) c
						(layer)2
							Element:blockquote
							Element:p
								With the USER token
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								curl -H
							Element:span
								"Accept: application/ydncrm.v2"
								-H
							Element:span
								"X-USER-TOKEN: ITd-Jb3EC_nCXI2fez4hhg"
							Element:span
								"https://YOUR_SLUG_HERE.leadalead.com/api/ping"
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
								require
							Element:span
								'rest-client'
							Element:span
								token
							Element:span
								=
							Element:span
								"ITd-Jb3EC_nCXI2fez4hhg"
							Element:span
								header
							Element:span
								=
							Element:span
								{
							Element:span
								'X-USER-TOKEN'
							Element:span
								=>
							Element:span
								token
							Element:span
								,
							Element:span
								content_type: :json
							Element:span
								,
							Element:span
								accept:
							Element:span
								"application/json application/ydncrm.v2"
							Element:span
								}
							Element:span
								response
							Element:span
								=
							Element:span
								RestClient
							Element:span
								.
							Element:span
								get
							Element:span
								"https://YOUR_SLUG_HERE.leadalead.com/api/ping"
							Element:span
								,
							Element:span
								header
							Element:span
								JSON
							Element:span
								.
							Element:span
								parse
							Element:span
								(
							Element:span
								response
							Element:span
								)
						Node:
						(type) c
						(layer)2
							Element:blockquote
							Element:p
								The above commands return JSON structure like this:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
								{
							Element:span
								"status"
							Element:span
								:
							Element:span
								200
							Element:span
								,
							Element:span
								"message"
							Element:span
								:
							Element:span
								"Your API key is correct."
							Element:span
								}
							Element:span
						Node:
						(type) c
						(layer)2
							Element:blockquote
							Element:p
								In case of error you could get these responses
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
								{
							Element:span
							Element:span
								"error"
							Element:span
								:
							Element:span
							Element:span
								"401"
							Element:span
								,
							Element:span
							Element:span
								"message"
							Element:span
								:
							Element:span
							Element:span
								"Unauthorized: api key [missing | invalid]"
							Element:span
							Element:span
								}
							Element:span
							Element:span
								{
							Element:span
							Element:span
								"error"
							Element:span
								:
							Element:span
							Element:span
								"402"
							Element:span
								,
							Element:span
							Element:span
								"message"
							Element:span
								:
							Element:span
							Element:span
								"Suspended account: pay your subscription to use the API."
							Element:span
							Element:span
								}
							Element:span
						Node:
						(type) c
						(layer)2
							Element:p
								Ping the API with one of your API key or the USER token received to make sure that the key to authenticate the requests is correct.
						Node:
						(type) c
						(layer)2
							Element:p
								Return a status 200 if the API key or the USER token you are using to authenticate your requests is valid.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Http request
									Node:
									(type) c
									(layer)3
										Element:p
										Element:code
											GET https://YOUR_SLUG_HERE.leadalead.com/api/ping
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Log as
						Node:
						(type) c
						(layer)2
							Element:blockquote
							Element:p
								With the API key
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								curl -H
							Element:span
								"Accept: application/ydncrm.v2"
								-H
							Element:span
								"X-API-KEY: 91Jy7XxreymBRMASfTF8"
							Element:span
								"https://YOUR_SLUG_HERE.leadalead.com/api/auth/log_as?user_id=514"
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
								require
							Element:span
								'rest-client'
							Element:span
								key
							Element:span
								=
							Element:span
								"91Jy7XxreymBRMASfTF8"
							Element:span
								header
							Element:span
								=
							Element:span
								{
							Element:span
								'X-API-KEY'
							Element:span
								=>
							Element:span
								key
							Element:span
								,
							Element:span
								content_type: :json
							Element:span
								,
							Element:span
								accept:
							Element:span
								"application/json application/ydncrm.v2"
							Element:span
								}
							Element:span
								response
							Element:span
								=
							Element:span
								RestClient
							Element:span
								.
							Element:span
								get
							Element:span
								"https://YOUR_SLUG_HERE.leadalead.com/api/auth/log_as?user_id=514"
							Element:span
								,
							Element:span
								header
							Element:span
								JSON
							Element:span
								.
							Element:span
								parse
							Element:span
								(
							Element:span
								response
							Element:span
								)
						Node:
						(type) c
						(layer)2
							Element:blockquote
							Element:p
								With the USER token
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								Not applicable with a USER token
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
								Not
							Element:span
								applicable
							Element:span
								with
							Element:span
								a
							Element:span
								USER
							Element:span
								token
						Node:
						(type) c
						(layer)2
							Element:blockquote
							Element:p
								The above commands return JSON structure like this:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
								{
							Element:span
							Element:span
								"token"
							Element:span
								:
							Element:span
							Element:span
								"ITd-Jb3EC_nCXI2fez4hhg"
							Element:span
								,
							Element:span
							Element:span
								"slug"
							Element:span
								:
							Element:span
							Element:span
								"THE_SLUG_OF_THE_ACCOUNT"
							Element:span
								,
							Element:span
							Element:span
								"locale"
							Element:span
								:
							Element:span
							Element:span
								"en"
							Element:span
								,
							Element:span
							Element:span
								"time_zone"
							Element:span
								:
							Element:span
							Element:span
								"America/Denver"
							Element:span
								,
							Element:span
							Element:span
								"user_id"
							Element:span
								:
							Element:span
							Element:span
								514
							Element:span
								,
							Element:span
							Element:span
								"user_email"
							Element:span
								:
							Element:span
							Element:span
								"stef@youdontneedacrm.com"
							Element:span
							Element:span
								"currency"
							Element:span
								:
							Element:span
							Element:span
								{
							Element:span
							Element:span
								"code"
							Element:span
								:
							Element:span
							Element:span
								"USD"
							Element:span
								,
							Element:span
							Element:span
								"symbol"
							Element:span
								:
							Element:span
							Element:span
								"$"
							Element:span
							Element:span
								}
							Element:span
							Element:span
								}
							Element:span
						Node:
						(type) c
						(layer)2
							Element:blockquote
							Element:p
								In case of error you could get these responses
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
								{
							Element:span
							Element:span
								"error"
							Element:span
								:
							Element:span
							Element:span
								"401"
							Element:span
								,
							Element:span
							Element:span
								"message"
							Element:span
								:
							Element:span
							Element:span
								"Unauthorized: api key [missing | invalid]"
							Element:span
							Element:span
								}
							Element:span
							Element:span
								{
							Element:span
							Element:span
								"error"
							Element:span
								:
							Element:span
							Element:span
								"401"
							Element:span
								,
							Element:span
							Element:span
								"message"
							Element:span
								:
							Element:span
							Element:span
								"Unauthorized: you cannot use this action with a USER token. You have to use the API key method to authenticate."
							Element:span
							Element:span
								}
							Element:span
						Node:
						(type) c
						(layer)2
							Element:p
								Already logged using the API key, log as a specific user of the account.
						Node:
						(type) c
						(layer)2
							Element:p
								It returns a USER token that should be used instead of the API key for all the actions that have to be done as the user.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Http request
									Node:
									(type) c
									(layer)3
										Element:p
										Element:code
											GET https://YOUR_SLUG_HERE.leadalead.com/api/auth/log_as
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Parameters
									Node:
									(type) c
									(layer)3
										Element:table
										Element:thead
										Element:tr
										Element:th
											Parameter
										Element:th
										Element:th
											Description
										Element:tbody
										Element:tr
										Element:td
											user_id
										Element:td
										Element:strong
											required
										Element:td
											User
										Element:code
											id
											or
										Element:code
											email
											to retrieve the USER token for this user.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Login
						Node:
						(type) c
						(layer)2
							Element:blockquote
							Element:p
								With the API key
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								Not applicable with an API key.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
								Not
							Element:span
								application
							Element:span
								with
							Element:span
								an
							Element:span
								API
							Element:span
								key
							Element:span
								.
						Node:
						(type) c
						(layer)2
							Element:blockquote
							Element:p
								With the USER token
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								curl -u
							Element:span
								"user_email@domain.com:user_password"
								-H
							Element:span
								"Accept: application/ydncrm.v2"
							Element:span
								"https://YOUR_SLUG_HERE.leadalead.com/api/auth/login"
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
								require
							Element:span
								'rest-client'
							Element:span
								header
							Element:span
								=
							Element:span
								{
							Element:span
								content_type: :json
							Element:span
								,
							Element:span
								accept:
							Element:span
								"application/json application/ydncrm.v2"
							Element:span
								}
							Element:span
								response
							Element:span
								=
							Element:span
								RestClient
							Element:span
								.
							Element:span
								get
							Element:span
								"https://user_email%40domain.com:user_password@YOUR_SLUG_HERE.leadalead.com/api/auth/login"
							Element:span
								,
							Element:span
								header
							Element:span
								token
							Element:span
								=
							Element:span
								JSON
							Element:span
								.
							Element:span
								parse
							Element:span
								(
							Element:span
								response
							Element:span
								)
						Node:
						(type) c
						(layer)2
							Element:blockquote
							Element:p
								The above commands return JSON structure like this:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
								{
							Element:span
							Element:span
								"token"
							Element:span
								:
							Element:span
							Element:span
								"ITd-Jb3EC_nCXI2fez4hhg"
							Element:span
								,
							Element:span
							Element:span
								"slug"
							Element:span
								:
							Element:span
							Element:span
								"THE_SLUG_OF_THE_ACCOUNT"
							Element:span
								,
							Element:span
							Element:span
								"locale"
							Element:span
								:
							Element:span
							Element:span
								"en"
							Element:span
								,
							Element:span
							Element:span
								"time_zone"
							Element:span
								:
							Element:span
							Element:span
								"America/Denver"
							Element:span
								,
							Element:span
							Element:span
								"user_id"
							Element:span
								:
							Element:span
							Element:span
								514
							Element:span
								,
							Element:span
							Element:span
								"user_email"
							Element:span
								:
							Element:span
							Element:span
								"stef@youdontneedacrm.com"
							Element:span
							Element:span
								"currency"
							Element:span
								:
							Element:span
							Element:span
								{
							Element:span
							Element:span
								"code"
							Element:span
								:
							Element:span
							Element:span
								"USD"
							Element:span
								,
							Element:span
							Element:span
								"symbol"
							Element:span
								:
							Element:span
							Element:span
								"$"
							Element:span
							Element:span
								}
							Element:span
							Element:span
								}
							Element:span
						Node:
						(type) c
						(layer)2
							Element:blockquote
							Element:p
								In case of error you could get these responses
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
								{
							Element:span
							Element:span
								"error"
							Element:span
								:
							Element:span
							Element:span
								"401"
							Element:span
								,
							Element:span
							Element:span
								"message"
							Element:span
								:
							Element:span
							Element:span
								"Invalid login or password"
							Element:span
							Element:span
								}
							Element:span
						Node:
						(type) c
						(layer)2
							Element:p
								To receive a USER token in order to do the request with a specified user, you have to login first.
						Node:
						(type) c
						(layer)2
							Element:p
								To pass secretly your email and password, we use the
							Element:a
								basic authentication
								with a
							Element:strong
								https
								request.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:strong
								DO NOT SEND your email and password as a parameter of the request.
						Node:
						(type) c
						(layer)2
							Element:p
								cURL and Ruby automatically encode your email/password when using like the examples.
						Node:
						(type) c
						(layer)2
							Element:p
								Make sure to
							Element:strong
								escape properly your email and password
								in case they contain specific characters. For example if your password is qwerty$1 make sure to escape it like that qwerty%241.
						Node:
						(type) c
						(layer)2
							Element:p
								If a manual encoding is necessary, use the following method:
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
								concatenate your
							Element:code
								email
								, a colon character
							Element:code
								:
								and your
							Element:code
								password
							Element:li
								Base64 encode the previous string
							Element:li
								use the header parameter
							Element:code
								Authorization
								like defined bellow
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Http request
									Node:
									(type) c
									(layer)3
										Element:p
										Element:code
											GET https://YOUR_SLUG_HERE.leadalead.com/api/auth/login
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											HEADERS
									Node:
									(type) c
									(layer)3
										Element:table
										Element:thead
										Element:tr
										Element:th
											Name
										Element:th
											Value
										Element:tbody
										Element:tr
										Element:td
											Authorization
										Element:td
											Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==
									Node:
									(type) c
									(layer)3
										Element:aside
											If the email/password does not correspond to any user in the account, a 401 error is returned.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Logout
						Node:
						(type) c
						(layer)2
							Element:blockquote
							Element:p
								With the API key
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								Not applicable with an API key.
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
								Not
							Element:span
								applicable
							Element:span
								with
							Element:span
								an
							Element:span
								API
							Element:span
								key
							Element:span
								.
						Node:
						(type) c
						(layer)2
							Element:blockquote
							Element:p
								With the USER token
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								curl -H
							Element:span
								"Accept: application/ydncrm.v2"
								-H
							Element:span
								"X-USER-TOKEN: ITd-Jb3EC_nCXI2fez4hhg"
							Element:span
								"https://YOUR_SLUG_HERE.leadalead.com/api/auth/logout"
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
								require
							Element:span
								'rest-client'
							Element:span
								token
							Element:span
								=
							Element:span
								"ITd-Jb3EC_nCXI2fez4hhg"
							Element:span
								header
							Element:span
								=
							Element:span
								{
							Element:span
								'X-USER-TOKEN'
							Element:span
								=>
							Element:span
								token
							Element:span
								,
							Element:span
								content_type: :json
							Element:span
								,
							Element:span
								accept:
							Element:span
								"application/json application/ydncrm.v2"
							Element:span
								}
							Element:span
								response
							Element:span
								=
							Element:span
								RestClient
							Element:span
								.
							Element:span
								get
							Element:span
								"https://YOUR_SLUG_HERE.leadalead.com/api/auth/logout"
							Element:span
								,
							Element:span
								header
						Node:
						(type) c
						(layer)2
							Element:blockquote
							Element:p
								The above commands return nothing with the following statuses
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
								status 200: logout successful status 304: nothing has been done
						Node:
						(type) c
						(layer)2
							Element:p
								Logout from the API which invalidates the USER token. For further requests, a new login will be necessary.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Http request
									Node:
									(type) c
									(layer)3
										Element:p
										Element:code
											GET https://YOUR_SLUG_HERE.leadalead.com/api/auth/logout
			Node:
			(type) h1
			(layer)1
				Element:h1
					Steps
			Node:
			(type) c
			(layer)1
				Element:h2
					List the steps
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					With the API key
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -H
				Element:span
					"Accept: application/ydncrm.v2"
					-H
				Element:span
					"X-API-KEY: 91Jy7XxreymBRMASfTF8"
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/steps"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'rest-client'
				Element:span
					key
				Element:span
					=
				Element:span
					"91Jy7XxreymBRMASfTF8"
				Element:span
					header
				Element:span
					=
				Element:span
					{
				Element:span
					'X-API-KEY'
				Element:span
					=>
				Element:span
					key
				Element:span
					,
				Element:span
					content_type: :json
				Element:span
					,
				Element:span
					accept:
				Element:span
					"application/json application/ydncrm.v2"
				Element:span
					}
				Element:span
					response
				Element:span
					=
				Element:span
					RestClient
				Element:span
					.
				Element:span
					get
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/steps"
				Element:span
					,
				Element:span
					header
				Element:span
					steps
				Element:span
					=
				Element:span
					JSON
				Element:span
					.
				Element:span
					parse
				Element:span
					(
				Element:span
					response
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					With the USER token
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -H
				Element:span
					"Accept: application/ydncrm.v2"
					-H
				Element:span
					"X-USER-TOKEN: ITd-Jb3EC_nCXI2fez4hhg"
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/steps"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'rest-client'
				Element:span
					key
				Element:span
					=
				Element:span
					"ITd-Jb3EC_nCXI2fez4hhg"
				Element:span
					header
				Element:span
					=
				Element:span
					{
				Element:span
					'X-USER-TOKEN'
				Element:span
					=>
				Element:span
					key
				Element:span
					,
				Element:span
					content_type: :json
				Element:span
					,
				Element:span
					accept:
				Element:span
					"application/json application/ydncrm.v2"
				Element:span
					}
				Element:span
					response
				Element:span
					=
				Element:span
					RestClient
				Element:span
					.
				Element:span
					get
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/steps"
				Element:span
					,
				Element:span
					header
				Element:span
					steps
				Element:span
					=
				Element:span
					JSON
				Element:span
					.
				Element:span
					parse
				Element:span
					(
				Element:span
					response
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					The above commands return JSON structure like this:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					1189
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Incoming"
				Element:span
					,
				Element:span
				Element:span
					"position"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-04-22T22:03:20.000Z"
				Element:span
					,
				Element:span
				Element:span
					"updated_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-04-22T22:03:20.000Z"
				Element:span
					,
				Element:span
				Element:span
					"pipeline_id"
				Element:span
					:
				Element:span
				Element:span
					25
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					1190
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"In-touch"
				Element:span
					,
				Element:span
				Element:span
					"position"
				Element:span
					:
				Element:span
				Element:span
					2
				Element:span
					,
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-04-22T22:03:20.000Z"
				Element:span
					,
				Element:span
				Element:span
					"updated_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-04-22T22:03:20.000Z"
				Element:span
					,
				Element:span
				Element:span
					"pipeline_id"
				Element:span
					:
				Element:span
				Element:span
					25
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					1191
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Closing"
				Element:span
					,
				Element:span
				Element:span
					"position"
				Element:span
					:
				Element:span
				Element:span
					3
				Element:span
					,
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-04-22T22:03:20.000Z"
				Element:span
					,
				Element:span
				Element:span
					"updated_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-04-22T22:03:20.000Z"
				Element:span
					,
				Element:span
				Element:span
					"pipeline_id"
				Element:span
					:
				Element:span
				Element:span
					25
				Element:span
				Element:span
					}
				Element:span
				Element:span
					]
				Element:span
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					In case of error you could get these responses
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"401"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Unauthorized: api key [missing | invalid]"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"422"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Unable to perform your request"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Return the list of steps, previously created in your account.
			Node:
			(type) c
			(layer)1
				Element:p
					The steps are returned ordered by their position.
			Node:
			(type) c
			(layer)1
				Element:h3
					Http request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET https://YOUR_SLUG_HERE.leadalead.com/api/steps
			Node:
			(type) c
			(layer)1
				Element:h3
					Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
				Element:th
					Default
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					direction
				Element:td
					optional
				Element:td
				Element:code
					asc
				Element:td
					Return data order by their position in ascending or descending. The value should be
				Element:code
					asc
					or
				Element:code
					desc
					.
			Node:
			(type) c
			(layer)1
				Element:h2
					Retrieve a step
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					With the API key
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -H
				Element:span
					"Accept: application/ydncrm.v2"
					-H
				Element:span
					"X-API-KEY: 91Jy7XxreymBRMASfTF8"
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/steps/1189"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'rest-client'
				Element:span
					key
				Element:span
					=
				Element:span
					"91Jy7XxreymBRMASfTF8"
				Element:span
					header
				Element:span
					=
				Element:span
					{
				Element:span
					'X-API-KEY'
				Element:span
					=>
				Element:span
					key
				Element:span
					,
				Element:span
					content_type: :json
				Element:span
					,
				Element:span
					accept:
				Element:span
					"application/json application/ydncrm.v2"
				Element:span
					}
				Element:span
					response
				Element:span
					=
				Element:span
					RestClient
				Element:span
					.
				Element:span
					get
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/steps/1189"
				Element:span
					,
				Element:span
					header
				Element:span
					step
				Element:span
					=
				Element:span
					JSON
				Element:span
					.
				Element:span
					parse
				Element:span
					(
				Element:span
					response
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					With the USER token
				Element:code
					shell curl -H "Accept: application/ydncrm.v2" -H "X-USER-TOKEN": ITd-Jb3EC_nCXI2fez4hhg" "https://YOUR_SLUG_HERE.leadalead.com/api/steps/1189"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'rest-client'
				Element:span
					token
				Element:span
					=
				Element:span
					"ITd-Jb3EC_nCXI2fez4hhg"
				Element:span
					header
				Element:span
					=
				Element:span
					{
				Element:span
					'X-USER-TOKEN'
				Element:span
					=>
				Element:span
					token
				Element:span
					,
				Element:span
					content_type: :json
				Element:span
					,
				Element:span
					accept:
				Element:span
					"application/json application/ydncrm.v2"
				Element:span
					}
				Element:span
					response
				Element:span
					=
				Element:span
					RestClient
				Element:span
					.
				Element:span
					get
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/steps/1189"
				Element:span
					,
				Element:span
					header
				Element:span
					step
				Element:span
					=
				Element:span
					JSON
				Element:span
					.
				Element:span
					parse
				Element:span
					(
				Element:span
					response
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					The above commands return JSON structured like this:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					1189
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Incoming"
				Element:span
					,
				Element:span
				Element:span
					"position"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-04-22T22:03:20.000Z"
				Element:span
					,
				Element:span
				Element:span
					"updated_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-04-22T22:03:20.000Z"
				Element:span
					,
				Element:span
				Element:span
					"pipeline_id"
				Element:span
					:
				Element:span
				Element:span
					25
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					In case of error you could get these responses
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"401"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Unauthorized: api key [missing | invalid]"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"404"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Entry not found"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"422"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Missing parameter: id is required"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"422"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Unable to perform your request"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Retrieve a step previously created with its id.
			Node:
			(type) c
			(layer)1
				Element:h3
					Http request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET https://YOUR_SLUG_HERE.leadalead.com/api/steps/{id}
			Node:
			(type) c
			(layer)1
				Element:h3
					Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
				Element:strong
					required
				Element:td
					Step’s id or step’s name. The identifier of the step that could be its
				Element:code
					id
					or its
				Element:code
					name
					.
			Node:
			(type) c
			(layer)1
				Element:aside
					If the `name` is used to retrieve a step, don’t forget to encode any special character in the name. It could be an accent or a symbol used.
			Node:
			(type) h1
			(layer)1
				Element:h1
					Pipelines
			Node:
			(type) c
			(layer)1
				Element:h2
					List the pipelines
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					With the API key
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -H
				Element:span
					"Accept: application/ydncrm.v2"
					-H
				Element:span
					"X-API-KEY: 91Jy7XxreymBRMASfTF8"
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/pipelines"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'rest-client'
				Element:span
					key
				Element:span
					=
				Element:span
					"91Jy7XxreymBRMASfTF8"
				Element:span
					header
				Element:span
					=
				Element:span
					{
				Element:span
					'X-API-KEY'
				Element:span
					=>
				Element:span
					key
				Element:span
					,
				Element:span
					content_type: :json
				Element:span
					,
				Element:span
					accept:
				Element:span
					"application/json application/ydncrm.v2"
				Element:span
					}
				Element:span
					response
				Element:span
					=
				Element:span
					RestClient
				Element:span
					.
				Element:span
					get
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/pipelines"
				Element:span
					,
				Element:span
					header
				Element:span
					pipelines
				Element:span
					=
				Element:span
					JSON
				Element:span
					.
				Element:span
					parse
				Element:span
					(
				Element:span
					response
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					With the USER token
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -H
				Element:span
					"Accept: application/ydncrm.v2"
					-H
				Element:span
					"X-USER-TOKEN: ITd-Jb3EC_nCXI2fez4hhg"
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/pipelines"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'rest-client'
				Element:span
					key
				Element:span
					=
				Element:span
					"ITd-Jb3EC_nCXI2fez4hhg"
				Element:span
					header
				Element:span
					=
				Element:span
					{
				Element:span
					'X-USER-TOKEN'
				Element:span
					=>
				Element:span
					key
				Element:span
					,
				Element:span
					content_type: :json
				Element:span
					,
				Element:span
					accept:
				Element:span
					"application/json application/ydncrm.v2"
				Element:span
					}
				Element:span
					response
				Element:span
					=
				Element:span
					RestClient
				Element:span
					.
				Element:span
					get
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/pipelines"
				Element:span
					,
				Element:span
					header
				Element:span
					pipelines
				Element:span
					=
				Element:span
					JSON
				Element:span
					.
				Element:span
					parse
				Element:span
					(
				Element:span
					response
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					The above commands return JSON structure like this:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					25
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Sales funnel"
				Element:span
					,
				Element:span
				Element:span
					"is_default"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2016-04-22T22:03:20.000Z"
				Element:span
					,
				Element:span
				Element:span
					"updated_at"
				Element:span
					:
				Element:span
				Element:span
					"2016-04-22T22:03:20.000Z"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					26
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Accounting funnel"
				Element:span
					,
				Element:span
				Element:span
					"is_default"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2016-04-26T22:03:20.000Z"
				Element:span
					,
				Element:span
				Element:span
					"updated_at"
				Element:span
					:
				Element:span
				Element:span
					"2016-04-26T22:03:20.000Z"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					]
				Element:span
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					In case of error you could get these responses
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"401"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Unauthorized: api key [missing | invalid]"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"422"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Unable to perform your request"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Return the list of pipelines, previously created in your account.
			Node:
			(type) c
			(layer)1
				Element:aside
					The
				Element:b
					multiple pipelines
					is a feature that may be not enable for your account. In this case only one pipeline is returned,
			Node:
			(type) c
			(layer)1
				Element:h3
					Http request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET https://YOUR_SLUG_HERE.leadalead.com/api/pipelines
			Node:
			(type) h1
			(layer)1
				Element:h1
					Client folders
			Node:
			(type) c
			(layer)1
				Element:h2
					List the client folders
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					With the API key
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -H
				Element:span
					"Accept: application/ydncrm.v2"
					-H
				Element:span
					"X-API-KEY: 91Jy7XxreymBRMASfTF8"
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/clients"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'rest-client'
				Element:span
					key
				Element:span
					=
				Element:span
					"91Jy7XxreymBRMASfTF8"
				Element:span
					header
				Element:span
					=
				Element:span
					{
				Element:span
					'X-API-KEY'
				Element:span
					=>
				Element:span
					key
				Element:span
					,
				Element:span
					content_type: :json
				Element:span
					,
				Element:span
					accept:
				Element:span
					"application/json application/ydncrm.v2"
				Element:span
					}
				Element:span
					response
				Element:span
					=
				Element:span
					RestClient
				Element:span
					.
				Element:span
					get
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/clients"
				Element:span
					,
				Element:span
					header
				Element:span
					clients
				Element:span
					=
				Element:span
					JSON
				Element:span
					.
				Element:span
					parse
				Element:span
					(
				Element:span
					response
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					With the USER token
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -H
				Element:span
					"Accept: application/ydncrm.v2"
					-H
				Element:span
					"X-USER-TOKEN: ITd-Jb3EC_nCXI2fez4hhg"
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/clients"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'rest-client'
				Element:span
					key
				Element:span
					=
				Element:span
					"ITd-Jb3EC_nCXI2fez4hhg"
				Element:span
					header
				Element:span
					=
				Element:span
					{
				Element:span
					'X-USER-TOKEN'
				Element:span
					=>
				Element:span
					key
				Element:span
					,
				Element:span
					content_type: :json
				Element:span
					,
				Element:span
					accept:
				Element:span
					"application/json application/ydncrm.v2"
				Element:span
					}
				Element:span
					response
				Element:span
					=
				Element:span
					RestClient
				Element:span
					.
				Element:span
					get
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/clients"
				Element:span
					,
				Element:span
					header
				Element:span
					clients
				Element:span
					=
				Element:span
					JSON
				Element:span
					.
				Element:span
					parse
				Element:span
					(
				Element:span
					response
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					The above commands return JSON structure like this:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					12
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Acme"
				Element:span
					,
				Element:span
				Element:span
					"description"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"is_active"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-04-22T22:03:20.000Z"
				Element:span
					,
				Element:span
				Element:span
					"user_id"
				Element:span
					:
				Element:span
				Element:span
					514
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					2
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Corporate"
				Element:span
					,
				Element:span
				Element:span
					"description"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"is_active"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-04-22T22:03:20.000Z"
				Element:span
					,
				Element:span
				Element:span
					"user_id"
				Element:span
					:
				Element:span
				Element:span
					514
				Element:span
				Element:span
					}
				Element:span
				Element:span
					]
				Element:span
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					In case of error you could get these responses
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"401"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Unauthorized: api key [missing | invalid]"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"422"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Unable to perform your request"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Return the list of client folders, previously created in your account.
			Node:
			(type) c
			(layer)1
				Element:p
					The client folders are returned ordered by their name by default.
			Node:
			(type) c
			(layer)1
				Element:h3
					Http request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET https://YOUR_SLUG_HERE.leadalead.com/api/clients
			Node:
			(type) c
			(layer)1
				Element:h3
					Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
				Element:th
					Default
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					direction
				Element:td
					optional
				Element:td
				Element:code
					asc
				Element:td
					Return data order by their
				Element:code
					order
					in ascending or descending. The value should be
				Element:code
					asc
					or
				Element:code
					desc
					.
				Element:tr
				Element:td
					order
				Element:td
					optional
				Element:td
				Element:code
					name
				Element:td
					Return data order by their
				Element:code
					name
					or
				Element:code
					id
					. The value should be
				Element:code
					name
					or
				Element:code
					id
					.
			Node:
			(type) c
			(layer)1
				Element:h2
					Create a client folder
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					With the API key
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -H
				Element:span
					"Accept: application/ydncrm.v2"
					-H
				Element:span
					"X-API-KEY: 91Jy7XxreymBRMASfTF8"
					-H
				Element:span
					"Content-Type: application/json"
					-d
				Element:span
					'{"name":"Blue Client","description":"Address: 2344 Paradise Av, Eden CA 90001","user_id":"stef@youdontneedacrm.com"}'
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/clients"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'rest-client'
				Element:span
					key
				Element:span
					=
				Element:span
					"91Jy7XxreymBRMASfTF8"
				Element:span
					header
				Element:span
					=
				Element:span
					{
				Element:span
					'X-API-KEY'
				Element:span
					=>
				Element:span
					key
				Element:span
					,
				Element:span
					content_type: :json
				Element:span
					,
				Element:span
					accept:
				Element:span
					"application/json application/ydncrm.v2"
				Element:span
					}
				Element:span
					parameters
				Element:span
					=
				Element:span
					{
				Element:span
					"name"
				Element:span
					:
				Element:span
					"Blue Client"
				Element:span
					,
				Element:span
					"description"
				Element:span
					:
				Element:span
					"Address: 2344 Paradise Av, Eden CA 90001"
				Element:span
					,
				Element:span
					"user_id"
				Element:span
					:
				Element:span
					"stef@youdontneedacrm.com"
				Element:span
					}
				Element:span
					response
				Element:span
					=
				Element:span
					RestClient
				Element:span
					.
				Element:span
					post
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/clients"
				Element:span
					,
				Element:span
					parameters
				Element:span
					,
				Element:span
					header
				Element:span
					client
				Element:span
					=
				Element:span
					JSON
				Element:span
					.
				Element:span
					parse
				Element:span
					(
				Element:span
					response
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					With the USER token
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -H
				Element:span
					"Accept: application/ydncrm.v2"
					-H
				Element:span
					"X-USER-TOKEN: ITd-Jb3EC_nCXI2fez4hhg"
					-H
				Element:span
					"Content-Type: application/json"
					-d
				Element:span
					'{"name":"Blue Client","description":"Address: 2344 Paradise Av, Eden CA 90001"}'
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/clients"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'rest-client'
				Element:span
					key
				Element:span
					=
				Element:span
					"ITd-Jb3EC_nCXI2fez4hhg"
				Element:span
					header
				Element:span
					=
				Element:span
					{
				Element:span
					'X-USER-TOKEN'
				Element:span
					=>
				Element:span
					key
				Element:span
					,
				Element:span
					content_type: :json
				Element:span
					,
				Element:span
					accept:
				Element:span
					"application/json application/ydncrm.v2"
				Element:span
					}
				Element:span
					parameters
				Element:span
					=
				Element:span
					{
				Element:span
					"name"
				Element:span
					:
				Element:span
					"Blue Client"
				Element:span
					,
				Element:span
					"description"
				Element:span
					:
				Element:span
					"Address: 2344 Paradise Av, Eden CA 90001"
				Element:span
					}
				Element:span
					response
				Element:span
					=
				Element:span
					RestClient
				Element:span
					.
				Element:span
					get
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/clients"
				Element:span
					,
				Element:span
					parameters
				Element:span
					,
				Element:span
					header
				Element:span
					client
				Element:span
					=
				Element:span
					JSON
				Element:span
					.
				Element:span
					parse
				Element:span
					(
				Element:span
					response
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					The above commands return JSON structure like this:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					13
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Blue Client"
				Element:span
					,
				Element:span
				Element:span
					"description"
				Element:span
					:
				Element:span
				Element:span
					"Address: 2344 Paradise Av, Eden CA 90001"
				Element:span
					,
				Element:span
				Element:span
					"is_active"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2017-02-17T22:03:20.000Z"
				Element:span
					,
				Element:span
				Element:span
					"user_id"
				Element:span
					:
				Element:span
				Element:span
					514
				Element:span
					,
				Element:span
				Element:span
					"extended_info"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"permalink"
				Element:span
					:
				Element:span
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/clients/13"
				Element:span
					,
				Element:span
				Element:span
					"fields"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"address"
				Element:span
					:
				Element:span
				Element:span
					"2344 Paradise Av, Eden CA 90001"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"fields_by_name"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"Address"
				Element:span
					:
				Element:span
				Element:span
					"2344 Paradise Av, Eden CA 90001"
				Element:span
					,
				Element:span
				Element:span
					"Billing address"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"user"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					514
				Element:span
					,
				Element:span
				Element:span
					"lastname"
				Element:span
					:
				Element:span
				Element:span
					"Stone"
				Element:span
					,
				Element:span
				Element:span
					"firstname"
				Element:span
					:
				Element:span
				Element:span
					"Stéphanie"
				Element:span
					,
				Element:span
				Element:span
					"email"
				Element:span
					:
				Element:span
				Element:span
					"stef@youdontneedacrm.com"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					In case of error you could get these responses
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"401"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Unauthorized: api key [missing | invalid]"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"422"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Unable to perform your request"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Return the client folder created.
			Node:
			(type) c
			(layer)1
				Element:h3
					Http request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					POST https://YOUR_SLUG_HERE.leadalead.com/api/clients
			Node:
			(type) c
			(layer)1
				Element:h3
					Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					name
				Element:td
				Element:strong
					required
				Element:td
					The name of the client folder.
				Element:tr
				Element:td
					description
				Element:td
					optional
				Element:td
					The client folder’s description.
				Element:tr
				Element:td
					user_id
				Element:td
					optional
				Element:td
					User’s
				Element:code
					email address
					or
				Element:code
					id
					to assign the client folder to the user. This parameter returns an error in case you are using the login user method to authenticate (
				Element:code
					USER
					token)
			Node:
			(type) c
			(layer)1
				Element:h2
					Retrieve a client folder
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					With the API key
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -H
				Element:span
					"Accept: application/ydncrm.v2"
					-H
				Element:span
					"X-API-KEY: 91Jy7XxreymBRMASfTF8"
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/clients/12"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'rest-client'
				Element:span
					key
				Element:span
					=
				Element:span
					"91Jy7XxreymBRMASfTF8"
				Element:span
					header
				Element:span
					=
				Element:span
					{
				Element:span
					'X-API-KEY'
				Element:span
					=>
				Element:span
					key
				Element:span
					,
				Element:span
					content_type: :json
				Element:span
					,
				Element:span
					accept:
				Element:span
					"application/json application/ydncrm.v2"
				Element:span
					}
				Element:span
					response
				Element:span
					=
				Element:span
					RestClient
				Element:span
					.
				Element:span
					get
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/clients/12"
				Element:span
					,
				Element:span
					header
				Element:span
					client
				Element:span
					=
				Element:span
					JSON
				Element:span
					.
				Element:span
					parse
				Element:span
					(
				Element:span
					response
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					With the USER token
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -H
				Element:span
					"Accept: application/ydncrm.v2"
					-H
				Element:span
					"X-USER-TOKEN: ITd-Jb3EC_nCXI2fez4hhg"
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/clients/12"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'rest-client'
				Element:span
					key
				Element:span
					=
				Element:span
					"ITd-Jb3EC_nCXI2fez4hhg"
				Element:span
					header
				Element:span
					=
				Element:span
					{
				Element:span
					'X-USER-TOKEN'
				Element:span
					=>
				Element:span
					key
				Element:span
					,
				Element:span
					content_type: :json
				Element:span
					,
				Element:span
					accept:
				Element:span
					"application/json application/ydncrm.v2"
				Element:span
					}
				Element:span
					response
				Element:span
					=
				Element:span
					RestClient
				Element:span
					.
				Element:span
					get
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/clients/12"
				Element:span
					,
				Element:span
					header
				Element:span
					client
				Element:span
					=
				Element:span
					JSON
				Element:span
					.
				Element:span
					parse
				Element:span
					(
				Element:span
					response
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					The above commands return JSON structure like this:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					12
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Acme"
				Element:span
					,
				Element:span
				Element:span
					"description"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"is_active"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-04-22T22:03:20.000Z"
				Element:span
					,
				Element:span
				Element:span
					"user_id"
				Element:span
					:
				Element:span
				Element:span
					514
				Element:span
					,
				Element:span
				Element:span
					"extended_info"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"permalink"
				Element:span
					:
				Element:span
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/clients/12"
				Element:span
					,
				Element:span
				Element:span
					"fields"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"address"
				Element:span
					:
				Element:span
				Element:span
					"2344 Paradise Av, Eden CA 90001"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"fields_by_name"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"Address"
				Element:span
					:
				Element:span
				Element:span
					"2344 Paradise Av, Eden CA 90001"
				Element:span
					,
				Element:span
				Element:span
					"Billing address"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"user"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					514
				Element:span
					,
				Element:span
				Element:span
					"lastname"
				Element:span
					:
				Element:span
				Element:span
					"Stone"
				Element:span
					,
				Element:span
				Element:span
					"firstname"
				Element:span
					:
				Element:span
				Element:span
					"Stéphanie"
				Element:span
					,
				Element:span
				Element:span
					"email"
				Element:span
					:
				Element:span
				Element:span
					"stef@youdontneedacrm.com"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					In case of error you could get these responses
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"401"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Unauthorized: api key [missing | invalid]"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"404"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Entry not found"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"422"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Unable to perform your request"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Return the client folder, previously created in your account.
			Node:
			(type) c
			(layer)1
				Element:h3
					Http request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET https://YOUR_SLUG_HERE.leadalead.com/api/clients/{id}
			Node:
			(type) c
			(layer)1
				Element:h3
					Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
				Element:strong
					required
				Element:td
					The identifier of the lead
			Node:
			(type) c
			(layer)1
				Element:h2
					Update a client folder
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					With the API key
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -XPUT -H
				Element:span
					"Accept: application/ydncrm.v2"
					-H
				Element:span
					"X-API-KEY: 91Jy7XxreymBRMASfTF8"
					-H
				Element:span
					"Content-Type: application/json"
					-d
				Element:span
					'{"name": "Blue Corp"}'
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/clients/12"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'rest-client'
				Element:span
					key
				Element:span
					=
				Element:span
					"91Jy7XxreymBRMASfTF8"
				Element:span
					header
				Element:span
					=
				Element:span
					{
				Element:span
					'X-API-KEY'
				Element:span
					=>
				Element:span
					key
				Element:span
					,
				Element:span
					content_type: :json
				Element:span
					,
				Element:span
					accept:
				Element:span
					"application/json application/ydncrm.v2"
				Element:span
					}
				Element:span
					parameters
				Element:span
					=
				Element:span
					{
				Element:span
					name:
				Element:span
					"Blue Corp"
				Element:span
					}
				Element:span
					response
				Element:span
					=
				Element:span
					RestClient
				Element:span
					.
				Element:span
					put
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/clients/12"
				Element:span
					,
				Element:span
					parameters
				Element:span
					,
				Element:span
					header
				Element:span
					client
				Element:span
					=
				Element:span
					JSON
				Element:span
					.
				Element:span
					parse
				Element:span
					(
				Element:span
					response
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					With the USER token
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -XPUT -H
				Element:span
					"Accept: application/ydncrm.v2"
					-H
				Element:span
					"X-USER-TOKEN: ITd-Jb3EC_nCXI2fez4hhg"
					-H
				Element:span
					"Content-Type: application/json"
					-d
				Element:span
					'{"name": "Blue Corp"}'
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/clients/12"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'rest-client'
				Element:span
					key
				Element:span
					=
				Element:span
					"ITd-Jb3EC_nCXI2fez4hhg"
				Element:span
					header
				Element:span
					=
				Element:span
					{
				Element:span
					'X-USER-TOKEN'
				Element:span
					=>
				Element:span
					key
				Element:span
					,
				Element:span
					content_type: :json
				Element:span
					,
				Element:span
					accept:
				Element:span
					"application/json application/ydncrm.v2"
				Element:span
					}
				Element:span
					parameters
				Element:span
					=
				Element:span
					{
				Element:span
					name:
				Element:span
					"Blue Corp"
				Element:span
					}
				Element:span
					response
				Element:span
					=
				Element:span
					RestClient
				Element:span
					.
				Element:span
					get
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/clients/12"
				Element:span
					,
				Element:span
					parameters
				Element:span
					,
				Element:span
					header
				Element:span
					client
				Element:span
					=
				Element:span
					JSON
				Element:span
					.
				Element:span
					parse
				Element:span
					(
				Element:span
					response
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					The above commands return JSON structure like this:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					12
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Blue Corp"
				Element:span
					,
				Element:span
				Element:span
					"description"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"is_active"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-04-22T22:03:20.000Z"
				Element:span
					,
				Element:span
				Element:span
					"user_id"
				Element:span
					:
				Element:span
				Element:span
					514
				Element:span
					,
				Element:span
				Element:span
					"extended_info"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"permalink"
				Element:span
					:
				Element:span
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/clients/12"
				Element:span
					,
				Element:span
				Element:span
					"fields"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"address"
				Element:span
					:
				Element:span
				Element:span
					"2344 Paradise Av, Eden CA 90001"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"fields_by_name"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"Address"
				Element:span
					:
				Element:span
				Element:span
					"2344 Paradise Av, Eden CA 90001"
				Element:span
					,
				Element:span
				Element:span
					"Billing address"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"user"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					514
				Element:span
					,
				Element:span
				Element:span
					"lastname"
				Element:span
					:
				Element:span
				Element:span
					"Stone"
				Element:span
					,
				Element:span
				Element:span
					"firstname"
				Element:span
					:
				Element:span
				Element:span
					"Stéphanie"
				Element:span
					,
				Element:span
				Element:span
					"email"
				Element:span
					:
				Element:span
				Element:span
					"stef@youdontneedacrm.com"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					In case of error you could get these responses
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"401"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Unauthorized: api key [missing | invalid]"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"404"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Entry not found"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"422"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Unable to perform your request"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Update the client folder previously created.
			Node:
			(type) c
			(layer)1
				Element:h3
					Http request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					PUT https://YOUR_SLUG_HERE.leadalead.com/api/clients/{id}
			Node:
			(type) c
			(layer)1
				Element:h3
					Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
				Element:strong
					required
				Element:td
					The identifier of the client folder
				Element:tr
				Element:td
					name
				Element:td
					optional
				Element:td
					The new name of the client folder
				Element:tr
				Element:td
					description
				Element:td
					optional
				Element:td
					The new description of the client folder
				Element:tr
				Element:td
					is_active
				Element:td
					optional
				Element:td
					Boolean to activate or inactivate the client folder
			Node:
			(type) c
			(layer)1
				Element:h2
					Delete a client folder
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					With the API key
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -XDELETE -H
				Element:span
					"Accept: application/ydncrm.v2"
					-H
				Element:span
					"X-API-KEY: 91Jy7XxreymBRMASfTF8"
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/clients/12"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'rest-client'
				Element:span
					key
				Element:span
					=
				Element:span
					"91Jy7XxreymBRMASfTF8"
				Element:span
					header
				Element:span
					=
				Element:span
					{
				Element:span
					'X-API-KEY'
				Element:span
					=>
				Element:span
					key
				Element:span
					,
				Element:span
					content_type: :json
				Element:span
					,
				Element:span
					accept:
				Element:span
					"application/json application/ydncrm.v2"
				Element:span
					}
				Element:span
					response
				Element:span
					=
				Element:span
					RestClient
				Element:span
					.
				Element:span
					delete
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/clients/12"
				Element:span
					,
				Element:span
					header
				Element:span
					client
				Element:span
					=
				Element:span
					JSON
				Element:span
					.
				Element:span
					parse
				Element:span
					(
				Element:span
					response
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					With the USER token
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -XDELETE -H
				Element:span
					"Accept: application/ydncrm.v2"
					-H
				Element:span
					"X-USER-TOKEN: ITd-Jb3EC_nCXI2fez4hhg"
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/clients/12"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'rest-client'
				Element:span
					key
				Element:span
					=
				Element:span
					"ITd-Jb3EC_nCXI2fez4hhg"
				Element:span
					header
				Element:span
					=
				Element:span
					{
				Element:span
					'X-USER-TOKEN'
				Element:span
					=>
				Element:span
					key
				Element:span
					,
				Element:span
					content_type: :json
				Element:span
					,
				Element:span
					accept:
				Element:span
					"application/json application/ydncrm.v2"
				Element:span
					}
				Element:span
					response
				Element:span
					=
				Element:span
					RestClient
				Element:span
					.
				Element:span
					get
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/clients/12"
				Element:span
					,
				Element:span
					header
				Element:span
					client
				Element:span
					=
				Element:span
					JSON
				Element:span
					.
				Element:span
					parse
				Element:span
					(
				Element:span
					response
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					The above commands return JSON structure like this:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					12
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					In case of error you could get these responses
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"401"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Unauthorized: api key [missing | invalid]"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"404"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Entry not found"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"422"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Unable to perform your request"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Delete the client folder previously created from its id.
			Node:
			(type) c
			(layer)1
				Element:h3
					Http request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					DELETE https://YOUR_SLUG_HERE.leadalead.com/api/clients/{id}
			Node:
			(type) c
			(layer)1
				Element:h3
					Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
				Element:strong
					required
				Element:td
					The identifier of the client folder
			Node:
			(type) h1
			(layer)1
				Element:h1
					Categories
			Node:
			(type) c
			(layer)1
				Element:h2
					List the categories
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					With the API key
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -H
				Element:span
					"Accept: application/ydncrm.v2"
					-H
				Element:span
					"X-API-KEY: 91Jy7XxreymBRMASfTF8"
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/categories?include_tags=true"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'rest-client'
				Element:span
					key
				Element:span
					=
				Element:span
					"91Jy7XxreymBRMASfTF8"
				Element:span
					header
				Element:span
					=
				Element:span
					{
				Element:span
					'X-API-KEY'
				Element:span
					=>
				Element:span
					key
				Element:span
					,
				Element:span
					content_type: :json
				Element:span
					,
				Element:span
					accept:
				Element:span
					"application/json application/ydncrm.v2"
				Element:span
					}
				Element:span
					parameters
				Element:span
					=
				Element:span
					{
				Element:span
					include_tags:
				Element:span
					true
				Element:span
					}
				Element:span
					response
				Element:span
					=
				Element:span
					RestClient
				Element:span
					.
				Element:span
					get
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/categories"
				Element:span
					,
				Element:span
					parameters
				Element:span
					,
				Element:span
					header
				Element:span
					categories
				Element:span
					=
				Element:span
					JSON
				Element:span
					.
				Element:span
					parse
				Element:span
					(
				Element:span
					response
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					With the USER token
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -H
				Element:span
					"Accept: application/ydncrm.v2"
					-H
				Element:span
					"X-USER-TOKEN: ITd-Jb3EC_nCXI2fez4hhg"
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/categories?include_tags=true"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'rest-client'
				Element:span
					key
				Element:span
					=
				Element:span
					"ITd-Jb3EC_nCXI2fez4hhg"
				Element:span
					header
				Element:span
					=
				Element:span
					{
				Element:span
					'X-USER-TOKEN'
				Element:span
					=>
				Element:span
					key
				Element:span
					,
				Element:span
					content_type: :json
				Element:span
					,
				Element:span
					accept:
				Element:span
					"application/json application/ydncrm.v2"
				Element:span
					}
				Element:span
					parameters
				Element:span
					=
				Element:span
					{
				Element:span
					include_tags:
				Element:span
					true
				Element:span
					}
				Element:span
					response
				Element:span
					=
				Element:span
					RestClient
				Element:span
					.
				Element:span
					get
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/categories"
				Element:span
					,
				Element:span
					parameters
				Element:span
					,
				Element:span
					header
				Element:span
					categories
				Element:span
					=
				Element:span
					JSON
				Element:span
					.
				Element:span
					parse
				Element:span
					(
				Element:span
					response
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					The above commands return JSON structure like this:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					12
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Origin"
				Element:span
					,
				Element:span
				Element:span
					"is_required"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"updated_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-09-06T22:45:06.000Z"
				Element:span
					,
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-09-06T22:45:06.000Z"
				Element:span
					,
				Element:span
				Element:span
					"supertags"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					54
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"US"
				Element:span
					,
				Element:span
				Element:span
					"category"
				Element:span
					:
				Element:span
				Element:span
					"Origin"
				Element:span
					,
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-09-06T22:46:06.000Z"
				Element:span
					,
				Element:span
				Element:span
					"position"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					58
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Europe"
				Element:span
					,
				Element:span
				Element:span
					"category"
				Element:span
					:
				Element:span
				Element:span
					"Origin"
				Element:span
					,
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"position"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					59
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Asia"
				Element:span
					,
				Element:span
				Element:span
					"category"
				Element:span
					:
				Element:span
				Element:span
					"Origin"
				Element:span
					,
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"position"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
				Element:span
					}]
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					13
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Product"
				Element:span
					,
				Element:span
				Element:span
					"is_required"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"updated_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-09-06T22:45:06.000Z"
				Element:span
					,
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-09-06T22:45:06.000Z"
				Element:span
					,
				Element:span
				Element:span
					"supertags"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					60
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Phone"
				Element:span
					,
				Element:span
				Element:span
					"category"
				Element:span
					:
				Element:span
				Element:span
					"Product"
				Element:span
					,
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-09-06T22:46:06.000Z"
				Element:span
					,
				Element:span
				Element:span
					"position"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					61
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Tablet"
				Element:span
					,
				Element:span
				Element:span
					"category"
				Element:span
					:
				Element:span
				Element:span
					"Product"
				Element:span
					,
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"position"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					62
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Computer"
				Element:span
					,
				Element:span
				Element:span
					"category"
				Element:span
					:
				Element:span
				Element:span
					"Product"
				Element:span
					,
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"position"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
				Element:span
					}]
				Element:span
				Element:span
					},
				Element:span
				Element:span
					]
				Element:span
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					In case of error you could get these responses
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"401"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Unauthorized: api key [missing | invalid]"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"422"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Unable to perform your request"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Return the list of categories with their tags if option added, previously created in your account.
			Node:
			(type) c
			(layer)1
				Element:h3
					Http request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET https://YOUR_SLUG_HERE.leadalead.com/api/categories
			Node:
			(type) c
			(layer)1
				Element:h3
					Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
				Element:th
					Default
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					include_tags
				Element:td
					optional
				Element:td
				Element:code
					false
				Element:td
					Include the supertags under each categories returned.
			Node:
			(type) h1
			(layer)1
				Element:h1
					Predefined tags
			Node:
			(type) c
			(layer)1
				Element:h2
					List the predefined tags
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					With the API key
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -H
				Element:span
					"Accept: application/ydncrm.v2"
					-H
				Element:span
					"X-API-KEY: 91Jy7XxreymBRMASfTF8"
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/predefined_tags"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'rest-client'
				Element:span
					key
				Element:span
					=
				Element:span
					"91Jy7XxreymBRMASfTF8"
				Element:span
					header
				Element:span
					=
				Element:span
					{
				Element:span
					'X-API-KEY'
				Element:span
					=>
				Element:span
					key
				Element:span
					,
				Element:span
					content_type: :json
				Element:span
					,
				Element:span
					accept:
				Element:span
					"application/json application/ydncrm.v2"
				Element:span
					}
				Element:span
					response
				Element:span
					=
				Element:span
					RestClient
				Element:span
					.
				Element:span
					get
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/predefined_tags"
				Element:span
					,
				Element:span
					header
				Element:span
					categories
				Element:span
					=
				Element:span
					JSON
				Element:span
					.
				Element:span
					parse
				Element:span
					(
				Element:span
					response
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					With the USER token
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -H
				Element:span
					"Accept: application/ydncrm.v2"
					-H
				Element:span
					"X-USER-TOKEN: ITd-Jb3EC_nCXI2fez4hhg"
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/predefined_tags"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'rest-client'
				Element:span
					key
				Element:span
					=
				Element:span
					"ITd-Jb3EC_nCXI2fez4hhg"
				Element:span
					header
				Element:span
					=
				Element:span
					{
				Element:span
					'X-USER-TOKEN'
				Element:span
					=>
				Element:span
					key
				Element:span
					,
				Element:span
					content_type: :json
				Element:span
					,
				Element:span
					accept:
				Element:span
					"application/json application/ydncrm.v2"
				Element:span
					}
				Element:span
					response
				Element:span
					=
				Element:span
					RestClient
				Element:span
					.
				Element:span
					get
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/predefined_tags"
				Element:span
					,
				Element:span
					header
				Element:span
					categories
				Element:span
					=
				Element:span
					JSON
				Element:span
					.
				Element:span
					parse
				Element:span
					(
				Element:span
					response
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					The above commands return JSON structure like this:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					54
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"US"
				Element:span
					,
				Element:span
				Element:span
					"category"
				Element:span
					:
				Element:span
				Element:span
					"Origin"
				Element:span
					,
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-09-06T22:46:06.000Z"
				Element:span
					,
				Element:span
				Element:span
					"position"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					58
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Europe"
				Element:span
					,
				Element:span
				Element:span
					"category"
				Element:span
					:
				Element:span
				Element:span
					"Origin"
				Element:span
					,
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"position"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					59
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Asia"
				Element:span
					,
				Element:span
				Element:span
					"category"
				Element:span
					:
				Element:span
				Element:span
					"Origin"
				Element:span
					,
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"position"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					60
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Phone"
				Element:span
					,
				Element:span
				Element:span
					"category"
				Element:span
					:
				Element:span
				Element:span
					"Product"
				Element:span
					,
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-09-06T22:46:06.000Z"
				Element:span
					,
				Element:span
				Element:span
					"position"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					61
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Tablet"
				Element:span
					,
				Element:span
				Element:span
					"category"
				Element:span
					:
				Element:span
				Element:span
					"Product"
				Element:span
					,
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"position"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					62
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Computer"
				Element:span
					,
				Element:span
				Element:span
					"category"
				Element:span
					:
				Element:span
				Element:span
					"Product"
				Element:span
					,
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"position"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
				Element:span
					},
				Element:span
				Element:span
					]
				Element:span
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					In case of error you could get these responses
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"401"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Unauthorized: api key [missing | invalid]"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"422"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Unable to perform your request"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Return the list of predefined tags, previously created in your account.
			Node:
			(type) c
			(layer)1
				Element:h3
					Http request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET https://YOUR_SLUG_HERE.leadalead.com/api/predefined_tags
			Node:
			(type) h1
			(layer)1
				Element:h1
					Leads
			Node:
			(type) c
			(layer)1
				Element:h2
					List the leads
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					With the API key
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -H
				Element:span
					"Accept: application/ydncrm.v2"
					-H
				Element:span
					"X-API-KEY: 91Jy7XxreymBRMASfTF8"
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/leads"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'rest-client'
				Element:span
					key
				Element:span
					=
				Element:span
					"91Jy7XxreymBRMASfTF8"
				Element:span
					header
				Element:span
					=
				Element:span
					{
				Element:span
					'X-API-KEY'
				Element:span
					=>
				Element:span
					key
				Element:span
					,
				Element:span
					content_type: :json
				Element:span
					,
				Element:span
					accept:
				Element:span
					"application/json application/ydncrm.v2"
				Element:span
					}
				Element:span
					response
				Element:span
					=
				Element:span
					RestClient
				Element:span
					.
				Element:span
					get
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/leads"
				Element:span
					,
				Element:span
					header
				Element:span
					leads
				Element:span
					=
				Element:span
					JSON
				Element:span
					.
				Element:span
					parse
				Element:span
					(
				Element:span
					response
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					With the USER token
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -H
				Element:span
					"Accept: application/ydncrm.v2"
					-H
				Element:span
					"X-USER-TOKEN: ITd-Jb3EC_nCXI2fez4hhg"
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/leads"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'rest-client'
				Element:span
					token
				Element:span
					=
				Element:span
					"ITd-Jb3EC_nCXI2fez4hhg"
				Element:span
					header
				Element:span
					=
				Element:span
					{
				Element:span
					'X-USER-TOKEN'
				Element:span
					=>
				Element:span
					token
				Element:span
					,
				Element:span
					content_type: :json
				Element:span
					,
				Element:span
					accept:
				Element:span
					"application/json application/ydncrm.v2"
				Element:span
					}
				Element:span
					response
				Element:span
					=
				Element:span
					RestClient
				Element:span
					.
				Element:span
					get
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/leads"
				Element:span
					,
				Element:span
					header
				Element:span
					leads
				Element:span
					=
				Element:span
					JSON
				Element:span
					.
				Element:span
					parse
				Element:span
					(
				Element:span
					response
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					The above commands return JSON structure like this:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					8113
				Element:span
					,
				Element:span
				Element:span
					"title"
				Element:span
					:
				Element:span
				Element:span
					"Loretta Inc."
				Element:span
					,
				Element:span
				Element:span
					"pipeline"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"step"
				Element:span
					:
				Element:span
				Element:span
					"Incoming"
				Element:span
					,
				Element:span
				Element:span
					"step_id"
				Element:span
					:
				Element:span
				Element:span
					45
				Element:span
					,
				Element:span
				Element:span
					"status"
				Element:span
					:
				Element:span
				Element:span
					"standby"
				Element:span
					,
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					2400.0
				Element:span
					,
				Element:span
				Element:span
					"probability"
				Element:span
					:
				Element:span
				Element:span
					30
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
					,
				Element:span
				Element:span
					"starred"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"remind_date"
				Element:span
					:
				Element:span
				Element:span
					"2014-03-12"
				Element:span
					,
				Element:span
				Element:span
					"remind_time"
				Element:span
					:
				Element:span
				Element:span
					"09:30"
				Element:span
					,
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2014-02-28T17:37:33.000Z"
				Element:span
					,
				Element:span
				Element:span
					"updated_at"
				Element:span
					:
				Element:span
				Element:span
					"2014-02-28T17:38:05.000Z"
				Element:span
					,
				Element:span
				Element:span
					"description"
				Element:span
					:
				Element:span
				Element:span
					"Firstname: Natalia\nLastname: Bawer\nFull name: Natalia Bawer\nEmail: natalia.bawer@loretta-inc.com\nPhone: 801 274 6798\nMobile: 832 764 1930 \nAddress: 1234 N 7864 W President Bld - Salt Lake City, UT 84105\nWeb: http://more-info-loretta.com\nDepartment: Sales\n--- Entrez une description ci-dessous ---\n \n--- \nMet Natalia at a seminar. She could be interested.\nShe is on business trip. Have to call her when she is back."
				Element:span
					,
				Element:span
				Element:span
					"html_description"
				Element:span
					:
				Element:span
				Element:span
					"Firstname: Natalia\u003Cbr /\u003ELastname: Bawer\u003Cbr /\u003EFull name: Natalia Bawer\u003Cbr /\u003EEmail: natalia.bawer@loretta-inc.com\u003Cbr /\u003EPhone: 801 274 6798\u003Cbr /\u003EMobile: 832 764 1930\u0026nbsp;\u003Cbr /\u003EAddress: 1234 N 7864 W President Bld - Salt Lake City, UT 84105\u003Cbr /\u003EWeb: http://more-info-loretta.com\u003Cbr /\u003EDepartment: Sales\u003Cbr /\u003E\r\n\u003Cp class=\"lead-desc-separator\"\u003E--- Entrez une description ci-dessous ---\u003C/p\u003E\r\n\u003Cdiv\u003E\u0026nbsp;\u003C/div\u003E\r\n\u003Cbr /\u003E--- \u003Cbr /\u003E\r\n\u003Cp\u003EMet Natalia at a seminar. She could be interested.\u003Cbr /\u003EShe is on business trip. Have to call her when she is back.\u003C/p\u003E"
				Element:span
					,
				Element:span
				Element:span
					"tags"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
					"small"
				Element:span
					,
				Element:span
					"US"
				Element:span
					],
				Element:span
				Element:span
					"created_from: "
				Element:span
					api
				Element:span
					", "
				Element:span
					user_id
				Element:span
					": 514, "
				Element:span
					client_folder_id
				Element:span
					": 1 }, { "
				Element:span
					id
				Element:span
					": 8112, "
				Element:span
					title
				Element:span
					": "
				Element:span
					Acme
				Element:span
				Element:span
					Corp
				Element:span
					", "
				Element:span
					pipeline
				Element:span
					": null, "
				Element:span
					step
				Element:span
					": "
				Element:span
					Incoming
				Element:span
					", "
				Element:span
					step_id
				Element:span
					": 45, "
				Element:span
					status
				Element:span
					": "
				Element:span
					todo
				Element:span
					", "
				Element:span
					amount
				Element:span
					": 1500.0, "
				Element:span
					probability
				Element:span
					": 70, "
				Element:span
					currency
				Element:span
					": "
				Element:span
					USD
				Element:span
					", "
				Element:span
					starred
				Element:span
					": null, "
				Element:span
					remind_date
				Element:span
					": null, "
				Element:span
					remind_time
				Element:span
					": null, "
				Element:span
					created_at
				Element:span
					": "
				Element:span
					2014-02-28T17
				Element:span
					:
				Element:span
					31
				Element:span
					:
				Element:span
					0
				Element:span
					4.000
				Element:span
					Z
				Element:span
					", "
				Element:span
					updated_at
				Element:span
					": "
				Element:span
					2014-02-28
				Element:span
					T
				Element:span
					17
				Element:span
					:
				Element:span
					31
				Element:span
					:
				Element:span
					0
				Element:span
					4.000
				Element:span
					Z
				Element:span
					", "
				Element:span
					text_description
				Element:span
					": "
				Element:span
					Firstname:
				Element:span
				Element:span
					John\nLastname:
				Element:span
				Element:span
					Doe\nEmail:
				Element:span
				Element:span
					john.doe@acme.corp.com\nPhone:
				Element:span
				Element:span
					201
				Element:span
				Element:span
					418
				Element:span
				Element:span
					1625
				Element:span
					\n---\nJohn
				Element:span
				Element:span
					is
				Element:span
				Element:span
					very
				Element:span
				Element:span
					interested
				Element:span
				Element:span
					by
				Element:span
				Element:span
					our
				Element:span
				Element:span
					service.
				Element:span
				Element:span
					He
				Element:span
				Element:span
					wants
				Element:span
				Element:span
					a
				Element:span
				Element:span
					quote
				Element:span
				Element:span
					asap.\n
				Element:span
					", "
				Element:span
					html_description
				Element:span
					": "
				Element:span
					Firstname:
				Element:span
				Element:span
					John\u
				Element:span
					003
				Element:span
					Cbr
				Element:span
				Element:span
					/\u
				Element:span
					003
				Element:span
					ELastname:
				Element:span
				Element:span
					Doe\u
				Element:span
					003
				Element:span
					Cbr
				Element:span
				Element:span
					/\u
				Element:span
					003
				Element:span
					EEmail:
				Element:span
				Element:span
					john.doe@acme.corp.com\u
				Element:span
					003
				Element:span
					Cbr
				Element:span
				Element:span
					/\u
				Element:span
					003
				Element:span
					EPhone:
				Element:span
				Element:span
					201
				Element:span
				Element:span
					418
				Element:span
				Element:span
					1625
				Element:span
					\u
				Element:span
					003
				Element:span
					Cbr
				Element:span
				Element:span
					/\u
				Element:span
					003
				Element:span
					E\r\n---\r\n\u
				Element:span
					003
				Element:span
					Cp\u
				Element:span
					003
				Element:span
					EJohn
				Element:span
				Element:span
					is
				Element:span
				Element:span
					very
				Element:span
				Element:span
					interested
				Element:span
				Element:span
					by
				Element:span
				Element:span
					our
				Element:span
				Element:span
					service.
				Element:span
				Element:span
					He
				Element:span
				Element:span
					wants
				Element:span
				Element:span
					a
				Element:span
				Element:span
					quote
				Element:span
				Element:span
					asap.\u
				Element:span
					003
				Element:span
					Cbr
				Element:span
				Element:span
					/\u
				Element:span
					003
				Element:span
					E\u
				Element:span
					003
				Element:span
					Cbr
				Element:span
				Element:span
					/\u
				Element:span
					003
				Element:span
					E\u
				Element:span
					003
				Element:span
					C/p\u
				Element:span
					003
				Element:span
					E
				Element:span
					", "
				Element:span
					tags
				Element:span
					": [], "
				Element:span
					created_from:
				Element:span
				Element:span
					"api"
				Element:span
					,
				Element:span
				Element:span
					"user_id"
				Element:span
					:
				Element:span
				Element:span
					514
				Element:span
					,
				Element:span
				Element:span
					"client_folder_id"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
				Element:span
					}
				Element:span
				Element:span
					]
				Element:span
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					In case of error you could get these responses
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"401"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Unauthorized: api key [missing | invalid]"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"400"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Parameter [status | step | user_id] not recognized."
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"400"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"The date updated_after is not formatted properly"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"422"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Unable to perform your request"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Return a list of leads, previously created in your account.
			Node:
			(type) c
			(layer)1
				Element:p
					The leads are returned with a limit of 100 by default. However it is possible to change this limit. To navigate in the large amount of data, use the parameter
				Element:code
					offset
					to shift the data.
			Node:
			(type) c
			(layer)1
				Element:h3
					Http request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET https://YOUR_SLUG_HERE.leadalead.com/api/leads
			Node:
			(type) c
			(layer)1
				Element:h3
					Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
				Element:th
					Default
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					direction
				Element:td
					optional
				Element:td
				Element:code
					desc
				Element:td
					Direction for ordering the data returned in ascending or descending. The value should be
				Element:code
					asc
					or
				Element:code
					desc
					.
				Element:tr
				Element:td
					order
				Element:td
					optional
				Element:td
					id
				Element:td
					Attribute to order the data returned. Could be:
				Element:code
					id
					,
				Element:code
					creation_date
					,
				Element:code
					last_update
					,
				Element:code
					next_action
					,
				Element:code
					sale_step
					,
				Element:code
					amount
					,
				Element:code
					probability
					,
				Element:code
					probalized_amount
					,
				Element:code
					alphabetically
					.
				Element:tr
				Element:td
					limit
				Element:td
					optional
				Element:td
					100
				Element:td
					Maximum count of data returned by request.
				Element:tr
				Element:td
					status
				Element:td
					optional
				Element:td
				Element:td
					Array of status names separated by a comma. Return the leads with the specified statuses. The status could be one of these values:
				Element:code
					todo
					,
				Element:code
					standby
					,
				Element:code
					won
					,
				Element:code
					cancelled
					,
				Element:code
					lost
					.
				Element:tr
				Element:td
					step
				Element:td
					optional
				Element:td
				Element:td
					Array of step names separated by a comma. Return the leads for the specified steps. The step should be the exact name entered in the application.
				Element:tr
				Element:td
					starred
				Element:td
					optional
				Element:td
				Element:td
					If set to
				Element:code
					true
					, returned all starred leads.
				Element:tr
				Element:td
					user_id
				Element:td
					optional
				Element:td
				Element:td
					User
				Element:code
					id
					or
				Element:code
					email
					to retrieve the leads belonging to this user only.
				Element:tr
				Element:td
					email
				Element:td
					optional
				Element:td
				Element:td
					Email address entered in the lead’s description or in a comment. Return the leads containing this email address.
				Element:tr
				Element:td
					tags
				Element:td
					optional
				Element:td
				Element:td
					An array of tags. Return the leads containing all the tags of the array. The tags could also include the
				Element:code
					Predefined tags
					of your account.
				Element:tr
				Element:td
					offset
				Element:td
					optional
				Element:td
				Element:td
					Shift the returned data by the
				Element:code
					offset
					value. Option used with the
				Element:code
					limit
					parameter in order to paginate the return.
				Element:tr
				Element:td
					updated_after
				Element:td
					optional
				Element:td
				Element:td
					Date of the last update of the lead to retrieve all the leads updated after this date. The date should be in UTC.
			Node:
			(type) c
			(layer)1
				Element:h2
					Create a lead
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					With the API key
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -H
				Element:span
					"Accept: application/ydncrm.v2"
					-H
				Element:span
					"X-API-KEY: 91Jy7XxreymBRMASfTF8"
					-H
				Element:span
					"Content-Type: application/json"
					-d
				Element:span
					'{"title":"Awesome Company","description":"Firstname%3A+John%0ALastname%3A+Doe%0AEmail%3A+john.doe%40company.com","user_id":"stef@youdontneedacrm.com","tags":["prospect","google"]}'
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/leads"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'rest-client'
				Element:span
					key
				Element:span
					=
				Element:span
					"91Jy7XxreymBRMASfTF8"
				Element:span
					header
				Element:span
					=
				Element:span
					{
				Element:span
					'X-API-KEY'
				Element:span
					=>
				Element:span
					key
				Element:span
					,
				Element:span
					content_type: :json
				Element:span
					,
				Element:span
					accept:
				Element:span
					"application/json application/ydncrm.v2"
				Element:span
					}
				Element:span
					parameters
				Element:span
					=
				Element:span
					{
				Element:span
					title:
				Element:span
					"Awesome Company"
				Element:span
					,
				Element:span
					description:
				Element:span
					"Firstname: John
				Element:span
					\n
				Element:span
					Lastname: Doe
				Element:span
					\n
				Element:span
					Email: john.doe@company.com"
				Element:span
					,
				Element:span
					user_id:
				Element:span
					"stef@youdontneedacrm.com"
				Element:span
					,
				Element:span
					tags:
				Element:span
					[
				Element:span
					"prospect"
				Element:span
					,
				Element:span
					"google"
				Element:span
					]
				Element:span
					}
				Element:span
					response
				Element:span
					=
				Element:span
					RestClient
				Element:span
					.
				Element:span
					post
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/leads"
				Element:span
					,
				Element:span
					parameters
				Element:span
					,
				Element:span
					header
				Element:span
					lead
				Element:span
					=
				Element:span
					JSON
				Element:span
					.
				Element:span
					parse
				Element:span
					(
				Element:span
					response
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					With the USER token
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -H
				Element:span
					"Accept: application/ydncrm.v2"
					-H
				Element:span
					"X-USER-TOKEN: ITd-Jb3EC_nCXI2fez4hhg"
					-H
				Element:span
					"Content-Type: application/json"
					-d
				Element:span
					'{"title":"Awesome Company","description":"Firstname%3A+John%0ALastname%3A+Doe%0AEmail%3A+john.doe%40company.com","tags":["prospect","google"]}'
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/leads"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'rest-client'
				Element:span
					token
				Element:span
					=
				Element:span
					"ITd-Jb3EC_nCXI2fez4hhg"
				Element:span
					header
				Element:span
					=
				Element:span
					{
				Element:span
					'X-USER-TOKEN'
				Element:span
					=>
				Element:span
					token
				Element:span
					,
				Element:span
					content_type: :json
				Element:span
					,
				Element:span
					accept:
				Element:span
					"application/json application/ydncrm.v2"
				Element:span
					}
				Element:span
					parameters
				Element:span
					=
				Element:span
					{
				Element:span
					title:
				Element:span
					"Awesome Company"
				Element:span
					,
				Element:span
					description:
				Element:span
					"Firstname: John
				Element:span
					\n
				Element:span
					Lastname: Doe
				Element:span
					\n
				Element:span
					Eamil: john.doe@company.com"
				Element:span
					,
				Element:span
					tags:
				Element:span
					[
				Element:span
					"prospect"
				Element:span
					,
				Element:span
					"google"
				Element:span
					]
				Element:span
					}
				Element:span
					response
				Element:span
					=
				Element:span
					RestClient
				Element:span
					.
				Element:span
					post
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/leads"
				Element:span
					,
				Element:span
					parameters
				Element:span
					,
				Element:span
					header
				Element:span
					lead
				Element:span
					=
				Element:span
					JSON
				Element:span
					.
				Element:span
					parse
				Element:span
					(
				Element:span
					response
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					The above commands return JSON structure like this:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					8114
				Element:span
					,
				Element:span
				Element:span
					"title"
				Element:span
					:
				Element:span
				Element:span
					"Awesome Company"
				Element:span
					,
				Element:span
				Element:span
					"pipeline"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"step"
				Element:span
					:
				Element:span
				Element:span
					"Incoming"
				Element:span
					,
				Element:span
				Element:span
					"step_id"
				Element:span
					:
				Element:span
				Element:span
					45
				Element:span
					,
				Element:span
				Element:span
					"status"
				Element:span
					:
				Element:span
				Element:span
					"Todo"
				Element:span
					,
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"probability"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
					,
				Element:span
				Element:span
					"starred"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"remind_date"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"remind_time"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2014-02-28T20:57:29.000Z"
				Element:span
					,
				Element:span
				Element:span
					"updated_at"
				Element:span
					:
				Element:span
				Element:span
					"2014-02-28T20:57:29.000Z"
				Element:span
					,
				Element:span
				Element:span
					"description"
				Element:span
					:
				Element:span
				Element:span
					"Firstname: John\nLastname: Doe\nEmail: john.doe@company.com"
				Element:span
					,
				Element:span
				Element:span
					"html_description"
				Element:span
					:
				Element:span
				Element:span
					"Firstname: John\nLastname: Doe\nEmail: john.doe@company.com"
				Element:span
					,
				Element:span
				Element:span
					"tags"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
					"google"
				Element:span
					,
				Element:span
					"prospect"
				Element:span
					],
				Element:span
				Element:span
					"created_from"
				Element:span
					:
				Element:span
				Element:span
					"api"
				Element:span
					,
				Element:span
				Element:span
					"user_id"
				Element:span
					:
				Element:span
				Element:span
					514
				Element:span
					,
				Element:span
				Element:span
					"client_folder_id"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"extended_info"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"all_contact_emails"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
					"john.doe@company.com"
				Element:span
					],
				Element:span
				Element:span
					"first_contact_email"
				Element:span
					:
				Element:span
				Element:span
					"john.doe@company.com"
				Element:span
					,
				Element:span
				Element:span
					"permalink"
				Element:span
					:
				Element:span
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/leads/8114"
				Element:span
					,
				Element:span
				Element:span
					"fields"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"email"
				Element:span
					:
				Element:span
				Element:span
					"john.doe@company.com"
				Element:span
					,
				Element:span
				Element:span
					"phone"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"mobile"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"address"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"web"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"first_name"
				Element:span
					:
				Element:span
				Element:span
					"John"
				Element:span
					,
				Element:span
				Element:span
					"last_name"
				Element:span
					:
				Element:span
				Element:span
					"Doe"
				Element:span
					,
				Element:span
				Element:span
					"full_name"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"job"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"fax"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"vat"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"fields_by_name"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"Email"
				Element:span
					:
				Element:span
				Element:span
					"john.doe@company.com"
				Element:span
					,
				Element:span
				Element:span
					"Firstname"
				Element:span
					:
				Element:span
				Element:span
					"John"
				Element:span
					,
				Element:span
				Element:span
					"Lastname"
				Element:span
					:
				Element:span
				Element:span
					"Doe"
				Element:span
					,
				Element:span
				Element:span
					}
				Element:span
					,
				Element:span
				Element:span
					"comment_count"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"bcc_count"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"user"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					514
				Element:span
					,
				Element:span
				Element:span
					"lastname"
				Element:span
					:
				Element:span
				Element:span
					"Stone"
				Element:span
					,
				Element:span
				Element:span
					"firstname"
				Element:span
					:
				Element:span
				Element:span
					"Stéphanie"
				Element:span
					,
				Element:span
				Element:span
					"email"
				Element:span
					:
				Element:span
				Element:span
					"stef@youdontneedacrm.com"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"client_folder"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"business_card_id"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					In case of error you could get these responses
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"401"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Unauthorized: api key [missing | invalid]"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"400"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Parameter user_id [not recognized | should not be used with USER token]."
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"422"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Missing parameter: title is required"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"422"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Missing parameter: description is required"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"422"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Unable to perform your request"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					To create a new lead, you have to pass the required parameters.
			Node:
			(type) c
			(layer)1
				Element:p
					Depending on the key you used, with only the required parameters the lead will belong to:
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					nobody using the
				Element:code
					API
					key and will be unassigned. You will find it in the
				Element:code
					Unassigned leads
					tab.
				Element:li
					the logged user using the
				Element:code
					USER
					token.
			Node:
			(type) c
			(layer)1
				Element:p
					In case you are using the
				Element:code
					API
					key and you want to assign directly the lead to a collaborator, you need to add the email address or the id of the user as parameter. If we cannot retrieve any user registered in the account an error is returned.
			Node:
			(type) c
			(layer)1
				Element:p
					When using the “direct assignment” The user won’t receive a notification when the lead is created. If a notification has to be sent, create the lead unassigned and use the method
				Element:code
					assign
					to assign the lead to the user. With this method, the user is notified.
			Node:
			(type) c
			(layer)1
				Element:p
					The
				Element:code
					user_id
					parameter returns an error when using the
				Element:code
					USER
					token.
			Node:
			(type) c
			(layer)1
				Element:h3
					Http request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					POST https://YOUR_SLUG_HERE.leadalead.com/api/leads
			Node:
			(type) c
			(layer)1
				Element:h3
					Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					title
				Element:td
				Element:strong
					required
				Element:td
					Lead’s title. Usually it corresponds to the company name.
				Element:tr
				Element:td
					description
				Element:td
				Element:strong
					required
				Element:td
					Lead’s description. Usually it contains the information of the contact in the company.
				Element:tr
				Element:td
					user_id
				Element:td
					optional
				Element:td
					User’s
				Element:code
					email address
					or
				Element:code
					id
					to assign the lead to the user. This parameter returns an error in case you are using the login user method to authenticate (
				Element:code
					USER
					token)
				Element:tr
				Element:td
					tags
				Element:td
					optional
				Element:td
					An array of tags describing the lead. If the tags don’t exist they are automatically created. The tags could also include the
				Element:code
					Predefined tags
					of your account.
				Element:tr
				Element:td
					created_at
				Element:td
					optional
				Element:td
					Date of lead’s creation with the following format:
				Element:code
					YYYY-MM-DD HH:MM:SS
					in the
				Element:strong
					time zone of the account
					and the
				Element:strong
					time in 24h format
					.
			Node:
			(type) c
			(layer)1
				Element:h2
					Retrieve a lead
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					With the API key
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -H
				Element:span
					"Accept: application/ydncrm.v2"
					-H
				Element:span
					"X-API-KEY: 91Jy7XxreymBRMASfTF8"
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/leads/8113"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'rest-client'
				Element:span
					key
				Element:span
					=
				Element:span
					"91Jy7XxreymBRMASfTF8"
				Element:span
					header
				Element:span
					=
				Element:span
					{
				Element:span
					'X-API-KEY'
				Element:span
					=>
				Element:span
					key
				Element:span
					,
				Element:span
					content_type: :json
				Element:span
					,
				Element:span
					accept:
				Element:span
					"application/json application/ydncrm.v2"
				Element:span
					}
				Element:span
					response
				Element:span
					=
				Element:span
					RestClient
				Element:span
					.
				Element:span
					get
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/leads/8113"
				Element:span
					,
				Element:span
					header
				Element:span
					lead
				Element:span
					=
				Element:span
					JSON
				Element:span
					.
				Element:span
					parse
				Element:span
					(
				Element:span
					response
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					With the USER token
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -H
				Element:span
					"Accept: application/ydncrm.v2"
					-H
				Element:span
					"X-USER-TOKEN: ITd-Jb3EC_nCXI2fez4hhg"
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/leads/8113"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'rest-client'
				Element:span
					token
				Element:span
					=
				Element:span
					"ITd-Jb3EC_nCXI2fez4hhg"
				Element:span
					header
				Element:span
					=
				Element:span
					{
				Element:span
					'X-USER-TOKEN'
				Element:span
					=>
				Element:span
					token
				Element:span
					,
				Element:span
					content_type: :json
				Element:span
					,
				Element:span
					accept:
				Element:span
					"application/json application/ydncrm.v2"
				Element:span
					}
				Element:span
					response
				Element:span
					=
				Element:span
					RestClient
				Element:span
					.
				Element:span
					get
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/leads/8113"
				Element:span
					,
				Element:span
					header
				Element:span
					lead
				Element:span
					=
				Element:span
					JSON
				Element:span
					.
				Element:span
					parse
				Element:span
					(
				Element:span
					response
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					The above commands return JSON structured like this:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					8113
				Element:span
					,
				Element:span
				Element:span
					"title"
				Element:span
					:
				Element:span
				Element:span
					"Loretta Inc."
				Element:span
					,
				Element:span
				Element:span
					"pipeline"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"step"
				Element:span
					:
				Element:span
				Element:span
					"Incoming"
				Element:span
					,
				Element:span
				Element:span
					"step_id"
				Element:span
					:
				Element:span
				Element:span
					45
				Element:span
					,
				Element:span
				Element:span
					"status"
				Element:span
					:
				Element:span
				Element:span
					"Standby"
				Element:span
					,
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					2400.0
				Element:span
					,
				Element:span
				Element:span
					"probability"
				Element:span
					:
				Element:span
				Element:span
					30
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
					,
				Element:span
				Element:span
					"starred"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"remind_date"
				Element:span
					:
				Element:span
				Element:span
					"2014-03-12"
				Element:span
					,
				Element:span
				Element:span
					"remind_time"
				Element:span
					:
				Element:span
				Element:span
					"09:00"
				Element:span
					,
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2014-02-28T17:37:33.000Z"
				Element:span
					,
				Element:span
				Element:span
					"updated_at"
				Element:span
					:
				Element:span
				Element:span
					"2014-02-28T17:38:05.000Z"
				Element:span
					,
				Element:span
				Element:span
					"description"
				Element:span
					:
				Element:span
				Element:span
					"Firstname: Natalia\nLastname: Bawer\nFull name: Natalia Bawer\nEmail: natalia.bawer@loretta-inc.com\nPhone: 801 274 6798\nMobile: 832 764 1930 \nAddress: 1234 N 7864 W President Bld - Salt Lake City, UT 84105\nWeb: http://more-info-loretta.com\nDepartment: Sales\n--- Entrez une description ci-dessous ---\n \n--- \nMet Natalia at a seminar. She could be interested.\nShe is on business trip. Have to call her when she is back."
				Element:span
					,
				Element:span
				Element:span
					"html_description"
				Element:span
					:
				Element:span
				Element:span
					"Firstname: Natalia\u003Cbr /\u003ELastname: Bawer\u003Cbr /\u003EFull name: Natalia Bawer\u003Cbr /\u003EEmail: natalia.bawer@loretta-inc.com\u003Cbr /\u003EPhone: 801 274 6798\u003Cbr /\u003EMobile: 832 764 1930\u0026nbsp;\u003Cbr /\u003EAddress: 1234 N 7864 W President Bld - Salt Lake City, UT 84105\u003Cbr /\u003EWeb: http://more-info-loretta.com\u003Cbr /\u003EDepartment: Sales\u003Cbr /\u003E\r\n\u003Cp class=\"lead-desc-separator\"\u003E--- Entrez une description ci-dessous ---\u003C/p\u003E\r\n\u003Cdiv\u003E\u0026nbsp;\u003C/div\u003E\r\n\u003Cbr /\u003E--- \u003Cbr /\u003E\r\n\u003Cp\u003EMet Natalia at a seminar. She could be interested.\u003Cbr /\u003EShe is on business trip. Have to call her when she is back.\u003C/p\u003E"
				Element:span
					,
				Element:span
				Element:span
					"tags"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
					"small"
				Element:span
					,
				Element:span
					"US"
				Element:span
					],
				Element:span
				Element:span
					"created_from"
				Element:span
					:
				Element:span
				Element:span
					"api"
				Element:span
					,
				Element:span
				Element:span
					"user_id"
				Element:span
					:
				Element:span
				Element:span
					514
				Element:span
					,
				Element:span
				Element:span
					"client_folder_id"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"extended_info"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"first_contact_email"
				Element:span
					:
				Element:span
				Element:span
					"natalia.bawer@loretta-inc.com"
				Element:span
					,
				Element:span
				Element:span
					"all_contact_emails"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
					"natalia.bawer@loretta-inc.com"
				Element:span
					],
				Element:span
				Element:span
					"permalink"
				Element:span
					:
				Element:span
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/leads/8113"
				Element:span
					,
				Element:span
				Element:span
					"fields"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"email"
				Element:span
					:
				Element:span
				Element:span
					"natalia.bawer@loretta-inc.com"
				Element:span
					,
				Element:span
				Element:span
					"phone"
				Element:span
					:
				Element:span
				Element:span
					"801 274 6798"
				Element:span
					,
				Element:span
				Element:span
					"mobile"
				Element:span
					:
				Element:span
				Element:span
					"832 764 1930 "
				Element:span
					,
				Element:span
				Element:span
					"address"
				Element:span
					:
				Element:span
				Element:span
					"1234 N 7864 W President Bld - Salt Lake City, UT 84105"
				Element:span
					,
				Element:span
				Element:span
					"web"
				Element:span
					:
				Element:span
				Element:span
					"http://more-info-loretta.com"
				Element:span
					,
				Element:span
				Element:span
					"first_name"
				Element:span
					:
				Element:span
				Element:span
					"Natalia"
				Element:span
					,
				Element:span
				Element:span
					"last_name"
				Element:span
					:
				Element:span
				Element:span
					"Bawer"
				Element:span
					,
				Element:span
				Element:span
					"full_name"
				Element:span
					:
				Element:span
				Element:span
					"Natalia Bawer"
				Element:span
					,
				Element:span
				Element:span
					"job"
				Element:span
					:
				Element:span
				Element:span
					"Sales"
				Element:span
					,
				Element:span
				Element:span
					"fax"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"vat"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"fields_by_name"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"Firstname"
				Element:span
					:
				Element:span
				Element:span
					"Natalia"
				Element:span
					,
				Element:span
				Element:span
					"Lastname"
				Element:span
					:
				Element:span
				Element:span
					"Bawer"
				Element:span
					,
				Element:span
				Element:span
					"Full name"
				Element:span
					:
				Element:span
				Element:span
					"Natalia Bawer"
				Element:span
					,
				Element:span
				Element:span
					"Email"
				Element:span
					:
				Element:span
				Element:span
					"natalia.bawer@loretta-inc.com"
				Element:span
					,
				Element:span
				Element:span
					"Phone"
				Element:span
					:
				Element:span
				Element:span
					"801 274 6798"
				Element:span
					,
				Element:span
				Element:span
					"Mobile"
				Element:span
					:
				Element:span
				Element:span
					"832 764 1930 "
				Element:span
					,
				Element:span
				Element:span
					"Address"
				Element:span
					:
				Element:span
				Element:span
					"1234 N 7864 W President Bld - Salt Lake City, UT 84105"
				Element:span
					,
				Element:span
				Element:span
					"Web"
				Element:span
					:
				Element:span
				Element:span
					"http://more-info-loretta.com"
				Element:span
					,
				Element:span
				Element:span
					"Department"
				Element:span
					:
				Element:span
				Element:span
					"Sales"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"comment_count"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"bcc_count"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"user"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					514
				Element:span
					,
				Element:span
				Element:span
					"lastname"
				Element:span
					:
				Element:span
				Element:span
					"Stone"
				Element:span
					,
				Element:span
				Element:span
					"firstname"
				Element:span
					:
				Element:span
				Element:span
					"Stéphanie"
				Element:span
					,
				Element:span
				Element:span
					"email"
				Element:span
					:
				Element:span
				Element:span
					"stef@youdontneedacrm.com"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"client_folder"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Acme"
				Element:span
					,
				Element:span
				Element:span
					"description"
				Element:span
					:
				Element:span
				Element:span
					"Billing address: 123 heaven avenue, San Francisco CA\u0026nbsp;94103\u003Cbr /\u003EShipping address: 456 pretty boulevard, Paradise CA\u0026nbsp;94188"
				Element:span
					,
				Element:span
				Element:span
					"is_active"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-01-30T22:03:14.000Z"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"business_card_id"
				Element:span
					:
				Element:span
				Element:span
					412
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					In case of error you could get these responses
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"401"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Unauthorized: api key [missing | invalid]"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"404"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Entry not found"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"422"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Missing parameter: id is required"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"422"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Unable to perform your request"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Retrieve a lead previously created from its id.
			Node:
			(type) c
			(layer)1
				Element:h3
					Http request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET https://YOUR_SLUG_HERE.leadalead.com/api/leads/{id}
			Node:
			(type) c
			(layer)1
				Element:h3
					Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
				Element:strong
					required
				Element:td
					Lead’s id. The identifier of the lead.
			Node:
			(type) c
			(layer)1
				Element:aside
					If you want to check if the status of a lead has changed, you don’t need to get each lead and check the status. Use our [Webhook Events](#webhook-events) section to be directly notified when a lead is created or when the status is changed.
			Node:
			(type) c
			(layer)1
				Element:h2
					Update a lead
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					With the API key
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -XPUT -H
				Element:span
					"Accept: application/ydncrm.v2"
					-H
				Element:span
					"X-API-KEY: 91Jy7XxreymBRMASfTF8"
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/leads/8113"
					--data
				Element:span
					"amount=1562.89&probability=85&step=In-touch"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'rest-client'
				Element:span
					key
				Element:span
					=
				Element:span
					"91Jy7XxreymBRMASfTF8"
				Element:span
					header
				Element:span
					=
				Element:span
					{
				Element:span
					'X-API-KEY'
				Element:span
					=>
				Element:span
					key
				Element:span
					,
				Element:span
					content_type: :json
				Element:span
					,
				Element:span
					accept:
				Element:span
					"application/json application/ydncrm.v2"
				Element:span
					}
				Element:span
					parameters
				Element:span
					=
				Element:span
					{
				Element:span
					amount:
				Element:span
					1562
				Element:span
					.
				Element:span
					89
				Element:span
					,
				Element:span
					probability:
				Element:span
					85
				Element:span
					,
				Element:span
					step:
				Element:span
					"In-touch"
				Element:span
					}
				Element:span
					response
				Element:span
					=
				Element:span
					RestClient
				Element:span
					.
				Element:span
					put
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/leads/8113"
				Element:span
					,
				Element:span
					parameters
				Element:span
					,
				Element:span
					header
				Element:span
					updated_lead
				Element:span
					=
				Element:span
					JSON
				Element:span
					.
				Element:span
					parse
				Element:span
					(
				Element:span
					response
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					With the USER token
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -XPUT -H
				Element:span
					"Accept: application/ydncrm.v2"
					-H
				Element:span
					"X-USER-TOKEN: ITd-Jb3EC_nCXI2fez4hhg"
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/leads/8113"
					--data
				Element:span
					"amount=1562.89&probability=85&step=In-touch"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'rest-client'
				Element:span
					token
				Element:span
					=
				Element:span
					"ITd-Jb3EC_nCXI2fez4hhg"
				Element:span
					header
				Element:span
					=
				Element:span
					{
				Element:span
					'X-USER-TOKEN'
				Element:span
					=>
				Element:span
					token
				Element:span
					,
				Element:span
					content_type: :json
				Element:span
					,
				Element:span
					accept:
				Element:span
					"application/json application/ydncrm.v2"
				Element:span
					}
				Element:span
					parameters
				Element:span
					=
				Element:span
					{
				Element:span
					amount:
				Element:span
					1562
				Element:span
					.
				Element:span
					89
				Element:span
					,
				Element:span
					probability:
				Element:span
					85
				Element:span
					,
				Element:span
					step:
				Element:span
					"In-touch"
				Element:span
					}
				Element:span
					response
				Element:span
					=
				Element:span
					RestClient
				Element:span
					.
				Element:span
					put
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/leads/8113"
				Element:span
					,
				Element:span
					parameters
				Element:span
					,
				Element:span
					header
				Element:span
					updated_lead
				Element:span
					=
				Element:span
					JSON
				Element:span
					.
				Element:span
					parse
				Element:span
					(
				Element:span
					response
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					The above commands return JSON structured like this:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					8113
				Element:span
					,
				Element:span
				Element:span
					"title"
				Element:span
					:
				Element:span
				Element:span
					"Loretta Inc."
				Element:span
					,
				Element:span
				Element:span
					"pipeline"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"step"
				Element:span
					:
				Element:span
				Element:span
					"In-touch"
				Element:span
					,
				Element:span
				Element:span
					"step_id"
				Element:span
					:
				Element:span
				Element:span
					45
				Element:span
					,
				Element:span
				Element:span
					"status"
				Element:span
					:
				Element:span
				Element:span
					"Standby"
				Element:span
					,
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					1562.89
				Element:span
					,
				Element:span
				Element:span
					"probability"
				Element:span
					:
				Element:span
				Element:span
					85
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
					,
				Element:span
				Element:span
					"starred"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"remind_date"
				Element:span
					:
				Element:span
				Element:span
					"2014-03-12"
				Element:span
					,
				Element:span
				Element:span
					"remind_time"
				Element:span
					:
				Element:span
				Element:span
					"09:00"
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2014-02-28T17:37:33.000Z"
				Element:span
					,
				Element:span
				Element:span
					"updated_at"
				Element:span
					:
				Element:span
				Element:span
					"2014-02-28T17:38:05.000Z"
				Element:span
					,
				Element:span
				Element:span
					"description"
				Element:span
					:
				Element:span
				Element:span
					"Firstname: Natalia\nLastname: Bawer\nFull name: Natalia Bawer\nEmail: natalia.bawer@loretta-inc.com\nPhone: 801 274 6798\nMobile: 832 764 1930 \nAddress: 1234 N 7864 W President Bld - Salt Lake City, UT 84105\nWeb: http://more-info-loretta.com\nDepartment: Sales\n--- Entrez une description ci-dessous ---\n \n--- \nMet Natalia at a seminar. She could be interested.\nShe is on business trip. Have to call her when she is back."
				Element:span
					,
				Element:span
				Element:span
					"html_description"
				Element:span
					:
				Element:span
				Element:span
					"Firstname: Natalia\u003Cbr /\u003ELastname: Bawer\u003Cbr /\u003EFull name: Natalia Bawer\u003Cbr /\u003EEmail: natalia.bawer@loretta-inc.com\u003Cbr /\u003EPhone: 801 274 6798\u003Cbr /\u003EMobile: 832 764 1930\u0026nbsp;\u003Cbr /\u003EAddress: 1234 N 7864 W President Bld - Salt Lake City, UT 84105\u003Cbr /\u003EWeb: http://more-info-loretta.com\u003Cbr /\u003EDepartment: Sales\u003Cbr /\u003E\r\n\u003Cp class=\"lead-desc-separator\"\u003E--- Entrez une description ci-dessous ---\u003C/p\u003E\r\n\u003Cdiv\u003E\u0026nbsp;\u003C/div\u003E\r\n\u003Cbr /\u003E--- \u003Cbr /\u003E\r\n\u003Cp\u003EMet Natalia at a seminar. She could be interested.\u003Cbr /\u003EShe is on business trip. Have to call her when she is back.\u003C/p\u003E"
				Element:span
					,
				Element:span
				Element:span
					"tags"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
					"small"
				Element:span
					,
				Element:span
					"US"
				Element:span
					],
				Element:span
				Element:span
					"created_from"
				Element:span
					:
				Element:span
				Element:span
					"api"
				Element:span
					,
				Element:span
				Element:span
					"user_id"
				Element:span
					:
				Element:span
				Element:span
					514
				Element:span
					,
				Element:span
				Element:span
					"client_folder_id"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"extended_info"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"first_contact_email"
				Element:span
					:
				Element:span
				Element:span
					"natalia.bawer@loretta-inc.com"
				Element:span
					,
				Element:span
				Element:span
					"all_contact_emails"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
					"natalia.bawer@loretta-inc.com"
				Element:span
					],
				Element:span
				Element:span
					"permalink"
				Element:span
					:
				Element:span
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/leads/8113"
				Element:span
					,
				Element:span
				Element:span
					"fields"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"email"
				Element:span
					:
				Element:span
				Element:span
					"natalia.bawer@loretta-inc.com"
				Element:span
					,
				Element:span
				Element:span
					"phone"
				Element:span
					:
				Element:span
				Element:span
					"801 274 6798"
				Element:span
					,
				Element:span
				Element:span
					"mobile"
				Element:span
					:
				Element:span
				Element:span
					"832 764 1930 "
				Element:span
					,
				Element:span
				Element:span
					"address"
				Element:span
					:
				Element:span
				Element:span
					"1234 N 7864 W President Bld - Salt Lake City, UT 84105"
				Element:span
					,
				Element:span
				Element:span
					"web"
				Element:span
					:
				Element:span
				Element:span
					"http://more-info-loretta.com"
				Element:span
					,
				Element:span
				Element:span
					"first_name"
				Element:span
					:
				Element:span
				Element:span
					"Natalia"
				Element:span
					,
				Element:span
				Element:span
					"last_name"
				Element:span
					:
				Element:span
				Element:span
					"Bawer"
				Element:span
					,
				Element:span
				Element:span
					"full_name"
				Element:span
					:
				Element:span
				Element:span
					"Natalia Bawer"
				Element:span
					,
				Element:span
				Element:span
					"job"
				Element:span
					:
				Element:span
				Element:span
					"Sales"
				Element:span
					,
				Element:span
				Element:span
					"fax"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"vat"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"fields_by_name"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"Firstname"
				Element:span
					:
				Element:span
				Element:span
					"Natalia"
				Element:span
					,
				Element:span
				Element:span
					"Lastname"
				Element:span
					:
				Element:span
				Element:span
					"Bawer"
				Element:span
					,
				Element:span
				Element:span
					"Full name"
				Element:span
					:
				Element:span
				Element:span
					"Natalia Bawer"
				Element:span
					,
				Element:span
				Element:span
					"Email"
				Element:span
					:
				Element:span
				Element:span
					"natalia.bawer@loretta-inc.com"
				Element:span
					,
				Element:span
				Element:span
					"Phone"
				Element:span
					:
				Element:span
				Element:span
					"801 274 6798"
				Element:span
					,
				Element:span
				Element:span
					"Mobile"
				Element:span
					:
				Element:span
				Element:span
					"832 764 1930 "
				Element:span
					,
				Element:span
				Element:span
					"Address"
				Element:span
					:
				Element:span
				Element:span
					"1234 N 7864 W President Bld - Salt Lake City, UT 84105"
				Element:span
					,
				Element:span
				Element:span
					"Web"
				Element:span
					:
				Element:span
				Element:span
					"http://more-info-loretta.com"
				Element:span
					,
				Element:span
				Element:span
					"Department"
				Element:span
					:
				Element:span
				Element:span
					"Sales"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"comment_count"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"bcc_count"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"user"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					514
				Element:span
					,
				Element:span
				Element:span
					"lastname"
				Element:span
					:
				Element:span
				Element:span
					"Stone"
				Element:span
					,
				Element:span
				Element:span
					"firstname"
				Element:span
					:
				Element:span
				Element:span
					"Stéphanie"
				Element:span
					,
				Element:span
				Element:span
					"email"
				Element:span
					:
				Element:span
				Element:span
					"stef@youdontneedacrm.com"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"client_folder"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Acme"
				Element:span
					,
				Element:span
				Element:span
					"description"
				Element:span
					:
				Element:span
				Element:span
					"Billing address: 123 heaven avenue, San Francisco CA\u0026nbsp;94103\u003Cbr /\u003EShipping address: 456 pretty boulevard, Paradise CA\u0026nbsp;94188"
				Element:span
					,
				Element:span
				Element:span
					"is_active"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-01-30T22:03:14.000Z"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"business_card_id"
				Element:span
					:
				Element:span
				Element:span
					412
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					In case of error you could get these responses
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"401"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Unauthorized: api key [missing | invalid]"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"400"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"You cannot update the parameters status, step, starred, amount or probability without assigning the lead first."
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"400"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Parameter [status | step] not recognized."
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"400"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Missing parameter: remind_at is required when status is changed to standby"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"400"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Date format invalid for remind_date (YYYY-MM-DD) or remind_time (HH:MM)"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"400"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"A probability cannot be set without an amount"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"404"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Entry not found"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"422"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Missing parameter: id is required"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"422"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Missing parameter: remind_at is required when status is changed to STANDBY"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"422"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Date format invalid for remind_at (YYYY-MM-DD) or remind_time (HH:MM)"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"422"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Unable to perform your request"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Update a lead previously created.
			Node:
			(type) c
			(layer)1
				Element:aside
					If the lead is not assigned, the only parameters that can be updated on the lead are the **user_id**, the **title** and the **description** of the lead, all other parameters will be ignored.
				Element:br
					The date and time parameters in case of setting a reminder has to be in the time zone of the account and the time should be in 24h.
			Node:
			(type) c
			(layer)1
				Element:h3
					Http request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					PUT https://YOUR_SLUG_HERE.leadalead.com/api/leads/{id}
			Node:
			(type) c
			(layer)1
				Element:h3
					Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
				Element:th
					Default
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
				Element:strong
					required
				Element:td
				Element:td
					Lead’s id. The identifier of the lead.
				Element:tr
				Element:td
					title
				Element:td
					optional
				Element:td
				Element:td
					Lead’s title. The new title of the lead.
				Element:tr
				Element:td
					description
				Element:td
					optional
				Element:td
				Element:td
					Lead’s description. The new description of the lead.
				Element:tr
				Element:td
					status
				Element:td
					optional
				Element:td
				Element:td
					Lead’s status. The new status of the lead. Could be one of these values:
				Element:code
					todo
					,
				Element:code
					standby
					,
				Element:code
					won
					,
				Element:code
					lost
					,
				Element:code
					cancelled
					. If the value is not recognized, an error 400 is returned.
				Element:tr
				Element:td
					remind_date
				Element:td
					optional
				Element:td
				Element:td
					Date of the reminder with the following format:
				Element:code
					YYYY-MM-DD
					in the
				Element:strong
					time zone of the account
					.
				Element:strong
					If the status is changed to
					, otherwise an error 400 is returned.
				Element:code
					standby
					, this parameter is mandatory
				Element:tr
				Element:td
					remind_time
				Element:td
					optional
				Element:td
				Element:td
					When a reminder date is added, a time can also be set. The format of the time is
				Element:code
					HH:MM
					and in
				Element:strong
					24h
					. It is not mandatory, only the remind_at is mandatory in case of status changed to
				Element:code
					standby
					.
				Element:tr
				Element:td
					amount
				Element:td
					optional
				Element:td
				Element:td
					Lead’s amount. The new amount of the lead.
				Element:tr
				Element:td
					probability
				Element:td
					optional
				Element:td
				Element:td
					Lead’s probability. The new probability of the lead. The probability cannot be set if there is no amount.
				Element:tr
				Element:td
					starred
				Element:td
					optional
				Element:td
				Element:td
					Lead’s starred.
				Element:code
					true
					if the lead is starred,
				Element:code
					false
					otherwise.
				Element:tr
				Element:td
					step
				Element:td
					optional
				Element:td
				Element:td
					Lead’s step name. The new
				Element:strong
					step name
					of the lead. If the step is not recognized, an error 400 is returned.
				Element:tr
				Element:td
					user_id
				Element:td
					optional
				Element:td
				Element:td
					Lead’s user id or email. The new
				Element:strong
					user id
					or
				Element:strong
					user email
					of the lead. This update corresponds to assign the lead to a new user.
				Element:tr
				Element:td
					tags
				Element:td
					optional
				Element:td
				Element:td
					An array of tags describing the lead. If the tags don’t exist they are automatically created. The tags could also include the
				Element:code
					Predefined tags
					of your account.
				Element:tr
				Element:td
					created_at
				Element:td
					optional
				Element:td
				Element:td
					Date of lead’s creation with the following format:
				Element:code
					YYYY-MM-DD HH:MM:SS
					in the
				Element:strong
					time zone of the account
					and the
				Element:strong
					time in 24h format
					.
			Node:
			(type) c
			(layer)1
				Element:h2
					Assign a lead
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					With the API key
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -H
				Element:span
					"Accept: application/ydncrm.v2"
					-H
				Element:span
					"X-API-KEY: 91Jy7XxreymBRMASfTF8"
					-XPOST --data
				Element:span
					"user_id=436"
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/leads/8113/assign"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'rest-client'
				Element:span
					key
				Element:span
					=
				Element:span
					"91Jy7XxreymBRMASfTF8"
				Element:span
					header
				Element:span
					=
				Element:span
					{
				Element:span
					'X-API-KEY'
				Element:span
					=>
				Element:span
					key
				Element:span
					,
				Element:span
					content_type: :json
				Element:span
					,
				Element:span
					accept:
				Element:span
					"application/json application/ydncrm.v2"
				Element:span
					}
				Element:span
					parameters
				Element:span
					=
				Element:span
					{
				Element:span
					user_id:
				Element:span
					436
				Element:span
					}
				Element:span
					response
				Element:span
					=
				Element:span
					RestClient
				Element:span
					.
				Element:span
					post
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/leads/8113/assign"
				Element:span
					,
				Element:span
					parameters
				Element:span
					,
				Element:span
					header
				Element:span
					lead
				Element:span
					=
				Element:span
					JSON
				Element:span
					.
				Element:span
					parse
				Element:span
					(
				Element:span
					response
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					With the USER token
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -H
				Element:span
					"Accept: application/ydncrm.v2"
					-H
				Element:span
					"X-USER-TOKEN: ITd-Jb3EC_nCXI2fez4hhg"
					-XPOST --data
				Element:span
					"user_id=436"
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/leads/8113/assign"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'rest-client'
				Element:span
					token
				Element:span
					=
				Element:span
					"ITd-Jb3EC_nCXI2fez4hhg"
				Element:span
					header
				Element:span
					=
				Element:span
					{
				Element:span
					'X-USER-TOKEN'
				Element:span
					=>
				Element:span
					token
				Element:span
					,
				Element:span
					content_type: :json
				Element:span
					,
				Element:span
					accept:
				Element:span
					"application/json application/ydncrm.v2"
				Element:span
					}
				Element:span
					parameters
				Element:span
					=
				Element:span
					{
				Element:span
					user_id:
				Element:span
					436
				Element:span
					}
				Element:span
					response
				Element:span
					=
				Element:span
					RestClient
				Element:span
					.
				Element:span
					post
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/leads/8113/assign"
				Element:span
					,
				Element:span
					parameters
				Element:span
					,
				Element:span
					header
				Element:span
					lead
				Element:span
					=
				Element:span
					JSON
				Element:span
					.
				Element:span
					parse
				Element:span
					(
				Element:span
					response
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					The above commands return JSON structured like this:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					8113
				Element:span
					,
				Element:span
				Element:span
					"title"
				Element:span
					:
				Element:span
				Element:span
					"Loretta Inc."
				Element:span
					,
				Element:span
				Element:span
					"pipeline"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"step"
				Element:span
					:
				Element:span
				Element:span
					"In-touch"
				Element:span
					,
				Element:span
				Element:span
					"step_id"
				Element:span
					:
				Element:span
				Element:span
					45
				Element:span
					,
				Element:span
				Element:span
					"status"
				Element:span
					:
				Element:span
				Element:span
					"Standby"
				Element:span
					,
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					1562.89
				Element:span
					,
				Element:span
				Element:span
					"probability"
				Element:span
					:
				Element:span
				Element:span
					85
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
					,
				Element:span
				Element:span
					"starred"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"remind_date"
				Element:span
					:
				Element:span
				Element:span
					"2014-03-12"
				Element:span
					,
				Element:span
				Element:span
					"remind_time"
				Element:span
					:
				Element:span
				Element:span
					"09:00"
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2014-02-28T17:37:33.000Z"
				Element:span
					,
				Element:span
				Element:span
					"updated_at"
				Element:span
					:
				Element:span
				Element:span
					"2014-02-28T17:38:05.000Z"
				Element:span
					,
				Element:span
				Element:span
					"description"
				Element:span
					:
				Element:span
				Element:span
					"Firstname: Natalia\nLastname: Bawer\nFull name: Natalia Bawer\nEmail: natalia.bawer@loretta-inc.com\nPhone: 801 274 6798\nMobile: 832 764 1930 \nAddress: 1234 N 7864 W President Bld - Salt Lake City, UT 84105\nWeb: http://more-info-loretta.com\nDepartment: Sales\n--- Entrez une description ci-dessous ---\n \n--- \nMet Natalia at a seminar. She could be interested.\nShe is on business trip. Have to call her when she is back."
				Element:span
					,
				Element:span
				Element:span
					"html_description"
				Element:span
					:
				Element:span
				Element:span
					"Firstname: Natalia\u003Cbr /\u003ELastname: Bawer\u003Cbr /\u003EFull name: Natalia Bawer\u003Cbr /\u003EEmail: natalia.bawer@loretta-inc.com\u003Cbr /\u003EPhone: 801 274 6798\u003Cbr /\u003EMobile: 832 764 1930\u0026nbsp;\u003Cbr /\u003EAddress: 1234 N 7864 W President Bld - Salt Lake City, UT 84105\u003Cbr /\u003EWeb: http://more-info-loretta.com\u003Cbr /\u003EDepartment: Sales\u003Cbr /\u003E\r\n\u003Cp class=\"lead-desc-separator\"\u003E--- Entrez une description ci-dessous ---\u003C/p\u003E\r\n\u003Cdiv\u003E\u0026nbsp;\u003C/div\u003E\r\n\u003Cbr /\u003E--- \u003Cbr /\u003E\r\n\u003Cp\u003EMet Natalia at a seminar. She could be interested.\u003Cbr /\u003EShe is on business trip. Have to call her when she is back.\u003C/p\u003E"
				Element:span
					,
				Element:span
				Element:span
					"tags"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
					"small"
				Element:span
					,
				Element:span
					"US"
				Element:span
					],
				Element:span
				Element:span
					"created_from"
				Element:span
					:
				Element:span
				Element:span
					"api"
				Element:span
					,
				Element:span
				Element:span
					"user_id"
				Element:span
					:
				Element:span
				Element:span
					514
				Element:span
					,
				Element:span
				Element:span
					"client_folder_id"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"extended_info"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"first_contact_email"
				Element:span
					:
				Element:span
				Element:span
					"natalia.bawer@loretta-inc.com"
				Element:span
					,
				Element:span
				Element:span
					"all_contact_emails"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
					"natalia.bawer@loretta-inc.com"
				Element:span
					],
				Element:span
				Element:span
					"permalink"
				Element:span
					:
				Element:span
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/leads/8113"
				Element:span
					,
				Element:span
				Element:span
					"fields"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"email"
				Element:span
					:
				Element:span
				Element:span
					"natalia.bawer@loretta-inc.com"
				Element:span
					,
				Element:span
				Element:span
					"phone"
				Element:span
					:
				Element:span
				Element:span
					"801 274 6798"
				Element:span
					,
				Element:span
				Element:span
					"mobile"
				Element:span
					:
				Element:span
				Element:span
					"832 764 1930 "
				Element:span
					,
				Element:span
				Element:span
					"address"
				Element:span
					:
				Element:span
				Element:span
					"1234 N 7864 W President Bld - Salt Lake City, UT 84105"
				Element:span
					,
				Element:span
				Element:span
					"web"
				Element:span
					:
				Element:span
				Element:span
					"http://more-info-loretta.com"
				Element:span
					,
				Element:span
				Element:span
					"first_name"
				Element:span
					:
				Element:span
				Element:span
					"Natalia"
				Element:span
					,
				Element:span
				Element:span
					"last_name"
				Element:span
					:
				Element:span
				Element:span
					"Bawer"
				Element:span
					,
				Element:span
				Element:span
					"full_name"
				Element:span
					:
				Element:span
				Element:span
					"Natalia Bawer"
				Element:span
					,
				Element:span
				Element:span
					"job"
				Element:span
					:
				Element:span
				Element:span
					"Sales"
				Element:span
					,
				Element:span
				Element:span
					"fax"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"vat"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"fields_by_name"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"Firstname"
				Element:span
					:
				Element:span
				Element:span
					"Natalia"
				Element:span
					,
				Element:span
				Element:span
					"Lastname"
				Element:span
					:
				Element:span
				Element:span
					"Bawer"
				Element:span
					,
				Element:span
				Element:span
					"Full name"
				Element:span
					:
				Element:span
				Element:span
					"Natalia Bawer"
				Element:span
					,
				Element:span
				Element:span
					"Email"
				Element:span
					:
				Element:span
				Element:span
					"natalia.bawer@loretta-inc.com"
				Element:span
					,
				Element:span
				Element:span
					"Phone"
				Element:span
					:
				Element:span
				Element:span
					"801 274 6798"
				Element:span
					,
				Element:span
				Element:span
					"Mobile"
				Element:span
					:
				Element:span
				Element:span
					"832 764 1930 "
				Element:span
					,
				Element:span
				Element:span
					"Address"
				Element:span
					:
				Element:span
				Element:span
					"1234 N 7864 W President Bld - Salt Lake City, UT 84105"
				Element:span
					,
				Element:span
				Element:span
					"Web"
				Element:span
					:
				Element:span
				Element:span
					"http://more-info-loretta.com"
				Element:span
					,
				Element:span
				Element:span
					"Department"
				Element:span
					:
				Element:span
				Element:span
					"Sales"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"comment_count"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"bcc_count"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"user"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					436
				Element:span
					,
				Element:span
				Element:span
					"lastname"
				Element:span
					:
				Element:span
				Element:span
					"Rose"
				Element:span
					,
				Element:span
				Element:span
					"firstname"
				Element:span
					:
				Element:span
				Element:span
					"Juliette"
				Element:span
					,
				Element:span
				Element:span
					"email"
				Element:span
					:
				Element:span
				Element:span
					"juliette@example.com"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"client_folder"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Acme"
				Element:span
					,
				Element:span
				Element:span
					"description"
				Element:span
					:
				Element:span
				Element:span
					"Billing address: 123 heaven avenue, San Francisco CA\u0026nbsp;94103\u003Cbr /\u003EShipping address: 456 pretty boulevard, Paradise CA\u0026nbsp;94188"
				Element:span
					,
				Element:span
				Element:span
					"is_active"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-01-30T22:03:14.000Z"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					In case of error you could get these responses
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"401"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Unauthorized: api key [missing | invalid]"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"404"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Entry not found"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"422"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Missing parameter: user_id is required"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"422"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Unable to perform your request"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Assign a lead to a collaborator. The user will be notified by email of the assignment if the preference to receive notifications is checked.
			Node:
			(type) c
			(layer)1
				Element:h3
					Http request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					POST https://YOUR_SLUG_HERE.leadalead.com/api/leads/{id}/assign
			Node:
			(type) c
			(layer)1
				Element:h3
					Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					user_id
				Element:td
				Element:strong
					required
				Element:td
					Lead’s user id or email. The new
				Element:strong
					user id
					or
				Element:strong
					user email
					of the lead. This update corresponds to assign the lead to a new user.
			Node:
			(type) c
			(layer)1
				Element:aside
					When using the `USER` token, if the user doesn’t have the permission to see the lead or cannot assign leads, the lead won’t be assigned.
			Node:
			(type) c
			(layer)1
				Element:h2
					Add a lead to a Client folder
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					With the API key
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -H
				Element:span
					"Accept: application/ydncrm.v2"
					-H
				Element:span
					"X-API-KEY: 91Jy7XxreymBRMASfTF8"
					-H
				Element:span
					"Content-Type: application/json"
					-d
				Element:span
					'{"client_id": 12}'
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/leads/8113/add_to_client"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'rest-client'
				Element:span
					key
				Element:span
					=
				Element:span
					"91Jy7XxreymBRMASfTF8"
				Element:span
					header
				Element:span
					=
				Element:span
					{
				Element:span
					'X-API-KEY'
				Element:span
					=>
				Element:span
					key
				Element:span
					,
				Element:span
					content_type: :json
				Element:span
					,
				Element:span
					accept:
				Element:span
					"application/json application/ydncrm.v2"
				Element:span
					}
				Element:span
					parameters
				Element:span
					=
				Element:span
					{
				Element:span
					client_id:
				Element:span
					12
				Element:span
					}
				Element:span
					response
				Element:span
					=
				Element:span
					RestClient
				Element:span
					.
				Element:span
					post
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/leads/8113/add_to_client"
				Element:span
					,
				Element:span
					parameters
				Element:span
					,
				Element:span
					header
				Element:span
					lead
				Element:span
					=
				Element:span
					JSON
				Element:span
					.
				Element:span
					parse
				Element:span
					(
				Element:span
					response
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					With the USER token
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -H
				Element:span
					"Accept: application/ydncrm.v2"
					-H
				Element:span
					"X-USER-TOKEN: ITd-Jb3EC_nCXI2fez4hhg"
					-H
				Element:span
					"Content-Type: application/json"
					-d
				Element:span
					'{"client_id": 12}'
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/leads/8113/add_to_client"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'rest-client'
				Element:span
					token
				Element:span
					=
				Element:span
					"ITd-Jb3EC_nCXI2fez4hhg"
				Element:span
					header
				Element:span
					=
				Element:span
					{
				Element:span
					'X-USER-TOKEN'
				Element:span
					=>
				Element:span
					token
				Element:span
					,
				Element:span
					content_type: :json
				Element:span
					,
				Element:span
					accept:
				Element:span
					"application/json application/ydncrm.v2"
				Element:span
					}
				Element:span
					parameters
				Element:span
					=
				Element:span
					{
				Element:span
					client_id:
				Element:span
					12
				Element:span
					}
				Element:span
					response
				Element:span
					=
				Element:span
					RestClient
				Element:span
					.
				Element:span
					post
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/leads/8113/add_to_client"
				Element:span
					,
				Element:span
					parameters
				Element:span
					,
				Element:span
					header
				Element:span
					lead
				Element:span
					=
				Element:span
					JSON
				Element:span
					.
				Element:span
					parse
				Element:span
					(
				Element:span
					response
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					The above commands return JSON structured like this:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					8113
				Element:span
					,
				Element:span
				Element:span
					"title"
				Element:span
					:
				Element:span
				Element:span
					"Loretta Inc."
				Element:span
					,
				Element:span
				Element:span
					"pipeline"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"step"
				Element:span
					:
				Element:span
				Element:span
					"In-touch"
				Element:span
					,
				Element:span
				Element:span
					"step_id"
				Element:span
					:
				Element:span
				Element:span
					45
				Element:span
					,
				Element:span
				Element:span
					"status"
				Element:span
					:
				Element:span
				Element:span
					"Standby"
				Element:span
					,
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					1562.89
				Element:span
					,
				Element:span
				Element:span
					"probability"
				Element:span
					:
				Element:span
				Element:span
					85
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
					,
				Element:span
				Element:span
					"starred"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"remind_date"
				Element:span
					:
				Element:span
				Element:span
					"2014-03-12"
				Element:span
					,
				Element:span
				Element:span
					"remind_time"
				Element:span
					:
				Element:span
				Element:span
					"09:00"
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2014-02-28T17:37:33.000Z"
				Element:span
					,
				Element:span
				Element:span
					"updated_at"
				Element:span
					:
				Element:span
				Element:span
					"2014-02-28T17:38:05.000Z"
				Element:span
					,
				Element:span
				Element:span
					"description"
				Element:span
					:
				Element:span
				Element:span
					"Firstname: Natalia\nLastname: Bawer\nFull name: Natalia Bawer\nEmail: natalia.bawer@loretta-inc.com\nPhone: 801 274 6798\nMobile: 832 764 1930 \nAddress: 1234 N 7864 W President Bld - Salt Lake City, UT 84105\nWeb: http://more-info-loretta.com\nDepartment: Sales\n--- Entrez une description ci-dessous ---\n \n--- \nMet Natalia at a seminar. She could be interested.\nShe is on business trip. Have to call her when she is back."
				Element:span
					,
				Element:span
				Element:span
					"html_description"
				Element:span
					:
				Element:span
				Element:span
					"Firstname: Natalia\u003Cbr /\u003ELastname: Bawer\u003Cbr /\u003EFull name: Natalia Bawer\u003Cbr /\u003EEmail: natalia.bawer@loretta-inc.com\u003Cbr /\u003EPhone: 801 274 6798\u003Cbr /\u003EMobile: 832 764 1930\u0026nbsp;\u003Cbr /\u003EAddress: 1234 N 7864 W President Bld - Salt Lake City, UT 84105\u003Cbr /\u003EWeb: http://more-info-loretta.com\u003Cbr /\u003EDepartment: Sales\u003Cbr /\u003E\r\n\u003Cp class=\"lead-desc-separator\"\u003E--- Entrez une description ci-dessous ---\u003C/p\u003E\r\n\u003Cdiv\u003E\u0026nbsp;\u003C/div\u003E\r\n\u003Cbr /\u003E--- \u003Cbr /\u003E\r\n\u003Cp\u003EMet Natalia at a seminar. She could be interested.\u003Cbr /\u003EShe is on business trip. Have to call her when she is back.\u003C/p\u003E"
				Element:span
					,
				Element:span
				Element:span
					"tags"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
					"small"
				Element:span
					,
				Element:span
					"US"
				Element:span
					],
				Element:span
				Element:span
					"created_from"
				Element:span
					:
				Element:span
				Element:span
					"api"
				Element:span
					,
				Element:span
				Element:span
					"user_id"
				Element:span
					:
				Element:span
				Element:span
					514
				Element:span
					,
				Element:span
				Element:span
					"client_folder_id"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"extended_info"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"first_contact_email"
				Element:span
					:
				Element:span
				Element:span
					"natalia.bawer@loretta-inc.com"
				Element:span
					,
				Element:span
				Element:span
					"all_contact_emails"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
					"natalia.bawer@loretta-inc.com"
				Element:span
					],
				Element:span
				Element:span
					"permalink"
				Element:span
					:
				Element:span
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/leads/8113"
				Element:span
					,
				Element:span
				Element:span
					"fields"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"email"
				Element:span
					:
				Element:span
				Element:span
					"natalia.bawer@loretta-inc.com"
				Element:span
					,
				Element:span
				Element:span
					"phone"
				Element:span
					:
				Element:span
				Element:span
					"801 274 6798"
				Element:span
					,
				Element:span
				Element:span
					"mobile"
				Element:span
					:
				Element:span
				Element:span
					"832 764 1930 "
				Element:span
					,
				Element:span
				Element:span
					"address"
				Element:span
					:
				Element:span
				Element:span
					"1234 N 7864 W President Bld - Salt Lake City, UT 84105"
				Element:span
					,
				Element:span
				Element:span
					"web"
				Element:span
					:
				Element:span
				Element:span
					"http://more-info-loretta.com"
				Element:span
					,
				Element:span
				Element:span
					"first_name"
				Element:span
					:
				Element:span
				Element:span
					"Natalia"
				Element:span
					,
				Element:span
				Element:span
					"last_name"
				Element:span
					:
				Element:span
				Element:span
					"Bawer"
				Element:span
					,
				Element:span
				Element:span
					"full_name"
				Element:span
					:
				Element:span
				Element:span
					"Natalia Bawer"
				Element:span
					,
				Element:span
				Element:span
					"job"
				Element:span
					:
				Element:span
				Element:span
					"Sales"
				Element:span
					,
				Element:span
				Element:span
					"fax"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"vat"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"fields_by_name"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"Firstname"
				Element:span
					:
				Element:span
				Element:span
					"Natalia"
				Element:span
					,
				Element:span
				Element:span
					"Lastname"
				Element:span
					:
				Element:span
				Element:span
					"Bawer"
				Element:span
					,
				Element:span
				Element:span
					"Full name"
				Element:span
					:
				Element:span
				Element:span
					"Natalia Bawer"
				Element:span
					,
				Element:span
				Element:span
					"Email"
				Element:span
					:
				Element:span
				Element:span
					"natalia.bawer@loretta-inc.com"
				Element:span
					,
				Element:span
				Element:span
					"Phone"
				Element:span
					:
				Element:span
				Element:span
					"801 274 6798"
				Element:span
					,
				Element:span
				Element:span
					"Mobile"
				Element:span
					:
				Element:span
				Element:span
					"832 764 1930 "
				Element:span
					,
				Element:span
				Element:span
					"Address"
				Element:span
					:
				Element:span
				Element:span
					"1234 N 7864 W President Bld - Salt Lake City, UT 84105"
				Element:span
					,
				Element:span
				Element:span
					"Web"
				Element:span
					:
				Element:span
				Element:span
					"http://more-info-loretta.com"
				Element:span
					,
				Element:span
				Element:span
					"Department"
				Element:span
					:
				Element:span
				Element:span
					"Sales"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"comment_count"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"bcc_count"
				Element:span
					:
				Element:span
				Element:span
					0
				Element:span
					,
				Element:span
				Element:span
					"user"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					436
				Element:span
					,
				Element:span
				Element:span
					"lastname"
				Element:span
					:
				Element:span
				Element:span
					"Rose"
				Element:span
					,
				Element:span
				Element:span
					"firstname"
				Element:span
					:
				Element:span
				Element:span
					"Juliette"
				Element:span
					,
				Element:span
				Element:span
					"email"
				Element:span
					:
				Element:span
				Element:span
					"juliette@example.com"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"client_folder"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					12
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Blue Corp"
				Element:span
					,
				Element:span
				Element:span
					"description"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"is_active"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-01-30T22:03:14.000Z"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					In case of error you could get these responses
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"401"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Unauthorized: api key [missing | invalid]"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"404"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Entry not found"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"422"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Missing parameter: client_id is required"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"422"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Unable to perform your request"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Add a lead to an existing client folder.
			Node:
			(type) c
			(layer)1
				Element:h3
					Http request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					POST https://YOUR_SLUG_HERE.leadalead.com/api/leads/{id}/add_to_client
			Node:
			(type) c
			(layer)1
				Element:h3
					Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
				Element:strong
					required
				Element:td
					Lead’s id. The identifier of the lead.
				Element:tr
				Element:td
					client_id
				Element:td
				Element:strong
					required
				Element:td
					Client folder’s id. The identifier of a client folder
			Node:
			(type) c
			(layer)1
				Element:h2
					Retrieve the business card of a lead
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					With the API key
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -H
				Element:span
					"Accept: application/ydncrm.v2"
					-H
				Element:span
					"X-API-KEY: 91Jy7XxreymBRMASfTF8"
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/leads/8113/business_card"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'rest-client'
				Element:span
					key
				Element:span
					=
				Element:span
					"91Jy7XxreymBRMASfTF8"
				Element:span
					header
				Element:span
					=
				Element:span
					{
				Element:span
					'X-API-KEY'
				Element:span
					=>
				Element:span
					key
				Element:span
					,
				Element:span
					content_type: :json
				Element:span
					,
				Element:span
					accept:
				Element:span
					"application/json application/ydncrm.v2"
				Element:span
					}
				Element:span
					response
				Element:span
					=
				Element:span
					RestClient
				Element:span
					.
				Element:span
					delete
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/leads/8113/business_card"
				Element:span
					,
				Element:span
					header
				Element:span
					bc
				Element:span
					=
				Element:span
					JSON
				Element:span
					.
				Element:span
					parse
				Element:span
					(
				Element:span
					response
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					With the USER token
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -H
				Element:span
					"Accept: application/ydncrm.v2"
					-H
				Element:span
					"X-USER-TOKEN: ITd-Jb3EC_nCXI2fez4hhg"
					-XDELETE
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/leads/8113/business_card"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'rest-client'
				Element:span
					token
				Element:span
					=
				Element:span
					"ITd-Jb3EC_nCXI2fez4hhg"
				Element:span
					header
				Element:span
					=
				Element:span
					{
				Element:span
					'X-USER-TOKEN'
				Element:span
					=>
				Element:span
					token
				Element:span
					,
				Element:span
					content_type: :json
				Element:span
					,
				Element:span
					accept:
				Element:span
					"application/json application/ydncrm.v2"
				Element:span
					}
				Element:span
					response
				Element:span
					=
				Element:span
					RestClient
				Element:span
					.
				Element:span
					delete
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/leads/8113/business_card"
				Element:span
					,
				Element:span
					header
				Element:span
					bc
				Element:span
					=
				Element:span
					JSON
				Element:span
					.
				Element:span
					parse
				Element:span
					(
				Element:span
					response
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					The above commands return JSON structured like this:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
				Element:span
					"https://ydncrm-attach.s3.amazonaws.com/dev-uploads/attachment/412/NY.jpg?X-Amz-Expires=180&X-Amz-Date=20160127T182551Z&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAJ3MOBWMRZJZTNUNQ/20160127/us-east-1/s3/aws4_request&X-Amz-SignedHeaders=host&X-Amz-Signature=f382ddd16cd0afb87688bd5d8e543302244f36dc26b15fd1eb6d9ee06e64954b"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					In case of error you could get these responses
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"401"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Unauthorized: api key [missing | invalid]"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"404"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Entry not found"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"422"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Unable to perform your request"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Retrieve the picture of a business card on a lead previously created by a business card.
			Node:
			(type) c
			(layer)1
				Element:h3
					Http request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET https://YOUR_SLUG_HERE.leadalead.com/api/leads/{id}/business_card
			Node:
			(type) c
			(layer)1
				Element:h3
					Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
				Element:strong
					required
				Element:td
					Lead’s id. The identifier of the lead.
			Node:
			(type) c
			(layer)1
				Element:h2
					Delete a lead
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					With the API key
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -H
				Element:span
					"Accept: application/ydncrm.v2"
					-H
				Element:span
					"X-API-KEY: 91Jy7XxreymBRMASfTF8"
					-XDELETE
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/leads/8113"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'rest-client'
				Element:span
					key
				Element:span
					=
				Element:span
					"91Jy7XxreymBRMASfTF8"
				Element:span
					header
				Element:span
					=
				Element:span
					{
				Element:span
					'X-API-KEY'
				Element:span
					=>
				Element:span
					key
				Element:span
					,
				Element:span
					content_type: :json
				Element:span
					,
				Element:span
					accept:
				Element:span
					"application/json application/ydncrm.v2"
				Element:span
					}
				Element:span
					response
				Element:span
					=
				Element:span
					RestClient
				Element:span
					.
				Element:span
					delete
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/leads/8113"
				Element:span
					,
				Element:span
					header
				Element:span
					lead
				Element:span
					=
				Element:span
					JSON
				Element:span
					.
				Element:span
					parse
				Element:span
					(
				Element:span
					response
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					With the USER token
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -H
				Element:span
					"Accept: application/ydncrm.v2"
					-H
				Element:span
					"X-USER-TOKEN: ITd-Jb3EC_nCXI2fez4hhg"
					-XDELETE
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/leads/8113"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'rest-client'
				Element:span
					token
				Element:span
					=
				Element:span
					"ITd-Jb3EC_nCXI2fez4hhg"
				Element:span
					header
				Element:span
					=
				Element:span
					{
				Element:span
					'X-USER-TOKEN'
				Element:span
					=>
				Element:span
					token
				Element:span
					,
				Element:span
					content_type: :json
				Element:span
					,
				Element:span
					accept:
				Element:span
					"application/json application/ydncrm.v2"
				Element:span
					}
				Element:span
					response
				Element:span
					=
				Element:span
					RestClient
				Element:span
					.
				Element:span
					delete
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/leads/8113"
				Element:span
					,
				Element:span
					header
				Element:span
					lead
				Element:span
					=
				Element:span
					JSON
				Element:span
					.
				Element:span
					parse
				Element:span
					(
				Element:span
					response
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					The above commands return JSON structured like this:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					8113
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					In case of error you could get these responses
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"401"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Unauthorized: api key [missing | invalid]"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"404"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Entry not found"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"422"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Missing parameter: id is required"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"422"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Unable to perform your request"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Delete a lead previously created from its id.
			Node:
			(type) c
			(layer)1
				Element:h3
					Http request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					DELETE https://YOUR_SLUG_HERE.leadalead.com/api/leads/{id}
			Node:
			(type) c
			(layer)1
				Element:h3
					Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
				Element:strong
					required
				Element:td
					Lead’s id. The identifier of the lead.
			Node:
			(type) c
			(layer)1
				Element:aside
					When using the `USER` token, if the user doesn’t have the permission to see the lead, the lead could not be deleted and will result in a 404 answer as the lead cannot be found.
			Node:
			(type) c
			(layer)1
				Element:h2
					Delete multiple leads at once
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					With the API key
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -H
				Element:span
					"Accept: application/ydncrm.v2"
					-H
				Element:span
					"X-API-KEY: 91Jy7XxreymBRMASfTF8"
					-XDELETE --data
				Element:span
					"ids=8484,8485,8486"
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/leads/delete_multiple"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'rest-client'
				Element:span
					key
				Element:span
					=
				Element:span
					"91Jy7XxreymBRMASfTF8"
				Element:span
					header
				Element:span
					=
				Element:span
					{
				Element:span
					'X-API-KEY'
				Element:span
					=>
				Element:span
					key
				Element:span
					,
				Element:span
					content_type: :json
				Element:span
					,
				Element:span
					accept:
				Element:span
					"application/json application/ydncrm.v2"
				Element:span
					}
				Element:span
					parameters
				Element:span
					=
				Element:span
					{
				Element:span
					ids:
				Element:span
					"8484,8485,8486"
				Element:span
					}
				Element:span
					response
				Element:span
					=
				Element:span
					RestClient
				Element:span
					.
				Element:span
					delete
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/leads/delete_multiple"
				Element:span
					,
				Element:span
					parameters
				Element:span
					,
				Element:span
					header
				Element:span
					not_deleted_lead_ids
				Element:span
					=
				Element:span
					JSON
				Element:span
					.
				Element:span
					parse
				Element:span
					(
				Element:span
					response
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					With the USER token
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -H
				Element:span
					"Accept: application/ydncrm.v2"
					-H
				Element:span
					"X-USER-TOKEN: ITd-Jb3EC_nCXI2fez4hhg"
					-XDELETE --data
				Element:span
					"ids=8484,8485,8486"
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/leads/delete_multiple"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'rest-client'
				Element:span
					token
				Element:span
					=
				Element:span
					"ITd-Jb3EC_nCXI2fez4hhg"
				Element:span
					header
				Element:span
					=
				Element:span
					{
				Element:span
					'X-USER-TOKEN'
				Element:span
					=>
				Element:span
					token
				Element:span
					,
				Element:span
					content_type: :json
				Element:span
					,
				Element:span
					accept:
				Element:span
					"application/json application/ydncrm.v2"
				Element:span
					}
				Element:span
					parameters
				Element:span
					=
				Element:span
					{
				Element:span
					ids:
				Element:span
					"8484,8485,8486"
				Element:span
					}
				Element:span
					response
				Element:span
					=
				Element:span
					RestClient
				Element:span
					.
				Element:span
					delete
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/leads/delete_multiple"
				Element:span
					,
				Element:span
					parameters
				Element:span
					,
				Element:span
					header
				Element:span
					not_deleted_lead_ids
				Element:span
					=
				Element:span
					JSON
				Element:span
					.
				Element:span
					parse
				Element:span
					(
				Element:span
					response
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					The above commands return JSON structured like this:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					[
				Element:span
				Element:span
					8486
				Element:span
				Element:span
					]
				Element:span
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					In case of error you could get these responses
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"401"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Unauthorized: api key [missing | invalid]"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"422"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Missing parameter: ids is required"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"422"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Unable to perform your request"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Delete multiple leads at once from their ids. It returns a list of lead ids that couldn’t be deleted: not existing anymore, no rights to delete,… This list will empty of course if all lead ids have been deleted.
			Node:
			(type) c
			(layer)1
				Element:h3
					Http request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					DELETE https://YOUR_SLUG_HERE.leadalead.com/api/leads/delete_multiple
			Node:
			(type) c
			(layer)1
				Element:h3
					Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					ids
				Element:td
				Element:strong
					required
				Element:td
					Comma separated lead’s ids.
			Node:
			(type) c
			(layer)1
				Element:aside
					When using the `USER` token, if the user doesn’t have the permission to see the leads, the leads won’t be deleted.
			Node:
			(type) c
			(layer)1
				Element:h2
					Retrieve all comments from a lead
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					With the API key
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -H
				Element:span
					"Accept: application/ydncrm.v2"
					-H
				Element:span
					"X-API-KEY: 91Jy7XxreymBRMASfTF8"
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/leads/9402/comments"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'rest-client'
				Element:span
					key
				Element:span
					=
				Element:span
					"91Jy7XxreymBRMASfTF8"
				Element:span
					header
				Element:span
					=
				Element:span
					{
				Element:span
					'X-API-KEY'
				Element:span
					=>
				Element:span
					key
				Element:span
					,
				Element:span
					content_type: :json
				Element:span
					,
				Element:span
					accept:
				Element:span
					"application/json application/ydncrm.v2"
				Element:span
					}
				Element:span
					response
				Element:span
					=
				Element:span
					RestClient
				Element:span
					.
				Element:span
					get
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/leads/9402/comments"
				Element:span
					,
				Element:span
					header
				Element:span
					comments
				Element:span
					=
				Element:span
					JSON
				Element:span
					.
				Element:span
					parse
				Element:span
					(
				Element:span
					response
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					With the USER token
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -H
				Element:span
					"Accept: application/ydncrm.v2"
					-H
				Element:span
					"X-USER-TOKEN: ITd-Jb3EC_nCXI2fez4hhg"
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/leads/9402/comments"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'rest-client'
				Element:span
					token
				Element:span
					=
				Element:span
					"ITd-Jb3EC_nCXI2fez4hhg"
				Element:span
					header
				Element:span
					=
				Element:span
					{
				Element:span
					'X-USER-TOKEN'
				Element:span
					=>
				Element:span
					token
				Element:span
					,
				Element:span
					content_type: :json
				Element:span
					,
				Element:span
					accept:
				Element:span
					"application/json application/ydncrm.v2"
				Element:span
					}
				Element:span
					response
				Element:span
					=
				Element:span
					RestClient
				Element:span
					.
				Element:span
					get
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/leads/9402/comments"
				Element:span
					,
				Element:span
					header
				Element:span
					comments
				Element:span
					=
				Element:span
					JSON
				Element:span
					.
				Element:span
					parse
				Element:span
					(
				Element:span
					response
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					The above commands return JSON structured like this:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					13834
				Element:span
					,
				Element:span
				Element:span
					"content"
				Element:span
					:
				Element:span
				Element:span
					"This is a comment"
				Element:span
					,
				Element:span
				Element:span
					"commented_item"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"item"
				Element:span
					:
				Element:span
				Element:span
					"Lead"
				Element:span
					,
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					9402
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-08-12T21:57:40.000Z"
				Element:span
					,
				Element:span
				Element:span
					"user"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					514
				Element:span
					,
				Element:span
				Element:span
					"lastname"
				Element:span
					:
				Element:span
				Element:span
					"Stone"
				Element:span
					,
				Element:span
				Element:span
					"firstname"
				Element:span
					:
				Element:span
				Element:span
					"Stéphanie"
				Element:span
					,
				Element:span
				Element:span
					"email"
				Element:span
					:
				Element:span
				Element:span
					"stef@youdontneedacrm.com"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					13836
				Element:span
					,
				Element:span
				Element:span
					"content"
				Element:span
					:
				Element:span
				Element:span
					"This is another comment"
				Element:span
					,
				Element:span
				Element:span
					"commented_item"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"item"
				Element:span
					:
				Element:span
				Element:span
					"Lead"
				Element:span
					,
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					9402
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-08-15T10:57:40.000Z"
				Element:span
					,
				Element:span
				Element:span
					"user"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					514
				Element:span
					,
				Element:span
				Element:span
					"lastname"
				Element:span
					:
				Element:span
				Element:span
					"Stone"
				Element:span
					,
				Element:span
				Element:span
					"firstname"
				Element:span
					:
				Element:span
				Element:span
					"Stéphanie"
				Element:span
					,
				Element:span
				Element:span
					"email"
				Element:span
					:
				Element:span
				Element:span
					"stef@youdontneedacrm.com"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
				Element:span
					]
				Element:span
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					In case of error you could get these responses
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"401"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Unauthorized: api key [missing | invalid]"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"404"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Entry not found"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"422"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Unable to perform your request"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Retrieve all comments of a lead.
			Node:
			(type) c
			(layer)1
				Element:h3
					Http request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET https://YOUR_SLUG_HERE.leadalead.com/api/leads/{lead_id}/comments
			Node:
			(type) c
			(layer)1
				Element:h3
					Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
				Element:th
					Default
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					lead_id
				Element:td
				Element:strong
					required
				Element:td
				Element:td
					Lead’s id. The identifier of the lead.
				Element:tr
				Element:td
					direction
				Element:td
					optional
				Element:td
				Element:code
					desc
				Element:td
					Direction for ordereing the data returned in ascending or descending. The value should be
				Element:code
					asc
					or
				Element:code
					desc
					.
			Node:
			(type) c
			(layer)1
				Element:h2
					Create a comment on a lead
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					With the API key
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -H
				Element:span
					"Accept: application/ydncrm.v2"
					-H
				Element:span
					"X-API-KEY: 91Jy7XxreymBRMASfTF8"
					--data
				Element:span
					"content=This+is+wonderful&user_id=514"
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/leads/9402/comments"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'rest-client'
				Element:span
					key
				Element:span
					=
				Element:span
					"91Jy7XxreymBRMASfTF8"
				Element:span
					header
				Element:span
					=
				Element:span
					{
				Element:span
					'X-API-KEY'
				Element:span
					=>
				Element:span
					key
				Element:span
					,
				Element:span
					content_type: :json
				Element:span
					,
				Element:span
					accept:
				Element:span
					"application/json application/ydncrm.v2"
				Element:span
					}
				Element:span
					parameters
				Element:span
					=
				Element:span
					{
				Element:span
					content:
				Element:span
					"This is wonderful"
				Element:span
					,
				Element:span
					user_id:
				Element:span
					514
				Element:span
					}
				Element:span
					response
				Element:span
					=
				Element:span
					RestClient
				Element:span
					.
				Element:span
					post
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/leads/9402/comments"
				Element:span
					,
				Element:span
					parameters
				Element:span
					,
				Element:span
					header
				Element:span
					comments
				Element:span
					=
				Element:span
					JSON
				Element:span
					.
				Element:span
					parse
				Element:span
					(
				Element:span
					response
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					With the USER token
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -H
				Element:span
					"Accept: application/ydncrm.v2"
					-H
				Element:span
					"X-USER-TOKEN: ITd-Jb3EC_nCXI2fez4hhg"
					--data
				Element:span
					"content=This+is+wonderful"
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/leads/9402/comments"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'rest-client'
				Element:span
					token
				Element:span
					=
				Element:span
					"ITd-Jb3EC_nCXI2fez4hhg"
				Element:span
					header
				Element:span
					=
				Element:span
					{
				Element:span
					'X-USER-TOKEN'
				Element:span
					=>
				Element:span
					token
				Element:span
					,
				Element:span
					content_type: :json
				Element:span
					,
				Element:span
					accept:
				Element:span
					"application/json application/ydncrm.v2"
				Element:span
					}
				Element:span
					parameters
				Element:span
					=
				Element:span
					{
				Element:span
					content:
				Element:span
					"This is wonderful"
				Element:span
					}
				Element:span
					response
				Element:span
					=
				Element:span
					RestClient
				Element:span
					.
				Element:span
					post
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/leads/9402/comments"
				Element:span
					,
				Element:span
					parameters
				Element:span
					,
				Element:span
					header
				Element:span
					comments
				Element:span
					=
				Element:span
					JSON
				Element:span
					.
				Element:span
					parse
				Element:span
					(
				Element:span
					response
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					The above commands return JSON structured like this:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					13834
				Element:span
					,
				Element:span
				Element:span
					"content"
				Element:span
					:
				Element:span
				Element:span
					"This is a wonderful"
				Element:span
					,
				Element:span
				Element:span
					"commented_item"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"item"
				Element:span
					:
				Element:span
				Element:span
					"Lead"
				Element:span
					,
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					9402
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-08-20T21:57:40.000Z"
				Element:span
					,
				Element:span
				Element:span
					"user"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					514
				Element:span
					,
				Element:span
				Element:span
					"lastname"
				Element:span
					:
				Element:span
				Element:span
					"Stone"
				Element:span
					,
				Element:span
				Element:span
					"firstname"
				Element:span
					:
				Element:span
				Element:span
					"Stéphanie"
				Element:span
					,
				Element:span
				Element:span
					"email"
				Element:span
					:
				Element:span
				Element:span
					"stef@youdontneedacrm.com"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					In case of error you could get these responses
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"401"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Unauthorized: api key [missing | invalid]"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"400"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Parameter user_id should not be used with USER token."
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"404"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Entry not found"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"422"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Unable to perform your request"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Create a comment on a lead.
			Node:
			(type) c
			(layer)1
				Element:h3
					Http request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					POST https://YOUR_SLUG_HERE.leadalead.com/api/leads/{lead_id}/comments
			Node:
			(type) c
			(layer)1
				Element:h3
					Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					lead_id
				Element:td
				Element:strong
					required
				Element:td
					Lead’s id. The identifier of the lead.
				Element:tr
				Element:td
					content
				Element:td
				Element:strong
					required
				Element:td
					Content of the comment.
				Element:tr
				Element:td
					user_id
				Element:td
					optional
				Element:td
					User’s
				Element:code
					email address
					or
				Element:code
					id
					to whom the comment should belong. This parameter is ignored in case of the login method to authenticate is used. (USER token)
			Node:
			(type) c
			(layer)1
				Element:h2
					Delete a comment on a lead
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					With the API key
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -H
				Element:span
					"Accept: application/ydncrm.v2"
					-H
				Element:span
					"X-API-KEY: 91Jy7XxreymBRMASfTF8"
					-XDELETE
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/leads/9402/comments/13834"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'rest-client'
				Element:span
					key
				Element:span
					=
				Element:span
					"91Jy7XxreymBRMASfTF8"
				Element:span
					header
				Element:span
					=
				Element:span
					{
				Element:span
					'X-API-KEY'
				Element:span
					=>
				Element:span
					key
				Element:span
					,
				Element:span
					content_type: :json
				Element:span
					,
				Element:span
					accept:
				Element:span
					"application/json application/ydncrm.v2"
				Element:span
					}
				Element:span
					response
				Element:span
					=
				Element:span
					RestClient
				Element:span
					.
				Element:span
					delete
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/leads/9402/comments/13834"
				Element:span
					,
				Element:span
					header
				Element:span
					comment
				Element:span
					=
				Element:span
					JSON
				Element:span
					.
				Element:span
					parse
				Element:span
					(
				Element:span
					response
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					With the USER token
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -H
				Element:span
					"Accept: application/ydncrm.v2"
					-H
				Element:span
					"X-USER-TOKEN: ITd-Jb3EC_nCXI2fez4hhg"
					-XDELETE
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/leads/9402/comments/13834"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'rest-client'
				Element:span
					token
				Element:span
					=
				Element:span
					"ITd-Jb3EC_nCXI2fez4hhg"
				Element:span
					header
				Element:span
					=
				Element:span
					{
				Element:span
					'X-USER-TOKEN'
				Element:span
					=>
				Element:span
					token
				Element:span
					,
				Element:span
					content_type: :json
				Element:span
					,
				Element:span
					accept:
				Element:span
					"application/json application/ydncrm.v2"
				Element:span
					}
				Element:span
					response
				Element:span
					=
				Element:span
					RestClient
				Element:span
					.
				Element:span
					delete
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/leads/9402/comments/13834"
				Element:span
					,
				Element:span
					header
				Element:span
					comment
				Element:span
					=
				Element:span
					JSON
				Element:span
					.
				Element:span
					parse
				Element:span
					(
				Element:span
					response
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					The above commands return JSON structured like this:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					13834
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					In case of error you could get these responses
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"401"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Unauthorized: api key [missing | invalid]"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"401"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Unauthorized: the user has not the privileges to do this action."
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"404"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Entry not found"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"422"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Unable to perform your request"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Delete a comment on a lead.
			Node:
			(type) c
			(layer)1
				Element:h3
					Http request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					DELETE https://YOUR_SLUG_HERE.leadalead.com/api/leads/{lead_id}/comments/{id}
			Node:
			(type) c
			(layer)1
				Element:h3
					Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					lead_id
				Element:td
				Element:strong
					required
				Element:td
					Lead’s id. The identifier of the lead.
				Element:tr
				Element:td
					id
				Element:td
				Element:strong
					required
				Element:td
					Comment’s id. The identifier of the comment to delete.
			Node:
			(type) c
			(layer)1
				Element:h2
					Retrieve all attachments
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					With the API key
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -H
				Element:span
					"Accept: application/ydncrm.v2"
					-H
				Element:span
					"X-API-KEY: 91Jy7XxreymBRMASfTF8"
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/leads/9402/attachments"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'rest-client'
				Element:span
					key
				Element:span
					=
				Element:span
					"91Jy7XxreymBRMASfTF8"
				Element:span
					header
				Element:span
					=
				Element:span
					{
				Element:span
					'X-API-KEY'
				Element:span
					=>
				Element:span
					key
				Element:span
					,
				Element:span
					content_type: :json
				Element:span
					,
				Element:span
					accept:
				Element:span
					"application/json application/ydncrm.v2"
				Element:span
					}
				Element:span
					response
				Element:span
					=
				Element:span
					RestClient
				Element:span
					.
				Element:span
					get
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/leads/9402/attachments"
				Element:span
					,
				Element:span
					header
				Element:span
					attachments
				Element:span
					=
				Element:span
					JSON
				Element:span
					.
				Element:span
					parse
				Element:span
					(
				Element:span
					response
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					With the USER token
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -H
				Element:span
					"Accept: application/ydncrm.v2"
					-H
				Element:span
					"X-USER-TOKEN: ITd-Jb3EC_nCXI2fez4hhg"
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/leads/9402/attachments"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'rest-client'
				Element:span
					token
				Element:span
					=
				Element:span
					"ITd-Jb3EC_nCXI2fez4hhg"
				Element:span
					header
				Element:span
					=
				Element:span
					{
				Element:span
					'X-USER-TOKEN'
				Element:span
					=>
				Element:span
					token
				Element:span
					,
				Element:span
					content_type: :json
				Element:span
					,
				Element:span
					accept:
				Element:span
					"application/json application/ydncrm.v2"
				Element:span
					}
				Element:span
					response
				Element:span
					=
				Element:span
					RestClient
				Element:span
					.
				Element:span
					get
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/leads/9402/attachments"
				Element:span
					,
				Element:span
					header
				Element:span
					attachments
				Element:span
					=
				Element:span
					JSON
				Element:span
					.
				Element:span
					parse
				Element:span
					(
				Element:span
					response
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					The above commands return JSON structured like this:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					422
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"You_Dont_Need_a_CRM.pdf"
				Element:span
					,
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
				Element:span
					"https://ydncrm-attach.s3.amazonaws.com/uploads/attachment/422/You_Dont_Need_a_CRM.pdf?X-Amz-Expires=180\u0026X-Amz-Date=20160630T224423Z\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256"
				Element:span
					,
				Element:span
				Element:span
					"content_type"
				Element:span
					:
				Element:span
				Element:span
					"application/pdf"
				Element:span
					,
				Element:span
				Element:span
					"kind"
				Element:span
					:
				Element:span
				Element:span
					"attachment"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					15
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"0000004"
				Element:span
					,
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
				Element:span
					"https://mycompany.freshbooks.com/showEstimate?estimateid=34432"
				Element:span
					,
				Element:span
				Element:span
					"content_type"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"kind"
				Element:span
					:
				Element:span
				Element:span
					"freshbooks_estimate"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					]
				Element:span
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					In case of error you could get these responses
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"401"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Unauthorized: api key [missing | invalid]"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"401"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Unauthorized: the user has not the privileges to do this action."
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"404"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Entry not found"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"422"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Unable to perform your request"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Retrieve all attachments for the specified lead. It includes all the files that have been attached but also if you have an integration with Freshbooks, QuickBooks or Factomos, the estimate and invoices attached to the lead. To differenciate the different kind of attachments, the attribute kind will specify where the attachment is coming from.
			Node:
			(type) c
			(layer)1
				Element:p
					The possible values are
				Element:code
					attachment
					,
				Element:code
					business_card
					,
				Element:code
					freshbooks_estimate
					,
				Element:code
					freshbooks_invoice
					,
				Element:code
					quickbooks_estimate
					,
				Element:code
					quickbooks_invoice
					,
				Element:code
					factomos_estimate
					,
				Element:code
					factomos_invoice
					,
				Element:code
					dropbox
					.
			Node:
			(type) c
			(layer)1
				Element:h3
					Http request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET https://YOUR_SLUG_HERE.leadalead.com/api/leads/{lead_id}/attachments
			Node:
			(type) c
			(layer)1
				Element:h3
					Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					lead_id
				Element:td
				Element:strong
					required
				Element:td
					Lead’s id. The identifier of the lead.
			Node:
			(type) c
			(layer)1
				Element:h2
					Add an attachment on a lead
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					With the API key
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -XPOST -H
				Element:span
					"Accept: application/ydncrm.v2"
					-H
				Element:span
					"X-API-KEY: 91Jy7XxreymBRMASfTF8"
					-H
				Element:span
					"Content-Type: multipart/form-data"
					-F
				Element:span
					"attachment=@/path/to/your/file.txt"
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/leads/9402/attachments"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'rest-client'
				Element:span
					key
				Element:span
					=
				Element:span
					"91Jy7XxreymBRMASfTF8"
				Element:span
					request
				Element:span
					=
				Element:span
					RestClient
				Element:span
					::
				Element:span
					Request
				Element:span
					.
				Element:span
					new
				Element:span
					(
				Element:span
					method: :post
				Element:span
					,
				Element:span
					url:
				Element:span
					'https://YOUR_SLUG_HERE.leadalead.com/api/leads/9402/attachments'
				Element:span
					,
				Element:span
					headers:
				Element:span
					{
				Element:span
					content_type:
				Element:span
					'multipart/mixed'
				Element:span
					,
				Element:span
					accept:
				Element:span
					'application/json application/ydncrm.v2'
				Element:span
					,
				Element:span
					'X-API-KEY'
				Element:span
					=>
				Element:span
					key
				Element:span
					},
				Element:span
					payload:
				Element:span
					{
				Element:span
					multipart:
				Element:span
					true
				Element:span
					,
				Element:span
					attachment:
				Element:span
					File
				Element:span
					.
				Element:span
					new
				Element:span
					(
				Element:span
					"/path/to/your/file.txt"
				Element:span
					,
				Element:span
					'rb'
				Element:span
					)
				Element:span
					})
				Element:span
					response
				Element:span
					=
				Element:span
					request
				Element:span
					.
				Element:span
					execute
				Element:span
					attachment
				Element:span
					=
				Element:span
					JSON
				Element:span
					.
				Element:span
					parse
				Element:span
					(
				Element:span
					response
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					With the USER token
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -XPOST -H
				Element:span
					"Accept: application/ydncrm.v2"
					-H
				Element:span
					"X-USER-TOKEN: ITd-Jb3EC_nCXI2fez4hhg"
					-H
				Element:span
					"Content-Type: multipart/form-data"
					-F
				Element:span
					"attachment=@/path/to/your/file.txt"
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/leads/9402/attachments"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'rest-client'
				Element:span
					token
				Element:span
					=
				Element:span
					"ITd-Jb3EC_nCXI2fez4hhg"
				Element:span
					request
				Element:span
					=
				Element:span
					RestClient
				Element:span
					::
				Element:span
					Request
				Element:span
					.
				Element:span
					new
				Element:span
					(
				Element:span
					method: :post
				Element:span
					,
				Element:span
					url:
				Element:span
					'https://YOUR_SLUG_HERE.leadalead.com/api/leads/9402/attachments'
				Element:span
					,
				Element:span
					headers:
				Element:span
					{
				Element:span
					content_type:
				Element:span
					'multipart/mixed'
				Element:span
					,
				Element:span
					accept:
				Element:span
					'application/json application/ydncrm.v2'
				Element:span
					,
				Element:span
					'X-USER-TOKEN'
				Element:span
					=>
				Element:span
					token
				Element:span
					},
				Element:span
					payload:
				Element:span
					{
				Element:span
					multipart:
				Element:span
					true
				Element:span
					,
				Element:span
					attachment:
				Element:span
					File
				Element:span
					.
				Element:span
					new
				Element:span
					(
				Element:span
					"/path/to/your/file.txt"
				Element:span
					,
				Element:span
					'rb'
				Element:span
					)
				Element:span
					})
				Element:span
					response
				Element:span
					=
				Element:span
					request
				Element:span
					.
				Element:span
					execute
				Element:span
					attachment
				Element:span
					=
				Element:span
					JSON
				Element:span
					.
				Element:span
					parse
				Element:span
					(
				Element:span
					response
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					The above commands return JSON structured like this:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					423
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"file.txt"
				Element:span
					,
				Element:span
				Element:span
					"url"
				Element:span
					:
				Element:span
				Element:span
					"https://ydncrm-attach.s3.amazonaws.com/uploads/attachment/422/file.txt?X-Amz-Expires=180\u0026X-Amz-Date=20160630T224423Z\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256"
				Element:span
					,
				Element:span
				Element:span
					"content_type"
				Element:span
					:
				Element:span
				Element:span
					"text/plain"
				Element:span
					,
				Element:span
				Element:span
					"kind"
				Element:span
					:
				Element:span
				Element:span
					"attachment"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					In case of error you could get these responses
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"401"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Unauthorized: api key [missing | invalid]"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"404"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Entry not found"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"422"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Unable to perform your request"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Create an attachment for the specified lead from the uploaded file.
			Node:
			(type) c
			(layer)1
				Element:h3
					Http request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					POST https://YOUR_SLUG_HERE.leadalead.com/api/leads/{lead_id}/attachments
			Node:
			(type) c
			(layer)1
				Element:h3
					Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					lead_id
				Element:td
				Element:strong
					required
				Element:td
					Lead’s id. The identifier of the lead.
				Element:tr
				Element:td
					attachment
				Element:td
				Element:strong
					required
				Element:td
					The information of the uploaded file
			Node:
			(type) c
			(layer)1
				Element:h2
					Delete an attachment on a lead
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					With the API key
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -XDELETE -H
				Element:span
					"Accept: application/ydncrm.v2"
					-H
				Element:span
					"X-API-KEY: 91Jy7XxreymBRMASfTF8"
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/leads/9402/attachments/520"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'rest-client'
				Element:span
					key
				Element:span
					=
				Element:span
					"91Jy7XxreymBRMASfTF8"
				Element:span
					header
				Element:span
					=
				Element:span
					{
				Element:span
					'X-API-KEY'
				Element:span
					=>
				Element:span
					key
				Element:span
					,
				Element:span
					content_type: :json
				Element:span
					,
				Element:span
					accept:
				Element:span
					"application/json application/ydncrm.v2"
				Element:span
					}
				Element:span
					response
				Element:span
					=
				Element:span
					RestClient
				Element:span
					.
				Element:span
					delete
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/leads/9402/attachments/520"
				Element:span
					,
				Element:span
					header
				Element:span
					attachment
				Element:span
					=
				Element:span
					JSON
				Element:span
					.
				Element:span
					parse
				Element:span
					(
				Element:span
					response
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					With the USER token
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -XDELETE -H
				Element:span
					"Accept: application/ydncrm.v2"
					-H
				Element:span
					"X-USER-TOKEN: ITd-Jb3EC_nCXI2fez4hhg"
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/leads/9402/attachments/520"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'rest-client'
				Element:span
					token
				Element:span
					=
				Element:span
					"ITd-Jb3EC_nCXI2fez4hhg"
				Element:span
					header
				Element:span
					=
				Element:span
					{
				Element:span
					'X-USER-TOKEN'
				Element:span
					=>
				Element:span
					token
				Element:span
					,
				Element:span
					content_type: :json
				Element:span
					,
				Element:span
					accept:
				Element:span
					"application/json application/ydncrm.v2"
				Element:span
					}
				Element:span
					response
				Element:span
					=
				Element:span
					RestClient
				Element:span
					.
				Element:span
					delete
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/leads/9402/attachments/520"
				Element:span
					,
				Element:span
					header
				Element:span
					attachment
				Element:span
					=
				Element:span
					JSON
				Element:span
					.
				Element:span
					parse
				Element:span
					(
				Element:span
					response
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					The above commands return JSON structured like this:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					520
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					In case of error you could get these responses
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"401"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Unauthorized: api key [missing | invalid]"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"404"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Entry not found"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"422"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Unable to perform your request"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Delete an attachment for the specified lead from the uploaded file.
			Node:
			(type) c
			(layer)1
				Element:h3
					Http request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					DELETE https://YOUR_SLUG_HERE.leadalead.com/api/leads/{lead_id}/attachments/{id}
			Node:
			(type) c
			(layer)1
				Element:h3
					Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					lead_id
				Element:td
				Element:strong
					required
				Element:td
					Lead’s id. The identifier of the lead.
				Element:tr
				Element:td
					id
				Element:td
				Element:strong
					required
				Element:td
					Attachment’s id. The identifier of the attachment on the lead.
			Node:
			(type) h1
			(layer)1
				Element:h1
					Prospecting lists
			Node:
			(type) c
			(layer)1
				Element:h2
					Create a prospecting list
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					With the API key
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -H
				Element:span
					"Accept: application/ydncrm.v2"
					-H
				Element:span
					"X-API-KEY: 91Jy7XxreymBRMASfTF8"
					-H
				Element:span
					"Content-Type: application/json"
					-d
				Element:span
					'{"title":"ProspectV2","content":[["Company name","Firstname","Lastname","Email","Phone"],["Acme Corp","John","Doe","john.doe@acme.com","654 234 7623"],["EuropaCorp","Luc","Besson","luc.besson@europacorp.com","555 333 5678"]],"description":"This prospect comes from Peter","tags":["prospect","peter"],"user_id":"stef@youdontneedacrm.com"}'
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/spreadsheets"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'rest-client'
				Element:span
					key
				Element:span
					=
				Element:span
					"91Jy7XxreymBRMASfTF8"
				Element:span
					header
				Element:span
					=
				Element:span
					{
				Element:span
					'X-API-KEY'
				Element:span
					=>
				Element:span
					key
				Element:span
					,
				Element:span
					content_type: :json
				Element:span
					,
				Element:span
					accept:
				Element:span
					"application/json application/ydncrm.v2"
				Element:span
					}
				Element:span
					parameters
				Element:span
					=
				Element:span
					{
				Element:span
					title:
				Element:span
					"Prospect"
				Element:span
					,
				Element:span
					content:
				Element:span
					"[[
				Element:span
					\"
				Element:span
					Company name
				Element:span
					\"
				Element:span
					,
				Element:span
					\"
				Element:span
					Firstname
				Element:span
					\"
				Element:span
					,
				Element:span
					\"
				Element:span
					Lastname
				Element:span
					\"
				Element:span
					,
				Element:span
					\"
				Element:span
					Email
				Element:span
					\"
				Element:span
					,
				Element:span
					\"
				Element:span
					Phone
				Element:span
					\"
				Element:span
					],[
				Element:span
					\"
				Element:span
					Acme Corp
				Element:span
					\"
				Element:span
					,
				Element:span
					\"
				Element:span
					John
				Element:span
					\"
				Element:span
					,
				Element:span
					\"
				Element:span
					Doe
				Element:span
					\"
				Element:span
					,
				Element:span
					\"
				Element:span
					john.doe@acme.com
				Element:span
					\"
				Element:span
					,
				Element:span
					\"
				Element:span
					654 234 7623
				Element:span
					\"
				Element:span
					],[
				Element:span
					\"
				Element:span
					EuropaCorp
				Element:span
					\"
				Element:span
					,
				Element:span
					\"
				Element:span
					Luc
				Element:span
					\"
				Element:span
					,
				Element:span
					\"
				Element:span
					Besson
				Element:span
					\"
				Element:span
					,
				Element:span
					\"
				Element:span
					luc.besson@europacorp.com
				Element:span
					\"
				Element:span
					,
				Element:span
					\"
				Element:span
					555 333 5678
				Element:span
					\"
				Element:span
					]]"
				Element:span
					,
				Element:span
					description:
				Element:span
					"This prospect comes from Peter"
				Element:span
					,
				Element:span
					tags:
				Element:span
					[
				Element:span
					"prospect"
				Element:span
					,
				Element:span
					"peter"
				Element:span
					],
				Element:span
					user_id:
				Element:span
					'stef@youdontneedacrm.com'
				Element:span
					}
				Element:span
					response
				Element:span
					=
				Element:span
					RestClient
				Element:span
					.
				Element:span
					post
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/spreadsheets"
				Element:span
					,
				Element:span
					parameters
				Element:span
					,
				Element:span
					header
				Element:span
					spreadsheet
				Element:span
					=
				Element:span
					JSON
				Element:span
					.
				Element:span
					parse
				Element:span
					(
				Element:span
					response
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					With the USER token
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -H
				Element:span
					"Accept: application/ydncrm.v2"
					-H
				Element:span
					"X-USER-TOKEN: ITd-Jb3EC_nCXI2fez4hhg"
					-H
				Element:span
					"Content-Type: application/json"
					-d
				Element:span
					'{"title":"ProspectV2","content":[["Company name","Firstname","Lastname","Email","Phone"],["Acme Corp","John","Doe","john.doe@acme.com","654 234 7623"],["EuropaCorp","Luc","Besson","luc.besson@europacorp.com","555 333 5678"]],"description":"This prospect comes from Peter","tags":["prospect","peter"]}'
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/spreadsheets"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'rest-client'
				Element:span
					token
				Element:span
					=
				Element:span
					"ITd-Jb3EC_nCXI2fez4hhg"
				Element:span
					header
				Element:span
					=
				Element:span
					{
				Element:span
					'X-USER-TOKEN'
				Element:span
					=>
				Element:span
					token
				Element:span
					,
				Element:span
					content_type: :json
				Element:span
					,
				Element:span
					accept:
				Element:span
					"application/json application/ydncrm.v2"
				Element:span
					}
				Element:span
					parameters
				Element:span
					=
				Element:span
					{
				Element:span
					title:
				Element:span
					"Prospect"
				Element:span
					,
				Element:span
					content:
				Element:span
					"[[
				Element:span
					\"
				Element:span
					Company name
				Element:span
					\"
				Element:span
					,
				Element:span
					\"
				Element:span
					Firstname
				Element:span
					\"
				Element:span
					,
				Element:span
					\"
				Element:span
					Lastname
				Element:span
					\"
				Element:span
					,
				Element:span
					\"
				Element:span
					Email
				Element:span
					\"
				Element:span
					,
				Element:span
					\"
				Element:span
					Phone
				Element:span
					\"
				Element:span
					],[
				Element:span
					\"
				Element:span
					Acme Corp
				Element:span
					\"
				Element:span
					,
				Element:span
					\"
				Element:span
					John
				Element:span
					\"
				Element:span
					,
				Element:span
					\"
				Element:span
					Doe
				Element:span
					\"
				Element:span
					,
				Element:span
					\"
				Element:span
					john.doe@acme.com
				Element:span
					\"
				Element:span
					,
				Element:span
					\"
				Element:span
					654 234 7623
				Element:span
					\"
				Element:span
					],[
				Element:span
					\"
				Element:span
					EuropaCorp
				Element:span
					\"
				Element:span
					,
				Element:span
					\"
				Element:span
					Luc
				Element:span
					\"
				Element:span
					,
				Element:span
					\"
				Element:span
					Besson
				Element:span
					\"
				Element:span
					,
				Element:span
					\"
				Element:span
					luc.besson@europacorp.com
				Element:span
					\"
				Element:span
					,
				Element:span
					\"
				Element:span
					555 333 5678
				Element:span
					\"
				Element:span
					]]"
				Element:span
					,
				Element:span
					description:
				Element:span
					"This prospect comes from Peter"
				Element:span
					,
				Element:span
					tags:
				Element:span
					[
				Element:span
					"prospect"
				Element:span
					,
				Element:span
					"peter"
				Element:span
					]
				Element:span
					}
				Element:span
					response
				Element:span
					=
				Element:span
					RestClient
				Element:span
					.
				Element:span
					post
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/spreadsheets"
				Element:span
					,
				Element:span
					parameters
				Element:span
					,
				Element:span
					header
				Element:span
					spreadsheet
				Element:span
					=
				Element:span
					JSON
				Element:span
					.
				Element:span
					parse
				Element:span
					(
				Element:span
					response
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					The above commands return JSON structure like this:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					112
				Element:span
					,
				Element:span
				Element:span
					"title"
				Element:span
					:
				Element:span
				Element:span
					"Prospect"
				Element:span
					,
				Element:span
				Element:span
					"description"
				Element:span
					:
				Element:span
				Element:span
					"This prospect comes from Peter"
				Element:span
					,
				Element:span
				Element:span
					"privacy"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"updated_at"
				Element:span
					:
				Element:span
				Element:span
					"2014-11-07T17:31:04.000Z"
				Element:span
					,
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2014-11-07T17:31:04.000Z"
				Element:span
					,
				Element:span
				Element:span
					"tags"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
					"peter"
				Element:span
					,
				Element:span
				Element:span
					"prospect"
				Element:span
					],
				Element:span
				Element:span
					"permalink"
				Element:span
					:
				Element:span
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/spreadsheets/112"
				Element:span
					,
				Element:span
				Element:span
					"user"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					514
				Element:span
					,
				Element:span
				Element:span
					"lastname"
				Element:span
					:
				Element:span
				Element:span
					"Stone"
				Element:span
					,
				Element:span
				Element:span
					"firstname"
				Element:span
					:
				Element:span
				Element:span
					"Stéphanie"
				Element:span
					,
				Element:span
				Element:span
					"email"
				Element:span
					:
				Element:span
				Element:span
					"stef@youdontneedacrm.com"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"spreadsheet_rows"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					107
				Element:span
					,
				Element:span
				Element:span
					"lead_id"
				Element:span
					:
				Element:span
				Element:span
					15
				Element:span
					,
				Element:span
				Element:span
					"is_active"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"content"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
					"Company name"
				Element:span
					,
				Element:span
					"Firstname"
				Element:span
					,
				Element:span
					"Lastname"
				Element:span
					,
				Element:span
					"Email"
				Element:span
					,
				Element:span
					"Phone"
				Element:span
					]
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					108
				Element:span
					,
				Element:span
				Element:span
					"lead_id"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"is_active"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"content"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
					"Acme Corp"
				Element:span
					,
				Element:span
					"John"
				Element:span
					,
				Element:span
					"Doe"
				Element:span
					,
				Element:span
					"john.doe@acme.com"
				Element:span
					,
				Element:span
					"654 234 7623"
				Element:span
					]
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					109
				Element:span
					,
				Element:span
				Element:span
					"lead_id"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"is_active"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"content"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
					"EuropaCorp"
				Element:span
					,
				Element:span
					"Luc"
				Element:span
					,
				Element:span
					"Besson"
				Element:span
					,
				Element:span
					"luc.besson@europacorp.com"
				Element:span
					,
				Element:span
					"555 333 5678"
				Element:span
					]
				Element:span
				Element:span
					}
				Element:span
				Element:span
					]
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					In case of error you could get these responses
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"401"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Unauthorized: api key [missing | invalid]"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"422"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Missing parameter: title is required"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"422"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Missing parameter: content is required"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"422"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Unable to perform your request"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					To create a new prospecting list, you have to pass the required parameters.
			Node:
			(type) c
			(layer)1
				Element:p
					With the required parameters the prospecting list will be created and will belong to:
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					the user of the
				Element:code
					user_id
					attribute when you are using the
				Element:code
					API
					key authentication.
				Element:li
					the user logged when you are using the
				Element:code
					USER
					token authentication.
			Node:
			(type) c
			(layer)1
				Element:p
					When using the
				Element:code
					API
					key authentication, if no user is set or if it does not correspond to any user in the account, the prospecting list will belong to the first administrator of the account.
			Node:
			(type) c
			(layer)1
				Element:p
					When using the
				Element:code
					USER
					token authentication, the
				Element:code
					user_id
					parameter is ignored.
			Node:
			(type) c
			(layer)1
				Element:p
					By default the privacy of the prospecting list is computed automatically according to the settings of the account. However, it is possible to set the privacy of the prospecting list to be shared with everyone in the account. In this case just pass
				Element:code
					off
					for the
				Element:code
					privacy
					.
			Node:
			(type) c
			(layer)1
				Element:h3
					Http request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					POST https://YOUR_SLUG_HERE.leadalead.com/api/spreadsheets
			Node:
			(type) c
			(layer)1
				Element:h3
					Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
				Element:th
					Default
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					title
				Element:td
				Element:strong
					required
				Element:td
				Element:td
					Prospecting file’s title. It could be the origin of the prospecting file.
				Element:tr
				Element:td
					content
				Element:td
				Element:strong
					required
				Element:td
				Element:td
					Content of the prospecting file as a json string from the array of array of data.
				Element:strong
					The first row should be the column header
					.
				Element:tr
				Element:td
					description
				Element:td
					optional
				Element:td
				Element:td
					Prospecting file’s description.
				Element:tr
				Element:td
					tags
				Element:td
					optional
				Element:td
				Element:td
					An array of tags describing the prospecting file. If the tags don’t exist they are automatically created. The tags could also include the
				Element:code
					Predefined tags
					of your account.
				Element:tr
				Element:td
					user_id
				Element:td
					optional
				Element:td
				Element:td
					Email address or id of the user owner of the prospecting_file.
				Element:strong
					Required parameter if a privacy is set and
				Element:code
					API
					key authentication.
				Element:tr
				Element:td
					privacy
				Element:td
					optional
				Element:td
					default
				Element:td
					If privacy is set to ’
				Element:strong
					off
					’ the prospecting list will be shared with everyone on the account. Otherwise the privacy is computed automatically wiuth the settings of the account and the user used to create the list.
			Node:
			(type) c
			(layer)1
				Element:aside
					The return object corresponds to the prospecting list created. The content is splitted by row in the spreadsheet_rows object.
			Node:
			(type) c
			(layer)1
				Element:h2
					Retrieve a prospecting list
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					With the API key
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -H
				Element:span
					"Accept: application/ydncrm.v2"
					-H
				Element:span
					"X-API-KEY: 91Jy7XxreymBRMASfTF8"
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/spreadsheets/112"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'rest-client'
				Element:span
					key
				Element:span
					=
				Element:span
					"91Jy7XxreymBRMASfTF8"
				Element:span
					header
				Element:span
					=
				Element:span
					{
				Element:span
					'X-API-KEY'
				Element:span
					=>
				Element:span
					key
				Element:span
					,
				Element:span
					content_type: :json
				Element:span
					,
				Element:span
					accept:
				Element:span
					"application/json application/ydncrm.v2"
				Element:span
					}
				Element:span
					response
				Element:span
					=
				Element:span
					RestClient
				Element:span
					.
				Element:span
					get
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/spreadsheets/112"
				Element:span
					,
				Element:span
					header
				Element:span
					spreadsheet
				Element:span
					=
				Element:span
					JSON
				Element:span
					.
				Element:span
					parse
				Element:span
					(
				Element:span
					response
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					With the USER token
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -H
				Element:span
					"Accept: application/ydncrm.v2"
					-H
				Element:span
					"X-USER-TOKEN: ITd-Jb3EC_nCXI2fez4hhg"
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/spreadsheets/112"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'rest-client'
				Element:span
					token
				Element:span
					=
				Element:span
					"ITd-Jb3EC_nCXI2fez4hhg"
				Element:span
					header
				Element:span
					=
				Element:span
					{
				Element:span
					'X-USER-TOKEN'
				Element:span
					=>
				Element:span
					token
				Element:span
					,
				Element:span
					content_type: :json
				Element:span
					,
				Element:span
					accept:
				Element:span
					"application/json application/ydncrm.v2"
				Element:span
					}
				Element:span
					response
				Element:span
					=
				Element:span
					RestClient
				Element:span
					.
				Element:span
					get
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/spreadsheets/112"
				Element:span
					,
				Element:span
					header
				Element:span
					spreadsheet
				Element:span
					=
				Element:span
					JSON
				Element:span
					.
				Element:span
					parse
				Element:span
					(
				Element:span
					response
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					The above commands return JSON structured like this:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					112
				Element:span
					,
				Element:span
				Element:span
					"title"
				Element:span
					:
				Element:span
				Element:span
					"Prospect"
				Element:span
					,
				Element:span
				Element:span
					"description"
				Element:span
					:
				Element:span
				Element:span
					"This prospect comes from Peter"
				Element:span
					,
				Element:span
				Element:span
					"privacy"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"updated_at"
				Element:span
					:
				Element:span
				Element:span
					"2014-11-07T17:31:04.000Z"
				Element:span
					,
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2014-11-07T17:31:04.000Z"
				Element:span
					,
				Element:span
				Element:span
					"tags"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
					"peter"
				Element:span
					,
				Element:span
				Element:span
					"prospect"
				Element:span
					],
				Element:span
				Element:span
					"permalink"
				Element:span
					:
				Element:span
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/spreadsheets/112"
				Element:span
					,
				Element:span
				Element:span
					"user"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					514
				Element:span
					,
				Element:span
				Element:span
					"lastname"
				Element:span
					:
				Element:span
				Element:span
					"Stone"
				Element:span
					,
				Element:span
				Element:span
					"firstname"
				Element:span
					:
				Element:span
				Element:span
					"Stéphanie"
				Element:span
					,
				Element:span
				Element:span
					"email"
				Element:span
					:
				Element:span
				Element:span
					"stef@youdontneedacrm.com"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"spreadsheet_rows"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					107
				Element:span
					,
				Element:span
				Element:span
					"lead_id"
				Element:span
					:
				Element:span
				Element:span
					15
				Element:span
					,
				Element:span
				Element:span
					"is_active"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"content"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
					"Company name"
				Element:span
					,
				Element:span
					"Firstname"
				Element:span
					,
				Element:span
					"Lastname"
				Element:span
					,
				Element:span
					"Email"
				Element:span
					,
				Element:span
					"Phone"
				Element:span
					]
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					108
				Element:span
					,
				Element:span
				Element:span
					"lead_id"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"is_active"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"content"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
					"Acme Corp"
				Element:span
					,
				Element:span
					"John"
				Element:span
					,
				Element:span
					"Doe"
				Element:span
					,
				Element:span
					"john.doe@acme.com"
				Element:span
					,
				Element:span
					"654 234 7623"
				Element:span
					]
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					109
				Element:span
					,
				Element:span
				Element:span
					"lead_id"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"is_active"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"content"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
					"EuropaCorp"
				Element:span
					,
				Element:span
					"Luc"
				Element:span
					,
				Element:span
					"Besson"
				Element:span
					,
				Element:span
					"luc.besson@europacorp.com"
				Element:span
					,
				Element:span
					"555 333 5678"
				Element:span
					]
				Element:span
				Element:span
					}
				Element:span
				Element:span
					]
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					In case of error you could get these responses
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"401"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Unauthorized: api key [missing | invalid]"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"404"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Entry not found"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"422"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Missing parameter: id is required"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"422"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Unable to perform your request"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Retrieve a prospecting list previously created with its id.
			Node:
			(type) c
			(layer)1
				Element:h3
					Http request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET https://YOUR_SLUG_HERE.leadalead.com/api/spreadsheets/{id}
			Node:
			(type) c
			(layer)1
				Element:h3
					Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
				Element:strong
					required
				Element:td
					Prospecting list’s identifier.
			Node:
			(type) c
			(layer)1
				Element:aside
					When the request is made by the administrator (API key), any prospecting list can be retrieved. When using the `USER` token, only the prospecting lists seen by the user can be retrieved. The content is splitted by row in the spreadsheet_rows object.
			Node:
			(type) c
			(layer)1
				Element:h2
					Add prospects to a prospecting list
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					With the API key
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -H
				Element:span
					"Accept: application/ydncrm.v2"
					-H
				Element:span
					"X-API-KEY: 91Jy7XxreymBRMASfTF8"
					-H
				Element:span
					"Content-Type: application/json"
					-d
				Element:span
					'[["Green Corp","Julia","Green","julia.green@example.com","345 234 7777"],["Red Corp","John","Red","red.john@example.com","222 333 5555"]]'
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/spreadsheets/112/rows"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'rest-client'
				Element:span
					key
				Element:span
					=
				Element:span
					"91Jy7XxreymBRMASfTF8"
				Element:span
					header
				Element:span
					=
				Element:span
					{
				Element:span
					'X-API-KEY'
				Element:span
					=>
				Element:span
					key
				Element:span
					,
				Element:span
					content_type: :json
				Element:span
					,
				Element:span
					accept:
				Element:span
					"application/json application/ydncrm.v2"
				Element:span
					}
				Element:span
					parameters
				Element:span
					=
				Element:span
					{
				Element:span
					content:
				Element:span
					"[[
				Element:span
					\"
				Element:span
					Green Corp
				Element:span
					\"
				Element:span
					,
				Element:span
					\"
				Element:span
					Julia
				Element:span
					\"
				Element:span
					,
				Element:span
					\"
				Element:span
					Green
				Element:span
					\"
				Element:span
					,
				Element:span
					\"
				Element:span
					julia.green@example.com
				Element:span
					\"
				Element:span
					,
				Element:span
					\"
				Element:span
					345 234 7777
				Element:span
					\"
				Element:span
					],[
				Element:span
					\"
				Element:span
					Red Corp
				Element:span
					\"
				Element:span
					,
				Element:span
					\"
				Element:span
					John
				Element:span
					\"
				Element:span
					,
				Element:span
					\"
				Element:span
					Red
				Element:span
					\"
				Element:span
					,
				Element:span
					\"
				Element:span
					red.john@example.com
				Element:span
					\"
				Element:span
					,
				Element:span
					\"
				Element:span
					222 333 5555
				Element:span
					\"
				Element:span
					]]"
				Element:span
					}
				Element:span
					response
				Element:span
					=
				Element:span
					RestClient
				Element:span
					.
				Element:span
					post
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/spreadsheets/112/rows"
				Element:span
					,
				Element:span
					parameters
				Element:span
					,
				Element:span
					header
				Element:span
					spreadsheet_rows
				Element:span
					=
				Element:span
					JSON
				Element:span
					.
				Element:span
					parse
				Element:span
					(
				Element:span
					response
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					With the USER token
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -H
				Element:span
					"Accept: application/ydncrm.v2"
					-H
				Element:span
					"X-USER-TOKEN: ITd-Jb3EC_nCXI2fez4hhg"
					-H
				Element:span
					"Content-Type: application/json"
					-d
				Element:span
					'[["Green Corp","Julia","Green","julia.green@example.com","345 234 7777"],["Red Corp","John","Red","red.john@example.com","222 333 5555"]]'
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/spreadsheets/112/rows"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'rest-client'
				Element:span
					token
				Element:span
					=
				Element:span
					"ITd-Jb3EC_nCXI2fez4hhg"
				Element:span
					header
				Element:span
					=
				Element:span
					{
				Element:span
					'X-USER-TOKEN'
				Element:span
					=>
				Element:span
					token
				Element:span
					,
				Element:span
					content_type: :json
				Element:span
					,
				Element:span
					accept:
				Element:span
					"application/json application/ydncrm.v2"
				Element:span
					}
				Element:span
					parameters
				Element:span
					=
				Element:span
					{
				Element:span
					content:
				Element:span
					"[[
				Element:span
					\"
				Element:span
					Green Corp
				Element:span
					\"
				Element:span
					,
				Element:span
					\"
				Element:span
					Julia
				Element:span
					\"
				Element:span
					,
				Element:span
					\"
				Element:span
					Green
				Element:span
					\"
				Element:span
					,
				Element:span
					\"
				Element:span
					julia.green@example.com
				Element:span
					\"
				Element:span
					,
				Element:span
					\"
				Element:span
					345 234 7777
				Element:span
					\"
				Element:span
					],[
				Element:span
					\"
				Element:span
					Red Corp
				Element:span
					\"
				Element:span
					,
				Element:span
					\"
				Element:span
					John
				Element:span
					\"
				Element:span
					,
				Element:span
					\"
				Element:span
					Red
				Element:span
					\"
				Element:span
					,
				Element:span
					\"
				Element:span
					red.john@example.com
				Element:span
					\"
				Element:span
					,
				Element:span
					\"
				Element:span
					222 333 5555
				Element:span
					\"
				Element:span
					]]"
				Element:span
					}
				Element:span
					response
				Element:span
					=
				Element:span
					RestClient
				Element:span
					.
				Element:span
					post
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/spreadsheets/112/rows"
				Element:span
					,
				Element:span
					parameters
				Element:span
					,
				Element:span
					header
				Element:span
					spreadsheet_rows
				Element:span
					=
				Element:span
					JSON
				Element:span
					.
				Element:span
					parse
				Element:span
					(
				Element:span
					response
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					The above commands return JSON structured like this:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					115
				Element:span
					,
				Element:span
				Element:span
					"lead_id"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"is_active"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"content"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
					"Green Corp"
				Element:span
					,
				Element:span
					"Julia"
				Element:span
					,
				Element:span
					"Green"
				Element:span
					,
				Element:span
					"julia.green@example.com"
				Element:span
					,
				Element:span
					"345 234 7777"
				Element:span
					]
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					116
				Element:span
					,
				Element:span
				Element:span
					"lead_id"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"is_active"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"content"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
					"Red Corp"
				Element:span
					,
				Element:span
					"John"
				Element:span
					,
				Element:span
					"Red"
				Element:span
					,
				Element:span
					"red.john@example.com"
				Element:span
					,
				Element:span
					"222 333 5555"
				Element:span
					]
				Element:span
				Element:span
					}
				Element:span
				Element:span
					]
				Element:span
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					In case of error you could get these responses
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"401"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Unauthorized: api key [missing | invalid]"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"400"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"The number of data in content doesn't match the number of columns in the prospecting list"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"404"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Entry not found"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"422"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Missing parameter: [id | spreadsheet_id | content] is required"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"422"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Unable to perform your request"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Add the prospects (new rows) at the end of the specified prospecting list.
			Node:
			(type) c
			(layer)1
				Element:h3
					Http request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					POST https://YOUR_SLUG_HERE.leadalead.com/api/spreadsheets/{spreadsheet_id}/rows
			Node:
			(type) c
			(layer)1
				Element:h3
					Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
				Element:th
					Default
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					spreadsheet_id
				Element:td
				Element:strong
					required
				Element:td
				Element:td
					Prospecting list’s identifier.
				Element:tr
				Element:td
					content
				Element:td
				Element:strong
					required
				Element:td
				Element:td
					Content of the prospects as a json string corresponding of an array of an array of data.
			Node:
			(type) c
			(layer)1
				Element:h2
					Update a prospect in a prospecting list
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					With the API key
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -XPUT -H
				Element:span
					"Accept: application/ydncrm.v2"
					-H
				Element:span
					"X-API-KEY: 91Jy7XxreymBRMASfTF8"
					-H
				Element:span
					"Content-Type: application/json"
					-d
				Element:span
					'["Green Corp","Julia","Green","julia.green@example.com","345 234 1111"]'
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/spreadsheets/112/rows/115"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'rest-client'
				Element:span
					key
				Element:span
					=
				Element:span
					"91Jy7XxreymBRMASfTF8"
				Element:span
					header
				Element:span
					=
				Element:span
					{
				Element:span
					'X-API-KEY'
				Element:span
					=>
				Element:span
					key
				Element:span
					,
				Element:span
					content_type: :json
				Element:span
					,
				Element:span
					accept:
				Element:span
					"application/json application/ydncrm.v2"
				Element:span
					}
				Element:span
					parameters
				Element:span
					=
				Element:span
					{
				Element:span
					content:
				Element:span
					"[
				Element:span
					\"
				Element:span
					Green Corp
				Element:span
					\"
				Element:span
					,
				Element:span
					\"
				Element:span
					Julia
				Element:span
					\"
				Element:span
					,
				Element:span
					\"
				Element:span
					Green
				Element:span
					\"
				Element:span
					,
				Element:span
					\"
				Element:span
					julia.green@example.com
				Element:span
					\"
				Element:span
					,
				Element:span
					\"
				Element:span
					345 234 1111
				Element:span
					\"
				Element:span
					]"
				Element:span
					}
				Element:span
					response
				Element:span
					=
				Element:span
					RestClient
				Element:span
					.
				Element:span
					put
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/spreadsheets/112/rows/115"
				Element:span
					,
				Element:span
					parameters
				Element:span
					,
				Element:span
					header
				Element:span
					spreadsheet_row
				Element:span
					=
				Element:span
					JSON
				Element:span
					.
				Element:span
					parse
				Element:span
					(
				Element:span
					response
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					With the USER token
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -XPUT -H
				Element:span
					"Accept: application/ydncrm.v2"
					-H
				Element:span
					"X-USER-TOKEN: ITd-Jb3EC_nCXI2fez4hhg"
					-H
				Element:span
					"Content-Type: application/json"
					-d
				Element:span
					'["Green Corp","Julia","Green","julia.green@example.com","345 234 1111"]'
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/spreadsheets/112/rows/115"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'rest-client'
				Element:span
					token
				Element:span
					=
				Element:span
					"ITd-Jb3EC_nCXI2fez4hhg"
				Element:span
					header
				Element:span
					=
				Element:span
					{
				Element:span
					'X-USER-TOKEN'
				Element:span
					=>
				Element:span
					token
				Element:span
					,
				Element:span
					content_type: :json
				Element:span
					,
				Element:span
					accept:
				Element:span
					"application/json application/ydncrm.v2"
				Element:span
					}
				Element:span
					parameters
				Element:span
					=
				Element:span
					{
				Element:span
					content:
				Element:span
					"[
				Element:span
					\"
				Element:span
					Green Corp
				Element:span
					\"
				Element:span
					,
				Element:span
					\"
				Element:span
					Julia
				Element:span
					\"
				Element:span
					,
				Element:span
					\"
				Element:span
					Green
				Element:span
					\"
				Element:span
					,
				Element:span
					\"
				Element:span
					julia.green@example.com
				Element:span
					\"
				Element:span
					,
				Element:span
					\"
				Element:span
					345 234 1111
				Element:span
					\"
				Element:span
					]"
				Element:span
					}
				Element:span
					response
				Element:span
					=
				Element:span
					RestClient
				Element:span
					.
				Element:span
					put
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/spreadsheets/112/rows/115"
				Element:span
					,
				Element:span
					parameters
				Element:span
					,
				Element:span
					header
				Element:span
					spreadsheet_row
				Element:span
					=
				Element:span
					JSON
				Element:span
					.
				Element:span
					parse
				Element:span
					(
				Element:span
					response
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					The above commands return JSON structured like this:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					115
				Element:span
					,
				Element:span
				Element:span
					"lead_id"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"is_active"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"content"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
					"Green Corp"
				Element:span
					,
				Element:span
					"Julia"
				Element:span
					,
				Element:span
					"Green"
				Element:span
					,
				Element:span
					"julia.green@example.com"
				Element:span
					,
				Element:span
					"345 234 1111"
				Element:span
					]
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					In case of error you could get these responses
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"401"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Unauthorized: api key [missing | invalid]"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"400"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"The number of data in content doesn't match the number of columns in the prospecting list"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"404"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Entry not found"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"422"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Missing parameter: [id | spreadsheet_id | content] is required"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"422"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Unable to perform your request"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Update a prospect in a prospecting list.
			Node:
			(type) c
			(layer)1
				Element:h3
					Http request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					PUT https://YOUR_SLUG_HERE.leadalead.com/api/spreadsheets/{spreadsheet_id}/rows/{id}
			Node:
			(type) c
			(layer)1
				Element:h3
					Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
				Element:th
					Default
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					spreadsheet_id
				Element:td
				Element:strong
					required
				Element:td
				Element:td
					Prospecting list’s identifier.
				Element:tr
				Element:td
					id
				Element:td
				Element:strong
					required
				Element:td
				Element:td
					Prospect’s identifier.
				Element:tr
				Element:td
					content
				Element:td
				Element:strong
					required
				Element:td
				Element:td
					Content of the prospect as a json string corresponding of an array of data.
			Node:
			(type) c
			(layer)1
				Element:h2
					Delete a prospect in a prospecting list
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					With the API key
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -XDELETE -H
				Element:span
					"Accept: application/ydncrm.v2"
					-H
				Element:span
					"X-API-KEY: 91Jy7XxreymBRMASfTF8"
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/spreadsheets/112/rows/115"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'rest-client'
				Element:span
					key
				Element:span
					=
				Element:span
					"91Jy7XxreymBRMASfTF8"
				Element:span
					header
				Element:span
					=
				Element:span
					{
				Element:span
					'X-API-KEY'
				Element:span
					=>
				Element:span
					key
				Element:span
					,
				Element:span
					content_type: :json
				Element:span
					,
				Element:span
					accept:
				Element:span
					"application/json application/ydncrm.v2"
				Element:span
					}
				Element:span
					response
				Element:span
					=
				Element:span
					RestClient
				Element:span
					.
				Element:span
					delete
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/spreadsheets/112/rows/115"
				Element:span
					,
				Element:span
					header
				Element:span
					spreadsheet_row
				Element:span
					=
				Element:span
					JSON
				Element:span
					.
				Element:span
					parse
				Element:span
					(
				Element:span
					response
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					With the USER token
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -XDELETE -H
				Element:span
					"Accept: application/ydncrm.v2"
					-H
				Element:span
					"X-USER-TOKEN: ITd-Jb3EC_nCXI2fez4hhg"
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/spreadsheets/112/rows/115"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'rest-client'
				Element:span
					token
				Element:span
					=
				Element:span
					"ITd-Jb3EC_nCXI2fez4hhg"
				Element:span
					header
				Element:span
					=
				Element:span
					{
				Element:span
					'X-USER-TOKEN'
				Element:span
					=>
				Element:span
					token
				Element:span
					,
				Element:span
					content_type: :json
				Element:span
					,
				Element:span
					accept:
				Element:span
					"application/json application/ydncrm.v2"
				Element:span
					}
				Element:span
					response
				Element:span
					=
				Element:span
					RestClient
				Element:span
					.
				Element:span
					put
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/spreadsheets/112/rows/115"
				Element:span
					,
				Element:span
					header
				Element:span
					spreadsheet_row
				Element:span
					=
				Element:span
					JSON
				Element:span
					.
				Element:span
					parse
				Element:span
					(
				Element:span
					response
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					The above commands return JSON structured like this:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					115
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					In case of error you could get these responses
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"401"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Unauthorized: api key [missing | invalid]"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"404"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Entry not found"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"422"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Missing parameter: [id | spreadsheet_id] is required"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"422"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Unable to perform your request"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Delete a prospect in a prospecting list.
			Node:
			(type) c
			(layer)1
				Element:h3
					Http request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					DELETE https://YOUR_SLUG_HERE.leadalead.com/api/spreadsheets/{spreadsheet_id}/rows/{id}
			Node:
			(type) c
			(layer)1
				Element:h3
					Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
				Element:th
					Default
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					spreadsheet_id
				Element:td
				Element:strong
					required
				Element:td
				Element:td
					Prospecting list’s identifier.
				Element:tr
				Element:td
					id
				Element:td
				Element:strong
					required
				Element:td
				Element:td
					Prospect’s identifier.
			Node:
			(type) h1
			(layer)1
				Element:h1
					Action Histories
			Node:
			(type) c
			(layer)1
				Element:h2
					List the action histories
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					With the API key
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -H
				Element:span
					"Accept: application/ydncrm.v2"
					-H
				Element:span
					"X-API-KEY: 91Jy7XxreymBRMASfTF8"
					-XGET
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/action_histories?lead_id=9344"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'rest-client'
				Element:span
					key
				Element:span
					=
				Element:span
					"91Jy7XxreymBRMASfTF8"
				Element:span
					header
				Element:span
					=
				Element:span
					{
				Element:span
					'X-API-KEY'
				Element:span
					=>
				Element:span
					key
				Element:span
					,
				Element:span
					content_type: :json
				Element:span
					,
				Element:span
					accept:
				Element:span
					"application/json application/ydncrm.v2"
				Element:span
					}
				Element:span
					response
				Element:span
					=
				Element:span
					RestClient
				Element:span
					.
				Element:span
					get
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/action_histories?lead_id=9344"
				Element:span
					,
				Element:span
					header
				Element:span
					users
				Element:span
					=
				Element:span
					JSON
				Element:span
					.
				Element:span
					parse
				Element:span
					(
				Element:span
					response
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					With the USER token
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -H
				Element:span
					"Accept: application/ydncrm.v2"
					-H
				Element:span
					"X-USER-TOKEN: ITd-Jb3EC_nCXI2fez4hhg"
					-XGET
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/action_histories?lead_id=9344"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'rest-client'
				Element:span
					token
				Element:span
					=
				Element:span
					"ITd-Jb3EC_nCXI2fez4hhg"
				Element:span
					header
				Element:span
					=
				Element:span
					{
				Element:span
					'X-USER-TOKEN'
				Element:span
					=>
				Element:span
					token
				Element:span
					,
				Element:span
					content_type: :json
				Element:span
					,
				Element:span
					accept:
				Element:span
					"application/json application/ydncrm.v2"
				Element:span
					}
				Element:span
					response
				Element:span
					=
				Element:span
					RestClient
				Element:span
					.
				Element:span
					get
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/action_histories?lead_id=9344"
				Element:span
					,
				Element:span
					header
				Element:span
					users
				Element:span
					=
				Element:span
					JSON
				Element:span
					.
				Element:span
					parse
				Element:span
					(
				Element:span
					response
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					The above commands return JSON structure like this:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					39728
				Element:span
					,
				Element:span
				Element:span
					"lead_id"
				Element:span
					:
				Element:span
				Element:span
					9344
				Element:span
					,
				Element:span
				Element:span
					"action_type"
				Element:span
					:
				Element:span
				Element:span
					"lead_created"
				Element:span
					,
				Element:span
				Element:span
					"action_item"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"lead_created"
				Element:span
					,
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					9344
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-04-22T22:53:08.000Z"
				Element:span
					,
				Element:span
				Element:span
					"user"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					625
				Element:span
					,
				Element:span
				Element:span
					"lastname"
				Element:span
					:
				Element:span
				Element:span
					"Stone"
				Element:span
					,
				Element:span
				Element:span
					"firstname"
				Element:span
					:
				Element:span
				Element:span
					"Stephanie"
				Element:span
					,
				Element:span
				Element:span
					"email"
				Element:span
					:
				Element:span
				Element:span
					"stef@youdontneedacrm.com"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					39729
				Element:span
					,
				Element:span
				Element:span
					"lead_id"
				Element:span
					:
				Element:span
				Element:span
					9344
				Element:span
					,
				Element:span
				Element:span
					"action_type"
				Element:span
					:
				Element:span
				Element:span
					"amount_set"
				Element:span
					,
				Element:span
				Element:span
					"action_item"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"amount_set"
				Element:span
					,
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					1402
				Element:span
					,
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					2600.0
				Element:span
					,
				Element:span
				Element:span
					"probability"
				Element:span
					:
				Element:span
				Element:span
					60
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-04-22T22:54:51.000Z"
				Element:span
					,
				Element:span
				Element:span
					"user"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					625
				Element:span
					,
				Element:span
				Element:span
					"lastname"
				Element:span
					:
				Element:span
				Element:span
					"Stone"
				Element:span
					,
				Element:span
				Element:span
					"firstname"
				Element:span
					:
				Element:span
				Element:span
					"Stephanie"
				Element:span
					,
				Element:span
				Element:span
					"email"
				Element:span
					:
				Element:span
				Element:span
					"stef@youdontneedacrm.com"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					39730
				Element:span
					,
				Element:span
				Element:span
					"lead_id"
				Element:span
					:
				Element:span
				Element:span
					9344
				Element:span
					,
				Element:span
				Element:span
					"action_type"
				Element:span
					:
				Element:span
				Element:span
					"comment_added"
				Element:span
					,
				Element:span
				Element:span
					"action_item"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"comment_added"
				Element:span
					,
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					13747
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-04-22T22:55:33.000Z"
				Element:span
					,
				Element:span
				Element:span
					"user"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					625
				Element:span
					,
				Element:span
				Element:span
					"lastname"
				Element:span
					:
				Element:span
				Element:span
					"Stone"
				Element:span
					,
				Element:span
				Element:span
					"firstname"
				Element:span
					:
				Element:span
				Element:span
					"Stephanie"
				Element:span
					,
				Element:span
				Element:span
					"email"
				Element:span
					:
				Element:span
				Element:span
					"stef@youdontneedacrm.com"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					39731
				Element:span
					,
				Element:span
				Element:span
					"lead_id"
				Element:span
					:
				Element:span
				Element:span
					9344
				Element:span
					,
				Element:span
				Element:span
					"action_type"
				Element:span
					:
				Element:span
				Element:span
					"email_sent"
				Element:span
					,
				Element:span
				Element:span
					"action_item"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"email_sent"
				Element:span
					,
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					46
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-04-22T23:02:13.000Z"
				Element:span
					,
				Element:span
				Element:span
					"user"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					625
				Element:span
					,
				Element:span
				Element:span
					"lastname"
				Element:span
					:
				Element:span
				Element:span
					"Stone"
				Element:span
					,
				Element:span
				Element:span
					"firstname"
				Element:span
					:
				Element:span
				Element:span
					"Stephanie"
				Element:span
					,
				Element:span
				Element:span
					"email"
				Element:span
					:
				Element:span
				Element:span
					"stef@youdontneedacrm.com"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					39732
				Element:span
					,
				Element:span
				Element:span
					"lead_id"
				Element:span
					:
				Element:span
				Element:span
					9344
				Element:span
					,
				Element:span
				Element:span
					"action_type"
				Element:span
					:
				Element:span
				Element:span
					"step_changed"
				Element:span
					,
				Element:span
				Element:span
					"action_item"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"step_changed"
				Element:span
					,
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					1190
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"In-touch"
				Element:span
					,
				Element:span
				Element:span
					"position"
				Element:span
					:
				Element:span
				Element:span
					2
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-04-22T23:02:43.000Z"
				Element:span
					,
				Element:span
				Element:span
					"user"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					625
				Element:span
					,
				Element:span
				Element:span
					"lastname"
				Element:span
					:
				Element:span
				Element:span
					"Stone"
				Element:span
					,
				Element:span
				Element:span
					"firstname"
				Element:span
					:
				Element:span
				Element:span
					"Stephanie"
				Element:span
					,
				Element:span
				Element:span
					"email"
				Element:span
					:
				Element:span
				Element:span
					"stef@youdontneedacrm.com"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					39733
				Element:span
					,
				Element:span
				Element:span
					"lead_id"
				Element:span
					:
				Element:span
				Element:span
					9344
				Element:span
					,
				Element:span
				Element:span
					"action_type"
				Element:span
					:
				Element:span
				Element:span
					"user_assigned"
				Element:span
					,
				Element:span
				Element:span
					"action_item"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"user_assigned"
				Element:span
					,
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					626
				Element:span
					,
				Element:span
				Element:span
					"firstname"
				Element:span
					:
				Element:span
				Element:span
					"Jean"
				Element:span
					,
				Element:span
				Element:span
					"lastname"
				Element:span
					:
				Element:span
				Element:span
					"Doe"
				Element:span
					,
				Element:span
				Element:span
					"email"
				Element:span
					:
				Element:span
				Element:span
					"jean@doe.com"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-04-22T23:03:04.000Z"
				Element:span
					,
				Element:span
				Element:span
					"user"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					625
				Element:span
					,
				Element:span
				Element:span
					"lastname"
				Element:span
					:
				Element:span
				Element:span
					"Stone"
				Element:span
					,
				Element:span
				Element:span
					"firstname"
				Element:span
					:
				Element:span
				Element:span
					"Stephanie"
				Element:span
					,
				Element:span
				Element:span
					"email"
				Element:span
					:
				Element:span
				Element:span
					"stef@youdontneedacrm.com"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					39734
				Element:span
					,
				Element:span
				Element:span
					"lead_id"
				Element:span
					:
				Element:span
				Element:span
					9344
				Element:span
					,
				Element:span
				Element:span
					"action_type"
				Element:span
					:
				Element:span
				Element:span
					"amount_set"
				Element:span
					,
				Element:span
				Element:span
					"action_item"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"amount_set"
				Element:span
					,
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					1403
				Element:span
					,
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					2600.0
				Element:span
					,
				Element:span
				Element:span
					"probability"
				Element:span
					:
				Element:span
				Element:span
					100
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-04-22T23:03:52.000Z"
				Element:span
					,
				Element:span
				Element:span
					"user"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					626
				Element:span
					,
				Element:span
				Element:span
					"lastname"
				Element:span
					:
				Element:span
				Element:span
					"Doe"
				Element:span
					,
				Element:span
				Element:span
					"firstname"
				Element:span
					:
				Element:span
				Element:span
					"Jean"
				Element:span
					,
				Element:span
				Element:span
					"email"
				Element:span
					:
				Element:span
				Element:span
					"jean@doe.com"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					39735
				Element:span
					,
				Element:span
				Element:span
					"lead_id"
				Element:span
					:
				Element:span
				Element:span
					9344
				Element:span
					,
				Element:span
				Element:span
					"action_type"
				Element:span
					:
				Element:span
				Element:span
					"status_changed"
				Element:span
					,
				Element:span
				Element:span
					"action_item"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"status_changed"
				Element:span
					,
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					3
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"won"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-04-22T23:03:52.000Z"
				Element:span
					,
				Element:span
				Element:span
					"user"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					626
				Element:span
					,
				Element:span
				Element:span
					"lastname"
				Element:span
					:
				Element:span
				Element:span
					"Doe"
				Element:span
					,
				Element:span
				Element:span
					"firstname"
				Element:span
					:
				Element:span
				Element:span
					"Jean"
				Element:span
					,
				Element:span
				Element:span
					"email"
				Element:span
					:
				Element:span
				Element:span
					"jean@doe.com"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					39736
				Element:span
					,
				Element:span
				Element:span
					"lead_id"
				Element:span
					:
				Element:span
				Element:span
					9344
				Element:span
					,
				Element:span
				Element:span
					"action_type"
				Element:span
					:
				Element:span
				Element:span
					"client_assigned"
				Element:span
					,
				Element:span
				Element:span
					"action_item"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"type"
				Element:span
					:
				Element:span
				Element:span
					"client_assigned"
				Element:span
					,
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					15
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Series"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-04-22T23:04:09.000Z"
				Element:span
					,
				Element:span
				Element:span
					"user"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					626
				Element:span
					,
				Element:span
				Element:span
					"lastname"
				Element:span
					:
				Element:span
				Element:span
					"Doe"
				Element:span
					,
				Element:span
				Element:span
					"firstname"
				Element:span
					:
				Element:span
				Element:span
					"Jean"
				Element:span
					,
				Element:span
				Element:span
					"email"
				Element:span
					:
				Element:span
				Element:span
					"jean@doe.com"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
				Element:span
					]
				Element:span
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					In case of error you could get these responses
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"401"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Unauthorized: api key [missing | invalid]"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"422"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Unable to perform your request"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Retrieve the action histories depending on the filter you entered.
			Node:
			(type) c
			(layer)1
				Element:p
					The action histories are returned by bulk. The number of items returned can be defined by a parameter but cannot exceed 100 items. To navigate in the large amount of data, use the parameters
				Element:code
					start_after
					and
				Element:code
					start_before
					with the action history’s id.
			Node:
			(type) c
			(layer)1
				Element:h3
					Http request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET https://YOUR_SLUG_HERE.leadalead.com/api/action_histories
			Node:
			(type) c
			(layer)1
				Element:h3
					Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
				Element:th
					Default
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					from
				Element:td
					optional
				Element:td
				Element:td
					Start date to retrieve the action histories.
				Element:tr
				Element:td
					to
				Element:td
					optional
				Element:td
				Element:td
					End date to retrieve the action histories. If used with the
				Element:code
					from
					parameter, action histories are retrieved in the date range. If used alone, all the action histories are retrieved until this date.
				Element:tr
				Element:td
					action_type
				Element:td
					optional
				Element:td
				Element:td
					Filter on the action’s type that triggered the entry in the history. Could be
				Element:strong
					one
					of these values:
				Element:code
					client_assigned
					,
				Element:code
					step_changed
					,
				Element:code
					status_changed
					,
				Element:code
					amount_set
					,
				Element:code
					user_assigned
					,
				Element:code
					lead_created
					,
				Element:code
					comment_added
					,
				Element:code
					email_sent
					.
				Element:tr
				Element:td
					action_value
				Element:td
					optional
				Element:td
				Element:td
					Filter on the value of two specifics action’s types:
				Element:code
					step_changed
					and
				Element:code
					status_changed
					. The available status_changed values are:
				Element:code
					todo
					,
				Element:code
					standby
					,
				Element:code
					won
					,
				Element:code
					lost
					,
				Element:code
					cancelled
					. If the step or status value is not recognized (typo, deletion), the filter is ignored.
				Element:tr
				Element:td
					lead_id
				Element:td
					optional
				Element:td
				Element:td
					Filter on a specific lead id.
				Element:tr
				Element:td
					user_ids
				Element:td
					optional
				Element:td
				Element:td
					Filter on the users who made the actions.
				Element:strong
					Comma-separated list of user ids or user emails
					.
				Element:tr
				Element:td
					direction
				Element:td
					optional
				Element:td
				Element:code
					asc
				Element:td
					Return data order by their id in ascending or descending. The value should be
				Element:code
					asc
					or
				Element:code
					desc
					.
				Element:tr
				Element:td
					start_after
				Element:td
					optional
				Element:td
				Element:td
					Action history’s id. Retrieve all action histories where the id is greater than
				Element:code
					start_after
					.
				Element:tr
				Element:td
					start_before
				Element:td
					optional
				Element:td
				Element:td
					Action history’s id. Retrieve all action histories where the id is less than
				Element:code
					start_before
					.
				Element:tr
				Element:td
					limit
				Element:td
					optional
				Element:td
					100
				Element:td
					Number of data returned. Value should be between 1 and 100.
			Node:
			(type) h1
			(layer)1
				Element:h1
					Users
			Node:
			(type) c
			(layer)1
				Element:h2
					List all the users
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					With the API key
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -H
				Element:span
					"Accept: application/ydncrm.v2"
					-H
				Element:span
					"X-API-KEY: 91Jy7XxreymBRMASfTF8"
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/users"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'rest-client'
				Element:span
					key
				Element:span
					=
				Element:span
					"91Jy7XxreymBRMASfTF8"
				Element:span
					header
				Element:span
					=
				Element:span
					{
				Element:span
					'X-API-KEY'
				Element:span
					=>
				Element:span
					key
				Element:span
					,
				Element:span
					content_type: :json
				Element:span
					,
				Element:span
					accept:
				Element:span
					"application/json application/ydncrm.v2"
				Element:span
					}
				Element:span
					response
				Element:span
					=
				Element:span
					RestClient
				Element:span
					.
				Element:span
					get
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/users"
				Element:span
					,
				Element:span
					header
				Element:span
					users
				Element:span
					=
				Element:span
					JSON
				Element:span
					.
				Element:span
					parse
				Element:span
					(
				Element:span
					response
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					With the USER token
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -H
				Element:span
					"Accept: application/ydncrm.v2"
					-H
				Element:span
					"X-USER-TOKEN: ITd-Jb3EC_nCXI2fez4hhg"
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/users"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'rest-client'
				Element:span
					token
				Element:span
					=
				Element:span
					"ITd-Jb3EC_nCXI2fez4hhg"
				Element:span
					header
				Element:span
					=
				Element:span
					{
				Element:span
					'X-USER-TOKEN'
				Element:span
					=>
				Element:span
					token
				Element:span
					,
				Element:span
					content_type: :json
				Element:span
					,
				Element:span
					accept:
				Element:span
					"application/json application/ydncrm.v2"
				Element:span
					}
				Element:span
					response
				Element:span
					=
				Element:span
					RestClient
				Element:span
					.
				Element:span
					get
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/users"
				Element:span
					,
				Element:span
					header
				Element:span
					users
				Element:span
					=
				Element:span
					JSON
				Element:span
					.
				Element:span
					parse
				Element:span
					(
				Element:span
					response
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					The above commands return JSON structure like this:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					514
				Element:span
					,
				Element:span
				Element:span
					"lastname"
				Element:span
					:
				Element:span
				Element:span
					"Doe"
				Element:span
					,
				Element:span
				Element:span
					"firstname"
				Element:span
					:
				Element:span
				Element:span
					"John"
				Element:span
					,
				Element:span
				Element:span
					"email"
				Element:span
					:
				Element:span
				Element:span
					"john.doe@mycompany.com"
				Element:span
					,
				Element:span
				Element:span
					"updated_at"
				Element:span
					:
				Element:span
				Element:span
					"2014-02-19T16:58:43.000Z"
				Element:span
					,
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2014-02-11T22:41:26.000Z"
				Element:span
					,
				Element:span
				Element:span
					"is_admin"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"has_activated"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"is_disabled"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"locale"
				Element:span
					:
				Element:span
				Element:span
					"en"
				Element:span
					,
				Element:span
				Element:span
					"time_zone"
				Element:span
					:
				Element:span
				Element:span
					"America/Denver"
				Element:span
					,
				Element:span
				Element:span
					"permalink"
				Element:span
					:
				Element:span
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/users/514"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					515
				Element:span
					,
				Element:span
				Element:span
					"lastname"
				Element:span
					:
				Element:span
				Element:span
					"Support"
				Element:span
					,
				Element:span
				Element:span
					"firstname"
				Element:span
					:
				Element:span
				Element:span
					""
				Element:span
					,
				Element:span
				Element:span
					"email"
				Element:span
					:
				Element:span
				Element:span
					"support@mycompany.com"
				Element:span
					,
				Element:span
				Element:span
					"updated_at"
				Element:span
					:
				Element:span
				Element:span
					"2014-02-20T16:58:43.000Z"
				Element:span
					,
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2014-02-20T22:41:26.000Z"
				Element:span
					,
				Element:span
				Element:span
					"is_admin"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"has_activated"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"is_disabled"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"locale"
				Element:span
					:
				Element:span
				Element:span
					"en"
				Element:span
					,
				Element:span
				Element:span
					"time_zone"
				Element:span
					:
				Element:span
				Element:span
					"Europe/Paris"
				Element:span
					,
				Element:span
				Element:span
					"permalink"
				Element:span
					:
				Element:span
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/users/515"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					]
				Element:span
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					In case of error you could get these responses
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"401"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Unauthorized: api key [missing | invalid]"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"422"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Unable to perform your request"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Retrieve all the users created in the account. The deleted users are retrieved too. Their state,
				Element:code
					is_disabled
					, is set to true in their case.
			Node:
			(type) c
			(layer)1
				Element:p
					The users could be in different state.
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					has_activated: true if the user has activated its account
				Element:li
					is_disabled: true if the administrator of the account has deleted the user. The user cannot access to the account anymore.
			Node:
			(type) c
			(layer)1
				Element:h3
					Http request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET https://YOUR_SLUG_HERE.leadalead.com/api/users
			Node:
			(type) c
			(layer)1
				Element:h2
					Create a user
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					With the API key
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -H
				Element:span
					"Accept: application/ydncrm.v2"
					-H
				Element:span
					"X-API-KEY: 91Jy7XxreymBRMASfTF8"
					--data
				Element:span
					"lastname=Einstein&firstname=Albert&email=albert.einstein@genius.com&is_admin=true"
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/users"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'rest-client'
				Element:span
					key
				Element:span
					=
				Element:span
					"91Jy7XxreymBRMASfTF8"
				Element:span
					header
				Element:span
					=
				Element:span
					{
				Element:span
					'X-API-KEY'
				Element:span
					=>
				Element:span
					key
				Element:span
					,
				Element:span
					content_type: :json
				Element:span
					,
				Element:span
					accept:
				Element:span
					"application/json application/ydncrm.v2"
				Element:span
					}
				Element:span
					parameters
				Element:span
					=
				Element:span
					{
				Element:span
					lastname:
				Element:span
					"Einstein"
				Element:span
					,
				Element:span
					firstname:
				Element:span
					"Albert"
				Element:span
					,
				Element:span
					email:
				Element:span
					"albert.einstein@genius.com"
				Element:span
					,
				Element:span
					is_admin:
				Element:span
					"true"
				Element:span
					}
				Element:span
					response
				Element:span
					=
				Element:span
					RestClient
				Element:span
					.
				Element:span
					post
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/users"
				Element:span
					,
				Element:span
					parameters
				Element:span
					,
				Element:span
					header
				Element:span
					user
				Element:span
					=
				Element:span
					JSON
				Element:span
					.
				Element:span
					parse
				Element:span
					(
				Element:span
					response
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					With the USER token
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -H
				Element:span
					"Accept: application/ydncrm.v2"
					-H
				Element:span
					"X-USER-TOKEN: ITd-Jb3EC_nCXI2fez4hhg"
					--data
				Element:span
					"lastname=Einstein&firstname=Albert&email=albert.einstein@genius.com&is_admin=true"
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/users"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'rest-client'
				Element:span
					token
				Element:span
					=
				Element:span
					"ITd-Jb3EC_nCXI2fez4hhg"
				Element:span
					header
				Element:span
					=
				Element:span
					{
				Element:span
					'X-USER-TOKEN'
				Element:span
					=>
				Element:span
					token
				Element:span
					,
				Element:span
					content_type: :json
				Element:span
					,
				Element:span
					accept:
				Element:span
					"application/json application/ydncrm.v2"
				Element:span
					}
				Element:span
					parameters
				Element:span
					=
				Element:span
					{
				Element:span
					lastname:
				Element:span
					"Einstein"
				Element:span
					,
				Element:span
					firstname:
				Element:span
					"Albert"
				Element:span
					,
				Element:span
					email:
				Element:span
					"albert.einstein@genius.com"
				Element:span
					,
				Element:span
					is_admin:
				Element:span
					"true"
				Element:span
					}
				Element:span
					response
				Element:span
					=
				Element:span
					RestClient
				Element:span
					.
				Element:span
					post
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/users"
				Element:span
					,
				Element:span
					parameters
				Element:span
					,
				Element:span
					header
				Element:span
					user
				Element:span
					=
				Element:span
					JSON
				Element:span
					.
				Element:span
					parse
				Element:span
					(
				Element:span
					response
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					The above commands return JSON structure like this:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					639
				Element:span
					,
				Element:span
				Element:span
					"lastname"
				Element:span
					:
				Element:span
				Element:span
					"Einstein"
				Element:span
					,
				Element:span
				Element:span
					"firstname"
				Element:span
					:
				Element:span
				Element:span
					"Albert"
				Element:span
					,
				Element:span
				Element:span
					"email"
				Element:span
					:
				Element:span
				Element:span
					"albert.einstein@genius.com"
				Element:span
					,
				Element:span
				Element:span
					"updated_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-07-22T16:58:43.000Z"
				Element:span
					,
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-07-22T16:58:43.000Z"
				Element:span
					,
				Element:span
				Element:span
					"is_admin"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"has_activated"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"is_disabled"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"locale"
				Element:span
					:
				Element:span
				Element:span
					"en"
				Element:span
					,
				Element:span
				Element:span
					"time_zone"
				Element:span
					:
				Element:span
				Element:span
					"America/Denver"
				Element:span
					,
				Element:span
				Element:span
					"permalink"
				Element:span
					:
				Element:span
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/users/639"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					In case of error you could get these responses
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"401"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Unauthorized: api key [missing | invalid]"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"401"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Unauthorized: the user has not the privileges to do this action."
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"422"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Missing parameter: [lastname | firstname | email] is required"
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"422"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Unable to perform your request"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Create a user with the specified information of
				Element:code
					lastname
					,
				Element:code
					firstname
					and
				Element:code
					email
					.
			Node:
			(type) c
			(layer)1
				Element:p
					By default,
				Element:strong
					the activation email is not sent to the user
					. If the user has to receive the email when he/she is created, the option
				Element:code
					dont_send_email
					has to be specified to
				Element:code
					false
					.
			Node:
			(type) c
			(layer)1
				Element:p
					When using the
				Element:code
					USER
					token, if the user logged is not an administrator of the account, he/she won’t be allowed to create a user.
			Node:
			(type) c
			(layer)1
				Element:h3
					Http request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					POST https://YOUR_SLUG_HERE.leadalead.com/api/users
			Node:
			(type) c
			(layer)1
				Element:h3
					Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
				Element:th
					Default
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					email
				Element:td
				Element:strong
					required
				Element:td
				Element:td
					The email of the user
				Element:tr
				Element:td
					lastname
				Element:td
					optional
				Element:td
				Element:td
					The lastname of the user
				Element:tr
				Element:td
					firstname
				Element:td
					optional
				Element:td
				Element:td
					The firstname of the user
				Element:tr
				Element:td
					is_admin
				Element:td
					optional
				Element:td
					false
				Element:td
				Element:code
					true
					if the user should be administrator of the account.
				Element:tr
				Element:td
					dont_send_email
				Element:td
					optional
				Element:td
					true
				Element:td
				Element:code
					false
					if the user has to receive his/her activation email when he/she is created.
			Node:
			(type) c
			(layer)1
				Element:h2
					Retrieve a user
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					With the API key
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -H
				Element:span
					"Accept: application/ydncrm.v2"
					-H
				Element:span
					"X-API-KEY: 91Jy7XxreymBRMASfTF8"
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/users/514"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'rest-client'
				Element:span
					key
				Element:span
					=
				Element:span
					"91Jy7XxreymBRMASfTF8"
				Element:span
					header
				Element:span
					=
				Element:span
					{
				Element:span
					'X-API-KEY'
				Element:span
					=>
				Element:span
					key
				Element:span
					,
				Element:span
					content_type: :json
				Element:span
					,
				Element:span
					accept:
				Element:span
					"application/json application/ydncrm.v2"
				Element:span
					}
				Element:span
					response
				Element:span
					=
				Element:span
					RestClient
				Element:span
					.
				Element:span
					get
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/users/514"
				Element:span
					,
				Element:span
					header
				Element:span
					user
				Element:span
					=
				Element:span
					JSON
				Element:span
					.
				Element:span
					parse
				Element:span
					(
				Element:span
					response
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					With the USER token
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -H
				Element:span
					"Accept: application/ydncrm.v2"
					-H
				Element:span
					"X-USER-TOKEN: ITd-Jb3EC_nCXI2fez4hhg"
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/users/514"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'rest-client'
				Element:span
					token
				Element:span
					=
				Element:span
					"ITd-Jb3EC_nCXI2fez4hhg"
				Element:span
					header
				Element:span
					=
				Element:span
					{
				Element:span
					'X-USER-TOKEN'
				Element:span
					=>
				Element:span
					token
				Element:span
					,
				Element:span
					content_type: :json
				Element:span
					,
				Element:span
					accept:
				Element:span
					"application/json application/ydncrm.v2"
				Element:span
					}
				Element:span
					response
				Element:span
					=
				Element:span
					RestClient
				Element:span
					.
				Element:span
					get
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/users/514"
				Element:span
					,
				Element:span
					header
				Element:span
					user
				Element:span
					=
				Element:span
					JSON
				Element:span
					.
				Element:span
					parse
				Element:span
					(
				Element:span
					response
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					The above commands return JSON structure like this:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					514
				Element:span
					,
				Element:span
				Element:span
					"lastname"
				Element:span
					:
				Element:span
				Element:span
					"Doe"
				Element:span
					,
				Element:span
				Element:span
					"firstname"
				Element:span
					:
				Element:span
				Element:span
					"John"
				Element:span
					,
				Element:span
				Element:span
					"email"
				Element:span
					:
				Element:span
				Element:span
					"john.doe@mycompany.com"
				Element:span
					,
				Element:span
				Element:span
					"updated_at"
				Element:span
					:
				Element:span
				Element:span
					"2014-02-19T16:58:43.000Z"
				Element:span
					,
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2014-02-11T22:41:26.000Z"
				Element:span
					,
				Element:span
				Element:span
					"is_admin"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"has_activated"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"is_disabled"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
					,
				Element:span
				Element:span
					"locale"
				Element:span
					:
				Element:span
				Element:span
					"en"
				Element:span
					,
				Element:span
				Element:span
					"time_zone"
				Element:span
					:
				Element:span
				Element:span
					"America/Denver"
				Element:span
					,
				Element:span
				Element:span
					"permalink"
				Element:span
					:
				Element:span
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/users/514"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					In case of error you could get these responses
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"401"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Unauthorized: api key [missing | invalid]"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"404"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Entry not found"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"422"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Missing parameter: id is required"
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"422"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Unable to perform your request"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Retrieve a specific user from its id.
			Node:
			(type) c
			(layer)1
				Element:h3
					Http request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET https://YOUR_SLUG_HERE.leadalead.com/api/users/{id}
			Node:
			(type) c
			(layer)1
				Element:h3
					Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
				Element:strong
					required
				Element:td
					The id of the user or its email address. Make sure to encode the email address properly.
			Node:
			(type) c
			(layer)1
				Element:h2
					Send the activation email
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					With the API key
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -H
				Element:span
					"Accept: application/ydncrm.v2"
					-H
				Element:span
					"X-API-KEY: 91Jy7XxreymBRMASfTF8"
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/users/639/send_activation_email"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'rest-client'
				Element:span
					key
				Element:span
					=
				Element:span
					"91Jy7XxreymBRMASfTF8"
				Element:span
					header
				Element:span
					=
				Element:span
					{
				Element:span
					'X-API-KEY'
				Element:span
					=>
				Element:span
					key
				Element:span
					,
				Element:span
					content_type: :json
				Element:span
					,
				Element:span
					accept:
				Element:span
					"application/json application/ydncrm.v2"
				Element:span
					}
				Element:span
					response
				Element:span
					=
				Element:span
					RestClient
				Element:span
					.
				Element:span
					get
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/users/1234/send_activation_email"
				Element:span
					,
				Element:span
					header
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					With the USER token
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -H
				Element:span
					"Accept: application/ydncrm.v2"
					-H
				Element:span
					"X-USER-TOKEN: ITd-Jb3EC_nCXI2fez4hhg"
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/users/639/send_activation_email"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'rest-client'
				Element:span
					token
				Element:span
					=
				Element:span
					"ITd-Jb3EC_nCXI2fez4hhg"
				Element:span
					header
				Element:span
					=
				Element:span
					{
				Element:span
					'X-USER-TOKEN'
				Element:span
					=>
				Element:span
					token
				Element:span
					,
				Element:span
					content_type: :json
				Element:span
					,
				Element:span
					accept:
				Element:span
					"application/json application/ydncrm.v2"
				Element:span
					}
				Element:span
					response
				Element:span
					=
				Element:span
					RestClient
				Element:span
					.
				Element:span
					get
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/users/1234/send_activation_email"
				Element:span
					,
				Element:span
					header
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					The above commands return nothing with the following statuses
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					status 200: email sent to the user status 304: the user is already activated, the email has not been sent
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					In case of error you could get these responses
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"401"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Unauthorized: api key [missing | invalid]"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"401"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Unauthorized: the user has not the privileges to do this action."
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"404"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Entry not found"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"422"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Missing parameter: id is required"
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"422"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Unable to perform your request"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Send the activation email of the specific user in order for him/her to access the account.
			Node:
			(type) c
			(layer)1
				Element:p
					When using the
				Element:code
					USER
					authentication, only admin users can send the activation email.
			Node:
			(type) c
			(layer)1
				Element:h3
					Http request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET https://YOUR_SLUG_HERE.leadalead.com/api/users/{id}/send_activation_email
			Node:
			(type) c
			(layer)1
				Element:h3
					Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
				Element:strong
					required
				Element:td
					The id of the user
			Node:
			(type) c
			(layer)1
				Element:h2
					Disable a user
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					With the API key
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -XPUT -H
				Element:span
					"Accept: application/ydncrm.v2"
					-H
				Element:span
					"X-API-KEY: 91Jy7XxreymBRMASfTF8"
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/users/639/disable"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'rest-client'
				Element:span
					key
				Element:span
					=
				Element:span
					"91Jy7XxreymBRMASfTF8"
				Element:span
					header
				Element:span
					=
				Element:span
					{
				Element:span
					'X-API-KEY'
				Element:span
					=>
				Element:span
					key
				Element:span
					,
				Element:span
					content_type: :json
				Element:span
					,
				Element:span
					accept:
				Element:span
					"application/json application/ydncrm.v2"
				Element:span
					}
				Element:span
					response
				Element:span
					=
				Element:span
					RestClient
				Element:span
					.
				Element:span
					put
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/users/639/disable"
				Element:span
					,
				Element:span
					header
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					With the USER token
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -XPUT -H
				Element:span
					"Accept: application/ydncrm.v2"
					-H
				Element:span
					"X-USER-TOKEN: ITd-Jb3EC_nCXI2fez4hhg"
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/users/639/disable"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'rest-client'
				Element:span
					token
				Element:span
					=
				Element:span
					"ITd-Jb3EC_nCXI2fez4hhg"
				Element:span
					header
				Element:span
					=
				Element:span
					{
				Element:span
					'X-USER-TOKEN'
				Element:span
					=>
				Element:span
					token
				Element:span
					,
				Element:span
					content_type: :json
				Element:span
					,
				Element:span
					accept:
				Element:span
					"application/json application/ydncrm.v2"
				Element:span
					}
				Element:span
					response
				Element:span
					=
				Element:span
					RestClient
				Element:span
					.
				Element:span
					put
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/users/639/disable"
				Element:span
					,
				Element:span
					header
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					The above commands return JSON structure like this:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					639
				Element:span
					,
				Element:span
				Element:span
					"lastname"
				Element:span
					:
				Element:span
				Element:span
					"Einstein"
				Element:span
					,
				Element:span
				Element:span
					"firstname"
				Element:span
					:
				Element:span
				Element:span
					"Albert"
				Element:span
					,
				Element:span
				Element:span
					"email"
				Element:span
					:
				Element:span
				Element:span
					"albert.einstein@genius.com"
				Element:span
					,
				Element:span
				Element:span
					"updated_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-07-22T16:58:43.000Z"
				Element:span
					,
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-07-22T16:58:43.000Z"
				Element:span
					,
				Element:span
				Element:span
					"is_admin"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"has_activated"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"is_disabled"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"locale"
				Element:span
					:
				Element:span
				Element:span
					"en"
				Element:span
					,
				Element:span
				Element:span
					"permalink"
				Element:span
					:
				Element:span
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/users/1234"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					In case of error you could get these responses
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"401"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Unauthorized: api key [missing | invalid]"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"401"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Unauthorized: the user has not the privileges to do this action."
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"404"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Entry not found"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"422"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Missing parameter: id is required"
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"422"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Unable to perform your request"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Disable the specific user from the account. The user won’t be able to connect anymore to the account.
			Node:
			(type) c
			(layer)1
				Element:p
					No data will be lost.
			Node:
			(type) c
			(layer)1
				Element:p
					Note: Even after disabling the user, a new user with the same email address cannot be created. The support has to be contacted to re-enable the disabled user.
			Node:
			(type) c
			(layer)1
				Element:p
					When using the
				Element:code
					USER
					authentication, only admin users can disable a user.
			Node:
			(type) c
			(layer)1
				Element:h3
					Http request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					PUT https://YOUR_SLUG_HERE.leadalead.com/api/users/{id}/disable
			Node:
			(type) c
			(layer)1
				Element:h3
					Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
				Element:strong
					required
				Element:td
					The id of the user
			Node:
			(type) h1
			(layer)1
				Element:h1
					Teams
			Node:
			(type) c
			(layer)1
				Element:h2
					List all the teams
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					With the API key
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -H
				Element:span
					"Accept: application/ydncrm.v2"
					-H
				Element:span
					"X-API-KEY: 91Jy7XxreymBRMASfTF8"
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/teams"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'rest-client'
				Element:span
					key
				Element:span
					=
				Element:span
					"91Jy7XxreymBRMASfTF8"
				Element:span
					header
				Element:span
					=
				Element:span
					{
				Element:span
					'X-API-KEY'
				Element:span
					=>
				Element:span
					key
				Element:span
					,
				Element:span
					content_type: :json
				Element:span
					,
				Element:span
					accept:
				Element:span
					"application/json application/ydncrm.v2"
				Element:span
					}
				Element:span
					response
				Element:span
					=
				Element:span
					RestClient
				Element:span
					.
				Element:span
					get
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/teams"
				Element:span
					,
				Element:span
					header
				Element:span
					teams
				Element:span
					=
				Element:span
					JSON
				Element:span
					.
				Element:span
					parse
				Element:span
					(
				Element:span
					response
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					With the USER token
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -H
				Element:span
					"Accept: application/ydncrm.v2"
					-H
				Element:span
					"X-USER-TOKEN: ITd-Jb3EC_nCXI2fez4hhg"
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/teams"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'rest-client'
				Element:span
					token
				Element:span
					=
				Element:span
					"ITd-Jb3EC_nCXI2fez4hhg"
				Element:span
					header
				Element:span
					=
				Element:span
					{
				Element:span
					'X-USER-TOKEN'
				Element:span
					=>
				Element:span
					token
				Element:span
					,
				Element:span
					content_type: :json
				Element:span
					,
				Element:span
					accept:
				Element:span
					"application/json application/ydncrm.v2"
				Element:span
					}
				Element:span
					response
				Element:span
					=
				Element:span
					RestClient
				Element:span
					.
				Element:span
					get
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/teams"
				Element:span
					,
				Element:span
					header
				Element:span
					teams
				Element:span
					=
				Element:span
					JSON
				Element:span
					.
				Element:span
					parse
				Element:span
					(
				Element:span
					response
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					The above commands return JSON structure like this:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					514
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Web Sales"
				Element:span
					,
				Element:span
				Element:span
					"users"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					514
				Element:span
					,
				Element:span
				Element:span
					"lastname"
				Element:span
					:
				Element:span
				Element:span
					"Stone"
				Element:span
					,
				Element:span
				Element:span
					"firstname"
				Element:span
					:
				Element:span
				Element:span
					"Stéphanie"
				Element:span
					,
				Element:span
				Element:span
					"email"
				Element:span
					:
				Element:span
				Element:span
					"stef@youdontneedacrm.com"
				Element:span
					,
				Element:span
				Element:span
					"is_manager"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					518
				Element:span
					,
				Element:span
				Element:span
					"lastname"
				Element:span
					:
				Element:span
				Element:span
					"Doe"
				Element:span
					,
				Element:span
				Element:span
					"firstname"
				Element:span
					:
				Element:span
				Element:span
					"John"
				Element:span
					,
				Element:span
				Element:span
					"email"
				Element:span
					:
				Element:span
				Element:span
					"john@youdontneedacrm.com"
				Element:span
					,
				Element:span
				Element:span
					"is_manager"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
				Element:span
					}
				Element:span
				Element:span
					],
				Element:span
				Element:span
					"updated_at"
				Element:span
					:
				Element:span
				Element:span
					"2014-02-19T16:58:43.000Z"
				Element:span
					,
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2014-02-11T22:41:26.000Z"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					517
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Web Sales"
				Element:span
					,
				Element:span
				Element:span
					"users"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					524
				Element:span
					,
				Element:span
				Element:span
					"lastname"
				Element:span
					:
				Element:span
				Element:span
					"Jane"
				Element:span
					,
				Element:span
				Element:span
					"firstname"
				Element:span
					:
				Element:span
				Element:span
					"Cheryl"
				Element:span
					,
				Element:span
				Element:span
					"email"
				Element:span
					:
				Element:span
				Element:span
					"cheryl@example.com"
				Element:span
					,
				Element:span
				Element:span
					"is_manager"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					525
				Element:span
					,
				Element:span
				Element:span
					"lastname"
				Element:span
					:
				Element:span
				Element:span
					"Doe"
				Element:span
					,
				Element:span
				Element:span
					"firstname"
				Element:span
					:
				Element:span
				Element:span
					"Albert"
				Element:span
					,
				Element:span
				Element:span
					"email"
				Element:span
					:
				Element:span
				Element:span
					"albert@example.com"
				Element:span
					,
				Element:span
				Element:span
					"is_manager"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
				Element:span
					}
				Element:span
				Element:span
					],
				Element:span
				Element:span
					"updated_at"
				Element:span
					:
				Element:span
				Element:span
					"2014-02-19T16:58:43.000Z"
				Element:span
					,
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2014-02-11T22:41:26.000Z"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					]
				Element:span
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					In case of error you could get these responses
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"401"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Unauthorized: api key [missing | invalid]"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"401"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Unauthorized: the user has not the privileges to do this action."
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"403"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Cannot access this feature."
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"404"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Entry not found"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"422"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Unable to perform your request"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					List all the teams created in the account.
			Node:
			(type) c
			(layer)1
				Element:p
					When using the
				Element:code
					USER TOKEN
					authentication, only admin users can list all the teams.
			Node:
			(type) c
			(layer)1
				Element:h3
					Http request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET https://YOUR_SLUG_HERE.leadalead.com/api/teams
			Node:
			(type) c
			(layer)1
				Element:aside
					If the feature “Teams” is not activated in the account, a 403 error is returned.
			Node:
			(type) c
			(layer)1
				Element:h2
					Create a team
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					With the API key
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -H
				Element:span
					"Accept: application/ydncrm.v2"
					-H
				Element:span
					"X-API-KEY: 91Jy7XxreymBRMASfTF8"
					-H
				Element:span
					"Content-Type: application/json"
					-d
				Element:span
					'{"name":"Web Sales"}'
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/teams"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'rest-client'
				Element:span
					key
				Element:span
					=
				Element:span
					"91Jy7XxreymBRMASfTF8"
				Element:span
					header
				Element:span
					=
				Element:span
					{
				Element:span
					'X-API-KEY'
				Element:span
					=>
				Element:span
					key
				Element:span
					,
				Element:span
					content_type: :json
				Element:span
					,
				Element:span
					accept:
				Element:span
					"application/json application/ydncrm.v2"
				Element:span
					}
				Element:span
					parameters
				Element:span
					=
				Element:span
					{
				Element:span
					name:
				Element:span
					"Web Sales"
				Element:span
					}
				Element:span
					response
				Element:span
					=
				Element:span
					RestClient
				Element:span
					.
				Element:span
					post
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/teams"
				Element:span
					,
				Element:span
					parameters
				Element:span
					,
				Element:span
					header
				Element:span
					team
				Element:span
					=
				Element:span
					JSON
				Element:span
					.
				Element:span
					parse
				Element:span
					(
				Element:span
					response
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					With the USER token
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -H
				Element:span
					"Accept: application/ydncrm.v2"
					-H
				Element:span
					"X-USER-TOKEN: ITd-Jb3EC_nCXI2fez4hhg"
					-H
				Element:span
					"Content-Type: application/json"
					-d
				Element:span
					'{"name":"Web Sales"} "https://YOUR_SLUG_HERE.leadalead.com/api/teams"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'rest-client'
				Element:span
					token
				Element:span
					=
				Element:span
					"ITd-Jb3EC_nCXI2fez4hhg"
				Element:span
					header
				Element:span
					=
				Element:span
					{
				Element:span
					'X-USER-TOKEN'
				Element:span
					=>
				Element:span
					token
				Element:span
					,
				Element:span
					content_type: :json
				Element:span
					,
				Element:span
					accept:
				Element:span
					"application/json application/ydncrm.v2"
				Element:span
					}
				Element:span
					parameters
				Element:span
					=
				Element:span
					{
				Element:span
					name:
				Element:span
					"Web Sales"
				Element:span
					}
				Element:span
					response
				Element:span
					=
				Element:span
					RestClient
				Element:span
					.
				Element:span
					post
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/teams"
				Element:span
					,
				Element:span
					parameters
				Element:span
					,
				Element:span
					header
				Element:span
					team
				Element:span
					=
				Element:span
					JSON
				Element:span
					.
				Element:span
					parse
				Element:span
					(
				Element:span
					response
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					The above commands return JSON structure like this:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					15
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Web Sales"
				Element:span
					,
				Element:span
				Element:span
					"users"
				Element:span
					:
				Element:span
				Element:span
					[],
				Element:span
				Element:span
					"updated_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-07-22T16:58:43.000Z"
				Element:span
					,
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-07-22T16:58:43.000Z"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					In case of error you could get these responses
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"401"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Unauthorized: api key [missing | invalid]"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"401"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Unauthorized: the user has not the privileges to do this action."
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"403"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Cannot access this feature."
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"422"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Missing parameter: name is required"
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"422"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Unable to perform your request"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Create a team with the specified
				Element:code
					name
					.
			Node:
			(type) c
			(layer)1
				Element:p
					When using the
				Element:code
					USER TOKEN
					authentication, only admin users can create a team.
			Node:
			(type) c
			(layer)1
				Element:h3
					Http request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					POST https://YOUR_SLUG_HERE.leadalead.com/api/teams
			Node:
			(type) c
			(layer)1
				Element:h3
					Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					name
				Element:td
				Element:strong
					required
				Element:td
					The name of the team
			Node:
			(type) c
			(layer)1
				Element:aside
					If the feature “Teams” is not activated in the account, a 403 error is returned.
			Node:
			(type) c
			(layer)1
				Element:h2
					Retrieve a team
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					With the API key
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -H
				Element:span
					"Accept: application/ydncrm.v2"
					-H
				Element:span
					"X-API-KEY: 91Jy7XxreymBRMASfTF8"
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/teams/15"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'rest-client'
				Element:span
					key
				Element:span
					=
				Element:span
					"91Jy7XxreymBRMASfTF8"
				Element:span
					header
				Element:span
					=
				Element:span
					{
				Element:span
					'X-API-KEY'
				Element:span
					=>
				Element:span
					key
				Element:span
					,
				Element:span
					content_type: :json
				Element:span
					,
				Element:span
					accept:
				Element:span
					"application/json application/ydncrm.v2"
				Element:span
					}
				Element:span
					response
				Element:span
					=
				Element:span
					RestClient
				Element:span
					.
				Element:span
					get
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/teams/15"
				Element:span
					,
				Element:span
					header
				Element:span
					team
				Element:span
					=
				Element:span
					JSON
				Element:span
					.
				Element:span
					parse
				Element:span
					(
				Element:span
					response
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					With the USER token
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -H
				Element:span
					"Accept: application/ydncrm.v2"
					-H
				Element:span
					"X-USER-TOKEN: ITd-Jb3EC_nCXI2fez4hhg"
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/teams/15"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'rest-client'
				Element:span
					token
				Element:span
					=
				Element:span
					"ITd-Jb3EC_nCXI2fez4hhg"
				Element:span
					header
				Element:span
					=
				Element:span
					{
				Element:span
					'X-USER-TOKEN'
				Element:span
					=>
				Element:span
					token
				Element:span
					,
				Element:span
					content_type: :json
				Element:span
					,
				Element:span
					accept:
				Element:span
					"application/json application/ydncrm.v2"
				Element:span
					}
				Element:span
					response
				Element:span
					=
				Element:span
					RestClient
				Element:span
					.
				Element:span
					get
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/teams/15"
				Element:span
					,
				Element:span
					header
				Element:span
					team
				Element:span
					=
				Element:span
					JSON
				Element:span
					.
				Element:span
					parse
				Element:span
					(
				Element:span
					response
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					The above commands return JSON structure like this:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					15
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Web Sales"
				Element:span
					,
				Element:span
				Element:span
					"users"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					524
				Element:span
					,
				Element:span
				Element:span
					"lastname"
				Element:span
					:
				Element:span
				Element:span
					"Jane"
				Element:span
					,
				Element:span
				Element:span
					"firstname"
				Element:span
					:
				Element:span
				Element:span
					"Cheryl"
				Element:span
					,
				Element:span
				Element:span
					"email"
				Element:span
					:
				Element:span
				Element:span
					"cheryl@example.com"
				Element:span
					,
				Element:span
				Element:span
					"is_manager"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					525
				Element:span
					,
				Element:span
				Element:span
					"lastname"
				Element:span
					:
				Element:span
				Element:span
					"Doe"
				Element:span
					,
				Element:span
				Element:span
					"firstname"
				Element:span
					:
				Element:span
				Element:span
					"Albert"
				Element:span
					,
				Element:span
				Element:span
					"email"
				Element:span
					:
				Element:span
				Element:span
					"albert@example.com"
				Element:span
					,
				Element:span
				Element:span
					"is_manager"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
				Element:span
					}
				Element:span
				Element:span
					],
				Element:span
				Element:span
					"updated_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-07-22T16:58:43.000Z"
				Element:span
					,
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-07-22T16:58:43.000Z"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					In case of error you could get these responses
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"401"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Unauthorized: api key [missing | invalid]"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"401"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Unauthorized: the user has not the privileges to do this action."
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"403"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Cannot access this feature."
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"404"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Entry not found"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"422"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Missing parameter: id is required"
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"422"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Unable to perform your request"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Retrieve a specific team from its id.
			Node:
			(type) c
			(layer)1
				Element:p
					When using the
				Element:code
					USER TOKEN
					authentication, only admin users can retrieve a team.
			Node:
			(type) c
			(layer)1
				Element:h3
					Http request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET https://YOUR_SLUG_HERE.leadalead.com/api/teams/{id}
			Node:
			(type) c
			(layer)1
				Element:h3
					Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
				Element:strong
					required
				Element:td
					The
				Element:code
					id
					or
				Element:code
					name
					of the team to retrieve.
			Node:
			(type) c
			(layer)1
				Element:aside
					If the feature “Teams” is not activated in the account, a 403 error is returned.
			Node:
			(type) c
			(layer)1
				Element:h2
					Update a team
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					With the API key
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -XPUT -H
				Element:span
					"Accept: application/ydncrm.v2"
					-H
				Element:span
					"X-API-KEY: 91Jy7XxreymBRMASfTF8"
					-H
				Element:span
					"Content-Type: application/json"
					-d
				Element:span
					'{"name":"My new team name"}'
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/teams/15"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'rest-client'
				Element:span
					key
				Element:span
					=
				Element:span
					"91Jy7XxreymBRMASfTF8"
				Element:span
					header
				Element:span
					=
				Element:span
					{
				Element:span
					'X-API-KEY'
				Element:span
					=>
				Element:span
					key
				Element:span
					,
				Element:span
					content_type: :json
				Element:span
					,
				Element:span
					accept:
				Element:span
					"application/json application/ydncrm.v2"
				Element:span
					}
				Element:span
					parameters
				Element:span
					=
				Element:span
					{
				Element:span
					name:
				Element:span
					"My new team name"
				Element:span
					}
				Element:span
					response
				Element:span
					=
				Element:span
					RestClient
				Element:span
					.
				Element:span
					put
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/teams/15"
				Element:span
					,
				Element:span
					parameters
				Element:span
					,
				Element:span
					header
				Element:span
					team
				Element:span
					=
				Element:span
					JSON
				Element:span
					.
				Element:span
					parse
				Element:span
					(
				Element:span
					response
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					With the USER token
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -XPUT -H
				Element:span
					"Accept: application/ydncrm.v2"
					-H
				Element:span
					"X-USER-TOKEN: ITd-Jb3EC_nCXI2fez4hhg"
					-H
				Element:span
					"Content-Type: application/json"
					-d
				Element:span
					'{"name":"My new team name"}'
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/teams/15"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'rest-client'
				Element:span
					token
				Element:span
					=
				Element:span
					"ITd-Jb3EC_nCXI2fez4hhg"
				Element:span
					header
				Element:span
					=
				Element:span
					{
				Element:span
					'X-USER-TOKEN'
				Element:span
					=>
				Element:span
					token
				Element:span
					,
				Element:span
					content_type: :json
				Element:span
					,
				Element:span
					accept:
				Element:span
					"application/json application/ydncrm.v2"
				Element:span
					}
				Element:span
					parameters
				Element:span
					=
				Element:span
					{
				Element:span
					name:
				Element:span
					"my new team name"
				Element:span
					}
				Element:span
					response
				Element:span
					=
				Element:span
					RestClient
				Element:span
					.
				Element:span
					put
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/teams/15"
				Element:span
					,
				Element:span
					parameters
				Element:span
					,
				Element:span
					header
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					The above commands return JSON structure like this:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					15
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"My new team name"
				Element:span
					,
				Element:span
				Element:span
					"users"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					524
				Element:span
					,
				Element:span
				Element:span
					"lastname"
				Element:span
					:
				Element:span
				Element:span
					"Jane"
				Element:span
					,
				Element:span
				Element:span
					"firstname"
				Element:span
					:
				Element:span
				Element:span
					"Cheryl"
				Element:span
					,
				Element:span
				Element:span
					"email"
				Element:span
					:
				Element:span
				Element:span
					"cheryl@example.com"
				Element:span
					,
				Element:span
				Element:span
					"is_manager"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					525
				Element:span
					,
				Element:span
				Element:span
					"lastname"
				Element:span
					:
				Element:span
				Element:span
					"Doe"
				Element:span
					,
				Element:span
				Element:span
					"firstname"
				Element:span
					:
				Element:span
				Element:span
					"Albert"
				Element:span
					,
				Element:span
				Element:span
					"email"
				Element:span
					:
				Element:span
				Element:span
					"albert@example.com"
				Element:span
					,
				Element:span
				Element:span
					"is_manager"
				Element:span
					:
				Element:span
				Element:span
					false
				Element:span
				Element:span
					}
				Element:span
				Element:span
					],
				Element:span
				Element:span
					"updated_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-07-22T16:58:43.000Z"
				Element:span
					,
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-07-22T16:58:43.000Z"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					In case of error you could get these responses
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"401"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Unauthorized: api key [missing | invalid]"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"401"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Unauthorized: the user has not the privileges to do this action."
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"403"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Cannot access this feature."
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"404"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Entry not found"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"422"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Missing parameter: [id | name] is required"
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"422"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Unable to perform your request"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Update the team by updating its name.
			Node:
			(type) c
			(layer)1
				Element:p
					When using the
				Element:code
					USER TOKEN
					authentication, only admin users can update a team.
			Node:
			(type) c
			(layer)1
				Element:h3
					Http request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					PUT https://YOUR_SLUG_HERE.leadalead.com/api/teams/{id}
			Node:
			(type) c
			(layer)1
				Element:h3
					Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
				Element:strong
					required
				Element:td
					The id of the team
				Element:tr
				Element:td
					name
				Element:td
				Element:strong
					required
				Element:td
					The new team’s name
			Node:
			(type) c
			(layer)1
				Element:aside
					If the feature “Teams” is not activated in the account, a 403 error is returned.
			Node:
			(type) c
			(layer)1
				Element:h2
					Delete a team
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					With the API key
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -XDELETE -H
				Element:span
					"Accept: application/ydncrm.v2"
					-H
				Element:span
					"X-API-KEY: 91Jy7XxreymBRMASfTF8"
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/teams/15"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'rest-client'
				Element:span
					key
				Element:span
					=
				Element:span
					"91Jy7XxreymBRMASfTF8"
				Element:span
					header
				Element:span
					=
				Element:span
					{
				Element:span
					'X-API-KEY'
				Element:span
					=>
				Element:span
					key
				Element:span
					,
				Element:span
					content_type: :json
				Element:span
					,
				Element:span
					accept:
				Element:span
					"application/json application/ydncrm.v2"
				Element:span
					}
				Element:span
					response
				Element:span
					=
				Element:span
					RestClient
				Element:span
					.
				Element:span
					delete
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/teams/15"
				Element:span
					,
				Element:span
					header
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					With the USER token
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -XDELETE -H
				Element:span
					"Accept: application/ydncrm.v2"
					-H
				Element:span
					"X-USER-TOKEN: ITd-Jb3EC_nCXI2fez4hhg"
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/teams/15"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'rest-client'
				Element:span
					token
				Element:span
					=
				Element:span
					"ITd-Jb3EC_nCXI2fez4hhg"
				Element:span
					header
				Element:span
					=
				Element:span
					{
				Element:span
					'X-USER-TOKEN'
				Element:span
					=>
				Element:span
					token
				Element:span
					,
				Element:span
					content_type: :json
				Element:span
					,
				Element:span
					accept:
				Element:span
					"application/json application/ydncrm.v2"
				Element:span
					}
				Element:span
					response
				Element:span
					=
				Element:span
					RestClient
				Element:span
					.
				Element:span
					delete
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/teams/15"
				Element:span
					,
				Element:span
					header
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					The above commands return JSON structure like this:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					15
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					In case of error you could get these responses
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"401"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Unauthorized: api key [missing | invalid]"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"401"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Unauthorized: the user has not the privileges to do this action."
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"403"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Cannot access this feature."
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"404"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Entry not found"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"422"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Missing parameter: id is required"
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"422"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Unable to perform your request"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Delete the team specified by its id.
			Node:
			(type) c
			(layer)1
				Element:p
					When using the
				Element:code
					USER TOKEN
					authentication, only admin users can delete a team.
			Node:
			(type) c
			(layer)1
				Element:h3
					Http request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					DELETE https://YOUR_SLUG_HERE.leadalead.com/api/teams/{id}
			Node:
			(type) c
			(layer)1
				Element:h3
					Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
				Element:strong
					required
				Element:td
					The id of the team
			Node:
			(type) c
			(layer)1
				Element:aside
					If the feature “Teams” is not activated in the account, a 403 error is returned.
			Node:
			(type) c
			(layer)1
				Element:h2
					Add a team member
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					With the API key
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -H
				Element:span
					"Accept: application/ydncrm.v2"
					-H
				Element:span
					"X-API-KEY: 91Jy7XxreymBRMASfTF8"
					-H
				Element:span
					"Content-Type: application/json"
					-d
				Element:span
					'{"user_id":514,"is_manager":true}'
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/teams/15/add_member"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'rest-client'
				Element:span
					key
				Element:span
					=
				Element:span
					"91Jy7XxreymBRMASfTF8"
				Element:span
					header
				Element:span
					=
				Element:span
					{
				Element:span
					'X-API-KEY'
				Element:span
					=>
				Element:span
					key
				Element:span
					,
				Element:span
					content_type: :json
				Element:span
					,
				Element:span
					accept:
				Element:span
					"application/json application/ydncrm.v2"
				Element:span
					}
				Element:span
					parameters
				Element:span
					=
				Element:span
					{
				Element:span
					user_id:
				Element:span
					514
				Element:span
					,
				Element:span
					is_manager:
				Element:span
					true
				Element:span
					}
				Element:span
					response
				Element:span
					=
				Element:span
					RestClient
				Element:span
					.
				Element:span
					post
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/teams/15/add_member"
				Element:span
					,
				Element:span
					parameters
				Element:span
					,
				Element:span
					header
				Element:span
					team
				Element:span
					=
				Element:span
					JSON
				Element:span
					.
				Element:span
					parse
				Element:span
					(
				Element:span
					response
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					With the USER token
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -H
				Element:span
					"Accept: application/ydncrm.v2"
					-H
				Element:span
					"X-USER-TOKEN: ITd-Jb3EC_nCXI2fez4hhg"
					-H
				Element:span
					"Content-Type: application/json"
					-d
				Element:span
					'{"user_id":514,"is_manager":true}'
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/teams/15/add_member"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'rest-client'
				Element:span
					token
				Element:span
					=
				Element:span
					"ITd-Jb3EC_nCXI2fez4hhg"
				Element:span
					header
				Element:span
					=
				Element:span
					{
				Element:span
					'X-USER-TOKEN'
				Element:span
					=>
				Element:span
					token
				Element:span
					,
				Element:span
					content_type: :json
				Element:span
					,
				Element:span
					accept:
				Element:span
					"application/json application/ydncrm.v2"
				Element:span
					}
				Element:span
					parameter
				Element:span
					=
				Element:span
					{
				Element:span
					user_id:
				Element:span
					514
				Element:span
					,
				Element:span
					is_manager:
				Element:span
					true
				Element:span
					}
				Element:span
					response
				Element:span
					=
				Element:span
					RestClient
				Element:span
					.
				Element:span
					post
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/teams/15/add_member"
				Element:span
					,
				Element:span
					parameters
				Element:span
					,
				Element:span
					header
				Element:span
					team
				Element:span
					=
				Element:span
					JSON
				Element:span
					.
				Element:span
					parse
				Element:span
					(
				Element:span
					response
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					The above commands return JSON structure like this:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					15
				Element:span
					,
				Element:span
				Element:span
					"users"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					524
				Element:span
					,
				Element:span
				Element:span
					"lastname"
				Element:span
					:
				Element:span
				Element:span
					"Jane"
				Element:span
					,
				Element:span
				Element:span
					"firstname"
				Element:span
					:
				Element:span
				Element:span
					"Cheryl"
				Element:span
					,
				Element:span
				Element:span
					"email"
				Element:span
					:
				Element:span
				Element:span
					"cheryl@example.com"
				Element:span
					,
				Element:span
				Element:span
					"is_manager"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
				Element:span
					}
				Element:span
				Element:span
					],
				Element:span
				Element:span
					"updated_at"
				Element:span
					:
				Element:span
				Element:span
					"2016-04-07T16:58:43.000Z"
				Element:span
					,
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-07-22T16:58:43.000Z"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					In case of error you could get these responses
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"401"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Unauthorized: api key [missing | invalid]"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"401"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Unauthorized: the user has not the privileges to do this action."
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"403"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Cannot access this feature."
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"404"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Entry not found"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"422"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Missing parameter: [id | user_id] is required"
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"422"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Unable to perform your request"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Add a team member or change the manager role for the specified user.
			Node:
			(type) c
			(layer)1
				Element:p
					When using the
				Element:code
					USER TOKEN
					authentication, only admin users can add a member to a team.
			Node:
			(type) c
			(layer)1
				Element:h3
					Http request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					POST https://YOUR_SLUG_HERE.leadalead.com/api/teams/{id}/add_member
			Node:
			(type) c
			(layer)1
				Element:h3
					Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
				Element:th
					Default
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
				Element:strong
					required
				Element:td
				Element:td
					The id of the team
				Element:tr
				Element:td
					user_id
				Element:td
				Element:strong
					required
				Element:td
				Element:td
					User’s email address or id to add.
				Element:tr
				Element:td
					is_manager
				Element:td
					optional
				Element:td
					false
				Element:td
					True if the user should be manager of the team.
			Node:
			(type) c
			(layer)1
				Element:aside
					If the feature “Teams” is not activated in the account, a 403 error is returned.
			Node:
			(type) c
			(layer)1
				Element:h2
					Remove a team member
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					With the API key
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -XDELETE -H
				Element:span
					"Accept: application/ydncrm.v2"
					-H
				Element:span
					"X-API-KEY: 91Jy7XxreymBRMASfTF8"
					-H
				Element:span
					"Content-Type: application/json"
					-d
				Element:span
					'{"user_id":514}'
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/teams/15/remove_member"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'rest-client'
				Element:span
					key
				Element:span
					=
				Element:span
					"91Jy7XxreymBRMASfTF8"
				Element:span
					header
				Element:span
					=
				Element:span
					{
				Element:span
					'X-API-KEY'
				Element:span
					=>
				Element:span
					key
				Element:span
					,
				Element:span
					content_type: :json
				Element:span
					,
				Element:span
					accept:
				Element:span
					"application/json application/ydncrm.v2"
				Element:span
					}
				Element:span
					parameters
				Element:span
					=
				Element:span
					{
				Element:span
					user_id:
				Element:span
					514
				Element:span
					}
				Element:span
					response
				Element:span
					=
				Element:span
					RestClient
				Element:span
					.
				Element:span
					delete
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/teams/15/remove_member"
				Element:span
					,
				Element:span
					parameters
				Element:span
					,
				Element:span
					header
				Element:span
					team
				Element:span
					=
				Element:span
					JSON
				Element:span
					.
				Element:span
					parse
				Element:span
					(
				Element:span
					response
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					With the USER token
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -XDELETE -H
				Element:span
					"Accept: application/ydncrm.v2"
					-H
				Element:span
					"X-USER-TOKEN: ITd-Jb3EC_nCXI2fez4hhg"
					-H
				Element:span
					"Content-Type: application/json"
					-d
				Element:span
					'{"user_id":514}'
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/teams/15/remove_member"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'rest-client'
				Element:span
					token
				Element:span
					=
				Element:span
					"ITd-Jb3EC_nCXI2fez4hhg"
				Element:span
					header
				Element:span
					=
				Element:span
					{
				Element:span
					'X-USER-TOKEN'
				Element:span
					=>
				Element:span
					token
				Element:span
					,
				Element:span
					content_type: :json
				Element:span
					,
				Element:span
					accept:
				Element:span
					"application/json application/ydncrm.v2"
				Element:span
					}
				Element:span
					parameter
				Element:span
					=
				Element:span
					{
				Element:span
					user_id:
				Element:span
					514
				Element:span
					}
				Element:span
					response
				Element:span
					=
				Element:span
					RestClient
				Element:span
					.
				Element:span
					delete
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/teams/15/remove_member"
				Element:span
					,
				Element:span
					parameters
				Element:span
					,
				Element:span
					header
				Element:span
					team
				Element:span
					=
				Element:span
					JSON
				Element:span
					.
				Element:span
					parse
				Element:span
					(
				Element:span
					response
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					The above commands return JSON structure like this:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					15
				Element:span
					,
				Element:span
				Element:span
					"users"
				Element:span
					:
				Element:span
				Element:span
					[],
				Element:span
				Element:span
					"updated_at"
				Element:span
					:
				Element:span
				Element:span
					"2016-04-07T16:58:43.000Z"
				Element:span
					,
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-07-22T16:58:43.000Z"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					In case of error you could get these responses
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"401"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Unauthorized: api key [missing | invalid]"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"401"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Unauthorized: the user has not the privileges to do this action."
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"403"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Cannot access this feature."
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"404"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Entry not found"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"422"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Missing parameter: [id | user_id] is required"
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"422"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Unable to perform your request"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Remove a team member.
			Node:
			(type) c
			(layer)1
				Element:p
					When using the
				Element:code
					USER TOKEN
					authentication, only admin users can remove a member from a team.
			Node:
			(type) c
			(layer)1
				Element:h3
					Http request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					DELETE https://YOUR_SLUG_HERE.leadalead.com/api/teams/{id}/remove_member
			Node:
			(type) c
			(layer)1
				Element:h3
					Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
				Element:th
					Default
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
				Element:strong
					required
				Element:td
				Element:td
					The id of the team
				Element:tr
				Element:td
					user_id
				Element:td
				Element:strong
					required
				Element:td
				Element:td
					User’s email address or id to remove.
			Node:
			(type) c
			(layer)1
				Element:aside
					If the feature “Teams” is not activated in the account, a 403 error is returned.
			Node:
			(type) h1
			(layer)1
				Element:h1
					Webhook Events
			Node:
			(type) c
			(layer)1
				Element:p
					The
				Element:strong
					Webhooks
					are a way to link our application with a third party API. Instead of getting leads in order to find out which lead has changed, we can directly notify you by a POST request to an URL you registered earlier. When the event happens, we will send you the request with the object and you can process it for your need. It is easy and efficient by this way.
			Node:
			(type) c
			(layer)1
				Element:p
				Element:strong
					Note
					: With webhooks, you need an API and some development to process the events we sent. If you don’t have all of this, you still have a way to be notified when an event occurs. From your account, we also implemented
				Element:strong
					Notifications
					. The principle is the same as webhook as you can subscribe to certain
				Element:a
					events
					but this time you enter an
				Element:strong
					email address
					. When the event is triggered we directly send you the information by email and someone can processed it. No need any development or an API, we just send you an email as notification.
			Node:
			(type) c
			(layer)1
				Element:p
					To define a webhook, you have to setup it up from the admin section of your account. You can subscribe to certain
				Element:a
					events
					.
			Node:
			(type) c
			(layer)1
				Element:p
					When you create a webhook in the administration section of your account, you will have to give us an
				Element:strong
					url
					where you want to reveice the notifications. In this case you will need to develop on your side something to process the data received.
			Node:
			(type) c
			(layer)1
				Element:p
					Then to complete the creation of the webhook, we will need one of your generated api key to use to sign the request. When the webhook is created in the application, each time an action happens corresponding to the event subscribed, we will send you a notification, a webhook event.
			Node:
			(type) c
			(layer)1
				Element:p
					No need to send plenty of requests in order to check the status, we will send you the notification directly to your API when something changed.
			Node:
			(type) c
			(layer)1
				Element:p
				Element:strong
					Note
					: when creating the webhook we ask for one of your generated api key. Remember that we will never send you this key in any notification. This key is needed in our side to sign the request and in your side to check the signature of the request and make sure we are the owner of the request.
				Element:strong
					Never communicate your private key to anyone.
			Node:
			(type) c
			(layer)1
				Element:p
					When one of the subscribed event happened on your account, we trigger a notification and send you a
				Element:strong
					Webhook Event
					. The notification is sent either by email or by a POST request to the url given depending on the option chosen when creating the webhook. For example when a lead is won we can send a notification so you can start the billing process.
			Node:
			(type) c
			(layer)1
				Element:p
					The webhook event we send you is composed of the following elements:
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					a unique
				Element:strong
					id
				Element:li
					the
				Element:strong
					event name
					which triggered the notification
				Element:li
					a
				Element:strong
					signature
					. This signature is a SHA1 encryption of the id of the object and the private api key you specified in the webhook
				Element:li
					a
				Element:strong
					data
					object containing the data on which the trigger occured. For example a lead object.
				Element:li
					the
				Element:strong
					comments
					associated to the data.
				Element:strong
					The comments are only send
					when the way to send the notification is
				Element:strong
					by email
					in order to process the data with all the context
			Node:
			(type) c
			(layer)1
				Element:aside
					When you get a notification, you will get a webhook event as we have described it previously. You can use the received data as it. **It is of your responsability to check if the request received is really from our service**. If you want to verify the data, you have to use the api key defined in the webhook and generate the signature as described previously and make sure that both signature (the one you generated and the one in the webhook event) are the same. If the 2 keys are not the same, the notification you received is not from our service and we encourage you to not use the data received.
			Node:
			(type) c
			(layer)1
				Element:p
				Element:strong
					Note
					: From our API you can retrieve the events that have been sent. To manage the webhooks (creation, deletion, modification), you have to go to your account.
			Node:
			(type) c
			(layer)1
				Element:h2
					Type of events
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Event
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					lead.creation
				Element:td
					Trigger when a
				Element:strong
					lead is created
					. Return the created lead.
				Element:tr
				Element:td
					lead.status.changed
				Element:td
					Trigger when the status of the lead changed. It could be
				Element:strong
					any status change
					. Return the lead modified.
				Element:tr
				Element:td
					lead.status.changed.to.todo
				Element:td
					Trigger when the status of the lead changed to
				Element:strong
					to-do
					. Return the lead modified.
				Element:tr
				Element:td
					lead.status.changed.to.standby
				Element:td
					Trigger when the status of the lead changed to
				Element:strong
					standby
					. Return the lead modified.
				Element:tr
				Element:td
					lead.status.changed.to.won
				Element:td
					Trigger when the status of the lead changed to
				Element:strong
					won
					. Return the lead modified.
				Element:tr
				Element:td
					lead.status.changed.to.lost
				Element:td
					Trigger when the status of the lead changed to
				Element:strong
					lost
					. Return the lead modified.
				Element:tr
				Element:td
					lead.status.changed.to.cancelled
				Element:td
					Trigger when the status of the lead changed to
				Element:strong
					cancelled
					. Return the lead modified.
			Node:
			(type) c
			(layer)1
				Element:h2
					List all webhook events
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -H
				Element:span
					"Accept: application/ydncrm.v2"
					-H
				Element:span
					"X-API-KEY: 91Jy7XxreymBRMASfTF8"
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/webhook_events"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'rest-client'
				Element:span
					key
				Element:span
					=
				Element:span
					"91Jy7XxreymBRMASfTF8"
				Element:span
					header
				Element:span
					=
				Element:span
					{
				Element:span
					'X-API-KEY'
				Element:span
					=>
				Element:span
					key
				Element:span
					,
				Element:span
					content_type: :json
				Element:span
					,
				Element:span
					accept:
				Element:span
					"application/json application/ydncrm.v2"
				Element:span
					}
				Element:span
					response
				Element:span
					=
				Element:span
					RestClient
				Element:span
					.
				Element:span
					get
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/webhook_events"
				Element:span
					,
				Element:span
					header
				Element:span
					events
				Element:span
					=
				Element:span
					JSON
				Element:span
					.
				Element:span
					parse
				Element:span
					(
				Element:span
					response
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					The above commands return JSON structure like this:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					[
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					984
				Element:span
					,
				Element:span
				Element:span
					"event"
				Element:span
					:
				Element:span
				Element:span
					"lead.status.changed.to.won"
				Element:span
					,
				Element:span
				Element:span
					"signature"
				Element:span
					:
				Element:span
				Element:span
					"5ae43881a5132de2c65cf2cb0e33c23daf25916a"
				Element:span
					,
				Element:span
				Element:span
					"data"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					9331
				Element:span
					,
				Element:span
				Element:span
					"title"
				Element:span
					:
				Element:span
				Element:span
					"Bountiful"
				Element:span
					,
				Element:span
				Element:span
					"description"
				Element:span
					:
				Element:span
				Element:span
					"Firstname: Elizabeth\u003Cbr /\u003ELastname: Swan\u003Cbr /\u003EFull name: Elizabeth Swan\u003Cbr /\u003EEmail: e.swan@bountiful.corp\u003Cbr /\u003EMobile: +1 801 563 9999"
				Element:span
					,
				Element:span
				Element:span
					"text_description"
				Element:span
					:
				Element:span
				Element:span
					"Firstname: Elizabeth\nLastname: Swan\nFull name: Elizabeth Swan\nEmail: e.swan@bountiful.corp\nMobile: +1 801 563 9999"
				Element:span
					,
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					1500.0
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
					,
				Element:span
				Element:span
					"probability"
				Element:span
					:
				Element:span
				Element:span
					100
				Element:span
					,
				Element:span
				Element:span
					"reminder_at"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"updated_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-03-05T21:36:04.000Z"
				Element:span
					,
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-03-05T21:34:10.000Z"
				Element:span
					,
				Element:span
				Element:span
					"starred"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"status"
				Element:span
					:
				Element:span
				Element:span
					"Won"
				Element:span
					,
				Element:span
				Element:span
					"step"
				Element:span
					:
				Element:span
				Element:span
					"Incoming"
				Element:span
					,
				Element:span
				Element:span
					"tags"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
					"prospect"
				Element:span
					,
				Element:span
					"test"
				Element:span
					],
				Element:span
				Element:span
					"contact_email"
				Element:span
					:
				Element:span
				Element:span
					"e.swan@bountiful.corp"
				Element:span
					,
				Element:span
				Element:span
					"first_contact_email"
				Element:span
					:
				Element:span
				Element:span
					"e.swan@bountiful.corp"
				Element:span
					,
				Element:span
				Element:span
					"all_contact_emails"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
					"e.swan@bountiful.corp"
				Element:span
					],
				Element:span
				Element:span
					"permalink"
				Element:span
					:
				Element:span
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/leads/9331"
				Element:span
					,
				Element:span
				Element:span
					"fields"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"email"
				Element:span
					:
				Element:span
				Element:span
					"e.swan@bountiful.corp"
				Element:span
					,
				Element:span
				Element:span
					"phone"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"mobile"
				Element:span
					:
				Element:span
				Element:span
					"+1 801 563 9999"
				Element:span
					,
				Element:span
				Element:span
					"address"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"web"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"first_name"
				Element:span
					:
				Element:span
				Element:span
					"Elizabeth"
				Element:span
					,
				Element:span
				Element:span
					"last_name"
				Element:span
					:
				Element:span
				Element:span
					"Swan"
				Element:span
					,
				Element:span
				Element:span
					"full_name"
				Element:span
					:
				Element:span
				Element:span
					"Elizabeth Swan"
				Element:span
					,
				Element:span
				Element:span
					"job"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"fax"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"vat"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"user"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					514
				Element:span
					,
				Element:span
				Element:span
					"lastname"
				Element:span
					:
				Element:span
				Element:span
					"Stone"
				Element:span
					,
				Element:span
				Element:span
					"firstname"
				Element:span
					:
				Element:span
				Element:span
					"Stéphanie"
				Element:span
					,
				Element:span
				Element:span
					"email"
				Element:span
					:
				Element:span
				Element:span
					"stef@youdontneedacrm.com"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"client_folder"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
				Element:span
					}
				Element:span
				Element:span
					},
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					3
				Element:span
					,
				Element:span
				Element:span
					"event"
				Element:span
					:
				Element:span
				Element:span
					"lead.creation"
				Element:span
					,
				Element:span
				Element:span
					"signature"
				Element:span
					:
				Element:span
				Element:span
					"9a046b0f8c6b3820d7fef781e65f7a11c86e7041"
				Element:span
					,
				Element:span
				Element:span
					"data"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					8115
				Element:span
					,
				Element:span
				Element:span
					"title"
				Element:span
					:
				Element:span
				Element:span
					"RED"
				Element:span
					,
				Element:span
				Element:span
					"description"
				Element:span
					:
				Element:span
				Element:span
					"Firstname: John<br />Lastname: Doe<br />Email: john@red.com<br />Phone: +1 870 538 2086<br />\r\n---\r\n<p>Some description of the company.</p>"
				Element:span
					,
				Element:span
				Element:span
					"text_description"
				Element:span
					:
				Element:span
				Element:span
					"Firstname: John\nLastname: Doe\nEmail: john@red.com\nPhone: +1 870 538 2086\n---\nSome description of the company."
				Element:span
					,
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					3000.0
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
					,
				Element:span
				Element:span
					"probability"
				Element:span
					:
				Element:span
				Element:span
					40
				Element:span
					,
				Element:span
				Element:span
					"reminder_at"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"updated_at"
				Element:span
					:
				Element:span
				Element:span
					"2014-03-04T17:28:27.000Z"
				Element:span
					,
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2014-03-04T17:28:27.000Z"
				Element:span
					,
				Element:span
				Element:span
					"starred"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"status"
				Element:span
					:
				Element:span
				Element:span
					"Todo"
				Element:span
					,
				Element:span
				Element:span
					"step"
				Element:span
					:
				Element:span
				Element:span
					"Incoming"
				Element:span
					,
				Element:span
				Element:span
					"tags"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
					"series"
				Element:span
					,
				Element:span
				Element:span
					"rse"
				Element:span
					],
				Element:span
				Element:span
					"first_contact_email"
				Element:span
					:
				Element:span
				Element:span
					"john@red.com"
				Element:span
					,
				Element:span
				Element:span
					"all_contact_emails"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
					"john@red.com"
				Element:span
					],
				Element:span
				Element:span
					"permalink"
				Element:span
					:
				Element:span
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/leads/8115"
				Element:span
					,
				Element:span
				Element:span
					"fields"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"email"
				Element:span
					:
				Element:span
				Element:span
					"john@red.com"
				Element:span
					,
				Element:span
				Element:span
					"phone"
				Element:span
					:
				Element:span
				Element:span
					"+1 870 538 2086"
				Element:span
					,
				Element:span
				Element:span
					"mobile"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"address"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"web"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"first_name"
				Element:span
					:
				Element:span
				Element:span
					"John"
				Element:span
					,
				Element:span
				Element:span
					"last_name"
				Element:span
					:
				Element:span
				Element:span
					"Doe"
				Element:span
					,
				Element:span
				Element:span
					"full_name"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"job"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"fax"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"vat"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"user"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					514
				Element:span
					,
				Element:span
				Element:span
					"lastname"
				Element:span
					:
				Element:span
				Element:span
					"Stone"
				Element:span
					,
				Element:span
				Element:span
					"firstname"
				Element:span
					:
				Element:span
				Element:span
					"Stéphanie"
				Element:span
					,
				Element:span
				Element:span
					"email"
				Element:span
					:
				Element:span
				Element:span
					"stef@youdontneedacrm.com"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"client_folder"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
				Element:span
					"Series"
				Element:span
					,
				Element:span
				Element:span
					"description"
				Element:span
					:
				Element:span
				Element:span
					"Billing address: 123 heaven avenue, San Francisco CA\u0026nbsp;94103\u003Cbr /\u003EShipping address: 456 pretty boulevard, Paradise CA\u0026nbsp;94188"
				Element:span
					,
				Element:span
				Element:span
					"is_active"
				Element:span
					:
				Element:span
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2015-01-30T22:03:14.000Z"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
				Element:span
					]
				Element:span
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					In case of error you could get this response
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"401"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Unauthorized: api key [missing | invalid]"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"422"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Unable to perform your request"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Return the list of all events already sent, going back up to 10 days.
			Node:
			(type) c
			(layer)1
				Element:h3
					Http request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET https://YOUR_SLUG_HERE.leadalead.com/api/webhook_events
			Node:
			(type) c
			(layer)1
				Element:aside
					In case of `Notifications`, setup from your account, the webhook_event doesn’t have a signature as the event is sent to the email you defined.
			Node:
			(type) c
			(layer)1
				Element:h2
					Retrieve a webhook event
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -H
				Element:span
					"Accept: application/ydncrm.v2"
					-H
				Element:span
					"X-API-KEY: 91Jy7XxreymBRMASfTF8"
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/webhook_events/3"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					require
				Element:span
					'rest-client'
				Element:span
					key
				Element:span
					=
				Element:span
					"91Jy7XxreymBRMASfTF8"
				Element:span
					header
				Element:span
					=
				Element:span
					{
				Element:span
					'X-API-KEY'
				Element:span
					=>
				Element:span
					key
				Element:span
					,
				Element:span
					content_type: :json
				Element:span
					,
				Element:span
					accept:
				Element:span
					"application/json application/ydncrm.v2"
				Element:span
					}
				Element:span
					response
				Element:span
					=
				Element:span
					RestClient
				Element:span
					.
				Element:span
					get
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/webhook_events/3"
				Element:span
					,
				Element:span
					header
				Element:span
					event
				Element:span
					=
				Element:span
					JSON
				Element:span
					.
				Element:span
					parse
				Element:span
					(
				Element:span
					response
				Element:span
					)
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					The above commands return JSON structure like this:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					3
				Element:span
					,
				Element:span
				Element:span
					"event"
				Element:span
					:
				Element:span
				Element:span
					"lead.creation"
				Element:span
					,
				Element:span
				Element:span
					"signature"
				Element:span
					:
				Element:span
				Element:span
					"9a046b0f8c6b3820d7fef781e65f7a11c86e7041"
				Element:span
					,
				Element:span
				Element:span
					"data"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					8115
				Element:span
					,
				Element:span
				Element:span
					"title"
				Element:span
					:
				Element:span
				Element:span
					"RED"
				Element:span
					,
				Element:span
				Element:span
					"description"
				Element:span
					:
				Element:span
				Element:span
					"Firstname: John<br />Lastname: Doe<br />Email: john@red.com<br />Phone: +1 870 538 2086<br />\r\n---\r\n<p>Some description of the company.</p>"
				Element:span
					,
				Element:span
				Element:span
					"text_description"
				Element:span
					:
				Element:span
				Element:span
					"Firstname: John\nLastname: Doe\nEmail: john@red.com\nPhone: +1 870 538 2086\n---\nSome description of the company."
				Element:span
					,
				Element:span
				Element:span
					"amount"
				Element:span
					:
				Element:span
				Element:span
					3000.0
				Element:span
					,
				Element:span
				Element:span
					"currency"
				Element:span
					:
				Element:span
				Element:span
					"USD"
				Element:span
					,
				Element:span
				Element:span
					"probability"
				Element:span
					:
				Element:span
				Element:span
					40
				Element:span
					,
				Element:span
				Element:span
					"reminder_at"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"updated_at"
				Element:span
					:
				Element:span
				Element:span
					"2014-03-04T17:28:27.000Z"
				Element:span
					,
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
				Element:span
					"2014-03-04T17:28:27.000Z"
				Element:span
					,
				Element:span
				Element:span
					"starred"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"status"
				Element:span
					:
				Element:span
				Element:span
					"Todo"
				Element:span
					,
				Element:span
				Element:span
					"step"
				Element:span
					:
				Element:span
				Element:span
					"Incoming"
				Element:span
					,
				Element:span
				Element:span
					"tags"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
					"series"
				Element:span
					,
				Element:span
				Element:span
					"rse"
				Element:span
					],
				Element:span
				Element:span
					"first_contact_email"
				Element:span
					:
				Element:span
				Element:span
					"john@red.com"
				Element:span
					,
				Element:span
				Element:span
					"all_contact_emails"
				Element:span
					:
				Element:span
				Element:span
					[
				Element:span
					"john@red.com"
				Element:span
					],
				Element:span
				Element:span
					"permalink"
				Element:span
					:
				Element:span
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/leads/8115"
				Element:span
					,
				Element:span
				Element:span
					"fields"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"email"
				Element:span
					:
				Element:span
				Element:span
					"john@red.com"
				Element:span
					,
				Element:span
				Element:span
					"phone"
				Element:span
					:
				Element:span
				Element:span
					"+1 870 538 2086"
				Element:span
					,
				Element:span
				Element:span
					"mobile"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"address"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"web"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"first_name"
				Element:span
					:
				Element:span
				Element:span
					"John"
				Element:span
					,
				Element:span
				Element:span
					"last_name"
				Element:span
					:
				Element:span
				Element:span
					"Doe"
				Element:span
					,
				Element:span
				Element:span
					"full_name"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"job"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"fax"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
					,
				Element:span
				Element:span
					"vat"
				Element:span
					:
				Element:span
				Element:span
					null
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"user"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
				Element:span
					514
				Element:span
					,
				Element:span
				Element:span
					"lastname"
				Element:span
					:
				Element:span
				Element:span
					"Stone"
				Element:span
					,
				Element:span
				Element:span
					"firstname"
				Element:span
					:
				Element:span
				Element:span
					"Stéphanie"
				Element:span
					,
				Element:span
				Element:span
					"email"
				Element:span
					:
				Element:span
				Element:span
					"stef@youdontneedacrm.com"
				Element:span
				Element:span
					},
				Element:span
				Element:span
					"client_folder"
				Element:span
					:
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"id"
				Element:span
					:
				Element:span
					1
				Element:span
					,
				Element:span
				Element:span
					"name"
				Element:span
					:
				Element:span
					"Series"
				Element:span
					,
				Element:span
				Element:span
					"description"
				Element:span
					:
				Element:span
					"Billing address: 123 heaven avenue, San Francisco CA\u0026nbsp;94103\u003Cbr /\u003EShipping address: 456 pretty boulevard, Paradise CA\u0026nbsp;94188"
				Element:span
					,
				Element:span
				Element:span
					"is_active"
				Element:span
					:
				Element:span
					true
				Element:span
					,
				Element:span
				Element:span
					"created_at"
				Element:span
					:
				Element:span
					"2015-01-30T22:03:14.000Z"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					In case of error you could get these responses
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"401"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Unauthorized: api key [missing | invalid]"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"404"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Entry not found"
				Element:span
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"422"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Missing parameter: id is required"
				Element:span
					}
				Element:span
				Element:span
					{
				Element:span
				Element:span
					"error"
				Element:span
					:
				Element:span
				Element:span
					"422"
				Element:span
					,
				Element:span
				Element:span
					"message"
				Element:span
					:
				Element:span
				Element:span
					"Unable to perform your request"
				Element:span
				Element:span
					}
				Element:span
			Node:
			(type) c
			(layer)1
				Element:p
					Retrieve a specific event from its id.
			Node:
			(type) c
			(layer)1
				Element:h3
					Http request
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					GET https://YOUR_SLUG_HERE.leadalead.com/api/webhook_events/{id}
			Node:
			(type) c
			(layer)1
				Element:h3
					Parameters
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Parameter
				Element:th
				Element:th
					Description
				Element:tbody
				Element:tr
				Element:td
					id
				Element:td
				Element:strong
					required
				Element:td
					The id of the webhook event
			Node:
			(type) c
			(layer)1
				Element:aside
					In case of `Notifications`, setup from your account, the webhook_event doesn’t have a signature as the event is sent to the email you defined.
			Node:
			(type) h1
			(layer)1
				Element:h1
					Errors
			Node:
			(type) c
			(layer)1
				Element:p
					The API uses the following error codes:
			Node:
			(type) c
			(layer)1
				Element:table
				Element:thead
				Element:tr
				Element:th
					Error Code
				Element:th
					Meaning
				Element:tbody
				Element:tr
				Element:td
					401
				Element:td
					Unauthorized – Your API key or USER token is wrong
				Element:tr
				Element:td
					404
				Element:td
					Not Found – The specified object could not be found
				Element:tr
				Element:td
					405
				Element:td
					Method Not Allowed – You tried to access with an invalid method
				Element:tr
				Element:td
					422
				Element:td
					Unprocessable – Unable to perform your request
			Node:
			(type) h1
			(layer)1
				Element:h1
					Migration v1 to v2
			Node:
			(type) c
			(layer)1
				Element:p
					If you are migrating the API calls from version 1 to version 2, this is all what have been changed.
			Node:
			(type) c
			(layer)1
				Element:h2
					Specify the version 2
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					curl -H
				Element:span
					"Accept: application/ydncrm.v2"
					-H
				Element:span
					"X-API-KEY: 91Jy7XxreymBRMASfTF8"
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/ping"
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					header
				Element:span
					=
				Element:span
					{
				Element:span
					'X-API-KEY'
				Element:span
					=>
				Element:span
					key
				Element:span
					,
				Element:span
					content_type: :json
				Element:span
					,
				Element:span
					accept:
				Element:span
					"application/json application/ydncrm.v2"
				Element:span
					}
				Element:span
					response
				Element:span
					=
				Element:span
					RestClient
				Element:span
					.
				Element:span
					get
				Element:span
					"https://YOUR_SLUG_HERE.leadalead.com/api/ping"
				Element:span
					,
				Element:span
					header
			Node:
			(type) c
			(layer)1
				Element:p
					As long as version 2 is not the default API, you have to explicitly define the use of the version 2 in the header of all your requests by adding
				Element:code
					application/ydncrm.v2
					in the
				Element:code
					Accept
					key.
			Node:
			(type) c
			(layer)1
				Element:h2
					Login / Logout
			Node:
			(type) c
			(layer)1
				Element:p
					If the requests have to be made as a specific user, we have introduced 2 new requests:
				Element:code
					login
					and
				Element:code
					logout
					.
			Node:
			(type) c
			(layer)1
				Element:p
					The
				Element:code
					login
					request will allow a specific user to access the application through the API with his/her right. The login will return a USER token that has to be used in any requests like the API-KEY but with the key USER-TOKEN.
			Node:
			(type) c
			(layer)1
				Element:p
					When you are done with the requests, you can logout the user with a
				Element:code
					logout
					request. After this step, the USER-TOKEN is deleted and you have to request a new token to access data. If you didn’t logout explicitly, the token is automatically destroyed after 30 days.
			Node:
			(type) c
			(layer)1
				Element:h2
					Log as
			Node:
			(type) c
			(layer)1
				Element:p
					When using the API key for most of the requests, it is possible to log as a specific user to do a request with the action
				Element:code
					log_as
					. Log as usual with the API key and then call this request to get a USER token for the specified user.
			Node:
			(type) c
			(layer)1
				Element:h2
					Steps
			Node:
			(type) c
			(layer)1
				Element:h3
					List the steps
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					Rename the parameter
				Element:code
					order
					in
				Element:code
					direction
					.
			Node:
			(type) c
			(layer)1
				Element:h3
					Retrieve a step
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					Allowing to retrieve a step by its
				Element:code
					id
					or its
				Element:code
					name
					. To retrieve a step by its name, just put the name instead of the id in the request. Make sure to encode properly the name if it contains specific characters.
			Node:
			(type) c
			(layer)1
				Element:h2
					Client folders
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					Add a new method to retrieve all the client folders in the account
			Node:
			(type) c
			(layer)1
				Element:h2
					Categories
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					Add a new method to retrieve all categories in the account.
				Element:li
					Add an option
				Element:code
					include_tags
					to include the predefined tags under each category. by default this option is false.
			Node:
			(type) c
			(layer)1
				Element:h2
					Predefined tags
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					Add a new method to retrieve all predefined tags in the account.
			Node:
			(type) c
			(layer)1
				Element:h2
					Leads
			Node:
			(type) c
			(layer)1
				Element:h3
					List the leads
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					Rename the parameter
				Element:code
					order
					to
				Element:code
					direction
					.
				Element:li
					Add a new optional parameter
				Element:code
					order
					allowing you to choose the attribute to order the data.
				Element:li
					Add a new optional parameter
				Element:code
					limit
					allowing to specify the number of data to returned. By default the limit is set to 100.
				Element:li
					Add a new optional parameter
				Element:code
					status
					allowing to specify a list of statuses.
				Element:li
					Add a new optional parameter
				Element:code
					step
					allowing to specify a list of steps name.
				Element:li
					Add a new optional parameter
				Element:code
					starred
					allowing to return only the leads starred or not.
				Element:li
					Add a new optional parameter
				Element:code
					user_id
					allowing to retrieve all the leads for one particular user. The is could be the
				Element:code
					id
					or the
				Element:code
					email
					.
				Element:li
					Add a new optional parameter
				Element:code
					email
					allowing to specify an email which can be contained in the lead’s description or in a comment.
				Element:li
					Add a new optional parameter
				Element:code
					updated_after
					allowing to retrieve all the leads modified after a specific date. The date should be in UTC.
				Element:li
					Delete of parameters
				Element:code
					start_before
					and
				Element:code
					start_after
					and replace them by the parameter
				Element:code
					offset
					.
				Element:li
					the output of the leads also changed for a shorter version.
				Element:ul
				Element:li
					we no longer returned the object user and client_folder but only their id with user_id and client_folder_id as key.
				Element:li
					the statuses returned are also the same as the key in the parameters (downcase).
				Element:li
					we no longer returned the
				Element:code
					first_contact_email
					,
				Element:code
					all_contact_emails
					,
				Element:code
					permalink
					and
				Element:code
					fields
					.
				Element:li
					the property
				Element:code
					description
					is now the text description. We have added a new entry for
				Element:code
					html_description
					.
			Node:
			(type) c
			(layer)1
				Element:h3
					Create a lead
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					Rename the parameter
				Element:code
					owner_email
					to
				Element:code
					user_id
					. It can be an email address or the user’s id. This parameter returns an error when using
				Element:code
					USER
					token authentication.
				Element:li
					A lead can be created with a list of tags even if the lead is not assigned to a user.
			Node:
			(type) c
			(layer)1
				Element:h3
					Update a lead
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					The parameter step should now be the exact name of the step and not the step’s id.
				Element:li
					Rename the parameter
				Element:code
					user
					to
				Element:code
					user_id
					.
				Element:li
					The parameter
				Element:code
					user_id
					could be the email address or the id.
				Element:li
					Rename the parameter
				Element:code
					remind_at
					to
				Element:code
					remind_date
					.
				Element:li
					The
				Element:code
					remind_date
					and
				Element:code
					remind_time
					are now in the time zone of the account.
			Node:
			(type) c
			(layer)1
				Element:h3
					Output of creating, retrieving and updating a lead has changed
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					the output when returning only one lead object has changed for a detailed version
				Element:ul
				Element:li
					the object is exactly the same as when returning a list of lead
				Element:li
					in addition, an object
				Element:code
					extended_info
					has been added with the following parameters:
				Element:code
					all_contact_emails
					,
				Element:code
					first_contact_email
					,
				Element:code
					permalink
					,
				Element:code
					fields
					,
				Element:code
					comment_count
					,
				Element:code
					bcc_count
					,
				Element:code
					user
					and
				Element:code
					client_folder
					.
			Node:
			(type) c
			(layer)1
				Element:h3
					New functionnalities on leads
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					Add the ability to
				Element:strong
					delete
					a lead.
				Element:li
					Add the ability to
				Element:strong
					delete many leads
					at once.
				Element:li
					Add the ability to
				Element:strong
					assign
					a lead to a user and send him/her a notification if the setting is checked.
				Element:li
					Add the ability to
				Element:strong
					retrieve all comments
					on a lead.
				Element:li
					Add the ability to
				Element:strong
					create a comment
					on a lead.
				Element:li
					Add the ability to
				Element:strong
					delete a comment
					on a lead.
			Node:
			(type) c
			(layer)1
				Element:aside
					Be aware that depending on the authentication method (API key or USER token), the user who makes the modification can have or not have the permission to do it.
			Node:
			(type) c
			(layer)1
				Element:h2
					Prospecting files
			Node:
			(type) c
			(layer)1
				Element:h3
					Create a prospecting file
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					Rename the parameter
				Element:code
					owner_email
					to
				Element:code
					user_id
					. It could be the email address or the id of the user. This parameter returned an error when using
				Element:code
					USER
					token authentication.
			Node:
			(type) c
			(layer)1
				Element:h2
					Action histories
			Node:
			(type) c
			(layer)1
				Element:h3
					List of action histories
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					Rename parameter
				Element:code
					order
					to
				Element:code
					direction
					.
				Element:li
					Add a new optional parameter
				Element:code
					limit
					allowing to specified the number of data to returned between 1 and 100.
			Node:
			(type) c
			(layer)1
				Element:h2
					Users
			Node:
			(type) c
			(layer)1
				Element:h3
					Output of user
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					The time zone of the user has been added in the json object
			Node:
			(type) c
			(layer)1
				Element:h3
					Retrieve a user
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					The id parameter could be the id of the user or its email address. Make sure to encode it properly.
			Node:
			(type) c
			(layer)1
				Element:a
					shell
			Node:
			(type) c
			(layer)1
				Element:a
					ruby
