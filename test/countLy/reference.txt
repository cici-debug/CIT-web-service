Node:
(type) c
(layer)0
	Element:body
		{"loggedIn":false,"search":{"token":"NGQxZTUxMzc3NTZmMDQ4OTkzNTFhZTRkNmU0M2QwNTJiNjhiNWZiMGUyYjVhYTRlZjAxMzI5NjcxZWZjMTFjMnRhZ0ZpbHRlcnM9cHJvamVjdDo1NDFjNmQ4MjUxYTY4YzNiNDViOWFkYTcsKGhpZGRlbjpub25lLGhpZGRlbjpmYWxzZSksKHZlcnNpb246bm9uZSx2ZXJzaW9uOjU0MWM2ZDgyNTFhNjhjM2I0NWI5YWRhYSk=","filters":"tagFilters=project:541c6d8251a68c3b45b9ada7,(hidden:none,hidden:false),(version:none,version:541c6d8251a68c3b45b9adaa)","app":"T28YKFATPY","modules":{"landing":true,"docs":true,"examples":true,"reference":true,"blog":false,"discuss":false,"suggested_edits":true}}}
			Node:
			(type) h1
			(layer)1
				Element:h1
				Element:span
					Mandatory Parameters
				Element:a
			Node:
			(type) c
			(layer)1
				Element:p
					Parameters listed below are mandatory for every write API request.
			Node:
			(type) c
			(layer)1
				Element:p
				Element:strong
					app_key
			Node:
			(type) c
			(layer)1
				Element:p
					Application key for the current application. Can be obtained from your dashboard after creating your application.
			Node:
			(type) c
			(layer)1
				Element:p
				Element:strong
					device_id
			Node:
			(type) c
			(layer)1
				Element:p
					Unique id for the user device. You can retrieve device specific ID or generate any unique ID you can using libraries like Open UDID
			Node:
			(type) h1
			(layer)1
				Element:h1
				Element:span
					Optional Parameters
				Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Session
							Element:a
						Node:
						(type) c
						(layer)2
							Element:p
							Element:strong
								begin_session
						Node:
						(type) c
						(layer)2
							Element:p
								Indicates the start of the user session. begin_session should be used with the API call you make at the beginning of user's session. begin_session should be given the value 1.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:strong
								end_session
						Node:
						(type) c
						(layer)2
							Element:p
								Indicates the end of the user session. end_session should be used with the API call you make at the end of user's session. end_session should be given the value 1.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:strong
								session_duration
						Node:
						(type) c
						(layer)2
							Element:p
								Heartbeat like parameter for extending session duration of the user for session_duration seconds.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Metrics
							Element:a
						Node:
						(type) c
						(layer)2
							Element:p
								JSON object containing key, value pairs. metrics can only be sent together with begin_session.
						Node:
						(type) c
						(layer)2
							Element:p
								Currently below predefined metrics are valid;
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:a
								JSON
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
							Element:span
								metrics
							Element:span
								=
								{
							Element:span
								"_os"
								:
							Element:span
								"Android"
								,
							Element:span
								"_os_version"
								:
							Element:span
								"4.1"
								,
							Element:span
								"_device"
								:
							Element:span
								"Samsung Galaxy"
								,
							Element:span
								"_resolution"
								:
							Element:span
								"1200x800"
								,
							Element:span
								"_carrier"
								:
							Element:span
								"Vodafone"
								,
							Element:span
								"_app_version"
								:
							Element:span
								"1.2"
								,
							Element:span
								"_density"
								:
							Element:span
								"MDPI"
								,
							Element:span
								"_locale"
								:
							Element:span
								"en_US"
								,
							Element:span
								"_store"
								:
							Element:span
								"com.android.vending"
								}
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Events
							Element:a
						Node:
						(type) c
						(layer)2
							Element:p
								JSON array containing event objects. Each event object can have below properties;
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
								key (Mandatory, String)
							Element:li
								count (Mandatory, Integer)
							Element:li
								sum (Optional, Double)
							Element:li
								dur (Optional, Double)
							Element:li
								segmentation (Optional, Dictionary Object)
							Element:li
								timestamp (Optional)
							Element:li
								hour (Optional)
							Element:li
								dow (Optional)
							Element:br
								A sample event array will look like this;
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:a
								JSON
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
								[ {
							Element:span
								"key"
								:
							Element:span
								"level_success"
								,
							Element:span
								"count"
								:
							Element:span
								4
								}, {
							Element:span
								"key"
								:
							Element:span
								"level_fail"
								,
							Element:span
								"count"
								:
							Element:span
								2
								}, {
							Element:span
								"key"
								:
							Element:span
								"in_app_purchase"
								,
							Element:span
								"count"
								:
							Element:span
								3
								,
							Element:span
								"sum"
								:
							Element:span
								2.97
								,
							Element:span
								"dur"
								:
							Element:span
								1000
								,
							Element:span
								"segmentation"
								: {
							Element:span
								"app_version"
								:
							Element:span
								"1.0"
								,
							Element:span
								"country"
								:
							Element:span
								"Germany"
								} } ]
						Node:
						(type) c
						(layer)2
							Element:p
								Ater this request we will be able to;
						Node:
						(type) c
						(layer)2
							Element:p
								See how many times user completed a level successfully or failed.
							Element:br
								See how many times in app purchase occurred and the total amount of these IAPs.
							Element:br
								Segment IAP data into two levels, one is app_version and the other is country. So we will be able to identify which application version performed best in terms of IAP and which countries tend to do IAP more.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								User details
							Element:a
						Node:
						(type) c
						(layer)2
							Element:p
								JSON object containing key, value pairs.
						Node:
						(type) c
						(layer)2
							Element:p
								All values are optional and currently you can pass this information about user:
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:a
								JSON
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
							Element:span
								user_details
							Element:span
								=
								{
							Element:span
								"name"
								:
							Element:span
								"Arturs Sosins"
								,
							Element:span
								"username"
								:
							Element:span
								"ar2rsawseen"
								,
							Element:span
								"email"
								:
							Element:span
								"test@test.com"
								,
							Element:span
								"organization"
								:
							Element:span
								"Countly"
								,
							Element:span
								"phone"
								:
							Element:span
								"+37112345678"
								,
							Element:span
								//Web URL to picture
							Element:span
								"picture"
								:
							Element:span
								"https://pbs.twimg.com/profile_images/1442562237/012_n_400x400.jpg"
								,
							Element:span
								"gender"
								:
							Element:span
								"M"
								,
							Element:span
								"byear"
								:
							Element:span
								1987
								,
							Element:span
								//birth year
							Element:span
								"custom"
								:{
							Element:span
								"key1"
								:
							Element:span
								"value1"
								,
							Element:span
								"key2"
								:
							Element:span
								"value2"
								,
							Element:span
								...
								} }
						Node:
						(type) c
						(layer)2
							Element:p
								If you set value as null, you will delete the property.
						Node:
						(type) c
						(layer)2
							Element:p
								Additionally you can upload picture of the user to the server by sending POST request to the same URL you would provide user information to.
						Node:
						(type) c
						(layer)2
							Element:p
								If you don't have any user information to provide, you can simply upload profile picture to
							Element:br
								"/i?app_key=APP_KEY&device_id=DEVICE_ID&user_details"
						Node:
						(type) c
						(layer)2
							Element:p
								Accepted picture formats are .png, .gif and .jpeg and picture will be resized to maximal 150x150 dimensions.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Modifying custom user data
							Element:a
						Node:
						(type) c
						(layer)2
							Element:p
								You can provide custom properties for user using custom key and providing JSON object with key and values to store for this user.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:strong
								Note:
								dots (.) and dollar signs ($) in key names will be stripped out.
						Node:
						(type) c
						(layer)2
							Element:p
								Also you can modify custom properties, like increment value stored on server by 1, or store array of values (including unique only values) under same key.
						Node:
						(type) c
						(layer)2
							Element:p
								Here are example of possible modifications:
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:a
								JSON
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
							Element:span
								user_details
							Element:span
								=
								{
							Element:span
								"custom"
								:{
							Element:span
								//simply set key value
							Element:span
								"key"
								:
							Element:span
								"value"
								,
							Element:span
								//increment value on server by 2
							Element:span
								"key2"
								:{
							Element:span
								"$inc"
								:
							Element:span
								2
								},
							Element:span
								//multiply value on server by 2
							Element:span
								"key3"
								:{
							Element:span
								"$mul"
								:
							Element:span
								2
								},
							Element:span
								//store maximal value between provided and server value
							Element:span
								"key4"
								:{
							Element:span
								"$max"
								:
							Element:span
								10
								},
							Element:span
								//store minimal value between provided and server value
							Element:span
								"key5"
								:{
							Element:span
								"$min"
								:
							Element:span
								10
								},
							Element:span
								//store value if it does not exist on server yet
							Element:span
								"key6"
								:{
							Element:span
								"$setOnce"
								:
							Element:span
								"initial value"
								},
							Element:span
								//add one value to array
							Element:span
								"key7"
								:{
							Element:span
								"$push"
								:
							Element:span
								"value"
								},
							Element:span
								//add multiple values to array
							Element:span
								"key8"
								:{
							Element:span
								"$push"
								:[
							Element:span
								"value1"
								,
							Element:span
								"value2"
								]},
							Element:span
								//add value to array, if it is already in array, it won't add it
							Element:span
								"key9"
								:{
							Element:span
								"$addToSet"
								:
							Element:span
								"value"
								},
							Element:span
								//add values to array, if values is already in array, it won't add them
							Element:span
								"key10"
								:{
							Element:span
								"$addToSet"
								:[
							Element:span
								"value1"
								,
							Element:span
								"value2"
								]},
							Element:span
								//remove one value from array
							Element:span
								"key11"
								:{
							Element:span
								"$pull"
								:
							Element:span
								"value"
								},
							Element:span
								//remove multiple values from array
							Element:span
								"key12"
								:{
							Element:span
								"$pull"
								:[
							Element:span
								"value1"
								,
							Element:span
								"value2"
								]},
							Element:span
								...
								} }
						Node:
						(type) c
						(layer)2
							Element:p
								List of possible commands:
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
								$inc - to increment value on server by provided value (if no value on server, assumes it is 0)
							Element:li
								$mul - to multiply value on server by provided value (if no value on server, assumes it is 0)
							Element:li
								$max - to store maximal value from the one on server and provided value (if no value on server, uses provided value)
							Element:li
								$min - to store minimal value from the one on server and provided value (if no value on server, uses provided value)
							Element:li
								$setOnce - set's value to key, only if property was not defined before for this user
							Element:li
								$push - add one or many values to array property (can have multiple same values, if property is not array, converts it to array)
							Element:li
								$addToSet - add one or many values to array property (will only store unique values in array, if property is not array, converts it to array)
							Element:li
								$pull - remove one or many values from array property (only removes value from array properties)
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Change ID and merge data
							Element:a
						Node:
						(type) c
						(layer)2
							Element:p
							Element:strong
								old_device_id
						Node:
						(type) c
						(layer)2
							Element:p
								If for some reason you want to change device_id that was provided to Countly for specific user, you can use new device id as device_ID parameter and specify old device ID as old_device_id parameter. That way Countly will switch the device ID used for this user from old one to new one transferring all data to it. If user with new device ID already existing, then their data will be merged together into single user.
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:a
								JavaScript
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
							Element:span
								device_id
							Element:span
								=
							Element:span
								myNewId
							Element:span
								&
							Element:span
								old_device_id
							Element:span
								=
							Element:span
								myOldId
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Additional parameters
							Element:a
						Node:
						(type) c
						(layer)2
							Element:p
							Element:strong
								timestamp
						Node:
						(type) c
						(layer)2
							Element:p
								10 digit UTC timestamp for recording past data.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:strong
								hour
						Node:
						(type) c
						(layer)2
							Element:p
								Current user local hour (0 - 23)
						Node:
						(type) c
						(layer)2
							Element:p
							Element:strong
								dow
						Node:
						(type) c
						(layer)2
							Element:p
								Currenr user day of the week (0-sunday, 1 - monday, ... 6 - saturday)
						Node:
						(type) c
						(layer)2
							Element:p
							Element:strong
								ip_address
						Node:
						(type) c
						(layer)2
							Element:p
								IP address of the user. By default IP address of the user is detected from the connection but you can send it manually using this parameter. ip_address parameter can only be used with the begin_session request.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:strong
								country_code and city
						Node:
						(type) c
						(layer)2
							Element:p
								Additionally to passing the IP address from which location can be determined, it is also possible to directly provide user's country and city. For country you only need to provide ISO standard two letter country code. For city you may provide city name as string value
						Node:
						(type) c
						(layer)2
							Element:p
							Element:strong
								location
						Node:
						(type) c
						(layer)2
							Element:p
								If you can provide user's location coordinates, you can do that though this parameter, passing value as location=lat,lng
						Node:
						(type) c
						(layer)2
							Element:p
								For example, location=56.42345,123.45325
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Push notifications
							Element:a
						Node:
						(type) c
						(layer)2
							Element:p
								To specify that device is capable of receiving push notifications, you need to provide a token to Countly server by adding this parameters to your request
						Node:
						(type) c
						(layer)2
							Element:p
								token_session=1 saying that you will provide token in this request
						Node:
						(type) c
						(layer)2
							Element:p
								test_mode=0 saying this is not a test request
						Node:
						(type) c
						(layer)2
							Element:p
								{platform}_token = {your token here} - providing push notification token for your device's platform
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:a
								JavaScript
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
							Element:span
								token_session
							Element:span
								=
							Element:span
								1
							Element:span
								&
							Element:span
								test_mode
							Element:span
								=
							Element:span
								0
							Element:span
								&
							Element:span
								android_token
							Element:span
								=
							Element:span
								12345678
						Node:
						(type) c
						(layer)2
							Element:p
								To notify Countly that user received push notification send an
							Element:strong
								[CLY]_push_open
								event with
							Element:strong
								i
								segment and value of message ID. In similar manner you can notify Countly server when push notification was opened or an action was performed using
							Element:strong
								[CLY]_push_action
								and
							Element:strong
								[CLY]_push_sent
								events with same
							Element:strong
								i
								segment and message ID value
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:a
								JavaScript
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
							Element:span
								events
							Element:span
								=
								[ {
							Element:span
								"key"
								:
							Element:span
								"[CLY]_push_open"
								,
							Element:span
								"count"
								:
							Element:span
								1
								,
							Element:span
								"segmentation"
								: {
							Element:span
								"i"
								:
							Element:span
								"123456789012345678901234"
								} }, {
							Element:span
								"key"
								:
							Element:span
								"[CLY]_push_action"
								,
							Element:span
								"count"
								:
							Element:span
								1
								,
							Element:span
								"segmentation"
								: {
							Element:span
								"i"
								:
							Element:span
								"123456789012345678901234"
								} }, {
							Element:span
								"key"
								:
							Element:span
								"[CLY]_push_sent"
								,
							Element:span
								"count"
								:
							Element:span
								1
								,
							Element:span
								"segmentation"
								: {
							Element:span
								"i"
								:
							Element:span
								"123456789012345678901234"
								} } ]
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Crash Analytics
							Element:a
						Node:
						(type) c
						(layer)2
							Element:p
							Element:strong
								crash
								- JSON object containing key, value pairs.
						Node:
						(type) c
						(layer)2
							Element:p
								All values except _os, _app_version and _error are optional, but more information you provide, more information you will have when resolving crashes
						Node:
						(type) c
						(layer)2
							Element:p
								Currently supported fields are:
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:a
								JSON
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
							Element:span
								crash
							Element:span
								=
								{
							Element:span
								//device metrics
							Element:span
								"_os"
								:
							Element:span
								"Android"
								,
							Element:span
								"_os_version"
								:
							Element:span
								"4.1"
								,
							Element:span
								"_manufacture"
								:
							Element:span
								"Samsung"
								,
							Element:span
								//may not be provided for ios or be constant, like Apple
							Element:span
								"_device"
								:
							Element:span
								"Galaxy S4"
								,
							Element:span
								//model for Android, iPhone1,1 etc for iOS
							Element:span
								"_resolution"
								:
							Element:span
								"1900x1080"
								,
							Element:span
								"_app_version"
								:
							Element:span
								"2.1"
								,
							Element:span
								"_cpu"
								:
							Element:span
								"armv7"
								,
							Element:span
								//type of cpu used on device (for ios will be based on device)
							Element:span
								"_opengl"
								:
							Element:span
								"2.1"
								,
							Element:span
								//version of open gl supported
							Element:span
								//state of device
							Element:span
								"_ram_current"
								:
							Element:span
								1024
								,
							Element:span
								//in megabytes
							Element:span
								"_ram_total"
								:
							Element:span
								4096
								,
							Element:span
								"_disk_current"
								:
							Element:span
								3000
								,
							Element:span
								//in megabytes
							Element:span
								"_disk_total"
								:
							Element:span
								10240
								,
							Element:span
								"_bat"
								:
							Element:span
								99
								,
							Element:span
								//battery level from 0 to 100
							Element:span
								//or provide "_bat_current" and "_bat_total" if other scale
							Element:span
								"_orientation"
								:
							Element:span
								"portrait"
								,
							Element:span
								//in which device was held, landscape, portrait, etc
							Element:span
								//bools
							Element:span
								"_root"
								:
							Element:span
								false
								,
							Element:span
								//true if device is rooted/jailbroken, false or not provided if not
							Element:span
								"_online"
								:
							Element:span
								true
								,
							Element:span
								//true if device is connected to the internet (WiFi or 3G), false or not provided if not connected
							Element:span
								"_muted"
								:
							Element:span
								false
								,
							Element:span
								//true if volume is off, device is in muted state
							Element:span
								"_background"
								:
							Element:span
								false
								,
							Element:span
								//true if app was in background when it crashed
							Element:span
								//error info
							Element:span
								"_name"
								:
							Element:span
								"Null Pointer exception"
								,
							Element:span
								//optional if provided by OS/Platform, else will use first line of stack
							Element:span
								"_error"
								:
							Element:span
								"Some error stack here"
								,
							Element:span
								//error stack, can provide multiple separated by blank new line
							Element:span
								"_nonfatal"
								:
							Element:span
								false
								,
							Element:span
								//true if handled exception, false or not provided if unhandled crash
							Element:span
								"_logs"
								:
							Element:span
								"logs provided here"
								,
							Element:span
								//some additional logs provided, if any
							Element:span
								"_run"
								:
							Element:span
								180
								,
							Element:span
								//running time since app start in seconds
							Element:span
								//custom key/values provided by developers
							Element:span
								"_custom"
								:{
							Element:span
								"facebook_sdk"
								:
							Element:span
								"3.5"
								,
							Element:span
								"admob"
								:
							Element:span
								"6.5"
								} }
						Node:
						(type) c
						(layer)2
							Element:p
								You can provide custom properties for crash using custom key and providing JSON object with key and values to store for this crash report and server will segment values for you for the same crash.
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Views
							Element:a
						Node:
						(type) c
						(layer)2
							Element:p
								You can report what views did user view and for how long. This is done by adding event with key
							Element:strong
								[CLY]_view
								and event
							Element:strong
								dur
								property for duration, and providing additional values as event segments, as:
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
								name - name of the view
							Element:li
								visit - 1 or true to count a visit to this view
							Element:li
								segment - single segment option (platform for mobile apps, domain for websites)
							Element:li
								start - 1 or true if user started session with this view
						Node:
						(type) c
						(layer)2
							Element:p
								The usual flow is to create event when user visits view, and report duration when user exits it.
						Node:
						(type) c
						(layer)2
							Element:p
								Here is the example for scenario, where user starts app with view1, views it for 60 seconds and moves to view2, views it for 30 seconds and exists app.
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:a
								view1
							Element:li
							Element:a
								view2
							Element:li
							Element:a
								exit
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
							Element:span
								events
							Element:span
								=
								[ {
							Element:span
								"key"
								:
							Element:span
								"[CLY]_view"
								,
							Element:span
								"count"
								:
							Element:span
								1
								,
							Element:span
								"segmentation"
								: {
							Element:span
								"name"
								:
							Element:span
								"view1"
								,
							Element:span
								"segment"
								:
							Element:span
								"Android"
								,
							Element:span
								"visit"
								:
							Element:span
								1
								,
							Element:span
								"start"
								:
							Element:span
								1
								} } ]
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
							Element:span
								events
							Element:span
								=
								[
							Element:span
								//firstly report previous view duration
								{
							Element:span
								"key"
								:
							Element:span
								"[CLY]_view"
								,
							Element:span
								"count"
								:
							Element:span
								1
								,
							Element:span
								"dur"
								:
							Element:span
								60
								,
							Element:span
								"segmentation"
								: {
							Element:span
								"name"
								:
							Element:span
								"view1"
								,
							Element:span
								"segment"
								:
							Element:span
								"Android"
								} },
							Element:span
								//then report new view
								{
							Element:span
								"key"
								:
							Element:span
								"[CLY]_view"
								,
							Element:span
								"count"
								:
							Element:span
								1
								,
							Element:span
								"segmentation"
								: {
							Element:span
								"name"
								:
							Element:span
								"view2"
								,
							Element:span
								"segment"
								:
							Element:span
								"Android"
								,
							Element:span
								"visit"
								:
							Element:span
								1
								} } ]
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:code
							Element:span
							Element:span
								events
							Element:span
								=
								[
							Element:span
								//report last view duration on exit
								{
							Element:span
								"key"
								:
							Element:span
								"[CLY]_view"
								,
							Element:span
								"count"
								:
							Element:span
								1
								,
							Element:span
								"dur"
								:
							Element:span
								30
								,
							Element:span
								"segmentation"
								: {
							Element:span
								"name"
								:
							Element:span
								"view2"
								,
							Element:span
								"segment"
								:
							Element:span
								"Android"
								} } ]
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											View actions
										Element:a
									Node:
									(type) c
									(layer)3
										Element:p
											Additionally it is possible to report actions taken on views to display on heat maps. For that you need to create
										Element:strong
											[CLY]_action
											event with segment properties as:
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
											type - action type, as click, touch, longpress,etc
										Element:li
											x - x coordinate of action
										Element:li
											y - y coordinate of action
										Element:li
											width - width of the screen
										Element:li
											height - height of the screen
									Node:
									(type) c
									(layer)3
										Element:p
											As example:
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:a
											Click action
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
										Element:span
										Element:span
											events
										Element:span
											=
											[ {
										Element:span
											"key"
											:
										Element:span
											"[CLY]_action"
											,
										Element:span
											"count"
											:
										Element:span
											1
											,
										Element:span
											"segmentation"
											: {
										Element:span
											"type"
											:
										Element:span
											"click"
											,
										Element:span
											"x"
											:
										Element:span
											120
											,
										Element:span
											"y"
											:
										Element:span
											200
											,
										Element:span
											"width"
											:
										Element:span
											1920
											,
										Element:span
											"height"
											:
										Element:span
											1200
											} } ]
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Star Rating
							Element:a
						Node:
						(type) c
						(layer)2
							Element:p
								SDK can provide a dialog for user to rate the app. To store this rating on server you need to submit custom event with key "[CLY]_star_rating" with these segments:
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
								platform - platform on which application runs
							Element:li
								app_version - application's version number
							Element:li
								rating - user's 1-to-5 rating
						Node:
						(type) c
						(layer)2
							Element:p
								Star rating plugin should be enabled on server for this data to be properly recorded
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Attribution
							Element:a
						Node:
						(type) c
						(layer)2
							Element:p
								There is a way you can attribute a click from campaign to an install through API. Usually it is used to import attribution from third party sites as a postback to Count.ly server. You at least need to provide campaign ID (the last part of your campaign url).
						Node:
						(type) c
						(layer)2
							Element:p
								If possible, provide also Countly generated user ID (which is usually passed to campaigns url too),mostly for the situations where you can pass data to app install like Google Play INSTALL_REFERRER.
						Node:
						(type) c
						(layer)2
							Element:p
								You can provide any number of other conversion segments and their values, they all need to be prefixed by
							Element:strong
								campaign_
						Node:
						(type) c
						(layer)2
							Element:p
								To sum it up:
						Node:
						(type) c
						(layer)2
							Element:p
							Element:strong
								campaign_id
						Node:
						(type) c
						(layer)2
							Element:p
								ID of the campaign you created in Countly
						Node:
						(type) c
						(layer)2
							Element:p
							Element:strong
								campaign_user
						Node:
						(type) c
						(layer)2
							Element:p
								Countly generated user ID based on digital fingerprint of the user, that you can pass with the link to install if platform supports it
						Node:
						(type) c
						(layer)2
							Element:p
							Element:strong
								campaign_{param}
						Node:
						(type) c
						(layer)2
							Element:p
								Any other parameters/segments that you want to pa with this conversion
						Node:
						(type) c
						(layer)2
							Element:a
						Node:
						(type) c
						(layer)2
							Element:a
							Element:i
								Suggest Edits
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								/i/bulk
						Node:
						(type) c
						(layer)2
							Element:p
								Bulk session, metric, event data writing
						Node:
						(type) c
						(layer)2
							Element:span
								post
								https://
						Node:
						(type) c
						(layer)2
							Element:span
							Element:span
								try.count.ly
							Element:span
								/i/bulk?app_key=
							Element:span
								app_key
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:a
								cURL
							Element:li
							Element:a
								Node
							Element:li
							Element:a
								Ruby
							Element:li
							Element:a
								JavaScript
							Element:li
							Element:a
								Python
						Node:
						(type) c
						(layer)2
							Element:i
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
							Element:span
								curl
							Element:span
								--request
								POST \
							Element:span
								--url
							Element:span
								'https://try.count.ly/i/bulk?app_key=
							Element:span
								app_key
								'
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
							Element:span
								var request = require("request");
							Element:span
								var
								options
							Element:span
								=
								{ method:
							Element:span
								'POST'
								, url:
							Element:span
								'https://try.count.ly/i/bulk'
								, qs: { app_key:
							Element:span
								'
								} }; request(options,
							Element:span
								app_key
								'
							Element:span
								function
								(
							Element:span
								error
								,
							Element:span
								response
								,
							Element:span
								body
								) {
							Element:span
								if
								(
							Element:span
								error
								)
							Element:span
								throw new
								Error(
							Element:span
								error
								); console.log(
							Element:span
								body
								); });
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
							Element:span
								require
							Element:span
								'uri'
							Element:span
								require
							Element:span
								'net/http'
								url = URI(
							Element:span
								"https://try.count.ly/i/bulk?app_key=
								) http
							Element:span
								app_key
								"
							Element:span
								=
							Element:span
								Net::HTTP
								.new(url.host, url.port) http.use_ssl = true http.verify_mode = OpenSSL::SSL::VERIFY_NONE request
							Element:span
								=
							Element:span
								Net::HTTP
								::Post.new(url) response = http.request(request) puts response.read_body
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
							Element:span
								var
								settings
							Element:span
								=
								{
							Element:span
								"async"
								: true,
							Element:span
								"crossDomain"
								: true,
							Element:span
								"url": "https://try.count.ly/i/bulk?app_key=
								,
							Element:span
								app_key
								"
							Element:span
								"method": "POST"
								,
							Element:span
								"headers"
								: {},
							Element:span
								"processData"
								: false } $.ajax(settings).done(
							Element:span
								function
								(
							Element:span
								response
								) { console.log(
							Element:span
								response
								); });
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
							Element:span
								import requests
								url =
							Element:span
								"https://try.count.ly/i/bulk"
								response = requests.request(
							Element:span
								"POST"
								, url)
							Element:span
								print
								(response.text)
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:a
							Element:span
							Element:i
							Element:em
								{{ results.statusCode[0] }}
								{{ results.statusCode[1] }}
							Element:a
								Metadata
							Element:a
							Element:span
								to examples
						Node:
						(type) c
						(layer)2
							Element:pre
						Node:
						(type) c
						(layer)2
							Element:label
								Method
								{{ results.method }}
						Node:
						(type) c
						(layer)2
							Element:label
								URL
								{{ results.url }}
						Node:
						(type) c
						(layer)2
							Element:label
								Request Headers
						Node:
						(type) c
						(layer)2
							Element:pre
								{{ results.requestHeaders }}
						Node:
						(type) c
						(layer)2
							Element:label
								Request Data
						Node:
						(type) c
						(layer)2
							Element:pre
								{{ results.data }}
						Node:
						(type) c
						(layer)2
							Element:label
								Status
						Node:
						(type) c
						(layer)2
							Element:span
						Node:
						(type) c
						(layer)2
							Element:label
								Response Headers
						Node:
						(type) c
						(layer)2
							Element:pre
								{{ results.responseHeaders }}
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:a
							Element:span
								Success
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								{
							Element:span
								"result"
								:
							Element:span
								"Success"
								}
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Path Params
									Node:
									(type) c
									(layer)3
										Element:strong
											app_key
											stringrequired
									Node:
									(type) c
									(layer)3
										Element:p
											(optional) global app_key, you can also provide separate app_key for each request in it's object
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Form Data
									Node:
									(type) c
									(layer)3
										Element:strong
											requests
											string
									Node:
									(type) c
									(layer)3
										Element:p
											JSON Array as string with request objects that you would usually pass to /i api path
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:i
											Bulk method limitations
									Node:
									(type) c
									(layer)3
										Element:p
											Countly v16.02 had issues with parallelization. Basically there is no guarantee that bulk requests will be executed in the order you provided them, they also can be executed simultaneously.
									Node:
									(type) c
									(layer)3
										Element:p
											If order of execution does not matter (as events, crashes, user info), you can use bulk API. But if order of execution matters, like in sessions, then results may be inconsistent with what you would receive if you execute all requests separately.
									Node:
									(type) c
									(layer)3
										Element:p
										Element:strong
											This has been since fixed in Countly v16.06
									Node:
									(type) c
									(layer)3
										Element:p
											Basically instead of sending separate requests to /i with session data, metrics and events, you can combine them in one single HTTP request (for example when sending older data with timestamp, while user did not have Internet connection)
									Node:
									(type) c
									(layer)3
										Element:p
											For that you would need to convert normal /i request parameters into JSON object, so for example, sending bulk data which combine 4 normal requests:
									Node:
									(type) c
									(layer)3
										Element:p
											1) to start session with metrics
									Node:
									(type) c
									(layer)3
										Element:p
											2) to update session duration
									Node:
									(type) c
									(layer)3
										Element:p
											3) to send an event
									Node:
									(type) c
									(layer)3
										Element:p
											4) to end session
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:a
											JSON
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
										Element:span
											[ {
										Element:span
											"device_id"
											:
										Element:span
											"1234567890"
											,
										Element:span
											"app_key"
											:
										Element:span
											"9a4d196c01d3ca82876c0398ab774e5e"
											,
										Element:span
											"begin_session"
											:
										Element:span
											1
											,
										Element:span
											"metrics"
											: {
										Element:span
											"_os"
											:
										Element:span
											"IOS"
											,
										Element:span
											"_os_version"
											:
										Element:span
											"7.1"
											,
										Element:span
											"_resolution"
											:
										Element:span
											"2048x1536"
											,
										Element:span
											"_density"
											:
										Element:span
											"200dpi"
											,
										Element:span
											"_device"
											:
										Element:span
											"iPod"
											,
										Element:span
											"_carrier"
											:
										Element:span
											"Telecom"
											,
										Element:span
											"_app_version"
											:
										Element:span
											"1.2"
											} }, {
										Element:span
											"device_id"
											:
										Element:span
											"1234567890"
											,
										Element:span
											"app_key"
											:
										Element:span
											"9a4d196c01d3ca82876c0398ab774e5e"
											,
										Element:span
											"session_duration"
											:
										Element:span
											30
											}, {
										Element:span
											"device_id"
											:
										Element:span
											"1234567890"
											,
										Element:span
											"app_key"
											:
										Element:span
											"9a4d196c01d3ca82876c0398ab774e5e"
											,
										Element:span
											"events"
											: [ {
										Element:span
											"key"
											:
										Element:span
											"test2"
											,
										Element:span
											"count"
											:
										Element:span
											2
											,
										Element:span
											"sum"
											:
										Element:span
											1.50
											,
										Element:span
											"segmentation"
											: {
										Element:span
											"country"
											:
										Element:span
											"Latvia"
											,
										Element:span
											"market"
											:
										Element:span
											"googleplay"
											} } ] }, {
										Element:span
											"device_id"
											:
										Element:span
											"1234567890"
											,
										Element:span
											"app_key"
											:
										Element:span
											"9a4d196c01d3ca82876c0398ab774e5e"
											,
										Element:span
											"end_session"
											:
										Element:span
											1
											} ];
									Node:
									(type) c
									(layer)3
										Element:p
											Also, it's possible to combine the 'start_session', 'metrics', 'session_duration', 'events' and 'end_session' together into one JSON block, with the appropriate device_id and api_key. You only need to make sure that the order is correct.
									Node:
									(type) c
									(layer)3
										Element:p
											Here's an example:
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:a
											JavaScript
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
										Element:span
										Element:span
											var
										Element:span
											params
										Element:span
											=
											[ {
										Element:span
											"device_id"
											:
										Element:span
											DEVICE_ID
											,
										Element:span
											"app_key"
											:
										Element:span
											APP_KEY
											,
										Element:span
											"begin_session"
											:
										Element:span
											1
											,
										Element:span
											"metrics"
											:{
										Element:span
											"os"
											:
										Element:span
											"Android"
											}
										Element:span
											}, {
										Element:span
											"device_id"
											:
										Element:span
											DEVICE_ID
											,
										Element:span
											"app_key"
											:
										Element:span
											APP_KEY
											,
										Element:span
											"session_duration"
											:
										Element:span
											30
											}, {
										Element:span
											"device_id"
											:
										Element:span
											DEVICEID
										Element:span
											+
										Element:span
											"A"
											,
										Element:span
											"app_key"
											:
										Element:span
											APP_KEY
											,
										Element:span
											"end_session"
											:
										Element:span
											1
											} ];
									Node:
									(type) c
									(layer)3
										Element:a
									Node:
									(type) c
									(layer)3
										Element:a
										Element:i
											Suggest Edits
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								/o?method=live
						Node:
						(type) c
						(layer)2
							Element:p
								Get online user data (available in live plugin)
						Node:
						(type) c
						(layer)2
							Element:span
								get
								https://
						Node:
						(type) c
						(layer)2
							Element:span
							Element:span
								try.count.ly
							Element:span
								/o?method=live&api_key=
							Element:span
								api_key
							Element:span
								&app_id=
							Element:span
								app_id
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:a
								cURL
							Element:li
							Element:a
								Node
							Element:li
							Element:a
								Ruby
							Element:li
							Element:a
								JavaScript
							Element:li
							Element:a
								Python
						Node:
						(type) c
						(layer)2
							Element:i
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
							Element:span
								curl
							Element:span
								--request
								GET \
							Element:span
								--url
							Element:span
								'https://try.count.ly/o?app_id=
							Element:span
								app_id
								&api_key=
							Element:span
								api_key
								&method=live'
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
							Element:span
								var request = require("request");
							Element:span
								var
								options
							Element:span
								=
								{ method:
							Element:span
								'GET'
								, url:
							Element:span
								'https://try.count.ly/o'
								, qs: { app_id:
							Element:span
								'
								, api_key:
							Element:span
								app_id
								'
							Element:span
								'
								, method:
							Element:span
								api_key
								'
							Element:span
								'live'
								} }; request(options,
							Element:span
								function
								(
							Element:span
								error
								,
							Element:span
								response
								,
							Element:span
								body
								) {
							Element:span
								if
								(
							Element:span
								error
								)
							Element:span
								throw new
								Error(
							Element:span
								error
								); console.log(
							Element:span
								body
								); });
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
							Element:span
								require
							Element:span
								'uri'
							Element:span
								require
							Element:span
								'net/http'
								url = URI(
							Element:span
								"https://try.count.ly/o?app_id=
								) http
							Element:span
								app_id
								&api_key=
							Element:span
								api_key
								&method=live"
							Element:span
								=
							Element:span
								Net::HTTP
								.new(url.host, url.port) http.use_ssl = true http.verify_mode = OpenSSL::SSL::VERIFY_NONE request
							Element:span
								=
							Element:span
								Net::HTTP
								::Get.new(url) response = http.request(request) puts response.read_body
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
							Element:span
								var
								settings
							Element:span
								=
								{
							Element:span
								"async"
								: true,
							Element:span
								"crossDomain"
								: true,
							Element:span
								"url": "https://try.count.ly/o?app_id=
								,
							Element:span
								app_id
								&api_key=
							Element:span
								api_key
								&method=live"
							Element:span
								"method": "GET"
								,
							Element:span
								"headers"
								: {},
							Element:span
								"processData"
								: false } $.ajax(settings).done(
							Element:span
								function
								(
							Element:span
								response
								) { console.log(
							Element:span
								response
								); });
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
							Element:span
								import requests
								url =
							Element:span
								"https://try.count.ly/o"
								response = requests.request(
							Element:span
								"GET"
								, url)
							Element:span
								print
								(response.text)
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:a
							Element:span
							Element:i
							Element:em
								{{ results.statusCode[0] }}
								{{ results.statusCode[1] }}
							Element:a
								Metadata
							Element:a
							Element:span
								to examples
						Node:
						(type) c
						(layer)2
							Element:pre
						Node:
						(type) c
						(layer)2
							Element:label
								Method
								{{ results.method }}
						Node:
						(type) c
						(layer)2
							Element:label
								URL
								{{ results.url }}
						Node:
						(type) c
						(layer)2
							Element:label
								Request Headers
						Node:
						(type) c
						(layer)2
							Element:pre
								{{ results.requestHeaders }}
						Node:
						(type) c
						(layer)2
							Element:label
								Request Data
						Node:
						(type) c
						(layer)2
							Element:pre
								{{ results.data }}
						Node:
						(type) c
						(layer)2
							Element:label
								Status
						Node:
						(type) c
						(layer)2
							Element:span
						Node:
						(type) c
						(layer)2
							Element:label
								Response Headers
						Node:
						(type) c
						(layer)2
							Element:pre
								{{ results.responseHeaders }}
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:a
							Element:span
								Success
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								{
							Element:span
								"o"
								:
							Element:span
								13
								,
							Element:span
								"n"
								:
							Element:span
								12
								,
							Element:span
								"mo"
								:
							Element:span
								13
								,
							Element:span
								"mn"
								:
							Element:span
								12
								}
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Path Params
									Node:
									(type) c
									(layer)3
										Element:strong
											api_key
											stringrequired
									Node:
									(type) c
									(layer)3
										Element:p
											API_KEY of user, with permission to access this app
									Node:
									(type) c
									(layer)3
										Element:strong
											app_id
											stringrequired
									Node:
									(type) c
									(layer)3
										Element:p
											ID of the app for which to query
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Query Params
									Node:
									(type) c
									(layer)3
										Element:strong
											callback
											string
									Node:
									(type) c
									(layer)3
										Element:p
											(optional) name of callback function for JSONP output
									Node:
									(type) c
									(layer)3
										Element:p
											Retrieves information about users currently online and new users online, and maximal amounts of users that was online.
									Node:
									(type) c
									(layer)3
										Element:p
											o - online users
									Node:
									(type) c
									(layer)3
										Element:p
											n - new users online
									Node:
									(type) c
									(layer)3
										Element:p
											mo - maximal users online
									Node:
									(type) c
									(layer)3
										Element:p
											mn - maximal new users online
									Node:
									(type) c
									(layer)3
										Element:a
									Node:
									(type) c
									(layer)3
										Element:a
										Element:i
											Suggest Edits
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								/o?method=live_graph
						Node:
						(type) c
						(layer)2
							Element:p
								Get online user data fro graph (available in live plugin)
						Node:
						(type) c
						(layer)2
							Element:span
								get
								https://
						Node:
						(type) c
						(layer)2
							Element:span
							Element:span
								try.count.ly
							Element:span
								/o?method=live_graph&api_key=
							Element:span
								api_key
							Element:span
								&app_id=
							Element:span
								app_id
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:a
								cURL
							Element:li
							Element:a
								Node
							Element:li
							Element:a
								Ruby
							Element:li
							Element:a
								JavaScript
							Element:li
							Element:a
								Python
						Node:
						(type) c
						(layer)2
							Element:i
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
							Element:span
								curl
							Element:span
								--request
								GET \
							Element:span
								--url
							Element:span
								'https://try.count.ly/o?app_id=
							Element:span
								app_id
								&api_key=
							Element:span
								api_key
								&method=live_graph'
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
							Element:span
								var request = require("request");
							Element:span
								var
								options
							Element:span
								=
								{ method:
							Element:span
								'GET'
								, url:
							Element:span
								'https://try.count.ly/o'
								, qs: { app_id:
							Element:span
								'
								, api_key:
							Element:span
								app_id
								'
							Element:span
								'
								, method:
							Element:span
								api_key
								'
							Element:span
								'live_graph'
								} }; request(options,
							Element:span
								function
								(
							Element:span
								error
								,
							Element:span
								response
								,
							Element:span
								body
								) {
							Element:span
								if
								(
							Element:span
								error
								)
							Element:span
								throw new
								Error(
							Element:span
								error
								); console.log(
							Element:span
								body
								); });
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
							Element:span
								require
							Element:span
								'uri'
							Element:span
								require
							Element:span
								'net/http'
								url = URI(
							Element:span
								"https://try.count.ly/o?app_id=
								) http
							Element:span
								app_id
								&api_key=
							Element:span
								api_key
								&method=live_graph"
							Element:span
								=
							Element:span
								Net::HTTP
								.new(url.host, url.port) http.use_ssl = true http.verify_mode = OpenSSL::SSL::VERIFY_NONE request
							Element:span
								=
							Element:span
								Net::HTTP
								::Get.new(url) response = http.request(request) puts response.read_body
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
							Element:span
								var
								settings
							Element:span
								=
								{
							Element:span
								"async"
								: true,
							Element:span
								"crossDomain"
								: true,
							Element:span
								"url": "https://try.count.ly/o?app_id=
								,
							Element:span
								app_id
								&api_key=
							Element:span
								api_key
								&method=live_graph"
							Element:span
								"method": "GET"
								,
							Element:span
								"headers"
								: {},
							Element:span
								"processData"
								: false } $.ajax(settings).done(
							Element:span
								function
								(
							Element:span
								response
								) { console.log(
							Element:span
								response
								); });
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
							Element:span
								import requests
								url =
							Element:span
								"https://try.count.ly/o"
								response = requests.request(
							Element:span
								"GET"
								, url)
							Element:span
								print
								(response.text)
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:a
							Element:span
							Element:i
							Element:em
								{{ results.statusCode[0] }}
								{{ results.statusCode[1] }}
							Element:a
								Metadata
							Element:a
							Element:span
								to examples
						Node:
						(type) c
						(layer)2
							Element:pre
						Node:
						(type) c
						(layer)2
							Element:label
								Method
								{{ results.method }}
						Node:
						(type) c
						(layer)2
							Element:label
								URL
								{{ results.url }}
						Node:
						(type) c
						(layer)2
							Element:label
								Request Headers
						Node:
						(type) c
						(layer)2
							Element:pre
								{{ results.requestHeaders }}
						Node:
						(type) c
						(layer)2
							Element:label
								Request Data
						Node:
						(type) c
						(layer)2
							Element:pre
								{{ results.data }}
						Node:
						(type) c
						(layer)2
							Element:label
								Status
						Node:
						(type) c
						(layer)2
							Element:span
						Node:
						(type) c
						(layer)2
							Element:label
								Response Headers
						Node:
						(type) c
						(layer)2
							Element:pre
								{{ results.responseHeaders }}
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:a
							Element:span
								Success
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								[{
							Element:span
								"o"
								:
							Element:span
								0
								,
							Element:span
								"n"
								:
							Element:span
								0
								},{
							Element:span
								"o"
								:
							Element:span
								0
								,
							Element:span
								"n"
								:
							Element:span
								0
								},{
							Element:span
								"o"
								:
							Element:span
								0
								,
							Element:span
								"n"
								:
							Element:span
								0
								},{
							Element:span
								"o"
								:
							Element:span
								0
								,
							Element:span
								"n"
								:
							Element:span
								0
								},{
							Element:span
								"o"
								:
							Element:span
								0
								,
							Element:span
								"n"
								:
							Element:span
								0
								},{
							Element:span
								"o"
								:
							Element:span
								0
								,
							Element:span
								"n"
								:
							Element:span
								0
								},{
							Element:span
								"o"
								:
							Element:span
								0
								,
							Element:span
								"n"
								:
							Element:span
								0
								},{
							Element:span
								"o"
								:
							Element:span
								0
								,
							Element:span
								"n"
								:
							Element:span
								0
								},{
							Element:span
								"o"
								:
							Element:span
								0
								,
							Element:span
								"n"
								:
							Element:span
								0
								},{
							Element:span
								"o"
								:
							Element:span
								0
								,
							Element:span
								"n"
								:
							Element:span
								0
								},{
							Element:span
								"o"
								:
							Element:span
								0
								,
							Element:span
								"n"
								:
							Element:span
								0
								},{
							Element:span
								"o"
								:
							Element:span
								0
								,
							Element:span
								"n"
								:
							Element:span
								0
								},{
							Element:span
								"o"
								:
							Element:span
								0
								,
							Element:span
								"n"
								:
							Element:span
								0
								},{
							Element:span
								"o"
								:
							Element:span
								0
								,
							Element:span
								"n"
								:
							Element:span
								0
								},{
							Element:span
								"o"
								:
							Element:span
								0
								,
							Element:span
								"n"
								:
							Element:span
								0
								},{
							Element:span
								"o"
								:
							Element:span
								0
								,
							Element:span
								"n"
								:
							Element:span
								0
								},{
							Element:span
								"o"
								:
							Element:span
								0
								,
							Element:span
								"n"
								:
							Element:span
								0
								},{
							Element:span
								"o"
								:
							Element:span
								0
								,
							Element:span
								"n"
								:
							Element:span
								0
								},{
							Element:span
								"o"
								:
							Element:span
								0
								,
							Element:span
								"n"
								:
							Element:span
								0
								},{
							Element:span
								"o"
								:
							Element:span
								0
								,
							Element:span
								"n"
								:
							Element:span
								0
								},{
							Element:span
								"o"
								:
							Element:span
								0
								,
							Element:span
								"n"
								:
							Element:span
								0
								},{
							Element:span
								"o"
								:
							Element:span
								0
								,
							Element:span
								"n"
								:
							Element:span
								0
								},{
							Element:span
								"o"
								:
							Element:span
								0
								,
							Element:span
								"n"
								:
							Element:span
								0
								},{
							Element:span
								"o"
								:
							Element:span
								0
								,
							Element:span
								"n"
								:
							Element:span
								0
								},{
							Element:span
								"o"
								:
							Element:span
								0
								,
							Element:span
								"n"
								:
							Element:span
								0
								},{
							Element:span
								"o"
								:
							Element:span
								0
								,
							Element:span
								"n"
								:
							Element:span
								0
								},{
							Element:span
								"o"
								:
							Element:span
								0
								,
							Element:span
								"n"
								:
							Element:span
								0
								},{
							Element:span
								"o"
								:
							Element:span
								0
								,
							Element:span
								"n"
								:
							Element:span
								0
								},{
							Element:span
								"o"
								:
							Element:span
								0
								,
							Element:span
								"n"
								:
							Element:span
								0
								},{
							Element:span
								"o"
								:
							Element:span
								0
								,
							Element:span
								"n"
								:
							Element:span
								0
								},{
							Element:span
								"o"
								:
							Element:span
								0
								,
							Element:span
								"n"
								:
							Element:span
								0
								},{
							Element:span
								"o"
								:
							Element:span
								0
								,
							Element:span
								"n"
								:
							Element:span
								0
								},{
							Element:span
								"o"
								:
							Element:span
								0
								,
							Element:span
								"n"
								:
							Element:span
								0
								},{
							Element:span
								"o"
								:
							Element:span
								0
								,
							Element:span
								"n"
								:
							Element:span
								0
								},{
							Element:span
								"o"
								:
							Element:span
								0
								,
							Element:span
								"n"
								:
							Element:span
								0
								},{
							Element:span
								"o"
								:
							Element:span
								0
								,
							Element:span
								"n"
								:
							Element:span
								0
								},{
							Element:span
								"o"
								:
							Element:span
								0
								,
							Element:span
								"n"
								:
							Element:span
								0
								},{
							Element:span
								"o"
								:
							Element:span
								0
								,
							Element:span
								"n"
								:
							Element:span
								0
								},{
							Element:span
								"o"
								:
							Element:span
								0
								,
							Element:span
								"n"
								:
							Element:span
								0
								},{
							Element:span
								"o"
								:
							Element:span
								0
								,
							Element:span
								"n"
								:
							Element:span
								0
								},{
							Element:span
								"o"
								:
							Element:span
								0
								,
							Element:span
								"n"
								:
							Element:span
								0
								},{
							Element:span
								"o"
								:
							Element:span
								0
								,
							Element:span
								"n"
								:
							Element:span
								0
								},{
							Element:span
								"o"
								:
							Element:span
								0
								,
							Element:span
								"n"
								:
							Element:span
								0
								},{
							Element:span
								"o"
								:
							Element:span
								0
								,
							Element:span
								"n"
								:
							Element:span
								0
								},{
							Element:span
								"o"
								:
							Element:span
								0
								,
							Element:span
								"n"
								:
							Element:span
								0
								},{
							Element:span
								"o"
								:
							Element:span
								0
								,
							Element:span
								"n"
								:
							Element:span
								0
								},{
							Element:span
								"o"
								:
							Element:span
								0
								,
							Element:span
								"n"
								:
							Element:span
								0
								},{
							Element:span
								"o"
								:
							Element:span
								0
								,
							Element:span
								"n"
								:
							Element:span
								0
								},{
							Element:span
								"o"
								:
							Element:span
								0
								,
							Element:span
								"n"
								:
							Element:span
								0
								},{
							Element:span
								"o"
								:
							Element:span
								0
								,
							Element:span
								"n"
								:
							Element:span
								0
								},{
							Element:span
								"o"
								:
							Element:span
								0
								,
							Element:span
								"n"
								:
							Element:span
								0
								},{
							Element:span
								"o"
								:
							Element:span
								0
								,
							Element:span
								"n"
								:
							Element:span
								0
								},{
							Element:span
								"o"
								:
							Element:span
								0
								,
							Element:span
								"n"
								:
							Element:span
								0
								},{
							Element:span
								"o"
								:
							Element:span
								0
								,
							Element:span
								"n"
								:
							Element:span
								0
								},{
							Element:span
								"o"
								:
							Element:span
								0
								,
							Element:span
								"n"
								:
							Element:span
								0
								},{
							Element:span
								"o"
								:
							Element:span
								2
								,
							Element:span
								"n"
								:
							Element:span
								1
								},{
							Element:span
								"o"
								:
							Element:span
								3
								,
							Element:span
								"n"
								:
							Element:span
								3
								},{
							Element:span
								"o"
								:
							Element:span
								11
								,
							Element:span
								"n"
								:
							Element:span
								9
								},{
							Element:span
								"o"
								:
							Element:span
								10
								,
							Element:span
								"n"
								:
							Element:span
								10
								},{
							Element:span
								"o"
								:
							Element:span
								0
								,
							Element:span
								"n"
								:
							Element:span
								0
								}]
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Path Params
									Node:
									(type) c
									(layer)3
										Element:strong
											api_key
											stringrequired
									Node:
									(type) c
									(layer)3
										Element:p
											API_KEY of user, with permission to access this app
									Node:
									(type) c
									(layer)3
										Element:strong
											app_id
											stringrequired
									Node:
									(type) c
									(layer)3
										Element:p
											ID of the app for which to query
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Query Params
									Node:
									(type) c
									(layer)3
										Element:strong
											callback
											string
									Node:
									(type) c
									(layer)3
										Element:p
											(optional) name of callback function for JSONP output
									Node:
									(type) c
									(layer)3
										Element:p
											Retrieve array of users online and new users online for the last 10 minutes with a span of 10 seconds
									Node:
									(type) c
									(layer)3
										Element:figure
										Element:a
										Element:img
									Node:
									(type) c
									(layer)3
										Element:figcaption
										Element:p
											Online user graph example
									Node:
									(type) c
									(layer)3
										Element:a
									Node:
									(type) c
									(layer)3
										Element:a
										Element:i
											Suggest Edits
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								/o?method=retention
						Node:
						(type) c
						(layer)2
							Element:p
								Get retention data (available in retention plugin)
						Node:
						(type) c
						(layer)2
							Element:span
								get
								https://
						Node:
						(type) c
						(layer)2
							Element:span
							Element:span
								try.count.ly
							Element:span
								/o?method=retention&api_key=
							Element:span
								api_key
							Element:span
								&app_id=
							Element:span
								app_id
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:a
								cURL
							Element:li
							Element:a
								Node
							Element:li
							Element:a
								Ruby
							Element:li
							Element:a
								JavaScript
							Element:li
							Element:a
								Python
						Node:
						(type) c
						(layer)2
							Element:i
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
							Element:span
								curl
							Element:span
								--request
								GET \
							Element:span
								--url
							Element:span
								'https://try.count.ly/o?app_id=
							Element:span
								app_id
								&api_key=
							Element:span
								api_key
								&method=retention'
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
							Element:span
								var request = require("request");
							Element:span
								var
								options
							Element:span
								=
								{ method:
							Element:span
								'GET'
								, url:
							Element:span
								'https://try.count.ly/o'
								, qs: { app_id:
							Element:span
								'
								, api_key:
							Element:span
								app_id
								'
							Element:span
								'
								, method:
							Element:span
								api_key
								'
							Element:span
								'retention'
								} }; request(options,
							Element:span
								function
								(
							Element:span
								error
								,
							Element:span
								response
								,
							Element:span
								body
								) {
							Element:span
								if
								(
							Element:span
								error
								)
							Element:span
								throw new
								Error(
							Element:span
								error
								); console.log(
							Element:span
								body
								); });
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
							Element:span
								require
							Element:span
								'uri'
							Element:span
								require
							Element:span
								'net/http'
								url = URI(
							Element:span
								"https://try.count.ly/o?app_id=
								) http
							Element:span
								app_id
								&api_key=
							Element:span
								api_key
								&method=retention"
							Element:span
								=
							Element:span
								Net::HTTP
								.new(url.host, url.port) http.use_ssl = true http.verify_mode = OpenSSL::SSL::VERIFY_NONE request
							Element:span
								=
							Element:span
								Net::HTTP
								::Get.new(url) response = http.request(request) puts response.read_body
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
							Element:span
								var
								settings
							Element:span
								=
								{
							Element:span
								"async"
								: true,
							Element:span
								"crossDomain"
								: true,
							Element:span
								"url": "https://try.count.ly/o?app_id=
								,
							Element:span
								app_id
								&api_key=
							Element:span
								api_key
								&method=retention"
							Element:span
								"method": "GET"
								,
							Element:span
								"headers"
								: {},
							Element:span
								"processData"
								: false } $.ajax(settings).done(
							Element:span
								function
								(
							Element:span
								response
								) { console.log(
							Element:span
								response
								); });
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
							Element:span
								import requests
								url =
							Element:span
								"https://try.count.ly/o"
								response = requests.request(
							Element:span
								"GET"
								, url)
							Element:span
								print
								(response.text)
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:a
							Element:span
							Element:i
							Element:em
								{{ results.statusCode[0] }}
								{{ results.statusCode[1] }}
							Element:a
								Metadata
							Element:a
							Element:span
								to examples
						Node:
						(type) c
						(layer)2
							Element:pre
						Node:
						(type) c
						(layer)2
							Element:label
								Method
								{{ results.method }}
						Node:
						(type) c
						(layer)2
							Element:label
								URL
								{{ results.url }}
						Node:
						(type) c
						(layer)2
							Element:label
								Request Headers
						Node:
						(type) c
						(layer)2
							Element:pre
								{{ results.requestHeaders }}
						Node:
						(type) c
						(layer)2
							Element:label
								Request Data
						Node:
						(type) c
						(layer)2
							Element:pre
								{{ results.data }}
						Node:
						(type) c
						(layer)2
							Element:label
								Status
						Node:
						(type) c
						(layer)2
							Element:span
						Node:
						(type) c
						(layer)2
							Element:label
								Response Headers
						Node:
						(type) c
						(layer)2
							Element:pre
								{{ results.responseHeaders }}
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:a
							Element:span
								Success
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								[ {
							Element:span
								"1"
								:
							Element:span
								2
								,
							Element:span
								"2"
								:
							Element:span
								2
								,
							Element:span
								"3"
								:
							Element:span
								1
								,
							Element:span
								"_id"
								:
							Element:span
								"20150623"
								,
							Element:span
								"tu"
								:
							Element:span
								7
								}, {
							Element:span
								"1"
								:
							Element:span
								1
								,
							Element:span
								"2"
								:
							Element:span
								1
								,
							Element:span
								"_id"
								:
							Element:span
								"20150624"
								,
							Element:span
								"tu"
								:
							Element:span
								13
								}, {
							Element:span
								"1"
								:
							Element:span
								2
								,
							Element:span
								"2"
								:
							Element:span
								2
								,
							Element:span
								"3"
								:
							Element:span
								1
								,
							Element:span
								"_id"
								:
							Element:span
								"20150625"
								,
							Element:span
								"tu"
								:
							Element:span
								26
								}, {
							Element:span
								"1"
								:
							Element:span
								2
								,
							Element:span
								"_id"
								:
							Element:span
								"20150626"
								,
							Element:span
								"tu"
								:
							Element:span
								8
								} ]
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Path Params
									Node:
									(type) c
									(layer)3
										Element:strong
											api_key
											stringrequired
									Node:
									(type) c
									(layer)3
										Element:p
											API_KEY of user, with permission to access this app
									Node:
									(type) c
									(layer)3
										Element:strong
											app_id
											stringrequired
									Node:
									(type) c
									(layer)3
										Element:p
											ID of the app for which to query
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Query Params
									Node:
									(type) c
									(layer)3
										Element:strong
											callback
											string
									Node:
									(type) c
									(layer)3
										Element:p
											(optional) name of callback function for JSONP output
									Node:
									(type) c
									(layer)3
										Element:strong
											period
											string
									Node:
									(type) c
									(layer)3
										Element:p
											period as daily, weekly or monthly
									Node:
									(type) c
									(layer)3
										Element:p
											Retrieves user retention data.
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
											_id - represents the date of data in "yyyymmdd" format
										Element:li
											tu - total new users joined in that date
										Element:li
											1 - how many of joined users left on date +1 day
										Element:li
											2 - how many of joined users left on date +2 days
										Element:li
											etc
									Node:
									(type) c
									(layer)3
										Element:a
									Node:
									(type) c
									(layer)3
										Element:a
										Element:i
											Suggest Edits
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								/o?method=get_funnels
						Node:
						(type) c
						(layer)2
							Element:p
								Get list of funnels (available in funnel plugin)
						Node:
						(type) c
						(layer)2
							Element:span
								get
								https://
						Node:
						(type) c
						(layer)2
							Element:span
							Element:span
								try.count.ly
							Element:span
								/o?method=get_funnels&api_key=
							Element:span
								api_key
							Element:span
								&app_id=
							Element:span
								app_id
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:a
								cURL
							Element:li
							Element:a
								Node
							Element:li
							Element:a
								Ruby
							Element:li
							Element:a
								JavaScript
							Element:li
							Element:a
								Python
						Node:
						(type) c
						(layer)2
							Element:i
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
							Element:span
								curl
							Element:span
								--request
								GET \
							Element:span
								--url
							Element:span
								'https://try.count.ly/o?app_id=
							Element:span
								app_id
								&api_key=
							Element:span
								api_key
								&method=get_funnels'
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
							Element:span
								var request = require("request");
							Element:span
								var
								options
							Element:span
								=
								{ method:
							Element:span
								'GET'
								, url:
							Element:span
								'https://try.count.ly/o'
								, qs: { app_id:
							Element:span
								'
								, api_key:
							Element:span
								app_id
								'
							Element:span
								'
								, method:
							Element:span
								api_key
								'
							Element:span
								'get_funnels'
								} }; request(options,
							Element:span
								function
								(
							Element:span
								error
								,
							Element:span
								response
								,
							Element:span
								body
								) {
							Element:span
								if
								(
							Element:span
								error
								)
							Element:span
								throw new
								Error(
							Element:span
								error
								); console.log(
							Element:span
								body
								); });
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
							Element:span
								require
							Element:span
								'uri'
							Element:span
								require
							Element:span
								'net/http'
								url = URI(
							Element:span
								"https://try.count.ly/o?app_id=
								) http
							Element:span
								app_id
								&api_key=
							Element:span
								api_key
								&method=get_funnels"
							Element:span
								=
							Element:span
								Net::HTTP
								.new(url.host, url.port) http.use_ssl = true http.verify_mode = OpenSSL::SSL::VERIFY_NONE request
							Element:span
								=
							Element:span
								Net::HTTP
								::Get.new(url) response = http.request(request) puts response.read_body
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
							Element:span
								var
								settings
							Element:span
								=
								{
							Element:span
								"async"
								: true,
							Element:span
								"crossDomain"
								: true,
							Element:span
								"url": "https://try.count.ly/o?app_id=
								,
							Element:span
								app_id
								&api_key=
							Element:span
								api_key
								&method=get_funnels"
							Element:span
								"method": "GET"
								,
							Element:span
								"headers"
								: {},
							Element:span
								"processData"
								: false } $.ajax(settings).done(
							Element:span
								function
								(
							Element:span
								response
								) { console.log(
							Element:span
								response
								); });
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
							Element:span
								import requests
								url =
							Element:span
								"https://try.count.ly/o"
								response = requests.request(
							Element:span
								"GET"
								, url)
							Element:span
								print
								(response.text)
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:a
							Element:span
							Element:i
							Element:em
								{{ results.statusCode[0] }}
								{{ results.statusCode[1] }}
							Element:a
								Metadata
							Element:a
							Element:span
								to examples
						Node:
						(type) c
						(layer)2
							Element:pre
						Node:
						(type) c
						(layer)2
							Element:label
								Method
								{{ results.method }}
						Node:
						(type) c
						(layer)2
							Element:label
								URL
								{{ results.url }}
						Node:
						(type) c
						(layer)2
							Element:label
								Request Headers
						Node:
						(type) c
						(layer)2
							Element:pre
								{{ results.requestHeaders }}
						Node:
						(type) c
						(layer)2
							Element:label
								Request Data
						Node:
						(type) c
						(layer)2
							Element:pre
								{{ results.data }}
						Node:
						(type) c
						(layer)2
							Element:label
								Status
						Node:
						(type) c
						(layer)2
							Element:span
						Node:
						(type) c
						(layer)2
							Element:label
								Response Headers
						Node:
						(type) c
						(layer)2
							Element:pre
								{{ results.responseHeaders }}
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:a
							Element:span
								Success
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								[ {
							Element:span
								"_id"
								:
							Element:span
								"9d6670f04d68f32fa8da0157c3043d03"
								,
							Element:span
								"name"
								:
							Element:span
								"Test Funnel"
								,
							Element:span
								"steps"
								: [
							Element:span
								"test1"
								,
							Element:span
								"test2"
								] }, {
							Element:span
								"_id"
								:
							Element:span
								"9d6670f04d68f32fa8da0157c3043d04"
								,
							Element:span
								"name"
								:
							Element:span
								"Test Funnel 2"
								,
							Element:span
								"steps"
								: [
							Element:span
								"test"
								,
							Element:span
								"test1"
								] }, ]
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Path Params
									Node:
									(type) c
									(layer)3
										Element:strong
											api_key
											stringrequired
									Node:
									(type) c
									(layer)3
										Element:p
											API_KEY of user, with permission to access this app
									Node:
									(type) c
									(layer)3
										Element:strong
											app_id
											stringrequired
									Node:
									(type) c
									(layer)3
										Element:p
											ID of the app for which to query
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Query Params
									Node:
									(type) c
									(layer)3
										Element:strong
											callback
											string
									Node:
									(type) c
									(layer)3
										Element:p
											(optional) name of callback function for JSONP output
									Node:
									(type) c
									(layer)3
										Element:p
											Get list of funnels with funnel names, ids and steps of events needed for funnel
									Node:
									(type) c
									(layer)3
										Element:a
									Node:
									(type) c
									(layer)3
										Element:a
										Element:i
											Suggest Edits
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								/o?method=funnel
						Node:
						(type) c
						(layer)2
							Element:p
								Get user data of passing specific funnel (available in funnel plugin)
						Node:
						(type) c
						(layer)2
							Element:span
								get
								https://
						Node:
						(type) c
						(layer)2
							Element:span
							Element:span
								try.count.ly
							Element:span
								/o?method=funnel&api_key=
							Element:span
								api_key
							Element:span
								&app_id=
							Element:span
								app_id
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:a
								cURL
							Element:li
							Element:a
								Node
							Element:li
							Element:a
								Ruby
							Element:li
							Element:a
								JavaScript
							Element:li
							Element:a
								Python
						Node:
						(type) c
						(layer)2
							Element:i
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
							Element:span
								curl
							Element:span
								--request
								GET \
							Element:span
								--url
							Element:span
								'https://try.count.ly/o?app_id=
							Element:span
								app_id
								&api_key=
							Element:span
								api_key
								&method=funnel'
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
							Element:span
								var request = require("request");
							Element:span
								var
								options
							Element:span
								=
								{ method:
							Element:span
								'GET'
								, url:
							Element:span
								'https://try.count.ly/o'
								, qs: { app_id:
							Element:span
								'
								, api_key:
							Element:span
								app_id
								'
							Element:span
								'
								, method:
							Element:span
								api_key
								'
							Element:span
								'funnel'
								} }; request(options,
							Element:span
								function
								(
							Element:span
								error
								,
							Element:span
								response
								,
							Element:span
								body
								) {
							Element:span
								if
								(
							Element:span
								error
								)
							Element:span
								throw new
								Error(
							Element:span
								error
								); console.log(
							Element:span
								body
								); });
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
							Element:span
								require
							Element:span
								'uri'
							Element:span
								require
							Element:span
								'net/http'
								url = URI(
							Element:span
								"https://try.count.ly/o?app_id=
								) http
							Element:span
								app_id
								&api_key=
							Element:span
								api_key
								&method=funnel"
							Element:span
								=
							Element:span
								Net::HTTP
								.new(url.host, url.port) http.use_ssl = true http.verify_mode = OpenSSL::SSL::VERIFY_NONE request
							Element:span
								=
							Element:span
								Net::HTTP
								::Get.new(url) response = http.request(request) puts response.read_body
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
							Element:span
								var
								settings
							Element:span
								=
								{
							Element:span
								"async"
								: true,
							Element:span
								"crossDomain"
								: true,
							Element:span
								"url": "https://try.count.ly/o?app_id=
								,
							Element:span
								app_id
								&api_key=
							Element:span
								api_key
								&method=funnel"
							Element:span
								"method": "GET"
								,
							Element:span
								"headers"
								: {},
							Element:span
								"processData"
								: false } $.ajax(settings).done(
							Element:span
								function
								(
							Element:span
								response
								) { console.log(
							Element:span
								response
								); });
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
							Element:span
								import requests
								url =
							Element:span
								"https://try.count.ly/o"
								response = requests.request(
							Element:span
								"GET"
								, url)
							Element:span
								print
								(response.text)
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:a
							Element:span
							Element:i
							Element:em
								{{ results.statusCode[0] }}
								{{ results.statusCode[1] }}
							Element:a
								Metadata
							Element:a
							Element:span
								to examples
						Node:
						(type) c
						(layer)2
							Element:pre
						Node:
						(type) c
						(layer)2
							Element:label
								Method
								{{ results.method }}
						Node:
						(type) c
						(layer)2
							Element:label
								URL
								{{ results.url }}
						Node:
						(type) c
						(layer)2
							Element:label
								Request Headers
						Node:
						(type) c
						(layer)2
							Element:pre
								{{ results.requestHeaders }}
						Node:
						(type) c
						(layer)2
							Element:label
								Request Data
						Node:
						(type) c
						(layer)2
							Element:pre
								{{ results.data }}
						Node:
						(type) c
						(layer)2
							Element:label
								Status
						Node:
						(type) c
						(layer)2
							Element:span
						Node:
						(type) c
						(layer)2
							Element:label
								Response Headers
						Node:
						(type) c
						(layer)2
							Element:pre
								{{ results.responseHeaders }}
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:a
							Element:span
								Success
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								{
							Element:span
								"steps"
								: [ {
							Element:span
								"step"
								:
							Element:span
								"test1"
								,
							Element:span
								"users"
								:
							Element:span
								1
								,
							Element:span
								"times"
								:
							Element:span
								11
								,
							Element:span
								"percent"
								:
							Element:span
								100
								}, {
							Element:span
								"step"
								:
							Element:span
								"test2"
								,
							Element:span
								"users"
								:
							Element:span
								0
								,
							Element:span
								"times"
								:
							Element:span
								0
								,
							Element:span
								"percent"
								:
							Element:span
								0
								} ],
							Element:span
								"total_users"
								:
							Element:span
								1
								,
							Element:span
								"success_users"
								:
							Element:span
								0
								,
							Element:span
								"success_rate"
								:
							Element:span
								0
								}
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Path Params
									Node:
									(type) c
									(layer)3
										Element:strong
											api_key
											stringrequired
									Node:
									(type) c
									(layer)3
										Element:p
											API_KEY of user, with permission to access this app
									Node:
									(type) c
									(layer)3
										Element:strong
											app_id
											stringrequired
									Node:
									(type) c
									(layer)3
										Element:p
											ID of the app for which to query
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Query Params
									Node:
									(type) c
									(layer)3
										Element:strong
											funnel
											string
									Node:
									(type) c
									(layer)3
										Element:p
											Funnel ID
									Node:
									(type) c
									(layer)3
										Element:strong
											period
											string
									Node:
									(type) c
									(layer)3
										Element:p
											Period for funnel data, possible values: month, day, yesterday, hour, 7days, 30days, 60days
									Node:
									(type) c
									(layer)3
										Element:strong
											callback
											string
									Node:
									(type) c
									(layer)3
										Element:p
											(optional) name of callback function for JSONP output
									Node:
									(type) c
									(layer)3
										Element:p
											Retrieve information about how many users passed which steps of the specific funnel for specified period of time
									Node:
									(type) c
									(layer)3
										Element:a
									Node:
									(type) c
									(layer)3
										Element:a
										Element:i
											Suggest Edits
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								/o?method=drill_bookmarks
						Node:
						(type) c
						(layer)2
							Element:p
								Get bookmarked filter query from drill (available in drill plugin)
						Node:
						(type) c
						(layer)2
							Element:span
								get
								https://
						Node:
						(type) c
						(layer)2
							Element:span
							Element:span
								try.count.ly
							Element:span
								/o?method=drill_bookmarks&api_key=
							Element:span
								api_key
							Element:span
								&app_id=
							Element:span
								app_id
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:a
								cURL
							Element:li
							Element:a
								Node
							Element:li
							Element:a
								Ruby
							Element:li
							Element:a
								JavaScript
							Element:li
							Element:a
								Python
						Node:
						(type) c
						(layer)2
							Element:i
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
							Element:span
								curl
							Element:span
								--request
								GET \
							Element:span
								--url
							Element:span
								'https://try.count.ly/o?app_id=
							Element:span
								app_id
								&api_key=
							Element:span
								api_key
								&method=drill_bookmarks'
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
							Element:span
								var request = require("request");
							Element:span
								var
								options
							Element:span
								=
								{ method:
							Element:span
								'GET'
								, url:
							Element:span
								'https://try.count.ly/o'
								, qs: { app_id:
							Element:span
								'
								, api_key:
							Element:span
								app_id
								'
							Element:span
								'
								, method:
							Element:span
								api_key
								'
							Element:span
								'drill_bookmarks'
								} }; request(options,
							Element:span
								function
								(
							Element:span
								error
								,
							Element:span
								response
								,
							Element:span
								body
								) {
							Element:span
								if
								(
							Element:span
								error
								)
							Element:span
								throw new
								Error(
							Element:span
								error
								); console.log(
							Element:span
								body
								); });
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
							Element:span
								require
							Element:span
								'uri'
							Element:span
								require
							Element:span
								'net/http'
								url = URI(
							Element:span
								"https://try.count.ly/o?app_id=
								) http
							Element:span
								app_id
								&api_key=
							Element:span
								api_key
								&method=drill_bookmarks"
							Element:span
								=
							Element:span
								Net::HTTP
								.new(url.host, url.port) http.use_ssl = true http.verify_mode = OpenSSL::SSL::VERIFY_NONE request
							Element:span
								=
							Element:span
								Net::HTTP
								::Get.new(url) response = http.request(request) puts response.read_body
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
							Element:span
								var
								settings
							Element:span
								=
								{
							Element:span
								"async"
								: true,
							Element:span
								"crossDomain"
								: true,
							Element:span
								"url": "https://try.count.ly/o?app_id=
								,
							Element:span
								app_id
								&api_key=
							Element:span
								api_key
								&method=drill_bookmarks"
							Element:span
								"method": "GET"
								,
							Element:span
								"headers"
								: {},
							Element:span
								"processData"
								: false } $.ajax(settings).done(
							Element:span
								function
								(
							Element:span
								response
								) { console.log(
							Element:span
								response
								); });
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
							Element:span
								import requests
								url =
							Element:span
								"https://try.count.ly/o"
								response = requests.request(
							Element:span
								"GET"
								, url)
							Element:span
								print
								(response.text)
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:a
							Element:span
							Element:i
							Element:em
								{{ results.statusCode[0] }}
								{{ results.statusCode[1] }}
							Element:a
								Metadata
							Element:a
							Element:span
								to examples
						Node:
						(type) c
						(layer)2
							Element:pre
						Node:
						(type) c
						(layer)2
							Element:label
								Method
								{{ results.method }}
						Node:
						(type) c
						(layer)2
							Element:label
								URL
								{{ results.url }}
						Node:
						(type) c
						(layer)2
							Element:label
								Request Headers
						Node:
						(type) c
						(layer)2
							Element:pre
								{{ results.requestHeaders }}
						Node:
						(type) c
						(layer)2
							Element:label
								Request Data
						Node:
						(type) c
						(layer)2
							Element:pre
								{{ results.data }}
						Node:
						(type) c
						(layer)2
							Element:label
								Status
						Node:
						(type) c
						(layer)2
							Element:span
						Node:
						(type) c
						(layer)2
							Element:label
								Response Headers
						Node:
						(type) c
						(layer)2
							Element:pre
								{{ results.responseHeaders }}
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:a
							Element:span
								Success
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								[ {
							Element:span
								"_id"
								:
							Element:span
								"8cd8feb0692c558cbedeb5572615009b"
								,
							Element:span
								"app_id"
								:
							Element:span
								"542c20cdd83506df6c000068"
								,
							Element:span
								"event_app_id"
								:
							Element:span
								"4c056cb1cd6ae9a996c5314d314d4211"
								,
							Element:span
								"event_key"
								:
							Element:span
								"test1"
								,
							Element:span
								"query_obj"
								:
							Element:span
								"{\"sg.country\":{\"$in\":[\"Turkey\"]}
								,
							Element:span
								}"
							Element:span
								"query_text"
								:
							Element:span
								"country = Turkey"
								} ]
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Path Params
									Node:
									(type) c
									(layer)3
										Element:strong
											api_key
											stringrequired
									Node:
									(type) c
									(layer)3
										Element:p
											API_KEY of user, with permission to access this app
									Node:
									(type) c
									(layer)3
										Element:strong
											app_id
											stringrequired
									Node:
									(type) c
									(layer)3
										Element:p
											ID of the app for which to query
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Query Params
									Node:
									(type) c
									(layer)3
										Element:strong
											event_key
											string
									Node:
									(type) c
									(layer)3
										Element:p
											the name of event for which filter was created
									Node:
									(type) c
									(layer)3
										Element:strong
											callback
											string
									Node:
									(type) c
									(layer)3
										Element:p
											(optional) name of callback function for JSONP output
									Node:
									(type) c
									(layer)3
										Element:p
											Retrieve bookmarked Countly Drill data query
									Node:
									(type) c
									(layer)3
										Element:a
									Node:
									(type) c
									(layer)3
										Element:a
										Element:i
											Suggest Edits
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								/o?method=user_details
						Node:
						(type) c
						(layer)2
							Element:p
								Get list of users (available in users plugin)
						Node:
						(type) c
						(layer)2
							Element:span
								get
								https://
						Node:
						(type) c
						(layer)2
							Element:span
							Element:span
								try.count.ly
							Element:span
								/o?method=user_details&api_key=
							Element:span
								api_key
							Element:span
								&app_id=
							Element:span
								app_id
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:a
								cURL
							Element:li
							Element:a
								Node
							Element:li
							Element:a
								Ruby
							Element:li
							Element:a
								JavaScript
							Element:li
							Element:a
								Python
						Node:
						(type) c
						(layer)2
							Element:i
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
							Element:span
								curl
							Element:span
								--request
								GET \
							Element:span
								--url
							Element:span
								'https://try.count.ly/o?app_id=
							Element:span
								app_id
								&api_key=
							Element:span
								api_key
								&method=user_details'
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
							Element:span
								var request = require("request");
							Element:span
								var
								options
							Element:span
								=
								{ method:
							Element:span
								'GET'
								, url:
							Element:span
								'https://try.count.ly/o'
								, qs: { app_id:
							Element:span
								'
								, api_key:
							Element:span
								app_id
								'
							Element:span
								'
								, method:
							Element:span
								api_key
								'
							Element:span
								'user_details'
								} }; request(options,
							Element:span
								function
								(
							Element:span
								error
								,
							Element:span
								response
								,
							Element:span
								body
								) {
							Element:span
								if
								(
							Element:span
								error
								)
							Element:span
								throw new
								Error(
							Element:span
								error
								); console.log(
							Element:span
								body
								); });
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
							Element:span
								require
							Element:span
								'uri'
							Element:span
								require
							Element:span
								'net/http'
								url = URI(
							Element:span
								"https://try.count.ly/o?app_id=
								) http
							Element:span
								app_id
								&api_key=
							Element:span
								api_key
								&method=user_details"
							Element:span
								=
							Element:span
								Net::HTTP
								.new(url.host, url.port) http.use_ssl = true http.verify_mode = OpenSSL::SSL::VERIFY_NONE request
							Element:span
								=
							Element:span
								Net::HTTP
								::Get.new(url) response = http.request(request) puts response.read_body
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
							Element:span
								var
								settings
							Element:span
								=
								{
							Element:span
								"async"
								: true,
							Element:span
								"crossDomain"
								: true,
							Element:span
								"url": "https://try.count.ly/o?app_id=
								,
							Element:span
								app_id
								&api_key=
							Element:span
								api_key
								&method=user_details"
							Element:span
								"method": "GET"
								,
							Element:span
								"headers"
								: {},
							Element:span
								"processData"
								: false } $.ajax(settings).done(
							Element:span
								function
								(
							Element:span
								response
								) { console.log(
							Element:span
								response
								); });
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
							Element:span
								import requests
								url =
							Element:span
								"https://try.count.ly/o"
								response = requests.request(
							Element:span
								"GET"
								, url)
							Element:span
								print
								(response.text)
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:a
							Element:span
							Element:i
							Element:em
								{{ results.statusCode[0] }}
								{{ results.statusCode[1] }}
							Element:a
								Metadata
							Element:a
							Element:span
								to examples
						Node:
						(type) c
						(layer)2
							Element:pre
						Node:
						(type) c
						(layer)2
							Element:label
								Method
								{{ results.method }}
						Node:
						(type) c
						(layer)2
							Element:label
								URL
								{{ results.url }}
						Node:
						(type) c
						(layer)2
							Element:label
								Request Headers
						Node:
						(type) c
						(layer)2
							Element:pre
								{{ results.requestHeaders }}
						Node:
						(type) c
						(layer)2
							Element:label
								Request Data
						Node:
						(type) c
						(layer)2
							Element:pre
								{{ results.data }}
						Node:
						(type) c
						(layer)2
							Element:label
								Status
						Node:
						(type) c
						(layer)2
							Element:span
						Node:
						(type) c
						(layer)2
							Element:label
								Response Headers
						Node:
						(type) c
						(layer)2
							Element:pre
								{{ results.responseHeaders }}
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:a
							Element:span
							Element:i
							Element:em
								200
								OK
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								{
							Element:span
								"iTotalRecords"
								:
							Element:span
								100
								,
							Element:span
								"iTotalDisplayRecords"
								:
							Element:span
								100
								,
							Element:span
								"aaData"
								:[ {
							Element:span
								"_id"
								:
							Element:span
								"ec941f5016e2c863e3c403be0304a2c752284589"
								,
							Element:span
								"hasInfo"
								:
							Element:span
								true
								,
							Element:span
								"name"
								:
							Element:span
								"Aaron Baker"
								,
							Element:span
								"email"
								:
							Element:span
								"so@fiv.gov"
								,
							Element:span
								"sc"
								:
							Element:span
								1
								,
							Element:span
								"ls"
								:
							Element:span
								1416567197
								,
							Element:span
								"cc"
								:
							Element:span
								"FR"
								,
							Element:span
								"cty"
								:
							Element:span
								"Saint-gildas-des-boi"
								,
							Element:span
								"d"
								:
							Element:span
								"Kindle Fire HDX"
								,
							Element:span
								"sd"
								:
							Element:span
								0
								,
							Element:span
								"tsd"
								:
							Element:span
								210
								,
							Element:span
								"picture"
								:
							Element:span
								"http://www.gravatar.com/avatar/ede9ee2e1b7171630cc0dc07f3d298f4?d=identicon&s=150"
								},{
							Element:span
								"_id"
								:
							Element:span
								"58cff84f90f89c0ec42c37898c62c4a63679f61c"
								,
							Element:span
								"hasInfo"
								:
							Element:span
								true
								,
							Element:span
								"name"
								:
							Element:span
								"Addie Underwood"
								,
							Element:span
								"email"
								:
							Element:span
								"wopilfov@hihfok.net"
								,
							Element:span
								"sc"
								:
							Element:span
								1
								,
							Element:span
								"ls"
								:
							Element:span
								1416567195
								,
							Element:span
								"cc"
								:
							Element:span
								"ES"
								,
							Element:span
								"cty"
								:
							Element:span
								"Unknown"
								,
							Element:span
								"d"
								:
							Element:span
								"Windows Phone"
								,
							Element:span
								"sd"
								:
							Element:span
								0
								,
							Element:span
								"tsd"
								:
							Element:span
								30
								,
							Element:span
								"picture"
								:
							Element:span
								"http://www.gravatar.com/avatar/93e22d0a6b1d30f47b43398ddeaa5c75?d=identicon&s=150"
								} ] }
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Path Params
									Node:
									(type) c
									(layer)3
										Element:strong
											api_key
											stringrequired
									Node:
									(type) c
									(layer)3
										Element:p
											API_KEY of user, with permission to access this app
									Node:
									(type) c
									(layer)3
										Element:strong
											app_id
											stringrequired
									Node:
									(type) c
									(layer)3
										Element:p
											ID of the app for which to query
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Query Params
									Node:
									(type) c
									(layer)3
										Element:strong
											iDisplayStart
											int32
									Node:
									(type) c
									(layer)3
										Element:p
											Offset from which to start displaying users
									Node:
									(type) c
									(layer)3
										Element:strong
											iDisplayLength
											int32
									Node:
									(type) c
									(layer)3
										Element:p
											How many users to display from offset
									Node:
									(type) c
									(layer)3
										Element:strong
											sSearch
											string
									Node:
									(type) c
									(layer)3
										Element:p
											Full word search on names of users or email addresses
									Node:
									(type) c
									(layer)3
										Element:strong
											filter
											string
									Node:
									(type) c
									(layer)3
										Element:p
											Filter users, possible values: user-all, user-known, user-anonymous
									Node:
									(type) c
									(layer)3
										Element:strong
											query
											string
									Node:
									(type) c
									(layer)3
										Element:p
											Json string encoded mongodb query
									Node:
									(type) c
									(layer)3
										Element:strong
											callback
											string
									Node:
									(type) c
									(layer)3
										Element:p
											(optional) name of callback function for JSONP output
									Node:
									(type) c
									(layer)3
										Element:p
											This API allows to query information about app users. You can also paginate data using offset and length of results.
									Node:
									(type) c
									(layer)3
										Element:p
											The fields that can be provided for each user are:
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
											_id - ID of user
										Element:li
											hasInfo - if there is any info about user
										Element:li
											name - full name of the user
										Element:li
											email - email address of the user
										Element:li
											sc - session count
										Element:li
											ls - timestamp last seen
										Element:li
											cc - country code
										Element:li
											cty - city
										Element:li
											d - device
										Element:li
											sd - duration of last session in seconds
										Element:li
											tsd - total duration of all sessions in seconds
										Element:li
											picture - link (internal or external) to the picture of user or avatar
									Node:
									(type) c
									(layer)3
										Element:a
									Node:
									(type) c
									(layer)3
										Element:a
										Element:i
											Suggest Edits
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								/o?method=user_details&uid
						Node:
						(type) c
						(layer)2
							Element:p
								Retrieves detailed information about specific user (available in users plugin)
						Node:
						(type) c
						(layer)2
							Element:span
								get
								https://
						Node:
						(type) c
						(layer)2
							Element:span
							Element:span
								try.count.ly
							Element:span
								/o?method=user_details&uid=
							Element:span
								uid
							Element:span
								&api_key=
							Element:span
								api_key
							Element:span
								&app_id=
							Element:span
								app_id
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:a
								cURL
							Element:li
							Element:a
								Node
							Element:li
							Element:a
								Ruby
							Element:li
							Element:a
								JavaScript
							Element:li
							Element:a
								Python
						Node:
						(type) c
						(layer)2
							Element:i
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
							Element:span
								curl
							Element:span
								--request
								GET \
							Element:span
								--url
							Element:span
								'https://try.count.ly/o?app_id=
							Element:span
								app_id
								&api_key=
							Element:span
								api_key
								&uid=
							Element:span
								uid
								&method=user_details'
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
							Element:span
								var request = require("request");
							Element:span
								var
								options
							Element:span
								=
								{ method:
							Element:span
								'GET'
								, url:
							Element:span
								'https://try.count.ly/o'
								, qs: { app_id:
							Element:span
								'
								, api_key:
							Element:span
								app_id
								'
							Element:span
								'
								, uid:
							Element:span
								api_key
								'
							Element:span
								'
								, method:
							Element:span
								uid
								'
							Element:span
								'user_details'
								} }; request(options,
							Element:span
								function
								(
							Element:span
								error
								,
							Element:span
								response
								,
							Element:span
								body
								) {
							Element:span
								if
								(
							Element:span
								error
								)
							Element:span
								throw new
								Error(
							Element:span
								error
								); console.log(
							Element:span
								body
								); });
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
							Element:span
								require
							Element:span
								'uri'
							Element:span
								require
							Element:span
								'net/http'
								url = URI(
							Element:span
								"https://try.count.ly/o?app_id=
								) http
							Element:span
								app_id
								&api_key=
							Element:span
								api_key
								&uid=
							Element:span
								uid
								&method=user_details"
							Element:span
								=
							Element:span
								Net::HTTP
								.new(url.host, url.port) http.use_ssl = true http.verify_mode = OpenSSL::SSL::VERIFY_NONE request
							Element:span
								=
							Element:span
								Net::HTTP
								::Get.new(url) response = http.request(request) puts response.read_body
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
							Element:span
								var
								settings
							Element:span
								=
								{
							Element:span
								"async"
								: true,
							Element:span
								"crossDomain"
								: true,
							Element:span
								"url": "https://try.count.ly/o?app_id=
								,
							Element:span
								app_id
								&api_key=
							Element:span
								api_key
								&uid=
							Element:span
								uid
								&method=user_details"
							Element:span
								"method": "GET"
								,
							Element:span
								"headers"
								: {},
							Element:span
								"processData"
								: false } $.ajax(settings).done(
							Element:span
								function
								(
							Element:span
								response
								) { console.log(
							Element:span
								response
								); });
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
							Element:span
								import requests
								url =
							Element:span
								"https://try.count.ly/o"
								response = requests.request(
							Element:span
								"GET"
								, url)
							Element:span
								print
								(response.text)
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:a
							Element:span
							Element:i
							Element:em
								{{ results.statusCode[0] }}
								{{ results.statusCode[1] }}
							Element:a
								Metadata
							Element:a
							Element:span
								to examples
						Node:
						(type) c
						(layer)2
							Element:pre
						Node:
						(type) c
						(layer)2
							Element:label
								Method
								{{ results.method }}
						Node:
						(type) c
						(layer)2
							Element:label
								URL
								{{ results.url }}
						Node:
						(type) c
						(layer)2
							Element:label
								Request Headers
						Node:
						(type) c
						(layer)2
							Element:pre
								{{ results.requestHeaders }}
						Node:
						(type) c
						(layer)2
							Element:label
								Request Data
						Node:
						(type) c
						(layer)2
							Element:pre
								{{ results.data }}
						Node:
						(type) c
						(layer)2
							Element:label
								Status
						Node:
						(type) c
						(layer)2
							Element:span
						Node:
						(type) c
						(layer)2
							Element:label
								Response Headers
						Node:
						(type) c
						(layer)2
							Element:pre
								{{ results.responseHeaders }}
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:a
							Element:span
							Element:i
							Element:em
								200
								OK
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								{
							Element:span
								"_id"
								:
							Element:span
								"e9a698e0aebb4fc584a1ddf04ad480c95a768e3e"
								,
							Element:span
								"hasInfo"
								:
							Element:span
								true
								,
							Element:span
								"name"
								:
							Element:span
								"Hester McKinney"
								,
							Element:span
								"username"
								:
							Element:span
								"pan"
								,
							Element:span
								"email"
								:
							Element:span
								"lezuwor@bu.gov"
								,
							Element:span
								"organization"
								:
							Element:span
								"Aptijaz"
								,
							Element:span
								"phone"
								:
							Element:span
								"(617) 788-8341"
								,
							Element:span
								"gender"
								:
							Element:span
								"M"
								,
							Element:span
								"byear"
								:
							Element:span
								1984
								,
							Element:span
								"sc"
								:
							Element:span
								3
								,
							Element:span
								"fs"
								:
							Element:span
								1416568278
								,
							Element:span
								"ls"
								:
							Element:span
								1416568859
								,
							Element:span
								"did"
								:
							Element:span
								"fa9a96cd-b2b7-2891-3902-56c459ba73d7"
								,
							Element:span
								"cc"
								:
							Element:span
								"TW"
								,
							Element:span
								"cty"
								:
							Element:span
								"Unknown"
								,
							Element:span
								"c"
								:
							Element:span
								"Rogers Wireless"
								,
							Element:span
								"d"
								:
							Element:span
								"Optimus L5"
								,
							Element:span
								"av"
								:
							Element:span
								"3:2"
								,
							Element:span
								"p"
								:
							Element:span
								"Android"
								,
							Element:span
								"pv"
								:
							Element:span
								"a7:1"
								,
							Element:span
								"r"
								:
							Element:span
								"320x480"
								,
							Element:span
								"dnst"
								:
							Element:span
								"240dpi"
								,
							Element:span
								"uid"
								:
							Element:span
								"7"
								,
							Element:span
								"lsid"
								:
							Element:span
								"546f1ddbcf9ba9b12d009f24"
								,
							Element:span
								"sd"
								:
							Element:span
								0
								,
							Element:span
								"tsd"
								:
							Element:span
								210
								,
							Element:span
								"lest"
								:
							Element:span
								1416568348
								,
							Element:span
								"picture"
								:
							Element:span
								"http://www.gravatar.com/avatar/92a5fd55a5e69a7647bc399ddc477d8a?d=identicon&s=150"
								,
							Element:span
								"sessions"
								:[ {
							Element:span
								"_id"
								:
							Element:span
								"546f1ddbcf9ba9b12d009f24"
								,
							Element:span
								"ts"
								:
							Element:span
								1416568278000
								,
							Element:span
								"sd"
								:
							Element:span
								210
								,
							Element:span
								"nts"
								:
							Element:span
								""
								} ],
							Element:span
								"tpa"
								:
							Element:span
								0
								,
							Element:span
								"tpc"
								:
							Element:span
								0
								,
							Element:span
								"events"
								:[ {
							Element:span
								"_id"
								:
							Element:span
								"546f1e08cf9ba9b12d00a1b9"
								,
							Element:span
								"key"
								:
							Element:span
								"Buy"
								,
							Element:span
								"ts"
								:
							Element:span
								1399316845000
								,
							Element:span
								"c"
								:
							Element:span
								1
								,
							Element:span
								"s"
								:
							Element:span
								0
								,
							Element:span
								"sg"
								:{
							Element:span
								"screen"
								:
							Element:span
								"Main screen"
								} }, {
							Element:span
								"_id"
								:
							Element:span
								"546f1e1ccf9ba9b12d00a39b"
								,
							Element:span
								"key"
								:
							Element:span
								"Logout"
								,
							Element:span
								"ts"
								:
							Element:span
								1416568348000
								,
							Element:span
								"c"
								:
							Element:span
								1
								,
							Element:span
								"s"
								:
							Element:span
								0
								,
							Element:span
								"sg"
								:{} } ],
							Element:span
								"funnels"
								:[ {
							Element:span
								"_id"
								:
							Element:span
								"be61da5d2a14a3972a86354f453bb8df"
								,
							Element:span
								"name"
								:
							Element:span
								"Purchase"
								,
							Element:span
								"steps"
								:[
							Element:span
								"Login"
								,
							Element:span
								"Purchase"
								,
							Element:span
								"Logout"
								],
							Element:span
								"step"
								:
							Element:span
								1
								,
							Element:span
								"actionTimes"
								:[
							Element:span
								1416568868000
								] } ] }
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Path Params
									Node:
									(type) c
									(layer)3
										Element:strong
											api_key
											stringrequired
									Node:
									(type) c
									(layer)3
										Element:p
											API_KEY of user, with permission to access this app
									Node:
									(type) c
									(layer)3
										Element:strong
											app_id
											stringrequired
									Node:
									(type) c
									(layer)3
										Element:p
											ID of the app for which to query
									Node:
									(type) c
									(layer)3
										Element:strong
											uid
											stringrequired
									Node:
									(type) c
									(layer)3
										Element:p
											ID of the user for which to query information
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Query Params
									Node:
									(type) c
									(layer)3
										Element:strong
											callback
											string
									Node:
									(type) c
									(layer)3
										Element:p
											(optional) name of callback function for JSONP output
									Node:
									(type) c
									(layer)3
										Element:p
											This API is used to query all available information about the user.
									Node:
									(type) c
									(layer)3
										Element:p
											User ID is formed as sha1 hash from app_key and deviceID you set in your SDK, for example in nodejs getting user ID would looke like:
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:a
											JavaScript
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:code
										Element:span
										Element:span
											uid
										Element:span
											=
										Element:span
											crypto
											.
										Element:span
											createHash
											(
										Element:span
											'sha1'
											).
										Element:span
											update
											(
										Element:span
											app_key
										Element:span
											+
										Element:span
											device_id
										Element:span
											+
										Element:span
											""
											).
										Element:span
											digest
											(
										Element:span
											'hex'
											);
									Node:
									(type) c
									(layer)3
										Element:p
											This request can provide details as:
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
											_id - ID of user
										Element:li
											uid - internal user ID
										Element:li
											hasInfo - if there is any info about user
										Element:li
											name - full name of the user
										Element:li
											email - email address of the user
										Element:li
											username - nickname of the user
										Element:li
											organization - organization user works for or participatesin
										Element:li
											phone - user's phone number
										Element:li
											gender - gender of the user, possible values: M or F or null if not known
										Element:li
											byear - year of birth
										Element:li
											sc - session count
										Element:li
											fs - timestamp of first session start
										Element:li
											ls - timestamp of last session start
										Element:li
											did - device ID
										Element:li
											c - carrier
										Element:li
											cc - country code
										Element:li
											cty - city
										Element:li
											d - device
										Element:li
											p - platform
										Element:li
											pv - platform version
										Element:li
											r - resolution
										Element:li
											dnst - density
										Element:li
											sd - duration of last session in seconds
										Element:li
											tsd - total duration of all sessions in seconds
										Element:li
											picture - link (internal or external) to the picture of user or avatar
										Element:li
											tpa - total purchase amount
										Element:li
											tpc - total purchase count
										Element:li
											sessions - array with user sessions:
										Element:ul
										Element:li
											_id - session ID
										Element:li
											ts - session start timestamp
										Element:li
											sd - session duration
										Element:li
											nts - next session timestamp (may be "" if last session)
										Element:li
											events - array with user events:
										Element:ul
										Element:li
											_id - event ID
										Element:li
											key - key of the event
										Element:li
											ts - timestamp of event
										Element:li
											c - count provided with event
										Element:li
											s - sum provided with event
										Element:li
											sg - segments of event
										Element:li
											funnels - array with user funnel progress
										Element:ul
										Element:li
											_id - funnel ID
										Element:li
											name - name of the funnel
										Element:li
											steps - array with event keys for the funnel
										Element:li
											step - current step which user completed
										Element:li
											actionTimes - array of timestamps at which each action was completed
									Node:
									(type) c
									(layer)3
										Element:a
									Node:
									(type) c
									(layer)3
										Element:a
										Element:i
											Suggest Edits
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								/o?method=segmentation
						Node:
						(type) c
						(layer)2
							Element:p
								Breakdown of data for specific event by provided bucket
						Node:
						(type) c
						(layer)2
							Element:span
								get
								https://
						Node:
						(type) c
						(layer)2
							Element:span
							Element:span
								try.count.ly
							Element:span
								/o?method=segmentation&api_key=
							Element:span
								api_key
							Element:span
								&app_id=
							Element:span
								app_id
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:a
								cURL
							Element:li
							Element:a
								Node
							Element:li
							Element:a
								Ruby
							Element:li
							Element:a
								JavaScript
							Element:li
							Element:a
								Python
						Node:
						(type) c
						(layer)2
							Element:i
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
							Element:span
								curl
							Element:span
								--request
								GET \
							Element:span
								--url
							Element:span
								'https://try.count.ly/o?app_id=
							Element:span
								app_id
								&api_key=
							Element:span
								api_key
								&method=segmentation'
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
							Element:span
								var request = require("request");
							Element:span
								var
								options
							Element:span
								=
								{ method:
							Element:span
								'GET'
								, url:
							Element:span
								'https://try.count.ly/o'
								, qs: { app_id:
							Element:span
								'
								, api_key:
							Element:span
								app_id
								'
							Element:span
								'
								, method:
							Element:span
								api_key
								'
							Element:span
								'segmentation'
								} }; request(options,
							Element:span
								function
								(
							Element:span
								error
								,
							Element:span
								response
								,
							Element:span
								body
								) {
							Element:span
								if
								(
							Element:span
								error
								)
							Element:span
								throw new
								Error(
							Element:span
								error
								); console.log(
							Element:span
								body
								); });
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
							Element:span
								require
							Element:span
								'uri'
							Element:span
								require
							Element:span
								'net/http'
								url = URI(
							Element:span
								"https://try.count.ly/o?app_id=
								) http
							Element:span
								app_id
								&api_key=
							Element:span
								api_key
								&method=segmentation"
							Element:span
								=
							Element:span
								Net::HTTP
								.new(url.host, url.port) http.use_ssl = true http.verify_mode = OpenSSL::SSL::VERIFY_NONE request
							Element:span
								=
							Element:span
								Net::HTTP
								::Get.new(url) response = http.request(request) puts response.read_body
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
							Element:span
								var
								settings
							Element:span
								=
								{
							Element:span
								"async"
								: true,
							Element:span
								"crossDomain"
								: true,
							Element:span
								"url": "https://try.count.ly/o?app_id=
								,
							Element:span
								app_id
								&api_key=
							Element:span
								api_key
								&method=segmentation"
							Element:span
								"method": "GET"
								,
							Element:span
								"headers"
								: {},
							Element:span
								"processData"
								: false } $.ajax(settings).done(
							Element:span
								function
								(
							Element:span
								response
								) { console.log(
							Element:span
								response
								); });
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
							Element:span
								import requests
								url =
							Element:span
								"https://try.count.ly/o"
								response = requests.request(
							Element:span
								"GET"
								, url)
							Element:span
								print
								(response.text)
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:a
							Element:span
							Element:i
							Element:em
								{{ results.statusCode[0] }}
								{{ results.statusCode[1] }}
							Element:a
								Metadata
							Element:a
							Element:span
								to examples
						Node:
						(type) c
						(layer)2
							Element:pre
						Node:
						(type) c
						(layer)2
							Element:label
								Method
								{{ results.method }}
						Node:
						(type) c
						(layer)2
							Element:label
								URL
								{{ results.url }}
						Node:
						(type) c
						(layer)2
							Element:label
								Request Headers
						Node:
						(type) c
						(layer)2
							Element:pre
								{{ results.requestHeaders }}
						Node:
						(type) c
						(layer)2
							Element:label
								Request Data
						Node:
						(type) c
						(layer)2
							Element:pre
								{{ results.data }}
						Node:
						(type) c
						(layer)2
							Element:label
								Status
						Node:
						(type) c
						(layer)2
							Element:span
						Node:
						(type) c
						(layer)2
							Element:label
								Response Headers
						Node:
						(type) c
						(layer)2
							Element:pre
								{{ results.responseHeaders }}
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:a
							Element:span
							Element:i
							Element:em
								200
								Simple Query
							Element:a
							Element:span
							Element:i
							Element:em
								200
								Query with projection
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								{
							Element:span
								"data"
								:{
							Element:span
								"2016.5.29"
								:{
							Element:span
								"u"
								:
							Element:span
								17
								,
							Element:span
								"t"
								:
							Element:span
								17
								,
							Element:span
								"s"
								:
							Element:span
								0
								,
							Element:span
								"dur"
								:
							Element:span
								74
								},
							Element:span
								"2016.6.1"
								:{
							Element:span
								"u"
								:
							Element:span
								12
								,
							Element:span
								"t"
								:
							Element:span
								12
								,
							Element:span
								"s"
								:
							Element:span
								0
								,
							Element:span
								"dur"
								:
							Element:span
								63
								},
							Element:span
								"2016.5.27"
								:{
							Element:span
								"u"
								:
							Element:span
								6
								,
							Element:span
								"t"
								:
							Element:span
								6
								,
							Element:span
								"s"
								:
							Element:span
								0
								,
							Element:span
								"dur"
								:
							Element:span
								37
								},
							Element:span
								"2016.5.26"
								:{
							Element:span
								"u"
								:
							Element:span
								10
								,
							Element:span
								"t"
								:
							Element:span
								10
								,
							Element:span
								"s"
								:
							Element:span
								0
								,
							Element:span
								"dur"
								:
							Element:span
								49
								},
							Element:span
								"2016.5.28"
								:{
							Element:span
								"u"
								:
							Element:span
								18
								,
							Element:span
								"t"
								:
							Element:span
								18
								,
							Element:span
								"s"
								:
							Element:span
								0
								,
							Element:span
								"dur"
								:
							Element:span
								90
								},
							Element:span
								"2016.5.30"
								:{
							Element:span
								"u"
								:
							Element:span
								16
								,
							Element:span
								"t"
								:
							Element:span
								16
								,
							Element:span
								"s"
								:
							Element:span
								0
								,
							Element:span
								"dur"
								:
							Element:span
								76
								},
							Element:span
								"2016.5.31"
								:{
							Element:span
								"u"
								:
							Element:span
								11
								,
							Element:span
								"t"
								:
							Element:span
								11
								,
							Element:span
								"s"
								:
							Element:span
								0
								,
							Element:span
								"dur"
								:
							Element:span
								33
								} },
							Element:span
								"meta"
								:[ ],
							Element:span
								"lu"
								:
							Element:span
								"2016-06-13T12:37:10.405Z"
								}
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								{
							Element:span
								"data"
								:{
							Element:span
								"2016.4.26"
								:{
							Element:span
								"notification"
								:{
							Element:span
								"u"
								:
							Element:span
								1
								,
							Element:span
								"t"
								:
							Element:span
								1
								,
							Element:span
								"s"
								:
							Element:span
								0
								,
							Element:span
								"dur"
								:
							Element:span
								5
								},
							Element:span
								"twitter"
								:{
							Element:span
								"u"
								:
							Element:span
								7
								,
							Element:span
								"t"
								:
							Element:span
								7
								,
							Element:span
								"s"
								:
							Element:span
								0
								,
							Element:span
								"dur"
								:
							Element:span
								41
								},
							Element:span
								"unknown"
								:{
							Element:span
								"u"
								:
							Element:span
								4
								,
							Element:span
								"t"
								:
							Element:span
								4
								,
							Element:span
								"s"
								:
							Element:span
								0
								,
							Element:span
								"dur"
								:
							Element:span
								5
								} },
							Element:span
								"2016.4.29"
								:{
							Element:span
								"notification"
								:{
							Element:span
								"u"
								:
							Element:span
								6
								,
							Element:span
								"t"
								:
							Element:span
								6
								,
							Element:span
								"s"
								:
							Element:span
								0
								,
							Element:span
								"dur"
								:
							Element:span
								30
								},
							Element:span
								"twitter"
								:{
							Element:span
								"u"
								:
							Element:span
								7
								,
							Element:span
								"t"
								:
							Element:span
								7
								,
							Element:span
								"s"
								:
							Element:span
								0
								,
							Element:span
								"dur"
								:
							Element:span
								44
								},
							Element:span
								"unknown"
								:{
							Element:span
								"u"
								:
							Element:span
								10
								,
							Element:span
								"t"
								:
							Element:span
								10
								,
							Element:span
								"s"
								:
							Element:span
								0
								,
							Element:span
								"dur"
								:
							Element:span
								51
								} },
							Element:span
								"2016.5.1"
								:{
							Element:span
								"notification"
								:{
							Element:span
								"u"
								:
							Element:span
								4
								,
							Element:span
								"t"
								:
							Element:span
								4
								,
							Element:span
								"s"
								:
							Element:span
								0
								,
							Element:span
								"dur"
								:
							Element:span
								18
								},
							Element:span
								"unknown"
								:{
							Element:span
								"u"
								:
							Element:span
								10
								,
							Element:span
								"t"
								:
							Element:span
								10
								,
							Element:span
								"s"
								:
							Element:span
								0
								,
							Element:span
								"dur"
								:
							Element:span
								59
								},
							Element:span
								"twitter"
								:{
							Element:span
								"u"
								:
							Element:span
								1
								,
							Element:span
								"t"
								:
							Element:span
								1
								,
							Element:span
								"s"
								:
							Element:span
								0
								,
							Element:span
								"dur"
								:
							Element:span
								8
								} },
							Element:span
								"2016.4.24"
								:{
							Element:span
								"notification"
								:{
							Element:span
								"u"
								:
							Element:span
								1
								,
							Element:span
								"t"
								:
							Element:span
								1
								,
							Element:span
								"s"
								:
							Element:span
								0
								,
							Element:span
								"dur"
								:
							Element:span
								8
								},
							Element:span
								"twitter"
								:{
							Element:span
								"u"
								:
							Element:span
								6
								,
							Element:span
								"t"
								:
							Element:span
								6
								,
							Element:span
								"s"
								:
							Element:span
								0
								,
							Element:span
								"dur"
								:
							Element:span
								30
								},
							Element:span
								"unknown"
								:{
							Element:span
								"u"
								:
							Element:span
								3
								,
							Element:span
								"t"
								:
							Element:span
								3
								,
							Element:span
								"s"
								:
							Element:span
								0
								,
							Element:span
								"dur"
								:
							Element:span
								19
								} }, },
							Element:span
								"meta"
								:[
							Element:span
								"twitter"
								,
							Element:span
								"unknown"
								,
							Element:span
								"notification"
								],
							Element:span
								"notification"
								:{
							Element:span
								"t"
								:
							Element:span
								325
								,
							Element:span
								"u"
								:
							Element:span
								323
								,
							Element:span
								"s"
								:
							Element:span
								0
								,
							Element:span
								"dur"
								:
							Element:span
								1704
								},
							Element:span
								"twitter"
								:{
							Element:span
								"t"
								:
							Element:span
								360
								,
							Element:span
								"u"
								:
							Element:span
								350
								,
							Element:span
								"s"
								:
							Element:span
								0
								,
							Element:span
								"dur"
								:
							Element:span
								1853
								},
							Element:span
								"unknown"
								:{
							Element:span
								"t"
								:
							Element:span
								334
								,
							Element:span
								"u"
								:
							Element:span
								330
								,
							Element:span
								"s"
								:
							Element:span
								0
								,
							Element:span
								"dur"
								:
							Element:span
								1574
								},
							Element:span
								"lu"
								:
							Element:span
								"2016-06-13T12:44:41.397Z"
								}
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Path Params
									Node:
									(type) c
									(layer)3
										Element:strong
											api_key
											stringrequired
									Node:
									(type) c
									(layer)3
										Element:p
											API_KEY of user, with permission to access this app
									Node:
									(type) c
									(layer)3
										Element:strong
											app_id
											stringrequired
									Node:
									(type) c
									(layer)3
										Element:p
											ID of the app for which to query
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Query Params
									Node:
									(type) c
									(layer)3
										Element:strong
											event
											string
									Node:
									(type) c
									(layer)3
										Element:p
											Which event to query
									Node:
									(type) c
									(layer)3
										Element:strong
											period
											string
									Node:
									(type) c
									(layer)3
										Element:p
											For which time period to provide data, possible values (month, 60days, 30days, 7days, yesterday, hour or [startMiliseconds, endMiliseconds] as [1417730400000,1420149600000])
									Node:
									(type) c
									(layer)3
										Element:strong
											bucket
											string
									Node:
									(type) c
									(layer)3
										Element:p
											period by which to breakdown data: hourly, daily, weekly, monthly
									Node:
									(type) c
									(layer)3
										Element:strong
											projectionKey
											string
									Node:
									(type) c
									(layer)3
										Element:p
											Show top results by specific segment value
									Node:
									(type) c
									(layer)3
										Element:strong
											queryObject
											string
									Node:
									(type) c
									(layer)3
										Element:p
											Json string encoded mongodb query
									Node:
									(type) c
									(layer)3
										Element:strong
											callback
											string
									Node:
									(type) c
									(layer)3
										Element:p
											(optional) name of callback function for JSONP output
									Node:
									(type) c
									(layer)3
										Element:p
											This api allows to query events that were recorded in drill. Event can be any custom event sent to Countly server, as well as internal events like:
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
											[CLY]_session for sessions
										Element:li
											[CLY]_crash for crahses
										Element:li
											[CLY]_view for views
										Element:li
											[CLY]_action for actions
										Element:li
											[CLY]_push_action for actions performed on push notifications
										Element:li
											[CLY]_push_open for opened push notifications
										Element:li
											[CLY]_push_sent for sent push notifications
									Node:
									(type) c
									(layer)3
										Element:p
											It provides following properties for each bucket:
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
											u - unique users
										Element:li
											t - total times/count
										Element:li
											s - sum property if provided for event
										Element:li
											dur - duration property if provided for event
									Node:
									(type) c
									(layer)3
										Element:p
											meta property lists breakdown by segments for queries with projection key
									Node:
									(type) c
									(layer)3
										Element:a
									Node:
									(type) c
									(layer)3
										Element:a
										Element:i
											Suggest Edits
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								/o?method=segmentation_meta
						Node:
						(type) c
						(layer)2
							Element:p
								Fetches all segment data for provided event
						Node:
						(type) c
						(layer)2
							Element:span
								get
								https://
						Node:
						(type) c
						(layer)2
							Element:span
							Element:span
								try.count.ly
							Element:span
								/o?method=segmentation_meta&api_key=
							Element:span
								api_key
							Element:span
								&app_id=
							Element:span
								app_id
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:a
								cURL
							Element:li
							Element:a
								Node
							Element:li
							Element:a
								Ruby
							Element:li
							Element:a
								JavaScript
							Element:li
							Element:a
								Python
						Node:
						(type) c
						(layer)2
							Element:i
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
							Element:span
								curl
							Element:span
								--request
								GET \
							Element:span
								--url
							Element:span
								'https://try.count.ly/o?app_id=app_id&api_key=api_key&method=segmentation_meta'
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
							Element:span
								var request = require("request");
							Element:span
								var
								options
							Element:span
								=
								{ method:
							Element:span
								'GET'
								, url:
							Element:span
								'https://try.count.ly/o'
								, qs: { app_id:
							Element:span
								'app_id'
								, api_key:
							Element:span
								'api_key'
								, method:
							Element:span
								'segmentation_meta'
								} }; request(options,
							Element:span
								function
								(
							Element:span
								error
								,
							Element:span
								response
								,
							Element:span
								body
								) {
							Element:span
								if
								(
							Element:span
								error
								)
							Element:span
								throw new
								Error(
							Element:span
								error
								); console.log(
							Element:span
								body
								); });
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
							Element:span
								require
							Element:span
								'uri'
							Element:span
								require
							Element:span
								'net/http'
								url = URI(
							Element:span
								"https://try.count.ly/o?app_id=app_id&api_key=api_key&method=segmentation_meta"
								) http
							Element:span
								=
							Element:span
								Net::HTTP
								.new(url.host, url.port) http.use_ssl = true http.verify_mode = OpenSSL::SSL::VERIFY_NONE request
							Element:span
								=
							Element:span
								Net::HTTP
								::Get.new(url) response = http.request(request) puts response.read_body
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
							Element:span
								var
								settings
							Element:span
								=
								{
							Element:span
								"async"
								: true,
							Element:span
								"crossDomain"
								: true,
							Element:span
								"url": "https://try.count.ly/o?app_id=app_id&api_key=api_key&method=segmentation_meta"
								,
							Element:span
								"method": "GET"
								,
							Element:span
								"headers"
								: {},
							Element:span
								"processData"
								: false } $.ajax(settings).done(
							Element:span
								function
								(
							Element:span
								response
								) { console.log(
							Element:span
								response
								); });
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
							Element:span
								import requests
								url =
							Element:span
								"https://try.count.ly/o"
								response = requests.request(
							Element:span
								"GET"
								, url)
							Element:span
								print
								(response.text)
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:a
							Element:span
							Element:i
							Element:em
								{{ results.statusCode[0] }}
								{{ results.statusCode[1] }}
							Element:a
								Metadata
							Element:a
							Element:span
								to examples
						Node:
						(type) c
						(layer)2
							Element:pre
						Node:
						(type) c
						(layer)2
							Element:label
								Method
								{{ results.method }}
						Node:
						(type) c
						(layer)2
							Element:label
								URL
								{{ results.url }}
						Node:
						(type) c
						(layer)2
							Element:label
								Request Headers
						Node:
						(type) c
						(layer)2
							Element:pre
								{{ results.requestHeaders }}
						Node:
						(type) c
						(layer)2
							Element:label
								Request Data
						Node:
						(type) c
						(layer)2
							Element:pre
								{{ results.data }}
						Node:
						(type) c
						(layer)2
							Element:label
								Status
						Node:
						(type) c
						(layer)2
							Element:span
						Node:
						(type) c
						(layer)2
							Element:label
								Response Headers
						Node:
						(type) c
						(layer)2
							Element:pre
								{{ results.responseHeaders }}
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:a
							Element:span
							Element:i
							Element:em
								200
								Simple Query
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								{
							Element:span
								"e"
								:
							Element:span
								"[CLY]_session"
								,
							Element:span
								"app_id"
								:
							Element:span
								"56e53239a941253d470d7c52"
								,
							Element:span
								"up"
								:{
							Element:span
								"cty"
								:{
							Element:span
								"values"
								:[
							Element:span
								"Riga"
								,
							Element:span
								"Unknown"
								,
							Element:span
								"Ashburn"
								,
							Element:span
								"Newark"
								,
							Element:span
								"Tokyo"
								],
							Element:span
								"type"
								:
							Element:span
								"l"
								},
							Element:span
								"cc"
								:{
							Element:span
								"values"
								:[
							Element:span
								"LV"
								,
							Element:span
								"Unknown"
								,
							Element:span
								"JP"
								,
							Element:span
								"CN"
								,
							Element:span
								"US"
								],
							Element:span
								"type"
								:
							Element:span
								"l"
								},
							Element:span
								"fs"
								:{
							Element:span
								"type"
								:
							Element:span
								"d"
								},
							Element:span
								"ls"
								:{
							Element:span
								"type"
								:
							Element:span
								"d"
								},
							Element:span
								"sc"
								:{
							Element:span
								"type"
								:
							Element:span
								"n"
								},
							Element:span
								"lat"
								:{
							Element:span
								"type"
								:
							Element:span
								"n"
								},
							Element:span
								"lng"
								:{
							Element:span
								"type"
								:
							Element:span
								"n"
								},
							Element:span
								"av"
								:{
							Element:span
								"values"
								:[
							Element:span
								"1:4"
								,
							Element:span
								"3:1"
								,
							Element:span
								"1:7"
								,
							Element:span
								"1:3"
								],
							Element:span
								"type"
								:
							Element:span
								"l"
								},
							Element:span
								"d"
								:{
							Element:span
								"values"
								:[
							Element:span
								"iPod7,1"
								,
							Element:span
								"iPad3,6"
								,
							Element:span
								"MB860"
								,
							Element:span
								"Lumia 540"
								,
							Element:span
								"iPhone8,1"
								],
							Element:span
								"type"
								:
							Element:span
								"l"
								},
							Element:span
								"p"
								:{
							Element:span
								"values"
								:[
							Element:span
								"iOS"
								,
							Element:span
								"Android"
								,
							Element:span
								"Windows Phone"
								],
							Element:span
								"type"
								:
							Element:span
								"l"
								},
							Element:span
								"pv"
								:{
							Element:span
								"values"
								:[
							Element:span
								"i8:4:1"
								,
							Element:span
								"i10:1:1"
								,
							Element:span
								"a4:3:1"
								,
							Element:span
								"w8"
								,
							Element:span
								"i7:1:2"
								],
							Element:span
								"type"
								:
							Element:span
								"l"
								},
							Element:span
								"c"
								:{
							Element:span
								"values"
								:[
							Element:span
								"Verizon"
								,
							Element:span
								"Telus"
								,
							Element:span
								"Tele2"
								,
							Element:span
								"Orange"
								,
							Element:span
								"Vodafone"
								],
							Element:span
								"type"
								:
							Element:span
								"l"
								},
							Element:span
								"r"
								:{
							Element:span
								"values"
								:[
							Element:span
								"640x1136"
								,
							Element:span
								"600x800"
								,
							Element:span
								"480x800"
								,
							Element:span
								"768x1366"
								,
							Element:span
								"240x400"
								],
							Element:span
								"type"
								:
							Element:span
								"l"
								},
							Element:span
								"dnst"
								:{
							Element:span
								"values"
								:[
							Element:span
								"i@3"
								,
							Element:span
								"i@2"
								,
							Element:span
								"aXXHDPI"
								,
							Element:span
								"w2:5"
								],
							Element:span
								"type"
								:
							Element:span
								"l"
								},
							Element:span
								"la"
								:{
							Element:span
								"values"
								:[
							Element:span
								"fr"
								,
							Element:span
								"de"
								,
							Element:span
								"ja"
								,
							Element:span
								"it"
								,
							Element:span
								"en"
								,
							Element:span
								"ko"
								],
							Element:span
								"type"
								:
							Element:span
								"l"
								},
							Element:span
								"gender"
								:{
							Element:span
								"values"
								:[
							Element:span
								"M"
								,
							Element:span
								"F"
								],
							Element:span
								"type"
								:
							Element:span
								"l"
								},
							Element:span
								"src"
								:{
							Element:span
								"type"
								:
							Element:span
								"bl"
								},
							Element:span
								"name"
								:{
							Element:span
								"type"
								:
							Element:span
								"s"
								},
							Element:span
								"username"
								:{
							Element:span
								"type"
								:
							Element:span
								"s"
								},
							Element:span
								"email"
								:{
							Element:span
								"type"
								:
							Element:span
								"s"
								},
							Element:span
								"organization"
								:{
							Element:span
								"type"
								:
							Element:span
								"s"
								},
							Element:span
								"phone"
								:{
							Element:span
								"type"
								:
							Element:span
								"s"
								},
							Element:span
								"byear"
								:{
							Element:span
								"type"
								:
							Element:span
								"n"
								},
							Element:span
								"cdfs"
								:{
							Element:span
								"type"
								:
							Element:span
								"n"
								},
							Element:span
								"lv"
								:{
							Element:span
								"type"
								:
							Element:span
								"bl"
								},
							Element:span
								"tsd"
								:{
							Element:span
								"type"
								:
							Element:span
								"n"
								},
							Element:span
								"cwfs"
								:{
							Element:span
								"type"
								:
							Element:span
								"n"
								},
							Element:span
								"lp"
								:{
							Element:span
								"type"
								:
							Element:span
								"d"
								},
							Element:span
								"lpa"
								:{
							Element:span
								"type"
								:
							Element:span
								"n"
								},
							Element:span
								"tp"
								:{
							Element:span
								"type"
								:
							Element:span
								"n"
								},
							Element:span
								"tpc"
								:{
							Element:span
								"type"
								:
							Element:span
								"n"
								} },
							Element:span
								"custom"
								:{
							Element:span
								"Twitter Login"
								:{
							Element:span
								"values"
								:[
							Element:span
								"true"
								],
							Element:span
								"type"
								:
							Element:span
								"l"
								},
							Element:span
								"Twitter Login name"
								:{
							Element:span
								"values"
								:[
							Element:span
								"@rimanije"
								,
							Element:span
								"@ne"
								,
							Element:span
								"@ker"
								,
							Element:span
								"@vip"
								,
							Element:span
								"@ite"
								,
							Element:span
								"@voseero"
								,
							Element:span
								"@ocboite"
								],
							Element:span
								"type"
								:
							Element:span
								"l"
								},
							Element:span
								"Has Apple Watch OS"
								:{
							Element:span
								"values"
								:[
							Element:span
								"true"
								],
							Element:span
								"type"
								:
							Element:span
								"l"
								},
							Element:span
								"Facebook Login"
								:{
							Element:span
								"values"
								:[
							Element:span
								"true"
								],
							Element:span
								"type"
								:
							Element:span
								"l"
								} } }
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Query Params
									Node:
									(type) c
									(layer)3
										Element:strong
											api_key
											string
									Node:
									(type) c
									(layer)3
										Element:p
											API_KEY of user, with permission to access this app
									Node:
									(type) c
									(layer)3
										Element:strong
											app_id
											string
									Node:
									(type) c
									(layer)3
										Element:p
											ID of the app for which to query
									Node:
									(type) c
									(layer)3
										Element:strong
											event
											string
									Node:
									(type) c
									(layer)3
										Element:p
											Which event to query
									Node:
									(type) c
									(layer)3
										Element:strong
											callback
											string
									Node:
									(type) c
									(layer)3
										Element:p
											(optional) name of callback function for JSONP output
									Node:
									(type) c
									(layer)3
										Element:p
											This api returns all segment values for all properties in drill for provided event, except from big list properties, which have too many values and are stored separately.
									Node:
									(type) c
									(layer)3
										Element:a
									Node:
									(type) c
									(layer)3
										Element:a
										Element:i
											Suggest Edits
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								/o?method=segmentation_big_meta
						Node:
						(type) c
						(layer)2
							Element:p
								Fetches segments for big list properties (available since 16.12)
						Node:
						(type) c
						(layer)2
							Element:span
								get
								https://
						Node:
						(type) c
						(layer)2
							Element:span
							Element:span
								try.count.ly
							Element:span
								/o?method=segmentation_big_meta&api_key=
							Element:span
								api_key
							Element:span
								&app_id=
							Element:span
								app_id
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:a
								cURL
							Element:li
							Element:a
								Node
							Element:li
							Element:a
								Ruby
							Element:li
							Element:a
								JavaScript
							Element:li
							Element:a
								Python
						Node:
						(type) c
						(layer)2
							Element:i
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
							Element:span
								curl
							Element:span
								--request
								GET \
							Element:span
								--url
							Element:span
								'https://try.count.ly/o?app_id=app_id&api_key=api_key&method=segmentation_big_meta'
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
							Element:span
								var request = require("request");
							Element:span
								var
								options
							Element:span
								=
								{ method:
							Element:span
								'GET'
								, url:
							Element:span
								'https://try.count.ly/o'
								, qs: { app_id:
							Element:span
								'app_id'
								, api_key:
							Element:span
								'api_key'
								, method:
							Element:span
								'segmentation_big_meta'
								} }; request(options,
							Element:span
								function
								(
							Element:span
								error
								,
							Element:span
								response
								,
							Element:span
								body
								) {
							Element:span
								if
								(
							Element:span
								error
								)
							Element:span
								throw new
								Error(
							Element:span
								error
								); console.log(
							Element:span
								body
								); });
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
							Element:span
								require
							Element:span
								'uri'
							Element:span
								require
							Element:span
								'net/http'
								url = URI(
							Element:span
								"https://try.count.ly/o?app_id=app_id&api_key=api_key&method=segmentation_big_meta"
								) http
							Element:span
								=
							Element:span
								Net::HTTP
								.new(url.host, url.port) http.use_ssl = true http.verify_mode = OpenSSL::SSL::VERIFY_NONE request
							Element:span
								=
							Element:span
								Net::HTTP
								::Get.new(url) response = http.request(request) puts response.read_body
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
							Element:span
								var
								settings
							Element:span
								=
								{
							Element:span
								"async"
								: true,
							Element:span
								"crossDomain"
								: true,
							Element:span
								"url": "https://try.count.ly/o?app_id=app_id&api_key=api_key&method=segmentation_big_meta"
								,
							Element:span
								"method": "GET"
								,
							Element:span
								"headers"
								: {},
							Element:span
								"processData"
								: false } $.ajax(settings).done(
							Element:span
								function
								(
							Element:span
								response
								) { console.log(
							Element:span
								response
								); });
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
							Element:span
								import requests
								url =
							Element:span
								"https://try.count.ly/o"
								response = requests.request(
							Element:span
								"GET"
								, url)
							Element:span
								print
								(response.text)
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:a
							Element:span
							Element:i
							Element:em
								{{ results.statusCode[0] }}
								{{ results.statusCode[1] }}
							Element:a
								Metadata
							Element:a
							Element:span
								to examples
						Node:
						(type) c
						(layer)2
							Element:pre
						Node:
						(type) c
						(layer)2
							Element:label
								Method
								{{ results.method }}
						Node:
						(type) c
						(layer)2
							Element:label
								URL
								{{ results.url }}
						Node:
						(type) c
						(layer)2
							Element:label
								Request Headers
						Node:
						(type) c
						(layer)2
							Element:pre
								{{ results.requestHeaders }}
						Node:
						(type) c
						(layer)2
							Element:label
								Request Data
						Node:
						(type) c
						(layer)2
							Element:pre
								{{ results.data }}
						Node:
						(type) c
						(layer)2
							Element:label
								Status
						Node:
						(type) c
						(layer)2
							Element:span
						Node:
						(type) c
						(layer)2
							Element:label
								Response Headers
						Node:
						(type) c
						(layer)2
							Element:pre
								{{ results.responseHeaders }}
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:a
							Element:span
							Element:i
							Element:em
								200
								Simple Query
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								[
							Element:span
								"com.xiaomi.market"
								,
							Element:span
								"com.hiapk.marketpho"
								,
							Element:span
								"com.aliyun.wireless.vos.appstore"
								,
							Element:span
								"com.lenovo.leos.appstore"
								,
							Element:span
								"com.tencent.android.qqdownloader"
								,
							Element:span
								"com.diguayouxi"
								,
							Element:span
								"com.keenhi.mid.kitservice"
								,
							Element:span
								"com.wandoujia.phoenix2"
								,
							Element:span
								"com.google.vending"
								,
							Element:span
								"com.miui.supermarket"
								,
							Element:span
								"com.bbk.appstore"
								,
							Element:span
								"com.taobao.appcenter"
								,
							Element:span
								"com.huawei.appmarket"
								,
							Element:span
								"com.slideme.sam.manager"
								,
							Element:span
								"com.amazon.venezia"
								,
							Element:span
								"com.yingyonghui.market"
								,
							Element:span
								"me.onemobile.android"
								,
							Element:span
								"cn.goapk.market"
								,
							Element:span
								"com.nduoa.nmarket"
								,
							Element:span
								"cm.aptoide.pt"
								,
							Element:span
								"com.mappn.gfan"
								,
							Element:span
								"com.sec.android.app.samsungapps"
								,
							Element:span
								"com.android.browser"
								,
							Element:span
								"com.hiapk.marketpad"
								,
							Element:span
								"com.dragon.android.pandaspace"
								,
							Element:span
								"com.qihoo.appstore"
								,
							Element:span
								"com.android.vending"
								,
							Element:span
								"com.lenovo.leos.appstore.pad"
								,
							Element:span
								"com.oppo.market"
								,
							Element:span
								"com.appslib.vending"
								,
							Element:span
								"com.moto.mobile.appstore"
								,
							Element:span
								"com.aspire.mm"
								,
							Element:span
								"com.rim.marketintent"
								,
							Element:span
								"com.google.android.feedback"
								,
							Element:span
								"com.baidu.appsearch"
								,
							Element:span
								"com.nokia.payment.iapenabler"
								,
							Element:span
								"um.market.android"
								]
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Query Params
									Node:
									(type) c
									(layer)3
										Element:strong
											api_key
											string
									Node:
									(type) c
									(layer)3
										Element:p
											API_KEY of user, with permission to access this app
									Node:
									(type) c
									(layer)3
										Element:strong
											app_id
											string
									Node:
									(type) c
									(layer)3
										Element:p
											ID of the app for which to query
									Node:
									(type) c
									(layer)3
										Element:strong
											event
											string
									Node:
									(type) c
									(layer)3
										Element:p
											Which event to query
									Node:
									(type) c
									(layer)3
										Element:strong
											callback
											string
									Node:
									(type) c
									(layer)3
										Element:p
											(optional) name of callback function for JSONP output
									Node:
									(type) c
									(layer)3
										Element:strong
											prop
											string
									Node:
									(type) c
									(layer)3
										Element:p
											Property for which to fetch data (up.src, up.lv)
									Node:
									(type) c
									(layer)3
										Element:strong
											search
											string
									Node:
									(type) c
									(layer)3
										Element:p
											Regex search in the segment values
									Node:
									(type) c
									(layer)3
										Element:p
											Due to UI limitations by default this api outputs maximum of 200 items (configurable). But it is possible to pre filter with a regex through search parameter to return only set of values for which user is searching
									Node:
									(type) c
									(layer)3
										Element:a
									Node:
									(type) c
									(layer)3
										Element:a
										Element:i
											Suggest Edits
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								/i/pushes/prepare
						Node:
						(type) c
						(layer)2
							Element:span
								post
								https://
						Node:
						(type) c
						(layer)2
							Element:span
							Element:span
								try.count.ly
							Element:span
								/i/pushes/prepare?api_key=
							Element:span
								api_key
							Element:span
								&args=
							Element:span
								args
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:a
								cURL
							Element:li
							Element:a
								Node
							Element:li
							Element:a
								Ruby
							Element:li
							Element:a
								JavaScript
							Element:li
							Element:a
								Python
						Node:
						(type) c
						(layer)2
							Element:i
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
							Element:span
								curl
							Element:span
								--request
								POST \
							Element:span
								--url
							Element:span
								'https://try.count.ly/i/pushes/prepare?args.apps=
							Element:span
								args.apps
								&args.platforms=
							Element:span
								args.platforms
								&args=
							Element:span
								args
								&api_key=
							Element:span
								api_key
								'
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
							Element:span
								var request = require("request");
							Element:span
								var
								options
							Element:span
								=
								{ method:
							Element:span
								'POST'
								, url:
							Element:span
								'https://try.count.ly/i/pushes/prepare'
								, qs: {
							Element:span
								'args.apps': '
								,
							Element:span
								args.apps
								'
							Element:span
								'args.platforms': '
								, args:
							Element:span
								args.platforms
								'
							Element:span
								'
								, api_key:
							Element:span
								args
								'
							Element:span
								'
								} }; request(options,
							Element:span
								api_key
								'
							Element:span
								function
								(
							Element:span
								error
								,
							Element:span
								response
								,
							Element:span
								body
								) {
							Element:span
								if
								(
							Element:span
								error
								)
							Element:span
								throw new
								Error(
							Element:span
								error
								); console.log(
							Element:span
								body
								); });
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
							Element:span
								require
							Element:span
								'uri'
							Element:span
								require
							Element:span
								'net/http'
								url = URI(
							Element:span
								"https://try.count.ly/i/pushes/prepare?args.apps=
								) http
							Element:span
								args.apps
								&args.platforms=
							Element:span
								args.platforms
								&args=
							Element:span
								args
								&api_key=
							Element:span
								api_key
								"
							Element:span
								=
							Element:span
								Net::HTTP
								.new(url.host, url.port) http.use_ssl = true http.verify_mode = OpenSSL::SSL::VERIFY_NONE request
							Element:span
								=
							Element:span
								Net::HTTP
								::Post.new(url) response = http.request(request) puts response.read_body
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
							Element:span
								var
								settings
							Element:span
								=
								{
							Element:span
								"async"
								: true,
							Element:span
								"crossDomain"
								: true,
							Element:span
								"url": "https://try.count.ly/i/pushes/prepare?args.apps=
								,
							Element:span
								args.apps
								&args.platforms=
							Element:span
								args.platforms
								&args=
							Element:span
								args
								&api_key=
							Element:span
								api_key
								"
							Element:span
								"method": "POST"
								,
							Element:span
								"headers"
								: {},
							Element:span
								"processData"
								: false } $.ajax(settings).done(
							Element:span
								function
								(
							Element:span
								response
								) { console.log(
							Element:span
								response
								); });
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
							Element:span
								import requests
								url =
							Element:span
								"https://try.count.ly/i/pushes/prepare"
								querystring = {
							Element:span
								"args.apps":"
								} response = requests.request(
							Element:span
								args.apps
								","args.platforms":"
							Element:span
								args.platforms
								","args":"
							Element:span
								args
								","api_key":"
							Element:span
								api_key
								"
							Element:span
								"POST"
								, url, params=querystring)
							Element:span
								print
								(response.text)
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:a
							Element:span
							Element:i
							Element:em
								{{ results.statusCode[0] }}
								{{ results.statusCode[1] }}
							Element:a
								Metadata
							Element:a
							Element:span
								to examples
						Node:
						(type) c
						(layer)2
							Element:pre
						Node:
						(type) c
						(layer)2
							Element:label
								Method
								{{ results.method }}
						Node:
						(type) c
						(layer)2
							Element:label
								URL
								{{ results.url }}
						Node:
						(type) c
						(layer)2
							Element:label
								Request Headers
						Node:
						(type) c
						(layer)2
							Element:pre
								{{ results.requestHeaders }}
						Node:
						(type) c
						(layer)2
							Element:label
								Request Data
						Node:
						(type) c
						(layer)2
							Element:pre
								{{ results.data }}
						Node:
						(type) c
						(layer)2
							Element:label
								Status
						Node:
						(type) c
						(layer)2
							Element:span
						Node:
						(type) c
						(layer)2
							Element:label
								Response Headers
						Node:
						(type) c
						(layer)2
							Element:pre
								{{ results.responseHeaders }}
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:a
							Element:span
							Element:i
							Element:em
								200
								OK
							Element:a
							Element:span
							Element:i
							Element:em
								200
								OK
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								{
							Element:span
								"_id"
								:
							Element:span
								"5880a1270eb44470b3f706b8"
								,
							Element:span
								"apps"
								:[
							Element:span
								"52aadacf4d6c638517000001"
								],
							Element:span
								"appNames"
								:[
							Element:span
								"XXX"
								],
							Element:span
								"platforms"
								:[
							Element:span
								"i"
								],
							Element:span
								"result"
								:{
							Element:span
								"status"
								:
							Element:span
								1
								,
							Element:span
								"total"
								:
							Element:span
								0
								,
							Element:span
								"processed"
								:
							Element:span
								0
								,
							Element:span
								"sent"
								:
							Element:span
								0
								,
							Element:span
								"error"
								:
							Element:span
								null
								},
							Element:span
								"expiryDate"
								:
							Element:span
								"2017-01-26T11:21:11.792Z"
								,
							Element:span
								"tz"
								:
							Element:span
								false
								,
							Element:span
								"created"
								:
							Element:span
								null
								,
							Element:span
								"test"
								:
							Element:span
								false
								,
							Element:span
								"id"
								:
							Element:span
								"5880a1270eb44470b3f706b8"
								,
							Element:span
								"build"
								:{
							Element:span
								"total"
								:
							Element:span
								2120763
								} }
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								{
							Element:span
								"_id"
								:
							Element:span
								"5880a1270eb44470b3f706b8"
								,
							Element:span
								"apps"
								:[
							Element:span
								"52aadacf4d6c638517000001"
								],
							Element:span
								"appNames"
								:[
							Element:span
								"XXX"
								],
							Element:span
								"platforms"
								:[
							Element:span
								"i"
								],
							Element:span
								"result"
								:{
							Element:span
								"status"
								:
							Element:span
								1
								,
							Element:span
								"total"
								:
							Element:span
								2120763
								,
							Element:span
								"processed"
								:
							Element:span
								0
								,
							Element:span
								"sent"
								:
							Element:span
								0
								,
							Element:span
								"error"
								:
							Element:span
								null
								},
							Element:span
								"expiryDate"
								:
							Element:span
								"2017-01-26T11:21:11.792Z"
								,
							Element:span
								"tz"
								:
							Element:span
								false
								,
							Element:span
								"created"
								:
							Element:span
								null
								,
							Element:span
								"test"
								:
							Element:span
								false
								,
							Element:span
								"build"
								:{
							Element:span
								"count"
								:{
							Element:span
								"haw"
								:
							Element:span
								64
								,
							Element:span
								"ln"
								:
							Element:span
								1
								,
							Element:span
								"ca"
								:
							Element:span
								380
								,
							Element:span
								"gsw"
								:
							Element:span
								495
								,
							Element:span
								"bg"
								:
							Element:span
								269
								,
							Element:span
								"ka"
								:
							Element:span
								61
								,
							Element:span
								"nb"
								:
							Element:span
								29456
								,
							Element:span
								"en"
								:
							Element:span
								1691457
								,
							Element:span
								"pt"
								:
							Element:span
								35531
								,
							Element:span
								"sv"
								:
							Element:span
								26919
								,
							Element:span
								"ar"
								:
							Element:span
								74598
								,
							Element:span
								"is"
								:
							Element:span
								429
								,
							Element:span
								"uz"
								:
							Element:span
								6
								,
							Element:span
								"hu"
								:
							Element:span
								1653
								,
							Element:span
								"..."
								:
							Element:span
								0
								, },
							Element:span
								"total"
								:
							Element:span
								2120763
								,
							Element:span
								"tzs"
								:
							Element:span
								null
								} }
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Path Params
									Node:
									(type) c
									(layer)3
										Element:strong
											api_key
											stringrequired
									Node:
									(type) c
									(layer)3
										Element:p
											Admin API_KEY.
									Node:
									(type) c
									(layer)3
										Element:strong
											args
											stringrequired
									Node:
									(type) c
									(layer)3
										Element:p
											Stringified JSON object with future message data.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Query Params
									Node:
									(type) c
									(layer)3
										Element:strong
											args._id
											string
									Node:
									(type) c
									(layer)3
										Element:p
											ObjectID of previous build for this message if any
									Node:
									(type) c
									(layer)3
										Element:strong
											args.apps
											array of stringsrequired
									Node:
									(type) c
									(layer)3
										Element:p
											Array of app IDs
									Node:
									(type) c
									(layer)3
										Element:strong
											args.platforms
											array of stringsrequired
									Node:
									(type) c
									(layer)3
										Element:p
											Array of platform types (i for iOS & a for Android are supported)
									Node:
									(type) c
									(layer)3
										Element:strong
											args.userConditions
											object
									Node:
									(type) c
									(layer)3
										Element:p
											Conditions for app_users collections (JSON object)
									Node:
									(type) c
									(layer)3
										Element:strong
											args.drillConditions
											object
									Node:
									(type) c
									(layer)3
										Element:p
											Conditions for Drill query
									Node:
									(type) c
									(layer)3
										Element:strong
											args.test
											boolean
									Node:
									(type) c
									(layer)3
										Element:p
											Whether to send this message to test users or production users
									Node:
									(type) c
									(layer)3
										Element:strong
											args.geo
											string
									Node:
									(type) c
									(layer)3
										Element:p
											ID of geo location
									Node:
									(type) c
									(layer)3
										Element:strong
											args.tz
											boolean
									Node:
									(type) c
									(layer)3
										Element:p
											Send this message in user timezones
									Node:
									(type) c
									(layer)3
										Element:p
											In most cases, process of sending a message involves 2 steps:
									Node:
									(type) c
									(layer)3
										Element:ol
										Element:li
											Preparation, that is extracting push tokens from database and saving them in separate collection. This step also allows calculation of audience and gathering distinct user locales used in this message.
										Element:li
											Actual sending. That is taking prepared collection of tokens and sending push notifications to APN or GCM.
									Node:
									(type) c
									(layer)3
										Element:p
											When using API rather than Countly Dashboard, (1) can be done in background, so only request (2) is required. But in any case, (1) will be performed.
									Node:
									(type) c
									(layer)3
										Element:p
											This request performs step (1). It builds audience collection(s) and returns number of users found in the database along with number of users for each locale (tab 2 of example response).
									Node:
									(type) c
									(layer)3
										Element:p
											Note that sometimes, when calculation process takes too much time, request will return temporary result (tab 1 of example response) with only one
										Element:code
											total
											key in
										Element:code
											build
											property of returned JSON. Temporary
										Element:code
											total
											number represents total number of push-enabled users for all app-platform combinations supplied in request, meaning it's not final and it shouldn't be used for any important decisions. In this case the request can be submitted again, with same parameters and with
										Element:code
											_id
											returned in first response, to check if process of message preparing is finished. When done, response
										Element:code
											build
											key will have
										Element:code
											count
											subobject with locale information and optionally
										Element:code
											tzs
											key containing all timezones of audience built.
									Node:
									(type) c
									(layer)3
										Element:a
									Node:
									(type) c
									(layer)3
										Element:a
										Element:i
											Suggest Edits
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								/i/pushes/validate
						Node:
						(type) c
						(layer)2
							Element:span
								get
								https://
						Node:
						(type) c
						(layer)2
							Element:span
							Element:span
								try.count.ly
							Element:span
								/i/pushes/validate?api_key=
							Element:span
								api_key
							Element:span
								&appId=
							Element:span
								appId
							Element:span
								&platform=
							Element:span
								platform
							Element:span
								&test=
							Element:span
								test
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:a
								cURL
							Element:li
							Element:a
								Node
							Element:li
							Element:a
								Ruby
							Element:li
							Element:a
								JavaScript
							Element:li
							Element:a
								Python
						Node:
						(type) c
						(layer)2
							Element:i
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
							Element:span
								curl
							Element:span
								--request
								GET \
							Element:span
								--url
							Element:span
								'https://try.count.ly/i/pushes/validate?platform=
							Element:span
								platform
								&key=
							Element:span
								key
								&test=
							Element:span
								test
								&appId=
							Element:span
								appId
								&api_key=
							Element:span
								api_key
								'
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
							Element:span
								var request = require("request");
							Element:span
								var
								options
							Element:span
								=
								{ method:
							Element:span
								'GET'
								, url:
							Element:span
								'https://try.count.ly/i/pushes/validate'
								, qs: { platform:
							Element:span
								'
								, key:
							Element:span
								platform
								'
							Element:span
								'
								, test:
							Element:span
								key
								'
							Element:span
								'
								, appId:
							Element:span
								test
								'
							Element:span
								'
								, api_key:
							Element:span
								appId
								'
							Element:span
								'
								} }; request(options,
							Element:span
								api_key
								'
							Element:span
								function
								(
							Element:span
								error
								,
							Element:span
								response
								,
							Element:span
								body
								) {
							Element:span
								if
								(
							Element:span
								error
								)
							Element:span
								throw new
								Error(
							Element:span
								error
								); console.log(
							Element:span
								body
								); });
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
							Element:span
								require
							Element:span
								'uri'
							Element:span
								require
							Element:span
								'net/http'
								url = URI(
							Element:span
								"https://try.count.ly/i/pushes/validate?platform=
								) http
							Element:span
								platform
								&key=
							Element:span
								key
								&test=
							Element:span
								test
								&appId=
							Element:span
								appId
								&api_key=
							Element:span
								api_key
								"
							Element:span
								=
							Element:span
								Net::HTTP
								.new(url.host, url.port) http.use_ssl = true http.verify_mode = OpenSSL::SSL::VERIFY_NONE request
							Element:span
								=
							Element:span
								Net::HTTP
								::Get.new(url) response = http.request(request) puts response.read_body
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
							Element:span
								var
								settings
							Element:span
								=
								{
							Element:span
								"async"
								: true,
							Element:span
								"crossDomain"
								: true,
							Element:span
								"url": "https://try.count.ly/i/pushes/validate?platform=
								,
							Element:span
								platform
								&key=
							Element:span
								key
								&test=
							Element:span
								test
								&appId=
							Element:span
								appId
								&api_key=
							Element:span
								api_key
								"
							Element:span
								"method": "GET"
								,
							Element:span
								"headers"
								: {},
							Element:span
								"processData"
								: false } $.ajax(settings).done(
							Element:span
								function
								(
							Element:span
								response
								) { console.log(
							Element:span
								response
								); });
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
							Element:span
								import requests
								url =
							Element:span
								"https://try.count.ly/i/pushes/validate"
								querystring = {
							Element:span
								"platform":"
								} response = requests.request(
							Element:span
								platform
								","key":"
							Element:span
								key
								","test":"
							Element:span
								test
								","appId":"
							Element:span
								appId
								","api_key":"
							Element:span
								api_key
								"
							Element:span
								"GET"
								, url, params=querystring)
							Element:span
								print
								(response.text)
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:a
							Element:span
							Element:i
							Element:em
								{{ results.statusCode[0] }}
								{{ results.statusCode[1] }}
							Element:a
								Metadata
							Element:a
							Element:span
								to examples
						Node:
						(type) c
						(layer)2
							Element:pre
						Node:
						(type) c
						(layer)2
							Element:label
								Method
								{{ results.method }}
						Node:
						(type) c
						(layer)2
							Element:label
								URL
								{{ results.url }}
						Node:
						(type) c
						(layer)2
							Element:label
								Request Headers
						Node:
						(type) c
						(layer)2
							Element:pre
								{{ results.requestHeaders }}
						Node:
						(type) c
						(layer)2
							Element:label
								Request Data
						Node:
						(type) c
						(layer)2
							Element:pre
								{{ results.data }}
						Node:
						(type) c
						(layer)2
							Element:label
								Status
						Node:
						(type) c
						(layer)2
							Element:span
						Node:
						(type) c
						(layer)2
							Element:label
								Response Headers
						Node:
						(type) c
						(layer)2
							Element:pre
								{{ results.responseHeaders }}
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:a
							Element:span
							Element:i
							Element:em
								200
								Check succeeded
							Element:a
							Element:span
							Element:i
							Element:em
								200
								Check failed
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								{
							Element:span
								"cid"
								:
							Element:span
								"8cd8feb0692c558cbedeb5572615009b"
								}
						Node:
						(type) c
						(layer)2
							Element:pre
								{ "ok": false }
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Path Params
									Node:
									(type) c
									(layer)3
										Element:strong
											api_key
											stringrequired
									Node:
									(type) c
									(layer)3
										Element:p
											Admin API_KEY.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Query Params
									Node:
									(type) c
									(layer)3
										Element:strong
											platform
											stringrequired
									Node:
									(type) c
									(layer)3
										Element:p
											"i" for iOS, "a" for Android
									Node:
									(type) c
									(layer)3
										Element:strong
											key
											stringrequired
									Node:
									(type) c
									(layer)3
										Element:p
											Base64-encode P12 APN certificate or Google Server key
									Node:
									(type) c
									(layer)3
										Element:strong
											secret
											string
									Node:
									(type) c
									(layer)3
										Element:p
											Passphrase for APN certificate if any
									Node:
									(type) c
									(layer)3
										Element:strong
											type
											string
									Node:
									(type) c
									(layer)3
										Element:p
											Type of credentials: "apn_universal" or "gcm"
									Node:
									(type) c
									(layer)3
										Element:p
											This method validates supplied credentials by initiating connection to APN or GCM service and sending a valid message to invalid device token. If service responds with an error of invalid credentials, method returns JSON object with
										Element:code
											error
											key containing error message. In case of success, it returns JSON object with credentials _id saved in the database which can be added to any application later on.
									Node:
									(type) c
									(layer)3
										Element:a
									Node:
									(type) c
									(layer)3
										Element:a
										Element:i
											Suggest Edits
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								/i/pushes/refresh
						Node:
						(type) c
						(layer)2
							Element:span
								get
								https://
						Node:
						(type) c
						(layer)2
							Element:span
							Element:span
								try.count.ly
							Element:span
								/i/pushes/refresh?api_key=
							Element:span
								api_key
							Element:span
								&mid=
							Element:span
								mid
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:a
								cURL
							Element:li
							Element:a
								Node
							Element:li
							Element:a
								Ruby
							Element:li
							Element:a
								JavaScript
							Element:li
							Element:a
								Python
						Node:
						(type) c
						(layer)2
							Element:i
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
							Element:span
								curl
							Element:span
								--request
								GET \
							Element:span
								--url
							Element:span
								'https://try.count.ly/i/pushes/refresh?mid=
							Element:span
								mid
								&api_key=
							Element:span
								api_key
								'
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
							Element:span
								var request = require("request");
							Element:span
								var
								options
							Element:span
								=
								{ method:
							Element:span
								'GET'
								, url:
							Element:span
								'https://try.count.ly/i/pushes/refresh'
								, qs: { mid:
							Element:span
								'
								, api_key:
							Element:span
								mid
								'
							Element:span
								'
								} }; request(options,
							Element:span
								api_key
								'
							Element:span
								function
								(
							Element:span
								error
								,
							Element:span
								response
								,
							Element:span
								body
								) {
							Element:span
								if
								(
							Element:span
								error
								)
							Element:span
								throw new
								Error(
							Element:span
								error
								); console.log(
							Element:span
								body
								); });
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
							Element:span
								require
							Element:span
								'uri'
							Element:span
								require
							Element:span
								'net/http'
								url = URI(
							Element:span
								"https://try.count.ly/i/pushes/refresh?mid=
								) http
							Element:span
								mid
								&api_key=
							Element:span
								api_key
								"
							Element:span
								=
							Element:span
								Net::HTTP
								.new(url.host, url.port) http.use_ssl = true http.verify_mode = OpenSSL::SSL::VERIFY_NONE request
							Element:span
								=
							Element:span
								Net::HTTP
								::Get.new(url) response = http.request(request) puts response.read_body
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
							Element:span
								var
								settings
							Element:span
								=
								{
							Element:span
								"async"
								: true,
							Element:span
								"crossDomain"
								: true,
							Element:span
								"url": "https://try.count.ly/i/pushes/refresh?mid=
								,
							Element:span
								mid
								&api_key=
							Element:span
								api_key
								"
							Element:span
								"method": "GET"
								,
							Element:span
								"headers"
								: {},
							Element:span
								"processData"
								: false } $.ajax(settings).done(
							Element:span
								function
								(
							Element:span
								response
								) { console.log(
							Element:span
								response
								); });
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
							Element:span
								import requests
								url =
							Element:span
								"https://try.count.ly/i/pushes/refresh"
								response = requests.request(
							Element:span
								"GET"
								, url)
							Element:span
								print
								(response.text)
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:a
							Element:span
							Element:i
							Element:em
								{{ results.statusCode[0] }}
								{{ results.statusCode[1] }}
							Element:a
								Metadata
							Element:a
							Element:span
								to examples
						Node:
						(type) c
						(layer)2
							Element:pre
						Node:
						(type) c
						(layer)2
							Element:label
								Method
								{{ results.method }}
						Node:
						(type) c
						(layer)2
							Element:label
								URL
								{{ results.url }}
						Node:
						(type) c
						(layer)2
							Element:label
								Request Headers
						Node:
						(type) c
						(layer)2
							Element:pre
								{{ results.requestHeaders }}
						Node:
						(type) c
						(layer)2
							Element:label
								Request Data
						Node:
						(type) c
						(layer)2
							Element:pre
								{{ results.data }}
						Node:
						(type) c
						(layer)2
							Element:label
								Status
						Node:
						(type) c
						(layer)2
							Element:span
						Node:
						(type) c
						(layer)2
							Element:label
								Response Headers
						Node:
						(type) c
						(layer)2
							Element:pre
								{{ results.responseHeaders }}
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:a
							Element:span
							Element:i
							Element:em
								200
								OK
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								{
							Element:span
								"_id"
								:
							Element:span
								"5485c40d7506eb130a000003"
								,
							Element:span
								"apps"
								:[
							Element:span
								"547df8507b67dc8918000001"
								],
							Element:span
								"appNames"
								:[
							Element:span
								"AAA"
								],
							Element:span
								"platforms"
								:[
							Element:span
								"i"
								,
							Element:span
								"a"
								],
							Element:span
								"conditions"
								:{},
							Element:span
								"messagePerLocale"
								:{
							Element:span
								"default"
								:
							Element:span
								"OOpla"
								},
							Element:span
								"sound"
								:
							Element:span
								"default"
								,
							Element:span
								"result"
								:{
							Element:span
								"status"
								:
							Element:span
								8
								,
							Element:span
								"total"
								:
							Element:span
								123
								,
							Element:span
								"processed"
								:
							Element:span
								123
								,
							Element:span
								"sent"
								:
							Element:span
								123
								,
							Element:span
								"delivered"
								:
							Element:span
								90
								,
							Element:span
								"actioned"
								:
							Element:span
								43
								},
							Element:span
								"expiryDate"
								:
							Element:span
								"2014-12-15T15:30:21.510Z"
								,
							Element:span
								"created"
								:
							Element:span
								"2014-12-08T15:30:21.509Z"
								,
							Element:span
								"type"
								:
							Element:span
								"message"
								,
							Element:span
								"locales"
								:{
							Element:span
								"en"
								:
							Element:span
								1
								,
							Element:span
								"default"
								:
							Element:span
								1
								},
							Element:span
								"test"
								:
							Element:span
								false
								,
							Element:span
								"date"
								:
							Element:span
								"2014-12-08T15:30:21.510Z"
								,
							Element:span
								"pushly"
								:[ {
							Element:span
								"id"
								:
							Element:span
								"5485c40d7506eb130a000003|547df8507b67dc8918000001|ap.547df8507b67dc8918000001"
								,
							Element:span
								"query"
								:{
							Element:span
								"appId"
								:
							Element:span
								"547df8507b67dc8918000001"
								,
							Element:span
								"conditions"
								:{} },
							Element:span
								"result"
								:{
							Element:span
								"status"
								:
							Element:span
								8
								,
							Element:span
								"total"
								:
							Element:span
								100
								,
							Element:span
								"processed"
								:
							Element:span
								100
								,
							Element:span
								"sent"
								:
							Element:span
								70
								,
							Element:span
								"error"
								:
							Element:span
								null
								} }, {
							Element:span
								"id"
								:
							Element:span
								"5485c40d7506eb130a000003|547df8507b67dc8918000001|ip.547df8507b67dc8918000001"
								,
							Element:span
								"query"
								:{
							Element:span
								"appId"
								:
							Element:span
								"547df8507b67dc8918000001"
								,
							Element:span
								"conditions"
								:{} },
							Element:span
								"result"
								:{
							Element:span
								"status"
								:
							Element:span
								8
								,
							Element:span
								"total"
								:
							Element:span
								23
								,
							Element:span
								"processed"
								:
							Element:span
								23
								,
							Element:span
								"sent"
								:
							Element:span
								20
								,
							Element:span
								"error"
								:
							Element:span
								null
								} } ],
							Element:span
								"sent"
								:
							Element:span
								"2014-12-08T15:30:24.143Z"
								}
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Path Params
									Node:
									(type) c
									(layer)3
										Element:strong
											api_key
											stringrequired
									Node:
									(type) c
									(layer)3
										Element:p
											Admin API_KEY.
									Node:
									(type) c
									(layer)3
										Element:strong
											mid
											stringrequired
									Node:
									(type) c
									(layer)3
										Element:p
											ID of message to refresh
									Node:
									(type) c
									(layer)3
										Element:p
											This method just retrieves message object from database and returns it. It's useful when you want to check status of message which is being sent right now.
									Node:
									(type) c
									(layer)3
										Element:p
											Note that there is
										Element:em
											pushly
											property which contains partial messages for a particular app-platform-test combination. Those are atomic messages from Countly perspective and are useful only if you want to know how recipients of this message are distributed across various apps or platforms. Another use case is when an error occurred only with one of those partial messages, but others are processed well and you want to know the reason of that error.
									Node:
									(type) c
									(layer)3
										Element:p
											Top
										Element:em
											result
											property of message is just an aggregation of all its partial messages from
										Element:em
											pushly
											property.
									Node:
									(type) c
									(layer)3
										Element:a
									Node:
									(type) c
									(layer)3
										Element:a
										Element:i
											Suggest Edits
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								/i/pushes/create
						Node:
						(type) c
						(layer)2
							Element:span
								post
								https://
						Node:
						(type) c
						(layer)2
							Element:span
							Element:span
								try.count.ly
							Element:span
								/i/pushes/create?api_key=
							Element:span
								api_key
							Element:span
								&args=
							Element:span
								args
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:a
								cURL
							Element:li
							Element:a
								Node
							Element:li
							Element:a
								Ruby
							Element:li
							Element:a
								JavaScript
							Element:li
							Element:a
								Python
						Node:
						(type) c
						(layer)2
							Element:i
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
							Element:span
								curl
							Element:span
								--request
								POST \
							Element:span
								--url
							Element:span
								'https://try.count.ly/i/pushes/create?args.type=
							Element:span
								args.type
								&args.apps=
							Element:span
								args.apps
								&args.platforms=
							Element:span
								args.platforms
								&args=
							Element:span
								args
								&api_key=
							Element:span
								api_key
								'
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
							Element:span
								var request = require("request");
							Element:span
								var
								options
							Element:span
								=
								{ method:
							Element:span
								'POST'
								, url:
							Element:span
								'https://try.count.ly/i/pushes/create'
								, qs: {
							Element:span
								'args.type': '
								,
							Element:span
								args.type
								'
							Element:span
								'args.apps': '
								,
							Element:span
								args.apps
								'
							Element:span
								'args.platforms': '
								, args:
							Element:span
								args.platforms
								'
							Element:span
								'
								, api_key:
							Element:span
								args
								'
							Element:span
								'
								} }; request(options,
							Element:span
								api_key
								'
							Element:span
								function
								(
							Element:span
								error
								,
							Element:span
								response
								,
							Element:span
								body
								) {
							Element:span
								if
								(
							Element:span
								error
								)
							Element:span
								throw new
								Error(
							Element:span
								error
								); console.log(
							Element:span
								body
								); });
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
							Element:span
								require
							Element:span
								'uri'
							Element:span
								require
							Element:span
								'net/http'
								url = URI(
							Element:span
								"https://try.count.ly/i/pushes/create?args.type=
								) http
							Element:span
								args.type
								&args.apps=
							Element:span
								args.apps
								&args.platforms=
							Element:span
								args.platforms
								&args=
							Element:span
								args
								&api_key=
							Element:span
								api_key
								"
							Element:span
								=
							Element:span
								Net::HTTP
								.new(url.host, url.port) http.use_ssl = true http.verify_mode = OpenSSL::SSL::VERIFY_NONE request
							Element:span
								=
							Element:span
								Net::HTTP
								::Post.new(url) response = http.request(request) puts response.read_body
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
							Element:span
								var
								settings
							Element:span
								=
								{
							Element:span
								"async"
								: true,
							Element:span
								"crossDomain"
								: true,
							Element:span
								"url": "https://try.count.ly/i/pushes/create?args.type=
								,
							Element:span
								args.type
								&args.apps=
							Element:span
								args.apps
								&args.platforms=
							Element:span
								args.platforms
								&args=
							Element:span
								args
								&api_key=
							Element:span
								api_key
								"
							Element:span
								"method": "POST"
								,
							Element:span
								"headers"
								: {},
							Element:span
								"processData"
								: false } $.ajax(settings).done(
							Element:span
								function
								(
							Element:span
								response
								) { console.log(
							Element:span
								response
								); });
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
							Element:span
								import requests
								url =
							Element:span
								"https://try.count.ly/i/pushes/create"
								querystring = {
							Element:span
								"args.type":"
								} response = requests.request(
							Element:span
								args.type
								","args.apps":"
							Element:span
								args.apps
								","args.platforms":"
							Element:span
								args.platforms
								","args":"
							Element:span
								args
								","api_key":"
							Element:span
								api_key
								"
							Element:span
								"POST"
								, url, params=querystring)
							Element:span
								print
								(response.text)
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:a
							Element:span
							Element:i
							Element:em
								{{ results.statusCode[0] }}
								{{ results.statusCode[1] }}
							Element:a
								Metadata
							Element:a
							Element:span
								to examples
						Node:
						(type) c
						(layer)2
							Element:pre
						Node:
						(type) c
						(layer)2
							Element:label
								Method
								{{ results.method }}
						Node:
						(type) c
						(layer)2
							Element:label
								URL
								{{ results.url }}
						Node:
						(type) c
						(layer)2
							Element:label
								Request Headers
						Node:
						(type) c
						(layer)2
							Element:pre
								{{ results.requestHeaders }}
						Node:
						(type) c
						(layer)2
							Element:label
								Request Data
						Node:
						(type) c
						(layer)2
							Element:pre
								{{ results.data }}
						Node:
						(type) c
						(layer)2
							Element:label
								Status
						Node:
						(type) c
						(layer)2
							Element:span
						Node:
						(type) c
						(layer)2
							Element:label
								Response Headers
						Node:
						(type) c
						(layer)2
							Element:pre
								{{ results.responseHeaders }}
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:a
							Element:span
							Element:i
							Element:em
								200
								OK
							Element:a
							Element:span
							Element:i
							Element:em
								200
								Validation error
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								{
							Element:span
								"type"
								:
							Element:span
								"message"
								,
							Element:span
								"apps"
								:[
							Element:span
								"547df8507b67dc8918000001"
								],
							Element:span
								"appNames"
								:[
							Element:span
								"AAA"
								],
							Element:span
								"status"
								:
							Element:span
								0
								,
							Element:span
								"platforms"
								:[
							Element:span
								"i"
								,
							Element:span
								"a"
								],
							Element:span
								"conditions"
								:{},
							Element:span
								"messagePerLocale"
								:{
							Element:span
								"default"
								:
							Element:span
								"Default message"
								,
							Element:span
								"en"
								:
							Element:span
								"Message in English"
								},
							Element:span
								"sound"
								:
							Element:span
								"default"
								,
							Element:span
								"badge"
								:
							Element:span
								3
								,
							Element:span
								"result"
								:{
							Element:span
								"status"
								:
							Element:span
								0
								,
							Element:span
								"total"
								:
							Element:span
								0
								,
							Element:span
								"processed"
								:
							Element:span
								0
								,
							Element:span
								"sent"
								:
							Element:span
								0
								},
							Element:span
								"expiryDate"
								:
							Element:span
								"2014-12-18T13:45:18.023Z"
								,
							Element:span
								"created"
								:
							Element:span
								"2014-12-11T13:45:18.022Z"
								,
							Element:span
								"_id"
								:
							Element:span
								"54899fee267e19eb2c000004"
								,
							Element:span
								"locales"
								:{
							Element:span
								"en"
								:
							Element:span
								0.9
								,
							Element:span
								"default"
								:
							Element:span
								0.1
								},
							Element:span
								"test"
								:
							Element:span
								false
								,
							Element:span
								"date"
								:
							Element:span
								"2014-12-11T13:45:18.023Z"
								}
						Node:
						(type) c
						(layer)2
							Element:pre
								{ "error": "Bad message type" }
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Path Params
									Node:
									(type) c
									(layer)3
										Element:strong
											api_key
											stringrequired
									Node:
									(type) c
									(layer)3
										Element:p
											Admin API_KEY.
									Node:
									(type) c
									(layer)3
										Element:strong
											args
											stringrequired
									Node:
									(type) c
									(layer)3
										Element:p
											JSON object as string with audience data.
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Query Params
									Node:
									(type) c
									(layer)3
										Element:strong
											args._id
											string
									Node:
									(type) c
									(layer)3
										Element:p
											ID of prepared message if any
									Node:
									(type) c
									(layer)3
										Element:strong
											args.type
											stringrequired
									Node:
									(type) c
									(layer)3
										Element:p
											Message type ('message', 'data')
									Node:
									(type) c
									(layer)3
										Element:strong
											args.apps
											array of stringsrequired
									Node:
									(type) c
									(layer)3
										Element:p
											Array of app ID strings
									Node:
									(type) c
									(layer)3
										Element:strong
											args.platforms
											array of stringsrequired
									Node:
									(type) c
									(layer)3
										Element:p
											Array of platform types ('i' for iOS & 'a' for Android)
									Node:
									(type) c
									(layer)3
										Element:strong
											args.messagePerLocale
											object
									Node:
									(type) c
									(layer)3
										Element:p
											Object with message strings per each locale used or default message.
									Node:
									(type) c
									(layer)3
										Element:strong
											args.locales
											object
									Node:
									(type) c
									(layer)3
										Element:p
											Optional object, required for correct displaying of locale distribution in Countly Dashboard
									Node:
									(type) c
									(layer)3
										Element:strong
											args.data
											object
									Node:
									(type) c
									(layer)3
										Element:p
											Optional JSON data to send in message
									Node:
									(type) c
									(layer)3
										Element:strong
											args.userConditions
											object
									Node:
									(type) c
									(layer)3
										Element:p
											Conditions for app_users collections
									Node:
									(type) c
									(layer)3
										Element:strong
											args.sound
											string
									Node:
									(type) c
									(layer)3
										Element:p
											String, containing sound name to play when message arrives
									Node:
									(type) c
									(layer)3
										Element:strong
											args.badge
											int32
									Node:
									(type) c
									(layer)3
										Element:p
											Badge number to set on your app icon (iOS only)
									Node:
									(type) c
									(layer)3
										Element:strong
											args.url
											string
									Node:
									(type) c
									(layer)3
										Element:p
											URL of link to open, only used & required for 'link' message type
									Node:
									(type) c
									(layer)3
										Element:strong
											args.contentAvailable
											boolean
									Node:
									(type) c
									(layer)3
										Element:p
											Whether to set 'content-available' flag in message (iOS only)
									Node:
									(type) c
									(layer)3
										Element:strong
											args.newsstandAvailable
											boolean
									Node:
									(type) c
									(layer)3
										Element:p
											Whether to set 'newsstand-available' flag in message (iOS only)
									Node:
									(type) c
									(layer)3
										Element:strong
											args.collapseKey
											string
									Node:
									(type) c
									(layer)3
										Element:p
											Collapse key (Android only)
									Node:
									(type) c
									(layer)3
										Element:strong
											args.delayWhileIdle
											boolean
									Node:
									(type) c
									(layer)3
										Element:p
											Whether to delay message delivery until device will become active (Android only)
									Node:
									(type) c
									(layer)3
										Element:strong
											args.date
											date-time
									Node:
									(type) c
									(layer)3
										Element:p
											When to send this message. Leave it empty to send the message immediately.
									Node:
									(type) c
									(layer)3
										Element:strong
											args.test
											boolean
									Node:
									(type) c
									(layer)3
										Element:p
											Whether to send this message to test users or production users
									Node:
									(type) c
									(layer)3
										Element:strong
											args.drillConditions
											object
									Node:
									(type) c
									(layer)3
										Element:p
											Conditions for Drill query
									Node:
									(type) c
									(layer)3
										Element:strong
											args.tz
											boolean
									Node:
									(type) c
									(layer)3
										Element:p
											Whether to send this message In user timezones
									Node:
									(type) c
									(layer)3
										Element:strong
											args.source
											string
									Node:
									(type) c
									(layer)3
										Element:p
											Source of message: "api" or "dash" for API-originated & dashboard-originated messages respectively
									Node:
									(type) c
									(layer)3
										Element:p
											In most cases, process of sending a message involves 2 steps:
									Node:
									(type) c
									(layer)3
										Element:ol
										Element:li
											Preparation, that is extracting push tokens from database and saving them in separate collection. This step also allows calculation of audience and gathering distinct user locales used in this message.
										Element:li
											Actual sending. That is taking prepared collection of tokens and sending push notifications to APN or GCM.
									Node:
									(type) c
									(layer)3
										Element:p
											When using API rather than Countly Dashboard, (1) can be done in background, so only request (2) is required. But in any case, (1) will be performed.
									Node:
									(type) c
									(layer)3
										Element:p
											This request performs step (2). It creates message and schedules a job for this message after step (1) is complete.
									Node:
									(type) c
									(layer)3
										Element:p
											Note that while most of arguments are cross-platform, there are still some differences between iOS & Android platforms which need to be addressed.
									Node:
									(type) c
									(layer)3
										Element:p
											Returned JSON contains full message object. Note that Countly supports sending messages to multiple apps at once and even to multiple platforms at once.
			Node:
			(type) h1
			(layer)1
				Element:h1
					Message status
				Element:a
			Node:
			(type) c
			(layer)1
				Element:p
					Countly message status (
					Number Status
				Element:code
					result.status
					key) is a bitmap of following statuses:
			Node:
			(type) c
			(layer)1
				Element:p
					0 (0)
			Node:
			(type) c
			(layer)1
				Element:p
					Initial
			Node:
			(type) c
			(layer)1
				Element:p
					2 (1 << 1)
			Node:
			(type) c
			(layer)1
				Element:p
					InQueue - being ready to be sent, waiting in queue
			Node:
			(type) c
			(layer)1
				Element:p
					4 (1 << 2)
			Node:
			(type) c
			(layer)1
				Element:p
					InProcessing - being sent
			Node:
			(type) c
			(layer)1
				Element:p
					8 (1 << 3)
			Node:
			(type) c
			(layer)1
				Element:p
					Done - done with processing
			Node:
			(type) c
			(layer)1
				Element:p
					16 (1 << 4)
			Node:
			(type) c
			(layer)1
				Element:p
					Error - error occurred, see
				Element:em
					result.error
					property
			Node:
			(type) c
			(layer)1
				Element:p
					32 (1 << 5)
			Node:
			(type) c
			(layer)1
				Element:p
					Aborted or Cancelled - sending process was aborted
			Node:
			(type) h1
			(layer)1
				Element:h1
					Message result
				Element:a
			Node:
			(type) c
			(layer)1
				Element:p
					Result is a JSON object containing results of message sending process:
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:a
					Text
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
					{ "status": 4, "total": 23812, "processed": 123, "sent": 120 }
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:em
					total
					number represents total number of recipients found for this message;
				Element:li
				Element:em
					processed
					number shows number of notifications sent to APN or GCM service;
				Element:li
				Element:em
					sent
					number represents number of notifications accepted by APN or GCM (tokens are valid).
			Node:
			(type) h1
			(layer)1
				Element:h1
					Message localisation
				Element:a
			Node:
			(type) c
			(layer)1
				Element:p
					To localise your messages, you need to supply correct
				Element:em
					messagePerLocale
					property:
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:a
					JavaScript
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
					{
				Element:span
					"default"
					:
				Element:span
					"Default message"
					,
				Element:span
					"en"
					:
				Element:span
					"Message in English"
					,
				Element:span
					"de"
					:
				Element:span
					"... in Deutsch"
					,
				Element:span
					"ru"
					:
				Element:span
					"... на Русском"
					}
			Node:
			(type) c
			(layer)1
				Element:p
					Correct
				Element:em
					messagePerLocale
					object must have "default" message and a message per each locale you want your message to be localized in.
			Node:
			(type) c
			(layer)1
				Element:p
					Language codes are 2-character codes from ISO 639-1 taken from corresponding iOS & Android APIs with exception of all Chinese-language locales (China, Taiwan, etc.) which have only two codes:
				Element:em
					"zh_hans"
					for Simplified Chinese and
				Element:em
					"zh_hant"
					for Traditional Chinese.
			Node:
			(type) c
			(layer)1
				Element:p
					Note that
				Element:em
					locale
					parameter is just a helper for Countly Dashboard which contains percentages (from 0.0 to 1.0) for all message texts specified in
				Element:em
					messagePerLocale
					for this message (when the message was created). Example message above has
				Element:em
					locale
					property saying that 90% of message recipients have English language on their devices, while other 10% of users have other locales and Countly will send
				Element:em
					default
					message to them. This distribution is acquired from
				Element:a
					/i/pushes/prepare
					method.
			Node:
			(type) h1
			(layer)1
				Element:h1
					Message sounds
				Element:a
			Node:
			(type) c
			(layer)1
				Element:p
					Behaviour of
				Element:em
					sound
					property is not cross-platform unless you pay attention to your app implementation:
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					On iOS,
				Element:em
					sound
					is what it should be - just a
				Element:em
					sound
					property in message JSON, see Apple documentation:
				Element:a
					Preparing Custom Alert Sounds
					.
				Element:li
					On Android,
				Element:em
					sound
					must be a
				Element:code
					Uri
					pointing at corresponding sound file with an exception of
				Element:code
					"default"
					value which falls back to default sound of notification -
				Element:code
					Notification.DEFAULT_SOUND
					.
			Node:
			(type) c
			(layer)1
				Element:a
			Node:
			(type) c
			(layer)1
				Element:a
				Element:i
					Suggest Edits
			Node:
			(type) c
			(layer)1
				Element:h2
					/i/pushes/delete
			Node:
			(type) c
			(layer)1
				Element:span
					get
					https://
			Node:
			(type) c
			(layer)1
				Element:span
				Element:span
					try.count.ly
				Element:span
					/i/pushes/delete?api_key=
				Element:span
					api_key
				Element:span
					&mid=
				Element:span
					mid
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:a
					cURL
				Element:li
				Element:a
					Node
				Element:li
				Element:a
					Ruby
				Element:li
				Element:a
					JavaScript
				Element:li
				Element:a
					Python
			Node:
			(type) c
			(layer)1
				Element:i
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
				Element:span
					curl
				Element:span
					--request
					GET \
				Element:span
					--url
				Element:span
					'https://try.count.ly/i/pushes/delete?mid=
				Element:span
					mid
					&api_key=
				Element:span
					api_key
					'
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
				Element:span
					var request = require("request");
				Element:span
					var
					options
				Element:span
					=
					{ method:
				Element:span
					'GET'
					, url:
				Element:span
					'https://try.count.ly/i/pushes/delete'
					, qs: { mid:
				Element:span
					'
					, api_key:
				Element:span
					mid
					'
				Element:span
					'
					} }; request(options,
				Element:span
					api_key
					'
				Element:span
					function
					(
				Element:span
					error
					,
				Element:span
					response
					,
				Element:span
					body
					) {
				Element:span
					if
					(
				Element:span
					error
					)
				Element:span
					throw new
					Error(
				Element:span
					error
					); console.log(
				Element:span
					body
					); });
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
				Element:span
					require
				Element:span
					'uri'
				Element:span
					require
				Element:span
					'net/http'
					url = URI(
				Element:span
					"https://try.count.ly/i/pushes/delete?mid=
					) http
				Element:span
					mid
					&api_key=
				Element:span
					api_key
					"
				Element:span
					=
				Element:span
					Net::HTTP
					.new(url.host, url.port) http.use_ssl = true http.verify_mode = OpenSSL::SSL::VERIFY_NONE request
				Element:span
					=
				Element:span
					Net::HTTP
					::Get.new(url) response = http.request(request) puts response.read_body
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
				Element:span
					var
					settings
				Element:span
					=
					{
				Element:span
					"async"
					: true,
				Element:span
					"crossDomain"
					: true,
				Element:span
					"url": "https://try.count.ly/i/pushes/delete?mid=
					,
				Element:span
					mid
					&api_key=
				Element:span
					api_key
					"
				Element:span
					"method": "GET"
					,
				Element:span
					"headers"
					: {},
				Element:span
					"processData"
					: false } $.ajax(settings).done(
				Element:span
					function
					(
				Element:span
					response
					) { console.log(
				Element:span
					response
					); });
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
				Element:span
					import requests
					url =
				Element:span
					"https://try.count.ly/i/pushes/delete"
					response = requests.request(
				Element:span
					"GET"
					, url)
				Element:span
					print
					(response.text)
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:a
				Element:span
				Element:i
				Element:em
					{{ results.statusCode[0] }}
					{{ results.statusCode[1] }}
				Element:a
					Metadata
				Element:a
				Element:span
					to examples
			Node:
			(type) c
			(layer)1
				Element:pre
			Node:
			(type) c
			(layer)1
				Element:label
					Method
					{{ results.method }}
			Node:
			(type) c
			(layer)1
				Element:label
					URL
					{{ results.url }}
			Node:
			(type) c
			(layer)1
				Element:label
					Request Headers
			Node:
			(type) c
			(layer)1
				Element:pre
					{{ results.requestHeaders }}
			Node:
			(type) c
			(layer)1
				Element:label
					Request Data
			Node:
			(type) c
			(layer)1
				Element:pre
					{{ results.data }}
			Node:
			(type) c
			(layer)1
				Element:label
					Status
			Node:
			(type) c
			(layer)1
				Element:span
			Node:
			(type) c
			(layer)1
				Element:label
					Response Headers
			Node:
			(type) c
			(layer)1
				Element:pre
					{{ results.responseHeaders }}
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:a
				Element:span
				Element:i
				Element:em
					200
					OK
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
					{
				Element:span
					"_id"
					:
				Element:span
					"5485c40d7506eb130a000003"
					,
				Element:span
					"apps"
					:[
				Element:span
					"547df8507b67dc8918000001"
					],
				Element:span
					"appNames"
					:[
				Element:span
					"AAA"
					],
				Element:span
					"status"
					:
				Element:span
					0
					,
				Element:span
					"platforms"
					:[
				Element:span
					"i"
					,
				Element:span
					"a"
					],
				Element:span
					"conditions"
					:{},
				Element:span
					"messagePerLocale"
					:{
				Element:span
					"default"
					:
				Element:span
					"OOpla"
					},
				Element:span
					"sound"
					:
				Element:span
					"default"
					,
				Element:span
					"result"
					:{
				Element:span
					"status"
					:
				Element:span
					8
					,
				Element:span
					"total"
					:
				Element:span
					123
					,
				Element:span
					"processed"
					:
				Element:span
					123
					,
				Element:span
					"sent"
					:
				Element:span
					123
					,
				Element:span
					"delivered"
					:
				Element:span
					90
					,
				Element:span
					"actioned"
					:
				Element:span
					43
					},
				Element:span
					"expiryDate"
					:
				Element:span
					"2014-12-15T15:30:21.510Z"
					,
				Element:span
					"created"
					:
				Element:span
					"2014-12-08T15:30:21.509Z"
					,
				Element:span
					"type"
					:
				Element:span
					"message"
					,
				Element:span
					"locales"
					:{
				Element:span
					"en"
					:
				Element:span
					1
					,
				Element:span
					"default"
					:
				Element:span
					1
					},
				Element:span
					"test"
					:
				Element:span
					false
					,
				Element:span
					"date"
					:
				Element:span
					"2014-12-08T15:30:21.510Z"
					,
				Element:span
					"pushly"
					:[ {
				Element:span
					"id"
					:
				Element:span
					"5485c40d7506eb130a000003|547df8507b67dc8918000001|ap.547df8507b67dc8918000001"
					,
				Element:span
					"query"
					:{
				Element:span
					"appId"
					:
				Element:span
					"547df8507b67dc8918000001"
					,
				Element:span
					"conditions"
					:{} },
				Element:span
					"result"
					:{
				Element:span
					"status"
					:
				Element:span
					8
					,
				Element:span
					"total"
					:
				Element:span
					100
					,
				Element:span
					"processed"
					:
				Element:span
					100
					,
				Element:span
					"sent"
					:
				Element:span
					70
					,
				Element:span
					"error"
					:
				Element:span
					null
					} }, {
				Element:span
					"id"
					:
				Element:span
					"5485c40d7506eb130a000003|547df8507b67dc8918000001|ip.547df8507b67dc8918000001"
					,
				Element:span
					"query"
					:{
				Element:span
					"appId"
					:
				Element:span
					"547df8507b67dc8918000001"
					,
				Element:span
					"conditions"
					:{} },
				Element:span
					"result"
					:{
				Element:span
					"status"
					:
				Element:span
					8
					,
				Element:span
					"total"
					:
				Element:span
					23
					,
				Element:span
					"processed"
					:
				Element:span
					23
					,
				Element:span
					"sent"
					:
				Element:span
					20
					,
				Element:span
					"error"
					:
				Element:span
					null
					} } ],
				Element:span
					"sent"
					:
				Element:span
					"2014-12-08T15:30:24.143Z"
					,
				Element:span
					"deleted"
					:
				Element:span
					true
					}
			Node:
			(type) c
			(layer)1
				Element:h3
					Path Params
			Node:
			(type) c
			(layer)1
				Element:strong
					api_key
					stringrequired
			Node:
			(type) c
			(layer)1
				Element:p
					Admin API_KEY.
			Node:
			(type) c
			(layer)1
				Element:strong
					mid
					stringrequired
			Node:
			(type) c
			(layer)1
				Element:p
					ID of message to delete
			Node:
			(type) c
			(layer)1
				Element:p
					This method marks the message as deleted (note
				Element:code
					"deleted": true
					in JSON). If message has status
				Element:code
					InProcessing
					, processing of it will be aborted and it will have status
				Element:code
					Aborted
					.
			Node:
			(type) c
			(layer)1
				Element:a
			Node:
			(type) c
			(layer)1
				Element:a
				Element:i
					Suggest Edits
			Node:
			(type) c
			(layer)1
				Element:h2
					/o/campaign
			Node:
			(type) c
			(layer)1
				Element:p
					Retrieve data of all campaigns
			Node:
			(type) c
			(layer)1
				Element:span
					get
					https://
			Node:
			(type) c
			(layer)1
				Element:span
				Element:span
					try.count.ly
				Element:span
					/o/campaign&api_key=
				Element:span
					api_key
				Element:span
					&app_id=
				Element:span
					app_id
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:a
					cURL
				Element:li
				Element:a
					Node
				Element:li
				Element:a
					Ruby
				Element:li
				Element:a
					JavaScript
				Element:li
				Element:a
					Python
			Node:
			(type) c
			(layer)1
				Element:i
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
				Element:span
					curl
				Element:span
					--request
					GET \
				Element:span
					--url
				Element:span
					'https://try.count.ly/o/campaign&api_key=
				Element:span
					api_key
					&app_id=
				Element:span
					app_id
					'
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
				Element:span
					var request = require("request");
				Element:span
					var
					options
				Element:span
					=
					{ method:
				Element:span
					'GET'
					, url:
				Element:span
					'https://try.count.ly/o/campaign&api_key=
					}; request(options,
				Element:span
					api_key
					&app_id=
				Element:span
					app_id
					'
				Element:span
					function
					(
				Element:span
					error
					,
				Element:span
					response
					,
				Element:span
					body
					) {
				Element:span
					if
					(
				Element:span
					error
					)
				Element:span
					throw new
					Error(
				Element:span
					error
					); console.log(
				Element:span
					body
					); });
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
				Element:span
					require
				Element:span
					'uri'
				Element:span
					require
				Element:span
					'net/http'
					url = URI(
				Element:span
					"https://try.count.ly/o/campaign&api_key=
					) http
				Element:span
					api_key
					&app_id=
				Element:span
					app_id
					"
				Element:span
					=
				Element:span
					Net::HTTP
					.new(url.host, url.port) http.use_ssl = true http.verify_mode = OpenSSL::SSL::VERIFY_NONE request
				Element:span
					=
				Element:span
					Net::HTTP
					::Get.new(url) response = http.request(request) puts response.read_body
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
				Element:span
					var
					settings
				Element:span
					=
					{
				Element:span
					"async"
					: true,
				Element:span
					"crossDomain"
					: true,
				Element:span
					"url": "https://try.count.ly/o/campaign&api_key=
					,
				Element:span
					api_key
					&app_id=
				Element:span
					app_id
					"
				Element:span
					"method": "GET"
					,
				Element:span
					"headers"
					: {},
				Element:span
					"processData"
					: false } $.ajax(settings).done(
				Element:span
					function
					(
				Element:span
					response
					) { console.log(
				Element:span
					response
					); });
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
				Element:span
					import requests
					url =
				Element:span
					"https://try.count.ly/o/campaign&api_key=
					response = requests.request(
				Element:span
					api_key
					&app_id=
				Element:span
					app_id
					"
				Element:span
					"GET"
					, url)
				Element:span
					print
					(response.text)
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:a
				Element:span
				Element:i
				Element:em
					{{ results.statusCode[0] }}
					{{ results.statusCode[1] }}
				Element:a
					Metadata
				Element:a
				Element:span
					to examples
			Node:
			(type) c
			(layer)1
				Element:pre
			Node:
			(type) c
			(layer)1
				Element:label
					Method
					{{ results.method }}
			Node:
			(type) c
			(layer)1
				Element:label
					URL
					{{ results.url }}
			Node:
			(type) c
			(layer)1
				Element:label
					Request Headers
			Node:
			(type) c
			(layer)1
				Element:pre
					{{ results.requestHeaders }}
			Node:
			(type) c
			(layer)1
				Element:label
					Request Data
			Node:
			(type) c
			(layer)1
				Element:pre
					{{ results.data }}
			Node:
			(type) c
			(layer)1
				Element:label
					Status
			Node:
			(type) c
			(layer)1
				Element:span
			Node:
			(type) c
			(layer)1
				Element:label
					Response Headers
			Node:
			(type) c
			(layer)1
				Element:pre
					{{ results.responseHeaders }}
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:a
				Element:span
				Element:i
				Element:em
					200
					All Campaign data
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
					[ {
				Element:span
					"_id"
					:
				Element:span
					"064d0ce2741252f32cd36fa870f8f0c243600eb0"
					,
				Element:span
					"name"
					:
				Element:span
					"Built It Up"
					,
				Element:span
					"link"
					:
				Element:span
					"http://waterbreadinternet.com/games/build-it-up"
					,
				Element:span
					"cost"
					:
				Element:span
					0.5
					,
				Element:span
					"costtype"
					:
				Element:span
					"click"
					,
				Element:span
					"links"
					: {
				Element:span
					"android"
					:
				Element:span
					"https://play.google.com/store/apps/details?id=com.waterbreadinternet.builditup"
					,
				Element:span
					"android-custom-scheme"
					:
				Element:span
					"buildit://somehost?key1=value1&key2=value2"
					,
				Element:span
					"ios"
					:
				Element:span
					"https://itunes.apple.com/US/app/id962720281?mt=8"
					,
				Element:span
					"ios-custom-scheme"
					:
				Element:span
					"buildit://somehost?key1=value1&key2=value2"
					},
				Element:span
					"postbacks"
					: [
				Element:span
					"http://waterbreadinternet.com/postback.php?test=1&device={deviceID}&p={platform}"
					],
				Element:span
					"app_id"
					:
				Element:span
					"5507f9dd0d8be2bc66d73c36"
					}, {
				Element:span
					"_id"
					:
				Element:span
					"21c202aa7393442d8d7afd9405c402d7fc0072a9"
					,
				Element:span
					"name"
					:
				Element:span
					"Test"
					,
				Element:span
					"link"
					:
				Element:span
					"http://waterbreadinternet.com/games/build-it-up"
					,
				Element:span
					"cost"
					:
				Element:span
					1
					,
				Element:span
					"costtype"
					:
				Element:span
					"click"
					,
				Element:span
					"links"
					: {
				Element:span
					"android"
					:
				Element:span
					"https://play.google.com/store/apps/details?id=com.waterbreadinternet.builditup"
					,
				Element:span
					"ios"
					:
				Element:span
					"https://itunes.apple.com/US/app/id962720281?mt=8"
					},
				Element:span
					"postbacks"
					: [],
				Element:span
					"app_id"
					:
				Element:span
					"5507f9dd0d8be2bc66d73c36"
					} ]
			Node:
			(type) c
			(layer)1
				Element:h3
					Path Params
			Node:
			(type) c
			(layer)1
				Element:strong
					api_key
					stringrequired
			Node:
			(type) c
			(layer)1
				Element:p
					API_KEY of user, with permission to access this app
			Node:
			(type) c
			(layer)1
				Element:strong
					app_id
					stringrequired
			Node:
			(type) c
			(layer)1
				Element:p
					ID of the app for which to query
			Node:
			(type) c
			(layer)1
				Element:h3
					Query Params
			Node:
			(type) c
			(layer)1
				Element:strong
					callback
					string
			Node:
			(type) c
			(layer)1
				Element:p
					(optional) name of callback function for JSONP output
			Node:
			(type) c
			(layer)1
				Element:p
					This API allows to query information about campaigns. You can also get data for specific campaign by optionally providing camp_id.
			Node:
			(type) c
			(layer)1
				Element:p
					The property data contains standard Countly data by period encoding format
			Node:
			(type) c
			(layer)1
				Element:a
			Node:
			(type) c
			(layer)1
				Element:a
				Element:i
					Suggest Edits
			Node:
			(type) c
			(layer)1
				Element:h2
					/o/campaign?data
			Node:
			(type) c
			(layer)1
				Element:p
					Retrieve click, install and other data about provided campaigns
			Node:
			(type) c
			(layer)1
				Element:span
					get
					https://
			Node:
			(type) c
			(layer)1
				Element:span
				Element:span
					try.count.ly
				Element:span
					/o/campaign&api_key=
				Element:span
					api_key
				Element:span
					&app_id=
				Element:span
					app_id
				Element:span
					&data=
				Element:span
					data
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:a
					cURL
				Element:li
				Element:a
					Node
				Element:li
				Element:a
					Ruby
				Element:li
				Element:a
					JavaScript
				Element:li
				Element:a
					Python
			Node:
			(type) c
			(layer)1
				Element:i
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
				Element:span
					curl
				Element:span
					--request
					GET \
				Element:span
					--url
				Element:span
					'https://try.count.ly/o/campaign&api_key=
				Element:span
					api_key
					&app_id=
				Element:span
					app_id
					&data=
				Element:span
					data
					'
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
				Element:span
					var request = require("request");
				Element:span
					var
					options
				Element:span
					=
					{ method:
				Element:span
					'GET'
					, url:
				Element:span
					'https://try.count.ly/o/campaign&api_key=
					}; request(options,
				Element:span
					api_key
					&app_id=
				Element:span
					app_id
					&data=
				Element:span
					data
					'
				Element:span
					function
					(
				Element:span
					error
					,
				Element:span
					response
					,
				Element:span
					body
					) {
				Element:span
					if
					(
				Element:span
					error
					)
				Element:span
					throw new
					Error(
				Element:span
					error
					); console.log(
				Element:span
					body
					); });
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
				Element:span
					require
				Element:span
					'uri'
				Element:span
					require
				Element:span
					'net/http'
					url = URI(
				Element:span
					"https://try.count.ly/o/campaign&api_key=
					) http
				Element:span
					api_key
					&app_id=
				Element:span
					app_id
					&data=
				Element:span
					data
					"
				Element:span
					=
				Element:span
					Net::HTTP
					.new(url.host, url.port) http.use_ssl = true http.verify_mode = OpenSSL::SSL::VERIFY_NONE request
				Element:span
					=
				Element:span
					Net::HTTP
					::Get.new(url) response = http.request(request) puts response.read_body
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
				Element:span
					var
					settings
				Element:span
					=
					{
				Element:span
					"async"
					: true,
				Element:span
					"crossDomain"
					: true,
				Element:span
					"url": "https://try.count.ly/o/campaign&api_key=
					,
				Element:span
					api_key
					&app_id=
				Element:span
					app_id
					&data=
				Element:span
					data
					"
				Element:span
					"method": "GET"
					,
				Element:span
					"headers"
					: {},
				Element:span
					"processData"
					: false } $.ajax(settings).done(
				Element:span
					function
					(
				Element:span
					response
					) { console.log(
				Element:span
					response
					); });
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
				Element:span
					import requests
					url =
				Element:span
					"https://try.count.ly/o/campaign&api_key=
					response = requests.request(
				Element:span
					api_key
					&app_id=
				Element:span
					app_id
					&data=
				Element:span
					data
					"
				Element:span
					"GET"
					, url)
				Element:span
					print
					(response.text)
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:a
				Element:span
				Element:i
				Element:em
					{{ results.statusCode[0] }}
					{{ results.statusCode[1] }}
				Element:a
					Metadata
				Element:a
				Element:span
					to examples
			Node:
			(type) c
			(layer)1
				Element:pre
			Node:
			(type) c
			(layer)1
				Element:label
					Method
					{{ results.method }}
			Node:
			(type) c
			(layer)1
				Element:label
					URL
					{{ results.url }}
			Node:
			(type) c
			(layer)1
				Element:label
					Request Headers
			Node:
			(type) c
			(layer)1
				Element:pre
					{{ results.requestHeaders }}
			Node:
			(type) c
			(layer)1
				Element:label
					Request Data
			Node:
			(type) c
			(layer)1
				Element:pre
					{{ results.data }}
			Node:
			(type) c
			(layer)1
				Element:label
					Status
			Node:
			(type) c
			(layer)1
				Element:span
			Node:
			(type) c
			(layer)1
				Element:label
					Response Headers
			Node:
			(type) c
			(layer)1
				Element:pre
					{{ results.responseHeaders }}
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:a
				Element:span
				Element:i
				Element:em
					200
					Campaign data
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
					[ {
				Element:span
					"_id"
					:
				Element:span
					"social56e53239a941253d470d7c52"
					,
				Element:span
					"data"
					: {
				Element:span
					"2016"
					: {
				Element:span
					"3"
					: {
				Element:span
					"19"
					: {
				Element:span
					"14"
					: {
				Element:span
					"aclk"
					:
				Element:span
					1
					,
				Element:span
					"clk"
					:
				Element:span
					1
					},
				Element:span
					"aclk"
					:
				Element:span
					1
					,
				Element:span
					"[l]_en-us"
					: {
				Element:span
					"aclk"
					:
				Element:span
					1
					,
				Element:span
					"clk"
					:
				Element:span
					1
					},
				Element:span
					"[b]_chrome"
					: {
				Element:span
					"aclk"
					:
				Element:span
					1
					,
				Element:span
					"clk"
					:
				Element:span
					1
					},
				Element:span
					"[pl]_windows"
					: {
				Element:span
					"aclk"
					:
				Element:span
					1
					,
				Element:span
					"clk"
					:
				Element:span
					1
					},
				Element:span
					"[cnty]_de"
					: {
				Element:span
					"aclk"
					:
				Element:span
					1
					,
				Element:span
					"clk"
					:
				Element:span
					1
					},
				Element:span
					"clk"
					:
				Element:span
					1
					},
				Element:span
					"20"
					: {
				Element:span
					"4"
					: {
				Element:span
					"aclk"
					:
				Element:span
					1
					,
				Element:span
					"clk"
					:
				Element:span
					1
					},
				Element:span
					"6"
					: {
				Element:span
					"ins"
					:
				Element:span
					1
					,
				Element:span
					"ses"
					:
				Element:span
					1
					,
				Element:span
					"aclk"
					:
				Element:span
					1
					,
				Element:span
					"clk"
					:
				Element:span
					1
					},
				Element:span
					"7"
					: {
				Element:span
					"aclk"
					:
				Element:span
					1
					,
				Element:span
					"clk"
					:
				Element:span
					1
					},
				Element:span
					"10"
					: {
				Element:span
					"aclk"
					:
				Element:span
					1
					,
				Element:span
					"clk"
					:
				Element:span
					1
					},
				Element:span
					"13"
					: {
				Element:span
					"aclk"
					:
				Element:span
					1
					,
				Element:span
					"clk"
					:
				Element:span
					1
					},
				Element:span
					"14"
					: {
				Element:span
					"aclk"
					:
				Element:span
					1
					,
				Element:span
					"clk"
					:
				Element:span
					1
					},
				Element:span
					"18"
					: {
				Element:span
					"aclk"
					:
				Element:span
					1
					,
				Element:span
					"clk"
					:
				Element:span
					1
					},
				Element:span
					"22"
					: {
				Element:span
					"aclk"
					:
				Element:span
					2
					,
				Element:span
					"clk"
					:
				Element:span
					2
					},
				Element:span
					"aclk"
					:
				Element:span
					9
					,
				Element:span
					"[l]_en-us"
					: {
				Element:span
					"aclk"
					:
				Element:span
					9
					,
				Element:span
					"clk"
					:
				Element:span
					9
					,
				Element:span
					"ins"
					:
				Element:span
					1
					,
				Element:span
					"ses"
					:
				Element:span
					1
					},
				Element:span
					"[b]_chrome"
					: {
				Element:span
					"aclk"
					:
				Element:span
					9
					,
				Element:span
					"clk"
					:
				Element:span
					9
					,
				Element:span
					"ins"
					:
				Element:span
					1
					,
				Element:span
					"ses"
					:
				Element:span
					1
					},
				Element:span
					"[pl]_windows"
					: {
				Element:span
					"aclk"
					:
				Element:span
					9
					,
				Element:span
					"clk"
					:
				Element:span
					9
					,
				Element:span
					"ins"
					:
				Element:span
					1
					,
				Element:span
					"ses"
					:
				Element:span
					1
					},
				Element:span
					"[cnty]_se"
					: {
				Element:span
					"aclk"
					:
				Element:span
					1
					,
				Element:span
					"clk"
					:
				Element:span
					1
					},
				Element:span
					"clk"
					:
				Element:span
					9
					,
				Element:span
					"[cnty]_gb"
					: {
				Element:span
					"aclk"
					:
				Element:span
					1
					,
				Element:span
					"clk"
					:
				Element:span
					1
					},
				Element:span
					"ins"
					:
				Element:span
					1
					,
				Element:span
					"ses"
					:
				Element:span
					1
					,
				Element:span
					"[cnty]_jp"
					: {
				Element:span
					"aclk"
					:
				Element:span
					2
					,
				Element:span
					"clk"
					:
				Element:span
					2
					},
				Element:span
					"[cnty]_ru"
					: {
				Element:span
					"aclk"
					:
				Element:span
					1
					,
				Element:span
					"clk"
					:
				Element:span
					1
					},
				Element:span
					"[cnty]_us"
					: {
				Element:span
					"aclk"
					:
				Element:span
					2
					,
				Element:span
					"clk"
					:
				Element:span
					2
					} } } } },
				Element:span
					meta
				Element:span
					": {
				Element:span
					"l"
					: [
				Element:span
					"[l]_en-us"
					,
				Element:span
					"[l]_en"
					],
				Element:span
					"b"
					: [
				Element:span
					"[b]_chrome"
					,
				Element:span
					"[b]_opera"
					,
				Element:span
					"[b]_firefox"
					],
				Element:span
					"pl"
					: [
				Element:span
					"[pl]_windows"
					] } } ]
			Node:
			(type) c
			(layer)1
				Element:h3
					Path Params
			Node:
			(type) c
			(layer)1
				Element:strong
					api_key
					stringrequired
			Node:
			(type) c
			(layer)1
				Element:p
					API_KEY of user, with permission to access this app
			Node:
			(type) c
			(layer)1
				Element:strong
					app_id
					stringrequired
			Node:
			(type) c
			(layer)1
				Element:p
					ID of the app for which to query
			Node:
			(type) c
			(layer)1
				Element:strong
					data
					stringrequired
			Node:
			(type) c
			(layer)1
				Element:p
					JSON string encoded array of campaign ids for which to fetch action data
			Node:
			(type) c
			(layer)1
				Element:h3
					Query Params
			Node:
			(type) c
			(layer)1
				Element:strong
					period
					string
			Node:
			(type) c
			(layer)1
				Element:p
					For which time period to provide data, possible values (month, 60days, 30days, 7days, yesterday, hour or [startMiliseconds, endMiliseconds] as [1417730400000,1420149600000])
			Node:
			(type) c
			(layer)1
				Element:strong
					callback
					string
			Node:
			(type) c
			(layer)1
				Element:p
					(optional) name of callback function for JSONP output
			Node:
			(type) c
			(layer)1
				Element:p
					The property data contains standard Countly data by period encoding format. Providing data in buckets, year, month, day, hour.
			Node:
			(type) c
			(layer)1
				Element:p
					It can have properties as:
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					clk - unique clicks
				Element:li
					aclk - total clicks
				Element:li
					ins - installs
				Element:li
					ses - sessions
				Element:li
					rev - revenue reports
			Node:
			(type) c
			(layer)1
				Element:p
					So for example data:
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:a
					JSON
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:code
				Element:span
				Element:span
					"data"
					: {
				Element:span
					"2016"
					: {
				Element:span
					"3"
					: {
				Element:span
					"19"
					: {
				Element:span
					"14"
					: {
				Element:span
					"aclk"
					:
				Element:span
					1
					,
				Element:span
					"clk"
					:
				Element:span
					1
					}, } } }
			Node:
			(type) c
			(layer)1
				Element:p
					Would mean there was 1 click / 1 unique click on 19th of March, 2016 between 14:00 and 14:59
			Node:
			(type) c
			(layer)1
				Element:a
			Node:
			(type) c
			(layer)1
				Element:a
				Element:i
					Suggest Edits
			Node:
			(type) c
			(layer)1
				Element:h2
					/o/campaign?camp_id
			Node:
			(type) c
			(layer)1
				Element:p
					Retrieve data of specific campaign
			Node:
			(type) c
			(layer)1
				Element:span
					get
					https://
			Node:
			(type) c
			(layer)1
				Element:span
				Element:span
					try.count.ly
				Element:span
					/o/campaign&api_key=
				Element:span
					api_key
				Element:span
					&app_id=
				Element:span
					app_id
				Element:span
					&camp_id=
				Element:span
					camp_id
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:a
					cURL
				Element:li
				Element:a
					Node
				Element:li
				Element:a
					Ruby
				Element:li
				Element:a
					JavaScript
				Element:li
				Element:a
					Python
			Node:
			(type) c
			(layer)1
				Element:i
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
				Element:span
					curl
				Element:span
					--request
					GET \
				Element:span
					--url
				Element:span
					'https://try.count.ly/o/campaign&api_key=
				Element:span
					api_key
					&app_id=
				Element:span
					app_id
					&camp_id=
				Element:span
					camp_id
					'
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
				Element:span
					var request = require("request");
				Element:span
					var
					options
				Element:span
					=
					{ method:
				Element:span
					'GET'
					, url:
				Element:span
					'https://try.count.ly/o/campaign&api_key=
					}; request(options,
				Element:span
					api_key
					&app_id=
				Element:span
					app_id
					&camp_id=
				Element:span
					camp_id
					'
				Element:span
					function
					(
				Element:span
					error
					,
				Element:span
					response
					,
				Element:span
					body
					) {
				Element:span
					if
					(
				Element:span
					error
					)
				Element:span
					throw new
					Error(
				Element:span
					error
					); console.log(
				Element:span
					body
					); });
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
				Element:span
					require
				Element:span
					'uri'
				Element:span
					require
				Element:span
					'net/http'
					url = URI(
				Element:span
					"https://try.count.ly/o/campaign&api_key=
					) http
				Element:span
					api_key
					&app_id=
				Element:span
					app_id
					&camp_id=
				Element:span
					camp_id
					"
				Element:span
					=
				Element:span
					Net::HTTP
					.new(url.host, url.port) http.use_ssl = true http.verify_mode = OpenSSL::SSL::VERIFY_NONE request
				Element:span
					=
				Element:span
					Net::HTTP
					::Get.new(url) response = http.request(request) puts response.read_body
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
				Element:span
					var
					settings
				Element:span
					=
					{
				Element:span
					"async"
					: true,
				Element:span
					"crossDomain"
					: true,
				Element:span
					"url": "https://try.count.ly/o/campaign&api_key=
					,
				Element:span
					api_key
					&app_id=
				Element:span
					app_id
					&camp_id=
				Element:span
					camp_id
					"
				Element:span
					"method": "GET"
					,
				Element:span
					"headers"
					: {},
				Element:span
					"processData"
					: false } $.ajax(settings).done(
				Element:span
					function
					(
				Element:span
					response
					) { console.log(
				Element:span
					response
					); });
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
				Element:span
					import requests
					url =
				Element:span
					"https://try.count.ly/o/campaign&api_key=
					response = requests.request(
				Element:span
					api_key
					&app_id=
				Element:span
					app_id
					&camp_id=
				Element:span
					camp_id
					"
				Element:span
					"GET"
					, url)
				Element:span
					print
					(response.text)
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:a
				Element:span
				Element:i
				Element:em
					{{ results.statusCode[0] }}
					{{ results.statusCode[1] }}
				Element:a
					Metadata
				Element:a
				Element:span
					to examples
			Node:
			(type) c
			(layer)1
				Element:pre
			Node:
			(type) c
			(layer)1
				Element:label
					Method
					{{ results.method }}
			Node:
			(type) c
			(layer)1
				Element:label
					URL
					{{ results.url }}
			Node:
			(type) c
			(layer)1
				Element:label
					Request Headers
			Node:
			(type) c
			(layer)1
				Element:pre
					{{ results.requestHeaders }}
			Node:
			(type) c
			(layer)1
				Element:label
					Request Data
			Node:
			(type) c
			(layer)1
				Element:pre
					{{ results.data }}
			Node:
			(type) c
			(layer)1
				Element:label
					Status
			Node:
			(type) c
			(layer)1
				Element:span
			Node:
			(type) c
			(layer)1
				Element:label
					Response Headers
			Node:
			(type) c
			(layer)1
				Element:pre
					{{ results.responseHeaders }}
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:a
				Element:span
				Element:i
				Element:em
					200
					Specific Campaign data
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
					{
				Element:span
					"_id"
					:
				Element:span
					"064d0ce2741252f32cd36fa870f8f0c243600eb0"
					,
				Element:span
					"name"
					:
				Element:span
					"Built It Up"
					,
				Element:span
					"link"
					:
				Element:span
					"http://waterbreadinternet.com/games/build-it-up"
					,
				Element:span
					"cost"
					:
				Element:span
					0.5
					,
				Element:span
					"costtype"
					:
				Element:span
					"click"
					,
				Element:span
					"links"
					: {
				Element:span
					"android"
					:
				Element:span
					"https://play.google.com/store/apps/details?id=com.waterbreadinternet.builditup"
					,
				Element:span
					"android-custom-scheme"
					:
				Element:span
					"buildit://somehost?key1=value1&key2=value2"
					,
				Element:span
					"ios"
					:
				Element:span
					"https://itunes.apple.com/US/app/id962720281?mt=8"
					,
				Element:span
					"ios-custom-scheme"
					:
				Element:span
					"buildit://somehost?key1=value1&key2=value2"
					},
				Element:span
					"postbacks"
					: [
				Element:span
					"http://waterbreadinternet.com/postback.php?test=1&device={deviceID}&p={platform}"
					],
				Element:span
					"app_id"
					:
				Element:span
					"5507f9dd0d8be2bc66d73c36"
					,
				Element:span
					"data"
					: {
				Element:span
					"2015"
					: {
				Element:span
					"3"
					: {
				Element:span
					"22"
					: {
				Element:span
					"10"
					: {
				Element:span
					"aclk"
					:
				Element:span
					24
					,
				Element:span
					"clk"
					:
				Element:span
					1
					},
				Element:span
					"18"
					: {
				Element:span
					"aclk"
					:
				Element:span
					7
					,
				Element:span
					"clk"
					:
				Element:span
					5
					,
				Element:span
					"ins"
					:
				Element:span
					1
					,
				Element:span
					"ses"
					:
				Element:span
					4
					,
				Element:span
					"rev"
					:
				Element:span
					5.4
					},
				Element:span
					"20"
					: {
				Element:span
					"ins"
					:
				Element:span
					2
					},
				Element:span
					"aclk"
					:
				Element:span
					31
					,
				Element:span
					"en-US"
					: {
				Element:span
					"aclk"
					:
				Element:span
					25
					,
				Element:span
					"clk"
					:
				Element:span
					1
					},
				Element:span
					"Chrome"
					: {
				Element:span
					"aclk"
					:
				Element:span
					25
					,
				Element:span
					"clk"
					:
				Element:span
					1
					},
				Element:span
					"Windows"
					: {
				Element:span
					"aclk"
					:
				Element:span
					25
					,
				Element:span
					"clk"
					:
				Element:span
					1
					},
				Element:span
					"clk"
					:
				Element:span
					6
					,
				Element:span
					"en-us"
					: {
				Element:span
					"aclk"
					:
				Element:span
					4
					,
				Element:span
					"clk"
					:
				Element:span
					3
					},
				Element:span
					"chrome"
					: {
				Element:span
					"aclk"
					:
				Element:span
					1
					,
				Element:span
					"ins"
					:
				Element:span
					1
					},
				Element:span
					"windows"
					: {
				Element:span
					"aclk"
					:
				Element:span
					2
					,
				Element:span
					"clk"
					:
				Element:span
					1
					,
				Element:span
					"ins"
					:
				Element:span
					1
					},
				Element:span
					"safari"
					: {
				Element:span
					"aclk"
					:
				Element:span
					1
					,
				Element:span
					"clk"
					:
				Element:span
					1
					},
				Element:span
					"android"
					: {
				Element:span
					"aclk"
					:
				Element:span
					1
					,
				Element:span
					"clk"
					:
				Element:span
					1
					,
				Element:span
					"ins"
					:
				Element:span
					1
					},
				Element:span
					"unknown"
					: {
				Element:span
					"aclk"
					:
				Element:span
					1
					,
				Element:span
					"clk"
					:
				Element:span
					1
					},
				Element:span
					"ios"
					: {
				Element:span
					"aclk"
					:
				Element:span
					2
					,
				Element:span
					"clk"
					:
				Element:span
					2
					},
				Element:span
					"chromium"
					: {
				Element:span
					"aclk"
					:
				Element:span
					1
					,
				Element:span
					"clk"
					:
				Element:span
					1
					},
				Element:span
					"en-gb"
					: {
				Element:span
					"aclk"
					:
				Element:span
					1
					,
				Element:span
					"clk"
					:
				Element:span
					1
					,
				Element:span
					"ins"
					:
				Element:span
					1
					,
				Element:span
					"ses"
					:
				Element:span
					4
					,
				Element:span
					"rev"
					:
				Element:span
					5.4
					},
				Element:span
					"ie"
					: {
				Element:span
					"aclk"
					:
				Element:span
					1
					,
				Element:span
					"clk"
					:
				Element:span
					1
					,
				Element:span
					"ins"
					:
				Element:span
					1
					,
				Element:span
					"ses"
					:
				Element:span
					4
					,
				Element:span
					"rev"
					:
				Element:span
					5.4
					},
				Element:span
					"windows phone"
					: {
				Element:span
					"aclk"
					:
				Element:span
					1
					,
				Element:span
					"clk"
					:
				Element:span
					1
					,
				Element:span
					"ins"
					:
				Element:span
					1
					,
				Element:span
					"ses"
					:
				Element:span
					4
					,
				Element:span
					"rev"
					:
				Element:span
					5.4
					},
				Element:span
					"ins"
					:
				Element:span
					3
					,
				Element:span
					"ses"
					:
				Element:span
					4
					,
				Element:span
					"rev"
					:
				Element:span
					5.4
					,
				Element:span
					"en"
					: {
				Element:span
					"aclk"
					:
				Element:span
					1
					,
				Element:span
					"clk"
					:
				Element:span
					1
					,
				Element:span
					"ins"
					:
				Element:span
					1
					},
				Element:span
					"opera"
					: {
				Element:span
					"aclk"
					:
				Element:span
					1
					,
				Element:span
					"clk"
					:
				Element:span
					1
					,
				Element:span
					"ins"
					:
				Element:span
					1
					},
				Element:span
					"en_us"
					: {
				Element:span
					"ins"
					:
				Element:span
					1
					} },
				Element:span
					"23"
					: {
				Element:span
					"17"
					: {
				Element:span
					"aclk"
					:
				Element:span
					2
					},
				Element:span
					"aclk"
					:
				Element:span
					2
					,
				Element:span
					"en-us"
					: {
				Element:span
					"aclk"
					:
				Element:span
					2
					},
				Element:span
					"safari"
					: {
				Element:span
					"aclk"
					:
				Element:span
					1
					},
				Element:span
					"android"
					: {
				Element:span
					"aclk"
					:
				Element:span
					1
					},
				Element:span
					"chrome"
					: {
				Element:span
					"aclk"
					:
				Element:span
					1
					},
				Element:span
					"windows"
					: {
				Element:span
					"aclk"
					:
				Element:span
					1
					} },
				Element:span
					"24"
					: {
				Element:span
					"9"
					: {
				Element:span
					"aclk"
					:
				Element:span
					1
					},
				Element:span
					"10"
					: {
				Element:span
					"aclk"
					:
				Element:span
					8
					},
				Element:span
					"12"
					: {
				Element:span
					"aclk"
					:
				Element:span
					4
					},
				Element:span
					"aclk"
					:
				Element:span
					13
					,
				Element:span
					"en-us"
					: {
				Element:span
					"aclk"
					:
				Element:span
					13
					},
				Element:span
					"safari"
					: {
				Element:span
					"aclk"
					:
				Element:span
					6
					},
				Element:span
					"android"
					: {
				Element:span
					"aclk"
					:
				Element:span
					6
					},
				Element:span
					"unknown"
					: {
				Element:span
					"aclk"
					:
				Element:span
					1
					},
				Element:span
					"ios"
					: {
				Element:span
					"aclk"
					:
				Element:span
					1
					},
				Element:span
					"chrome"
					: {
				Element:span
					"aclk"
					:
				Element:span
					6
					},
				Element:span
					"windows"
					: {
				Element:span
					"aclk"
					:
				Element:span
					6
					} },
				Element:span
					"25"
					: {
				Element:span
					"11"
					: {
				Element:span
					"aclk"
					:
				Element:span
					2
					},
				Element:span
					"12"
					: {
				Element:span
					"ins"
					:
				Element:span
					4
					,
				Element:span
					"ses"
					:
				Element:span
					4
					,
				Element:span
					"aclk"
					:
				Element:span
					5
					},
				Element:span
					"aclk"
					:
				Element:span
					7
					,
				Element:span
					"en-us"
					: {
				Element:span
					"aclk"
					:
				Element:span
					7
					,
				Element:span
					"ins"
					:
				Element:span
					4
					,
				Element:span
					"ses"
					:
				Element:span
					4
					},
				Element:span
					"chrome"
					: {
				Element:span
					"aclk"
					:
				Element:span
					7
					,
				Element:span
					"ins"
					:
				Element:span
					4
					,
				Element:span
					"ses"
					:
				Element:span
					4
					},
				Element:span
					"windows"
					: {
				Element:span
					"aclk"
					:
				Element:span
					7
					,
				Element:span
					"ins"
					:
				Element:span
					4
					,
				Element:span
					"ses"
					:
				Element:span
					4
					},
				Element:span
					"lv"
					: {
				Element:span
					"aclk"
					:
				Element:span
					7
					,
				Element:span
					"ins"
					:
				Element:span
					4
					,
				Element:span
					"ses"
					:
				Element:span
					4
					},
				Element:span
					"ins"
					:
				Element:span
					4
					,
				Element:span
					"ses"
					:
				Element:span
					4
					},
				Element:span
					"aclk"
					:
				Element:span
					53
					,
				Element:span
					"en-US"
					: {
				Element:span
					"aclk"
					:
				Element:span
					25
					,
				Element:span
					"clk"
					:
				Element:span
					1
					},
				Element:span
					"Chrome"
					: {
				Element:span
					"aclk"
					:
				Element:span
					25
					,
				Element:span
					"clk"
					:
				Element:span
					1
					},
				Element:span
					"Windows"
					: {
				Element:span
					"aclk"
					:
				Element:span
					25
					,
				Element:span
					"clk"
					:
				Element:span
					1
					},
				Element:span
					"clk"
					:
				Element:span
					6
					,
				Element:span
					"en-us"
					: {
				Element:span
					"aclk"
					:
				Element:span
					26
					,
				Element:span
					"clk"
					:
				Element:span
					3
					,
				Element:span
					"ins"
					:
				Element:span
					4
					,
				Element:span
					"ses"
					:
				Element:span
					4
					},
				Element:span
					"chrome"
					: {
				Element:span
					"aclk"
					:
				Element:span
					15
					,
				Element:span
					"ins"
					:
				Element:span
					5
					,
				Element:span
					"ses"
					:
				Element:span
					4
					},
				Element:span
					"windows"
					: {
				Element:span
					"aclk"
					:
				Element:span
					16
					,
				Element:span
					"clk"
					:
				Element:span
					1
					,
				Element:span
					"ins"
					:
				Element:span
					5
					,
				Element:span
					"ses"
					:
				Element:span
					4
					},
				Element:span
					"safari"
					: {
				Element:span
					"aclk"
					:
				Element:span
					8
					,
				Element:span
					"clk"
					:
				Element:span
					1
					},
				Element:span
					"android"
					: {
				Element:span
					"aclk"
					:
				Element:span
					8
					,
				Element:span
					"clk"
					:
				Element:span
					1
					,
				Element:span
					"ins"
					:
				Element:span
					1
					},
				Element:span
					"unknown"
					: {
				Element:span
					"aclk"
					:
				Element:span
					2
					,
				Element:span
					"clk"
					:
				Element:span
					1
					},
				Element:span
					"ios"
					: {
				Element:span
					"aclk"
					:
				Element:span
					3
					,
				Element:span
					"clk"
					:
				Element:span
					2
					},
				Element:span
					"chromium"
					: {
				Element:span
					"aclk"
					:
				Element:span
					1
					,
				Element:span
					"clk"
					:
				Element:span
					1
					},
				Element:span
					"en-gb"
					: {
				Element:span
					"aclk"
					:
				Element:span
					1
					,
				Element:span
					"clk"
					:
				Element:span
					1
					,
				Element:span
					"ins"
					:
				Element:span
					1
					,
				Element:span
					"ses"
					:
				Element:span
					4
					,
				Element:span
					"rev"
					:
				Element:span
					5.4
					},
				Element:span
					"ie"
					: {
				Element:span
					"aclk"
					:
				Element:span
					1
					,
				Element:span
					"clk"
					:
				Element:span
					1
					,
				Element:span
					"ins"
					:
				Element:span
					1
					,
				Element:span
					"ses"
					:
				Element:span
					4
					,
				Element:span
					"rev"
					:
				Element:span
					5.4
					},
				Element:span
					"windows phone"
					: {
				Element:span
					"aclk"
					:
				Element:span
					1
					,
				Element:span
					"clk"
					:
				Element:span
					1
					,
				Element:span
					"ins"
					:
				Element:span
					1
					,
				Element:span
					"ses"
					:
				Element:span
					4
					,
				Element:span
					"rev"
					:
				Element:span
					5.4
					},
				Element:span
					"ins"
					:
				Element:span
					7
					,
				Element:span
					"ses"
					:
				Element:span
					8
					,
				Element:span
					"rev"
					:
				Element:span
					5.4
					,
				Element:span
					"en"
					: {
				Element:span
					"aclk"
					:
				Element:span
					1
					,
				Element:span
					"clk"
					:
				Element:span
					1
					,
				Element:span
					"ins"
					:
				Element:span
					1
					},
				Element:span
					"opera"
					: {
				Element:span
					"aclk"
					:
				Element:span
					1
					,
				Element:span
					"clk"
					:
				Element:span
					1
					,
				Element:span
					"ins"
					:
				Element:span
					1
					},
				Element:span
					"en_us"
					: {
				Element:span
					"ins"
					:
				Element:span
					1
					},
				Element:span
					"lv"
					: {
				Element:span
					"aclk"
					:
				Element:span
					7
					,
				Element:span
					"ins"
					:
				Element:span
					4
					,
				Element:span
					"ses"
					:
				Element:span
					4
					} },
				Element:span
					"4"
					: {
				Element:span
					"1"
					: {
				Element:span
					"13"
					: {
				Element:span
					"aclk"
					:
				Element:span
					2
					},
				Element:span
					"15"
					: {
				Element:span
					"aclk"
					:
				Element:span
					5
					},
				Element:span
					"17"
					: {
				Element:span
					"aclk"
					:
				Element:span
					3
					,
				Element:span
					"clk"
					:
				Element:span
					1
					},
				Element:span
					"18"
					: {
				Element:span
					"aclk"
					:
				Element:span
					15
					,
				Element:span
					"clk"
					:
				Element:span
					2
					},
				Element:span
					"19"
					: {
				Element:span
					"aclk"
					:
				Element:span
					36
					},
				Element:span
					"20"
					: {
				Element:span
					"aclk"
					:
				Element:span
					32
					},
				Element:span
					"21"
					: {
				Element:span
					"aclk"
					:
				Element:span
					50
					},
				Element:span
					"aclk"
					:
				Element:span
					143
					,
				Element:span
					"en-us"
					: {
				Element:span
					"aclk"
					:
				Element:span
					63
					,
				Element:span
					"clk"
					:
				Element:span
					2
					},
				Element:span
					"chrome"
					: {
				Element:span
					"aclk"
					:
				Element:span
					29
					,
				Element:span
					"clk"
					:
				Element:span
					1
					},
				Element:span
					"windows"
					: {
				Element:span
					"aclk"
					:
				Element:span
					4
					},
				Element:span
					"lv"
					: {
				Element:span
					"aclk"
					:
				Element:span
					143
					,
				Element:span
					"clk"
					:
				Element:span
					3
					},
				Element:span
					"unknown"
					: {
				Element:span
					"aclk"
					:
				Element:span
					5
					},
				Element:span
					"ios"
					: {
				Element:span
					"aclk"
					:
				Element:span
					5
					},
				Element:span
					"safari"
					: {
				Element:span
					"aclk"
					:
				Element:span
					12
					},
				Element:span
					"android"
					: {
				Element:span
					"aclk"
					:
				Element:span
					134
					,
				Element:span
					"clk"
					:
				Element:span
					3
					},
				Element:span
					"en"
					: {
				Element:span
					"aclk"
					:
				Element:span
					80
					,
				Element:span
					"clk"
					:
				Element:span
					1
					},
				Element:span
					"opera"
					: {
				Element:span
					"aclk"
					:
				Element:span
					80
					,
				Element:span
					"clk"
					:
				Element:span
					1
					},
				Element:span
					"clk"
					:
				Element:span
					3
					,
				Element:span
					"firefox"
					: {
				Element:span
					"aclk"
					:
				Element:span
					17
					,
				Element:span
					"clk"
					:
				Element:span
					1
					} },
				Element:span
					"2"
					: {
				Element:span
					"9"
					: {
				Element:span
					"aclk"
					:
				Element:span
					13
					},
				Element:span
					"10"
					: {
				Element:span
					"aclk"
					:
				Element:span
					10
					},
				Element:span
					"aclk"
					:
				Element:span
					23
					,
				Element:span
					"en"
					: {
				Element:span
					"aclk"
					:
				Element:span
					1
					},
				Element:span
					"opera"
					: {
				Element:span
					"aclk"
					:
				Element:span
					1
					},
				Element:span
					"android"
					: {
				Element:span
					"aclk"
					:
				Element:span
					23
					},
				Element:span
					"lv"
					: {
				Element:span
					"aclk"
					:
				Element:span
					23
					},
				Element:span
					"en-us"
					: {
				Element:span
					"aclk"
					:
				Element:span
					22
					},
				Element:span
					"firefox"
					: {
				Element:span
					"aclk"
					:
				Element:span
					3
					},
				Element:span
					"chrome"
					: {
				Element:span
					"aclk"
					:
				Element:span
					13
					},
				Element:span
					"safari"
					: {
				Element:span
					"aclk"
					:
				Element:span
					6
					} },
				Element:span
					"3"
					: {
				Element:span
					"10"
					: {
				Element:span
					"aclk"
					:
				Element:span
					11
					,
				Element:span
					"ins"
					:
				Element:span
					2
					,
				Element:span
					"ses"
					:
				Element:span
					3
					},
				Element:span
					"aclk"
					:
				Element:span
					11
					,
				Element:span
					"en-us"
					: {
				Element:span
					"aclk"
					:
				Element:span
					11
					,
				Element:span
					"ins"
					:
				Element:span
					2
					,
				Element:span
					"ses"
					:
				Element:span
					3
					},
				Element:span
					"chrome"
					: {
				Element:span
					"aclk"
					:
				Element:span
					6
					,
				Element:span
					"ins"
					:
				Element:span
					1
					,
				Element:span
					"ses"
					:
				Element:span
					1
					},
				Element:span
					"windows"
					: {
				Element:span
					"aclk"
					:
				Element:span
					6
					,
				Element:span
					"ins"
					:
				Element:span
					1
					,
				Element:span
					"ses"
					:
				Element:span
					1
					},
				Element:span
					"lv"
					: {
				Element:span
					"aclk"
					:
				Element:span
					11
					,
				Element:span
					"ins"
					:
				Element:span
					2
					,
				Element:span
					"ses"
					:
				Element:span
					3
					},
				Element:span
					"safari"
					: {
				Element:span
					"aclk"
					:
				Element:span
					4
					,
				Element:span
					"ins"
					:
				Element:span
					1
					,
				Element:span
					"ses"
					:
				Element:span
					2
					},
				Element:span
					"android"
					: {
				Element:span
					"aclk"
					:
				Element:span
					5
					,
				Element:span
					"ins"
					:
				Element:span
					1
					,
				Element:span
					"ses"
					:
				Element:span
					2
					},
				Element:span
					"firefox"
					: {
				Element:span
					"aclk"
					:
				Element:span
					1
					},
				Element:span
					"ins"
					:
				Element:span
					2
					,
				Element:span
					"ses"
					:
				Element:span
					3
					},
				Element:span
					"aclk"
					:
				Element:span
					177
					,
				Element:span
					"en-us"
					: {
				Element:span
					"aclk"
					:
				Element:span
					96
					,
				Element:span
					"clk"
					:
				Element:span
					2
					,
				Element:span
					"ins"
					:
				Element:span
					2
					,
				Element:span
					"ses"
					:
				Element:span
					3
					},
				Element:span
					"chrome"
					: {
				Element:span
					"aclk"
					:
				Element:span
					48
					,
				Element:span
					"clk"
					:
				Element:span
					1
					,
				Element:span
					"ins"
					:
				Element:span
					1
					,
				Element:span
					"ses"
					:
				Element:span
					1
					},
				Element:span
					"windows"
					: {
				Element:span
					"aclk"
					:
				Element:span
					10
					,
				Element:span
					"ins"
					:
				Element:span
					1
					,
				Element:span
					"ses"
					:
				Element:span
					1
					},
				Element:span
					"lv"
					: {
				Element:span
					"aclk"
					:
				Element:span
					177
					,
				Element:span
					"clk"
					:
				Element:span
					3
					,
				Element:span
					"ins"
					:
				Element:span
					2
					,
				Element:span
					"ses"
					:
				Element:span
					3
					},
				Element:span
					"unknown"
					: {
				Element:span
					"aclk"
					:
				Element:span
					5
					},
				Element:span
					"ios"
					: {
				Element:span
					"aclk"
					:
				Element:span
					5
					},
				Element:span
					"safari"
					: {
				Element:span
					"aclk"
					:
				Element:span
					22
					,
				Element:span
					"ins"
					:
				Element:span
					1
					,
				Element:span
					"ses"
					:
				Element:span
					2
					},
				Element:span
					"android"
					: {
				Element:span
					"aclk"
					:
				Element:span
					162
					,
				Element:span
					"clk"
					:
				Element:span
					3
					,
				Element:span
					"ins"
					:
				Element:span
					1
					,
				Element:span
					"ses"
					:
				Element:span
					2
					},
				Element:span
					"en"
					: {
				Element:span
					"aclk"
					:
				Element:span
					81
					,
				Element:span
					"clk"
					:
				Element:span
					1
					},
				Element:span
					"opera"
					: {
				Element:span
					"aclk"
					:
				Element:span
					81
					,
				Element:span
					"clk"
					:
				Element:span
					1
					},
				Element:span
					"clk"
					:
				Element:span
					3
					,
				Element:span
					"firefox"
					: {
				Element:span
					"aclk"
					:
				Element:span
					21
					,
				Element:span
					"clk"
					:
				Element:span
					1
					},
				Element:span
					"ins"
					:
				Element:span
					2
					,
				Element:span
					"ses"
					:
				Element:span
					3
					},
				Element:span
					"aclk"
					:
				Element:span
					230
					,
				Element:span
					"en-US"
					: {
				Element:span
					"aclk"
					:
				Element:span
					25
					,
				Element:span
					"clk"
					:
				Element:span
					1
					},
				Element:span
					"Chrome"
					: {
				Element:span
					"aclk"
					:
				Element:span
					25
					,
				Element:span
					"clk"
					:
				Element:span
					1
					},
				Element:span
					"Windows"
					: {
				Element:span
					"aclk"
					:
				Element:span
					25
					,
				Element:span
					"clk"
					:
				Element:span
					1
					},
				Element:span
					"clk"
					:
				Element:span
					9
					,
				Element:span
					"en-us"
					: {
				Element:span
					"aclk"
					:
				Element:span
					122
					,
				Element:span
					"clk"
					:
				Element:span
					5
					,
				Element:span
					"ins"
					:
				Element:span
					6
					,
				Element:span
					"ses"
					:
				Element:span
					7
					},
				Element:span
					"chrome"
					: {
				Element:span
					"aclk"
					:
				Element:span
					63
					,
				Element:span
					"ins"
					:
				Element:span
					6
					,
				Element:span
					"ses"
					:
				Element:span
					5
					,
				Element:span
					"clk"
					:
				Element:span
					1
					},
				Element:span
					"windows"
					: {
				Element:span
					"aclk"
					:
				Element:span
					26
					,
				Element:span
					"clk"
					:
				Element:span
					1
					,
				Element:span
					"ins"
					:
				Element:span
					6
					,
				Element:span
					"ses"
					:
				Element:span
					5
					},
				Element:span
					"safari"
					: {
				Element:span
					"aclk"
					:
				Element:span
					30
					,
				Element:span
					"clk"
					:
				Element:span
					1
					,
				Element:span
					"ins"
					:
				Element:span
					1
					,
				Element:span
					"ses"
					:
				Element:span
					2
					},
				Element:span
					"android"
					: {
				Element:span
					"aclk"
					:
				Element:span
					170
					,
				Element:span
					"clk"
					:
				Element:span
					4
					,
				Element:span
					"ins"
					:
				Element:span
					2
					,
				Element:span
					"ses"
					:
				Element:span
					2
					},
				Element:span
					"unknown"
					: {
				Element:span
					"aclk"
					:
				Element:span
					7
					,
				Element:span
					"clk"
					:
				Element:span
					1
					},
				Element:span
					"ios"
					: {
				Element:span
					"aclk"
					:
				Element:span
					8
					,
				Element:span
					"clk"
					:
				Element:span
					2
					},
				Element:span
					"chromium"
					: {
				Element:span
					"aclk"
					:
				Element:span
					1
					,
				Element:span
					"clk"
					:
				Element:span
					1
					},
				Element:span
					"en-gb"
					: {
				Element:span
					"aclk"
					:
				Element:span
					1
					,
				Element:span
					"clk"
					:
				Element:span
					1
					,
				Element:span
					"ins"
					:
				Element:span
					1
					,
				Element:span
					"ses"
					:
				Element:span
					4
					,
				Element:span
					"rev"
					:
				Element:span
					5.4
					},
				Element:span
					"ie"
					: {
				Element:span
					"aclk"
					:
				Element:span
					1
					,
				Element:span
					"clk"
					:
				Element:span
					1
					,
				Element:span
					"ins"
					:
				Element:span
					1
					,
				Element:span
					"ses"
					:
				Element:span
					4
					,
				Element:span
					"rev"
					:
				Element:span
					5.4
					},
				Element:span
					"windows phone"
					: {
				Element:span
					"aclk"
					:
				Element:span
					1
					,
				Element:span
					"clk"
					:
				Element:span
					1
					,
				Element:span
					"ins"
					:
				Element:span
					1
					,
				Element:span
					"ses"
					:
				Element:span
					4
					,
				Element:span
					"rev"
					:
				Element:span
					5.4
					},
				Element:span
					"ins"
					:
				Element:span
					9
					,
				Element:span
					"ses"
					:
				Element:span
					11
					,
				Element:span
					"rev"
					:
				Element:span
					5.4
					,
				Element:span
					"en"
					: {
				Element:span
					"aclk"
					:
				Element:span
					82
					,
				Element:span
					"clk"
					:
				Element:span
					2
					,
				Element:span
					"ins"
					:
				Element:span
					1
					},
				Element:span
					"opera"
					: {
				Element:span
					"aclk"
					:
				Element:span
					82
					,
				Element:span
					"clk"
					:
				Element:span
					2
					,
				Element:span
					"ins"
					:
				Element:span
					1
					},
				Element:span
					"en_us"
					: {
				Element:span
					"ins"
					:
				Element:span
					1
					},
				Element:span
					"lv"
					: {
				Element:span
					"aclk"
					:
				Element:span
					184
					,
				Element:span
					"ins"
					:
				Element:span
					6
					,
				Element:span
					"ses"
					:
				Element:span
					7
					,
				Element:span
					"clk"
					:
				Element:span
					3
					},
				Element:span
					"firefox"
					: {
				Element:span
					"aclk"
					:
				Element:span
					21
					,
				Element:span
					"clk"
					:
				Element:span
					1
					} },
				Element:span
					"meta"
					: {
				Element:span
					"l"
					: [
				Element:span
					"en-US"
					,
				Element:span
					"en-us"
					,
				Element:span
					"en-gb"
					,
				Element:span
					"en"
					,
				Element:span
					"en_us"
					],
				Element:span
					"b"
					: [
				Element:span
					"Chrome"
					,
				Element:span
					"chrome"
					,
				Element:span
					"safari"
					,
				Element:span
					"unknown"
					,
				Element:span
					"chromium"
					,
				Element:span
					"ie"
					,
				Element:span
					"opera"
					,
				Element:span
					"firefox"
					],
				Element:span
					"pl"
					: [
				Element:span
					"Windows"
					,
				Element:span
					"windows"
					,
				Element:span
					"android"
					,
				Element:span
					"ios"
					,
				Element:span
					"windows phone"
					],
				Element:span
					"cnty"
					: [
				Element:span
					"lv"
					] } } }
			Node:
			(type) c
			(layer)1
				Element:h3
					Path Params
			Node:
			(type) c
			(layer)1
				Element:strong
					api_key
					stringrequired
			Node:
			(type) c
			(layer)1
				Element:p
					API_KEY of user, with permission to access this app
			Node:
			(type) c
			(layer)1
				Element:strong
					app_id
					stringrequired
			Node:
			(type) c
			(layer)1
				Element:p
					ID of the app for which to query
			Node:
			(type) c
			(layer)1
				Element:strong
					camp_id
					stringrequired
			Node:
			(type) c
			(layer)1
				Element:p
					campaign id for which to retrieve all data
			Node:
			(type) c
			(layer)1
				Element:h3
					Query Params
			Node:
			(type) c
			(layer)1
				Element:strong
					period
					string
			Node:
			(type) c
			(layer)1
				Element:p
					For which time period to provide data, possible values (month, 60days, 30days, 7days, yesterday, hour or [startMiliseconds, endMiliseconds] as [1417730400000,1420149600000])
			Node:
			(type) c
			(layer)1
				Element:strong
					callback
					string
			Node:
			(type) c
			(layer)1
				Element:p
					(optional) name of callback function for JSONP output
			Node:
			(type) c
			(layer)1
				Element:p
					This API allows to query information about campaigns. You can also get data for specific campaign by optionally providing camp_id.
			Node:
			(type) c
			(layer)1
				Element:p
					The property data contains standard Countly data by period encoding format
			Node:
			(type) c
			(layer)1
				Element:a
			Node:
			(type) c
			(layer)1
				Element:a
				Element:i
					Suggest Edits
			Node:
			(type) c
			(layer)1
				Element:h2
					/i/campaign/create
			Node:
			(type) c
			(layer)1
				Element:p
					Create a campaign
			Node:
			(type) c
			(layer)1
				Element:span
					get
					https://
			Node:
			(type) c
			(layer)1
				Element:span
				Element:span
					try.count.ly
				Element:span
					/i/campaign/create?api_key=
				Element:span
					api_key
				Element:span
					&args=
				Element:span
					args
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:a
					cURL
				Element:li
				Element:a
					Node
				Element:li
				Element:a
					Ruby
				Element:li
				Element:a
					JavaScript
				Element:li
				Element:a
					Python
			Node:
			(type) c
			(layer)1
				Element:i
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
				Element:span
					curl
				Element:span
					--request
					GET \
				Element:span
					--url
				Element:span
					'https://try.count.ly/i/campaign/create?args=
				Element:span
					args
					&api_key=
				Element:span
					api_key
					'
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
				Element:span
					var request = require("request");
				Element:span
					var
					options
				Element:span
					=
					{ method:
				Element:span
					'GET'
					, url:
				Element:span
					'https://try.count.ly/i/campaign/create'
					, qs: { args:
				Element:span
					'
					, api_key:
				Element:span
					args
					'
				Element:span
					'
					} }; request(options,
				Element:span
					api_key
					'
				Element:span
					function
					(
				Element:span
					error
					,
				Element:span
					response
					,
				Element:span
					body
					) {
				Element:span
					if
					(
				Element:span
					error
					)
				Element:span
					throw new
					Error(
				Element:span
					error
					); console.log(
				Element:span
					body
					); });
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
				Element:span
					require
				Element:span
					'uri'
				Element:span
					require
				Element:span
					'net/http'
					url = URI(
				Element:span
					"https://try.count.ly/i/campaign/create?args=
					) http
				Element:span
					args
					&api_key=
				Element:span
					api_key
					"
				Element:span
					=
				Element:span
					Net::HTTP
					.new(url.host, url.port) http.use_ssl = true http.verify_mode = OpenSSL::SSL::VERIFY_NONE request
				Element:span
					=
				Element:span
					Net::HTTP
					::Get.new(url) response = http.request(request) puts response.read_body
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
				Element:span
					var
					settings
				Element:span
					=
					{
				Element:span
					"async"
					: true,
				Element:span
					"crossDomain"
					: true,
				Element:span
					"url": "https://try.count.ly/i/campaign/create?args=
					,
				Element:span
					args
					&api_key=
				Element:span
					api_key
					"
				Element:span
					"method": "GET"
					,
				Element:span
					"headers"
					: {},
				Element:span
					"processData"
					: false } $.ajax(settings).done(
				Element:span
					function
					(
				Element:span
					response
					) { console.log(
				Element:span
					response
					); });
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
				Element:span
					import requests
					url =
				Element:span
					"https://try.count.ly/i/campaign/create"
					response = requests.request(
				Element:span
					"GET"
					, url)
				Element:span
					print
					(response.text)
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:a
				Element:span
				Element:i
				Element:em
					{{ results.statusCode[0] }}
					{{ results.statusCode[1] }}
				Element:a
					Metadata
				Element:a
				Element:span
					to examples
			Node:
			(type) c
			(layer)1
				Element:pre
			Node:
			(type) c
			(layer)1
				Element:label
					Method
					{{ results.method }}
			Node:
			(type) c
			(layer)1
				Element:label
					URL
					{{ results.url }}
			Node:
			(type) c
			(layer)1
				Element:label
					Request Headers
			Node:
			(type) c
			(layer)1
				Element:pre
					{{ results.requestHeaders }}
			Node:
			(type) c
			(layer)1
				Element:label
					Request Data
			Node:
			(type) c
			(layer)1
				Element:pre
					{{ results.data }}
			Node:
			(type) c
			(layer)1
				Element:label
					Status
			Node:
			(type) c
			(layer)1
				Element:span
			Node:
			(type) c
			(layer)1
				Element:label
					Response Headers
			Node:
			(type) c
			(layer)1
				Element:pre
					{{ results.responseHeaders }}
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:a
				Element:span
				Element:i
				Element:em
					200
					Success
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
					{
				Element:span
					"result"
					:
				Element:span
					"Success"
					}
			Node:
			(type) c
			(layer)1
				Element:h3
					Path Params
			Node:
			(type) c
			(layer)1
				Element:strong
					api_key
					stringrequired
			Node:
			(type) c
			(layer)1
				Element:p
					API_KEY of user, with permission to access this app
			Node:
			(type) c
			(layer)1
				Element:strong
					args
					stringrequired
			Node:
			(type) c
			(layer)1
				Element:p
					JSON object as string with campaign data.
			Node:
			(type) c
			(layer)1
				Element:p
					Creates new campaign from values provided in args parameter as stringified JSON
			Node:
			(type) c
			(layer)1
				Element:p
					The value that can be included in args are:
			Node:
			(type) c
			(layer)1
				Element:p
					'name': { 'required': true, 'type': 'String' },// name of the campaign
			Node:
			(type) c
			(layer)1
				Element:p
					'link': { 'required': true, 'type': 'String' },// default redirect link
			Node:
			(type) c
			(layer)1
				Element:p
					'cost': { 'required': false, 'type': 'String' }, //cost of the campaign
			Node:
			(type) c
			(layer)1
				Element:p
					'costtype': { 'required': false, 'type': 'String' },// costtype click, install or campaign
			Node:
			(type) c
			(layer)1
				Element:p
					'links': { 'required': false, 'type': 'Array' },// links for other platforms as android, ios, windows-phone, windows mac and linux
			Node:
			(type) c
			(layer)1
				Element:p
					'postbacks': { 'required': false, 'type': 'Array' }, //list of postback urls with placeholders
			Node:
			(type) c
			(layer)1
				Element:p
					'app_id': { 'required': true, 'type': 'Boolean' }// app_id for which campaign is created
			Node:
			(type) c
			(layer)1
				Element:a
			Node:
			(type) c
			(layer)1
				Element:a
				Element:i
					Suggest Edits
			Node:
			(type) c
			(layer)1
				Element:h2
					/i/campaign/update
			Node:
			(type) c
			(layer)1
				Element:p
					Update data for specific campaign
			Node:
			(type) c
			(layer)1
				Element:span
					get
					https://
			Node:
			(type) c
			(layer)1
				Element:span
				Element:span
					try.count.ly
				Element:span
					/i/campaign/update?api_key=
				Element:span
					api_key
				Element:span
					&args=
				Element:span
					args
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:a
					cURL
				Element:li
				Element:a
					Node
				Element:li
				Element:a
					Ruby
				Element:li
				Element:a
					JavaScript
				Element:li
				Element:a
					Python
			Node:
			(type) c
			(layer)1
				Element:i
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
				Element:span
					curl
				Element:span
					--request
					GET \
				Element:span
					--url
				Element:span
					'https://try.count.ly/i/campaign/update?args=
				Element:span
					args
					&api_key=
				Element:span
					api_key
					'
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
				Element:span
					var request = require("request");
				Element:span
					var
					options
				Element:span
					=
					{ method:
				Element:span
					'GET'
					, url:
				Element:span
					'https://try.count.ly/i/campaign/update'
					, qs: { args:
				Element:span
					'
					, api_key:
				Element:span
					args
					'
				Element:span
					'
					} }; request(options,
				Element:span
					api_key
					'
				Element:span
					function
					(
				Element:span
					error
					,
				Element:span
					response
					,
				Element:span
					body
					) {
				Element:span
					if
					(
				Element:span
					error
					)
				Element:span
					throw new
					Error(
				Element:span
					error
					); console.log(
				Element:span
					body
					); });
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
				Element:span
					require
				Element:span
					'uri'
				Element:span
					require
				Element:span
					'net/http'
					url = URI(
				Element:span
					"https://try.count.ly/i/campaign/update?args=
					) http
				Element:span
					args
					&api_key=
				Element:span
					api_key
					"
				Element:span
					=
				Element:span
					Net::HTTP
					.new(url.host, url.port) http.use_ssl = true http.verify_mode = OpenSSL::SSL::VERIFY_NONE request
				Element:span
					=
				Element:span
					Net::HTTP
					::Get.new(url) response = http.request(request) puts response.read_body
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
				Element:span
					var
					settings
				Element:span
					=
					{
				Element:span
					"async"
					: true,
				Element:span
					"crossDomain"
					: true,
				Element:span
					"url": "https://try.count.ly/i/campaign/update?args=
					,
				Element:span
					args
					&api_key=
				Element:span
					api_key
					"
				Element:span
					"method": "GET"
					,
				Element:span
					"headers"
					: {},
				Element:span
					"processData"
					: false } $.ajax(settings).done(
				Element:span
					function
					(
				Element:span
					response
					) { console.log(
				Element:span
					response
					); });
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
				Element:span
					import requests
					url =
				Element:span
					"https://try.count.ly/i/campaign/update"
					response = requests.request(
				Element:span
					"GET"
					, url)
				Element:span
					print
					(response.text)
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:a
				Element:span
				Element:i
				Element:em
					{{ results.statusCode[0] }}
					{{ results.statusCode[1] }}
				Element:a
					Metadata
				Element:a
				Element:span
					to examples
			Node:
			(type) c
			(layer)1
				Element:pre
			Node:
			(type) c
			(layer)1
				Element:label
					Method
					{{ results.method }}
			Node:
			(type) c
			(layer)1
				Element:label
					URL
					{{ results.url }}
			Node:
			(type) c
			(layer)1
				Element:label
					Request Headers
			Node:
			(type) c
			(layer)1
				Element:pre
					{{ results.requestHeaders }}
			Node:
			(type) c
			(layer)1
				Element:label
					Request Data
			Node:
			(type) c
			(layer)1
				Element:pre
					{{ results.data }}
			Node:
			(type) c
			(layer)1
				Element:label
					Status
			Node:
			(type) c
			(layer)1
				Element:span
			Node:
			(type) c
			(layer)1
				Element:label
					Response Headers
			Node:
			(type) c
			(layer)1
				Element:pre
					{{ results.responseHeaders }}
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:a
				Element:span
				Element:i
				Element:em
					200
					Success
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
					{
				Element:span
					"result"
					:
				Element:span
					"Success"
					}
			Node:
			(type) c
			(layer)1
				Element:h3
					Path Params
			Node:
			(type) c
			(layer)1
				Element:strong
					api_key
					stringrequired
			Node:
			(type) c
			(layer)1
				Element:p
					API_KEY of user, with permission to access this app
			Node:
			(type) c
			(layer)1
				Element:strong
					args
					stringrequired
			Node:
			(type) c
			(layer)1
				Element:p
					JSON object as string with campaign data.
			Node:
			(type) c
			(layer)1
				Element:p
					Creates new campaign from values provided in args parameter as stringified JSON
			Node:
			(type) c
			(layer)1
				Element:p
					The value that can be included in args are:
			Node:
			(type) c
			(layer)1
				Element:p
					'_id': { 'required': true, 'type': 'String' },// _id for campaign to modify
			Node:
			(type) c
			(layer)1
				Element:p
					'name': { 'required': true, 'type': 'String' },// name of the campaign
			Node:
			(type) c
			(layer)1
				Element:p
					'link': { 'required': true, 'type': 'String' },// default redirect link
			Node:
			(type) c
			(layer)1
				Element:p
					'cost': { 'required': false, 'type': 'String' }, //cost of the campaign
			Node:
			(type) c
			(layer)1
				Element:p
					'costtype': { 'required': false, 'type': 'String' },// costtype click, install or campaign
			Node:
			(type) c
			(layer)1
				Element:p
					'links': { 'required': false, 'type': 'Array' },// links for other platforms as android, ios, windows-phone, windows mac and linux
			Node:
			(type) c
			(layer)1
				Element:p
					'postbacks': { 'required': false, 'type': 'Array' }, //list of postback urls with placeholders
			Node:
			(type) c
			(layer)1
				Element:a
			Node:
			(type) c
			(layer)1
				Element:a
				Element:i
					Suggest Edits
			Node:
			(type) c
			(layer)1
				Element:h2
					/i/campaign/delete
			Node:
			(type) c
			(layer)1
				Element:p
					Delete campaign
			Node:
			(type) c
			(layer)1
				Element:span
					get
					https://
			Node:
			(type) c
			(layer)1
				Element:span
				Element:span
					try.count.ly
				Element:span
					/i/campaign/delete?api_key=
				Element:span
					api_key
				Element:span
					&args=
				Element:span
					args
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:a
					cURL
				Element:li
				Element:a
					Node
				Element:li
				Element:a
					Ruby
				Element:li
				Element:a
					JavaScript
				Element:li
				Element:a
					Python
			Node:
			(type) c
			(layer)1
				Element:i
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
				Element:span
					curl
				Element:span
					--request
					GET \
				Element:span
					--url
				Element:span
					'https://try.count.ly/i/campaign/delete?args=
				Element:span
					args
					&api_key=
				Element:span
					api_key
					'
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
				Element:span
					var request = require("request");
				Element:span
					var
					options
				Element:span
					=
					{ method:
				Element:span
					'GET'
					, url:
				Element:span
					'https://try.count.ly/i/campaign/delete'
					, qs: { args:
				Element:span
					'
					, api_key:
				Element:span
					args
					'
				Element:span
					'
					} }; request(options,
				Element:span
					api_key
					'
				Element:span
					function
					(
				Element:span
					error
					,
				Element:span
					response
					,
				Element:span
					body
					) {
				Element:span
					if
					(
				Element:span
					error
					)
				Element:span
					throw new
					Error(
				Element:span
					error
					); console.log(
				Element:span
					body
					); });
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
				Element:span
					require
				Element:span
					'uri'
				Element:span
					require
				Element:span
					'net/http'
					url = URI(
				Element:span
					"https://try.count.ly/i/campaign/delete?args=
					) http
				Element:span
					args
					&api_key=
				Element:span
					api_key
					"
				Element:span
					=
				Element:span
					Net::HTTP
					.new(url.host, url.port) http.use_ssl = true http.verify_mode = OpenSSL::SSL::VERIFY_NONE request
				Element:span
					=
				Element:span
					Net::HTTP
					::Get.new(url) response = http.request(request) puts response.read_body
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
				Element:span
					var
					settings
				Element:span
					=
					{
				Element:span
					"async"
					: true,
				Element:span
					"crossDomain"
					: true,
				Element:span
					"url": "https://try.count.ly/i/campaign/delete?args=
					,
				Element:span
					args
					&api_key=
				Element:span
					api_key
					"
				Element:span
					"method": "GET"
					,
				Element:span
					"headers"
					: {},
				Element:span
					"processData"
					: false } $.ajax(settings).done(
				Element:span
					function
					(
				Element:span
					response
					) { console.log(
				Element:span
					response
					); });
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
				Element:span
					import requests
					url =
				Element:span
					"https://try.count.ly/i/campaign/delete"
					response = requests.request(
				Element:span
					"GET"
					, url)
				Element:span
					print
					(response.text)
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:a
				Element:span
				Element:i
				Element:em
					{{ results.statusCode[0] }}
					{{ results.statusCode[1] }}
				Element:a
					Metadata
				Element:a
				Element:span
					to examples
			Node:
			(type) c
			(layer)1
				Element:pre
			Node:
			(type) c
			(layer)1
				Element:label
					Method
					{{ results.method }}
			Node:
			(type) c
			(layer)1
				Element:label
					URL
					{{ results.url }}
			Node:
			(type) c
			(layer)1
				Element:label
					Request Headers
			Node:
			(type) c
			(layer)1
				Element:pre
					{{ results.requestHeaders }}
			Node:
			(type) c
			(layer)1
				Element:label
					Request Data
			Node:
			(type) c
			(layer)1
				Element:pre
					{{ results.data }}
			Node:
			(type) c
			(layer)1
				Element:label
					Status
			Node:
			(type) c
			(layer)1
				Element:span
			Node:
			(type) c
			(layer)1
				Element:label
					Response Headers
			Node:
			(type) c
			(layer)1
				Element:pre
					{{ results.responseHeaders }}
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:a
				Element:span
				Element:i
				Element:em
					200
					Success
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
					{
				Element:span
					"result"
					:
				Element:span
					"Success"
					}
			Node:
			(type) c
			(layer)1
				Element:h3
					Path Params
			Node:
			(type) c
			(layer)1
				Element:strong
					api_key
					stringrequired
			Node:
			(type) c
			(layer)1
				Element:p
					API_KEY of user, with permission to access this app
			Node:
			(type) c
			(layer)1
				Element:strong
					args
					stringrequired
			Node:
			(type) c
			(layer)1
				Element:p
					JSON object as string with campaign data.
			Node:
			(type) c
			(layer)1
				Element:p
					Creates new campaign from values provided in args parameter as stringified JSON
			Node:
			(type) c
			(layer)1
				Element:p
					The value that can be included in args are:
			Node:
			(type) c
			(layer)1
				Element:p
					'_id': { 'required': true, 'type': 'String' },// _id of campaign to delete
			Node:
			(type) c
			(layer)1
				Element:a
			Node:
			(type) c
			(layer)1
				Element:a
				Element:i
					Suggest Edits
			Node:
			(type) c
			(layer)1
				Element:h2
					/o/db
			Node:
			(type) c
			(layer)1
				Element:p
					View databases and collections
			Node:
			(type) c
			(layer)1
				Element:span
					get
					https://
			Node:
			(type) c
			(layer)1
				Element:span
				Element:span
					try.count.ly
				Element:span
					/o/db?api_key=
				Element:span
					api_key
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:a
					cURL
				Element:li
				Element:a
					Node
				Element:li
				Element:a
					Ruby
				Element:li
				Element:a
					JavaScript
				Element:li
				Element:a
					Python
			Node:
			(type) c
			(layer)1
				Element:i
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
				Element:span
					curl
				Element:span
					--request
					GET \
				Element:span
					--url
				Element:span
					'https://try.count.ly/o/db?api_key=
				Element:span
					api_key
					'
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
				Element:span
					var request = require("request");
				Element:span
					var
					options
				Element:span
					=
					{ method:
				Element:span
					'GET'
					, url:
				Element:span
					'https://try.count.ly/o/db'
					, qs: { api_key:
				Element:span
					'
					} }; request(options,
				Element:span
					api_key
					'
				Element:span
					function
					(
				Element:span
					error
					,
				Element:span
					response
					,
				Element:span
					body
					) {
				Element:span
					if
					(
				Element:span
					error
					)
				Element:span
					throw new
					Error(
				Element:span
					error
					); console.log(
				Element:span
					body
					); });
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
				Element:span
					require
				Element:span
					'uri'
				Element:span
					require
				Element:span
					'net/http'
					url = URI(
				Element:span
					"https://try.count.ly/o/db?api_key=
					) http
				Element:span
					api_key
					"
				Element:span
					=
				Element:span
					Net::HTTP
					.new(url.host, url.port) http.use_ssl = true http.verify_mode = OpenSSL::SSL::VERIFY_NONE request
				Element:span
					=
				Element:span
					Net::HTTP
					::Get.new(url) response = http.request(request) puts response.read_body
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
				Element:span
					var
					settings
				Element:span
					=
					{
				Element:span
					"async"
					: true,
				Element:span
					"crossDomain"
					: true,
				Element:span
					"url": "https://try.count.ly/o/db?api_key=
					,
				Element:span
					api_key
					"
				Element:span
					"method": "GET"
					,
				Element:span
					"headers"
					: {},
				Element:span
					"processData"
					: false } $.ajax(settings).done(
				Element:span
					function
					(
				Element:span
					response
					) { console.log(
				Element:span
					response
					); });
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
				Element:span
					import requests
					url =
				Element:span
					"https://try.count.ly/o/db"
					response = requests.request(
				Element:span
					"GET"
					, url)
				Element:span
					print
					(response.text)
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:a
				Element:span
				Element:i
				Element:em
					{{ results.statusCode[0] }}
					{{ results.statusCode[1] }}
				Element:a
					Metadata
				Element:a
				Element:span
					to examples
			Node:
			(type) c
			(layer)1
				Element:pre
			Node:
			(type) c
			(layer)1
				Element:label
					Method
					{{ results.method }}
			Node:
			(type) c
			(layer)1
				Element:label
					URL
					{{ results.url }}
			Node:
			(type) c
			(layer)1
				Element:label
					Request Headers
			Node:
			(type) c
			(layer)1
				Element:pre
					{{ results.requestHeaders }}
			Node:
			(type) c
			(layer)1
				Element:label
					Request Data
			Node:
			(type) c
			(layer)1
				Element:pre
					{{ results.data }}
			Node:
			(type) c
			(layer)1
				Element:label
					Status
			Node:
			(type) c
			(layer)1
				Element:span
			Node:
			(type) c
			(layer)1
				Element:label
					Response Headers
			Node:
			(type) c
			(layer)1
				Element:pre
					{{ results.responseHeaders }}
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:a
				Element:span
				Element:i
				Element:em
					200
					Success
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
					[ {
				Element:span
					"name"
					:
				Element:span
					"countly"
					,
				Element:span
					"collections"
					:{
				Element:span
					"app_users(Test)"
					:
				Element:span
					"app_users56e53239a941253d470d7c52"
					,
				Element:span
					"apps"
					:
				Element:span
					"apps"
					,
				Element:span
					"browser"
					:
				Element:span
					"browser"
					,
				Element:span
					"carriers"
					:
				Element:span
					"carriers"
					,
				Element:span
					"cities"
					:
				Element:span
					"cities"
					,
				Element:span
					"crashdata"
					:
				Element:span
					"crashdata"
					,
				Element:span
					"density"
					:
				Element:span
					"density"
					,
				Element:span
					"device_details"
					:
				Element:span
					"device_details"
					,
				Element:span
					"devices"
					:
				Element:span
					"devices"
					,
				Element:span
					"events"
					:
				Element:span
					"events"
					,
				Element:span
					"events(Test: Achievement)"
					:
				Element:span
					"events532160f50193da654678c7c0a07b9b6eff08f33d"
					,
				Element:span
					"events(Test: Purchase)"
					:
				Element:span
					"events5825c105b4637c9dff7c0eb90db330f405623ed4"
					,
				Element:span
					"events(Test: Login)"
					:
				Element:span
					"events6b3f92c5a7f7c6a17c2ce459afc9a25ed4a15fff"
					,
				Element:span
					"events(Test: Sound)"
					:
				Element:span
					"events730bf74267e0bbf12e391fff4b93fdad83389645"
					,
				Element:span
					"langs"
					:
				Element:span
					"langs"
					,
				Element:span
					"live_data(Test)"
					:
				Element:span
					"live_data56e53239a941253d470d7c52"
					,
				Element:span
					"logs(Test)"
					:
				Element:span
					"logs56e53239a941253d470d7c52"
					,
				Element:span
					"members"
					:
				Element:span
					"members"
					,
				Element:span
					"messages"
					:
				Element:span
					"messages"
					,
				Element:span
					"password_reset"
					:
				Element:span
					"password_reset"
					,
				Element:span
					"plugins"
					:
				Element:span
					"plugins"
					,
				Element:span
					"reports"
					:
				Element:span
					"reports"
					,
				Element:span
					"sources"
					:
				Element:span
					"sources"
					,
				Element:span
					"systemlogs"
					:
				Element:span
					"systemlogs"
					,
				Element:span
					"users"
					:
				Element:span
					"users"
					} }, {
				Element:span
					"name"
					:
				Element:span
					"countly_drill"
					,
				Element:span
					"collections"
					:{
				Element:span
					"drill_bookmarks"
					:
				Element:span
					"drill_bookmarks"
					,
				Element:span
					"drill_cache"
					:
				Element:span
					"drill_cache"
					,
				Element:span
					"drill_events(Test: [CLY]_crash)"
					:
				Element:span
					"drill_events2a4a633d5cb2d75d92163e07d7d1fb22c381c654"
					,
				Element:span
					"drill_events(Test: [CLY]_session)"
					:
				Element:span
					"drill_events45a7f2d7637f9dc7b6652280ae21bf7e9449063c"
					,
				Element:span
					"drill_events(Test: Achievement)"
					:
				Element:span
					"drill_events532160f50193da654678c7c0a07b9b6eff08f33d"
					,
				Element:span
					"drill_events(Test: Purchase)"
					:
				Element:span
					"drill_events5825c105b4637c9dff7c0eb90db330f405623ed4"
					,
				Element:span
					"drill_events(Test: Login)"
					:
				Element:span
					"drill_events6b3f92c5a7f7c6a17c2ce459afc9a25ed4a15fff"
					,
				Element:span
					"drill_events(Test: Sound)"
					:
				Element:span
					"drill_events730bf74267e0bbf12e391fff4b93fdad83389645"
					,
				Element:span
					"drill_events(Test: [CLY]_push_sent)"
					:
				Element:span
					"drill_events8a95f641b983f0aeea7d60f5e8df1ff2af97a74a"
					,
				Element:span
					"drill_events(Test: [CLY]_push_action)"
					:
				Element:span
					"drill_eventsc1d35812ae7b3f562541fce8e97326ef9f9542bc"
					,
				Element:span
					"drill_events(Test: [CLY]_view)"
					:
				Element:span
					"drill_eventsdb35e292f37829856bf440237b3bf17324f21a7c"
					,
				Element:span
					"drill_events(Test: [CLY]_push_open)"
					:
				Element:span
					"drill_eventsf4747e5fccef568144ea877763614cc143fe2ddd"
					} } ]
			Node:
			(type) c
			(layer)1
				Element:h3
					Path Params
			Node:
			(type) c
			(layer)1
				Element:strong
					api_key
					stringrequired
			Node:
			(type) c
			(layer)1
				Element:p
					API_KEY of user, with permission to access this app
			Node:
			(type) c
			(layer)1
				Element:p
					Lists all Countly related MongoDB databases with their collections, using key as decoded collection name and value as real collection name
			Node:
			(type) c
			(layer)1
				Element:a
			Node:
			(type) c
			(layer)1
				Element:a
				Element:i
					Suggest Edits
			Node:
			(type) c
			(layer)1
				Element:h2
					/o/db?dbs=:db&collection=:collection
			Node:
			(type) c
			(layer)1
				Element:p
					View databases and collections
			Node:
			(type) c
			(layer)1
				Element:span
					get
					https://
			Node:
			(type) c
			(layer)1
				Element:span
				Element:span
					try.count.ly
				Element:span
					/o/db?dbs=
				Element:span
					db
				Element:span
					&api_key=
				Element:span
					api_key
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:a
					cURL
				Element:li
				Element:a
					Node
				Element:li
				Element:a
					Ruby
				Element:li
				Element:a
					JavaScript
				Element:li
				Element:a
					Python
			Node:
			(type) c
			(layer)1
				Element:i
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
				Element:span
					curl
				Element:span
					--request
					GET \
				Element:span
					--url
				Element:span
					'https://try.count.ly/o/db?api_key=
				Element:span
					api_key
					&dbs=
				Element:span
					db
					'
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
				Element:span
					var request = require("request");
				Element:span
					var
					options
				Element:span
					=
					{ method:
				Element:span
					'GET'
					, url:
				Element:span
					'https://try.count.ly/o/db'
					, qs: { api_key:
				Element:span
					'
					, dbs:
				Element:span
					api_key
					'
				Element:span
					'
					} }; request(options,
				Element:span
					db
					'
				Element:span
					function
					(
				Element:span
					error
					,
				Element:span
					response
					,
				Element:span
					body
					) {
				Element:span
					if
					(
				Element:span
					error
					)
				Element:span
					throw new
					Error(
				Element:span
					error
					); console.log(
				Element:span
					body
					); });
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
				Element:span
					require
				Element:span
					'uri'
				Element:span
					require
				Element:span
					'net/http'
					url = URI(
				Element:span
					"https://try.count.ly/o/db?api_key=
					) http
				Element:span
					api_key
					&dbs=
				Element:span
					db
					"
				Element:span
					=
				Element:span
					Net::HTTP
					.new(url.host, url.port) http.use_ssl = true http.verify_mode = OpenSSL::SSL::VERIFY_NONE request
				Element:span
					=
				Element:span
					Net::HTTP
					::Get.new(url) response = http.request(request) puts response.read_body
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
				Element:span
					var
					settings
				Element:span
					=
					{
				Element:span
					"async"
					: true,
				Element:span
					"crossDomain"
					: true,
				Element:span
					"url": "https://try.count.ly/o/db?api_key=
					,
				Element:span
					api_key
					&dbs=
				Element:span
					db
					"
				Element:span
					"method": "GET"
					,
				Element:span
					"headers"
					: {},
				Element:span
					"processData"
					: false } $.ajax(settings).done(
				Element:span
					function
					(
				Element:span
					response
					) { console.log(
				Element:span
					response
					); });
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
				Element:span
					import requests
					url =
				Element:span
					"https://try.count.ly/o/db"
					response = requests.request(
				Element:span
					"GET"
					, url)
				Element:span
					print
					(response.text)
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:a
				Element:span
				Element:i
				Element:em
					{{ results.statusCode[0] }}
					{{ results.statusCode[1] }}
				Element:a
					Metadata
				Element:a
				Element:span
					to examples
			Node:
			(type) c
			(layer)1
				Element:pre
			Node:
			(type) c
			(layer)1
				Element:label
					Method
					{{ results.method }}
			Node:
			(type) c
			(layer)1
				Element:label
					URL
					{{ results.url }}
			Node:
			(type) c
			(layer)1
				Element:label
					Request Headers
			Node:
			(type) c
			(layer)1
				Element:pre
					{{ results.requestHeaders }}
			Node:
			(type) c
			(layer)1
				Element:label
					Request Data
			Node:
			(type) c
			(layer)1
				Element:pre
					{{ results.data }}
			Node:
			(type) c
			(layer)1
				Element:label
					Status
			Node:
			(type) c
			(layer)1
				Element:span
			Node:
			(type) c
			(layer)1
				Element:label
					Response Headers
			Node:
			(type) c
			(layer)1
				Element:pre
					{{ results.responseHeaders }}
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:a
				Element:span
				Element:i
				Element:em
					200
					Example app_users collection
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
					{
				Element:span
					"limit"
					:
				Element:span
					5
					,
				Element:span
					"start"
					:
				Element:span
					1
					,
				Element:span
					"end"
					:
				Element:span
					5
					,
				Element:span
					"collections"
					:[ {
				Element:span
					"_id"
					:
				Element:span
					"uid-sequence"
					,
				Element:span
					"seq"
					:
				Element:span
					1054
					}, {
				Element:span
					"_id"
					:
				Element:span
					"81ff894cdfe1adc056baf6097c8f6cddd8ff51b6"
					,
				Element:span
					"sc"
					:
				Element:span
					7
					,
				Element:span
					"fs"
					:
				Element:span
					1458165600
					,
				Element:span
					"ls"
					:
				Element:span
					1458684000
					,
				Element:span
					"did"
					:
				Element:span
					"01458165600"
					,
				Element:span
					"cc"
					:
				Element:span
					"US"
					,
				Element:span
					"cty"
					:
				Element:span
					"Cambridge"
					,
				Element:span
					"lat"
					:
				Element:span
					42.3626
					,
				Element:span
					"lng"
					:
				Element:span
					-
				Element:span
					71.0843
					,
				Element:span
					"uid"
					:
				Element:span
					"3"
					}, {
				Element:span
					"_id"
					:
				Element:span
					"e4a13ec277b409d0ab3359a2b4d0ddb99ea77ca4"
					,
				Element:span
					"sc"
					:
				Element:span
					5
					,
				Element:span
					"fs"
					:
				Element:span
					1458338400
					,
				Element:span
					"ls"
					:
				Element:span
					1458684000
					,
				Element:span
					"did"
					:
				Element:span
					"01458338400"
					,
				Element:span
					"cc"
					:
				Element:span
					"GB"
					,
				Element:span
					"cty"
					:
				Element:span
					"Unknown"
					,
				Element:span
					"lat"
					:
				Element:span
					51.5
					,
				Element:span
					"lng"
					:
				Element:span
					-
				Element:span
					0.13
					,
				Element:span
					"uid"
					:
				Element:span
					"8"
					}, {
				Element:span
					"_id"
					:
				Element:span
					"480f6b511b337667af70b1cc6a49b4765099d70d"
					,
				Element:span
					"sc"
					:
				Element:span
					8
					,
				Element:span
					"fs"
					:
				Element:span
					1458079200
					,
				Element:span
					"ls"
					:
				Element:span
					1458684000
					,
				Element:span
					"did"
					:
				Element:span
					"01458079200"
					,
				Element:span
					"cc"
					:
				Element:span
					"US"
					,
				Element:span
					"cty"
					:
				Element:span
					"Unknown"
					,
				Element:span
					"lat"
					:
				Element:span
					38
					,
				Element:span
					"lng"
					:
				Element:span
					-
				Element:span
					97
					,
				Element:span
					"uid"
					:
				Element:span
					"1"
					}, {
				Element:span
					"_id"
					:
				Element:span
					"e3be7e96f01bb9da9d096a1dfe43d6e584ea0b3d"
					,
				Element:span
					"sc"
					:
				Element:span
					8
					,
				Element:span
					"fs"
					:
				Element:span
					1458079200
					,
				Element:span
					"ls"
					:
				Element:span
					1458684000
					,
				Element:span
					"did"
					:
				Element:span
					"11458079200"
					,
				Element:span
					"cc"
					:
				Element:span
					"US"
					,
				Element:span
					"cty"
					:
				Element:span
					"Ashburn"
					,
				Element:span
					"uid"
					:
				Element:span
					"2"
					,
				Element:span
					"lat"
					:
				Element:span
					39.0335
					,
				Element:span
					"lng"
					:
				Element:span
					-
				Element:span
					77.4838
					} ],
				Element:span
					"total"
					:
				Element:span
					1055
					,
				Element:span
					"pages"
					:
				Element:span
					211
					,
				Element:span
					"curPage"
					:
				Element:span
					1
					}
			Node:
			(type) c
			(layer)1
				Element:h3
					Path Params
			Node:
			(type) c
			(layer)1
				Element:strong
					api_key
					stringrequired
			Node:
			(type) c
			(layer)1
				Element:p
					API_KEY of user, with permission to access this app
			Node:
			(type) c
			(layer)1
				Element:h3
					Query Params
			Node:
			(type) c
			(layer)1
				Element:strong
					dbs
					string
			Node:
			(type) c
			(layer)1
				Element:p
					Database name
			Node:
			(type) c
			(layer)1
				Element:strong
					collection
					string
			Node:
			(type) c
			(layer)1
				Element:p
					Collection name
			Node:
			(type) c
			(layer)1
				Element:strong
					limit
					int32
			Node:
			(type) c
			(layer)1
				Element:p
					Amount of documents to show
			Node:
			(type) c
			(layer)1
				Element:strong
					skip
					int32
			Node:
			(type) c
			(layer)1
				Element:p
					Amount of documents to skip for offset/paging
			Node:
			(type) c
			(layer)1
				Element:strong
					filter
					string
			Node:
			(type) c
			(layer)1
				Element:p
					JSON encoded mongodb query which collections to select
			Node:
			(type) c
			(layer)1
				Element:p
					List specified amount of documents for provided database and collection.
				Element:br
					Returns output with:
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					limit - current set limit how many documents to show
				Element:li
					start - index from which document to start displaying (1 is the beginning)
				Element:li
					end - index of the last document, so next paginated request should request skip with this end index
				Element:li
					total - amount of total documents for this filter/query
				Element:li
					pages - amount of total pages for this filter/query with provided limit setting
				Element:li
					curPage - current page displayed
				Element:li
					collections - array of documents for provided collection, these documents are raw data as they are stored in database
			Node:
			(type) c
			(layer)1
				Element:a
			Node:
			(type) c
			(layer)1
				Element:a
				Element:i
					Suggest Edits
			Node:
			(type) c
			(layer)1
				Element:h2
					/o/db?dbs=:db&collection=:collection&document=:document
			Node:
			(type) c
			(layer)1
				Element:p
					View databases and collections
			Node:
			(type) c
			(layer)1
				Element:span
					get
					https://
			Node:
			(type) c
			(layer)1
				Element:span
				Element:span
					try.count.ly
				Element:span
					/o/db?dbs=
				Element:span
					db
				Element:span
					&api_key=
				Element:span
					api_key
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:a
					cURL
				Element:li
				Element:a
					Node
				Element:li
				Element:a
					Ruby
				Element:li
				Element:a
					JavaScript
				Element:li
				Element:a
					Python
			Node:
			(type) c
			(layer)1
				Element:i
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
				Element:span
					curl
				Element:span
					--request
					GET \
				Element:span
					--url
				Element:span
					'https://try.count.ly/o/db?api_key=
				Element:span
					api_key
					&dbs=
				Element:span
					db
					'
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
				Element:span
					var request = require("request");
				Element:span
					var
					options
				Element:span
					=
					{ method:
				Element:span
					'GET'
					, url:
				Element:span
					'https://try.count.ly/o/db'
					, qs: { api_key:
				Element:span
					'
					, dbs:
				Element:span
					api_key
					'
				Element:span
					'
					} }; request(options,
				Element:span
					db
					'
				Element:span
					function
					(
				Element:span
					error
					,
				Element:span
					response
					,
				Element:span
					body
					) {
				Element:span
					if
					(
				Element:span
					error
					)
				Element:span
					throw new
					Error(
				Element:span
					error
					); console.log(
				Element:span
					body
					); });
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
				Element:span
					require
				Element:span
					'uri'
				Element:span
					require
				Element:span
					'net/http'
					url = URI(
				Element:span
					"https://try.count.ly/o/db?api_key=
					) http
				Element:span
					api_key
					&dbs=
				Element:span
					db
					"
				Element:span
					=
				Element:span
					Net::HTTP
					.new(url.host, url.port) http.use_ssl = true http.verify_mode = OpenSSL::SSL::VERIFY_NONE request
				Element:span
					=
				Element:span
					Net::HTTP
					::Get.new(url) response = http.request(request) puts response.read_body
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
				Element:span
					var
					settings
				Element:span
					=
					{
				Element:span
					"async"
					: true,
				Element:span
					"crossDomain"
					: true,
				Element:span
					"url": "https://try.count.ly/o/db?api_key=
					,
				Element:span
					api_key
					&dbs=
				Element:span
					db
					"
				Element:span
					"method": "GET"
					,
				Element:span
					"headers"
					: {},
				Element:span
					"processData"
					: false } $.ajax(settings).done(
				Element:span
					function
					(
				Element:span
					response
					) { console.log(
				Element:span
					response
					); });
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
				Element:span
					import requests
					url =
				Element:span
					"https://try.count.ly/o/db"
					response = requests.request(
				Element:span
					"GET"
					, url)
				Element:span
					print
					(response.text)
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:a
				Element:span
				Element:i
				Element:em
					{{ results.statusCode[0] }}
					{{ results.statusCode[1] }}
				Element:a
					Metadata
				Element:a
				Element:span
					to examples
			Node:
			(type) c
			(layer)1
				Element:pre
			Node:
			(type) c
			(layer)1
				Element:label
					Method
					{{ results.method }}
			Node:
			(type) c
			(layer)1
				Element:label
					URL
					{{ results.url }}
			Node:
			(type) c
			(layer)1
				Element:label
					Request Headers
			Node:
			(type) c
			(layer)1
				Element:pre
					{{ results.requestHeaders }}
			Node:
			(type) c
			(layer)1
				Element:label
					Request Data
			Node:
			(type) c
			(layer)1
				Element:pre
					{{ results.data }}
			Node:
			(type) c
			(layer)1
				Element:label
					Status
			Node:
			(type) c
			(layer)1
				Element:span
			Node:
			(type) c
			(layer)1
				Element:label
					Response Headers
			Node:
			(type) c
			(layer)1
				Element:pre
					{{ results.responseHeaders }}
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:a
				Element:span
				Element:i
				Element:em
					200
					Example app_users collection
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
					{
				Element:span
					"_id"
					:
				Element:span
					"91cc267975e3f5b2161649304eb55ad87513b9a2"
					,
				Element:span
					"hasInfo"
					:
				Element:span
					true
					,
				Element:span
					"name"
					:
				Element:span
					"Rose Cortez"
					,
				Element:span
					"username"
					:
				Element:span
					"zas"
					,
				Element:span
					"email"
					:
				Element:span
					"ok@gegoju.edu"
					,
				Element:span
					"organization"
					:
				Element:span
					"Ruvi"
					,
				Element:span
					"phone"
					:
				Element:span
					"(679) 206-1029"
					,
				Element:span
					"gender"
					:
				Element:span
					"M"
					,
				Element:span
					"byear"
					:
				Element:span
					1984
					,
				Element:span
					"custom"
					:{
				Element:span
					"Facebook Login"
					:
				Element:span
					"true"
					,
				Element:span
					"Has Apple Watch OS"
					:
				Element:span
					"true"
					},
				Element:span
					"sc"
					:
				Element:span
					1
					,
				Element:span
					"fs"
					:
				Element:span
					1458450383
					,
				Element:span
					"ls"
					:
				Element:span
					1458450383
					,
				Element:span
					"did"
					:
				Element:span
					"d2b1914e-4196-c8aa-4821-d8ce70d72d18"
					,
				Element:span
					"cc"
					:
				Element:span
					"US"
					,
				Element:span
					"cty"
					:
				Element:span
					"Hightstown"
					,
				Element:span
					"lat"
					:
				Element:span
					40.2485
					,
				Element:span
					"lng"
					:
				Element:span
					-
				Element:span
					74.5315
					,
				Element:span
					"lo"
					:
				Element:span
					"fr_FR"
					,
				Element:span
					"c"
					:
				Element:span
					"Vodafone"
					,
				Element:span
					"d"
					:
				Element:span
					"Nexus 4"
					,
				Element:span
					"av"
					:
				Element:span
					"2:1"
					,
				Element:span
					"p"
					:
				Element:span
					"Android"
					,
				Element:span
					"pv"
					:
				Element:span
					"a4:1"
					,
				Element:span
					"r"
					:
				Element:span
					"320x480"
					,
				Element:span
					"dnst"
					:
				Element:span
					"240dpi"
					,
				Element:span
					"la"
					:
				Element:span
					"fr"
					,
				Element:span
					"src"
					:
				Element:span
					"Android"
					,
				Element:span
					"uid"
					:
				Element:span
					"bC"
					}
			Node:
			(type) c
			(layer)1
				Element:h3
					Path Params
			Node:
			(type) c
			(layer)1
				Element:strong
					api_key
					stringrequired
			Node:
			(type) c
			(layer)1
				Element:p
					API_KEY of user, with permission to access this app
			Node:
			(type) c
			(layer)1
				Element:h3
					Query Params
			Node:
			(type) c
			(layer)1
				Element:strong
					dbs
					string
			Node:
			(type) c
			(layer)1
				Element:p
					Database name
			Node:
			(type) c
			(layer)1
				Element:strong
					collection
					string
			Node:
			(type) c
			(layer)1
				Element:p
					Collection name
			Node:
			(type) c
			(layer)1
				Element:strong
					document
					int32
			Node:
			(type) c
			(layer)1
				Element:p
					_id of the document which to show
			Node:
			(type) c
			(layer)1
				Element:p
					Returns the single specified document by it's _id property
			Node:
			(type) c
			(layer)1
				Element:a
			Node:
			(type) c
			(layer)1
				Element:a
				Element:i
					Suggest Edits
			Node:
			(type) c
			(layer)1
				Element:h2
					/o/slipping
			Node:
			(type) c
			(layer)1
				Element:p
					Retrieves information about users that are about to churn (available in Slipping Away plugin)
			Node:
			(type) c
			(layer)1
				Element:span
					get
					https://
			Node:
			(type) c
			(layer)1
				Element:span
				Element:span
					try.count.ly
				Element:span
					/o/slipping?api_key=
				Element:span
					api_key
				Element:span
					&app_id=
				Element:span
					app_id
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:a
					cURL
				Element:li
				Element:a
					Node
				Element:li
				Element:a
					Ruby
				Element:li
				Element:a
					JavaScript
				Element:li
				Element:a
					Python
			Node:
			(type) c
			(layer)1
				Element:i
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
				Element:span
					curl
				Element:span
					--request
					GET \
				Element:span
					--url
				Element:span
					'https://try.count.ly/o/slipping?app_id=app_id&api_key=api_key'
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
				Element:span
					var request = require("request");
				Element:span
					var
					options
				Element:span
					=
					{ method:
				Element:span
					'GET'
					, url:
				Element:span
					'https://try.count.ly/o/slipping'
					, qs: { app_id:
				Element:span
					'app_id', api_key: 'api_key'
					} }; request(options,
				Element:span
					function
					(
				Element:span
					error
					,
				Element:span
					response
					,
				Element:span
					body
					) {
				Element:span
					if
					(
				Element:span
					error
					)
				Element:span
					throw new
					Error(
				Element:span
					error
					); console.log(
				Element:span
					body
					); });
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
				Element:span
					require
				Element:span
					'uri'
				Element:span
					require
				Element:span
					'net/http'
					url = URI(
				Element:span
					"https://try.count.ly/o/slipping?app_id=app_id&api_key=api_key"
					) http
				Element:span
					=
				Element:span
					Net::HTTP
					.new(url.host, url.port) http.use_ssl = true http.verify_mode = OpenSSL::SSL::VERIFY_NONE request
				Element:span
					=
				Element:span
					Net::HTTP
					::Get.new(url) response = http.request(request) puts response.read_body
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
				Element:span
					var
					settings
				Element:span
					=
					{
				Element:span
					"async"
					: true,
				Element:span
					"crossDomain"
					: true,
				Element:span
					"url": "https://try.count.ly/o/slipping?app_id=app_id&api_key=api_key"
					,
				Element:span
					"method": "GET"
					,
				Element:span
					"headers"
					: {},
				Element:span
					"processData"
					: false } $.ajax(settings).done(
				Element:span
					function
					(
				Element:span
					response
					) { console.log(
				Element:span
					response
					); });
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
				Element:span
					import requests
					url =
				Element:span
					"https://try.count.ly/o/slipping"
					response = requests.request(
				Element:span
					"GET"
					, url)
				Element:span
					print
					(response.text)
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:a
				Element:span
				Element:i
				Element:em
					{{ results.statusCode[0] }}
					{{ results.statusCode[1] }}
				Element:a
					Metadata
				Element:a
				Element:span
					to examples
			Node:
			(type) c
			(layer)1
				Element:pre
			Node:
			(type) c
			(layer)1
				Element:label
					Method
					{{ results.method }}
			Node:
			(type) c
			(layer)1
				Element:label
					URL
					{{ results.url }}
			Node:
			(type) c
			(layer)1
				Element:label
					Request Headers
			Node:
			(type) c
			(layer)1
				Element:pre
					{{ results.requestHeaders }}
			Node:
			(type) c
			(layer)1
				Element:label
					Request Data
			Node:
			(type) c
			(layer)1
				Element:pre
					{{ results.data }}
			Node:
			(type) c
			(layer)1
				Element:label
					Status
			Node:
			(type) c
			(layer)1
				Element:span
			Node:
			(type) c
			(layer)1
				Element:label
					Response Headers
			Node:
			(type) c
			(layer)1
				Element:pre
					{{ results.responseHeaders }}
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:a
				Element:span
				Element:i
				Element:em
					200
					OK
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
					[ {
				Element:span
					"period"
					:
				Element:span
					7
					,
				Element:span
					"count"
					:
				Element:span
					2194
					,
				Element:span
					"percentage"
					:
				Element:span
					"93.96"
					,
				Element:span
					"timeStamp"
					:
				Element:span
					1480377600
					}, {
				Element:span
					"period"
					:
				Element:span
					14
					,
				Element:span
					"count"
					:
				Element:span
					1755
					,
				Element:span
					"percentage"
					:
				Element:span
					"75.16"
					,
				Element:span
					"timeStamp"
					:
				Element:span
					1479772800
					}, {
				Element:span
					"period"
					:
				Element:span
					30
					,
				Element:span
					"count"
					:
				Element:span
					743
					,
				Element:span
					"percentage"
					:
				Element:span
					"31.82"
					,
				Element:span
					"timeStamp"
					:
				Element:span
					1478390400
					}, {
				Element:span
					"period"
					:
				Element:span
					60
					,
				Element:span
					"count"
					:
				Element:span
					305
					,
				Element:span
					"percentage"
					:
				Element:span
					"13.06"
					,
				Element:span
					"timeStamp"
					:
				Element:span
					1475798400
					}, {
				Element:span
					"period"
					:
				Element:span
					90
					,
				Element:span
					"count"
					:
				Element:span
					148
					,
				Element:span
					"percentage"
					:
				Element:span
					"6.34"
					,
				Element:span
					"timeStamp"
					:
				Element:span
					1473206400
					} ]
			Node:
			(type) c
			(layer)1
				Element:h3
					Query Params
			Node:
			(type) c
			(layer)1
				Element:strong
					api_key
					string
			Node:
			(type) c
			(layer)1
				Element:p
					API_KEY of user, with permission to access this app
			Node:
			(type) c
			(layer)1
				Element:strong
					app_id
					string
			Node:
			(type) c
			(layer)1
				Element:p
					ID of the app for which to query
			Node:
			(type) c
			(layer)1
				Element:strong
					callback
					string
			Node:
			(type) c
			(layer)1
				Element:p
					(optional) name of callback function for JSONP output
			Node:
			(type) c
			(layer)1
				Element:p
					Retrieves information about users, who had not any sessions for some time, divided in time buckets.
			Node:
			(type) c
			(layer)1
				Element:p
					Users who had not sessions in 7 days, 17 days, 30 days, 60 days and 90 days
			Node:
			(type) c
			(layer)1
				Element:a
			Node:
			(type) c
			(layer)1
				Element:a
				Element:i
					Suggest Edits
			Node:
			(type) c
			(layer)1
				Element:h2
					/o?method=star
			Node:
			(type) c
			(layer)1
				Element:p
					Retrieves break down of app platform and app versions for which ratings were provided (Available in Star Rating plugin)
			Node:
			(type) c
			(layer)1
				Element:span
					get
					https://
			Node:
			(type) c
			(layer)1
				Element:span
				Element:span
					try.count.ly
				Element:span
					/o?method=star&api_key=
				Element:span
					api_key
				Element:span
					&app_id=
				Element:span
					app_id
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:a
					cURL
				Element:li
				Element:a
					Node
				Element:li
				Element:a
					Ruby
				Element:li
				Element:a
					JavaScript
				Element:li
				Element:a
					Python
			Node:
			(type) c
			(layer)1
				Element:i
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
				Element:span
					curl
				Element:span
					--request
					GET \
				Element:span
					--url
				Element:span
					'https://try.count.ly/o?app_id=app_id&api_key=api_key&method=star'
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
				Element:span
					var request = require("request");
				Element:span
					var
					options
				Element:span
					=
					{ method:
				Element:span
					'GET'
					, url:
				Element:span
					'https://try.count.ly/o'
					, qs: { app_id:
				Element:span
					'app_id', api_key: 'api_key', method: 'star'
					} }; request(options,
				Element:span
					function
					(
				Element:span
					error
					,
				Element:span
					response
					,
				Element:span
					body
					) {
				Element:span
					if
					(
				Element:span
					error
					)
				Element:span
					throw new
					Error(
				Element:span
					error
					); console.log(
				Element:span
					body
					); });
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
				Element:span
					require
				Element:span
					'uri'
				Element:span
					require
				Element:span
					'net/http'
					url = URI(
				Element:span
					"https://try.count.ly/o?app_id=app_id&api_key=api_key&method=star"
					) http
				Element:span
					=
				Element:span
					Net::HTTP
					.new(url.host, url.port) http.use_ssl = true http.verify_mode = OpenSSL::SSL::VERIFY_NONE request
				Element:span
					=
				Element:span
					Net::HTTP
					::Get.new(url) response = http.request(request) puts response.read_body
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
				Element:span
					var
					settings
				Element:span
					=
					{
				Element:span
					"async"
					: true,
				Element:span
					"crossDomain"
					: true,
				Element:span
					"url": "https://try.count.ly/o?app_id=app_id&api_key=api_key&method=star"
					,
				Element:span
					"method": "GET"
					,
				Element:span
					"headers"
					: {},
				Element:span
					"processData"
					: false } $.ajax(settings).done(
				Element:span
					function
					(
				Element:span
					response
					) { console.log(
				Element:span
					response
					); });
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
				Element:span
					import requests
					url =
				Element:span
					"https://try.count.ly/o"
					response = requests.request(
				Element:span
					"GET"
					, url)
				Element:span
					print
					(response.text)
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:a
				Element:span
				Element:i
				Element:em
					{{ results.statusCode[0] }}
					{{ results.statusCode[1] }}
				Element:a
					Metadata
				Element:a
				Element:span
					to examples
			Node:
			(type) c
			(layer)1
				Element:pre
			Node:
			(type) c
			(layer)1
				Element:label
					Method
					{{ results.method }}
			Node:
			(type) c
			(layer)1
				Element:label
					URL
					{{ results.url }}
			Node:
			(type) c
			(layer)1
				Element:label
					Request Headers
			Node:
			(type) c
			(layer)1
				Element:pre
					{{ results.requestHeaders }}
			Node:
			(type) c
			(layer)1
				Element:label
					Request Data
			Node:
			(type) c
			(layer)1
				Element:pre
					{{ results.data }}
			Node:
			(type) c
			(layer)1
				Element:label
					Status
			Node:
			(type) c
			(layer)1
				Element:span
			Node:
			(type) c
			(layer)1
				Element:label
					Response Headers
			Node:
			(type) c
			(layer)1
				Element:pre
					{{ results.responseHeaders }}
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:a
				Element:span
					Success
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
					{
				Element:span
					"Android"
					:[
				Element:span
					"3:5"
					,
				Element:span
					"2:0"
					,
				Element:span
					"3:0"
					,
				Element:span
					"1:2"
					,
				Element:span
					"1:3"
					],
				Element:span
					"iOS"
					:[
				Element:span
					"1:3"
					,
				Element:span
					"1:2"
					,
				Element:span
					"3:5"
					,
				Element:span
					"3:0"
					,
				Element:span
					"2:0"
					,
				Element:span
					"1:0"
					] }
			Node:
			(type) c
			(layer)1
				Element:h3
					Query Params
			Node:
			(type) c
			(layer)1
				Element:strong
					api_key
					string
			Node:
			(type) c
			(layer)1
				Element:p
					API_KEY of user, with permission to access this app
			Node:
			(type) c
			(layer)1
				Element:strong
					app_id
					string
			Node:
			(type) c
			(layer)1
				Element:p
					ID of the app for which to query
			Node:
			(type) c
			(layer)1
				Element:strong
					period
					string
			Node:
			(type) c
			(layer)1
				Element:p
					For which time period to provide data, possible values (month, 60days, 30days, 7days, yesterday, hour or [startMiliseconds, endMiliseconds] as [1417730400000,1420149600000])
			Node:
			(type) c
			(layer)1
				Element:strong
					callback
					string
			Node:
			(type) c
			(layer)1
				Element:p
					(optional) name of callback function for JSONP output
			Node:
			(type) c
			(layer)1
				Element:p
					Retrieves break down of app platform and app versions for which ratings were provided (Available in Star Rating plugin).
			Node:
			(type) c
			(layer)1
				Element:p
					If you want to retrieve real rating data, use endpoints for retrieving event data with key "[CLY]_star_rating"
			Node:
			(type) c
			(layer)1
				Element:a
			Node:
			(type) c
			(layer)1
				Element:a
				Element:i
					Suggest Edits
			Node:
			(type) c
			(layer)1
				Element:h2
					/o/compare/events
			Node:
			(type) c
			(layer)1
				Element:p
					Retrieves data for all provided events for comparison (Available in Compare plugin)
			Node:
			(type) c
			(layer)1
				Element:span
					get
					https://
			Node:
			(type) c
			(layer)1
				Element:span
				Element:span
					try.count.ly
				Element:span
					/o/compare/events?api_key=
				Element:span
					api_key
				Element:span
					&app_id=
				Element:span
					app_id
				Element:span
					&events=
				Element:span
					events
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:a
					cURL
				Element:li
				Element:a
					Node
				Element:li
				Element:a
					Ruby
				Element:li
				Element:a
					JavaScript
				Element:li
				Element:a
					Python
			Node:
			(type) c
			(layer)1
				Element:i
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
				Element:span
					curl
				Element:span
					--request
					GET \
				Element:span
					--url
				Element:span
					'https://try.count.ly/o/compare/events?events=events&app_id=app_id&api_key=api_key'
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
				Element:span
					var request = require("request");
				Element:span
					var
					options
				Element:span
					=
					{ method:
				Element:span
					'GET'
					, url:
				Element:span
					'https://try.count.ly/o/compare/events'
					, qs: { events:
				Element:span
					'events', app_id: 'app_id', api_key: 'api_key'
					} }; request(options,
				Element:span
					function
					(
				Element:span
					error
					,
				Element:span
					response
					,
				Element:span
					body
					) {
				Element:span
					if
					(
				Element:span
					error
					)
				Element:span
					throw new
					Error(
				Element:span
					error
					); console.log(
				Element:span
					body
					); });
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
				Element:span
					require
				Element:span
					'uri'
				Element:span
					require
				Element:span
					'net/http'
					url = URI(
				Element:span
					"https://try.count.ly/o/compare/events?events=events&app_id=app_id&api_key=api_key"
					) http
				Element:span
					=
				Element:span
					Net::HTTP
					.new(url.host, url.port) http.use_ssl = true http.verify_mode = OpenSSL::SSL::VERIFY_NONE request
				Element:span
					=
				Element:span
					Net::HTTP
					::Get.new(url) response = http.request(request) puts response.read_body
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
				Element:span
					var
					settings
				Element:span
					=
					{
				Element:span
					"async"
					: true,
				Element:span
					"crossDomain"
					: true,
				Element:span
					"url": "https://try.count.ly/o/compare/events?events=events&app_id=app_id&api_key=api_key"
					,
				Element:span
					"method": "GET"
					,
				Element:span
					"headers"
					: {},
				Element:span
					"processData"
					: false } $.ajax(settings).done(
				Element:span
					function
					(
				Element:span
					response
					) { console.log(
				Element:span
					response
					); });
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
				Element:span
					import requests
					url =
				Element:span
					"https://try.count.ly/o/compare/events"
					response = requests.request(
				Element:span
					"GET"
					, url)
				Element:span
					print
					(response.text)
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:a
				Element:span
				Element:i
				Element:em
					{{ results.statusCode[0] }}
					{{ results.statusCode[1] }}
				Element:a
					Metadata
				Element:a
				Element:span
					to examples
			Node:
			(type) c
			(layer)1
				Element:pre
			Node:
			(type) c
			(layer)1
				Element:label
					Method
					{{ results.method }}
			Node:
			(type) c
			(layer)1
				Element:label
					URL
					{{ results.url }}
			Node:
			(type) c
			(layer)1
				Element:label
					Request Headers
			Node:
			(type) c
			(layer)1
				Element:pre
					{{ results.requestHeaders }}
			Node:
			(type) c
			(layer)1
				Element:label
					Request Data
			Node:
			(type) c
			(layer)1
				Element:pre
					{{ results.data }}
			Node:
			(type) c
			(layer)1
				Element:label
					Status
			Node:
			(type) c
			(layer)1
				Element:span
			Node:
			(type) c
			(layer)1
				Element:label
					Response Headers
			Node:
			(type) c
			(layer)1
				Element:pre
					{{ results.responseHeaders }}
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:a
				Element:span
					Success
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
					{
				Element:span
					"Logout"
					:{ },
				Element:span
					"Login"
					:{
				Element:span
					"2016"
					:{
				Element:span
					"12"
					:{
				Element:span
					"1"
					:{
				Element:span
					"2"
					:{
				Element:span
					"dur"
					:
				Element:span
					1
					,
				Element:span
					"c"
					:
				Element:span
					1
					},
				Element:span
					"3"
					:{
				Element:span
					"dur"
					:
				Element:span
					10
					,
				Element:span
					"c"
					:
				Element:span
					1
					},
				Element:span
					"4"
					:{
				Element:span
					"dur"
					:
				Element:span
					8
					,
				Element:span
					"c"
					:
				Element:span
					2
					},
				Element:span
					"6"
					:{
				Element:span
					"dur"
					:
				Element:span
					10
					,
				Element:span
					"c"
					:
				Element:span
					1
					},
				Element:span
					"11"
					:{
				Element:span
					"dur"
					:
				Element:span
					5
					,
				Element:span
					"c"
					:
				Element:span
					1
					},
				Element:span
					"12"
					:{
				Element:span
					"dur"
					:
				Element:span
					10
					,
				Element:span
					"c"
					:
				Element:span
					1
					},
				Element:span
					"15"
					:{
				Element:span
					"dur"
					:
				Element:span
					4
					,
				Element:span
					"c"
					:
				Element:span
					1
					},
				Element:span
					"16"
					:{
				Element:span
					"dur"
					:
				Element:span
					10
					,
				Element:span
					"c"
					:
				Element:span
					1
					},
				Element:span
					"18"
					:{
				Element:span
					"dur"
					:
				Element:span
					10
					,
				Element:span
					"c"
					:
				Element:span
					4
					},
				Element:span
					"dur"
					:
				Element:span
					68
					,
				Element:span
					"c"
					:
				Element:span
					13
					},
				Element:span
					"2"
					:{
				Element:span
					"1"
					:{
				Element:span
					"dur"
					:
				Element:span
					1
					,
				Element:span
					"c"
					:
				Element:span
					1
					},
				Element:span
					"3"
					:{
				Element:span
					"c"
					:
				Element:span
					1
					},
				Element:span
					"6"
					:{
				Element:span
					"dur"
					:
				Element:span
					4
					,
				Element:span
					"c"
					:
				Element:span
					1
					},
				Element:span
					"10"
					:{
				Element:span
					"dur"
					:
				Element:span
					5
					,
				Element:span
					"c"
					:
				Element:span
					1
					},
				Element:span
					"16"
					:{
				Element:span
					"dur"
					:
				Element:span
					4
					,
				Element:span
					"c"
					:
				Element:span
					1
					},
				Element:span
					"23"
					:{
				Element:span
					"dur"
					:
				Element:span
					7
					,
				Element:span
					"c"
					:
				Element:span
					1
					},
				Element:span
					"dur"
					:
				Element:span
					21
					,
				Element:span
					"c"
					:
				Element:span
					6
					},
				Element:span
					"3"
					:{
				Element:span
					"4"
					:{
				Element:span
					"dur"
					:
				Element:span
					6
					,
				Element:span
					"c"
					:
				Element:span
					1
					},
				Element:span
					"6"
					:{
				Element:span
					"dur"
					:
				Element:span
					5
					,
				Element:span
					"c"
					:
				Element:span
					1
					},
				Element:span
					"15"
					:{
				Element:span
					"dur"
					:
				Element:span
					4
					,
				Element:span
					"c"
					:
				Element:span
					1
					},
				Element:span
					"17"
					:{
				Element:span
					"dur"
					:
				Element:span
					10
					,
				Element:span
					"c"
					:
				Element:span
					1
					},
				Element:span
					"18"
					:{
				Element:span
					"c"
					:
				Element:span
					1
					},
				Element:span
					"20"
					:{
				Element:span
					"dur"
					:
				Element:span
					1
					,
				Element:span
					"c"
					:
				Element:span
					1
					},
				Element:span
					"dur"
					:
				Element:span
					26
					,
				Element:span
					"c"
					:
				Element:span
					6
					},
				Element:span
					"4"
					:{
				Element:span
					"0"
					:{
				Element:span
					"dur"
					:
				Element:span
					10
					,
				Element:span
					"c"
					:
				Element:span
					1
					},
				Element:span
					"17"
					:{
				Element:span
					"dur"
					:
				Element:span
					1
					,
				Element:span
					"c"
					:
				Element:span
					1
					},
				Element:span
					"18"
					:{
				Element:span
					"dur"
					:
				Element:span
					3
					,
				Element:span
					"c"
					:
				Element:span
					1
					},
				Element:span
					"dur"
					:
				Element:span
					14
					,
				Element:span
					"c"
					:
				Element:span
					3
					},
				Element:span
					"5"
					:{
				Element:span
					"0"
					:{
				Element:span
					"c"
					:
				Element:span
					1
					},
				Element:span
					"2"
					:{
				Element:span
					"c"
					:
				Element:span
					3
					,
				Element:span
					"dur"
					:
				Element:span
					9
					},
				Element:span
					"3"
					:{
				Element:span
					"dur"
					:
				Element:span
					5
					,
				Element:span
					"c"
					:
				Element:span
					1
					},
				Element:span
					"8"
					:{
				Element:span
					"dur"
					:
				Element:span
					6
					,
				Element:span
					"c"
					:
				Element:span
					1
					},
				Element:span
					"17"
					:{
				Element:span
					"dur"
					:
				Element:span
					10
					,
				Element:span
					"c"
					:
				Element:span
					1
					},
				Element:span
					"19"
					:{
				Element:span
					"c"
					:
				Element:span
					1
					},
				Element:span
					"dur"
					:
				Element:span
					30
					,
				Element:span
					"c"
					:
				Element:span
					8
					},
				Element:span
					"dur"
					:
				Element:span
					159
					,
				Element:span
					"c"
					:
				Element:span
					36
					},
				Element:span
					"dur"
					:
				Element:span
					159
					,
				Element:span
					"c"
					:
				Element:span
					36
					},
				Element:span
					"meta"
					:{
				Element:span
					"referer"
					:[
				Element:span
					"unknown"
					,
				Element:span
					"notification"
					,
				Element:span
					"twitter"
					],
				Element:span
					"segments"
					:[
				Element:span
					"referer"
					] } },
				Element:span
					"Purchase"
					:{
				Element:span
					"2016"
					:{ },
				Element:span
					"meta"
					:{
				Element:span
					"screen"
					:[
				Element:span
					"Main screen"
					,
				Element:span
					"Before End"
					,
				Element:span
					"End Level"
					],
				Element:span
					"segments"
					:[
				Element:span
					"screen"
					] } } }
			Node:
			(type) c
			(layer)1
				Element:h3
					Query Params
			Node:
			(type) c
			(layer)1
				Element:strong
					api_key
					string
			Node:
			(type) c
			(layer)1
				Element:p
					API_KEY of user, with permission to access this app
			Node:
			(type) c
			(layer)1
				Element:strong
					app_id
					string
			Node:
			(type) c
			(layer)1
				Element:p
					ID of the app for which to query
			Node:
			(type) c
			(layer)1
				Element:strong
					period
					string
			Node:
			(type) c
			(layer)1
				Element:p
					For which time period to provide data, possible values (month, 60days, 30days, 7days, yesterday, hour or [startMiliseconds, endMiliseconds] as [1417730400000,1420149600000])
			Node:
			(type) c
			(layer)1
				Element:strong
					callback
					string
			Node:
			(type) c
			(layer)1
				Element:p
					(optional) name of callback function for JSONP output
			Node:
			(type) c
			(layer)1
				Element:strong
					events
					string
			Node:
			(type) c
			(layer)1
				Element:p
					JSON array as string with event keys to retrieve data for, max 10
			Node:
			(type) c
			(layer)1
				Element:p
					Retrieves data for all provided events for comparison. Can select up to 10 events.
			Node:
			(type) c
			(layer)1
				Element:a
			Node:
			(type) c
			(layer)1
				Element:a
				Element:i
					Suggest Edits
			Node:
			(type) c
			(layer)1
				Element:h2
					/o/compare/apps
			Node:
			(type) c
			(layer)1
				Element:p
					Retrieves data for all provided apps for comparison (Available in Compare plugin)
			Node:
			(type) c
			(layer)1
				Element:span
					get
					https://
			Node:
			(type) c
			(layer)1
				Element:span
				Element:span
					try.count.ly
				Element:span
					/o/compare/apps?api_key=
				Element:span
					api_key
				Element:span
					&app_id=
				Element:span
					app_id
				Element:span
					&apps=
				Element:span
					apps
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:a
					cURL
				Element:li
				Element:a
					Node
				Element:li
				Element:a
					Ruby
				Element:li
				Element:a
					JavaScript
				Element:li
				Element:a
					Python
			Node:
			(type) c
			(layer)1
				Element:i
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
				Element:span
					curl
				Element:span
					--request
					GET \
				Element:span
					--url
				Element:span
					'https://try.count.ly/o/compare/apps?apps=apps&app_id=app_id&api_key=api_key'
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
				Element:span
					var request = require("request");
				Element:span
					var
					options
				Element:span
					=
					{ method:
				Element:span
					'GET'
					, url:
				Element:span
					'https://try.count.ly/o/compare/apps'
					, qs: { apps:
				Element:span
					'apps', app_id: 'app_id', api_key: 'api_key'
					} }; request(options,
				Element:span
					function
					(
				Element:span
					error
					,
				Element:span
					response
					,
				Element:span
					body
					) {
				Element:span
					if
					(
				Element:span
					error
					)
				Element:span
					throw new
					Error(
				Element:span
					error
					); console.log(
				Element:span
					body
					); });
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
				Element:span
					require
				Element:span
					'uri'
				Element:span
					require
				Element:span
					'net/http'
					url = URI(
				Element:span
					"https://try.count.ly/o/compare/apps?apps=apps&app_id=app_id&api_key=api_key"
					) http
				Element:span
					=
				Element:span
					Net::HTTP
					.new(url.host, url.port) http.use_ssl = true http.verify_mode = OpenSSL::SSL::VERIFY_NONE request
				Element:span
					=
				Element:span
					Net::HTTP
					::Get.new(url) response = http.request(request) puts response.read_body
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
				Element:span
					var
					settings
				Element:span
					=
					{
				Element:span
					"async"
					: true,
				Element:span
					"crossDomain"
					: true,
				Element:span
					"url": "https://try.count.ly/o/compare/apps?apps=apps&app_id=app_id&api_key=api_key"
					,
				Element:span
					"method": "GET"
					,
				Element:span
					"headers"
					: {},
				Element:span
					"processData"
					: false } $.ajax(settings).done(
				Element:span
					function
					(
				Element:span
					response
					) { console.log(
				Element:span
					response
					); });
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
				Element:span
					import requests
					url =
				Element:span
					"https://try.count.ly/o/compare/apps"
					response = requests.request(
				Element:span
					"GET"
					, url)
				Element:span
					print
					(response.text)
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:a
				Element:span
				Element:i
				Element:em
					{{ results.statusCode[0] }}
					{{ results.statusCode[1] }}
				Element:a
					Metadata
				Element:a
				Element:span
					to examples
			Node:
			(type) c
			(layer)1
				Element:pre
			Node:
			(type) c
			(layer)1
				Element:label
					Method
					{{ results.method }}
			Node:
			(type) c
			(layer)1
				Element:label
					URL
					{{ results.url }}
			Node:
			(type) c
			(layer)1
				Element:label
					Request Headers
			Node:
			(type) c
			(layer)1
				Element:pre
					{{ results.requestHeaders }}
			Node:
			(type) c
			(layer)1
				Element:label
					Request Data
			Node:
			(type) c
			(layer)1
				Element:pre
					{{ results.data }}
			Node:
			(type) c
			(layer)1
				Element:label
					Status
			Node:
			(type) c
			(layer)1
				Element:span
			Node:
			(type) c
			(layer)1
				Element:label
					Response Headers
			Node:
			(type) c
			(layer)1
				Element:pre
					{{ results.responseHeaders }}
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:a
				Element:span
					Success
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
					[ {
				Element:span
					"id"
					:
				Element:span
					"56e53239a941253d470d7c52"
					,
				Element:span
					"name"
					:
				Element:span
					"Test"
					,
				Element:span
					"sessions"
					:{
				Element:span
					"total"
					:
				Element:span
					0
					,
				Element:span
					"change"
					:
				Element:span
					"∞"
					,
				Element:span
					"trend"
					:
				Element:span
					"d"
					},
				Element:span
					"users"
					:{
				Element:span
					"total"
					:
				Element:span
					0
					,
				Element:span
					"change"
					:
				Element:span
					"∞"
					,
				Element:span
					"trend"
					:
				Element:span
					"d"
					,
				Element:span
					"is_estimate"
					:
				Element:span
					false
					},
				Element:span
					"newusers"
					:{
				Element:span
					"total"
					:
				Element:span
					0
					,
				Element:span
					"change"
					:
				Element:span
					"∞"
					,
				Element:span
					"trend"
					:
				Element:span
					"d"
					},
				Element:span
					"duration"
					:{
				Element:span
					"total"
					:
				Element:span
					"0.0 min"
					,
				Element:span
					"change"
					:
				Element:span
					"NA"
					,
				Element:span
					"trend"
					:
				Element:span
					"u"
					},
				Element:span
					"avgduration"
					:{
				Element:span
					"total"
					:
				Element:span
					"0.0 min"
					,
				Element:span
					"change"
					:
				Element:span
					"NA"
					,
				Element:span
					"trend"
					:
				Element:span
					"u"
					},
				Element:span
					"charts"
					:{
				Element:span
					"total-users"
					:[ [
				Element:span
					0
					,
				Element:span
					0
					], [
				Element:span
					1
					,
				Element:span
					0
					], [
				Element:span
					2
					,
				Element:span
					0
					], [
				Element:span
					3
					,
				Element:span
					0
					], [
				Element:span
					4
					,
				Element:span
					0
					], [
				Element:span
					5
					,
				Element:span
					0
					] ],
				Element:span
					"new-users"
					:[ [
				Element:span
					0
					,
				Element:span
					0
					], [
				Element:span
					1
					,
				Element:span
					0
					], [
				Element:span
					2
					,
				Element:span
					0
					], [
				Element:span
					3
					,
				Element:span
					0
					], [
				Element:span
					4
					,
				Element:span
					0
					], [
				Element:span
					5
					,
				Element:span
					0
					] ],
				Element:span
					"total-sessions"
					:[ [
				Element:span
					0
					,
				Element:span
					0
					], [
				Element:span
					1
					,
				Element:span
					0
					], [
				Element:span
					2
					,
				Element:span
					0
					], [
				Element:span
					3
					,
				Element:span
					0
					], [
				Element:span
					4
					,
				Element:span
					0
					], [
				Element:span
					5
					,
				Element:span
					0
					] ],
				Element:span
					"time-spent"
					:[ [
				Element:span
					0
					,
				Element:span
					0
					], [
				Element:span
					1
					,
				Element:span
					0
					], [
				Element:span
					2
					,
				Element:span
					0
					], [
				Element:span
					3
					,
				Element:span
					0
					], [
				Element:span
					4
					,
				Element:span
					0
					], [
				Element:span
					5
					,
				Element:span
					0
					] ],
				Element:span
					"total-time-spent"
					:[ [
				Element:span
					0
					,
				Element:span
					"0.0"
					], [
				Element:span
					1
					,
				Element:span
					"0.0"
					], [
				Element:span
					2
					,
				Element:span
					"0.0"
					], [
				Element:span
					3
					,
				Element:span
					"0.0"
					], [
				Element:span
					4
					,
				Element:span
					"0.0"
					], [
				Element:span
					5
					,
				Element:span
					"0.0"
					] ],
				Element:span
					"avg-events-served"
					:[ [
				Element:span
					0
					,
				Element:span
					0
					], [
				Element:span
					1
					,
				Element:span
					0
					], [
				Element:span
					2
					,
				Element:span
					0
					], [
				Element:span
					3
					,
				Element:span
					0
					], [
				Element:span
					4
					,
				Element:span
					0
					], [
				Element:span
					5
					,
				Element:span
					0
					] ] } }, {
				Element:span
					"id"
					:
				Element:span
					"56e534dda941253d470e1194"
					,
				Element:span
					"name"
					:
				Element:span
					"AppCodingEasy"
					,
				Element:span
					"sessions"
					:{
				Element:span
					"total"
					:
				Element:span
					9
					,
				Element:span
					"change"
					:
				Element:span
					"-64%"
					,
				Element:span
					"trend"
					:
				Element:span
					"d"
					},
				Element:span
					"users"
					:{
				Element:span
					"total"
					:
				Element:span
					8
					,
				Element:span
					"change"
					:
				Element:span
					"-60%"
					,
				Element:span
					"trend"
					:
				Element:span
					"d"
					,
				Element:span
					"is_estimate"
					:
				Element:span
					false
					},
				Element:span
					"newusers"
					:{
				Element:span
					"total"
					:
				Element:span
					6
					,
				Element:span
					"change"
					:
				Element:span
					"-62.5%"
					,
				Element:span
					"trend"
					:
				Element:span
					"d"
					},
				Element:span
					"duration"
					:{
				Element:span
					"total"
					:
				Element:span
					"10.0 min"
					,
				Element:span
					"change"
					:
				Element:span
					"-91.1%"
					,
				Element:span
					"trend"
					:
				Element:span
					"d"
					},
				Element:span
					"avgduration"
					:{
				Element:span
					"total"
					:
				Element:span
					"1.1 min"
					,
				Element:span
					"change"
					:
				Element:span
					"-75.4%"
					,
				Element:span
					"trend"
					:
				Element:span
					"d"
					},
				Element:span
					"charts"
					:{
				Element:span
					"total-users"
					:[ [
				Element:span
					0
					,
				Element:span
					0
					], [
				Element:span
					1
					,
				Element:span
					1
					], [
				Element:span
					2
					,
				Element:span
					1
					], [
				Element:span
					3
					,
				Element:span
					0
					], [
				Element:span
					4
					,
				Element:span
					1
					], [
				Element:span
					5
					,
				Element:span
					0
					] ],
				Element:span
					"new-users"
					:[ [
				Element:span
					0
					,
				Element:span
					0
					], [
				Element:span
					1
					,
				Element:span
					1
					], [
				Element:span
					2
					,
				Element:span
					1
					], [
				Element:span
					3
					,
				Element:span
					0
					], [
				Element:span
					4
					,
				Element:span
					1
					], [
				Element:span
					5
					,
				Element:span
					0
					] ],
				Element:span
					"total-sessions"
					:[ [
				Element:span
					0
					,
				Element:span
					0
					], [
				Element:span
					1
					,
				Element:span
					1
					], [
				Element:span
					2
					,
				Element:span
					1
					], [
				Element:span
					3
					,
				Element:span
					0
					], [
				Element:span
					4
					,
				Element:span
					1
					], [
				Element:span
					5
					,
				Element:span
					0
					] ],
				Element:span
					"time-spent"
					:[ [
				Element:span
					0
					,
				Element:span
					0
					], [
				Element:span
					1
					,
				Element:span
					"0.6"
					], [
				Element:span
					2
					,
				Element:span
					"0.0"
					], [
				Element:span
					3
					,
				Element:span
					0
					], [
				Element:span
					4
					,
				Element:span
					"0.4"
					], [
				Element:span
					5
					,
				Element:span
					0
					] ],
				Element:span
					"total-time-spent"
					:[ [
				Element:span
					0
					,
				Element:span
					0
					], [
				Element:span
					1
					,
				Element:span
					"0.6"
					], [
				Element:span
					2
					,
				Element:span
					"0.0"
					], [
				Element:span
					3
					,
				Element:span
					0
					], [
				Element:span
					4
					,
				Element:span
					"0.4"
					], [
				Element:span
					5
					,
				Element:span
					0
					] ],
				Element:span
					"avg-events-served"
					:[ [
				Element:span
					0
					,
				Element:span
					0
					], [
				Element:span
					1
					,
				Element:span
					"5.0"
					], [
				Element:span
					2
					,
				Element:span
					"2.0"
					], [
				Element:span
					3
					,
				Element:span
					0
					], [
				Element:span
					4
					,
				Element:span
					"4.0"
					], [
				Element:span
					5
					,
				Element:span
					0
					] ] } } ]
			Node:
			(type) c
			(layer)1
				Element:h3
					Query Params
			Node:
			(type) c
			(layer)1
				Element:strong
					api_key
					string
			Node:
			(type) c
			(layer)1
				Element:p
					API_KEY of user, with permission to access this app
			Node:
			(type) c
			(layer)1
				Element:strong
					app_id
					string
			Node:
			(type) c
			(layer)1
				Element:p
					ID of the app for which to query
			Node:
			(type) c
			(layer)1
				Element:strong
					apps
					string
			Node:
			(type) c
			(layer)1
				Element:p
					JSON array as string with app ids to retrieve data for, max 10
			Node:
			(type) c
			(layer)1
				Element:strong
					period
					string
			Node:
			(type) c
			(layer)1
				Element:p
					For which time period to provide data, possible values (month, 60days, 30days, 7days, yesterday, hour or [startMiliseconds, endMiliseconds] as [1417730400000,1420149600000])
			Node:
			(type) c
			(layer)1
				Element:strong
					callback
					string
			Node:
			(type) c
			(layer)1
				Element:p
					(optional) name of callback function for JSONP output
			Node:
			(type) c
			(layer)1
				Element:p
					Retrieves data for all provided apps for comparison. Can select up to 10 apps.
			Node:
			(type) c
			(layer)1
				Element:a
			Node:
			(type) c
			(layer)1
				Element:a
				Element:i
					Suggest Edits
			Node:
			(type) c
			(layer)1
				Element:h2
					/o/pushes
			Node:
			(type) c
			(layer)1
				Element:span
					get
					https://
			Node:
			(type) c
			(layer)1
				Element:span
				Element:span
					try.count.ly
				Element:span
					/o/pushesapi_key=
				Element:span
					api_key
				Element:span
					&args=
				Element:span
					args
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
				Element:a
					cURL
				Element:li
				Element:a
					Node
				Element:li
				Element:a
					Ruby
				Element:li
				Element:a
					JavaScript
				Element:li
				Element:a
					Python
			Node:
			(type) c
			(layer)1
				Element:i
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
				Element:span
					curl
				Element:span
					--request
					GET \
				Element:span
					--url
				Element:span
					'https://try.count.ly/o/pushesapi_key=
				Element:span
					api_key
					&args=
				Element:span
					args
					'
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
				Element:span
					var request = require("request");
				Element:span
					var
					options
				Element:span
					=
					{ method:
				Element:span
					'GET'
					, url:
				Element:span
					'https://try.count.ly/o/pushesapi_key=
					}; request(options,
				Element:span
					api_key
					&args=
				Element:span
					args
					'
				Element:span
					function
					(
				Element:span
					error
					,
				Element:span
					response
					,
				Element:span
					body
					) {
				Element:span
					if
					(
				Element:span
					error
					)
				Element:span
					throw new
					Error(
				Element:span
					error
					); console.log(
				Element:span
					body
					); });
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
				Element:span
					require
				Element:span
					'uri'
				Element:span
					require
				Element:span
					'net/http'
					url = URI(
				Element:span
					"https://try.count.ly/o/pushesapi_key=
					) http
				Element:span
					api_key
					&args=
				Element:span
					args
					"
				Element:span
					=
				Element:span
					Net::HTTP
					.new(url.host, url.port) http.use_ssl = true http.verify_mode = OpenSSL::SSL::VERIFY_NONE request
				Element:span
					=
				Element:span
					Net::HTTP
					::Get.new(url) response = http.request(request) puts response.read_body
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
				Element:span
					var
					settings
				Element:span
					=
					{
				Element:span
					"async"
					: true,
				Element:span
					"crossDomain"
					: true,
				Element:span
					"url": "https://try.count.ly/o/pushesapi_key=
					,
				Element:span
					api_key
					&args=
				Element:span
					args
					"
				Element:span
					"method": "GET"
					,
				Element:span
					"headers"
					: {},
				Element:span
					"processData"
					: false } $.ajax(settings).done(
				Element:span
					function
					(
				Element:span
					response
					) { console.log(
				Element:span
					response
					); });
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
				Element:span
					import requests
					url =
				Element:span
					"https://try.count.ly/o/pushesapi_key=
					response = requests.request(
				Element:span
					api_key
					&args=
				Element:span
					args
					"
				Element:span
					"GET"
					, url)
				Element:span
					print
					(response.text)
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:a
				Element:span
				Element:i
				Element:em
					{{ results.statusCode[0] }}
					{{ results.statusCode[1] }}
				Element:a
					Metadata
				Element:a
				Element:span
					to examples
			Node:
			(type) c
			(layer)1
				Element:pre
			Node:
			(type) c
			(layer)1
				Element:label
					Method
					{{ results.method }}
			Node:
			(type) c
			(layer)1
				Element:label
					URL
					{{ results.url }}
			Node:
			(type) c
			(layer)1
				Element:label
					Request Headers
			Node:
			(type) c
			(layer)1
				Element:pre
					{{ results.requestHeaders }}
			Node:
			(type) c
			(layer)1
				Element:label
					Request Data
			Node:
			(type) c
			(layer)1
				Element:pre
					{{ results.data }}
			Node:
			(type) c
			(layer)1
				Element:label
					Status
			Node:
			(type) c
			(layer)1
				Element:span
			Node:
			(type) c
			(layer)1
				Element:label
					Response Headers
			Node:
			(type) c
			(layer)1
				Element:pre
					{{ results.responseHeaders }}
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:a
				Element:span
				Element:i
				Element:em
					200
					OK
				Element:a
				Element:span
				Element:i
				Element:em
					200
					Validation error
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
					{
				Element:span
					sEcho
					:
				Element:span
					"1"
					,
				Element:span
					iTotalRecords
					:
				Element:span
					11
					,
				Element:span
					iTotalDisplayRecords
					:
				Element:span
					11
					,
				Element:span
					aaData
					: [{
				Element:span
					_id
					:
				Element:span
					'message 1'
					,
				Element:span
					result
					: {}
				Element:span
					}, {
				Element:span
					_id
					:
				Element:span
					'message 2'
					,
				Element:span
					result
					: {}
				Element:span
					}] }
			Node:
			(type) c
			(layer)1
				Element:pre
					{ "error": "Bad message type" }
			Node:
			(type) c
			(layer)1
				Element:h3
					Path Params
			Node:
			(type) c
			(layer)1
				Element:strong
					api_key
					stringrequired
			Node:
			(type) c
			(layer)1
				Element:p
					Admin API_KEY.
			Node:
			(type) c
			(layer)1
				Element:strong
					app_id
					stringrequired
			Node:
			(type) c
			(layer)1
				Element:p
					App ID
			Node:
			(type) c
			(layer)1
				Element:strong
					source
					stringrequired
			Node:
			(type) c
			(layer)1
				Element:p
					Source of the message - "api", "dash" or empty for all messages
			Node:
			(type) c
			(layer)1
				Element:strong
					sSearch
					stringrequired
			Node:
			(type) c
			(layer)1
				Element:p
					String to search for in default message
			Node:
			(type) c
			(layer)1
				Element:strong
					iDisplayStart
					int32required
			Node:
			(type) c
			(layer)1
				Element:p
					Number of records to skip
			Node:
			(type) c
			(layer)1
				Element:strong
					iDisplayLength
					int32required
			Node:
			(type) c
			(layer)1
				Element:p
					Number or records to output
			Node:
			(type) c
			(layer)1
				Element:strong
					iSortCol_0
					stringrequired
			Node:
			(type) c
			(layer)1
				Element:p
					Sorting column name. Default is descending sorting by created date.
			Node:
			(type) c
			(layer)1
				Element:strong
					sSortDir_0
					stringrequired
			Node:
			(type) c
			(layer)1
				Element:p
					Direction of sorting - "asc" or "desc". Default is descending sorting by created date.
			Node:
			(type) c
			(layer)1
				Element:p
					This request outputs push messages created before.
			Node:
			(type) c
			(layer)1
				Element:footer
				Element:a
