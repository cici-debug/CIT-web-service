Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					Code Examples
				Element:a
					#
			Node:
			(type) c
			(layer)1
				Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Trigger Pre-Poll Examples
							Element:a
								#
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								"use strict"
							Element:span
								;
							Element:span
								var
							Element:span
								Zap
							Element:span
								=
							Element:span
								{
							Element:span
								// STRAIGHT PASS THROUGH
							Element:span
								// same as not providing the method at all
							Element:span
								// for illustration purposes only
							Element:span
								simple_pre_poll
							Element:span
								:
							Element:span
								function
							Element:span
								(
							Element:span
								bundle
							Element:span
								)
							Element:span
								{
							Element:span
								return
							Element:span
								bundle
							Element:span
								.
							Element:span
								request
							Element:span
								;
							Element:span
								},
							Element:span
								// PLACE A HEADER BASED ON USER INPUT
							Element:span
								// a trigger field that should be added as a header but
							Element:span
								// if there isn't one, default to "None"
							Element:span
								some_header_pre_poll
							Element:span
								:
							Element:span
								function
							Element:span
								(
							Element:span
								bundle
							Element:span
								)
							Element:span
								{
							Element:span
								var
							Element:span
								request
							Element:span
								=
							Element:span
								bundle
							Element:span
								.
							Element:span
								request
							Element:span
								;
							Element:span
								request
							Element:span
								.
							Element:span
								headers
							Element:span
								[
							Element:span
								"X-Project-ID"
							Element:span
								]
							Element:span
								=
							Element:span
								bundle
							Element:span
								.
							Element:span
								trigger_fields
							Element:span
								.
							Element:span
								project_id
							Element:span
								||
							Element:span
								"None"
							Element:span
								;
							Element:span
								return
							Element:span
								request
							Element:span
								;
							Element:span
								},
							Element:span
								// SUBSTITUTE HUMAN FRIENDLY CHOICES
							Element:span
								// if you add a trigger field with human friendly choices:
							Element:span
								// Yesterday,Today,Tomorrow
							Element:span
								// but the querystring should be:
							Element:span
								// &when=-1, &when=0, or &when=1
							Element:span
								event_pre_poll
							Element:span
								:
							Element:span
								function
							Element:span
								(
							Element:span
								bundle
							Element:span
								)
							Element:span
								{
							Element:span
								var
							Element:span
								request
							Element:span
								=
							Element:span
								bundle
							Element:span
								.
							Element:span
								request
							Element:span
								;
							Element:span
								switch
							Element:span
								(
							Element:span
								bundle
							Element:span
								.
							Element:span
								trigger_fields
							Element:span
								.
							Element:span
								when
							Element:span
								)
							Element:span
								{
							Element:span
								case
							Element:span
								"Yesterday"
							Element:span
								:
							Element:span
								request
							Element:span
								.
							Element:span
								params
							Element:span
								.
							Element:span
								when
							Element:span
								=
							Element:span
								-
							Element:span
								1
							Element:span
								;
							Element:span
								break
							Element:span
								;
							Element:span
								case
							Element:span
								"Today"
							Element:span
								:
							Element:span
								request
							Element:span
								.
							Element:span
								params
							Element:span
								.
							Element:span
								when
							Element:span
								=
							Element:span
								0
							Element:span
								;
							Element:span
								break
							Element:span
								;
							Element:span
								default
							Element:span
								:
							Element:span
								request
							Element:span
								.
							Element:span
								params
							Element:span
								.
							Element:span
								when
							Element:span
								=
							Element:span
								1
							Element:span
								;
							Element:span
								}
							Element:span
								return
							Element:span
								request
							Element:span
								;
							Element:span
								},
							Element:span
								// BUILD THE URL YOURSELF
							Element:span
								// this does exactly what we do when transforming the URL
							Element:span
								// from bundle.url_raw to bundle.request.url
							Element:span
								// utilizes underscores template system (preloaded with proper syntax)
							Element:span
								room_pre_poll
							Element:span
								:
							Element:span
								function
							Element:span
								(
							Element:span
								bundle
							Element:span
								)
							Element:span
								{
							Element:span
								var
							Element:span
								request
							Element:span
								=
							Element:span
								bundle
							Element:span
								.
							Element:span
								request
							Element:span
								;
							Element:span
								// bundle.url_raw is 'http://.campfirenow.com/room//speak.json'
							Element:span
								// bundle.auth_fields is {account_name: 'myaccount', api_key: '1234567890'}
							Element:span
								request
							Element:span
								.
							Element:span
								url
							Element:span
								=
							Element:span
								_
							Element:span
								.
							Element:span
								template
							Element:span
								(
							Element:span
								bundle
							Element:span
								.
							Element:span
								url_raw
							Element:span
								)(
							Element:span
								bundle
							Element:span
								.
							Element:span
								auth_fields
							Element:span
								);
							Element:span
								// request.url is 'http://myaccount.campfirenow.com/room//speak.json'
							Element:span
								// bundle.auth_fields is {room_id: 12345, message: 'Hello world!'}
							Element:span
								request
							Element:span
								.
							Element:span
								url
							Element:span
								=
							Element:span
								_
							Element:span
								.
							Element:span
								template
							Element:span
								(
							Element:span
								request
							Element:span
								.
							Element:span
								url
							Element:span
								)(
							Element:span
								bundle
							Element:span
								.
							Element:span
								trigger_fields
							Element:span
								);
							Element:span
								// request.url is 'http://myaccount.campfirenow.com/room/12345/speak.json'
							Element:span
								return
							Element:span
								request
							Element:span
								;
							Element:span
								}
							Element:span
								}
						Node:
						(type) c
						(layer)2
							Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Trigger Post-Poll Examples
							Element:a
								#
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								"use strict"
							Element:span
								;
							Element:span
								var
							Element:span
								Zap
							Element:span
								=
							Element:span
								{
							Element:span
								// STRAIGHT PASS THROUGH OF JSON
							Element:span
								// same as not providing the method at all
							Element:span
								// for illustration purposes only
							Element:span
								straight_post_poll
							Element:span
								:
							Element:span
								function
							Element:span
								(
							Element:span
								bundle
							Element:span
								)
							Element:span
								{
							Element:span
								// bundle.response.content is '[{"id":1234,"title":"Hello!"}, ... ]'
							Element:span
								return
							Element:span
								JSON
							Element:span
								.
							Element:span
								parse
							Element:span
								(
							Element:span
								bundle
							Element:span
								.
							Element:span
								response
							Element:span
								.
							Element:span
								content
							Element:span
								);
							Element:span
								},
							Element:span
								// CENTS INTO DOLLARS
							Element:span
								// take a key in cents and offer it up as a dollar formatted string
							Element:span
								sale_post_poll
							Element:span
								:
							Element:span
								function
							Element:span
								(
							Element:span
								bundle
							Element:span
								)
							Element:span
								{
							Element:span
								// bundle.response.content is '[{"id":1234,"cents":925}, ... ]'
							Element:span
								var
							Element:span
								results
							Element:span
								=
							Element:span
								JSON
							Element:span
								.
							Element:span
								parse
							Element:span
								(
							Element:span
								bundle
							Element:span
								.
							Element:span
								response
							Element:span
								.
							Element:span
								content
							Element:span
								);
							Element:span
								_
							Element:span
								.
							Element:span
								each
							Element:span
								(
							Element:span
								results
							Element:span
								,
							Element:span
								function
							Element:span
								(
							Element:span
								result
							Element:span
								)
							Element:span
								{
							Element:span
								result
							Element:span
								.
							Element:span
								dollars
							Element:span
								=
							Element:span
								"$"
							Element:span
								+
							Element:span
								(
							Element:span
								Math
							Element:span
								.
							Element:span
								floor
							Element:span
								(
							Element:span
								result
							Element:span
								.
							Element:span
								cents
							Element:span
								/
							Element:span
								100
							Element:span
								))
							Element:span
								+
							Element:span
								"."
							Element:span
								+
							Element:span
								(
							Element:span
								result
							Element:span
								.
							Element:span
								cents
							Element:span
								%
							Element:span
								100
							Element:span
								);
							Element:span
								})
							Element:span
								// results is '[{"id":1234,"cents":925,"dollars":"$9.25"}, ... ]'
							Element:span
								return
							Element:span
								results
							Element:span
								;
							Element:span
								},
							Element:span
								// XML INTO JSON
							Element:span
								// given an string of xml data, turn that into JSON:
							Element:span
								// <messages type="array">
							Element:span
								// <message>
							Element:span
								// <id type="integer">2</id>
							Element:span
								// <title>Anyone home?</title>
							Element:span
								// <body>I can't seem to see anything!</body>
							Element:span
								// </message>
							Element:span
								// <message>
							Element:span
								// <id type="integer">1</id>
							Element:span
								// <title>Hello there world!</title>
							Element:span
								// <body>I am just tickled to see you!</body>
							Element:span
								// </message>
							Element:span
								// </messages>
							Element:span
								my_xml_doc_post_poll
							Element:span
								:
							Element:span
								function
							Element:span
								(
							Element:span
								bundle
							Element:span
								)
							Element:span
								{
							Element:span
								// bundle.response.content is xml string from API, $ is preloaded jQuery
							Element:span
								var
							Element:span
								xml
							Element:span
								=
							Element:span
								$
							Element:span
								(
							Element:span
								$
							Element:span
								.
							Element:span
								parseXML
							Element:span
								(
							Element:span
								bundle
							Element:span
								.
							Element:span
								response
							Element:span
								.
							Element:span
								content
							Element:span
								)).
							Element:span
								find
							Element:span
								(
							Element:span
								'message'
							Element:span
								);
							Element:span
								// build javascript primitives: array of objects
							Element:span
								var
							Element:span
								results
							Element:span
								=
							Element:span
								_
							Element:span
								.
							Element:span
								map
							Element:span
								(
							Element:span
								xml
							Element:span
								,
							Element:span
								function
							Element:span
								(
							Element:span
								element
							Element:span
								){
							Element:span
								return
							Element:span
								{
							Element:span
								id
							Element:span
								:
							Element:span
								$
							Element:span
								(
							Element:span
								element
							Element:span
								).
							Element:span
								find
							Element:span
								(
							Element:span
								'id'
							Element:span
								).
							Element:span
								text
							Element:span
								(),
							Element:span
								title
							Element:span
								:
							Element:span
								$
							Element:span
								(
							Element:span
								element
							Element:span
								).
							Element:span
								find
							Element:span
								(
							Element:span
								'title'
							Element:span
								).
							Element:span
								text
							Element:span
								(),
							Element:span
								body
							Element:span
								:
							Element:span
								$
							Element:span
								(
							Element:span
								element
							Element:span
								).
							Element:span
								find
							Element:span
								(
							Element:span
								'body'
							Element:span
								).
							Element:span
								text
							Element:span
								()
							Element:span
								};
							Element:span
								});
							Element:span
								// results is '[{"id":"2","title":"Anyone home?","body":"I can't seem to see anything!"}, ... ]'
							Element:span
								return
							Element:span
								results
							Element:span
								;
							Element:span
								}
							Element:span
								}
						Node:
						(type) c
						(layer)2
							Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Catching Webhooks Example
							Element:a
								#
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								"use strict"
							Element:span
								;
							Element:span
								var
							Element:span
								Zap
							Element:span
								=
							Element:span
								{
							Element:span
								// STRAIGHT PASS THROUGH OF CLEANED_REQUEST
							Element:span
								// same as not providing the method at all
							Element:span
								// for illustration purposes only
							Element:span
								straight_catch_hook
							Element:span
								:
							Element:span
								function
							Element:span
								(
							Element:span
								bundle
							Element:span
								)
							Element:span
								{
							Element:span
								// bundle.cleaned_request is usually an object or array
							Element:span
								return
							Element:span
								bundle
							Element:span
								.
							Element:span
								cleaned_request
							Element:span
								;
							Element:span
								},
							Element:span
								// PLACE QUERY STRING AS MAIN OBJECT
							Element:span
								// in this example our hook is just a GET with a query string
							Element:span
								// there is no request content or body, maybe a url like this:
							Element:span
								// GET https://zapier.com//hooks/catch/123/n/456789/?name=bryan&age=27
							Element:span
								simple_get_catch_hook
							Element:span
								:
							Element:span
								function
							Element:span
								(
							Element:span
								bundle
							Element:span
								)
							Element:span
								{
							Element:span
								// bundle.cleaned_request includes the query string already parsed
							Element:span
								// but you could parse it yourself from bundle.request.querystring:
							Element:span
								var
							Element:span
								example
							Element:span
								=
							Element:span
								$
							Element:span
								.
							Element:span
								param
							Element:span
								(
							Element:span
								bundle
							Element:span
								.
							Element:span
								request
							Element:span
								.
							Element:span
								querystring
							Element:span
								);
							Element:span
								// but let's just return the cleaned_request version:
							Element:span
								return
							Element:span
								bundle
							Element:span
								.
							Element:span
								cleaned_request
							Element:span
								.
							Element:span
								querystring
							Element:span
								;
							Element:span
								// {"name":"bryan","age":27}
							Element:span
								},
							Element:span
								// MOVE LIST ON SUBKEY TO MAIN OBJECT
							Element:span
								// if a json POST contains a list on a root object's key "data"
							Element:span
								// we can move the list to the parent to trigger for each item
							Element:span
								// the content/body might look like:
							Element:span
								// {"data":[{"name":"bryan","age":27},{"name":"mike","age":23}]}
							Element:span
								myjson_catch_hook
							Element:span
								:
							Element:span
								function
							Element:span
								(
							Element:span
								bundle
							Element:span
								)
							Element:span
								{
							Element:span
								// bundle.cleaned_request includes the json already parsed
							Element:span
								// but you could parse it yourself from bundle.request.content:
							Element:span
								var
							Element:span
								example
							Element:span
								=
							Element:span
								JSON
							Element:span
								.
							Element:span
								parse
							Element:span
								(
							Element:span
								bundle
							Element:span
								.
							Element:span
								request
							Element:span
								.
							Element:span
								content
							Element:span
								).
							Element:span
								data
							Element:span
								;
							Element:span
								// but let's just return the cleaned_request version:
							Element:span
								return
							Element:span
								bundle
							Element:span
								.
							Element:span
								cleaned_request
							Element:span
								.
							Element:span
								data
							Element:span
								;
							Element:span
								// the array
							Element:span
								}
							Element:span
								// FILTER OUT CERTAIN STATIC WEBHOOKS
							Element:span
								// if your hooks are noisy, then you may want to filter based on
							Element:span
								// some static value, or even user provided trigger fields
							Element:span
								filter_out_catch_hook
							Element:span
								:
							Element:span
								function
							Element:span
								(
							Element:span
								bundle
							Element:span
								)
							Element:span
								{
							Element:span
								// manually create json from the posted string
							Element:span
								var
							Element:span
								json
							Element:span
								=
							Element:span
								JSON
							Element:span
								.
							Element:span
								parse
							Element:span
								(
							Element:span
								bundle
							Element:span
								.
							Element:span
								request
							Element:span
								.
							Element:span
								content
							Element:span
								);
							Element:span
								// filter out hooks that aren't the event type we care about
							Element:span
								if
							Element:span
								(
							Element:span
								json
							Element:span
								.
							Element:span
								event_type
							Element:span
								!=
							Element:span
								'new_comment'
							Element:span
								)
							Element:span
								{
							Element:span
								return
							Element:span
								[];
							Element:span
								// return [] or {} to take no action
							Element:span
								}
							Element:span
								// filter out hooks that aren't the status that the user expected
							Element:span
								if
							Element:span
								(
							Element:span
								bundle
							Element:span
								.
							Element:span
								trigger_fields
							Element:span
								.
							Element:span
								status
							Element:span
								&&
							Element:span
								json
							Element:span
								.
							Element:span
								status
							Element:span
								!=
							Element:span
								bundle
							Element:span
								.
							Element:span
								trigger_fields
							Element:span
								.
							Element:span
								status
							Element:span
								)
							Element:span
								{
							Element:span
								return
							Element:span
								[];
							Element:span
								// return [] or {} to take no action
							Element:span
								}
							Element:span
								// else
							Element:span
								return
							Element:span
								json
							Element:span
								;
							Element:span
								},
							Element:span
								}
						Node:
						(type) c
						(layer)2
							Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Action Pre-Write Examples
							Element:a
								#
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								"use strict"
							Element:span
								;
							Element:span
								var
							Element:span
								Zap
							Element:span
								=
							Element:span
								{
							Element:span
								// STRAIGHT PASS THROUGH
							Element:span
								// same as not providing the method at all
							Element:span
								// for illustration purposes only
							Element:span
								pass_through_pre_write
							Element:span
								:
							Element:span
								function
							Element:span
								(
							Element:span
								bundle
							Element:span
								)
							Element:span
								{
							Element:span
								return
							Element:span
								bundle
							Element:span
								.
							Element:span
								request
							Element:span
								;
							Element:span
								},
							Element:span
								// DO NOT UNFLATTEN __
							Element:span
								// by default we will turn fields like {custom__c: 12}
							Element:span
								// into {custom: {c: 12}}, but this can avoid this by
							Element:span
								// using the "full" action fields, like this
							Element:span
								dont_unwrap_pre_write
							Element:span
								:
							Element:span
								function
							Element:span
								(
							Element:span
								bundle
							Element:span
								)
							Element:span
								{
							Element:span
								bundle
							Element:span
								.
							Element:span
								request
							Element:span
								.
							Element:span
								data
							Element:span
								=
							Element:span
								JSON
							Element:span
								.
							Element:span
								stringify
							Element:span
								(
							Element:span
								bundle
							Element:span
								.
							Element:span
								action_fields_full
							Element:span
								);
							Element:span
								return
							Element:span
								bundle
							Element:span
								.
							Element:span
								request
							Element:span
								;
							Element:span
								},
							Element:span
								// LIMIT STRING LENGTH
							Element:span
								// a field called message cannot be longer than 256 characters
							Element:span
								message_pre_write
							Element:span
								:
							Element:span
								function
							Element:span
								(
							Element:span
								bundle
							Element:span
								)
							Element:span
								{
							Element:span
								var
							Element:span
								outbound
							Element:span
								=
							Element:span
								JSON
							Element:span
								.
							Element:span
								parse
							Element:span
								(
							Element:span
								bundle
							Element:span
								.
							Element:span
								request
							Element:span
								.
							Element:span
								data
							Element:span
								);
							Element:span
								outbound
							Element:span
								.
							Element:span
								message
							Element:span
								=
							Element:span
								outbound
							Element:span
								.
							Element:span
								message
							Element:span
								.
							Element:span
								substring
							Element:span
								(
							Element:span
								0
							Element:span
								,
							Element:span
								256
							Element:span
								);
							Element:span
								bundle
							Element:span
								.
							Element:span
								request
							Element:span
								.
							Element:span
								data
							Element:span
								=
							Element:span
								JSON
							Element:span
								.
							Element:span
								stringify
							Element:span
								(
							Element:span
								outbound
							Element:span
								);
							Element:span
								return
							Element:span
								bundle
							Element:span
								.
							Element:span
								request
							Element:span
								;
							Element:span
								},
							Element:span
								// GENERATE XML FOR POSTING
							Element:span
								// you'll have access to your action fields
							Element:span
								// we'd normally POST as JSON, but this shows how to do XML
							Element:span
								xml_doc_pre_write
							Element:span
								:
							Element:span
								function
							Element:span
								(
							Element:span
								bundle
							Element:span
								)
							Element:span
								{
							Element:span
								// root el is ignored in .html()
							Element:span
								var
							Element:span
								xml
							Element:span
								=
							Element:span
								$
							Element:span
								(
							Element:span
								"<XMLDocument><message/></XMLDocument>"
							Element:span
								);
							Element:span
								// bundle.action_fields is {title: "Anyone home?", body: "I can't seem to see anything!"}
							Element:span
								_
							Element:span
								.
							Element:span
								each
							Element:span
								(
							Element:span
								bundle
							Element:span
								.
							Element:span
								action_fields
							Element:span
								,
							Element:span
								function
							Element:span
								(
							Element:span
								value
							Element:span
								,
							Element:span
								key
							Element:span
								){
							Element:span
								$
							Element:span
								(
							Element:span
								xml
							Element:span
								.
							Element:span
								find
							Element:span
								(
							Element:span
								"message"
							Element:span
								)).
							Element:span
								append
							Element:span
								(
							Element:span
								$
							Element:span
								(
							Element:span
								"<"
							Element:span
								+
							Element:span
								key
							Element:span
								+
							Element:span
								" />"
							Element:span
								).
							Element:span
								text
							Element:span
								(
							Element:span
								value
							Element:span
								));
							Element:span
								})
							Element:span
								// '<message><title>Anyone home?</title><body>I can't seem to see anything!</body></message>'
							Element:span
								bundle
							Element:span
								.
							Element:span
								request
							Element:span
								.
							Element:span
								data
							Element:span
								=
							Element:span
								xml
							Element:span
								.
							Element:span
								html
							Element:span
								();
							Element:span
								// set the headers
							Element:span
								bundle
							Element:span
								.
							Element:span
								request
							Element:span
								.
							Element:span
								headers
							Element:span
								[
							Element:span
								'Content-Type'
							Element:span
								]
							Element:span
								=
							Element:span
								"application/xml; charset=utf-8"
							Element:span
								;
							Element:span
								bundle
							Element:span
								.
							Element:span
								request
							Element:span
								.
							Element:span
								headers
							Element:span
								[
							Element:span
								'Accept'
							Element:span
								]
							Element:span
								=
							Element:span
								"application/xml"
							Element:span
								;
							Element:span
								return
							Element:span
								bundle
							Element:span
								.
							Element:span
								request
							Element:span
								;
							Element:span
								},
							Element:span
								// FORM ENCODE INSTEAD OF JSON
							Element:span
								// sometimes you don't want to JSON encode, so this example shows how
							Element:span
								// to form encode POST data instead (just like a form submission)
							Element:span
								my_form_pre_write
							Element:span
								:
							Element:span
								function
							Element:span
								(
							Element:span
								bundle
							Element:span
								)
							Element:span
								{
							Element:span
								// convert incoming JSON to javascript objects
							Element:span
								var
							Element:span
								data
							Element:span
								=
							Element:span
								JSON
							Element:span
								.
							Element:span
								parse
							Element:span
								(
							Element:span
								bundle
							Element:span
								.
							Element:span
								request
							Element:span
								.
							Element:span
								data
							Element:span
								);
							Element:span
								// build a querystring from objects
							Element:span
								bundle
							Element:span
								.
							Element:span
								request
							Element:span
								.
							Element:span
								data
							Element:span
								=
							Element:span
								$
							Element:span
								.
							Element:span
								param
							Element:span
								(
							Element:span
								data
							Element:span
								);
							Element:span
								// correct the content type header
							Element:span
								bundle
							Element:span
								.
							Element:span
								request
							Element:span
								.
							Element:span
								headers
							Element:span
								[
							Element:span
								'Content-Type'
							Element:span
								]
							Element:span
								=
							Element:span
								'application/x-www-form-urlencoded'
							Element:span
								;
							Element:span
								return
							Element:span
								bundle
							Element:span
								.
							Element:span
								request
							Element:span
								;
							Element:span
								}
							Element:span
								}
						Node:
						(type) c
						(layer)2
							Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								REST Hook Subscription Examples
							Element:a
								#
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								var
							Element:span
								Zap
							Element:span
								=
							Element:span
								{
							Element:span
								pre_subscribe
							Element:span
								:
							Element:span
								function
							Element:span
								(
							Element:span
								bundle
							Element:span
								)
							Element:span
								{
							Element:span
								bundle
							Element:span
								.
							Element:span
								request
							Element:span
								.
							Element:span
								method
							Element:span
								=
							Element:span
								'POST'
							Element:span
								;
							Element:span
								bundle
							Element:span
								.
							Element:span
								request
							Element:span
								.
							Element:span
								headers
							Element:span
								[
							Element:span
								'Content-Type'
							Element:span
								]
							Element:span
								=
							Element:span
								'application/x-www-form-urlencoded'
							Element:span
								;
							Element:span
								bundle
							Element:span
								.
							Element:span
								request
							Element:span
								.
							Element:span
								data
							Element:span
								=
							Element:span
								$
							Element:span
								.
							Element:span
								param
							Element:span
								({
							Element:span
								url
							Element:span
								:
							Element:span
								bundle
							Element:span
								.
							Element:span
								target_url
							Element:span
								,
							Element:span
								list_id
							Element:span
								:
							Element:span
								bundle
							Element:span
								.
							Element:span
								trigger_fields
							Element:span
								.
							Element:span
								list_id
							Element:span
								,
							Element:span
								// from trigger field
							Element:span
								append_data
							Element:span
								:
							Element:span
								1
							Element:span
								});
							Element:span
								return
							Element:span
								bundle
							Element:span
								.
							Element:span
								request
							Element:span
								;
							Element:span
								},
							Element:span
								post_subscribe
							Element:span
								:
							Element:span
								function
							Element:span
								(
							Element:span
								bundle
							Element:span
								)
							Element:span
								{
							Element:span
								// must return a json serializable object for use in pre_unsubscribe
							Element:span
								data
							Element:span
								=
							Element:span
								JSON
							Element:span
								.
							Element:span
								parse
							Element:span
								(
							Element:span
								bundle
							Element:span
								.
							Element:span
								response
							Element:span
								.
							Element:span
								content
							Element:span
								);
							Element:span
								// we need this in order to build the {{webhook_id}}
							Element:span
								// in the rest hook unsubscribe url
							Element:span
								return
							Element:span
								{
							Element:span
								webhook_id
							Element:span
								:
							Element:span
								data
							Element:span
								.
							Element:span
								id
							Element:span
								};
							Element:span
								},
							Element:span
								pre_unsubscribe
							Element:span
								:
							Element:span
								function
							Element:span
								(
							Element:span
								bundle
							Element:span
								)
							Element:span
								{
							Element:span
								bundle
							Element:span
								.
							Element:span
								request
							Element:span
								.
							Element:span
								method
							Element:span
								=
							Element:span
								'DELETE'
							Element:span
								;
							Element:span
								// bundle.subscribe_data is from return date in post_subscribe method
							Element:span
								bundle
							Element:span
								.
							Element:span
								request
							Element:span
								.
							Element:span
								url
							Element:span
								=
							Element:span
								'https://example.com/x.php?id='
							Element:span
								+
							Element:span
								bundle
							Element:span
								.
							Element:span
								subscribe_data
							Element:span
								.
							Element:span
								webhook_id
							Element:span
								;
							Element:span
								bundle
							Element:span
								.
							Element:span
								request
							Element:span
								.
							Element:span
								data
							Element:span
								=
							Element:span
								null
							Element:span
								;
							Element:span
								return
							Element:span
								bundle
							Element:span
								.
							Element:span
								request
							Element:span
								;
							Element:span
								},
							Element:span
								};
						Node:
						(type) c
						(layer)2
							Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Session Auth Examples
							Element:a
								#
						Node:
						(type) c
						(layer)2
							Element:pre
								↑ Was this documentation useful?
							Element:span
								Zap
							Element:span
								=
							Element:span
								{
							Element:span
								get_session_info
							Element:span
								:
							Element:span
								function
							Element:span
								(
							Element:span
								bundle
							Element:span
								)
							Element:span
								{
							Element:span
								var
							Element:span
								api_key
							Element:span
								,
							Element:span
								api_key_request_payload
							Element:span
								,
							Element:span
								api_key_response
							Element:span
								;
							Element:span
								// Assemble the meta data for our key swap request
							Element:span
								api_key_request_payload
							Element:span
								=
							Element:span
								{
							Element:span
								method
							Element:span
								:
							Element:span
								'POST'
							Element:span
								,
							Element:span
								url
							Element:span
								:
							Element:span
								'https://api.domain-name.com/api/login'
							Element:span
								,
							Element:span
								params
							Element:span
								:
							Element:span
								bundle
							Element:span
								.
							Element:span
								auth_fields
							Element:span
								,
							Element:span
								headers
							Element:span
								:
							Element:span
								{
							Element:span
								'Content-Type'
							Element:span
								:
							Element:span
								'application/json'
							Element:span
								,
							Element:span
								// Could be anything.
							Element:span
								Accept
							Element:span
								:
							Element:span
								'application/json'
							Element:span
								}
							Element:span
								};
							Element:span
								// Fire off the key exchange request.
							Element:span
								api_key_response
							Element:span
								=
							Element:span
								z
							Element:span
								.
							Element:span
								request
							Element:span
								(
							Element:span
								api_key_request_payload
							Element:span
								);
							Element:span
								// Extract the `api_key` from returned JSON.
							Element:span
								api_key
							Element:span
								=
							Element:span
								JSON
							Element:span
								.
							Element:span
								parse
							Element:span
								(
							Element:span
								api_key_response
							Element:span
								.
							Element:span
								content
							Element:span
								).
							Element:span
								api_key
							Element:span
								;
							Element:span
								// This structure is an example. You may need to add
							Element:span
								// a different key name, or multiple keys, depending
							Element:span
								// on your API's requirements.
							Element:span
								// This will be mixed into bundle.auth_fields in future calls.
							Element:span
								return
							Element:span
								{
							Element:span
								'api_key'
							Element:span
								:
							Element:span
								api_key
							Element:span
								};
							Element:span
								},
							Element:span
								new_contact_post_poll
							Element:span
								:
							Element:span
								function
							Element:span
								(
							Element:span
								bundle
							Element:span
								)
							Element:span
								{
							Element:span
								if
							Element:span
								(
							Element:span
								bundle
							Element:span
								.
							Element:span
								response
							Element:span
								.
							Element:span
								status_code
							Element:span
								===
							Element:span
								401
							Element:span
								)
							Element:span
								{
							Element:span
								throw
							Element:span
								new
							Element:span
								InvalidSessionException
							Element:span
								();
							Element:span
								// So we can recall get_session_info
							Element:span
								}
							Element:span
								return
							Element:span
								JSON
							Element:span
								.
							Element:span
								parse
							Element:span
								(
							Element:span
								bundle
							Element:span
								.
							Element:span
								response
							Element:span
								.
							Element:span
								content
							Element:span
								);
							Element:span
								}
							Element:span
								};
						Node:
						(type) c
						(layer)2
							Element:span
								Can't find what you're looking for? We'd love to help.
							Element:a
								Yes
							Element:a
								No
						Node:
						(type) c
						(layer)2
							Element:a
								Send us a message
								. Get Help
						Node:
						(type) c
						(layer)2
							Element:noscript
							Element:img
