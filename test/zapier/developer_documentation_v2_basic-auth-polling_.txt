Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					Bitbucket (Basic Auth & Polling)
				Element:a
					#
			Node:
			(type) c
			(layer)1
				Element:p
					This example will walk you through creating a developer app that uses Basic Authentication and a has a single trigger that polls a web service for data. To make the example real, we'll be implementing the actual Bitbucket API.
			Node:
			(type) c
			(layer)1
				Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Quick Preparation Checklist
							Element:a
								#
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
								You must have a
							Element:a
								Zapier account
								.
							Element:li
								You must have a
							Element:a
								Bitbucket account
								.
							Element:li
								Read the
							Element:a
								Getting Started with the Zapier Developer Platform
								section to familiarize yourself with some of the terminology and basic components of an App.
							Element:li
								Read the
							Element:a
								Bitbucket API Documentation
								to familiarize yourself with Bitbucket.
						Node:
						(type) c
						(layer)2
							Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Create an App
							Element:a
								#
						Node:
						(type) c
						(layer)2
							Element:p
								To get started, go to the
							Element:a
								Developer Platform
								and click the "Create App" button. You'll be asked to give a title and a brief description.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
								After you submit, you should find yourself with a fresh App like this:
						Node:
						(type) c
						(layer)2
							Element:p
							Element:img
						Node:
						(type) c
						(layer)2
							Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Setting up authentication
							Element:a
								#
						Node:
						(type) c
						(layer)2
							Element:p
								We'll start by defining how Zapier should authenticate with Bitbucket. From the above screen, click the "Get Started" button in the authentication section.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
								On Step 1 you will want to choose Basic Auth since that is what Bitbucket uses. You should then find yourself on Step 2 with some pre-generated authentication fields. These are the fields that users will be presented with when they add a Bitbucket account in Zapier.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
								The default fields are all that is needed for Bitbucket, so click next to go to the final step. Here, we define how the fields we collect from users should map to parameters used in the actual API call. Since this is Basic Auth, we will define username and password keys in the auth mapping. Our fields are conveniently called username and password as well, so all we need is this:
						Node:
						(type) c
						(layer)2
							Element:p
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
							Element:em
								Note: the {{username}} is our
							Element:a
								variable syntax
								, which says take whatever value the user put in the username authentication field and make it be the username in the Basic Auth call.
						Node:
						(type) c
						(layer)2
							Element:p
								At this point, we have the authentication setup and are ready to make our first trigger.
						Node:
						(type) c
						(layer)2
							Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Fetching data from Bitbucket using polling
							Element:a
								#
						Node:
						(type) c
						(layer)2
							Element:p
								The trigger we are going to build will watch Bitbucket for new repositories being added to a user's account. Generally, the first trigger you add to an App should be for an API endpoint that requires authentication and is guaranteed to always return some data. This allows Zapier to verify that the authentication credentials a user provides are valid (we make an actual API call to check).
						Node:
						(type) c
						(layer)2
							Element:p
								From your App, click the "Add your first test trigger" button.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
								The first form you see allows you to define some of the user-facing details of the trigger.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
								Click next to proceed to Step 2, Trigger Fields. Trigger fields add extra information for the trigger which you can use in the URL or in Scripting. We're actually going to skip over this step because our New Repository trigger does not require any additional info. Hit next to get to Step 3, where we define how our trigger will fetch data from Bitbucket.
						Node:
						(type) c
						(layer)2
							Element:p
								Bitbucket provides an API endpoint that lists the repositories in a user's account. For Zapier to keep up-to-date, we are going to poll this endpoint at a regular interval to check for new repositories. Here is what we will fill out:
						Node:
						(type) c
						(layer)2
							Element:p
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
								Click save to proceed to Step 4. In this step, we will copy and paste an example of what the Bitbucket API returns. This is not strictly necessary, but it helps users setup their Zaps when they do not have any repositories available to sample. The data can be found by making a raw request with your favorite HTTP client, or using Bitbucket's
							Element:a
								API Browser
								.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
								When you click "Parse" you will be presented with a slew of form fields, one for each JSON key in the sample. These forms allow you to override the default name Zapier will give each key. For instance, Zapier will automatically turn the key "utc_last_updated" into "Utc Last Updated", but you might want to rename it to just "Last Updated". For now, we will skip this step and click "Save".
						Node:
						(type) c
						(layer)2
							Element:p
								At this point, we have defined our first trigger and are ready to test it out!
						Node:
						(type) c
						(layer)2
							Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Testing what we have built
							Element:a
								#
						Node:
						(type) c
						(layer)2
							Element:p
								Now that we have built out the basics of our app, it is time to try it out and see if it works. Go to your
							Element:a
								dashboard
								and click the create a zap button. On Step 1 of the Zap Editor, you should now have our Bitbucket Example app. The app should have a single trigger, New Repository.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
								After you select the trigger and any action (the Zapier Delay is a good one to test with), Step 2 will ask you to add your Bitbucket account.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
								When you click the button, you will get this form:
						Node:
						(type) c
						(layer)2
							Element:p
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
								As you can see, the form contains the two authentication fields we set up, plus another one that Zapier adds so the user can name the account. Fill out the form and click continue. At this point, Zapier will make an API call the repositories endpoint. If everything is setup correctly (and you have at least one repository in your Bitbucket account), you should get a success message and the account should be added:
						Node:
						(type) c
						(layer)2
							Element:p
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
								If you like, you can continue to fill out the Zap. Down at Step 6, when you click the test button, you should see some samples load up that match repositories in your account. At this point, we know our trigger is working.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:strong
								Congratulations!
								You have a working Bitbucket application that:
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
								Uses Basic Auth.
							Element:li
								One polling trigger (reused for testing).
						Node:
						(type) c
						(layer)2
							Element:p
								Be sure to check out our other examples for more details on doing other interesting things with Zapier's developer platform!
								â†‘ Was this documentation useful?
						Node:
						(type) c
						(layer)2
							Element:span
								Can't find what you're looking for? We'd love to help.
							Element:a
								Yes
							Element:a
								No
						Node:
						(type) c
						(layer)2
							Element:a
								Send us a message
								. Get Help
						Node:
						(type) c
						(layer)2
							Element:noscript
							Element:img
