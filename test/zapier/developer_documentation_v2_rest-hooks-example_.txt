Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					Formstack (OAuthV2 & REST Hooks)
				Element:a
					#
			Node:
			(type) c
			(layer)1
				Element:p
					This example will walk you through creating a developer app that uses
				Element:a
					REST Hooks
					for a trigger that subscribes and unsubscribes a callback and waits for the data to come in. To make the example real, we'll be implementing the actual
				Element:strong
					Formstack
					API. Let's get started!
			Node:
			(type) c
			(layer)1
				Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Quick Preparation Checklist
							Element:a
								#
						Node:
						(type) c
						(layer)2
							Element:p
								If you plan to follow along, it is recommended you set up everything beforehand and keep these resources open and ready for quick access.
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
								You must have a
							Element:a
								Zapier account
								.
							Element:li
								You must have a
							Element:a
								Formstack account
								and are ready to create a
							Element:a
								Formstack Developer App
								.
							Element:li
								Read the
							Element:a
								Getting Started with the Zapier Developer Platform
								section to familiarize yourself with some of the terminology and basic components of an App.
							Element:li
								Learn a bit about what
							Element:a
								REST Hooks
								are and how they are different from polling.
							Element:li
								Read the
							Element:a
								Formstack API Documentation
								to familiarize yourself with Formstack.
							Element:li
								Read our
							Element:a
								OAuth Documentation
								for more details.
						Node:
						(type) c
						(layer)2
							Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Getting Started
							Element:a
								#
						Node:
						(type) c
						(layer)2
							Element:p
								To get started, go to the
							Element:a
								Developer Platform
								and click the "Create App" button. You'll be asked to give a title and a brief description. After you submit, you should find yourself with a fresh app:
						Node:
						(type) c
						(layer)2
							Element:p
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
								Next, you'll need to complete all the required steps to authenticate with OAuthV2! You can read a more
							Element:a
								detailed OAuth V2 guide here
								, but we'll cover the basics here. First, you'll need to create your
							Element:a
								developer app in Formstack
								:
						Node:
						(type) c
						(layer)2
							Element:p
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
								To get your redirect URI, don't forget to set up your authentication settings, if you click the below button you can start an automated walkthrough that will help you get the basics set up:
						Node:
						(type) c
						(layer)2
							Element:p
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
								And at the very end of that walkthrough, you will be able to input the information given to you from Formstack for your specific developer app:
						Node:
						(type) c
						(layer)2
							Element:p
							Element:img
						Node:
						(type) c
						(layer)2
							Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								First Trigger and Test Trigger
							Element:a
								#
						Node:
						(type) c
						(layer)2
							Element:p
								Next up we'll want to
							Element:strong
								create our triggers
								. For this Formstack example, we're going to create two triggers which will be closely intertwined!
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:strong
								New Form
								, will poll a JSON API to return a list of forms. We'll reuse this as the test trigger as well.
							Element:li
							Element:strong
								New Entry
								, will subscribe/unsubscribe a webhook to get notifications of new entries for a form.
						Node:
						(type) c
						(layer)2
							Element:p
								The first trigger will test our authentication mechanism. The first trigger you create will be a test by default, we have a handy button to get started:
						Node:
						(type) c
						(layer)2
							Element:p
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
								Which will bring you to the basic details form about the trigger you are creating. Let's create the Form trigger, it is worth reviewing the
							Element:a
								Formstack Developer Documentation on the GET /forms endpoint
								which we'll be using to power the trigger.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
								Since we don't need any other information to make this trigger tick, we can skip trigger fields. Trigger fields just add extra information for the trigger which you can use in the URL or in scripting. Our next trigger will use Trigger fields, so just skip for now!
						Node:
						(type) c
						(layer)2
							Element:p
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
								Since we know the URL to retrieve the list of Forms from the
							Element:a
								Formstack Documentation
								, it is as simple as pasting
							Element:code
								https://www.formstack.com/api/v2/form.json
								directly into the Polling URL. You can skip the custom fields here, they are very rare for triggers!
						Node:
						(type) c
						(layer)2
							Element:p
							Element:img
						Node:
						(type) c
						(layer)2
							Element:blockquote
							Element:p
								You have everything you need to actually use your app, so now is a great time to test your app! Since all developer apps are available immediately on your account you can just visit your
							Element:a
								editor
								and use your app just like any other app Zapier supports!
						Node:
						(type) c
						(layer)2
							Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								REST Hook Trigger
							Element:a
								#
						Node:
						(type) c
						(layer)2
							Element:p
								Now it's time for the main attraction! This is what this example is building up to, but first we need to collect a little information about the REST Hook or webhook subscription we can create, for that we'll turn to the
							Element:a
								Formstack documentation for subscription webhooks
								and
							Element:a
								Formstack documentation for general webhooks
								.
						Node:
						(type) c
						(layer)2
							Element:p
								Here are the pieces we'll need in this step:
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
								The subscribe URL which looks something like
							Element:code
								https://www.formstack.com/api/v2/form/{{form_id}}/webhook.json
							Element:li
								The
							Element:strong
								un
								subscribe URL which looks something like
							Element:code
								https://www.formstack.com/api/v2/webhook/{{webhook_id}}.json
						Node:
						(type) c
						(layer)2
							Element:p
								First thing is first, we'll we'll need to set those subscription URLs up at the app level, you should see a button to manage your trigger settings.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
								Go ahead and paste the above URLs into the form and save the settings:
						Node:
						(type) c
						(layer)2
							Element:p
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
								Next up is the big event: let's create the trigger that will use those subscription URLs! Click your add trigger button and fill out the basic information like so:
						Node:
						(type) c
						(layer)2
							Element:p
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
								Now comes trigger fields, as you recall, in order to make set up the webhook subscription we need a
							Element:code
								form_id
								, luckily Zapier has some tools that makes it easy to make dynamic dropdown's that are powered by other triggers. It just so happens we've already made a trigger for this called "New Form". Let's just show you and recap after!
						Node:
						(type) c
						(layer)2
							Element:p
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
								There are a few things going on, but the two most important are "Key" and "Dynamic Dropdown"
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
								Make sure to reuse the Key
							Element:code
								form_id
								from the subscribe URL when making the trigger field. This pattern is fairly common and Zapier will stitch them together for you.
							Element:li
								For the Dynamic Dropdown, there are three parts separated by a
							Element:code
								.
								:
							Element:ul
							Element:li
							Element:code
								trigger_key
								which references which trigger by key you'd like to us.
							Element:li
							Element:code
								field_id
								which key from each object is the one we're interested (in this case it is the form_
							Element:strong
								id
								we want).
							Element:li
							Element:code
								field_name
								which key from object is the nice human readable version (in this case it is just
							Element:strong
								name
								).
						Node:
						(type) c
						(layer)2
							Element:p
								Both
							Element:code
								field_id
								and
							Element:code
								field_name
								are plucked from the JSON response that we get, for example, in this screenshot for the editor:
						Node:
						(type) c
						(layer)2
							Element:p
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
								The left values are the
							Element:code
								name
								and the right values are the
							Element:code
								id
								. When a user selects an item, we'll display the
							Element:code
								name
								but store the
							Element:code
								id
								as well for use later in URLs!
						Node:
						(type) c
						(layer)2
							Element:p
								Next up is actually telling this trigger to use REST Hooks and our subscription URLs as the way it grabs data, you can do this on the next step after saving your Trigger Field:
						Node:
						(type) c
						(layer)2
							Element:p
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
								You
							Element:em
								can
								provide an optional polling URL or sample data with REST Hooks, but Zapier will handle the subscription process for you when the user needs some sample data. If either of those two options are available, we'll try and use them.
						Node:
						(type) c
						(layer)2
							Element:p
								Next up is making sure that the request we send to Formstack for subscribe and unsubscribe are correct. That means we'll need to use our scripting feature to write some custom code to modify the requests before we send them. Just use the "Edit Code" button to start!
						Node:
						(type) c
						(layer)2
							Element:p
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
								The three methods we'll need to use are:
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
							Element:code
								pre_subscribe
								- ensure the request to subscribe matches what Formstack expects.
							Element:li
							Element:code
								post_subscribe
								- ensure Zapier can store the data to identify the webhook.
							Element:li
							Element:code
								pre_unsubscribe
								- ensure Zapier can unsubscribe from the identified webhook.
						Node:
						(type) c
						(layer)2
							Element:p
								Again, we are going to reference
							Element:a
								Formstack documentation for subscription webhooks
								to understand the format needed for both
							Element:code
								pre_
								calls. Check out the code snippet below for a better understanding:
						Node:
						(type) c
						(layer)2
							Element:pre
							Element:span
								var
							Element:span
								Zap
							Element:span
								=
							Element:span
								{
							Element:span
								pre_subscribe
							Element:span
								:
							Element:span
								function
							Element:span
								(
							Element:span
								bundle
							Element:span
								)
							Element:span
								{
							Element:span
								bundle
							Element:span
								.
							Element:span
								request
							Element:span
								.
							Element:span
								method
							Element:span
								=
							Element:span
								'POST'
							Element:span
								;
							Element:span
								bundle
							Element:span
								.
							Element:span
								request
							Element:span
								.
							Element:span
								headers
							Element:span
								[
							Element:span
								'Content-Type'
							Element:span
								]
							Element:span
								=
							Element:span
								'application/x-www-form-urlencoded'
							Element:span
								;
							Element:span
								bundle
							Element:span
								.
							Element:span
								request
							Element:span
								.
							Element:span
								data
							Element:span
								=
							Element:span
								$
							Element:span
								.
							Element:span
								param
							Element:span
								({
							Element:span
								url
							Element:span
								:
							Element:span
								bundle
							Element:span
								.
							Element:span
								subscription_url
							Element:span
								,
							Element:span
								append_data
							Element:span
								:
							Element:span
								1
							Element:span
								});
							Element:span
								return
							Element:span
								bundle
							Element:span
								.
							Element:span
								request
							Element:span
								;
							Element:span
								},
							Element:span
								post_subscribe
							Element:span
								:
							Element:span
								function
							Element:span
								(
							Element:span
								bundle
							Element:span
								)
							Element:span
								{
							Element:span
								// must return a json serializable object for use in pre_unsubscribe
							Element:span
								data
							Element:span
								=
							Element:span
								JSON
							Element:span
								.
							Element:span
								parse
							Element:span
								(
							Element:span
								bundle
							Element:span
								.
							Element:span
								response
							Element:span
								.
							Element:span
								content
							Element:span
								);
							Element:span
								// we need this in order to build the {{webhook_id}}
							Element:span
								// in the rest hook unsubscribe url
							Element:span
								return
							Element:span
								{
							Element:span
								webhook_id
							Element:span
								:
							Element:span
								data
							Element:span
								.
							Element:span
								id
							Element:span
								};
							Element:span
								},
							Element:span
								pre_unsubscribe
							Element:span
								:
							Element:span
								function
							Element:span
								(
							Element:span
								bundle
							Element:span
								)
							Element:span
								{
							Element:span
								bundle
							Element:span
								.
							Element:span
								request
							Element:span
								.
							Element:span
								method
							Element:span
								=
							Element:span
								'DELETE'
							Element:span
								;
							Element:span
								bundle
							Element:span
								.
							Element:span
								request
							Element:span
								.
							Element:span
								data
							Element:span
								=
							Element:span
								null
							Element:span
								;
							Element:span
								return
							Element:span
								bundle
							Element:span
								.
							Element:span
								request
							Element:span
								;
							Element:span
								},
							Element:span
								};
						Node:
						(type) c
						(layer)2
							Element:p
								Now, you are ready to hop back to the
							Element:a
								editor
								and test the trigger properly! If you check out step 6 and click the You should see a popup that takes a second to complete as it performs the
							Element:strong
								subscribe
								step:
						Node:
						(type) c
						(layer)2
							Element:p
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
								Just close that popup and we'll perform the
							Element:strong
								unsubscribe
								step for you. Now you can go back to your developer app, check out the request logs and see the
							Element:code
								POST
								and
							Element:code
								DELETE
								requests corresponding to the popup.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
							Element:em
								Note! This is the exact same process that will happen when a zap is turned on or off!
						Node:
						(type) c
						(layer)2
							Element:p
								Now that you've gotten the subscription process down, we need to actually
							Element:strong
								catch some data from the webhook
								! The process is very simple:
						Node:
						(type) c
						(layer)2
							Element:ol
							Element:li
								Go back to the editor.
							Element:li
								Get the popup again in step 6.
							Element:li
								Submit the chosen form in Formstack.
							Element:li
								Wait. Don't close the popup!
						Node:
						(type) c
						(layer)2
							Element:p
								You should see something like this once we catch the data:
						Node:
						(type) c
						(layer)2
							Element:p
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
								And if you click the resulting example you should see the data that we caught!
						Node:
						(type) c
						(layer)2
							Element:p
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
								You can use the
							Element:code
								catch_hook
								scripting method to further cleanup data (like the name and address fields that are lumped together), but that is outside the scope of this tutorial. Also, you can view your HTTP logs in your developer app for more logs on hooks in addition to normal HTTP.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:strong
								Congratulations!
								You have a working Formstack application that:
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
								Uses OAuth V2.
							Element:li
								One polling trigger (reused for testing).
							Element:li
								One REST Hooks trigger.
							Element:li
								Scripting or custom code around subscribe/unsubscribe calls.
						Node:
						(type) c
						(layer)2
							Element:p
								Be sure to check out our other examples for more details on doing other interesting things with Zapier's developer platform!
								↑ Was this documentation useful?
						Node:
						(type) c
						(layer)2
							Element:span
								Can't find what you're looking for? We'd love to help.
							Element:a
								Yes
							Element:a
								No
						Node:
						(type) c
						(layer)2
							Element:a
								Send us a message
								. Get Help
						Node:
						(type) c
						(layer)2
							Element:noscript
							Element:img
