Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					SimplyBook (Search or Create)
				Element:a
					#
			Node:
			(type) c
			(layer)1
				Element:p
					This example will walk you through creating a write action and a search action, which will then be “upgraded” to create a “Search or Create” action. To make the example real, we'll be implementing the SimplyBook API.
			Node:
			(type) c
			(layer)1
				Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Quick Preparation Checklist
							Element:a
								#
						Node:
						(type) c
						(layer)2
							Element:p
								We’ll assume having started with the
							Element:a
								SimplyBook app from the Session Auth example
								. Make sure you get all the links and code from there (or understand it to grasp how we’re extending it).
						Node:
						(type) c
						(layer)2
							Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Add Create Client Action
							Element:a
								#
						Node:
						(type) c
						(layer)2
							Element:p
								First, we need to create an action to Create a Client.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:img
						Node:
						(type) c
						(layer)2
							Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Step 1
										Element:a
											#
									Node:
									(type) c
									(layer)3
										Element:p
											We fill the first step like this:
									Node:
									(type) c
									(layer)3
										Element:p
										Element:img
									Node:
									(type) c
									(layer)3
										Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Step 2
										Element:a
											#
									Node:
									(type) c
									(layer)3
										Element:p
											To not overcomplicate this example, we’ll only add 3 fields: - Name (required) - Email - Phone
									Node:
									(type) c
									(layer)3
										Element:p
											For that we’ll need to use the “Add New Action Field” button.
									Node:
									(type) c
									(layer)3
										Element:p
										Element:img
									Node:
									(type) c
									(layer)3
										Element:p
											And here’s how each field would look:
									Node:
									(type) c
									(layer)3
										Element:p
										Element:img
									Node:
									(type) c
									(layer)3
										Element:p
										Element:img
									Node:
									(type) c
									(layer)3
										Element:p
										Element:img
									Node:
									(type) c
									(layer)3
										Element:p
											All of them should have checked the “Send in POST by default” checkbox
									Node:
									(type) c
									(layer)3
										Element:p
										Element:img
									Node:
									(type) c
									(layer)3
										Element:p
											This is how they look in the end for the action’s step 2:
									Node:
									(type) c
									(layer)3
										Element:p
										Element:img
									Node:
									(type) c
									(layer)3
										Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Step 3
										Element:a
											#
									Node:
									(type) c
									(layer)3
										Element:p
											For Step 3 we only need to set the
										Element:code
											https://user-api.simplybook.me/admin
											as the Action Endpoint URL
									Node:
									(type) c
									(layer)3
										Element:p
										Element:img
									Node:
									(type) c
									(layer)3
										Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Step 4
										Element:a
											#
									Node:
									(type) c
									(layer)3
										Element:p
											In the last step, the API only returns the client ID, so that’s what we’ll add:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											{
										Element:span
											"id"
										Element:span
											:
										Element:span
											1
										Element:span
											}
									Node:
									(type) c
									(layer)3
										Element:p
										Element:img
									Node:
									(type) c
									(layer)3
										Element:p
											This API requires us to do some changes in the Scripting (your API might not), so we’ll add the following methods:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											var
										Element:span
											Zap
										Element:span
											=
										Element:span
											{
										Element:span
											// other methods...
										Element:span
											// Modify the request details before creating a client
										Element:span
											create_client_pre_write
										Element:span
											:
										Element:span
											function
										Element:span
											(
										Element:span
											bundle
										Element:span
											)
										Element:span
											{
										Element:span
											bundle
										Element:span
											=
										Element:span
											this
										Element:span
											.
										Element:span
											add_custom_headers
										Element:span
											(
										Element:span
											bundle
										Element:span
											);
										Element:span
											// Build Request Body
										Element:span
											var
										Element:span
											request_data
										Element:span
											=
										Element:span
											{
										Element:span
											jsonrpc
										Element:span
											:
										Element:span
											'2.0'
										Element:span
											,
										Element:span
											method
										Element:span
											:
										Element:span
											'addClient'
										Element:span
											,
										Element:span
											params
										Element:span
											:
										Element:span
											[
										Element:span
											bundle
										Element:span
											.
										Element:span
											action_fields
										Element:span
											],
										Element:span
											id
										Element:span
											:
										Element:span
											1
										Element:span
											};
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											.
										Element:span
											data
										Element:span
											=
										Element:span
											z
										Element:span
											.
										Element:span
											JSON
										Element:span
											.
										Element:span
											stringify
										Element:span
											(
										Element:span
											request_data
										Element:span
											);
										Element:span
											return
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											;
										Element:span
											},
										Element:span
											// Check if there's an invalid session
										Element:span
											create_client_post_write
										Element:span
											:
										Element:span
											function
										Element:span
											(
										Element:span
											bundle
										Element:span
											)
										Element:span
											{
										Element:span
											var
										Element:span
											parsed_response
										Element:span
											=
										Element:span
											z
										Element:span
											.
										Element:span
											JSON
										Element:span
											.
										Element:span
											parse
										Element:span
											(
										Element:span
											bundle
										Element:span
											.
										Element:span
											response
										Element:span
											.
										Element:span
											content
										Element:span
											);
										Element:span
											// Handle errors (ideally we'd look in the response status_code)
										Element:span
											if
										Element:span
											(
										Element:span
											parsed_response
										Element:span
											&&
										Element:span
											parsed_response
										Element:span
											.
										Element:span
											error
										Element:span
											)
										Element:span
											{
										Element:span
											throw
										Element:span
											new
										Element:span
											InvalidSessionException
										Element:span
											();
										Element:span
											}
										Element:span
											var
										Element:span
											result
										Element:span
											=
										Element:span
											{
										Element:span
											id
										Element:span
											:
										Element:span
											parsed_response
										Element:span
											.
										Element:span
											result
										Element:span
											.
										Element:span
											message
										Element:span
											};
										Element:span
											return
										Element:span
											result
										Element:span
											;
										Element:span
											}
										Element:span
											};
									Node:
									(type) c
									(layer)3
										Element:p
											We’re now ready to test the action! Zap away!
									Node:
									(type) c
									(layer)3
										Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Add Search Client Action
							Element:a
								#
						Node:
						(type) c
						(layer)2
							Element:p
								Now, we need to create a Search for Clients.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:img
						Node:
						(type) c
						(layer)2
							Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Step 1
										Element:a
											#
									Node:
									(type) c
									(layer)3
										Element:p
											We fill the first step like this:
									Node:
									(type) c
									(layer)3
										Element:p
										Element:img
									Node:
									(type) c
									(layer)3
										Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Step 2
										Element:a
											#
									Node:
									(type) c
									(layer)3
										Element:p
											The API allows us to send a
										Element:code
											string
											which searches in
										Element:code
											name
											,
										Element:code
											email
											, and
										Element:code
											phone
											, so we only need 1 field:
									Node:
									(type) c
									(layer)3
										Element:p
										Element:img
									Node:
									(type) c
									(layer)3
										Element:p
											It should look like this:
									Node:
									(type) c
									(layer)3
										Element:p
										Element:img
									Node:
									(type) c
									(layer)3
										Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Step 3
										Element:a
											#
									Node:
									(type) c
									(layer)3
										Element:p
											We’ll leave this step empty for now, and will come back to it later. Just click “Save & Next”.
									Node:
									(type) c
									(layer)3
										Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Step 4
										Element:a
											#
									Node:
									(type) c
									(layer)3
										Element:p
											Here’s how Step 4 should look. We’re using the same
										Element:code
											https://user-api.simplybook.me/admin
											URL because this API changes “what’s called” in the request body.
									Node:
									(type) c
									(layer)3
										Element:p
										Element:img
									Node:
									(type) c
									(layer)3
										Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Step 5
										Element:a
											#
									Node:
									(type) c
									(layer)3
										Element:p
											For the final step, we add the sample JSON for a single object:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											{
										Element:span
											"name"
										Element:span
											:
										Element:span
											"Test Client"
										Element:span
											,
										Element:span
											"phone"
										Element:span
											:
										Element:span
											"+1111-111-1111"
										Element:span
											,
										Element:span
											"email"
										Element:span
											:
										Element:span
											"test@example.com"
										Element:span
											}
									Node:
									(type) c
									(layer)3
										Element:p
										Element:img
									Node:
									(type) c
									(layer)3
										Element:p
											This API requires us to do some changes in the Scripting (your API might not), so we’ll add the following methods:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											var
										Element:span
											Zap
										Element:span
											=
										Element:span
											{
										Element:span
											// other methods...
										Element:span
											// Modify the request details before finding a client
										Element:span
											find_client_pre_search
										Element:span
											:
										Element:span
											function
										Element:span
											(
										Element:span
											bundle
										Element:span
											)
										Element:span
											{
										Element:span
											bundle
										Element:span
											=
										Element:span
											this
										Element:span
											.
										Element:span
											add_custom_headers
										Element:span
											(
										Element:span
											bundle
										Element:span
											);
										Element:span
											// Build Request Body
										Element:span
											var
										Element:span
											request_data
										Element:span
											=
										Element:span
											{
										Element:span
											jsonrpc
										Element:span
											:
										Element:span
											'2.0'
										Element:span
											,
										Element:span
											method
										Element:span
											:
										Element:span
											'getClientList'
										Element:span
											,
										Element:span
											params
										Element:span
											:
										Element:span
											[
										Element:span
											bundle
										Element:span
											.
										Element:span
											search_fields
										Element:span
											.
										Element:span
											query
										Element:span
											],
										Element:span
											id
										Element:span
											:
										Element:span
											1
										Element:span
											};
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											.
										Element:span
											data
										Element:span
											=
										Element:span
											z
										Element:span
											.
										Element:span
											JSON
										Element:span
											.
										Element:span
											stringify
										Element:span
											(
										Element:span
											request_data
										Element:span
											);
										Element:span
											return
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											;
										Element:span
											},
										Element:span
											// Check if there's an invalid session
										Element:span
											find_client_post_search
										Element:span
											:
										Element:span
											function
										Element:span
											(
										Element:span
											bundle
										Element:span
											)
										Element:span
											{
										Element:span
											var
										Element:span
											parsed_response
										Element:span
											=
										Element:span
											z
										Element:span
											.
										Element:span
											JSON
										Element:span
											.
										Element:span
											parse
										Element:span
											(
										Element:span
											bundle
										Element:span
											.
										Element:span
											response
										Element:span
											.
										Element:span
											content
										Element:span
											);
										Element:span
											// Handle errors (ideally we'd look in the response status_code)
										Element:span
											if
										Element:span
											(
										Element:span
											parsed_response
										Element:span
											&&
										Element:span
											parsed_response
										Element:span
											.
										Element:span
											error
										Element:span
											)
										Element:span
											{
										Element:span
											throw
										Element:span
											new
										Element:span
											InvalidSessionException
										Element:span
											();
										Element:span
											}
										Element:span
											return
										Element:span
											parsed_response
										Element:span
											.
										Element:span
											result
										Element:span
											;
										Element:span
											},
										Element:span
											// Modify the request details before fetching a client
										Element:span
											find_client_pre_read_resource
										Element:span
											:
										Element:span
											function
										Element:span
											(
										Element:span
											bundle
										Element:span
											)
										Element:span
											{
										Element:span
											bundle
										Element:span
											=
										Element:span
											this
										Element:span
											.
										Element:span
											add_custom_headers
										Element:span
											(
										Element:span
											bundle
										Element:span
											);
										Element:span
											// NOTE: This API doesn't really have a "GET" endpoint,
										Element:span
											// so we search for email and hope for the best.
										Element:span
											// Build Request Body
										Element:span
											var
										Element:span
											request_data
										Element:span
											=
										Element:span
											{
										Element:span
											jsonrpc
										Element:span
											:
										Element:span
											'2.0'
										Element:span
											,
										Element:span
											method
										Element:span
											:
										Element:span
											'getClientList'
										Element:span
											,
										Element:span
											params
										Element:span
											:
										Element:span
											[
										Element:span
											bundle
										Element:span
											.
										Element:span
											read_fields
										Element:span
											.
										Element:span
											email
										Element:span
											],
										Element:span
											id
										Element:span
											:
										Element:span
											1
										Element:span
											};
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											.
										Element:span
											data
										Element:span
											=
										Element:span
											z
										Element:span
											.
										Element:span
											JSON
										Element:span
											.
										Element:span
											stringify
										Element:span
											(
										Element:span
											request_data
										Element:span
											);
										Element:span
											return
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											;
										Element:span
											},
										Element:span
											// Check if there's an invalid session
										Element:span
											find_client_post_read_resource
										Element:span
											:
										Element:span
											function
										Element:span
											(
										Element:span
											bundle
										Element:span
											)
										Element:span
											{
										Element:span
											var
										Element:span
											parsed_response
										Element:span
											=
										Element:span
											z
										Element:span
											.
										Element:span
											JSON
										Element:span
											.
										Element:span
											parse
										Element:span
											(
										Element:span
											bundle
										Element:span
											.
										Element:span
											response
										Element:span
											.
										Element:span
											content
										Element:span
											);
										Element:span
											// Handle errors (ideally we'd look in the response status_code)
										Element:span
											if
										Element:span
											(
										Element:span
											parsed_response
										Element:span
											&&
										Element:span
											parsed_response
										Element:span
											.
										Element:span
											error
										Element:span
											)
										Element:span
											{
										Element:span
											throw
										Element:span
											new
										Element:span
											InvalidSessionException
										Element:span
											();
										Element:span
											}
										Element:span
											var
										Element:span
											result
										Element:span
											=
										Element:span
											[];
										Element:span
											// Only return the object
										Element:span
											if
										Element:span
											(
										Element:span
											parsed_response
										Element:span
											.
										Element:span
											result
										Element:span
											&&
										Element:span
											parsed_response
										Element:span
											.
										Element:span
											result
										Element:span
											.
										Element:span
											length
										Element:span
											>
										Element:span
											0
										Element:span
											)
										Element:span
											{
										Element:span
											result
										Element:span
											=
										Element:span
											parsed_response
										Element:span
											.
										Element:span
											result
										Element:span
											[
										Element:span
											0
										Element:span
											];
										Element:span
											}
										Element:span
											return
										Element:span
											result
										Element:span
											;
										Element:span
											}
										Element:span
											};
									Node:
									(type) c
									(layer)3
										Element:p
											Now we have a working Create Client action and Find Client search!
									Node:
									(type) c
									(layer)3
										Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Upgrading to Search or Create
							Element:a
								#
						Node:
						(type) c
						(layer)2
							Element:p
								Our app allows us to create clients and search for them, but you can upgrade the search to automatically create a client if it’s not found. This is incredibly powerful, and easy to implement.
						Node:
						(type) c
						(layer)2
							Element:p
								We just need to edit our search and go to step “3. Search or Action”.
						Node:
						(type) c
						(layer)2
							Element:p
								In our case, we just need to link these to the create action we already have:
						Node:
						(type) c
						(layer)2
							Element:p
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
								Now we can see it in action!
						Node:
						(type) c
						(layer)2
							Element:p
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
							Element:strong
								Congratulations!
								You have a working SimplyBook application that:
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
								Has a visible write action.
							Element:li
								Has a visible search or create action.
						Node:
						(type) c
						(layer)2
							Element:p
								Be sure to check out our other examples for more details on doing other interesting things with Zapier's developer platform!
								↑ Was this documentation useful?
						Node:
						(type) c
						(layer)2
							Element:span
								Can't find what you're looking for? We'd love to help.
							Element:a
								Yes
							Element:a
								No
						Node:
						(type) c
						(layer)2
							Element:a
								Send us a message
								. Get Help
						Node:
						(type) c
						(layer)2
							Element:noscript
							Element:img
