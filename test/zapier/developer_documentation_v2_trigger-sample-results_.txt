Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					Trigger Sample Results
				Element:a
					#
			Node:
			(type) c
			(layer)1
				Element:p
					To help give users a clean experience when creating Zaps, we ask that you paste a sample JSON dictionary of a single item from your API into Zapier.
			Node:
			(type) c
			(layer)1
				Element:p
					We will use this sample JSON for two things:
			Node:
			(type) c
			(layer)1
				Element:ol
				Element:li
					To detect a list of hard-coded key names which the user can pick from during Zap setup
				Element:li
					To use as a hard-coded fallback for sample data so that we can provide fields to insert during Zap setup (if your API returns 0 results)
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					These results will NOT be used for a user's Zap testing step. That step requires data to be received by an event or returned from a polling URL.
			Node:
			(type) c
			(layer)1
				Element:p
					Here is the sample JSON for something like a new email message, and how it shows up in our user-facing Editor:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
					{
				Element:span
					"to_name"
				Element:span
					:
				Element:span
					"Mike Knoop"
				Element:span
					,
				Element:span
					"to_address"
				Element:span
					:
				Element:span
					"mike@zapier.com"
				Element:span
					,
				Element:span
					"from_name"
				Element:span
					:
				Element:span
					"Bryan Helmig"
				Element:span
					,
				Element:span
					"from_address"
				Element:span
					:
				Element:span
					"bryan@zapier.com"
				Element:span
					,
				Element:span
					"subject"
				Element:span
					:
				Element:span
					"Testing out this new Zap!"
				Element:span
					,
				Element:span
					"message"
				Element:span
					:
				Element:span
					{
				Element:span
					"no_html"
				Element:span
					:
				Element:span
					"Let me know it it works."
				Element:span
					,
				Element:span
					"html"
				Element:span
					:
				Element:span
					"<div>Let me know if it works.</div>"
				Element:span
					}
				Element:span
					}
			Node:
			(type) c
			(layer)1
				Element:p
				Element:em
					Note: Even though your API endpoint has to return an array, the sample JSON here must be of a single object.
			Node:
			(type) c
			(layer)1
				Element:p
					We will parse this sample and provide dropdowns like this to the user:
			Node:
			(type) c
			(layer)1
				Element:p
				Element:img
			Node:
			(type) c
			(layer)1
				Element:p
					By default, we can handle flat dictionaries and dictionaries within dictionaries (via our
				Element:code
					__
					delimiter in keys).
			Node:
			(type) c
			(layer)1
				Element:p
					When the user is inserting fields in the Zap editor, and your API returns no results (
				Element:code
					[]
					) then we will use your hard-coded fallback JSON if it exists.
			Node:
			(type) c
			(layer)1
				Element:blockquote
					â†‘ Was this documentation useful?
				Element:p
					Your hard-coded JSON provided above will
				Element:em
					not
					be run through the Scripting API (either for key enumeration or sample data fallback) so if you use the Scripting API to add or modify fields on top of your normal API response, you'll want to make sure you perform the same manipulations manually before pasting in the JSON above.
				Element:p
					Note - our system often does a sample "poll" or pulls cached values for a live example - samples are just a part of that system. If you need to omit bad fields from usage - you'll need to ensure the poll or webhook or whatever does not included the bad fields either!
			Node:
			(type) c
			(layer)1
				Element:span
					Can't find what you're looking for? We'd love to help.
				Element:a
					Yes
				Element:a
					No
			Node:
			(type) c
			(layer)1
				Element:a
					Send us a message
					. Get Help
			Node:
			(type) c
			(layer)1
				Element:noscript
				Element:img
