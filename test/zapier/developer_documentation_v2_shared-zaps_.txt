Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					1. Introduction
				Element:a
					#
			Node:
			(type) c
			(layer)1
				Element:p
					Welcome, friend! This reference tells you all you need to know about building Zap templates. Please
				Element:a
					reach out
					if you have questions.
			Node:
			(type) c
			(layer)1
				Element:p
				Element:em
					Note: Zap templates used to be called Shared Zaps, in case you're confused.
			Node:
			(type) c
			(layer)1
				Element:p
					A Zap template is a pre-defined and curated example of an automated workflow. It allows you to propose recommended use-cases, and provides users with a guided setup experience including pre-filled options and fields so they don't have to create them from scratch in the
				Element:a
					Zap Editor
					.
			Node:
			(type) c
			(layer)1
				Element:p
					One of the best parts about Zap templates is that they can be
				Element:a
					embedded in your app
					, keeping users on your site as the sign-up and setup experience happens in a pop-up.
			Node:
			(type) c
			(layer)1
				Element:p
					The 3 goals of Zap templates are:
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					Provide a compelling use-case with a helpful description
				Element:li
					Save users time by pre-mapping fields
				Element:li
					Ensure that users don't run into errors by hiding unnecessary fields and required field mappings.
			Node:
			(type) c
			(layer)1
				Element:p
					There are two main parts to a Zap Template:
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					The written
				Element:em
					title and description
					, where the use-case is explained, describing how it solves a particular problem, the way it works, and the change it produces in your workflow.
				Element:li
					The configured
				Element:em
					Trigger and Action steps
					, where you'll pre-select specific options, map the appropriate fields, and offer specific help text if needed. Like user-created Zaps, the most basic Zap templates have only a Trigger and Action step, but they can have
				Element:a
					as many steps as you like
					.
			Node:
			(type) c
			(layer)1
				Element:p
					These are some examples of popular Zap templates:
			Node:
			(type) c
			(layer)1
				Element:p
					↑ Was this documentation useful?
				Element:em
				Element:a
					Know how this works? Open the Zap template creator.
				Element:i
			Node:
			(type) c
			(layer)1
				Element:span
				Element:a
					Yes
				Element:a
					No
			Node:
			(type) c
			(layer)1
				Element:a
			Node:
			(type) h1
			(layer)1
				Element:h1
					2. How To Create Zap Templates - Description
				Element:a
					#
			Node:
			(type) c
			(layer)1
				Element:p
					A Zap template's description is the free-form text you can write for its title, value statement, and functionality details.
			Node:
			(type) c
			(layer)1
				Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
							Element:strong
								Title
							Element:a
								#
						Node:
						(type) c
						(layer)2
							Element:p
								The
							Element:strong
								title
								is extremely important because it's one of only two elements shown (the two app logos are also shown) when a Zap template is embedded in an app (such as
							Element:a
								Eventbrite.com
								), on a
							Element:a
								site
								, or on
							Element:a
								a Zapier Zapbook landing page
								.
						Node:
						(type) c
						(layer)2
							Element:p
								A title states the utility of the Zap in as few words as possible. It's clear and concise, names the two apps involved, the functions of the Trigger and Action, conditionals applied and nothing more.
						Node:
						(type) c
						(layer)2
							Element:p
								Follow these guidelines when writing Zap template titles:
						Node:
						(type) c
						(layer)2
							Element:p
								Use
							Element:strong
								sentence case
								:
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
								Right:
							Element:code
								Create Trello cards for new Wufoo form entries
							Element:li
								Wrong:
							Element:code
								Create Trello Cards For New Wufoo Form Entry
						Node:
						(type) c
						(layer)2
							Element:p
								Use
							Element:strong
								present tense
								:
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
								Right:
							Element:code
								Get Slack notifications for new Google Drive files in a folder
							Element:li
								Wrong:
							Element:code
								Slack will notify you when a new Google Drive file is added to your folder
						Node:
						(type) c
						(layer)2
							Element:p
								Use
							Element:strong
								the word "new" for Trigger items
								: We want to make it clear that Zapier only catches new items that Trigger after the Zap is set up, like this:
							Element:code
								Add new Unbounce leads to a GetResponse list
						Node:
						(type) c
						(layer)2
							Element:p
								Make
							Element:strong
								titles plural
								: Zaps trigger on all future events, so be sure to pluralize the title, i.e.
							Element:code
								Add Google Sheets spreadsheet rows for new or updated Spotio pins
						Node:
						(type) c
						(layer)2
							Element:p
								Respect
							Element:strong
								app name styles
								: We all know SaaS apps can have a variety of spelling/styles. Make sure you check how to spell an app's name by referring to this
							Element:a
								handy list
						Node:
						(type) c
						(layer)2
							Element:p
								Use
							Element:strong
								interesting/appropriate verbs
								: Avoid the temptation to always say "Add" or "Create". If you're adding contacts to a mailing list, try "Subscribe new X contacts to a list on Y", or use something like "Log new completed X tasks on Y" when you're capturing items for a spreadsheet or database
						Node:
						(type) c
						(layer)2
							Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:strong
											Be Careful Using These Words in Titles
										Element:a
											#
									Node:
									(type) c
									(layer)3
										Element:p
										Element:strong
											Send
											- Use for emails and text messages but not data
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
											Right:
										Element:code
											Subscribe new Gumroad customers to a MailChimp list
										Element:li
											Wrong:
										Element:code
											Send new Gumroad customers to MailChimp
									Node:
									(type) c
									(layer)3
										Element:p
										Element:strong
											Get
											- Use when the creator of the Zap will be involved in the outcome, such as receiving an email or message
									Node:
									(type) c
									(layer)3
										Element:p
										Element:strong
											Save
											,
										Element:strong
											Log
											or
										Element:strong
											Archive
											- Use in conjunction with sheets or databases, or note-taking apps
									Node:
									(type) c
									(layer)3
										Element:p
										Element:strong
											Post
											or
										Element:strong
											Share
											- Use when text or image is posted somewhere, such as a team chat app or social network
									Node:
									(type) c
									(layer)3
										Element:p
										Element:strong
											You
											- Use when a Trigger or Action is dependent or exclusively involves the creator of the Zap (e.g. Post your Tweets to LinkedIn as updates). If other people can trigger the Zap, don't use this.
									Node:
									(type) c
									(layer)3
										Element:p
										Element:strong
											I
											- Use when a Trigger contains "I" (e.g. Save new SoundCloud tracks I like to Google Drive)
									Node:
									(type) c
									(layer)3
										Element:p
										Element:strong
											Automatically
											- Since Zapier is an automation tool, avoid re-stating that fact in the title as it should be understood (or else every title could have it). OK to use "automatically" in the description though.
									Node:
									(type) c
									(layer)3
										Element:p
										Element:strong
											Sync
											- Zapier only works with new data and each Zap sends data one way, so "sync" isn't accurate—please don't use this, ever.
									Node:
									(type) c
									(layer)3
										Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
							Element:strong
								Value Statement
							Element:a
								#
						Node:
						(type) c
						(layer)2
							Element:p
								You've set the user's expectations with the title of the Zap template, now it's time to spell out the problems it solves, how they should expect it to work after it's enabled, and how this automation ends up improving their workflow.
						Node:
						(type) c
						(layer)2
							Element:p
								Don't just ask users if they want to accomplish what the Zap does, i.e. "Want to copy contacts from X to Y? Now you can." Instead, focus on the problem that led them to consider automation. Was it too much manual effort to perform by hand? Did it take too much time? Do they have to jump between multiple apps to find information?
						Node:
						(type) c
						(layer)2
							Element:p
								Following this format makes it easier to write value statements:
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
								Start by describing a problem, or empathizing with a need the user has.
							Element:li
								Explain what happens when this integration runs.
							Element:li
								Wrap up by concluding with how the user's new process will be improved.
						Node:
						(type) c
						(layer)2
							Element:blockquote
							Element:p
								Every single value statement for each Zap must be unique—it's not enough to replace app names and keep the same copy. We'll ask you for a revision with unique descriptions if so.
						Node:
						(type) c
						(layer)2
							Element:p
								Some tips to help you:
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
								2-4 sentences
							Element:li
								1 paragraph
							Element:li
								Present tense
							Element:li
								Don't use the terms "Zap" or "Shared Zap" since they'll likely be unfamiliar to users, instead use "Zapier integration" or "Zapier automation"
							Element:li
								Use the same app terms a user will encounter when setting up the Shared Zap (e.g. Don't interchange form "entry" with form "submission"—use the same term as used by the app)
							Element:li
								OK to use "automatically" here, but don't use "sync"
						Node:
						(type) c
						(layer)2
							Element:p
								Examples of good value statements:
						Node:
						(type) c
						(layer)2
							Element:blockquote
							Element:p
							Element:strong
								Workflow:
								Trigger: Eventbrite "New Attendee" | Action: Zoho CRM "Create Contact"
							Element:ul
							Element:li
							Element:strong
								Value Statement:
								Find yourself spending too much time adding event attendees to your CRM by hand? Now with the help of Zapier, the tedious work is done for you. This integration will add every new Eventbrite attendee to Zoho CRM as a new contact, saving you time for more important work.
						Node:
						(type) c
						(layer)2
							Element:blockquote
							Element:p
							Element:strong
								Workflow:
								Trigger: Typeform "New Entry" | Action: Gmail "Send Email"
							Element:ul
							Element:li
							Element:strong
								Value Statement:
								After someone fills out a form on your site, you'll want to hear about it or send them a follow-up email. This Zapier automation handles both gracefully, sending an email via Gmail to you or the form respondent whenever you get a new Typeform entry. You'll never have to send the same message over and over again.
						Node:
						(type) c
						(layer)2
							Element:blockquote
							Element:p
							Element:strong
								Workflow:
								Trigger: Shopify "New Paid Order" | Action: Onfleet "Create Task"
							Element:ul
							Element:li
							Element:strong
								Value Statement:
								Expedient order processing makes for happy customers. Make sure you act on every new delivery with this Zapier automation. It will capture every new order placed on your Shopify store after being set up, creating a delivery task for it on Onfleet so your team can fulfill it without delay.
						Node:
						(type) c
						(layer)2
							Element:p
								If there's a potentially confusing characteristic about this Shared Zap, this is your chance to provide notice to the user with a one-line italicized "Note" (which can include markdown links), like this:
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								*Note: This automation doesn't log all-day Google Calendar events*
						Node:
						(type) c
						(layer)2
							Element:p
							Element:code
								*Note: If you'd like to only capture contacts with a specific tag, try adding a [Filter step](https://zapier.com/learn/getting-started-guide/filters/) to this integration.*
						Node:
						(type) c
						(layer)2
							Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
							Element:strong
								Functionality details
							Element:a
								#
						Node:
						(type) c
						(layer)2
							Element:p
							Element:em
								Note: Zap templates use markdown for title, link, and special note formatting. Refer to
							Element:a
								this guide
								if you're not familiar with markdown syntax.
						Node:
						(type) c
						(layer)2
							Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											How This App-App Integration Works
										Element:a
											#
									Node:
									(type) c
									(layer)3
										Element:p
											This section spells out the future sequence of events involved in this Shared Zap, replacing the instances of "App" with the apps in question. Laid out as an ordered list of often 2 steps, "How this App-App integration works" is written in the present tense.
									Node:
									(type) c
									(layer)3
										Element:p
											An easy pattern to follow is:
									Node:
									(type) c
									(layer)3
										Element:ol
										Element:li
											This event happens in one app
										Element:li
											Zapier does this event in another app
									Node:
									(type) c
									(layer)3
										Element:blockquote
										Element:p
										Element:strong
											Example:
											Trigger: Typeform "New Entry" | Action: Gmail "Send Email"
										Element:p
											How this Typeform-Gmail integration works:
										Element:ol
										Element:li
											A new entry is submitted to Typeform
										Element:li
											Zapier sends an email via Gmail
									Node:
									(type) c
									(layer)3
										Element:blockquote
										Element:p
										Element:strong
											Example:
											Trigger: Trello "New Card" | Action: Slack "Channel Message"
										Element:p
											How this Trello-Slack integration works:
										Element:ol
										Element:li
											A new card is created on Trello
										Element:li
											Zapier posts the details to one of your Slack channels
									Node:
									(type) c
									(layer)3
										Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
										Element:strong
											Apps involved
										Element:a
											#
									Node:
									(type) c
									(layer)3
										Element:p
											Titled "Apps involved," this section lists the apps (often two) that will need to be authenticated when setting up this Shared Zap. If it involves one of Zapier's native apps, such as
										Element:a
											email
											or
										Element:a
											RSS
											, you won't need to list it.
									Node:
									(type) c
									(layer)3
										Element:blockquote
											↑ Was this documentation useful?
										Element:p
										Element:strong
											Example:
											Trigger: Trello "New Card" | Action: Slack "Channel Message"
										Element:p
											Apps involved:
										Element:ul
										Element:li
											Trello
										Element:li
											Slack
									Node:
									(type) c
									(layer)3
										Element:span
										Element:a
											Yes
										Element:a
											No
									Node:
									(type) c
									(layer)3
										Element:a
			Node:
			(type) h1
			(layer)1
				Element:h1
					3. How To Create Zap Templates - Trigger and Action Steps
				Element:a
					#
			Node:
			(type) c
			(layer)1
				Element:p
					The most basic Zaps of all have a single Trigger followed by an Action. It is essential that you set these up correctly, and pre-fill all the choices you can so your users have a streamlined experience.
			Node:
			(type) c
			(layer)1
				Element:p
					For any step, you'll want to select your chosen app from the "Selected API" list, and the Trigger/Action event. Doing so opens up the parameters you can configure for your users.
			Node:
			(type) c
			(layer)1
				Element:p
					Example of a Trigger step with selected event:
				Element:img
			Node:
			(type) c
			(layer)1
				Element:p
					Example of an Action step with selected event:
				Element:img
			Node:
			(type) c
			(layer)1
				Element:p
					These options are available for most steps:
			Node:
			(type) c
			(layer)1
				Element:a
			Node:
			(type) c
			(layer)1
				Element:h2
				Element:strong
					Pre-mapping Default Values
				Element:a
					#
			Node:
			(type) c
			(layer)1
				Element:p
					This and the value statement are the most important parts of your Zap template configuration. Here you'll want to pre-fill the fields for an Action step using any fields you can from previous steps.
			Node:
			(type) c
			(layer)1
				Element:p
				Element:em
					Incomplete descriptions and un-mapped fields are the most common causes for a Zap submission rejection, so please make sure to follow these instructions.
			Node:
			(type) c
			(layer)1
				Element:p
					This is done by clicking the "Insert" link and finding the fields you want to pass in, like this:
			Node:
			(type) c
			(layer)1
				Element:p
				Element:img
			Node:
			(type) c
			(layer)1
				Element:p
					This dropdown offers sample data from a matching Trigger of a live Zap in your account. To see real fields, set up a live Zap with the same Trigger and working account.
			Node:
			(type) c
			(layer)1
				Element:p
					If your output is something more freeform, like a notification or message, you'll want to use a mix of static text and fields from your Trigger, like this:
			Node:
			(type) c
			(layer)1
				Element:p
				Element:img
			Node:
			(type) c
			(layer)1
				Element:p
					You should always pre-map fields if:
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					There is a 1:1 relationship between the fields from a Trigger, and the Action fields, like when you're passing a contact from one CRM to another. You should always try to match up every field, like names and addresses, when possible in cases like that.
				Element:li
					When you're creating a notification, logging a note, or sending a message, and you can predict the information a user would like to receive.
			Node:
			(type) c
			(layer)1
				Element:p
					You should
				Element:em
					not
					pre-map fields if:
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					The fields are on the Trigger step, since you don't know the choices a user will make (like which board they want to check for new cards on in Trello).
				Element:li
					You can't predict what the user needs. Example: A Slack channel message posted daily at the same time using
				Element:a
					Schedule
					. In these instances, you'll want to use the Help text override (read on).
				Element:li
					You don't see any returned fields, because the Trigger app is completely custom, like Google Sheets. In these situations, Zapier can only see the contents of the Trigger step's returns when an account is authed, and so users must map fields themselves.
			Node:
			(type) c
			(layer)1
				Element:a
			Node:
			(type) c
			(layer)1
				Element:h2
				Element:strong
					Labels
				Element:a
					#
			Node:
			(type) c
			(layer)1
				Element:p
					Allows you to override the default value for a field's label. You can leave this blank most of the time, but it's useful to change the label when you're relying a filtered result from the Trigger—see
				Element:a
					Filters
					below.
			Node:
			(type) c
			(layer)1
				Element:a
			Node:
			(type) c
			(layer)1
				Element:h2
				Element:strong
					Help Text
				Element:a
					#
			Node:
			(type) c
			(layer)1
				Element:p
					Allows you to override the default help text. Use this to include instructions or suggestions (including links to other help docs) for the user, especially when you don't see a field to insert from the Trigger, or can't know. Example:
			Node:
			(type) c
			(layer)1
				Element:p
				Element:img
			Node:
			(type) c
			(layer)1
				Element:a
			Node:
			(type) c
			(layer)1
				Element:h2
				Element:strong
					Visibility
				Element:a
					#
			Node:
			(type) c
			(layer)1
				Element:p
					Visibility controls whether the field is visible to the user by default, or hidden under the "Show advanced options" menu shown here, or not visible at all:
			Node:
			(type) c
			(layer)1
				Element:p
				Element:img
			Node:
			(type) c
			(layer)1
				Element:p
					Always
				Element:strong
					Whitelist
					important fields you pre-map so the user can see what you did. You should also consider whitelisting specific fields on the
				Element:strong
					Trigger
					step when your usecase calls for it. Trello, for example, will trigger on every New Card across any board/list by default, so making sure users see the option to select a specific list can make your Zap more helpful.
			Node:
			(type) c
			(layer)1
				Element:p
				Element:strong
					Graylist
					helpful but not very important fields, especially when your Action app has many of them (like extensive Shipping and Billing related sections with multiple fields for addresses). This is the default setting for non-required fields.
			Node:
			(type) c
			(layer)1
				Element:p
				Element:strong
					Blacklist
					fields
				Element:em
					if and only if
					changing anything about the field will break the Zap, cause errors, or there is no possible alternative field. When in doubt, leave this graylisted.
			Node:
			(type) c
			(layer)1
				Element:a
			Node:
			(type) c
			(layer)1
				Element:h3
				Element:strong
					Placeholder
				Element:a
					#
			Node:
			(type) c
			(layer)1
				Element:p
					Leave this blank.
			Node:
			(type) c
			(layer)1
				Element:a
			Node:
			(type) c
			(layer)1
				Element:h2
					Multi-Step Zap templates
				Element:a
					#
			Node:
			(type) c
			(layer)1
				Element:p
					Zap templates can have any number of steps, just like user-created Zaps. Only Zapier staff can add these steps due to their advanced nature, so if want to set up a Multi-Step Zap template, please reach out to
				Element:a
					partners@zapier.com
					with your request, and we'll be happy to set it up for you.
			Node:
			(type) c
			(layer)1
				Element:p
					Here are some examples of Multi-Step Zap templates:
					↑ Was this documentation useful?
			Node:
			(type) c
			(layer)1
				Element:span
				Element:a
					Yes
				Element:a
					No
			Node:
			(type) c
			(layer)1
				Element:a
			Node:
			(type) h1
			(layer)1
				Element:h1
					4. How To Use Zap Templates
				Element:a
					#
			Node:
			(type) c
			(layer)1
				Element:a
			Node:
			(type) c
			(layer)1
				Element:h2
					Zapbook Pages
				Element:a
					#
			Node:
			(type) c
			(layer)1
				Element:p
					The Zapbook is Zapier's directory of apps. Every app has a landing page on it, and users can find all of your published Zaps there, as well as see a list of your available Triggers and Actions. The Zaps shown at the top of the list are a function of popularity and usage, helping people find the most useful examples first.
			Node:
			(type) c
			(layer)1
				Element:p
					Your Zapbook page URL is in this format:
				Element:a
					https://zapier.com/zapbook/todoist/
			Node:
			(type) c
			(layer)1
				Element:p
					Every
				Element:em
					pair
					of apps also has a Zapbook page automatically. Just follow up your Zapbook link with another app's slug, like this:
				Element:a
					https://zapier.com/zapbook/trello/google-sheets/
					. You're guaranteed a landing page no matter what app, with these, and any Zap templates you have will show up appropriately. Another advantage is that if you don't have a Zap template for that specific app pair, we'll try to show the most similar Zaps you do have.
			Node:
			(type) c
			(layer)1
				Element:a
			Node:
			(type) c
			(layer)1
				Element:h2
					Embedding Your Zaps
				Element:a
					#
			Node:
			(type) c
			(layer)1
				Element:p
					There are several advantages to embedding your Zaps on your site/app:
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					Users can see examples of the most popular use-cases, or the ones you want to recommend, easily
				Element:li
					Zap setup happens in a pop-up when people click an embedded Zap
				Element:li
					People are less likely to give up looking for solutions when these are presented as examples
				Element:li
					Dynamic Zap lists will keep updating themselves as new Zaps are introduced or fixed
				Element:li
					You'll start receiving statistics on Zap usage from embedded Zaps
			Node:
			(type) c
			(layer)1
				Element:p
					Learn about how the
				Element:a
					Zapier embedded Zap widget works
					.
			Node:
			(type) c
			(layer)1
				Element:p
					This is what it looks like:
			Node:
			(type) c
			(layer)1
				Element:a
			Node:
			(type) c
			(layer)1
				Element:h3
					Embed Widget Features:
				Element:a
					#
			Node:
			(type) c
			(layer)1
				Element:p
				Element:em
					Generate Dynamic Lists of Zaps:
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					<script src="https://zapier.com/zapbook/embed/widget.js?services=APP&container=true&limit=10"></script>
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					limit=N
					- max zaps to show when using the dynamic widget
			Node:
			(type) c
			(layer)1
				Element:p
				Element:em
					Generate Static Lists of Zaps (Static List):
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					<script type="text/javascript" src="https://zapier.com/zapbook/embed/widget.js?guided_zaps=XXX"></script>
			Node:
			(type) c
			(layer)1
				Element:p
				Element:em
					where XXX is a Zap ID (and you can comma separate multiple Zaps)
			Node:
			(type) c
			(layer)1
				Element:p
				Element:strong
					Problems with document.write on load?
					Add this parameter with any ID you want:
				Element:code
					html_id=
					. Then you'll want to have the embeds inside a div with the same id—this will cause the embeds to load with the div, and not with document.write as they do otherwise. Example:
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					<div id=foo> <script src="https://zapier.com/zapbook/embed/widget.js?services=mailchimp&container=true&limit=10&html_id=foo"></script> </div>
			Node:
			(type) c
			(layer)1
				Element:p
					In some cases, we've seen an issue with clicking an embed not properly opening the Zapier modal. If that happens, try pasting this code snipped into the chrome developer console and re-clicking. If that works, then just include the snippet in a script tag at the bottom of your html body.
			Node:
			(type) c
			(layer)1
				Element:pre
					function zapierOpenDialog(e) { e.preventDefault(); e.stopPropagation(); var button = e.target; window.open(button.getAttribute('data-popup-href'), 'zapierModalWindow', 'toolbar=no,location=no,status=no,menubar=no,scrollbars=yes,resizable=yes,width=980,height=700'); return false; };
					↑ Was this documentation useful?
			Node:
			(type) c
			(layer)1
				Element:span
				Element:a
					Yes
				Element:a
					No
			Node:
			(type) c
			(layer)1
				Element:a
			Node:
			(type) h1
			(layer)1
				Element:h1
					5. FAQ/Advanced Tips
				Element:a
					#
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					If your Trigger app has a field that needs to be converted, split, or modified in any way, like splitting a full name, asking us to add a
				Element:a
					Formatter
					step before the Action is best.
				Element:li
					If you want to create a Zap template that only triggers for
				Element:em
					some
					events, a
				Element:a
					Filter step
					may be the solution.
				Element:li
					Zapier has a universal syntax for
				Element:a
					modifying dates and times
					. This means that even if your Trigger app only returns one time field, you could add
				Element:code
					+1d
					to have the Action use the day after.
				Element:li
					Zaps are usually reviewed and either published or rejected back to you with feedback within two weeks after submission. Please reach out to
				Element:a
					partners@zapier.com
					if they take longer than that.
			Node:
			(type) c
			(layer)1
				Element:a
			Node:
			(type) c
			(layer)1
				Element:h3
					Still have questions?
				Element:a
					#
			Node:
			(type) c
			(layer)1
				Element:p
					Reach out to us at
					↑ Was this documentation useful?
				Element:a
					partners@zapier.com
					with any questions or comments, including suggestions for how we can improve this documentation!
			Node:
			(type) c
			(layer)1
				Element:span
					Can't find what you're looking for? We'd love to help.
				Element:a
					Yes
				Element:a
					No
			Node:
			(type) c
			(layer)1
				Element:a
					Send us a message
					. Get Help
			Node:
			(type) c
			(layer)1
				Element:noscript
				Element:img
