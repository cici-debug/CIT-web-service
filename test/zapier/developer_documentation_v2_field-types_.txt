Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					Field Types
				Element:a
					#
			Node:
			(type) c
			(layer)1
				Element:p
					The following is a list of the field types we use internally. Normally, you'd choose one of these fields when creating your
				Element:a
					action fields
					or
				Element:a
					trigger fields
					via the type dropdown:
			Node:
			(type) c
			(layer)1
				Element:p
				Element:img
			Node:
			(type) c
			(layer)1
				Element:p
					However, if you're using
				Element:a
					Custom Fields
					you might want to know the available field types. The key column corresponds to the
				Element:code
					type
					key found in the code example here:
				Element:a
					Action Fields (Custom)
					.
			Node:
			(type) c
			(layer)1
				Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Unicode
							Element:a
								#
						Node:
						(type) c
						(layer)2
							Element:p
								Unicode fields are essentially one-line text fields that can support unicode characters. There is no coercion done for this type.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:img
						Node:
						(type) c
						(layer)2
							Element:blockquote
							Element:p
								Unicode fields are represented by a
							Element:code
								type: unicode
								key.
						Node:
						(type) c
						(layer)2
							Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Textarea
							Element:a
								#
						Node:
						(type) c
						(layer)2
							Element:p
								Think of this as a multi-line unicode field. It's really only used to give the user a textarea in the UI instead of a one-line input field. There is no coercion done for this type.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:img
						Node:
						(type) c
						(layer)2
							Element:blockquote
							Element:p
								Textarea fields are represented by a
							Element:code
								type: text
								. key
						Node:
						(type) c
						(layer)2
							Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Integer
							Element:a
								#
						Node:
						(type) c
						(layer)2
							Element:p
								Suitable for whole integer numbers, we'll coerce any text down into an integer by stripped non-numeric values from the string. A negative sign (-) in front is also allowed.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:img
						Node:
						(type) c
						(layer)2
							Element:blockquote
							Element:p
								Integer fields are represented by a
							Element:code
								type: int
								key.
						Node:
						(type) c
						(layer)2
							Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Float
							Element:a
								#
						Node:
						(type) c
						(layer)2
							Element:p
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
								Like integers, this will coerce any text down to a floating point number with the addition of allowed characters like
							Element:code
								.
								and
							Element:code
								,
								.
						Node:
						(type) c
						(layer)2
							Element:blockquote
							Element:p
								Float fields are represented by a
							Element:code
								type: decimal
								key.
						Node:
						(type) c
						(layer)2
							Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Boolean
							Element:a
								#
						Node:
						(type) c
						(layer)2
							Element:p
								We apply some natural language parsing to try and coerce any text into
							Element:code
								True
								or
							Element:code
								False
								. This UI field is also replaced with a dropdown allowing the user to specifically pick "Yes" or "No" explicitly.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:img
						Node:
						(type) c
						(layer)2
							Element:blockquote
							Element:p
								Boolean fields are represented by a
							Element:code
								type: bool
								key.
						Node:
						(type) c
						(layer)2
							Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								DateTime
							Element:a
								#
						Node:
						(type) c
						(layer)2
							Element:p
								Our most complex coercion. We'll attempt to convert any given value into an ISO-8601 formatted string. The parser is quite robust, supporting epoch timestamps, ISO-8601 and even natural language parsing! You can use
							Element:code
								moment.js
								via
							Element:a
								Scripting
								to parse and replace if your servers expect a different format sent to it.
						Node:
						(type) c
						(layer)2
							Element:p
							Element:img
						Node:
						(type) c
						(layer)2
							Element:blockquote
							Element:p
								DateTime fields are represented by a
							Element:code
								type: datetime
								key.
						Node:
						(type) c
						(layer)2
							Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Dictionary/Object
							Element:a
								#
						Node:
						(type) c
						(layer)2
							Element:p
								This is a fairly complex shortcut to a widget that allows a user to provide a series of key/value pairs, perfect for providing completely unstructured and custom metadata (do
							Element:strong
								not
								use this if your API provide definitions for that metadata, look into custom fields instead!).
						Node:
						(type) c
						(layer)2
							Element:p
							Element:img
						Node:
						(type) c
						(layer)2
							Element:blockquote
							Element:p
								Dictionary/Object fields are represented by a
							Element:code
								type: dict
								key.
						Node:
						(type) c
						(layer)2
							Element:p
								There are also a few other special things, related to types, you can do.
						Node:
						(type) c
						(layer)2
							Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Static Dropdown
										Element:a
											#
									Node:
									(type) c
									(layer)3
										Element:p
											You can provide a
										Element:code
											choices
											array which will be mapped automatically into a dropdown in the Zap Editor. In the developer UI you should simply provide us with a hard-coded list of comma-separated values for the "choices" option when defining a field. If you're using
										Element:a
											scripting
											, you'll want to provide this array to us manually. Here is a code sample and what it looks like:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											[
										Element:span
											{
										Element:span
											"type"
										Element:span
											:
										Element:span
											"unicode"
										Element:span
											,
										Element:span
											"key"
										Element:span
											:
										Element:span
											"color"
										Element:span
											,
										Element:span
											"label"
										Element:span
											:
										Element:span
											"Label"
										Element:span
											,
										Element:span
											"help_text"
										Element:span
											:
										Element:span
											"Pick a color label to apply to the card."
										Element:span
											,
										Element:span
											"choices"
										Element:span
											:
										Element:span
											[
										Element:span
											"none"
										Element:span
											,
										Element:span
											"green"
										Element:span
											,
										Element:span
											"yellow"
										Element:span
											,
										Element:span
											"orange"
										Element:span
											,
										Element:span
											"red"
										Element:span
											,
										Element:span
											"purple"
										Element:span
											,
										Element:span
											"blue"
										Element:span
											]
										Element:span
											}
										Element:span
											]
									Node:
									(type) c
									(layer)3
										Element:p
										Element:img
									Node:
									(type) c
									(layer)3
										Element:p
											You can also provide an object with
										Element:code
											key
											and
										Element:code
											value
											for choices if you like.
									Node:
									(type) c
									(layer)3
										Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Lists
										Element:a
											#
									Node:
									(type) c
									(layer)3
										Element:p
											Say you wanted to allow the user to specify multiple values for a single field. Maybe, a list of tags to apply or a list of email addresses to send to. You can use our
										Element:code
											list
											feature to enable "+" and "-" buttons in the Zap Editor which users can use to specify more than one value.
										Element:code
											list
											fields can be any
										Element:code
											type
											except
										Element:code
											dict
											.
									Node:
									(type) c
									(layer)3
										Element:p
											You can make a field a list by checking the appropriate box in the UI. For custom fields, you can use
										Element:a
											Scripting
											to alter the field definition to include
										Element:code
											list: true
											like this:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											[
										Element:span
											{
										Element:span
											"type"
										Element:span
											:
										Element:span
											"unicode"
										Element:span
											,
										Element:span
											"key"
										Element:span
											:
										Element:span
											"to"
										Element:span
											,
										Element:span
											"label"
										Element:span
											:
										Element:span
											"To"
										Element:span
											,
										Element:span
											"help_text"
										Element:span
											:
										Element:span
											"Who will this email be sent to?"
										Element:span
											,
										Element:span
											"list"
										Element:span
											:
										Element:span
											true
										Element:span
											}
										Element:span
											]
									Node:
									(type) c
									(layer)3
										Element:p
											↑ Was this documentation useful?
										Element:img
									Node:
									(type) c
									(layer)3
										Element:span
											Can't find what you're looking for? We'd love to help.
										Element:a
											Yes
										Element:a
											No
									Node:
									(type) c
									(layer)3
										Element:a
											Send us a message
											. Get Help
									Node:
									(type) c
									(layer)3
										Element:noscript
										Element:img
