Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					Action Fields
				Element:a
					#
			Node:
			(type) c
			(layer)1
				Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Overview
							Element:a
								#
						Node:
						(type) c
						(layer)2
							Element:p
								Action Fields answer the question: what details can a user provide when setting up an Action?
						Node:
						(type) c
						(layer)2
							Element:p
								These details might include:
						Node:
						(type) c
						(layer)2
							Element:ul
							Element:li
								Title
							Element:em
								(EG: Note Title in Evernote)
							Element:li
								Description
							Element:em
								(EG: Issue Description in Github)
							Element:li
								Parent Object
							Element:em
								(span relationships via
							Element:a
								dynamic dropdowns
								)
							Element:li
								Repo for an Issue
							Element:em
								(EG: Github)
							Element:li
								Notebook for a Note
							Element:em
								(EG: Evernote)
							Element:li
								Message Body
							Element:em
								(EG: Chat Body in Campfire or Hipchat)
						Node:
						(type) c
						(layer)2
							Element:p
								What a user sees:
						Node:
						(type) c
						(layer)2
							Element:p
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
								What a developer sees:
						Node:
						(type) c
						(layer)2
							Element:p
							Element:img
						Node:
						(type) c
						(layer)2
							Element:p
								Each action should have at least one action field, because, hey, it really makes no sense to POST nothing to an endpoint!
						Node:
						(type) c
						(layer)2
							Element:p
								You can also dynamically load custom action fields by inspecting a custom field endpoint of your own.
							Element:a
								Learn more.
						Node:
						(type) c
						(layer)2
							Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Action Field Options
							Element:a
								#
						Node:
						(type) c
						(layer)2
							Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Key
										Element:a
											#
									Node:
									(type) c
									(layer)3
										Element:p
											A key for you and your API's consumption. This is available for
										Element:a
											variable syntax
											in the Action URL field as well as being added to the POSTed JSON (optional). Needs to be at least two characters long, start with an alpha, and only contain
										Element:code
											a-z
											,
										Element:code
											A-Z
											,
										Element:code
											0-9
											or
										Element:code
											_
											.
									Node:
									(type) c
									(layer)3
										Element:p
											Example:
										Element:br
										Element:code
											room
									Node:
									(type) c
									(layer)3
										Element:p
											We'll take double underscores and convert them to nested dictionaries before we POST JSON.
									Node:
									(type) c
									(layer)3
										Element:p
											Example:
										Element:br
										Element:code
											project__title
											converts to
										Element:code
											{"project": {"title": "some value"} }
									Node:
									(type) c
									(layer)3
										Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Label
										Element:a
											#
									Node:
									(type) c
									(layer)3
										Element:p
											A human readable Label shown in the UI as a user works to complete an Action.
									Node:
									(type) c
									(layer)3
										Element:p
											Example:
										Element:br
										Element:code
											Room
											or
										Element:code
											Title
									Node:
									(type) c
									(layer)3
										Element:p
										Element:img
									Node:
									(type) c
									(layer)3
										Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Help Text
										Element:a
											#
									Node:
									(type) c
									(layer)3
										Element:p
											Human readable description of an action field, useful for describing some detail you couldn't list in the Label.
									Node:
									(type) c
									(layer)3
										Element:p
											Example:
										Element:br
										Element:code
											Choose which room to send the message to.
											or
										Element:code
											Add a title to the note.
									Node:
									(type) c
									(layer)3
										Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Default
										Element:a
											#
									Node:
									(type) c
									(layer)3
										Element:p
											A default value for a field. The behavior varies between required and optional fields. For required fields, the default will be set once when the user first creates the Action, but it is not guaranteed after that (we raise an error on missing/null values instead). For optional fields, it is set on initial creation and used in place of missing or null values every time the Zap runs.
									Node:
									(type) c
									(layer)3
										Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Type
										Element:a
											#
									Node:
									(type) c
									(layer)3
										Element:p
											The type we will try to coerce to on the backend. Fails silently to ensure that tasks aren't dropped on coercion errors.
									Node:
									(type) c
									(layer)3
										Element:p
											You can get a full list of supported types and the coercion implied here:
										Element:a
											Field Types
											.
									Node:
									(type) c
									(layer)3
										Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Required
										Element:a
											#
									Node:
									(type) c
									(layer)3
										Element:p
											If checked a user will not be able to continue without entering some value.
									Node:
									(type) c
									(layer)3
										Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Dynamic Dropdown
										Element:a
											#
									Node:
									(type) c
									(layer)3
										Element:p
											Use an existing
										Element:a
											Trigger
											to load in values for selection, using the machine readable value your API consumes (like
										Element:code
											id
											or
										Element:code
											hash
											) while showing a human readable version to the user (like
										Element:code
											name
											or
										Element:code
											itemName
											).
									Node:
									(type) c
									(layer)3
										Element:p
											Refer to our
										Element:a
											dynamic dropdown docs
											for a more in depth explanation.
									Node:
									(type) c
									(layer)3
										Element:p
											Example:
										Element:br
										Element:code
											TRIGGERKEY.id.name
											or
										Element:code
											TRIGGERKEY.hash.itemName
									Node:
									(type) c
									(layer)3
										Element:p
										Element:img
									Node:
									(type) c
									(layer)3
										Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Static Dropdowns
										Element:a
											#
									Node:
									(type) c
									(layer)3
										Element:p
											A comma separated string that will be turned into a select field for limiting the choices a user can provide to an action field.
									Node:
									(type) c
									(layer)3
										Element:p
											Example:
										Element:br
										Element:code
											choice_a,choice_b,choice_c
											or
										Element:code
											Yesterday, Today, Tomorrow
									Node:
									(type) c
									(layer)3
										Element:p
										Element:img
									Node:
									(type) c
									(layer)3
										Element:p
											If you would like to provide a label for the raw value of each choice, you can also use the raw|label,raw|label syntax instead.
									Node:
									(type) c
									(layer)3
										Element:p
											Example:
										Element:br
										Element:code
											1|Option 1,2|Option 2
									Node:
									(type) c
									(layer)3
										Element:p
										Element:img
									Node:
									(type) c
									(layer)3
										Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Search Connector
										Element:a
											#
									Node:
									(type) c
									(layer)3
										Element:p
											Use an existing
										Element:a
											Search
											to find a value based on user input. Set the key of this field to the
										Element:strong
											same
											key as the field in the search you want to use in executing the search. The second part of the definition is the attribute of the returned object that is sent to your service
										Element:em
											in place of
											this field.
									Node:
									(type) c
									(layer)3
										Element:p
											Example:
										Element:br
										Element:code
											SEARCHKEY.id
									Node:
									(type) c
									(layer)3
										Element:p
											The above definition sets the field as an input to SEARCHKEY (as long as the field key matches a field key within SEARCHKEY), and the
										Element:code
											id
											field from the first result returned from SEARCHKEY is used as the value for this field.
									Node:
									(type) c
									(layer)3
										Element:p
											The user does not see anything different for this type of field, so make sure to explain in the help text what kind of input you expect here.
									Node:
									(type) c
									(layer)3
										Element:p
										Element:strong
											Note
											: Any field with a search connector specified must also have a dynamic dropdown specified. This is because search connectors are meant to save the user from having to find and copy an ID value into a field - which the dynamic dropdown will handle for when the user wants to use the same ID every time.
									Node:
									(type) c
									(layer)3
										Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Parent Key
										Element:a
											#
									Node:
									(type) c
									(layer)3
										Element:p
											Ok, parent key is a little tricky, but it can be really helpful if you want to support line items (an array of sub-objects). When an action has one or more fields that have a parent key, we treat all those fields as the schema for building sub-objects, which we combine into a list and nest under the parent key.
									Node:
									(type) c
									(layer)3
										Element:p
											For example, say you define two fields
										Element:code
											amount
											and
										Element:code
											quantity
											and give them both the parent key
										Element:code
											line_items
											. Now imagine a user has a trigger that provides this data:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											{
										Element:span
											"sale"
										Element:span
											:
										Element:span
											{
										Element:span
											"items_sold"
										Element:span
											:
										Element:span
											[
										Element:span
											{
										Element:span
											"cost"
										Element:span
											:
										Element:span
											"$3.00"
										Element:span
											,
										Element:span
											"# sold"
										Element:span
											:
										Element:span
											12
										Element:span
											},
										Element:span
											{
										Element:span
											"cost"
										Element:span
											:
										Element:span
											"$2.55"
										Element:span
											,
										Element:span
											"# sold"
										Element:span
											:
										Element:span
											1
										Element:span
											}
										Element:span
											]
										Element:span
											}
										Element:span
											}
									Node:
									(type) c
									(layer)3
										Element:p
										Element:strong
											NOTE:
											The kind of data you receive ultimately depends on what the app's trigger providing the data returns. This means that if the app's trigger a customer's using doesn't provide line items, we'll transform arrays into CSV strings. There's really nothing you can do about this, but when testing,
										Element:a
											make sure the app you're using to test triggers supports line items
											.
									Node:
									(type) c
									(layer)3
										Element:p
											The user could map
										Element:code
											cost
											into your amount field and
										Element:code
											# sold
											into the action's quantity field, like this:
									Node:
									(type) c
									(layer)3
										Element:p
										Element:img
									Node:
									(type) c
									(layer)3
										Element:p
											Zapier would produce this JSON for POSTing:
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											{
										Element:span
											"line_items"
										Element:span
											:
										Element:span
											[
										Element:span
											{
										Element:span
											"amount"
										Element:span
											:
										Element:span
											"$3.00"
										Element:span
											,
										Element:span
											"quantity"
										Element:span
											:
										Element:span
											12
										Element:span
											},
										Element:span
											{
										Element:span
											"amount"
										Element:span
											:
										Element:span
											"$2.55"
										Element:span
											,
										Element:span
											"quantity"
										Element:span
											:
										Element:span
											1
										Element:span
											}
										Element:span
											]
										Element:span
											}
									Node:
									(type) c
									(layer)3
										Element:p
											Zapier will
										Element:em
											automatically
											expand fields with the same
										Element:code
											parent_key
											into a nested list of objects according to how the source data comes in (we'll make as many objects inside the list as the original source). All you need to do is provide the same
										Element:code
											parent_key
											and expect an array of objects under that
										Element:code
											parent_key
											.
									Node:
									(type) c
									(layer)3
										Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											Send in POST by default
										Element:a
											#
									Node:
									(type) c
									(layer)3
										Element:p
											If checked, we'll include the user-provided value in the POSTed JSON on the provided key (or nested key if double underscores
										Element:code
											__
											are present).
									Node:
									(type) c
									(layer)3
										Element:p
											If you utilize the
										Element:code
											pre_poll
											or
										Element:code
											ACTIONKEY_pre_poll
											methods via
										Element:a
											scripting
											you can get complete control over the JSON output beyond simple exclusion/inclusion.
									Node:
									(type) c
									(layer)3
										Element:a
						Node:
						(type) c
						(layer)2
									Node:
									(type) c
									(layer)3
										Element:h3
											List
										Element:a
											#
									Node:
									(type) c
									(layer)3
										Element:p
											Indicates if this field can hold multiple values. For example, this could be useful if you want to allow users to add tags to a new contact, and you want them to be able to add more than one. List fields gain the +/- icons to the side.
									Node:
									(type) c
									(layer)3
										Element:p
											↑ Was this documentation useful?
										Element:img
									Node:
									(type) c
									(layer)3
										Element:span
											Can't find what you're looking for? We'd love to help.
										Element:a
											Yes
										Element:a
											No
									Node:
									(type) c
									(layer)3
										Element:a
											Send us a message
											. Get Help
									Node:
									(type) c
									(layer)3
										Element:noscript
										Element:img
