Node:
(type) c
(layer)0
	Element:body
			Node:
			(type) h1
			(layer)1
				Element:h1
					Intro to Scripting
				Element:a
					#
			Node:
			(type) c
			(layer)1
				Element:p
					Zapier's Web Builder scripting functionality allows you to manipulate the requests and responses that are exchanged between your app's API and Zapier.
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
				Element:strong
					Note
					: You can build a Zapier App with
				Element:strong
					all code
					using the
				Element:a
					Command Line Interface
					.
			Node:
			(type) c
			(layer)1
				Element:p
					You can modify HTTP requests just before they are sent and can parse responses before Zapier does anything with them. This enables you to do things like:
			Node:
			(type) c
			(layer)1
				Element:ul
				Element:li
					Set unique HTTP Headers
				Element:li
					Modify the request URL based on user's input criteria.
				Element:li
					Construct unique URL query strings like filters.
				Element:li
					Turn XML or other serialization formats into properly formatted JSON primitives.
				Element:li
					Create completely new keys on JSON objects for user consumption (like turning 1000 into $10.00).
			Node:
			(type) c
			(layer)1
				Element:p
					Scripting works by giving you places to add your own code to the request-response cycle. To add a method, click the edit code button on your App's developer dashboard:
			Node:
			(type) c
			(layer)1
				Element:p
				Element:img
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Please note that Scripting works in Invite Only and Global apps, you simply can't edit it at that point, you have to
				Element:a
					clone and deploy
					the app to change Scripting after the app becomes Invite Only.
			Node:
			(type) c
			(layer)1
				Element:p
					Inside the editor, you will create the root module
				Element:code
					Zap
					. By default it is a blank JavaScript object. You add to it by defining one or more of the
				Element:a
					available methods
					. Each method accepts a single variable called
				Element:code
					bundle
					, which is a JSON serializable object. The content of the bundle varies depending on the method you are implementing. The output of your method must also be a serializable object.
			Node:
			(type) c
			(layer)1
				Element:p
					Below is an example of implementing a method to be a pass-through:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
					var
				Element:span
					Zap
				Element:span
					=
				Element:span
					{
				Element:span
					my_trigger_pre_poll
				Element:span
					:
				Element:span
					function
				Element:span
					(
				Element:span
					bundle
				Element:span
					)
				Element:span
					{
				Element:span
					// your code to modify bundle.request before sent
				Element:span
					return
				Element:span
					bundle
				Element:span
					.
				Element:span
					request
				Element:span
					;
				Element:span
					}
				Element:span
					}
			Node:
			(type) c
			(layer)1
				Element:p
				Element:strong
					Note
					: All code written in the Scripting API must adhere to
				Element:a
					strict mode
					, which is a subset of Javascript. Any issues with your code that violate this will now be shown in the Scripting API editor with red X marks in the sidebar.
			Node:
			(type) c
			(layer)1
				Element:a
			Node:
			(type) c
			(layer)1
						Node:
						(type) c
						(layer)2
							Element:h2
								Limits and Considerations
							Element:a
								#
						Node:
						(type) c
						(layer)2
							Element:p
								Scripting is powerful, but not unlimitedly so.
						Node:
						(type) c
						(layer)2
							Element:p
								When writing your code, make it lean and run fast.
						Node:
						(type) c
						(layer)2
							Element:p
								Some hard limits are that each method needs to run in under 30 seconds, and it won't process request/response payloads larger than ~5 MB.
								â†‘ Was this documentation useful?
						Node:
						(type) c
						(layer)2
							Element:span
							Element:a
								Yes
							Element:a
								No
						Node:
						(type) c
						(layer)2
							Element:a
			Node:
			(type) h1
			(layer)1
				Element:h1
					Available Methods
				Element:a
					#
			Node:
			(type) c
			(layer)1
				Element:p
					There are a variety of methods for manipulating requests Zapier makes to your API. Below is the complete list of methods you can use in scripting. You may provide any, all, or none of these methods.
			Node:
			(type) c
			(layer)1
				Element:a
			Node:
			(type) c
			(layer)1
				Element:h2
					Trigger Methods
				Element:a
					#
			Node:
			(type) c
			(layer)1
				Element:p
					Many of the trigger methods follow a naming pattern of key + method name, where key is the key given to the trigger when you created it. Below, we use the convention of
				Element:code
					TRIGGER_KEY
					as the placeholder for the trigger's actual key. For example, if you define a trigger with the key "my_trigger" and you want to implement the pre_poll method, you would write a method called
				Element:code
					my_trigger_pre_poll
					.
			Node:
			(type) c
			(layer)1
				Element:a
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
											Polling
										Element:a
											#
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:code
											TRIGGER_KEY_pre_poll
											- runs before the request to the polling URL, can modify the request before it is sent.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											var
										Element:span
											Zap
										Element:span
											=
										Element:span
											{
										Element:span
											TRIGGER_KEY_pre_poll
										Element:span
											:
										Element:span
											function
										Element:span
											(
										Element:span
											bundle
										Element:span
											)
										Element:span
											{
										Element:span
											/*
										Element:span
											Argument:
										Element:span
											bundle.request.url: <string>
										Element:span
											bundle.request.method: <string> # 'GET'
										Element:span
											bundle.request.auth: <array> # [username, password]
										Element:span
											bundle.request.headers: <object>
										Element:span
											bundle.request.params: <object> # this will be mapped into the querystring
										Element:span
											bundle.request.data: <string> # str or null
										Element:span
											bundle.url_raw: <string>
										Element:span
											bundle.auth_fields: <object>
										Element:span
											bundle.trigger_fields: <object> # the fields provided by the user during setup
										Element:span
											bundle.zap: <object> # info about the zap
										Element:span
											bundle.meta: <object> # extra runtime information you can use
										Element:span
											The response should be an object of:
										Element:span
											url: <string>
										Element:span
											method: <string> # 'GET', 'POST', 'PATCH', 'PUT', 'DELETE'
										Element:span
											auth: <array> # [username, password]
										Element:span
											headers: <object>
										Element:span
											params: <object> # this will be mapped into the query string
										Element:span
											data: <string> or null # request body: optional if POST, not needed if GET
										Element:span
											*/
										Element:span
											return
										Element:span
											{
										Element:span
											url
										Element:span
											:
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											.
										Element:span
											url
										Element:span
											,
										Element:span
											method
										Element:span
											:
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											.
										Element:span
											method
										Element:span
											,
										Element:span
											auth
										Element:span
											:
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											.
										Element:span
											auth
										Element:span
											,
										Element:span
											headers
										Element:span
											:
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											.
										Element:span
											headers
										Element:span
											,
										Element:span
											params
										Element:span
											:
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											.
										Element:span
											params
										Element:span
											,
										Element:span
											data
										Element:span
											:
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											.
										Element:span
											data
										Element:span
											};
										Element:span
											// or return bundle.request;
										Element:span
											}
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:code
											TRIGGER_KEY_post_poll
											- runs after we receive a response from the polling URL. Can parse the response to format the data that enters Zapier.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											var
										Element:span
											Zap
										Element:span
											=
										Element:span
											{
										Element:span
											TRIGGER_KEY_post_poll
										Element:span
											:
										Element:span
											function
										Element:span
											(
										Element:span
											bundle
										Element:span
											)
										Element:span
											{
										Element:span
											/*
										Element:span
											Argument:
										Element:span
											bundle.response.status_code: <integer>
										Element:span
											bundle.response.headers: <object>
										Element:span
											bundle.response.content: <str>
										Element:span
											bundle.request: <original object from TRIGGER_KEY_pre_poll bundle>
										Element:span
											bundle.auth_fields: <object>
										Element:span
											bundle.trigger_fields: <object> # the fields provided by the user during setup
										Element:span
											bundle.zap: <object> # info about the zap
										Element:span
											bundle.meta: <object> # extra runtime information you can use
										Element:span
											The response should be JSON serializable:
										Element:span
											[
										Element:span
											<object>, # with unique 'id' key
										Element:span
											<object> # with unique 'id' key
										Element:span
											]
										Element:span
											*/
										Element:span
											return
										Element:span
											[];
										Element:span
											}
										Element:span
											}
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:code
											TRIGGER_KEY_poll
											- runs in place of pre_poll and post_poll. You get a bundle and are expected to make the request and return a list of results.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											var
										Element:span
											Zap
										Element:span
											=
										Element:span
											{
										Element:span
											TRIGGER_KEY_poll
										Element:span
											:
										Element:span
											function
										Element:span
											(
										Element:span
											bundle
										Element:span
											)
										Element:span
											{
										Element:span
											/*
										Element:span
											Arguments:
										Element:span
											bundle.request.url: <string>
										Element:span
											bundle.request.method: <string> # 'GET'
										Element:span
											bundle.request.auth: <array> # [username, password]
										Element:span
											bundle.request.headers: <object>
										Element:span
											bundle.request.params: <object> # this will be mapped into the query string
										Element:span
											bundle.request.data: <string> # str or null
										Element:span
											bundle.url_raw: <string>
										Element:span
											bundle.auth_fields: <object>
										Element:span
											bundle.trigger_fields: <object> # the fields provided by the user during setup
										Element:span
											bundle.zap: <object> # info about the zap
										Element:span
											bundle.meta: <object> # extra runtime information you can use
										Element:span
											If you include a callback in the arguments, you can also perform async:
										Element:span
											callback(err, response)
										Element:span
											You are expected to make the request yourself. The response should be JSON serializable:
										Element:span
											[
										Element:span
											<object>, # with unique 'id' key
										Element:span
											<object> # with unique 'id' key
										Element:span
											]
										Element:span
											*/
										Element:span
											return
										Element:span
											[];
										Element:span
											// or callback(null, [])
										Element:span
											}
										Element:span
											}
									Node:
									(type) c
									(layer)3
										Element:a
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
											Static and REST Hooks
										Element:a
											#
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:code
											TRIGGER_KEY_catch_hook
											- runs when we receive a static or subscription hook from your API. Can parse the response to format the data that enters Zapier.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											var
										Element:span
											Zap
										Element:span
											=
										Element:span
											{
										Element:span
											TRIGGER_KEY_catch_hook
										Element:span
											:
										Element:span
											function
										Element:span
											(
										Element:span
											bundle
										Element:span
											)
										Element:span
											{
										Element:span
											/*
										Element:span
											Argument:
										Element:span
											bundle.request.method: <str> # 'GET', 'POST', 'PATCH', 'PUT', 'DELETE'
										Element:span
											bundle.request.headers: <object>
										Element:span
											bundle.request.querystring: <str>
										Element:span
											bundle.request.content: <str>
										Element:span
											bundle.cleaned_request: <object> or <array> # our best guess at parsing
										Element:span
											# and combining the request
										Element:span
											# (including handling JSON & XML).
										Element:span
											bundle.auth_fields: <object>
										Element:span
											bundle.trigger_fields: <object> # the fields provided by the user during setup
										Element:span
											bundle.zap: <object> # info about the zap
										Element:span
											The response should be either a JSON serializable array...
										Element:span
											[
										Element:span
											<object>,
										Element:span
											<object>
										Element:span
											]
										Element:span
											...or a single object:
										Element:span
											<object>
										Element:span
											*/
										Element:span
											return
										Element:span
											[];
										Element:span
											// or {}
										Element:span
											}
										Element:span
											}
									Node:
									(type) c
									(layer)3
										Element:a
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
											REST Hooks and Notification REST Hooks
										Element:a
											#
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:code
											pre_subscribe
											- runs before we subscribe.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											var
										Element:span
											Zap
										Element:span
											=
										Element:span
											{
										Element:span
											pre_subscribe
										Element:span
											:
										Element:span
											function
										Element:span
											(
										Element:span
											bundle
										Element:span
											)
										Element:span
											{
										Element:span
											/*
										Element:span
											Argument:
										Element:span
											bundle.request.url: <string>
										Element:span
											bundle.request.method: <string> # 'POST'
										Element:span
											bundle.request.auth: <array> # [username, password]
										Element:span
											bundle.request.headers: <object>
										Element:span
											bundle.request.params: <object> # this will be mapped into the querystring
										Element:span
											bundle.request.data: <string> # str or null
										Element:span
											bundle.auth_fields: <object>
										Element:span
											bundle.trigger_fields: <object> # the data from trigger fields
										Element:span
											bundle.target_url: <string> # our unique Zapier url for this subscription
										Element:span
											bundle.event: <string> # the event being subscribed to
										Element:span
											bundle.zap: <object> # info about the zap
										Element:span
											The response should be an object of:
										Element:span
											url: <string>
										Element:span
											method: <string> # 'GET', 'POST', 'PATCH', 'PUT', 'DELETE'
										Element:span
											auth: <array> # [username, password]
										Element:span
											headers: <object>
										Element:span
											params: <object> # this will be mapped into the query string
										Element:span
											data: <string> or null # request body: optional if POST, not needed if GET
										Element:span
											*/
										Element:span
											return
										Element:span
											{
										Element:span
											url
										Element:span
											:
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											.
										Element:span
											url
										Element:span
											,
										Element:span
											method
										Element:span
											:
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											.
										Element:span
											method
										Element:span
											,
										Element:span
											auth
										Element:span
											:
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											.
										Element:span
											auth
										Element:span
											,
										Element:span
											headers
										Element:span
											:
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											.
										Element:span
											headers
										Element:span
											,
										Element:span
											params
										Element:span
											:
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											.
										Element:span
											params
										Element:span
											,
										Element:span
											data
										Element:span
											:
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											.
										Element:span
											data
										Element:span
											};
										Element:span
											// or return bundle.request;
										Element:span
											}
										Element:span
											}
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:code
											post_subscribe
											- runs after we subscribe. It is exclusively for storing results that are needed later for pre_unsubscribe.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											var
										Element:span
											Zap
										Element:span
											=
										Element:span
											{
										Element:span
											post_subscribe
										Element:span
											:
										Element:span
											function
										Element:span
											(
										Element:span
											bundle
										Element:span
											)
										Element:span
											{
										Element:span
											/*
										Element:span
											Argument:
										Element:span
											bundle.response.status_code: <integer>
										Element:span
											bundle.response.headers: <object>
										Element:span
											bundle.response.content: <str>
										Element:span
											bundle.request: <original object from pre_subscribe bundle>
										Element:span
											bundle.target_url: <string> # our unique Zapier url for this subscription
										Element:span
											bundle.event: <string> # the event (if any) that was subscribed to
										Element:span
											bundle.auth_fields: <object>
										Element:span
											bundle.trigger_fields: <object> # the data from trigger fields
										Element:span
											bundle.zap: <object> # info about the zap
										Element:span
											The response should be JSON serializable, you'll have access to it as
										Element:span
											subscribe_data in the unsubscribe call. Normally you'd store some state
										Element:span
											about the hook resource you created, for example, some apps need
										Element:span
											an ID to locate and unsubscribe from a hook.
										Element:span
											*/
										Element:span
											return
										Element:span
											""
										Element:span
											;
										Element:span
											// or {}, or []
										Element:span
											}
										Element:span
											}
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:code
											pre_unsubscribe
											- runs before we unsubscribe.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											var
										Element:span
											Zap
										Element:span
											=
										Element:span
											{
										Element:span
											pre_unsubscribe
										Element:span
											:
										Element:span
											function
										Element:span
											(
										Element:span
											bundle
										Element:span
											)
										Element:span
											{
										Element:span
											/*
										Element:span
											Argument:
										Element:span
											bundle.request.url: <string>
										Element:span
											bundle.request.method: <string> # 'POST'
										Element:span
											bundle.request.auth: <array> # [username, password]
										Element:span
											bundle.request.headers: <object>
										Element:span
											bundle.request.params: <object> # this will be mapped into the querystring
										Element:span
											bundle.request.data: <string> # str or null
										Element:span
											bundle.target_url: <string> # our unique Zapier url for this subscription
										Element:span
											bundle.subscribe_data <json> # any data you returned from post_subscribe
										Element:span
											bundle.event: <string> # the event (if any) being unsubscribed from
										Element:span
											bundle.auth_fields: <object>
										Element:span
											bundle.trigger_fields: <object> # the data from trigger fields
										Element:span
											bundle.zap: <object> # info about the zap
										Element:span
											The response should be an object of:
										Element:span
											url: <string>
										Element:span
											method: <string> # 'GET', 'POST', 'PATCH', 'PUT', 'DELETE'
										Element:span
											auth: <array> # [username, password]
										Element:span
											headers: <object>
										Element:span
											params: <object> # this will be mapped into the query string
										Element:span
											data: <string> or null # request body: optional if POST, not needed if GET
										Element:span
											*/
										Element:span
											return
										Element:span
											{
										Element:span
											url
										Element:span
											:
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											.
										Element:span
											url
										Element:span
											,
										Element:span
											method
										Element:span
											:
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											.
										Element:span
											method
										Element:span
											,
										Element:span
											auth
										Element:span
											:
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											.
										Element:span
											auth
										Element:span
											,
										Element:span
											headers
										Element:span
											:
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											.
										Element:span
											headers
										Element:span
											,
										Element:span
											params
										Element:span
											:
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											.
										Element:span
											params
										Element:span
											,
										Element:span
											data
										Element:span
											:
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											.
										Element:span
											data
										Element:span
											};
										Element:span
											// or return bundle.request;
										Element:span
											}
										Element:span
											}
									Node:
									(type) c
									(layer)3
										Element:a
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
											Notification REST Hooks
										Element:a
											#
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:code
											pre_hook
											- runs before the consuming call.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											var
										Element:span
											Zap
										Element:span
											=
										Element:span
											{
										Element:span
											TRIGGER_KEY_pre_hook
										Element:span
											:
										Element:span
											function
										Element:span
											(
										Element:span
											bundle
										Element:span
											)
										Element:span
											{
										Element:span
											/*
										Element:span
											Argument:
										Element:span
											bundle.request.url: <string>
										Element:span
											bundle.request.method: <string> # 'GET'
										Element:span
											bundle.request.auth: <array> # [username, password]
										Element:span
											bundle.request.headers: <object>
										Element:span
											bundle.request.params: <object> # this will be mapped into the querystring
										Element:span
											bundle.request.data: <string> # str or null
										Element:span
											bundle.auth_fields: <object>
										Element:span
											bundle.trigger_fields: <object> # the fields provided by the user during setup
										Element:span
											bundle.zap: <object> # info about the zap
										Element:span
											The response should be an object of:
										Element:span
											url: <string>
										Element:span
											method: <string> # 'GET', 'POST', 'PATCH', 'PUT', 'DELETE'
										Element:span
											auth: <array> # [username, password]
										Element:span
											headers: <object>
										Element:span
											params: <object> # this will be mapped into the query string
										Element:span
											data: <string> or null # request body: optional if POST, not needed if GET
										Element:span
											*/
										Element:span
											return
										Element:span
											{
										Element:span
											url
										Element:span
											:
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											.
										Element:span
											url
										Element:span
											,
										Element:span
											method
										Element:span
											:
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											.
										Element:span
											method
										Element:span
											,
										Element:span
											auth
										Element:span
											:
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											.
										Element:span
											auth
										Element:span
											,
										Element:span
											headers
										Element:span
											:
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											.
										Element:span
											headers
										Element:span
											,
										Element:span
											params
										Element:span
											:
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											.
										Element:span
											params
										Element:span
											,
										Element:span
											data
										Element:span
											:
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											.
										Element:span
											data
										Element:span
											};
										Element:span
											// or return bundle.request;
										Element:span
											}
										Element:span
											}
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:code
											post_hook
											- runs after we receive a response from the consuming call.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											var
										Element:span
											Zap
										Element:span
											=
										Element:span
											{
										Element:span
											TRIGGER_KEY_post_hook
										Element:span
											:
										Element:span
											function
										Element:span
											(
										Element:span
											bundle
										Element:span
											)
										Element:span
											{
										Element:span
											/*
										Element:span
											Argument:
										Element:span
											bundle.response.status_code: <integer>
										Element:span
											bundle.response.headers: <object>
										Element:span
											bundle.response.content: <str>
										Element:span
											bundle.request: <original object from TRIGGER_KEY_pre_hook bundle>
										Element:span
											bundle.auth_fields: <object>
										Element:span
											bundle.trigger_fields: <object> # the fields provided by the user during setup
										Element:span
											bundle.zap: <object> # info about the zap
										Element:span
											The response should be JSON serializable:
										Element:span
											[
										Element:span
											<object>,
										Element:span
											<object>
										Element:span
											]
										Element:span
											*/
										Element:span
											return
										Element:span
											[];
										Element:span
											}
										Element:span
											}
									Node:
									(type) c
									(layer)3
										Element:a
			Node:
			(type) c
			(layer)1
									Node:
									(type) c
									(layer)3
										Element:h3
											Available to all triggers
										Element:a
											#
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:code
											TRIGGER_KEY_pre_custom_trigger_fields
											- runs before the request to the custom field URL (if provided).
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											var
										Element:span
											Zap
										Element:span
											=
										Element:span
											{
										Element:span
											TRIGGER_KEY_pre_custom_trigger_fields
										Element:span
											:
										Element:span
											function
										Element:span
											(
										Element:span
											bundle
										Element:span
											)
										Element:span
											{
										Element:span
											/*
										Element:span
											Argument:
										Element:span
											bundle.request.url: <string>
										Element:span
											bundle.request.method: <string> # 'POST'
										Element:span
											bundle.request.auth: <array> # [username, password]
										Element:span
											bundle.request.headers: <object>
										Element:span
											bundle.request.params: <object> # this will be mapped into the querystring
										Element:span
											bundle.request.data: <string> # str or null
										Element:span
											bundle.url_raw: <string>
										Element:span
											bundle.auth_fields: <object>
										Element:span
											bundle.trigger_fields: <object> # the fields provided by the user during setup
										Element:span
											bundle.zap: <object> # info about the zap
										Element:span
											The response should be an object of:
										Element:span
											url: <string>
										Element:span
											method: <string> # 'GET', 'POST', 'PATCH', 'PUT', 'DELETE'
										Element:span
											auth: <array> # [username, password]
										Element:span
											headers: <object>
										Element:span
											params: <object> # this will be mapped into the query string
										Element:span
											data: <string> or null # request body: optional if POST, not needed if GET
										Element:span
											*/
										Element:span
											return
										Element:span
											{
										Element:span
											url
										Element:span
											:
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											.
										Element:span
											url
										Element:span
											,
										Element:span
											method
										Element:span
											:
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											.
										Element:span
											method
										Element:span
											,
										Element:span
											auth
										Element:span
											:
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											.
										Element:span
											auth
										Element:span
											,
										Element:span
											headers
										Element:span
											:
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											.
										Element:span
											headers
										Element:span
											,
										Element:span
											params
										Element:span
											:
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											.
										Element:span
											params
										Element:span
											,
										Element:span
											data
										Element:span
											:
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											.
										Element:span
											data
										Element:span
											};
										Element:span
											// or return bundle.request;
										Element:span
											}
										Element:span
											}
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:code
											TRIGGER_KEY_post_custom_trigger_fields
											- runs after the response for custom fields is received.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											var
										Element:span
											Zap
										Element:span
											=
										Element:span
											{
										Element:span
											TRIGGER_KEY_post_custom_trigger_fields
										Element:span
											:
										Element:span
											function
										Element:span
											(
										Element:span
											bundle
										Element:span
											)
										Element:span
											{
										Element:span
											/*
										Element:span
											Argument:
										Element:span
											bundle.response.status_code: <integer>
										Element:span
											bundle.response.headers: <object>
										Element:span
											bundle.response.content: <str>
										Element:span
											bundle.request: <original object from TRIGGER_KEY_pre_hook bundle>
										Element:span
											bundle.url_raw: <string>
										Element:span
											bundle.auth_fields: <object>
										Element:span
											bundle.zap: <object> # info about the zap
										Element:span
											The response should be JSON serializable:
										Element:span
											[
										Element:span
											# `type` can be unicode, int, bool
										Element:span
											# `key` should be unique and match a key found in the JSON representation we receive from your API
										Element:span
											# `label` is a human-readable name we can give this field in the UI
										Element:span
											{'type': <str>, 'key': <str>, 'label': <str>}
										Element:span
											]
										Element:span
											*/
										Element:span
											return
										Element:span
											[];
										Element:span
											}
										Element:span
											}
									Node:
									(type) c
									(layer)3
										Element:a
									Node:
									(type) c
									(layer)3
										Element:h2
											Action Methods
										Element:a
											#
									Node:
									(type) c
									(layer)3
										Element:p
											Action methods follow a naming pattern of key + method name, where key is the key given to the action when you created it. Below, we use the convention of
										Element:code
											ACTION_KEY
											as the placeholder for the action's actual key. For example, if you define an action with the key "my_action" and you want to implement the pre_write method, you would write a method called
										Element:code
											my_action_pre_write
											.
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:code
											ACTION_KEY_pre_write
											- runs before the request to the action URL, can modify the request before it is sent.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											var
										Element:span
											Zap
										Element:span
											=
										Element:span
											{
										Element:span
											ACTION_KEY_pre_write
										Element:span
											:
										Element:span
											function
										Element:span
											(
										Element:span
											bundle
										Element:span
											)
										Element:span
											{
										Element:span
											/*
										Element:span
											Argument:
										Element:span
											bundle.request.url: <string>
										Element:span
											bundle.request.method: <string> # 'POST'
										Element:span
											bundle.request.auth: <array> # [username, password]
										Element:span
											bundle.request.headers: <object>
										Element:span
											bundle.request.params: <object> # this will be mapped into the querystring
										Element:span
											bundle.request.files: <object> # object of keys/arrays
										Element:span
											# * 1st item: filename str or null
										Element:span
											# * 2nd item: zapier.com endpoint that will stream the file
										Element:span
											# * 3rd item: mimetype str or null
										Element:span
											bundle.request.data: <string> # str or null
										Element:span
											bundle.url_raw: <string>
										Element:span
											bundle.auth_fields: <object>
										Element:span
											bundle.action_fields: <object> # pruned and replaced users' fields
										Element:span
											bundle.action_fields_full: <object> # all replaced users' fields
										Element:span
											bundle.action_fields_raw: <object> # before we replace users' variables
										Element:span
											bundle.zap: <object> # info about the zap
										Element:span
											The response should be an object of:
										Element:span
											url: <string>
										Element:span
											method: <string> # 'GET', 'POST', 'PATCH', 'PUT', 'DELETE'
										Element:span
											auth: <array> # [username, password]
										Element:span
											headers: <object>
										Element:span
											params: <object> # this will be mapped into the query string
										Element:span
											files: <object> # object of keys/arrays - experimental!
										Element:span
											data: <string> or null # request body: optional if POST, not needed if GET
										Element:span
											*/
										Element:span
											return
										Element:span
											{
										Element:span
											url
										Element:span
											:
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											.
										Element:span
											url
										Element:span
											,
										Element:span
											method
										Element:span
											:
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											.
										Element:span
											method
										Element:span
											,
										Element:span
											auth
										Element:span
											:
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											.
										Element:span
											auth
										Element:span
											,
										Element:span
											headers
										Element:span
											:
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											.
										Element:span
											headers
										Element:span
											,
										Element:span
											params
										Element:span
											:
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											.
										Element:span
											params
										Element:span
											,
										Element:span
											data
										Element:span
											:
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											.
										Element:span
											data
										Element:span
											};
										Element:span
											// or return bundle.request;
										Element:span
											}
										Element:span
											}
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:code
											ACTION_KEY_post_write
											- runs after we receive a response from the action endpoint, can modify the response (and clarify murky errors).
										Element:em
											Note:
											If the action occurs as part of a search-or-create Zap, the output of this method is
										Element:em
											not
											exactly what the user sees. In that case, the action will be followed up with a request to fetch the written record, and we will present the user with the output from that follow-up request. If you need to modify the returned data in that scenario, use
										Element:code
											_post_read_resource
											.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											var
										Element:span
											Zap
										Element:span
											=
										Element:span
											{
										Element:span
											ACTION_KEY_post_write
										Element:span
											:
										Element:span
											function
										Element:span
											(
										Element:span
											bundle
										Element:span
											)
										Element:span
											{
										Element:span
											/*
										Element:span
											Argument:
										Element:span
											bundle.response.status_code: <integer>
										Element:span
											bundle.response.headers: <object>
										Element:span
											bundle.response.content: <str>
										Element:span
											bundle.auth_fields: <object>
										Element:span
											bundle.action_fields: <object> # pruned and replaced users' fields
										Element:span
											bundle.action_fields_full: <object> # all replaced users' fields
										Element:span
											bundle.action_fields_raw: <object> # before we replace users' variables
										Element:span
											bundle.request: <original object from ACTION_KEY_pre_write bundle>
										Element:span
											bundle.zap: <object> # info about the zap
										Element:span
											The response will be used to give the user more fields to use
										Element:span
											in the next step of the Zap. Please return a JSON serializable object.
										Element:span
											return <object>;
										Element:span
											*/
										Element:span
											}
										Element:span
											}
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:code
											ACTION_KEY_write
											- runs in place of pre_write and post_write. You get a bundle and are expected to make the request and return the appropriate response.
										Element:em
											Note:
											If the action occurs as part of a search-or-create Zap, the output of this method is
										Element:em
											not
											exactly what the user sees. In that case, the action will be followed up with a request to fetch the written record, and we will present the user with the output from that follow-up request. If you need to modify the returned data in that scenario, use
										Element:code
											_post_read_resource
											.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											var
										Element:span
											Zap
										Element:span
											=
										Element:span
											{
										Element:span
											ACTION_KEY_write
										Element:span
											:
										Element:span
											function
										Element:span
											(
										Element:span
											bundle
										Element:span
											,
										Element:span
											[
										Element:span
											callback
										Element:span
											])
										Element:span
											{
										Element:span
											/*
										Element:span
											Arguments:
										Element:span
											bundle.request.url: <string>
										Element:span
											bundle.request.method: <string> # 'POST'
										Element:span
											bundle.request.auth: <array> # [username, password]
										Element:span
											bundle.request.headers: <object>
										Element:span
											bundle.request.params: <object> # this will be mapped into the querystring
										Element:span
											bundle.request.files: <object> # object of keys/arrays
										Element:span
											# * 1st item: filename str or null
										Element:span
											# * 2nd item: zapier.com endpoint that will stream the file
										Element:span
											# * 3rd item: mimetype str or null
										Element:span
											bundle.request.data: <string> # str or null
										Element:span
											bundle.url_raw: <string>
										Element:span
											bundle.auth_fields: <object>
										Element:span
											bundle.action_fields: <object> # pruned and replaced users' fields
										Element:span
											bundle.action_fields_full: <object> # all replaced users' fields
										Element:span
											bundle.action_fields_raw: <object> # before we replace users' variables
										Element:span
											bundle.zap: <object> # info about the zap
										Element:span
											If you include a callback in the arguments, you can also perform async:
										Element:span
											callback(err, response)
										Element:span
											The response will be used to give the user more fields to use
										Element:span
											in the next step of the Zap. Please return a JSON serializable object.
										Element:span
											return <object>;
										Element:span
											*/
										Element:span
											}
										Element:span
											}
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:code
											ACTION_KEY_pre_custom_action_fields
											- runs before the request to the custom field URL (if provided).
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											var
										Element:span
											Zap
										Element:span
											=
										Element:span
											{
										Element:span
											ACTION_KEY_pre_custom_action_fields
										Element:span
											:
										Element:span
											function
										Element:span
											(
										Element:span
											bundle
										Element:span
											)
										Element:span
											{
										Element:span
											/*
										Element:span
											Argument:
										Element:span
											bundle.request.url: <string>
										Element:span
											bundle.request.method: <string> # 'POST'
										Element:span
											bundle.request.auth: <array> # [username, password]
										Element:span
											bundle.request.headers: <object>
										Element:span
											bundle.request.params: <object> # this will be mapped into the querystring
										Element:span
											bundle.request.data: <string> # str or null
										Element:span
											bundle.url_raw: <string>
										Element:span
											bundle.auth_fields: <object>
										Element:span
											bundle.action_fields: <object> # the raw action fields (if applicable)
										Element:span
											bundle.zap: <object> # info about the zap (details below)
										Element:span
											The response should be an object of:
										Element:span
											url: <string>
										Element:span
											method: <string> # 'GET', 'POST', 'PATCH', 'PUT', 'DELETE'
										Element:span
											auth: <array> # [username, password]
										Element:span
											headers: <object>
										Element:span
											params: <object> # this will be mapped into the query string
										Element:span
											data: <string> or null # request body: optional if POST, not needed if GET
										Element:span
											*/
										Element:span
											return
										Element:span
											{
										Element:span
											url
										Element:span
											:
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											.
										Element:span
											url
										Element:span
											,
										Element:span
											method
										Element:span
											:
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											.
										Element:span
											method
										Element:span
											,
										Element:span
											auth
										Element:span
											:
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											.
										Element:span
											auth
										Element:span
											,
										Element:span
											headers
										Element:span
											:
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											.
										Element:span
											headers
										Element:span
											,
										Element:span
											params
										Element:span
											:
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											.
										Element:span
											params
										Element:span
											,
										Element:span
											data
										Element:span
											:
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											.
										Element:span
											data
										Element:span
											};
										Element:span
											// or return bundle.request;
										Element:span
											}
										Element:span
											}
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:code
											ACTION_KEY_post_custom_action_fields
											- runs after the response for custom fields is received.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											var
										Element:span
											Zap
										Element:span
											=
										Element:span
											{
										Element:span
											ACTION_KEY_post_custom_action_fields
										Element:span
											:
										Element:span
											function
										Element:span
											(
										Element:span
											bundle
										Element:span
											)
										Element:span
											{
										Element:span
											/*
										Element:span
											Argument:
										Element:span
											bundle.response.status_code: <integer>
										Element:span
											bundle.response.headers: <object>
										Element:span
											bundle.response.content: <str>
										Element:span
											bundle.request: <original object from ACTION_KEY_pre_custom_action_fields bundle>
										Element:span
											bundle.url_raw: <string>
										Element:span
											bundle.auth_fields: <object>
										Element:span
											bundle.zap: <object> # info about the zap
										Element:span
											The response should be JSON serializable:
										Element:span
											[
										Element:span
											# `type` can be unicode, int, bool
										Element:span
											# `key` should be unique, and will be the "key" in "key: value" in the POST
										Element:span
											# `help_text` and `label` are also available
										Element:span
											{'type': <str>, 'key': <str>}
										Element:span
											]
										Element:span
											*/
										Element:span
											return
										Element:span
											[];
										Element:span
											// return fields in the order you want them displayed in the UI. They'll be appended after the regular action fields
										Element:span
											}
										Element:span
											}
									Node:
									(type) c
									(layer)3
										Element:a
									Node:
									(type) c
									(layer)3
										Element:h2
											Search Methods
										Element:a
											#
									Node:
									(type) c
									(layer)3
										Element:p
											Search methods follow a naming pattern of key + method name, where key is the key given to the search when you created it. Below, we use the convention of
										Element:code
											SEARCH_KEY
											as the placeholder for the search's actual key. For example, if you define an search with the key "my_search" and you want to implement the pre_search method, you would write a method called
										Element:code
											my_search_pre_search
											.
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:code
											SEARCH_KEY_pre_search
											- runs before the request to the search URL, can modify the request before it is sent.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											var
										Element:span
											Zap
										Element:span
											=
										Element:span
											{
										Element:span
											SEARCH_KEY_pre_search
										Element:span
											:
										Element:span
											function
										Element:span
											(
										Element:span
											bundle
										Element:span
											)
										Element:span
											{
										Element:span
											/*
										Element:span
											Argument:
										Element:span
											bundle.request.url: <string>
										Element:span
											bundle.request.method: <string> # 'POST'
										Element:span
											bundle.request.auth: <array> # [username, password]
										Element:span
											bundle.request.headers: <object>
										Element:span
											bundle.request.params: <object> # this will be mapped into the querystring
										Element:span
											bundle.request.data: <string> # str or null
										Element:span
											bundle.url_raw: <string>
										Element:span
											bundle.auth_fields: <object>
										Element:span
											bundle.search_fields: <object> # pruned and replaced users' fields
										Element:span
											bundle.zap: <object> # info about the zap
										Element:span
											The response should be an object of:
										Element:span
											url: <string>
										Element:span
											method: <string> # 'GET', 'POST', 'PATCH', 'PUT', 'DELETE'
										Element:span
											auth: <array> # [username, password]
										Element:span
											headers: <object>
										Element:span
											params: <object> # this will be mapped into the query string
										Element:span
											data: <string> or null # request body: optional if POST, not needed if GET
										Element:span
											*/
										Element:span
											return
										Element:span
											{
										Element:span
											url
										Element:span
											:
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											.
										Element:span
											url
										Element:span
											,
										Element:span
											method
										Element:span
											:
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											.
										Element:span
											method
										Element:span
											,
										Element:span
											auth
										Element:span
											:
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											.
										Element:span
											auth
										Element:span
											,
										Element:span
											headers
										Element:span
											:
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											.
										Element:span
											headers
										Element:span
											,
										Element:span
											params
										Element:span
											:
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											.
										Element:span
											params
										Element:span
											,
										Element:span
											data
										Element:span
											:
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											.
										Element:span
											data
										Element:span
											};
										Element:span
											// or return bundle.request;
										Element:span
											}
										Element:span
											}
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:code
											SEARCH_KEY_post_search
											- runs after we receive a response from the search endpoint, can modify the response (and clarify murky errors).
										Element:em
											Note:
											The output of the method is
										Element:em
											not
											exactly what the user sees. We follow searches up with requests for the individual resources and present the user with the output from those follow-up requests. If you wish to modify the number (or ordering) of the search results, use
										Element:code
											_post_search
											. If you wish to modify the data the user sees, use
										Element:code
											_post_read_resource
											. One other thing to be aware of is that searches must return an
										Element:em
											array
											of objects, so if your search endpoint returns a single object, you can use this method to wrap your object in an array.
									Node:
									(type) c
									(layer)3
										Element:blockquote
										Element:p
											Note we'll only use the first object in the array for now, so if you can add optional fields to help narrow the search down, it's a great idea.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											var
										Element:span
											Zap
										Element:span
											=
										Element:span
											{
										Element:span
											SEARCH_KEY_post_search
										Element:span
											:
										Element:span
											function
										Element:span
											(
										Element:span
											bundle
										Element:span
											)
										Element:span
											{
										Element:span
											/*
										Element:span
											Argument:
										Element:span
											bundle.response.status_code: <integer>
										Element:span
											bundle.response.headers: <object>
										Element:span
											bundle.response.content: <str>
										Element:span
											bundle.auth_fields: <object>
										Element:span
											bundle.search_fields: <object> # pruned and replaced users' fields
										Element:span
											bundle.request: <original object from SEARCH_KEY_pre_search bundle>
										Element:span
											bundle.zap: <object> # info about the zap
										Element:span
											The response is an array, which may contain zero or more matches.
										Element:span
											If multiple matches are found, sort the array with the "best match" first.
										Element:span
											Use the available exceptions to vary errors.
										Element:span
											*/
										Element:span
											return
										Element:span
											[
										Element:span
											];
										Element:span
											// no matches
										Element:span
											/* --- or --- */
										Element:span
											return
										Element:span
											[
										Element:span
											{
										Element:span
											...
										Element:span
											}
										Element:span
											];
										Element:span
											// return a single match
										Element:span
											/* --- or --- */
										Element:span
											return
										Element:span
											[
										Element:span
											{
										Element:span
											...
										Element:span
											},
										Element:span
											{
										Element:span
											...
										Element:span
											},
										Element:span
											...
										Element:span
											];
										Element:span
											// several matches, with "best match" first
										Element:span
											}
										Element:span
											}
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:code
											SEARCH_KEY_search
											- runs in place of pre_search and post_search. You get a bundle and are expected to make the request and return the appropriate response. Note: The output of the method is not exactly what the user sees. We follow searches up with requests for the individual resources and present the user with the output from those follow-up requests. If you wish to modify the number (or ordering) of the search results, you can do that inside
										Element:code
											_search
											. If you wish to modify the data the user sees, use
										Element:code
											_post_read_resource
											.
									Node:
									(type) c
									(layer)3
										Element:blockquote
										Element:p
											Note we'll only use the first object in the array for now, so if you can add optional fields to help narrow the search down, it's a great idea.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											var
										Element:span
											Zap
										Element:span
											=
										Element:span
											{
										Element:span
											SEARCH_KEY_search
										Element:span
											:
										Element:span
											function
										Element:span
											(
										Element:span
											bundle
										Element:span
											,
										Element:span
											[
										Element:span
											callback
										Element:span
											])
										Element:span
											{
										Element:span
											/*
										Element:span
											Arguments:
										Element:span
											bundle.request.url: <string>
										Element:span
											bundle.request.method: <string> # 'POST'
										Element:span
											bundle.request.auth: <array> # [username, password]
										Element:span
											bundle.request.headers: <object>
										Element:span
											bundle.request.params: <object> # this will be mapped into the querystring
										Element:span
											bundle.request.data: <string> # str or null
										Element:span
											bundle.url_raw: <string>
										Element:span
											bundle.auth_fields: <object>
										Element:span
											bundle.search_fields: <object> # pruned and replaced users' fields
										Element:span
											bundle.zap: <object> # info about the zap
										Element:span
											If you include a callback in the arguments, you can also perform async:
										Element:span
											callback(err, response)
										Element:span
											The response will be used to give the user more fields to use
										Element:span
											in the next step of the Zap. Please return a JSON serializable object.
										Element:span
											*/
										Element:span
											return
										Element:span
											{...};
										Element:span
											// or callback(null, {...})
										Element:span
											}
										Element:span
											}
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:code
											SEARCH_KEY_pre_custom_search_fields
											- runs before the request to the custom field URL (if provided).
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											var
										Element:span
											Zap
										Element:span
											=
										Element:span
											{
										Element:span
											SEARCH_KEY_pre_custom_search_fields
										Element:span
											:
										Element:span
											function
										Element:span
											(
										Element:span
											bundle
										Element:span
											)
										Element:span
											{
										Element:span
											/*
										Element:span
											Argument:
										Element:span
											bundle.request.url: <string>
										Element:span
											bundle.request.method: <string> # 'POST'
										Element:span
											bundle.request.auth: <array> # [username, password]
										Element:span
											bundle.request.headers: <object>
										Element:span
											bundle.request.params: <object> # this will be mapped into the querystring
										Element:span
											bundle.request.data: <string> # str or null
										Element:span
											bundle.url_raw: <string>
										Element:span
											bundle.auth_fields: <object>
										Element:span
											bundle.search_fields: <object> # the raw search fields (if applicable)
										Element:span
											bundle.zap: <object> # info about the zap (details below)
										Element:span
											The response should be an object of:
										Element:span
											url: <string>
										Element:span
											method: <string> # 'GET', 'POST', 'PATCH', 'PUT', 'DELETE'
										Element:span
											auth: <array> # [username, password]
										Element:span
											headers: <object>
										Element:span
											params: <object> # this will be mapped into the query string
										Element:span
											data: <string> or null # request body: optional if POST, not needed if GET
										Element:span
											*/
										Element:span
											return
										Element:span
											{
										Element:span
											url
										Element:span
											:
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											.
										Element:span
											url
										Element:span
											,
										Element:span
											method
										Element:span
											:
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											.
										Element:span
											method
										Element:span
											,
										Element:span
											auth
										Element:span
											:
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											.
										Element:span
											auth
										Element:span
											,
										Element:span
											headers
										Element:span
											:
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											.
										Element:span
											headers
										Element:span
											,
										Element:span
											params
										Element:span
											:
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											.
										Element:span
											params
										Element:span
											,
										Element:span
											data
										Element:span
											:
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											.
										Element:span
											data
										Element:span
											};
										Element:span
											// or return bundle.request;
										Element:span
											}
										Element:span
											}
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:code
											SEARCH_KEY_post_custom_search_fields
											- runs after the response for custom fields is received.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											var
										Element:span
											Zap
										Element:span
											=
										Element:span
											{
										Element:span
											SEARCH_KEY_post_custom_search_fields
										Element:span
											:
										Element:span
											function
										Element:span
											(
										Element:span
											bundle
										Element:span
											)
										Element:span
											{
										Element:span
											/*
										Element:span
											Argument:
										Element:span
											bundle.response.status_code: <integer>
										Element:span
											bundle.response.headers: <object>
										Element:span
											bundle.response.content: <str>
										Element:span
											bundle.request: <original object from SEARCH_KEY_pre_custom_search_fields bundle>
										Element:span
											bundle.url_raw: <string>
										Element:span
											bundle.auth_fields: <object>
										Element:span
											bundle.zap: <object> # info about the zap
										Element:span
											The response should be JSON serializable:
										Element:span
											[
										Element:span
											# `type` can be unicode, int, bool
										Element:span
											# `key` should be unique, and will be the "key" in "key: value" in the POST
										Element:span
											# `help_text` and `label` are also available
										Element:span
											{'type': <str>, 'key': <str>}
										Element:span
											]
										Element:span
											*/
										Element:span
											return
										Element:span
											[];
										Element:span
											// return fields in the order you want them displayed in the UI. They'll be appended after the regular search fields
										Element:span
											}
										Element:span
											}
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:code
											SEARCH_KEY_pre_read_resource
											- runs before we do the request to read an individual resource. Use to modify the request before it is sent.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											var
										Element:span
											Zap
										Element:span
											=
										Element:span
											{
										Element:span
											SEARCH_KEY_pre_read_resource
										Element:span
											:
										Element:span
											function
										Element:span
											(
										Element:span
											bundle
										Element:span
											)
										Element:span
											{
										Element:span
											/*
										Element:span
											Argument:
										Element:span
											bundle.request.url: <string>
										Element:span
											bundle.request.method: <string> # 'GET'
										Element:span
											bundle.request.auth: <array> # [username, password]
										Element:span
											bundle.request.headers: <object>
										Element:span
											bundle.request.params: <object> # this will be mapped into the querystring
										Element:span
											bundle.request.data: <string> # str or null
										Element:span
											bundle.url_raw: <string>
										Element:span
											bundle.auth_fields: <object>
										Element:span
											bundle.read_fields: <object> # the response data from the search (or the write in case of search-or-create)
										Element:span
											bundle.read_context: <object> # the original params passed into the search (or the write in case of search-or-write)
										Element:span
											bundle.zap: <object> # info about the zap (details below)
										Element:span
											The response should be an object of:
										Element:span
											url: <string>
										Element:span
											method: <string> # 'GET', 'POST', 'PATCH', 'PUT', 'DELETE'
										Element:span
											auth: <array> # [username, password]
										Element:span
											headers: <object>
										Element:span
											params: <object> # this will be mapped into the query string
										Element:span
											data: <string> or null # request body: optional if POST, not needed if GET
										Element:span
											*/
										Element:span
											return
										Element:span
											{
										Element:span
											url
										Element:span
											:
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											.
										Element:span
											url
										Element:span
											,
										Element:span
											method
										Element:span
											:
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											.
										Element:span
											method
										Element:span
											,
										Element:span
											auth
										Element:span
											:
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											.
										Element:span
											auth
										Element:span
											,
										Element:span
											headers
										Element:span
											:
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											.
										Element:span
											headers
										Element:span
											,
										Element:span
											params
										Element:span
											:
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											.
										Element:span
											params
										Element:span
											,
										Element:span
											data
										Element:span
											:
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											.
										Element:span
											data
										Element:span
											};
										Element:span
											// or return bundle.request;
										Element:span
											}
										Element:span
											}
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:code
											SEARCH_KEY_post_read_resource
											- runs after we do the request to read an individual resource. Use to modify the data returned.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											var
										Element:span
											Zap
										Element:span
											=
										Element:span
											{
										Element:span
											SEARCH_KEY_post_read_resource
										Element:span
											:
										Element:span
											function
										Element:span
											(
										Element:span
											bundle
										Element:span
											)
										Element:span
											{
										Element:span
											/*
										Element:span
											Argument:
										Element:span
											bundle.response.status_code: <integer>
										Element:span
											bundle.response.headers: <object>
										Element:span
											bundle.response.content: <str>
										Element:span
											bundle.request: <original object from SEARCH_KEY_pre_read_resource bundle>
										Element:span
											bundle.url_raw: <string>
										Element:span
											bundle.auth_fields: <object>
										Element:span
											bundle.read_fields: <object> # the response data from the search (or the write in case of search-or-create)
										Element:span
											bundle.read_context: <object> # the original params passed into the search (or the write in case of search-or-write)
										Element:span
											bundle.zap: <object> # info about the zap
										Element:span
											The response will be used to give the user more fields to use
										Element:span
											in the next step of the Zap. Please return a JSON serializable object.
										Element:span
											return <object>;
										Element:span
											*/
										Element:span
											return
										Element:span
											{...};
										Element:span
											}
										Element:span
											}
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:code
											SEARCH_KEY_read_resource
											- runs in place of pre_read_resource and post_read_resource. You get a bundle and are expected to make the request and return the appropriate response.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											var
										Element:span
											Zap
										Element:span
											=
										Element:span
											{
										Element:span
											SEARCH_KEY_read_resource
										Element:span
											:
										Element:span
											function
										Element:span
											(
										Element:span
											bundle
										Element:span
											,
										Element:span
											[
										Element:span
											callback
										Element:span
											])
										Element:span
											{
										Element:span
											/*
										Element:span
											Arguments:
										Element:span
											bundle.request.url: <string>
										Element:span
											bundle.request.method: <string> # 'POST'
										Element:span
											bundle.request.auth: <array> # [username, password]
										Element:span
											bundle.request.headers: <object>
										Element:span
											bundle.request.params: <object> # this will be mapped into the querystring
										Element:span
											bundle.request.data: <string> # str or null
										Element:span
											bundle.url_raw: <string>
										Element:span
											bundle.auth_fields: <object>
										Element:span
											bundle.read_fields: <object> # the response data from the search (or the write in case of search-or-create)
										Element:span
											bundle.read_context: <object> # the original params passed into the search (or the write in case of search-or-write)
										Element:span
											bundle.zap: <object> # info about the zap
										Element:span
											If you include a callback in the arguments, you can also perform async:
										Element:span
											callback(err, response)
										Element:span
											The response should be an object representing the resource. Can also use the available exceptions to vary errors.
										Element:span
											*/
										Element:span
											return
										Element:span
											{...};
										Element:span
											// or callback(null, {...})
										Element:span
											}
										Element:span
											}
									Node:
									(type) c
									(layer)3
										Element:a
									Node:
									(type) c
									(layer)3
										Element:h2
											Authentication Methods
										Element:a
											#
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:code
											pre_oauthv2_token
											- modify the request we'd send to the access token endpoint.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											var
										Element:span
											Zap
										Element:span
											=
										Element:span
											{
										Element:span
											pre_oauthv2_token
										Element:span
											:
										Element:span
											function
										Element:span
											(
										Element:span
											bundle
										Element:span
											)
										Element:span
											{
										Element:span
											/*
										Element:span
											Argument:
										Element:span
											bundle.request.url: <string>
										Element:span
											bundle.request.method: <string> # 'GET'
										Element:span
											bundle.request.headers: <object>
										Element:span
											bundle.request.params: <object> # this will be mapped into the querystring
										Element:span
											bundle.request.data: <object>
										Element:span
											bundle.oauth_data: <object> # obj that contains your client_id, client_secret, etc...
										Element:span
											bundle.load: <object> # the params set to be sent as form/query string...
										Element:span
											bundle.zap: <object> # info about the zap
										Element:span
											The response should be an object of:
										Element:span
											url: <string>
										Element:span
											method: <string> # 'GET', 'POST', 'PATCH', 'PUT', 'DELETE'
										Element:span
											headers: <object>
										Element:span
											params: <object> # this will be mapped into the query string
										Element:span
											data: <string> or null # request body: optional if POST, not needed if GET
										Element:span
											*/
										Element:span
											return
										Element:span
											{
										Element:span
											url
										Element:span
											:
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											.
										Element:span
											url
										Element:span
											,
										Element:span
											method
										Element:span
											:
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											.
										Element:span
											method
										Element:span
											,
										Element:span
											headers
										Element:span
											:
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											.
										Element:span
											headers
										Element:span
											,
										Element:span
											params
										Element:span
											:
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											.
										Element:span
											params
										Element:span
											,
										Element:span
											data
										Element:span
											:
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											.
										Element:span
											data
										Element:span
											};
										Element:span
											// or return bundle.request;
										Element:span
											}
										Element:span
											}
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:code
											post_oauthv2_token
											- modify the response from the access token endpoint.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											var
										Element:span
											Zap
										Element:span
											=
										Element:span
											{
										Element:span
											post_oauthv2_token
										Element:span
											:
										Element:span
											function
										Element:span
											(
										Element:span
											bundle
										Element:span
											)
										Element:span
											{
										Element:span
											/*
										Element:span
											Argument:
										Element:span
											bundle.response.status_code: <integer>
										Element:span
											bundle.response.headers: <object>
										Element:span
											bundle.response.content: <str>
										Element:span
											*/
										Element:span
											// If you have defined extra fields besides access_token
										Element:span
											// and refresh_token in the Extra Requested Fields setup,
										Element:span
											// you may return them here as well.
										Element:span
											return
										Element:span
											JSON
										Element:span
											.
										Element:span
											parse
										Element:span
											(
										Element:span
											bundle
										Element:span
											.
										Element:span
											response
										Element:span
											.
										Element:span
											content
										Element:span
											);
										Element:span
											}
										Element:span
											}
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:code
											pre_oauthv2_refresh
											- modify the request we'd send to the refresh token endpoint. Only use if you have set the auth type for your App to be OAuth V2 with Refresh.
									Node:
									(type) c
									(layer)3
										Element:pre
										Element:span
											var
										Element:span
											Zap
										Element:span
											=
										Element:span
											{
										Element:span
											pre_oauthv2_refresh
										Element:span
											:
										Element:span
											function
										Element:span
											(
										Element:span
											bundle
										Element:span
											)
										Element:span
											{
										Element:span
											/*
										Element:span
											Argument:
										Element:span
											bundle.request.url: <string>
										Element:span
											bundle.request.method: <string> # 'GET'
										Element:span
											bundle.request.headers: <object>
										Element:span
											bundle.request.params: <object> # this will be mapped into the querystring
										Element:span
											bundle.request.data: <object>
										Element:span
											bundle.auth_fields: <object>
										Element:span
											bundle.oauth_data: <object> # obj that contains your client_id, client_secret, etc...
										Element:span
											bundle.load: <object> # the params set to be sent as form/query string...
										Element:span
											bundle.zap: <object> # info about the zap
										Element:span
											The response should be an object of:
										Element:span
											url: <string>
										Element:span
											method: <string> # 'GET', 'POST', 'PATCH', 'PUT', 'DELETE'
										Element:span
											headers: <object>
										Element:span
											params: <object> # this will be mapped into the query string
										Element:span
											data: <string> or null # request body: optional if POST, not needed if GET
										Element:span
											*/
										Element:span
											return
										Element:span
											{
										Element:span
											url
										Element:span
											:
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											.
										Element:span
											url
										Element:span
											,
										Element:span
											method
										Element:span
											:
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											.
										Element:span
											method
										Element:span
											,
										Element:span
											headers
										Element:span
											:
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											.
										Element:span
											headers
										Element:span
											,
										Element:span
											params
										Element:span
											:
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											.
										Element:span
											params
										Element:span
											,
										Element:span
											data
										Element:span
											:
										Element:span
											bundle
										Element:span
											.
										Element:span
											request
										Element:span
											.
										Element:span
											data
										Element:span
											};
										Element:span
											// or return bundle.request;
										Element:span
											}
										Element:span
											}
									Node:
									(type) c
									(layer)3
										Element:ul
										Element:li
										Element:p
										Element:code
											Session Authentication
											: Zapier exposes a
										Element:code
											get_session_info()
											function for APIs that require any form of session-based authorization. Feel free to use the following skeleton function to inspire your session authorization:
										Element:p
											Zapier will only invoke this function on an as-needed basis. That means, in your
										Element:code
											KEY_post_poll
											or
										Element:code
											KEY_post_write
											functions, you should raise an
										Element:code
											InvalidSessionException
											when your API denies a request due to missing or stale session credentials. Zapier will then call the following function and retry the request.
									Node:
									(type) c
									(layer)3
										Element:pre
											â†‘ Was this documentation useful?
										Element:span
											Zap
										Element:span
											=
										Element:span
											{
										Element:span
											get_session_info
										Element:span
											:
										Element:span
											function
										Element:span
											(
										Element:span
											bundle
										Element:span
											)
										Element:span
											{
										Element:span
											/*
										Element:span
											Argument:
										Element:span
											bundle.request.url: <string>
										Element:span
											bundle.request.headers: <object>
										Element:span
											bundle.request.params: <object> # this will be mapped into the querystring
										Element:span
											bundle.request.data: <object>
										Element:span
											bundle.auth_fields: <object>
										Element:span
											bundle.zap: <object> # info about the zap
										Element:span
											*/
										Element:span
											// Make z.request calls as needed.
										Element:span
											// Returned object will be mixed into bundle.auth_fields in future calls.
										Element:span
											return
										Element:span
											{
										Element:span
											'api_key'
										Element:span
											:
										Element:span
											api_key
										Element:span
											};
										Element:span
											}
										Element:span
											};
									Node:
									(type) c
									(layer)3
										Element:span
										Element:a
											Yes
										Element:a
											No
									Node:
									(type) c
									(layer)3
										Element:a
			Node:
			(type) h1
			(layer)1
				Element:h1
					Built-in Functions, Tools & Meta Information
				Element:a
					#
			Node:
			(type) c
			(layer)1
				Element:a
			Node:
			(type) c
			(layer)1
				Element:h2
					Available Libraries
				Element:a
					#
			Node:
			(type) c
			(layer)1
				Element:p
					Our scripting engine uses JavaScript. As you'd expect, it provides the standard JavaScript interfaces (JSON, Math, Date and more) as well as
				Element:code
					$
					for jQuery (1.8.3),
				Element:code
					_
					for Underscore (1.4.4), and
				Element:code
					moment
					for Moment.js (2.0.0 with timezone),
				Element:code
					crypto
					, and
				Element:code
					async
					(0.2.9). Plus, it has some handy Zapier specific tools on the
				Element:code
					z
					object!
			Node:
			(type) c
			(layer)1
				Element:a
			Node:
			(type) c
			(layer)1
				Element:h2
					Unavailable Objects
				Element:a
					#
			Node:
			(type) c
			(layer)1
				Element:p
					Some "common" objects you might expect to find we don't provide access to include
				Element:code
					root
					,
				Element:code
					child_process
					,
				Element:code
					Function
					,
				Element:code
					module
					,
				Element:code
					process
					,
				Element:code
					global
					, and
				Element:code
					setInterval
					(they'll be
				Element:code
					undefined
					at runtime).
			Node:
			(type) c
			(layer)1
				Element:a
			Node:
			(type) c
			(layer)1
				Element:h2
					Making Outbound Requests (z.request)
				Element:a
					#
			Node:
			(type) c
			(layer)1
				Element:p
					The
				Element:code
					z.request
					function allows you to make external calls. It performs in a synchronous manner for ease of use, but also provides standard asynchronous features as well if you pass an optional callback.
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					z.request(request, [callback])
			Node:
			(type) c
			(layer)1
				Element:p
					It takes a required argument called
				Element:code
					request
					(which matches what
				Element:code
					bundle.request
					gives in most other examples):
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
					var
				Element:span
					request
				Element:span
					=
				Element:span
					{
				Element:span
					'method'
				Element:span
					:
				Element:span
					'POST'
				Element:span
					,
				Element:span
					'url'
				Element:span
					:
				Element:span
					'http://example.com/'
				Element:span
					,
				Element:span
					'params'
				Element:span
					:
				Element:span
					{
				Element:span
					'query'
				Element:span
					:
				Element:span
					'string'
				Element:span
					,
				Element:span
					'page'
				Element:span
					:
				Element:span
					'1'
				Element:span
					},
				Element:span
					'headers'
				Element:span
					:
				Element:span
					{
				Element:span
					'Content-Type'
				Element:span
					:
				Element:span
					'application/content'
				Element:span
					,
				Element:span
					'Accept'
				Element:span
					:
				Element:span
					'application/json'
				Element:span
					},
				Element:span
					'auth'
				Element:span
					:
				Element:span
					[
				Element:span
					'username'
				Element:span
					,
				Element:span
					'password'
				Element:span
					],
				Element:span
					'data'
				Element:span
					:
				Element:span
					'{"hello":"world!"}'
				Element:span
					};
			Node:
			(type) c
			(layer)1
				Element:p
					The
				Element:code
					callback
					argument is optional, but will be called with a standard
				Element:code
					callback(err, response)
					.
			Node:
			(type) c
			(layer)1
				Element:p
					The returned
				Element:code
					response
					object is fairly simple (and matches what
				Element:code
					bundle.response
					is in all other examples):
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
					{
				Element:span
					"status_code"
				Element:span
					:
				Element:span
					200
				Element:span
					,
				Element:span
					"headers"
				Element:span
					:
				Element:span
					{
				Element:span
					"Connection"
				Element:span
					:
				Element:span
					"close"
				Element:span
					,
				Element:span
					"Content-Type"
				Element:span
					:
				Element:span
					"application/content"
				Element:span
					,
				Element:span
					"Content-Length"
				Element:span
					:
				Element:span
					"18"
				Element:span
					},
				Element:span
					"content"
				Element:span
					:
				Element:span
					"{\"hello\":\"world!\"}"
				Element:span
					}
			Node:
			(type) c
			(layer)1
				Element:p
					Here is a simple example:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
					// let's call http://httpbin.org/get?hello=world with an extra header
				Element:span
					var
				Element:span
					request
				Element:span
					=
				Element:span
					{
				Element:span
					'method'
				Element:span
					:
				Element:span
					'GET'
				Element:span
					,
				Element:span
					'url'
				Element:span
					:
				Element:span
					'http://httpbin.org/get'
				Element:span
					,
				Element:span
					'params'
				Element:span
					:
				Element:span
					{
				Element:span
					'hello'
				Element:span
					:
				Element:span
					'world'
				Element:span
					},
				Element:span
					'headers'
				Element:span
					:
				Element:span
					{
				Element:span
					'Accept'
				Element:span
					:
				Element:span
					'application/json'
				Element:span
					},
				Element:span
					'auth'
				Element:span
					:
				Element:span
					null
				Element:span
					,
				Element:span
					'data'
				Element:span
					:
				Element:span
					null
				Element:span
					};
				Element:span
					// perform synchronously
				Element:span
					var
				Element:span
					response
				Element:span
					=
				Element:span
					z
				Element:span
					.
				Element:span
					request
				Element:span
					(
				Element:span
					request
				Element:span
					);
				Element:span
					console
				Element:span
					.
				Element:span
					log
				Element:span
					(
				Element:span
					'Status: '
				Element:span
					+
				Element:span
					response
				Element:span
					.
				Element:span
					status_code
				Element:span
					);
				Element:span
					console
				Element:span
					.
				Element:span
					log
				Element:span
					(
				Element:span
					'Headers: '
				Element:span
					+
				Element:span
					JSON
				Element:span
					.
				Element:span
					stringify
				Element:span
					(
				Element:span
					response
				Element:span
					.
				Element:span
					headers
				Element:span
					));
				Element:span
					console
				Element:span
					.
				Element:span
					log
				Element:span
					(
				Element:span
					'Content/Body: '
				Element:span
					+
				Element:span
					response
				Element:span
					.
				Element:span
					content
				Element:span
					);
				Element:span
					// perform asynchronously
				Element:span
					z
				Element:span
					.
				Element:span
					request
				Element:span
					(
				Element:span
					request
				Element:span
					,
				Element:span
					function
				Element:span
					(
				Element:span
					err
				Element:span
					,
				Element:span
					response
				Element:span
					){
				Element:span
					console
				Element:span
					.
				Element:span
					log
				Element:span
					(
				Element:span
					'Status: '
				Element:span
					+
				Element:span
					response
				Element:span
					.
				Element:span
					status_code
				Element:span
					);
				Element:span
					console
				Element:span
					.
				Element:span
					log
				Element:span
					(
				Element:span
					'Headers: '
				Element:span
					+
				Element:span
					JSON
				Element:span
					.
				Element:span
					stringify
				Element:span
					(
				Element:span
					response
				Element:span
					.
				Element:span
					headers
				Element:span
					));
				Element:span
					console
				Element:span
					.
				Element:span
					log
				Element:span
					(
				Element:span
					'Content/Body: '
				Element:span
					+
				Element:span
					response
				Element:span
					.
				Element:span
					content
				Element:span
					);
				Element:span
					});
			Node:
			(type) c
			(layer)1
				Element:p
					Please note that you only have about 30 seconds to make all your requests and return. So don't take too long!
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					If you need to do lots of extra API calls, especially in a loop, you should look our hydration routine.
			Node:
			(type) c
			(layer)1
				Element:a
			Node:
			(type) c
			(layer)1
				Element:h2
					Hashing
				Element:a
					#
			Node:
			(type) c
			(layer)1
				Element:p
					We support both hashing and HMAC hashing.
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
					// z.hash(algorithm, string, encoding="hex", input_encoding="binary")
				Element:span
					var
				Element:span
					hash
				Element:span
					=
				Element:span
					z
				Element:span
					.
				Element:span
					hash
				Element:span
					(
				Element:span
					'sha256'
				Element:span
					,
				Element:span
					"my awesome string"
				Element:span
					);
				Element:span
					// z.hmac(algorithm, key, string, encoding="hex")
				Element:span
					var
				Element:span
					hmac_hash
				Element:span
					=
				Element:span
					z
				Element:span
					.
				Element:span
					hmac
				Element:span
					(
				Element:span
					'sha256'
				Element:span
					,
				Element:span
					'key'
				Element:span
					,
				Element:span
					'string'
				Element:span
					);
				Element:span
					// Node.js crypto's library does not officially document using input encodings with hmac, but you can do the following:
				Element:span
					var
				Element:span
					crypto
				Element:span
					=
				Element:span
					require
				Element:span
					(
				Element:span
					'crypto'
				Element:span
					);
				Element:span
					crypto
				Element:span
					.
				Element:span
					createHmac
				Element:span
					(
				Element:span
					'sha256'
				Element:span
					,
				Element:span
					'key'
				Element:span
					).
				Element:span
					update
				Element:span
					(
				Element:span
					'string'
				Element:span
					,
				Element:span
					'input_encoding'
				Element:span
					).
				Element:span
					digest
				Element:span
					(
				Element:span
					'encoding'
				Element:span
					);
			Node:
			(type) c
			(layer)1
				Element:p
					For output encoding (the
				Element:code
					encoding
					parameter) we default to
				Element:code
					hex
					and also support
				Element:code
					base64
					as a parameter value. For input encoding (the
				Element:code
					input_encoding
					parameter) we default to
				Element:code
					binary
					and also support
				Element:code
					utf8
					as a parameter value. You should use
				Element:code
					utf8
					if you expect data to be hashed that may include UTF8 characters.
			Node:
			(type) c
			(layer)1
				Element:p
					The following hash algorithms are supported:
			Node:
			(type) c
			(layer)1
				Element:p
				Element:code
					DSA-SHA1-old
					,
				Element:code
					dsa
					,
				Element:code
					dsa-sha
					,
				Element:code
					dsa-sha1
					,
				Element:code
					dsaEncryption
					,
				Element:code
					dsaWithSHA
					,
				Element:code
					dsaWithSHA1
					,
				Element:code
					dss1
					,
				Element:code
					ecdsa-with-SHA1
					,
				Element:code
					md4
					,
				Element:code
					md4WithRSAEncryption
					,
				Element:code
					md5
					,
				Element:code
					md5WithRSAEncryption
					,
				Element:code
					mdc2
					,
				Element:code
					mdc2WithRSA
					,
				Element:code
					ripemd
					,
				Element:code
					ripemd160
					,
				Element:code
					ripemd160WithRSA
					,
				Element:code
					rmd160
					,
				Element:code
					rsa-md4
					,
				Element:code
					rsa-md5
					,
				Element:code
					rsa-mdc2
					,
				Element:code
					rsa-ripemd160
					,
				Element:code
					rsa-sha
					,
				Element:code
					rsa-sha1
					,
				Element:code
					rsa-sha1-2
					,
				Element:code
					rsa-sha224
					,
				Element:code
					rsa-sha256
					,
				Element:code
					rsa-sha384
					,
				Element:code
					rsa-sha512
					,
				Element:code
					sha
					,
				Element:code
					sha1
					,
				Element:code
					sha224
					,
				Element:code
					sha256
					,
				Element:code
					sha384
					,
				Element:code
					sha512
					,
				Element:code
					ssl2-md5
					,
				Element:code
					ssl3-md5
					,
				Element:code
					ssl3-sha1
					,
				Element:code
					whirlpool
			Node:
			(type) c
			(layer)1
				Element:a
			Node:
			(type) c
			(layer)1
				Element:h2
					Base 64 Encoding
				Element:a
					#
			Node:
			(type) c
			(layer)1
				Element:p
					If you're looking to turn some text to base64 for something like Basic Auth or otherwise, use this simple function available from Node.js:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
					var
				Element:span
					b64data
				Element:span
					=
				Element:span
					btoa
				Element:span
					(
				Element:span
					"this is my string to turn into base64"
				Element:span
					);
			Node:
			(type) c
			(layer)1
				Element:a
			Node:
			(type) c
			(layer)1
				Element:h2
					Hydration & Dehydration
				Element:a
					#
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Hydration & dehydration is an experimental feature! Contact us if you need a hand at
				Element:a
					contact@zapier.com
					.
			Node:
			(type) c
			(layer)1
				Element:p
					Dehydration is what we call the creation of a pointer to some data, this is what you'll normally use to provide data that may not be needed now but could the future.
			Node:
			(type) c
			(layer)1
				Element:p
					Hydration is the opposite of dehydration. It is the consumption of a pointer that returns data. Let's show an example!
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
					var
				Element:span
					Zap
				Element:span
					=
				Element:span
					{
				Element:span
					get_contact
				Element:span
					:
				Element:span
					function
				Element:span
					(
				Element:span
					bundle
				Element:span
					)
				Element:span
					{
				Element:span
					/*
				Element:span
					Argument:
				Element:span
					bundle.auth_fields: <object>
				Element:span
					bundle.zap: <object> # info about the zap
				Element:span
					Anything else you might need, like bundle.request.headers, will need to be passed in when you call z.dehydrate()
				Element:span
					*/
				Element:span
					var
				Element:span
					contact
				Element:span
					=
				Element:span
					JSON
				Element:span
					.
				Element:span
					parse
				Element:span
					(
				Element:span
					z
				Element:span
					.
				Element:span
					request
				Element:span
					({
				Element:span
					method
				Element:span
					:
				Element:span
					'GET'
				Element:span
					,
				Element:span
					url
				Element:span
					:
				Element:span
					'https://api.fancycrm.com/v1/contacts/'
				Element:span
					+
				Element:span
					bundle
				Element:span
					.
				Element:span
					contact_id
				Element:span
					+
				Element:span
					'.json'
				Element:span
					,
				Element:span
					auth
				Element:span
					:
				Element:span
					[
				Element:span
					bundle
				Element:span
					.
				Element:span
					auth_fields
				Element:span
					.
				Element:span
					api_key
				Element:span
					,
				Element:span
					''
				Element:span
					]
				Element:span
					// you'll need to handle auth
				Element:span
					}).
				Element:span
					content
				Element:span
					)
				Element:span
					||
				Element:span
					{};
				Element:span
					return
				Element:span
					contact
				Element:span
					;
				Element:span
					},
				Element:span
					deal_post_poll
				Element:span
					:
				Element:span
					function
				Element:span
					(
				Element:span
					bundle
				Element:span
					)
				Element:span
					{
				Element:span
					var
				Element:span
					deals
				Element:span
					=
				Element:span
					JSON
				Element:span
					.
				Element:span
					parse
				Element:span
					(
				Element:span
					bundle
				Element:span
					.
				Element:span
					response
				Element:span
					.
				Element:span
					content
				Element:span
					);
				Element:span
					return
				Element:span
					_
				Element:span
					.
				Element:span
					map
				Element:span
					(
				Element:span
					deals
				Element:span
					,
				Element:span
					function
				Element:span
					(
				Element:span
					deal
				Element:span
					)
				Element:span
					{
				Element:span
					// this delays Zap.get_contact({contact_id: deal.contact_id, auth_fields: bundle_auth_fields})
				Element:span
					deal
				Element:span
					.
				Element:span
					contact
				Element:span
					=
				Element:span
					z
				Element:span
					.
				Element:span
					dehydrate
				Element:span
					(
				Element:span
					'get_contact'
				Element:span
					,
				Element:span
					{
				Element:span
					contact_id
				Element:span
					:
				Element:span
					deal
				Element:span
					.
				Element:span
					contact_id
				Element:span
					});
				Element:span
					return
				Element:span
					deal
				Element:span
					;
				Element:span
					});
				Element:span
					}
				Element:span
					};
			Node:
			(type) c
			(layer)1
				Element:p
					In the example above,
				Element:code
					get_contact
					will not be called when post_poll is called. Instead, a unique hash is created and stored in place of
				Element:code
					deal.contact
					.
			Node:
			(type) c
			(layer)1
				Element:p
					There are two scenarios when
				Element:code
					get_contact
					will then be called and "hydrated".
			Node:
			(type) c
			(layer)1
				Element:ol
				Element:li
				Element:p
					When a user is first setting up their Zap in the UI and accessing fields (because
				Element:code
					deal.contact
					may have keys to choose from on itself).
				Element:li
				Element:p
					When a user's Zap tries to send
				Element:code
					deal.contact
					out to another app.
			Node:
			(type) c
			(layer)1
				Element:a
			Node:
			(type) c
			(layer)1
				Element:h2
					Files
				Element:a
					#
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Files are an experimental feature! You can read more about files here:
				Element:a
					files reference
					.
			Node:
			(type) c
			(layer)1
				Element:a
			Node:
			(type) c
			(layer)1
				Element:h3
					Dehydrating Files
				Element:a
					#
			Node:
			(type) c
			(layer)1
				Element:p
					Dehydration is what we call the creation of a pointer to data, this is what you'll normally use in triggers to provide binary data out of band to Zapier. The idea is simple: you don't want to download all the attachments from all 100 records in a poll - that would take way too long and would be wasteful! So we offer a handy way to create pointers that we can consume "on-demand".
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
					// you can pass along urls and extra request information
				Element:span
					// important: dehydrateFile will not download the file immediately!
				Element:span
					// it just creates a pointer that our system understands so it can
				Element:span
					// get the file on demand if it is needed
				Element:span
					// if you just provide the url, we'll include any standard api
				Element:span
					// headers or querystrings you configure for oauth or similar
				Element:span
					var
				Element:span
					url
				Element:span
					=
				Element:span
					'https://example.com/test.txt'
				Element:span
					;
				Element:span
					var
				Element:span
					filePointer
				Element:span
					=
				Element:span
					z
				Element:span
					.
				Element:span
					dehydrateFile
				Element:span
					(
				Element:span
					url
				Element:span
					);
				Element:span
					// you can provide extra information about the request
				Element:span
					// but this will leave off any oauth or similar headers!
				Element:span
					var
				Element:span
					filePointer
				Element:span
					=
				Element:span
					z
				Element:span
					.
				Element:span
					dehydrateFile
				Element:span
					(
				Element:span
					url
				Element:span
					,
				Element:span
					{
				Element:span
					method
				Element:span
					:
				Element:span
					'post'
				Element:span
					,
				Element:span
					params
				Element:span
					:
				Element:span
					{
				Element:span
					custom
				Element:span
					:
				Element:span
					'param'
				Element:span
					},
				Element:span
					headers
				Element:span
					:
				Element:span
					{
				Element:span
					'X-Download-Key'
				Element:span
					:
				Element:span
					'abcdef1234567890'
				Element:span
					}
				Element:span
					},
				Element:span
					{
				Element:span
					name
				Element:span
					:
				Element:span
					'mytextfile.txt'
				Element:span
					,
				Element:span
					// if blank we will guess/inspect!
				Element:span
					length
				Element:span
					:
				Element:span
					123
				Element:span
					// if blank we will guess/inspect!
				Element:span
					});
			Node:
			(type) c
			(layer)1
				Element:a
			Node:
			(type) c
			(layer)1
				Element:h3
					Hydrating Files
				Element:a
					#
			Node:
			(type) c
			(layer)1
				Element:p
					The scripting portion of hydration in actions is incomplete - right now your API will need to adhere to our multipart pattern as described in our
				Element:a
					files reference documentation
					.
			Node:
			(type) c
			(layer)1
				Element:a
			Node:
			(type) c
			(layer)1
				Element:h2
					Bundle Details
				Element:a
					#
			Node:
			(type) c
			(layer)1
				Element:a
			Node:
			(type) c
			(layer)1
				Element:h3
					Raw URL via
				Element:code
					bundle.url_raw
				Element:a
					#
			Node:
			(type) c
			(layer)1
				Element:p
					The
				Element:code
					bundle.url_raw
					is simply the unrendered version of the URL with
				Element:code
					{{curlies}}
					still intact.
			Node:
			(type) c
			(layer)1
				Element:a
			Node:
			(type) c
			(layer)1
				Element:h3
					Auth Fields via
				Element:code
					bundle.auth_fields
				Element:a
					#
			Node:
			(type) c
			(layer)1
				Element:p
					The
				Element:code
					bundle.auth_fields
					is a javascript object that matches the authentication settings provided by the user when the API is connected. For example, if you have an
				Element:a
					authentication field
					of
				Element:code
					api_key
					and
				Element:code
					subdomain
					you can expect:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
					{
				Element:span
					"api_key"
				Element:span
					:
				Element:span
					"fc5e038d38a57032085441e7fe7010b0"
				Element:span
					,
				Element:span
					"subdomain"
				Element:span
					:
				Element:span
					"example"
				Element:span
					}
			Node:
			(type) c
			(layer)1
				Element:a
			Node:
			(type) c
			(layer)1
				Element:h3
					Rendered Fields via
				Element:code
					bundle.trigger_fields
					or
				Element:code
					bundle.action_fields
				Element:a
					#
			Node:
			(type) c
			(layer)1
				Element:p
					Both
				Element:code
					bundle.trigger_fields
					and
				Element:code
					bundle.action_fields
					are javascript objects that surface the data given by a user to power a part of a zap. This is after rendering
				Element:code
					{{curlies}}
					. These follow the
				Element:a
					trigger fields
					or
				Element:a
					action fields
					you define. For example, maybe you have a field with a key
				Element:code
					list_id
					and
				Element:code
					name
					:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
					{
				Element:span
					"list_id"
				Element:span
					:
				Element:span
					"1234"
				Element:span
					,
				Element:span
					"name"
				Element:span
					:
				Element:span
					"Joe Blow"
				Element:span
					}
			Node:
			(type) c
			(layer)1
				Element:p
					For actions, this will prune out any fields you chose not to send in the JSON. Use
				Element:code
					bundle.action_fields_full
					if you want them included as well.
			Node:
			(type) c
			(layer)1
				Element:a
			Node:
			(type) c
			(layer)1
				Element:h3
					Raw Fields via
				Element:code
					bundle.trigger_fields_raw
					or
				Element:code
					bundle.action_fields_raw
				Element:a
					#
			Node:
			(type) c
			(layer)1
				Element:p
					Both
				Element:code
					bundle.trigger_fields_raw
					or
				Element:code
					bundle.action_fields_raw
					are javascript objects that surface the data given by a user to power a part of a zap. This is before rendering
				Element:code
					{{curlies}}
					. These follow the
				Element:a
					trigger fields
					or
				Element:a
					action fields
					you define. For example, maybe you have a field with a key
				Element:code
					list_id
					:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
					{
				Element:span
					"list_id"
				Element:span
					:
				Element:span
					"1234"
				Element:span
					,
				Element:span
					"name"
				Element:span
					:
				Element:span
					"{{first_name}} {{last_name}}"
				Element:span
					}
			Node:
			(type) c
			(layer)1
				Element:p
					For actions, this will prune out any fields you chose not to send in the JSON.
			Node:
			(type) c
			(layer)1
				Element:a
			Node:
			(type) c
			(layer)1
				Element:h3
					Trigger Details via
				Element:code
					bundle.trigger_data
				Element:a
					#
			Node:
			(type) c
			(layer)1
				Element:p
					This is deprecated and will be going away entirely soon. Instead, use standard
				Element:a
					Action Fields
					which the user maps, to access trigger data.
			Node:
			(type) c
			(layer)1
				Element:a
			Node:
			(type) c
			(layer)1
				Element:h3
					Webhook Payload via
				Element:code
					bundle.cleaned_request
				Element:a
					#
			Node:
			(type) c
			(layer)1
				Element:p
					The
				Element:code
					bundle.cleaned_request
					is our best guess at the parsed payload. We do our best to parse JSON, XML and form-encoded data into respective javascript objects. If we cannot parse it correctly - look into
				Element:code
					bundle.request.content
					and parse it yourself.
			Node:
			(type) c
			(layer)1
				Element:a
			Node:
			(type) c
			(layer)1
				Element:h3
					Zap Details via
				Element:code
					bundle.zap
				Element:a
					#
			Node:
			(type) c
			(layer)1
				Element:p
					The
				Element:code
					bundle.zap
					object contains extra information about the zap (FYI: you may not see this information in debug bundles until the
				Element:code
					zap
					is referenced at least once in your script):
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
					{
				Element:span
					"name"
				Element:span
					:
				Element:span
					"My Fancy Zap Title"
				Element:span
					,
				Element:span
					"live"
				Element:span
					:
				Element:span
					false
				Element:span
					,
				Element:span
					"link"
				Element:span
					:
				Element:span
					"https://zapier.com/app/edit/12345"
				Element:span
					,
				Element:span
					"user"
				Element:span
					:
				Element:span
					{
				Element:span
					"timezone"
				Element:span
					:
				Element:span
					"America/Denver"
				Element:span
					,
				Element:span
					},
				Element:span
					}
			Node:
			(type) c
			(layer)1
				Element:p
					You can access the information like this:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
					var
				Element:span
					Zap
				Element:span
					=
				Element:span
					{
				Element:span
					any_old_pre_poll
				Element:span
					:
				Element:span
					function
				Element:span
					(
				Element:span
					bundle
				Element:span
					)
				Element:span
					{
				Element:span
					var
				Element:span
					zap
				Element:span
					=
				Element:span
					bundle
				Element:span
					.
				Element:span
					zap
				Element:span
					;
				Element:span
					var
				Element:span
					message
				Element:span
					=
				Element:span
					'The Zap title is '
				Element:span
					+
				Element:span
					zap
				Element:span
					.
				Element:span
					name
				Element:span
					'!'
				Element:span
					;
				Element:span
					// message == "The Zap title is My Fancy Zap Title!"
				Element:span
					return
				Element:span
					bundle
				Element:span
					.
				Element:span
					request
				Element:span
					;
				Element:span
					}
				Element:span
					}
			Node:
			(type) c
			(layer)1
				Element:a
			Node:
			(type) c
			(layer)1
				Element:h3
					Extra Request Info via
				Element:code
					bundle.meta
				Element:a
					#
			Node:
			(type) c
			(layer)1
				Element:p
					The
				Element:code
					bundle.meta
					object contains some runtime information about the Zap which you can use.
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
					{
				Element:span
					"frontend"
				Element:span
					:
				Element:span
					true
				Element:span
					,
				Element:span
					// if true, it's being done through the Zap editor/setup
				Element:span
					"prefill"
				Element:span
					:
				Element:span
					false
				Element:span
					,
				Element:span
					// if true, this poll is running as a prefill (dynamic dropdown)
				Element:span
					// for another poll
				Element:span
					"filter"
				Element:span
					:
				Element:span
					false
				Element:span
					,
				Element:span
					// if true, this poll will be filtered afterwards
				Element:span
					"hydrate"
				Element:span
					:
				Element:span
					true
				Element:span
					,
				Element:span
					// if true, the results from this poll will be hydrated
				Element:span
					"limit"
				Element:span
					:
				Element:span
					5
				Element:span
					,
				Element:span
					// how many items you should limit the API call to for
				Element:span
					// performance reasons. a value of -1 means not limited
				Element:span
					"test_poll"
				Element:span
					:
				Element:span
					false
				Element:span
					,
				Element:span
					// if true, means this API call came from the user
				Element:span
					// testing their account in the UI
				Element:span
					"standard_poll"
				Element:span
					:
				Element:span
					true
				Element:span
					,
				Element:span
					// opposite of bundle.meta.test_poll
				Element:span
					"first_poll"
				Element:span
					:
				Element:span
					false
				Element:span
					,
				Element:span
					// if true, means this API call is our initial check for
				Element:span
					// items in the API when the Zap is turned on
				Element:span
					"page"
				Element:span
					:
				Element:span
					0
				Element:span
					// which page of API results you should return, useful for
				Element:span
					// paging backwards for dynamic dropdowns. It is 0-indexed
				Element:span
					// (add 1 via JS if your paging scheme is 1-indexed)
				Element:span
					// note this is only available for dynamic dropdowns,
				Element:span
					// when bundle.meta.frontend === true
				Element:span
					}
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
					Use bundle.meta.page to implement pagination - this is especially important for triggers that power dropdowns.
			Node:
			(type) c
			(layer)1
				Element:p
					You can access the information for limited pagination features like this:
			Node:
			(type) c
			(layer)1
				Element:pre
					â†‘ Was this documentation useful?
				Element:span
					var
				Element:span
					Zap
				Element:span
					=
				Element:span
					{
				Element:span
					any_old_pre_poll
				Element:span
					:
				Element:span
					function
				Element:span
					(
				Element:span
					bundle
				Element:span
					)
				Element:span
					{
				Element:span
					// adds ?page=0 to URL querystring
				Element:span
					bundle
				Element:span
					.
				Element:span
					request
				Element:span
					.
				Element:span
					params
				Element:span
					.
				Element:span
					page
				Element:span
					=
				Element:span
					bundle
				Element:span
					.
				Element:span
					meta
				Element:span
					.
				Element:span
					page
				Element:span
					return
				Element:span
					bundle
				Element:span
					.
				Element:span
					request
				Element:span
					;
				Element:span
					}
				Element:span
					}
			Node:
			(type) c
			(layer)1
				Element:span
				Element:a
					Yes
				Element:a
					No
			Node:
			(type) c
			(layer)1
				Element:a
			Node:
			(type) h1
			(layer)1
				Element:h1
					Available Exceptions
				Element:a
					#
			Node:
			(type) c
			(layer)1
				Element:p
					In scripting, you have several exception classes at your disposal. Most are used for communicating errors to the user, but a couple do some more interesting bits. See the specifics of each class to find out more.
			Node:
			(type) c
			(layer)1
				Element:a
			Node:
			(type) c
			(layer)1
				Element:h2
					General Errors
				Element:a
					#
			Node:
			(type) c
			(layer)1
				Element:p
					The most rudimentary exception class is the
				Element:code
					ErrorException
					. Use it in situations where the user has something misconfigured with their Zap and will need to take action. Typically, this will be for prettifying
				Element:code
					4xx
					responses and API's that return errors as
				Element:code
					200
					with a payload that describes the error.
			Node:
			(type) c
			(layer)1
				Element:p
					Example:
				Element:code
					throw new ErrorException('Your error message.');
			Node:
			(type) c
			(layer)1
				Element:p
					Note that if a Zap raises too many error messages it will be automatically turned off, so only use these if the scenario is truly an error that needs to be fixed.
			Node:
			(type) c
			(layer)1
				Element:a
			Node:
			(type) c
			(layer)1
				Element:h2
					Halting Execution
				Element:a
					#
			Node:
			(type) c
			(layer)1
				Element:p
					Any method can be interrupted or "halted" (not success, not error, but stopped for some specific reason) with a
				Element:code
					HaltedException
					. You might find yourself using this exception in cases where a required pre-condition is not met. For example, in an action to add notes to a contact where contacts are searched for by email address, you would want to throw a
				Element:code
					HaltedException
					if a contact was not found. Unlike the
				Element:code
					ErrorException
					, a Zap will never by turned off when this exception is raised (even if it is raised more often than not).
			Node:
			(type) c
			(layer)1
				Element:p
					Example:
				Element:code
					throw new HaltedException('Your reason.');
			Node:
			(type) c
			(layer)1
				Element:p
					Any pre_XXX call can be interrupted
				Element:strong
					silently
					with
				Element:code
					StopRequestException
					. This will prevent the request from being made and will never cause a user's Zap to be turned off.
			Node:
			(type) c
			(layer)1
				Element:p
					Example:
				Element:code
					throw new StopRequestException('Your reason.');
			Node:
			(type) c
			(layer)1
				Element:a
			Node:
			(type) c
			(layer)1
				Element:h2
					Stale Authentication Credentials
				Element:a
					#
			Node:
			(type) c
			(layer)1
				Element:p
					For apps that require manual refresh of authorization on a regular basis, we provide a mechanism to notify users of expired credentials. With the
				Element:code
					ExpiredAuthException
					, the current call is interrupted, the zap is turned off (to prevent more calls with expired credentials), and a predefined email is sent out informing the user to refresh the credentials.
			Node:
			(type) c
			(layer)1
				Element:p
					Example:
				Element:code
					throw new ExpiredAuthException('Your message.');
			Node:
			(type) c
			(layer)1
				Element:p
					For apps that use OAuth, but do not return a typical 401 when tokens expire, you can use the
				Element:code
					RefreshTokenException
					in a post_XXX. This will signal Zapier to attempt to refresh the access token and then repeat the failed call.
			Node:
			(type) c
			(layer)1
				Element:p
					Example:
				Element:code
					throw new RefreshTokenException();
			Node:
			(type) c
			(layer)1
				Element:a
			Node:
			(type) c
			(layer)1
				Element:h2
					Updating Session Credentials
				Element:a
					#
			Node:
			(type) c
			(layer)1
				Element:p
					For session-based APIs only, stale authorization credentials can be refreshed by throwing the
					â†‘ Was this documentation useful?
				Element:code
					InvalidSessionException
					. This will tell Zapier to invoke your provided
				Element:code
					get_session_info()
					function. Zapier will store these results for you and make them available to every
				Element:code
					poll
					and
				Element:code
					write
					.
			Node:
			(type) c
			(layer)1
				Element:span
				Element:a
					Yes
				Element:a
					No
			Node:
			(type) c
			(layer)1
				Element:a
			Node:
			(type) h1
			(layer)1
				Element:h1
					Code Examples
				Element:a
					#
			Node:
			(type) c
			(layer)1
				Element:a
			Node:
			(type) c
			(layer)1
				Element:h2
					Trigger Pre-Poll Examples
				Element:a
					#
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
					"use strict"
				Element:span
					;
				Element:span
					var
				Element:span
					Zap
				Element:span
					=
				Element:span
					{
				Element:span
					// STRAIGHT PASS THROUGH
				Element:span
					// same as not providing the method at all
				Element:span
					// for illustration purposes only
				Element:span
					simple_pre_poll
				Element:span
					:
				Element:span
					function
				Element:span
					(
				Element:span
					bundle
				Element:span
					)
				Element:span
					{
				Element:span
					return
				Element:span
					bundle
				Element:span
					.
				Element:span
					request
				Element:span
					;
				Element:span
					},
				Element:span
					// PLACE A HEADER BASED ON USER INPUT
				Element:span
					// a trigger field that should be added as a header but
				Element:span
					// if there isn't one, default to "None"
				Element:span
					some_header_pre_poll
				Element:span
					:
				Element:span
					function
				Element:span
					(
				Element:span
					bundle
				Element:span
					)
				Element:span
					{
				Element:span
					var
				Element:span
					request
				Element:span
					=
				Element:span
					bundle
				Element:span
					.
				Element:span
					request
				Element:span
					;
				Element:span
					request
				Element:span
					.
				Element:span
					headers
				Element:span
					[
				Element:span
					"X-Project-ID"
				Element:span
					]
				Element:span
					=
				Element:span
					bundle
				Element:span
					.
				Element:span
					trigger_fields
				Element:span
					.
				Element:span
					project_id
				Element:span
					||
				Element:span
					"None"
				Element:span
					;
				Element:span
					return
				Element:span
					request
				Element:span
					;
				Element:span
					},
				Element:span
					// SUBSTITUTE HUMAN FRIENDLY CHOICES
				Element:span
					// if you add a trigger field with human friendly choices:
				Element:span
					// Yesterday,Today,Tomorrow
				Element:span
					// but the querystring should be:
				Element:span
					// &when=-1, &when=0, or &when=1
				Element:span
					event_pre_poll
				Element:span
					:
				Element:span
					function
				Element:span
					(
				Element:span
					bundle
				Element:span
					)
				Element:span
					{
				Element:span
					var
				Element:span
					request
				Element:span
					=
				Element:span
					bundle
				Element:span
					.
				Element:span
					request
				Element:span
					;
				Element:span
					switch
				Element:span
					(
				Element:span
					bundle
				Element:span
					.
				Element:span
					trigger_fields
				Element:span
					.
				Element:span
					when
				Element:span
					)
				Element:span
					{
				Element:span
					case
				Element:span
					"Yesterday"
				Element:span
					:
				Element:span
					request
				Element:span
					.
				Element:span
					params
				Element:span
					.
				Element:span
					when
				Element:span
					=
				Element:span
					-
				Element:span
					1
				Element:span
					;
				Element:span
					break
				Element:span
					;
				Element:span
					case
				Element:span
					"Today"
				Element:span
					:
				Element:span
					request
				Element:span
					.
				Element:span
					params
				Element:span
					.
				Element:span
					when
				Element:span
					=
				Element:span
					0
				Element:span
					;
				Element:span
					break
				Element:span
					;
				Element:span
					default
				Element:span
					:
				Element:span
					request
				Element:span
					.
				Element:span
					params
				Element:span
					.
				Element:span
					when
				Element:span
					=
				Element:span
					1
				Element:span
					;
				Element:span
					}
				Element:span
					return
				Element:span
					request
				Element:span
					;
				Element:span
					},
				Element:span
					// BUILD THE URL YOURSELF
				Element:span
					// this does exactly what we do when transforming the URL
				Element:span
					// from bundle.url_raw to bundle.request.url
				Element:span
					// utilizes underscores template system (preloaded with proper syntax)
				Element:span
					room_pre_poll
				Element:span
					:
				Element:span
					function
				Element:span
					(
				Element:span
					bundle
				Element:span
					)
				Element:span
					{
				Element:span
					var
				Element:span
					request
				Element:span
					=
				Element:span
					bundle
				Element:span
					.
				Element:span
					request
				Element:span
					;
				Element:span
					// bundle.url_raw is 'http://.campfirenow.com/room//speak.json'
				Element:span
					// bundle.auth_fields is {account_name: 'myaccount', api_key: '1234567890'}
				Element:span
					request
				Element:span
					.
				Element:span
					url
				Element:span
					=
				Element:span
					_
				Element:span
					.
				Element:span
					template
				Element:span
					(
				Element:span
					bundle
				Element:span
					.
				Element:span
					url_raw
				Element:span
					)(
				Element:span
					bundle
				Element:span
					.
				Element:span
					auth_fields
				Element:span
					);
				Element:span
					// request.url is 'http://myaccount.campfirenow.com/room//speak.json'
				Element:span
					// bundle.auth_fields is {room_id: 12345, message: 'Hello world!'}
				Element:span
					request
				Element:span
					.
				Element:span
					url
				Element:span
					=
				Element:span
					_
				Element:span
					.
				Element:span
					template
				Element:span
					(
				Element:span
					request
				Element:span
					.
				Element:span
					url
				Element:span
					)(
				Element:span
					bundle
				Element:span
					.
				Element:span
					trigger_fields
				Element:span
					);
				Element:span
					// request.url is 'http://myaccount.campfirenow.com/room/12345/speak.json'
				Element:span
					return
				Element:span
					request
				Element:span
					;
				Element:span
					}
				Element:span
					}
			Node:
			(type) c
			(layer)1
				Element:a
			Node:
			(type) c
			(layer)1
				Element:h2
					Trigger Post-Poll Examples
				Element:a
					#
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
					"use strict"
				Element:span
					;
				Element:span
					var
				Element:span
					Zap
				Element:span
					=
				Element:span
					{
				Element:span
					// STRAIGHT PASS THROUGH OF JSON
				Element:span
					// same as not providing the method at all
				Element:span
					// for illustration purposes only
				Element:span
					straight_post_poll
				Element:span
					:
				Element:span
					function
				Element:span
					(
				Element:span
					bundle
				Element:span
					)
				Element:span
					{
				Element:span
					// bundle.response.content is '[{"id":1234,"title":"Hello!"}, ... ]'
				Element:span
					return
				Element:span
					JSON
				Element:span
					.
				Element:span
					parse
				Element:span
					(
				Element:span
					bundle
				Element:span
					.
				Element:span
					response
				Element:span
					.
				Element:span
					content
				Element:span
					);
				Element:span
					},
				Element:span
					// CENTS INTO DOLLARS
				Element:span
					// take a key in cents and offer it up as a dollar formatted string
				Element:span
					sale_post_poll
				Element:span
					:
				Element:span
					function
				Element:span
					(
				Element:span
					bundle
				Element:span
					)
				Element:span
					{
				Element:span
					// bundle.response.content is '[{"id":1234,"cents":925}, ... ]'
				Element:span
					var
				Element:span
					results
				Element:span
					=
				Element:span
					JSON
				Element:span
					.
				Element:span
					parse
				Element:span
					(
				Element:span
					bundle
				Element:span
					.
				Element:span
					response
				Element:span
					.
				Element:span
					content
				Element:span
					);
				Element:span
					_
				Element:span
					.
				Element:span
					each
				Element:span
					(
				Element:span
					results
				Element:span
					,
				Element:span
					function
				Element:span
					(
				Element:span
					result
				Element:span
					)
				Element:span
					{
				Element:span
					result
				Element:span
					.
				Element:span
					dollars
				Element:span
					=
				Element:span
					"$"
				Element:span
					+
				Element:span
					(
				Element:span
					Math
				Element:span
					.
				Element:span
					floor
				Element:span
					(
				Element:span
					result
				Element:span
					.
				Element:span
					cents
				Element:span
					/
				Element:span
					100
				Element:span
					))
				Element:span
					+
				Element:span
					"."
				Element:span
					+
				Element:span
					(
				Element:span
					result
				Element:span
					.
				Element:span
					cents
				Element:span
					%
				Element:span
					100
				Element:span
					);
				Element:span
					})
				Element:span
					// results is '[{"id":1234,"cents":925,"dollars":"$9.25"}, ... ]'
				Element:span
					return
				Element:span
					results
				Element:span
					;
				Element:span
					},
				Element:span
					// XML INTO JSON
				Element:span
					// given an string of xml data, turn that into JSON:
				Element:span
					// <messages type="array">
				Element:span
					// <message>
				Element:span
					// <id type="integer">2</id>
				Element:span
					// <title>Anyone home?</title>
				Element:span
					// <body>I can't seem to see anything!</body>
				Element:span
					// </message>
				Element:span
					// <message>
				Element:span
					// <id type="integer">1</id>
				Element:span
					// <title>Hello there world!</title>
				Element:span
					// <body>I am just tickled to see you!</body>
				Element:span
					// </message>
				Element:span
					// </messages>
				Element:span
					my_xml_doc_post_poll
				Element:span
					:
				Element:span
					function
				Element:span
					(
				Element:span
					bundle
				Element:span
					)
				Element:span
					{
				Element:span
					// bundle.response.content is xml string from API, $ is preloaded jQuery
				Element:span
					var
				Element:span
					xml
				Element:span
					=
				Element:span
					$
				Element:span
					(
				Element:span
					$
				Element:span
					.
				Element:span
					parseXML
				Element:span
					(
				Element:span
					bundle
				Element:span
					.
				Element:span
					response
				Element:span
					.
				Element:span
					content
				Element:span
					)).
				Element:span
					find
				Element:span
					(
				Element:span
					'message'
				Element:span
					);
				Element:span
					// build javascript primitives: array of objects
				Element:span
					var
				Element:span
					results
				Element:span
					=
				Element:span
					_
				Element:span
					.
				Element:span
					map
				Element:span
					(
				Element:span
					xml
				Element:span
					,
				Element:span
					function
				Element:span
					(
				Element:span
					element
				Element:span
					){
				Element:span
					return
				Element:span
					{
				Element:span
					id
				Element:span
					:
				Element:span
					$
				Element:span
					(
				Element:span
					element
				Element:span
					).
				Element:span
					find
				Element:span
					(
				Element:span
					'id'
				Element:span
					).
				Element:span
					text
				Element:span
					(),
				Element:span
					title
				Element:span
					:
				Element:span
					$
				Element:span
					(
				Element:span
					element
				Element:span
					).
				Element:span
					find
				Element:span
					(
				Element:span
					'title'
				Element:span
					).
				Element:span
					text
				Element:span
					(),
				Element:span
					body
				Element:span
					:
				Element:span
					$
				Element:span
					(
				Element:span
					element
				Element:span
					).
				Element:span
					find
				Element:span
					(
				Element:span
					'body'
				Element:span
					).
				Element:span
					text
				Element:span
					()
				Element:span
					};
				Element:span
					});
				Element:span
					// results is '[{"id":"2","title":"Anyone home?","body":"I can't seem to see anything!"}, ... ]'
				Element:span
					return
				Element:span
					results
				Element:span
					;
				Element:span
					}
				Element:span
					}
			Node:
			(type) c
			(layer)1
				Element:a
			Node:
			(type) c
			(layer)1
				Element:h2
					Catching Webhooks Example
				Element:a
					#
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
					"use strict"
				Element:span
					;
				Element:span
					var
				Element:span
					Zap
				Element:span
					=
				Element:span
					{
				Element:span
					// STRAIGHT PASS THROUGH OF CLEANED_REQUEST
				Element:span
					// same as not providing the method at all
				Element:span
					// for illustration purposes only
				Element:span
					straight_catch_hook
				Element:span
					:
				Element:span
					function
				Element:span
					(
				Element:span
					bundle
				Element:span
					)
				Element:span
					{
				Element:span
					// bundle.cleaned_request is usually an object or array
				Element:span
					return
				Element:span
					bundle
				Element:span
					.
				Element:span
					cleaned_request
				Element:span
					;
				Element:span
					},
				Element:span
					// PLACE QUERY STRING AS MAIN OBJECT
				Element:span
					// in this example our hook is just a GET with a query string
				Element:span
					// there is no request content or body, maybe a url like this:
				Element:span
					// GET https://zapier.com//hooks/catch/123/n/456789/?name=bryan&age=27
				Element:span
					simple_get_catch_hook
				Element:span
					:
				Element:span
					function
				Element:span
					(
				Element:span
					bundle
				Element:span
					)
				Element:span
					{
				Element:span
					// bundle.cleaned_request includes the query string already parsed
				Element:span
					// but you could parse it yourself from bundle.request.querystring:
				Element:span
					var
				Element:span
					example
				Element:span
					=
				Element:span
					$
				Element:span
					.
				Element:span
					param
				Element:span
					(
				Element:span
					bundle
				Element:span
					.
				Element:span
					request
				Element:span
					.
				Element:span
					querystring
				Element:span
					);
				Element:span
					// but let's just return the cleaned_request version:
				Element:span
					return
				Element:span
					bundle
				Element:span
					.
				Element:span
					cleaned_request
				Element:span
					.
				Element:span
					querystring
				Element:span
					;
				Element:span
					// {"name":"bryan","age":27}
				Element:span
					},
				Element:span
					// MOVE LIST ON SUBKEY TO MAIN OBJECT
				Element:span
					// if a json POST contains a list on a root object's key "data"
				Element:span
					// we can move the list to the parent to trigger for each item
				Element:span
					// the content/body might look like:
				Element:span
					// {"data":[{"name":"bryan","age":27},{"name":"mike","age":23}]}
				Element:span
					myjson_catch_hook
				Element:span
					:
				Element:span
					function
				Element:span
					(
				Element:span
					bundle
				Element:span
					)
				Element:span
					{
				Element:span
					// bundle.cleaned_request includes the json already parsed
				Element:span
					// but you could parse it yourself from bundle.request.content:
				Element:span
					var
				Element:span
					example
				Element:span
					=
				Element:span
					JSON
				Element:span
					.
				Element:span
					parse
				Element:span
					(
				Element:span
					bundle
				Element:span
					.
				Element:span
					request
				Element:span
					.
				Element:span
					content
				Element:span
					).
				Element:span
					data
				Element:span
					;
				Element:span
					// but let's just return the cleaned_request version:
				Element:span
					return
				Element:span
					bundle
				Element:span
					.
				Element:span
					cleaned_request
				Element:span
					.
				Element:span
					data
				Element:span
					;
				Element:span
					// the array
				Element:span
					}
				Element:span
					// FILTER OUT CERTAIN STATIC WEBHOOKS
				Element:span
					// if your hooks are noisy, then you may want to filter based on
				Element:span
					// some static value, or even user provided trigger fields
				Element:span
					filter_out_catch_hook
				Element:span
					:
				Element:span
					function
				Element:span
					(
				Element:span
					bundle
				Element:span
					)
				Element:span
					{
				Element:span
					// manually create json from the posted string
				Element:span
					var
				Element:span
					json
				Element:span
					=
				Element:span
					JSON
				Element:span
					.
				Element:span
					parse
				Element:span
					(
				Element:span
					bundle
				Element:span
					.
				Element:span
					request
				Element:span
					.
				Element:span
					content
				Element:span
					);
				Element:span
					// filter out hooks that aren't the event type we care about
				Element:span
					if
				Element:span
					(
				Element:span
					json
				Element:span
					.
				Element:span
					event_type
				Element:span
					!=
				Element:span
					'new_comment'
				Element:span
					)
				Element:span
					{
				Element:span
					return
				Element:span
					[];
				Element:span
					// return [] or {} to take no action
				Element:span
					}
				Element:span
					// filter out hooks that aren't the status that the user expected
				Element:span
					if
				Element:span
					(
				Element:span
					bundle
				Element:span
					.
				Element:span
					trigger_fields
				Element:span
					.
				Element:span
					status
				Element:span
					&&
				Element:span
					json
				Element:span
					.
				Element:span
					status
				Element:span
					!=
				Element:span
					bundle
				Element:span
					.
				Element:span
					trigger_fields
				Element:span
					.
				Element:span
					status
				Element:span
					)
				Element:span
					{
				Element:span
					return
				Element:span
					[];
				Element:span
					// return [] or {} to take no action
				Element:span
					}
				Element:span
					// else
				Element:span
					return
				Element:span
					json
				Element:span
					;
				Element:span
					},
				Element:span
					}
			Node:
			(type) c
			(layer)1
				Element:a
			Node:
			(type) c
			(layer)1
				Element:h2
					Action Pre-Write Examples
				Element:a
					#
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
					"use strict"
				Element:span
					;
				Element:span
					var
				Element:span
					Zap
				Element:span
					=
				Element:span
					{
				Element:span
					// STRAIGHT PASS THROUGH
				Element:span
					// same as not providing the method at all
				Element:span
					// for illustration purposes only
				Element:span
					pass_through_pre_write
				Element:span
					:
				Element:span
					function
				Element:span
					(
				Element:span
					bundle
				Element:span
					)
				Element:span
					{
				Element:span
					return
				Element:span
					bundle
				Element:span
					.
				Element:span
					request
				Element:span
					;
				Element:span
					},
				Element:span
					// DO NOT UNFLATTEN __
				Element:span
					// by default we will turn fields like {custom__c: 12}
				Element:span
					// into {custom: {c: 12}}, but this can avoid this by
				Element:span
					// using the "full" action fields, like this
				Element:span
					dont_unwrap_pre_write
				Element:span
					:
				Element:span
					function
				Element:span
					(
				Element:span
					bundle
				Element:span
					)
				Element:span
					{
				Element:span
					bundle
				Element:span
					.
				Element:span
					request
				Element:span
					.
				Element:span
					data
				Element:span
					=
				Element:span
					JSON
				Element:span
					.
				Element:span
					stringify
				Element:span
					(
				Element:span
					bundle
				Element:span
					.
				Element:span
					action_fields_full
				Element:span
					);
				Element:span
					return
				Element:span
					bundle
				Element:span
					.
				Element:span
					request
				Element:span
					;
				Element:span
					},
				Element:span
					// LIMIT STRING LENGTH
				Element:span
					// a field called message cannot be longer than 256 characters
				Element:span
					message_pre_write
				Element:span
					:
				Element:span
					function
				Element:span
					(
				Element:span
					bundle
				Element:span
					)
				Element:span
					{
				Element:span
					var
				Element:span
					outbound
				Element:span
					=
				Element:span
					JSON
				Element:span
					.
				Element:span
					parse
				Element:span
					(
				Element:span
					bundle
				Element:span
					.
				Element:span
					request
				Element:span
					.
				Element:span
					data
				Element:span
					);
				Element:span
					outbound
				Element:span
					.
				Element:span
					message
				Element:span
					=
				Element:span
					outbound
				Element:span
					.
				Element:span
					message
				Element:span
					.
				Element:span
					substring
				Element:span
					(
				Element:span
					0
				Element:span
					,
				Element:span
					256
				Element:span
					);
				Element:span
					bundle
				Element:span
					.
				Element:span
					request
				Element:span
					.
				Element:span
					data
				Element:span
					=
				Element:span
					JSON
				Element:span
					.
				Element:span
					stringify
				Element:span
					(
				Element:span
					outbound
				Element:span
					);
				Element:span
					return
				Element:span
					bundle
				Element:span
					.
				Element:span
					request
				Element:span
					;
				Element:span
					},
				Element:span
					// GENERATE XML FOR POSTING
				Element:span
					// you'll have access to your action fields
				Element:span
					// we'd normally POST as JSON, but this shows how to do XML
				Element:span
					xml_doc_pre_write
				Element:span
					:
				Element:span
					function
				Element:span
					(
				Element:span
					bundle
				Element:span
					)
				Element:span
					{
				Element:span
					// root el is ignored in .html()
				Element:span
					var
				Element:span
					xml
				Element:span
					=
				Element:span
					$
				Element:span
					(
				Element:span
					"<XMLDocument><message/></XMLDocument>"
				Element:span
					);
				Element:span
					// bundle.action_fields is {title: "Anyone home?", body: "I can't seem to see anything!"}
				Element:span
					_
				Element:span
					.
				Element:span
					each
				Element:span
					(
				Element:span
					bundle
				Element:span
					.
				Element:span
					action_fields
				Element:span
					,
				Element:span
					function
				Element:span
					(
				Element:span
					value
				Element:span
					,
				Element:span
					key
				Element:span
					){
				Element:span
					$
				Element:span
					(
				Element:span
					xml
				Element:span
					.
				Element:span
					find
				Element:span
					(
				Element:span
					"message"
				Element:span
					)).
				Element:span
					append
				Element:span
					(
				Element:span
					$
				Element:span
					(
				Element:span
					"<"
				Element:span
					+
				Element:span
					key
				Element:span
					+
				Element:span
					" />"
				Element:span
					).
				Element:span
					text
				Element:span
					(
				Element:span
					value
				Element:span
					));
				Element:span
					})
				Element:span
					// '<message><title>Anyone home?</title><body>I can't seem to see anything!</body></message>'
				Element:span
					bundle
				Element:span
					.
				Element:span
					request
				Element:span
					.
				Element:span
					data
				Element:span
					=
				Element:span
					xml
				Element:span
					.
				Element:span
					html
				Element:span
					();
				Element:span
					// set the headers
				Element:span
					bundle
				Element:span
					.
				Element:span
					request
				Element:span
					.
				Element:span
					headers
				Element:span
					[
				Element:span
					'Content-Type'
				Element:span
					]
				Element:span
					=
				Element:span
					"application/xml; charset=utf-8"
				Element:span
					;
				Element:span
					bundle
				Element:span
					.
				Element:span
					request
				Element:span
					.
				Element:span
					headers
				Element:span
					[
				Element:span
					'Accept'
				Element:span
					]
				Element:span
					=
				Element:span
					"application/xml"
				Element:span
					;
				Element:span
					return
				Element:span
					bundle
				Element:span
					.
				Element:span
					request
				Element:span
					;
				Element:span
					},
				Element:span
					// FORM ENCODE INSTEAD OF JSON
				Element:span
					// sometimes you don't want to JSON encode, so this example shows how
				Element:span
					// to form encode POST data instead (just like a form submission)
				Element:span
					my_form_pre_write
				Element:span
					:
				Element:span
					function
				Element:span
					(
				Element:span
					bundle
				Element:span
					)
				Element:span
					{
				Element:span
					// convert incoming JSON to javascript objects
				Element:span
					var
				Element:span
					data
				Element:span
					=
				Element:span
					JSON
				Element:span
					.
				Element:span
					parse
				Element:span
					(
				Element:span
					bundle
				Element:span
					.
				Element:span
					request
				Element:span
					.
				Element:span
					data
				Element:span
					);
				Element:span
					// build a querystring from objects
				Element:span
					bundle
				Element:span
					.
				Element:span
					request
				Element:span
					.
				Element:span
					data
				Element:span
					=
				Element:span
					$
				Element:span
					.
				Element:span
					param
				Element:span
					(
				Element:span
					data
				Element:span
					);
				Element:span
					// correct the content type header
				Element:span
					bundle
				Element:span
					.
				Element:span
					request
				Element:span
					.
				Element:span
					headers
				Element:span
					[
				Element:span
					'Content-Type'
				Element:span
					]
				Element:span
					=
				Element:span
					'application/x-www-form-urlencoded'
				Element:span
					;
				Element:span
					return
				Element:span
					bundle
				Element:span
					.
				Element:span
					request
				Element:span
					;
				Element:span
					}
				Element:span
					}
			Node:
			(type) c
			(layer)1
				Element:a
			Node:
			(type) c
			(layer)1
				Element:h2
					REST Hook Subscription Examples
				Element:a
					#
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
					var
				Element:span
					Zap
				Element:span
					=
				Element:span
					{
				Element:span
					pre_subscribe
				Element:span
					:
				Element:span
					function
				Element:span
					(
				Element:span
					bundle
				Element:span
					)
				Element:span
					{
				Element:span
					bundle
				Element:span
					.
				Element:span
					request
				Element:span
					.
				Element:span
					method
				Element:span
					=
				Element:span
					'POST'
				Element:span
					;
				Element:span
					bundle
				Element:span
					.
				Element:span
					request
				Element:span
					.
				Element:span
					headers
				Element:span
					[
				Element:span
					'Content-Type'
				Element:span
					]
				Element:span
					=
				Element:span
					'application/x-www-form-urlencoded'
				Element:span
					;
				Element:span
					bundle
				Element:span
					.
				Element:span
					request
				Element:span
					.
				Element:span
					data
				Element:span
					=
				Element:span
					$
				Element:span
					.
				Element:span
					param
				Element:span
					({
				Element:span
					url
				Element:span
					:
				Element:span
					bundle
				Element:span
					.
				Element:span
					target_url
				Element:span
					,
				Element:span
					list_id
				Element:span
					:
				Element:span
					bundle
				Element:span
					.
				Element:span
					trigger_fields
				Element:span
					.
				Element:span
					list_id
				Element:span
					,
				Element:span
					// from trigger field
				Element:span
					append_data
				Element:span
					:
				Element:span
					1
				Element:span
					});
				Element:span
					return
				Element:span
					bundle
				Element:span
					.
				Element:span
					request
				Element:span
					;
				Element:span
					},
				Element:span
					post_subscribe
				Element:span
					:
				Element:span
					function
				Element:span
					(
				Element:span
					bundle
				Element:span
					)
				Element:span
					{
				Element:span
					// must return a json serializable object for use in pre_unsubscribe
				Element:span
					data
				Element:span
					=
				Element:span
					JSON
				Element:span
					.
				Element:span
					parse
				Element:span
					(
				Element:span
					bundle
				Element:span
					.
				Element:span
					response
				Element:span
					.
				Element:span
					content
				Element:span
					);
				Element:span
					// we need this in order to build the {{webhook_id}}
				Element:span
					// in the rest hook unsubscribe url
				Element:span
					return
				Element:span
					{
				Element:span
					webhook_id
				Element:span
					:
				Element:span
					data
				Element:span
					.
				Element:span
					id
				Element:span
					};
				Element:span
					},
				Element:span
					pre_unsubscribe
				Element:span
					:
				Element:span
					function
				Element:span
					(
				Element:span
					bundle
				Element:span
					)
				Element:span
					{
				Element:span
					bundle
				Element:span
					.
				Element:span
					request
				Element:span
					.
				Element:span
					method
				Element:span
					=
				Element:span
					'DELETE'
				Element:span
					;
				Element:span
					// bundle.subscribe_data is from return date in post_subscribe method
				Element:span
					bundle
				Element:span
					.
				Element:span
					request
				Element:span
					.
				Element:span
					url
				Element:span
					=
				Element:span
					'https://example.com/x.php?id='
				Element:span
					+
				Element:span
					bundle
				Element:span
					.
				Element:span
					subscribe_data
				Element:span
					.
				Element:span
					webhook_id
				Element:span
					;
				Element:span
					bundle
				Element:span
					.
				Element:span
					request
				Element:span
					.
				Element:span
					data
				Element:span
					=
				Element:span
					null
				Element:span
					;
				Element:span
					return
				Element:span
					bundle
				Element:span
					.
				Element:span
					request
				Element:span
					;
				Element:span
					},
				Element:span
					};
			Node:
			(type) c
			(layer)1
				Element:a
			Node:
			(type) c
			(layer)1
				Element:h2
					Session Auth Examples
				Element:a
					#
			Node:
			(type) c
			(layer)1
				Element:pre
					â†‘ Was this documentation useful?
				Element:span
					Zap
				Element:span
					=
				Element:span
					{
				Element:span
					get_session_info
				Element:span
					:
				Element:span
					function
				Element:span
					(
				Element:span
					bundle
				Element:span
					)
				Element:span
					{
				Element:span
					var
				Element:span
					api_key
				Element:span
					,
				Element:span
					api_key_request_payload
				Element:span
					,
				Element:span
					api_key_response
				Element:span
					;
				Element:span
					// Assemble the meta data for our key swap request
				Element:span
					api_key_request_payload
				Element:span
					=
				Element:span
					{
				Element:span
					method
				Element:span
					:
				Element:span
					'POST'
				Element:span
					,
				Element:span
					url
				Element:span
					:
				Element:span
					'https://api.domain-name.com/api/login'
				Element:span
					,
				Element:span
					params
				Element:span
					:
				Element:span
					bundle
				Element:span
					.
				Element:span
					auth_fields
				Element:span
					,
				Element:span
					headers
				Element:span
					:
				Element:span
					{
				Element:span
					'Content-Type'
				Element:span
					:
				Element:span
					'application/json'
				Element:span
					,
				Element:span
					// Could be anything.
				Element:span
					Accept
				Element:span
					:
				Element:span
					'application/json'
				Element:span
					}
				Element:span
					};
				Element:span
					// Fire off the key exchange request.
				Element:span
					api_key_response
				Element:span
					=
				Element:span
					z
				Element:span
					.
				Element:span
					request
				Element:span
					(
				Element:span
					api_key_request_payload
				Element:span
					);
				Element:span
					// Extract the `api_key` from returned JSON.
				Element:span
					api_key
				Element:span
					=
				Element:span
					JSON
				Element:span
					.
				Element:span
					parse
				Element:span
					(
				Element:span
					api_key_response
				Element:span
					.
				Element:span
					content
				Element:span
					).
				Element:span
					api_key
				Element:span
					;
				Element:span
					// This structure is an example. You may need to add
				Element:span
					// a different key name, or multiple keys, depending
				Element:span
					// on your API's requirements.
				Element:span
					// This will be mixed into bundle.auth_fields in future calls.
				Element:span
					return
				Element:span
					{
				Element:span
					'api_key'
				Element:span
					:
				Element:span
					api_key
				Element:span
					};
				Element:span
					},
				Element:span
					new_contact_post_poll
				Element:span
					:
				Element:span
					function
				Element:span
					(
				Element:span
					bundle
				Element:span
					)
				Element:span
					{
				Element:span
					if
				Element:span
					(
				Element:span
					bundle
				Element:span
					.
				Element:span
					response
				Element:span
					.
				Element:span
					status_code
				Element:span
					===
				Element:span
					401
				Element:span
					)
				Element:span
					{
				Element:span
					throw
				Element:span
					new
				Element:span
					InvalidSessionException
				Element:span
					();
				Element:span
					// So we can recall get_session_info
				Element:span
					}
				Element:span
					return
				Element:span
					JSON
				Element:span
					.
				Element:span
					parse
				Element:span
					(
				Element:span
					bundle
				Element:span
					.
				Element:span
					response
				Element:span
					.
				Element:span
					content
				Element:span
					);
				Element:span
					}
				Element:span
					};
			Node:
			(type) c
			(layer)1
				Element:span
				Element:a
					Yes
				Element:a
					No
			Node:
			(type) c
			(layer)1
				Element:a
			Node:
			(type) h1
			(layer)1
				Element:h1
					Debugging
				Element:a
					#
			Node:
			(type) c
			(layer)1
				Element:p
					By far the easiest way to debug is to use the standard
				Element:a
					Request Log
					console to track requests (which includes a rudimentary JavaScript Exception catcher). We also have a Bundle Logs option, you can access both from the scripting platform:
			Node:
			(type) c
			(layer)1
				Element:p
				Element:img
			Node:
			(type) c
			(layer)1
				Element:p
					The ability to log to a console that you can view live. Similar to your browser, logging something is simple as:
			Node:
			(type) c
			(layer)1
				Element:pre
				Element:span
					console
				Element:span
					.
				Element:span
					log
				Element:span
					(
				Element:span
					'hello world!'
				Element:span
					);
				Element:span
					console
				Element:span
					.
				Element:span
					log
				Element:span
					({
				Element:span
					id
				Element:span
					:
				Element:span
					1234
				Element:span
					,
				Element:span
					name
				Element:span
					:
				Element:span
					'Bob Smith'
				Element:span
					});
			Node:
			(type) c
			(layer)1
				Element:p
					And then, from the Code Editor you can open the bundle log console and watch logs come in live:
			Node:
			(type) c
			(layer)1
				Element:p
				Element:img
			Node:
			(type) c
			(layer)1
				Element:blockquote
				Element:p
				Element:em
					Warning: If you try to use
				Element:code
					console.log()
					with a large object, all logs before and including that one will be removed and only logs after it will show. You should avoid logging potentially large objects.
			Node:
			(type) c
			(layer)1
				Element:p
					Unlike your browser, if your function generates an error after
				Element:code
					console.log(...)
					, it will not show up in the console.
			Node:
			(type) c
			(layer)1
				Element:p
					To mitigate the possibility of an error after
				Element:code
					console.log(...)
					, you should return early. Keep in mind, you need to return an object of the expected format for that function type.
			Node:
			(type) c
			(layer)1
				Element:pre
					â†‘ Was this documentation useful?
				Element:span
					Zap
				Element:span
					=
				Element:span
					{
				Element:span
					TRIGGERKEY_pre_poll
				Element:span
					:
				Element:span
					function
				Element:span
					(
				Element:span
					bundle
				Element:span
					)
				Element:span
					{
				Element:span
					console
				Element:span
					.
				Element:span
					log
				Element:span
					(
				Element:span
					'my error'
				Element:span
					);
				Element:span
					return
				Element:span
					bundle
				Element:span
					.
				Element:span
					request
				Element:span
					;
				Element:span
					// expected return format for pre poll functions
				Element:span
					}
				Element:span
					TRIGGERKEY_post_poll
				Element:span
					:
				Element:span
					function
				Element:span
					(
				Element:span
					bundle
				Element:span
					)
				Element:span
					{
				Element:span
					console
				Element:span
					.
				Element:span
					log
				Element:span
					(
				Element:span
					'my error'
				Element:span
					);
				Element:span
					return
				Element:span
					[];
				Element:span
					// expected return format for post poll functions
				Element:span
					}
				Element:span
					}
			Node:
			(type) c
			(layer)1
				Element:span
				Element:a
					Yes
				Element:a
					No
			Node:
			(type) c
			(layer)1
				Element:a
			Node:
			(type) h1
			(layer)1
				Element:h1
					Editor Keyboard Shortcuts
				Element:a
					#
			Node:
			(type) c
			(layer)1
				Element:p
					Below is a list of available keyboard shortcuts you can use while in the Scripting Editor:
			Node:
			(type) c
			(layer)1
				Element:p
				Element:strong
					Select All
				Element:code
					Ctrl-A
					(PC)
				Element:code
					Cmd-A
					(Mac)
			Node:
			(type) c
			(layer)1
				Element:p
					Select the whole content of the editor.
			Node:
			(type) c
			(layer)1
				Element:p
				Element:strong
					Save
				Element:code
					Ctrl-S
					(PC)
				Element:code
					Cmd-S
					(Mac)
			Node:
			(type) c
			(layer)1
				Element:p
					Saves the current content of the editor.
			Node:
			(type) c
			(layer)1
				Element:p
				Element:strong
					Undo
				Element:code
					Ctrl-Z
					(PC)
				Element:code
					Cmd-Z
					(Mac)
			Node:
			(type) c
			(layer)1
				Element:p
					Undo the last change.
			Node:
			(type) c
			(layer)1
				Element:p
				Element:strong
					Redo
				Element:code
					Ctrl-Y
					(PC)
				Element:code
					Cmd-Y
					(Mac)
			Node:
			(type) c
			(layer)1
				Element:p
					Redo the last undone change.
			Node:
			(type) c
			(layer)1
				Element:p
				Element:strong
					Undo Selection
				Element:code
					Ctrl-U
					(PC)
				Element:code
					Cmd-U
					(Mac)
			Node:
			(type) c
			(layer)1
				Element:p
					Undo the last change to the selection, or if there are no selection-only changes at the top of the history, undo the last change.
			Node:
			(type) c
			(layer)1
				Element:p
				Element:strong
					Redo Selection
				Element:code
					Alt-U
					(PC)
				Element:code
					Shift-Cmd-U
					(Mac)
			Node:
			(type) c
			(layer)1
				Element:p
					Redo the last change to the selection, or the last text change if no selection changes remain.
			Node:
			(type) c
			(layer)1
				Element:a
			Node:
			(type) c
			(layer)1
				Element:h2
					Movement
				Element:a
					#
			Node:
			(type) c
			(layer)1
				Element:p
				Element:strong
					Jump to Doc Start
				Element:code
					Ctrl-Up
					(PC),
				Element:code
					Cmd-Up
					(Mac)
			Node:
			(type) c
			(layer)1
				Element:p
					Move the cursor to the start of the document.
			Node:
			(type) c
			(layer)1
				Element:p
				Element:strong
					Jump to Doc End
				Element:code
					Ctrl-Down
					(PC)
				Element:code
					Cmd-Down
					(Mac)
			Node:
			(type) c
			(layer)1
				Element:p
					Move the cursor to the end of the document.
			Node:
			(type) c
			(layer)1
				Element:p
				Element:strong
					Jump to Start of Line
				Element:code
					Alt-Left
					(PC)
				Element:code
					Cmd-Left
					(Mac)
			Node:
			(type) c
			(layer)1
				Element:p
					Move the cursor to the start of the line.
			Node:
			(type) c
			(layer)1
				Element:p
				Element:strong
					Jump to Start of Line Smart
				Element:code
					Home
			Node:
			(type) c
			(layer)1
				Element:p
					Move to the start of the text on the line, or if we are already there, to the actual start of the line (including whitespace).
			Node:
			(type) c
			(layer)1
				Element:p
				Element:strong
					Jump to Line End
				Element:code
					Alt-Right
					(PC)
				Element:code
					Cmd-Right
					(Mac)
			Node:
			(type) c
			(layer)1
				Element:p
					Move the cursor to the end of the line.
			Node:
			(type) c
			(layer)1
				Element:p
				Element:strong
					Move Left a Group
				Element:code
					Ctrl-Left
					(PC),
				Element:code
					Alt-Left
					(Mac)
			Node:
			(type) c
			(layer)1
				Element:p
					Move to the left of the group before the cursor. A group is a stretch of word characters, a stretch of punctuation characters, a newline, or a stretch of more than one whitespace character.
			Node:
			(type) c
			(layer)1
				Element:p
				Element:strong
					Move Right a Group
				Element:code
					Ctrl-Right
					(PC)
				Element:code
					Alt-Right
					(Mac)
			Node:
			(type) c
			(layer)1
				Element:p
					Move to the right of the group after the cursor (see above).
			Node:
			(type) c
			(layer)1
				Element:a
			Node:
			(type) c
			(layer)1
				Element:h2
					Search
				Element:a
					#
			Node:
			(type) c
			(layer)1
				Element:p
				Element:strong
					Find
				Element:code
					Ctrl-F
					(PC)
				Element:code
					Cmd-F
					(Mac)
			Node:
			(type) c
			(layer)1
				Element:p
					Typical search, with the added bonus of being able to do regular expressions.
			Node:
			(type) c
			(layer)1
				Element:p
				Element:strong
					Find Next
				Element:code
					Ctrl-G
					(PC)
				Element:code
					Cmd-G
					(Mac)
			Node:
			(type) c
			(layer)1
				Element:p
					After you perform a search, use to jump to the next match.
			Node:
			(type) c
			(layer)1
				Element:p
				Element:strong
					Find Previous
				Element:code
					Shift-Ctrl-G
					(PC)
				Element:code
					Shift-Cmd-G
					(Mac)
			Node:
			(type) c
			(layer)1
				Element:p
					After you perform a search, use to jump to the previous match.
			Node:
			(type) c
			(layer)1
				Element:p
				Element:strong
					Replace
				Element:code
					Shift-Ctrl-F
					(PC)
				Element:code
					Cmd-Alt-F
					(Mac)
			Node:
			(type) c
			(layer)1
				Element:p
					Perform a replace. Use the buttons to move through the matches.
			Node:
			(type) c
			(layer)1
				Element:p
				Element:strong
					Replace All
				Element:code
					Shift-Ctrl-R
					(PC)
				Element:code
					Shift-Cmd-Alt-F
					(Mac)
			Node:
			(type) c
			(layer)1
				Element:p
					Perform a replace on every match (no confirmation).
			Node:
			(type) c
			(layer)1
				Element:a
			Node:
			(type) c
			(layer)1
				Element:h2
					Delete
				Element:a
					#
			Node:
			(type) c
			(layer)1
				Element:p
				Element:strong
					Kill Line
				Element:code
					Ctrl-K
					(Mac only)
			Node:
			(type) c
			(layer)1
				Element:p
					Emacs-style line killing. Deletes the part of the line after the cursor. If that consists only of whitespace, the newline at the end of the line is also deleted.
			Node:
			(type) c
			(layer)1
				Element:p
				Element:strong
					Delete Line
				Element:code
					Ctrl-D
					(PC)
				Element:code
					Cmd-D
					(Mac)
			Node:
			(type) c
			(layer)1
				Element:p
					Deletes the whole line under the cursor, including newline at the end.
			Node:
			(type) c
			(layer)1
				Element:p
				Element:strong
					Delete Group Before
				Element:code
					Ctrl-Backspace
					(PC)
				Element:code
					Alt-Backspace
					(Mac)
			Node:
			(type) c
			(layer)1
				Element:p
					Delete to the left of the group before the cursor.
			Node:
			(type) c
			(layer)1
				Element:p
				Element:strong
					Delete Group After
				Element:code
					Ctrl-Delete
					(PC)
				Element:code
					Alt-Delete
					(Mac)
			Node:
			(type) c
			(layer)1
				Element:p
					Delete to the start of the group after the cursor.
			Node:
			(type) c
			(layer)1
				Element:a
			Node:
			(type) c
			(layer)1
				Element:h2
					Indent
				Element:a
					#
			Node:
			(type) c
			(layer)1
				Element:p
				Element:strong
					Auto Indent
				Element:code
					Shift-Tab
			Node:
			(type) c
			(layer)1
				Element:p
					Auto-indent the current line or selection.
			Node:
			(type) c
			(layer)1
				Element:p
				Element:strong
					Indent More
				Element:code
					Ctrl-]
					(PC)
				Element:code
					Cmd-]
					(Mac)
			Node:
			(type) c
			(layer)1
				Element:p
					Indent the current line or selection by one indent unit.
			Node:
			(type) c
			(layer)1
				Element:p
				Element:strong
					Indent Less
				Element:code
					Ctrl-[
					(PC)
				Element:code
					Cmd-[
					(Mac)
			Node:
			(type) c
			(layer)1
				Element:p
					Dedent the current line or selection by one indent unit.
					â†‘ Was this documentation useful?
			Node:
			(type) c
			(layer)1
				Element:span
					Can't find what you're looking for? We'd love to help.
				Element:a
					Yes
				Element:a
					No
			Node:
			(type) c
			(layer)1
				Element:a
					Send us a message
					. Get Help
			Node:
			(type) c
			(layer)1
				Element:noscript
				Element:img
